
vpet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00020774  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000045a8  08020914  08020914  00030914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08024ebc  08024ebc  00040348  2**0
                  CONTENTS
  4 .ARM          00000008  08024ebc  08024ebc  00034ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08024ec4  08024ec4  00040348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08024ec4  08024ec4  00034ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08024ecc  08024ecc  00034ecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000348  20000000  08024ed0  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000854  20000348  08025218  00040348  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b9c  08025218  00040b9c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040348  2**0
                  CONTENTS, READONLY
 12 .debug_info   001ae8e6  00000000  00000000  00040378  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00015f1c  00000000  00000000  001eec5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000096e0  00000000  00000000  00204b80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00029ee0  00000000  00000000  0020e260  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0005eb02  00000000  00000000  00238140  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0013b300  00000000  00000000  00296c42  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  003d1f42  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 000092b8  00000000  00000000  003d1fc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  0002c818  00000000  00000000  003db278  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000348 	.word	0x20000348
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080208fc 	.word	0x080208fc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000034c 	.word	0x2000034c
 80001dc:	080208fc 	.word	0x080208fc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2uiz>:
 8000b3c:	004a      	lsls	r2, r1, #1
 8000b3e:	d211      	bcs.n	8000b64 <__aeabi_d2uiz+0x28>
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d211      	bcs.n	8000b6a <__aeabi_d2uiz+0x2e>
 8000b46:	d50d      	bpl.n	8000b64 <__aeabi_d2uiz+0x28>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d40e      	bmi.n	8000b70 <__aeabi_d2uiz+0x34>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b6e:	d102      	bne.n	8000b76 <__aeabi_d2uiz+0x3a>
 8000b70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b74:	4770      	bx	lr
 8000b76:	f04f 0000 	mov.w	r0, #0
 8000b7a:	4770      	bx	lr

08000b7c <__aeabi_uldivmod>:
 8000b7c:	b953      	cbnz	r3, 8000b94 <__aeabi_uldivmod+0x18>
 8000b7e:	b94a      	cbnz	r2, 8000b94 <__aeabi_uldivmod+0x18>
 8000b80:	2900      	cmp	r1, #0
 8000b82:	bf08      	it	eq
 8000b84:	2800      	cmpeq	r0, #0
 8000b86:	bf1c      	itt	ne
 8000b88:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b8c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b90:	f000 b972 	b.w	8000e78 <__aeabi_idiv0>
 8000b94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b9c:	f000 f806 	bl	8000bac <__udivmoddi4>
 8000ba0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba8:	b004      	add	sp, #16
 8000baa:	4770      	bx	lr

08000bac <__udivmoddi4>:
 8000bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb0:	9e08      	ldr	r6, [sp, #32]
 8000bb2:	4604      	mov	r4, r0
 8000bb4:	4688      	mov	r8, r1
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d14b      	bne.n	8000c52 <__udivmoddi4+0xa6>
 8000bba:	428a      	cmp	r2, r1
 8000bbc:	4615      	mov	r5, r2
 8000bbe:	d967      	bls.n	8000c90 <__udivmoddi4+0xe4>
 8000bc0:	fab2 f282 	clz	r2, r2
 8000bc4:	b14a      	cbz	r2, 8000bda <__udivmoddi4+0x2e>
 8000bc6:	f1c2 0720 	rsb	r7, r2, #32
 8000bca:	fa01 f302 	lsl.w	r3, r1, r2
 8000bce:	fa20 f707 	lsr.w	r7, r0, r7
 8000bd2:	4095      	lsls	r5, r2
 8000bd4:	ea47 0803 	orr.w	r8, r7, r3
 8000bd8:	4094      	lsls	r4, r2
 8000bda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bde:	0c23      	lsrs	r3, r4, #16
 8000be0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000be4:	fa1f fc85 	uxth.w	ip, r5
 8000be8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bec:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bf0:	fb07 f10c 	mul.w	r1, r7, ip
 8000bf4:	4299      	cmp	r1, r3
 8000bf6:	d909      	bls.n	8000c0c <__udivmoddi4+0x60>
 8000bf8:	18eb      	adds	r3, r5, r3
 8000bfa:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000bfe:	f080 811b 	bcs.w	8000e38 <__udivmoddi4+0x28c>
 8000c02:	4299      	cmp	r1, r3
 8000c04:	f240 8118 	bls.w	8000e38 <__udivmoddi4+0x28c>
 8000c08:	3f02      	subs	r7, #2
 8000c0a:	442b      	add	r3, r5
 8000c0c:	1a5b      	subs	r3, r3, r1
 8000c0e:	b2a4      	uxth	r4, r4
 8000c10:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c14:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c1c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c20:	45a4      	cmp	ip, r4
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x8c>
 8000c24:	192c      	adds	r4, r5, r4
 8000c26:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c2a:	f080 8107 	bcs.w	8000e3c <__udivmoddi4+0x290>
 8000c2e:	45a4      	cmp	ip, r4
 8000c30:	f240 8104 	bls.w	8000e3c <__udivmoddi4+0x290>
 8000c34:	3802      	subs	r0, #2
 8000c36:	442c      	add	r4, r5
 8000c38:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c3c:	eba4 040c 	sub.w	r4, r4, ip
 8000c40:	2700      	movs	r7, #0
 8000c42:	b11e      	cbz	r6, 8000c4c <__udivmoddi4+0xa0>
 8000c44:	40d4      	lsrs	r4, r2
 8000c46:	2300      	movs	r3, #0
 8000c48:	e9c6 4300 	strd	r4, r3, [r6]
 8000c4c:	4639      	mov	r1, r7
 8000c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c52:	428b      	cmp	r3, r1
 8000c54:	d909      	bls.n	8000c6a <__udivmoddi4+0xbe>
 8000c56:	2e00      	cmp	r6, #0
 8000c58:	f000 80eb 	beq.w	8000e32 <__udivmoddi4+0x286>
 8000c5c:	2700      	movs	r7, #0
 8000c5e:	e9c6 0100 	strd	r0, r1, [r6]
 8000c62:	4638      	mov	r0, r7
 8000c64:	4639      	mov	r1, r7
 8000c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6a:	fab3 f783 	clz	r7, r3
 8000c6e:	2f00      	cmp	r7, #0
 8000c70:	d147      	bne.n	8000d02 <__udivmoddi4+0x156>
 8000c72:	428b      	cmp	r3, r1
 8000c74:	d302      	bcc.n	8000c7c <__udivmoddi4+0xd0>
 8000c76:	4282      	cmp	r2, r0
 8000c78:	f200 80fa 	bhi.w	8000e70 <__udivmoddi4+0x2c4>
 8000c7c:	1a84      	subs	r4, r0, r2
 8000c7e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c82:	2001      	movs	r0, #1
 8000c84:	4698      	mov	r8, r3
 8000c86:	2e00      	cmp	r6, #0
 8000c88:	d0e0      	beq.n	8000c4c <__udivmoddi4+0xa0>
 8000c8a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c8e:	e7dd      	b.n	8000c4c <__udivmoddi4+0xa0>
 8000c90:	b902      	cbnz	r2, 8000c94 <__udivmoddi4+0xe8>
 8000c92:	deff      	udf	#255	; 0xff
 8000c94:	fab2 f282 	clz	r2, r2
 8000c98:	2a00      	cmp	r2, #0
 8000c9a:	f040 808f 	bne.w	8000dbc <__udivmoddi4+0x210>
 8000c9e:	1b49      	subs	r1, r1, r5
 8000ca0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ca4:	fa1f f885 	uxth.w	r8, r5
 8000ca8:	2701      	movs	r7, #1
 8000caa:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cae:	0c23      	lsrs	r3, r4, #16
 8000cb0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cb4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb8:	fb08 f10c 	mul.w	r1, r8, ip
 8000cbc:	4299      	cmp	r1, r3
 8000cbe:	d907      	bls.n	8000cd0 <__udivmoddi4+0x124>
 8000cc0:	18eb      	adds	r3, r5, r3
 8000cc2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cc6:	d202      	bcs.n	8000cce <__udivmoddi4+0x122>
 8000cc8:	4299      	cmp	r1, r3
 8000cca:	f200 80cd 	bhi.w	8000e68 <__udivmoddi4+0x2bc>
 8000cce:	4684      	mov	ip, r0
 8000cd0:	1a59      	subs	r1, r3, r1
 8000cd2:	b2a3      	uxth	r3, r4
 8000cd4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cdc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ce0:	fb08 f800 	mul.w	r8, r8, r0
 8000ce4:	45a0      	cmp	r8, r4
 8000ce6:	d907      	bls.n	8000cf8 <__udivmoddi4+0x14c>
 8000ce8:	192c      	adds	r4, r5, r4
 8000cea:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cee:	d202      	bcs.n	8000cf6 <__udivmoddi4+0x14a>
 8000cf0:	45a0      	cmp	r8, r4
 8000cf2:	f200 80b6 	bhi.w	8000e62 <__udivmoddi4+0x2b6>
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	eba4 0408 	sub.w	r4, r4, r8
 8000cfc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d00:	e79f      	b.n	8000c42 <__udivmoddi4+0x96>
 8000d02:	f1c7 0c20 	rsb	ip, r7, #32
 8000d06:	40bb      	lsls	r3, r7
 8000d08:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d0c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d10:	fa01 f407 	lsl.w	r4, r1, r7
 8000d14:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d18:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d1c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d20:	4325      	orrs	r5, r4
 8000d22:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d26:	0c2c      	lsrs	r4, r5, #16
 8000d28:	fb08 3319 	mls	r3, r8, r9, r3
 8000d2c:	fa1f fa8e 	uxth.w	sl, lr
 8000d30:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d34:	fb09 f40a 	mul.w	r4, r9, sl
 8000d38:	429c      	cmp	r4, r3
 8000d3a:	fa02 f207 	lsl.w	r2, r2, r7
 8000d3e:	fa00 f107 	lsl.w	r1, r0, r7
 8000d42:	d90b      	bls.n	8000d5c <__udivmoddi4+0x1b0>
 8000d44:	eb1e 0303 	adds.w	r3, lr, r3
 8000d48:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d4c:	f080 8087 	bcs.w	8000e5e <__udivmoddi4+0x2b2>
 8000d50:	429c      	cmp	r4, r3
 8000d52:	f240 8084 	bls.w	8000e5e <__udivmoddi4+0x2b2>
 8000d56:	f1a9 0902 	sub.w	r9, r9, #2
 8000d5a:	4473      	add	r3, lr
 8000d5c:	1b1b      	subs	r3, r3, r4
 8000d5e:	b2ad      	uxth	r5, r5
 8000d60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d64:	fb08 3310 	mls	r3, r8, r0, r3
 8000d68:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d6c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d70:	45a2      	cmp	sl, r4
 8000d72:	d908      	bls.n	8000d86 <__udivmoddi4+0x1da>
 8000d74:	eb1e 0404 	adds.w	r4, lr, r4
 8000d78:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d7c:	d26b      	bcs.n	8000e56 <__udivmoddi4+0x2aa>
 8000d7e:	45a2      	cmp	sl, r4
 8000d80:	d969      	bls.n	8000e56 <__udivmoddi4+0x2aa>
 8000d82:	3802      	subs	r0, #2
 8000d84:	4474      	add	r4, lr
 8000d86:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d8a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d8e:	eba4 040a 	sub.w	r4, r4, sl
 8000d92:	454c      	cmp	r4, r9
 8000d94:	46c2      	mov	sl, r8
 8000d96:	464b      	mov	r3, r9
 8000d98:	d354      	bcc.n	8000e44 <__udivmoddi4+0x298>
 8000d9a:	d051      	beq.n	8000e40 <__udivmoddi4+0x294>
 8000d9c:	2e00      	cmp	r6, #0
 8000d9e:	d069      	beq.n	8000e74 <__udivmoddi4+0x2c8>
 8000da0:	ebb1 050a 	subs.w	r5, r1, sl
 8000da4:	eb64 0403 	sbc.w	r4, r4, r3
 8000da8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dac:	40fd      	lsrs	r5, r7
 8000dae:	40fc      	lsrs	r4, r7
 8000db0:	ea4c 0505 	orr.w	r5, ip, r5
 8000db4:	e9c6 5400 	strd	r5, r4, [r6]
 8000db8:	2700      	movs	r7, #0
 8000dba:	e747      	b.n	8000c4c <__udivmoddi4+0xa0>
 8000dbc:	f1c2 0320 	rsb	r3, r2, #32
 8000dc0:	fa20 f703 	lsr.w	r7, r0, r3
 8000dc4:	4095      	lsls	r5, r2
 8000dc6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dca:	fa21 f303 	lsr.w	r3, r1, r3
 8000dce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dd2:	4338      	orrs	r0, r7
 8000dd4:	0c01      	lsrs	r1, r0, #16
 8000dd6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000dda:	fa1f f885 	uxth.w	r8, r5
 8000dde:	fb0e 3317 	mls	r3, lr, r7, r3
 8000de2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000de6:	fb07 f308 	mul.w	r3, r7, r8
 8000dea:	428b      	cmp	r3, r1
 8000dec:	fa04 f402 	lsl.w	r4, r4, r2
 8000df0:	d907      	bls.n	8000e02 <__udivmoddi4+0x256>
 8000df2:	1869      	adds	r1, r5, r1
 8000df4:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000df8:	d22f      	bcs.n	8000e5a <__udivmoddi4+0x2ae>
 8000dfa:	428b      	cmp	r3, r1
 8000dfc:	d92d      	bls.n	8000e5a <__udivmoddi4+0x2ae>
 8000dfe:	3f02      	subs	r7, #2
 8000e00:	4429      	add	r1, r5
 8000e02:	1acb      	subs	r3, r1, r3
 8000e04:	b281      	uxth	r1, r0
 8000e06:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e0a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e12:	fb00 f308 	mul.w	r3, r0, r8
 8000e16:	428b      	cmp	r3, r1
 8000e18:	d907      	bls.n	8000e2a <__udivmoddi4+0x27e>
 8000e1a:	1869      	adds	r1, r5, r1
 8000e1c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e20:	d217      	bcs.n	8000e52 <__udivmoddi4+0x2a6>
 8000e22:	428b      	cmp	r3, r1
 8000e24:	d915      	bls.n	8000e52 <__udivmoddi4+0x2a6>
 8000e26:	3802      	subs	r0, #2
 8000e28:	4429      	add	r1, r5
 8000e2a:	1ac9      	subs	r1, r1, r3
 8000e2c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e30:	e73b      	b.n	8000caa <__udivmoddi4+0xfe>
 8000e32:	4637      	mov	r7, r6
 8000e34:	4630      	mov	r0, r6
 8000e36:	e709      	b.n	8000c4c <__udivmoddi4+0xa0>
 8000e38:	4607      	mov	r7, r0
 8000e3a:	e6e7      	b.n	8000c0c <__udivmoddi4+0x60>
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	e6fb      	b.n	8000c38 <__udivmoddi4+0x8c>
 8000e40:	4541      	cmp	r1, r8
 8000e42:	d2ab      	bcs.n	8000d9c <__udivmoddi4+0x1f0>
 8000e44:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e48:	eb69 020e 	sbc.w	r2, r9, lr
 8000e4c:	3801      	subs	r0, #1
 8000e4e:	4613      	mov	r3, r2
 8000e50:	e7a4      	b.n	8000d9c <__udivmoddi4+0x1f0>
 8000e52:	4660      	mov	r0, ip
 8000e54:	e7e9      	b.n	8000e2a <__udivmoddi4+0x27e>
 8000e56:	4618      	mov	r0, r3
 8000e58:	e795      	b.n	8000d86 <__udivmoddi4+0x1da>
 8000e5a:	4667      	mov	r7, ip
 8000e5c:	e7d1      	b.n	8000e02 <__udivmoddi4+0x256>
 8000e5e:	4681      	mov	r9, r0
 8000e60:	e77c      	b.n	8000d5c <__udivmoddi4+0x1b0>
 8000e62:	3802      	subs	r0, #2
 8000e64:	442c      	add	r4, r5
 8000e66:	e747      	b.n	8000cf8 <__udivmoddi4+0x14c>
 8000e68:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e6c:	442b      	add	r3, r5
 8000e6e:	e72f      	b.n	8000cd0 <__udivmoddi4+0x124>
 8000e70:	4638      	mov	r0, r7
 8000e72:	e708      	b.n	8000c86 <__udivmoddi4+0xda>
 8000e74:	4637      	mov	r7, r6
 8000e76:	e6e9      	b.n	8000c4c <__udivmoddi4+0xa0>

08000e78 <__aeabi_idiv0>:
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop

08000e7c <_ZN4tama5Vec2dplES0_>:
//

#include "Vec2d.h"

tama::Vec2d tama::Vec2d::operator+(tama::Vec2d delta)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	4639      	mov	r1, r7
 8000e88:	e881 000c 	stmia.w	r1, {r2, r3}
    return Vec2d(this->x + delta.x, this->y + delta.y);
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	18d1      	adds	r1, r2, r3
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	685a      	ldr	r2, [r3, #4]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	68f8      	ldr	r0, [r7, #12]
 8000ea0:	f000 f804 	bl	8000eac <_ZN4tama5Vec2dC1Eii>
}
 8000ea4:	68f8      	ldr	r0, [r7, #12]
 8000ea6:	3710      	adds	r7, #16
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <_ZN4tama5Vec2dC1Eii>:

tama::Vec2d::Vec2d(int i, int j)
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
{
    x = i;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	68ba      	ldr	r2, [r7, #8]
 8000ebc:	601a      	str	r2, [r3, #0]
    y = j;
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	687a      	ldr	r2, [r7, #4]
 8000ec2:	605a      	str	r2, [r3, #4]
}
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3714      	adds	r7, #20
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
	...

08000ed4 <_ZN4tama4util14fromBottomLeftERKNS_5Vec2dE>:
        {
            return Vec2d(dispWorkspaceLeft + coords.x, coords.y);
        }

        Vec2d fromBottomLeft(const Vec2d &coords)
        {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
            return Vec2d(dispWorkspaceLeft + coords.x, dispWorkspaceBottom + coords.y);
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <_ZN4tama4util14fromBottomLeftERKNS_5Vec2dE+0x30>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	18d1      	adds	r1, r2, r3
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685a      	ldr	r2, [r3, #4]
 8000eec:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <_ZN4tama4util14fromBottomLeftERKNS_5Vec2dE+0x34>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f7ff ffd9 	bl	8000eac <_ZN4tama5Vec2dC1Eii>
        }
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	200000c0 	.word	0x200000c0
 8000f08:	200000c8 	.word	0x200000c8

08000f0c <_ZN4tama4util15fromBottomRightERKNS_5Vec2dE>:

        Vec2d fromBottomRight(const Vec2d &coords)
        {
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	6039      	str	r1, [r7, #0]
            return Vec2d(dispWorkspaceRight + coords.x, dispWorkspaceBottom + coords.y);
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <_ZN4tama4util15fromBottomRightERKNS_5Vec2dE+0x30>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	18d1      	adds	r1, r2, r3
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685a      	ldr	r2, [r3, #4]
 8000f24:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <_ZN4tama4util15fromBottomRightERKNS_5Vec2dE+0x34>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4413      	add	r3, r2
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f7ff ffbd 	bl	8000eac <_ZN4tama5Vec2dC1Eii>
        }
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	200000c4 	.word	0x200000c4
 8000f40:	200000c8 	.word	0x200000c8

08000f44 <_ZN4tama4util12fromTopRightERKNS_5Vec2dE>:

        Vec2d fromTopRight(const Vec2d & coords)
        {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
            return Vec2d(dispWorkspaceRight + coords.x, coords.y);
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <_ZN4tama4util12fromTopRightERKNS_5Vec2dE+0x28>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	18d1      	adds	r1, r2, r3
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f7ff ffa4 	bl	8000eac <_ZN4tama5Vec2dC1Eii>
        }
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	200000c4 	.word	0x200000c4

08000f70 <_ZN4tama4util13fitsInContentERKNS_5Vec2dE>:

        bool fitsInContent(const Vec2d & coords)
        {
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
            return coords.x >= dispWorkspaceLeft && coords.x <= dispWorkspaceRight && coords.y >= 0 && coords.y <= dispWorkspaceBottom;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <_ZN4tama4util13fitsInContentERKNS_5Vec2dE+0x48>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	db11      	blt.n	8000fa8 <_ZN4tama4util13fitsInContentERKNS_5Vec2dE+0x38>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <_ZN4tama4util13fitsInContentERKNS_5Vec2dE+0x4c>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	dc0b      	bgt.n	8000fa8 <_ZN4tama4util13fitsInContentERKNS_5Vec2dE+0x38>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	db07      	blt.n	8000fa8 <_ZN4tama4util13fitsInContentERKNS_5Vec2dE+0x38>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	685a      	ldr	r2, [r3, #4]
 8000f9c:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <_ZN4tama4util13fitsInContentERKNS_5Vec2dE+0x50>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	dc01      	bgt.n	8000fa8 <_ZN4tama4util13fitsInContentERKNS_5Vec2dE+0x38>
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	e000      	b.n	8000faa <_ZN4tama4util13fitsInContentERKNS_5Vec2dE+0x3a>
 8000fa8:	2300      	movs	r3, #0
        }
 8000faa:	4618      	mov	r0, r3
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	200000c0 	.word	0x200000c0
 8000fbc:	200000c4 	.word	0x200000c4
 8000fc0:	200000c8 	.word	0x200000c8

08000fc4 <_ZN4tama4DateC1Ev>:
// Created by grzegorz on 5/8/21.
//

#include "Date.h"

tama::Date::Date()
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	220c      	movs	r2, #12
 8000fd0:	601a      	str	r2, [r3, #0]
{
    day = 1;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	605a      	str	r2, [r3, #4]
    month = 1;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2201      	movs	r2, #1
 8000fdc:	609a      	str	r2, [r3, #8]
}
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <_ZN4tama4TimeC1Ev>:
// Created by grzegorz on 5/8/21.
//

#include "Time.h"

tama::Time::Time()
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	223b      	movs	r2, #59	; 0x3b
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	223b      	movs	r2, #59	; 0x3b
 8000ffe:	605a      	str	r2, [r3, #4]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2217      	movs	r2, #23
 8001004:	609a      	str	r2, [r3, #8]
{
    seconds = 0;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2200      	movs	r2, #0
 800100a:	60da      	str	r2, [r3, #12]
    minutes = 0;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2200      	movs	r2, #0
 8001010:	611a      	str	r2, [r3, #16]
    hours = 12;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	220c      	movs	r2, #12
 8001016:	615a      	str	r2, [r3, #20]
}
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4618      	mov	r0, r3
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr

08001026 <_ZN4tama9GameState8getPetDbEv>:
{
    return datetime;
}

tama::PetDb &tama::GameState::getPetDb()
{
 8001026:	b480      	push	{r7}
 8001028:	b083      	sub	sp, #12
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
    return petDb;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	3354      	adds	r3, #84	; 0x54
}
 8001032:	4618      	mov	r0, r3
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr

0800103e <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800103e:	b480      	push	{r7}
 8001040:	b083      	sub	sp, #12
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
 8001046:	6039      	str	r1, [r7, #0]
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	4618      	mov	r0, r3
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr

08001056 <_ZNKSt4hashIiEclEi>:

  /// Explicit specialization for short.
  _Cxx_hashtable_define_trivial_hash(short)

  /// Explicit specialization for int.
  _Cxx_hashtable_define_trivial_hash(int)
 8001056:	b480      	push	{r7}
 8001058:	b083      	sub	sp, #12
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
 800105e:	6039      	str	r1, [r7, #0]
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	4618      	mov	r0, r3
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr

0800106e <_ZNSt8__detail15_Hash_node_baseC1Ev>:
   */
  struct _Hash_node_base
  {
    _Hash_node_base* _M_nxt;

    _Hash_node_base() noexcept : _M_nxt() { }
 800106e:	b480      	push	{r7}
 8001070:	b083      	sub	sp, #12
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	4618      	mov	r0, r3
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr

0800108a <_ZNKSt8__detail18_Mod_range_hashingclEjj>:
    typedef std::size_t first_argument_type;
    typedef std::size_t second_argument_type;
    typedef std::size_t result_type;

    result_type
    operator()(first_argument_type __num,
 800108a:	b480      	push	{r7}
 800108c:	b085      	sub	sp, #20
 800108e:	af00      	add	r7, sp, #0
 8001090:	60f8      	str	r0, [r7, #12]
 8001092:	60b9      	str	r1, [r7, #8]
 8001094:	607a      	str	r2, [r7, #4]
	       second_argument_type __den) const noexcept
    { return __num % __den; }
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	687a      	ldr	r2, [r7, #4]
 800109a:	fbb3 f2f2 	udiv	r2, r3, r2
 800109e:	6879      	ldr	r1, [r7, #4]
 80010a0:	fb01 f202 	mul.w	r2, r1, r2
 80010a4:	1a9b      	subs	r3, r3, r2
 80010a6:	4618      	mov	r0, r3
 80010a8:	3714      	adds	r7, #20
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <_ZNSt8__detail20_Prime_rehash_policyC1Ef>:
  /// smallest prime that keeps the load factor small enough.
  struct _Prime_rehash_policy
  {
    using __has_load_factor = std::true_type;

    _Prime_rehash_policy(float __z = 1.0) noexcept
 80010b2:	b480      	push	{r7}
 80010b4:	b083      	sub	sp, #12
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
 80010ba:	ed87 0a00 	vstr	s0, [r7]
    : _M_max_load_factor(__z), _M_next_resize(0) { }
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	683a      	ldr	r2, [r7, #0]
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2200      	movs	r2, #0
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4618      	mov	r0, r3
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <_ZNKSt8__detail20_Prime_rehash_policy8_M_stateEv>:
		   std::size_t __n_ins) const;

    typedef std::size_t _State;

    _State
    _M_state() const
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
    { return _M_next_resize; }
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	4618      	mov	r0, r3
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4618      	mov	r0, r3
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr

08001106 <_ZNK4tama13PetIdentifiereqERKS0_>:
    {
        Breed breed;
        PetPhase phase;
        Gender gender;

        bool operator==(const PetIdentifier & Right) const
 8001106:	b480      	push	{r7}
 8001108:	b085      	sub	sp, #20
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
 800110e:	6039      	str	r1, [r7, #0]
        {
            bool x = (breed == Right.breed && phase == Right.phase && gender == Right.gender);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	781a      	ldrb	r2, [r3, #0]
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	429a      	cmp	r2, r3
 800111a:	d10d      	bne.n	8001138 <_ZNK4tama13PetIdentifiereqERKS0_+0x32>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	785a      	ldrb	r2, [r3, #1]
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	785b      	ldrb	r3, [r3, #1]
 8001124:	429a      	cmp	r2, r3
 8001126:	d107      	bne.n	8001138 <_ZNK4tama13PetIdentifiereqERKS0_+0x32>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	789a      	ldrb	r2, [r3, #2]
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	789b      	ldrb	r3, [r3, #2]
 8001130:	429a      	cmp	r2, r3
 8001132:	d101      	bne.n	8001138 <_ZNK4tama13PetIdentifiereqERKS0_+0x32>
 8001134:	2301      	movs	r3, #1
 8001136:	e000      	b.n	800113a <_ZNK4tama13PetIdentifiereqERKS0_+0x34>
 8001138:	2300      	movs	r3, #0
 800113a:	73fb      	strb	r3, [r7, #15]
            return x;
 800113c:	7bfb      	ldrb	r3, [r7, #15]
        }
 800113e:	4618      	mov	r0, r3
 8001140:	3714      	adds	r7, #20
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr

0800114a <_ZNK4tama5PetDb7hash_fnclERKNS_13PetIdentifierE>:
    private:
        void initDb();

        struct hash_fn
        {
            std::size_t operator() (const PetIdentifier &node) const
 800114a:	b580      	push	{r7, lr}
 800114c:	b088      	sub	sp, #32
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
 8001152:	6039      	str	r1, [r7, #0]
            {
                std::size_t h1 = std::hash<int>()(node.breed);
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	461a      	mov	r2, r3
 800115a:	f107 0308 	add.w	r3, r7, #8
 800115e:	4611      	mov	r1, r2
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff ff78 	bl	8001056 <_ZNKSt4hashIiEclEi>
 8001166:	61f8      	str	r0, [r7, #28]
                std::size_t h2 = std::hash<int>()(node.gender);
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	789b      	ldrb	r3, [r3, #2]
 800116c:	461a      	mov	r2, r3
 800116e:	f107 030c 	add.w	r3, r7, #12
 8001172:	4611      	mov	r1, r2
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff ff6e 	bl	8001056 <_ZNKSt4hashIiEclEi>
 800117a:	61b8      	str	r0, [r7, #24]
                std::size_t h3 = std::hash<int>()(node.breed);
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	461a      	mov	r2, r3
 8001182:	f107 0310 	add.w	r3, r7, #16
 8001186:	4611      	mov	r1, r2
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff ff64 	bl	8001056 <_ZNKSt4hashIiEclEi>
 800118e:	6178      	str	r0, [r7, #20]

                return h1 ^ h2 ^ h3;
 8001190:	69fa      	ldr	r2, [r7, #28]
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	405a      	eors	r2, r3
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	4053      	eors	r3, r2
            }
 800119a:	4618      	mov	r0, r3
 800119c:	3720      	adds	r7, #32
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKN4tama13PetIdentifierENS3_11PetTexturesEELb1EEEELb1EEC1Ev>:
  /// Specialization using EBO.
  template<int _Nm, typename _Tp>
    struct _Hashtable_ebo_helper<_Nm, _Tp, true>
    : private _Tp
    {
      _Hashtable_ebo_helper() = default;
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b082      	sub	sp, #8
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f000 f8b4 	bl	8001318 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKN4tama13PetIdentifierENS2_11PetTexturesEELb1EEEEC1Ev>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	4618      	mov	r0, r3
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN4tama13PetIdentifierENS3_11PetTexturesEELb1EEEEEC1Ev>:
      using __bucket_type = __node_base*;      
      using __bucket_alloc_type =
	__alloc_rebind<__node_alloc_type, __bucket_type>;
      using __bucket_alloc_traits = std::allocator_traits<__bucket_alloc_type>;

      _Hashtable_alloc() = default;
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b082      	sub	sp, #8
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f7ff ffed 	bl	80011a2 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKN4tama13PetIdentifierENS3_11PetTexturesEELb1EEEELb1EEC1Ev>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	4618      	mov	r0, r3
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <_ZNSt10_HashtableIN4tama13PetIdentifierESt4pairIKS1_NS0_11PetTexturesEESaIS5_ENSt8__detail10_Select1stESt8equal_toIS1_ENS0_5PetDb7hash_fnENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb1ELb0ELb1EEEEC1Ev>:
	  __hashtable_alloc(__node_alloc_type(__a))
      { }

    public:
      // Constructor, destructor, assignment, swap
      _Hashtable() = default;
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b082      	sub	sp, #8
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f7ff ffed 	bl	80011ba <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN4tama13PetIdentifierENS3_11PetTexturesEELb1EEEEEC1Ev>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f103 0218 	add.w	r2, r3, #24
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2201      	movs	r2, #1
 80011ee:	605a      	str	r2, [r3, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	3308      	adds	r3, #8
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff ff3a 	bl	800106e <_ZNSt8__detail15_Hash_node_baseC1Ev>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2200      	movs	r2, #0
 80011fe:	60da      	str	r2, [r3, #12]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3310      	adds	r3, #16
 8001204:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff ff52 	bl	80010b2 <_ZNSt8__detail20_Prime_rehash_policyC1Ef>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2200      	movs	r2, #0
 8001212:	619a      	str	r2, [r3, #24]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	4618      	mov	r0, r3
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <_ZNSt13unordered_mapIN4tama13PetIdentifierENS0_11PetTexturesENS0_5PetDb7hash_fnESt8equal_toIS1_ESaISt4pairIKS1_S2_EEEC1Ev>:
#endif

      //construct/destroy/copy

      /// Default constructor.
      unordered_map() = default;
 800121e:	b580      	push	{r7, lr}
 8001220:	b082      	sub	sp, #8
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff ffd2 	bl	80011d2 <_ZNSt10_HashtableIN4tama13PetIdentifierESt4pairIKS1_NS0_11PetTexturesEESaIS5_ENSt8__detail10_Select1stESt8equal_toIS1_ENS0_5PetDb7hash_fnENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb1ELb0ELb1EEEEC1Ev>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4618      	mov	r0, r3
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <_ZN4tama5PetDbC1Ev>:
//

#include "PetDb.h"


tama::PetDb::PetDb()
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff ffeb 	bl	800121e <_ZNSt13unordered_mapIN4tama13PetIdentifierENS0_11PetTexturesENS0_5PetDb7hash_fnESt8equal_toIS1_ESaISt4pairIKS1_S2_EEEC1Ev>
{
    initDb();
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f000 f81f 	bl	800128c <_ZN4tama5PetDb6initDbEv>
}
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4618      	mov	r0, r3
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <_ZNSt4pairIKN4tama13PetIdentifierENS0_11PetTexturesEEC1IS2_S3_Lb1EEERS2_RKS3_>:
	       enable_if<_PCCP::template
			   _ConstructiblePair<_U1, _U2>()
	                 && _PCCP::template
			   _ImplicitlyConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
      constexpr pair(const _T1& __a, const _T2& __b)
 8001258:	b4b0      	push	{r4, r5, r7}
 800125a:	b085      	sub	sp, #20
 800125c:	af00      	add	r7, sp, #0
 800125e:	60f8      	str	r0, [r7, #12]
 8001260:	60b9      	str	r1, [r7, #8]
 8001262:	607a      	str	r2, [r7, #4]
      : first(__a), second(__b) { }
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	68ba      	ldr	r2, [r7, #8]
 8001268:	8811      	ldrh	r1, [r2, #0]
 800126a:	7892      	ldrb	r2, [r2, #2]
 800126c:	8019      	strh	r1, [r3, #0]
 800126e:	709a      	strb	r2, [r3, #2]
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	1d1c      	adds	r4, r3, #4
 8001276:	4615      	mov	r5, r2
 8001278:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800127a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800127c:	682b      	ldr	r3, [r5, #0]
 800127e:	6023      	str	r3, [r4, #0]
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	4618      	mov	r0, r3
 8001284:	3714      	adds	r7, #20
 8001286:	46bd      	mov	sp, r7
 8001288:	bcb0      	pop	{r4, r5, r7}
 800128a:	4770      	bx	lr

0800128c <_ZN4tama5PetDb6initDbEv>:

void tama::PetDb::initDb()
{
 800128c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800128e:	b091      	sub	sp, #68	; 0x44
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
              &firstMale::baby::frontTwo,
              &firstMale::baby::frontOne,
              &firstMale::baby::frontOne,
              &firstMale::baby::frontOne,
         }
    });
 8001294:	687e      	ldr	r6, [r7, #4]
 8001296:	2300      	movs	r3, #0
 8001298:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 800129c:	2300      	movs	r3, #0
 800129e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 80012a2:	2300      	movs	r3, #0
 80012a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80012a8:	4b0e      	ldr	r3, [pc, #56]	; (80012e4 <_ZN4tama5PetDb6initDbEv+0x58>)
 80012aa:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80012ae:	461d      	mov	r5, r3
 80012b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012b4:	682b      	ldr	r3, [r5, #0]
 80012b6:	6023      	str	r3, [r4, #0]
 80012b8:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80012bc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80012c0:	f107 0310 	add.w	r3, r7, #16
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff ffc7 	bl	8001258 <_ZNSt4pairIKN4tama13PetIdentifierENS0_11PetTexturesEEC1IS2_S3_Lb1EEERS2_RKS3_>
    db.insert({
 80012ca:	f107 0308 	add.w	r3, r7, #8
 80012ce:	f107 0210 	add.w	r2, r7, #16
 80012d2:	4631      	mov	r1, r6
 80012d4:	4618      	mov	r0, r3
 80012d6:	f000 f836 	bl	8001346 <_ZNSt13unordered_mapIN4tama13PetIdentifierENS0_11PetTexturesENS0_5PetDb7hash_fnESt8equal_toIS1_ESaISt4pairIKS1_S2_EEE6insertEOS9_>
}
 80012da:	bf00      	nop
 80012dc:	3744      	adds	r7, #68	; 0x44
 80012de:	46bd      	mov	sp, r7
 80012e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012e2:	bf00      	nop
 80012e4:	08020914 	.word	0x08020914

080012e8 <_ZN4tama5PetDb14getPetTexturesENS_13PetIdentifierE>:

tama::PetTextures tama::PetDb::getPetTextures(tama::PetIdentifier petIdentifier)
{
 80012e8:	b5b0      	push	{r4, r5, r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
    return db.at(petIdentifier);
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	1d3a      	adds	r2, r7, #4
 80012f8:	4611      	mov	r1, r2
 80012fa:	4618      	mov	r0, r3
 80012fc:	f000 f837 	bl	800136e <_ZNSt13unordered_mapIN4tama13PetIdentifierENS0_11PetTexturesENS0_5PetDb7hash_fnESt8equal_toIS1_ESaISt4pairIKS1_S2_EEE2atERS8_>
 8001300:	4602      	mov	r2, r0
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	461c      	mov	r4, r3
 8001306:	4615      	mov	r5, r2
 8001308:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800130a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800130c:	682b      	ldr	r3, [r5, #0]
 800130e:	6023      	str	r3, [r4, #0]
}
 8001310:	68f8      	ldr	r0, [r7, #12]
 8001312:	3710      	adds	r7, #16
 8001314:	46bd      	mov	sp, r7
 8001316:	bdb0      	pop	{r4, r5, r7, pc}

08001318 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKN4tama13PetIdentifierENS2_11PetTexturesEELb1EEEEC1Ev>:
      typedef true_type propagate_on_container_move_assignment;

      typedef true_type is_always_equal;
#endif

      allocator() throw() { }
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f000 f833 	bl	800138c <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN4tama13PetIdentifierENS4_11PetTexturesEELb1EEEEC1Ev>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4618      	mov	r0, r3
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <_ZSt4moveIRSt4pairIKN4tama13PetIdentifierENS1_11PetTexturesEEEONSt16remove_referenceIT_E4typeEOS8_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4618      	mov	r0, r3
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr

08001346 <_ZNSt13unordered_mapIN4tama13PetIdentifierENS0_11PetTexturesENS0_5PetDb7hash_fnESt8equal_toIS1_ESaISt4pairIKS1_S2_EEE6insertEOS9_>:
      { return _M_h.insert(__x); }

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2354. Unnecessary copying when inserting into maps with braced-init
      std::pair<iterator, bool>
      insert(value_type&& __x)
 8001346:	b590      	push	{r4, r7, lr}
 8001348:	b085      	sub	sp, #20
 800134a:	af00      	add	r7, sp, #0
 800134c:	60f8      	str	r0, [r7, #12]
 800134e:	60b9      	str	r1, [r7, #8]
 8001350:	607a      	str	r2, [r7, #4]
      { return _M_h.insert(std::move(__x)); }
 8001352:	68bc      	ldr	r4, [r7, #8]
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f7ff ffeb 	bl	8001330 <_ZSt4moveIRSt4pairIKN4tama13PetIdentifierENS1_11PetTexturesEEEONSt16remove_referenceIT_E4typeEOS8_>
 800135a:	4602      	mov	r2, r0
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	4621      	mov	r1, r4
 8001360:	4618      	mov	r0, r3
 8001362:	f000 f839 	bl	80013d8 <_ZNSt8__detail7_InsertIN4tama13PetIdentifierESt4pairIKS2_NS1_11PetTexturesEESaIS6_ENS_10_Select1stESt8equal_toIS2_ENS1_5PetDb7hash_fnENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb1ELb0ELb1EEELb0EE6insertIS6_vEES3_INS_14_Node_iteratorIS6_Lb0ELb1EEEbEOT_>
 8001366:	68f8      	ldr	r0, [r7, #12]
 8001368:	3714      	adds	r7, #20
 800136a:	46bd      	mov	sp, r7
 800136c:	bd90      	pop	{r4, r7, pc}

0800136e <_ZNSt13unordered_mapIN4tama13PetIdentifierENS0_11PetTexturesENS0_5PetDb7hash_fnESt8equal_toIS1_ESaISt4pairIKS1_S2_EEE2atERS8_>:
       *  @return  A reference to the data whose key is equal to @a __k, if
       *           such a data is present in the %unordered_map.
       *  @throw  std::out_of_range  If no such data is present.
       */
      mapped_type&
      at(const key_type& __k)
 800136e:	b580      	push	{r7, lr}
 8001370:	b082      	sub	sp, #8
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
 8001376:	6039      	str	r1, [r7, #0]
      { return _M_h.at(__k); }
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6839      	ldr	r1, [r7, #0]
 800137c:	4618      	mov	r0, r3
 800137e:	f000 f843 	bl	8001408 <_ZNSt8__detail9_Map_baseIN4tama13PetIdentifierESt4pairIKS2_NS1_11PetTexturesEESaIS6_ENS_10_Select1stESt8equal_toIS2_ENS1_5PetDb7hash_fnENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb1ELb0ELb1EEELb1EE2atERS4_>
 8001382:	4603      	mov	r3, r0
 8001384:	4618      	mov	r0, r3
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}

0800138c <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN4tama13PetIdentifierENS4_11PetTexturesEELb1EEEEC1Ev>:
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	4618      	mov	r0, r3
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr

080013a2 <_ZNSt10_HashtableIN4tama13PetIdentifierESt4pairIKS1_NS0_11PetTexturesEESaIS5_ENSt8__detail10_Select1stESt8equal_toIS1_ENS0_5PetDb7hash_fnENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb1ELb0ELb1EEEE21_M_deallocate_bucketsEv>:
      _M_deallocate_buckets()
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b082      	sub	sp, #8
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6819      	ldr	r1, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	461a      	mov	r2, r3
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f000 f85f 	bl	8001478 <_ZNSt10_HashtableIN4tama13PetIdentifierESt4pairIKS1_NS0_11PetTexturesEESaIS5_ENSt8__detail10_Select1stESt8equal_toIS1_ENS0_5PetDb7hash_fnENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb1ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS7_15_Hash_node_baseEj>
 80013ba:	bf00      	nop
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <_ZSt7forwardISt4pairIKN4tama13PetIdentifierENS1_11PetTexturesEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80013c2:	b480      	push	{r7}
 80013c4:	b083      	sub	sp, #12
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4618      	mov	r0, r3
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <_ZNSt8__detail7_InsertIN4tama13PetIdentifierESt4pairIKS2_NS1_11PetTexturesEESaIS6_ENS_10_Select1stESt8equal_toIS2_ENS1_5PetDb7hash_fnENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb1ELb0ELb1EEELb0EE6insertIS6_vEES3_INS_14_Node_iteratorIS6_Lb0ELb1EEEbEOT_>:
	insert(_Pair&& __v)
 80013d8:	b590      	push	{r4, r7, lr}
 80013da:	b087      	sub	sp, #28
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	607a      	str	r2, [r7, #4]
	  __hashtable& __h = this->_M_conjure_hashtable();
 80013e4:	68b8      	ldr	r0, [r7, #8]
 80013e6:	f000 f85e 	bl	80014a6 <_ZNSt8__detail12_Insert_baseIN4tama13PetIdentifierESt4pairIKS2_NS1_11PetTexturesEESaIS6_ENS_10_Select1stESt8equal_toIS2_ENS1_5PetDb7hash_fnENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb1ELb0ELb1EEEE20_M_conjure_hashtableEv>
 80013ea:	6178      	str	r0, [r7, #20]
	  return __h._M_emplace(__unique_keys(), std::forward<_Pair>(__v));
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f7ff ffe8 	bl	80013c2 <_ZSt7forwardISt4pairIKN4tama13PetIdentifierENS1_11PetTexturesEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80013f2:	4603      	mov	r3, r0
 80013f4:	68f8      	ldr	r0, [r7, #12]
 80013f6:	4622      	mov	r2, r4
 80013f8:	6979      	ldr	r1, [r7, #20]
 80013fa:	f000 f86a 	bl	80014d2 <_ZNSt10_HashtableIN4tama13PetIdentifierESt4pairIKS1_NS0_11PetTexturesEESaIS5_ENSt8__detail10_Select1stESt8equal_toIS1_ENS0_5PetDb7hash_fnENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb1ELb0ELb1EEEE10_M_emplaceIJS5_EEES2_INS7_14_Node_iteratorIS5_Lb0ELb1EEEbESt17integral_constantIbLb1EEDpOT_>
	}
 80013fe:	68f8      	ldr	r0, [r7, #12]
 8001400:	371c      	adds	r7, #28
 8001402:	46bd      	mov	sp, r7
 8001404:	bd90      	pop	{r4, r7, pc}
	...

08001408 <_ZNSt8__detail9_Map_baseIN4tama13PetIdentifierESt4pairIKS2_NS1_11PetTexturesEESaIS6_ENS_10_Select1stESt8equal_toIS2_ENS1_5PetDb7hash_fnENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb1ELb0ELb1EEELb1EE2atERS4_>:
    _Map_base<_Key, _Pair, _Alloc, _Select1st, _Equal,
 8001408:	b580      	push	{r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
      __hashtable* __h = static_cast<__hashtable*>(this);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	617b      	str	r3, [r7, #20]
      __hash_code __code = __h->_M_hash_code(__k);
 8001416:	6839      	ldr	r1, [r7, #0]
 8001418:	6978      	ldr	r0, [r7, #20]
 800141a:	f000 f8b9 	bl	8001590 <_ZNKSt8__detail15_Hash_code_baseIN4tama13PetIdentifierESt4pairIKS2_NS1_11PetTexturesEENS_10_Select1stENS1_5PetDb7hash_fnENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE12_M_hash_codeERS4_>
 800141e:	6138      	str	r0, [r7, #16]
      std::size_t __n = __h->_M_bucket_index(__k, __code);
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	6839      	ldr	r1, [r7, #0]
 8001424:	6978      	ldr	r0, [r7, #20]
 8001426:	f000 f8c5 	bl	80015b4 <_ZNKSt10_HashtableIN4tama13PetIdentifierESt4pairIKS1_NS0_11PetTexturesEESaIS5_ENSt8__detail10_Select1stESt8equal_toIS1_ENS0_5PetDb7hash_fnENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb1ELb0ELb1EEEE15_M_bucket_indexERS3_j>
 800142a:	60f8      	str	r0, [r7, #12]
      __node_type* __p = __h->_M_find_node(__n, __k, __code);
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	683a      	ldr	r2, [r7, #0]
 8001430:	68f9      	ldr	r1, [r7, #12]
 8001432:	6978      	ldr	r0, [r7, #20]
 8001434:	f000 f8d0 	bl	80015d8 <_ZNKSt10_HashtableIN4tama13PetIdentifierESt4pairIKS1_NS0_11PetTexturesEESaIS5_ENSt8__detail10_Select1stESt8equal_toIS1_ENS0_5PetDb7hash_fnENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb1ELb0ELb1EEEE12_M_find_nodeEjRS3_j>
 8001438:	60b8      	str	r0, [r7, #8]
      if (!__p)
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d102      	bne.n	8001446 <_ZNSt8__detail9_Map_baseIN4tama13PetIdentifierESt4pairIKS2_NS1_11PetTexturesEESaIS6_ENS_10_Select1stESt8equal_toIS2_ENS1_5PetDb7hash_fnENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb1ELb0ELb1EEELb1EE2atERS4_+0x3e>
	__throw_out_of_range(__N("_Map_base::at"));
 8001440:	4806      	ldr	r0, [pc, #24]	; (800145c <_ZNSt8__detail9_Map_baseIN4tama13PetIdentifierESt4pairIKS2_NS1_11PetTexturesEESaIS6_ENS_10_Select1stESt8equal_toIS2_ENS1_5PetDb7hash_fnENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb1ELb0ELb1EEELb1EE2atERS4_+0x54>)
 8001442:	f01e fa73 	bl	801f92c <_ZSt20__throw_out_of_rangePKc>
      return __p->_M_v().second;
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	4618      	mov	r0, r3
 800144a:	f000 f8de 	bl	800160a <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKN4tama13PetIdentifierENS2_11PetTexturesEEE4_M_vEv>
 800144e:	4603      	mov	r3, r0
 8001450:	3304      	adds	r3, #4
    }
 8001452:	4618      	mov	r0, r3
 8001454:	3718      	adds	r7, #24
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	08020928 	.word	0x08020928

08001460 <_ZNKSt10_HashtableIN4tama13PetIdentifierESt4pairIKS1_NS0_11PetTexturesEESaIS5_ENSt8__detail10_Select1stESt8equal_toIS1_ENS0_5PetDb7hash_fnENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb1ELb0ELb1EEEE8_M_beginEv>:
      _M_begin() const
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
      { return static_cast<__node_type*>(_M_before_begin._M_nxt); }
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	4618      	mov	r0, r3
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <_ZNSt10_HashtableIN4tama13PetIdentifierESt4pairIKS1_NS0_11PetTexturesEESaIS5_ENSt8__detail10_Select1stESt8equal_toIS1_ENS0_5PetDb7hash_fnENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb1ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS7_15_Hash_node_baseEj>:
      _M_deallocate_buckets(__bucket_type* __bkts, size_type __n)
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	607a      	str	r2, [r7, #4]
	if (_M_uses_single_bucket(__bkts))
 8001484:	68b9      	ldr	r1, [r7, #8]
 8001486:	68f8      	ldr	r0, [r7, #12]
 8001488:	f000 f907 	bl	800169a <_ZNKSt10_HashtableIN4tama13PetIdentifierESt4pairIKS1_NS0_11PetTexturesEESaIS5_ENSt8__detail10_Select1stESt8equal_toIS1_ENS0_5PetDb7hash_fnENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb1ELb0ELb1EEEE21_M_uses_single_bucketEPPNS7_15_Hash_node_baseE>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d105      	bne.n	800149e <_ZNSt10_HashtableIN4tama13PetIdentifierESt4pairIKS1_NS0_11PetTexturesEESaIS5_ENSt8__detail10_Select1stESt8equal_toIS1_ENS0_5PetDb7hash_fnENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb1ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS7_15_Hash_node_baseEj+0x26>
	__hashtable_alloc::_M_deallocate_buckets(__bkts, __n);
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	68b9      	ldr	r1, [r7, #8]
 8001496:	68f8      	ldr	r0, [r7, #12]
 8001498:	f000 f917 	bl	80016ca <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN4tama13PetIdentifierENS3_11PetTexturesEELb1EEEEE21_M_deallocate_bucketsEPPNS_15_Hash_node_baseEj>
 800149c:	e000      	b.n	80014a0 <_ZNSt10_HashtableIN4tama13PetIdentifierESt4pairIKS1_NS0_11PetTexturesEESaIS5_ENSt8__detail10_Select1stESt8equal_toIS1_ENS0_5PetDb7hash_fnENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb1ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS7_15_Hash_node_baseEj+0x28>
	  return;
 800149e:	bf00      	nop
      }
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <_ZNSt8__detail12_Insert_baseIN4tama13PetIdentifierESt4pairIKS2_NS1_11PetTexturesEESaIS6_ENS_10_Select1stESt8equal_toIS2_ENS1_5PetDb7hash_fnENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb1ELb0ELb1EEEE20_M_conjure_hashtableEv>:
      _M_conjure_hashtable()
 80014a6:	b480      	push	{r7}
 80014a8:	b083      	sub	sp, #12
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
      { return *(static_cast<__hashtable*>(this)); }
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4618      	mov	r0, r3
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <_ZSt7forwardIRSt4pairIKN4tama13PetIdentifierENS1_11PetTexturesEEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	4618      	mov	r0, r3
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr

080014d2 <_ZNSt10_HashtableIN4tama13PetIdentifierESt4pairIKS1_NS0_11PetTexturesEESaIS5_ENSt8__detail10_Select1stESt8equal_toIS1_ENS0_5PetDb7hash_fnENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb1ELb0ELb1EEEE10_M_emplaceIJS5_EEES2_INS7_14_Node_iteratorIS5_Lb0ELb1EEEbESt17integral_constantIbLb1EEDpOT_>:
	   typename _Alloc, typename _ExtractKey, typename _Equal,
	   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
	   typename _Traits>
    template<typename... _Args>
      auto
      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 80014d2:	b590      	push	{r4, r7, lr}
 80014d4:	b08f      	sub	sp, #60	; 0x3c
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	60f8      	str	r0, [r7, #12]
 80014da:	60b9      	str	r1, [r7, #8]
 80014dc:	713a      	strb	r2, [r7, #4]
 80014de:	603b      	str	r3, [r7, #0]
		 _H1, _H2, _Hash, _RehashPolicy, _Traits>::
      _M_emplace(std::true_type, _Args&&... __args)
      -> pair<iterator, bool>
      {
	// First build the node to get access to the hash code
	__node_type* __node = this->_M_allocate_node(std::forward<_Args>(__args)...);
 80014e0:	6838      	ldr	r0, [r7, #0]
 80014e2:	f7ff ff6e 	bl	80013c2 <_ZSt7forwardISt4pairIKN4tama13PetIdentifierENS1_11PetTexturesEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80014e6:	4603      	mov	r3, r0
 80014e8:	4619      	mov	r1, r3
 80014ea:	68b8      	ldr	r0, [r7, #8]
 80014ec:	f000 f92b 	bl	8001746 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN4tama13PetIdentifierENS3_11PetTexturesEELb1EEEEE16_M_allocate_nodeIJS7_EEEPS8_DpOT_>
 80014f0:	6378      	str	r0, [r7, #52]	; 0x34
	const key_type& __k = this->_M_extract()(__node->_M_v());
 80014f2:	68b8      	ldr	r0, [r7, #8]
 80014f4:	f000 f968 	bl	80017c8 <_ZNSt8__detail15_Hash_code_baseIN4tama13PetIdentifierESt4pairIKS2_NS1_11PetTexturesEENS_10_Select1stENS1_5PetDb7hash_fnENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE10_M_extractEv>
 80014f8:	4604      	mov	r4, r0
 80014fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014fc:	4618      	mov	r0, r3
 80014fe:	f000 f884 	bl	800160a <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKN4tama13PetIdentifierENS2_11PetTexturesEEE4_M_vEv>
 8001502:	4603      	mov	r3, r0
 8001504:	4619      	mov	r1, r3
 8001506:	4620      	mov	r0, r4
 8001508:	f000 f96a 	bl	80017e0 <_ZNKSt8__detail10_Select1stclIRSt4pairIKN4tama13PetIdentifierENS3_11PetTexturesEEEEDTcl3getILi0EEcl7forwardIT_Efp_EEEOS9_>
 800150c:	6338      	str	r0, [r7, #48]	; 0x30
	__hash_code __code;
	__try
	  {
	    __code = this->_M_hash_code(__k);
 800150e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001510:	68b8      	ldr	r0, [r7, #8]
 8001512:	f000 f83d 	bl	8001590 <_ZNKSt8__detail15_Hash_code_baseIN4tama13PetIdentifierESt4pairIKS2_NS1_11PetTexturesEENS_10_Select1stENS1_5PetDb7hash_fnENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE12_M_hash_codeERS4_>
 8001516:	62f8      	str	r0, [r7, #44]	; 0x2c
	  {
	    this->_M_deallocate_node(__node);
	    __throw_exception_again;
	  }

	size_type __bkt = _M_bucket_index(__k, __code);
 8001518:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800151a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800151c:	68b8      	ldr	r0, [r7, #8]
 800151e:	f000 f849 	bl	80015b4 <_ZNKSt10_HashtableIN4tama13PetIdentifierESt4pairIKS1_NS0_11PetTexturesEESaIS5_ENSt8__detail10_Select1stESt8equal_toIS1_ENS0_5PetDb7hash_fnENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb1ELb0ELb1EEEE15_M_bucket_indexERS3_j>
 8001522:	62b8      	str	r0, [r7, #40]	; 0x28
	if (__node_type* __p = _M_find_node(__bkt, __k, __code))
 8001524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001526:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001528:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800152a:	68b8      	ldr	r0, [r7, #8]
 800152c:	f000 f854 	bl	80015d8 <_ZNKSt10_HashtableIN4tama13PetIdentifierESt4pairIKS1_NS0_11PetTexturesEESaIS5_ENSt8__detail10_Select1stESt8equal_toIS1_ENS0_5PetDb7hash_fnENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb1ELb0ELb1EEEE12_M_find_nodeEjRS3_j>
 8001530:	6278      	str	r0, [r7, #36]	; 0x24
 8001532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001534:	2b00      	cmp	r3, #0
 8001536:	d014      	beq.n	8001562 <_ZNSt10_HashtableIN4tama13PetIdentifierESt4pairIKS1_NS0_11PetTexturesEESaIS5_ENSt8__detail10_Select1stESt8equal_toIS1_ENS0_5PetDb7hash_fnENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb1ELb0ELb1EEEE10_M_emplaceIJS5_EEES2_INS7_14_Node_iteratorIS5_Lb0ELb1EEEbESt17integral_constantIbLb1EEDpOT_+0x90>
	  {
	    // There is already an equivalent node, no insertion
	    this->_M_deallocate_node(__node);
 8001538:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800153a:	68b8      	ldr	r0, [r7, #8]
 800153c:	f000 f87d 	bl	800163a <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN4tama13PetIdentifierENS3_11PetTexturesEELb1EEEEE18_M_deallocate_nodeEPS8_>
	    return std::make_pair(iterator(__p), false);
 8001540:	f107 0314 	add.w	r3, r7, #20
 8001544:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001546:	4618      	mov	r0, r3
 8001548:	f000 f95b 	bl	8001802 <_ZNSt8__detail14_Node_iteratorISt4pairIKN4tama13PetIdentifierENS2_11PetTexturesEELb0ELb1EEC1EPNS_10_Hash_nodeIS6_Lb1EEE>
 800154c:	2300      	movs	r3, #0
 800154e:	76fb      	strb	r3, [r7, #27]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	f107 021b 	add.w	r2, r7, #27
 8001556:	f107 0114 	add.w	r1, r7, #20
 800155a:	4618      	mov	r0, r3
 800155c:	f000 f96b 	bl	8001836 <_ZSt9make_pairINSt8__detail14_Node_iteratorISt4pairIKN4tama13PetIdentifierENS3_11PetTexturesEELb0ELb1EEEbES2_INSt17__decay_and_stripIT_E6__typeENS9_IT0_E6__typeEEOSA_OSD_>
 8001560:	e012      	b.n	8001588 <_ZNSt10_HashtableIN4tama13PetIdentifierESt4pairIKS1_NS0_11PetTexturesEESaIS5_ENSt8__detail10_Select1stESt8equal_toIS1_ENS0_5PetDb7hash_fnENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb1ELb0ELb1EEEE10_M_emplaceIJS5_EEES2_INS7_14_Node_iteratorIS5_Lb0ELb1EEEbESt17integral_constantIbLb1EEDpOT_+0xb6>
	  }

	// Insert the node
	return std::make_pair(_M_insert_unique_node(__bkt, __code, __node),
 8001562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001564:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001566:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001568:	68b8      	ldr	r0, [r7, #8]
 800156a:	f000 f97b 	bl	8001864 <_ZNSt10_HashtableIN4tama13PetIdentifierESt4pairIKS1_NS0_11PetTexturesEESaIS5_ENSt8__detail10_Select1stESt8equal_toIS1_ENS0_5PetDb7hash_fnENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb1ELb0ELb1EEEE21_M_insert_unique_nodeEjjPNS7_10_Hash_nodeIS5_Lb1EEE>
 800156e:	4603      	mov	r3, r0
 8001570:	61fb      	str	r3, [r7, #28]
 8001572:	2301      	movs	r3, #1
 8001574:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			      true);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f107 0223 	add.w	r2, r7, #35	; 0x23
 800157e:	f107 011c 	add.w	r1, r7, #28
 8001582:	4618      	mov	r0, r3
 8001584:	f000 f957 	bl	8001836 <_ZSt9make_pairINSt8__detail14_Node_iteratorISt4pairIKN4tama13PetIdentifierENS3_11PetTexturesEELb0ELb1EEEbES2_INSt17__decay_and_stripIT_E6__typeENS9_IT0_E6__typeEEOSA_OSD_>
      }
 8001588:	68f8      	ldr	r0, [r7, #12]
 800158a:	373c      	adds	r7, #60	; 0x3c
 800158c:	46bd      	mov	sp, r7
 800158e:	bd90      	pop	{r4, r7, pc}

08001590 <_ZNKSt8__detail15_Hash_code_baseIN4tama13PetIdentifierESt4pairIKS2_NS1_11PetTexturesEENS_10_Select1stENS1_5PetDb7hash_fnENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE12_M_hash_codeERS4_>:
      _M_hash_code(const _Key& __k) const
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
      { return _M_h1()(__k); }
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f000 f9b8 	bl	8001910 <_ZNKSt8__detail15_Hash_code_baseIN4tama13PetIdentifierESt4pairIKS2_NS1_11PetTexturesEENS_10_Select1stENS1_5PetDb7hash_fnENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE5_M_h1Ev>
 80015a0:	4603      	mov	r3, r0
 80015a2:	6839      	ldr	r1, [r7, #0]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff fdd0 	bl	800114a <_ZNK4tama5PetDb7hash_fnclERKNS_13PetIdentifierE>
 80015aa:	4603      	mov	r3, r0
 80015ac:	4618      	mov	r0, r3
 80015ae:	3708      	adds	r7, #8
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <_ZNKSt10_HashtableIN4tama13PetIdentifierESt4pairIKS1_NS0_11PetTexturesEESaIS5_ENSt8__detail10_Select1stESt8equal_toIS1_ENS0_5PetDb7hash_fnENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb1ELb0ELb1EEEE15_M_bucket_indexERS3_j>:
      _M_bucket_index(const key_type& __k, __hash_code __c) const
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	607a      	str	r2, [r7, #4]
      { return __hash_code_base::_M_bucket_index(__k, __c, _M_bucket_count); }
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	68b9      	ldr	r1, [r7, #8]
 80015c8:	68f8      	ldr	r0, [r7, #12]
 80015ca:	f000 f9ad 	bl	8001928 <_ZNKSt8__detail15_Hash_code_baseIN4tama13PetIdentifierESt4pairIKS2_NS1_11PetTexturesEENS_10_Select1stENS1_5PetDb7hash_fnENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE15_M_bucket_indexERS4_jj>
 80015ce:	4603      	mov	r3, r0
 80015d0:	4618      	mov	r0, r3
 80015d2:	3710      	adds	r7, #16
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <_ZNKSt10_HashtableIN4tama13PetIdentifierESt4pairIKS1_NS0_11PetTexturesEESaIS5_ENSt8__detail10_Select1stESt8equal_toIS1_ENS0_5PetDb7hash_fnENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb1ELb0ELb1EEEE12_M_find_nodeEjRS3_j>:
      _M_find_node(size_type __bkt, const key_type& __key,
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
 80015e4:	603b      	str	r3, [r7, #0]
	__node_base* __before_n = _M_find_before_node(__bkt, __key, __c);
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	68b9      	ldr	r1, [r7, #8]
 80015ec:	68f8      	ldr	r0, [r7, #12]
 80015ee:	f000 f9b0 	bl	8001952 <_ZNKSt10_HashtableIN4tama13PetIdentifierESt4pairIKS1_NS0_11PetTexturesEESaIS5_ENSt8__detail10_Select1stESt8equal_toIS1_ENS0_5PetDb7hash_fnENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb1ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j>
 80015f2:	6178      	str	r0, [r7, #20]
	if (__before_n)
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d002      	beq.n	8001600 <_ZNKSt10_HashtableIN4tama13PetIdentifierESt4pairIKS1_NS0_11PetTexturesEESaIS5_ENSt8__detail10_Select1stESt8equal_toIS1_ENS0_5PetDb7hash_fnENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb1ELb0ELb1EEEE12_M_find_nodeEjRS3_j+0x28>
	  return static_cast<__node_type*>(__before_n->_M_nxt);
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	e000      	b.n	8001602 <_ZNKSt10_HashtableIN4tama13PetIdentifierESt4pairIKS1_NS0_11PetTexturesEESaIS5_ENSt8__detail10_Select1stESt8equal_toIS1_ENS0_5PetDb7hash_fnENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb1ELb0ELb1EEEE12_M_find_nodeEjRS3_j+0x2a>
	return nullptr;
 8001600:	2300      	movs	r3, #0
      }
 8001602:	4618      	mov	r0, r3
 8001604:	3718      	adds	r7, #24
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKN4tama13PetIdentifierENS2_11PetTexturesEEE4_M_vEv>:
      _M_v() noexcept
 800160a:	b580      	push	{r7, lr}
 800160c:	b082      	sub	sp, #8
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
      { return *_M_valptr(); }
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f000 f9e0 	bl	80019d8 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKN4tama13PetIdentifierENS2_11PetTexturesEEE9_M_valptrEv>
 8001618:	4603      	mov	r3, r0
 800161a:	4618      	mov	r0, r3
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}

08001622 <_ZNKSt8__detail10_Hash_nodeISt4pairIKN4tama13PetIdentifierENS2_11PetTexturesEELb1EE7_M_nextEv>:
      _M_next() const noexcept
 8001622:	b480      	push	{r7}
 8001624:	b083      	sub	sp, #12
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
      { return static_cast<_Hash_node*>(this->_M_nxt); }
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4618      	mov	r0, r3
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr

0800163a <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN4tama13PetIdentifierENS3_11PetTexturesEELb1EEEEE18_M_deallocate_nodeEPS8_>:
	  }
      }

  template<typename _NodeAlloc>
    void
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node(__node_type* __n)
 800163a:	b580      	push	{r7, lr}
 800163c:	b084      	sub	sp, #16
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
 8001642:	6039      	str	r1, [r7, #0]
    {
      typedef typename __node_alloc_traits::pointer _Ptr;
      auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__n);
 8001644:	6838      	ldr	r0, [r7, #0]
 8001646:	f000 f9d5 	bl	80019f4 <_ZNSt14pointer_traitsIPNSt8__detail10_Hash_nodeISt4pairIKN4tama13PetIdentifierENS3_11PetTexturesEELb1EEEE10pointer_toERS8_>
 800164a:	60f8      	str	r0, [r7, #12]
      __value_alloc_type __a(_M_node_allocator());
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f000 f9dd 	bl	8001a0c <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN4tama13PetIdentifierENS3_11PetTexturesEELb1EEEEE17_M_node_allocatorEv>
 8001652:	4602      	mov	r2, r0
 8001654:	f107 0308 	add.w	r3, r7, #8
 8001658:	4611      	mov	r1, r2
 800165a:	4618      	mov	r0, r3
 800165c:	f000 f9e2 	bl	8001a24 <_ZNSaISt4pairIKN4tama13PetIdentifierENS0_11PetTexturesEEEC1INSt8__detail10_Hash_nodeIS4_Lb1EEEEERKSaIT_E>
      __value_alloc_traits::destroy(__a, __n->_M_valptr());
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	4618      	mov	r0, r3
 8001664:	f000 f9b8 	bl	80019d8 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKN4tama13PetIdentifierENS2_11PetTexturesEEE9_M_valptrEv>
 8001668:	4602      	mov	r2, r0
 800166a:	f107 0308 	add.w	r3, r7, #8
 800166e:	4611      	mov	r1, r2
 8001670:	4618      	mov	r0, r3
 8001672:	f000 f9f0 	bl	8001a56 <_ZNSt16allocator_traitsISaISt4pairIKN4tama13PetIdentifierENS1_11PetTexturesEEEE7destroyIS5_EEvRS6_PT_>
      __n->~__node_type();
      __node_alloc_traits::deallocate(_M_node_allocator(), __ptr, 1);
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f000 f9c8 	bl	8001a0c <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN4tama13PetIdentifierENS3_11PetTexturesEELb1EEEEE17_M_node_allocatorEv>
 800167c:	4603      	mov	r3, r0
 800167e:	2201      	movs	r2, #1
 8001680:	68f9      	ldr	r1, [r7, #12]
 8001682:	4618      	mov	r0, r3
 8001684:	f000 f9f4 	bl	8001a70 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN4tama13PetIdentifierENS3_11PetTexturesEELb1EEEEE10deallocateERS9_PS8_j>
      __value_alloc_type __a(_M_node_allocator());
 8001688:	f107 0308 	add.w	r3, r7, #8
 800168c:	4618      	mov	r0, r3
 800168e:	f000 f9d6 	bl	8001a3e <_ZNSaISt4pairIKN4tama13PetIdentifierENS0_11PetTexturesEEED1Ev>
    }
 8001692:	bf00      	nop
 8001694:	3710      	adds	r7, #16
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <_ZNKSt10_HashtableIN4tama13PetIdentifierESt4pairIKS1_NS0_11PetTexturesEESaIS5_ENSt8__detail10_Select1stESt8equal_toIS1_ENS0_5PetDb7hash_fnENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb1ELb0ELb1EEEE21_M_uses_single_bucketEPPNS7_15_Hash_node_baseE>:
      _M_uses_single_bucket(__bucket_type* __bkts) const
 800169a:	b480      	push	{r7}
 800169c:	b083      	sub	sp, #12
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
 80016a2:	6039      	str	r1, [r7, #0]
      { return __builtin_expect(__bkts == &_M_single_bucket, false); }
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	3318      	adds	r3, #24
 80016a8:	683a      	ldr	r2, [r7, #0]
 80016aa:	429a      	cmp	r2, r3
 80016ac:	bf0c      	ite	eq
 80016ae:	2301      	moveq	r3, #1
 80016b0:	2300      	movne	r3, #0
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	bf14      	ite	ne
 80016b8:	2301      	movne	r3, #1
 80016ba:	2300      	moveq	r3, #0
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	4618      	mov	r0, r3
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr

080016ca <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN4tama13PetIdentifierENS3_11PetTexturesEELb1EEEEE21_M_deallocate_bucketsEPPNS_15_Hash_node_baseEj>:
      return __p;
    }

  template<typename _NodeAlloc>
    void
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_buckets(__bucket_type* __bkts,
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b086      	sub	sp, #24
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	60f8      	str	r0, [r7, #12]
 80016d2:	60b9      	str	r1, [r7, #8]
 80016d4:	607a      	str	r2, [r7, #4]
							std::size_t __n)
    {
      typedef typename __bucket_alloc_traits::pointer _Ptr;
      auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__bkts);
 80016d6:	68b8      	ldr	r0, [r7, #8]
 80016d8:	f000 f9d9 	bl	8001a8e <_ZNSt14pointer_traitsIPPNSt8__detail15_Hash_node_baseEE10pointer_toERS2_>
 80016dc:	6178      	str	r0, [r7, #20]
      __bucket_alloc_type __alloc(_M_node_allocator());
 80016de:	68f8      	ldr	r0, [r7, #12]
 80016e0:	f000 f994 	bl	8001a0c <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN4tama13PetIdentifierENS3_11PetTexturesEELb1EEEEE17_M_node_allocatorEv>
 80016e4:	4602      	mov	r2, r0
 80016e6:	f107 0310 	add.w	r3, r7, #16
 80016ea:	4611      	mov	r1, r2
 80016ec:	4618      	mov	r0, r3
 80016ee:	f000 f9da 	bl	8001aa6 <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIKN4tama13PetIdentifierENS6_11PetTexturesEELb1EEEEERKSaIT_E>
      __bucket_alloc_traits::deallocate(__alloc, __ptr, __n);
 80016f2:	f107 0310 	add.w	r3, r7, #16
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	6979      	ldr	r1, [r7, #20]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f000 f9ec 	bl	8001ad8 <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE10deallocateERS3_PS2_j>
      __bucket_alloc_type __alloc(_M_node_allocator());
 8001700:	f107 0310 	add.w	r3, r7, #16
 8001704:	4618      	mov	r0, r3
 8001706:	f000 f9db 	bl	8001ac0 <_ZNSaIPNSt8__detail15_Hash_node_baseEED1Ev>
    }
 800170a:	bf00      	nop
 800170c:	3718      	adds	r7, #24
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKN4tama13PetIdentifierENS2_11PetTexturesEEEC1Ev>:
    struct _Hash_node_value_base : _Hash_node_base
 8001712:	b580      	push	{r7, lr}
 8001714:	b082      	sub	sp, #8
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff fca6 	bl	800106e <_ZNSt8__detail15_Hash_node_baseC1Ev>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4618      	mov	r0, r3
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <_ZNSt8__detail10_Hash_nodeISt4pairIKN4tama13PetIdentifierENS2_11PetTexturesEELb1EEC1Ev>:
    struct _Hash_node<_Value, true> : _Hash_node_value_base<_Value>
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff ffeb 	bl	8001712 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKN4tama13PetIdentifierENS2_11PetTexturesEEEC1Ev>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4618      	mov	r0, r3
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN4tama13PetIdentifierENS3_11PetTexturesEELb1EEEEE16_M_allocate_nodeIJS7_EEEPS8_DpOT_>:
      _Hashtable_alloc<_NodeAlloc>::_M_allocate_node(_Args&&... __args)
 8001746:	b590      	push	{r4, r7, lr}
 8001748:	b087      	sub	sp, #28
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
 800174e:	6039      	str	r1, [r7, #0]
	auto __nptr = __node_alloc_traits::allocate(_M_node_allocator(), 1);
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f000 f95b 	bl	8001a0c <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN4tama13PetIdentifierENS3_11PetTexturesEELb1EEEEE17_M_node_allocatorEv>
 8001756:	4603      	mov	r3, r0
 8001758:	2101      	movs	r1, #1
 800175a:	4618      	mov	r0, r3
 800175c:	f000 f9cb 	bl	8001af6 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN4tama13PetIdentifierENS3_11PetTexturesEELb1EEEEE8allocateERS9_j>
 8001760:	6178      	str	r0, [r7, #20]
	__node_type* __n = std::__addressof(*__nptr);
 8001762:	6978      	ldr	r0, [r7, #20]
 8001764:	f000 f9d6 	bl	8001b14 <_ZSt11__addressofINSt8__detail10_Hash_nodeISt4pairIKN4tama13PetIdentifierENS3_11PetTexturesEELb1EEEEPT_RS9_>
 8001768:	6138      	str	r0, [r7, #16]
	    __value_alloc_type __a(_M_node_allocator());
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f000 f94e 	bl	8001a0c <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN4tama13PetIdentifierENS3_11PetTexturesEELb1EEEEE17_M_node_allocatorEv>
 8001770:	4602      	mov	r2, r0
 8001772:	f107 030c 	add.w	r3, r7, #12
 8001776:	4611      	mov	r1, r2
 8001778:	4618      	mov	r0, r3
 800177a:	f000 f953 	bl	8001a24 <_ZNSaISt4pairIKN4tama13PetIdentifierENS0_11PetTexturesEEEC1INSt8__detail10_Hash_nodeIS4_Lb1EEEEERKSaIT_E>
	    ::new ((void*)__n) __node_type;
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	4619      	mov	r1, r3
 8001782:	2020      	movs	r0, #32
 8001784:	f7ff fc5b 	bl	800103e <_ZnwjPv>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d002      	beq.n	8001794 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN4tama13PetIdentifierENS3_11PetTexturesEELb1EEEEE16_M_allocate_nodeIJS7_EEEPS8_DpOT_+0x4e>
 800178e:	4618      	mov	r0, r3
 8001790:	f7ff ffcc 	bl	800172c <_ZNSt8__detail10_Hash_nodeISt4pairIKN4tama13PetIdentifierENS2_11PetTexturesEELb1EEC1Ev>
	    __value_alloc_traits::construct(__a, __n->_M_valptr(),
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	4618      	mov	r0, r3
 8001798:	f000 f91e 	bl	80019d8 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKN4tama13PetIdentifierENS2_11PetTexturesEEE9_M_valptrEv>
 800179c:	4604      	mov	r4, r0
 800179e:	6838      	ldr	r0, [r7, #0]
 80017a0:	f7ff fe0f 	bl	80013c2 <_ZSt7forwardISt4pairIKN4tama13PetIdentifierENS1_11PetTexturesEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80017a4:	4602      	mov	r2, r0
 80017a6:	f107 030c 	add.w	r3, r7, #12
 80017aa:	4621      	mov	r1, r4
 80017ac:	4618      	mov	r0, r3
 80017ae:	f000 f9bc 	bl	8001b2a <_ZNSt16allocator_traitsISaISt4pairIKN4tama13PetIdentifierENS1_11PetTexturesEEEE9constructIS5_JS5_EEEvRS6_PT_DpOT0_>
	    return __n;
 80017b2:	693c      	ldr	r4, [r7, #16]
	    __value_alloc_type __a(_M_node_allocator());
 80017b4:	f107 030c 	add.w	r3, r7, #12
 80017b8:	4618      	mov	r0, r3
 80017ba:	f000 f940 	bl	8001a3e <_ZNSaISt4pairIKN4tama13PetIdentifierENS0_11PetTexturesEEED1Ev>
	    return __n;
 80017be:	4623      	mov	r3, r4
      }
 80017c0:	4618      	mov	r0, r3
 80017c2:	371c      	adds	r7, #28
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd90      	pop	{r4, r7, pc}

080017c8 <_ZNSt8__detail15_Hash_code_baseIN4tama13PetIdentifierESt4pairIKS2_NS1_11PetTexturesEENS_10_Select1stENS1_5PetDb7hash_fnENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE10_M_extractEv>:
      _M_extract() { return __ebo_extract_key::_S_get(*this); }
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f000 f9bd 	bl	8001b50 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ENS_10_Select1stELb1EE6_S_getERS2_>
 80017d6:	4603      	mov	r3, r0
 80017d8:	4618      	mov	r0, r3
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <_ZNKSt8__detail10_Select1stclIRSt4pairIKN4tama13PetIdentifierENS3_11PetTexturesEEEEDTcl3getILi0EEcl7forwardIT_Efp_EEEOS9_>:
      operator()(_Tp&& __x) const
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
      { return std::get<0>(std::forward<_Tp>(__x)); }
 80017ea:	6838      	ldr	r0, [r7, #0]
 80017ec:	f7ff fe66 	bl	80014bc <_ZSt7forwardIRSt4pairIKN4tama13PetIdentifierENS1_11PetTexturesEEEOT_RNSt16remove_referenceIS7_E4typeE>
 80017f0:	4603      	mov	r3, r0
 80017f2:	4618      	mov	r0, r3
 80017f4:	f000 f9b7 	bl	8001b66 <_ZSt3getILj0EKN4tama13PetIdentifierENS0_11PetTexturesEERNSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeERS8_>
 80017f8:	4603      	mov	r3, r0
 80017fa:	4618      	mov	r0, r3
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <_ZNSt8__detail14_Node_iteratorISt4pairIKN4tama13PetIdentifierENS2_11PetTexturesEELb0ELb1EEC1EPNS_10_Hash_nodeIS6_Lb1EEE>:
      _Node_iterator(__node_type* __p) noexcept
 8001802:	b580      	push	{r7, lr}
 8001804:	b082      	sub	sp, #8
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
 800180a:	6039      	str	r1, [r7, #0]
      : __base_type(__p) { }
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6839      	ldr	r1, [r7, #0]
 8001810:	4618      	mov	r0, r3
 8001812:	f000 f9b4 	bl	8001b7e <_ZNSt8__detail19_Node_iterator_baseISt4pairIKN4tama13PetIdentifierENS2_11PetTexturesEELb1EEC1EPNS_10_Hash_nodeIS6_Lb1EEE>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4618      	mov	r0, r3
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <_ZSt7forwardINSt8__detail14_Node_iteratorISt4pairIKN4tama13PetIdentifierENS3_11PetTexturesEELb0ELb1EEEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	4618      	mov	r0, r3
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr

08001836 <_ZSt9make_pairINSt8__detail14_Node_iteratorISt4pairIKN4tama13PetIdentifierENS3_11PetTexturesEELb0ELb1EEEbES2_INSt17__decay_and_stripIT_E6__typeENS9_IT0_E6__typeEEOSA_OSD_>:
#if __cplusplus >= 201103L
  // NB: DR 706.
  template<typename _T1, typename _T2>
    constexpr pair<typename __decay_and_strip<_T1>::__type,
                   typename __decay_and_strip<_T2>::__type>
    make_pair(_T1&& __x, _T2&& __y)
 8001836:	b590      	push	{r4, r7, lr}
 8001838:	b085      	sub	sp, #20
 800183a:	af00      	add	r7, sp, #0
 800183c:	60f8      	str	r0, [r7, #12]
 800183e:	60b9      	str	r1, [r7, #8]
 8001840:	607a      	str	r2, [r7, #4]
    {
      typedef typename __decay_and_strip<_T1>::__type __ds_type1;
      typedef typename __decay_and_strip<_T2>::__type __ds_type2;
      typedef pair<__ds_type1, __ds_type2> 	      __pair_type;
      return __pair_type(std::forward<_T1>(__x), std::forward<_T2>(__y));
 8001842:	68b8      	ldr	r0, [r7, #8]
 8001844:	f7ff ffec 	bl	8001820 <_ZSt7forwardINSt8__detail14_Node_iteratorISt4pairIKN4tama13PetIdentifierENS3_11PetTexturesEELb0ELb1EEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8001848:	4604      	mov	r4, r0
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f7ff fc50 	bl	80010f0 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8001850:	4603      	mov	r3, r0
 8001852:	461a      	mov	r2, r3
 8001854:	4621      	mov	r1, r4
 8001856:	68f8      	ldr	r0, [r7, #12]
 8001858:	f000 f9a0 	bl	8001b9c <_ZNSt4pairINSt8__detail14_Node_iteratorIS_IKN4tama13PetIdentifierENS2_11PetTexturesEELb0ELb1EEEbEC1IS7_bLb1EEEOT_OT0_>
    }
 800185c:	68f8      	ldr	r0, [r7, #12]
 800185e:	3714      	adds	r7, #20
 8001860:	46bd      	mov	sp, r7
 8001862:	bd90      	pop	{r4, r7, pc}

08001864 <_ZNSt10_HashtableIN4tama13PetIdentifierESt4pairIKS1_NS0_11PetTexturesEESaIS5_ENSt8__detail10_Select1stESt8equal_toIS1_ENS0_5PetDb7hash_fnENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb1ELb0ELb1EEEE21_M_insert_unique_nodeEjjPNS7_10_Hash_nodeIS5_Lb1EEE>:
  template<typename _Key, typename _Value,
	   typename _Alloc, typename _ExtractKey, typename _Equal,
	   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
	   typename _Traits>
    auto
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8001864:	b590      	push	{r4, r7, lr}
 8001866:	b08d      	sub	sp, #52	; 0x34
 8001868:	af02      	add	r7, sp, #8
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	607a      	str	r2, [r7, #4]
 8001870:	603b      	str	r3, [r7, #0]
	       _H1, _H2, _Hash, _RehashPolicy, _Traits>::
    _M_insert_unique_node(size_type __bkt, __hash_code __code,
			  __node_type* __node)
    -> iterator
    {
      const __rehash_state& __saved_state = _M_rehash_policy._M_state();
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	3310      	adds	r3, #16
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff fc2e 	bl	80010d8 <_ZNKSt8__detail20_Prime_rehash_policy8_M_stateEv>
 800187c:	4603      	mov	r3, r0
 800187e:	61fb      	str	r3, [r7, #28]
 8001880:	f107 031c 	add.w	r3, r7, #28
 8001884:	627b      	str	r3, [r7, #36]	; 0x24
      std::pair<bool, std::size_t> __do_rehash
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	f103 0110 	add.w	r1, r3, #16
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	685a      	ldr	r2, [r3, #4]
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	68dc      	ldr	r4, [r3, #12]
 8001894:	f107 0014 	add.w	r0, r7, #20
 8001898:	2301      	movs	r3, #1
 800189a:	9300      	str	r3, [sp, #0]
 800189c:	4623      	mov	r3, r4
 800189e:	f01e f997 	bl	801fbd0 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj>
	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count, 1);

      __try
	{
	  if (__do_rehash.first)
 80018a2:	7d3b      	ldrb	r3, [r7, #20]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d019      	beq.n	80018dc <_ZNSt10_HashtableIN4tama13PetIdentifierESt4pairIKS1_NS0_11PetTexturesEESaIS5_ENSt8__detail10_Select1stESt8equal_toIS1_ENS0_5PetDb7hash_fnENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb1ELb0ELb1EEEE21_M_insert_unique_nodeEjjPNS7_10_Hash_nodeIS5_Lb1EEE+0x78>
	    {
	      _M_rehash(__do_rehash.second, __saved_state);
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018ac:	4619      	mov	r1, r3
 80018ae:	68f8      	ldr	r0, [r7, #12]
 80018b0:	f000 f98d 	bl	8001bce <_ZNSt10_HashtableIN4tama13PetIdentifierESt4pairIKS1_NS0_11PetTexturesEESaIS5_ENSt8__detail10_Select1stESt8equal_toIS1_ENS0_5PetDb7hash_fnENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEjRKj>
	      __bkt = _M_bucket_index(this->_M_extract()(__node->_M_v()), __code);
 80018b4:	68f8      	ldr	r0, [r7, #12]
 80018b6:	f7ff ff87 	bl	80017c8 <_ZNSt8__detail15_Hash_code_baseIN4tama13PetIdentifierESt4pairIKS2_NS1_11PetTexturesEENS_10_Select1stENS1_5PetDb7hash_fnENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE10_M_extractEv>
 80018ba:	4604      	mov	r4, r0
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	4618      	mov	r0, r3
 80018c0:	f7ff fea3 	bl	800160a <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKN4tama13PetIdentifierENS2_11PetTexturesEEE4_M_vEv>
 80018c4:	4603      	mov	r3, r0
 80018c6:	4619      	mov	r1, r3
 80018c8:	4620      	mov	r0, r4
 80018ca:	f7ff ff89 	bl	80017e0 <_ZNKSt8__detail10_Select1stclIRSt4pairIKN4tama13PetIdentifierENS3_11PetTexturesEEEEDTcl3getILi0EEcl7forwardIT_Efp_EEEOS9_>
 80018ce:	4603      	mov	r3, r0
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	4619      	mov	r1, r3
 80018d4:	68f8      	ldr	r0, [r7, #12]
 80018d6:	f7ff fe6d 	bl	80015b4 <_ZNKSt10_HashtableIN4tama13PetIdentifierESt4pairIKS1_NS0_11PetTexturesEESaIS5_ENSt8__detail10_Select1stESt8equal_toIS1_ENS0_5PetDb7hash_fnENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb1ELb0ELb1EEEE15_M_bucket_indexERS3_j>
 80018da:	60b8      	str	r0, [r7, #8]
	    }

	  this->_M_store_code(__node, __code);
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	6839      	ldr	r1, [r7, #0]
 80018e0:	68f8      	ldr	r0, [r7, #12]
 80018e2:	f000 f983 	bl	8001bec <_ZNKSt8__detail15_Hash_code_baseIN4tama13PetIdentifierESt4pairIKS2_NS1_11PetTexturesEENS_10_Select1stENS1_5PetDb7hash_fnENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE13_M_store_codeEPNS_10_Hash_nodeIS6_Lb1EEEj>

	  // Always insert at the beginning of the bucket.
	  _M_insert_bucket_begin(__bkt, __node);
 80018e6:	683a      	ldr	r2, [r7, #0]
 80018e8:	68b9      	ldr	r1, [r7, #8]
 80018ea:	68f8      	ldr	r0, [r7, #12]
 80018ec:	f000 f98d 	bl	8001c0a <_ZNSt10_HashtableIN4tama13PetIdentifierESt4pairIKS1_NS0_11PetTexturesEESaIS5_ENSt8__detail10_Select1stESt8equal_toIS1_ENS0_5PetDb7hash_fnENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb1ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS7_10_Hash_nodeIS5_Lb1EEE>
	  ++_M_element_count;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	1c5a      	adds	r2, r3, #1
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	60da      	str	r2, [r3, #12]
	  return iterator(__node);
 80018fa:	f107 0320 	add.w	r3, r7, #32
 80018fe:	6839      	ldr	r1, [r7, #0]
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff ff7e 	bl	8001802 <_ZNSt8__detail14_Node_iteratorISt4pairIKN4tama13PetIdentifierENS2_11PetTexturesEELb0ELb1EEC1EPNS_10_Hash_nodeIS6_Lb1EEE>
 8001906:	6a3b      	ldr	r3, [r7, #32]
      __catch(...)
	{
	  this->_M_deallocate_node(__node);
	  __throw_exception_again;
	}
    }
 8001908:	4618      	mov	r0, r3
 800190a:	372c      	adds	r7, #44	; 0x2c
 800190c:	46bd      	mov	sp, r7
 800190e:	bd90      	pop	{r4, r7, pc}

08001910 <_ZNKSt8__detail15_Hash_code_baseIN4tama13PetIdentifierESt4pairIKS2_NS1_11PetTexturesEENS_10_Select1stENS1_5PetDb7hash_fnENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE5_M_h1Ev>:
      _M_h1() const { return __ebo_h1::_S_cget(*this); }
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f000 f9bc 	bl	8001c96 <_ZNSt8__detail21_Hashtable_ebo_helperILi1EN4tama5PetDb7hash_fnELb1EE7_S_cgetERKS4_>
 800191e:	4603      	mov	r3, r0
 8001920:	4618      	mov	r0, r3
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <_ZNKSt8__detail15_Hash_code_baseIN4tama13PetIdentifierESt4pairIKS2_NS1_11PetTexturesEENS_10_Select1stENS1_5PetDb7hash_fnENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE15_M_bucket_indexERS4_jj>:
      _M_bucket_index(const _Key&, __hash_code __c,
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	607a      	str	r2, [r7, #4]
 8001934:	603b      	str	r3, [r7, #0]
      { return _M_h2()(__c, __n); }
 8001936:	68f8      	ldr	r0, [r7, #12]
 8001938:	f000 f9b8 	bl	8001cac <_ZNKSt8__detail15_Hash_code_baseIN4tama13PetIdentifierESt4pairIKS2_NS1_11PetTexturesEENS_10_Select1stENS1_5PetDb7hash_fnENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE5_M_h2Ev>
 800193c:	4603      	mov	r3, r0
 800193e:	683a      	ldr	r2, [r7, #0]
 8001940:	6879      	ldr	r1, [r7, #4]
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff fba1 	bl	800108a <_ZNKSt8__detail18_Mod_range_hashingclEjj>
 8001948:	4603      	mov	r3, r0
 800194a:	4618      	mov	r0, r3
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <_ZNKSt10_HashtableIN4tama13PetIdentifierESt4pairIKS1_NS0_11PetTexturesEESaIS5_ENSt8__detail10_Select1stESt8equal_toIS1_ENS0_5PetDb7hash_fnENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb1ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8001952:	b580      	push	{r7, lr}
 8001954:	b086      	sub	sp, #24
 8001956:	af00      	add	r7, sp, #0
 8001958:	60f8      	str	r0, [r7, #12]
 800195a:	60b9      	str	r1, [r7, #8]
 800195c:	607a      	str	r2, [r7, #4]
 800195e:	603b      	str	r3, [r7, #0]
      __node_base* __prev_p = _M_buckets[__n];
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	4413      	add	r3, r2
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	617b      	str	r3, [r7, #20]
      if (!__prev_p)
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d101      	bne.n	8001978 <_ZNKSt10_HashtableIN4tama13PetIdentifierESt4pairIKS1_NS0_11PetTexturesEESaIS5_ENSt8__detail10_Select1stESt8equal_toIS1_ENS0_5PetDb7hash_fnENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb1ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x26>
	return nullptr;
 8001974:	2300      	movs	r3, #0
 8001976:	e02b      	b.n	80019d0 <_ZNKSt10_HashtableIN4tama13PetIdentifierESt4pairIKS1_NS0_11PetTexturesEESaIS5_ENSt8__detail10_Select1stESt8equal_toIS1_ENS0_5PetDb7hash_fnENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb1ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x7e>
      for (__node_type* __p = static_cast<__node_type*>(__prev_p->_M_nxt);;
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	613b      	str	r3, [r7, #16]
	  if (this->_M_equals(__k, __code, __p))
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	683a      	ldr	r2, [r7, #0]
 8001982:	6879      	ldr	r1, [r7, #4]
 8001984:	68f8      	ldr	r0, [r7, #12]
 8001986:	f000 f99d 	bl	8001cc4 <_ZNKSt8__detail15_Hashtable_baseIN4tama13PetIdentifierESt4pairIKS2_NS1_11PetTexturesEENS_10_Select1stESt8equal_toIS2_ENS1_5PetDb7hash_fnENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_equalsERS4_jPNS_10_Hash_nodeIS6_Lb1EEE>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <_ZNKSt10_HashtableIN4tama13PetIdentifierESt4pairIKS1_NS0_11PetTexturesEESaIS5_ENSt8__detail10_Select1stESt8equal_toIS1_ENS0_5PetDb7hash_fnENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb1ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x42>
	    return __prev_p;
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	e01d      	b.n	80019d0 <_ZNKSt10_HashtableIN4tama13PetIdentifierESt4pairIKS1_NS0_11PetTexturesEESaIS5_ENSt8__detail10_Select1stESt8equal_toIS1_ENS0_5PetDb7hash_fnENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb1ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x7e>
	  if (!__p->_M_nxt || _M_bucket_index(__p->_M_next()) != __n)
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d00b      	beq.n	80019b4 <_ZNKSt10_HashtableIN4tama13PetIdentifierESt4pairIKS1_NS0_11PetTexturesEESaIS5_ENSt8__detail10_Select1stESt8equal_toIS1_ENS0_5PetDb7hash_fnENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb1ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x62>
 800199c:	6938      	ldr	r0, [r7, #16]
 800199e:	f7ff fe40 	bl	8001622 <_ZNKSt8__detail10_Hash_nodeISt4pairIKN4tama13PetIdentifierENS2_11PetTexturesEELb1EE7_M_nextEv>
 80019a2:	4603      	mov	r3, r0
 80019a4:	4619      	mov	r1, r3
 80019a6:	68f8      	ldr	r0, [r7, #12]
 80019a8:	f000 f9a7 	bl	8001cfa <_ZNKSt10_HashtableIN4tama13PetIdentifierESt4pairIKS1_NS0_11PetTexturesEESaIS5_ENSt8__detail10_Select1stESt8equal_toIS1_ENS0_5PetDb7hash_fnENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb1ELb0ELb1EEEE15_M_bucket_indexEPNS7_10_Hash_nodeIS5_Lb1EEE>
 80019ac:	4602      	mov	r2, r0
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d001      	beq.n	80019b8 <_ZNKSt10_HashtableIN4tama13PetIdentifierESt4pairIKS1_NS0_11PetTexturesEESaIS5_ENSt8__detail10_Select1stESt8equal_toIS1_ENS0_5PetDb7hash_fnENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb1ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x66>
 80019b4:	2301      	movs	r3, #1
 80019b6:	e000      	b.n	80019ba <_ZNKSt10_HashtableIN4tama13PetIdentifierESt4pairIKS1_NS0_11PetTexturesEESaIS5_ENSt8__detail10_Select1stESt8equal_toIS1_ENS0_5PetDb7hash_fnENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb1ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x68>
 80019b8:	2300      	movs	r3, #0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d106      	bne.n	80019cc <_ZNKSt10_HashtableIN4tama13PetIdentifierESt4pairIKS1_NS0_11PetTexturesEESaIS5_ENSt8__detail10_Select1stESt8equal_toIS1_ENS0_5PetDb7hash_fnENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb1ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x7a>
	  __prev_p = __p;
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	617b      	str	r3, [r7, #20]
      for (__node_type* __p = static_cast<__node_type*>(__prev_p->_M_nxt);;
 80019c2:	6938      	ldr	r0, [r7, #16]
 80019c4:	f7ff fe2d 	bl	8001622 <_ZNKSt8__detail10_Hash_nodeISt4pairIKN4tama13PetIdentifierENS2_11PetTexturesEELb1EE7_M_nextEv>
 80019c8:	6138      	str	r0, [r7, #16]
	  if (this->_M_equals(__k, __code, __p))
 80019ca:	e7d8      	b.n	800197e <_ZNKSt10_HashtableIN4tama13PetIdentifierESt4pairIKS1_NS0_11PetTexturesEESaIS5_ENSt8__detail10_Select1stESt8equal_toIS1_ENS0_5PetDb7hash_fnENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb1ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x2c>
	    break;
 80019cc:	bf00      	nop
      return nullptr;
 80019ce:	2300      	movs	r3, #0
    }
 80019d0:	4618      	mov	r0, r3
 80019d2:	3718      	adds	r7, #24
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKN4tama13PetIdentifierENS2_11PetTexturesEEE9_M_valptrEv>:
      _M_valptr() noexcept
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	3304      	adds	r3, #4
 80019e4:	4618      	mov	r0, r3
 80019e6:	f000 f999 	bl	8001d1c <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKN4tama13PetIdentifierENS2_11PetTexturesEEE6_M_ptrEv>
 80019ea:	4603      	mov	r3, r0
 80019ec:	4618      	mov	r0, r3
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <_ZNSt14pointer_traitsIPNSt8__detail10_Hash_nodeISt4pairIKN4tama13PetIdentifierENS3_11PetTexturesEELb1EEEE10pointer_toERS8_>:
       *  @brief  Obtain a pointer to an object
       *  @param  __r  A reference to an object of type @c element_type
       *  @return @c addressof(__r)
      */
      static pointer
      pointer_to(__make_not_void<element_type>& __r) noexcept
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
      { return std::addressof(__r); }
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f000 f999 	bl	8001d34 <_ZSt9addressofINSt8__detail10_Hash_nodeISt4pairIKN4tama13PetIdentifierENS3_11PetTexturesEELb1EEEEPT_RS9_>
 8001a02:	4603      	mov	r3, r0
 8001a04:	4618      	mov	r0, r3
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN4tama13PetIdentifierENS3_11PetTexturesEELb1EEEEE17_M_node_allocatorEv>:
      _M_node_allocator()
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
      { return __ebo_node_alloc::_S_get(*this); }
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f000 f999 	bl	8001d4c <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKN4tama13PetIdentifierENS3_11PetTexturesEELb1EEEELb1EE6_S_getERSA_>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <_ZNSaISt4pairIKN4tama13PetIdentifierENS0_11PetTexturesEEEC1INSt8__detail10_Hash_nodeIS4_Lb1EEEEERKSaIT_E>:

      allocator(const allocator& __a) throw()
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
	allocator(const allocator<_Tp1>&) throw() { }
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f000 f997 	bl	8001d62 <_ZN9__gnu_cxx13new_allocatorISt4pairIKN4tama13PetIdentifierENS2_11PetTexturesEEEC1Ev>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	4618      	mov	r0, r3
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <_ZNSaISt4pairIKN4tama13PetIdentifierENS0_11PetTexturesEEED1Ev>:

      ~allocator() throw() { }
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b082      	sub	sp, #8
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f000 f996 	bl	8001d78 <_ZN9__gnu_cxx13new_allocatorISt4pairIKN4tama13PetIdentifierENS2_11PetTexturesEEED1Ev>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <_ZNSt16allocator_traitsISaISt4pairIKN4tama13PetIdentifierENS1_11PetTexturesEEEE7destroyIS5_EEvRS6_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static void
	destroy(allocator_type& __a, _Up* __p)
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b082      	sub	sp, #8
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
 8001a5e:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 8001a60:	6839      	ldr	r1, [r7, #0]
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f000 f993 	bl	8001d8e <_ZN9__gnu_cxx13new_allocatorISt4pairIKN4tama13PetIdentifierENS2_11PetTexturesEEE7destroyIS6_EEvPT_>
 8001a68:	bf00      	nop
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN4tama13PetIdentifierENS3_11PetTexturesEELb1EEEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	60b9      	str	r1, [r7, #8]
 8001a7a:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	68b9      	ldr	r1, [r7, #8]
 8001a80:	68f8      	ldr	r0, [r7, #12]
 8001a82:	f000 f98f 	bl	8001da4 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN4tama13PetIdentifierENS4_11PetTexturesEELb1EEEE10deallocateEPS9_j>
 8001a86:	bf00      	nop
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <_ZNSt14pointer_traitsIPPNSt8__detail15_Hash_node_baseEE10pointer_toERS2_>:
      pointer_to(__make_not_void<element_type>& __r) noexcept
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b082      	sub	sp, #8
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
      { return std::addressof(__r); }
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f000 f991 	bl	8001dbe <_ZSt9addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIKN4tama13PetIdentifierENS6_11PetTexturesEELb1EEEEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) throw() { }
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b082      	sub	sp, #8
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
 8001aae:	6039      	str	r1, [r7, #0]
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f000 f990 	bl	8001dd6 <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEEC1Ev>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3708      	adds	r7, #8
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <_ZNSaIPNSt8__detail15_Hash_node_baseEED1Ev>:
      ~allocator() throw() { }
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f000 f98f 	bl	8001dec <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEED1Ev>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	68b9      	ldr	r1, [r7, #8]
 8001ae8:	68f8      	ldr	r0, [r7, #12]
 8001aea:	f000 f98a 	bl	8001e02 <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE10deallocateEPS3_j>
 8001aee:	bf00      	nop
 8001af0:	3710      	adds	r7, #16
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKN4tama13PetIdentifierENS3_11PetTexturesEELb1EEEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b082      	sub	sp, #8
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
 8001afe:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8001b00:	2200      	movs	r2, #0
 8001b02:	6839      	ldr	r1, [r7, #0]
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f000 f989 	bl	8001e1c <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN4tama13PetIdentifierENS4_11PetTexturesEELb1EEEE8allocateEjPKv>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3708      	adds	r7, #8
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <_ZSt11__addressofINSt8__detail10_Hash_nodeISt4pairIKN4tama13PetIdentifierENS3_11PetTexturesEELb1EEEEPT_RS9_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <_ZNSt16allocator_traitsISaISt4pairIKN4tama13PetIdentifierENS1_11PetTexturesEEEE9constructIS5_JS5_EEEvRS6_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b084      	sub	sp, #16
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	60f8      	str	r0, [r7, #12]
 8001b32:	60b9      	str	r1, [r7, #8]
 8001b34:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f7ff fc43 	bl	80013c2 <_ZSt7forwardISt4pairIKN4tama13PetIdentifierENS1_11PetTexturesEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	461a      	mov	r2, r3
 8001b40:	68b9      	ldr	r1, [r7, #8]
 8001b42:	68f8      	ldr	r0, [r7, #12]
 8001b44:	f000 f988 	bl	8001e58 <_ZN9__gnu_cxx13new_allocatorISt4pairIKN4tama13PetIdentifierENS2_11PetTexturesEEE9constructIS6_JS6_EEEvPT_DpOT0_>
 8001b48:	bf00      	nop
 8001b4a:	3710      	adds	r7, #16
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ENS_10_Select1stELb1EE6_S_getERS2_>:
      _S_get(_Hashtable_ebo_helper& __eboh)
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp&>(__eboh); }
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr

08001b66 <_ZSt3getILj0EKN4tama13PetIdentifierENS0_11PetTexturesEERNSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeERS8_>:
        { return __pair.second; }
    };

  template<std::size_t _Int, class _Tp1, class _Tp2>
    constexpr typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type&
    get(std::pair<_Tp1, _Tp2>& __in) noexcept
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b082      	sub	sp, #8
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
    { return __pair_get<_Int>::__get(__in); }
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f000 f98f 	bl	8001e92 <_ZNSt10__pair_getILj0EE5__getIKN4tama13PetIdentifierENS2_11PetTexturesEEERT_RSt4pairIS6_T0_E>
 8001b74:	4603      	mov	r3, r0
 8001b76:	4618      	mov	r0, r3
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <_ZNSt8__detail19_Node_iterator_baseISt4pairIKN4tama13PetIdentifierENS2_11PetTexturesEELb1EEC1EPNS_10_Hash_nodeIS6_Lb1EEE>:
      _Node_iterator_base(__node_type* __p) noexcept
 8001b7e:	b480      	push	{r7}
 8001b80:	b083      	sub	sp, #12
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
 8001b86:	6039      	str	r1, [r7, #0]
      : _M_cur(__p) { }
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	683a      	ldr	r2, [r7, #0]
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4618      	mov	r0, r3
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <_ZNSt4pairINSt8__detail14_Node_iteratorIS_IKN4tama13PetIdentifierENS2_11PetTexturesEELb0ELb1EEEbEC1IS7_bLb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8001ba8:	68b8      	ldr	r0, [r7, #8]
 8001baa:	f7ff fe39 	bl	8001820 <_ZSt7forwardINSt8__detail14_Node_iteratorISt4pairIKN4tama13PetIdentifierENS3_11PetTexturesEELb0ELb1EEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	6812      	ldr	r2, [r2, #0]
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f7ff fa9a 	bl	80010f0 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	781a      	ldrb	r2, [r3, #0]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	711a      	strb	r2, [r3, #4]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3710      	adds	r7, #16
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <_ZNSt10_HashtableIN4tama13PetIdentifierESt4pairIKS1_NS0_11PetTexturesEESaIS5_ENSt8__detail10_Select1stESt8equal_toIS1_ENS0_5PetDb7hash_fnENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEjRKj>:
  template<typename _Key, typename _Value,
	   typename _Alloc, typename _ExtractKey, typename _Equal,
	   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
	   typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b086      	sub	sp, #24
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	60f8      	str	r0, [r7, #12]
 8001bd6:	60b9      	str	r1, [r7, #8]
 8001bd8:	607a      	str	r2, [r7, #4]
	       _H1, _H2, _Hash, _RehashPolicy, _Traits>::
    _M_rehash(size_type __n, const __rehash_state& __state)
    {
      __try
	{
	  _M_rehash_aux(__n, __unique_keys());
 8001bda:	461a      	mov	r2, r3
 8001bdc:	68b9      	ldr	r1, [r7, #8]
 8001bde:	68f8      	ldr	r0, [r7, #12]
 8001be0:	f000 f962 	bl	8001ea8 <_ZNSt10_HashtableIN4tama13PetIdentifierESt4pairIKS1_NS0_11PetTexturesEESaIS5_ENSt8__detail10_Select1stESt8equal_toIS1_ENS0_5PetDb7hash_fnENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb1ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE>
	  // A failure here means that buckets allocation failed.  We only
	  // have to restore hash policy previous state.
	  _M_rehash_policy._M_reset(__state);
	  __throw_exception_again;
	}
    }
 8001be4:	bf00      	nop
 8001be6:	3718      	adds	r7, #24
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <_ZNKSt8__detail15_Hash_code_baseIN4tama13PetIdentifierESt4pairIKS2_NS1_11PetTexturesEENS_10_Select1stENS1_5PetDb7hash_fnENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE13_M_store_codeEPNS_10_Hash_nodeIS6_Lb1EEEj>:
      _M_store_code(__node_type* __n, __hash_code __c) const
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
      { __n->_M_hash_code = __c; }
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	61da      	str	r2, [r3, #28]
 8001bfe:	bf00      	nop
 8001c00:	3714      	adds	r7, #20
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr

08001c0a <_ZNSt10_HashtableIN4tama13PetIdentifierESt4pairIKS1_NS0_11PetTexturesEESaIS5_ENSt8__detail10_Select1stESt8equal_toIS1_ENS0_5PetDb7hash_fnENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb1ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS7_10_Hash_nodeIS5_Lb1EEE>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8001c0a:	b590      	push	{r4, r7, lr}
 8001c0c:	b085      	sub	sp, #20
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	60f8      	str	r0, [r7, #12]
 8001c12:	60b9      	str	r1, [r7, #8]
 8001c14:	607a      	str	r2, [r7, #4]
      if (_M_buckets[__bkt])
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	4413      	add	r3, r2
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d011      	beq.n	8001c4a <_ZNSt10_HashtableIN4tama13PetIdentifierESt4pairIKS1_NS0_11PetTexturesEESaIS5_ENSt8__detail10_Select1stESt8equal_toIS1_ENS0_5PetDb7hash_fnENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb1ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS7_10_Hash_nodeIS5_Lb1EEE+0x40>
	  __node->_M_nxt = _M_buckets[__bkt]->_M_nxt;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	4413      	add	r3, r2
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	601a      	str	r2, [r3, #0]
	  _M_buckets[__bkt]->_M_nxt = __node;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	4413      	add	r3, r2
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	601a      	str	r2, [r3, #0]
    }
 8001c48:	e021      	b.n	8001c8e <_ZNSt10_HashtableIN4tama13PetIdentifierESt4pairIKS1_NS0_11PetTexturesEESaIS5_ENSt8__detail10_Select1stESt8equal_toIS1_ENS0_5PetDb7hash_fnENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb1ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS7_10_Hash_nodeIS5_Lb1EEE+0x84>
	  __node->_M_nxt = _M_before_begin._M_nxt;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	689a      	ldr	r2, [r3, #8]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	601a      	str	r2, [r3, #0]
	  _M_before_begin._M_nxt = __node;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	609a      	str	r2, [r3, #8]
	  if (__node->_M_nxt)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d00e      	beq.n	8001c7e <_ZNSt10_HashtableIN4tama13PetIdentifierESt4pairIKS1_NS0_11PetTexturesEESaIS5_ENSt8__detail10_Select1stESt8equal_toIS1_ENS0_5PetDb7hash_fnENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb1ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS7_10_Hash_nodeIS5_Lb1EEE+0x74>
	    _M_buckets[_M_bucket_index(__node->_M_next())] = __node;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681c      	ldr	r4, [r3, #0]
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f7ff fcdc 	bl	8001622 <_ZNKSt8__detail10_Hash_nodeISt4pairIKN4tama13PetIdentifierENS2_11PetTexturesEELb1EE7_M_nextEv>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	68f8      	ldr	r0, [r7, #12]
 8001c70:	f000 f843 	bl	8001cfa <_ZNKSt10_HashtableIN4tama13PetIdentifierESt4pairIKS1_NS0_11PetTexturesEESaIS5_ENSt8__detail10_Select1stESt8equal_toIS1_ENS0_5PetDb7hash_fnENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb1ELb0ELb1EEEE15_M_bucket_indexEPNS7_10_Hash_nodeIS5_Lb1EEE>
 8001c74:	4603      	mov	r3, r0
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	4423      	add	r3, r4
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	601a      	str	r2, [r3, #0]
	  _M_buckets[__bkt] = &_M_before_begin;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	4413      	add	r3, r2
 8001c88:	68fa      	ldr	r2, [r7, #12]
 8001c8a:	3208      	adds	r2, #8
 8001c8c:	601a      	str	r2, [r3, #0]
    }
 8001c8e:	bf00      	nop
 8001c90:	3714      	adds	r7, #20
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd90      	pop	{r4, r7, pc}

08001c96 <_ZNSt8__detail21_Hashtable_ebo_helperILi1EN4tama5PetDb7hash_fnELb1EE7_S_cgetERKS4_>:
      _S_cget(const _Hashtable_ebo_helper& __eboh)
 8001c96:	b480      	push	{r7}
 8001c98:	b083      	sub	sp, #12
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp&>(__eboh); }
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <_ZNKSt8__detail15_Hash_code_baseIN4tama13PetIdentifierESt4pairIKS2_NS1_11PetTexturesEENS_10_Select1stENS1_5PetDb7hash_fnENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE5_M_h2Ev>:
      _M_h2() const { return __ebo_h2::_S_cget(*this); }
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f000 f959 	bl	8001f6c <_ZNSt8__detail21_Hashtable_ebo_helperILi2ENS_18_Mod_range_hashingELb1EE7_S_cgetERKS2_>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3708      	adds	r7, #8
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <_ZNKSt8__detail15_Hashtable_baseIN4tama13PetIdentifierESt4pairIKS2_NS1_11PetTexturesEENS_10_Select1stESt8equal_toIS2_ENS1_5PetDb7hash_fnENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_equalsERS4_jPNS_10_Hash_nodeIS6_Lb1EEE>:
    _M_equals(const _Key& __k, __hash_code __c, __node_type* __n) const
 8001cc4:	b590      	push	{r4, r7, lr}
 8001cc6:	b087      	sub	sp, #28
 8001cc8:	af02      	add	r7, sp, #8
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
 8001cd0:	603b      	str	r3, [r7, #0]
      return _EqualHelper::_S_equals(_M_eq(), this->_M_extract(),
 8001cd2:	68f8      	ldr	r0, [r7, #12]
 8001cd4:	f000 f97a 	bl	8001fcc <_ZNKSt8__detail15_Hashtable_baseIN4tama13PetIdentifierESt4pairIKS2_NS1_11PetTexturesEENS_10_Select1stESt8equal_toIS2_ENS1_5PetDb7hash_fnENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb1ELb0ELb1EEEE5_M_eqEv>
 8001cd8:	4604      	mov	r4, r0
 8001cda:	68f8      	ldr	r0, [r7, #12]
 8001cdc:	f000 f982 	bl	8001fe4 <_ZNKSt8__detail15_Hash_code_baseIN4tama13PetIdentifierESt4pairIKS2_NS1_11PetTexturesEENS_10_Select1stENS1_5PetDb7hash_fnENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE10_M_extractEv>
 8001ce0:	4601      	mov	r1, r0
				     __k, __c, __n);
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	9300      	str	r3, [sp, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	68ba      	ldr	r2, [r7, #8]
 8001cea:	4620      	mov	r0, r4
 8001cec:	f000 f949 	bl	8001f82 <_ZNSt8__detail13_Equal_helperIN4tama13PetIdentifierESt4pairIKS2_NS1_11PetTexturesEENS_10_Select1stESt8equal_toIS2_EjLb1EE9_S_equalsERKS9_RKS7_RS4_jPNS_10_Hash_nodeIS6_Lb1EEE>
 8001cf0:	4603      	mov	r3, r0
    }
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3714      	adds	r7, #20
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd90      	pop	{r4, r7, pc}

08001cfa <_ZNKSt10_HashtableIN4tama13PetIdentifierESt4pairIKS1_NS0_11PetTexturesEESaIS5_ENSt8__detail10_Select1stESt8equal_toIS1_ENS0_5PetDb7hash_fnENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb1ELb0ELb1EEEE15_M_bucket_indexEPNS7_10_Hash_nodeIS5_Lb1EEE>:
      _M_bucket_index(__node_type* __n) const noexcept
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b082      	sub	sp, #8
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
 8001d02:	6039      	str	r1, [r7, #0]
      { return __hash_code_base::_M_bucket_index(__n, _M_bucket_count); }
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	461a      	mov	r2, r3
 8001d0a:	6839      	ldr	r1, [r7, #0]
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f000 f975 	bl	8001ffc <_ZNKSt8__detail15_Hash_code_baseIN4tama13PetIdentifierESt4pairIKS2_NS1_11PetTexturesEENS_10_Select1stENS1_5PetDb7hash_fnENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE15_M_bucket_indexEPKNS_10_Hash_nodeIS6_Lb1EEEj>
 8001d12:	4603      	mov	r3, r0
 8001d14:	4618      	mov	r0, r3
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKN4tama13PetIdentifierENS2_11PetTexturesEEE6_M_ptrEv>:
      {
        return static_cast<const void*>(&_M_storage);
      }

      _Tp*
      _M_ptr() noexcept
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f000 f97d 	bl	8002024 <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKN4tama13PetIdentifierENS2_11PetTexturesEEE7_M_addrEv>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3708      	adds	r7, #8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <_ZSt9addressofINSt8__detail10_Hash_nodeISt4pairIKN4tama13PetIdentifierENS3_11PetTexturesEELb1EEEEPT_RS9_>:
   *  @param  __r  Reference to an object or function.
   *  @return   The actual address.
  */
  template<typename _Tp>
    inline _GLIBCXX17_CONSTEXPR _Tp*
    addressof(_Tp& __r) noexcept
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f7ff fee9 	bl	8001b14 <_ZSt11__addressofINSt8__detail10_Hash_nodeISt4pairIKN4tama13PetIdentifierENS3_11PetTexturesEELb1EEEEPT_RS9_>
 8001d42:	4603      	mov	r3, r0
 8001d44:	4618      	mov	r0, r3
 8001d46:	3708      	adds	r7, #8
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKN4tama13PetIdentifierENS3_11PetTexturesEELb1EEEELb1EE6_S_getERSA_>:
      _S_get(_Hashtable_ebo_helper& __eboh)
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp&>(__eboh); }
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	4618      	mov	r0, r3
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr

08001d62 <_ZN9__gnu_cxx13new_allocatorISt4pairIKN4tama13PetIdentifierENS2_11PetTexturesEEEC1Ev>:
 8001d62:	b480      	push	{r7}
 8001d64:	b083      	sub	sp, #12
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <_ZN9__gnu_cxx13new_allocatorISt4pairIKN4tama13PetIdentifierENS2_11PetTexturesEEED1Ev>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }

      template<typename _Tp1>
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	4618      	mov	r0, r3
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr

08001d8e <_ZN9__gnu_cxx13new_allocatorISt4pairIKN4tama13PetIdentifierENS2_11PetTexturesEEE7destroyIS6_EEvPT_>:
	construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p) { __p->~_Up(); }
 8001d8e:	b480      	push	{r7}
 8001d90:	b083      	sub	sp, #12
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
 8001d96:	6039      	str	r1, [r7, #0]
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN4tama13PetIdentifierENS4_11PetTexturesEELb1EEEE10deallocateEPS9_j>:
      deallocate(pointer __p, size_type)
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8001db0:	68b8      	ldr	r0, [r7, #8]
 8001db2:	f01d fd9d 	bl	801f8f0 <_ZdlPv>
      }
 8001db6:	bf00      	nop
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <_ZSt9addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_>:
    addressof(_Tp& __r) noexcept
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b082      	sub	sp, #8
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f000 f937 	bl	800203a <_ZSt11__addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001dd6:	b480      	push	{r7}
 8001dd8:	b083      	sub	sp, #12
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4618      	mov	r0, r3
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	4618      	mov	r0, r3
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE10deallocateEPS3_j>:
      deallocate(pointer __p, size_type)
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b084      	sub	sp, #16
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	60f8      	str	r0, [r7, #12]
 8001e0a:	60b9      	str	r1, [r7, #8]
 8001e0c:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8001e0e:	68b8      	ldr	r0, [r7, #8]
 8001e10:	f01d fd6e 	bl	801f8f0 <_ZdlPv>
      }
 8001e14:	bf00      	nop
 8001e16:	3710      	adds	r7, #16
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN4tama13PetIdentifierENS4_11PetTexturesEELb1EEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8001e28:	68f8      	ldr	r0, [r7, #12]
 8001e2a:	f000 f911 	bl	8002050 <_ZNK9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN4tama13PetIdentifierENS4_11PetTexturesEELb1EEEE8max_sizeEv>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	4293      	cmp	r3, r2
 8001e34:	bf8c      	ite	hi
 8001e36:	2301      	movhi	r3, #1
 8001e38:	2300      	movls	r3, #0
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN4tama13PetIdentifierENS4_11PetTexturesEELb1EEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8001e40:	f01d fd6b 	bl	801f91a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	015b      	lsls	r3, r3, #5
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f01d fd38 	bl	801f8be <_Znwj>
 8001e4e:	4603      	mov	r3, r0
      }
 8001e50:	4618      	mov	r0, r3
 8001e52:	3710      	adds	r7, #16
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <_ZN9__gnu_cxx13new_allocatorISt4pairIKN4tama13PetIdentifierENS2_11PetTexturesEEE9constructIS6_JS6_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8001e58:	b5b0      	push	{r4, r5, r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f7ff faac 	bl	80013c2 <_ZSt7forwardISt4pairIKN4tama13PetIdentifierENS1_11PetTexturesEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8001e6a:	4605      	mov	r5, r0
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	4619      	mov	r1, r3
 8001e70:	2018      	movs	r0, #24
 8001e72:	f7ff f8e4 	bl	800103e <_ZnwjPv>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d006      	beq.n	8001e8a <_ZN9__gnu_cxx13new_allocatorISt4pairIKN4tama13PetIdentifierENS2_11PetTexturesEEE9constructIS6_JS6_EEEvPT_DpOT0_+0x32>
 8001e7c:	461c      	mov	r4, r3
 8001e7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e82:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001e86:	e884 0003 	stmia.w	r4, {r0, r1}
 8001e8a:	bf00      	nop
 8001e8c:	3710      	adds	r7, #16
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bdb0      	pop	{r4, r5, r7, pc}

08001e92 <_ZNSt10__pair_getILj0EE5__getIKN4tama13PetIdentifierENS2_11PetTexturesEEERT_RSt4pairIS6_T0_E>:
        __get(std::pair<_Tp1, _Tp2>& __pair) noexcept
 8001e92:	b480      	push	{r7}
 8001e94:	b083      	sub	sp, #12
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
        { return __pair.first; }
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <_ZNSt10_HashtableIN4tama13PetIdentifierESt4pairIKS1_NS0_11PetTexturesEESaIS5_ENSt8__detail10_Select1stESt8equal_toIS1_ENS0_5PetDb7hash_fnENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb1ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE>:
  template<typename _Key, typename _Value,
	   typename _Alloc, typename _ExtractKey, typename _Equal,
	   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
	   typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b08a      	sub	sp, #40	; 0x28
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	713a      	strb	r2, [r7, #4]
	       _H1, _H2, _Hash, _RehashPolicy, _Traits>::
    _M_rehash_aux(size_type __n, std::true_type)
    {
      __bucket_type* __new_buckets = _M_allocate_buckets(__n);
 8001eb4:	68b9      	ldr	r1, [r7, #8]
 8001eb6:	68f8      	ldr	r0, [r7, #12]
 8001eb8:	f000 f8d6 	bl	8002068 <_ZNSt10_HashtableIN4tama13PetIdentifierESt4pairIKS1_NS0_11PetTexturesEESaIS5_ENSt8__detail10_Select1stESt8equal_toIS1_ENS0_5PetDb7hash_fnENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb1ELb0ELb1EEEE19_M_allocate_bucketsEj>
 8001ebc:	61f8      	str	r0, [r7, #28]
      __node_type* __p = _M_begin();
 8001ebe:	68f8      	ldr	r0, [r7, #12]
 8001ec0:	f7ff face 	bl	8001460 <_ZNKSt10_HashtableIN4tama13PetIdentifierESt4pairIKS1_NS0_11PetTexturesEESaIS5_ENSt8__detail10_Select1stESt8equal_toIS1_ENS0_5PetDb7hash_fnENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb1ELb0ELb1EEEE8_M_beginEv>
 8001ec4:	6278      	str	r0, [r7, #36]	; 0x24
      _M_before_begin._M_nxt = nullptr;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	609a      	str	r2, [r3, #8]
      std::size_t __bbegin_bkt = 0;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	623b      	str	r3, [r7, #32]
      while (__p)
 8001ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d03d      	beq.n	8001f52 <_ZNSt10_HashtableIN4tama13PetIdentifierESt4pairIKS1_NS0_11PetTexturesEESaIS5_ENSt8__detail10_Select1stESt8equal_toIS1_ENS0_5PetDb7hash_fnENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb1ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0xaa>
	{
	  __node_type* __next = __p->_M_next();
 8001ed6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001ed8:	f7ff fba3 	bl	8001622 <_ZNKSt8__detail10_Hash_nodeISt4pairIKN4tama13PetIdentifierENS2_11PetTexturesEELb1EE7_M_nextEv>
 8001edc:	61b8      	str	r0, [r7, #24]
	  std::size_t __bkt = __hash_code_base::_M_bucket_index(__p, __n);
 8001ede:	68ba      	ldr	r2, [r7, #8]
 8001ee0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ee2:	68f8      	ldr	r0, [r7, #12]
 8001ee4:	f000 f88a 	bl	8001ffc <_ZNKSt8__detail15_Hash_code_baseIN4tama13PetIdentifierESt4pairIKS2_NS1_11PetTexturesEENS_10_Select1stENS1_5PetDb7hash_fnENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE15_M_bucket_indexEPKNS_10_Hash_nodeIS6_Lb1EEEj>
 8001ee8:	6178      	str	r0, [r7, #20]
	  if (!__new_buckets[__bkt])
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	69fa      	ldr	r2, [r7, #28]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d11a      	bne.n	8001f2e <_ZNSt10_HashtableIN4tama13PetIdentifierESt4pairIKS1_NS0_11PetTexturesEESaIS5_ENSt8__detail10_Select1stESt8equal_toIS1_ENS0_5PetDb7hash_fnENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb1ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0x86>
	    {
	      __p->_M_nxt = _M_before_begin._M_nxt;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	689a      	ldr	r2, [r3, #8]
 8001efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efe:	601a      	str	r2, [r3, #0]
	      _M_before_begin._M_nxt = __p;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f04:	609a      	str	r2, [r3, #8]
	      __new_buckets[__bkt] = &_M_before_begin;
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	69fa      	ldr	r2, [r7, #28]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	3208      	adds	r2, #8
 8001f12:	601a      	str	r2, [r3, #0]
	      if (__p->_M_nxt)
 8001f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d005      	beq.n	8001f28 <_ZNSt10_HashtableIN4tama13PetIdentifierESt4pairIKS1_NS0_11PetTexturesEESaIS5_ENSt8__detail10_Select1stESt8equal_toIS1_ENS0_5PetDb7hash_fnENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb1ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0x80>
		__new_buckets[__bbegin_bkt] = __p;
 8001f1c:	6a3b      	ldr	r3, [r7, #32]
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	69fa      	ldr	r2, [r7, #28]
 8001f22:	4413      	add	r3, r2
 8001f24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f26:	601a      	str	r2, [r3, #0]
	      __bbegin_bkt = __bkt;
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	623b      	str	r3, [r7, #32]
 8001f2c:	e00e      	b.n	8001f4c <_ZNSt10_HashtableIN4tama13PetIdentifierESt4pairIKS1_NS0_11PetTexturesEESaIS5_ENSt8__detail10_Select1stESt8equal_toIS1_ENS0_5PetDb7hash_fnENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb1ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0xa4>
	    }
	  else
	    {
	      __p->_M_nxt = __new_buckets[__bkt]->_M_nxt;
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	69fa      	ldr	r2, [r7, #28]
 8001f34:	4413      	add	r3, r2
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3c:	601a      	str	r2, [r3, #0]
	      __new_buckets[__bkt]->_M_nxt = __p;
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	69fa      	ldr	r2, [r7, #28]
 8001f44:	4413      	add	r3, r2
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f4a:	601a      	str	r2, [r3, #0]
	    }
	  __p = __next;
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	627b      	str	r3, [r7, #36]	; 0x24
      while (__p)
 8001f50:	e7be      	b.n	8001ed0 <_ZNSt10_HashtableIN4tama13PetIdentifierESt4pairIKS1_NS0_11PetTexturesEESaIS5_ENSt8__detail10_Select1stESt8equal_toIS1_ENS0_5PetDb7hash_fnENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb1ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0x28>
	}

      _M_deallocate_buckets();
 8001f52:	68f8      	ldr	r0, [r7, #12]
 8001f54:	f7ff fa25 	bl	80013a2 <_ZNSt10_HashtableIN4tama13PetIdentifierESt4pairIKS1_NS0_11PetTexturesEESaIS5_ENSt8__detail10_Select1stESt8equal_toIS1_ENS0_5PetDb7hash_fnENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb1ELb0ELb1EEEE21_M_deallocate_bucketsEv>
      _M_bucket_count = __n;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	68ba      	ldr	r2, [r7, #8]
 8001f5c:	605a      	str	r2, [r3, #4]
      _M_buckets = __new_buckets;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	69fa      	ldr	r2, [r7, #28]
 8001f62:	601a      	str	r2, [r3, #0]
    }
 8001f64:	bf00      	nop
 8001f66:	3728      	adds	r7, #40	; 0x28
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <_ZNSt8__detail21_Hashtable_ebo_helperILi2ENS_18_Mod_range_hashingELb1EE7_S_cgetERKS2_>:
      _S_cget(const _Hashtable_ebo_helper& __eboh)
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp&>(__eboh); }
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4618      	mov	r0, r3
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <_ZNSt8__detail13_Equal_helperIN4tama13PetIdentifierESt4pairIKS2_NS1_11PetTexturesEENS_10_Select1stESt8equal_toIS2_EjLb1EE9_S_equalsERKS9_RKS7_RS4_jPNS_10_Hash_nodeIS6_Lb1EEE>:
    _S_equals(const _Equal& __eq, const _ExtractKey& __extract,
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b084      	sub	sp, #16
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	60f8      	str	r0, [r7, #12]
 8001f8a:	60b9      	str	r1, [r7, #8]
 8001f8c:	607a      	str	r2, [r7, #4]
 8001f8e:	603b      	str	r3, [r7, #0]
    { return __c == __n->_M_hash_code && __eq(__k, __extract(__n->_M_v())); }
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	69db      	ldr	r3, [r3, #28]
 8001f94:	683a      	ldr	r2, [r7, #0]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d113      	bne.n	8001fc2 <_ZNSt8__detail13_Equal_helperIN4tama13PetIdentifierESt4pairIKS2_NS1_11PetTexturesEENS_10_Select1stESt8equal_toIS2_EjLb1EE9_S_equalsERKS9_RKS7_RS4_jPNS_10_Hash_nodeIS6_Lb1EEE+0x40>
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7ff fb34 	bl	800160a <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKN4tama13PetIdentifierENS2_11PetTexturesEEE4_M_vEv>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	68b8      	ldr	r0, [r7, #8]
 8001fa8:	f7ff fc1a 	bl	80017e0 <_ZNKSt8__detail10_Select1stclIRSt4pairIKN4tama13PetIdentifierENS3_11PetTexturesEEEEDTcl3getILi0EEcl7forwardIT_Efp_EEEOS9_>
 8001fac:	4603      	mov	r3, r0
 8001fae:	461a      	mov	r2, r3
 8001fb0:	6879      	ldr	r1, [r7, #4]
 8001fb2:	68f8      	ldr	r0, [r7, #12]
 8001fb4:	f000 f874 	bl	80020a0 <_ZNKSt8equal_toIN4tama13PetIdentifierEEclERKS1_S4_>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <_ZNSt8__detail13_Equal_helperIN4tama13PetIdentifierESt4pairIKS2_NS1_11PetTexturesEENS_10_Select1stESt8equal_toIS2_EjLb1EE9_S_equalsERKS9_RKS7_RS4_jPNS_10_Hash_nodeIS6_Lb1EEE+0x40>
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e000      	b.n	8001fc4 <_ZNSt8__detail13_Equal_helperIN4tama13PetIdentifierESt4pairIKS2_NS1_11PetTexturesEENS_10_Select1stESt8equal_toIS2_EjLb1EE9_S_equalsERKS9_RKS7_RS4_jPNS_10_Hash_nodeIS6_Lb1EEE+0x42>
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3710      	adds	r7, #16
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <_ZNKSt8__detail15_Hashtable_baseIN4tama13PetIdentifierESt4pairIKS2_NS1_11PetTexturesEENS_10_Select1stESt8equal_toIS2_ENS1_5PetDb7hash_fnENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb1ELb0ELb1EEEE5_M_eqEv>:
    _M_eq() const { return _EqualEBO::_S_cget(*this); }
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f000 f872 	bl	80020be <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toIN4tama13PetIdentifierEELb1EE7_S_cgetERKS5_>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <_ZNKSt8__detail15_Hash_code_baseIN4tama13PetIdentifierESt4pairIKS2_NS1_11PetTexturesEENS_10_Select1stENS1_5PetDb7hash_fnENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE10_M_extractEv>:
      _M_extract() const { return __ebo_extract_key::_S_cget(*this); }
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f000 f871 	bl	80020d4 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ENS_10_Select1stELb1EE7_S_cgetERKS2_>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3708      	adds	r7, #8
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <_ZNKSt8__detail15_Hash_code_baseIN4tama13PetIdentifierESt4pairIKS2_NS1_11PetTexturesEENS_10_Select1stENS1_5PetDb7hash_fnENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE15_M_bucket_indexEPKNS_10_Hash_nodeIS6_Lb1EEEj>:
      _M_bucket_index(const __node_type* __p, std::size_t __n) const
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
      { return _M_h2()(__p->_M_hash_code, __n); }
 8002008:	68f8      	ldr	r0, [r7, #12]
 800200a:	f7ff fe4f 	bl	8001cac <_ZNKSt8__detail15_Hash_code_baseIN4tama13PetIdentifierESt4pairIKS2_NS1_11PetTexturesEENS_10_Select1stENS1_5PetDb7hash_fnENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE5_M_h2Ev>
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	69db      	ldr	r3, [r3, #28]
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	4619      	mov	r1, r3
 8002016:	f7ff f838 	bl	800108a <_ZNKSt8__detail18_Mod_range_hashingclEjj>
 800201a:	4603      	mov	r3, r0
 800201c:	4618      	mov	r0, r3
 800201e:	3710      	adds	r7, #16
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKN4tama13PetIdentifierENS2_11PetTexturesEEE7_M_addrEv>:
      _M_addr() noexcept
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
        return static_cast<void*>(&_M_storage);
 800202c:	687b      	ldr	r3, [r7, #4]
      }
 800202e:	4618      	mov	r0, r3
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr

0800203a <_ZSt11__addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800203a:	b480      	push	{r7}
 800203c:	b083      	sub	sp, #12
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4618      	mov	r0, r3
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <_ZNK9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN4tama13PetIdentifierENS4_11PetTexturesEELb1EEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8002058:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
 800205c:	4618      	mov	r0, r3
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <_ZNSt10_HashtableIN4tama13PetIdentifierESt4pairIKS1_NS0_11PetTexturesEESaIS5_ENSt8__detail10_Select1stESt8equal_toIS1_ENS0_5PetDb7hash_fnENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb1ELb0ELb1EEEE19_M_allocate_bucketsEj>:
      _M_allocate_buckets(size_type __n)
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
	if (__builtin_expect(__n == 1, false))
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	2b01      	cmp	r3, #1
 8002076:	bf0c      	ite	eq
 8002078:	2301      	moveq	r3, #1
 800207a:	2300      	movne	r3, #0
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b00      	cmp	r3, #0
 8002080:	d005      	beq.n	800208e <_ZNSt10_HashtableIN4tama13PetIdentifierESt4pairIKS1_NS0_11PetTexturesEESaIS5_ENSt8__detail10_Select1stESt8equal_toIS1_ENS0_5PetDb7hash_fnENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb1ELb0ELb1EEEE19_M_allocate_bucketsEj+0x26>
	    _M_single_bucket = nullptr;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	619a      	str	r2, [r3, #24]
	    return &_M_single_bucket;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	3318      	adds	r3, #24
 800208c:	e004      	b.n	8002098 <_ZNSt10_HashtableIN4tama13PetIdentifierESt4pairIKS1_NS0_11PetTexturesEESaIS5_ENSt8__detail10_Select1stESt8equal_toIS1_ENS0_5PetDb7hash_fnENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb1ELb0ELb1EEEE19_M_allocate_bucketsEj+0x30>
	return __hashtable_alloc::_M_allocate_buckets(__n);
 800208e:	6839      	ldr	r1, [r7, #0]
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f000 f82a 	bl	80020ea <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN4tama13PetIdentifierENS3_11PetTexturesEELb1EEEEE19_M_allocate_bucketsEj>
 8002096:	4603      	mov	r3, r0
      }
 8002098:	4618      	mov	r0, r3
 800209a:	3708      	adds	r7, #8
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <_ZNKSt8equal_toIN4tama13PetIdentifierEEclERKS1_S4_>:
  template<typename _Tp>
    struct equal_to : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	607a      	str	r2, [r7, #4]
      { return __x == __y; }
 80020ac:	6879      	ldr	r1, [r7, #4]
 80020ae:	68b8      	ldr	r0, [r7, #8]
 80020b0:	f7ff f829 	bl	8001106 <_ZNK4tama13PetIdentifiereqERKS0_>
 80020b4:	4603      	mov	r3, r0
 80020b6:	4618      	mov	r0, r3
 80020b8:	3710      	adds	r7, #16
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toIN4tama13PetIdentifierEELb1EE7_S_cgetERKS5_>:
      _S_cget(const _Hashtable_ebo_helper& __eboh)
 80020be:	b480      	push	{r7}
 80020c0:	b083      	sub	sp, #12
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp&>(__eboh); }
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4618      	mov	r0, r3
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ENS_10_Select1stELb1EE7_S_cgetERKS2_>:
      _S_cget(const _Hashtable_ebo_helper& __eboh)
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp&>(__eboh); }
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4618      	mov	r0, r3
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr

080020ea <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN4tama13PetIdentifierENS3_11PetTexturesEELb1EEEEE19_M_allocate_bucketsEj>:
    _Hashtable_alloc<_NodeAlloc>::_M_allocate_buckets(std::size_t __n)
 80020ea:	b590      	push	{r4, r7, lr}
 80020ec:	b087      	sub	sp, #28
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
 80020f2:	6039      	str	r1, [r7, #0]
      __bucket_alloc_type __alloc(_M_node_allocator());
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f7ff fc89 	bl	8001a0c <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN4tama13PetIdentifierENS3_11PetTexturesEELb1EEEEE17_M_node_allocatorEv>
 80020fa:	4602      	mov	r2, r0
 80020fc:	f107 030c 	add.w	r3, r7, #12
 8002100:	4611      	mov	r1, r2
 8002102:	4618      	mov	r0, r3
 8002104:	f7ff fccf 	bl	8001aa6 <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIKN4tama13PetIdentifierENS6_11PetTexturesEELb1EEEEERKSaIT_E>
      auto __ptr = __bucket_alloc_traits::allocate(__alloc, __n);
 8002108:	f107 030c 	add.w	r3, r7, #12
 800210c:	6839      	ldr	r1, [r7, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	f000 f818 	bl	8002144 <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE8allocateERS3_j>
 8002114:	6178      	str	r0, [r7, #20]
      __bucket_type* __p = std::__addressof(*__ptr);
 8002116:	6978      	ldr	r0, [r7, #20]
 8002118:	f7ff ff8f 	bl	800203a <_ZSt11__addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_>
 800211c:	6138      	str	r0, [r7, #16]
      __builtin_memset(__p, 0, __n * sizeof(__bucket_type));
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	4610      	mov	r0, r2
 8002126:	461a      	mov	r2, r3
 8002128:	2100      	movs	r1, #0
 800212a:	f01d ff9f 	bl	802006c <memset>
      return __p;
 800212e:	693c      	ldr	r4, [r7, #16]
      __bucket_alloc_type __alloc(_M_node_allocator());
 8002130:	f107 030c 	add.w	r3, r7, #12
 8002134:	4618      	mov	r0, r3
 8002136:	f7ff fcc3 	bl	8001ac0 <_ZNSaIPNSt8__detail15_Hash_node_baseEED1Ev>
      return __p;
 800213a:	4623      	mov	r3, r4
    }
 800213c:	4618      	mov	r0, r3
 800213e:	371c      	adds	r7, #28
 8002140:	46bd      	mov	sp, r7
 8002142:	bd90      	pop	{r4, r7, pc}

08002144 <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800214e:	2200      	movs	r2, #0
 8002150:	6839      	ldr	r1, [r7, #0]
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f000 f805 	bl	8002162 <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE8allocateEjPKv>
 8002158:	4603      	mov	r3, r0
 800215a:	4618      	mov	r0, r3
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002162:	b580      	push	{r7, lr}
 8002164:	b084      	sub	sp, #16
 8002166:	af00      	add	r7, sp, #0
 8002168:	60f8      	str	r0, [r7, #12]
 800216a:	60b9      	str	r1, [r7, #8]
 800216c:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800216e:	68f8      	ldr	r0, [r7, #12]
 8002170:	f000 f815 	bl	800219e <_ZNK9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE8max_sizeEv>
 8002174:	4602      	mov	r2, r0
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	4293      	cmp	r3, r2
 800217a:	bf8c      	ite	hi
 800217c:	2301      	movhi	r3, #1
 800217e:	2300      	movls	r3, #0
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8002186:	f01d fbc8 	bl	801f91a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	4618      	mov	r0, r3
 8002190:	f01d fb95 	bl	801f8be <_Znwj>
 8002194:	4603      	mov	r3, r0
      }
 8002196:	4618      	mov	r0, r3
 8002198:	3710      	adds	r7, #16
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <_ZNK9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800219e:	b480      	push	{r7}
 80021a0:	b083      	sub	sp, #12
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 80021a6:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80021aa:	4618      	mov	r0, r3
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr

080021b6 <_ZN4tama5Input11addListenerEPNS_7OnInputE>:
//

#include "Input.h"

void tama::Input::addListener(tama::OnInput * listener)
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b082      	sub	sp, #8
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
 80021be:	6039      	str	r1, [r7, #0]
    listeners.push_back(listener);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	3304      	adds	r3, #4
 80021c4:	463a      	mov	r2, r7
 80021c6:	4611      	mov	r1, r2
 80021c8:	4618      	mov	r0, r3
 80021ca:	f000 f84f 	bl	800226c <_ZNSt6vectorIPN4tama7OnInputESaIS2_EE9push_backERKS2_>
}
 80021ce:	bf00      	nop
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <_ZN4tama5Input14removeListenerEPNS_7OnInputE>:

void tama::Input::removeListener(tama::OnInput * listener)
{
 80021d6:	b590      	push	{r4, r7, lr}
 80021d8:	b087      	sub	sp, #28
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
 80021de:	6039      	str	r1, [r7, #0]
    for (unsigned i = 0; i < listeners.size(); ++i)
 80021e0:	2300      	movs	r3, #0
 80021e2:	617b      	str	r3, [r7, #20]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	3304      	adds	r3, #4
 80021e8:	4618      	mov	r0, r3
 80021ea:	f000 f864 	bl	80022b6 <_ZNKSt6vectorIPN4tama7OnInputESaIS2_EE4sizeEv>
 80021ee:	4602      	mov	r2, r0
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	4293      	cmp	r3, r2
 80021f4:	bf34      	ite	cc
 80021f6:	2301      	movcc	r3, #1
 80021f8:	2300      	movcs	r3, #0
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d031      	beq.n	8002264 <_ZN4tama5Input14removeListenerEPNS_7OnInputE+0x8e>
    {
        if (listener == listeners[i])
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	3304      	adds	r3, #4
 8002204:	6979      	ldr	r1, [r7, #20]
 8002206:	4618      	mov	r0, r3
 8002208:	f000 f866 	bl	80022d8 <_ZNSt6vectorIPN4tama7OnInputESaIS2_EEixEj>
 800220c:	4603      	mov	r3, r0
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	683a      	ldr	r2, [r7, #0]
 8002212:	429a      	cmp	r2, r3
 8002214:	bf0c      	ite	eq
 8002216:	2301      	moveq	r3, #1
 8002218:	2300      	movne	r3, #0
 800221a:	b2db      	uxtb	r3, r3
 800221c:	2b00      	cmp	r3, #0
 800221e:	d01d      	beq.n	800225c <_ZN4tama5Input14removeListenerEPNS_7OnInputE+0x86>
        {
            listeners.erase(listeners.begin() + i);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	1d1c      	adds	r4, r3, #4
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	3304      	adds	r3, #4
 8002228:	4618      	mov	r0, r3
 800222a:	f000 f865 	bl	80022f8 <_ZNSt6vectorIPN4tama7OnInputESaIS2_EE5beginEv>
 800222e:	4603      	mov	r3, r0
 8002230:	613b      	str	r3, [r7, #16]
 8002232:	697a      	ldr	r2, [r7, #20]
 8002234:	f107 0310 	add.w	r3, r7, #16
 8002238:	4611      	mov	r1, r2
 800223a:	4618      	mov	r0, r3
 800223c:	f000 f86c 	bl	8002318 <_ZNK9__gnu_cxx17__normal_iteratorIPPN4tama7OnInputESt6vectorIS3_SaIS3_EEEplEi>
 8002240:	4603      	mov	r3, r0
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	f107 020c 	add.w	r2, r7, #12
 8002248:	f107 0308 	add.w	r3, r7, #8
 800224c:	4611      	mov	r1, r2
 800224e:	4618      	mov	r0, r3
 8002250:	f000 f87a 	bl	8002348 <_ZN9__gnu_cxx17__normal_iteratorIPKPN4tama7OnInputESt6vectorIS3_SaIS3_EEEC1IPS3_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISC_SB_E7__valueES8_E6__typeEEE>
 8002254:	68b9      	ldr	r1, [r7, #8]
 8002256:	4620      	mov	r0, r4
 8002258:	f000 f887 	bl	800236a <_ZNSt6vectorIPN4tama7OnInputESaIS2_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS2_S4_EE>
    for (unsigned i = 0; i < listeners.size(); ++i)
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	3301      	adds	r3, #1
 8002260:	617b      	str	r3, [r7, #20]
 8002262:	e7bf      	b.n	80021e4 <_ZN4tama5Input14removeListenerEPNS_7OnInputE+0xe>
        }
    }
}
 8002264:	bf00      	nop
 8002266:	371c      	adds	r7, #28
 8002268:	46bd      	mov	sp, r7
 800226a:	bd90      	pop	{r4, r7, pc}

0800226c <_ZNSt6vectorIPN4tama7OnInputESaIS2_EE9push_backERKS2_>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685a      	ldr	r2, [r3, #4]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	429a      	cmp	r2, r3
 8002280:	d00c      	beq.n	800229c <_ZNSt6vectorIPN4tama7OnInputESaIS2_EE9push_backERKS2_+0x30>
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	683a      	ldr	r2, [r7, #0]
 800228a:	4619      	mov	r1, r3
 800228c:	f000 f89f 	bl	80023ce <_ZNSt16allocator_traitsISaIPN4tama7OnInputEEE9constructIS2_JRKS2_EEEvRS3_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	1d1a      	adds	r2, r3, #4
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	605a      	str	r2, [r3, #4]
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 800229a:	e008      	b.n	80022ae <_ZNSt6vectorIPN4tama7OnInputESaIS2_EE9push_backERKS2_+0x42>
	  _M_realloc_insert(end(), __x);
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f000 f8a9 	bl	80023f4 <_ZNSt6vectorIPN4tama7OnInputESaIS2_EE3endEv>
 80022a2:	4603      	mov	r3, r0
 80022a4:	683a      	ldr	r2, [r7, #0]
 80022a6:	4619      	mov	r1, r3
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f000 f8b5 	bl	8002418 <_ZNSt6vectorIPN4tama7OnInputESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>
      }
 80022ae:	bf00      	nop
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <_ZNKSt6vectorIPN4tama7OnInputESaIS2_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80022b6:	b480      	push	{r7}
 80022b8:	b083      	sub	sp, #12
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	461a      	mov	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	109b      	asrs	r3, r3, #2
 80022cc:	4618      	mov	r0, r3
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <_ZNSt6vectorIPN4tama7OnInputESaIS2_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	4413      	add	r3, r2
      }
 80022ec:	4618      	mov	r0, r3
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <_ZNSt6vectorIPN4tama7OnInputESaIS2_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	f107 030c 	add.w	r3, r7, #12
 8002306:	4611      	mov	r1, r2
 8002308:	4618      	mov	r0, r3
 800230a:	f000 f911 	bl	8002530 <_ZN9__gnu_cxx17__normal_iteratorIPPN4tama7OnInputESt6vectorIS3_SaIS3_EEEC1ERKS4_>
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	4618      	mov	r0, r3
 8002312:	3710      	adds	r7, #16
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <_ZNK9__gnu_cxx17__normal_iteratorIPPN4tama7OnInputESt6vectorIS3_SaIS3_EEEplEi>:
      __normal_iterator&
      operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
      { _M_current += __n; return *this; }

      __normal_iterator
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	4413      	add	r3, r2
 800232c:	60fb      	str	r3, [r7, #12]
 800232e:	f107 020c 	add.w	r2, r7, #12
 8002332:	f107 0308 	add.w	r3, r7, #8
 8002336:	4611      	mov	r1, r2
 8002338:	4618      	mov	r0, r3
 800233a:	f000 f8f9 	bl	8002530 <_ZN9__gnu_cxx17__normal_iteratorIPPN4tama7OnInputESt6vectorIS3_SaIS3_EEEC1ERKS4_>
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	4618      	mov	r0, r3
 8002342:	3710      	adds	r7, #16
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <_ZN9__gnu_cxx17__normal_iteratorIPKPN4tama7OnInputESt6vectorIS3_SaIS3_EEEC1IPS3_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISC_SB_E7__valueES8_E6__typeEEE>:
        __normal_iterator(const __normal_iterator<_Iter,
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
        : _M_current(__i.base()) { }
 8002352:	6838      	ldr	r0, [r7, #0]
 8002354:	f000 f8fc 	bl	8002550 <_ZNK9__gnu_cxx17__normal_iteratorIPPN4tama7OnInputESt6vectorIS3_SaIS3_EEE4baseEv>
 8002358:	4603      	mov	r3, r0
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	4618      	mov	r0, r3
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <_ZNSt6vectorIPN4tama7OnInputESaIS2_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS2_S4_EE>:
       *  the pointed-to memory is not touched in any way.  Managing
       *  the pointer is the user's responsibility.
       */
      iterator
#if __cplusplus >= 201103L
      erase(const_iterator __position)
 800236a:	b580      	push	{r7, lr}
 800236c:	b084      	sub	sp, #16
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
 8002372:	6039      	str	r1, [r7, #0]
      { return _M_erase(begin() + (__position - cbegin())); }
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f7ff ffbf 	bl	80022f8 <_ZNSt6vectorIPN4tama7OnInputESaIS2_EE5beginEv>
 800237a:	4603      	mov	r3, r0
 800237c:	60bb      	str	r3, [r7, #8]
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f000 f8f1 	bl	8002566 <_ZNKSt6vectorIPN4tama7OnInputESaIS2_EE6cbeginEv>
 8002384:	4603      	mov	r3, r0
 8002386:	60fb      	str	r3, [r7, #12]
 8002388:	f107 020c 	add.w	r2, r7, #12
 800238c:	463b      	mov	r3, r7
 800238e:	4611      	mov	r1, r2
 8002390:	4618      	mov	r0, r3
 8002392:	f000 f8fc 	bl	800258e <_ZN9__gnu_cxxmiIPKPN4tama7OnInputESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_>
 8002396:	4602      	mov	r2, r0
 8002398:	f107 0308 	add.w	r3, r7, #8
 800239c:	4611      	mov	r1, r2
 800239e:	4618      	mov	r0, r3
 80023a0:	f7ff ffba 	bl	8002318 <_ZNK9__gnu_cxx17__normal_iteratorIPPN4tama7OnInputESt6vectorIS3_SaIS3_EEEplEi>
 80023a4:	4603      	mov	r3, r0
 80023a6:	4619      	mov	r1, r3
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f000 f906 	bl	80025ba <_ZNSt6vectorIPN4tama7OnInputESaIS2_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS2_S4_EE>
 80023ae:	4603      	mov	r3, r0
 80023b0:	4618      	mov	r0, r3
 80023b2:	3710      	adds	r7, #16
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <_ZSt7forwardIRKPN4tama7OnInputEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	4618      	mov	r0, r3
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr

080023ce <_ZNSt16allocator_traitsISaIPN4tama7OnInputEEE9constructIS2_JRKS2_EEEvRS3_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b084      	sub	sp, #16
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	60f8      	str	r0, [r7, #12]
 80023d6:	60b9      	str	r1, [r7, #8]
 80023d8:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f7ff ffec 	bl	80023b8 <_ZSt7forwardIRKPN4tama7OnInputEEOT_RNSt16remove_referenceIS5_E4typeE>
 80023e0:	4603      	mov	r3, r0
 80023e2:	461a      	mov	r2, r3
 80023e4:	68b9      	ldr	r1, [r7, #8]
 80023e6:	68f8      	ldr	r0, [r7, #12]
 80023e8:	f000 f923 	bl	8002632 <_ZN9__gnu_cxx13new_allocatorIPN4tama7OnInputEE9constructIS3_JRKS3_EEEvPT_DpOT0_>
 80023ec:	bf00      	nop
 80023ee:	3710      	adds	r7, #16
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <_ZNSt6vectorIPN4tama7OnInputESaIS2_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	1d1a      	adds	r2, r3, #4
 8002400:	f107 030c 	add.w	r3, r7, #12
 8002404:	4611      	mov	r1, r2
 8002406:	4618      	mov	r0, r3
 8002408:	f000 f892 	bl	8002530 <_ZN9__gnu_cxx17__normal_iteratorIPPN4tama7OnInputESt6vectorIS3_SaIS3_EEEC1ERKS4_>
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	4618      	mov	r0, r3
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
	...

08002418 <_ZNSt6vectorIPN4tama7OnInputESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8002418:	b5b0      	push	{r4, r5, r7, lr}
 800241a:	b08a      	sub	sp, #40	; 0x28
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 8002424:	4a41      	ldr	r2, [pc, #260]	; (800252c <_ZNSt6vectorIPN4tama7OnInputESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x114>)
 8002426:	2101      	movs	r1, #1
 8002428:	68f8      	ldr	r0, [r7, #12]
 800242a:	f000 f91a 	bl	8002662 <_ZNKSt6vectorIPN4tama7OnInputESaIS2_EE12_M_check_lenEjPKc>
 800242e:	6278      	str	r0, [r7, #36]	; 0x24
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      const size_type __elems_before = __position - begin();
 8002430:	68f8      	ldr	r0, [r7, #12]
 8002432:	f7ff ff61 	bl	80022f8 <_ZNSt6vectorIPN4tama7OnInputESaIS2_EE5beginEv>
 8002436:	4603      	mov	r3, r0
 8002438:	617b      	str	r3, [r7, #20]
 800243a:	f107 0214 	add.w	r2, r7, #20
 800243e:	f107 0308 	add.w	r3, r7, #8
 8002442:	4611      	mov	r1, r2
 8002444:	4618      	mov	r0, r3
 8002446:	f000 f954 	bl	80026f2 <_ZN9__gnu_cxxmiIPPN4tama7OnInputESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
 800244a:	4603      	mov	r3, r0
 800244c:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002452:	4618      	mov	r0, r3
 8002454:	f000 f963 	bl	800271e <_ZNSt12_Vector_baseIPN4tama7OnInputESaIS2_EE11_M_allocateEj>
 8002458:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 800245e:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8002460:	6a3b      	ldr	r3, [r7, #32]
 8002462:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8002464:	69fa      	ldr	r2, [r7, #28]
 8002466:	18d5      	adds	r5, r2, r3
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f7ff ffa5 	bl	80023b8 <_ZSt7forwardIRKPN4tama7OnInputEEOT_RNSt16remove_referenceIS5_E4typeE>
 800246e:	4603      	mov	r3, r0
 8002470:	461a      	mov	r2, r3
 8002472:	4629      	mov	r1, r5
 8002474:	4620      	mov	r0, r4
 8002476:	f7ff ffaa 	bl	80023ce <_ZNSt16allocator_traitsISaIPN4tama7OnInputEEE9constructIS2_JRKS2_EEEvRS3_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 800247a:	2300      	movs	r3, #0
 800247c:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (this->_M_impl._M_start, __position.base(),
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681c      	ldr	r4, [r3, #0]
 8002482:	f107 0308 	add.w	r3, r7, #8
 8002486:	4618      	mov	r0, r3
 8002488:	f000 f862 	bl	8002550 <_ZNK9__gnu_cxx17__normal_iteratorIPPN4tama7OnInputESt6vectorIS3_SaIS3_EEE4baseEv>
 800248c:	4603      	mov	r3, r0
 800248e:	681d      	ldr	r5, [r3, #0]
	     __new_start, _M_get_Tp_allocator());
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	4618      	mov	r0, r3
 8002494:	f000 f957 	bl	8002746 <_ZNSt12_Vector_baseIPN4tama7OnInputESaIS2_EE19_M_get_Tp_allocatorEv>
 8002498:	4603      	mov	r3, r0
	  __new_finish
 800249a:	69fa      	ldr	r2, [r7, #28]
 800249c:	4629      	mov	r1, r5
 800249e:	4620      	mov	r0, r4
 80024a0:	f000 f95c 	bl	800275c <_ZSt34__uninitialized_move_if_noexcept_aIPPN4tama7OnInputES3_SaIS2_EET0_T_S6_S5_RT1_>
 80024a4:	61b8      	str	r0, [r7, #24]

	  ++__new_finish;
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	3304      	adds	r3, #4
 80024aa:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (__position.base(), this->_M_impl._M_finish,
 80024ac:	f107 0308 	add.w	r3, r7, #8
 80024b0:	4618      	mov	r0, r3
 80024b2:	f000 f84d 	bl	8002550 <_ZNK9__gnu_cxx17__normal_iteratorIPPN4tama7OnInputESt6vectorIS3_SaIS3_EEE4baseEv>
 80024b6:	4603      	mov	r3, r0
 80024b8:	681c      	ldr	r4, [r3, #0]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	685d      	ldr	r5, [r3, #4]
	     __new_finish, _M_get_Tp_allocator());
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f000 f940 	bl	8002746 <_ZNSt12_Vector_baseIPN4tama7OnInputESaIS2_EE19_M_get_Tp_allocatorEv>
 80024c6:	4603      	mov	r3, r0
	  __new_finish
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	4629      	mov	r1, r5
 80024cc:	4620      	mov	r0, r4
 80024ce:	f000 f945 	bl	800275c <_ZSt34__uninitialized_move_if_noexcept_aIPPN4tama7OnInputES3_SaIS2_EET0_T_S6_S5_RT1_>
 80024d2:	61b8      	str	r0, [r7, #24]
	  else
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681c      	ldr	r4, [r3, #0]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	685d      	ldr	r5, [r3, #4]
		    _M_get_Tp_allocator());
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	4618      	mov	r0, r3
 80024e0:	f000 f931 	bl	8002746 <_ZNSt12_Vector_baseIPN4tama7OnInputESaIS2_EE19_M_get_Tp_allocatorEv>
 80024e4:	4603      	mov	r3, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80024e6:	461a      	mov	r2, r3
 80024e8:	4629      	mov	r1, r5
 80024ea:	4620      	mov	r0, r4
 80024ec:	f000 f95c 	bl	80027a8 <_ZSt8_DestroyIPPN4tama7OnInputES2_EvT_S4_RSaIT0_E>
      _M_deallocate(this->_M_impl._M_start,
 80024f0:	68f8      	ldr	r0, [r7, #12]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6819      	ldr	r1, [r3, #0]
		    this->_M_impl._M_end_of_storage
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	689b      	ldr	r3, [r3, #8]
		    - this->_M_impl._M_start);
 80024fa:	461a      	mov	r2, r3
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	109b      	asrs	r3, r3, #2
      _M_deallocate(this->_M_impl._M_start,
 8002504:	461a      	mov	r2, r3
 8002506:	f000 f95d 	bl	80027c4 <_ZNSt12_Vector_baseIPN4tama7OnInputESaIS2_EE13_M_deallocateEPS2_j>
      this->_M_impl._M_start = __new_start;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	69fa      	ldr	r2, [r7, #28]
 800250e:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8002516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	69fa      	ldr	r2, [r7, #28]
 800251c:	441a      	add	r2, r3
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	609a      	str	r2, [r3, #8]
    }
 8002522:	bf00      	nop
 8002524:	3728      	adds	r7, #40	; 0x28
 8002526:	46bd      	mov	sp, r7
 8002528:	bdb0      	pop	{r4, r5, r7, pc}
 800252a:	bf00      	nop
 800252c:	08020938 	.word	0x08020938

08002530 <_ZN9__gnu_cxx17__normal_iteratorIPPN4tama7OnInputESt6vectorIS3_SaIS3_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	601a      	str	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4618      	mov	r0, r3
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <_ZNK9__gnu_cxx17__normal_iteratorIPPN4tama7OnInputESt6vectorIS3_SaIS3_EEE4baseEv>:
      __normal_iterator
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
      { return __normal_iterator(_M_current - __n); }

      const _Iterator&
      base() const _GLIBCXX_NOEXCEPT
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4618      	mov	r0, r3
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr

08002566 <_ZNKSt6vectorIPN4tama7OnInputESaIS2_EE6cbeginEv>:
      cbegin() const noexcept
 8002566:	b580      	push	{r7, lr}
 8002568:	b084      	sub	sp, #16
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	60fb      	str	r3, [r7, #12]
 8002574:	f107 020c 	add.w	r2, r7, #12
 8002578:	f107 0308 	add.w	r3, r7, #8
 800257c:	4611      	mov	r1, r2
 800257e:	4618      	mov	r0, r3
 8002580:	f000 f933 	bl	80027ea <_ZN9__gnu_cxx17__normal_iteratorIPKPN4tama7OnInputESt6vectorIS3_SaIS3_EEEC1ERKS5_>
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	4618      	mov	r0, r3
 8002588:	3710      	adds	r7, #16
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <_ZN9__gnu_cxxmiIPKPN4tama7OnInputESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800258e:	b590      	push	{r4, r7, lr}
 8002590:	b083      	sub	sp, #12
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
 8002596:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f000 f936 	bl	800280a <_ZNK9__gnu_cxx17__normal_iteratorIPKPN4tama7OnInputESt6vectorIS3_SaIS3_EEE4baseEv>
 800259e:	4603      	mov	r3, r0
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	461c      	mov	r4, r3
 80025a4:	6838      	ldr	r0, [r7, #0]
 80025a6:	f000 f930 	bl	800280a <_ZNK9__gnu_cxx17__normal_iteratorIPKPN4tama7OnInputESt6vectorIS3_SaIS3_EEE4baseEv>
 80025aa:	4603      	mov	r3, r0
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	1ae3      	subs	r3, r4, r3
 80025b0:	109b      	asrs	r3, r3, #2
 80025b2:	4618      	mov	r0, r3
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd90      	pop	{r4, r7, pc}

080025ba <_ZNSt6vectorIPN4tama7OnInputESaIS2_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS2_S4_EE>:
    vector<_Tp, _Alloc>::
 80025ba:	b590      	push	{r4, r7, lr}
 80025bc:	b085      	sub	sp, #20
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
 80025c2:	6039      	str	r1, [r7, #0]
      if (__position + 1 != end())
 80025c4:	463b      	mov	r3, r7
 80025c6:	2101      	movs	r1, #1
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7ff fea5 	bl	8002318 <_ZNK9__gnu_cxx17__normal_iteratorIPPN4tama7OnInputESt6vectorIS3_SaIS3_EEEplEi>
 80025ce:	4603      	mov	r3, r0
 80025d0:	60bb      	str	r3, [r7, #8]
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f7ff ff0e 	bl	80023f4 <_ZNSt6vectorIPN4tama7OnInputESaIS2_EE3endEv>
 80025d8:	4603      	mov	r3, r0
 80025da:	60fb      	str	r3, [r7, #12]
 80025dc:	f107 020c 	add.w	r2, r7, #12
 80025e0:	f107 0308 	add.w	r3, r7, #8
 80025e4:	4611      	mov	r1, r2
 80025e6:	4618      	mov	r0, r3
 80025e8:	f000 f91a 	bl	8002820 <_ZN9__gnu_cxxneIPPN4tama7OnInputESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d00e      	beq.n	8002610 <_ZNSt6vectorIPN4tama7OnInputESaIS2_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS2_S4_EE+0x56>
	_GLIBCXX_MOVE3(__position + 1, end(), __position);
 80025f2:	463b      	mov	r3, r7
 80025f4:	2101      	movs	r1, #1
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7ff fe8e 	bl	8002318 <_ZNK9__gnu_cxx17__normal_iteratorIPPN4tama7OnInputESt6vectorIS3_SaIS3_EEEplEi>
 80025fc:	4604      	mov	r4, r0
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f7ff fef8 	bl	80023f4 <_ZNSt6vectorIPN4tama7OnInputESaIS2_EE3endEv>
 8002604:	4603      	mov	r3, r0
 8002606:	683a      	ldr	r2, [r7, #0]
 8002608:	4619      	mov	r1, r3
 800260a:	4620      	mov	r0, r4
 800260c:	f000 f920 	bl	8002850 <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPPN4tama7OnInputESt6vectorIS4_SaIS4_EEEES9_ET0_T_SB_SA_>
      --this->_M_impl._M_finish;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	1f1a      	subs	r2, r3, #4
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	605a      	str	r2, [r3, #4]
      _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	4619      	mov	r1, r3
 8002622:	4610      	mov	r0, r2
 8002624:	f000 f8b3 	bl	800278e <_ZNSt16allocator_traitsISaIPN4tama7OnInputEEE7destroyIS2_EEvRS3_PT_>
      return __position;
 8002628:	683b      	ldr	r3, [r7, #0]
    }
 800262a:	4618      	mov	r0, r3
 800262c:	3714      	adds	r7, #20
 800262e:	46bd      	mov	sp, r7
 8002630:	bd90      	pop	{r4, r7, pc}

08002632 <_ZN9__gnu_cxx13new_allocatorIPN4tama7OnInputEE9constructIS3_JRKS3_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8002632:	b590      	push	{r4, r7, lr}
 8002634:	b085      	sub	sp, #20
 8002636:	af00      	add	r7, sp, #0
 8002638:	60f8      	str	r0, [r7, #12]
 800263a:	60b9      	str	r1, [r7, #8]
 800263c:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f7ff feba 	bl	80023b8 <_ZSt7forwardIRKPN4tama7OnInputEEOT_RNSt16remove_referenceIS5_E4typeE>
 8002644:	4603      	mov	r3, r0
 8002646:	681c      	ldr	r4, [r3, #0]
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	4619      	mov	r1, r3
 800264c:	2004      	movs	r0, #4
 800264e:	f7fe fcf6 	bl	800103e <_ZnwjPv>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d000      	beq.n	800265a <_ZN9__gnu_cxx13new_allocatorIPN4tama7OnInputEE9constructIS3_JRKS3_EEEvPT_DpOT0_+0x28>
 8002658:	601c      	str	r4, [r3, #0]
 800265a:	bf00      	nop
 800265c:	3714      	adds	r7, #20
 800265e:	46bd      	mov	sp, r7
 8002660:	bd90      	pop	{r4, r7, pc}

08002662 <_ZNKSt6vectorIPN4tama7OnInputESaIS2_EE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 8002662:	b590      	push	{r4, r7, lr}
 8002664:	b087      	sub	sp, #28
 8002666:	af00      	add	r7, sp, #0
 8002668:	60f8      	str	r0, [r7, #12]
 800266a:	60b9      	str	r1, [r7, #8]
 800266c:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 800266e:	68f8      	ldr	r0, [r7, #12]
 8002670:	f000 f906 	bl	8002880 <_ZNKSt6vectorIPN4tama7OnInputESaIS2_EE8max_sizeEv>
 8002674:	4604      	mov	r4, r0
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	f7ff fe1d 	bl	80022b6 <_ZNKSt6vectorIPN4tama7OnInputESaIS2_EE4sizeEv>
 800267c:	4603      	mov	r3, r0
 800267e:	1ae2      	subs	r2, r4, r3
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	429a      	cmp	r2, r3
 8002684:	bf34      	ite	cc
 8002686:	2301      	movcc	r3, #1
 8002688:	2300      	movcs	r3, #0
 800268a:	b2db      	uxtb	r3, r3
 800268c:	2b00      	cmp	r3, #0
 800268e:	d003      	beq.n	8002698 <_ZNKSt6vectorIPN4tama7OnInputESaIS2_EE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4618      	mov	r0, r3
 8002694:	f01d f947 	bl	801f926 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + std::max(size(), __n);
 8002698:	68f8      	ldr	r0, [r7, #12]
 800269a:	f7ff fe0c 	bl	80022b6 <_ZNKSt6vectorIPN4tama7OnInputESaIS2_EE4sizeEv>
 800269e:	4604      	mov	r4, r0
 80026a0:	68f8      	ldr	r0, [r7, #12]
 80026a2:	f7ff fe08 	bl	80022b6 <_ZNKSt6vectorIPN4tama7OnInputESaIS2_EE4sizeEv>
 80026a6:	4603      	mov	r3, r0
 80026a8:	613b      	str	r3, [r7, #16]
 80026aa:	f107 0208 	add.w	r2, r7, #8
 80026ae:	f107 0310 	add.w	r3, r7, #16
 80026b2:	4611      	mov	r1, r2
 80026b4:	4618      	mov	r0, r3
 80026b6:	f000 f8f4 	bl	80028a2 <_ZSt3maxIjERKT_S2_S2_>
 80026ba:	4603      	mov	r3, r0
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4423      	add	r3, r4
 80026c0:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80026c2:	68f8      	ldr	r0, [r7, #12]
 80026c4:	f7ff fdf7 	bl	80022b6 <_ZNKSt6vectorIPN4tama7OnInputESaIS2_EE4sizeEv>
 80026c8:	4602      	mov	r2, r0
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d306      	bcc.n	80026de <_ZNKSt6vectorIPN4tama7OnInputESaIS2_EE12_M_check_lenEjPKc+0x7c>
 80026d0:	68f8      	ldr	r0, [r7, #12]
 80026d2:	f000 f8d5 	bl	8002880 <_ZNKSt6vectorIPN4tama7OnInputESaIS2_EE8max_sizeEv>
 80026d6:	4602      	mov	r2, r0
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	4293      	cmp	r3, r2
 80026dc:	d904      	bls.n	80026e8 <_ZNKSt6vectorIPN4tama7OnInputESaIS2_EE12_M_check_lenEjPKc+0x86>
 80026de:	68f8      	ldr	r0, [r7, #12]
 80026e0:	f000 f8ce 	bl	8002880 <_ZNKSt6vectorIPN4tama7OnInputESaIS2_EE8max_sizeEv>
 80026e4:	4603      	mov	r3, r0
 80026e6:	e000      	b.n	80026ea <_ZNKSt6vectorIPN4tama7OnInputESaIS2_EE12_M_check_lenEjPKc+0x88>
 80026e8:	697b      	ldr	r3, [r7, #20]
      }
 80026ea:	4618      	mov	r0, r3
 80026ec:	371c      	adds	r7, #28
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd90      	pop	{r4, r7, pc}

080026f2 <_ZN9__gnu_cxxmiIPPN4tama7OnInputESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 80026f2:	b590      	push	{r4, r7, lr}
 80026f4:	b083      	sub	sp, #12
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
 80026fa:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f7ff ff27 	bl	8002550 <_ZNK9__gnu_cxx17__normal_iteratorIPPN4tama7OnInputESt6vectorIS3_SaIS3_EEE4baseEv>
 8002702:	4603      	mov	r3, r0
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	461c      	mov	r4, r3
 8002708:	6838      	ldr	r0, [r7, #0]
 800270a:	f7ff ff21 	bl	8002550 <_ZNK9__gnu_cxx17__normal_iteratorIPPN4tama7OnInputESt6vectorIS3_SaIS3_EEE4baseEv>
 800270e:	4603      	mov	r3, r0
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	1ae3      	subs	r3, r4, r3
 8002714:	109b      	asrs	r3, r3, #2
 8002716:	4618      	mov	r0, r3
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	bd90      	pop	{r4, r7, pc}

0800271e <_ZNSt12_Vector_baseIPN4tama7OnInputESaIS2_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800271e:	b580      	push	{r7, lr}
 8002720:	b082      	sub	sp, #8
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
 8002726:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d006      	beq.n	800273c <_ZNSt12_Vector_baseIPN4tama7OnInputESaIS2_EE11_M_allocateEj+0x1e>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6839      	ldr	r1, [r7, #0]
 8002732:	4618      	mov	r0, r3
 8002734:	f000 f8c9 	bl	80028ca <_ZNSt16allocator_traitsISaIPN4tama7OnInputEEE8allocateERS3_j>
 8002738:	4603      	mov	r3, r0
 800273a:	e000      	b.n	800273e <_ZNSt12_Vector_baseIPN4tama7OnInputESaIS2_EE11_M_allocateEj+0x20>
 800273c:	2300      	movs	r3, #0
      }
 800273e:	4618      	mov	r0, r3
 8002740:	3708      	adds	r7, #8
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <_ZNSt12_Vector_baseIPN4tama7OnInputESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8002746:	b480      	push	{r7}
 8002748:	b083      	sub	sp, #12
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4618      	mov	r0, r3
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr

0800275c <_ZSt34__uninitialized_move_if_noexcept_aIPPN4tama7OnInputES3_SaIS2_EET0_T_S6_S5_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800275c:	b590      	push	{r4, r7, lr}
 800275e:	b085      	sub	sp, #20
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
 8002768:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 800276a:	68f8      	ldr	r0, [r7, #12]
 800276c:	f000 f8bc 	bl	80028e8 <_ZSt32__make_move_if_noexcept_iteratorIPN4tama7OnInputESt13move_iteratorIPS2_EET0_PT_>
 8002770:	4604      	mov	r4, r0
 8002772:	68b8      	ldr	r0, [r7, #8]
 8002774:	f000 f8b8 	bl	80028e8 <_ZSt32__make_move_if_noexcept_iteratorIPN4tama7OnInputESt13move_iteratorIPS2_EET0_PT_>
 8002778:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	4620      	mov	r0, r4
 8002780:	f000 f8c1 	bl	8002906 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPPN4tama7OnInputEES4_S3_ET0_T_S7_S6_RSaIT1_E>
 8002784:	4603      	mov	r3, r0
    }
 8002786:	4618      	mov	r0, r3
 8002788:	3714      	adds	r7, #20
 800278a:	46bd      	mov	sp, r7
 800278c:	bd90      	pop	{r4, r7, pc}

0800278e <_ZNSt16allocator_traitsISaIPN4tama7OnInputEEE7destroyIS2_EEvRS3_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 800278e:	b580      	push	{r7, lr}
 8002790:	b082      	sub	sp, #8
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
 8002796:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 8002798:	6839      	ldr	r1, [r7, #0]
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f000 f8c4 	bl	8002928 <_ZN9__gnu_cxx13new_allocatorIPN4tama7OnInputEE7destroyIS3_EEvPT_>
 80027a0:	bf00      	nop
 80027a2:	3708      	adds	r7, #8
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <_ZSt8_DestroyIPPN4tama7OnInputES2_EvT_S4_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	60b9      	str	r1, [r7, #8]
 80027b2:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 80027b4:	68b9      	ldr	r1, [r7, #8]
 80027b6:	68f8      	ldr	r0, [r7, #12]
 80027b8:	f000 f8c1 	bl	800293e <_ZSt8_DestroyIPPN4tama7OnInputEEvT_S4_>
    }
 80027bc:	bf00      	nop
 80027be:	3710      	adds	r7, #16
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <_ZNSt12_Vector_baseIPN4tama7OnInputESaIS2_EE13_M_deallocateEPS2_j>:
      _M_deallocate(pointer __p, size_t __n)
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
	if (__p)
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d005      	beq.n	80027e2 <_ZNSt12_Vector_baseIPN4tama7OnInputESaIS2_EE13_M_deallocateEPS2_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	68b9      	ldr	r1, [r7, #8]
 80027dc:	4618      	mov	r0, r3
 80027de:	f000 f8bb 	bl	8002958 <_ZNSt16allocator_traitsISaIPN4tama7OnInputEEE10deallocateERS3_PS2_j>
      }
 80027e2:	bf00      	nop
 80027e4:	3710      	adds	r7, #16
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <_ZN9__gnu_cxx17__normal_iteratorIPKPN4tama7OnInputESt6vectorIS3_SaIS3_EEEC1ERKS5_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80027ea:	b480      	push	{r7}
 80027ec:	b083      	sub	sp, #12
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
 80027f2:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	601a      	str	r2, [r3, #0]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	4618      	mov	r0, r3
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr

0800280a <_ZNK9__gnu_cxx17__normal_iteratorIPKPN4tama7OnInputESt6vectorIS3_SaIS3_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800280a:	b480      	push	{r7}
 800280c:	b083      	sub	sp, #12
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4618      	mov	r0, r3
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <_ZN9__gnu_cxxneIPPN4tama7OnInputESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8002820:	b590      	push	{r4, r7, lr}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f7ff fe90 	bl	8002550 <_ZNK9__gnu_cxx17__normal_iteratorIPPN4tama7OnInputESt6vectorIS3_SaIS3_EEE4baseEv>
 8002830:	4603      	mov	r3, r0
 8002832:	681c      	ldr	r4, [r3, #0]
 8002834:	6838      	ldr	r0, [r7, #0]
 8002836:	f7ff fe8b 	bl	8002550 <_ZNK9__gnu_cxx17__normal_iteratorIPPN4tama7OnInputESt6vectorIS3_SaIS3_EEE4baseEv>
 800283a:	4603      	mov	r3, r0
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	429c      	cmp	r4, r3
 8002840:	bf14      	ite	ne
 8002842:	2301      	movne	r3, #1
 8002844:	2300      	moveq	r3, #0
 8002846:	b2db      	uxtb	r3, r3
 8002848:	4618      	mov	r0, r3
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	bd90      	pop	{r4, r7, pc}

08002850 <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPPN4tama7OnInputESt6vectorIS4_SaIS4_EEEES9_ET0_T_SB_SA_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    move(_II __first, _II __last, _OI __result)
 8002850:	b590      	push	{r4, r7, lr}
 8002852:	b085      	sub	sp, #20
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_InputIteratorConcept<_II>)
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      return std::__copy_move_a2<true>(std::__miter_base(__first),
 800285c:	68f8      	ldr	r0, [r7, #12]
 800285e:	f000 f88a 	bl	8002976 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPPN4tama7OnInputESt6vectorIS4_SaIS4_EEEEET_SA_>
 8002862:	4604      	mov	r4, r0
 8002864:	68b8      	ldr	r0, [r7, #8]
 8002866:	f000 f886 	bl	8002976 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPPN4tama7OnInputESt6vectorIS4_SaIS4_EEEEET_SA_>
 800286a:	4603      	mov	r3, r0
				       std::__miter_base(__last), __result);
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	4619      	mov	r1, r3
 8002870:	4620      	mov	r0, r4
 8002872:	f000 f88b 	bl	800298c <_ZSt14__copy_move_a2ILb1EN9__gnu_cxx17__normal_iteratorIPPN4tama7OnInputESt6vectorIS4_SaIS4_EEEES9_ET1_T0_SB_SA_>
 8002876:	4603      	mov	r3, r0
    }
 8002878:	4618      	mov	r0, r3
 800287a:	3714      	adds	r7, #20
 800287c:	46bd      	mov	sp, r7
 800287e:	bd90      	pop	{r4, r7, pc}

08002880 <_ZNKSt6vectorIPN4tama7OnInputESaIS2_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4618      	mov	r0, r3
 800288c:	f000 f8b0 	bl	80029f0 <_ZNKSt12_Vector_baseIPN4tama7OnInputESaIS2_EE19_M_get_Tp_allocatorEv>
 8002890:	4603      	mov	r3, r0
 8002892:	4618      	mov	r0, r3
 8002894:	f000 f8a0 	bl	80029d8 <_ZNSt16allocator_traitsISaIPN4tama7OnInputEEE8max_sizeERKS3_>
 8002898:	4603      	mov	r3, r0
 800289a:	4618      	mov	r0, r3
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 80028a2:	b480      	push	{r7}
 80028a4:	b083      	sub	sp, #12
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
 80028aa:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d201      	bcs.n	80028bc <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	e000      	b.n	80028be <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 80028bc:	687b      	ldr	r3, [r7, #4]
    }
 80028be:	4618      	mov	r0, r3
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr

080028ca <_ZNSt16allocator_traitsISaIPN4tama7OnInputEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b082      	sub	sp, #8
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
 80028d2:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80028d4:	2200      	movs	r2, #0
 80028d6:	6839      	ldr	r1, [r7, #0]
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f000 f894 	bl	8002a06 <_ZN9__gnu_cxx13new_allocatorIPN4tama7OnInputEE8allocateEjPKv>
 80028de:	4603      	mov	r3, r0
 80028e0:	4618      	mov	r0, r3
 80028e2:	3708      	adds	r7, #8
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <_ZSt32__make_move_if_noexcept_iteratorIPN4tama7OnInputESt13move_iteratorIPS2_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 80028f0:	f107 030c 	add.w	r3, r7, #12
 80028f4:	6879      	ldr	r1, [r7, #4]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f000 f8a3 	bl	8002a42 <_ZNSt13move_iteratorIPPN4tama7OnInputEEC1ES3_>
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	4618      	mov	r0, r3
 8002900:	3710      	adds	r7, #16
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}

08002906 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPPN4tama7OnInputEES4_S3_ET0_T_S7_S6_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8002906:	b580      	push	{r7, lr}
 8002908:	b084      	sub	sp, #16
 800290a:	af00      	add	r7, sp, #0
 800290c:	60f8      	str	r0, [r7, #12]
 800290e:	60b9      	str	r1, [r7, #8]
 8002910:	607a      	str	r2, [r7, #4]
 8002912:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	68b9      	ldr	r1, [r7, #8]
 8002918:	68f8      	ldr	r0, [r7, #12]
 800291a:	f000 f8a1 	bl	8002a60 <_ZSt18uninitialized_copyISt13move_iteratorIPPN4tama7OnInputEES4_ET0_T_S7_S6_>
 800291e:	4603      	mov	r3, r0
 8002920:	4618      	mov	r0, r3
 8002922:	3710      	adds	r7, #16
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <_ZN9__gnu_cxx13new_allocatorIPN4tama7OnInputEE7destroyIS3_EEvPT_>:
	destroy(_Up* __p) { __p->~_Up(); }
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
 8002932:	bf00      	nop
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr

0800293e <_ZSt8_DestroyIPPN4tama7OnInputEEvT_S4_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800293e:	b580      	push	{r7, lr}
 8002940:	b082      	sub	sp, #8
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
 8002946:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8002948:	6839      	ldr	r1, [r7, #0]
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f000 f89a 	bl	8002a84 <_ZNSt12_Destroy_auxILb1EE9__destroyIPPN4tama7OnInputEEEvT_S6_>
    }
 8002950:	bf00      	nop
 8002952:	3708      	adds	r7, #8
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <_ZNSt16allocator_traitsISaIPN4tama7OnInputEEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	68b9      	ldr	r1, [r7, #8]
 8002968:	68f8      	ldr	r0, [r7, #12]
 800296a:	f000 f896 	bl	8002a9a <_ZN9__gnu_cxx13new_allocatorIPN4tama7OnInputEE10deallocateEPS3_j>
 800296e:	bf00      	nop
 8002970:	3710      	adds	r7, #16
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}

08002976 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPPN4tama7OnInputESt6vectorIS4_SaIS4_EEEEET_SA_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 8002976:	b480      	push	{r7}
 8002978:	b083      	sub	sp, #12
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
    { return __it; }
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4618      	mov	r0, r3
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <_ZSt14__copy_move_a2ILb1EN9__gnu_cxx17__normal_iteratorIPPN4tama7OnInputESt6vectorIS4_SaIS4_EEEES9_ET1_T0_SB_SA_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800298c:	b5b0      	push	{r4, r5, r7, lr}
 800298e:	b086      	sub	sp, #24
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 8002998:	68f8      	ldr	r0, [r7, #12]
 800299a:	f000 f88b 	bl	8002ab4 <_ZSt12__niter_baseIPPN4tama7OnInputESt6vectorIS2_SaIS2_EEET_N9__gnu_cxx17__normal_iteratorIS7_T0_EE>
 800299e:	4604      	mov	r4, r0
 80029a0:	68b8      	ldr	r0, [r7, #8]
 80029a2:	f000 f887 	bl	8002ab4 <_ZSt12__niter_baseIPPN4tama7OnInputESt6vectorIS2_SaIS2_EEET_N9__gnu_cxx17__normal_iteratorIS7_T0_EE>
 80029a6:	4605      	mov	r5, r0
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f000 f883 	bl	8002ab4 <_ZSt12__niter_baseIPPN4tama7OnInputESt6vectorIS2_SaIS2_EEET_N9__gnu_cxx17__normal_iteratorIS7_T0_EE>
 80029ae:	4603      	mov	r3, r0
 80029b0:	461a      	mov	r2, r3
 80029b2:	4629      	mov	r1, r5
 80029b4:	4620      	mov	r0, r4
 80029b6:	f000 f88b 	bl	8002ad0 <_ZSt13__copy_move_aILb1EPPN4tama7OnInputES3_ET1_T0_S5_S4_>
 80029ba:	4603      	mov	r3, r0
 80029bc:	617b      	str	r3, [r7, #20]
					     std::__niter_base(__result)));
 80029be:	f107 0214 	add.w	r2, r7, #20
 80029c2:	f107 0310 	add.w	r3, r7, #16
 80029c6:	4611      	mov	r1, r2
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff fdb1 	bl	8002530 <_ZN9__gnu_cxx17__normal_iteratorIPPN4tama7OnInputESt6vectorIS3_SaIS3_EEEC1ERKS4_>
 80029ce:	693b      	ldr	r3, [r7, #16]
    }
 80029d0:	4618      	mov	r0, r3
 80029d2:	3718      	adds	r7, #24
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bdb0      	pop	{r4, r5, r7, pc}

080029d8 <_ZNSt16allocator_traitsISaIPN4tama7OnInputEEE8max_sizeERKS3_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f000 f887 	bl	8002af4 <_ZNK9__gnu_cxx13new_allocatorIPN4tama7OnInputEE8max_sizeEv>
 80029e6:	4603      	mov	r3, r0
 80029e8:	4618      	mov	r0, r3
 80029ea:	3708      	adds	r7, #8
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <_ZNKSt12_Vector_baseIPN4tama7OnInputESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4618      	mov	r0, r3
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr

08002a06 <_ZN9__gnu_cxx13new_allocatorIPN4tama7OnInputEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b084      	sub	sp, #16
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	60f8      	str	r0, [r7, #12]
 8002a0e:	60b9      	str	r1, [r7, #8]
 8002a10:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8002a12:	68f8      	ldr	r0, [r7, #12]
 8002a14:	f000 f86e 	bl	8002af4 <_ZNK9__gnu_cxx13new_allocatorIPN4tama7OnInputEE8max_sizeEv>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	bf8c      	ite	hi
 8002a20:	2301      	movhi	r3, #1
 8002a22:	2300      	movls	r3, #0
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <_ZN9__gnu_cxx13new_allocatorIPN4tama7OnInputEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8002a2a:	f01c ff76 	bl	801f91a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	4618      	mov	r0, r3
 8002a34:	f01c ff43 	bl	801f8be <_Znwj>
 8002a38:	4603      	mov	r3, r0
      }
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3710      	adds	r7, #16
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <_ZNSt13move_iteratorIPPN4tama7OnInputEEC1ES3_>:
      move_iterator(iterator_type __i)
 8002a42:	b480      	push	{r7}
 8002a44:	b083      	sub	sp, #12
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
 8002a4a:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	683a      	ldr	r2, [r7, #0]
 8002a50:	601a      	str	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4618      	mov	r0, r3
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <_ZSt18uninitialized_copyISt13move_iteratorIPPN4tama7OnInputEES4_ET0_T_S7_S6_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b086      	sub	sp, #24
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	68b9      	ldr	r1, [r7, #8]
 8002a74:	68f8      	ldr	r0, [r7, #12]
 8002a76:	f000 f849 	bl	8002b0c <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPPN4tama7OnInputEES6_EET0_T_S9_S8_>
 8002a7a:	4603      	mov	r3, r0
    }
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3718      	adds	r7, #24
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <_ZNSt12_Destroy_auxILb1EE9__destroyIPPN4tama7OnInputEEEvT_S6_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
 8002a8e:	bf00      	nop
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr

08002a9a <_ZN9__gnu_cxx13new_allocatorIPN4tama7OnInputEE10deallocateEPS3_j>:
      deallocate(pointer __p, size_type)
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b084      	sub	sp, #16
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	60f8      	str	r0, [r7, #12]
 8002aa2:	60b9      	str	r1, [r7, #8]
 8002aa4:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8002aa6:	68b8      	ldr	r0, [r7, #8]
 8002aa8:	f01c ff22 	bl	801f8f0 <_ZdlPv>
      }
 8002aac:	bf00      	nop
 8002aae:	3710      	adds	r7, #16
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <_ZSt12__niter_baseIPPN4tama7OnInputESt6vectorIS2_SaIS2_EEET_N9__gnu_cxx17__normal_iteratorIS7_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8002abc:	1d3b      	adds	r3, r7, #4
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7ff fd46 	bl	8002550 <_ZNK9__gnu_cxx17__normal_iteratorIPPN4tama7OnInputESt6vectorIS3_SaIS3_EEE4baseEv>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3708      	adds	r7, #8
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <_ZSt13__copy_move_aILb1EPPN4tama7OnInputES3_ET1_T0_S5_S4_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b086      	sub	sp, #24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 8002adc:	2301      	movs	r3, #1
 8002ade:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	68b9      	ldr	r1, [r7, #8]
 8002ae4:	68f8      	ldr	r0, [r7, #12]
 8002ae6:	f000 f821 	bl	8002b2c <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIPN4tama7OnInputEEEPT_PKS6_S9_S7_>
 8002aea:	4603      	mov	r3, r0
    }
 8002aec:	4618      	mov	r0, r3
 8002aee:	3718      	adds	r7, #24
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <_ZNK9__gnu_cxx13new_allocatorIPN4tama7OnInputEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8002afc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8002b00:	4618      	mov	r0, r3
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPPN4tama7OnInputEES6_EET0_T_S9_S8_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	68b9      	ldr	r1, [r7, #8]
 8002b1c:	68f8      	ldr	r0, [r7, #12]
 8002b1e:	f000 f822 	bl	8002b66 <_ZSt4copyISt13move_iteratorIPPN4tama7OnInputEES4_ET0_T_S7_S6_>
 8002b22:	4603      	mov	r3, r0
 8002b24:	4618      	mov	r0, r3
 8002b26:	3710      	adds	r7, #16
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIPN4tama7OnInputEEEPT_PKS6_S9_S7_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b086      	sub	sp, #24
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8002b38:	68ba      	ldr	r2, [r7, #8]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	109b      	asrs	r3, r3, #2
 8002b40:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d006      	beq.n	8002b56 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIPN4tama7OnInputEEEPT_PKS6_S9_S7_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	68f9      	ldr	r1, [r7, #12]
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f01d fa72 	bl	802003a <memmove>
	  return __result + _Num;
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	4413      	add	r3, r2
	}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3718      	adds	r7, #24
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <_ZSt4copyISt13move_iteratorIPPN4tama7OnInputEES4_ET0_T_S7_S6_>:
    copy(_II __first, _II __last, _OI __result)
 8002b66:	b590      	push	{r4, r7, lr}
 8002b68:	b085      	sub	sp, #20
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	60f8      	str	r0, [r7, #12]
 8002b6e:	60b9      	str	r1, [r7, #8]
 8002b70:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 8002b72:	68f8      	ldr	r0, [r7, #12]
 8002b74:	f000 f80f 	bl	8002b96 <_ZSt12__miter_baseIPPN4tama7OnInputEEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8002b78:	4604      	mov	r4, r0
 8002b7a:	68b8      	ldr	r0, [r7, #8]
 8002b7c:	f000 f80b 	bl	8002b96 <_ZSt12__miter_baseIPPN4tama7OnInputEEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8002b80:	4603      	mov	r3, r0
	       __result));
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	4619      	mov	r1, r3
 8002b86:	4620      	mov	r0, r4
 8002b88:	f000 f816 	bl	8002bb8 <_ZSt14__copy_move_a2ILb1EPPN4tama7OnInputES3_ET1_T0_S5_S4_>
 8002b8c:	4603      	mov	r3, r0
    }
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3714      	adds	r7, #20
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd90      	pop	{r4, r7, pc}

08002b96 <_ZSt12__miter_baseIPPN4tama7OnInputEEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b082      	sub	sp, #8
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 8002b9e:	1d3b      	adds	r3, r7, #4
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f000 f825 	bl	8002bf0 <_ZNKSt13move_iteratorIPPN4tama7OnInputEE4baseEv>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f000 f82d 	bl	8002c08 <_ZSt12__miter_baseIPPN4tama7OnInputEET_S4_>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3708      	adds	r7, #8
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <_ZSt14__copy_move_a2ILb1EPPN4tama7OnInputES3_ET1_T0_S5_S4_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8002bb8:	b5b0      	push	{r4, r5, r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 8002bc4:	68f8      	ldr	r0, [r7, #12]
 8002bc6:	f000 f82a 	bl	8002c1e <_ZSt12__niter_baseIPPN4tama7OnInputEET_S4_>
 8002bca:	4604      	mov	r4, r0
 8002bcc:	68b8      	ldr	r0, [r7, #8]
 8002bce:	f000 f826 	bl	8002c1e <_ZSt12__niter_baseIPPN4tama7OnInputEET_S4_>
 8002bd2:	4605      	mov	r5, r0
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f000 f822 	bl	8002c1e <_ZSt12__niter_baseIPPN4tama7OnInputEET_S4_>
 8002bda:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 8002bdc:	461a      	mov	r2, r3
 8002bde:	4629      	mov	r1, r5
 8002be0:	4620      	mov	r0, r4
 8002be2:	f7ff ff75 	bl	8002ad0 <_ZSt13__copy_move_aILb1EPPN4tama7OnInputES3_ET1_T0_S5_S4_>
 8002be6:	4603      	mov	r3, r0
    }
 8002be8:	4618      	mov	r0, r3
 8002bea:	3710      	adds	r7, #16
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bdb0      	pop	{r4, r5, r7, pc}

08002bf0 <_ZNKSt13move_iteratorIPPN4tama7OnInputEE4baseEv>:
      base() const
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <_ZSt12__miter_baseIPPN4tama7OnInputEET_S4_>:
    __miter_base(_Iterator __it)
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
    { return __it; }
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	4618      	mov	r0, r3
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr

08002c1e <_ZSt12__niter_baseIPPN4tama7OnInputEET_S4_>:
    __niter_base(_Iterator __it)
 8002c1e:	b480      	push	{r7}
 8002c20:	b083      	sub	sp, #12
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
    { return __it; }
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c42:	d205      	bcs.n	8002c50 <_ZSt16__deque_buf_sizej+0x1c>
 8002c44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c4e:	e000      	b.n	8002c52 <_ZSt16__deque_buf_sizej+0x1e>
 8002c50:	2301      	movs	r3, #1
 8002c52:	4618      	mov	r0, r3
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr

08002c5e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>:
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 8002c5e:	b480      	push	{r7}
 8002c60:	b083      	sub	sp, #12
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	1c5a      	adds	r2, r3, #1
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	605a      	str	r2, [r3, #4]
 8002c70:	bf00      	nop
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
      if (--_M_use_count == 0)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	1e5a      	subs	r2, r3, #1
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	605a      	str	r2, [r3, #4]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	bf0c      	ite	eq
 8002c96:	2301      	moveq	r3, #1
 8002c98:	2300      	movne	r3, #0
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d019      	beq.n	8002cd4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
        {
          _M_dispose();
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	3308      	adds	r3, #8
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	1e5a      	subs	r2, r3, #1
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	609a      	str	r2, [r3, #8]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	bf0c      	ite	eq
 8002cbe:	2301      	moveq	r3, #1
 8002cc0:	2300      	movne	r3, #0
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d005      	beq.n	8002cd4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
            _M_destroy();
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	330c      	adds	r3, #12
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	4798      	blx	r3
        }
    }
 8002cd4:	bf00      	nop
 8002cd6:	3708      	adds	r7, #8
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <_ZN4tama7Context12openNewStageESt10shared_ptrINS_5StageEE>:


#include <utility>

void tama::Context::openNewStage(std::shared_ptr<Stage> stage)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
    stages.push(stage);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	3378      	adds	r3, #120	; 0x78
 8002cea:	6839      	ldr	r1, [r7, #0]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f000 f9b9 	bl	8003064 <_ZNSt5stackISt10shared_ptrIN4tama5StageEESt5dequeIS3_SaIS3_EEE4pushERKS3_>
}
 8002cf2:	bf00      	nop
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <_ZN4tama7Context11switchStageESt10shared_ptrINS_5StageEE>:
{
    stages.pop();
}

void tama::Context::switchStage(std::shared_ptr<Stage> stage)
{
 8002cfa:	b590      	push	{r4, r7, lr}
 8002cfc:	b083      	sub	sp, #12
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
 8002d02:	6039      	str	r1, [r7, #0]
    if (!stages.empty())
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	3378      	adds	r3, #120	; 0x78
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f000 f9b9 	bl	8003080 <_ZNKSt5stackISt10shared_ptrIN4tama5StageEESt5dequeIS3_SaIS3_EEE5emptyEv>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	f083 0301 	eor.w	r3, r3, #1
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d013      	beq.n	8002d42 <_ZN4tama7Context11switchStageESt10shared_ptrINS_5StageEE+0x48>
    {
        input->removeListener(stages.top().get());
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	33a8      	adds	r3, #168	; 0xa8
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f000 f9bb 	bl	800309a <_ZNKSt19__shared_ptr_accessIN4tama5InputELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8002d24:	4604      	mov	r4, r0
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	3378      	adds	r3, #120	; 0x78
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f000 f9c1 	bl	80030b2 <_ZNSt5stackISt10shared_ptrIN4tama5StageEESt5dequeIS3_SaIS3_EEE3topEv>
 8002d30:	4603      	mov	r3, r0
 8002d32:	4618      	mov	r0, r3
 8002d34:	f000 f9ca 	bl	80030cc <_ZNKSt12__shared_ptrIN4tama5StageELN9__gnu_cxx12_Lock_policyE0EE3getEv>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	4620      	mov	r0, r4
 8002d3e:	f7ff fa4a 	bl	80021d6 <_ZN4tama5Input14removeListenerEPNS_7OnInputE>
        // stages.pop();
    }
    stages.push(stage);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	3378      	adds	r3, #120	; 0x78
 8002d46:	6839      	ldr	r1, [r7, #0]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f000 f98b 	bl	8003064 <_ZNSt5stackISt10shared_ptrIN4tama5StageEESt5dequeIS3_SaIS3_EEE4pushERKS3_>
}
 8002d4e:	bf00      	nop
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd90      	pop	{r4, r7, pc}

08002d56 <_ZNSt12__shared_ptrIN4tama5StageELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b082      	sub	sp, #8
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
 8002d5e:	6039      	str	r1, [r7, #0]
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	601a      	str	r2, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	1d1a      	adds	r2, r3, #4
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	3304      	adds	r3, #4
 8002d70:	4619      	mov	r1, r3
 8002d72:	4610      	mov	r0, r2
 8002d74:	f000 f9b6 	bl	80030e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3708      	adds	r7, #8
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <_ZNSt12__shared_ptrIN4tama5StageELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b082      	sub	sp, #8
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	3304      	adds	r3, #4
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f000 f9bf 	bl	8003112 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4618      	mov	r0, r3
 8002d98:	3708      	adds	r7, #8
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <_ZNSt10shared_ptrIN4tama5StageEEC1ERKS2_>:
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b082      	sub	sp, #8
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
 8002da6:	6039      	str	r1, [r7, #0]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	683a      	ldr	r2, [r7, #0]
 8002dac:	4611      	mov	r1, r2
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7ff ffd1 	bl	8002d56 <_ZNSt12__shared_ptrIN4tama5StageELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	4618      	mov	r0, r3
 8002db8:	3708      	adds	r7, #8
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <_ZNSt10shared_ptrIN4tama5StageEED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b082      	sub	sp, #8
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7ff ffda 	bl	8002d82 <_ZNSt12__shared_ptrIN4tama5StageELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3708      	adds	r7, #8
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <_ZN4tama7Context14getActiveStageEv>:

std::shared_ptr<tama::Stage> tama::Context::getActiveStage()
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
    return stages.top(); // @todo return null object if no stage created
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	3378      	adds	r3, #120	; 0x78
 8002de6:	4618      	mov	r0, r3
 8002de8:	f000 f963 	bl	80030b2 <_ZNSt5stackISt10shared_ptrIN4tama5StageEESt5dequeIS3_SaIS3_EEE3topEv>
 8002dec:	4603      	mov	r3, r0
 8002dee:	4619      	mov	r1, r3
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f7ff ffd4 	bl	8002d9e <_ZNSt10shared_ptrIN4tama5StageEEC1ERKS2_>
}
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <_ZN4tama7PetDataC1Ev>:
#include "breed/breed.enum.h"
#include "../../pet-db/pet-identifier.h"

namespace tama
{
    class PetData
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b082      	sub	sp, #8
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f01c fe1b 	bl	801fa44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4618      	mov	r0, r3
 8002e12:	3708      	adds	r7, #8
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <_ZN4tama8DatetimeC1Ev>:
#include "time/Time.h"
#include "date/Date.h"

namespace tama
{
    class Datetime
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7fe f8e2 	bl	8000fec <_ZN4tama4TimeC1Ev>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	3318      	adds	r3, #24
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7fe f8c9 	bl	8000fc4 <_ZN4tama4DateC1Ev>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4618      	mov	r0, r3
 8002e36:	3708      	adds	r7, #8
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <_ZN4tama9GameStateC1Ev>:
#include "../datetime/Datetime.h"
#include "../../pet-db/PetDb.h"

namespace tama
{
    class GameState
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7ff ffd9 	bl	8002dfe <_ZN4tama7PetDataC1Ev>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	3330      	adds	r3, #48	; 0x30
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7ff ffe1 	bl	8002e18 <_ZN4tama8DatetimeC1Ev>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	3354      	adds	r3, #84	; 0x54
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7fe f9ec 	bl	8001238 <_ZN4tama5PetDbC1Ev>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	4618      	mov	r0, r3
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <_ZNSt12__shared_ptrIN4tama13TextureLoaderELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b082      	sub	sp, #8
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
 8002e72:	6039      	str	r1, [r7, #0]
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	601a      	str	r2, [r3, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	1d1a      	adds	r2, r3, #4
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	3304      	adds	r3, #4
 8002e84:	4619      	mov	r1, r3
 8002e86:	4610      	mov	r0, r2
 8002e88:	f000 f92c 	bl	80030e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <_ZNSt10shared_ptrIN4tama13TextureLoaderEEC1ERKS2_>:
      shared_ptr(const shared_ptr&) noexcept = default;
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b082      	sub	sp, #8
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
 8002e9e:	6039      	str	r1, [r7, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	683a      	ldr	r2, [r7, #0]
 8002ea4:	4611      	mov	r1, r2
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7ff ffdf 	bl	8002e6a <_ZNSt12__shared_ptrIN4tama13TextureLoaderELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3708      	adds	r7, #8
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <_ZNSt12__shared_ptrIN4tama5InputELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b082      	sub	sp, #8
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
 8002ebe:	6039      	str	r1, [r7, #0]
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	601a      	str	r2, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	1d1a      	adds	r2, r3, #4
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	3304      	adds	r3, #4
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	4610      	mov	r0, r2
 8002ed4:	f000 f906 	bl	80030e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4618      	mov	r0, r3
 8002edc:	3708      	adds	r7, #8
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <_ZNSt10shared_ptrIN4tama5InputEEC1ERKS2_>:
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b082      	sub	sp, #8
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
 8002eea:	6039      	str	r1, [r7, #0]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	683a      	ldr	r2, [r7, #0]
 8002ef0:	4611      	mov	r1, r2
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7ff ffdf 	bl	8002eb6 <_ZNSt12__shared_ptrIN4tama5InputELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4618      	mov	r0, r3
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <_ZNSt12__shared_ptrIN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b082      	sub	sp, #8
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
 8002f0a:	6039      	str	r1, [r7, #0]
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	601a      	str	r2, [r3, #0]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	1d1a      	adds	r2, r3, #4
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	3304      	adds	r3, #4
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	4610      	mov	r0, r2
 8002f20:	f000 f8e0 	bl	80030e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4618      	mov	r0, r3
 8002f28:	3708      	adds	r7, #8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <_ZNSt10shared_ptrIN4tama11SoundPlayerEEC1ERKS2_>:
 8002f2e:	b580      	push	{r7, lr}
 8002f30:	b082      	sub	sp, #8
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
 8002f36:	6039      	str	r1, [r7, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	683a      	ldr	r2, [r7, #0]
 8002f3c:	4611      	mov	r1, r2
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7ff ffdf 	bl	8002f02 <_ZNSt12__shared_ptrIN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4618      	mov	r0, r3
 8002f48:	3708      	adds	r7, #8
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}

08002f4e <_ZNSt12__shared_ptrIN4tama18TimeMonitorCreatorELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	b082      	sub	sp, #8
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
 8002f56:	6039      	str	r1, [r7, #0]
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	601a      	str	r2, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	1d1a      	adds	r2, r3, #4
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	3304      	adds	r3, #4
 8002f68:	4619      	mov	r1, r3
 8002f6a:	4610      	mov	r0, r2
 8002f6c:	f000 f8ba 	bl	80030e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4618      	mov	r0, r3
 8002f74:	3708      	adds	r7, #8
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <_ZNSt10shared_ptrIN4tama18TimeMonitorCreatorEEC1ERKS2_>:
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b082      	sub	sp, #8
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
 8002f82:	6039      	str	r1, [r7, #0]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	683a      	ldr	r2, [r7, #0]
 8002f88:	4611      	mov	r1, r2
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7ff ffdf 	bl	8002f4e <_ZNSt12__shared_ptrIN4tama18TimeMonitorCreatorELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4618      	mov	r0, r3
 8002f94:	3708      	adds	r7, #8
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <_ZN4tama7ContextC1ESt10shared_ptrINS_13TextureLoaderEES1_INS_5InputEES1_INS_11SoundPlayerEES1_INS_18TimeMonitorCreatorEE>:

tama::Context::Context(std::shared_ptr<TextureLoader> textureLoader,
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b084      	sub	sp, #16
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	60f8      	str	r0, [r7, #12]
 8002fa2:	60b9      	str	r1, [r7, #8]
 8002fa4:	607a      	str	r2, [r7, #4]
 8002fa6:	603b      	str	r3, [r7, #0]
                       std::shared_ptr<Input> input,
                       std::shared_ptr<SoundPlayer> player,
                       std::shared_ptr<TimeMonitorCreator> timeMonitorCreator)
: textureLoader(textureLoader), input(input), player(player), timeMonitorCreator(timeMonitorCreator)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7ff ff46 	bl	8002e3c <_ZN4tama9GameStateC1Ev>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	3378      	adds	r3, #120	; 0x78
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f000 f8be 	bl	8003136 <_ZNSt5stackISt10shared_ptrIN4tama5StageEESt5dequeIS3_SaIS3_EEEC1IS6_vEEv>
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	33a0      	adds	r3, #160	; 0xa0
 8002fbe:	68b9      	ldr	r1, [r7, #8]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7ff ff68 	bl	8002e96 <_ZNSt10shared_ptrIN4tama13TextureLoaderEEC1ERKS2_>
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	33a8      	adds	r3, #168	; 0xa8
 8002fca:	6879      	ldr	r1, [r7, #4]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f7ff ff88 	bl	8002ee2 <_ZNSt10shared_ptrIN4tama5InputEEC1ERKS2_>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	33b0      	adds	r3, #176	; 0xb0
 8002fd6:	6839      	ldr	r1, [r7, #0]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7ff ffa8 	bl	8002f2e <_ZNSt10shared_ptrIN4tama11SoundPlayerEEC1ERKS2_>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	33b8      	adds	r3, #184	; 0xb8
 8002fe2:	69b9      	ldr	r1, [r7, #24]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7ff ffc8 	bl	8002f7a <_ZNSt10shared_ptrIN4tama18TimeMonitorCreatorEEC1ERKS2_>
{
}
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	4618      	mov	r0, r3
 8002fee:	3710      	adds	r7, #16
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <_ZN4tama7Context16getTextureLoaderEv>:

std::shared_ptr<tama::TextureLoader> tama::Context::getTextureLoader()
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
    return textureLoader;
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	33a0      	adds	r3, #160	; 0xa0
 8003002:	4619      	mov	r1, r3
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f7ff ff46 	bl	8002e96 <_ZNSt10shared_ptrIN4tama13TextureLoaderEEC1ERKS2_>
}
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	3708      	adds	r7, #8
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}

08003012 <_ZN4tama7Context8getInputEv>:

std::shared_ptr<tama::Input> tama::Context::getInput()
{
 8003012:	b580      	push	{r7, lr}
 8003014:	b082      	sub	sp, #8
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
 800301a:	6039      	str	r1, [r7, #0]
    return input;
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	33a8      	adds	r3, #168	; 0xa8
 8003020:	4619      	mov	r1, r3
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f7ff ff5d 	bl	8002ee2 <_ZNSt10shared_ptrIN4tama5InputEEC1ERKS2_>
}
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	3708      	adds	r7, #8
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <_ZN4tama7Context12getGameStateEv>:
{
    return player;
}

tama::GameState &tama::Context::getGameState()
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
    return gameState;
 8003038:	687b      	ldr	r3, [r7, #4]
}
 800303a:	4618      	mov	r0, r3
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr

08003046 <_ZN4tama7Context21getTimeMonitorCreatorEv>:

std::shared_ptr<tama::TimeMonitorCreator> tama::Context::getTimeMonitorCreator()
{
 8003046:	b580      	push	{r7, lr}
 8003048:	b082      	sub	sp, #8
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
 800304e:	6039      	str	r1, [r7, #0]
    return timeMonitorCreator;
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	33b8      	adds	r3, #184	; 0xb8
 8003054:	4619      	mov	r1, r3
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f7ff ff8f 	bl	8002f7a <_ZNSt10shared_ptrIN4tama18TimeMonitorCreatorEEC1ERKS2_>
}
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	3708      	adds	r7, #8
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <_ZNSt5stackISt10shared_ptrIN4tama5StageEESt5dequeIS3_SaIS3_EEE4pushERKS3_>:
       *  element at the top of the %stack and assigns the given data
       *  to it.  The time complexity of the operation depends on the
       *  underlying sequence.
       */
      void
      push(const value_type& __x)
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
      { c.push_back(__x); }
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6839      	ldr	r1, [r7, #0]
 8003072:	4618      	mov	r0, r3
 8003074:	f000 f86c 	bl	8003150 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE9push_backERKS3_>
 8003078:	bf00      	nop
 800307a:	3708      	adds	r7, #8
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <_ZNKSt5stackISt10shared_ptrIN4tama5StageEESt5dequeIS3_SaIS3_EEE5emptyEv>:
      empty() const
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
      { return c.empty(); }
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4618      	mov	r0, r3
 800308c:	f000 f882 	bl	8003194 <_ZNKSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE5emptyEv>
 8003090:	4603      	mov	r3, r0
 8003092:	4618      	mov	r0, r3
 8003094:	3708      	adds	r7, #8
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <_ZNKSt19__shared_ptr_accessIN4tama5InputELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 800309a:	b580      	push	{r7, lr}
 800309c:	b082      	sub	sp, #8
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
	return _M_get();
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 f888 	bl	80031b8 <_ZNKSt19__shared_ptr_accessIN4tama5InputELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 80030a8:	4603      	mov	r3, r0
      }
 80030aa:	4618      	mov	r0, r3
 80030ac:	3708      	adds	r7, #8
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <_ZNSt5stackISt10shared_ptrIN4tama5StageEESt5dequeIS3_SaIS3_EEE3topEv>:
      top()
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b082      	sub	sp, #8
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
	return c.back();
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4618      	mov	r0, r3
 80030be:	f000 f887 	bl	80031d0 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE4backEv>
 80030c2:	4603      	mov	r3, r0
      }
 80030c4:	4618      	mov	r0, r3
 80030c6:	3708      	adds	r7, #8
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <_ZNKSt12__shared_ptrIN4tama5StageELN9__gnu_cxx12_Lock_policyE0EE3getEv>:
	_SafeConv<_Yp>
	reset(_Yp* __p, _Deleter __d, _Alloc __a)
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      element_type*
      get() const noexcept
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4618      	mov	r0, r3
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      __shared_count(const __shared_count& __r) noexcept
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
      : _M_pi(__r._M_pi)
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	601a      	str	r2, [r3, #0]
	if (_M_pi != 0)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d004      	beq.n	8003108 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0x24>
	  _M_pi->_M_add_ref_copy();
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4618      	mov	r0, r3
 8003104:	f7ff fdab 	bl	8002c5e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>
      }
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4618      	mov	r0, r3
 800310c:	3708      	adds	r7, #8
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 8003112:	b580      	push	{r7, lr}
 8003114:	b082      	sub	sp, #8
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
	if (_M_pi != nullptr)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d004      	beq.n	800312c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1a>
	  _M_pi->_M_release();
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4618      	mov	r0, r3
 8003128:	f7ff fda8 	bl	8002c7c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	4618      	mov	r0, r3
 8003130:	3708      	adds	r7, #8
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}

08003136 <_ZNSt5stackISt10shared_ptrIN4tama5StageEESt5dequeIS3_SaIS3_EEEC1IS6_vEEv>:
	stack()
 8003136:	b580      	push	{r7, lr}
 8003138:	b082      	sub	sp, #8
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
	: c() { }
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4618      	mov	r0, r3
 8003142:	f000 f85e 	bl	8003202 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EEC1Ev>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4618      	mov	r0, r3
 800314a:	3708      	adds	r7, #8
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE9push_backERKS3_>:
       *  element at the end of the %deque and assigns the given data
       *  to it.  Due to the nature of a %deque this operation can be
       *  done in constant time.
       */
      void
      push_back(const value_type& __x)
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish._M_cur
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a1b      	ldr	r3, [r3, #32]
 8003162:	3b08      	subs	r3, #8
	if (this->_M_impl._M_finish._M_cur
 8003164:	429a      	cmp	r2, r3
 8003166:	d00d      	beq.n	8003184 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE9push_backERKS3_+0x34>
	  {
	    _Alloc_traits::construct(this->_M_impl,
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	683a      	ldr	r2, [r7, #0]
 8003170:	4619      	mov	r1, r3
 8003172:	f000 f894 	bl	800329e <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama5StageEEEE9constructIS3_JRKS3_EEEvRS4_PT_DpOT0_>
				     this->_M_impl._M_finish._M_cur, __x);
	    ++this->_M_impl._M_finish._M_cur;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	f103 0208 	add.w	r2, r3, #8
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	619a      	str	r2, [r3, #24]
	  }
	else
	  _M_push_back_aux(__x);
      }
 8003182:	e003      	b.n	800318c <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE9push_backERKS3_+0x3c>
	  _M_push_back_aux(__x);
 8003184:	6839      	ldr	r1, [r7, #0]
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 f89c 	bl	80032c4 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE16_M_push_back_auxIJRKS3_EEEvDpOT_>
      }
 800318c:	bf00      	nop
 800318e:	3708      	adds	r7, #8
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <_ZNKSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f103 0218 	add.w	r2, r3, #24
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	3308      	adds	r3, #8
 80031a6:	4619      	mov	r1, r3
 80031a8:	4610      	mov	r0, r2
 80031aa:	f000 f8bb 	bl	8003324 <_ZSteqISt10shared_ptrIN4tama5StageEERS3_PS3_EbRKSt15_Deque_iteratorIT_T0_T1_ESC_>
 80031ae:	4603      	mov	r3, r0
 80031b0:	4618      	mov	r0, r3
 80031b2:	3708      	adds	r7, #8
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <_ZNKSt19__shared_ptr_accessIN4tama5InputELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f000 f8c3 	bl	800334c <_ZNKSt12__shared_ptrIN4tama5InputELN9__gnu_cxx12_Lock_policyE0EE3getEv>
 80031c6:	4603      	mov	r3, r0
 80031c8:	4618      	mov	r0, r3
 80031ca:	3708      	adds	r7, #8
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b086      	sub	sp, #24
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
	iterator __tmp = end();
 80031d8:	f107 0308 	add.w	r3, r7, #8
 80031dc:	6879      	ldr	r1, [r7, #4]
 80031de:	4618      	mov	r0, r3
 80031e0:	f000 f81c 	bl	800321c <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE3endEv>
	--__tmp;
 80031e4:	f107 0308 	add.w	r3, r7, #8
 80031e8:	4618      	mov	r0, r3
 80031ea:	f000 f8bb 	bl	8003364 <_ZNSt15_Deque_iteratorISt10shared_ptrIN4tama5StageEERS3_PS3_EmmEv>
	return *__tmp;
 80031ee:	f107 0308 	add.w	r3, r7, #8
 80031f2:	4618      	mov	r0, r3
 80031f4:	f000 f8d6 	bl	80033a4 <_ZNKSt15_Deque_iteratorISt10shared_ptrIN4tama5StageEERS3_PS3_EdeEv>
 80031f8:	4603      	mov	r3, r0
      }
 80031fa:	4618      	mov	r0, r3
 80031fc:	3718      	adds	r7, #24
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EEC1Ev>:
      deque() : _Base() { }
 8003202:	b580      	push	{r7, lr}
 8003204:	b082      	sub	sp, #8
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4618      	mov	r0, r3
 800320e:	f000 f8d5 	bl	80033bc <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EEC1Ev>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4618      	mov	r0, r3
 8003216:	3708      	adds	r7, #8
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	3318      	adds	r3, #24
 800322a:	4619      	mov	r1, r3
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f000 f80f 	bl	8003250 <_ZNSt15_Deque_iteratorISt10shared_ptrIN4tama5StageEERS3_PS3_EC1ERKS6_>
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	3708      	adds	r7, #8
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}

0800323a <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800323a:	b480      	push	{r7}
 800323c:	b083      	sub	sp, #12
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4618      	mov	r0, r3
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <_ZNSt15_Deque_iteratorISt10shared_ptrIN4tama5StageEERS3_PS3_EC1ERKS6_>:
      _Deque_iterator(const iterator& __x) _GLIBCXX_NOEXCEPT
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
      : _M_cur(__x._M_cur), _M_first(__x._M_first),
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
	_M_last(__x._M_last), _M_node(__x._M_node) { }
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	601a      	str	r2, [r3, #0]
      : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685a      	ldr	r2, [r3, #4]
	_M_last(__x._M_last), _M_node(__x._M_node) { }
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	605a      	str	r2, [r3, #4]
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	689a      	ldr	r2, [r3, #8]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	609a      	str	r2, [r3, #8]
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	68da      	ldr	r2, [r3, #12]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	60da      	str	r2, [r3, #12]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4618      	mov	r0, r3
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <_ZSt7forwardIRKSt10shared_ptrIN4tama5StageEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4618      	mov	r0, r3
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr

0800329e <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama5StageEEEE9constructIS3_JRKS3_EEEvRS4_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 800329e:	b580      	push	{r7, lr}
 80032a0:	b084      	sub	sp, #16
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	60f8      	str	r0, [r7, #12]
 80032a6:	60b9      	str	r1, [r7, #8]
 80032a8:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f7ff ffec 	bl	8003288 <_ZSt7forwardIRKSt10shared_ptrIN4tama5StageEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80032b0:	4603      	mov	r3, r0
 80032b2:	461a      	mov	r2, r3
 80032b4:	68b9      	ldr	r1, [r7, #8]
 80032b6:	68f8      	ldr	r0, [r7, #12]
 80032b8:	f000 f8ad 	bl	8003416 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama5StageEEE9constructIS4_JRKS4_EEEvPT_DpOT0_>
 80032bc:	bf00      	nop
 80032be:	3710      	adds	r7, #16
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE16_M_push_back_auxIJRKS3_EEEvDpOT_>:
  // Called only if _M_impl._M_finish._M_cur == _M_impl._M_finish._M_last - 1.
  template<typename _Tp, typename _Alloc>
#if __cplusplus >= 201103L
    template<typename... _Args>
      void
      deque<_Tp, _Alloc>::
 80032c4:	b5b0      	push	{r4, r5, r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
      void
      deque<_Tp, _Alloc>::
      _M_push_back_aux(const value_type& __t)
#endif
      {
	_M_reserve_map_at_back();
 80032ce:	2101      	movs	r1, #1
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f000 f8ba 	bl	800344a <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032dc:	1d1c      	adds	r4, r3, #4
 80032de:	4610      	mov	r0, r2
 80032e0:	f000 f8cf 	bl	8003482 <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE16_M_allocate_nodeEv>
 80032e4:	4603      	mov	r3, r0
 80032e6:	6023      	str	r3, [r4, #0]
	__try
	  {
#if __cplusplus >= 201103L
	    _Alloc_traits::construct(this->_M_impl,
 80032e8:	687c      	ldr	r4, [r7, #4]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	699d      	ldr	r5, [r3, #24]
 80032ee:	6838      	ldr	r0, [r7, #0]
 80032f0:	f7ff ffca 	bl	8003288 <_ZSt7forwardIRKSt10shared_ptrIN4tama5StageEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80032f4:	4603      	mov	r3, r0
 80032f6:	461a      	mov	r2, r3
 80032f8:	4629      	mov	r1, r5
 80032fa:	4620      	mov	r0, r4
 80032fc:	f7ff ffcf 	bl	800329e <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama5StageEEEE9constructIS3_JRKS3_EEEvRS4_PT_DpOT0_>
	                             this->_M_impl._M_finish._M_cur,
			             std::forward<_Args>(__args)...);
#else
	    this->_M_impl.construct(this->_M_impl._M_finish._M_cur, __t);
#endif
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f103 0218 	add.w	r2, r3, #24
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330a:	3304      	adds	r3, #4
 800330c:	4619      	mov	r1, r3
 800330e:	4610      	mov	r0, r2
 8003310:	f000 f8c9 	bl	80034a6 <_ZNSt15_Deque_iteratorISt10shared_ptrIN4tama5StageEERS3_PS3_E11_M_set_nodeEPS5_>
						+ 1);
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	69da      	ldr	r2, [r3, #28]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	619a      	str	r2, [r3, #24]
	__catch(...)
	  {
	    _M_deallocate_node(*(this->_M_impl._M_finish._M_node + 1));
	    __throw_exception_again;
	  }
      }
 800331c:	bf00      	nop
 800331e:	3708      	adds	r7, #8
 8003320:	46bd      	mov	sp, r7
 8003322:	bdb0      	pop	{r4, r5, r7, pc}

08003324 <_ZSteqISt10shared_ptrIN4tama5StageEERS3_PS3_EbRKSt15_Deque_iteratorIT_T0_T1_ESC_>:
    operator==(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
    { return __x._M_cur == __y._M_cur; }
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	429a      	cmp	r2, r3
 8003338:	bf0c      	ite	eq
 800333a:	2301      	moveq	r3, #1
 800333c:	2300      	movne	r3, #0
 800333e:	b2db      	uxtb	r3, r3
 8003340:	4618      	mov	r0, r3
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <_ZNKSt12__shared_ptrIN4tama5InputELN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4618      	mov	r0, r3
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <_ZNSt15_Deque_iteratorISt10shared_ptrIN4tama5StageEERS3_PS3_EmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
	if (_M_cur == _M_first)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	429a      	cmp	r2, r3
 8003376:	d10a      	bne.n	800338e <_ZNSt15_Deque_iteratorISt10shared_ptrIN4tama5StageEERS3_PS3_EmmEv+0x2a>
	    _M_set_node(_M_node - 1);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	3b04      	subs	r3, #4
 800337e:	4619      	mov	r1, r3
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f000 f890 	bl	80034a6 <_ZNSt15_Deque_iteratorISt10shared_ptrIN4tama5StageEERS3_PS3_E11_M_set_nodeEPS5_>
	    _M_cur = _M_last;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	689a      	ldr	r2, [r3, #8]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	601a      	str	r2, [r3, #0]
	--_M_cur;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f1a3 0208 	sub.w	r2, r3, #8
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	601a      	str	r2, [r3, #0]
	return *this;
 800339a:	687b      	ldr	r3, [r7, #4]
      }
 800339c:	4618      	mov	r0, r3
 800339e:	3708      	adds	r7, #8
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <_ZNKSt15_Deque_iteratorISt10shared_ptrIN4tama5StageEERS3_PS3_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4618      	mov	r0, r3
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EEC1Ev>:
      _Deque_base()
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
      : _M_impl()
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f000 f899 	bl	80034fe <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 80033cc:	2100      	movs	r1, #0
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 f8b1 	bl	8003536 <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE17_M_initialize_mapEj>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4618      	mov	r0, r3
 80033d8:	3708      	adds	r7, #8
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE17_M_deallocate_mapEPPS3_j>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 80033de:	b580      	push	{r7, lr}
 80033e0:	b086      	sub	sp, #24
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	60f8      	str	r0, [r7, #12]
 80033e6:	60b9      	str	r1, [r7, #8]
 80033e8:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80033ea:	f107 0314 	add.w	r3, r7, #20
 80033ee:	68f9      	ldr	r1, [r7, #12]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f000 f903 	bl	80035fc <_ZNKSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 80033f6:	f107 0314 	add.w	r3, r7, #20
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	68b9      	ldr	r1, [r7, #8]
 80033fe:	4618      	mov	r0, r3
 8003400:	f000 f919 	bl	8003636 <_ZNSt16allocator_traitsISaIPSt10shared_ptrIN4tama5StageEEEE10deallocateERS5_PS4_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8003404:	f107 0314 	add.w	r3, r7, #20
 8003408:	4618      	mov	r0, r3
 800340a:	f000 f908 	bl	800361e <_ZNSaIPSt10shared_ptrIN4tama5StageEEED1Ev>
      }
 800340e:	bf00      	nop
 8003410:	3718      	adds	r7, #24
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama5StageEEE9constructIS4_JRKS4_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8003416:	b590      	push	{r4, r7, lr}
 8003418:	b085      	sub	sp, #20
 800341a:	af00      	add	r7, sp, #0
 800341c:	60f8      	str	r0, [r7, #12]
 800341e:	60b9      	str	r1, [r7, #8]
 8003420:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f7ff ff30 	bl	8003288 <_ZSt7forwardIRKSt10shared_ptrIN4tama5StageEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8003428:	4604      	mov	r4, r0
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	4619      	mov	r1, r3
 800342e:	2008      	movs	r0, #8
 8003430:	f7fd fe05 	bl	800103e <_ZnwjPv>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d003      	beq.n	8003442 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama5StageEEE9constructIS4_JRKS4_EEEvPT_DpOT0_+0x2c>
 800343a:	4621      	mov	r1, r4
 800343c:	4618      	mov	r0, r3
 800343e:	f7ff fcae 	bl	8002d9e <_ZNSt10shared_ptrIN4tama5StageEEC1ERKS2_>
 8003442:	bf00      	nop
 8003444:	3714      	adds	r7, #20
 8003446:	46bd      	mov	sp, r7
 8003448:	bd90      	pop	{r4, r7, pc}

0800344a <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE22_M_reserve_map_at_backEj>:
       *  Makes sure the _M_map has space for new nodes.  Does not
       *  actually add the nodes.  Can invalidate _M_map pointers.
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 800344a:	b580      	push	{r7, lr}
 800344c:	b082      	sub	sp, #8
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
 8003452:	6039      	str	r1, [r7, #0]
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	1c5a      	adds	r2, r3, #1
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 800345c:	6879      	ldr	r1, [r7, #4]
 800345e:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8003460:	4608      	mov	r0, r1
 8003462:	6879      	ldr	r1, [r7, #4]
 8003464:	6809      	ldr	r1, [r1, #0]
 8003466:	1a41      	subs	r1, r0, r1
 8003468:	1089      	asrs	r1, r1, #2
 800346a:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 800346c:	429a      	cmp	r2, r3
 800346e:	d904      	bls.n	800347a <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE22_M_reserve_map_at_backEj+0x30>
	  _M_reallocate_map(__nodes_to_add, false);
 8003470:	2200      	movs	r2, #0
 8003472:	6839      	ldr	r1, [r7, #0]
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f000 f8ed 	bl	8003654 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE17_M_reallocate_mapEjb>
      }
 800347a:	bf00      	nop
 800347c:	3708      	adds	r7, #8
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}

08003482 <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE16_M_allocate_nodeEv>:
      _M_allocate_node()
 8003482:	b590      	push	{r4, r7, lr}
 8003484:	b083      	sub	sp, #12
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 800348a:	687c      	ldr	r4, [r7, #4]
 800348c:	2008      	movs	r0, #8
 800348e:	f7ff fbd1 	bl	8002c34 <_ZSt16__deque_buf_sizej>
 8003492:	4603      	mov	r3, r0
 8003494:	4619      	mov	r1, r3
 8003496:	4620      	mov	r0, r4
 8003498:	f000 f977 	bl	800378a <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama5StageEEEE8allocateERS4_j>
 800349c:	4603      	mov	r3, r0
      }
 800349e:	4618      	mov	r0, r3
 80034a0:	370c      	adds	r7, #12
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd90      	pop	{r4, r7, pc}

080034a6 <_ZNSt15_Deque_iteratorISt10shared_ptrIN4tama5StageEERS3_PS3_E11_M_set_nodeEPS5_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 80034a6:	b590      	push	{r4, r7, lr}
 80034a8:	b083      	sub	sp, #12
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
 80034ae:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	683a      	ldr	r2, [r7, #0]
 80034b4:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685c      	ldr	r4, [r3, #4]
 80034c2:	f000 f971 	bl	80037a8 <_ZNSt15_Deque_iteratorISt10shared_ptrIN4tama5StageEERS3_PS3_E14_S_buffer_sizeEv>
 80034c6:	4603      	mov	r3, r0
 80034c8:	00db      	lsls	r3, r3, #3
 80034ca:	18e2      	adds	r2, r4, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	609a      	str	r2, [r3, #8]
      }
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd90      	pop	{r4, r7, pc}

080034d8 <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE18_M_deallocate_nodeEPS3_>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 80034d8:	b590      	push	{r4, r7, lr}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 80034e2:	687c      	ldr	r4, [r7, #4]
 80034e4:	2008      	movs	r0, #8
 80034e6:	f7ff fba5 	bl	8002c34 <_ZSt16__deque_buf_sizej>
 80034ea:	4603      	mov	r3, r0
 80034ec:	461a      	mov	r2, r3
 80034ee:	6839      	ldr	r1, [r7, #0]
 80034f0:	4620      	mov	r0, r4
 80034f2:	f000 f961 	bl	80037b8 <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama5StageEEEE10deallocateERS4_PS3_j>
      }
 80034f6:	bf00      	nop
 80034f8:	370c      	adds	r7, #12
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd90      	pop	{r4, r7, pc}

080034fe <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE11_Deque_implC1Ev>:
	_Deque_impl()
 80034fe:	b580      	push	{r7, lr}
 8003500:	b082      	sub	sp, #8
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
	  _M_start(), _M_finish()
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 f965 	bl	80037d6 <_ZNSaISt10shared_ptrIN4tama5StageEEEC1Ev>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	601a      	str	r2, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	605a      	str	r2, [r3, #4]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	3308      	adds	r3, #8
 800351c:	4618      	mov	r0, r3
 800351e:	f000 f966 	bl	80037ee <_ZNSt15_Deque_iteratorISt10shared_ptrIN4tama5StageEERS3_PS3_EC1Ev>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	3318      	adds	r3, #24
 8003526:	4618      	mov	r0, r3
 8003528:	f000 f961 	bl	80037ee <_ZNSt15_Deque_iteratorISt10shared_ptrIN4tama5StageEERS3_PS3_EC1Ev>
	{ }
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4618      	mov	r0, r3
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8003536:	b590      	push	{r4, r7, lr}
 8003538:	b089      	sub	sp, #36	; 0x24
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
 800353e:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements/ __deque_buf_size(sizeof(_Tp))
 8003540:	2008      	movs	r0, #8
 8003542:	f7ff fb77 	bl	8002c34 <_ZSt16__deque_buf_sizej>
 8003546:	4602      	mov	r2, r0
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	fbb3 f3f2 	udiv	r3, r3, r2
 800354e:	3301      	adds	r3, #1
 8003550:	61fb      	str	r3, [r7, #28]
					   size_t(__num_nodes + 2));
 8003552:	2308      	movs	r3, #8
 8003554:	60fb      	str	r3, [r7, #12]
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	3302      	adds	r3, #2
 800355a:	613b      	str	r3, [r7, #16]
 800355c:	f107 0210 	add.w	r2, r7, #16
 8003560:	f107 030c 	add.w	r3, r7, #12
 8003564:	4611      	mov	r1, r2
 8003566:	4618      	mov	r0, r3
 8003568:	f7ff f99b 	bl	80028a2 <_ZSt3maxIjERKT_S2_S2_>
 800356c:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	4619      	mov	r1, r3
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 f94e 	bl	800381c <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE15_M_allocate_mapEj>
 8003580:	4602      	mov	r2, r0
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6859      	ldr	r1, [r3, #4]
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	1acb      	subs	r3, r1, r3
 8003592:	085b      	lsrs	r3, r3, #1
 8003594:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 8003596:	4413      	add	r3, r2
 8003598:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	69ba      	ldr	r2, [r7, #24]
 80035a0:	4413      	add	r3, r2
 80035a2:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 80035a4:	697a      	ldr	r2, [r7, #20]
 80035a6:	69b9      	ldr	r1, [r7, #24]
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f000 f953 	bl	8003854 <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE15_M_create_nodesEPPS3_S7_>
      this->_M_impl._M_start._M_set_node(__nstart);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	3308      	adds	r3, #8
 80035b2:	69b9      	ldr	r1, [r7, #24]
 80035b4:	4618      	mov	r0, r3
 80035b6:	f7ff ff76 	bl	80034a6 <_ZNSt15_Deque_iteratorISt10shared_ptrIN4tama5StageEERS3_PS3_E11_M_set_nodeEPS5_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f103 0218 	add.w	r2, r3, #24
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	3b04      	subs	r3, #4
 80035c4:	4619      	mov	r1, r3
 80035c6:	4610      	mov	r0, r2
 80035c8:	f7ff ff6d 	bl	80034a6 <_ZNSt15_Deque_iteratorISt10shared_ptrIN4tama5StageEERS3_PS3_E11_M_set_nodeEPS5_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	68da      	ldr	r2, [r3, #12]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 80035d8:	2008      	movs	r0, #8
 80035da:	f7ff fb2b 	bl	8002c34 <_ZSt16__deque_buf_sizej>
 80035de:	4602      	mov	r2, r0
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	fbb3 f1f2 	udiv	r1, r3, r2
 80035e6:	fb02 f201 	mul.w	r2, r2, r1
 80035ea:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 80035ec:	00db      	lsls	r3, r3, #3
 80035ee:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	619a      	str	r2, [r3, #24]
    }
 80035f4:	bf00      	nop
 80035f6:	3724      	adds	r7, #36	; 0x24
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd90      	pop	{r4, r7, pc}

080035fc <_ZNKSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 8003606:	6838      	ldr	r0, [r7, #0]
 8003608:	f000 f93e 	bl	8003888 <_ZNKSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE19_M_get_Tp_allocatorEv>
 800360c:	4603      	mov	r3, r0
 800360e:	4619      	mov	r1, r3
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f000 f944 	bl	800389e <_ZNSaIPSt10shared_ptrIN4tama5StageEEEC1IS2_EERKSaIT_E>
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	3708      	adds	r7, #8
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}

0800361e <_ZNSaIPSt10shared_ptrIN4tama5StageEEED1Ev>:
 800361e:	b580      	push	{r7, lr}
 8003620:	b082      	sub	sp, #8
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 f946 	bl	80038b8 <_ZN9__gnu_cxx13new_allocatorIPSt10shared_ptrIN4tama5StageEEED1Ev>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4618      	mov	r0, r3
 8003630:	3708      	adds	r7, #8
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}

08003636 <_ZNSt16allocator_traitsISaIPSt10shared_ptrIN4tama5StageEEEE10deallocateERS5_PS4_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8003636:	b580      	push	{r7, lr}
 8003638:	b084      	sub	sp, #16
 800363a:	af00      	add	r7, sp, #0
 800363c:	60f8      	str	r0, [r7, #12]
 800363e:	60b9      	str	r1, [r7, #8]
 8003640:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	68b9      	ldr	r1, [r7, #8]
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	f000 f941 	bl	80038ce <_ZN9__gnu_cxx13new_allocatorIPSt10shared_ptrIN4tama5StageEEE10deallocateEPS5_j>
 800364c:	bf00      	nop
 800364e:	3710      	adds	r7, #16
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE17_M_reallocate_mapEjb>:
        }
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 8003654:	b590      	push	{r4, r7, lr}
 8003656:	b08b      	sub	sp, #44	; 0x2c
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	4613      	mov	r3, r2
 8003660:	71fb      	strb	r3, [r7, #7]
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003666:	461a      	mov	r2, r3
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	695b      	ldr	r3, [r3, #20]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	109b      	asrs	r3, r3, #2
 8003670:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 8003672:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	6a3a      	ldr	r2, [r7, #32]
 8003678:	4413      	add	r3, r2
 800367a:	61fb      	str	r3, [r7, #28]

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	685a      	ldr	r2, [r3, #4]
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	005b      	lsls	r3, r3, #1
 8003684:	429a      	cmp	r2, r3
 8003686:	d92d      	bls.n	80036e4 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE17_M_reallocate_mapEjb+0x90>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	1acb      	subs	r3, r1, r3
 8003694:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8003696:	0099      	lsls	r1, r3, #2
	                 + (__add_at_front ? __nodes_to_add : 0);
 8003698:	79fb      	ldrb	r3, [r7, #7]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d002      	beq.n	80036a4 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE17_M_reallocate_mapEjb+0x50>
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	e000      	b.n	80036a6 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE17_M_reallocate_mapEjb+0x52>
 80036a4:	2300      	movs	r3, #0
 80036a6:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80036a8:	4413      	add	r3, r2
 80036aa:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	695b      	ldr	r3, [r3, #20]
 80036b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d209      	bcs.n	80036ca <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE17_M_reallocate_mapEjb+0x76>
	    std::copy(this->_M_impl._M_start._M_node,
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 80036be:	3304      	adds	r3, #4
 80036c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036c2:	4619      	mov	r1, r3
 80036c4:	f000 f910 	bl	80038e8 <_ZSt4copyIPPSt10shared_ptrIN4tama5StageEES5_ET0_T_S7_S6_>
 80036c8:	e048      	b.n	800375c <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE17_M_reallocate_mapEjb+0x108>
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 80036d2:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 80036d4:	6a3b      	ldr	r3, [r7, #32]
 80036d6:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 80036d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036da:	4413      	add	r3, r2
 80036dc:	461a      	mov	r2, r3
 80036de:	f000 f91b 	bl	8003918 <_ZSt13copy_backwardIPPSt10shared_ptrIN4tama5StageEES5_ET0_T_S7_S6_>
 80036e2:	e03b      	b.n	800375c <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE17_M_reallocate_mapEjb+0x108>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	685c      	ldr	r4, [r3, #4]
	                             + std::max(this->_M_impl._M_map_size,
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	3304      	adds	r3, #4
 80036ec:	f107 0208 	add.w	r2, r7, #8
 80036f0:	4611      	mov	r1, r2
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7ff f8d5 	bl	80028a2 <_ZSt3maxIjERKT_S2_S2_>
 80036f8:	4603      	mov	r3, r0
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 80036fe:	3302      	adds	r3, #2
 8003700:	61bb      	str	r3, [r7, #24]
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	69b9      	ldr	r1, [r7, #24]
 8003706:	4618      	mov	r0, r3
 8003708:	f000 f888 	bl	800381c <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE15_M_allocate_mapEj>
 800370c:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 800370e:	69ba      	ldr	r2, [r7, #24]
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	085b      	lsrs	r3, r3, #1
 8003716:	009a      	lsls	r2, r3, #2
	                 + (__add_at_front ? __nodes_to_add : 0);
 8003718:	79fb      	ldrb	r3, [r7, #7]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d002      	beq.n	8003724 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE17_M_reallocate_mapEjb+0xd0>
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	e000      	b.n	8003726 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE17_M_reallocate_mapEjb+0xd2>
 8003724:	2300      	movs	r3, #0
 8003726:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8003728:	697a      	ldr	r2, [r7, #20]
 800372a:	4413      	add	r3, r2
 800372c:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8003736:	3304      	adds	r3, #4
 8003738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800373a:	4619      	mov	r1, r3
 800373c:	f000 f8d4 	bl	80038e8 <_ZSt4copyIPPSt10shared_ptrIN4tama5StageEES5_ET0_T_S7_S6_>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8003740:	68f8      	ldr	r0, [r7, #12]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6819      	ldr	r1, [r3, #0]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	461a      	mov	r2, r3
 800374c:	f7ff fe47 	bl	80033de <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE17_M_deallocate_mapEPPS3_j>

	  this->_M_impl._M_map = __new_map;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	697a      	ldr	r2, [r7, #20]
 8003754:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	69ba      	ldr	r2, [r7, #24]
 800375a:	605a      	str	r2, [r3, #4]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	3308      	adds	r3, #8
 8003760:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003762:	4618      	mov	r0, r3
 8003764:	f7ff fe9f 	bl	80034a6 <_ZNSt15_Deque_iteratorISt10shared_ptrIN4tama5StageEERS3_PS3_E11_M_set_nodeEPS5_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f103 0018 	add.w	r0, r3, #24
 800376e:	6a3b      	ldr	r3, [r7, #32]
 8003770:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003774:	3b01      	subs	r3, #1
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800377a:	4413      	add	r3, r2
 800377c:	4619      	mov	r1, r3
 800377e:	f7ff fe92 	bl	80034a6 <_ZNSt15_Deque_iteratorISt10shared_ptrIN4tama5StageEERS3_PS3_E11_M_set_nodeEPS5_>
    }
 8003782:	bf00      	nop
 8003784:	372c      	adds	r7, #44	; 0x2c
 8003786:	46bd      	mov	sp, r7
 8003788:	bd90      	pop	{r4, r7, pc}

0800378a <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama5StageEEEE8allocateERS4_j>:
      allocate(allocator_type& __a, size_type __n)
 800378a:	b580      	push	{r7, lr}
 800378c:	b082      	sub	sp, #8
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
 8003792:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8003794:	2200      	movs	r2, #0
 8003796:	6839      	ldr	r1, [r7, #0]
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f000 f8d5 	bl	8003948 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama5StageEEE8allocateEjPKv>
 800379e:	4603      	mov	r3, r0
 80037a0:	4618      	mov	r0, r3
 80037a2:	3708      	adds	r7, #8
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <_ZNSt15_Deque_iteratorISt10shared_ptrIN4tama5StageEERS3_PS3_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 80037a8:	b580      	push	{r7, lr}
 80037aa:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 80037ac:	2008      	movs	r0, #8
 80037ae:	f7ff fa41 	bl	8002c34 <_ZSt16__deque_buf_sizej>
 80037b2:	4603      	mov	r3, r0
 80037b4:	4618      	mov	r0, r3
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama5StageEEEE10deallocateERS4_PS3_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	60b9      	str	r1, [r7, #8]
 80037c2:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	68b9      	ldr	r1, [r7, #8]
 80037c8:	68f8      	ldr	r0, [r7, #12]
 80037ca:	f000 f8db 	bl	8003984 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama5StageEEE10deallocateEPS4_j>
 80037ce:	bf00      	nop
 80037d0:	3710      	adds	r7, #16
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <_ZNSaISt10shared_ptrIN4tama5StageEEEC1Ev>:
      allocator() throw() { }
 80037d6:	b580      	push	{r7, lr}
 80037d8:	b082      	sub	sp, #8
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f000 f8dd 	bl	800399e <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama5StageEEEC1Ev>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4618      	mov	r0, r3
 80037e8:	3708      	adds	r7, #8
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}

080037ee <_ZNSt15_Deque_iteratorISt10shared_ptrIN4tama5StageEERS3_PS3_EC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 80037ee:	b480      	push	{r7}
 80037f0:	b083      	sub	sp, #12
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	601a      	str	r2, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	605a      	str	r2, [r3, #4]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	609a      	str	r2, [r3, #8]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	60da      	str	r2, [r3, #12]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4618      	mov	r0, r3
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 800381c:	b590      	push	{r4, r7, lr}
 800381e:	b085      	sub	sp, #20
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8003826:	f107 030c 	add.w	r3, r7, #12
 800382a:	6879      	ldr	r1, [r7, #4]
 800382c:	4618      	mov	r0, r3
 800382e:	f7ff fee5 	bl	80035fc <_ZNKSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8003832:	f107 030c 	add.w	r3, r7, #12
 8003836:	6839      	ldr	r1, [r7, #0]
 8003838:	4618      	mov	r0, r3
 800383a:	f000 f8bb 	bl	80039b4 <_ZNSt16allocator_traitsISaIPSt10shared_ptrIN4tama5StageEEEE8allocateERS5_j>
 800383e:	4604      	mov	r4, r0
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8003840:	f107 030c 	add.w	r3, r7, #12
 8003844:	4618      	mov	r0, r3
 8003846:	f7ff feea 	bl	800361e <_ZNSaIPSt10shared_ptrIN4tama5StageEEED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 800384a:	4623      	mov	r3, r4
      }
 800384c:	4618      	mov	r0, r3
 800384e:	3714      	adds	r7, #20
 8003850:	46bd      	mov	sp, r7
 8003852:	bd90      	pop	{r4, r7, pc}

08003854 <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE15_M_create_nodesEPPS3_S7_>:
    _Deque_base<_Tp, _Alloc>::
 8003854:	b580      	push	{r7, lr}
 8003856:	b086      	sub	sp, #24
 8003858:	af00      	add	r7, sp, #0
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	60b9      	str	r1, [r7, #8]
 800385e:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	617b      	str	r3, [r7, #20]
 8003864:	697a      	ldr	r2, [r7, #20]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	429a      	cmp	r2, r3
 800386a:	d209      	bcs.n	8003880 <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE15_M_create_nodesEPPS3_S7_+0x2c>
	    *__cur = this->_M_allocate_node();
 800386c:	68f8      	ldr	r0, [r7, #12]
 800386e:	f7ff fe08 	bl	8003482 <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE16_M_allocate_nodeEv>
 8003872:	4602      	mov	r2, r0
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	3304      	adds	r3, #4
 800387c:	617b      	str	r3, [r7, #20]
 800387e:	e7f1      	b.n	8003864 <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE15_M_create_nodesEPPS3_S7_+0x10>
    }
 8003880:	bf00      	nop
 8003882:	3718      	adds	r7, #24
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <_ZNKSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4618      	mov	r0, r3
 8003894:	370c      	adds	r7, #12
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr

0800389e <_ZNSaIPSt10shared_ptrIN4tama5StageEEEC1IS2_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) throw() { }
 800389e:	b580      	push	{r7, lr}
 80038a0:	b082      	sub	sp, #8
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
 80038a6:	6039      	str	r1, [r7, #0]
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f000 f892 	bl	80039d2 <_ZN9__gnu_cxx13new_allocatorIPSt10shared_ptrIN4tama5StageEEEC1Ev>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4618      	mov	r0, r3
 80038b2:	3708      	adds	r7, #8
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <_ZN9__gnu_cxx13new_allocatorIPSt10shared_ptrIN4tama5StageEEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4618      	mov	r0, r3
 80038c4:	370c      	adds	r7, #12
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr

080038ce <_ZN9__gnu_cxx13new_allocatorIPSt10shared_ptrIN4tama5StageEEE10deallocateEPS5_j>:
      deallocate(pointer __p, size_type)
 80038ce:	b580      	push	{r7, lr}
 80038d0:	b084      	sub	sp, #16
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	60f8      	str	r0, [r7, #12]
 80038d6:	60b9      	str	r1, [r7, #8]
 80038d8:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 80038da:	68b8      	ldr	r0, [r7, #8]
 80038dc:	f01c f808 	bl	801f8f0 <_ZdlPv>
      }
 80038e0:	bf00      	nop
 80038e2:	3710      	adds	r7, #16
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <_ZSt4copyIPPSt10shared_ptrIN4tama5StageEES5_ET0_T_S7_S6_>:
    copy(_II __first, _II __last, _OI __result)
 80038e8:	b590      	push	{r4, r7, lr}
 80038ea:	b085      	sub	sp, #20
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 80038f4:	68f8      	ldr	r0, [r7, #12]
 80038f6:	f000 f877 	bl	80039e8 <_ZSt12__miter_baseIPPSt10shared_ptrIN4tama5StageEEET_S6_>
 80038fa:	4604      	mov	r4, r0
 80038fc:	68b8      	ldr	r0, [r7, #8]
 80038fe:	f000 f873 	bl	80039e8 <_ZSt12__miter_baseIPPSt10shared_ptrIN4tama5StageEEET_S6_>
 8003902:	4603      	mov	r3, r0
	       __result));
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	4619      	mov	r1, r3
 8003908:	4620      	mov	r0, r4
 800390a:	f000 f878 	bl	80039fe <_ZSt14__copy_move_a2ILb0EPPSt10shared_ptrIN4tama5StageEES5_ET1_T0_S7_S6_>
 800390e:	4603      	mov	r3, r0
    }
 8003910:	4618      	mov	r0, r3
 8003912:	3714      	adds	r7, #20
 8003914:	46bd      	mov	sp, r7
 8003916:	bd90      	pop	{r4, r7, pc}

08003918 <_ZSt13copy_backwardIPPSt10shared_ptrIN4tama5StageEES5_ET0_T_S7_S6_>:
   *  Result may not be in the range (first,last].  Use copy instead.  Note
   *  that the start of the output range may overlap [first,last).
  */
  template<typename _BI1, typename _BI2>
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8003918:	b590      	push	{r4, r7, lr}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	607a      	str	r2, [r7, #4]
	    typename iterator_traits<_BI1>::value_type,
	    typename iterator_traits<_BI2>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      return (std::__copy_move_backward_a2<__is_move_iterator<_BI1>::__value>
	      (std::__miter_base(__first), std::__miter_base(__last),
 8003924:	68f8      	ldr	r0, [r7, #12]
 8003926:	f000 f85f 	bl	80039e8 <_ZSt12__miter_baseIPPSt10shared_ptrIN4tama5StageEEET_S6_>
 800392a:	4604      	mov	r4, r0
 800392c:	68b8      	ldr	r0, [r7, #8]
 800392e:	f000 f85b 	bl	80039e8 <_ZSt12__miter_baseIPPSt10shared_ptrIN4tama5StageEEET_S6_>
 8003932:	4603      	mov	r3, r0
	       __result));
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	4619      	mov	r1, r3
 8003938:	4620      	mov	r0, r4
 800393a:	f000 f87c 	bl	8003a36 <_ZSt23__copy_move_backward_a2ILb0EPPSt10shared_ptrIN4tama5StageEES5_ET1_T0_S7_S6_>
 800393e:	4603      	mov	r3, r0
    }
 8003940:	4618      	mov	r0, r3
 8003942:	3714      	adds	r7, #20
 8003944:	46bd      	mov	sp, r7
 8003946:	bd90      	pop	{r4, r7, pc}

08003948 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama5StageEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8003954:	68f8      	ldr	r0, [r7, #12]
 8003956:	f000 f88a 	bl	8003a6e <_ZNK9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama5StageEEE8max_sizeEv>
 800395a:	4602      	mov	r2, r0
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	4293      	cmp	r3, r2
 8003960:	bf8c      	ite	hi
 8003962:	2301      	movhi	r3, #1
 8003964:	2300      	movls	r3, #0
 8003966:	b2db      	uxtb	r3, r3
 8003968:	2b00      	cmp	r3, #0
 800396a:	d001      	beq.n	8003970 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama5StageEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800396c:	f01b ffd5 	bl	801f91a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	00db      	lsls	r3, r3, #3
 8003974:	4618      	mov	r0, r3
 8003976:	f01b ffa2 	bl	801f8be <_Znwj>
 800397a:	4603      	mov	r3, r0
      }
 800397c:	4618      	mov	r0, r3
 800397e:	3710      	adds	r7, #16
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama5StageEEE10deallocateEPS4_j>:
      deallocate(pointer __p, size_type)
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	60b9      	str	r1, [r7, #8]
 800398e:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8003990:	68b8      	ldr	r0, [r7, #8]
 8003992:	f01b ffad 	bl	801f8f0 <_ZdlPv>
      }
 8003996:	bf00      	nop
 8003998:	3710      	adds	r7, #16
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}

0800399e <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama5StageEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800399e:	b480      	push	{r7}
 80039a0:	b083      	sub	sp, #12
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4618      	mov	r0, r3
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <_ZNSt16allocator_traitsISaIPSt10shared_ptrIN4tama5StageEEEE8allocateERS5_j>:
      allocate(allocator_type& __a, size_type __n)
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80039be:	2200      	movs	r2, #0
 80039c0:	6839      	ldr	r1, [r7, #0]
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 f85f 	bl	8003a86 <_ZN9__gnu_cxx13new_allocatorIPSt10shared_ptrIN4tama5StageEEE8allocateEjPKv>
 80039c8:	4603      	mov	r3, r0
 80039ca:	4618      	mov	r0, r3
 80039cc:	3708      	adds	r7, #8
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <_ZN9__gnu_cxx13new_allocatorIPSt10shared_ptrIN4tama5StageEEEC1Ev>:
 80039d2:	b480      	push	{r7}
 80039d4:	b083      	sub	sp, #12
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4618      	mov	r0, r3
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <_ZSt12__miter_baseIPPSt10shared_ptrIN4tama5StageEEET_S6_>:
    __miter_base(_Iterator __it)
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
    { return __it; }
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4618      	mov	r0, r3
 80039f4:	370c      	adds	r7, #12
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr

080039fe <_ZSt14__copy_move_a2ILb0EPPSt10shared_ptrIN4tama5StageEES5_ET1_T0_S7_S6_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80039fe:	b5b0      	push	{r4, r5, r7, lr}
 8003a00:	b084      	sub	sp, #16
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	60f8      	str	r0, [r7, #12]
 8003a06:	60b9      	str	r1, [r7, #8]
 8003a08:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 8003a0a:	68f8      	ldr	r0, [r7, #12]
 8003a0c:	f000 f859 	bl	8003ac2 <_ZSt12__niter_baseIPPSt10shared_ptrIN4tama5StageEEET_S6_>
 8003a10:	4604      	mov	r4, r0
 8003a12:	68b8      	ldr	r0, [r7, #8]
 8003a14:	f000 f855 	bl	8003ac2 <_ZSt12__niter_baseIPPSt10shared_ptrIN4tama5StageEEET_S6_>
 8003a18:	4605      	mov	r5, r0
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f000 f851 	bl	8003ac2 <_ZSt12__niter_baseIPPSt10shared_ptrIN4tama5StageEEET_S6_>
 8003a20:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 8003a22:	461a      	mov	r2, r3
 8003a24:	4629      	mov	r1, r5
 8003a26:	4620      	mov	r0, r4
 8003a28:	f000 f856 	bl	8003ad8 <_ZSt13__copy_move_aILb0EPPSt10shared_ptrIN4tama5StageEES5_ET1_T0_S7_S6_>
 8003a2c:	4603      	mov	r3, r0
    }
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3710      	adds	r7, #16
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bdb0      	pop	{r4, r5, r7, pc}

08003a36 <_ZSt23__copy_move_backward_a2ILb0EPPSt10shared_ptrIN4tama5StageEES5_ET1_T0_S7_S6_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8003a36:	b5b0      	push	{r4, r5, r7, lr}
 8003a38:	b084      	sub	sp, #16
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	60f8      	str	r0, [r7, #12]
 8003a3e:	60b9      	str	r1, [r7, #8]
 8003a40:	607a      	str	r2, [r7, #4]
		  (std::__niter_base(__first), std::__niter_base(__last),
 8003a42:	68f8      	ldr	r0, [r7, #12]
 8003a44:	f000 f83d 	bl	8003ac2 <_ZSt12__niter_baseIPPSt10shared_ptrIN4tama5StageEEET_S6_>
 8003a48:	4604      	mov	r4, r0
 8003a4a:	68b8      	ldr	r0, [r7, #8]
 8003a4c:	f000 f839 	bl	8003ac2 <_ZSt12__niter_baseIPPSt10shared_ptrIN4tama5StageEEET_S6_>
 8003a50:	4605      	mov	r5, r0
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 f835 	bl	8003ac2 <_ZSt12__niter_baseIPPSt10shared_ptrIN4tama5StageEEET_S6_>
 8003a58:	4603      	mov	r3, r0
		   std::__niter_base(__result)));
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	4629      	mov	r1, r5
 8003a5e:	4620      	mov	r0, r4
 8003a60:	f000 f84c 	bl	8003afc <_ZSt22__copy_move_backward_aILb0EPPSt10shared_ptrIN4tama5StageEES5_ET1_T0_S7_S6_>
 8003a64:	4603      	mov	r3, r0
    }
 8003a66:	4618      	mov	r0, r3
 8003a68:	3710      	adds	r7, #16
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bdb0      	pop	{r4, r5, r7, pc}

08003a6e <_ZNK9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama5StageEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8003a6e:	b480      	push	{r7}
 8003a70:	b083      	sub	sp, #12
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8003a76:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	370c      	adds	r7, #12
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr

08003a86 <_ZN9__gnu_cxx13new_allocatorIPSt10shared_ptrIN4tama5StageEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8003a86:	b580      	push	{r7, lr}
 8003a88:	b084      	sub	sp, #16
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	60f8      	str	r0, [r7, #12]
 8003a8e:	60b9      	str	r1, [r7, #8]
 8003a90:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8003a92:	68f8      	ldr	r0, [r7, #12]
 8003a94:	f000 f844 	bl	8003b20 <_ZNK9__gnu_cxx13new_allocatorIPSt10shared_ptrIN4tama5StageEEE8max_sizeEv>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	bf8c      	ite	hi
 8003aa0:	2301      	movhi	r3, #1
 8003aa2:	2300      	movls	r3, #0
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d001      	beq.n	8003aae <_ZN9__gnu_cxx13new_allocatorIPSt10shared_ptrIN4tama5StageEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8003aaa:	f01b ff36 	bl	801f91a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f01b ff03 	bl	801f8be <_Znwj>
 8003ab8:	4603      	mov	r3, r0
      }
 8003aba:	4618      	mov	r0, r3
 8003abc:	3710      	adds	r7, #16
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}

08003ac2 <_ZSt12__niter_baseIPPSt10shared_ptrIN4tama5StageEEET_S6_>:
    __niter_base(_Iterator __it)
 8003ac2:	b480      	push	{r7}
 8003ac4:	b083      	sub	sp, #12
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4618      	mov	r0, r3
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <_ZSt13__copy_move_aILb0EPPSt10shared_ptrIN4tama5StageEES5_ET1_T0_S7_S6_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b086      	sub	sp, #24
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	68b9      	ldr	r1, [r7, #8]
 8003aec:	68f8      	ldr	r0, [r7, #12]
 8003aee:	f000 f823 	bl	8003b38 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPSt10shared_ptrIN4tama5StageEEEEPT_PKS8_SB_S9_>
 8003af2:	4603      	mov	r3, r0
    }
 8003af4:	4618      	mov	r0, r3
 8003af6:	3718      	adds	r7, #24
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <_ZSt22__copy_move_backward_aILb0EPPSt10shared_ptrIN4tama5StageEES5_ET1_T0_S7_S6_>:
    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b086      	sub	sp, #24
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueType1)
 8003b08:	2301      	movs	r3, #1
 8003b0a:	75fb      	strb	r3, [r7, #23]
								 __result);
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	68b9      	ldr	r1, [r7, #8]
 8003b10:	68f8      	ldr	r0, [r7, #12]
 8003b12:	f000 f82e 	bl	8003b72 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPSt10shared_ptrIN4tama5StageEEEEPT_PKS8_SB_S9_>
 8003b16:	4603      	mov	r3, r0
    }
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3718      	adds	r7, #24
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <_ZNK9__gnu_cxx13new_allocatorIPSt10shared_ptrIN4tama5StageEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8003b28:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPSt10shared_ptrIN4tama5StageEEEEPT_PKS8_SB_S9_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b086      	sub	sp, #24
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8003b44:	68ba      	ldr	r2, [r7, #8]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	109b      	asrs	r3, r3, #2
 8003b4c:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d006      	beq.n	8003b62 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPSt10shared_ptrIN4tama5StageEEEEPT_PKS8_SB_S9_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	461a      	mov	r2, r3
 8003b5a:	68f9      	ldr	r1, [r7, #12]
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f01c fa6c 	bl	802003a <memmove>
	  return __result + _Num;
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	4413      	add	r3, r2
	}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3718      	adds	r7, #24
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}

08003b72 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPSt10shared_ptrIN4tama5StageEEEEPT_PKS8_SB_S9_>:
        __copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8003b72:	b580      	push	{r7, lr}
 8003b74:	b086      	sub	sp, #24
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	60f8      	str	r0, [r7, #12]
 8003b7a:	60b9      	str	r1, [r7, #8]
 8003b7c:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8003b7e:	68ba      	ldr	r2, [r7, #8]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	109b      	asrs	r3, r3, #2
 8003b86:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00a      	beq.n	8003ba4 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPSt10shared_ptrIN4tama5StageEEEEPT_PKS8_SB_S9_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	425b      	negs	r3, r3
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	18d0      	adds	r0, r2, r3
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	68f9      	ldr	r1, [r7, #12]
 8003ba0:	f01c fa4b 	bl	802003a <memmove>
	  return __result - _Num;
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	425b      	negs	r3, r3
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	4413      	add	r3, r2
	}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3718      	adds	r7, #24
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b082      	sub	sp, #8
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
 8003bbe:	6039      	str	r1, [r7, #0]
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	601a      	str	r2, [r3, #0]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	1d1a      	adds	r2, r3, #4
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	3304      	adds	r3, #4
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	4610      	mov	r0, r2
 8003bd4:	f7ff fa86 	bl	80030e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3708      	adds	r7, #8
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_ptr() = default;
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b082      	sub	sp, #8
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	3304      	adds	r3, #4
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7ff fa8f 	bl	8003112 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3708      	adds	r7, #8
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <_ZNSt10shared_ptrIN4tama5SceneEEC1ERKS2_>:
 8003bfe:	b580      	push	{r7, lr}
 8003c00:	b082      	sub	sp, #8
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
 8003c06:	6039      	str	r1, [r7, #0]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	683a      	ldr	r2, [r7, #0]
 8003c0c:	4611      	mov	r1, r2
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7ff ffd1 	bl	8003bb6 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4618      	mov	r0, r3
 8003c18:	3708      	adds	r7, #8
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <_ZNSt10shared_ptrIN4tama5SceneEED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 8003c1e:	b580      	push	{r7, lr}
 8003c20:	b082      	sub	sp, #8
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f7ff ffda 	bl	8003be2 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4618      	mov	r0, r3
 8003c32:	3708      	adds	r7, #8
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <_ZN4tama5Stage8getSceneEv>:
//

#include "Stage.h"

std::shared_ptr<tama::Scene> tama::Stage::getScene()
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
    return scene;
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	3304      	adds	r3, #4
 8003c46:	4619      	mov	r1, r3
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f7ff ffd8 	bl	8003bfe <_ZNSt10shared_ptrIN4tama5SceneEEC1ERKS2_>
}
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	3708      	adds	r7, #8
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
	...

08003c58 <_ZN4tama7OnInputC1Ev>:

#include "../../input/button.h"

namespace tama
{
    class OnInput
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	4a04      	ldr	r2, [pc, #16]	; (8003c74 <_ZN4tama7OnInputC1Ev+0x1c>)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	601a      	str	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4618      	mov	r0, r3
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr
 8003c74:	08023630 	.word	0x08023630

08003c78 <_ZNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	601a      	str	r2, [r3, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	1d1a      	adds	r2, r3, #4
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	3304      	adds	r3, #4
 8003c92:	4619      	mov	r1, r3
 8003c94:	4610      	mov	r0, r2
 8003c96:	f7ff fa25 	bl	80030e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3708      	adds	r7, #8
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <_ZNSt10shared_ptrIN4tama7ContextEEC1ERKS2_>:
      shared_ptr(const shared_ptr&) noexcept = default;
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	683a      	ldr	r2, [r7, #0]
 8003cb2:	4611      	mov	r1, r2
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f7ff ffdf 	bl	8003c78 <_ZNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3708      	adds	r7, #8
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <_ZNSt12__shared_ptrIN4tama5InputELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_ptr() = default;
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	3304      	adds	r3, #4
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f7ff fa1e 	bl	8003112 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3708      	adds	r7, #8
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <_ZNSt10shared_ptrIN4tama5InputEED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7ff ffea 	bl	8003cc4 <_ZNSt12__shared_ptrIN4tama5InputELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3708      	adds	r7, #8
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
	...

08003cfc <_ZN4tama5StageC1ERKSt10shared_ptrINS_7ContextEE>:

tama::Stage::Stage(const std::shared_ptr<Context> &context) : context(context)
 8003cfc:	b590      	push	{r4, r7, lr}
 8003cfe:	b087      	sub	sp, #28
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f7ff ffa5 	bl	8003c58 <_ZN4tama7OnInputC1Ev>
 8003d0e:	4a1f      	ldr	r2, [pc, #124]	; (8003d8c <_ZN4tama5StageC1ERKSt10shared_ptrINS_7ContextEE+0x90>)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	601a      	str	r2, [r3, #0]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	3304      	adds	r3, #4
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f000 f84a 	bl	8003db2 <_ZNSt10shared_ptrIN4tama5SceneEEC1Ev>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	330c      	adds	r3, #12
 8003d22:	6839      	ldr	r1, [r7, #0]
 8003d24:	4618      	mov	r0, r3
 8003d26:	f7ff ffbd 	bl	8003ca4 <_ZNSt10shared_ptrIN4tama7ContextEEC1ERKS2_>
{
    context->getInput()->addListener(this);
 8003d2a:	6838      	ldr	r0, [r7, #0]
 8003d2c:	f000 f84e 	bl	8003dcc <_ZNKSt19__shared_ptr_accessIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8003d30:	4602      	mov	r2, r0
 8003d32:	f107 0308 	add.w	r3, r7, #8
 8003d36:	4611      	mov	r1, r2
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f7ff f96a 	bl	8003012 <_ZN4tama7Context8getInputEv>
 8003d3e:	f107 0308 	add.w	r3, r7, #8
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7ff f9a9 	bl	800309a <_ZNKSt19__shared_ptr_accessIN4tama5InputELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	4610      	mov	r0, r2
 8003d50:	f7fe fa31 	bl	80021b6 <_ZN4tama5Input11addListenerEPNS_7OnInputE>
 8003d54:	f107 0308 	add.w	r3, r7, #8
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f7ff ffc1 	bl	8003ce0 <_ZNSt10shared_ptrIN4tama5InputEED1Ev>
    scene = std::make_shared<Scene>();
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	1d1c      	adds	r4, r3, #4
 8003d62:	f107 0310 	add.w	r3, r7, #16
 8003d66:	4618      	mov	r0, r3
 8003d68:	f000 f83c 	bl	8003de4 <_ZSt11make_sharedIN4tama5SceneEJEESt10shared_ptrIT_EDpOT0_>
 8003d6c:	f107 0310 	add.w	r3, r7, #16
 8003d70:	4619      	mov	r1, r3
 8003d72:	4620      	mov	r0, r4
 8003d74:	f000 f85a 	bl	8003e2c <_ZNSt10shared_ptrIN4tama5SceneEEaSEOS2_>
 8003d78:	f107 0310 	add.w	r3, r7, #16
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f7ff ff4e 	bl	8003c1e <_ZNSt10shared_ptrIN4tama5SceneEED1Ev>
}
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4618      	mov	r0, r3
 8003d86:	371c      	adds	r7, #28
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd90      	pop	{r4, r7, pc}
 8003d8c:	0802361c 	.word	0x0802361c

08003d90 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
      { delete this; }
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d005      	beq.n	8003daa <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x1a>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	3304      	adds	r3, #4
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	4798      	blx	r3
 8003daa:	bf00      	nop
 8003dac:	3708      	adds	r7, #8
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <_ZNSt10shared_ptrIN4tama5SceneEEC1Ev>:
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b082      	sub	sp, #8
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f000 f869 	bl	8003e94 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3708      	adds	r7, #8
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <_ZNKSt19__shared_ptr_accessIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
	return _M_get();
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f000 f86e 	bl	8003eb6 <_ZNKSt19__shared_ptr_accessIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 8003dda:	4603      	mov	r3, r0
      }
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3708      	adds	r7, #8
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <_ZSt11make_sharedIN4tama5SceneEJEESt10shared_ptrIT_EDpOT0_>:
   *  @throw  std::bad_alloc, or an exception thrown from the
   *          constructor of @a _Tp.
   */
  template<typename _Tp, typename... _Args>
    inline shared_ptr<_Tp>
    make_shared(_Args&&... __args)
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
    {
      typedef typename std::remove_const<_Tp>::type _Tp_nc;
      return std::allocate_shared<_Tp>(std::allocator<_Tp_nc>(),
				       std::forward<_Args>(__args)...);
 8003dec:	f107 030c 	add.w	r3, r7, #12
 8003df0:	4618      	mov	r0, r3
 8003df2:	f000 f86c 	bl	8003ece <_ZNSaIN4tama5SceneEEC1Ev>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f107 020c 	add.w	r2, r7, #12
 8003dfc:	4611      	mov	r1, r2
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f000 f87d 	bl	8003efe <_ZSt15allocate_sharedIN4tama5SceneESaIS1_EJEESt10shared_ptrIT_ERKT0_DpOT1_>
 8003e04:	f107 030c 	add.w	r3, r7, #12
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f000 f86c 	bl	8003ee6 <_ZNSaIN4tama5SceneEED1Ev>
    }
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	3710      	adds	r7, #16
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}

08003e16 <_ZSt4moveIRSt10shared_ptrIN4tama5SceneEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8003e16:	b480      	push	{r7}
 8003e18:	b083      	sub	sp, #12
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4618      	mov	r0, r3
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <_ZNSt10shared_ptrIN4tama5SceneEEaSEOS2_>:
      operator=(shared_ptr&& __r) noexcept
 8003e2c:	b590      	push	{r4, r7, lr}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
 8003e36:	687c      	ldr	r4, [r7, #4]
 8003e38:	6838      	ldr	r0, [r7, #0]
 8003e3a:	f7ff ffec 	bl	8003e16 <_ZSt4moveIRSt10shared_ptrIN4tama5SceneEEEONSt16remove_referenceIT_E4typeEOS6_>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	4619      	mov	r1, r3
 8003e42:	4620      	mov	r0, r4
 8003e44:	f000 f874 	bl	8003f30 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_>
	return *this;
 8003e48:	687b      	ldr	r3, [r7, #4]
      }
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	370c      	adds	r7, #12
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd90      	pop	{r4, r7, pc}
	...

08003e54 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_base() noexcept
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
      { }
 8003e5c:	4a04      	ldr	r2, [pc, #16]	; (8003e70 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1c>)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	601a      	str	r2, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4618      	mov	r0, r3
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr
 8003e70:	0802363c 	.word	0x0802363c

08003e74 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_base() noexcept
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
      { }
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f7ff ffe9 	bl	8003e54 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8003e82:	210c      	movs	r1, #12
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f01b fd18 	bl	801f8ba <_ZdlPvj>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3708      	adds	r7, #8
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_ptr() noexcept
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
      : _M_ptr(0), _M_refcount()
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	601a      	str	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	3304      	adds	r3, #4
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f000 f861 	bl	8003f6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
      { }
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3708      	adds	r7, #8
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}

08003eb6 <_ZNKSt19__shared_ptr_accessIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 8003eb6:	b580      	push	{r7, lr}
 8003eb8:	b082      	sub	sp, #8
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 f863 	bl	8003f8a <_ZNKSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE3getEv>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3708      	adds	r7, #8
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}

08003ece <_ZNSaIN4tama5SceneEEC1Ev>:
      allocator() throw() { }
 8003ece:	b580      	push	{r7, lr}
 8003ed0:	b082      	sub	sp, #8
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 f863 	bl	8003fa2 <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEEC1Ev>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3708      	adds	r7, #8
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}

08003ee6 <_ZNSaIN4tama5SceneEED1Ev>:
      ~allocator() throw() { }
 8003ee6:	b580      	push	{r7, lr}
 8003ee8:	b082      	sub	sp, #8
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 f862 	bl	8003fb8 <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEED1Ev>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3708      	adds	r7, #8
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}

08003efe <_ZSt15allocate_sharedIN4tama5SceneESaIS1_EJEESt10shared_ptrIT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 8003efe:	b580      	push	{r7, lr}
 8003f00:	b084      	sub	sp, #16
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
 8003f06:	6039      	str	r1, [r7, #0]
			     std::forward<_Args>(__args)...);
 8003f08:	683a      	ldr	r2, [r7, #0]
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f000 f85e 	bl	8003fce <_ZNSt10shared_ptrIN4tama5SceneEEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>
    }
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	3710      	adds	r7, #16
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}

08003f1a <_ZSt4moveIRSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 8003f1a:	b480      	push	{r7}
 8003f1c:	b083      	sub	sp, #12
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4618      	mov	r0, r3
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_>:
      operator=(__shared_ptr&& __r) noexcept
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
	__shared_ptr(std::move(__r)).swap(*this);
 8003f3a:	6838      	ldr	r0, [r7, #0]
 8003f3c:	f7ff ffed 	bl	8003f1a <_ZSt4moveIRSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS8_>
 8003f40:	4602      	mov	r2, r0
 8003f42:	f107 0308 	add.w	r3, r7, #8
 8003f46:	4611      	mov	r1, r2
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f000 f851 	bl	8003ff0 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EEC1EOS4_>
 8003f4e:	f107 0308 	add.w	r3, r7, #8
 8003f52:	6879      	ldr	r1, [r7, #4]
 8003f54:	4618      	mov	r0, r3
 8003f56:	f000 f869 	bl	800402c <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE4swapERS4_>
 8003f5a:	f107 0308 	add.w	r3, r7, #8
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f7ff fe3f 	bl	8003be2 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EED1Ev>
	return *this;
 8003f64:	687b      	ldr	r3, [r7, #4]
      }
 8003f66:	4618      	mov	r0, r3
 8003f68:	3710      	adds	r7, #16
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}

08003f6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_count() noexcept : _M_pi(0)
 8003f6e:	b480      	push	{r7}
 8003f70:	b083      	sub	sp, #12
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	601a      	str	r2, [r3, #0]
      { }
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	370c      	adds	r7, #12
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr

08003f8a <_ZNKSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 8003f8a:	b480      	push	{r7}
 8003f8c:	b083      	sub	sp, #12
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4618      	mov	r0, r3
 8003f98:	370c      	adds	r7, #12
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr

08003fa2 <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003fa2:	b480      	push	{r7}
 8003fa4:	b083      	sub	sp, #12
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4618      	mov	r0, r3
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	370c      	adds	r7, #12
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr

08003fce <_ZNSt10shared_ptrIN4tama5SceneEEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8003fce:	b590      	push	{r4, r7, lr}
 8003fd0:	b085      	sub	sp, #20
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	60f8      	str	r0, [r7, #12]
 8003fd6:	7239      	strb	r1, [r7, #8]
 8003fd8:	607a      	str	r2, [r7, #4]
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	4621      	mov	r1, r4
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f000 f857 	bl	8004094 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>
	{ }
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3714      	adds	r7, #20
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd90      	pop	{r4, r7, pc}

08003ff0 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EEC1EOS4_>:
      __shared_ptr(__shared_ptr&& __r) noexcept
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b082      	sub	sp, #8
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
      : _M_ptr(__r._M_ptr), _M_refcount()
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	601a      	str	r2, [r3, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	3304      	adds	r3, #4
 8004006:	4618      	mov	r0, r3
 8004008:	f7ff ffb1 	bl	8003f6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	_M_refcount._M_swap(__r._M_refcount);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	1d1a      	adds	r2, r3, #4
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	3304      	adds	r3, #4
 8004014:	4619      	mov	r1, r3
 8004016:	4610      	mov	r0, r2
 8004018:	f000 f8b2 	bl	8004180 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	__r._M_ptr = 0;
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	2200      	movs	r2, #0
 8004020:	601a      	str	r2, [r3, #0]
      }
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4618      	mov	r0, r3
 8004026:	3708      	adds	r7, #8
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE4swapERS4_>:
      long
      use_count() const noexcept
      { return _M_refcount._M_get_use_count(); }

      void
      swap(__shared_ptr<_Tp, _Lp>& __other) noexcept
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
      {
	std::swap(_M_ptr, __other._M_ptr);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	683a      	ldr	r2, [r7, #0]
 800403a:	4611      	mov	r1, r2
 800403c:	4618      	mov	r0, r3
 800403e:	f000 f8bf 	bl	80041c0 <_ZSt4swapIPN4tama5SceneEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS7_ESt18is_move_assignableIS7_EEE5valueEvE4typeERS7_SH_>
	_M_refcount._M_swap(__other._M_refcount);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	1d1a      	adds	r2, r3, #4
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	3304      	adds	r3, #4
 800404a:	4619      	mov	r1, r3
 800404c:	4610      	mov	r0, r2
 800404e:	f000 f897 	bl	8004180 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
      }
 8004052:	bf00      	nop
 8004054:	3708      	adds	r7, #8
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}

0800405a <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>:
	  _M_ptr = static_cast<_Tp*>(__p);
	  _M_enable_shared_from_this_with(_M_ptr);
	}
#else
      template<typename _Alloc>
        struct _Deleter
 800405a:	b580      	push	{r7, lr}
 800405c:	b082      	sub	sp, #8
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4618      	mov	r0, r3
 8004066:	f7ff ff3e 	bl	8003ee6 <_ZNSaIN4tama5SceneEED1Ev>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4618      	mov	r0, r3
 800406e:	3708      	adds	r7, #8
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}

08004074 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>:
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	683a      	ldr	r2, [r7, #0]
 8004082:	4611      	mov	r1, r2
 8004084:	4618      	mov	r0, r3
 8004086:	f000 f8ba 	bl	80041fe <_ZNSaIN4tama5SceneEEC1ERKS1_>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4618      	mov	r0, r3
 800408e:	3708      	adds	r7, #8
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}

08004094 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
          }
          _Alloc _M_alloc;
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8004094:	b580      	push	{r7, lr}
 8004096:	b08c      	sub	sp, #48	; 0x30
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	7239      	strb	r1, [r7, #8]
 800409e:	607a      	str	r2, [r7, #4]
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2200      	movs	r2, #0
 80040a4:	601a      	str	r2, [r3, #0]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	3304      	adds	r3, #4
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7ff ff5f 	bl	8003f6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 80040b0:	f107 0320 	add.w	r3, r7, #32
 80040b4:	6879      	ldr	r1, [r7, #4]
 80040b6:	4618      	mov	r0, r3
 80040b8:	f000 f8a1 	bl	80041fe <_ZNSaIN4tama5SceneEEC1ERKS1_>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 80040bc:	f107 0318 	add.w	r3, r7, #24
 80040c0:	f107 0220 	add.w	r2, r7, #32
 80040c4:	4611      	mov	r1, r2
 80040c6:	4618      	mov	r0, r3
 80040c8:	f000 f8a7 	bl	800421a <_ZSt18__allocate_guardedISaIN4tama5SceneEEESt15__allocated_ptrIT_ERS4_>
	  auto __ptr = __guard.get();
 80040cc:	f107 0318 	add.w	r3, r7, #24
 80040d0:	4618      	mov	r0, r3
 80040d2:	f000 f8ca 	bl	800426a <_ZNSt15__allocated_ptrISaIN4tama5SceneEEE3getEv>
 80040d6:	62f8      	str	r0, [r7, #44]	; 0x2c
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
 80040d8:	f107 0320 	add.w	r3, r7, #32
 80040dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040de:	4618      	mov	r0, r3
 80040e0:	f000 f8d1 	bl	8004286 <_ZNSt16allocator_traitsISaIN4tama5SceneEEE9constructIS1_JEEEvRS2_PT_DpOT0_>
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
 80040e4:	f107 0318 	add.w	r3, r7, #24
 80040e8:	2100      	movs	r1, #0
 80040ea:	4618      	mov	r0, r3
 80040ec:	f000 f8d8 	bl	80042a0 <_ZNSt15__allocated_ptrISaIN4tama5SceneEEEaSEDn>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 80040f0:	f107 0220 	add.w	r2, r7, #32
 80040f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040f8:	4611      	mov	r1, r2
 80040fa:	4618      	mov	r0, r3
 80040fc:	f7ff ffba 	bl	8004074 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>
 8004100:	f107 0220 	add.w	r2, r7, #32
 8004104:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004108:	4611      	mov	r1, r2
 800410a:	4618      	mov	r0, r3
 800410c:	f000 f877 	bl	80041fe <_ZNSaIN4tama5SceneEEC1ERKS1_>
 8004110:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004114:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004118:	f107 0014 	add.w	r0, r7, #20
 800411c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800411e:	f000 f8f4 	bl	800430a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama5SceneENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
 8004122:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004126:	4618      	mov	r0, r3
 8004128:	f7ff fedd 	bl	8003ee6 <_ZNSaIN4tama5SceneEED1Ev>
 800412c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004130:	4618      	mov	r0, r3
 8004132:	f7ff ff92 	bl	800405a <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	  _M_refcount._M_swap(__count);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	3304      	adds	r3, #4
 800413a:	f107 0214 	add.w	r2, r7, #20
 800413e:	4611      	mov	r1, r2
 8004140:	4618      	mov	r0, r3
 8004142:	f000 f81d 	bl	8004180 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  _M_ptr = __ptr;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800414a:	601a      	str	r2, [r3, #0]
	  _M_enable_shared_from_this_with(_M_ptr);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4619      	mov	r1, r3
 8004152:	68f8      	ldr	r0, [r7, #12]
 8004154:	f000 f930 	bl	80043b8 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 8004158:	f107 0314 	add.w	r3, r7, #20
 800415c:	4618      	mov	r0, r3
 800415e:	f7fe ffd8 	bl	8003112 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 8004162:	f107 0318 	add.w	r3, r7, #24
 8004166:	4618      	mov	r0, r3
 8004168:	f000 f86a 	bl	8004240 <_ZNSt15__allocated_ptrISaIN4tama5SceneEEED1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 800416c:	f107 0320 	add.w	r3, r7, #32
 8004170:	4618      	mov	r0, r3
 8004172:	f7ff ff72 	bl	800405a <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	}
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	4618      	mov	r0, r3
 800417a:	3730      	adds	r7, #48	; 0x30
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>:
      _M_swap(__shared_count& __r) noexcept
 8004180:	b480      	push	{r7}
 8004182:	b085      	sub	sp, #20
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	60fb      	str	r3, [r7, #12]
	__r._M_pi = _M_pi;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	601a      	str	r2, [r3, #0]
	_M_pi = __tmp;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	68fa      	ldr	r2, [r7, #12]
 800419c:	601a      	str	r2, [r3, #0]
      }
 800419e:	bf00      	nop
 80041a0:	3714      	adds	r7, #20
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr

080041aa <_ZSt4moveIRPN4tama5SceneEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80041aa:	b480      	push	{r7}
 80041ac:	b083      	sub	sp, #12
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4618      	mov	r0, r3
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <_ZSt4swapIPN4tama5SceneEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS7_ESt18is_move_assignableIS7_EEE5valueEvE4typeERS7_SH_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f7ff ffed 	bl	80041aa <_ZSt4moveIRPN4tama5SceneEEONSt16remove_referenceIT_E4typeEOS5_>
 80041d0:	4603      	mov	r3, r0
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 80041d6:	6838      	ldr	r0, [r7, #0]
 80041d8:	f7ff ffe7 	bl	80041aa <_ZSt4moveIRPN4tama5SceneEEONSt16remove_referenceIT_E4typeEOS5_>
 80041dc:	4603      	mov	r3, r0
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80041e4:	f107 030c 	add.w	r3, r7, #12
 80041e8:	4618      	mov	r0, r3
 80041ea:	f7ff ffde 	bl	80041aa <_ZSt4moveIRPN4tama5SceneEEONSt16remove_referenceIT_E4typeEOS5_>
 80041ee:	4603      	mov	r3, r0
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	601a      	str	r2, [r3, #0]
    }
 80041f6:	bf00      	nop
 80041f8:	3710      	adds	r7, #16
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}

080041fe <_ZNSaIN4tama5SceneEEC1ERKS1_>:
      allocator(const allocator& __a) throw()
 80041fe:	b580      	push	{r7, lr}
 8004200:	b082      	sub	sp, #8
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
 8004206:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8004208:	6839      	ldr	r1, [r7, #0]
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 f8df 	bl	80043ce <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEEC1ERKS3_>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	4618      	mov	r0, r3
 8004214:	3708      	adds	r7, #8
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}

0800421a <_ZSt18__allocate_guardedISaIN4tama5SceneEEESt15__allocated_ptrIT_ERS4_>:
    };

  /// Allocate space for a single object using __a
  template<typename _Alloc>
    __allocated_ptr<_Alloc>
    __allocate_guarded(_Alloc& __a)
 800421a:	b580      	push	{r7, lr}
 800421c:	b082      	sub	sp, #8
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
 8004222:	6039      	str	r1, [r7, #0]
    {
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 8004224:	2101      	movs	r1, #1
 8004226:	6838      	ldr	r0, [r7, #0]
 8004228:	f000 f8dd 	bl	80043e6 <_ZNSt16allocator_traitsISaIN4tama5SceneEEE8allocateERS2_j>
 800422c:	4603      	mov	r3, r0
 800422e:	461a      	mov	r2, r3
 8004230:	6839      	ldr	r1, [r7, #0]
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 f8e6 	bl	8004404 <_ZNSt15__allocated_ptrISaIN4tama5SceneEEEC1ERS2_PS1_>
    }
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	3708      	adds	r7, #8
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <_ZNSt15__allocated_ptrISaIN4tama5SceneEEED1Ev>:
      ~__allocated_ptr()
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d007      	beq.n	8004260 <_ZNSt15__allocated_ptrISaIN4tama5SceneEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6818      	ldr	r0, [r3, #0]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	2201      	movs	r2, #1
 800425a:	4619      	mov	r1, r3
 800425c:	f000 f8e6 	bl	800442c <_ZNSt16allocator_traitsISaIN4tama5SceneEEE10deallocateERS2_PS1_j>
      }
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4618      	mov	r0, r3
 8004264:	3708      	adds	r7, #8
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}

0800426a <_ZNSt15__allocated_ptrISaIN4tama5SceneEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 800426a:	b580      	push	{r7, lr}
 800426c:	b082      	sub	sp, #8
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	4618      	mov	r0, r3
 8004278:	f000 f8e7 	bl	800444a <_ZNSt15__allocated_ptrISaIN4tama5SceneEEE10_S_raw_ptrEPS1_>
 800427c:	4603      	mov	r3, r0
 800427e:	4618      	mov	r0, r3
 8004280:	3708      	adds	r7, #8
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}

08004286 <_ZNSt16allocator_traitsISaIN4tama5SceneEEE9constructIS1_JEEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8004286:	b580      	push	{r7, lr}
 8004288:	b082      	sub	sp, #8
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
 800428e:	6039      	str	r1, [r7, #0]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8004290:	6839      	ldr	r1, [r7, #0]
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 f8e4 	bl	8004460 <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEE9constructIS2_JEEEvPT_DpOT0_>
 8004298:	bf00      	nop
 800429a:	3708      	adds	r7, #8
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <_ZNSt15__allocated_ptrISaIN4tama5SceneEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	605a      	str	r2, [r3, #4]
	return *this;
 80042b0:	687b      	ldr	r3, [r7, #4]
      }
 80042b2:	4618      	mov	r0, r3
 80042b4:	370c      	adds	r7, #12
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr

080042be <_ZSt4moveIRNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 80042be:	b480      	push	{r7}
 80042c0:	b083      	sub	sp, #12
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4618      	mov	r0, r3
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>:
        struct _Deleter
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	683a      	ldr	r2, [r7, #0]
 80042e2:	4611      	mov	r1, r2
 80042e4:	4618      	mov	r0, r3
 80042e6:	f7ff ff8a 	bl	80041fe <_ZNSaIN4tama5SceneEEC1ERKS1_>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4618      	mov	r0, r3
 80042ee:	3708      	adds	r7, #8
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <_ZSt4moveIRSaIN4tama5SceneEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4618      	mov	r0, r3
 8004300:	370c      	adds	r7, #12
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr

0800430a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama5SceneENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
 800430a:	b5b0      	push	{r4, r5, r7, lr}
 800430c:	b08a      	sub	sp, #40	; 0x28
 800430e:	af00      	add	r7, sp, #0
 8004310:	60f8      	str	r0, [r7, #12]
 8004312:	60b9      	str	r1, [r7, #8]
 8004314:	607a      	str	r2, [r7, #4]
 8004316:	603b      	str	r3, [r7, #0]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2200      	movs	r2, #0
 800431c:	601a      	str	r2, [r3, #0]
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 800431e:	f107 031c 	add.w	r3, r7, #28
 8004322:	6839      	ldr	r1, [r7, #0]
 8004324:	4618      	mov	r0, r3
 8004326:	f000 f8af 	bl	8004488 <_ZNSaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	      auto __guard = std::__allocate_guarded(__a2);
 800432a:	f107 0314 	add.w	r3, r7, #20
 800432e:	f107 021c 	add.w	r2, r7, #28
 8004332:	4611      	mov	r1, r2
 8004334:	4618      	mov	r0, r3
 8004336:	f000 f8c0 	bl	80044ba <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>
	      _Sp_cd_type* __mem = __guard.get();
 800433a:	f107 0314 	add.w	r3, r7, #20
 800433e:	4618      	mov	r0, r3
 8004340:	f000 f8e3 	bl	800450a <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>
 8004344:	6278      	str	r0, [r7, #36]	; 0x24
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f7ff ffb9 	bl	80042be <_ZSt4moveIRNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800434c:	4602      	mov	r2, r0
 800434e:	f107 0320 	add.w	r3, r7, #32
 8004352:	4611      	mov	r1, r2
 8004354:	4618      	mov	r0, r3
 8004356:	f7ff ffbd 	bl	80042d4 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 800435a:	f107 0420 	add.w	r4, r7, #32
 800435e:	6838      	ldr	r0, [r7, #0]
 8004360:	f7ff ffc8 	bl	80042f4 <_ZSt4moveIRSaIN4tama5SceneEEEONSt16remove_referenceIT_E4typeEOS5_>
 8004364:	4605      	mov	r5, r0
 8004366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004368:	4619      	mov	r1, r3
 800436a:	2014      	movs	r0, #20
 800436c:	f7fc fe67 	bl	800103e <_ZnwjPv>
 8004370:	2800      	cmp	r0, #0
 8004372:	d004      	beq.n	800437e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama5SceneENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x74>
 8004374:	462b      	mov	r3, r5
 8004376:	4622      	mov	r2, r4
 8004378:	68b9      	ldr	r1, [r7, #8]
 800437a:	f000 f8ff 	bl	800457c <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>
 800437e:	f107 0320 	add.w	r3, r7, #32
 8004382:	4618      	mov	r0, r3
 8004384:	f7ff fe69 	bl	800405a <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	      _M_pi = __mem;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800438c:	601a      	str	r2, [r3, #0]
	      __guard = nullptr;
 800438e:	f107 0314 	add.w	r3, r7, #20
 8004392:	2100      	movs	r1, #0
 8004394:	4618      	mov	r0, r3
 8004396:	f000 f91f 	bl	80045d8 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>
	      auto __guard = std::__allocate_guarded(__a2);
 800439a:	f107 0314 	add.w	r3, r7, #20
 800439e:	4618      	mov	r0, r3
 80043a0:	f000 f89e 	bl	80044e0 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 80043a4:	f107 031c 	add.w	r3, r7, #28
 80043a8:	4618      	mov	r0, r3
 80043aa:	f000 f87a 	bl	80044a2 <_ZNSaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
	}
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	4618      	mov	r0, r3
 80043b2:	3728      	adds	r7, #40	; 0x28
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bdb0      	pop	{r4, r5, r7, pc}

080043b8 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	    __base->_M_weak_assign(const_cast<_Yp2*>(__p), _M_refcount);
	}

      template<typename _Yp, typename _Yp2 = typename remove_cv<_Yp>::type>
	typename enable_if<!__has_esft_base<_Yp2>::value>::type
	_M_enable_shared_from_this_with(_Yp*) noexcept
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]
	{ }
 80043c2:	bf00      	nop
 80043c4:	370c      	adds	r7, #12
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr

080043ce <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 80043ce:	b480      	push	{r7}
 80043d0:	b083      	sub	sp, #12
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
 80043d6:	6039      	str	r1, [r7, #0]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4618      	mov	r0, r3
 80043dc:	370c      	adds	r7, #12
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr

080043e6 <_ZNSt16allocator_traitsISaIN4tama5SceneEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 80043e6:	b580      	push	{r7, lr}
 80043e8:	b082      	sub	sp, #8
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	6078      	str	r0, [r7, #4]
 80043ee:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80043f0:	2200      	movs	r2, #0
 80043f2:	6839      	ldr	r1, [r7, #0]
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f000 f91e 	bl	8004636 <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEE8allocateEjPKv>
 80043fa:	4603      	mov	r3, r0
 80043fc:	4618      	mov	r0, r3
 80043fe:	3708      	adds	r7, #8
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <_ZNSt15__allocated_ptrISaIN4tama5SceneEEEC1ERS2_PS1_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8004410:	68b8      	ldr	r0, [r7, #8]
 8004412:	f000 f92e 	bl	8004672 <_ZSt11__addressofISaIN4tama5SceneEEEPT_RS3_>
 8004416:	4602      	mov	r2, r0
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	601a      	str	r2, [r3, #0]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	605a      	str	r2, [r3, #4]
      { }
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	4618      	mov	r0, r3
 8004426:	3710      	adds	r7, #16
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <_ZNSt16allocator_traitsISaIN4tama5SceneEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	68b9      	ldr	r1, [r7, #8]
 800443c:	68f8      	ldr	r0, [r7, #12]
 800443e:	f000 f923 	bl	8004688 <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEE10deallocateEPS2_j>
 8004442:	bf00      	nop
 8004444:	3710      	adds	r7, #16
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}

0800444a <_ZNSt15__allocated_ptrISaIN4tama5SceneEEE10_S_raw_ptrEPS1_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 800444a:	b480      	push	{r7}
 800444c:	b083      	sub	sp, #12
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4618      	mov	r0, r3
 8004456:	370c      	adds	r7, #12
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEE9constructIS2_JEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6039      	str	r1, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	4619      	mov	r1, r3
 800446e:	2020      	movs	r0, #32
 8004470:	f7fc fde5 	bl	800103e <_ZnwjPv>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d002      	beq.n	8004480 <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEE9constructIS2_JEEEvPT_DpOT0_+0x20>
 800447a:	4618      	mov	r0, r3
 800447c:	f00c fcfe 	bl	8010e7c <_ZN4tama5SceneC1Ev>
 8004480:	bf00      	nop
 8004482:	3708      	adds	r7, #8
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}

08004488 <_ZNSaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) throw() { }
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 f905 	bl	80046a2 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	4618      	mov	r0, r3
 800449c:	3708      	adds	r7, #8
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}

080044a2 <_ZNSaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>:
      ~allocator() throw() { }
 80044a2:	b580      	push	{r7, lr}
 80044a4:	b082      	sub	sp, #8
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 f904 	bl	80046b8 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4618      	mov	r0, r3
 80044b4:	3708      	adds	r7, #8
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}

080044ba <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>:
    __allocate_guarded(_Alloc& __a)
 80044ba:	b580      	push	{r7, lr}
 80044bc:	b082      	sub	sp, #8
 80044be:	af00      	add	r7, sp, #0
 80044c0:	6078      	str	r0, [r7, #4]
 80044c2:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 80044c4:	2101      	movs	r1, #1
 80044c6:	6838      	ldr	r0, [r7, #0]
 80044c8:	f000 f901 	bl	80046ce <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>
 80044cc:	4603      	mov	r3, r0
 80044ce:	461a      	mov	r2, r3
 80044d0:	6839      	ldr	r1, [r7, #0]
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 f90a 	bl	80046ec <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
    }
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	3708      	adds	r7, #8
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>:
      ~__allocated_ptr()
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d007      	beq.n	8004500 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6818      	ldr	r0, [r3, #0]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	2201      	movs	r2, #1
 80044fa:	4619      	mov	r1, r3
 80044fc:	f000 f90a 	bl	8004714 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>
      }
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4618      	mov	r0, r3
 8004504:	3708      	adds	r7, #8
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}

0800450a <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 800450a:	b580      	push	{r7, lr}
 800450c:	b082      	sub	sp, #8
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	4618      	mov	r0, r3
 8004518:	f000 f90b 	bl	8004732 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>
 800451c:	4603      	mov	r3, r0
 800451e:	4618      	mov	r0, r3
 8004520:	3708      	adds	r7, #8
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}

08004526 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, false>
 8004526:	b580      	push	{r7, lr}
 8004528:	b082      	sub	sp, #8
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4618      	mov	r0, r3
 8004532:	f7ff fd92 	bl	800405a <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4618      	mov	r0, r3
 800453a:	3708      	adds	r7, #8
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama5SceneEELb1EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f7ff fccc 	bl	8003ee6 <_ZNSaIN4tama5SceneEED1Ev>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4618      	mov	r0, r3
 8004552:	3708      	adds	r7, #8
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>:
      class _Impl : _Sp_ebo_helper<0, _Deleter>, _Sp_ebo_helper<1, _Alloc>
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	3301      	adds	r3, #1
 8004564:	4618      	mov	r0, r3
 8004566:	f7ff ffeb 	bl	8004540 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama5SceneEELb1EED1Ev>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4618      	mov	r0, r3
 800456e:	f7ff ffda 	bl	8004526 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4618      	mov	r0, r3
 8004576:	3708      	adds	r7, #8
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 800457c:	b590      	push	{r4, r7, lr}
 800457e:	b087      	sub	sp, #28
 8004580:	af00      	add	r7, sp, #0
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	60b9      	str	r1, [r7, #8]
 8004586:	607a      	str	r2, [r7, #4]
 8004588:	603b      	str	r3, [r7, #0]
      : _M_impl(__p, std::move(__d), __a) { }
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	4618      	mov	r0, r3
 800458e:	f000 f8db 	bl	8004748 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8004592:	4a10      	ldr	r2, [pc, #64]	; (80045d4 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_+0x58>)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	601a      	str	r2, [r3, #0]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f103 040c 	add.w	r4, r3, #12
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f7ff fe8d 	bl	80042be <_ZSt4moveIRNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 80045a4:	4602      	mov	r2, r0
 80045a6:	f107 0314 	add.w	r3, r7, #20
 80045aa:	4611      	mov	r1, r2
 80045ac:	4618      	mov	r0, r3
 80045ae:	f7ff fe91 	bl	80042d4 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 80045b2:	f107 0214 	add.w	r2, r7, #20
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	68b9      	ldr	r1, [r7, #8]
 80045ba:	4620      	mov	r0, r4
 80045bc:	f000 f8da 	bl	8004774 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>
 80045c0:	f107 0314 	add.w	r3, r7, #20
 80045c4:	4618      	mov	r0, r3
 80045c6:	f7ff fd48 	bl	800405a <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	4618      	mov	r0, r3
 80045ce:	371c      	adds	r7, #28
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd90      	pop	{r4, r7, pc}
 80045d4:	08023600 	.word	0x08023600

080045d8 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	605a      	str	r2, [r3, #4]
	return *this;
 80045e8:	687b      	ldr	r3, [r7, #4]
      }
 80045ea:	4618      	mov	r0, r3
 80045ec:	370c      	adds	r7, #12
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr

080045f6 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>:
          void operator()(typename _Alloc::value_type* __ptr)
 80045f6:	b590      	push	{r4, r7, lr}
 80045f8:	b085      	sub	sp, #20
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
 80045fe:	6039      	str	r1, [r7, #0]
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 8004600:	6879      	ldr	r1, [r7, #4]
 8004602:	f107 0308 	add.w	r3, r7, #8
 8004606:	683a      	ldr	r2, [r7, #0]
 8004608:	4618      	mov	r0, r3
 800460a:	f7ff fefb 	bl	8004404 <_ZNSt15__allocated_ptrISaIN4tama5SceneEEEC1ERS2_PS1_>
	    allocator_traits<_Alloc>::destroy(_M_alloc, __guard.get());
 800460e:	687c      	ldr	r4, [r7, #4]
 8004610:	f107 0308 	add.w	r3, r7, #8
 8004614:	4618      	mov	r0, r3
 8004616:	f7ff fe28 	bl	800426a <_ZNSt15__allocated_ptrISaIN4tama5SceneEEE3getEv>
 800461a:	4603      	mov	r3, r0
 800461c:	4619      	mov	r1, r3
 800461e:	4620      	mov	r0, r4
 8004620:	f000 f8c6 	bl	80047b0 <_ZNSt16allocator_traitsISaIN4tama5SceneEEE7destroyIS1_EEvRS2_PT_>
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 8004624:	f107 0308 	add.w	r3, r7, #8
 8004628:	4618      	mov	r0, r3
 800462a:	f7ff fe09 	bl	8004240 <_ZNSt15__allocated_ptrISaIN4tama5SceneEEED1Ev>
          }
 800462e:	bf00      	nop
 8004630:	3714      	adds	r7, #20
 8004632:	46bd      	mov	sp, r7
 8004634:	bd90      	pop	{r4, r7, pc}

08004636 <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8004636:	b580      	push	{r7, lr}
 8004638:	b084      	sub	sp, #16
 800463a:	af00      	add	r7, sp, #0
 800463c:	60f8      	str	r0, [r7, #12]
 800463e:	60b9      	str	r1, [r7, #8]
 8004640:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8004642:	68f8      	ldr	r0, [r7, #12]
 8004644:	f000 f8c1 	bl	80047ca <_ZNK9__gnu_cxx13new_allocatorIN4tama5SceneEE8max_sizeEv>
 8004648:	4602      	mov	r2, r0
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	4293      	cmp	r3, r2
 800464e:	bf8c      	ite	hi
 8004650:	2301      	movhi	r3, #1
 8004652:	2300      	movls	r3, #0
 8004654:	b2db      	uxtb	r3, r3
 8004656:	2b00      	cmp	r3, #0
 8004658:	d001      	beq.n	800465e <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800465a:	f01b f95e 	bl	801f91a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	015b      	lsls	r3, r3, #5
 8004662:	4618      	mov	r0, r3
 8004664:	f01b f92b 	bl	801f8be <_Znwj>
 8004668:	4603      	mov	r3, r0
      }
 800466a:	4618      	mov	r0, r3
 800466c:	3710      	adds	r7, #16
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}

08004672 <_ZSt11__addressofISaIN4tama5SceneEEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8004672:	b480      	push	{r7}
 8004674:	b083      	sub	sp, #12
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4618      	mov	r0, r3
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8004694:	68b8      	ldr	r0, [r7, #8]
 8004696:	f01b f92b 	bl	801f8f0 <_ZdlPv>
      }
 800469a:	bf00      	nop
 800469c:	3710      	adds	r7, #16
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}

080046a2 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80046a2:	b480      	push	{r7}
 80046a4:	b083      	sub	sp, #12
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4618      	mov	r0, r3
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4618      	mov	r0, r3
 80046c4:	370c      	adds	r7, #12
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr

080046ce <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>:
      allocate(allocator_type& __a, size_type __n)
 80046ce:	b580      	push	{r7, lr}
 80046d0:	b082      	sub	sp, #8
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
 80046d6:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80046d8:	2200      	movs	r2, #0
 80046da:	6839      	ldr	r1, [r7, #0]
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f000 f880 	bl	80047e2 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>
 80046e2:	4603      	mov	r3, r0
 80046e4:	4618      	mov	r0, r3
 80046e6:	3708      	adds	r7, #8
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	60b9      	str	r1, [r7, #8]
 80046f6:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 80046f8:	68b8      	ldr	r0, [r7, #8]
 80046fa:	f000 f893 	bl	8004824 <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>
 80046fe:	4602      	mov	r2, r0
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	601a      	str	r2, [r3, #0]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	605a      	str	r2, [r3, #4]
      { }
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	4618      	mov	r0, r3
 800470e:	3710      	adds	r7, #16
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}

08004714 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	60b9      	str	r1, [r7, #8]
 800471e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	68b9      	ldr	r1, [r7, #8]
 8004724:	68f8      	ldr	r0, [r7, #12]
 8004726:	f000 f888 	bl	800483a <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>
 800472a:	bf00      	nop
 800472c:	3710      	adds	r7, #16
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}

08004732 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 8004732:	b480      	push	{r7}
 8004734:	b083      	sub	sp, #12
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4618      	mov	r0, r3
 800473e:	370c      	adds	r7, #12
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr

08004748 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      _Sp_counted_base() noexcept
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
      : _M_use_count(1), _M_weak_count(1) { }
 8004750:	4a07      	ldr	r2, [pc, #28]	; (8004770 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev+0x28>)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	601a      	str	r2, [r3, #0]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2201      	movs	r2, #1
 800475a:	605a      	str	r2, [r3, #4]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	609a      	str	r2, [r3, #8]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4618      	mov	r0, r3
 8004766:	370c      	adds	r7, #12
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr
 8004770:	0802363c 	.word	0x0802363c

08004774 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 8004774:	b590      	push	{r4, r7, lr}
 8004776:	b085      	sub	sp, #20
 8004778:	af00      	add	r7, sp, #0
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	607a      	str	r2, [r7, #4]
 8004780:	603b      	str	r3, [r7, #0]
	: _M_ptr(__p), _Del_base(std::move(__d)), _Alloc_base(__a)
 8004782:	68fc      	ldr	r4, [r7, #12]
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f7ff fd9a 	bl	80042be <_ZSt4moveIRNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800478a:	4603      	mov	r3, r0
 800478c:	4619      	mov	r1, r3
 800478e:	4620      	mov	r0, r4
 8004790:	f000 f860 	bl	8004854 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	3301      	adds	r3, #1
 8004798:	6839      	ldr	r1, [r7, #0]
 800479a:	4618      	mov	r0, r3
 800479c:	f000 f86d 	bl	800487a <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama5SceneEELb1EEC1ERKS2_>
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	68ba      	ldr	r2, [r7, #8]
 80047a4:	605a      	str	r2, [r3, #4]
	{ }
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	4618      	mov	r0, r3
 80047aa:	3714      	adds	r7, #20
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd90      	pop	{r4, r7, pc}

080047b0 <_ZNSt16allocator_traitsISaIN4tama5SceneEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 80047ba:	6839      	ldr	r1, [r7, #0]
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f000 f89d 	bl	80048fc <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEE7destroyIS2_EEvPT_>
 80047c2:	bf00      	nop
 80047c4:	3708      	adds	r7, #8
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}

080047ca <_ZNK9__gnu_cxx13new_allocatorIN4tama5SceneEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80047ca:	b480      	push	{r7}
 80047cc:	b083      	sub	sp, #12
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 80047d2:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
 80047d6:	4618      	mov	r0, r3
 80047d8:	370c      	adds	r7, #12
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr

080047e2 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80047e2:	b580      	push	{r7, lr}
 80047e4:	b084      	sub	sp, #16
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	60f8      	str	r0, [r7, #12]
 80047ea:	60b9      	str	r1, [r7, #8]
 80047ec:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 80047ee:	68f8      	ldr	r0, [r7, #12]
 80047f0:	f000 f890 	bl	8004914 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>
 80047f4:	4602      	mov	r2, r0
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	4293      	cmp	r3, r2
 80047fa:	bf8c      	ite	hi
 80047fc:	2301      	movhi	r3, #1
 80047fe:	2300      	movls	r3, #0
 8004800:	b2db      	uxtb	r3, r3
 8004802:	2b00      	cmp	r3, #0
 8004804:	d001      	beq.n	800480a <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8004806:	f01b f888 	bl	801f91a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800480a:	68ba      	ldr	r2, [r7, #8]
 800480c:	4613      	mov	r3, r2
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	4413      	add	r3, r2
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	4618      	mov	r0, r3
 8004816:	f01b f852 	bl	801f8be <_Znwj>
 800481a:	4603      	mov	r3, r0
      }
 800481c:	4618      	mov	r0, r3
 800481e:	3710      	adds	r7, #16
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}

08004824 <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4618      	mov	r0, r3
 8004830:	370c      	adds	r7, #12
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr

0800483a <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>:
      deallocate(pointer __p, size_type)
 800483a:	b580      	push	{r7, lr}
 800483c:	b084      	sub	sp, #16
 800483e:	af00      	add	r7, sp, #0
 8004840:	60f8      	str	r0, [r7, #12]
 8004842:	60b9      	str	r1, [r7, #8]
 8004844:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8004846:	68b8      	ldr	r0, [r7, #8]
 8004848:	f01b f852 	bl	801f8f0 <_ZdlPv>
      }
 800484c:	bf00      	nop
 800484e:	3710      	adds	r7, #16
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _M_tp(std::move(__tp)) { }
 8004854:	b590      	push	{r4, r7, lr}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
 800485e:	687c      	ldr	r4, [r7, #4]
 8004860:	6838      	ldr	r0, [r7, #0]
 8004862:	f7ff fd2c 	bl	80042be <_ZSt4moveIRNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8004866:	4603      	mov	r3, r0
 8004868:	4619      	mov	r1, r3
 800486a:	4620      	mov	r0, r4
 800486c:	f7ff fd32 	bl	80042d4 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4618      	mov	r0, r3
 8004874:	370c      	adds	r7, #12
 8004876:	46bd      	mov	sp, r7
 8004878:	bd90      	pop	{r4, r7, pc}

0800487a <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama5SceneEELb1EEC1ERKS2_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 800487a:	b580      	push	{r7, lr}
 800487c:	b082      	sub	sp, #8
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
 8004882:	6039      	str	r1, [r7, #0]
 8004884:	6839      	ldr	r1, [r7, #0]
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f7ff fcb9 	bl	80041fe <_ZNSaIN4tama5SceneEEC1ERKS1_>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4618      	mov	r0, r3
 8004890:	3708      	adds	r7, #8
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}

08004896 <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_ptr() = default;
 8004896:	b580      	push	{r7, lr}
 8004898:	b082      	sub	sp, #8
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	3304      	adds	r3, #4
 80048a2:	4618      	mov	r0, r3
 80048a4:	f7fe fc35 	bl	8003112 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4618      	mov	r0, r3
 80048ac:	3708      	adds	r7, #8
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}

080048b2 <_ZNSt10shared_ptrIN4tama14ChangeObserverEED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 80048b2:	b580      	push	{r7, lr}
 80048b4:	b082      	sub	sp, #8
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	6078      	str	r0, [r7, #4]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4618      	mov	r0, r3
 80048be:	f7ff ffea 	bl	8004896 <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4618      	mov	r0, r3
 80048c6:	3708      	adds	r7, #8
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}

080048cc <_ZN4tama5SceneD1Ev>:
#include "../drawable/Drawable.h"
#include "../../../../Configuration/display.config.h"

namespace tama
{
    class Scene : public ChangeObserver
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	4a08      	ldr	r2, [pc, #32]	; (80048f8 <_ZN4tama5SceneD1Ev+0x2c>)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	601a      	str	r2, [r3, #0]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	330c      	adds	r3, #12
 80048de:	4618      	mov	r0, r3
 80048e0:	f000 f826 	bl	8004930 <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EED1Ev>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	3304      	adds	r3, #4
 80048e8:	4618      	mov	r0, r3
 80048ea:	f7ff ffe2 	bl	80048b2 <_ZNSt10shared_ptrIN4tama14ChangeObserverEED1Ev>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4618      	mov	r0, r3
 80048f2:	3708      	adds	r7, #8
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	08024804 	.word	0x08024804

080048fc <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEE7destroyIS2_EEvPT_>:
	destroy(_Up* __p) { __p->~_Up(); }
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b082      	sub	sp, #8
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]
 8004906:	6838      	ldr	r0, [r7, #0]
 8004908:	f7ff ffe0 	bl	80048cc <_ZN4tama5SceneD1Ev>
 800490c:	bf00      	nop
 800490e:	3708      	adds	r7, #8
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8004914:	b480      	push	{r7}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800491c:	4b03      	ldr	r3, [pc, #12]	; (800492c <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv+0x18>)
 800491e:	4618      	mov	r0, r3
 8004920:	370c      	adds	r7, #12
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	0ccccccc 	.word	0x0ccccccc

08004930 <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8004930:	b5b0      	push	{r4, r5, r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681c      	ldr	r4, [r3, #0]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4618      	mov	r0, r3
 8004944:	f000 f835 	bl	80049b2 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE19_M_get_Tp_allocatorEv>
 8004948:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800494a:	461a      	mov	r2, r3
 800494c:	4629      	mov	r1, r5
 800494e:	4620      	mov	r0, r4
 8004950:	f000 f83a 	bl	80049c8 <_ZSt8_DestroyIPSt10shared_ptrIN4tama8DrawableEES3_EvT_S5_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4618      	mov	r0, r3
 8004958:	f000 f811 	bl	800497e <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EED1Ev>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4618      	mov	r0, r3
 8004960:	3708      	adds	r7, #8
 8004962:	46bd      	mov	sp, r7
 8004964:	bdb0      	pop	{r4, r5, r7, pc}

08004966 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8004966:	b580      	push	{r7, lr}
 8004968:	b082      	sub	sp, #8
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 f838 	bl	80049e4 <_ZNSaISt10shared_ptrIN4tama8DrawableEEED1Ev>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4618      	mov	r0, r3
 8004978:	3708      	adds	r7, #8
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}

0800497e <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800497e:	b580      	push	{r7, lr}
 8004980:	b082      	sub	sp, #8
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6819      	ldr	r1, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 800498e:	461a      	mov	r2, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	10db      	asrs	r3, r3, #3
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8004998:	461a      	mov	r2, r3
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f000 f82e 	bl	80049fc <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE13_M_deallocateEPS3_j>
		      - this->_M_impl._M_start); }
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	4618      	mov	r0, r3
 80049a4:	f7ff ffdf 	bl	8004966 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE12_Vector_implD1Ev>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4618      	mov	r0, r3
 80049ac:	3708      	adds	r7, #8
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}

080049b2 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80049b2:	b480      	push	{r7}
 80049b4:	b083      	sub	sp, #12
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4618      	mov	r0, r3
 80049be:	370c      	adds	r7, #12
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <_ZSt8_DestroyIPSt10shared_ptrIN4tama8DrawableEES3_EvT_S5_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 80049d4:	68b9      	ldr	r1, [r7, #8]
 80049d6:	68f8      	ldr	r0, [r7, #12]
 80049d8:	f000 f823 	bl	8004a22 <_ZSt8_DestroyIPSt10shared_ptrIN4tama8DrawableEEEvT_S5_>
    }
 80049dc:	bf00      	nop
 80049de:	3710      	adds	r7, #16
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}

080049e4 <_ZNSaISt10shared_ptrIN4tama8DrawableEEED1Ev>:
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b082      	sub	sp, #8
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f000 f825 	bl	8004a3c <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEED1Ev>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4618      	mov	r0, r3
 80049f6:	3708      	adds	r7, #8
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}

080049fc <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE13_M_deallocateEPS3_j>:
      _M_deallocate(pointer __p, size_t __n)
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b084      	sub	sp, #16
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	607a      	str	r2, [r7, #4]
	if (__p)
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d005      	beq.n	8004a1a <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE13_M_deallocateEPS3_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	68b9      	ldr	r1, [r7, #8]
 8004a14:	4618      	mov	r0, r3
 8004a16:	f000 f81c 	bl	8004a52 <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama8DrawableEEEE10deallocateERS4_PS3_j>
      }
 8004a1a:	bf00      	nop
 8004a1c:	3710      	adds	r7, #16
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}

08004a22 <_ZSt8_DestroyIPSt10shared_ptrIN4tama8DrawableEEEvT_S5_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8004a22:	b580      	push	{r7, lr}
 8004a24:	b082      	sub	sp, #8
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
 8004a2a:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8004a2c:	6839      	ldr	r1, [r7, #0]
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 f829 	bl	8004a86 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrIN4tama8DrawableEEEEvT_S7_>
    }
 8004a34:	bf00      	nop
 8004a36:	3708      	adds	r7, #8
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4618      	mov	r0, r3
 8004a48:	370c      	adds	r7, #12
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr

08004a52 <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama8DrawableEEEE10deallocateERS4_PS3_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8004a52:	b580      	push	{r7, lr}
 8004a54:	b084      	sub	sp, #16
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	60f8      	str	r0, [r7, #12]
 8004a5a:	60b9      	str	r1, [r7, #8]
 8004a5c:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	68b9      	ldr	r1, [r7, #8]
 8004a62:	68f8      	ldr	r0, [r7, #12]
 8004a64:	f000 f827 	bl	8004ab6 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEE10deallocateEPS4_j>
 8004a68:	bf00      	nop
 8004a6a:	3710      	adds	r7, #16
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}

08004a70 <_ZSt11__addressofISt10shared_ptrIN4tama8DrawableEEEPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	370c      	adds	r7, #12
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr

08004a86 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrIN4tama8DrawableEEEEvT_S7_>:
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 8004a86:	b580      	push	{r7, lr}
 8004a88:	b082      	sub	sp, #8
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
 8004a8e:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d00a      	beq.n	8004aae <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrIN4tama8DrawableEEEEvT_S7_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f7ff ffe9 	bl	8004a70 <_ZSt11__addressofISt10shared_ptrIN4tama8DrawableEEEPT_RS4_>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f000 f830 	bl	8004b06 <_ZSt8_DestroyISt10shared_ptrIN4tama8DrawableEEEvPT_>
	  for (; __first != __last; ++__first)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	3308      	adds	r3, #8
 8004aaa:	607b      	str	r3, [r7, #4]
 8004aac:	e7f0      	b.n	8004a90 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrIN4tama8DrawableEEEEvT_S7_+0xa>
	}
 8004aae:	bf00      	nop
 8004ab0:	3708      	adds	r7, #8
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}

08004ab6 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEE10deallocateEPS4_j>:
      deallocate(pointer __p, size_type)
 8004ab6:	b580      	push	{r7, lr}
 8004ab8:	b084      	sub	sp, #16
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	60f8      	str	r0, [r7, #12]
 8004abe:	60b9      	str	r1, [r7, #8]
 8004ac0:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8004ac2:	68b8      	ldr	r0, [r7, #8]
 8004ac4:	f01a ff14 	bl	801f8f0 <_ZdlPv>
      }
 8004ac8:	bf00      	nop
 8004aca:	3710      	adds	r7, #16
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <_ZNSt12__shared_ptrIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	3304      	adds	r3, #4
 8004adc:	4618      	mov	r0, r3
 8004ade:	f7fe fb18 	bl	8003112 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3708      	adds	r7, #8
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <_ZNSt10shared_ptrIN4tama8DrawableEED1Ev>:
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4618      	mov	r0, r3
 8004af8:	f7ff ffea 	bl	8004ad0 <_ZNSt12__shared_ptrIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4618      	mov	r0, r3
 8004b00:	3708      	adds	r7, #8
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}

08004b06 <_ZSt8_DestroyISt10shared_ptrIN4tama8DrawableEEEvPT_>:
    _Destroy(_Tp* __pointer)
 8004b06:	b580      	push	{r7, lr}
 8004b08:	b082      	sub	sp, #8
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f7ff ffec 	bl	8004aec <_ZNSt10shared_ptrIN4tama8DrawableEED1Ev>
 8004b14:	bf00      	nop
 8004b16:	3708      	adds	r7, #8
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}

08004b1c <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	4a08      	ldr	r2, [pc, #32]	; (8004b48 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev+0x2c>)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	601a      	str	r2, [r3, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	330c      	adds	r3, #12
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f7ff fd12 	bl	8004558 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	4618      	mov	r0, r3
 8004b38:	f7ff f98c 	bl	8003e54 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3708      	adds	r7, #8
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	08023600 	.word	0x08023600

08004b4c <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f7ff ffe1 	bl	8004b1c <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
 8004b5a:	2114      	movs	r1, #20
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f01a feac 	bl	801f8ba <_ZdlPvj>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4618      	mov	r0, r3
 8004b66:	3708      	adds	r7, #8
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b082      	sub	sp, #8
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	330c      	adds	r3, #12
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f000 f840 	bl	8004bfe <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	691b      	ldr	r3, [r3, #16]
 8004b84:	4619      	mov	r1, r3
 8004b86:	4610      	mov	r0, r2
 8004b88:	f7ff fd35 	bl	80045f6 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>
 8004b8c:	bf00      	nop
 8004b8e:	3708      	adds	r7, #8
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b086      	sub	sp, #24
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	330c      	adds	r3, #12
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f000 f839 	bl	8004c18 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	f107 0314 	add.w	r3, r7, #20
 8004bac:	4611      	mov	r1, r2
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f7ff fc6a 	bl	8004488 <_ZNSaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8004bb4:	f107 0114 	add.w	r1, r7, #20
 8004bb8:	f107 030c 	add.w	r3, r7, #12
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f7ff fd94 	bl	80046ec <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
	this->~_Sp_counted_deleter();
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f7ff ffa9 	bl	8004b1c <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8004bca:	f107 030c 	add.w	r3, r7, #12
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f7ff fc86 	bl	80044e0 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	__allocator_type __a(_M_impl._M_alloc());
 8004bd4:	f107 0314 	add.w	r3, r7, #20
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f7ff fc62 	bl	80044a2 <_ZNSaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
      }
 8004bde:	bf00      	nop
 8004be0:	3718      	adds	r7, #24
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}

08004be6 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept
 8004be6:	b480      	push	{r7}
 8004be8:	b083      	sub	sp, #12
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
 8004bee:	6039      	str	r1, [r7, #0]
        return nullptr;
 8004bf0:	2300      	movs	r3, #0
      }
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	370c      	adds	r7, #12
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr

08004bfe <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 8004bfe:	b580      	push	{r7, lr}
 8004c00:	b082      	sub	sp, #8
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f000 f813 	bl	8004c34 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	4618      	mov	r0, r3
 8004c12:	3708      	adds	r7, #8
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b082      	sub	sp, #8
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	3301      	adds	r3, #1
 8004c24:	4618      	mov	r0, r3
 8004c26:	f000 f810 	bl	8004c4a <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama5SceneEELb1EE6_S_getERS3_>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3708      	adds	r7, #8
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>:
      _S_get(_Sp_ebo_helper& __eboh)
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
      { return __eboh._M_tp; }
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	4618      	mov	r0, r3
 8004c40:	370c      	adds	r7, #12
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr

08004c4a <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama5SceneEELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 8004c4a:	b480      	push	{r7}
 8004c4c:	b083      	sub	sp, #12
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4618      	mov	r0, r3
 8004c56:	370c      	adds	r7, #12
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr

08004c60 <_ZN4tama11SoundPlayer6updateEv>:
    melody = std::move(tones);
    time->startTimer();
}

void tama::SoundPlayer::update()
{
 8004c60:	b5b0      	push	{r4, r5, r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
    if (!playingNow)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c6e:	f083 0301 	eor.w	r3, r3, #1
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d168      	bne.n	8004d4a <_ZN4tama11SoundPlayer6updateEv+0xea>
    {
        return;
    }
    if (time->getElapsedTime() > melody[currentTone].duration)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f000 f8cd 	bl	8004e1a <_ZNKSt19__shared_ptr_accessIN4tama11TimeMonitorELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8004c80:	4602      	mov	r2, r0
 8004c82:	6813      	ldr	r3, [r2, #0]
 8004c84:	3304      	adds	r3, #4
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4610      	mov	r0, r2
 8004c8a:	4798      	blx	r3
 8004c8c:	4604      	mov	r4, r0
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f103 0210 	add.w	r2, r3, #16
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	69db      	ldr	r3, [r3, #28]
 8004c98:	4619      	mov	r1, r3
 8004c9a:	4610      	mov	r0, r2
 8004c9c:	f000 f8c9 	bl	8004e32 <_ZNSt6vectorIN4tama4ToneESaIS1_EEixEj>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	429c      	cmp	r4, r3
 8004ca6:	bf8c      	ite	hi
 8004ca8:	2301      	movhi	r3, #1
 8004caa:	2300      	movls	r3, #0
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d034      	beq.n	8004d1c <_ZN4tama11SoundPlayer6updateEv+0xbc>
    {
    	int w = melody.size();
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	3310      	adds	r3, #16
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f000 f8cb 	bl	8004e52 <_ZNKSt6vectorIN4tama4ToneESaIS1_EE4sizeEv>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	60fb      	str	r3, [r7, #12]
        if (melody.size() == currentTone + 1)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	3310      	adds	r3, #16
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f000 f8c4 	bl	8004e52 <_ZNKSt6vectorIN4tama4ToneESaIS1_EE4sizeEv>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	69db      	ldr	r3, [r3, #28]
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	bf0c      	ite	eq
 8004cd6:	2301      	moveq	r3, #1
 8004cd8:	2300      	movne	r3, #0
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d00f      	beq.n	8004d00 <_ZN4tama11SoundPlayer6updateEv+0xa0>
        {
            playingNow = false;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f883 2020 	strb.w	r2, [r3, #32]
            player->stop();
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	3308      	adds	r3, #8
 8004cec:	4618      	mov	r0, r3
 8004cee:	f000 f8c1 	bl	8004e74 <_ZNKSt19__shared_ptr_accessIN4tama20SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	6813      	ldr	r3, [r2, #0]
 8004cf6:	3304      	adds	r3, #4
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4610      	mov	r0, r2
 8004cfc:	4798      	blx	r3
            return;
 8004cfe:	e025      	b.n	8004d4c <_ZN4tama11SoundPlayer6updateEv+0xec>
        } else {
            currentTone++;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	69db      	ldr	r3, [r3, #28]
 8004d04:	1c5a      	adds	r2, r3, #1
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	61da      	str	r2, [r3, #28]
            time->startTimer();
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f000 f884 	bl	8004e1a <_ZNKSt19__shared_ptr_accessIN4tama11TimeMonitorELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8004d12:	4602      	mov	r2, r0
 8004d14:	6813      	ldr	r3, [r2, #0]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4610      	mov	r0, r2
 8004d1a:	4798      	blx	r3
        }
    }
    player->play(melody[currentTone]);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	3308      	adds	r3, #8
 8004d20:	4618      	mov	r0, r3
 8004d22:	f000 f8a7 	bl	8004e74 <_ZNKSt19__shared_ptr_accessIN4tama20SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8004d26:	4605      	mov	r5, r0
 8004d28:	682b      	ldr	r3, [r5, #0]
 8004d2a:	681c      	ldr	r4, [r3, #0]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f103 0210 	add.w	r2, r3, #16
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	69db      	ldr	r3, [r3, #28]
 8004d36:	4619      	mov	r1, r3
 8004d38:	4610      	mov	r0, r2
 8004d3a:	f000 f87a 	bl	8004e32 <_ZNSt6vectorIN4tama4ToneESaIS1_EEixEj>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004d44:	4628      	mov	r0, r5
 8004d46:	47a0      	blx	r4
 8004d48:	e000      	b.n	8004d4c <_ZN4tama11SoundPlayer6updateEv+0xec>
        return;
 8004d4a:	bf00      	nop
}
 8004d4c:	3710      	adds	r7, #16
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bdb0      	pop	{r4, r5, r7, pc}

08004d52 <_ZNSt12__shared_ptrIN4tama20SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EEaSERKS4_>:
    class __shared_ptr
 8004d52:	b580      	push	{r7, lr}
 8004d54:	b082      	sub	sp, #8
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
 8004d5a:	6039      	str	r1, [r7, #0]
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	601a      	str	r2, [r3, #0]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	1d1a      	adds	r2, r3, #4
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	3304      	adds	r3, #4
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	4610      	mov	r0, r2
 8004d70:	f000 f88c 	bl	8004e8c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	4618      	mov	r0, r3
 8004d78:	3708      	adds	r7, #8
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}

08004d7e <_ZNSt10shared_ptrIN4tama20SoundPlayingStrategyEEaSERKS2_>:
 8004d7e:	b580      	push	{r7, lr}
 8004d80:	b082      	sub	sp, #8
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
 8004d86:	6039      	str	r1, [r7, #0]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	683a      	ldr	r2, [r7, #0]
 8004d8c:	4611      	mov	r1, r2
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f7ff ffdf 	bl	8004d52 <_ZNSt12__shared_ptrIN4tama20SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EEaSERKS4_>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4618      	mov	r0, r3
 8004d98:	3708      	adds	r7, #8
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}

08004d9e <_ZN4tama11SoundPlayer18setPlayingStrategyESt10shared_ptrINS_20SoundPlayingStrategyEE>:

void tama::SoundPlayer::setPlayingStrategy(std::shared_ptr<SoundPlayingStrategy> player)
{
 8004d9e:	b580      	push	{r7, lr}
 8004da0:	b082      	sub	sp, #8
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
 8004da6:	6039      	str	r1, [r7, #0]
    this->player = player;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	3308      	adds	r3, #8
 8004dac:	6839      	ldr	r1, [r7, #0]
 8004dae:	4618      	mov	r0, r3
 8004db0:	f7ff ffe5 	bl	8004d7e <_ZNSt10shared_ptrIN4tama20SoundPlayingStrategyEEaSERKS2_>
}
 8004db4:	bf00      	nop
 8004db6:	3708      	adds	r7, #8
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <_ZSt4moveIRSt10shared_ptrIN4tama11TimeMonitorEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	370c      	adds	r7, #12
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr

08004dd2 <_ZN4tama11SoundPlayerC1ESt10shared_ptrINS_11TimeMonitorEE>:

tama::SoundPlayer::SoundPlayer(std::shared_ptr<TimeMonitor> time) : time(std::move(time))
 8004dd2:	b590      	push	{r4, r7, lr}
 8004dd4:	b083      	sub	sp, #12
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
 8004dda:	6039      	str	r1, [r7, #0]
 8004ddc:	687c      	ldr	r4, [r7, #4]
 8004dde:	6838      	ldr	r0, [r7, #0]
 8004de0:	f7ff ffec 	bl	8004dbc <_ZSt4moveIRSt10shared_ptrIN4tama11TimeMonitorEEEONSt16remove_referenceIT_E4typeEOS6_>
 8004de4:	4603      	mov	r3, r0
 8004de6:	4619      	mov	r1, r3
 8004de8:	4620      	mov	r0, r4
 8004dea:	f000 f873 	bl	8004ed4 <_ZNSt10shared_ptrIN4tama11TimeMonitorEEC1EOS2_>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	3308      	adds	r3, #8
 8004df2:	4618      	mov	r0, r3
 8004df4:	f000 f881 	bl	8004efa <_ZNSt10shared_ptrIN4tama20SoundPlayingStrategyEEC1Ev>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	3310      	adds	r3, #16
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f000 f889 	bl	8004f14 <_ZNSt6vectorIN4tama4ToneESaIS1_EEC1Ev>
{
    this->playingNow = false;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 2020 	strb.w	r2, [r3, #32]
    this->currentTone = 0;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	61da      	str	r2, [r3, #28]
}
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4618      	mov	r0, r3
 8004e14:	370c      	adds	r7, #12
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd90      	pop	{r4, r7, pc}

08004e1a <_ZNKSt19__shared_ptr_accessIN4tama11TimeMonitorELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 8004e1a:	b580      	push	{r7, lr}
 8004e1c:	b082      	sub	sp, #8
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
	return _M_get();
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 f89e 	bl	8004f64 <_ZNKSt19__shared_ptr_accessIN4tama11TimeMonitorELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 8004e28:	4603      	mov	r3, r0
      }
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3708      	adds	r7, #8
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}

08004e32 <_ZNSt6vectorIN4tama4ToneESaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8004e32:	b480      	push	{r7}
 8004e34:	b083      	sub	sp, #12
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
 8004e3a:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	00db      	lsls	r3, r3, #3
 8004e44:	4413      	add	r3, r2
      }
 8004e46:	4618      	mov	r0, r3
 8004e48:	370c      	adds	r7, #12
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr

08004e52 <_ZNKSt6vectorIN4tama4ToneESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8004e52:	b480      	push	{r7}
 8004e54:	b083      	sub	sp, #12
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	461a      	mov	r2, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	10db      	asrs	r3, r3, #3
 8004e68:	4618      	mov	r0, r3
 8004e6a:	370c      	adds	r7, #12
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <_ZNKSt19__shared_ptr_accessIN4tama20SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b082      	sub	sp, #8
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
	return _M_get();
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f000 f87d 	bl	8004f7c <_ZNKSt19__shared_ptr_accessIN4tama20SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 8004e82:	4603      	mov	r3, r0
      }
 8004e84:	4618      	mov	r0, r3
 8004e86:	3708      	adds	r7, #8
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>:
      operator=(const __shared_count& __r) noexcept
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	60fb      	str	r3, [r7, #12]
	if (__tmp != _M_pi)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d011      	beq.n	8004eca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x3e>
	    if (__tmp != 0)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d002      	beq.n	8004eb2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x26>
	      __tmp->_M_add_ref_copy();
 8004eac:	68f8      	ldr	r0, [r7, #12]
 8004eae:	f7fd fed6 	bl	8002c5e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>
	    if (_M_pi != 0)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d004      	beq.n	8004ec4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x38>
	      _M_pi->_M_release();
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f7fd fedc 	bl	8002c7c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	601a      	str	r2, [r3, #0]
	return *this;
 8004eca:	687b      	ldr	r3, [r7, #4]
      }
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3710      	adds	r7, #16
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <_ZNSt10shared_ptrIN4tama11TimeMonitorEEC1EOS2_>:
      shared_ptr(shared_ptr&& __r) noexcept
 8004ed4:	b590      	push	{r4, r7, lr}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
      : __shared_ptr<_Tp>(std::move(__r)) { }
 8004ede:	687c      	ldr	r4, [r7, #4]
 8004ee0:	6838      	ldr	r0, [r7, #0]
 8004ee2:	f7ff ff6b 	bl	8004dbc <_ZSt4moveIRSt10shared_ptrIN4tama11TimeMonitorEEEONSt16remove_referenceIT_E4typeEOS6_>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	4619      	mov	r1, r3
 8004eea:	4620      	mov	r0, r4
 8004eec:	f000 f852 	bl	8004f94 <_ZNSt12__shared_ptrIN4tama11TimeMonitorELN9__gnu_cxx12_Lock_policyE0EEC1EOS4_>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	370c      	adds	r7, #12
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd90      	pop	{r4, r7, pc}

08004efa <_ZNSt10shared_ptrIN4tama20SoundPlayingStrategyEEC1Ev>:
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }
 8004efa:	b580      	push	{r7, lr}
 8004efc:	b082      	sub	sp, #8
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4618      	mov	r0, r3
 8004f06:	f000 f863 	bl	8004fd0 <_ZNSt12__shared_ptrIN4tama20SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3708      	adds	r7, #8
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <_ZNSt6vectorIN4tama4ToneESaIS1_EEC1Ev>:
      vector()
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b082      	sub	sp, #8
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f000 f873 	bl	800500a <_ZNSt12_Vector_baseIN4tama4ToneESaIS1_EEC1Ev>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4618      	mov	r0, r3
 8004f28:	3708      	adds	r7, #8
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}

08004f2e <_ZNSt6vectorIN4tama4ToneESaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8004f2e:	b5b0      	push	{r4, r5, r7, lr}
 8004f30:	b082      	sub	sp, #8
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681c      	ldr	r4, [r3, #0]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4618      	mov	r0, r3
 8004f42:	f000 f889 	bl	8005058 <_ZNSt12_Vector_baseIN4tama4ToneESaIS1_EE19_M_get_Tp_allocatorEv>
 8004f46:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8004f48:	461a      	mov	r2, r3
 8004f4a:	4629      	mov	r1, r5
 8004f4c:	4620      	mov	r0, r4
 8004f4e:	f000 f88e 	bl	800506e <_ZSt8_DestroyIPN4tama4ToneES1_EvT_S3_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4618      	mov	r0, r3
 8004f56:	f000 f865 	bl	8005024 <_ZNSt12_Vector_baseIN4tama4ToneESaIS1_EED1Ev>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3708      	adds	r7, #8
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bdb0      	pop	{r4, r5, r7, pc}

08004f64 <_ZNKSt19__shared_ptr_accessIN4tama11TimeMonitorELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f000 f898 	bl	80050a2 <_ZNKSt12__shared_ptrIN4tama11TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE3getEv>
 8004f72:	4603      	mov	r3, r0
 8004f74:	4618      	mov	r0, r3
 8004f76:	3708      	adds	r7, #8
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <_ZNKSt19__shared_ptr_accessIN4tama20SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f000 f898 	bl	80050ba <_ZNKSt12__shared_ptrIN4tama20SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE3getEv>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3708      	adds	r7, #8
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <_ZNSt12__shared_ptrIN4tama11TimeMonitorELN9__gnu_cxx12_Lock_policyE0EEC1EOS4_>:
      __shared_ptr(__shared_ptr&& __r) noexcept
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
      : _M_ptr(__r._M_ptr), _M_refcount()
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	601a      	str	r2, [r3, #0]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	3304      	adds	r3, #4
 8004faa:	4618      	mov	r0, r3
 8004fac:	f7fe ffdf 	bl	8003f6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	_M_refcount._M_swap(__r._M_refcount);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	1d1a      	adds	r2, r3, #4
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	3304      	adds	r3, #4
 8004fb8:	4619      	mov	r1, r3
 8004fba:	4610      	mov	r0, r2
 8004fbc:	f7ff f8e0 	bl	8004180 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	__r._M_ptr = 0;
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	601a      	str	r2, [r3, #0]
      }
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3708      	adds	r7, #8
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <_ZNSt12__shared_ptrIN4tama20SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_ptr() noexcept
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b082      	sub	sp, #8
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
      : _M_ptr(0), _M_refcount()
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	601a      	str	r2, [r3, #0]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	3304      	adds	r3, #4
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f7fe ffc3 	bl	8003f6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
      { }
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4618      	mov	r0, r3
 8004fec:	3708      	adds	r7, #8
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}

08004ff2 <_ZNSt12_Vector_baseIN4tama4ToneESaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8004ff2:	b580      	push	{r7, lr}
 8004ff4:	b082      	sub	sp, #8
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 f845 	bl	800508a <_ZNSaIN4tama4ToneEED1Ev>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4618      	mov	r0, r3
 8005004:	3708      	adds	r7, #8
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}

0800500a <_ZNSt12_Vector_baseIN4tama4ToneESaIS1_EEC1Ev>:
      _Vector_base()
 800500a:	b580      	push	{r7, lr}
 800500c:	b082      	sub	sp, #8
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4618      	mov	r0, r3
 8005016:	f000 f85c 	bl	80050d2 <_ZNSt12_Vector_baseIN4tama4ToneESaIS1_EE12_Vector_implC1Ev>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4618      	mov	r0, r3
 800501e:	3708      	adds	r7, #8
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <_ZNSt12_Vector_baseIN4tama4ToneESaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8005024:	b580      	push	{r7, lr}
 8005026:	b082      	sub	sp, #8
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6819      	ldr	r1, [r3, #0]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 8005034:	461a      	mov	r2, r3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	1ad3      	subs	r3, r2, r3
 800503c:	10db      	asrs	r3, r3, #3
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 800503e:	461a      	mov	r2, r3
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f000 f85b 	bl	80050fc <_ZNSt12_Vector_baseIN4tama4ToneESaIS1_EE13_M_deallocateEPS1_j>
		      - this->_M_impl._M_start); }
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4618      	mov	r0, r3
 800504a:	f7ff ffd2 	bl	8004ff2 <_ZNSt12_Vector_baseIN4tama4ToneESaIS1_EE12_Vector_implD1Ev>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4618      	mov	r0, r3
 8005052:	3708      	adds	r7, #8
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <_ZNSt12_Vector_baseIN4tama4ToneESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4618      	mov	r0, r3
 8005064:	370c      	adds	r7, #12
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr

0800506e <_ZSt8_DestroyIPN4tama4ToneES1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800506e:	b580      	push	{r7, lr}
 8005070:	b084      	sub	sp, #16
 8005072:	af00      	add	r7, sp, #0
 8005074:	60f8      	str	r0, [r7, #12]
 8005076:	60b9      	str	r1, [r7, #8]
 8005078:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800507a:	68b9      	ldr	r1, [r7, #8]
 800507c:	68f8      	ldr	r0, [r7, #12]
 800507e:	f000 f850 	bl	8005122 <_ZSt8_DestroyIPN4tama4ToneEEvT_S3_>
    }
 8005082:	bf00      	nop
 8005084:	3710      	adds	r7, #16
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}

0800508a <_ZNSaIN4tama4ToneEED1Ev>:
 800508a:	b580      	push	{r7, lr}
 800508c:	b082      	sub	sp, #8
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 f852 	bl	800513c <_ZN9__gnu_cxx13new_allocatorIN4tama4ToneEED1Ev>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4618      	mov	r0, r3
 800509c:	3708      	adds	r7, #8
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}

080050a2 <_ZNKSt12__shared_ptrIN4tama11TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 80050a2:	b480      	push	{r7}
 80050a4:	b083      	sub	sp, #12
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4618      	mov	r0, r3
 80050b0:	370c      	adds	r7, #12
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr

080050ba <_ZNKSt12__shared_ptrIN4tama20SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 80050ba:	b480      	push	{r7}
 80050bc:	b083      	sub	sp, #12
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4618      	mov	r0, r3
 80050c8:	370c      	adds	r7, #12
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr

080050d2 <_ZNSt12_Vector_baseIN4tama4ToneESaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl()
 80050d2:	b580      	push	{r7, lr}
 80050d4:	b082      	sub	sp, #8
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f000 f839 	bl	8005152 <_ZNSaIN4tama4ToneEEC1Ev>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	601a      	str	r2, [r3, #0]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	605a      	str	r2, [r3, #4]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	609a      	str	r2, [r3, #8]
	{ }
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4618      	mov	r0, r3
 80050f6:	3708      	adds	r7, #8
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}

080050fc <_ZNSt12_Vector_baseIN4tama4ToneESaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	60b9      	str	r1, [r7, #8]
 8005106:	607a      	str	r2, [r7, #4]
	if (__p)
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d005      	beq.n	800511a <_ZNSt12_Vector_baseIN4tama4ToneESaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	68b9      	ldr	r1, [r7, #8]
 8005114:	4618      	mov	r0, r3
 8005116:	f000 f828 	bl	800516a <_ZNSt16allocator_traitsISaIN4tama4ToneEEE10deallocateERS2_PS1_j>
      }
 800511a:	bf00      	nop
 800511c:	3710      	adds	r7, #16
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}

08005122 <_ZSt8_DestroyIPN4tama4ToneEEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8005122:	b580      	push	{r7, lr}
 8005124:	b082      	sub	sp, #8
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
 800512a:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 800512c:	6839      	ldr	r1, [r7, #0]
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 f82a 	bl	8005188 <_ZNSt12_Destroy_auxILb1EE9__destroyIPN4tama4ToneEEEvT_S5_>
    }
 8005134:	bf00      	nop
 8005136:	3708      	adds	r7, #8
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}

0800513c <_ZN9__gnu_cxx13new_allocatorIN4tama4ToneEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4618      	mov	r0, r3
 8005148:	370c      	adds	r7, #12
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr

08005152 <_ZNSaIN4tama4ToneEEC1Ev>:
      allocator() throw() { }
 8005152:	b580      	push	{r7, lr}
 8005154:	b082      	sub	sp, #8
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 f81f 	bl	800519e <_ZN9__gnu_cxx13new_allocatorIN4tama4ToneEEC1Ev>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4618      	mov	r0, r3
 8005164:	3708      	adds	r7, #8
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}

0800516a <_ZNSt16allocator_traitsISaIN4tama4ToneEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800516a:	b580      	push	{r7, lr}
 800516c:	b084      	sub	sp, #16
 800516e:	af00      	add	r7, sp, #0
 8005170:	60f8      	str	r0, [r7, #12]
 8005172:	60b9      	str	r1, [r7, #8]
 8005174:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	68b9      	ldr	r1, [r7, #8]
 800517a:	68f8      	ldr	r0, [r7, #12]
 800517c:	f000 f81a 	bl	80051b4 <_ZN9__gnu_cxx13new_allocatorIN4tama4ToneEE10deallocateEPS2_j>
 8005180:	bf00      	nop
 8005182:	3710      	adds	r7, #16
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <_ZNSt12_Destroy_auxILb1EE9__destroyIPN4tama4ToneEEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
 8005192:	bf00      	nop
 8005194:	370c      	adds	r7, #12
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr

0800519e <_ZN9__gnu_cxx13new_allocatorIN4tama4ToneEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800519e:	b480      	push	{r7}
 80051a0:	b083      	sub	sp, #12
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4618      	mov	r0, r3
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <_ZN9__gnu_cxx13new_allocatorIN4tama4ToneEE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 80051c0:	68b8      	ldr	r0, [r7, #8]
 80051c2:	f01a fb95 	bl	801f8f0 <_ZdlPv>
      }
 80051c6:	bf00      	nop
 80051c8:	3710      	adds	r7, #16
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}

080051ce <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_ptr() = default;
 80051ce:	b580      	push	{r7, lr}
 80051d0:	b082      	sub	sp, #8
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6078      	str	r0, [r7, #4]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	3304      	adds	r3, #4
 80051da:	4618      	mov	r0, r3
 80051dc:	f7fd ff99 	bl	8003112 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4618      	mov	r0, r3
 80051e4:	3708      	adds	r7, #8
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}

080051ea <_ZNSt10shared_ptrIN4tama7TextureEED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 80051ea:	b580      	push	{r7, lr}
 80051ec:	b082      	sub	sp, #8
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4618      	mov	r0, r3
 80051f6:	f7ff ffea 	bl	80051ce <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4618      	mov	r0, r3
 80051fe:	3708      	adds	r7, #8
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}

08005204 <_ZN4tama4TextD1Ev>:
#include "../Drawable.h"
#include "../texture-loader/TextureLoader.h"

namespace tama
{
    class Text : public Drawable
 8005204:	b580      	push	{r7, lr}
 8005206:	b082      	sub	sp, #8
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	4a0d      	ldr	r2, [pc, #52]	; (8005244 <_ZN4tama4TextD1Ev+0x40>)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	601a      	str	r2, [r3, #0]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	3328      	adds	r3, #40	; 0x28
 8005216:	4618      	mov	r0, r3
 8005218:	f7ff ffe7 	bl	80051ea <_ZNSt10shared_ptrIN4tama7TextureEED1Ev>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	3310      	adds	r3, #16
 8005220:	4618      	mov	r0, r3
 8005222:	f01a fc30 	bl	801fa86 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	3308      	adds	r3, #8
 800522a:	4618      	mov	r0, r3
 800522c:	f7ff fb41 	bl	80048b2 <_ZNSt10shared_ptrIN4tama14ChangeObserverEED1Ev>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	3304      	adds	r3, #4
 8005234:	4618      	mov	r0, r3
 8005236:	f000 f88c 	bl	8005352 <_ZNSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EED1Ev>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4618      	mov	r0, r3
 800523e:	3708      	adds	r7, #8
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}
 8005244:	080247cc 	.word	0x080247cc

08005248 <_ZNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
 8005248:	b580      	push	{r7, lr}
 800524a:	b082      	sub	sp, #8
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	3304      	adds	r3, #4
 8005254:	4618      	mov	r0, r3
 8005256:	f7fd ff5c 	bl	8003112 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4618      	mov	r0, r3
 800525e:	3708      	adds	r7, #8
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <_ZNSt10shared_ptrIN4tama7ContextEED1Ev>:
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4618      	mov	r0, r3
 8005270:	f7ff ffea 	bl	8005248 <_ZNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4618      	mov	r0, r3
 8005278:	3708      	adds	r7, #8
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
	...

08005280 <_ZN4tama5StageD1Ev>:

namespace tama
{
    class Context;

class Stage : public OnInput
 8005280:	b580      	push	{r7, lr}
 8005282:	b082      	sub	sp, #8
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	4a08      	ldr	r2, [pc, #32]	; (80052ac <_ZN4tama5StageD1Ev+0x2c>)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	601a      	str	r2, [r3, #0]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	330c      	adds	r3, #12
 8005292:	4618      	mov	r0, r3
 8005294:	f7ff ffe6 	bl	8005264 <_ZNSt10shared_ptrIN4tama7ContextEED1Ev>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	3304      	adds	r3, #4
 800529c:	4618      	mov	r0, r3
 800529e:	f7fe fcbe 	bl	8003c1e <_ZNSt10shared_ptrIN4tama5SceneEED1Ev>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4618      	mov	r0, r3
 80052a6:	3708      	adds	r7, #8
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	0802361c 	.word	0x0802361c

080052b0 <_ZNSt12__shared_ptrIN4tama11TimeMonitorELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b082      	sub	sp, #8
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	3304      	adds	r3, #4
 80052bc:	4618      	mov	r0, r3
 80052be:	f7fd ff28 	bl	8003112 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4618      	mov	r0, r3
 80052c6:	3708      	adds	r7, #8
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}

080052cc <_ZNSt10shared_ptrIN4tama11TimeMonitorEED1Ev>:
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b082      	sub	sp, #8
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4618      	mov	r0, r3
 80052d8:	f7ff ffea 	bl	80052b0 <_ZNSt12__shared_ptrIN4tama11TimeMonitorELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4618      	mov	r0, r3
 80052e0:	3708      	adds	r7, #8
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}

080052e6 <_ZNSt12__shared_ptrIN4tama18TimeMonitorCreatorELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
 80052e6:	b580      	push	{r7, lr}
 80052e8:	b082      	sub	sp, #8
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	6078      	str	r0, [r7, #4]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	3304      	adds	r3, #4
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7fd ff0d 	bl	8003112 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	4618      	mov	r0, r3
 80052fc:	3708      	adds	r7, #8
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}

08005302 <_ZNSt10shared_ptrIN4tama18TimeMonitorCreatorEED1Ev>:
 8005302:	b580      	push	{r7, lr}
 8005304:	b082      	sub	sp, #8
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4618      	mov	r0, r3
 800530e:	f7ff ffea 	bl	80052e6 <_ZNSt12__shared_ptrIN4tama18TimeMonitorCreatorELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4618      	mov	r0, r3
 8005316:	3708      	adds	r7, #8
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <_ZNSt12__shared_ptrIN4tama4TextELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
 800531c:	b580      	push	{r7, lr}
 800531e:	b082      	sub	sp, #8
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	3304      	adds	r3, #4
 8005328:	4618      	mov	r0, r3
 800532a:	f7fd fef2 	bl	8003112 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4618      	mov	r0, r3
 8005332:	3708      	adds	r7, #8
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}

08005338 <_ZNSt10shared_ptrIN4tama4TextEED1Ev>:
 8005338:	b580      	push	{r7, lr}
 800533a:	b082      	sub	sp, #8
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	4618      	mov	r0, r3
 8005344:	f7ff ffea 	bl	800531c <_ZNSt12__shared_ptrIN4tama4TextELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4618      	mov	r0, r3
 800534c:	3708      	adds	r7, #8
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}

08005352 <_ZNSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EED1Ev>:
	       is_convertible<_Up*, _Tp*>, is_same<_Dp, default_delete<_Tp>>>>
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#endif

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
 8005352:	b580      	push	{r7, lr}
 8005354:	b084      	sub	sp, #16
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
      {
	auto& __ptr = _M_t._M_ptr();
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4618      	mov	r0, r3
 800535e:	f000 f887 	bl	8005470 <_ZNSt15__uniq_ptr_implIN4tama13TextureLoaderESt14default_deleteIS1_EE6_M_ptrEv>
 8005362:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d009      	beq.n	8005380 <_ZNSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EED1Ev+0x2e>
	  get_deleter()(__ptr);
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f000 f88c 	bl	800548a <_ZNSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EE11get_deleterEv>
 8005372:	4602      	mov	r2, r0
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4619      	mov	r1, r3
 800537a:	4610      	mov	r0, r2
 800537c:	f000 f892 	bl	80054a4 <_ZNKSt14default_deleteIN4tama13TextureLoaderEEclEPS1_>
	__ptr = pointer();
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2200      	movs	r2, #0
 8005384:	601a      	str	r2, [r3, #0]
      }
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4618      	mov	r0, r3
 800538a:	3710      	adds	r7, #16
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <_ZSt7forwardIRSt10shared_ptrIN4tama7ContextEEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4618      	mov	r0, r3
 800539c:	370c      	adds	r7, #12
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr

080053a6 <_ZNSt10shared_ptrIN4tama11TimeMonitorEEC1Ev>:
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }
 80053a6:	b580      	push	{r7, lr}
 80053a8:	b082      	sub	sp, #8
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	6078      	str	r0, [r7, #4]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4618      	mov	r0, r3
 80053b2:	f000 f884 	bl	80054be <_ZNSt12__shared_ptrIN4tama11TimeMonitorELN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4618      	mov	r0, r3
 80053ba:	3708      	adds	r7, #8
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <_ZNKSt19__shared_ptr_accessIN4tama18TimeMonitorCreatorELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
	return _M_get();
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f000 f889 	bl	80054e0 <_ZNKSt19__shared_ptr_accessIN4tama18TimeMonitorCreatorELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 80053ce:	4603      	mov	r3, r0
      }
 80053d0:	4618      	mov	r0, r3
 80053d2:	3708      	adds	r7, #8
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}

080053d8 <_ZNSt10shared_ptrIN4tama11TimeMonitorEEaSEOS2_>:
      operator=(shared_ptr&& __r) noexcept
 80053d8:	b590      	push	{r4, r7, lr}
 80053da:	b083      	sub	sp, #12
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	6039      	str	r1, [r7, #0]
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
 80053e2:	687c      	ldr	r4, [r7, #4]
 80053e4:	6838      	ldr	r0, [r7, #0]
 80053e6:	f7ff fce9 	bl	8004dbc <_ZSt4moveIRSt10shared_ptrIN4tama11TimeMonitorEEEONSt16remove_referenceIT_E4typeEOS6_>
 80053ea:	4603      	mov	r3, r0
 80053ec:	4619      	mov	r1, r3
 80053ee:	4620      	mov	r0, r4
 80053f0:	f000 f88d 	bl	800550e <_ZNSt12__shared_ptrIN4tama11TimeMonitorELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_>
	return *this;
 80053f4:	687b      	ldr	r3, [r7, #4]
      }
 80053f6:	4618      	mov	r0, r3
 80053f8:	370c      	adds	r7, #12
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd90      	pop	{r4, r7, pc}

080053fe <_ZNKSt19__shared_ptr_accessIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 80053fe:	b580      	push	{r7, lr}
 8005400:	b082      	sub	sp, #8
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
	return _M_get();
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 f8a0 	bl	800554c <_ZNKSt19__shared_ptr_accessIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 800540c:	4603      	mov	r3, r0
      }
 800540e:	4618      	mov	r0, r3
 8005410:	3708      	adds	r7, #8
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}

08005416 <_ZNSt10shared_ptrIN4tama4TextEEC1IS1_vEEPT_>:
	shared_ptr(_Yp* __p) : __shared_ptr<_Tp>(__p) { }
 8005416:	b580      	push	{r7, lr}
 8005418:	b082      	sub	sp, #8
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
 800541e:	6039      	str	r1, [r7, #0]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6839      	ldr	r1, [r7, #0]
 8005424:	4618      	mov	r0, r3
 8005426:	f000 f89d 	bl	8005564 <_ZNSt12__shared_ptrIN4tama4TextELN9__gnu_cxx12_Lock_policyE0EEC1IS1_vEEPT_>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4618      	mov	r0, r3
 800542e:	3708      	adds	r7, #8
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <_ZSt4moveIRSt10shared_ptrIN4tama4TextEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8005434:	b480      	push	{r7}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4618      	mov	r0, r3
 8005440:	370c      	adds	r7, #12
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr

0800544a <_ZNSt10shared_ptrIN4tama8DrawableEEC1INS0_4TextEvEEOS_IT_E>:
	shared_ptr(shared_ptr<_Yp>&& __r) noexcept
 800544a:	b590      	push	{r4, r7, lr}
 800544c:	b083      	sub	sp, #12
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
 8005452:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 8005454:	687c      	ldr	r4, [r7, #4]
 8005456:	6838      	ldr	r0, [r7, #0]
 8005458:	f7ff ffec 	bl	8005434 <_ZSt4moveIRSt10shared_ptrIN4tama4TextEEEONSt16remove_referenceIT_E4typeEOS6_>
 800545c:	4603      	mov	r3, r0
 800545e:	4619      	mov	r1, r3
 8005460:	4620      	mov	r0, r4
 8005462:	f000 f897 	bl	8005594 <_ZNSt12__shared_ptrIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0EEC1INS0_4TextEvEEOS_IT_LS3_0EE>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4618      	mov	r0, r3
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	bd90      	pop	{r4, r7, pc}

08005470 <_ZNSt15__uniq_ptr_implIN4tama13TextureLoaderESt14default_deleteIS1_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8005470:	b580      	push	{r7, lr}
 8005472:	b082      	sub	sp, #8
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	4618      	mov	r0, r3
 800547c:	f000 f8a8 	bl	80055d0 <_ZSt3getILj0EJPN4tama13TextureLoaderESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 8005480:	4603      	mov	r3, r0
 8005482:	4618      	mov	r0, r3
 8005484:	3708      	adds	r7, #8
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}

0800548a <_ZNSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EE11get_deleterEv>:
      get() const noexcept
      { return _M_t._M_ptr(); }

      /// Return a reference to the stored deleter.
      deleter_type&
      get_deleter() noexcept
 800548a:	b580      	push	{r7, lr}
 800548c:	b082      	sub	sp, #8
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4618      	mov	r0, r3
 8005496:	f000 f8a8 	bl	80055ea <_ZNSt15__uniq_ptr_implIN4tama13TextureLoaderESt14default_deleteIS1_EE10_M_deleterEv>
 800549a:	4603      	mov	r3, r0
 800549c:	4618      	mov	r0, r3
 800549e:	3708      	adds	r7, #8
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <_ZNKSt14default_deleteIN4tama13TextureLoaderEEclEPS1_>:
      operator()(_Tp* __ptr) const
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b082      	sub	sp, #8
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	6039      	str	r1, [r7, #0]
	delete __ptr;
 80054ae:	2104      	movs	r1, #4
 80054b0:	6838      	ldr	r0, [r7, #0]
 80054b2:	f01a fa02 	bl	801f8ba <_ZdlPvj>
      }
 80054b6:	bf00      	nop
 80054b8:	3708      	adds	r7, #8
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}

080054be <_ZNSt12__shared_ptrIN4tama11TimeMonitorELN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_ptr() noexcept
 80054be:	b580      	push	{r7, lr}
 80054c0:	b082      	sub	sp, #8
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
      : _M_ptr(0), _M_refcount()
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	601a      	str	r2, [r3, #0]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	3304      	adds	r3, #4
 80054d0:	4618      	mov	r0, r3
 80054d2:	f7fe fd4c 	bl	8003f6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
      { }
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4618      	mov	r0, r3
 80054da:	3708      	adds	r7, #8
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}

080054e0 <_ZNKSt19__shared_ptr_accessIN4tama18TimeMonitorCreatorELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b082      	sub	sp, #8
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f000 f88b 	bl	8005604 <_ZNKSt12__shared_ptrIN4tama18TimeMonitorCreatorELN9__gnu_cxx12_Lock_policyE0EE3getEv>
 80054ee:	4603      	mov	r3, r0
 80054f0:	4618      	mov	r0, r3
 80054f2:	3708      	adds	r7, #8
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <_ZSt4moveIRSt12__shared_ptrIN4tama11TimeMonitorELN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4618      	mov	r0, r3
 8005504:	370c      	adds	r7, #12
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr

0800550e <_ZNSt12__shared_ptrIN4tama11TimeMonitorELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_>:
      operator=(__shared_ptr&& __r) noexcept
 800550e:	b580      	push	{r7, lr}
 8005510:	b084      	sub	sp, #16
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
 8005516:	6039      	str	r1, [r7, #0]
	__shared_ptr(std::move(__r)).swap(*this);
 8005518:	6838      	ldr	r0, [r7, #0]
 800551a:	f7ff ffed 	bl	80054f8 <_ZSt4moveIRSt12__shared_ptrIN4tama11TimeMonitorELN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS8_>
 800551e:	4602      	mov	r2, r0
 8005520:	f107 0308 	add.w	r3, r7, #8
 8005524:	4611      	mov	r1, r2
 8005526:	4618      	mov	r0, r3
 8005528:	f7ff fd34 	bl	8004f94 <_ZNSt12__shared_ptrIN4tama11TimeMonitorELN9__gnu_cxx12_Lock_policyE0EEC1EOS4_>
 800552c:	f107 0308 	add.w	r3, r7, #8
 8005530:	6879      	ldr	r1, [r7, #4]
 8005532:	4618      	mov	r0, r3
 8005534:	f000 f872 	bl	800561c <_ZNSt12__shared_ptrIN4tama11TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE4swapERS4_>
 8005538:	f107 0308 	add.w	r3, r7, #8
 800553c:	4618      	mov	r0, r3
 800553e:	f7ff feb7 	bl	80052b0 <_ZNSt12__shared_ptrIN4tama11TimeMonitorELN9__gnu_cxx12_Lock_policyE0EED1Ev>
	return *this;
 8005542:	687b      	ldr	r3, [r7, #4]
      }
 8005544:	4618      	mov	r0, r3
 8005546:	3710      	adds	r7, #16
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <_ZNKSt19__shared_ptr_accessIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 800554c:	b580      	push	{r7, lr}
 800554e:	b082      	sub	sp, #8
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f000 f878 	bl	800564a <_ZNKSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE3getEv>
 800555a:	4603      	mov	r3, r0
 800555c:	4618      	mov	r0, r3
 800555e:	3708      	adds	r7, #8
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <_ZNSt12__shared_ptrIN4tama4TextELN9__gnu_cxx12_Lock_policyE0EEC1IS1_vEEPT_>:
	__shared_ptr(_Yp* __p)
 8005564:	b590      	push	{r4, r7, lr}
 8005566:	b085      	sub	sp, #20
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	683a      	ldr	r2, [r7, #0]
 8005572:	601a      	str	r2, [r3, #0]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	3304      	adds	r3, #4
 8005578:	4622      	mov	r2, r4
 800557a:	6839      	ldr	r1, [r7, #0]
 800557c:	4618      	mov	r0, r3
 800557e:	f000 f870 	bl	8005662 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama4TextEEET_St17integral_constantIbLb0EE>
	  _M_enable_shared_from_this_with(__p);
 8005582:	6839      	ldr	r1, [r7, #0]
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f000 f87b 	bl	8005680 <_ZNSt12__shared_ptrIN4tama4TextELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	}
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4618      	mov	r0, r3
 800558e:	3714      	adds	r7, #20
 8005590:	46bd      	mov	sp, r7
 8005592:	bd90      	pop	{r4, r7, pc}

08005594 <_ZNSt12__shared_ptrIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0EEC1INS0_4TextEvEEOS_IT_LS3_0EE>:
	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 8005594:	b580      	push	{r7, lr}
 8005596:	b082      	sub	sp, #8
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount()
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	601a      	str	r2, [r3, #0]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	3304      	adds	r3, #4
 80055aa:	4618      	mov	r0, r3
 80055ac:	f7fe fcdf 	bl	8003f6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _M_refcount._M_swap(__r._M_refcount);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	1d1a      	adds	r2, r3, #4
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	3304      	adds	r3, #4
 80055b8:	4619      	mov	r1, r3
 80055ba:	4610      	mov	r0, r2
 80055bc:	f7fe fde0 	bl	8004180 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  __r._M_ptr = 0;
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	2200      	movs	r2, #0
 80055c4:	601a      	str	r2, [r3, #0]
	}
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4618      	mov	r0, r3
 80055ca:	3708      	adds	r7, #8
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <_ZSt3getILj0EJPN4tama13TextureLoaderESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  /// Return a reference to the ith element of a tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b082      	sub	sp, #8
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4618      	mov	r0, r3
 80055dc:	f000 f85b 	bl	8005696 <_ZSt12__get_helperILj0EPN4tama13TextureLoaderEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>
 80055e0:	4603      	mov	r3, r0
 80055e2:	4618      	mov	r0, r3
 80055e4:	3708      	adds	r7, #8
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}

080055ea <_ZNSt15__uniq_ptr_implIN4tama13TextureLoaderESt14default_deleteIS1_EE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 80055ea:	b580      	push	{r7, lr}
 80055ec:	b082      	sub	sp, #8
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4618      	mov	r0, r3
 80055f6:	f000 f85a 	bl	80056ae <_ZSt3getILj1EJPN4tama13TextureLoaderESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 80055fa:	4603      	mov	r3, r0
 80055fc:	4618      	mov	r0, r3
 80055fe:	3708      	adds	r7, #8
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}

08005604 <_ZNKSt12__shared_ptrIN4tama18TimeMonitorCreatorELN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4618      	mov	r0, r3
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr

0800561c <_ZNSt12__shared_ptrIN4tama11TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE4swapERS4_>:
      swap(__shared_ptr<_Tp, _Lp>& __other) noexcept
 800561c:	b580      	push	{r7, lr}
 800561e:	b082      	sub	sp, #8
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]
	std::swap(_M_ptr, __other._M_ptr);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	683a      	ldr	r2, [r7, #0]
 800562a:	4611      	mov	r1, r2
 800562c:	4618      	mov	r0, r3
 800562e:	f000 f855 	bl	80056dc <_ZSt4swapIPN4tama11TimeMonitorEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS7_ESt18is_move_assignableIS7_EEE5valueEvE4typeERS7_SH_>
	_M_refcount._M_swap(__other._M_refcount);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	1d1a      	adds	r2, r3, #4
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	3304      	adds	r3, #4
 800563a:	4619      	mov	r1, r3
 800563c:	4610      	mov	r0, r2
 800563e:	f7fe fd9f 	bl	8004180 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
      }
 8005642:	bf00      	nop
 8005644:	3708      	adds	r7, #8
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}

0800564a <_ZNKSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 800564a:	b480      	push	{r7}
 800564c:	b083      	sub	sp, #12
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4618      	mov	r0, r3
 8005658:	370c      	adds	r7, #12
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr

08005662 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama4TextEEET_St17integral_constantIbLb0EE>:
	__shared_count(_Ptr __p, /* is_array = */ false_type)
 8005662:	b580      	push	{r7, lr}
 8005664:	b084      	sub	sp, #16
 8005666:	af00      	add	r7, sp, #0
 8005668:	60f8      	str	r0, [r7, #12]
 800566a:	60b9      	str	r1, [r7, #8]
 800566c:	713a      	strb	r2, [r7, #4]
	: __shared_count(__p)
 800566e:	68b9      	ldr	r1, [r7, #8]
 8005670:	68f8      	ldr	r0, [r7, #12]
 8005672:	f000 f852 	bl	800571a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama4TextEEET_>
	{ }
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	4618      	mov	r0, r3
 800567a:	3710      	adds	r7, #16
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <_ZNSt12__shared_ptrIN4tama4TextELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
	{ }
 800568a:	bf00      	nop
 800568c:	370c      	adds	r7, #12
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr

08005696 <_ZSt12__get_helperILj0EPN4tama13TextureLoaderEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8005696:	b580      	push	{r7, lr}
 8005698:	b082      	sub	sp, #8
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 f853 	bl	800574a <_ZNSt11_Tuple_implILj0EJPN4tama13TextureLoaderESt14default_deleteIS1_EEE7_M_headERS5_>
 80056a4:	4603      	mov	r3, r0
 80056a6:	4618      	mov	r0, r3
 80056a8:	3708      	adds	r7, #8
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}

080056ae <_ZSt3getILj1EJPN4tama13TextureLoaderESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 80056ae:	b580      	push	{r7, lr}
 80056b0:	b082      	sub	sp, #8
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 f854 	bl	8005764 <_ZSt12__get_helperILj1ESt14default_deleteIN4tama13TextureLoaderEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80056bc:	4603      	mov	r3, r0
 80056be:	4618      	mov	r0, r3
 80056c0:	3708      	adds	r7, #8
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}

080056c6 <_ZSt4moveIRPN4tama11TimeMonitorEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80056c6:	b480      	push	{r7}
 80056c8:	b083      	sub	sp, #12
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4618      	mov	r0, r3
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <_ZSt4swapIPN4tama11TimeMonitorEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS7_ESt18is_move_assignableIS7_EEE5valueEvE4typeERS7_SH_>:
    swap(_Tp& __a, _Tp& __b)
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f7ff ffed 	bl	80056c6 <_ZSt4moveIRPN4tama11TimeMonitorEEONSt16remove_referenceIT_E4typeEOS5_>
 80056ec:	4603      	mov	r3, r0
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 80056f2:	6838      	ldr	r0, [r7, #0]
 80056f4:	f7ff ffe7 	bl	80056c6 <_ZSt4moveIRPN4tama11TimeMonitorEEONSt16remove_referenceIT_E4typeEOS5_>
 80056f8:	4603      	mov	r3, r0
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8005700:	f107 030c 	add.w	r3, r7, #12
 8005704:	4618      	mov	r0, r3
 8005706:	f7ff ffde 	bl	80056c6 <_ZSt4moveIRPN4tama11TimeMonitorEEONSt16remove_referenceIT_E4typeEOS5_>
 800570a:	4603      	mov	r3, r0
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	601a      	str	r2, [r3, #0]
    }
 8005712:	bf00      	nop
 8005714:	3710      	adds	r7, #16
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}

0800571a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama4TextEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 800571a:	b590      	push	{r4, r7, lr}
 800571c:	b083      	sub	sp, #12
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
 8005722:	6039      	str	r1, [r7, #0]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	601a      	str	r2, [r3, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 800572a:	2010      	movs	r0, #16
 800572c:	f01a f8c7 	bl	801f8be <_Znwj>
 8005730:	4603      	mov	r3, r0
 8005732:	461c      	mov	r4, r3
 8005734:	6839      	ldr	r1, [r7, #0]
 8005736:	4620      	mov	r0, r4
 8005738:	f000 f820 	bl	800577c <_ZNSt15_Sp_counted_ptrIPN4tama4TextELN9__gnu_cxx12_Lock_policyE0EEC1ES2_>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	601c      	str	r4, [r3, #0]
	}
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	4618      	mov	r0, r3
 8005744:	370c      	adds	r7, #12
 8005746:	46bd      	mov	sp, r7
 8005748:	bd90      	pop	{r4, r7, pc}

0800574a <_ZNSt11_Tuple_implILj0EJPN4tama13TextureLoaderESt14default_deleteIS1_EEE7_M_headERS5_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800574a:	b580      	push	{r7, lr}
 800574c:	b082      	sub	sp, #8
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4618      	mov	r0, r3
 8005756:	f000 f827 	bl	80057a8 <_ZNSt10_Head_baseILj0EPN4tama13TextureLoaderELb0EE7_M_headERS3_>
 800575a:	4603      	mov	r3, r0
 800575c:	4618      	mov	r0, r3
 800575e:	3708      	adds	r7, #8
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <_ZSt12__get_helperILj1ESt14default_deleteIN4tama13TextureLoaderEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8005764:	b580      	push	{r7, lr}
 8005766:	b082      	sub	sp, #8
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f000 f826 	bl	80057be <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN4tama13TextureLoaderEEEE7_M_headERS4_>
 8005772:	4603      	mov	r3, r0
 8005774:	4618      	mov	r0, r3
 8005776:	3708      	adds	r7, #8
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}

0800577c <_ZNSt15_Sp_counted_ptrIPN4tama4TextELN9__gnu_cxx12_Lock_policyE0EEC1ES2_>:
      _Sp_counted_ptr(_Ptr __p) noexcept
 800577c:	b580      	push	{r7, lr}
 800577e:	b082      	sub	sp, #8
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
      : _M_ptr(__p) { }
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4618      	mov	r0, r3
 800578a:	f7fe ffdd 	bl	8004748 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800578e:	4a05      	ldr	r2, [pc, #20]	; (80057a4 <_ZNSt15_Sp_counted_ptrIPN4tama4TextELN9__gnu_cxx12_Lock_policyE0EEC1ES2_+0x28>)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	601a      	str	r2, [r3, #0]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	683a      	ldr	r2, [r7, #0]
 8005798:	60da      	str	r2, [r3, #12]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4618      	mov	r0, r3
 800579e:	3708      	adds	r7, #8
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	08023658 	.word	0x08023658

080057a8 <_ZNSt10_Head_baseILj0EPN4tama13TextureLoaderELb0EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4618      	mov	r0, r3
 80057b4:	370c      	adds	r7, #12
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr

080057be <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN4tama13TextureLoaderEEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80057be:	b580      	push	{r7, lr}
 80057c0:	b082      	sub	sp, #8
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f000 f805 	bl	80057d6 <_ZNSt10_Head_baseILj1ESt14default_deleteIN4tama13TextureLoaderEELb1EE7_M_headERS4_>
 80057cc:	4603      	mov	r3, r0
 80057ce:	4618      	mov	r0, r3
 80057d0:	3708      	adds	r7, #8
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}

080057d6 <_ZNSt10_Head_baseILj1ESt14default_deleteIN4tama13TextureLoaderEELb1EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b; }
 80057d6:	b480      	push	{r7}
 80057d8:	b083      	sub	sp, #12
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4618      	mov	r0, r3
 80057e2:	370c      	adds	r7, #12
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <_ZNSt15_Sp_counted_ptrIPN4tama4TextELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b082      	sub	sp, #8
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	4a05      	ldr	r2, [pc, #20]	; (800580c <_ZNSt15_Sp_counted_ptrIPN4tama4TextELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	601a      	str	r2, [r3, #0]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4618      	mov	r0, r3
 80057fe:	f7fe fb29 	bl	8003e54 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4618      	mov	r0, r3
 8005806:	3708      	adds	r7, #8
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}
 800580c:	08023658 	.word	0x08023658

08005810 <_ZNSt15_Sp_counted_ptrIPN4tama4TextELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 8005810:	b580      	push	{r7, lr}
 8005812:	b082      	sub	sp, #8
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f7ff ffe7 	bl	80057ec <_ZNSt15_Sp_counted_ptrIPN4tama4TextELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800581e:	2110      	movs	r1, #16
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f01a f84a 	bl	801f8ba <_ZdlPvj>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4618      	mov	r0, r3
 800582a:	3708      	adds	r7, #8
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}

08005830 <_ZNSt15_Sp_counted_ptrIPN4tama4TextELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8005830:	b590      	push	{r4, r7, lr}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
      { delete _M_ptr; }
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	68dc      	ldr	r4, [r3, #12]
 800583c:	2c00      	cmp	r4, #0
 800583e:	d006      	beq.n	800584e <_ZNSt15_Sp_counted_ptrIPN4tama4TextELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1e>
 8005840:	4620      	mov	r0, r4
 8005842:	f7ff fcdf 	bl	8005204 <_ZN4tama4TextD1Ev>
 8005846:	2148      	movs	r1, #72	; 0x48
 8005848:	4620      	mov	r0, r4
 800584a:	f01a f836 	bl	801f8ba <_ZdlPvj>
 800584e:	bf00      	nop
 8005850:	370c      	adds	r7, #12
 8005852:	46bd      	mov	sp, r7
 8005854:	bd90      	pop	{r4, r7, pc}

08005856 <_ZNSt15_Sp_counted_ptrIPN4tama4TextELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8005856:	b580      	push	{r7, lr}
 8005858:	b082      	sub	sp, #8
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
      { delete this; }
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d002      	beq.n	800586a <_ZNSt15_Sp_counted_ptrIPN4tama4TextELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x14>
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f7ff ffd3 	bl	8005810 <_ZNSt15_Sp_counted_ptrIPN4tama4TextELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 800586a:	bf00      	nop
 800586c:	3708      	adds	r7, #8
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}

08005872 <_ZNSt15_Sp_counted_ptrIPN4tama4TextELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info&) noexcept
 8005872:	b480      	push	{r7}
 8005874:	b083      	sub	sp, #12
 8005876:	af00      	add	r7, sp, #0
 8005878:	6078      	str	r0, [r7, #4]
 800587a:	6039      	str	r1, [r7, #0]
      { return nullptr; }
 800587c:	2300      	movs	r3, #0
 800587e:	4618      	mov	r0, r3
 8005880:	370c      	adds	r7, #12
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr

0800588a <_ZNSt12__shared_ptrIN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_ptr() = default;
 800588a:	b580      	push	{r7, lr}
 800588c:	b082      	sub	sp, #8
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	3304      	adds	r3, #4
 8005896:	4618      	mov	r0, r3
 8005898:	f7fd fc3b 	bl	8003112 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	4618      	mov	r0, r3
 80058a0:	3708      	adds	r7, #8
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}

080058a6 <_ZNSt10shared_ptrIN4tama11SoundPlayerEED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 80058a6:	b580      	push	{r7, lr}
 80058a8:	b082      	sub	sp, #8
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4618      	mov	r0, r3
 80058b2:	f7ff ffea 	bl	800588a <_ZNSt12__shared_ptrIN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4618      	mov	r0, r3
 80058ba:	3708      	adds	r7, #8
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}

080058c0 <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b082      	sub	sp, #8
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	3304      	adds	r3, #4
 80058cc:	4618      	mov	r0, r3
 80058ce:	f7fd fc20 	bl	8003112 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4618      	mov	r0, r3
 80058d6:	3708      	adds	r7, #8
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}

080058dc <_ZNSt10shared_ptrIN4tama6SpriteEED1Ev>:
 80058dc:	b580      	push	{r7, lr}
 80058de:	b082      	sub	sp, #8
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	4618      	mov	r0, r3
 80058e8:	f7ff ffea 	bl	80058c0 <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	4618      	mov	r0, r3
 80058f0:	3708      	adds	r7, #8
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
	...

080058f8 <_ZN4tama6SpriteD1Ev>:
#include <memory>
#include "../Drawable.h"

namespace tama
{
    class Sprite : public Drawable
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b082      	sub	sp, #8
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	4a08      	ldr	r2, [pc, #32]	; (8005924 <_ZN4tama6SpriteD1Ev+0x2c>)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	601a      	str	r2, [r3, #0]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	3318      	adds	r3, #24
 800590a:	4618      	mov	r0, r3
 800590c:	f7fe ffd1 	bl	80048b2 <_ZNSt10shared_ptrIN4tama14ChangeObserverEED1Ev>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	3304      	adds	r3, #4
 8005914:	4618      	mov	r0, r3
 8005916:	f7ff fc68 	bl	80051ea <_ZNSt10shared_ptrIN4tama7TextureEED1Ev>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4618      	mov	r0, r3
 800591e:	3708      	adds	r7, #8
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}
 8005924:	080237b8 	.word	0x080237b8

08005928 <_ZNSt5arrayIN4tama6SpriteELj9EEC1Ev>:
   *
   *  @tparam  Tp  Type of element. Required to be a complete type.
   *  @tparam  N  Number of elements.
  */
  template<typename _Tp, std::size_t _Nm>
    struct array
 8005928:	b5b0      	push	{r4, r5, r7, lr}
 800592a:	b082      	sub	sp, #8
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2408      	movs	r4, #8
 8005934:	461d      	mov	r5, r3
 8005936:	2c00      	cmp	r4, #0
 8005938:	db05      	blt.n	8005946 <_ZNSt5arrayIN4tama6SpriteELj9EEC1Ev+0x1e>
 800593a:	4628      	mov	r0, r5
 800593c:	f009 f8aa 	bl	800ea94 <_ZN4tama6SpriteC1Ev>
 8005940:	3520      	adds	r5, #32
 8005942:	3c01      	subs	r4, #1
 8005944:	e7f7      	b.n	8005936 <_ZNSt5arrayIN4tama6SpriteELj9EEC1Ev+0xe>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	4618      	mov	r0, r3
 800594a:	3708      	adds	r7, #8
 800594c:	46bd      	mov	sp, r7
 800594e:	bdb0      	pop	{r4, r5, r7, pc}

08005950 <_ZNSt12__shared_ptrIN4tama13TextureLoaderELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
 8005950:	b580      	push	{r7, lr}
 8005952:	b082      	sub	sp, #8
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	3304      	adds	r3, #4
 800595c:	4618      	mov	r0, r3
 800595e:	f7fd fbd8 	bl	8003112 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4618      	mov	r0, r3
 8005966:	3708      	adds	r7, #8
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}

0800596c <_ZNSt10shared_ptrIN4tama13TextureLoaderEED1Ev>:
 800596c:	b580      	push	{r7, lr}
 800596e:	b082      	sub	sp, #8
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4618      	mov	r0, r3
 8005978:	f7ff ffea 	bl	8005950 <_ZNSt12__shared_ptrIN4tama13TextureLoaderELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4618      	mov	r0, r3
 8005980:	3708      	adds	r7, #8
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}

08005986 <_ZN4tama8DrawableaSEOS0_>:
#include "../../../common/observers/ChangeObserver.h"
#include "texture.h"

namespace tama
{
    class Drawable
 8005986:	b480      	push	{r7}
 8005988:	b083      	sub	sp, #12
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
 800598e:	6039      	str	r1, [r7, #0]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4618      	mov	r0, r3
 8005994:	370c      	adds	r7, #12
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr

0800599e <_ZN4tama6SpriteaSEOS0_>:
 800599e:	b580      	push	{r7, lr}
 80059a0:	b082      	sub	sp, #8
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
 80059a6:	6039      	str	r1, [r7, #0]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	683a      	ldr	r2, [r7, #0]
 80059ac:	4611      	mov	r1, r2
 80059ae:	4618      	mov	r0, r3
 80059b0:	f7ff ffe9 	bl	8005986 <_ZN4tama8DrawableaSEOS0_>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	1d1a      	adds	r2, r3, #4
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	3304      	adds	r3, #4
 80059bc:	4619      	mov	r1, r3
 80059be:	4610      	mov	r0, r2
 80059c0:	f000 f8bf 	bl	8005b42 <_ZNSt10shared_ptrIN4tama7TextureEEaSEOS2_>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	683a      	ldr	r2, [r7, #0]
 80059c8:	330c      	adds	r3, #12
 80059ca:	320c      	adds	r2, #12
 80059cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80059d0:	e883 0003 	stmia.w	r3, {r0, r1}
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	7d1a      	ldrb	r2, [r3, #20]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	751a      	strb	r2, [r3, #20]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f103 0218 	add.w	r2, r3, #24
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	3318      	adds	r3, #24
 80059e6:	4619      	mov	r1, r3
 80059e8:	4610      	mov	r0, r2
 80059ea:	f000 f88c 	bl	8005b06 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEaSEOS2_>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4618      	mov	r0, r3
 80059f2:	3708      	adds	r7, #8
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}

080059f8 <_ZNSt5arrayIN4tama6SpriteELj9EE2atEj>:
      constexpr const_reference
      operator[](size_type __n) const noexcept
      { return _AT_Type::_S_ref(_M_elems, __n); }

      _GLIBCXX17_CONSTEXPR reference
      at(size_type __n)
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b082      	sub	sp, #8
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
      {
	if (__n >= _Nm)
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	2b08      	cmp	r3, #8
 8005a06:	d904      	bls.n	8005a12 <_ZNSt5arrayIN4tama6SpriteELj9EE2atEj+0x1a>
	  std::__throw_out_of_range_fmt(__N("array::at: __n (which is %zu) "
 8005a08:	2209      	movs	r2, #9
 8005a0a:	6839      	ldr	r1, [r7, #0]
 8005a0c:	4806      	ldr	r0, [pc, #24]	; (8005a28 <_ZNSt5arrayIN4tama6SpriteELj9EE2atEj+0x30>)
 8005a0e:	f019 ff90 	bl	801f932 <_ZSt24__throw_out_of_range_fmtPKcz>
					    ">= _Nm (which is %zu)"),
					__n, _Nm);
	return _AT_Type::_S_ref(_M_elems, __n);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6839      	ldr	r1, [r7, #0]
 8005a16:	4618      	mov	r0, r3
 8005a18:	f000 f8b5 	bl	8005b86 <_ZNSt14__array_traitsIN4tama6SpriteELj9EE6_S_refERA9_KS1_j>
 8005a1c:	4603      	mov	r3, r0
      }
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3708      	adds	r7, #8
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
 8005a26:	bf00      	nop
 8005a28:	08020960 	.word	0x08020960

08005a2c <_ZNKSt19__shared_ptr_accessIN4tama13TextureLoaderELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b082      	sub	sp, #8
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
	return _M_get();
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f000 f8b5 	bl	8005ba4 <_ZNKSt19__shared_ptr_accessIN4tama13TextureLoaderELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 8005a3a:	4603      	mov	r3, r0
      }
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3708      	adds	r7, #8
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <_ZSt7forwardISt10shared_ptrIN4tama7TextureEEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005a44:	b480      	push	{r7}
 8005a46:	b083      	sub	sp, #12
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4618      	mov	r0, r3
 8005a50:	370c      	adds	r7, #12
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr

08005a5a <_ZSt7forwardIN4tama5Vec2dEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005a5a:	b480      	push	{r7}
 8005a5c:	b083      	sub	sp, #12
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4618      	mov	r0, r3
 8005a66:	370c      	adds	r7, #12
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr

08005a70 <_ZSt11make_sharedIN4tama6SpriteEJSt10shared_ptrINS0_7TextureEENS0_5Vec2dEEES2_IT_EDpOT0_>:
    make_shared(_Args&&... __args)
 8005a70:	b590      	push	{r4, r7, lr}
 8005a72:	b087      	sub	sp, #28
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	60f8      	str	r0, [r7, #12]
 8005a78:	60b9      	str	r1, [r7, #8]
 8005a7a:	607a      	str	r2, [r7, #4]
				       std::forward<_Args>(__args)...);
 8005a7c:	f107 0314 	add.w	r3, r7, #20
 8005a80:	4618      	mov	r0, r3
 8005a82:	f000 f89b 	bl	8005bbc <_ZNSaIN4tama6SpriteEEC1Ev>
 8005a86:	68b8      	ldr	r0, [r7, #8]
 8005a88:	f7ff ffdc 	bl	8005a44 <_ZSt7forwardISt10shared_ptrIN4tama7TextureEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8005a8c:	4604      	mov	r4, r0
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f7ff ffe3 	bl	8005a5a <_ZSt7forwardIN4tama5Vec2dEEOT_RNSt16remove_referenceIS2_E4typeE>
 8005a94:	4603      	mov	r3, r0
 8005a96:	68f8      	ldr	r0, [r7, #12]
 8005a98:	f107 0114 	add.w	r1, r7, #20
 8005a9c:	4622      	mov	r2, r4
 8005a9e:	f000 f8a5 	bl	8005bec <_ZSt15allocate_sharedIN4tama6SpriteESaIS1_EJSt10shared_ptrINS0_7TextureEENS0_5Vec2dEEES3_IT_ERKT0_DpOT1_>
 8005aa2:	f107 0314 	add.w	r3, r7, #20
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f000 f894 	bl	8005bd4 <_ZNSaIN4tama6SpriteEED1Ev>
    }
 8005aac:	68f8      	ldr	r0, [r7, #12]
 8005aae:	371c      	adds	r7, #28
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd90      	pop	{r4, r7, pc}

08005ab4 <_ZSt4moveIRSt10shared_ptrIN4tama6SpriteEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8005ab4:	b480      	push	{r7}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4618      	mov	r0, r3
 8005ac0:	370c      	adds	r7, #12
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr

08005aca <_ZNSt10shared_ptrIN4tama8DrawableEEC1INS0_6SpriteEvEEOS_IT_E>:
	shared_ptr(shared_ptr<_Yp>&& __r) noexcept
 8005aca:	b590      	push	{r4, r7, lr}
 8005acc:	b083      	sub	sp, #12
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]
 8005ad2:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 8005ad4:	687c      	ldr	r4, [r7, #4]
 8005ad6:	6838      	ldr	r0, [r7, #0]
 8005ad8:	f7ff ffec 	bl	8005ab4 <_ZSt4moveIRSt10shared_ptrIN4tama6SpriteEEEONSt16remove_referenceIT_E4typeEOS6_>
 8005adc:	4603      	mov	r3, r0
 8005ade:	4619      	mov	r1, r3
 8005ae0:	4620      	mov	r0, r4
 8005ae2:	f000 f89d 	bl	8005c20 <_ZNSt12__shared_ptrIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0EEC1INS0_6SpriteEvEEOS_IT_LS3_0EE>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4618      	mov	r0, r3
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd90      	pop	{r4, r7, pc}

08005af0 <_ZSt4moveIRSt10shared_ptrIN4tama14ChangeObserverEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8005af0:	b480      	push	{r7}
 8005af2:	b083      	sub	sp, #12
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4618      	mov	r0, r3
 8005afc:	370c      	adds	r7, #12
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr

08005b06 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEaSEOS2_>:
      operator=(shared_ptr&& __r) noexcept
 8005b06:	b590      	push	{r4, r7, lr}
 8005b08:	b083      	sub	sp, #12
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	6078      	str	r0, [r7, #4]
 8005b0e:	6039      	str	r1, [r7, #0]
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
 8005b10:	687c      	ldr	r4, [r7, #4]
 8005b12:	6838      	ldr	r0, [r7, #0]
 8005b14:	f7ff ffec 	bl	8005af0 <_ZSt4moveIRSt10shared_ptrIN4tama14ChangeObserverEEEONSt16remove_referenceIT_E4typeEOS6_>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	4619      	mov	r1, r3
 8005b1c:	4620      	mov	r0, r4
 8005b1e:	f000 f8c7 	bl	8005cb0 <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_>
	return *this;
 8005b22:	687b      	ldr	r3, [r7, #4]
      }
 8005b24:	4618      	mov	r0, r3
 8005b26:	370c      	adds	r7, #12
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd90      	pop	{r4, r7, pc}

08005b2c <_ZSt4moveIRSt10shared_ptrIN4tama7TextureEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8005b2c:	b480      	push	{r7}
 8005b2e:	b083      	sub	sp, #12
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	4618      	mov	r0, r3
 8005b38:	370c      	adds	r7, #12
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr

08005b42 <_ZNSt10shared_ptrIN4tama7TextureEEaSEOS2_>:
      operator=(shared_ptr&& __r) noexcept
 8005b42:	b590      	push	{r4, r7, lr}
 8005b44:	b083      	sub	sp, #12
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6078      	str	r0, [r7, #4]
 8005b4a:	6039      	str	r1, [r7, #0]
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
 8005b4c:	687c      	ldr	r4, [r7, #4]
 8005b4e:	6838      	ldr	r0, [r7, #0]
 8005b50:	f7ff ffec 	bl	8005b2c <_ZSt4moveIRSt10shared_ptrIN4tama7TextureEEEONSt16remove_referenceIT_E4typeEOS6_>
 8005b54:	4603      	mov	r3, r0
 8005b56:	4619      	mov	r1, r3
 8005b58:	4620      	mov	r0, r4
 8005b5a:	f000 f8d3 	bl	8005d04 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_>
	return *this;
 8005b5e:	687b      	ldr	r3, [r7, #4]
      }
 8005b60:	4618      	mov	r0, r3
 8005b62:	370c      	adds	r7, #12
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd90      	pop	{r4, r7, pc}

08005b68 <_ZNSt10shared_ptrIN4tama6SpriteEEC1IS1_vEEPT_>:
	shared_ptr(_Yp* __p) : __shared_ptr<_Tp>(__p) { }
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b082      	sub	sp, #8
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	6039      	str	r1, [r7, #0]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6839      	ldr	r1, [r7, #0]
 8005b76:	4618      	mov	r0, r3
 8005b78:	f000 f8e3 	bl	8005d42 <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EEC1IS1_vEEPT_>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3708      	adds	r7, #8
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}

08005b86 <_ZNSt14__array_traitsIN4tama6SpriteELj9EE6_S_refERA9_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8005b86:	b480      	push	{r7}
 8005b88:	b083      	sub	sp, #12
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]
 8005b8e:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	015b      	lsls	r3, r3, #5
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	4413      	add	r3, r2
 8005b98:	4618      	mov	r0, r3
 8005b9a:	370c      	adds	r7, #12
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr

08005ba4 <_ZNKSt19__shared_ptr_accessIN4tama13TextureLoaderELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b082      	sub	sp, #8
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f000 f8e0 	bl	8005d72 <_ZNKSt12__shared_ptrIN4tama13TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE3getEv>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3708      	adds	r7, #8
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <_ZNSaIN4tama6SpriteEEC1Ev>:
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b082      	sub	sp, #8
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f000 f8e0 	bl	8005d8a <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEEC1Ev>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3708      	adds	r7, #8
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <_ZNSaIN4tama6SpriteEED1Ev>:
      ~allocator() throw() { }
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b082      	sub	sp, #8
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f000 f8df 	bl	8005da0 <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEED1Ev>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4618      	mov	r0, r3
 8005be6:	3708      	adds	r7, #8
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <_ZSt15allocate_sharedIN4tama6SpriteESaIS1_EJSt10shared_ptrINS0_7TextureEENS0_5Vec2dEEES3_IT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 8005bec:	b5b0      	push	{r4, r5, r7, lr}
 8005bee:	b088      	sub	sp, #32
 8005bf0:	af02      	add	r7, sp, #8
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	60b9      	str	r1, [r7, #8]
 8005bf6:	607a      	str	r2, [r7, #4]
 8005bf8:	603b      	str	r3, [r7, #0]
			     std::forward<_Args>(__args)...);
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f7ff ff22 	bl	8005a44 <_ZSt7forwardISt10shared_ptrIN4tama7TextureEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8005c00:	4604      	mov	r4, r0
 8005c02:	6838      	ldr	r0, [r7, #0]
 8005c04:	f7ff ff29 	bl	8005a5a <_ZSt7forwardIN4tama5Vec2dEEOT_RNSt16remove_referenceIS2_E4typeE>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	9300      	str	r3, [sp, #0]
 8005c0c:	4623      	mov	r3, r4
 8005c0e:	68ba      	ldr	r2, [r7, #8]
 8005c10:	4629      	mov	r1, r5
 8005c12:	68f8      	ldr	r0, [r7, #12]
 8005c14:	f000 f8cf 	bl	8005db6 <_ZNSt10shared_ptrIN4tama6SpriteEEC1ISaIS1_EJS_INS0_7TextureEENS0_5Vec2dEEEESt19_Sp_make_shared_tagRKT_DpOT0_>
    }
 8005c18:	68f8      	ldr	r0, [r7, #12]
 8005c1a:	3718      	adds	r7, #24
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bdb0      	pop	{r4, r5, r7, pc}

08005c20 <_ZNSt12__shared_ptrIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0EEC1INS0_6SpriteEvEEOS_IT_LS3_0EE>:
	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b082      	sub	sp, #8
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount()
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	601a      	str	r2, [r3, #0]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	3304      	adds	r3, #4
 8005c36:	4618      	mov	r0, r3
 8005c38:	f7fe f999 	bl	8003f6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _M_refcount._M_swap(__r._M_refcount);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	1d1a      	adds	r2, r3, #4
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	3304      	adds	r3, #4
 8005c44:	4619      	mov	r1, r3
 8005c46:	4610      	mov	r0, r2
 8005c48:	f7fe fa9a 	bl	8004180 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  __r._M_ptr = 0;
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	601a      	str	r2, [r3, #0]
	}
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4618      	mov	r0, r3
 8005c56:	3708      	adds	r7, #8
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}

08005c5c <_ZNSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EE5resetEPS1_>:
       * @param __p  The new pointer to store.
       *
       * The deleter will be invoked if a pointer is already owned.
       */
      void
      reset(pointer __p = pointer()) noexcept
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b082      	sub	sp, #8
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
      {
	using std::swap;
	swap(_M_t._M_ptr(), __p);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f7ff fc01 	bl	8005470 <_ZNSt15__uniq_ptr_implIN4tama13TextureLoaderESt14default_deleteIS1_EE6_M_ptrEv>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	463b      	mov	r3, r7
 8005c72:	4619      	mov	r1, r3
 8005c74:	4610      	mov	r0, r2
 8005c76:	f000 f8c5 	bl	8005e04 <_ZSt4swapIPN4tama13TextureLoaderEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS7_ESt18is_move_assignableIS7_EEE5valueEvE4typeERS7_SH_>
	if (__p != pointer())
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d008      	beq.n	8005c92 <_ZNSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EE5resetEPS1_+0x36>
	  get_deleter()(__p);
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f7ff fc02 	bl	800548a <_ZNSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EE11get_deleterEv>
 8005c86:	4602      	mov	r2, r0
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	4610      	mov	r0, r2
 8005c8e:	f7ff fc09 	bl	80054a4 <_ZNKSt14default_deleteIN4tama13TextureLoaderEEclEPS1_>
      }
 8005c92:	bf00      	nop
 8005c94:	3708      	adds	r7, #8
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}

08005c9a <_ZSt4moveIRSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 8005c9a:	b480      	push	{r7}
 8005c9c:	b083      	sub	sp, #12
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_>:
      operator=(__shared_ptr&& __r) noexcept
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	6039      	str	r1, [r7, #0]
	__shared_ptr(std::move(__r)).swap(*this);
 8005cba:	6838      	ldr	r0, [r7, #0]
 8005cbc:	f7ff ffed 	bl	8005c9a <_ZSt4moveIRSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS8_>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	f107 0308 	add.w	r3, r7, #8
 8005cc6:	4611      	mov	r1, r2
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f000 f8c7 	bl	8005e5c <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEC1EOS4_>
 8005cce:	f107 0308 	add.w	r3, r7, #8
 8005cd2:	6879      	ldr	r1, [r7, #4]
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f000 f8df 	bl	8005e98 <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EE4swapERS4_>
 8005cda:	f107 0308 	add.w	r3, r7, #8
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f7fe fdd9 	bl	8004896 <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EED1Ev>
	return *this;
 8005ce4:	687b      	ldr	r3, [r7, #4]
      }
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3710      	adds	r7, #16
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}

08005cee <_ZSt4moveIRSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 8005cee:	b480      	push	{r7}
 8005cf0:	b083      	sub	sp, #12
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	370c      	adds	r7, #12
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr

08005d04 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_>:
      operator=(__shared_ptr&& __r) noexcept
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	6039      	str	r1, [r7, #0]
	__shared_ptr(std::move(__r)).swap(*this);
 8005d0e:	6838      	ldr	r0, [r7, #0]
 8005d10:	f7ff ffed 	bl	8005cee <_ZSt4moveIRSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS8_>
 8005d14:	4602      	mov	r2, r0
 8005d16:	f107 0308 	add.w	r3, r7, #8
 8005d1a:	4611      	mov	r1, r2
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f000 f8d2 	bl	8005ec6 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EEC1EOS4_>
 8005d22:	f107 0308 	add.w	r3, r7, #8
 8005d26:	6879      	ldr	r1, [r7, #4]
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f000 f8ea 	bl	8005f02 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE4swapERS4_>
 8005d2e:	f107 0308 	add.w	r3, r7, #8
 8005d32:	4618      	mov	r0, r3
 8005d34:	f7ff fa4b 	bl	80051ce <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EED1Ev>
	return *this;
 8005d38:	687b      	ldr	r3, [r7, #4]
      }
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3710      	adds	r7, #16
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}

08005d42 <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EEC1IS1_vEEPT_>:
	__shared_ptr(_Yp* __p)
 8005d42:	b590      	push	{r4, r7, lr}
 8005d44:	b085      	sub	sp, #20
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
 8005d4a:	6039      	str	r1, [r7, #0]
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	683a      	ldr	r2, [r7, #0]
 8005d50:	601a      	str	r2, [r3, #0]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	3304      	adds	r3, #4
 8005d56:	4622      	mov	r2, r4
 8005d58:	6839      	ldr	r1, [r7, #0]
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f000 f8e8 	bl	8005f30 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama6SpriteEEET_St17integral_constantIbLb0EE>
	  _M_enable_shared_from_this_with(__p);
 8005d60:	6839      	ldr	r1, [r7, #0]
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 f8f3 	bl	8005f4e <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	}
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3714      	adds	r7, #20
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd90      	pop	{r4, r7, pc}

08005d72 <_ZNKSt12__shared_ptrIN4tama13TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 8005d72:	b480      	push	{r7}
 8005d74:	b083      	sub	sp, #12
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4618      	mov	r0, r3
 8005d80:	370c      	adds	r7, #12
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr

08005d8a <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8005d8a:	b480      	push	{r7}
 8005d8c:	b083      	sub	sp, #12
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4618      	mov	r0, r3
 8005d96:	370c      	adds	r7, #12
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr

08005da0 <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8005da0:	b480      	push	{r7}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4618      	mov	r0, r3
 8005dac:	370c      	adds	r7, #12
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr

08005db6 <_ZNSt10shared_ptrIN4tama6SpriteEEC1ISaIS1_EJS_INS0_7TextureEENS0_5Vec2dEEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8005db6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005db8:	b087      	sub	sp, #28
 8005dba:	af02      	add	r7, sp, #8
 8005dbc:	60f8      	str	r0, [r7, #12]
 8005dbe:	7239      	strb	r1, [r7, #8]
 8005dc0:	607a      	str	r2, [r7, #4]
 8005dc2:	603b      	str	r3, [r7, #0]
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
 8005dc4:	68fc      	ldr	r4, [r7, #12]
 8005dc6:	6838      	ldr	r0, [r7, #0]
 8005dc8:	f7ff fe3c 	bl	8005a44 <_ZSt7forwardISt10shared_ptrIN4tama7TextureEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8005dcc:	4605      	mov	r5, r0
 8005dce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dd0:	f7ff fe43 	bl	8005a5a <_ZSt7forwardIN4tama5Vec2dEEOT_RNSt16remove_referenceIS2_E4typeE>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	9300      	str	r3, [sp, #0]
 8005dd8:	462b      	mov	r3, r5
 8005dda:	687a      	ldr	r2, [r7, #4]
 8005ddc:	4631      	mov	r1, r6
 8005dde:	4620      	mov	r0, r4
 8005de0:	f000 f8dd 	bl	8005f9e <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJSt10shared_ptrINS0_7TextureEENS0_5Vec2dEEEESt19_Sp_make_shared_tagRKT_DpOT0_>
	{ }
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	4618      	mov	r0, r3
 8005de8:	3714      	adds	r7, #20
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005dee <_ZSt4moveIRPN4tama13TextureLoaderEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8005dee:	b480      	push	{r7}
 8005df0:	b083      	sub	sp, #12
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4618      	mov	r0, r3
 8005dfa:	370c      	adds	r7, #12
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <_ZSt4swapIPN4tama13TextureLoaderEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS7_ESt18is_move_assignableIS7_EEE5valueEvE4typeERS7_SH_>:
    swap(_Tp& __a, _Tp& __b)
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b084      	sub	sp, #16
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f7ff ffed 	bl	8005dee <_ZSt4moveIRPN4tama13TextureLoaderEEONSt16remove_referenceIT_E4typeEOS5_>
 8005e14:	4603      	mov	r3, r0
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8005e1a:	6838      	ldr	r0, [r7, #0]
 8005e1c:	f7ff ffe7 	bl	8005dee <_ZSt4moveIRPN4tama13TextureLoaderEEONSt16remove_referenceIT_E4typeEOS5_>
 8005e20:	4603      	mov	r3, r0
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8005e28:	f107 030c 	add.w	r3, r7, #12
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f7ff ffde 	bl	8005dee <_ZSt4moveIRPN4tama13TextureLoaderEEONSt16remove_referenceIT_E4typeEOS5_>
 8005e32:	4603      	mov	r3, r0
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	601a      	str	r2, [r3, #0]
    }
 8005e3a:	bf00      	nop
 8005e3c:	3710      	adds	r7, #16
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}

08005e42 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EE3getEv>:
      get() const noexcept
 8005e42:	b580      	push	{r7, lr}
 8005e44:	b082      	sub	sp, #8
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f000 f925 	bl	800609c <_ZNKSt15__uniq_ptr_implIN4tama13TextureLoaderESt14default_deleteIS1_EE6_M_ptrEv>
 8005e52:	4603      	mov	r3, r0
 8005e54:	4618      	mov	r0, r3
 8005e56:	3708      	adds	r7, #8
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}

08005e5c <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEC1EOS4_>:
      __shared_ptr(__shared_ptr&& __r) noexcept
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b082      	sub	sp, #8
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	6039      	str	r1, [r7, #0]
      : _M_ptr(__r._M_ptr), _M_refcount()
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	601a      	str	r2, [r3, #0]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	3304      	adds	r3, #4
 8005e72:	4618      	mov	r0, r3
 8005e74:	f7fe f87b 	bl	8003f6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	_M_refcount._M_swap(__r._M_refcount);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	1d1a      	adds	r2, r3, #4
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	3304      	adds	r3, #4
 8005e80:	4619      	mov	r1, r3
 8005e82:	4610      	mov	r0, r2
 8005e84:	f7fe f97c 	bl	8004180 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	__r._M_ptr = 0;
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	601a      	str	r2, [r3, #0]
      }
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4618      	mov	r0, r3
 8005e92:	3708      	adds	r7, #8
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}

08005e98 <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EE4swapERS4_>:
      swap(__shared_ptr<_Tp, _Lp>& __other) noexcept
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b082      	sub	sp, #8
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	6039      	str	r1, [r7, #0]
	std::swap(_M_ptr, __other._M_ptr);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	683a      	ldr	r2, [r7, #0]
 8005ea6:	4611      	mov	r1, r2
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f000 f910 	bl	80060ce <_ZSt4swapIPN4tama14ChangeObserverEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS7_ESt18is_move_assignableIS7_EEE5valueEvE4typeERS7_SH_>
	_M_refcount._M_swap(__other._M_refcount);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	1d1a      	adds	r2, r3, #4
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	3304      	adds	r3, #4
 8005eb6:	4619      	mov	r1, r3
 8005eb8:	4610      	mov	r0, r2
 8005eba:	f7fe f961 	bl	8004180 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
      }
 8005ebe:	bf00      	nop
 8005ec0:	3708      	adds	r7, #8
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}

08005ec6 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EEC1EOS4_>:
      __shared_ptr(__shared_ptr&& __r) noexcept
 8005ec6:	b580      	push	{r7, lr}
 8005ec8:	b082      	sub	sp, #8
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
 8005ece:	6039      	str	r1, [r7, #0]
      : _M_ptr(__r._M_ptr), _M_refcount()
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	601a      	str	r2, [r3, #0]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	3304      	adds	r3, #4
 8005edc:	4618      	mov	r0, r3
 8005ede:	f7fe f846 	bl	8003f6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	_M_refcount._M_swap(__r._M_refcount);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	1d1a      	adds	r2, r3, #4
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	3304      	adds	r3, #4
 8005eea:	4619      	mov	r1, r3
 8005eec:	4610      	mov	r0, r2
 8005eee:	f7fe f947 	bl	8004180 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	__r._M_ptr = 0;
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	601a      	str	r2, [r3, #0]
      }
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4618      	mov	r0, r3
 8005efc:	3708      	adds	r7, #8
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}

08005f02 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE4swapERS4_>:
      swap(__shared_ptr<_Tp, _Lp>& __other) noexcept
 8005f02:	b580      	push	{r7, lr}
 8005f04:	b082      	sub	sp, #8
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
 8005f0a:	6039      	str	r1, [r7, #0]
	std::swap(_M_ptr, __other._M_ptr);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	683a      	ldr	r2, [r7, #0]
 8005f10:	4611      	mov	r1, r2
 8005f12:	4618      	mov	r0, r3
 8005f14:	f000 f905 	bl	8006122 <_ZSt4swapIPN4tama7TextureEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS7_ESt18is_move_assignableIS7_EEE5valueEvE4typeERS7_SH_>
	_M_refcount._M_swap(__other._M_refcount);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	1d1a      	adds	r2, r3, #4
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	3304      	adds	r3, #4
 8005f20:	4619      	mov	r1, r3
 8005f22:	4610      	mov	r0, r2
 8005f24:	f7fe f92c 	bl	8004180 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
      }
 8005f28:	bf00      	nop
 8005f2a:	3708      	adds	r7, #8
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama6SpriteEEET_St17integral_constantIbLb0EE>:
	__shared_count(_Ptr __p, /* is_array = */ false_type)
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b084      	sub	sp, #16
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	60f8      	str	r0, [r7, #12]
 8005f38:	60b9      	str	r1, [r7, #8]
 8005f3a:	713a      	strb	r2, [r7, #4]
	: __shared_count(__p)
 8005f3c:	68b9      	ldr	r1, [r7, #8]
 8005f3e:	68f8      	ldr	r0, [r7, #12]
 8005f40:	f000 f90e 	bl	8006160 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama6SpriteEEET_>
	{ }
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	4618      	mov	r0, r3
 8005f48:	3710      	adds	r7, #16
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}

08005f4e <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 8005f4e:	b480      	push	{r7}
 8005f50:	b083      	sub	sp, #12
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6078      	str	r0, [r7, #4]
 8005f56:	6039      	str	r1, [r7, #0]
	{ }
 8005f58:	bf00      	nop
 8005f5a:	370c      	adds	r7, #12
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>:
        struct _Deleter
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b082      	sub	sp, #8
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f7ff fe30 	bl	8005bd4 <_ZNSaIN4tama6SpriteEED1Ev>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	4618      	mov	r0, r3
 8005f78:	3708      	adds	r7, #8
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}

08005f7e <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>:
 8005f7e:	b580      	push	{r7, lr}
 8005f80:	b082      	sub	sp, #8
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
 8005f86:	6039      	str	r1, [r7, #0]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	683a      	ldr	r2, [r7, #0]
 8005f8c:	4611      	mov	r1, r2
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f000 f8fe 	bl	8006190 <_ZNSaIN4tama6SpriteEEC1ERKS1_>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	4618      	mov	r0, r3
 8005f98:	3708      	adds	r7, #8
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}

08005f9e <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJSt10shared_ptrINS0_7TextureEENS0_5Vec2dEEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8005f9e:	b590      	push	{r4, r7, lr}
 8005fa0:	b08d      	sub	sp, #52	; 0x34
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	60f8      	str	r0, [r7, #12]
 8005fa6:	7239      	strb	r1, [r7, #8]
 8005fa8:	607a      	str	r2, [r7, #4]
 8005faa:	603b      	str	r3, [r7, #0]
	: _M_ptr(), _M_refcount()
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	601a      	str	r2, [r3, #0]
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	3304      	adds	r3, #4
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f7fd ffd9 	bl	8003f6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 8005fbc:	f107 0320 	add.w	r3, r7, #32
 8005fc0:	6879      	ldr	r1, [r7, #4]
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f000 f8e4 	bl	8006190 <_ZNSaIN4tama6SpriteEEC1ERKS1_>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 8005fc8:	f107 0318 	add.w	r3, r7, #24
 8005fcc:	f107 0220 	add.w	r2, r7, #32
 8005fd0:	4611      	mov	r1, r2
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f000 f8ea 	bl	80061ac <_ZSt18__allocate_guardedISaIN4tama6SpriteEEESt15__allocated_ptrIT_ERS4_>
	  auto __ptr = __guard.get();
 8005fd8:	f107 0318 	add.w	r3, r7, #24
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f000 f90d 	bl	80061fc <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEE3getEv>
 8005fe2:	62f8      	str	r0, [r7, #44]	; 0x2c
	  __traits::construct(__del._M_alloc, __ptr,
 8005fe4:	6838      	ldr	r0, [r7, #0]
 8005fe6:	f7ff fd2d 	bl	8005a44 <_ZSt7forwardISt10shared_ptrIN4tama7TextureEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8005fea:	4604      	mov	r4, r0
 8005fec:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8005fee:	f7ff fd34 	bl	8005a5a <_ZSt7forwardIN4tama5Vec2dEEOT_RNSt16remove_referenceIS2_E4typeE>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	f107 0020 	add.w	r0, r7, #32
 8005ff8:	4622      	mov	r2, r4
 8005ffa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ffc:	f000 f90c 	bl	8006218 <_ZNSt16allocator_traitsISaIN4tama6SpriteEEE9constructIS1_JSt10shared_ptrINS0_7TextureEENS0_5Vec2dEEEEvRS2_PT_DpOT0_>
	  __guard = nullptr;
 8006000:	f107 0318 	add.w	r3, r7, #24
 8006004:	2100      	movs	r1, #0
 8006006:	4618      	mov	r0, r3
 8006008:	f000 f91e 	bl	8006248 <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEEaSEDn>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 800600c:	f107 0220 	add.w	r2, r7, #32
 8006010:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006014:	4611      	mov	r1, r2
 8006016:	4618      	mov	r0, r3
 8006018:	f7ff ffb1 	bl	8005f7e <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>
 800601c:	f107 0220 	add.w	r2, r7, #32
 8006020:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006024:	4611      	mov	r1, r2
 8006026:	4618      	mov	r0, r3
 8006028:	f000 f8b2 	bl	8006190 <_ZNSaIN4tama6SpriteEEC1ERKS1_>
 800602c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006030:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8006034:	f107 0014 	add.w	r0, r7, #20
 8006038:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800603a:	f000 f93a 	bl	80062b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama6SpriteENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
 800603e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006042:	4618      	mov	r0, r3
 8006044:	f7ff fdc6 	bl	8005bd4 <_ZNSaIN4tama6SpriteEED1Ev>
 8006048:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800604c:	4618      	mov	r0, r3
 800604e:	f7ff ff89 	bl	8005f64 <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	  _M_refcount._M_swap(__count);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	3304      	adds	r3, #4
 8006056:	f107 0214 	add.w	r2, r7, #20
 800605a:	4611      	mov	r1, r2
 800605c:	4618      	mov	r0, r3
 800605e:	f7fe f88f 	bl	8004180 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  _M_ptr = __ptr;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006066:	601a      	str	r2, [r3, #0]
	  _M_enable_shared_from_this_with(_M_ptr);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4619      	mov	r1, r3
 800606e:	68f8      	ldr	r0, [r7, #12]
 8006070:	f7ff ff6d 	bl	8005f4e <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 8006074:	f107 0314 	add.w	r3, r7, #20
 8006078:	4618      	mov	r0, r3
 800607a:	f7fd f84a 	bl	8003112 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 800607e:	f107 0318 	add.w	r3, r7, #24
 8006082:	4618      	mov	r0, r3
 8006084:	f000 f8a5 	bl	80061d2 <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEED1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 8006088:	f107 0320 	add.w	r3, r7, #32
 800608c:	4618      	mov	r0, r3
 800608e:	f7ff ff69 	bl	8005f64 <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	}
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	4618      	mov	r0, r3
 8006096:	3734      	adds	r7, #52	; 0x34
 8006098:	46bd      	mov	sp, r7
 800609a:	bd90      	pop	{r4, r7, pc}

0800609c <_ZNKSt15__uniq_ptr_implIN4tama13TextureLoaderESt14default_deleteIS1_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800609c:	b580      	push	{r7, lr}
 800609e:	b082      	sub	sp, #8
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	4618      	mov	r0, r3
 80060a8:	f000 f95a 	bl	8006360 <_ZSt3getILj0EJPN4tama13TextureLoaderESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>
 80060ac:	4603      	mov	r3, r0
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4618      	mov	r0, r3
 80060b2:	3708      	adds	r7, #8
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <_ZSt4moveIRPN4tama14ChangeObserverEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	4618      	mov	r0, r3
 80060c4:	370c      	adds	r7, #12
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr

080060ce <_ZSt4swapIPN4tama14ChangeObserverEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS7_ESt18is_move_assignableIS7_EEE5valueEvE4typeERS7_SH_>:
    swap(_Tp& __a, _Tp& __b)
 80060ce:	b580      	push	{r7, lr}
 80060d0:	b084      	sub	sp, #16
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	6078      	str	r0, [r7, #4]
 80060d6:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f7ff ffed 	bl	80060b8 <_ZSt4moveIRPN4tama14ChangeObserverEEONSt16remove_referenceIT_E4typeEOS5_>
 80060de:	4603      	mov	r3, r0
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 80060e4:	6838      	ldr	r0, [r7, #0]
 80060e6:	f7ff ffe7 	bl	80060b8 <_ZSt4moveIRPN4tama14ChangeObserverEEONSt16remove_referenceIT_E4typeEOS5_>
 80060ea:	4603      	mov	r3, r0
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80060f2:	f107 030c 	add.w	r3, r7, #12
 80060f6:	4618      	mov	r0, r3
 80060f8:	f7ff ffde 	bl	80060b8 <_ZSt4moveIRPN4tama14ChangeObserverEEONSt16remove_referenceIT_E4typeEOS5_>
 80060fc:	4603      	mov	r3, r0
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	601a      	str	r2, [r3, #0]
    }
 8006104:	bf00      	nop
 8006106:	3710      	adds	r7, #16
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}

0800610c <_ZSt4moveIRPN4tama7TextureEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	4618      	mov	r0, r3
 8006118:	370c      	adds	r7, #12
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr

08006122 <_ZSt4swapIPN4tama7TextureEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS7_ESt18is_move_assignableIS7_EEE5valueEvE4typeERS7_SH_>:
    swap(_Tp& __a, _Tp& __b)
 8006122:	b580      	push	{r7, lr}
 8006124:	b084      	sub	sp, #16
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
 800612a:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f7ff ffed 	bl	800610c <_ZSt4moveIRPN4tama7TextureEEONSt16remove_referenceIT_E4typeEOS5_>
 8006132:	4603      	mov	r3, r0
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8006138:	6838      	ldr	r0, [r7, #0]
 800613a:	f7ff ffe7 	bl	800610c <_ZSt4moveIRPN4tama7TextureEEONSt16remove_referenceIT_E4typeEOS5_>
 800613e:	4603      	mov	r3, r0
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8006146:	f107 030c 	add.w	r3, r7, #12
 800614a:	4618      	mov	r0, r3
 800614c:	f7ff ffde 	bl	800610c <_ZSt4moveIRPN4tama7TextureEEONSt16remove_referenceIT_E4typeEOS5_>
 8006150:	4603      	mov	r3, r0
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	601a      	str	r2, [r3, #0]
    }
 8006158:	bf00      	nop
 800615a:	3710      	adds	r7, #16
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama6SpriteEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 8006160:	b590      	push	{r4, r7, lr}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	601a      	str	r2, [r3, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8006170:	2010      	movs	r0, #16
 8006172:	f019 fba4 	bl	801f8be <_Znwj>
 8006176:	4603      	mov	r3, r0
 8006178:	461c      	mov	r4, r3
 800617a:	6839      	ldr	r1, [r7, #0]
 800617c:	4620      	mov	r0, r4
 800617e:	f000 f8fd 	bl	800637c <_ZNSt15_Sp_counted_ptrIPN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EEC1ES2_>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	601c      	str	r4, [r3, #0]
	}
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	4618      	mov	r0, r3
 800618a:	370c      	adds	r7, #12
 800618c:	46bd      	mov	sp, r7
 800618e:	bd90      	pop	{r4, r7, pc}

08006190 <_ZNSaIN4tama6SpriteEEC1ERKS1_>:
      allocator(const allocator& __a) throw()
 8006190:	b580      	push	{r7, lr}
 8006192:	b082      	sub	sp, #8
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800619a:	6839      	ldr	r1, [r7, #0]
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f000 f903 	bl	80063a8 <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEEC1ERKS3_>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4618      	mov	r0, r3
 80061a6:	3708      	adds	r7, #8
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}

080061ac <_ZSt18__allocate_guardedISaIN4tama6SpriteEEESt15__allocated_ptrIT_ERS4_>:
    __allocate_guarded(_Alloc& __a)
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b082      	sub	sp, #8
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 80061b6:	2101      	movs	r1, #1
 80061b8:	6838      	ldr	r0, [r7, #0]
 80061ba:	f000 f901 	bl	80063c0 <_ZNSt16allocator_traitsISaIN4tama6SpriteEEE8allocateERS2_j>
 80061be:	4603      	mov	r3, r0
 80061c0:	461a      	mov	r2, r3
 80061c2:	6839      	ldr	r1, [r7, #0]
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f000 f90a 	bl	80063de <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEEC1ERS2_PS1_>
    }
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	3708      	adds	r7, #8
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}

080061d2 <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEED1Ev>:
      ~__allocated_ptr()
 80061d2:	b580      	push	{r7, lr}
 80061d4:	b082      	sub	sp, #8
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d007      	beq.n	80061f2 <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6818      	ldr	r0, [r3, #0]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	2201      	movs	r2, #1
 80061ec:	4619      	mov	r1, r3
 80061ee:	f000 f90a 	bl	8006406 <_ZNSt16allocator_traitsISaIN4tama6SpriteEEE10deallocateERS2_PS1_j>
      }
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4618      	mov	r0, r3
 80061f6:	3708      	adds	r7, #8
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}

080061fc <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b082      	sub	sp, #8
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	4618      	mov	r0, r3
 800620a:	f000 f90b 	bl	8006424 <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEE10_S_raw_ptrEPS1_>
 800620e:	4603      	mov	r3, r0
 8006210:	4618      	mov	r0, r3
 8006212:	3708      	adds	r7, #8
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}

08006218 <_ZNSt16allocator_traitsISaIN4tama6SpriteEEE9constructIS1_JSt10shared_ptrINS0_7TextureEENS0_5Vec2dEEEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8006218:	b590      	push	{r4, r7, lr}
 800621a:	b085      	sub	sp, #20
 800621c:	af00      	add	r7, sp, #0
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	60b9      	str	r1, [r7, #8]
 8006222:	607a      	str	r2, [r7, #4]
 8006224:	603b      	str	r3, [r7, #0]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f7ff fc0c 	bl	8005a44 <_ZSt7forwardISt10shared_ptrIN4tama7TextureEEEOT_RNSt16remove_referenceIS4_E4typeE>
 800622c:	4604      	mov	r4, r0
 800622e:	6838      	ldr	r0, [r7, #0]
 8006230:	f7ff fc13 	bl	8005a5a <_ZSt7forwardIN4tama5Vec2dEEOT_RNSt16remove_referenceIS2_E4typeE>
 8006234:	4603      	mov	r3, r0
 8006236:	4622      	mov	r2, r4
 8006238:	68b9      	ldr	r1, [r7, #8]
 800623a:	68f8      	ldr	r0, [r7, #12]
 800623c:	f000 f8fd 	bl	800643a <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEE9constructIS2_JSt10shared_ptrINS1_7TextureEENS1_5Vec2dEEEEvPT_DpOT0_>
 8006240:	bf00      	nop
 8006242:	3714      	adds	r7, #20
 8006244:	46bd      	mov	sp, r7
 8006246:	bd90      	pop	{r4, r7, pc}

08006248 <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 8006248:	b480      	push	{r7}
 800624a:	b083      	sub	sp, #12
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	605a      	str	r2, [r3, #4]
	return *this;
 8006258:	687b      	ldr	r3, [r7, #4]
      }
 800625a:	4618      	mov	r0, r3
 800625c:	370c      	adds	r7, #12
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr

08006266 <_ZSt4moveIRNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 8006266:	b480      	push	{r7}
 8006268:	b083      	sub	sp, #12
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4618      	mov	r0, r3
 8006272:	370c      	adds	r7, #12
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>:
        struct _Deleter
 800627c:	b580      	push	{r7, lr}
 800627e:	b082      	sub	sp, #8
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	6039      	str	r1, [r7, #0]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	683a      	ldr	r2, [r7, #0]
 800628a:	4611      	mov	r1, r2
 800628c:	4618      	mov	r0, r3
 800628e:	f7ff ff7f 	bl	8006190 <_ZNSaIN4tama6SpriteEEC1ERKS1_>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4618      	mov	r0, r3
 8006296:	3708      	adds	r7, #8
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}

0800629c <_ZSt4moveIRSaIN4tama6SpriteEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800629c:	b480      	push	{r7}
 800629e:	b083      	sub	sp, #12
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	4618      	mov	r0, r3
 80062a8:	370c      	adds	r7, #12
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr

080062b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama6SpriteENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
 80062b2:	b5b0      	push	{r4, r5, r7, lr}
 80062b4:	b08a      	sub	sp, #40	; 0x28
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	60f8      	str	r0, [r7, #12]
 80062ba:	60b9      	str	r1, [r7, #8]
 80062bc:	607a      	str	r2, [r7, #4]
 80062be:	603b      	str	r3, [r7, #0]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2200      	movs	r2, #0
 80062c4:	601a      	str	r2, [r3, #0]
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 80062c6:	f107 031c 	add.w	r3, r7, #28
 80062ca:	6839      	ldr	r1, [r7, #0]
 80062cc:	4618      	mov	r0, r3
 80062ce:	f000 f8d4 	bl	800647a <_ZNSaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	      auto __guard = std::__allocate_guarded(__a2);
 80062d2:	f107 0314 	add.w	r3, r7, #20
 80062d6:	f107 021c 	add.w	r2, r7, #28
 80062da:	4611      	mov	r1, r2
 80062dc:	4618      	mov	r0, r3
 80062de:	f000 f8e5 	bl	80064ac <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>
	      _Sp_cd_type* __mem = __guard.get();
 80062e2:	f107 0314 	add.w	r3, r7, #20
 80062e6:	4618      	mov	r0, r3
 80062e8:	f000 f908 	bl	80064fc <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>
 80062ec:	6278      	str	r0, [r7, #36]	; 0x24
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f7ff ffb9 	bl	8006266 <_ZSt4moveIRNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 80062f4:	4602      	mov	r2, r0
 80062f6:	f107 0320 	add.w	r3, r7, #32
 80062fa:	4611      	mov	r1, r2
 80062fc:	4618      	mov	r0, r3
 80062fe:	f7ff ffbd 	bl	800627c <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 8006302:	f107 0420 	add.w	r4, r7, #32
 8006306:	6838      	ldr	r0, [r7, #0]
 8006308:	f7ff ffc8 	bl	800629c <_ZSt4moveIRSaIN4tama6SpriteEEEONSt16remove_referenceIT_E4typeEOS5_>
 800630c:	4605      	mov	r5, r0
 800630e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006310:	4619      	mov	r1, r3
 8006312:	2014      	movs	r0, #20
 8006314:	f7fa fe93 	bl	800103e <_ZnwjPv>
 8006318:	2800      	cmp	r0, #0
 800631a:	d004      	beq.n	8006326 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama6SpriteENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x74>
 800631c:	462b      	mov	r3, r5
 800631e:	4622      	mov	r2, r4
 8006320:	68b9      	ldr	r1, [r7, #8]
 8006322:	f000 f925 	bl	8006570 <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>
 8006326:	f107 0320 	add.w	r3, r7, #32
 800632a:	4618      	mov	r0, r3
 800632c:	f7ff fe1a 	bl	8005f64 <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	      _M_pi = __mem;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006334:	601a      	str	r2, [r3, #0]
	      __guard = nullptr;
 8006336:	f107 0314 	add.w	r3, r7, #20
 800633a:	2100      	movs	r1, #0
 800633c:	4618      	mov	r0, r3
 800633e:	f000 f945 	bl	80065cc <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>
	      auto __guard = std::__allocate_guarded(__a2);
 8006342:	f107 0314 	add.w	r3, r7, #20
 8006346:	4618      	mov	r0, r3
 8006348:	f000 f8c3 	bl	80064d2 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 800634c:	f107 031c 	add.w	r3, r7, #28
 8006350:	4618      	mov	r0, r3
 8006352:	f000 f89f 	bl	8006494 <_ZNSaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
	}
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	4618      	mov	r0, r3
 800635a:	3728      	adds	r7, #40	; 0x28
 800635c:	46bd      	mov	sp, r7
 800635e:	bdb0      	pop	{r4, r5, r7, pc}

08006360 <_ZSt3getILj0EJPN4tama13TextureLoaderESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>:

  /// Return a const reference to the ith element of a const tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 8006360:	b580      	push	{r7, lr}
 8006362:	b082      	sub	sp, #8
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	4618      	mov	r0, r3
 800636c:	f000 f95d 	bl	800662a <_ZSt12__get_helperILj0EPN4tama13TextureLoaderEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>
 8006370:	4603      	mov	r3, r0
 8006372:	4618      	mov	r0, r3
 8006374:	3708      	adds	r7, #8
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
	...

0800637c <_ZNSt15_Sp_counted_ptrIPN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EEC1ES2_>:
      _Sp_counted_ptr(_Ptr __p) noexcept
 800637c:	b580      	push	{r7, lr}
 800637e:	b082      	sub	sp, #8
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	6039      	str	r1, [r7, #0]
      : _M_ptr(__p) { }
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	4618      	mov	r0, r3
 800638a:	f7fe f9dd 	bl	8004748 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800638e:	4a05      	ldr	r2, [pc, #20]	; (80063a4 <_ZNSt15_Sp_counted_ptrIPN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EEC1ES2_+0x28>)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	601a      	str	r2, [r3, #0]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	683a      	ldr	r2, [r7, #0]
 8006398:	60da      	str	r2, [r3, #12]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	4618      	mov	r0, r3
 800639e:	3708      	adds	r7, #8
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}
 80063a4:	08023690 	.word	0x08023690

080063a8 <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 80063a8:	b480      	push	{r7}
 80063aa:	b083      	sub	sp, #12
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	6039      	str	r1, [r7, #0]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4618      	mov	r0, r3
 80063b6:	370c      	adds	r7, #12
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr

080063c0 <_ZNSt16allocator_traitsISaIN4tama6SpriteEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b082      	sub	sp, #8
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80063ca:	2200      	movs	r2, #0
 80063cc:	6839      	ldr	r1, [r7, #0]
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 f937 	bl	8006642 <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEE8allocateEjPKv>
 80063d4:	4603      	mov	r3, r0
 80063d6:	4618      	mov	r0, r3
 80063d8:	3708      	adds	r7, #8
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}

080063de <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEEC1ERS2_PS1_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 80063de:	b580      	push	{r7, lr}
 80063e0:	b084      	sub	sp, #16
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	60f8      	str	r0, [r7, #12]
 80063e6:	60b9      	str	r1, [r7, #8]
 80063e8:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 80063ea:	68b8      	ldr	r0, [r7, #8]
 80063ec:	f000 f947 	bl	800667e <_ZSt11__addressofISaIN4tama6SpriteEEEPT_RS3_>
 80063f0:	4602      	mov	r2, r0
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	601a      	str	r2, [r3, #0]
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	605a      	str	r2, [r3, #4]
      { }
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	4618      	mov	r0, r3
 8006400:	3710      	adds	r7, #16
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}

08006406 <_ZNSt16allocator_traitsISaIN4tama6SpriteEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8006406:	b580      	push	{r7, lr}
 8006408:	b084      	sub	sp, #16
 800640a:	af00      	add	r7, sp, #0
 800640c:	60f8      	str	r0, [r7, #12]
 800640e:	60b9      	str	r1, [r7, #8]
 8006410:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	68b9      	ldr	r1, [r7, #8]
 8006416:	68f8      	ldr	r0, [r7, #12]
 8006418:	f000 f93c 	bl	8006694 <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEE10deallocateEPS2_j>
 800641c:	bf00      	nop
 800641e:	3710      	adds	r7, #16
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEE10_S_raw_ptrEPS1_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	4618      	mov	r0, r3
 8006430:	370c      	adds	r7, #12
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr

0800643a <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEE9constructIS2_JSt10shared_ptrINS1_7TextureEENS1_5Vec2dEEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800643a:	b5b0      	push	{r4, r5, r7, lr}
 800643c:	b084      	sub	sp, #16
 800643e:	af00      	add	r7, sp, #0
 8006440:	60f8      	str	r0, [r7, #12]
 8006442:	60b9      	str	r1, [r7, #8]
 8006444:	607a      	str	r2, [r7, #4]
 8006446:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f7ff fafb 	bl	8005a44 <_ZSt7forwardISt10shared_ptrIN4tama7TextureEEEOT_RNSt16remove_referenceIS4_E4typeE>
 800644e:	4604      	mov	r4, r0
 8006450:	6838      	ldr	r0, [r7, #0]
 8006452:	f7ff fb02 	bl	8005a5a <_ZSt7forwardIN4tama5Vec2dEEOT_RNSt16remove_referenceIS2_E4typeE>
 8006456:	4605      	mov	r5, r0
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	4619      	mov	r1, r3
 800645c:	2020      	movs	r0, #32
 800645e:	f7fa fdee 	bl	800103e <_ZnwjPv>
 8006462:	4603      	mov	r3, r0
 8006464:	2b00      	cmp	r3, #0
 8006466:	d004      	beq.n	8006472 <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEE9constructIS2_JSt10shared_ptrINS1_7TextureEENS1_5Vec2dEEEEvPT_DpOT0_+0x38>
 8006468:	462a      	mov	r2, r5
 800646a:	4621      	mov	r1, r4
 800646c:	4618      	mov	r0, r3
 800646e:	f008 fad3 	bl	800ea18 <_ZN4tama6SpriteC1ERKSt10shared_ptrINS_7TextureEERKNS_5Vec2dE>
 8006472:	bf00      	nop
 8006474:	3710      	adds	r7, #16
 8006476:	46bd      	mov	sp, r7
 8006478:	bdb0      	pop	{r4, r5, r7, pc}

0800647a <_ZNSaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) throw() { }
 800647a:	b580      	push	{r7, lr}
 800647c:	b082      	sub	sp, #8
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
 8006482:	6039      	str	r1, [r7, #0]
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f000 f912 	bl	80066ae <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	4618      	mov	r0, r3
 800648e:	3708      	adds	r7, #8
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}

08006494 <_ZNSaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>:
      ~allocator() throw() { }
 8006494:	b580      	push	{r7, lr}
 8006496:	b082      	sub	sp, #8
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f000 f911 	bl	80066c4 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	4618      	mov	r0, r3
 80064a6:	3708      	adds	r7, #8
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}

080064ac <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>:
    __allocate_guarded(_Alloc& __a)
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b082      	sub	sp, #8
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 80064b6:	2101      	movs	r1, #1
 80064b8:	6838      	ldr	r0, [r7, #0]
 80064ba:	f000 f90e 	bl	80066da <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>
 80064be:	4603      	mov	r3, r0
 80064c0:	461a      	mov	r2, r3
 80064c2:	6839      	ldr	r1, [r7, #0]
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f000 f917 	bl	80066f8 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
    }
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	3708      	adds	r7, #8
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}

080064d2 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>:
      ~__allocated_ptr()
 80064d2:	b580      	push	{r7, lr}
 80064d4:	b082      	sub	sp, #8
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d007      	beq.n	80064f2 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6818      	ldr	r0, [r3, #0]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	2201      	movs	r2, #1
 80064ec:	4619      	mov	r1, r3
 80064ee:	f000 f917 	bl	8006720 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>
      }
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4618      	mov	r0, r3
 80064f6:	3708      	adds	r7, #8
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}

080064fc <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b082      	sub	sp, #8
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	4618      	mov	r0, r3
 800650a:	f000 f918 	bl	800673e <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>
 800650e:	4603      	mov	r3, r0
 8006510:	4618      	mov	r0, r3
 8006512:	3708      	adds	r7, #8
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}

08006518 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, false>
 8006518:	b580      	push	{r7, lr}
 800651a:	b082      	sub	sp, #8
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	4618      	mov	r0, r3
 8006524:	f7ff fd1e 	bl	8005f64 <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4618      	mov	r0, r3
 800652c:	3708      	adds	r7, #8
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}

08006532 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama6SpriteEELb1EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp
 8006532:	b580      	push	{r7, lr}
 8006534:	b082      	sub	sp, #8
 8006536:	af00      	add	r7, sp, #0
 8006538:	6078      	str	r0, [r7, #4]
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f7ff fb4a 	bl	8005bd4 <_ZNSaIN4tama6SpriteEED1Ev>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4618      	mov	r0, r3
 8006544:	3708      	adds	r7, #8
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}

0800654a <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>:
      class _Impl : _Sp_ebo_helper<0, _Deleter>, _Sp_ebo_helper<1, _Alloc>
 800654a:	b580      	push	{r7, lr}
 800654c:	b082      	sub	sp, #8
 800654e:	af00      	add	r7, sp, #0
 8006550:	6078      	str	r0, [r7, #4]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	3301      	adds	r3, #1
 8006556:	4618      	mov	r0, r3
 8006558:	f7ff ffeb 	bl	8006532 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama6SpriteEELb1EED1Ev>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	4618      	mov	r0, r3
 8006560:	f7ff ffda 	bl	8006518 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	4618      	mov	r0, r3
 8006568:	3708      	adds	r7, #8
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}
	...

08006570 <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 8006570:	b590      	push	{r4, r7, lr}
 8006572:	b087      	sub	sp, #28
 8006574:	af00      	add	r7, sp, #0
 8006576:	60f8      	str	r0, [r7, #12]
 8006578:	60b9      	str	r1, [r7, #8]
 800657a:	607a      	str	r2, [r7, #4]
 800657c:	603b      	str	r3, [r7, #0]
      : _M_impl(__p, std::move(__d), __a) { }
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	4618      	mov	r0, r3
 8006582:	f7fe f8e1 	bl	8004748 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8006586:	4a10      	ldr	r2, [pc, #64]	; (80065c8 <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_+0x58>)
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	601a      	str	r2, [r3, #0]
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f103 040c 	add.w	r4, r3, #12
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f7ff fe67 	bl	8006266 <_ZSt4moveIRNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8006598:	4602      	mov	r2, r0
 800659a:	f107 0314 	add.w	r3, r7, #20
 800659e:	4611      	mov	r1, r2
 80065a0:	4618      	mov	r0, r3
 80065a2:	f7ff fe6b 	bl	800627c <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 80065a6:	f107 0214 	add.w	r2, r7, #20
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	68b9      	ldr	r1, [r7, #8]
 80065ae:	4620      	mov	r0, r4
 80065b0:	f000 f8d0 	bl	8006754 <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>
 80065b4:	f107 0314 	add.w	r3, r7, #20
 80065b8:	4618      	mov	r0, r3
 80065ba:	f7ff fcd3 	bl	8005f64 <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	4618      	mov	r0, r3
 80065c2:	371c      	adds	r7, #28
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd90      	pop	{r4, r7, pc}
 80065c8:	08023674 	.word	0x08023674

080065cc <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 80065cc:	b480      	push	{r7}
 80065ce:	b083      	sub	sp, #12
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2200      	movs	r2, #0
 80065da:	605a      	str	r2, [r3, #4]
	return *this;
 80065dc:	687b      	ldr	r3, [r7, #4]
      }
 80065de:	4618      	mov	r0, r3
 80065e0:	370c      	adds	r7, #12
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr

080065ea <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>:
          void operator()(typename _Alloc::value_type* __ptr)
 80065ea:	b590      	push	{r4, r7, lr}
 80065ec:	b085      	sub	sp, #20
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	6078      	str	r0, [r7, #4]
 80065f2:	6039      	str	r1, [r7, #0]
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 80065f4:	6879      	ldr	r1, [r7, #4]
 80065f6:	f107 0308 	add.w	r3, r7, #8
 80065fa:	683a      	ldr	r2, [r7, #0]
 80065fc:	4618      	mov	r0, r3
 80065fe:	f7ff feee 	bl	80063de <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEEC1ERS2_PS1_>
	    allocator_traits<_Alloc>::destroy(_M_alloc, __guard.get());
 8006602:	687c      	ldr	r4, [r7, #4]
 8006604:	f107 0308 	add.w	r3, r7, #8
 8006608:	4618      	mov	r0, r3
 800660a:	f7ff fdf7 	bl	80061fc <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEE3getEv>
 800660e:	4603      	mov	r3, r0
 8006610:	4619      	mov	r1, r3
 8006612:	4620      	mov	r0, r4
 8006614:	f000 f8bc 	bl	8006790 <_ZNSt16allocator_traitsISaIN4tama6SpriteEEE7destroyIS1_EEvRS2_PT_>
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 8006618:	f107 0308 	add.w	r3, r7, #8
 800661c:	4618      	mov	r0, r3
 800661e:	f7ff fdd8 	bl	80061d2 <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEED1Ev>
          }
 8006622:	bf00      	nop
 8006624:	3714      	adds	r7, #20
 8006626:	46bd      	mov	sp, r7
 8006628:	bd90      	pop	{r4, r7, pc}

0800662a <_ZSt12__get_helperILj0EPN4tama13TextureLoaderEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800662a:	b580      	push	{r7, lr}
 800662c:	b082      	sub	sp, #8
 800662e:	af00      	add	r7, sp, #0
 8006630:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 f8b9 	bl	80067aa <_ZNSt11_Tuple_implILj0EJPN4tama13TextureLoaderESt14default_deleteIS1_EEE7_M_headERKS5_>
 8006638:	4603      	mov	r3, r0
 800663a:	4618      	mov	r0, r3
 800663c:	3708      	adds	r7, #8
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}

08006642 <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8006642:	b580      	push	{r7, lr}
 8006644:	b084      	sub	sp, #16
 8006646:	af00      	add	r7, sp, #0
 8006648:	60f8      	str	r0, [r7, #12]
 800664a:	60b9      	str	r1, [r7, #8]
 800664c:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800664e:	68f8      	ldr	r0, [r7, #12]
 8006650:	f000 f8b8 	bl	80067c4 <_ZNK9__gnu_cxx13new_allocatorIN4tama6SpriteEE8max_sizeEv>
 8006654:	4602      	mov	r2, r0
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	4293      	cmp	r3, r2
 800665a:	bf8c      	ite	hi
 800665c:	2301      	movhi	r3, #1
 800665e:	2300      	movls	r3, #0
 8006660:	b2db      	uxtb	r3, r3
 8006662:	2b00      	cmp	r3, #0
 8006664:	d001      	beq.n	800666a <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8006666:	f019 f958 	bl	801f91a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	015b      	lsls	r3, r3, #5
 800666e:	4618      	mov	r0, r3
 8006670:	f019 f925 	bl	801f8be <_Znwj>
 8006674:	4603      	mov	r3, r0
      }
 8006676:	4618      	mov	r0, r3
 8006678:	3710      	adds	r7, #16
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}

0800667e <_ZSt11__addressofISaIN4tama6SpriteEEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800667e:	b480      	push	{r7}
 8006680:	b083      	sub	sp, #12
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4618      	mov	r0, r3
 800668a:	370c      	adds	r7, #12
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	60b9      	str	r1, [r7, #8]
 800669e:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 80066a0:	68b8      	ldr	r0, [r7, #8]
 80066a2:	f019 f925 	bl	801f8f0 <_ZdlPv>
      }
 80066a6:	bf00      	nop
 80066a8:	3710      	adds	r7, #16
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}

080066ae <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80066ae:	b480      	push	{r7}
 80066b0:	b083      	sub	sp, #12
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	6078      	str	r0, [r7, #4]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	4618      	mov	r0, r3
 80066ba:	370c      	adds	r7, #12
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr

080066c4 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	4618      	mov	r0, r3
 80066d0:	370c      	adds	r7, #12
 80066d2:	46bd      	mov	sp, r7
 80066d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d8:	4770      	bx	lr

080066da <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>:
      allocate(allocator_type& __a, size_type __n)
 80066da:	b580      	push	{r7, lr}
 80066dc:	b082      	sub	sp, #8
 80066de:	af00      	add	r7, sp, #0
 80066e0:	6078      	str	r0, [r7, #4]
 80066e2:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80066e4:	2200      	movs	r2, #0
 80066e6:	6839      	ldr	r1, [r7, #0]
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f000 f877 	bl	80067dc <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>
 80066ee:	4603      	mov	r3, r0
 80066f0:	4618      	mov	r0, r3
 80066f2:	3708      	adds	r7, #8
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}

080066f8 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b084      	sub	sp, #16
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	60b9      	str	r1, [r7, #8]
 8006702:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8006704:	68b8      	ldr	r0, [r7, #8]
 8006706:	f000 f88a 	bl	800681e <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>
 800670a:	4602      	mov	r2, r0
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	601a      	str	r2, [r3, #0]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	605a      	str	r2, [r3, #4]
      { }
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	4618      	mov	r0, r3
 800671a:	3710      	adds	r7, #16
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8006720:	b580      	push	{r7, lr}
 8006722:	b084      	sub	sp, #16
 8006724:	af00      	add	r7, sp, #0
 8006726:	60f8      	str	r0, [r7, #12]
 8006728:	60b9      	str	r1, [r7, #8]
 800672a:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800672c:	687a      	ldr	r2, [r7, #4]
 800672e:	68b9      	ldr	r1, [r7, #8]
 8006730:	68f8      	ldr	r0, [r7, #12]
 8006732:	f000 f87f 	bl	8006834 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>
 8006736:	bf00      	nop
 8006738:	3710      	adds	r7, #16
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}

0800673e <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 800673e:	b480      	push	{r7}
 8006740:	b083      	sub	sp, #12
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	4618      	mov	r0, r3
 800674a:	370c      	adds	r7, #12
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr

08006754 <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 8006754:	b590      	push	{r4, r7, lr}
 8006756:	b085      	sub	sp, #20
 8006758:	af00      	add	r7, sp, #0
 800675a:	60f8      	str	r0, [r7, #12]
 800675c:	60b9      	str	r1, [r7, #8]
 800675e:	607a      	str	r2, [r7, #4]
 8006760:	603b      	str	r3, [r7, #0]
	: _M_ptr(__p), _Del_base(std::move(__d)), _Alloc_base(__a)
 8006762:	68fc      	ldr	r4, [r7, #12]
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f7ff fd7e 	bl	8006266 <_ZSt4moveIRNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800676a:	4603      	mov	r3, r0
 800676c:	4619      	mov	r1, r3
 800676e:	4620      	mov	r0, r4
 8006770:	f000 f86d 	bl	800684e <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	3301      	adds	r3, #1
 8006778:	6839      	ldr	r1, [r7, #0]
 800677a:	4618      	mov	r0, r3
 800677c:	f000 f87a 	bl	8006874 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama6SpriteEELb1EEC1ERKS2_>
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	68ba      	ldr	r2, [r7, #8]
 8006784:	605a      	str	r2, [r3, #4]
	{ }
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	4618      	mov	r0, r3
 800678a:	3714      	adds	r7, #20
 800678c:	46bd      	mov	sp, r7
 800678e:	bd90      	pop	{r4, r7, pc}

08006790 <_ZNSt16allocator_traitsISaIN4tama6SpriteEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 8006790:	b580      	push	{r7, lr}
 8006792:	b082      	sub	sp, #8
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 800679a:	6839      	ldr	r1, [r7, #0]
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f000 f877 	bl	8006890 <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEE7destroyIS2_EEvPT_>
 80067a2:	bf00      	nop
 80067a4:	3708      	adds	r7, #8
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}

080067aa <_ZNSt11_Tuple_implILj0EJPN4tama13TextureLoaderESt14default_deleteIS1_EEE7_M_headERKS5_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80067aa:	b580      	push	{r7, lr}
 80067ac:	b082      	sub	sp, #8
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	6078      	str	r0, [r7, #4]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	4618      	mov	r0, r3
 80067b6:	f000 f877 	bl	80068a8 <_ZNSt10_Head_baseILj0EPN4tama13TextureLoaderELb0EE7_M_headERKS3_>
 80067ba:	4603      	mov	r3, r0
 80067bc:	4618      	mov	r0, r3
 80067be:	3708      	adds	r7, #8
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}

080067c4 <_ZNK9__gnu_cxx13new_allocatorIN4tama6SpriteEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80067c4:	b480      	push	{r7}
 80067c6:	b083      	sub	sp, #12
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 80067cc:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
 80067d0:	4618      	mov	r0, r3
 80067d2:	370c      	adds	r7, #12
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80067dc:	b580      	push	{r7, lr}
 80067de:	b084      	sub	sp, #16
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	60f8      	str	r0, [r7, #12]
 80067e4:	60b9      	str	r1, [r7, #8]
 80067e6:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 80067e8:	68f8      	ldr	r0, [r7, #12]
 80067ea:	f000 f869 	bl	80068c0 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>
 80067ee:	4602      	mov	r2, r0
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	4293      	cmp	r3, r2
 80067f4:	bf8c      	ite	hi
 80067f6:	2301      	movhi	r3, #1
 80067f8:	2300      	movls	r3, #0
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d001      	beq.n	8006804 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8006800:	f019 f88b 	bl	801f91a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8006804:	68ba      	ldr	r2, [r7, #8]
 8006806:	4613      	mov	r3, r2
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	4413      	add	r3, r2
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	4618      	mov	r0, r3
 8006810:	f019 f855 	bl	801f8be <_Znwj>
 8006814:	4603      	mov	r3, r0
      }
 8006816:	4618      	mov	r0, r3
 8006818:	3710      	adds	r7, #16
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}

0800681e <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800681e:	b480      	push	{r7}
 8006820:	b083      	sub	sp, #12
 8006822:	af00      	add	r7, sp, #0
 8006824:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4618      	mov	r0, r3
 800682a:	370c      	adds	r7, #12
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr

08006834 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>:
      deallocate(pointer __p, size_type)
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
 800683a:	60f8      	str	r0, [r7, #12]
 800683c:	60b9      	str	r1, [r7, #8]
 800683e:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8006840:	68b8      	ldr	r0, [r7, #8]
 8006842:	f019 f855 	bl	801f8f0 <_ZdlPv>
      }
 8006846:	bf00      	nop
 8006848:	3710      	adds	r7, #16
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}

0800684e <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _M_tp(std::move(__tp)) { }
 800684e:	b590      	push	{r4, r7, lr}
 8006850:	b083      	sub	sp, #12
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
 8006856:	6039      	str	r1, [r7, #0]
 8006858:	687c      	ldr	r4, [r7, #4]
 800685a:	6838      	ldr	r0, [r7, #0]
 800685c:	f7ff fd03 	bl	8006266 <_ZSt4moveIRNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8006860:	4603      	mov	r3, r0
 8006862:	4619      	mov	r1, r3
 8006864:	4620      	mov	r0, r4
 8006866:	f7ff fd09 	bl	800627c <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	4618      	mov	r0, r3
 800686e:	370c      	adds	r7, #12
 8006870:	46bd      	mov	sp, r7
 8006872:	bd90      	pop	{r4, r7, pc}

08006874 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama6SpriteEELb1EEC1ERKS2_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 8006874:	b580      	push	{r7, lr}
 8006876:	b082      	sub	sp, #8
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	6039      	str	r1, [r7, #0]
 800687e:	6839      	ldr	r1, [r7, #0]
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f7ff fc85 	bl	8006190 <_ZNSaIN4tama6SpriteEEC1ERKS1_>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	4618      	mov	r0, r3
 800688a:	3708      	adds	r7, #8
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}

08006890 <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEE7destroyIS2_EEvPT_>:
	destroy(_Up* __p) { __p->~_Up(); }
 8006890:	b580      	push	{r7, lr}
 8006892:	b082      	sub	sp, #8
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	6039      	str	r1, [r7, #0]
 800689a:	6838      	ldr	r0, [r7, #0]
 800689c:	f7ff f82c 	bl	80058f8 <_ZN4tama6SpriteD1Ev>
 80068a0:	bf00      	nop
 80068a2:	3708      	adds	r7, #8
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}

080068a8 <_ZNSt10_Head_baseILj0EPN4tama13TextureLoaderELb0EE7_M_headERKS3_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 80068a8:	b480      	push	{r7}
 80068aa:	b083      	sub	sp, #12
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	4618      	mov	r0, r3
 80068b4:	370c      	adds	r7, #12
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr
	...

080068c0 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80068c0:	b480      	push	{r7}
 80068c2:	b083      	sub	sp, #12
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 80068c8:	4b03      	ldr	r3, [pc, #12]	; (80068d8 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv+0x18>)
 80068ca:	4618      	mov	r0, r3
 80068cc:	370c      	adds	r7, #12
 80068ce:	46bd      	mov	sp, r7
 80068d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d4:	4770      	bx	lr
 80068d6:	bf00      	nop
 80068d8:	0ccccccc 	.word	0x0ccccccc

080068dc <_ZNSt15_Sp_counted_ptrIPN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80068dc:	b580      	push	{r7, lr}
 80068de:	b082      	sub	sp, #8
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	4a05      	ldr	r2, [pc, #20]	; (80068fc <_ZNSt15_Sp_counted_ptrIPN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	601a      	str	r2, [r3, #0]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	4618      	mov	r0, r3
 80068ee:	f7fd fab1 	bl	8003e54 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	4618      	mov	r0, r3
 80068f6:	3708      	adds	r7, #8
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}
 80068fc:	08023690 	.word	0x08023690

08006900 <_ZNSt15_Sp_counted_ptrIPN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 8006900:	b580      	push	{r7, lr}
 8006902:	b082      	sub	sp, #8
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f7ff ffe7 	bl	80068dc <_ZNSt15_Sp_counted_ptrIPN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800690e:	2110      	movs	r1, #16
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f018 ffd2 	bl	801f8ba <_ZdlPvj>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	4618      	mov	r0, r3
 800691a:	3708      	adds	r7, #8
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 8006920:	b580      	push	{r7, lr}
 8006922:	b082      	sub	sp, #8
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	4a08      	ldr	r2, [pc, #32]	; (800694c <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev+0x2c>)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	601a      	str	r2, [r3, #0]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	330c      	adds	r3, #12
 8006932:	4618      	mov	r0, r3
 8006934:	f7ff fe09 	bl	800654a <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	4618      	mov	r0, r3
 800693c:	f7fd fa8a 	bl	8003e54 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	4618      	mov	r0, r3
 8006944:	3708      	adds	r7, #8
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	08023674 	.word	0x08023674

08006950 <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
 8006950:	b580      	push	{r7, lr}
 8006952:	b082      	sub	sp, #8
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f7ff ffe1 	bl	8006920 <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
 800695e:	2114      	movs	r1, #20
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f018 ffaa 	bl	801f8ba <_ZdlPvj>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4618      	mov	r0, r3
 800696a:	3708      	adds	r7, #8
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}

08006970 <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8006970:	b580      	push	{r7, lr}
 8006972:	b082      	sub	sp, #8
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	330c      	adds	r3, #12
 800697c:	4618      	mov	r0, r3
 800697e:	f000 f86d 	bl	8006a5c <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>
 8006982:	4602      	mov	r2, r0
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	691b      	ldr	r3, [r3, #16]
 8006988:	4619      	mov	r1, r3
 800698a:	4610      	mov	r0, r2
 800698c:	f7ff fe2d 	bl	80065ea <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>
 8006990:	bf00      	nop
 8006992:	3708      	adds	r7, #8
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8006998:	b580      	push	{r7, lr}
 800699a:	b086      	sub	sp, #24
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	330c      	adds	r3, #12
 80069a4:	4618      	mov	r0, r3
 80069a6:	f000 f866 	bl	8006a76 <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>
 80069aa:	4602      	mov	r2, r0
 80069ac:	f107 0314 	add.w	r3, r7, #20
 80069b0:	4611      	mov	r1, r2
 80069b2:	4618      	mov	r0, r3
 80069b4:	f7ff fd61 	bl	800647a <_ZNSaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 80069b8:	f107 0114 	add.w	r1, r7, #20
 80069bc:	f107 030c 	add.w	r3, r7, #12
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	4618      	mov	r0, r3
 80069c4:	f7ff fe98 	bl	80066f8 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
	this->~_Sp_counted_deleter();
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f7ff ffa9 	bl	8006920 <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 80069ce:	f107 030c 	add.w	r3, r7, #12
 80069d2:	4618      	mov	r0, r3
 80069d4:	f7ff fd7d 	bl	80064d2 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	__allocator_type __a(_M_impl._M_alloc());
 80069d8:	f107 0314 	add.w	r3, r7, #20
 80069dc:	4618      	mov	r0, r3
 80069de:	f7ff fd59 	bl	8006494 <_ZNSaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
      }
 80069e2:	bf00      	nop
 80069e4:	3718      	adds	r7, #24
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}

080069ea <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept
 80069ea:	b480      	push	{r7}
 80069ec:	b083      	sub	sp, #12
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	6078      	str	r0, [r7, #4]
 80069f2:	6039      	str	r1, [r7, #0]
        return nullptr;
 80069f4:	2300      	movs	r3, #0
      }
 80069f6:	4618      	mov	r0, r3
 80069f8:	370c      	adds	r7, #12
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr

08006a02 <_ZNSt15_Sp_counted_ptrIPN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8006a02:	b590      	push	{r4, r7, lr}
 8006a04:	b083      	sub	sp, #12
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]
      { delete _M_ptr; }
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	68dc      	ldr	r4, [r3, #12]
 8006a0e:	2c00      	cmp	r4, #0
 8006a10:	d006      	beq.n	8006a20 <_ZNSt15_Sp_counted_ptrIPN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1e>
 8006a12:	4620      	mov	r0, r4
 8006a14:	f7fe ff70 	bl	80058f8 <_ZN4tama6SpriteD1Ev>
 8006a18:	2120      	movs	r1, #32
 8006a1a:	4620      	mov	r0, r4
 8006a1c:	f018 ff4d 	bl	801f8ba <_ZdlPvj>
 8006a20:	bf00      	nop
 8006a22:	370c      	adds	r7, #12
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd90      	pop	{r4, r7, pc}

08006a28 <_ZNSt15_Sp_counted_ptrIPN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b082      	sub	sp, #8
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
      { delete this; }
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d002      	beq.n	8006a3c <_ZNSt15_Sp_counted_ptrIPN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x14>
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f7ff ff62 	bl	8006900 <_ZNSt15_Sp_counted_ptrIPN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 8006a3c:	bf00      	nop
 8006a3e:	3708      	adds	r7, #8
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}

08006a44 <_ZNSt15_Sp_counted_ptrIPN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info&) noexcept
 8006a44:	b480      	push	{r7}
 8006a46:	b083      	sub	sp, #12
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	6039      	str	r1, [r7, #0]
      { return nullptr; }
 8006a4e:	2300      	movs	r3, #0
 8006a50:	4618      	mov	r0, r3
 8006a52:	370c      	adds	r7, #12
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b082      	sub	sp, #8
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	4618      	mov	r0, r3
 8006a68:	f000 f813 	bl	8006a92 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3708      	adds	r7, #8
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}

08006a76 <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 8006a76:	b580      	push	{r7, lr}
 8006a78:	b082      	sub	sp, #8
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	6078      	str	r0, [r7, #4]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	3301      	adds	r3, #1
 8006a82:	4618      	mov	r0, r3
 8006a84:	f000 f810 	bl	8006aa8 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama6SpriteEELb1EE6_S_getERS3_>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3708      	adds	r7, #8
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}

08006a92 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>:
      _S_get(_Sp_ebo_helper& __eboh)
 8006a92:	b480      	push	{r7}
 8006a94:	b083      	sub	sp, #12
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	6078      	str	r0, [r7, #4]
      { return __eboh._M_tp; }
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	370c      	adds	r7, #12
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr

08006aa8 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama6SpriteEELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 8006aa8:	b480      	push	{r7}
 8006aaa:	b083      	sub	sp, #12
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	370c      	adds	r7, #12
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr

08006abe <_ZN4tama4Home7onInputENS_6ButtonE>:
#include "../menu/wash/Wash.h"
#include "../menu/eat/Eat.h"
#include "../menu/play/menu/PlayMenu.h"

void tama::Home::onInput(tama::Button button)
{
 8006abe:	b580      	push	{r7, lr}
 8006ac0:	b084      	sub	sp, #16
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	6078      	str	r0, [r7, #4]
 8006ac6:	460b      	mov	r3, r1
 8006ac8:	70fb      	strb	r3, [r7, #3]
    if (button == Button::A)
 8006aca:	78fb      	ldrb	r3, [r7, #3]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d104      	bne.n	8006ada <_ZN4tama4Home7onInputENS_6ButtonE+0x1c>
    {
        icons.changeSelectedIcon();
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	3328      	adds	r3, #40	; 0x28
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f006 fb8d 	bl	800d1f4 <_ZN4tama11ActionIcons18changeSelectedIconEv>
    }
    if (button == Button::B)
 8006ada:	78fb      	ldrb	r3, [r7, #3]
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d10a      	bne.n	8006af6 <_ZN4tama4Home7onInputENS_6ButtonE+0x38>
    {
        int selected = icons.getSelectedIconIndex();
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	3328      	adds	r3, #40	; 0x28
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f006 fbed 	bl	800d2c4 <_ZN4tama11ActionIcons20getSelectedIconIndexEv>
 8006aea:	60f8      	str	r0, [r7, #12]
        onIconSelection(selected);
 8006aec:	68f9      	ldr	r1, [r7, #12]
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 f85e 	bl	8006bb0 <_ZN4tama4Home15onIconSelectionEi>
        return;
 8006af4:	e007      	b.n	8006b06 <_ZN4tama4Home7onInputENS_6ButtonE+0x48>
    }
    if (button == Button::C)
 8006af6:	78fb      	ldrb	r3, [r7, #3]
 8006af8:	2b02      	cmp	r3, #2
 8006afa:	d104      	bne.n	8006b06 <_ZN4tama4Home7onInputENS_6ButtonE+0x48>
    {
        icons.removeSelection();
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	3328      	adds	r3, #40	; 0x28
 8006b00:	4618      	mov	r0, r3
 8006b02:	f006 fbc3 	bl	800d28c <_ZN4tama11ActionIcons15removeSelectionEv>
    }
}
 8006b06:	3710      	adds	r7, #16
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}

08006b0c <_ZNSt12__shared_ptrIN4tama3EatELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_ptr() = default;
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b082      	sub	sp, #8
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	3304      	adds	r3, #4
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f7fc fafa 	bl	8003112 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	4618      	mov	r0, r3
 8006b22:	3708      	adds	r7, #8
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <_ZNSt10shared_ptrIN4tama3EatEED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	4618      	mov	r0, r3
 8006b34:	f7ff ffea 	bl	8006b0c <_ZNSt12__shared_ptrIN4tama3EatELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3708      	adds	r7, #8
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}

08006b42 <_ZNSt12__shared_ptrIN4tama4WashELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
 8006b42:	b580      	push	{r7, lr}
 8006b44:	b082      	sub	sp, #8
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	6078      	str	r0, [r7, #4]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	3304      	adds	r3, #4
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f7fc fadf 	bl	8003112 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	4618      	mov	r0, r3
 8006b58:	3708      	adds	r7, #8
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}

08006b5e <_ZNSt10shared_ptrIN4tama4WashEED1Ev>:
 8006b5e:	b580      	push	{r7, lr}
 8006b60:	b082      	sub	sp, #8
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f7ff ffea 	bl	8006b42 <_ZNSt12__shared_ptrIN4tama4WashELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	4618      	mov	r0, r3
 8006b72:	3708      	adds	r7, #8
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <_ZNSt12__shared_ptrIN4tama8PlayMenuELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b082      	sub	sp, #8
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	3304      	adds	r3, #4
 8006b84:	4618      	mov	r0, r3
 8006b86:	f7fc fac4 	bl	8003112 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3708      	adds	r7, #8
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <_ZNSt10shared_ptrIN4tama8PlayMenuEED1Ev>:
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b082      	sub	sp, #8
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f7ff ffea 	bl	8006b78 <_ZNSt12__shared_ptrIN4tama8PlayMenuELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3708      	adds	r7, #8
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}
	...

08006bb0 <_ZN4tama4Home15onIconSelectionEi>:

void tama::Home::onIconSelection(int selected)
{
 8006bb0:	b590      	push	{r4, r7, lr}
 8006bb2:	b08f      	sub	sp, #60	; 0x3c
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	6039      	str	r1, [r7, #0]
    switch (selected)
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	2b07      	cmp	r3, #7
 8006bbe:	f200 808b 	bhi.w	8006cd8 <_ZN4tama4Home15onIconSelectionEi+0x128>
 8006bc2:	a201      	add	r2, pc, #4	; (adr r2, 8006bc8 <_ZN4tama4Home15onIconSelectionEi+0x18>)
 8006bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bc8:	08006cd9 	.word	0x08006cd9
 8006bcc:	08006be9 	.word	0x08006be9
 8006bd0:	08006c39 	.word	0x08006c39
 8006bd4:	08006c89 	.word	0x08006c89
 8006bd8:	08006cd9 	.word	0x08006cd9
 8006bdc:	08006cd9 	.word	0x08006cd9
 8006be0:	08006cd9 	.word	0x08006cd9
 8006be4:	08006cd9 	.word	0x08006cd9
    {
        case 0:
            return;
        case 1:
            context->switchStage(std::make_shared<Eat>(context));
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	330c      	adds	r3, #12
 8006bec:	4618      	mov	r0, r3
 8006bee:	f7fd f8ed 	bl	8003dcc <_ZNKSt19__shared_ptr_accessIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8006bf2:	4604      	mov	r4, r0
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f103 020c 	add.w	r2, r3, #12
 8006bfa:	f107 0310 	add.w	r3, r7, #16
 8006bfe:	4611      	mov	r1, r2
 8006c00:	4618      	mov	r0, r3
 8006c02:	f000 fa61 	bl	80070c8 <_ZSt11make_sharedIN4tama3EatEJRSt10shared_ptrINS0_7ContextEEEES2_IT_EDpOT0_>
 8006c06:	f107 0210 	add.w	r2, r7, #16
 8006c0a:	f107 0308 	add.w	r3, r7, #8
 8006c0e:	4611      	mov	r1, r2
 8006c10:	4618      	mov	r0, r3
 8006c12:	f000 fa81 	bl	8007118 <_ZNSt10shared_ptrIN4tama5StageEEC1INS0_3EatEvEEOS_IT_E>
 8006c16:	f107 0308 	add.w	r3, r7, #8
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	4620      	mov	r0, r4
 8006c1e:	f7fc f86c 	bl	8002cfa <_ZN4tama7Context11switchStageESt10shared_ptrINS_5StageEE>
 8006c22:	f107 0308 	add.w	r3, r7, #8
 8006c26:	4618      	mov	r0, r3
 8006c28:	f7fc f8c9 	bl	8002dbe <_ZNSt10shared_ptrIN4tama5StageEED1Ev>
 8006c2c:	f107 0310 	add.w	r3, r7, #16
 8006c30:	4618      	mov	r0, r3
 8006c32:	f7ff ff79 	bl	8006b28 <_ZNSt10shared_ptrIN4tama3EatEED1Ev>
            return;
 8006c36:	e050      	b.n	8006cda <_ZN4tama4Home15onIconSelectionEi+0x12a>
        case 2:
            context->switchStage(std::make_shared<Wash>(context));
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	330c      	adds	r3, #12
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f7fd f8c5 	bl	8003dcc <_ZNKSt19__shared_ptr_accessIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8006c42:	4604      	mov	r4, r0
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f103 020c 	add.w	r2, r3, #12
 8006c4a:	f107 0320 	add.w	r3, r7, #32
 8006c4e:	4611      	mov	r1, r2
 8006c50:	4618      	mov	r0, r3
 8006c52:	f000 fa74 	bl	800713e <_ZSt11make_sharedIN4tama4WashEJRSt10shared_ptrINS0_7ContextEEEES2_IT_EDpOT0_>
 8006c56:	f107 0220 	add.w	r2, r7, #32
 8006c5a:	f107 0318 	add.w	r3, r7, #24
 8006c5e:	4611      	mov	r1, r2
 8006c60:	4618      	mov	r0, r3
 8006c62:	f000 fa94 	bl	800718e <_ZNSt10shared_ptrIN4tama5StageEEC1INS0_4WashEvEEOS_IT_E>
 8006c66:	f107 0318 	add.w	r3, r7, #24
 8006c6a:	4619      	mov	r1, r3
 8006c6c:	4620      	mov	r0, r4
 8006c6e:	f7fc f844 	bl	8002cfa <_ZN4tama7Context11switchStageESt10shared_ptrINS_5StageEE>
 8006c72:	f107 0318 	add.w	r3, r7, #24
 8006c76:	4618      	mov	r0, r3
 8006c78:	f7fc f8a1 	bl	8002dbe <_ZNSt10shared_ptrIN4tama5StageEED1Ev>
 8006c7c:	f107 0320 	add.w	r3, r7, #32
 8006c80:	4618      	mov	r0, r3
 8006c82:	f7ff ff6c 	bl	8006b5e <_ZNSt10shared_ptrIN4tama4WashEED1Ev>
            return;
 8006c86:	e028      	b.n	8006cda <_ZN4tama4Home15onIconSelectionEi+0x12a>
        case 3:
            context->switchStage(std::make_shared<PlayMenu>(context));
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	330c      	adds	r3, #12
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f7fd f89d 	bl	8003dcc <_ZNKSt19__shared_ptr_accessIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8006c92:	4604      	mov	r4, r0
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f103 020c 	add.w	r2, r3, #12
 8006c9a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006c9e:	4611      	mov	r1, r2
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f000 fa87 	bl	80071b4 <_ZSt11make_sharedIN4tama8PlayMenuEJRSt10shared_ptrINS0_7ContextEEEES2_IT_EDpOT0_>
 8006ca6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006caa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006cae:	4611      	mov	r1, r2
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f000 faa7 	bl	8007204 <_ZNSt10shared_ptrIN4tama5StageEEC1INS0_8PlayMenuEvEEOS_IT_E>
 8006cb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006cba:	4619      	mov	r1, r3
 8006cbc:	4620      	mov	r0, r4
 8006cbe:	f7fc f81c 	bl	8002cfa <_ZN4tama7Context11switchStageESt10shared_ptrINS_5StageEE>
 8006cc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f7fc f879 	bl	8002dbe <_ZNSt10shared_ptrIN4tama5StageEED1Ev>
 8006ccc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f7ff ff5f 	bl	8006b94 <_ZNSt10shared_ptrIN4tama8PlayMenuEED1Ev>
            return;
 8006cd6:	e000      	b.n	8006cda <_ZN4tama4Home15onIconSelectionEi+0x12a>
        case 6:
            return;
        case 7:
            return;
        default:
            return;
 8006cd8:	bf00      	nop
    }
}
 8006cda:	373c      	adds	r7, #60	; 0x3c
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd90      	pop	{r4, r7, pc}

08006ce0 <_ZN4tama4Home6onInitEv>:

void tama::Home::onInit()
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b083      	sub	sp, #12
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]

}
 8006ce8:	bf00      	nop
 8006cea:	370c      	adds	r7, #12
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b082      	sub	sp, #8
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	6039      	str	r1, [r7, #0]
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	601a      	str	r2, [r3, #0]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	1d1a      	adds	r2, r3, #4
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	3304      	adds	r3, #4
 8006d0e:	4619      	mov	r1, r3
 8006d10:	4610      	mov	r0, r2
 8006d12:	f7fc f9e7 	bl	80030e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3708      	adds	r7, #8
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <_ZNSt10shared_ptrIN4tama7TextureEEC1ERKS2_>:
      shared_ptr(const shared_ptr&) noexcept = default;
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b082      	sub	sp, #8
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	6039      	str	r1, [r7, #0]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	683a      	ldr	r2, [r7, #0]
 8006d2e:	4611      	mov	r1, r2
 8006d30:	4618      	mov	r0, r3
 8006d32:	f7ff ffdf 	bl	8006cf4 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3708      	adds	r7, #8
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <_ZN4tama4Home7onFrameEv>:

void tama::Home::onFrame()
{
 8006d40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d42:	b095      	sub	sp, #84	; 0x54
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
    if (timeToPetMove->getElapsedTime() >= onePetMoveTime)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	3318      	adds	r3, #24
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f7fe f864 	bl	8004e1a <_ZNKSt19__shared_ptr_accessIN4tama11TimeMonitorELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8006d52:	4602      	mov	r2, r0
 8006d54:	6813      	ldr	r3, [r2, #0]
 8006d56:	3304      	adds	r3, #4
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4610      	mov	r0, r2
 8006d5c:	4798      	blx	r3
 8006d5e:	4602      	mov	r2, r0
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6a1b      	ldr	r3, [r3, #32]
 8006d64:	429a      	cmp	r2, r3
 8006d66:	bf2c      	ite	cs
 8006d68:	2301      	movcs	r3, #1
 8006d6a:	2300      	movcc	r3, #0
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	f000 80b6 	beq.w	8006ee0 <_ZN4tama4Home7onFrameEv+0x1a0>
    {
        timeToPetMove->startTimer();
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	3318      	adds	r3, #24
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f7fe f84e 	bl	8004e1a <_ZNKSt19__shared_ptr_accessIN4tama11TimeMonitorELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8006d7e:	4602      	mov	r2, r0
 8006d80:	6813      	ldr	r3, [r2, #0]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4610      	mov	r0, r2
 8006d86:	4798      	blx	r3
        Vec2d futurePosition = pet.getPosition() + Vec2d(5 * petMovingDirection, 0);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f503 72c6 	add.w	r2, r3, #396	; 0x18c
 8006d8e:	f107 0310 	add.w	r3, r7, #16
 8006d92:	4611      	mov	r1, r2
 8006d94:	4618      	mov	r0, r3
 8006d96:	f007 fd85 	bl	800e8a4 <_ZN4tama6Sprite11getPositionEv>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	695a      	ldr	r2, [r3, #20]
 8006d9e:	4613      	mov	r3, r2
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	1899      	adds	r1, r3, r2
 8006da4:	f107 0318 	add.w	r3, r7, #24
 8006da8:	2200      	movs	r2, #0
 8006daa:	4618      	mov	r0, r3
 8006dac:	f7fa f87e 	bl	8000eac <_ZN4tama5Vec2dC1Eii>
 8006db0:	f107 0008 	add.w	r0, r7, #8
 8006db4:	f107 0110 	add.w	r1, r7, #16
 8006db8:	f107 0318 	add.w	r3, r7, #24
 8006dbc:	cb0c      	ldmia	r3, {r2, r3}
 8006dbe:	f7fa f85d 	bl	8000e7c <_ZN4tama5Vec2dplES0_>
        if (util::fitsInContent(pet.getPosition() + Vec2d(pet.getTexture()->width * petMovingDirection, 0)))
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f503 72c6 	add.w	r2, r3, #396	; 0x18c
 8006dc8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006dcc:	4611      	mov	r1, r2
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f007 fd68 	bl	800e8a4 <_ZN4tama6Sprite11getPositionEv>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f503 72c6 	add.w	r2, r3, #396	; 0x18c
 8006dda:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006dde:	4611      	mov	r1, r2
 8006de0:	4618      	mov	r0, r3
 8006de2:	f007 fd50 	bl	800e886 <_ZN4tama6Sprite10getTextureEv>
 8006de6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006dea:	4618      	mov	r0, r3
 8006dec:	f000 f960 	bl	80070b0 <_ZNKSt19__shared_ptr_accessIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8006df0:	4603      	mov	r3, r0
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	6952      	ldr	r2, [r2, #20]
 8006df8:	fb02 f303 	mul.w	r3, r2, r3
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006e02:	2200      	movs	r2, #0
 8006e04:	4618      	mov	r0, r3
 8006e06:	f7fa f851 	bl	8000eac <_ZN4tama5Vec2dC1Eii>
 8006e0a:	f107 0020 	add.w	r0, r7, #32
 8006e0e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8006e12:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006e16:	cb0c      	ldmia	r3, {r2, r3}
 8006e18:	f7fa f830 	bl	8000e7c <_ZN4tama5Vec2dplES0_>
 8006e1c:	f107 0320 	add.w	r3, r7, #32
 8006e20:	4618      	mov	r0, r3
 8006e22:	f7fa f8a5 	bl	8000f70 <_ZN4tama4util13fitsInContentERKNS_5Vec2dE>
 8006e26:	4603      	mov	r3, r0
 8006e28:	461c      	mov	r4, r3
 8006e2a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f7fe f9db 	bl	80051ea <_ZNSt10shared_ptrIN4tama7TextureEED1Ev>
 8006e34:	2c00      	cmp	r4, #0
 8006e36:	d009      	beq.n	8006e4c <_ZN4tama4Home7onFrameEv+0x10c>
        {
            pet.setPosition(futurePosition);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f503 70c6 	add.w	r0, r3, #396	; 0x18c
 8006e3e:	f107 0308 	add.w	r3, r7, #8
 8006e42:	e893 0006 	ldmia.w	r3, {r1, r2}
 8006e46:	f007 fd09 	bl	800e85c <_ZN4tama6Sprite11setPositionENS_5Vec2dE>
 8006e4a:	e004      	b.n	8006e56 <_ZN4tama4Home7onFrameEv+0x116>
        }
        else
        {
            petMovingDirection = -petMovingDirection;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	695b      	ldr	r3, [r3, #20]
 8006e50:	425a      	negs	r2, r3
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	615a      	str	r2, [r3, #20]
//        if (pet.getPosition().x + pet.getTexture()->width > util::dispWorkspaceRight)
//        {
//            pet.setPosition(util::fromBottomRight(Vec2d(0-pet.getTexture()->width, 0)));
//            petMovingDirection = !petMovingDirection;
//        }
        isPosOne ? pet.setTexture(petFrontPosTwo) : pet.setTexture(petFrontPosOne);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006e5c:	2400      	movs	r4, #0
 8006e5e:	2500      	movs	r5, #0
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d013      	beq.n	8006e8c <_ZN4tama4Home7onFrameEv+0x14c>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f503 76c6 	add.w	r6, r3, #396	; 0x18c
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f503 72c2 	add.w	r2, r3, #388	; 0x184
 8006e70:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006e74:	4611      	mov	r1, r2
 8006e76:	4618      	mov	r0, r3
 8006e78:	f7ff ff52 	bl	8006d20 <_ZNSt10shared_ptrIN4tama7TextureEEC1ERKS2_>
 8006e7c:	2401      	movs	r4, #1
 8006e7e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006e82:	4619      	mov	r1, r3
 8006e84:	4630      	mov	r0, r6
 8006e86:	f007 fcda 	bl	800e83e <_ZN4tama6Sprite10setTextureESt10shared_ptrINS_7TextureEE>
 8006e8a:	e012      	b.n	8006eb2 <_ZN4tama4Home7onFrameEv+0x172>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f503 76c6 	add.w	r6, r3, #396	; 0x18c
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f503 72be 	add.w	r2, r3, #380	; 0x17c
 8006e98:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006e9c:	4611      	mov	r1, r2
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f7ff ff3e 	bl	8006d20 <_ZNSt10shared_ptrIN4tama7TextureEEC1ERKS2_>
 8006ea4:	2501      	movs	r5, #1
 8006ea6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006eaa:	4619      	mov	r1, r3
 8006eac:	4630      	mov	r0, r6
 8006eae:	f007 fcc6 	bl	800e83e <_ZN4tama6Sprite10setTextureESt10shared_ptrINS_7TextureEE>
 8006eb2:	2d00      	cmp	r5, #0
 8006eb4:	d004      	beq.n	8006ec0 <_ZN4tama4Home7onFrameEv+0x180>
 8006eb6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f7fe f995 	bl	80051ea <_ZNSt10shared_ptrIN4tama7TextureEED1Ev>
 8006ec0:	2c00      	cmp	r4, #0
 8006ec2:	d004      	beq.n	8006ece <_ZN4tama4Home7onFrameEv+0x18e>
 8006ec4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f7fe f98e 	bl	80051ea <_ZNSt10shared_ptrIN4tama7TextureEED1Ev>
        isPosOne = !isPosOne;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006ed4:	f083 0301 	eor.w	r3, r3, #1
 8006ed8:	b2da      	uxtb	r2, r3
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
}
 8006ee0:	bf00      	nop
 8006ee2:	3754      	adds	r7, #84	; 0x54
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006ee8 <_ZN4tama4HomeC1ERKSt10shared_ptrINS_7ContextEE>:

tama::Home::Home(const std::shared_ptr<Context> &context) : Stage(context), icons(ActionIcons(scene, context))
 8006ee8:	b5b0      	push	{r4, r5, r7, lr}
 8006eea:	b092      	sub	sp, #72	; 0x48
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	6039      	str	r1, [r7, #0]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6839      	ldr	r1, [r7, #0]
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f7fc ff00 	bl	8003cfc <_ZN4tama5StageC1ERKSt10shared_ptrINS_7ContextEE>
 8006efc:	4a69      	ldr	r2, [pc, #420]	; (80070a4 <_ZN4tama4HomeC1ERKSt10shared_ptrINS_7ContextEE+0x1bc>)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	601a      	str	r2, [r3, #0]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2201      	movs	r2, #1
 8006f06:	615a      	str	r2, [r3, #20]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	3318      	adds	r3, #24
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f7fe fa4a 	bl	80053a6 <_ZNSt10shared_ptrIN4tama11TimeMonitorEEC1Ev>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8006f18:	621a      	str	r2, [r3, #32]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	1d1a      	adds	r2, r3, #4
 8006f2c:	f107 0308 	add.w	r3, r7, #8
 8006f30:	4611      	mov	r1, r2
 8006f32:	4618      	mov	r0, r3
 8006f34:	f7fc fe63 	bl	8003bfe <_ZNSt10shared_ptrIN4tama5SceneEEC1ERKS2_>
 8006f38:	f107 0308 	add.w	r3, r7, #8
 8006f3c:	683a      	ldr	r2, [r7, #0]
 8006f3e:	4619      	mov	r1, r3
 8006f40:	4620      	mov	r0, r4
 8006f42:	f006 f925 	bl	800d190 <_ZN4tama11ActionIconsC1ESt10shared_ptrINS_5SceneEERKS1_INS_7ContextEE>
 8006f46:	f107 0308 	add.w	r3, r7, #8
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f7fc fe67 	bl	8003c1e <_ZNSt10shared_ptrIN4tama5SceneEED1Ev>
        //int delay = 0;
        std::shared_ptr<TimeMonitor> timeToPetMove;
        const unsigned onePetMoveTime = 700;
        bool isPosOne = true;
        ActionIcons icons;
        std::shared_ptr<Texture> petFrontPosOne = context->getTextureLoader()->load(firstMale::baby::frontOne);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	330c      	adds	r3, #12
 8006f54:	4618      	mov	r0, r3
 8006f56:	f7fc ff39 	bl	8003dcc <_ZNKSt19__shared_ptr_accessIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	f107 0310 	add.w	r3, r7, #16
 8006f60:	4611      	mov	r1, r2
 8006f62:	4618      	mov	r0, r3
 8006f64:	f7fc f846 	bl	8002ff4 <_ZN4tama7Context16getTextureLoaderEv>
 8006f68:	f107 0310 	add.w	r3, r7, #16
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f7fe fd5d 	bl	8005a2c <_ZNKSt19__shared_ptr_accessIN4tama13TextureLoaderELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8006f72:	4601      	mov	r1, r0
 8006f74:	680b      	ldr	r3, [r1, #0]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	687a      	ldr	r2, [r7, #4]
 8006f7a:	f502 70be 	add.w	r0, r2, #380	; 0x17c
 8006f7e:	4a4a      	ldr	r2, [pc, #296]	; (80070a8 <_ZN4tama4HomeC1ERKSt10shared_ptrINS_7ContextEE+0x1c0>)
 8006f80:	4798      	blx	r3
 8006f82:	f107 0310 	add.w	r3, r7, #16
 8006f86:	4618      	mov	r0, r3
 8006f88:	f7fe fcf0 	bl	800596c <_ZNSt10shared_ptrIN4tama13TextureLoaderEED1Ev>
        std::shared_ptr<Texture> petFrontPosTwo = context->getTextureLoader()->load(firstMale::baby::frontTwo);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	330c      	adds	r3, #12
 8006f90:	4618      	mov	r0, r3
 8006f92:	f7fc ff1b 	bl	8003dcc <_ZNKSt19__shared_ptr_accessIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8006f96:	4602      	mov	r2, r0
 8006f98:	f107 0318 	add.w	r3, r7, #24
 8006f9c:	4611      	mov	r1, r2
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f7fc f828 	bl	8002ff4 <_ZN4tama7Context16getTextureLoaderEv>
 8006fa4:	f107 0318 	add.w	r3, r7, #24
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f7fe fd3f 	bl	8005a2c <_ZNKSt19__shared_ptr_accessIN4tama13TextureLoaderELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8006fae:	4601      	mov	r1, r0
 8006fb0:	680b      	ldr	r3, [r1, #0]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	f502 70c2 	add.w	r0, r2, #388	; 0x184
 8006fba:	4a3c      	ldr	r2, [pc, #240]	; (80070ac <_ZN4tama4HomeC1ERKSt10shared_ptrINS_7ContextEE+0x1c4>)
 8006fbc:	4798      	blx	r3
 8006fbe:	f107 0318 	add.w	r3, r7, #24
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f7fe fcd2 	bl	800596c <_ZNSt10shared_ptrIN4tama13TextureLoaderEED1Ev>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f503 74c6 	add.w	r4, r3, #396	; 0x18c
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f503 75be 	add.w	r5, r3, #380	; 0x17c
        Sprite pet = Sprite(petFrontPosOne, Vec2d(tama::util::fromBottomLeft(Vec2d(0, -petFrontPosOne->height))));
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f000 f868 	bl	80070b0 <_ZNKSt19__shared_ptr_accessIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	425b      	negs	r3, r3
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006fec:	2100      	movs	r1, #0
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f7f9 ff5c 	bl	8000eac <_ZN4tama5Vec2dC1Eii>
 8006ff4:	f107 0320 	add.w	r3, r7, #32
 8006ff8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006ffc:	4611      	mov	r1, r2
 8006ffe:	4618      	mov	r0, r3
 8007000:	f7f9 ff68 	bl	8000ed4 <_ZN4tama4util14fromBottomLeftERKNS_5Vec2dE>
 8007004:	f107 0320 	add.w	r3, r7, #32
 8007008:	461a      	mov	r2, r3
 800700a:	4629      	mov	r1, r5
 800700c:	4620      	mov	r0, r4
 800700e:	f007 fd03 	bl	800ea18 <_ZN4tama6SpriteC1ERKSt10shared_ptrINS_7TextureEERKNS_5Vec2dE>
{
    timeToPetMove = context->getTimeMonitorCreator()->createTimeMonitor();
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f103 0418 	add.w	r4, r3, #24
 8007018:	6838      	ldr	r0, [r7, #0]
 800701a:	f7fc fed7 	bl	8003dcc <_ZNKSt19__shared_ptr_accessIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800701e:	4602      	mov	r2, r0
 8007020:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007024:	4611      	mov	r1, r2
 8007026:	4618      	mov	r0, r3
 8007028:	f7fc f80d 	bl	8003046 <_ZN4tama7Context21getTimeMonitorCreatorEv>
 800702c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007030:	4618      	mov	r0, r3
 8007032:	f7fe f9c5 	bl	80053c0 <_ZNKSt19__shared_ptr_accessIN4tama18TimeMonitorCreatorELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8007036:	4602      	mov	r2, r0
 8007038:	6813      	ldr	r3, [r2, #0]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8007040:	4611      	mov	r1, r2
 8007042:	4798      	blx	r3
 8007044:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007048:	4619      	mov	r1, r3
 800704a:	4620      	mov	r0, r4
 800704c:	f7fe f9c4 	bl	80053d8 <_ZNSt10shared_ptrIN4tama11TimeMonitorEEaSEOS2_>
 8007050:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007054:	4618      	mov	r0, r3
 8007056:	f7fe f939 	bl	80052cc <_ZNSt10shared_ptrIN4tama11TimeMonitorEED1Ev>
 800705a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800705e:	4618      	mov	r0, r3
 8007060:	f7fe f94f 	bl	8005302 <_ZNSt10shared_ptrIN4tama18TimeMonitorCreatorEED1Ev>
    scene->addDrawable(std::shared_ptr<Drawable>(&pet));
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	3304      	adds	r3, #4
 8007068:	4618      	mov	r0, r3
 800706a:	f7fe f9c8 	bl	80053fe <_ZNKSt19__shared_ptr_accessIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800706e:	4604      	mov	r4, r0
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f503 72c6 	add.w	r2, r3, #396	; 0x18c
 8007076:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800707a:	4611      	mov	r1, r2
 800707c:	4618      	mov	r0, r3
 800707e:	f000 f8d4 	bl	800722a <_ZNSt10shared_ptrIN4tama8DrawableEEC1INS0_6SpriteEvEEPT_>
 8007082:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007086:	4619      	mov	r1, r3
 8007088:	4620      	mov	r0, r4
 800708a:	f009 ff2d 	bl	8010ee8 <_ZN4tama5Scene11addDrawableESt10shared_ptrINS_8DrawableEE>
 800708e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007092:	4618      	mov	r0, r3
 8007094:	f7fd fd2a 	bl	8004aec <_ZNSt10shared_ptrIN4tama8DrawableEED1Ev>
}
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	4618      	mov	r0, r3
 800709c:	3748      	adds	r7, #72	; 0x48
 800709e:	46bd      	mov	sp, r7
 80070a0:	bdb0      	pop	{r4, r5, r7, pc}
 80070a2:	bf00      	nop
 80070a4:	08023700 	.word	0x08023700
 80070a8:	200000a8 	.word	0x200000a8
 80070ac:	200000b4 	.word	0x200000b4

080070b0 <_ZNKSt19__shared_ptr_accessIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b082      	sub	sp, #8
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
	return _M_get();
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f000 f8c5 	bl	8007248 <_ZNKSt19__shared_ptr_accessIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 80070be:	4603      	mov	r3, r0
      }
 80070c0:	4618      	mov	r0, r3
 80070c2:	3708      	adds	r7, #8
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <_ZSt11make_sharedIN4tama3EatEJRSt10shared_ptrINS0_7ContextEEEES2_IT_EDpOT0_>:
    make_shared(_Args&&... __args)
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b084      	sub	sp, #16
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]
				       std::forward<_Args>(__args)...);
 80070d2:	f107 030c 	add.w	r3, r7, #12
 80070d6:	4618      	mov	r0, r3
 80070d8:	f000 f8c2 	bl	8007260 <_ZNSaIN4tama3EatEEC1Ev>
 80070dc:	6838      	ldr	r0, [r7, #0]
 80070de:	f7fe f957 	bl	8005390 <_ZSt7forwardIRSt10shared_ptrIN4tama7ContextEEEOT_RNSt16remove_referenceIS5_E4typeE>
 80070e2:	4602      	mov	r2, r0
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f107 010c 	add.w	r1, r7, #12
 80070ea:	4618      	mov	r0, r3
 80070ec:	f000 f8d0 	bl	8007290 <_ZSt15allocate_sharedIN4tama3EatESaIS1_EJRSt10shared_ptrINS0_7ContextEEEES3_IT_ERKT0_DpOT1_>
 80070f0:	f107 030c 	add.w	r3, r7, #12
 80070f4:	4618      	mov	r0, r3
 80070f6:	f000 f8bf 	bl	8007278 <_ZNSaIN4tama3EatEED1Ev>
    }
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	3710      	adds	r7, #16
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}

08007102 <_ZSt4moveIRSt10shared_ptrIN4tama3EatEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8007102:	b480      	push	{r7}
 8007104:	b083      	sub	sp, #12
 8007106:	af00      	add	r7, sp, #0
 8007108:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	4618      	mov	r0, r3
 800710e:	370c      	adds	r7, #12
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr

08007118 <_ZNSt10shared_ptrIN4tama5StageEEC1INS0_3EatEvEEOS_IT_E>:
	shared_ptr(shared_ptr<_Yp>&& __r) noexcept
 8007118:	b590      	push	{r4, r7, lr}
 800711a:	b083      	sub	sp, #12
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 8007122:	687c      	ldr	r4, [r7, #4]
 8007124:	6838      	ldr	r0, [r7, #0]
 8007126:	f7ff ffec 	bl	8007102 <_ZSt4moveIRSt10shared_ptrIN4tama3EatEEEONSt16remove_referenceIT_E4typeEOS6_>
 800712a:	4603      	mov	r3, r0
 800712c:	4619      	mov	r1, r3
 800712e:	4620      	mov	r0, r4
 8007130:	f000 f8c1 	bl	80072b6 <_ZNSt12__shared_ptrIN4tama5StageELN9__gnu_cxx12_Lock_policyE0EEC1INS0_3EatEvEEOS_IT_LS3_0EE>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	4618      	mov	r0, r3
 8007138:	370c      	adds	r7, #12
 800713a:	46bd      	mov	sp, r7
 800713c:	bd90      	pop	{r4, r7, pc}

0800713e <_ZSt11make_sharedIN4tama4WashEJRSt10shared_ptrINS0_7ContextEEEES2_IT_EDpOT0_>:
    make_shared(_Args&&... __args)
 800713e:	b580      	push	{r7, lr}
 8007140:	b084      	sub	sp, #16
 8007142:	af00      	add	r7, sp, #0
 8007144:	6078      	str	r0, [r7, #4]
 8007146:	6039      	str	r1, [r7, #0]
				       std::forward<_Args>(__args)...);
 8007148:	f107 030c 	add.w	r3, r7, #12
 800714c:	4618      	mov	r0, r3
 800714e:	f000 f8d0 	bl	80072f2 <_ZNSaIN4tama4WashEEC1Ev>
 8007152:	6838      	ldr	r0, [r7, #0]
 8007154:	f7fe f91c 	bl	8005390 <_ZSt7forwardIRSt10shared_ptrIN4tama7ContextEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8007158:	4602      	mov	r2, r0
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f107 010c 	add.w	r1, r7, #12
 8007160:	4618      	mov	r0, r3
 8007162:	f000 f8de 	bl	8007322 <_ZSt15allocate_sharedIN4tama4WashESaIS1_EJRSt10shared_ptrINS0_7ContextEEEES3_IT_ERKT0_DpOT1_>
 8007166:	f107 030c 	add.w	r3, r7, #12
 800716a:	4618      	mov	r0, r3
 800716c:	f000 f8cd 	bl	800730a <_ZNSaIN4tama4WashEED1Ev>
    }
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	3710      	adds	r7, #16
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}

08007178 <_ZSt4moveIRSt10shared_ptrIN4tama4WashEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8007178:	b480      	push	{r7}
 800717a:	b083      	sub	sp, #12
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	4618      	mov	r0, r3
 8007184:	370c      	adds	r7, #12
 8007186:	46bd      	mov	sp, r7
 8007188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718c:	4770      	bx	lr

0800718e <_ZNSt10shared_ptrIN4tama5StageEEC1INS0_4WashEvEEOS_IT_E>:
	shared_ptr(shared_ptr<_Yp>&& __r) noexcept
 800718e:	b590      	push	{r4, r7, lr}
 8007190:	b083      	sub	sp, #12
 8007192:	af00      	add	r7, sp, #0
 8007194:	6078      	str	r0, [r7, #4]
 8007196:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 8007198:	687c      	ldr	r4, [r7, #4]
 800719a:	6838      	ldr	r0, [r7, #0]
 800719c:	f7ff ffec 	bl	8007178 <_ZSt4moveIRSt10shared_ptrIN4tama4WashEEEONSt16remove_referenceIT_E4typeEOS6_>
 80071a0:	4603      	mov	r3, r0
 80071a2:	4619      	mov	r1, r3
 80071a4:	4620      	mov	r0, r4
 80071a6:	f000 f8cf 	bl	8007348 <_ZNSt12__shared_ptrIN4tama5StageELN9__gnu_cxx12_Lock_policyE0EEC1INS0_4WashEvEEOS_IT_LS3_0EE>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	4618      	mov	r0, r3
 80071ae:	370c      	adds	r7, #12
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd90      	pop	{r4, r7, pc}

080071b4 <_ZSt11make_sharedIN4tama8PlayMenuEJRSt10shared_ptrINS0_7ContextEEEES2_IT_EDpOT0_>:
    make_shared(_Args&&... __args)
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b084      	sub	sp, #16
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
 80071bc:	6039      	str	r1, [r7, #0]
				       std::forward<_Args>(__args)...);
 80071be:	f107 030c 	add.w	r3, r7, #12
 80071c2:	4618      	mov	r0, r3
 80071c4:	f000 f8de 	bl	8007384 <_ZNSaIN4tama8PlayMenuEEC1Ev>
 80071c8:	6838      	ldr	r0, [r7, #0]
 80071ca:	f7fe f8e1 	bl	8005390 <_ZSt7forwardIRSt10shared_ptrIN4tama7ContextEEEOT_RNSt16remove_referenceIS5_E4typeE>
 80071ce:	4602      	mov	r2, r0
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f107 010c 	add.w	r1, r7, #12
 80071d6:	4618      	mov	r0, r3
 80071d8:	f000 f8ec 	bl	80073b4 <_ZSt15allocate_sharedIN4tama8PlayMenuESaIS1_EJRSt10shared_ptrINS0_7ContextEEEES3_IT_ERKT0_DpOT1_>
 80071dc:	f107 030c 	add.w	r3, r7, #12
 80071e0:	4618      	mov	r0, r3
 80071e2:	f000 f8db 	bl	800739c <_ZNSaIN4tama8PlayMenuEED1Ev>
    }
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	3710      	adds	r7, #16
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}

080071ee <_ZSt4moveIRSt10shared_ptrIN4tama8PlayMenuEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 80071ee:	b480      	push	{r7}
 80071f0:	b083      	sub	sp, #12
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	4618      	mov	r0, r3
 80071fa:	370c      	adds	r7, #12
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr

08007204 <_ZNSt10shared_ptrIN4tama5StageEEC1INS0_8PlayMenuEvEEOS_IT_E>:
	shared_ptr(shared_ptr<_Yp>&& __r) noexcept
 8007204:	b590      	push	{r4, r7, lr}
 8007206:	b083      	sub	sp, #12
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 800720e:	687c      	ldr	r4, [r7, #4]
 8007210:	6838      	ldr	r0, [r7, #0]
 8007212:	f7ff ffec 	bl	80071ee <_ZSt4moveIRSt10shared_ptrIN4tama8PlayMenuEEEONSt16remove_referenceIT_E4typeEOS6_>
 8007216:	4603      	mov	r3, r0
 8007218:	4619      	mov	r1, r3
 800721a:	4620      	mov	r0, r4
 800721c:	f000 f8dd 	bl	80073da <_ZNSt12__shared_ptrIN4tama5StageELN9__gnu_cxx12_Lock_policyE0EEC1INS0_8PlayMenuEvEEOS_IT_LS3_0EE>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	4618      	mov	r0, r3
 8007224:	370c      	adds	r7, #12
 8007226:	46bd      	mov	sp, r7
 8007228:	bd90      	pop	{r4, r7, pc}

0800722a <_ZNSt10shared_ptrIN4tama8DrawableEEC1INS0_6SpriteEvEEPT_>:
	shared_ptr(_Yp* __p) : __shared_ptr<_Tp>(__p) { }
 800722a:	b580      	push	{r7, lr}
 800722c:	b082      	sub	sp, #8
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]
 8007232:	6039      	str	r1, [r7, #0]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6839      	ldr	r1, [r7, #0]
 8007238:	4618      	mov	r0, r3
 800723a:	f000 f8ec 	bl	8007416 <_ZNSt12__shared_ptrIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0EEC1INS0_6SpriteEvEEPT_>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	4618      	mov	r0, r3
 8007242:	3708      	adds	r7, #8
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}

08007248 <_ZNKSt19__shared_ptr_accessIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 8007248:	b580      	push	{r7, lr}
 800724a:	b082      	sub	sp, #8
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f000 f8f8 	bl	8007446 <_ZNKSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE3getEv>
 8007256:	4603      	mov	r3, r0
 8007258:	4618      	mov	r0, r3
 800725a:	3708      	adds	r7, #8
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <_ZNSaIN4tama3EatEEC1Ev>:
      allocator() throw() { }
 8007260:	b580      	push	{r7, lr}
 8007262:	b082      	sub	sp, #8
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f000 f8f8 	bl	800745e <_ZN9__gnu_cxx13new_allocatorIN4tama3EatEEC1Ev>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	4618      	mov	r0, r3
 8007272:	3708      	adds	r7, #8
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}

08007278 <_ZNSaIN4tama3EatEED1Ev>:
      ~allocator() throw() { }
 8007278:	b580      	push	{r7, lr}
 800727a:	b082      	sub	sp, #8
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f000 f8f7 	bl	8007474 <_ZN9__gnu_cxx13new_allocatorIN4tama3EatEED1Ev>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	4618      	mov	r0, r3
 800728a:	3708      	adds	r7, #8
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}

08007290 <_ZSt15allocate_sharedIN4tama3EatESaIS1_EJRSt10shared_ptrINS0_7ContextEEEES3_IT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 8007290:	b590      	push	{r4, r7, lr}
 8007292:	b087      	sub	sp, #28
 8007294:	af00      	add	r7, sp, #0
 8007296:	60f8      	str	r0, [r7, #12]
 8007298:	60b9      	str	r1, [r7, #8]
 800729a:	607a      	str	r2, [r7, #4]
			     std::forward<_Args>(__args)...);
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f7fe f877 	bl	8005390 <_ZSt7forwardIRSt10shared_ptrIN4tama7ContextEEEOT_RNSt16remove_referenceIS5_E4typeE>
 80072a2:	4603      	mov	r3, r0
 80072a4:	68ba      	ldr	r2, [r7, #8]
 80072a6:	4621      	mov	r1, r4
 80072a8:	68f8      	ldr	r0, [r7, #12]
 80072aa:	f000 f8ee 	bl	800748a <_ZNSt10shared_ptrIN4tama3EatEEC1ISaIS1_EJRS_INS0_7ContextEEEEESt19_Sp_make_shared_tagRKT_DpOT0_>
    }
 80072ae:	68f8      	ldr	r0, [r7, #12]
 80072b0:	371c      	adds	r7, #28
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd90      	pop	{r4, r7, pc}

080072b6 <_ZNSt12__shared_ptrIN4tama5StageELN9__gnu_cxx12_Lock_policyE0EEC1INS0_3EatEvEEOS_IT_LS3_0EE>:
	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 80072b6:	b580      	push	{r7, lr}
 80072b8:	b082      	sub	sp, #8
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
 80072be:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount()
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	601a      	str	r2, [r3, #0]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	3304      	adds	r3, #4
 80072cc:	4618      	mov	r0, r3
 80072ce:	f7fc fe4e 	bl	8003f6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _M_refcount._M_swap(__r._M_refcount);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	1d1a      	adds	r2, r3, #4
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	3304      	adds	r3, #4
 80072da:	4619      	mov	r1, r3
 80072dc:	4610      	mov	r0, r2
 80072de:	f7fc ff4f 	bl	8004180 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  __r._M_ptr = 0;
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	2200      	movs	r2, #0
 80072e6:	601a      	str	r2, [r3, #0]
	}
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	4618      	mov	r0, r3
 80072ec:	3708      	adds	r7, #8
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}

080072f2 <_ZNSaIN4tama4WashEEC1Ev>:
      allocator() throw() { }
 80072f2:	b580      	push	{r7, lr}
 80072f4:	b082      	sub	sp, #8
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	6078      	str	r0, [r7, #4]
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f000 f8db 	bl	80074b6 <_ZN9__gnu_cxx13new_allocatorIN4tama4WashEEC1Ev>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	4618      	mov	r0, r3
 8007304:	3708      	adds	r7, #8
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}

0800730a <_ZNSaIN4tama4WashEED1Ev>:
      ~allocator() throw() { }
 800730a:	b580      	push	{r7, lr}
 800730c:	b082      	sub	sp, #8
 800730e:	af00      	add	r7, sp, #0
 8007310:	6078      	str	r0, [r7, #4]
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 f8da 	bl	80074cc <_ZN9__gnu_cxx13new_allocatorIN4tama4WashEED1Ev>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	4618      	mov	r0, r3
 800731c:	3708      	adds	r7, #8
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}

08007322 <_ZSt15allocate_sharedIN4tama4WashESaIS1_EJRSt10shared_ptrINS0_7ContextEEEES3_IT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 8007322:	b590      	push	{r4, r7, lr}
 8007324:	b087      	sub	sp, #28
 8007326:	af00      	add	r7, sp, #0
 8007328:	60f8      	str	r0, [r7, #12]
 800732a:	60b9      	str	r1, [r7, #8]
 800732c:	607a      	str	r2, [r7, #4]
			     std::forward<_Args>(__args)...);
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f7fe f82e 	bl	8005390 <_ZSt7forwardIRSt10shared_ptrIN4tama7ContextEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8007334:	4603      	mov	r3, r0
 8007336:	68ba      	ldr	r2, [r7, #8]
 8007338:	4621      	mov	r1, r4
 800733a:	68f8      	ldr	r0, [r7, #12]
 800733c:	f000 f8d1 	bl	80074e2 <_ZNSt10shared_ptrIN4tama4WashEEC1ISaIS1_EJRS_INS0_7ContextEEEEESt19_Sp_make_shared_tagRKT_DpOT0_>
    }
 8007340:	68f8      	ldr	r0, [r7, #12]
 8007342:	371c      	adds	r7, #28
 8007344:	46bd      	mov	sp, r7
 8007346:	bd90      	pop	{r4, r7, pc}

08007348 <_ZNSt12__shared_ptrIN4tama5StageELN9__gnu_cxx12_Lock_policyE0EEC1INS0_4WashEvEEOS_IT_LS3_0EE>:
	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 8007348:	b580      	push	{r7, lr}
 800734a:	b082      	sub	sp, #8
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount()
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	681a      	ldr	r2, [r3, #0]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	601a      	str	r2, [r3, #0]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	3304      	adds	r3, #4
 800735e:	4618      	mov	r0, r3
 8007360:	f7fc fe05 	bl	8003f6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _M_refcount._M_swap(__r._M_refcount);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	1d1a      	adds	r2, r3, #4
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	3304      	adds	r3, #4
 800736c:	4619      	mov	r1, r3
 800736e:	4610      	mov	r0, r2
 8007370:	f7fc ff06 	bl	8004180 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  __r._M_ptr = 0;
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	2200      	movs	r2, #0
 8007378:	601a      	str	r2, [r3, #0]
	}
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	4618      	mov	r0, r3
 800737e:	3708      	adds	r7, #8
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}

08007384 <_ZNSaIN4tama8PlayMenuEEC1Ev>:
      allocator() throw() { }
 8007384:	b580      	push	{r7, lr}
 8007386:	b082      	sub	sp, #8
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f000 f8be 	bl	800750e <_ZN9__gnu_cxx13new_allocatorIN4tama8PlayMenuEEC1Ev>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	4618      	mov	r0, r3
 8007396:	3708      	adds	r7, #8
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}

0800739c <_ZNSaIN4tama8PlayMenuEED1Ev>:
      ~allocator() throw() { }
 800739c:	b580      	push	{r7, lr}
 800739e:	b082      	sub	sp, #8
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f000 f8bd 	bl	8007524 <_ZN9__gnu_cxx13new_allocatorIN4tama8PlayMenuEED1Ev>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	4618      	mov	r0, r3
 80073ae:	3708      	adds	r7, #8
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}

080073b4 <_ZSt15allocate_sharedIN4tama8PlayMenuESaIS1_EJRSt10shared_ptrINS0_7ContextEEEES3_IT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 80073b4:	b590      	push	{r4, r7, lr}
 80073b6:	b087      	sub	sp, #28
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	60f8      	str	r0, [r7, #12]
 80073bc:	60b9      	str	r1, [r7, #8]
 80073be:	607a      	str	r2, [r7, #4]
			     std::forward<_Args>(__args)...);
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f7fd ffe5 	bl	8005390 <_ZSt7forwardIRSt10shared_ptrIN4tama7ContextEEEOT_RNSt16remove_referenceIS5_E4typeE>
 80073c6:	4603      	mov	r3, r0
 80073c8:	68ba      	ldr	r2, [r7, #8]
 80073ca:	4621      	mov	r1, r4
 80073cc:	68f8      	ldr	r0, [r7, #12]
 80073ce:	f000 f8b4 	bl	800753a <_ZNSt10shared_ptrIN4tama8PlayMenuEEC1ISaIS1_EJRS_INS0_7ContextEEEEESt19_Sp_make_shared_tagRKT_DpOT0_>
    }
 80073d2:	68f8      	ldr	r0, [r7, #12]
 80073d4:	371c      	adds	r7, #28
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd90      	pop	{r4, r7, pc}

080073da <_ZNSt12__shared_ptrIN4tama5StageELN9__gnu_cxx12_Lock_policyE0EEC1INS0_8PlayMenuEvEEOS_IT_LS3_0EE>:
	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 80073da:	b580      	push	{r7, lr}
 80073dc:	b082      	sub	sp, #8
 80073de:	af00      	add	r7, sp, #0
 80073e0:	6078      	str	r0, [r7, #4]
 80073e2:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount()
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	601a      	str	r2, [r3, #0]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	3304      	adds	r3, #4
 80073f0:	4618      	mov	r0, r3
 80073f2:	f7fc fdbc 	bl	8003f6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _M_refcount._M_swap(__r._M_refcount);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	1d1a      	adds	r2, r3, #4
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	3304      	adds	r3, #4
 80073fe:	4619      	mov	r1, r3
 8007400:	4610      	mov	r0, r2
 8007402:	f7fc febd 	bl	8004180 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  __r._M_ptr = 0;
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	2200      	movs	r2, #0
 800740a:	601a      	str	r2, [r3, #0]
	}
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	4618      	mov	r0, r3
 8007410:	3708      	adds	r7, #8
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}

08007416 <_ZNSt12__shared_ptrIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0EEC1INS0_6SpriteEvEEPT_>:
	__shared_ptr(_Yp* __p)
 8007416:	b590      	push	{r4, r7, lr}
 8007418:	b085      	sub	sp, #20
 800741a:	af00      	add	r7, sp, #0
 800741c:	6078      	str	r0, [r7, #4]
 800741e:	6039      	str	r1, [r7, #0]
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	683a      	ldr	r2, [r7, #0]
 8007424:	601a      	str	r2, [r3, #0]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	3304      	adds	r3, #4
 800742a:	4622      	mov	r2, r4
 800742c:	6839      	ldr	r1, [r7, #0]
 800742e:	4618      	mov	r0, r3
 8007430:	f7fe fd7e 	bl	8005f30 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama6SpriteEEET_St17integral_constantIbLb0EE>
	  _M_enable_shared_from_this_with(__p);
 8007434:	6839      	ldr	r1, [r7, #0]
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 f895 	bl	8007566 <_ZNSt12__shared_ptrIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withINS0_6SpriteES6_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	}
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	4618      	mov	r0, r3
 8007440:	3714      	adds	r7, #20
 8007442:	46bd      	mov	sp, r7
 8007444:	bd90      	pop	{r4, r7, pc}

08007446 <_ZNKSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 8007446:	b480      	push	{r7}
 8007448:	b083      	sub	sp, #12
 800744a:	af00      	add	r7, sp, #0
 800744c:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4618      	mov	r0, r3
 8007454:	370c      	adds	r7, #12
 8007456:	46bd      	mov	sp, r7
 8007458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745c:	4770      	bx	lr

0800745e <_ZN9__gnu_cxx13new_allocatorIN4tama3EatEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800745e:	b480      	push	{r7}
 8007460:	b083      	sub	sp, #12
 8007462:	af00      	add	r7, sp, #0
 8007464:	6078      	str	r0, [r7, #4]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	4618      	mov	r0, r3
 800746a:	370c      	adds	r7, #12
 800746c:	46bd      	mov	sp, r7
 800746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007472:	4770      	bx	lr

08007474 <_ZN9__gnu_cxx13new_allocatorIN4tama3EatEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8007474:	b480      	push	{r7}
 8007476:	b083      	sub	sp, #12
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	4618      	mov	r0, r3
 8007480:	370c      	adds	r7, #12
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr

0800748a <_ZNSt10shared_ptrIN4tama3EatEEC1ISaIS1_EJRS_INS0_7ContextEEEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 800748a:	b5b0      	push	{r4, r5, r7, lr}
 800748c:	b084      	sub	sp, #16
 800748e:	af00      	add	r7, sp, #0
 8007490:	60f8      	str	r0, [r7, #12]
 8007492:	7239      	strb	r1, [r7, #8]
 8007494:	607a      	str	r2, [r7, #4]
 8007496:	603b      	str	r3, [r7, #0]
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
 8007498:	68fc      	ldr	r4, [r7, #12]
 800749a:	6838      	ldr	r0, [r7, #0]
 800749c:	f7fd ff78 	bl	8005390 <_ZSt7forwardIRSt10shared_ptrIN4tama7ContextEEEOT_RNSt16remove_referenceIS5_E4typeE>
 80074a0:	4603      	mov	r3, r0
 80074a2:	687a      	ldr	r2, [r7, #4]
 80074a4:	4629      	mov	r1, r5
 80074a6:	4620      	mov	r0, r4
 80074a8:	f000 f885 	bl	80075b6 <_ZNSt12__shared_ptrIN4tama3EatELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJRSt10shared_ptrINS0_7ContextEEEEESt19_Sp_make_shared_tagRKT_DpOT0_>
	{ }
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	4618      	mov	r0, r3
 80074b0:	3710      	adds	r7, #16
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bdb0      	pop	{r4, r5, r7, pc}

080074b6 <_ZN9__gnu_cxx13new_allocatorIN4tama4WashEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80074b6:	b480      	push	{r7}
 80074b8:	b083      	sub	sp, #12
 80074ba:	af00      	add	r7, sp, #0
 80074bc:	6078      	str	r0, [r7, #4]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	4618      	mov	r0, r3
 80074c2:	370c      	adds	r7, #12
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr

080074cc <_ZN9__gnu_cxx13new_allocatorIN4tama4WashEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80074cc:	b480      	push	{r7}
 80074ce:	b083      	sub	sp, #12
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	4618      	mov	r0, r3
 80074d8:	370c      	adds	r7, #12
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr

080074e2 <_ZNSt10shared_ptrIN4tama4WashEEC1ISaIS1_EJRS_INS0_7ContextEEEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 80074e2:	b5b0      	push	{r4, r5, r7, lr}
 80074e4:	b084      	sub	sp, #16
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	60f8      	str	r0, [r7, #12]
 80074ea:	7239      	strb	r1, [r7, #8]
 80074ec:	607a      	str	r2, [r7, #4]
 80074ee:	603b      	str	r3, [r7, #0]
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
 80074f0:	68fc      	ldr	r4, [r7, #12]
 80074f2:	6838      	ldr	r0, [r7, #0]
 80074f4:	f7fd ff4c 	bl	8005390 <_ZSt7forwardIRSt10shared_ptrIN4tama7ContextEEEOT_RNSt16remove_referenceIS5_E4typeE>
 80074f8:	4603      	mov	r3, r0
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	4629      	mov	r1, r5
 80074fe:	4620      	mov	r0, r4
 8007500:	f000 f8f1 	bl	80076e6 <_ZNSt12__shared_ptrIN4tama4WashELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJRSt10shared_ptrINS0_7ContextEEEEESt19_Sp_make_shared_tagRKT_DpOT0_>
	{ }
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	4618      	mov	r0, r3
 8007508:	3710      	adds	r7, #16
 800750a:	46bd      	mov	sp, r7
 800750c:	bdb0      	pop	{r4, r5, r7, pc}

0800750e <_ZN9__gnu_cxx13new_allocatorIN4tama8PlayMenuEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800750e:	b480      	push	{r7}
 8007510:	b083      	sub	sp, #12
 8007512:	af00      	add	r7, sp, #0
 8007514:	6078      	str	r0, [r7, #4]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	4618      	mov	r0, r3
 800751a:	370c      	adds	r7, #12
 800751c:	46bd      	mov	sp, r7
 800751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007522:	4770      	bx	lr

08007524 <_ZN9__gnu_cxx13new_allocatorIN4tama8PlayMenuEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8007524:	b480      	push	{r7}
 8007526:	b083      	sub	sp, #12
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	4618      	mov	r0, r3
 8007530:	370c      	adds	r7, #12
 8007532:	46bd      	mov	sp, r7
 8007534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007538:	4770      	bx	lr

0800753a <_ZNSt10shared_ptrIN4tama8PlayMenuEEC1ISaIS1_EJRS_INS0_7ContextEEEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 800753a:	b5b0      	push	{r4, r5, r7, lr}
 800753c:	b084      	sub	sp, #16
 800753e:	af00      	add	r7, sp, #0
 8007540:	60f8      	str	r0, [r7, #12]
 8007542:	7239      	strb	r1, [r7, #8]
 8007544:	607a      	str	r2, [r7, #4]
 8007546:	603b      	str	r3, [r7, #0]
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
 8007548:	68fc      	ldr	r4, [r7, #12]
 800754a:	6838      	ldr	r0, [r7, #0]
 800754c:	f7fd ff20 	bl	8005390 <_ZSt7forwardIRSt10shared_ptrIN4tama7ContextEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8007550:	4603      	mov	r3, r0
 8007552:	687a      	ldr	r2, [r7, #4]
 8007554:	4629      	mov	r1, r5
 8007556:	4620      	mov	r0, r4
 8007558:	f000 f95d 	bl	8007816 <_ZNSt12__shared_ptrIN4tama8PlayMenuELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJRSt10shared_ptrINS0_7ContextEEEEESt19_Sp_make_shared_tagRKT_DpOT0_>
	{ }
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	4618      	mov	r0, r3
 8007560:	3710      	adds	r7, #16
 8007562:	46bd      	mov	sp, r7
 8007564:	bdb0      	pop	{r4, r5, r7, pc}

08007566 <_ZNSt12__shared_ptrIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withINS0_6SpriteES6_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 8007566:	b480      	push	{r7}
 8007568:	b083      	sub	sp, #12
 800756a:	af00      	add	r7, sp, #0
 800756c:	6078      	str	r0, [r7, #4]
 800756e:	6039      	str	r1, [r7, #0]
	{ }
 8007570:	bf00      	nop
 8007572:	370c      	adds	r7, #12
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr

0800757c <_ZNSt12__shared_ptrIN4tama3EatELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>:
        struct _Deleter
 800757c:	b580      	push	{r7, lr}
 800757e:	b082      	sub	sp, #8
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	4618      	mov	r0, r3
 8007588:	f7ff fe76 	bl	8007278 <_ZNSaIN4tama3EatEED1Ev>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	4618      	mov	r0, r3
 8007590:	3708      	adds	r7, #8
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}

08007596 <_ZNSt12__shared_ptrIN4tama3EatELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>:
 8007596:	b580      	push	{r7, lr}
 8007598:	b082      	sub	sp, #8
 800759a:	af00      	add	r7, sp, #0
 800759c:	6078      	str	r0, [r7, #4]
 800759e:	6039      	str	r1, [r7, #0]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	683a      	ldr	r2, [r7, #0]
 80075a4:	4611      	mov	r1, r2
 80075a6:	4618      	mov	r0, r3
 80075a8:	f000 f9b0 	bl	800790c <_ZNSaIN4tama3EatEEC1ERKS1_>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	4618      	mov	r0, r3
 80075b0:	3708      	adds	r7, #8
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}

080075b6 <_ZNSt12__shared_ptrIN4tama3EatELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJRSt10shared_ptrINS0_7ContextEEEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 80075b6:	b580      	push	{r7, lr}
 80075b8:	b08c      	sub	sp, #48	; 0x30
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	60f8      	str	r0, [r7, #12]
 80075be:	7239      	strb	r1, [r7, #8]
 80075c0:	607a      	str	r2, [r7, #4]
 80075c2:	603b      	str	r3, [r7, #0]
	: _M_ptr(), _M_refcount()
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	2200      	movs	r2, #0
 80075c8:	601a      	str	r2, [r3, #0]
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	3304      	adds	r3, #4
 80075ce:	4618      	mov	r0, r3
 80075d0:	f7fc fccd 	bl	8003f6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 80075d4:	f107 0320 	add.w	r3, r7, #32
 80075d8:	6879      	ldr	r1, [r7, #4]
 80075da:	4618      	mov	r0, r3
 80075dc:	f000 f996 	bl	800790c <_ZNSaIN4tama3EatEEC1ERKS1_>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 80075e0:	f107 0318 	add.w	r3, r7, #24
 80075e4:	f107 0220 	add.w	r2, r7, #32
 80075e8:	4611      	mov	r1, r2
 80075ea:	4618      	mov	r0, r3
 80075ec:	f000 f99c 	bl	8007928 <_ZSt18__allocate_guardedISaIN4tama3EatEEESt15__allocated_ptrIT_ERS4_>
	  auto __ptr = __guard.get();
 80075f0:	f107 0318 	add.w	r3, r7, #24
 80075f4:	4618      	mov	r0, r3
 80075f6:	f000 f9bf 	bl	8007978 <_ZNSt15__allocated_ptrISaIN4tama3EatEEE3getEv>
 80075fa:	62f8      	str	r0, [r7, #44]	; 0x2c
	  __traits::construct(__del._M_alloc, __ptr,
 80075fc:	6838      	ldr	r0, [r7, #0]
 80075fe:	f7fd fec7 	bl	8005390 <_ZSt7forwardIRSt10shared_ptrIN4tama7ContextEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8007602:	4602      	mov	r2, r0
 8007604:	f107 0320 	add.w	r3, r7, #32
 8007608:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800760a:	4618      	mov	r0, r3
 800760c:	f000 f9c2 	bl	8007994 <_ZNSt16allocator_traitsISaIN4tama3EatEEE9constructIS1_JRSt10shared_ptrINS0_7ContextEEEEEvRS2_PT_DpOT0_>
	  __guard = nullptr;
 8007610:	f107 0318 	add.w	r3, r7, #24
 8007614:	2100      	movs	r1, #0
 8007616:	4618      	mov	r0, r3
 8007618:	f000 f9cf 	bl	80079ba <_ZNSt15__allocated_ptrISaIN4tama3EatEEEaSEDn>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 800761c:	f107 0220 	add.w	r2, r7, #32
 8007620:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007624:	4611      	mov	r1, r2
 8007626:	4618      	mov	r0, r3
 8007628:	f7ff ffb5 	bl	8007596 <_ZNSt12__shared_ptrIN4tama3EatELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>
 800762c:	f107 0220 	add.w	r2, r7, #32
 8007630:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007634:	4611      	mov	r1, r2
 8007636:	4618      	mov	r0, r3
 8007638:	f000 f968 	bl	800790c <_ZNSaIN4tama3EatEEC1ERKS1_>
 800763c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007640:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8007644:	f107 0014 	add.w	r0, r7, #20
 8007648:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800764a:	f000 f9eb 	bl	8007a24 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama3EatENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
 800764e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007652:	4618      	mov	r0, r3
 8007654:	f7ff fe10 	bl	8007278 <_ZNSaIN4tama3EatEED1Ev>
 8007658:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800765c:	4618      	mov	r0, r3
 800765e:	f7ff ff8d 	bl	800757c <_ZNSt12__shared_ptrIN4tama3EatELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	  _M_refcount._M_swap(__count);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	3304      	adds	r3, #4
 8007666:	f107 0214 	add.w	r2, r7, #20
 800766a:	4611      	mov	r1, r2
 800766c:	4618      	mov	r0, r3
 800766e:	f7fc fd87 	bl	8004180 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  _M_ptr = __ptr;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007676:	601a      	str	r2, [r3, #0]
	  _M_enable_shared_from_this_with(_M_ptr);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4619      	mov	r1, r3
 800767e:	68f8      	ldr	r0, [r7, #12]
 8007680:	f000 fa27 	bl	8007ad2 <_ZNSt12__shared_ptrIN4tama3EatELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 8007684:	f107 0314 	add.w	r3, r7, #20
 8007688:	4618      	mov	r0, r3
 800768a:	f7fb fd42 	bl	8003112 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 800768e:	f107 0318 	add.w	r3, r7, #24
 8007692:	4618      	mov	r0, r3
 8007694:	f000 f95b 	bl	800794e <_ZNSt15__allocated_ptrISaIN4tama3EatEEED1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 8007698:	f107 0320 	add.w	r3, r7, #32
 800769c:	4618      	mov	r0, r3
 800769e:	f7ff ff6d 	bl	800757c <_ZNSt12__shared_ptrIN4tama3EatELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	}
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	4618      	mov	r0, r3
 80076a6:	3730      	adds	r7, #48	; 0x30
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}

080076ac <_ZNSt12__shared_ptrIN4tama4WashELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>:
        struct _Deleter
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b082      	sub	sp, #8
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	4618      	mov	r0, r3
 80076b8:	f7ff fe27 	bl	800730a <_ZNSaIN4tama4WashEED1Ev>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	4618      	mov	r0, r3
 80076c0:	3708      	adds	r7, #8
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}

080076c6 <_ZNSt12__shared_ptrIN4tama4WashELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>:
 80076c6:	b580      	push	{r7, lr}
 80076c8:	b082      	sub	sp, #8
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
 80076ce:	6039      	str	r1, [r7, #0]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	683a      	ldr	r2, [r7, #0]
 80076d4:	4611      	mov	r1, r2
 80076d6:	4618      	mov	r0, r3
 80076d8:	f000 fa06 	bl	8007ae8 <_ZNSaIN4tama4WashEEC1ERKS1_>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	4618      	mov	r0, r3
 80076e0:	3708      	adds	r7, #8
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}

080076e6 <_ZNSt12__shared_ptrIN4tama4WashELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJRSt10shared_ptrINS0_7ContextEEEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 80076e6:	b580      	push	{r7, lr}
 80076e8:	b08c      	sub	sp, #48	; 0x30
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	60f8      	str	r0, [r7, #12]
 80076ee:	7239      	strb	r1, [r7, #8]
 80076f0:	607a      	str	r2, [r7, #4]
 80076f2:	603b      	str	r3, [r7, #0]
	: _M_ptr(), _M_refcount()
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2200      	movs	r2, #0
 80076f8:	601a      	str	r2, [r3, #0]
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	3304      	adds	r3, #4
 80076fe:	4618      	mov	r0, r3
 8007700:	f7fc fc35 	bl	8003f6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 8007704:	f107 0320 	add.w	r3, r7, #32
 8007708:	6879      	ldr	r1, [r7, #4]
 800770a:	4618      	mov	r0, r3
 800770c:	f000 f9ec 	bl	8007ae8 <_ZNSaIN4tama4WashEEC1ERKS1_>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 8007710:	f107 0318 	add.w	r3, r7, #24
 8007714:	f107 0220 	add.w	r2, r7, #32
 8007718:	4611      	mov	r1, r2
 800771a:	4618      	mov	r0, r3
 800771c:	f000 f9f2 	bl	8007b04 <_ZSt18__allocate_guardedISaIN4tama4WashEEESt15__allocated_ptrIT_ERS4_>
	  auto __ptr = __guard.get();
 8007720:	f107 0318 	add.w	r3, r7, #24
 8007724:	4618      	mov	r0, r3
 8007726:	f000 fa15 	bl	8007b54 <_ZNSt15__allocated_ptrISaIN4tama4WashEEE3getEv>
 800772a:	62f8      	str	r0, [r7, #44]	; 0x2c
	  __traits::construct(__del._M_alloc, __ptr,
 800772c:	6838      	ldr	r0, [r7, #0]
 800772e:	f7fd fe2f 	bl	8005390 <_ZSt7forwardIRSt10shared_ptrIN4tama7ContextEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8007732:	4602      	mov	r2, r0
 8007734:	f107 0320 	add.w	r3, r7, #32
 8007738:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800773a:	4618      	mov	r0, r3
 800773c:	f000 fa18 	bl	8007b70 <_ZNSt16allocator_traitsISaIN4tama4WashEEE9constructIS1_JRSt10shared_ptrINS0_7ContextEEEEEvRS2_PT_DpOT0_>
	  __guard = nullptr;
 8007740:	f107 0318 	add.w	r3, r7, #24
 8007744:	2100      	movs	r1, #0
 8007746:	4618      	mov	r0, r3
 8007748:	f000 fa25 	bl	8007b96 <_ZNSt15__allocated_ptrISaIN4tama4WashEEEaSEDn>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 800774c:	f107 0220 	add.w	r2, r7, #32
 8007750:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007754:	4611      	mov	r1, r2
 8007756:	4618      	mov	r0, r3
 8007758:	f7ff ffb5 	bl	80076c6 <_ZNSt12__shared_ptrIN4tama4WashELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>
 800775c:	f107 0220 	add.w	r2, r7, #32
 8007760:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007764:	4611      	mov	r1, r2
 8007766:	4618      	mov	r0, r3
 8007768:	f000 f9be 	bl	8007ae8 <_ZNSaIN4tama4WashEEC1ERKS1_>
 800776c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007770:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8007774:	f107 0014 	add.w	r0, r7, #20
 8007778:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800777a:	f000 fa41 	bl	8007c00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama4WashENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
 800777e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007782:	4618      	mov	r0, r3
 8007784:	f7ff fdc1 	bl	800730a <_ZNSaIN4tama4WashEED1Ev>
 8007788:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800778c:	4618      	mov	r0, r3
 800778e:	f7ff ff8d 	bl	80076ac <_ZNSt12__shared_ptrIN4tama4WashELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	  _M_refcount._M_swap(__count);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	3304      	adds	r3, #4
 8007796:	f107 0214 	add.w	r2, r7, #20
 800779a:	4611      	mov	r1, r2
 800779c:	4618      	mov	r0, r3
 800779e:	f7fc fcef 	bl	8004180 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  _M_ptr = __ptr;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077a6:	601a      	str	r2, [r3, #0]
	  _M_enable_shared_from_this_with(_M_ptr);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4619      	mov	r1, r3
 80077ae:	68f8      	ldr	r0, [r7, #12]
 80077b0:	f000 fa7d 	bl	8007cae <_ZNSt12__shared_ptrIN4tama4WashELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 80077b4:	f107 0314 	add.w	r3, r7, #20
 80077b8:	4618      	mov	r0, r3
 80077ba:	f7fb fcaa 	bl	8003112 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 80077be:	f107 0318 	add.w	r3, r7, #24
 80077c2:	4618      	mov	r0, r3
 80077c4:	f000 f9b1 	bl	8007b2a <_ZNSt15__allocated_ptrISaIN4tama4WashEEED1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 80077c8:	f107 0320 	add.w	r3, r7, #32
 80077cc:	4618      	mov	r0, r3
 80077ce:	f7ff ff6d 	bl	80076ac <_ZNSt12__shared_ptrIN4tama4WashELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	}
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	4618      	mov	r0, r3
 80077d6:	3730      	adds	r7, #48	; 0x30
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}

080077dc <_ZNSt12__shared_ptrIN4tama8PlayMenuELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>:
        struct _Deleter
 80077dc:	b580      	push	{r7, lr}
 80077de:	b082      	sub	sp, #8
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	4618      	mov	r0, r3
 80077e8:	f7ff fdd8 	bl	800739c <_ZNSaIN4tama8PlayMenuEED1Ev>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	4618      	mov	r0, r3
 80077f0:	3708      	adds	r7, #8
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}

080077f6 <_ZNSt12__shared_ptrIN4tama8PlayMenuELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>:
 80077f6:	b580      	push	{r7, lr}
 80077f8:	b082      	sub	sp, #8
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	6078      	str	r0, [r7, #4]
 80077fe:	6039      	str	r1, [r7, #0]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	683a      	ldr	r2, [r7, #0]
 8007804:	4611      	mov	r1, r2
 8007806:	4618      	mov	r0, r3
 8007808:	f000 fa5c 	bl	8007cc4 <_ZNSaIN4tama8PlayMenuEEC1ERKS1_>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	4618      	mov	r0, r3
 8007810:	3708      	adds	r7, #8
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}

08007816 <_ZNSt12__shared_ptrIN4tama8PlayMenuELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJRSt10shared_ptrINS0_7ContextEEEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8007816:	b580      	push	{r7, lr}
 8007818:	b08c      	sub	sp, #48	; 0x30
 800781a:	af00      	add	r7, sp, #0
 800781c:	60f8      	str	r0, [r7, #12]
 800781e:	7239      	strb	r1, [r7, #8]
 8007820:	607a      	str	r2, [r7, #4]
 8007822:	603b      	str	r3, [r7, #0]
	: _M_ptr(), _M_refcount()
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2200      	movs	r2, #0
 8007828:	601a      	str	r2, [r3, #0]
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	3304      	adds	r3, #4
 800782e:	4618      	mov	r0, r3
 8007830:	f7fc fb9d 	bl	8003f6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 8007834:	f107 0320 	add.w	r3, r7, #32
 8007838:	6879      	ldr	r1, [r7, #4]
 800783a:	4618      	mov	r0, r3
 800783c:	f000 fa42 	bl	8007cc4 <_ZNSaIN4tama8PlayMenuEEC1ERKS1_>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 8007840:	f107 0318 	add.w	r3, r7, #24
 8007844:	f107 0220 	add.w	r2, r7, #32
 8007848:	4611      	mov	r1, r2
 800784a:	4618      	mov	r0, r3
 800784c:	f000 fa48 	bl	8007ce0 <_ZSt18__allocate_guardedISaIN4tama8PlayMenuEEESt15__allocated_ptrIT_ERS4_>
	  auto __ptr = __guard.get();
 8007850:	f107 0318 	add.w	r3, r7, #24
 8007854:	4618      	mov	r0, r3
 8007856:	f000 fa6b 	bl	8007d30 <_ZNSt15__allocated_ptrISaIN4tama8PlayMenuEEE3getEv>
 800785a:	62f8      	str	r0, [r7, #44]	; 0x2c
	  __traits::construct(__del._M_alloc, __ptr,
 800785c:	6838      	ldr	r0, [r7, #0]
 800785e:	f7fd fd97 	bl	8005390 <_ZSt7forwardIRSt10shared_ptrIN4tama7ContextEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8007862:	4602      	mov	r2, r0
 8007864:	f107 0320 	add.w	r3, r7, #32
 8007868:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800786a:	4618      	mov	r0, r3
 800786c:	f000 fa6e 	bl	8007d4c <_ZNSt16allocator_traitsISaIN4tama8PlayMenuEEE9constructIS1_JRSt10shared_ptrINS0_7ContextEEEEEvRS2_PT_DpOT0_>
	  __guard = nullptr;
 8007870:	f107 0318 	add.w	r3, r7, #24
 8007874:	2100      	movs	r1, #0
 8007876:	4618      	mov	r0, r3
 8007878:	f000 fa7b 	bl	8007d72 <_ZNSt15__allocated_ptrISaIN4tama8PlayMenuEEEaSEDn>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 800787c:	f107 0220 	add.w	r2, r7, #32
 8007880:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007884:	4611      	mov	r1, r2
 8007886:	4618      	mov	r0, r3
 8007888:	f7ff ffb5 	bl	80077f6 <_ZNSt12__shared_ptrIN4tama8PlayMenuELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>
 800788c:	f107 0220 	add.w	r2, r7, #32
 8007890:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007894:	4611      	mov	r1, r2
 8007896:	4618      	mov	r0, r3
 8007898:	f000 fa14 	bl	8007cc4 <_ZNSaIN4tama8PlayMenuEEC1ERKS1_>
 800789c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80078a0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80078a4:	f107 0014 	add.w	r0, r7, #20
 80078a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80078aa:	f000 fa97 	bl	8007ddc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama8PlayMenuENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
 80078ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80078b2:	4618      	mov	r0, r3
 80078b4:	f7ff fd72 	bl	800739c <_ZNSaIN4tama8PlayMenuEED1Ev>
 80078b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078bc:	4618      	mov	r0, r3
 80078be:	f7ff ff8d 	bl	80077dc <_ZNSt12__shared_ptrIN4tama8PlayMenuELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	  _M_refcount._M_swap(__count);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	3304      	adds	r3, #4
 80078c6:	f107 0214 	add.w	r2, r7, #20
 80078ca:	4611      	mov	r1, r2
 80078cc:	4618      	mov	r0, r3
 80078ce:	f7fc fc57 	bl	8004180 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  _M_ptr = __ptr;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078d6:	601a      	str	r2, [r3, #0]
	  _M_enable_shared_from_this_with(_M_ptr);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4619      	mov	r1, r3
 80078de:	68f8      	ldr	r0, [r7, #12]
 80078e0:	f000 fad3 	bl	8007e8a <_ZNSt12__shared_ptrIN4tama8PlayMenuELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 80078e4:	f107 0314 	add.w	r3, r7, #20
 80078e8:	4618      	mov	r0, r3
 80078ea:	f7fb fc12 	bl	8003112 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 80078ee:	f107 0318 	add.w	r3, r7, #24
 80078f2:	4618      	mov	r0, r3
 80078f4:	f000 fa07 	bl	8007d06 <_ZNSt15__allocated_ptrISaIN4tama8PlayMenuEEED1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 80078f8:	f107 0320 	add.w	r3, r7, #32
 80078fc:	4618      	mov	r0, r3
 80078fe:	f7ff ff6d 	bl	80077dc <_ZNSt12__shared_ptrIN4tama8PlayMenuELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	}
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	4618      	mov	r0, r3
 8007906:	3730      	adds	r7, #48	; 0x30
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}

0800790c <_ZNSaIN4tama3EatEEC1ERKS1_>:
      allocator(const allocator& __a) throw()
 800790c:	b580      	push	{r7, lr}
 800790e:	b082      	sub	sp, #8
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8007916:	6839      	ldr	r1, [r7, #0]
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f000 fac1 	bl	8007ea0 <_ZN9__gnu_cxx13new_allocatorIN4tama3EatEEC1ERKS3_>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	4618      	mov	r0, r3
 8007922:	3708      	adds	r7, #8
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}

08007928 <_ZSt18__allocate_guardedISaIN4tama3EatEEESt15__allocated_ptrIT_ERS4_>:
    __allocate_guarded(_Alloc& __a)
 8007928:	b580      	push	{r7, lr}
 800792a:	b082      	sub	sp, #8
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 8007932:	2101      	movs	r1, #1
 8007934:	6838      	ldr	r0, [r7, #0]
 8007936:	f000 fabf 	bl	8007eb8 <_ZNSt16allocator_traitsISaIN4tama3EatEEE8allocateERS2_j>
 800793a:	4603      	mov	r3, r0
 800793c:	461a      	mov	r2, r3
 800793e:	6839      	ldr	r1, [r7, #0]
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f000 fac8 	bl	8007ed6 <_ZNSt15__allocated_ptrISaIN4tama3EatEEEC1ERS2_PS1_>
    }
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	3708      	adds	r7, #8
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}

0800794e <_ZNSt15__allocated_ptrISaIN4tama3EatEEED1Ev>:
      ~__allocated_ptr()
 800794e:	b580      	push	{r7, lr}
 8007950:	b082      	sub	sp, #8
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d007      	beq.n	800796e <_ZNSt15__allocated_ptrISaIN4tama3EatEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6818      	ldr	r0, [r3, #0]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	2201      	movs	r2, #1
 8007968:	4619      	mov	r1, r3
 800796a:	f000 fac8 	bl	8007efe <_ZNSt16allocator_traitsISaIN4tama3EatEEE10deallocateERS2_PS1_j>
      }
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	4618      	mov	r0, r3
 8007972:	3708      	adds	r7, #8
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}

08007978 <_ZNSt15__allocated_ptrISaIN4tama3EatEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 8007978:	b580      	push	{r7, lr}
 800797a:	b082      	sub	sp, #8
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	4618      	mov	r0, r3
 8007986:	f000 fac9 	bl	8007f1c <_ZNSt15__allocated_ptrISaIN4tama3EatEEE10_S_raw_ptrEPS1_>
 800798a:	4603      	mov	r3, r0
 800798c:	4618      	mov	r0, r3
 800798e:	3708      	adds	r7, #8
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}

08007994 <_ZNSt16allocator_traitsISaIN4tama3EatEEE9constructIS1_JRSt10shared_ptrINS0_7ContextEEEEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8007994:	b580      	push	{r7, lr}
 8007996:	b084      	sub	sp, #16
 8007998:	af00      	add	r7, sp, #0
 800799a:	60f8      	str	r0, [r7, #12]
 800799c:	60b9      	str	r1, [r7, #8]
 800799e:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f7fd fcf5 	bl	8005390 <_ZSt7forwardIRSt10shared_ptrIN4tama7ContextEEEOT_RNSt16remove_referenceIS5_E4typeE>
 80079a6:	4603      	mov	r3, r0
 80079a8:	461a      	mov	r2, r3
 80079aa:	68b9      	ldr	r1, [r7, #8]
 80079ac:	68f8      	ldr	r0, [r7, #12]
 80079ae:	f000 fac0 	bl	8007f32 <_ZN9__gnu_cxx13new_allocatorIN4tama3EatEE9constructIS2_JRSt10shared_ptrINS1_7ContextEEEEEvPT_DpOT0_>
 80079b2:	bf00      	nop
 80079b4:	3710      	adds	r7, #16
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}

080079ba <_ZNSt15__allocated_ptrISaIN4tama3EatEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 80079ba:	b480      	push	{r7}
 80079bc:	b083      	sub	sp, #12
 80079be:	af00      	add	r7, sp, #0
 80079c0:	6078      	str	r0, [r7, #4]
 80079c2:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2200      	movs	r2, #0
 80079c8:	605a      	str	r2, [r3, #4]
	return *this;
 80079ca:	687b      	ldr	r3, [r7, #4]
      }
 80079cc:	4618      	mov	r0, r3
 80079ce:	370c      	adds	r7, #12
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr

080079d8 <_ZSt4moveIRNSt12__shared_ptrIN4tama3EatELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 80079d8:	b480      	push	{r7}
 80079da:	b083      	sub	sp, #12
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	4618      	mov	r0, r3
 80079e4:	370c      	adds	r7, #12
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr

080079ee <_ZNSt12__shared_ptrIN4tama3EatELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>:
        struct _Deleter
 80079ee:	b580      	push	{r7, lr}
 80079f0:	b082      	sub	sp, #8
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]
 80079f6:	6039      	str	r1, [r7, #0]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	683a      	ldr	r2, [r7, #0]
 80079fc:	4611      	mov	r1, r2
 80079fe:	4618      	mov	r0, r3
 8007a00:	f7ff ff84 	bl	800790c <_ZNSaIN4tama3EatEEC1ERKS1_>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	4618      	mov	r0, r3
 8007a08:	3708      	adds	r7, #8
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}

08007a0e <_ZSt4moveIRSaIN4tama3EatEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8007a0e:	b480      	push	{r7}
 8007a10:	b083      	sub	sp, #12
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	4618      	mov	r0, r3
 8007a1a:	370c      	adds	r7, #12
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr

08007a24 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama3EatENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
 8007a24:	b5b0      	push	{r4, r5, r7, lr}
 8007a26:	b08a      	sub	sp, #40	; 0x28
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	60f8      	str	r0, [r7, #12]
 8007a2c:	60b9      	str	r1, [r7, #8]
 8007a2e:	607a      	str	r2, [r7, #4]
 8007a30:	603b      	str	r3, [r7, #0]
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2200      	movs	r2, #0
 8007a36:	601a      	str	r2, [r3, #0]
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 8007a38:	f107 031c 	add.w	r3, r7, #28
 8007a3c:	6839      	ldr	r1, [r7, #0]
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f000 fa91 	bl	8007f66 <_ZNSaISt19_Sp_counted_deleterIPN4tama3EatENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	      auto __guard = std::__allocate_guarded(__a2);
 8007a44:	f107 0314 	add.w	r3, r7, #20
 8007a48:	f107 021c 	add.w	r2, r7, #28
 8007a4c:	4611      	mov	r1, r2
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f000 faa2 	bl	8007f98 <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama3EatENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>
	      _Sp_cd_type* __mem = __guard.get();
 8007a54:	f107 0314 	add.w	r3, r7, #20
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f000 fac5 	bl	8007fe8 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama3EatENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>
 8007a5e:	6278      	str	r0, [r7, #36]	; 0x24
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f7ff ffb9 	bl	80079d8 <_ZSt4moveIRNSt12__shared_ptrIN4tama3EatELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8007a66:	4602      	mov	r2, r0
 8007a68:	f107 0320 	add.w	r3, r7, #32
 8007a6c:	4611      	mov	r1, r2
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f7ff ffbd 	bl	80079ee <_ZNSt12__shared_ptrIN4tama3EatELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 8007a74:	f107 0420 	add.w	r4, r7, #32
 8007a78:	6838      	ldr	r0, [r7, #0]
 8007a7a:	f7ff ffc8 	bl	8007a0e <_ZSt4moveIRSaIN4tama3EatEEEONSt16remove_referenceIT_E4typeEOS5_>
 8007a7e:	4605      	mov	r5, r0
 8007a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a82:	4619      	mov	r1, r3
 8007a84:	2014      	movs	r0, #20
 8007a86:	f7f9 fada 	bl	800103e <_ZnwjPv>
 8007a8a:	2800      	cmp	r0, #0
 8007a8c:	d004      	beq.n	8007a98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama3EatENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x74>
 8007a8e:	462b      	mov	r3, r5
 8007a90:	4622      	mov	r2, r4
 8007a92:	68b9      	ldr	r1, [r7, #8]
 8007a94:	f000 fae2 	bl	800805c <_ZNSt19_Sp_counted_deleterIPN4tama3EatENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>
 8007a98:	f107 0320 	add.w	r3, r7, #32
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f7ff fd6d 	bl	800757c <_ZNSt12__shared_ptrIN4tama3EatELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	      _M_pi = __mem;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007aa6:	601a      	str	r2, [r3, #0]
	      __guard = nullptr;
 8007aa8:	f107 0314 	add.w	r3, r7, #20
 8007aac:	2100      	movs	r1, #0
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f000 fb02 	bl	80080b8 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama3EatENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>
	      auto __guard = std::__allocate_guarded(__a2);
 8007ab4:	f107 0314 	add.w	r3, r7, #20
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f000 fa80 	bl	8007fbe <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama3EatENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 8007abe:	f107 031c 	add.w	r3, r7, #28
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f000 fa5c 	bl	8007f80 <_ZNSaISt19_Sp_counted_deleterIPN4tama3EatENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
	}
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	4618      	mov	r0, r3
 8007acc:	3728      	adds	r7, #40	; 0x28
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bdb0      	pop	{r4, r5, r7, pc}

08007ad2 <_ZNSt12__shared_ptrIN4tama3EatELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 8007ad2:	b480      	push	{r7}
 8007ad4:	b083      	sub	sp, #12
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	6078      	str	r0, [r7, #4]
 8007ada:	6039      	str	r1, [r7, #0]
	{ }
 8007adc:	bf00      	nop
 8007ade:	370c      	adds	r7, #12
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr

08007ae8 <_ZNSaIN4tama4WashEEC1ERKS1_>:
      allocator(const allocator& __a) throw()
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b082      	sub	sp, #8
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8007af2:	6839      	ldr	r1, [r7, #0]
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f000 fb0e 	bl	8008116 <_ZN9__gnu_cxx13new_allocatorIN4tama4WashEEC1ERKS3_>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	4618      	mov	r0, r3
 8007afe:	3708      	adds	r7, #8
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}

08007b04 <_ZSt18__allocate_guardedISaIN4tama4WashEEESt15__allocated_ptrIT_ERS4_>:
    __allocate_guarded(_Alloc& __a)
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b082      	sub	sp, #8
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 8007b0e:	2101      	movs	r1, #1
 8007b10:	6838      	ldr	r0, [r7, #0]
 8007b12:	f000 fb0c 	bl	800812e <_ZNSt16allocator_traitsISaIN4tama4WashEEE8allocateERS2_j>
 8007b16:	4603      	mov	r3, r0
 8007b18:	461a      	mov	r2, r3
 8007b1a:	6839      	ldr	r1, [r7, #0]
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f000 fb15 	bl	800814c <_ZNSt15__allocated_ptrISaIN4tama4WashEEEC1ERS2_PS1_>
    }
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	3708      	adds	r7, #8
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}

08007b2a <_ZNSt15__allocated_ptrISaIN4tama4WashEEED1Ev>:
      ~__allocated_ptr()
 8007b2a:	b580      	push	{r7, lr}
 8007b2c:	b082      	sub	sp, #8
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d007      	beq.n	8007b4a <_ZNSt15__allocated_ptrISaIN4tama4WashEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6818      	ldr	r0, [r3, #0]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	2201      	movs	r2, #1
 8007b44:	4619      	mov	r1, r3
 8007b46:	f000 fb15 	bl	8008174 <_ZNSt16allocator_traitsISaIN4tama4WashEEE10deallocateERS2_PS1_j>
      }
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3708      	adds	r7, #8
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <_ZNSt15__allocated_ptrISaIN4tama4WashEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b082      	sub	sp, #8
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	685b      	ldr	r3, [r3, #4]
 8007b60:	4618      	mov	r0, r3
 8007b62:	f000 fb16 	bl	8008192 <_ZNSt15__allocated_ptrISaIN4tama4WashEEE10_S_raw_ptrEPS1_>
 8007b66:	4603      	mov	r3, r0
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3708      	adds	r7, #8
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}

08007b70 <_ZNSt16allocator_traitsISaIN4tama4WashEEE9constructIS1_JRSt10shared_ptrINS0_7ContextEEEEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b084      	sub	sp, #16
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	60f8      	str	r0, [r7, #12]
 8007b78:	60b9      	str	r1, [r7, #8]
 8007b7a:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f7fd fc07 	bl	8005390 <_ZSt7forwardIRSt10shared_ptrIN4tama7ContextEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8007b82:	4603      	mov	r3, r0
 8007b84:	461a      	mov	r2, r3
 8007b86:	68b9      	ldr	r1, [r7, #8]
 8007b88:	68f8      	ldr	r0, [r7, #12]
 8007b8a:	f000 fb0d 	bl	80081a8 <_ZN9__gnu_cxx13new_allocatorIN4tama4WashEE9constructIS2_JRSt10shared_ptrINS1_7ContextEEEEEvPT_DpOT0_>
 8007b8e:	bf00      	nop
 8007b90:	3710      	adds	r7, #16
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}

08007b96 <_ZNSt15__allocated_ptrISaIN4tama4WashEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 8007b96:	b480      	push	{r7}
 8007b98:	b083      	sub	sp, #12
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	6078      	str	r0, [r7, #4]
 8007b9e:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	605a      	str	r2, [r3, #4]
	return *this;
 8007ba6:	687b      	ldr	r3, [r7, #4]
      }
 8007ba8:	4618      	mov	r0, r3
 8007baa:	370c      	adds	r7, #12
 8007bac:	46bd      	mov	sp, r7
 8007bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb2:	4770      	bx	lr

08007bb4 <_ZSt4moveIRNSt12__shared_ptrIN4tama4WashELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 8007bb4:	b480      	push	{r7}
 8007bb6:	b083      	sub	sp, #12
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	370c      	adds	r7, #12
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc8:	4770      	bx	lr

08007bca <_ZNSt12__shared_ptrIN4tama4WashELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>:
        struct _Deleter
 8007bca:	b580      	push	{r7, lr}
 8007bcc:	b082      	sub	sp, #8
 8007bce:	af00      	add	r7, sp, #0
 8007bd0:	6078      	str	r0, [r7, #4]
 8007bd2:	6039      	str	r1, [r7, #0]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	683a      	ldr	r2, [r7, #0]
 8007bd8:	4611      	mov	r1, r2
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f7ff ff84 	bl	8007ae8 <_ZNSaIN4tama4WashEEC1ERKS1_>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	4618      	mov	r0, r3
 8007be4:	3708      	adds	r7, #8
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}

08007bea <_ZSt4moveIRSaIN4tama4WashEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8007bea:	b480      	push	{r7}
 8007bec:	b083      	sub	sp, #12
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	370c      	adds	r7, #12
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr

08007c00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama4WashENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
 8007c00:	b5b0      	push	{r4, r5, r7, lr}
 8007c02:	b08a      	sub	sp, #40	; 0x28
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	60f8      	str	r0, [r7, #12]
 8007c08:	60b9      	str	r1, [r7, #8]
 8007c0a:	607a      	str	r2, [r7, #4]
 8007c0c:	603b      	str	r3, [r7, #0]
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2200      	movs	r2, #0
 8007c12:	601a      	str	r2, [r3, #0]
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 8007c14:	f107 031c 	add.w	r3, r7, #28
 8007c18:	6839      	ldr	r1, [r7, #0]
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f000 fade 	bl	80081dc <_ZNSaISt19_Sp_counted_deleterIPN4tama4WashENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	      auto __guard = std::__allocate_guarded(__a2);
 8007c20:	f107 0314 	add.w	r3, r7, #20
 8007c24:	f107 021c 	add.w	r2, r7, #28
 8007c28:	4611      	mov	r1, r2
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f000 faef 	bl	800820e <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama4WashENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>
	      _Sp_cd_type* __mem = __guard.get();
 8007c30:	f107 0314 	add.w	r3, r7, #20
 8007c34:	4618      	mov	r0, r3
 8007c36:	f000 fb12 	bl	800825e <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama4WashENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>
 8007c3a:	6278      	str	r0, [r7, #36]	; 0x24
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f7ff ffb9 	bl	8007bb4 <_ZSt4moveIRNSt12__shared_ptrIN4tama4WashELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8007c42:	4602      	mov	r2, r0
 8007c44:	f107 0320 	add.w	r3, r7, #32
 8007c48:	4611      	mov	r1, r2
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f7ff ffbd 	bl	8007bca <_ZNSt12__shared_ptrIN4tama4WashELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 8007c50:	f107 0420 	add.w	r4, r7, #32
 8007c54:	6838      	ldr	r0, [r7, #0]
 8007c56:	f7ff ffc8 	bl	8007bea <_ZSt4moveIRSaIN4tama4WashEEEONSt16remove_referenceIT_E4typeEOS5_>
 8007c5a:	4605      	mov	r5, r0
 8007c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5e:	4619      	mov	r1, r3
 8007c60:	2014      	movs	r0, #20
 8007c62:	f7f9 f9ec 	bl	800103e <_ZnwjPv>
 8007c66:	2800      	cmp	r0, #0
 8007c68:	d004      	beq.n	8007c74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama4WashENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x74>
 8007c6a:	462b      	mov	r3, r5
 8007c6c:	4622      	mov	r2, r4
 8007c6e:	68b9      	ldr	r1, [r7, #8]
 8007c70:	f000 fb2e 	bl	80082d0 <_ZNSt19_Sp_counted_deleterIPN4tama4WashENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>
 8007c74:	f107 0320 	add.w	r3, r7, #32
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f7ff fd17 	bl	80076ac <_ZNSt12__shared_ptrIN4tama4WashELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	      _M_pi = __mem;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c82:	601a      	str	r2, [r3, #0]
	      __guard = nullptr;
 8007c84:	f107 0314 	add.w	r3, r7, #20
 8007c88:	2100      	movs	r1, #0
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f000 fb4e 	bl	800832c <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama4WashENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>
	      auto __guard = std::__allocate_guarded(__a2);
 8007c90:	f107 0314 	add.w	r3, r7, #20
 8007c94:	4618      	mov	r0, r3
 8007c96:	f000 facd 	bl	8008234 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama4WashENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 8007c9a:	f107 031c 	add.w	r3, r7, #28
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f000 faa9 	bl	80081f6 <_ZNSaISt19_Sp_counted_deleterIPN4tama4WashENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
	}
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3728      	adds	r7, #40	; 0x28
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bdb0      	pop	{r4, r5, r7, pc}

08007cae <_ZNSt12__shared_ptrIN4tama4WashELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 8007cae:	b480      	push	{r7}
 8007cb0:	b083      	sub	sp, #12
 8007cb2:	af00      	add	r7, sp, #0
 8007cb4:	6078      	str	r0, [r7, #4]
 8007cb6:	6039      	str	r1, [r7, #0]
	{ }
 8007cb8:	bf00      	nop
 8007cba:	370c      	adds	r7, #12
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr

08007cc4 <_ZNSaIN4tama8PlayMenuEEC1ERKS1_>:
      allocator(const allocator& __a) throw()
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b082      	sub	sp, #8
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8007cce:	6839      	ldr	r1, [r7, #0]
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f000 fb5a 	bl	800838a <_ZN9__gnu_cxx13new_allocatorIN4tama8PlayMenuEEC1ERKS3_>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3708      	adds	r7, #8
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}

08007ce0 <_ZSt18__allocate_guardedISaIN4tama8PlayMenuEEESt15__allocated_ptrIT_ERS4_>:
    __allocate_guarded(_Alloc& __a)
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b082      	sub	sp, #8
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 8007cea:	2101      	movs	r1, #1
 8007cec:	6838      	ldr	r0, [r7, #0]
 8007cee:	f000 fb58 	bl	80083a2 <_ZNSt16allocator_traitsISaIN4tama8PlayMenuEEE8allocateERS2_j>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	461a      	mov	r2, r3
 8007cf6:	6839      	ldr	r1, [r7, #0]
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f000 fb61 	bl	80083c0 <_ZNSt15__allocated_ptrISaIN4tama8PlayMenuEEEC1ERS2_PS1_>
    }
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	3708      	adds	r7, #8
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}

08007d06 <_ZNSt15__allocated_ptrISaIN4tama8PlayMenuEEED1Ev>:
      ~__allocated_ptr()
 8007d06:	b580      	push	{r7, lr}
 8007d08:	b082      	sub	sp, #8
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	685b      	ldr	r3, [r3, #4]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d007      	beq.n	8007d26 <_ZNSt15__allocated_ptrISaIN4tama8PlayMenuEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6818      	ldr	r0, [r3, #0]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	2201      	movs	r2, #1
 8007d20:	4619      	mov	r1, r3
 8007d22:	f000 fb61 	bl	80083e8 <_ZNSt16allocator_traitsISaIN4tama8PlayMenuEEE10deallocateERS2_PS1_j>
      }
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3708      	adds	r7, #8
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <_ZNSt15__allocated_ptrISaIN4tama8PlayMenuEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b082      	sub	sp, #8
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f000 fb62 	bl	8008406 <_ZNSt15__allocated_ptrISaIN4tama8PlayMenuEEE10_S_raw_ptrEPS1_>
 8007d42:	4603      	mov	r3, r0
 8007d44:	4618      	mov	r0, r3
 8007d46:	3708      	adds	r7, #8
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}

08007d4c <_ZNSt16allocator_traitsISaIN4tama8PlayMenuEEE9constructIS1_JRSt10shared_ptrINS0_7ContextEEEEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b084      	sub	sp, #16
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	60f8      	str	r0, [r7, #12]
 8007d54:	60b9      	str	r1, [r7, #8]
 8007d56:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f7fd fb19 	bl	8005390 <_ZSt7forwardIRSt10shared_ptrIN4tama7ContextEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	461a      	mov	r2, r3
 8007d62:	68b9      	ldr	r1, [r7, #8]
 8007d64:	68f8      	ldr	r0, [r7, #12]
 8007d66:	f000 fb59 	bl	800841c <_ZN9__gnu_cxx13new_allocatorIN4tama8PlayMenuEE9constructIS2_JRSt10shared_ptrINS1_7ContextEEEEEvPT_DpOT0_>
 8007d6a:	bf00      	nop
 8007d6c:	3710      	adds	r7, #16
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}

08007d72 <_ZNSt15__allocated_ptrISaIN4tama8PlayMenuEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 8007d72:	b480      	push	{r7}
 8007d74:	b083      	sub	sp, #12
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]
 8007d7a:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	605a      	str	r2, [r3, #4]
	return *this;
 8007d82:	687b      	ldr	r3, [r7, #4]
      }
 8007d84:	4618      	mov	r0, r3
 8007d86:	370c      	adds	r7, #12
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8e:	4770      	bx	lr

08007d90 <_ZSt4moveIRNSt12__shared_ptrIN4tama8PlayMenuELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 8007d90:	b480      	push	{r7}
 8007d92:	b083      	sub	sp, #12
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	370c      	adds	r7, #12
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da4:	4770      	bx	lr

08007da6 <_ZNSt12__shared_ptrIN4tama8PlayMenuELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>:
        struct _Deleter
 8007da6:	b580      	push	{r7, lr}
 8007da8:	b082      	sub	sp, #8
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	6078      	str	r0, [r7, #4]
 8007dae:	6039      	str	r1, [r7, #0]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	683a      	ldr	r2, [r7, #0]
 8007db4:	4611      	mov	r1, r2
 8007db6:	4618      	mov	r0, r3
 8007db8:	f7ff ff84 	bl	8007cc4 <_ZNSaIN4tama8PlayMenuEEC1ERKS1_>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3708      	adds	r7, #8
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}

08007dc6 <_ZSt4moveIRSaIN4tama8PlayMenuEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8007dc6:	b480      	push	{r7}
 8007dc8:	b083      	sub	sp, #12
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	370c      	adds	r7, #12
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dda:	4770      	bx	lr

08007ddc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama8PlayMenuENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
 8007ddc:	b5b0      	push	{r4, r5, r7, lr}
 8007dde:	b08a      	sub	sp, #40	; 0x28
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	60f8      	str	r0, [r7, #12]
 8007de4:	60b9      	str	r1, [r7, #8]
 8007de6:	607a      	str	r2, [r7, #4]
 8007de8:	603b      	str	r3, [r7, #0]
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2200      	movs	r2, #0
 8007dee:	601a      	str	r2, [r3, #0]
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 8007df0:	f107 031c 	add.w	r3, r7, #28
 8007df4:	6839      	ldr	r1, [r7, #0]
 8007df6:	4618      	mov	r0, r3
 8007df8:	f000 fb2a 	bl	8008450 <_ZNSaISt19_Sp_counted_deleterIPN4tama8PlayMenuENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	      auto __guard = std::__allocate_guarded(__a2);
 8007dfc:	f107 0314 	add.w	r3, r7, #20
 8007e00:	f107 021c 	add.w	r2, r7, #28
 8007e04:	4611      	mov	r1, r2
 8007e06:	4618      	mov	r0, r3
 8007e08:	f000 fb3b 	bl	8008482 <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama8PlayMenuENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>
	      _Sp_cd_type* __mem = __guard.get();
 8007e0c:	f107 0314 	add.w	r3, r7, #20
 8007e10:	4618      	mov	r0, r3
 8007e12:	f000 fb5e 	bl	80084d2 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama8PlayMenuENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>
 8007e16:	6278      	str	r0, [r7, #36]	; 0x24
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f7ff ffb9 	bl	8007d90 <_ZSt4moveIRNSt12__shared_ptrIN4tama8PlayMenuELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8007e1e:	4602      	mov	r2, r0
 8007e20:	f107 0320 	add.w	r3, r7, #32
 8007e24:	4611      	mov	r1, r2
 8007e26:	4618      	mov	r0, r3
 8007e28:	f7ff ffbd 	bl	8007da6 <_ZNSt12__shared_ptrIN4tama8PlayMenuELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 8007e2c:	f107 0420 	add.w	r4, r7, #32
 8007e30:	6838      	ldr	r0, [r7, #0]
 8007e32:	f7ff ffc8 	bl	8007dc6 <_ZSt4moveIRSaIN4tama8PlayMenuEEEONSt16remove_referenceIT_E4typeEOS5_>
 8007e36:	4605      	mov	r5, r0
 8007e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e3a:	4619      	mov	r1, r3
 8007e3c:	2014      	movs	r0, #20
 8007e3e:	f7f9 f8fe 	bl	800103e <_ZnwjPv>
 8007e42:	2800      	cmp	r0, #0
 8007e44:	d004      	beq.n	8007e50 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama8PlayMenuENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x74>
 8007e46:	462b      	mov	r3, r5
 8007e48:	4622      	mov	r2, r4
 8007e4a:	68b9      	ldr	r1, [r7, #8]
 8007e4c:	f000 fb7a 	bl	8008544 <_ZNSt19_Sp_counted_deleterIPN4tama8PlayMenuENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>
 8007e50:	f107 0320 	add.w	r3, r7, #32
 8007e54:	4618      	mov	r0, r3
 8007e56:	f7ff fcc1 	bl	80077dc <_ZNSt12__shared_ptrIN4tama8PlayMenuELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	      _M_pi = __mem;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e5e:	601a      	str	r2, [r3, #0]
	      __guard = nullptr;
 8007e60:	f107 0314 	add.w	r3, r7, #20
 8007e64:	2100      	movs	r1, #0
 8007e66:	4618      	mov	r0, r3
 8007e68:	f000 fb9a 	bl	80085a0 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama8PlayMenuENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>
	      auto __guard = std::__allocate_guarded(__a2);
 8007e6c:	f107 0314 	add.w	r3, r7, #20
 8007e70:	4618      	mov	r0, r3
 8007e72:	f000 fb19 	bl	80084a8 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama8PlayMenuENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 8007e76:	f107 031c 	add.w	r3, r7, #28
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f000 faf5 	bl	800846a <_ZNSaISt19_Sp_counted_deleterIPN4tama8PlayMenuENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
	}
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	4618      	mov	r0, r3
 8007e84:	3728      	adds	r7, #40	; 0x28
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bdb0      	pop	{r4, r5, r7, pc}

08007e8a <_ZNSt12__shared_ptrIN4tama8PlayMenuELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 8007e8a:	b480      	push	{r7}
 8007e8c:	b083      	sub	sp, #12
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	6078      	str	r0, [r7, #4]
 8007e92:	6039      	str	r1, [r7, #0]
	{ }
 8007e94:	bf00      	nop
 8007e96:	370c      	adds	r7, #12
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr

08007ea0 <_ZN9__gnu_cxx13new_allocatorIN4tama3EatEEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8007ea0:	b480      	push	{r7}
 8007ea2:	b083      	sub	sp, #12
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
 8007ea8:	6039      	str	r1, [r7, #0]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	4618      	mov	r0, r3
 8007eae:	370c      	adds	r7, #12
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb6:	4770      	bx	lr

08007eb8 <_ZNSt16allocator_traitsISaIN4tama3EatEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b082      	sub	sp, #8
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	6839      	ldr	r1, [r7, #0]
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f000 fb99 	bl	80085fe <_ZN9__gnu_cxx13new_allocatorIN4tama3EatEE8allocateEjPKv>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3708      	adds	r7, #8
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}

08007ed6 <_ZNSt15__allocated_ptrISaIN4tama3EatEEEC1ERS2_PS1_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8007ed6:	b580      	push	{r7, lr}
 8007ed8:	b084      	sub	sp, #16
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	60f8      	str	r0, [r7, #12]
 8007ede:	60b9      	str	r1, [r7, #8]
 8007ee0:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8007ee2:	68b8      	ldr	r0, [r7, #8]
 8007ee4:	f000 fbab 	bl	800863e <_ZSt11__addressofISaIN4tama3EatEEEPT_RS3_>
 8007ee8:	4602      	mov	r2, r0
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	601a      	str	r2, [r3, #0]
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	687a      	ldr	r2, [r7, #4]
 8007ef2:	605a      	str	r2, [r3, #4]
      { }
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3710      	adds	r7, #16
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}

08007efe <_ZNSt16allocator_traitsISaIN4tama3EatEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8007efe:	b580      	push	{r7, lr}
 8007f00:	b084      	sub	sp, #16
 8007f02:	af00      	add	r7, sp, #0
 8007f04:	60f8      	str	r0, [r7, #12]
 8007f06:	60b9      	str	r1, [r7, #8]
 8007f08:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8007f0a:	687a      	ldr	r2, [r7, #4]
 8007f0c:	68b9      	ldr	r1, [r7, #8]
 8007f0e:	68f8      	ldr	r0, [r7, #12]
 8007f10:	f000 fba0 	bl	8008654 <_ZN9__gnu_cxx13new_allocatorIN4tama3EatEE10deallocateEPS2_j>
 8007f14:	bf00      	nop
 8007f16:	3710      	adds	r7, #16
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}

08007f1c <_ZNSt15__allocated_ptrISaIN4tama3EatEEE10_S_raw_ptrEPS1_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 8007f1c:	b480      	push	{r7}
 8007f1e:	b083      	sub	sp, #12
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	4618      	mov	r0, r3
 8007f28:	370c      	adds	r7, #12
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr

08007f32 <_ZN9__gnu_cxx13new_allocatorIN4tama3EatEE9constructIS2_JRSt10shared_ptrINS1_7ContextEEEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8007f32:	b590      	push	{r4, r7, lr}
 8007f34:	b085      	sub	sp, #20
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	60f8      	str	r0, [r7, #12]
 8007f3a:	60b9      	str	r1, [r7, #8]
 8007f3c:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f7fd fa26 	bl	8005390 <_ZSt7forwardIRSt10shared_ptrIN4tama7ContextEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8007f44:	4604      	mov	r4, r0
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	4619      	mov	r1, r3
 8007f4a:	206c      	movs	r0, #108	; 0x6c
 8007f4c:	f7f9 f877 	bl	800103e <_ZnwjPv>
 8007f50:	4603      	mov	r3, r0
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d003      	beq.n	8007f5e <_ZN9__gnu_cxx13new_allocatorIN4tama3EatEE9constructIS2_JRSt10shared_ptrINS1_7ContextEEEEEvPT_DpOT0_+0x2c>
 8007f56:	4621      	mov	r1, r4
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f001 fc51 	bl	8009800 <_ZN4tama3EatC1ERKSt10shared_ptrINS_7ContextEE>
 8007f5e:	bf00      	nop
 8007f60:	3714      	adds	r7, #20
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd90      	pop	{r4, r7, pc}

08007f66 <_ZNSaISt19_Sp_counted_deleterIPN4tama3EatENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) throw() { }
 8007f66:	b580      	push	{r7, lr}
 8007f68:	b082      	sub	sp, #8
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	6078      	str	r0, [r7, #4]
 8007f6e:	6039      	str	r1, [r7, #0]
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f000 fb7c 	bl	800866e <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama3EatENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3708      	adds	r7, #8
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}

08007f80 <_ZNSaISt19_Sp_counted_deleterIPN4tama3EatENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>:
      ~allocator() throw() { }
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b082      	sub	sp, #8
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 fb7b 	bl	8008684 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama3EatENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	4618      	mov	r0, r3
 8007f92:	3708      	adds	r7, #8
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}

08007f98 <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama3EatENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>:
    __allocate_guarded(_Alloc& __a)
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b082      	sub	sp, #8
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 8007fa2:	2101      	movs	r1, #1
 8007fa4:	6838      	ldr	r0, [r7, #0]
 8007fa6:	f000 fb78 	bl	800869a <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama3EatENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>
 8007faa:	4603      	mov	r3, r0
 8007fac:	461a      	mov	r2, r3
 8007fae:	6839      	ldr	r1, [r7, #0]
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f000 fb81 	bl	80086b8 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama3EatENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
    }
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	3708      	adds	r7, #8
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}

08007fbe <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama3EatENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>:
      ~__allocated_ptr()
 8007fbe:	b580      	push	{r7, lr}
 8007fc0:	b082      	sub	sp, #8
 8007fc2:	af00      	add	r7, sp, #0
 8007fc4:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d007      	beq.n	8007fde <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama3EatENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6818      	ldr	r0, [r3, #0]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	4619      	mov	r1, r3
 8007fda:	f000 fb81 	bl	80086e0 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama3EatENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>
      }
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3708      	adds	r7, #8
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}

08007fe8 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama3EatENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b082      	sub	sp, #8
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f000 fb82 	bl	80086fe <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama3EatENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3708      	adds	r7, #8
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}

08008004 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama3EatELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, false>
 8008004:	b580      	push	{r7, lr}
 8008006:	b082      	sub	sp, #8
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	4618      	mov	r0, r3
 8008010:	f7ff fab4 	bl	800757c <_ZNSt12__shared_ptrIN4tama3EatELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	4618      	mov	r0, r3
 8008018:	3708      	adds	r7, #8
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}

0800801e <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama3EatEELb1EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp
 800801e:	b580      	push	{r7, lr}
 8008020:	b082      	sub	sp, #8
 8008022:	af00      	add	r7, sp, #0
 8008024:	6078      	str	r0, [r7, #4]
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f7ff f926 	bl	8007278 <_ZNSaIN4tama3EatEED1Ev>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	4618      	mov	r0, r3
 8008030:	3708      	adds	r7, #8
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}

08008036 <_ZNSt19_Sp_counted_deleterIPN4tama3EatENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>:
      class _Impl : _Sp_ebo_helper<0, _Deleter>, _Sp_ebo_helper<1, _Alloc>
 8008036:	b580      	push	{r7, lr}
 8008038:	b082      	sub	sp, #8
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	3301      	adds	r3, #1
 8008042:	4618      	mov	r0, r3
 8008044:	f7ff ffeb 	bl	800801e <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama3EatEELb1EED1Ev>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	4618      	mov	r0, r3
 800804c:	f7ff ffda 	bl	8008004 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama3EatELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	4618      	mov	r0, r3
 8008054:	3708      	adds	r7, #8
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}
	...

0800805c <_ZNSt19_Sp_counted_deleterIPN4tama3EatENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 800805c:	b590      	push	{r4, r7, lr}
 800805e:	b087      	sub	sp, #28
 8008060:	af00      	add	r7, sp, #0
 8008062:	60f8      	str	r0, [r7, #12]
 8008064:	60b9      	str	r1, [r7, #8]
 8008066:	607a      	str	r2, [r7, #4]
 8008068:	603b      	str	r3, [r7, #0]
      : _M_impl(__p, std::move(__d), __a) { }
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	4618      	mov	r0, r3
 800806e:	f7fc fb6b 	bl	8004748 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8008072:	4a10      	ldr	r2, [pc, #64]	; (80080b4 <_ZNSt19_Sp_counted_deleterIPN4tama3EatENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_+0x58>)
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	601a      	str	r2, [r3, #0]
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	f103 040c 	add.w	r4, r3, #12
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f7ff fcaa 	bl	80079d8 <_ZSt4moveIRNSt12__shared_ptrIN4tama3EatELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8008084:	4602      	mov	r2, r0
 8008086:	f107 0314 	add.w	r3, r7, #20
 800808a:	4611      	mov	r1, r2
 800808c:	4618      	mov	r0, r3
 800808e:	f7ff fcae 	bl	80079ee <_ZNSt12__shared_ptrIN4tama3EatELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 8008092:	f107 0214 	add.w	r2, r7, #20
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	68b9      	ldr	r1, [r7, #8]
 800809a:	4620      	mov	r0, r4
 800809c:	f000 fb3a 	bl	8008714 <_ZNSt19_Sp_counted_deleterIPN4tama3EatENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>
 80080a0:	f107 0314 	add.w	r3, r7, #20
 80080a4:	4618      	mov	r0, r3
 80080a6:	f7ff fa69 	bl	800757c <_ZNSt12__shared_ptrIN4tama3EatELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	4618      	mov	r0, r3
 80080ae:	371c      	adds	r7, #28
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd90      	pop	{r4, r7, pc}
 80080b4:	080236e4 	.word	0x080236e4

080080b8 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama3EatENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 80080b8:	b480      	push	{r7}
 80080ba:	b083      	sub	sp, #12
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
 80080c0:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2200      	movs	r2, #0
 80080c6:	605a      	str	r2, [r3, #4]
	return *this;
 80080c8:	687b      	ldr	r3, [r7, #4]
      }
 80080ca:	4618      	mov	r0, r3
 80080cc:	370c      	adds	r7, #12
 80080ce:	46bd      	mov	sp, r7
 80080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d4:	4770      	bx	lr

080080d6 <_ZNSt12__shared_ptrIN4tama3EatELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>:
          void operator()(typename _Alloc::value_type* __ptr)
 80080d6:	b590      	push	{r4, r7, lr}
 80080d8:	b085      	sub	sp, #20
 80080da:	af00      	add	r7, sp, #0
 80080dc:	6078      	str	r0, [r7, #4]
 80080de:	6039      	str	r1, [r7, #0]
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 80080e0:	6879      	ldr	r1, [r7, #4]
 80080e2:	f107 0308 	add.w	r3, r7, #8
 80080e6:	683a      	ldr	r2, [r7, #0]
 80080e8:	4618      	mov	r0, r3
 80080ea:	f7ff fef4 	bl	8007ed6 <_ZNSt15__allocated_ptrISaIN4tama3EatEEEC1ERS2_PS1_>
	    allocator_traits<_Alloc>::destroy(_M_alloc, __guard.get());
 80080ee:	687c      	ldr	r4, [r7, #4]
 80080f0:	f107 0308 	add.w	r3, r7, #8
 80080f4:	4618      	mov	r0, r3
 80080f6:	f7ff fc3f 	bl	8007978 <_ZNSt15__allocated_ptrISaIN4tama3EatEEE3getEv>
 80080fa:	4603      	mov	r3, r0
 80080fc:	4619      	mov	r1, r3
 80080fe:	4620      	mov	r0, r4
 8008100:	f000 fb26 	bl	8008750 <_ZNSt16allocator_traitsISaIN4tama3EatEEE7destroyIS1_EEvRS2_PT_>
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 8008104:	f107 0308 	add.w	r3, r7, #8
 8008108:	4618      	mov	r0, r3
 800810a:	f7ff fc20 	bl	800794e <_ZNSt15__allocated_ptrISaIN4tama3EatEEED1Ev>
          }
 800810e:	bf00      	nop
 8008110:	3714      	adds	r7, #20
 8008112:	46bd      	mov	sp, r7
 8008114:	bd90      	pop	{r4, r7, pc}

08008116 <_ZN9__gnu_cxx13new_allocatorIN4tama4WashEEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8008116:	b480      	push	{r7}
 8008118:	b083      	sub	sp, #12
 800811a:	af00      	add	r7, sp, #0
 800811c:	6078      	str	r0, [r7, #4]
 800811e:	6039      	str	r1, [r7, #0]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	4618      	mov	r0, r3
 8008124:	370c      	adds	r7, #12
 8008126:	46bd      	mov	sp, r7
 8008128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812c:	4770      	bx	lr

0800812e <_ZNSt16allocator_traitsISaIN4tama4WashEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800812e:	b580      	push	{r7, lr}
 8008130:	b082      	sub	sp, #8
 8008132:	af00      	add	r7, sp, #0
 8008134:	6078      	str	r0, [r7, #4]
 8008136:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8008138:	2200      	movs	r2, #0
 800813a:	6839      	ldr	r1, [r7, #0]
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f000 fb14 	bl	800876a <_ZN9__gnu_cxx13new_allocatorIN4tama4WashEE8allocateEjPKv>
 8008142:	4603      	mov	r3, r0
 8008144:	4618      	mov	r0, r3
 8008146:	3708      	adds	r7, #8
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}

0800814c <_ZNSt15__allocated_ptrISaIN4tama4WashEEEC1ERS2_PS1_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 800814c:	b580      	push	{r7, lr}
 800814e:	b084      	sub	sp, #16
 8008150:	af00      	add	r7, sp, #0
 8008152:	60f8      	str	r0, [r7, #12]
 8008154:	60b9      	str	r1, [r7, #8]
 8008156:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8008158:	68b8      	ldr	r0, [r7, #8]
 800815a:	f000 fb26 	bl	80087aa <_ZSt11__addressofISaIN4tama4WashEEEPT_RS3_>
 800815e:	4602      	mov	r2, r0
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	601a      	str	r2, [r3, #0]
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	687a      	ldr	r2, [r7, #4]
 8008168:	605a      	str	r2, [r3, #4]
      { }
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	4618      	mov	r0, r3
 800816e:	3710      	adds	r7, #16
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}

08008174 <_ZNSt16allocator_traitsISaIN4tama4WashEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8008174:	b580      	push	{r7, lr}
 8008176:	b084      	sub	sp, #16
 8008178:	af00      	add	r7, sp, #0
 800817a:	60f8      	str	r0, [r7, #12]
 800817c:	60b9      	str	r1, [r7, #8]
 800817e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8008180:	687a      	ldr	r2, [r7, #4]
 8008182:	68b9      	ldr	r1, [r7, #8]
 8008184:	68f8      	ldr	r0, [r7, #12]
 8008186:	f000 fb1b 	bl	80087c0 <_ZN9__gnu_cxx13new_allocatorIN4tama4WashEE10deallocateEPS2_j>
 800818a:	bf00      	nop
 800818c:	3710      	adds	r7, #16
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}

08008192 <_ZNSt15__allocated_ptrISaIN4tama4WashEEE10_S_raw_ptrEPS1_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 8008192:	b480      	push	{r7}
 8008194:	b083      	sub	sp, #12
 8008196:	af00      	add	r7, sp, #0
 8008198:	6078      	str	r0, [r7, #4]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	4618      	mov	r0, r3
 800819e:	370c      	adds	r7, #12
 80081a0:	46bd      	mov	sp, r7
 80081a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a6:	4770      	bx	lr

080081a8 <_ZN9__gnu_cxx13new_allocatorIN4tama4WashEE9constructIS2_JRSt10shared_ptrINS1_7ContextEEEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80081a8:	b590      	push	{r4, r7, lr}
 80081aa:	b085      	sub	sp, #20
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	60f8      	str	r0, [r7, #12]
 80081b0:	60b9      	str	r1, [r7, #8]
 80081b2:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f7fd f8eb 	bl	8005390 <_ZSt7forwardIRSt10shared_ptrIN4tama7ContextEEEOT_RNSt16remove_referenceIS5_E4typeE>
 80081ba:	4604      	mov	r4, r0
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	4619      	mov	r1, r3
 80081c0:	20dc      	movs	r0, #220	; 0xdc
 80081c2:	f7f8 ff3c 	bl	800103e <_ZnwjPv>
 80081c6:	4603      	mov	r3, r0
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d003      	beq.n	80081d4 <_ZN9__gnu_cxx13new_allocatorIN4tama4WashEE9constructIS2_JRSt10shared_ptrINS1_7ContextEEEEEvPT_DpOT0_+0x2c>
 80081cc:	4621      	mov	r1, r4
 80081ce:	4618      	mov	r0, r3
 80081d0:	f004 fad0 	bl	800c774 <_ZN4tama4WashC1ERKSt10shared_ptrINS_7ContextEE>
 80081d4:	bf00      	nop
 80081d6:	3714      	adds	r7, #20
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd90      	pop	{r4, r7, pc}

080081dc <_ZNSaISt19_Sp_counted_deleterIPN4tama4WashENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) throw() { }
 80081dc:	b580      	push	{r7, lr}
 80081de:	b082      	sub	sp, #8
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
 80081e4:	6039      	str	r1, [r7, #0]
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f000 faf7 	bl	80087da <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama4WashENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	4618      	mov	r0, r3
 80081f0:	3708      	adds	r7, #8
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}

080081f6 <_ZNSaISt19_Sp_counted_deleterIPN4tama4WashENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>:
      ~allocator() throw() { }
 80081f6:	b580      	push	{r7, lr}
 80081f8:	b082      	sub	sp, #8
 80081fa:	af00      	add	r7, sp, #0
 80081fc:	6078      	str	r0, [r7, #4]
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f000 faf6 	bl	80087f0 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama4WashENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	4618      	mov	r0, r3
 8008208:	3708      	adds	r7, #8
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}

0800820e <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama4WashENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>:
    __allocate_guarded(_Alloc& __a)
 800820e:	b580      	push	{r7, lr}
 8008210:	b082      	sub	sp, #8
 8008212:	af00      	add	r7, sp, #0
 8008214:	6078      	str	r0, [r7, #4]
 8008216:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 8008218:	2101      	movs	r1, #1
 800821a:	6838      	ldr	r0, [r7, #0]
 800821c:	f000 faf3 	bl	8008806 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama4WashENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>
 8008220:	4603      	mov	r3, r0
 8008222:	461a      	mov	r2, r3
 8008224:	6839      	ldr	r1, [r7, #0]
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 fafc 	bl	8008824 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama4WashENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
    }
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	3708      	adds	r7, #8
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}

08008234 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama4WashENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>:
      ~__allocated_ptr()
 8008234:	b580      	push	{r7, lr}
 8008236:	b082      	sub	sp, #8
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d007      	beq.n	8008254 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama4WashENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6818      	ldr	r0, [r3, #0]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	685b      	ldr	r3, [r3, #4]
 800824c:	2201      	movs	r2, #1
 800824e:	4619      	mov	r1, r3
 8008250:	f000 fafc 	bl	800884c <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama4WashENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>
      }
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	4618      	mov	r0, r3
 8008258:	3708      	adds	r7, #8
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}

0800825e <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama4WashENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 800825e:	b580      	push	{r7, lr}
 8008260:	b082      	sub	sp, #8
 8008262:	af00      	add	r7, sp, #0
 8008264:	6078      	str	r0, [r7, #4]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	4618      	mov	r0, r3
 800826c:	f000 fafd 	bl	800886a <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama4WashENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>
 8008270:	4603      	mov	r3, r0
 8008272:	4618      	mov	r0, r3
 8008274:	3708      	adds	r7, #8
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}

0800827a <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama4WashELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, false>
 800827a:	b580      	push	{r7, lr}
 800827c:	b082      	sub	sp, #8
 800827e:	af00      	add	r7, sp, #0
 8008280:	6078      	str	r0, [r7, #4]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	4618      	mov	r0, r3
 8008286:	f7ff fa11 	bl	80076ac <_ZNSt12__shared_ptrIN4tama4WashELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	4618      	mov	r0, r3
 800828e:	3708      	adds	r7, #8
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}

08008294 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama4WashEELb1EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp
 8008294:	b580      	push	{r7, lr}
 8008296:	b082      	sub	sp, #8
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f7ff f834 	bl	800730a <_ZNSaIN4tama4WashEED1Ev>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	4618      	mov	r0, r3
 80082a6:	3708      	adds	r7, #8
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}

080082ac <_ZNSt19_Sp_counted_deleterIPN4tama4WashENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>:
      class _Impl : _Sp_ebo_helper<0, _Deleter>, _Sp_ebo_helper<1, _Alloc>
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b082      	sub	sp, #8
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	3301      	adds	r3, #1
 80082b8:	4618      	mov	r0, r3
 80082ba:	f7ff ffeb 	bl	8008294 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama4WashEELb1EED1Ev>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	4618      	mov	r0, r3
 80082c2:	f7ff ffda 	bl	800827a <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama4WashELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	4618      	mov	r0, r3
 80082ca:	3708      	adds	r7, #8
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}

080082d0 <_ZNSt19_Sp_counted_deleterIPN4tama4WashENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 80082d0:	b590      	push	{r4, r7, lr}
 80082d2:	b087      	sub	sp, #28
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	60f8      	str	r0, [r7, #12]
 80082d8:	60b9      	str	r1, [r7, #8]
 80082da:	607a      	str	r2, [r7, #4]
 80082dc:	603b      	str	r3, [r7, #0]
      : _M_impl(__p, std::move(__d), __a) { }
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	4618      	mov	r0, r3
 80082e2:	f7fc fa31 	bl	8004748 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 80082e6:	4a10      	ldr	r2, [pc, #64]	; (8008328 <_ZNSt19_Sp_counted_deleterIPN4tama4WashENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_+0x58>)
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	601a      	str	r2, [r3, #0]
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	f103 040c 	add.w	r4, r3, #12
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f7ff fc5e 	bl	8007bb4 <_ZSt4moveIRNSt12__shared_ptrIN4tama4WashELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 80082f8:	4602      	mov	r2, r0
 80082fa:	f107 0314 	add.w	r3, r7, #20
 80082fe:	4611      	mov	r1, r2
 8008300:	4618      	mov	r0, r3
 8008302:	f7ff fc62 	bl	8007bca <_ZNSt12__shared_ptrIN4tama4WashELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 8008306:	f107 0214 	add.w	r2, r7, #20
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	68b9      	ldr	r1, [r7, #8]
 800830e:	4620      	mov	r0, r4
 8008310:	f000 fab6 	bl	8008880 <_ZNSt19_Sp_counted_deleterIPN4tama4WashENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>
 8008314:	f107 0314 	add.w	r3, r7, #20
 8008318:	4618      	mov	r0, r3
 800831a:	f7ff f9c7 	bl	80076ac <_ZNSt12__shared_ptrIN4tama4WashELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	4618      	mov	r0, r3
 8008322:	371c      	adds	r7, #28
 8008324:	46bd      	mov	sp, r7
 8008326:	bd90      	pop	{r4, r7, pc}
 8008328:	080236c8 	.word	0x080236c8

0800832c <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama4WashENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 800832c:	b480      	push	{r7}
 800832e:	b083      	sub	sp, #12
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
 8008334:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2200      	movs	r2, #0
 800833a:	605a      	str	r2, [r3, #4]
	return *this;
 800833c:	687b      	ldr	r3, [r7, #4]
      }
 800833e:	4618      	mov	r0, r3
 8008340:	370c      	adds	r7, #12
 8008342:	46bd      	mov	sp, r7
 8008344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008348:	4770      	bx	lr

0800834a <_ZNSt12__shared_ptrIN4tama4WashELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>:
          void operator()(typename _Alloc::value_type* __ptr)
 800834a:	b590      	push	{r4, r7, lr}
 800834c:	b085      	sub	sp, #20
 800834e:	af00      	add	r7, sp, #0
 8008350:	6078      	str	r0, [r7, #4]
 8008352:	6039      	str	r1, [r7, #0]
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 8008354:	6879      	ldr	r1, [r7, #4]
 8008356:	f107 0308 	add.w	r3, r7, #8
 800835a:	683a      	ldr	r2, [r7, #0]
 800835c:	4618      	mov	r0, r3
 800835e:	f7ff fef5 	bl	800814c <_ZNSt15__allocated_ptrISaIN4tama4WashEEEC1ERS2_PS1_>
	    allocator_traits<_Alloc>::destroy(_M_alloc, __guard.get());
 8008362:	687c      	ldr	r4, [r7, #4]
 8008364:	f107 0308 	add.w	r3, r7, #8
 8008368:	4618      	mov	r0, r3
 800836a:	f7ff fbf3 	bl	8007b54 <_ZNSt15__allocated_ptrISaIN4tama4WashEEE3getEv>
 800836e:	4603      	mov	r3, r0
 8008370:	4619      	mov	r1, r3
 8008372:	4620      	mov	r0, r4
 8008374:	f000 faa2 	bl	80088bc <_ZNSt16allocator_traitsISaIN4tama4WashEEE7destroyIS1_EEvRS2_PT_>
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 8008378:	f107 0308 	add.w	r3, r7, #8
 800837c:	4618      	mov	r0, r3
 800837e:	f7ff fbd4 	bl	8007b2a <_ZNSt15__allocated_ptrISaIN4tama4WashEEED1Ev>
          }
 8008382:	bf00      	nop
 8008384:	3714      	adds	r7, #20
 8008386:	46bd      	mov	sp, r7
 8008388:	bd90      	pop	{r4, r7, pc}

0800838a <_ZN9__gnu_cxx13new_allocatorIN4tama8PlayMenuEEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800838a:	b480      	push	{r7}
 800838c:	b083      	sub	sp, #12
 800838e:	af00      	add	r7, sp, #0
 8008390:	6078      	str	r0, [r7, #4]
 8008392:	6039      	str	r1, [r7, #0]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	4618      	mov	r0, r3
 8008398:	370c      	adds	r7, #12
 800839a:	46bd      	mov	sp, r7
 800839c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a0:	4770      	bx	lr

080083a2 <_ZNSt16allocator_traitsISaIN4tama8PlayMenuEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 80083a2:	b580      	push	{r7, lr}
 80083a4:	b082      	sub	sp, #8
 80083a6:	af00      	add	r7, sp, #0
 80083a8:	6078      	str	r0, [r7, #4]
 80083aa:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80083ac:	2200      	movs	r2, #0
 80083ae:	6839      	ldr	r1, [r7, #0]
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f000 fa90 	bl	80088d6 <_ZN9__gnu_cxx13new_allocatorIN4tama8PlayMenuEE8allocateEjPKv>
 80083b6:	4603      	mov	r3, r0
 80083b8:	4618      	mov	r0, r3
 80083ba:	3708      	adds	r7, #8
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}

080083c0 <_ZNSt15__allocated_ptrISaIN4tama8PlayMenuEEEC1ERS2_PS1_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b084      	sub	sp, #16
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	60f8      	str	r0, [r7, #12]
 80083c8:	60b9      	str	r1, [r7, #8]
 80083ca:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 80083cc:	68b8      	ldr	r0, [r7, #8]
 80083ce:	f000 faa2 	bl	8008916 <_ZSt11__addressofISaIN4tama8PlayMenuEEEPT_RS3_>
 80083d2:	4602      	mov	r2, r0
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	601a      	str	r2, [r3, #0]
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	687a      	ldr	r2, [r7, #4]
 80083dc:	605a      	str	r2, [r3, #4]
      { }
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	4618      	mov	r0, r3
 80083e2:	3710      	adds	r7, #16
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}

080083e8 <_ZNSt16allocator_traitsISaIN4tama8PlayMenuEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b084      	sub	sp, #16
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	60f8      	str	r0, [r7, #12]
 80083f0:	60b9      	str	r1, [r7, #8]
 80083f2:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	68b9      	ldr	r1, [r7, #8]
 80083f8:	68f8      	ldr	r0, [r7, #12]
 80083fa:	f000 fa97 	bl	800892c <_ZN9__gnu_cxx13new_allocatorIN4tama8PlayMenuEE10deallocateEPS2_j>
 80083fe:	bf00      	nop
 8008400:	3710      	adds	r7, #16
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}

08008406 <_ZNSt15__allocated_ptrISaIN4tama8PlayMenuEEE10_S_raw_ptrEPS1_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 8008406:	b480      	push	{r7}
 8008408:	b083      	sub	sp, #12
 800840a:	af00      	add	r7, sp, #0
 800840c:	6078      	str	r0, [r7, #4]
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	4618      	mov	r0, r3
 8008412:	370c      	adds	r7, #12
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr

0800841c <_ZN9__gnu_cxx13new_allocatorIN4tama8PlayMenuEE9constructIS2_JRSt10shared_ptrINS1_7ContextEEEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800841c:	b590      	push	{r4, r7, lr}
 800841e:	b085      	sub	sp, #20
 8008420:	af00      	add	r7, sp, #0
 8008422:	60f8      	str	r0, [r7, #12]
 8008424:	60b9      	str	r1, [r7, #8]
 8008426:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f7fc ffb1 	bl	8005390 <_ZSt7forwardIRSt10shared_ptrIN4tama7ContextEEEOT_RNSt16remove_referenceIS5_E4typeE>
 800842e:	4604      	mov	r4, r0
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	4619      	mov	r1, r3
 8008434:	206c      	movs	r0, #108	; 0x6c
 8008436:	f7f8 fe02 	bl	800103e <_ZnwjPv>
 800843a:	4603      	mov	r3, r0
 800843c:	2b00      	cmp	r3, #0
 800843e:	d003      	beq.n	8008448 <_ZN9__gnu_cxx13new_allocatorIN4tama8PlayMenuEE9constructIS2_JRSt10shared_ptrINS1_7ContextEEEEEvPT_DpOT0_+0x2c>
 8008440:	4621      	mov	r1, r4
 8008442:	4618      	mov	r0, r3
 8008444:	f003 fb48 	bl	800bad8 <_ZN4tama8PlayMenuC1ERKSt10shared_ptrINS_7ContextEE>
 8008448:	bf00      	nop
 800844a:	3714      	adds	r7, #20
 800844c:	46bd      	mov	sp, r7
 800844e:	bd90      	pop	{r4, r7, pc}

08008450 <_ZNSaISt19_Sp_counted_deleterIPN4tama8PlayMenuENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) throw() { }
 8008450:	b580      	push	{r7, lr}
 8008452:	b082      	sub	sp, #8
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
 8008458:	6039      	str	r1, [r7, #0]
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f000 fa73 	bl	8008946 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama8PlayMenuENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	4618      	mov	r0, r3
 8008464:	3708      	adds	r7, #8
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}

0800846a <_ZNSaISt19_Sp_counted_deleterIPN4tama8PlayMenuENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>:
      ~allocator() throw() { }
 800846a:	b580      	push	{r7, lr}
 800846c:	b082      	sub	sp, #8
 800846e:	af00      	add	r7, sp, #0
 8008470:	6078      	str	r0, [r7, #4]
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f000 fa72 	bl	800895c <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama8PlayMenuENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	4618      	mov	r0, r3
 800847c:	3708      	adds	r7, #8
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}

08008482 <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama8PlayMenuENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>:
    __allocate_guarded(_Alloc& __a)
 8008482:	b580      	push	{r7, lr}
 8008484:	b082      	sub	sp, #8
 8008486:	af00      	add	r7, sp, #0
 8008488:	6078      	str	r0, [r7, #4]
 800848a:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 800848c:	2101      	movs	r1, #1
 800848e:	6838      	ldr	r0, [r7, #0]
 8008490:	f000 fa6f 	bl	8008972 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama8PlayMenuENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>
 8008494:	4603      	mov	r3, r0
 8008496:	461a      	mov	r2, r3
 8008498:	6839      	ldr	r1, [r7, #0]
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f000 fa78 	bl	8008990 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama8PlayMenuENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
    }
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	3708      	adds	r7, #8
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}

080084a8 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama8PlayMenuENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>:
      ~__allocated_ptr()
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b082      	sub	sp, #8
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	685b      	ldr	r3, [r3, #4]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d007      	beq.n	80084c8 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama8PlayMenuENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6818      	ldr	r0, [r3, #0]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	685b      	ldr	r3, [r3, #4]
 80084c0:	2201      	movs	r2, #1
 80084c2:	4619      	mov	r1, r3
 80084c4:	f000 fa78 	bl	80089b8 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama8PlayMenuENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>
      }
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	4618      	mov	r0, r3
 80084cc:	3708      	adds	r7, #8
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}

080084d2 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama8PlayMenuENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 80084d2:	b580      	push	{r7, lr}
 80084d4:	b082      	sub	sp, #8
 80084d6:	af00      	add	r7, sp, #0
 80084d8:	6078      	str	r0, [r7, #4]
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	4618      	mov	r0, r3
 80084e0:	f000 fa79 	bl	80089d6 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama8PlayMenuENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>
 80084e4:	4603      	mov	r3, r0
 80084e6:	4618      	mov	r0, r3
 80084e8:	3708      	adds	r7, #8
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}

080084ee <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama8PlayMenuELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, false>
 80084ee:	b580      	push	{r7, lr}
 80084f0:	b082      	sub	sp, #8
 80084f2:	af00      	add	r7, sp, #0
 80084f4:	6078      	str	r0, [r7, #4]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	4618      	mov	r0, r3
 80084fa:	f7ff f96f 	bl	80077dc <_ZNSt12__shared_ptrIN4tama8PlayMenuELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	4618      	mov	r0, r3
 8008502:	3708      	adds	r7, #8
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}

08008508 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama8PlayMenuEELb1EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp
 8008508:	b580      	push	{r7, lr}
 800850a:	b082      	sub	sp, #8
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f7fe ff43 	bl	800739c <_ZNSaIN4tama8PlayMenuEED1Ev>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	4618      	mov	r0, r3
 800851a:	3708      	adds	r7, #8
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}

08008520 <_ZNSt19_Sp_counted_deleterIPN4tama8PlayMenuENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>:
      class _Impl : _Sp_ebo_helper<0, _Deleter>, _Sp_ebo_helper<1, _Alloc>
 8008520:	b580      	push	{r7, lr}
 8008522:	b082      	sub	sp, #8
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	3301      	adds	r3, #1
 800852c:	4618      	mov	r0, r3
 800852e:	f7ff ffeb 	bl	8008508 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama8PlayMenuEELb1EED1Ev>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	4618      	mov	r0, r3
 8008536:	f7ff ffda 	bl	80084ee <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama8PlayMenuELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	4618      	mov	r0, r3
 800853e:	3708      	adds	r7, #8
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}

08008544 <_ZNSt19_Sp_counted_deleterIPN4tama8PlayMenuENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 8008544:	b590      	push	{r4, r7, lr}
 8008546:	b087      	sub	sp, #28
 8008548:	af00      	add	r7, sp, #0
 800854a:	60f8      	str	r0, [r7, #12]
 800854c:	60b9      	str	r1, [r7, #8]
 800854e:	607a      	str	r2, [r7, #4]
 8008550:	603b      	str	r3, [r7, #0]
      : _M_impl(__p, std::move(__d), __a) { }
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	4618      	mov	r0, r3
 8008556:	f7fc f8f7 	bl	8004748 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800855a:	4a10      	ldr	r2, [pc, #64]	; (800859c <_ZNSt19_Sp_counted_deleterIPN4tama8PlayMenuENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_+0x58>)
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	601a      	str	r2, [r3, #0]
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	f103 040c 	add.w	r4, r3, #12
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f7ff fc12 	bl	8007d90 <_ZSt4moveIRNSt12__shared_ptrIN4tama8PlayMenuELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800856c:	4602      	mov	r2, r0
 800856e:	f107 0314 	add.w	r3, r7, #20
 8008572:	4611      	mov	r1, r2
 8008574:	4618      	mov	r0, r3
 8008576:	f7ff fc16 	bl	8007da6 <_ZNSt12__shared_ptrIN4tama8PlayMenuELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 800857a:	f107 0214 	add.w	r2, r7, #20
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	68b9      	ldr	r1, [r7, #8]
 8008582:	4620      	mov	r0, r4
 8008584:	f000 fa32 	bl	80089ec <_ZNSt19_Sp_counted_deleterIPN4tama8PlayMenuENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>
 8008588:	f107 0314 	add.w	r3, r7, #20
 800858c:	4618      	mov	r0, r3
 800858e:	f7ff f925 	bl	80077dc <_ZNSt12__shared_ptrIN4tama8PlayMenuELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	4618      	mov	r0, r3
 8008596:	371c      	adds	r7, #28
 8008598:	46bd      	mov	sp, r7
 800859a:	bd90      	pop	{r4, r7, pc}
 800859c:	080236ac 	.word	0x080236ac

080085a0 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama8PlayMenuENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 80085a0:	b480      	push	{r7}
 80085a2:	b083      	sub	sp, #12
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2200      	movs	r2, #0
 80085ae:	605a      	str	r2, [r3, #4]
	return *this;
 80085b0:	687b      	ldr	r3, [r7, #4]
      }
 80085b2:	4618      	mov	r0, r3
 80085b4:	370c      	adds	r7, #12
 80085b6:	46bd      	mov	sp, r7
 80085b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085bc:	4770      	bx	lr

080085be <_ZNSt12__shared_ptrIN4tama8PlayMenuELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>:
          void operator()(typename _Alloc::value_type* __ptr)
 80085be:	b590      	push	{r4, r7, lr}
 80085c0:	b085      	sub	sp, #20
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	6078      	str	r0, [r7, #4]
 80085c6:	6039      	str	r1, [r7, #0]
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 80085c8:	6879      	ldr	r1, [r7, #4]
 80085ca:	f107 0308 	add.w	r3, r7, #8
 80085ce:	683a      	ldr	r2, [r7, #0]
 80085d0:	4618      	mov	r0, r3
 80085d2:	f7ff fef5 	bl	80083c0 <_ZNSt15__allocated_ptrISaIN4tama8PlayMenuEEEC1ERS2_PS1_>
	    allocator_traits<_Alloc>::destroy(_M_alloc, __guard.get());
 80085d6:	687c      	ldr	r4, [r7, #4]
 80085d8:	f107 0308 	add.w	r3, r7, #8
 80085dc:	4618      	mov	r0, r3
 80085de:	f7ff fba7 	bl	8007d30 <_ZNSt15__allocated_ptrISaIN4tama8PlayMenuEEE3getEv>
 80085e2:	4603      	mov	r3, r0
 80085e4:	4619      	mov	r1, r3
 80085e6:	4620      	mov	r0, r4
 80085e8:	f000 fa1e 	bl	8008a28 <_ZNSt16allocator_traitsISaIN4tama8PlayMenuEEE7destroyIS1_EEvRS2_PT_>
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 80085ec:	f107 0308 	add.w	r3, r7, #8
 80085f0:	4618      	mov	r0, r3
 80085f2:	f7ff fb88 	bl	8007d06 <_ZNSt15__allocated_ptrISaIN4tama8PlayMenuEEED1Ev>
          }
 80085f6:	bf00      	nop
 80085f8:	3714      	adds	r7, #20
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd90      	pop	{r4, r7, pc}

080085fe <_ZN9__gnu_cxx13new_allocatorIN4tama3EatEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80085fe:	b580      	push	{r7, lr}
 8008600:	b084      	sub	sp, #16
 8008602:	af00      	add	r7, sp, #0
 8008604:	60f8      	str	r0, [r7, #12]
 8008606:	60b9      	str	r1, [r7, #8]
 8008608:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800860a:	68f8      	ldr	r0, [r7, #12]
 800860c:	f000 fa1a 	bl	8008a44 <_ZNK9__gnu_cxx13new_allocatorIN4tama3EatEE8max_sizeEv>
 8008610:	4602      	mov	r2, r0
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	4293      	cmp	r3, r2
 8008616:	bf8c      	ite	hi
 8008618:	2301      	movhi	r3, #1
 800861a:	2300      	movls	r3, #0
 800861c:	b2db      	uxtb	r3, r3
 800861e:	2b00      	cmp	r3, #0
 8008620:	d001      	beq.n	8008626 <_ZN9__gnu_cxx13new_allocatorIN4tama3EatEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8008622:	f017 f97a 	bl	801f91a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	226c      	movs	r2, #108	; 0x6c
 800862a:	fb02 f303 	mul.w	r3, r2, r3
 800862e:	4618      	mov	r0, r3
 8008630:	f017 f945 	bl	801f8be <_Znwj>
 8008634:	4603      	mov	r3, r0
      }
 8008636:	4618      	mov	r0, r3
 8008638:	3710      	adds	r7, #16
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}

0800863e <_ZSt11__addressofISaIN4tama3EatEEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800863e:	b480      	push	{r7}
 8008640:	b083      	sub	sp, #12
 8008642:	af00      	add	r7, sp, #0
 8008644:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	4618      	mov	r0, r3
 800864a:	370c      	adds	r7, #12
 800864c:	46bd      	mov	sp, r7
 800864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008652:	4770      	bx	lr

08008654 <_ZN9__gnu_cxx13new_allocatorIN4tama3EatEE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 8008654:	b580      	push	{r7, lr}
 8008656:	b084      	sub	sp, #16
 8008658:	af00      	add	r7, sp, #0
 800865a:	60f8      	str	r0, [r7, #12]
 800865c:	60b9      	str	r1, [r7, #8]
 800865e:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8008660:	68b8      	ldr	r0, [r7, #8]
 8008662:	f017 f945 	bl	801f8f0 <_ZdlPv>
      }
 8008666:	bf00      	nop
 8008668:	3710      	adds	r7, #16
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}

0800866e <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama3EatENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800866e:	b480      	push	{r7}
 8008670:	b083      	sub	sp, #12
 8008672:	af00      	add	r7, sp, #0
 8008674:	6078      	str	r0, [r7, #4]
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	4618      	mov	r0, r3
 800867a:	370c      	adds	r7, #12
 800867c:	46bd      	mov	sp, r7
 800867e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008682:	4770      	bx	lr

08008684 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama3EatENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8008684:	b480      	push	{r7}
 8008686:	b083      	sub	sp, #12
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	4618      	mov	r0, r3
 8008690:	370c      	adds	r7, #12
 8008692:	46bd      	mov	sp, r7
 8008694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008698:	4770      	bx	lr

0800869a <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama3EatENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>:
      allocate(allocator_type& __a, size_type __n)
 800869a:	b580      	push	{r7, lr}
 800869c:	b082      	sub	sp, #8
 800869e:	af00      	add	r7, sp, #0
 80086a0:	6078      	str	r0, [r7, #4]
 80086a2:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80086a4:	2200      	movs	r2, #0
 80086a6:	6839      	ldr	r1, [r7, #0]
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f000 f9d9 	bl	8008a60 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama3EatENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>
 80086ae:	4603      	mov	r3, r0
 80086b0:	4618      	mov	r0, r3
 80086b2:	3708      	adds	r7, #8
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}

080086b8 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama3EatENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b084      	sub	sp, #16
 80086bc:	af00      	add	r7, sp, #0
 80086be:	60f8      	str	r0, [r7, #12]
 80086c0:	60b9      	str	r1, [r7, #8]
 80086c2:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 80086c4:	68b8      	ldr	r0, [r7, #8]
 80086c6:	f000 f9ec 	bl	8008aa2 <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama3EatENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>
 80086ca:	4602      	mov	r2, r0
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	601a      	str	r2, [r3, #0]
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	687a      	ldr	r2, [r7, #4]
 80086d4:	605a      	str	r2, [r3, #4]
      { }
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	4618      	mov	r0, r3
 80086da:	3710      	adds	r7, #16
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}

080086e0 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama3EatENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b084      	sub	sp, #16
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	60f8      	str	r0, [r7, #12]
 80086e8:	60b9      	str	r1, [r7, #8]
 80086ea:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80086ec:	687a      	ldr	r2, [r7, #4]
 80086ee:	68b9      	ldr	r1, [r7, #8]
 80086f0:	68f8      	ldr	r0, [r7, #12]
 80086f2:	f000 f9e1 	bl	8008ab8 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama3EatENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>
 80086f6:	bf00      	nop
 80086f8:	3710      	adds	r7, #16
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}

080086fe <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama3EatENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 80086fe:	b480      	push	{r7}
 8008700:	b083      	sub	sp, #12
 8008702:	af00      	add	r7, sp, #0
 8008704:	6078      	str	r0, [r7, #4]
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	4618      	mov	r0, r3
 800870a:	370c      	adds	r7, #12
 800870c:	46bd      	mov	sp, r7
 800870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008712:	4770      	bx	lr

08008714 <_ZNSt19_Sp_counted_deleterIPN4tama3EatENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 8008714:	b590      	push	{r4, r7, lr}
 8008716:	b085      	sub	sp, #20
 8008718:	af00      	add	r7, sp, #0
 800871a:	60f8      	str	r0, [r7, #12]
 800871c:	60b9      	str	r1, [r7, #8]
 800871e:	607a      	str	r2, [r7, #4]
 8008720:	603b      	str	r3, [r7, #0]
	: _M_ptr(__p), _Del_base(std::move(__d)), _Alloc_base(__a)
 8008722:	68fc      	ldr	r4, [r7, #12]
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f7ff f957 	bl	80079d8 <_ZSt4moveIRNSt12__shared_ptrIN4tama3EatELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800872a:	4603      	mov	r3, r0
 800872c:	4619      	mov	r1, r3
 800872e:	4620      	mov	r0, r4
 8008730:	f000 f9cf 	bl	8008ad2 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama3EatELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	3301      	adds	r3, #1
 8008738:	6839      	ldr	r1, [r7, #0]
 800873a:	4618      	mov	r0, r3
 800873c:	f000 f9dc 	bl	8008af8 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama3EatEELb1EEC1ERKS2_>
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	68ba      	ldr	r2, [r7, #8]
 8008744:	605a      	str	r2, [r3, #4]
	{ }
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	4618      	mov	r0, r3
 800874a:	3714      	adds	r7, #20
 800874c:	46bd      	mov	sp, r7
 800874e:	bd90      	pop	{r4, r7, pc}

08008750 <_ZNSt16allocator_traitsISaIN4tama3EatEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 8008750:	b580      	push	{r7, lr}
 8008752:	b082      	sub	sp, #8
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
 8008758:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 800875a:	6839      	ldr	r1, [r7, #0]
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f000 fa17 	bl	8008b90 <_ZN9__gnu_cxx13new_allocatorIN4tama3EatEE7destroyIS2_EEvPT_>
 8008762:	bf00      	nop
 8008764:	3708      	adds	r7, #8
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}

0800876a <_ZN9__gnu_cxx13new_allocatorIN4tama4WashEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800876a:	b580      	push	{r7, lr}
 800876c:	b084      	sub	sp, #16
 800876e:	af00      	add	r7, sp, #0
 8008770:	60f8      	str	r0, [r7, #12]
 8008772:	60b9      	str	r1, [r7, #8]
 8008774:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8008776:	68f8      	ldr	r0, [r7, #12]
 8008778:	f000 fa16 	bl	8008ba8 <_ZNK9__gnu_cxx13new_allocatorIN4tama4WashEE8max_sizeEv>
 800877c:	4602      	mov	r2, r0
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	4293      	cmp	r3, r2
 8008782:	bf8c      	ite	hi
 8008784:	2301      	movhi	r3, #1
 8008786:	2300      	movls	r3, #0
 8008788:	b2db      	uxtb	r3, r3
 800878a:	2b00      	cmp	r3, #0
 800878c:	d001      	beq.n	8008792 <_ZN9__gnu_cxx13new_allocatorIN4tama4WashEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800878e:	f017 f8c4 	bl	801f91a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	22dc      	movs	r2, #220	; 0xdc
 8008796:	fb02 f303 	mul.w	r3, r2, r3
 800879a:	4618      	mov	r0, r3
 800879c:	f017 f88f 	bl	801f8be <_Znwj>
 80087a0:	4603      	mov	r3, r0
      }
 80087a2:	4618      	mov	r0, r3
 80087a4:	3710      	adds	r7, #16
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}

080087aa <_ZSt11__addressofISaIN4tama4WashEEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80087aa:	b480      	push	{r7}
 80087ac:	b083      	sub	sp, #12
 80087ae:	af00      	add	r7, sp, #0
 80087b0:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	4618      	mov	r0, r3
 80087b6:	370c      	adds	r7, #12
 80087b8:	46bd      	mov	sp, r7
 80087ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087be:	4770      	bx	lr

080087c0 <_ZN9__gnu_cxx13new_allocatorIN4tama4WashEE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b084      	sub	sp, #16
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	60f8      	str	r0, [r7, #12]
 80087c8:	60b9      	str	r1, [r7, #8]
 80087ca:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 80087cc:	68b8      	ldr	r0, [r7, #8]
 80087ce:	f017 f88f 	bl	801f8f0 <_ZdlPv>
      }
 80087d2:	bf00      	nop
 80087d4:	3710      	adds	r7, #16
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}

080087da <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama4WashENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80087da:	b480      	push	{r7}
 80087dc:	b083      	sub	sp, #12
 80087de:	af00      	add	r7, sp, #0
 80087e0:	6078      	str	r0, [r7, #4]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	4618      	mov	r0, r3
 80087e6:	370c      	adds	r7, #12
 80087e8:	46bd      	mov	sp, r7
 80087ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ee:	4770      	bx	lr

080087f0 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama4WashENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80087f0:	b480      	push	{r7}
 80087f2:	b083      	sub	sp, #12
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	4618      	mov	r0, r3
 80087fc:	370c      	adds	r7, #12
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr

08008806 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama4WashENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>:
      allocate(allocator_type& __a, size_type __n)
 8008806:	b580      	push	{r7, lr}
 8008808:	b082      	sub	sp, #8
 800880a:	af00      	add	r7, sp, #0
 800880c:	6078      	str	r0, [r7, #4]
 800880e:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8008810:	2200      	movs	r2, #0
 8008812:	6839      	ldr	r1, [r7, #0]
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f000 f9d5 	bl	8008bc4 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama4WashENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>
 800881a:	4603      	mov	r3, r0
 800881c:	4618      	mov	r0, r3
 800881e:	3708      	adds	r7, #8
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}

08008824 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama4WashENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8008824:	b580      	push	{r7, lr}
 8008826:	b084      	sub	sp, #16
 8008828:	af00      	add	r7, sp, #0
 800882a:	60f8      	str	r0, [r7, #12]
 800882c:	60b9      	str	r1, [r7, #8]
 800882e:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8008830:	68b8      	ldr	r0, [r7, #8]
 8008832:	f000 f9e8 	bl	8008c06 <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama4WashENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>
 8008836:	4602      	mov	r2, r0
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	601a      	str	r2, [r3, #0]
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	687a      	ldr	r2, [r7, #4]
 8008840:	605a      	str	r2, [r3, #4]
      { }
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	4618      	mov	r0, r3
 8008846:	3710      	adds	r7, #16
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}

0800884c <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama4WashENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800884c:	b580      	push	{r7, lr}
 800884e:	b084      	sub	sp, #16
 8008850:	af00      	add	r7, sp, #0
 8008852:	60f8      	str	r0, [r7, #12]
 8008854:	60b9      	str	r1, [r7, #8]
 8008856:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8008858:	687a      	ldr	r2, [r7, #4]
 800885a:	68b9      	ldr	r1, [r7, #8]
 800885c:	68f8      	ldr	r0, [r7, #12]
 800885e:	f000 f9dd 	bl	8008c1c <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama4WashENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>
 8008862:	bf00      	nop
 8008864:	3710      	adds	r7, #16
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}

0800886a <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama4WashENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 800886a:	b480      	push	{r7}
 800886c:	b083      	sub	sp, #12
 800886e:	af00      	add	r7, sp, #0
 8008870:	6078      	str	r0, [r7, #4]
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	4618      	mov	r0, r3
 8008876:	370c      	adds	r7, #12
 8008878:	46bd      	mov	sp, r7
 800887a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887e:	4770      	bx	lr

08008880 <_ZNSt19_Sp_counted_deleterIPN4tama4WashENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 8008880:	b590      	push	{r4, r7, lr}
 8008882:	b085      	sub	sp, #20
 8008884:	af00      	add	r7, sp, #0
 8008886:	60f8      	str	r0, [r7, #12]
 8008888:	60b9      	str	r1, [r7, #8]
 800888a:	607a      	str	r2, [r7, #4]
 800888c:	603b      	str	r3, [r7, #0]
	: _M_ptr(__p), _Del_base(std::move(__d)), _Alloc_base(__a)
 800888e:	68fc      	ldr	r4, [r7, #12]
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f7ff f98f 	bl	8007bb4 <_ZSt4moveIRNSt12__shared_ptrIN4tama4WashELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8008896:	4603      	mov	r3, r0
 8008898:	4619      	mov	r1, r3
 800889a:	4620      	mov	r0, r4
 800889c:	f000 f9cb 	bl	8008c36 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama4WashELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	3301      	adds	r3, #1
 80088a4:	6839      	ldr	r1, [r7, #0]
 80088a6:	4618      	mov	r0, r3
 80088a8:	f000 f9d8 	bl	8008c5c <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama4WashEELb1EEC1ERKS2_>
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	68ba      	ldr	r2, [r7, #8]
 80088b0:	605a      	str	r2, [r3, #4]
	{ }
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	4618      	mov	r0, r3
 80088b6:	3714      	adds	r7, #20
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd90      	pop	{r4, r7, pc}

080088bc <_ZNSt16allocator_traitsISaIN4tama4WashEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 80088bc:	b580      	push	{r7, lr}
 80088be:	b082      	sub	sp, #8
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 80088c6:	6839      	ldr	r1, [r7, #0]
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f000 f9f9 	bl	8008cc0 <_ZN9__gnu_cxx13new_allocatorIN4tama4WashEE7destroyIS2_EEvPT_>
 80088ce:	bf00      	nop
 80088d0:	3708      	adds	r7, #8
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}

080088d6 <_ZN9__gnu_cxx13new_allocatorIN4tama8PlayMenuEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80088d6:	b580      	push	{r7, lr}
 80088d8:	b084      	sub	sp, #16
 80088da:	af00      	add	r7, sp, #0
 80088dc:	60f8      	str	r0, [r7, #12]
 80088de:	60b9      	str	r1, [r7, #8]
 80088e0:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 80088e2:	68f8      	ldr	r0, [r7, #12]
 80088e4:	f000 f9f8 	bl	8008cd8 <_ZNK9__gnu_cxx13new_allocatorIN4tama8PlayMenuEE8max_sizeEv>
 80088e8:	4602      	mov	r2, r0
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	4293      	cmp	r3, r2
 80088ee:	bf8c      	ite	hi
 80088f0:	2301      	movhi	r3, #1
 80088f2:	2300      	movls	r3, #0
 80088f4:	b2db      	uxtb	r3, r3
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d001      	beq.n	80088fe <_ZN9__gnu_cxx13new_allocatorIN4tama8PlayMenuEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80088fa:	f017 f80e 	bl	801f91a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	226c      	movs	r2, #108	; 0x6c
 8008902:	fb02 f303 	mul.w	r3, r2, r3
 8008906:	4618      	mov	r0, r3
 8008908:	f016 ffd9 	bl	801f8be <_Znwj>
 800890c:	4603      	mov	r3, r0
      }
 800890e:	4618      	mov	r0, r3
 8008910:	3710      	adds	r7, #16
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}

08008916 <_ZSt11__addressofISaIN4tama8PlayMenuEEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8008916:	b480      	push	{r7}
 8008918:	b083      	sub	sp, #12
 800891a:	af00      	add	r7, sp, #0
 800891c:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	4618      	mov	r0, r3
 8008922:	370c      	adds	r7, #12
 8008924:	46bd      	mov	sp, r7
 8008926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892a:	4770      	bx	lr

0800892c <_ZN9__gnu_cxx13new_allocatorIN4tama8PlayMenuEE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 800892c:	b580      	push	{r7, lr}
 800892e:	b084      	sub	sp, #16
 8008930:	af00      	add	r7, sp, #0
 8008932:	60f8      	str	r0, [r7, #12]
 8008934:	60b9      	str	r1, [r7, #8]
 8008936:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8008938:	68b8      	ldr	r0, [r7, #8]
 800893a:	f016 ffd9 	bl	801f8f0 <_ZdlPv>
      }
 800893e:	bf00      	nop
 8008940:	3710      	adds	r7, #16
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}

08008946 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama8PlayMenuENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8008946:	b480      	push	{r7}
 8008948:	b083      	sub	sp, #12
 800894a:	af00      	add	r7, sp, #0
 800894c:	6078      	str	r0, [r7, #4]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	4618      	mov	r0, r3
 8008952:	370c      	adds	r7, #12
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr

0800895c <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama8PlayMenuENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800895c:	b480      	push	{r7}
 800895e:	b083      	sub	sp, #12
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	4618      	mov	r0, r3
 8008968:	370c      	adds	r7, #12
 800896a:	46bd      	mov	sp, r7
 800896c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008970:	4770      	bx	lr

08008972 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama8PlayMenuENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>:
      allocate(allocator_type& __a, size_type __n)
 8008972:	b580      	push	{r7, lr}
 8008974:	b082      	sub	sp, #8
 8008976:	af00      	add	r7, sp, #0
 8008978:	6078      	str	r0, [r7, #4]
 800897a:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800897c:	2200      	movs	r2, #0
 800897e:	6839      	ldr	r1, [r7, #0]
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f000 f9b7 	bl	8008cf4 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama8PlayMenuENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>
 8008986:	4603      	mov	r3, r0
 8008988:	4618      	mov	r0, r3
 800898a:	3708      	adds	r7, #8
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}

08008990 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama8PlayMenuENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8008990:	b580      	push	{r7, lr}
 8008992:	b084      	sub	sp, #16
 8008994:	af00      	add	r7, sp, #0
 8008996:	60f8      	str	r0, [r7, #12]
 8008998:	60b9      	str	r1, [r7, #8]
 800899a:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800899c:	68b8      	ldr	r0, [r7, #8]
 800899e:	f000 f9ca 	bl	8008d36 <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama8PlayMenuENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>
 80089a2:	4602      	mov	r2, r0
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	601a      	str	r2, [r3, #0]
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	687a      	ldr	r2, [r7, #4]
 80089ac:	605a      	str	r2, [r3, #4]
      { }
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	4618      	mov	r0, r3
 80089b2:	3710      	adds	r7, #16
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}

080089b8 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama8PlayMenuENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b084      	sub	sp, #16
 80089bc:	af00      	add	r7, sp, #0
 80089be:	60f8      	str	r0, [r7, #12]
 80089c0:	60b9      	str	r1, [r7, #8]
 80089c2:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80089c4:	687a      	ldr	r2, [r7, #4]
 80089c6:	68b9      	ldr	r1, [r7, #8]
 80089c8:	68f8      	ldr	r0, [r7, #12]
 80089ca:	f000 f9bf 	bl	8008d4c <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama8PlayMenuENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>
 80089ce:	bf00      	nop
 80089d0:	3710      	adds	r7, #16
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}

080089d6 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama8PlayMenuENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 80089d6:	b480      	push	{r7}
 80089d8:	b083      	sub	sp, #12
 80089da:	af00      	add	r7, sp, #0
 80089dc:	6078      	str	r0, [r7, #4]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	4618      	mov	r0, r3
 80089e2:	370c      	adds	r7, #12
 80089e4:	46bd      	mov	sp, r7
 80089e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ea:	4770      	bx	lr

080089ec <_ZNSt19_Sp_counted_deleterIPN4tama8PlayMenuENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 80089ec:	b590      	push	{r4, r7, lr}
 80089ee:	b085      	sub	sp, #20
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	60f8      	str	r0, [r7, #12]
 80089f4:	60b9      	str	r1, [r7, #8]
 80089f6:	607a      	str	r2, [r7, #4]
 80089f8:	603b      	str	r3, [r7, #0]
	: _M_ptr(__p), _Del_base(std::move(__d)), _Alloc_base(__a)
 80089fa:	68fc      	ldr	r4, [r7, #12]
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f7ff f9c7 	bl	8007d90 <_ZSt4moveIRNSt12__shared_ptrIN4tama8PlayMenuELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8008a02:	4603      	mov	r3, r0
 8008a04:	4619      	mov	r1, r3
 8008a06:	4620      	mov	r0, r4
 8008a08:	f000 f9ad 	bl	8008d66 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama8PlayMenuELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	3301      	adds	r3, #1
 8008a10:	6839      	ldr	r1, [r7, #0]
 8008a12:	4618      	mov	r0, r3
 8008a14:	f000 f9ba 	bl	8008d8c <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama8PlayMenuEELb1EEC1ERKS2_>
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	68ba      	ldr	r2, [r7, #8]
 8008a1c:	605a      	str	r2, [r3, #4]
	{ }
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	4618      	mov	r0, r3
 8008a22:	3714      	adds	r7, #20
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd90      	pop	{r4, r7, pc}

08008a28 <_ZNSt16allocator_traitsISaIN4tama8PlayMenuEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b082      	sub	sp, #8
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
 8008a30:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 8008a32:	6839      	ldr	r1, [r7, #0]
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f000 f9cf 	bl	8008dd8 <_ZN9__gnu_cxx13new_allocatorIN4tama8PlayMenuEE7destroyIS2_EEvPT_>
 8008a3a:	bf00      	nop
 8008a3c:	3708      	adds	r7, #8
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}
	...

08008a44 <_ZNK9__gnu_cxx13new_allocatorIN4tama3EatEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8008a44:	b480      	push	{r7}
 8008a46:	b083      	sub	sp, #12
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8008a4c:	4b03      	ldr	r3, [pc, #12]	; (8008a5c <_ZNK9__gnu_cxx13new_allocatorIN4tama3EatEE8max_sizeEv+0x18>)
 8008a4e:	4618      	mov	r0, r3
 8008a50:	370c      	adds	r7, #12
 8008a52:	46bd      	mov	sp, r7
 8008a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a58:	4770      	bx	lr
 8008a5a:	bf00      	nop
 8008a5c:	025ed097 	.word	0x025ed097

08008a60 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama3EatENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b084      	sub	sp, #16
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	60f8      	str	r0, [r7, #12]
 8008a68:	60b9      	str	r1, [r7, #8]
 8008a6a:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8008a6c:	68f8      	ldr	r0, [r7, #12]
 8008a6e:	f000 f9bf 	bl	8008df0 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama3EatENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>
 8008a72:	4602      	mov	r2, r0
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	4293      	cmp	r3, r2
 8008a78:	bf8c      	ite	hi
 8008a7a:	2301      	movhi	r3, #1
 8008a7c:	2300      	movls	r3, #0
 8008a7e:	b2db      	uxtb	r3, r3
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d001      	beq.n	8008a88 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama3EatENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8008a84:	f016 ff49 	bl	801f91a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8008a88:	68ba      	ldr	r2, [r7, #8]
 8008a8a:	4613      	mov	r3, r2
 8008a8c:	009b      	lsls	r3, r3, #2
 8008a8e:	4413      	add	r3, r2
 8008a90:	009b      	lsls	r3, r3, #2
 8008a92:	4618      	mov	r0, r3
 8008a94:	f016 ff13 	bl	801f8be <_Znwj>
 8008a98:	4603      	mov	r3, r0
      }
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3710      	adds	r7, #16
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}

08008aa2 <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama3EatENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8008aa2:	b480      	push	{r7}
 8008aa4:	b083      	sub	sp, #12
 8008aa6:	af00      	add	r7, sp, #0
 8008aa8:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	4618      	mov	r0, r3
 8008aae:	370c      	adds	r7, #12
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab6:	4770      	bx	lr

08008ab8 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama3EatENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>:
      deallocate(pointer __p, size_type)
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b084      	sub	sp, #16
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	60f8      	str	r0, [r7, #12]
 8008ac0:	60b9      	str	r1, [r7, #8]
 8008ac2:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8008ac4:	68b8      	ldr	r0, [r7, #8]
 8008ac6:	f016 ff13 	bl	801f8f0 <_ZdlPv>
      }
 8008aca:	bf00      	nop
 8008acc:	3710      	adds	r7, #16
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}

08008ad2 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama3EatELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _M_tp(std::move(__tp)) { }
 8008ad2:	b590      	push	{r4, r7, lr}
 8008ad4:	b083      	sub	sp, #12
 8008ad6:	af00      	add	r7, sp, #0
 8008ad8:	6078      	str	r0, [r7, #4]
 8008ada:	6039      	str	r1, [r7, #0]
 8008adc:	687c      	ldr	r4, [r7, #4]
 8008ade:	6838      	ldr	r0, [r7, #0]
 8008ae0:	f7fe ff7a 	bl	80079d8 <_ZSt4moveIRNSt12__shared_ptrIN4tama3EatELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	4619      	mov	r1, r3
 8008ae8:	4620      	mov	r0, r4
 8008aea:	f7fe ff80 	bl	80079ee <_ZNSt12__shared_ptrIN4tama3EatELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	4618      	mov	r0, r3
 8008af2:	370c      	adds	r7, #12
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd90      	pop	{r4, r7, pc}

08008af8 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama3EatEELb1EEC1ERKS2_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b082      	sub	sp, #8
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
 8008b00:	6039      	str	r1, [r7, #0]
 8008b02:	6839      	ldr	r1, [r7, #0]
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f7fe ff01 	bl	800790c <_ZNSaIN4tama3EatEEC1ERKS1_>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3708      	adds	r7, #8
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}

08008b14 <_ZN4tama4MenuD1Ev>:
#include "../../../runtime/stage/Stage.h"
#include "../../../assets/menu-cursor.texture.h"

namespace tama
{
    class Menu
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b082      	sub	sp, #8
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	334c      	adds	r3, #76	; 0x4c
 8008b20:	4618      	mov	r0, r3
 8008b22:	f000 f9a9 	bl	8008e78 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	3340      	adds	r3, #64	; 0x40
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f000 f989 	bl	8008e42 <_ZNSt6vectorISt10shared_ptrIN4tama5StageEESaIS3_EED1Ev>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	3334      	adds	r3, #52	; 0x34
 8008b34:	4618      	mov	r0, r3
 8008b36:	f000 f969 	bl	8008e0c <_ZNSt6vectorIN4tama4TextESaIS1_EED1Ev>
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	3314      	adds	r3, #20
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f7fc feda 	bl	80058f8 <_ZN4tama6SpriteD1Ev>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	3308      	adds	r3, #8
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f7fc fb8b 	bl	8005264 <_ZNSt10shared_ptrIN4tama7ContextEED1Ev>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	4618      	mov	r0, r3
 8008b52:	f7fb f864 	bl	8003c1e <_ZNSt10shared_ptrIN4tama5SceneEED1Ev>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3708      	adds	r7, #8
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}

08008b60 <_ZN4tama3EatD1Ev>:
#include "../../../runtime/stage/Stage.h"
#include "../../../ui/common-components/menu/Menu.h"

namespace tama
{
    class Eat : public Stage
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b082      	sub	sp, #8
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
 8008b68:	4a08      	ldr	r2, [pc, #32]	; (8008b8c <_ZN4tama3EatD1Ev+0x2c>)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	601a      	str	r2, [r3, #0]
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	3314      	adds	r3, #20
 8008b72:	4618      	mov	r0, r3
 8008b74:	f7ff ffce 	bl	8008b14 <_ZN4tama4MenuD1Ev>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f7fc fb80 	bl	8005280 <_ZN4tama5StageD1Ev>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	4618      	mov	r0, r3
 8008b84:	3708      	adds	r7, #8
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}
 8008b8a:	bf00      	nop
 8008b8c:	08023730 	.word	0x08023730

08008b90 <_ZN9__gnu_cxx13new_allocatorIN4tama3EatEE7destroyIS2_EEvPT_>:
	destroy(_Up* __p) { __p->~_Up(); }
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b082      	sub	sp, #8
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
 8008b98:	6039      	str	r1, [r7, #0]
 8008b9a:	6838      	ldr	r0, [r7, #0]
 8008b9c:	f7ff ffe0 	bl	8008b60 <_ZN4tama3EatD1Ev>
 8008ba0:	bf00      	nop
 8008ba2:	3708      	adds	r7, #8
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}

08008ba8 <_ZNK9__gnu_cxx13new_allocatorIN4tama4WashEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8008ba8:	b480      	push	{r7}
 8008baa:	b083      	sub	sp, #12
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8008bb0:	4b03      	ldr	r3, [pc, #12]	; (8008bc0 <_ZNK9__gnu_cxx13new_allocatorIN4tama4WashEE8max_sizeEv+0x18>)
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	370c      	adds	r7, #12
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbc:	4770      	bx	lr
 8008bbe:	bf00      	nop
 8008bc0:	0129e412 	.word	0x0129e412

08008bc4 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama4WashENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b084      	sub	sp, #16
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	60f8      	str	r0, [r7, #12]
 8008bcc:	60b9      	str	r1, [r7, #8]
 8008bce:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8008bd0:	68f8      	ldr	r0, [r7, #12]
 8008bd2:	f000 f96d 	bl	8008eb0 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama4WashENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>
 8008bd6:	4602      	mov	r2, r0
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	bf8c      	ite	hi
 8008bde:	2301      	movhi	r3, #1
 8008be0:	2300      	movls	r3, #0
 8008be2:	b2db      	uxtb	r3, r3
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d001      	beq.n	8008bec <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama4WashENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8008be8:	f016 fe97 	bl	801f91a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8008bec:	68ba      	ldr	r2, [r7, #8]
 8008bee:	4613      	mov	r3, r2
 8008bf0:	009b      	lsls	r3, r3, #2
 8008bf2:	4413      	add	r3, r2
 8008bf4:	009b      	lsls	r3, r3, #2
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f016 fe61 	bl	801f8be <_Znwj>
 8008bfc:	4603      	mov	r3, r0
      }
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3710      	adds	r7, #16
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}

08008c06 <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama4WashENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8008c06:	b480      	push	{r7}
 8008c08:	b083      	sub	sp, #12
 8008c0a:	af00      	add	r7, sp, #0
 8008c0c:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	4618      	mov	r0, r3
 8008c12:	370c      	adds	r7, #12
 8008c14:	46bd      	mov	sp, r7
 8008c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1a:	4770      	bx	lr

08008c1c <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama4WashENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>:
      deallocate(pointer __p, size_type)
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b084      	sub	sp, #16
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	60f8      	str	r0, [r7, #12]
 8008c24:	60b9      	str	r1, [r7, #8]
 8008c26:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8008c28:	68b8      	ldr	r0, [r7, #8]
 8008c2a:	f016 fe61 	bl	801f8f0 <_ZdlPv>
      }
 8008c2e:	bf00      	nop
 8008c30:	3710      	adds	r7, #16
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}

08008c36 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama4WashELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _M_tp(std::move(__tp)) { }
 8008c36:	b590      	push	{r4, r7, lr}
 8008c38:	b083      	sub	sp, #12
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	6078      	str	r0, [r7, #4]
 8008c3e:	6039      	str	r1, [r7, #0]
 8008c40:	687c      	ldr	r4, [r7, #4]
 8008c42:	6838      	ldr	r0, [r7, #0]
 8008c44:	f7fe ffb6 	bl	8007bb4 <_ZSt4moveIRNSt12__shared_ptrIN4tama4WashELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	4619      	mov	r1, r3
 8008c4c:	4620      	mov	r0, r4
 8008c4e:	f7fe ffbc 	bl	8007bca <_ZNSt12__shared_ptrIN4tama4WashELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	4618      	mov	r0, r3
 8008c56:	370c      	adds	r7, #12
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd90      	pop	{r4, r7, pc}

08008c5c <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama4WashEELb1EEC1ERKS2_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b082      	sub	sp, #8
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
 8008c64:	6039      	str	r1, [r7, #0]
 8008c66:	6839      	ldr	r1, [r7, #0]
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f7fe ff3d 	bl	8007ae8 <_ZNSaIN4tama4WashEEC1ERKS1_>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	4618      	mov	r0, r3
 8008c72:	3708      	adds	r7, #8
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}

08008c78 <_ZN4tama4WashD1Ev>:
#include "../../../common/util/displayPlacementUtils.h"
#include "../../initial-loading/InitialLoading.h"

namespace tama
{
    class Wash : public Stage
 8008c78:	b590      	push	{r4, r7, lr}
 8008c7a:	b083      	sub	sp, #12
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
 8008c80:	4a0e      	ldr	r2, [pc, #56]	; (8008cbc <_ZN4tama4WashD1Ev+0x44>)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	601a      	str	r2, [r3, #0]
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	331c      	adds	r3, #28
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d00c      	beq.n	8008ca8 <_ZN4tama4WashD1Ev+0x30>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	331c      	adds	r3, #28
 8008c92:	f103 04c0 	add.w	r4, r3, #192	; 0xc0
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	331c      	adds	r3, #28
 8008c9a:	429c      	cmp	r4, r3
 8008c9c:	d004      	beq.n	8008ca8 <_ZN4tama4WashD1Ev+0x30>
 8008c9e:	3c20      	subs	r4, #32
 8008ca0:	4620      	mov	r0, r4
 8008ca2:	f7fc fe29 	bl	80058f8 <_ZN4tama6SpriteD1Ev>
 8008ca6:	e7f6      	b.n	8008c96 <_ZN4tama4WashD1Ev+0x1e>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	4618      	mov	r0, r3
 8008cac:	f7fc fae8 	bl	8005280 <_ZN4tama5StageD1Ev>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	370c      	adds	r7, #12
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd90      	pop	{r4, r7, pc}
 8008cba:	bf00      	nop
 8008cbc:	08023788 	.word	0x08023788

08008cc0 <_ZN9__gnu_cxx13new_allocatorIN4tama4WashEE7destroyIS2_EEvPT_>:
	destroy(_Up* __p) { __p->~_Up(); }
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b082      	sub	sp, #8
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
 8008cc8:	6039      	str	r1, [r7, #0]
 8008cca:	6838      	ldr	r0, [r7, #0]
 8008ccc:	f7ff ffd4 	bl	8008c78 <_ZN4tama4WashD1Ev>
 8008cd0:	bf00      	nop
 8008cd2:	3708      	adds	r7, #8
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}

08008cd8 <_ZNK9__gnu_cxx13new_allocatorIN4tama8PlayMenuEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8008cd8:	b480      	push	{r7}
 8008cda:	b083      	sub	sp, #12
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8008ce0:	4b03      	ldr	r3, [pc, #12]	; (8008cf0 <_ZNK9__gnu_cxx13new_allocatorIN4tama8PlayMenuEE8max_sizeEv+0x18>)
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	370c      	adds	r7, #12
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cec:	4770      	bx	lr
 8008cee:	bf00      	nop
 8008cf0:	025ed097 	.word	0x025ed097

08008cf4 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama8PlayMenuENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b084      	sub	sp, #16
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	60f8      	str	r0, [r7, #12]
 8008cfc:	60b9      	str	r1, [r7, #8]
 8008cfe:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8008d00:	68f8      	ldr	r0, [r7, #12]
 8008d02:	f000 f8e3 	bl	8008ecc <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama8PlayMenuENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>
 8008d06:	4602      	mov	r2, r0
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	bf8c      	ite	hi
 8008d0e:	2301      	movhi	r3, #1
 8008d10:	2300      	movls	r3, #0
 8008d12:	b2db      	uxtb	r3, r3
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d001      	beq.n	8008d1c <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama8PlayMenuENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8008d18:	f016 fdff 	bl	801f91a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8008d1c:	68ba      	ldr	r2, [r7, #8]
 8008d1e:	4613      	mov	r3, r2
 8008d20:	009b      	lsls	r3, r3, #2
 8008d22:	4413      	add	r3, r2
 8008d24:	009b      	lsls	r3, r3, #2
 8008d26:	4618      	mov	r0, r3
 8008d28:	f016 fdc9 	bl	801f8be <_Znwj>
 8008d2c:	4603      	mov	r3, r0
      }
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3710      	adds	r7, #16
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}

08008d36 <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama8PlayMenuENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8008d36:	b480      	push	{r7}
 8008d38:	b083      	sub	sp, #12
 8008d3a:	af00      	add	r7, sp, #0
 8008d3c:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	4618      	mov	r0, r3
 8008d42:	370c      	adds	r7, #12
 8008d44:	46bd      	mov	sp, r7
 8008d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4a:	4770      	bx	lr

08008d4c <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama8PlayMenuENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>:
      deallocate(pointer __p, size_type)
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b084      	sub	sp, #16
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	60f8      	str	r0, [r7, #12]
 8008d54:	60b9      	str	r1, [r7, #8]
 8008d56:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8008d58:	68b8      	ldr	r0, [r7, #8]
 8008d5a:	f016 fdc9 	bl	801f8f0 <_ZdlPv>
      }
 8008d5e:	bf00      	nop
 8008d60:	3710      	adds	r7, #16
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}

08008d66 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama8PlayMenuELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _M_tp(std::move(__tp)) { }
 8008d66:	b590      	push	{r4, r7, lr}
 8008d68:	b083      	sub	sp, #12
 8008d6a:	af00      	add	r7, sp, #0
 8008d6c:	6078      	str	r0, [r7, #4]
 8008d6e:	6039      	str	r1, [r7, #0]
 8008d70:	687c      	ldr	r4, [r7, #4]
 8008d72:	6838      	ldr	r0, [r7, #0]
 8008d74:	f7ff f80c 	bl	8007d90 <_ZSt4moveIRNSt12__shared_ptrIN4tama8PlayMenuELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	4619      	mov	r1, r3
 8008d7c:	4620      	mov	r0, r4
 8008d7e:	f7ff f812 	bl	8007da6 <_ZNSt12__shared_ptrIN4tama8PlayMenuELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	4618      	mov	r0, r3
 8008d86:	370c      	adds	r7, #12
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd90      	pop	{r4, r7, pc}

08008d8c <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama8PlayMenuEELb1EEC1ERKS2_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b082      	sub	sp, #8
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	6039      	str	r1, [r7, #0]
 8008d96:	6839      	ldr	r1, [r7, #0]
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f7fe ff93 	bl	8007cc4 <_ZNSaIN4tama8PlayMenuEEC1ERKS1_>
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	4618      	mov	r0, r3
 8008da2:	3708      	adds	r7, #8
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}

08008da8 <_ZN4tama8PlayMenuD1Ev>:
#include "../../../../ui/common-components/menu/Menu.h"
#include "../../../main/Home.h"

namespace tama
{
    class PlayMenu : public Stage
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b082      	sub	sp, #8
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	4a08      	ldr	r2, [pc, #32]	; (8008dd4 <_ZN4tama8PlayMenuD1Ev+0x2c>)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	601a      	str	r2, [r3, #0]
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	3314      	adds	r3, #20
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f7ff feaa 	bl	8008b14 <_ZN4tama4MenuD1Ev>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f7fc fa5c 	bl	8005280 <_ZN4tama5StageD1Ev>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3708      	adds	r7, #8
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}
 8008dd2:	bf00      	nop
 8008dd4:	08023774 	.word	0x08023774

08008dd8 <_ZN9__gnu_cxx13new_allocatorIN4tama8PlayMenuEE7destroyIS2_EEvPT_>:
	destroy(_Up* __p) { __p->~_Up(); }
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b082      	sub	sp, #8
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
 8008de0:	6039      	str	r1, [r7, #0]
 8008de2:	6838      	ldr	r0, [r7, #0]
 8008de4:	f7ff ffe0 	bl	8008da8 <_ZN4tama8PlayMenuD1Ev>
 8008de8:	bf00      	nop
 8008dea:	3708      	adds	r7, #8
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama3EatENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8008df0:	b480      	push	{r7}
 8008df2:	b083      	sub	sp, #12
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8008df8:	4b03      	ldr	r3, [pc, #12]	; (8008e08 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama3EatENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv+0x18>)
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	370c      	adds	r7, #12
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e04:	4770      	bx	lr
 8008e06:	bf00      	nop
 8008e08:	0ccccccc 	.word	0x0ccccccc

08008e0c <_ZNSt6vectorIN4tama4TextESaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8008e0c:	b5b0      	push	{r4, r5, r7, lr}
 8008e0e:	b082      	sub	sp, #8
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681c      	ldr	r4, [r3, #0]
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f000 f88e 	bl	8008f40 <_ZNSt12_Vector_baseIN4tama4TextESaIS1_EE19_M_get_Tp_allocatorEv>
 8008e24:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008e26:	461a      	mov	r2, r3
 8008e28:	4629      	mov	r1, r5
 8008e2a:	4620      	mov	r0, r4
 8008e2c:	f000 f893 	bl	8008f56 <_ZSt8_DestroyIPN4tama4TextES1_EvT_S3_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	4618      	mov	r0, r3
 8008e34:	f000 f864 	bl	8008f00 <_ZNSt12_Vector_baseIN4tama4TextESaIS1_EED1Ev>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3708      	adds	r7, #8
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bdb0      	pop	{r4, r5, r7, pc}

08008e42 <_ZNSt6vectorISt10shared_ptrIN4tama5StageEESaIS3_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8008e42:	b5b0      	push	{r4, r5, r7, lr}
 8008e44:	b082      	sub	sp, #8
 8008e46:	af00      	add	r7, sp, #0
 8008e48:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681c      	ldr	r4, [r3, #0]
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	4618      	mov	r0, r3
 8008e56:	f000 f8b2 	bl	8008fbe <_ZNSt12_Vector_baseISt10shared_ptrIN4tama5StageEESaIS3_EE19_M_get_Tp_allocatorEv>
 8008e5a:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008e5c:	461a      	mov	r2, r3
 8008e5e:	4629      	mov	r1, r5
 8008e60:	4620      	mov	r0, r4
 8008e62:	f000 f8b7 	bl	8008fd4 <_ZSt8_DestroyIPSt10shared_ptrIN4tama5StageEES3_EvT_S5_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f000 f88e 	bl	8008f8a <_ZNSt12_Vector_baseISt10shared_ptrIN4tama5StageEESaIS3_EED1Ev>
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	4618      	mov	r0, r3
 8008e72:	3708      	adds	r7, #8
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bdb0      	pop	{r4, r5, r7, pc}

08008e78 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8008e78:	b5b0      	push	{r4, r5, r7, lr}
 8008e7a:	b082      	sub	sp, #8
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681c      	ldr	r4, [r3, #0]
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f000 f8dc 	bl	8009048 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8008e90:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008e92:	461a      	mov	r2, r3
 8008e94:	4629      	mov	r1, r5
 8008e96:	4620      	mov	r0, r4
 8008e98:	f000 f8e1 	bl	800905e <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f000 f8b2 	bl	8009008 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3708      	adds	r7, #8
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008eb0 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama4WashENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8008eb0:	b480      	push	{r7}
 8008eb2:	b083      	sub	sp, #12
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8008eb8:	4b03      	ldr	r3, [pc, #12]	; (8008ec8 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama4WashENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv+0x18>)
 8008eba:	4618      	mov	r0, r3
 8008ebc:	370c      	adds	r7, #12
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec4:	4770      	bx	lr
 8008ec6:	bf00      	nop
 8008ec8:	0ccccccc 	.word	0x0ccccccc

08008ecc <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama8PlayMenuENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8008ecc:	b480      	push	{r7}
 8008ece:	b083      	sub	sp, #12
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8008ed4:	4b03      	ldr	r3, [pc, #12]	; (8008ee4 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama8PlayMenuENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv+0x18>)
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	370c      	adds	r7, #12
 8008eda:	46bd      	mov	sp, r7
 8008edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee0:	4770      	bx	lr
 8008ee2:	bf00      	nop
 8008ee4:	0ccccccc 	.word	0x0ccccccc

08008ee8 <_ZNSt12_Vector_baseIN4tama4TextESaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b082      	sub	sp, #8
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f000 f8c2 	bl	800907a <_ZNSaIN4tama4TextEED1Ev>
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	4618      	mov	r0, r3
 8008efa:	3708      	adds	r7, #8
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}

08008f00 <_ZNSt12_Vector_baseIN4tama4TextESaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b082      	sub	sp, #8
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6819      	ldr	r1, [r3, #0]
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 8008f10:	461a      	mov	r2, r3
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	1ad3      	subs	r3, r2, r3
 8008f18:	10db      	asrs	r3, r3, #3
 8008f1a:	4a08      	ldr	r2, [pc, #32]	; (8008f3c <_ZNSt12_Vector_baseIN4tama4TextESaIS1_EED1Ev+0x3c>)
 8008f1c:	fb02 f303 	mul.w	r3, r2, r3
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8008f20:	461a      	mov	r2, r3
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f000 f8b5 	bl	8009092 <_ZNSt12_Vector_baseIN4tama4TextESaIS1_EE13_M_deallocateEPS1_j>
		      - this->_M_impl._M_start); }
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f7ff ffdc 	bl	8008ee8 <_ZNSt12_Vector_baseIN4tama4TextESaIS1_EE12_Vector_implD1Ev>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	4618      	mov	r0, r3
 8008f34:	3708      	adds	r7, #8
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}
 8008f3a:	bf00      	nop
 8008f3c:	38e38e39 	.word	0x38e38e39

08008f40 <_ZNSt12_Vector_baseIN4tama4TextESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8008f40:	b480      	push	{r7}
 8008f42:	b083      	sub	sp, #12
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	370c      	adds	r7, #12
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f54:	4770      	bx	lr

08008f56 <_ZSt8_DestroyIPN4tama4TextES1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8008f56:	b580      	push	{r7, lr}
 8008f58:	b084      	sub	sp, #16
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	60f8      	str	r0, [r7, #12]
 8008f5e:	60b9      	str	r1, [r7, #8]
 8008f60:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8008f62:	68b9      	ldr	r1, [r7, #8]
 8008f64:	68f8      	ldr	r0, [r7, #12]
 8008f66:	f000 f8a7 	bl	80090b8 <_ZSt8_DestroyIPN4tama4TextEEvT_S3_>
    }
 8008f6a:	bf00      	nop
 8008f6c:	3710      	adds	r7, #16
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}

08008f72 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama5StageEESaIS3_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8008f72:	b580      	push	{r7, lr}
 8008f74:	b082      	sub	sp, #8
 8008f76:	af00      	add	r7, sp, #0
 8008f78:	6078      	str	r0, [r7, #4]
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f000 f8a9 	bl	80090d2 <_ZNSaISt10shared_ptrIN4tama5StageEEED1Ev>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	4618      	mov	r0, r3
 8008f84:	3708      	adds	r7, #8
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}

08008f8a <_ZNSt12_Vector_baseISt10shared_ptrIN4tama5StageEESaIS3_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8008f8a:	b580      	push	{r7, lr}
 8008f8c:	b082      	sub	sp, #8
 8008f8e:	af00      	add	r7, sp, #0
 8008f90:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6819      	ldr	r1, [r3, #0]
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 8008f9a:	461a      	mov	r2, r3
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	1ad3      	subs	r3, r2, r3
 8008fa2:	10db      	asrs	r3, r3, #3
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8008fa4:	461a      	mov	r2, r3
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f000 f89f 	bl	80090ea <_ZNSt12_Vector_baseISt10shared_ptrIN4tama5StageEESaIS3_EE13_M_deallocateEPS3_j>
		      - this->_M_impl._M_start); }
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f7ff ffdf 	bl	8008f72 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama5StageEESaIS3_EE12_Vector_implD1Ev>
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3708      	adds	r7, #8
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}

08008fbe <_ZNSt12_Vector_baseISt10shared_ptrIN4tama5StageEESaIS3_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8008fbe:	b480      	push	{r7}
 8008fc0:	b083      	sub	sp, #12
 8008fc2:	af00      	add	r7, sp, #0
 8008fc4:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	4618      	mov	r0, r3
 8008fca:	370c      	adds	r7, #12
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd2:	4770      	bx	lr

08008fd4 <_ZSt8_DestroyIPSt10shared_ptrIN4tama5StageEES3_EvT_S5_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b084      	sub	sp, #16
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	60f8      	str	r0, [r7, #12]
 8008fdc:	60b9      	str	r1, [r7, #8]
 8008fde:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8008fe0:	68b9      	ldr	r1, [r7, #8]
 8008fe2:	68f8      	ldr	r0, [r7, #12]
 8008fe4:	f000 f894 	bl	8009110 <_ZSt8_DestroyIPSt10shared_ptrIN4tama5StageEEEvT_S5_>
    }
 8008fe8:	bf00      	nop
 8008fea:	3710      	adds	r7, #16
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}

08008ff0 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b082      	sub	sp, #8
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f000 f896 	bl	800912a <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	4618      	mov	r0, r3
 8009002:	3708      	adds	r7, #8
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}

08009008 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8009008:	b580      	push	{r7, lr}
 800900a:	b082      	sub	sp, #8
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6819      	ldr	r1, [r3, #0]
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 8009018:	461a      	mov	r2, r3
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	1ad3      	subs	r3, r2, r3
 8009020:	10db      	asrs	r3, r3, #3
 8009022:	4a08      	ldr	r2, [pc, #32]	; (8009044 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x3c>)
 8009024:	fb02 f303 	mul.w	r3, r2, r3
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8009028:	461a      	mov	r2, r3
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f000 f889 	bl	8009142 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j>
		      - this->_M_impl._M_start); }
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	4618      	mov	r0, r3
 8009034:	f7ff ffdc 	bl	8008ff0 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implD1Ev>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	4618      	mov	r0, r3
 800903c:	3708      	adds	r7, #8
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}
 8009042:	bf00      	nop
 8009044:	aaaaaaab 	.word	0xaaaaaaab

08009048 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8009048:	b480      	push	{r7}
 800904a:	b083      	sub	sp, #12
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	4618      	mov	r0, r3
 8009054:	370c      	adds	r7, #12
 8009056:	46bd      	mov	sp, r7
 8009058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905c:	4770      	bx	lr

0800905e <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800905e:	b580      	push	{r7, lr}
 8009060:	b084      	sub	sp, #16
 8009062:	af00      	add	r7, sp, #0
 8009064:	60f8      	str	r0, [r7, #12]
 8009066:	60b9      	str	r1, [r7, #8]
 8009068:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800906a:	68b9      	ldr	r1, [r7, #8]
 800906c:	68f8      	ldr	r0, [r7, #12]
 800906e:	f000 f87b 	bl	8009168 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvT_S7_>
    }
 8009072:	bf00      	nop
 8009074:	3710      	adds	r7, #16
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}

0800907a <_ZNSaIN4tama4TextEED1Ev>:
 800907a:	b580      	push	{r7, lr}
 800907c:	b082      	sub	sp, #8
 800907e:	af00      	add	r7, sp, #0
 8009080:	6078      	str	r0, [r7, #4]
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f000 f87d 	bl	8009182 <_ZN9__gnu_cxx13new_allocatorIN4tama4TextEED1Ev>
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	4618      	mov	r0, r3
 800908c:	3708      	adds	r7, #8
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}

08009092 <_ZNSt12_Vector_baseIN4tama4TextESaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8009092:	b580      	push	{r7, lr}
 8009094:	b084      	sub	sp, #16
 8009096:	af00      	add	r7, sp, #0
 8009098:	60f8      	str	r0, [r7, #12]
 800909a:	60b9      	str	r1, [r7, #8]
 800909c:	607a      	str	r2, [r7, #4]
	if (__p)
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d005      	beq.n	80090b0 <_ZNSt12_Vector_baseIN4tama4TextESaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	687a      	ldr	r2, [r7, #4]
 80090a8:	68b9      	ldr	r1, [r7, #8]
 80090aa:	4618      	mov	r0, r3
 80090ac:	f000 f874 	bl	8009198 <_ZNSt16allocator_traitsISaIN4tama4TextEEE10deallocateERS2_PS1_j>
      }
 80090b0:	bf00      	nop
 80090b2:	3710      	adds	r7, #16
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd80      	pop	{r7, pc}

080090b8 <_ZSt8_DestroyIPN4tama4TextEEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b082      	sub	sp, #8
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
 80090c0:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 80090c2:	6839      	ldr	r1, [r7, #0]
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f000 f881 	bl	80091cc <_ZNSt12_Destroy_auxILb0EE9__destroyIPN4tama4TextEEEvT_S5_>
    }
 80090ca:	bf00      	nop
 80090cc:	3708      	adds	r7, #8
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}

080090d2 <_ZNSaISt10shared_ptrIN4tama5StageEEED1Ev>:
 80090d2:	b580      	push	{r7, lr}
 80090d4:	b082      	sub	sp, #8
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	6078      	str	r0, [r7, #4]
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f000 f88e 	bl	80091fc <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama5StageEEED1Ev>
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	4618      	mov	r0, r3
 80090e4:	3708      	adds	r7, #8
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}

080090ea <_ZNSt12_Vector_baseISt10shared_ptrIN4tama5StageEESaIS3_EE13_M_deallocateEPS3_j>:
      _M_deallocate(pointer __p, size_t __n)
 80090ea:	b580      	push	{r7, lr}
 80090ec:	b084      	sub	sp, #16
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	60f8      	str	r0, [r7, #12]
 80090f2:	60b9      	str	r1, [r7, #8]
 80090f4:	607a      	str	r2, [r7, #4]
	if (__p)
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d005      	beq.n	8009108 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama5StageEESaIS3_EE13_M_deallocateEPS3_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	687a      	ldr	r2, [r7, #4]
 8009100:	68b9      	ldr	r1, [r7, #8]
 8009102:	4618      	mov	r0, r3
 8009104:	f7fa fb58 	bl	80037b8 <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama5StageEEEE10deallocateERS4_PS3_j>
      }
 8009108:	bf00      	nop
 800910a:	3710      	adds	r7, #16
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}

08009110 <_ZSt8_DestroyIPSt10shared_ptrIN4tama5StageEEEvT_S5_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8009110:	b580      	push	{r7, lr}
 8009112:	b082      	sub	sp, #8
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 800911a:	6839      	ldr	r1, [r7, #0]
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f000 f883 	bl	8009228 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrIN4tama5StageEEEEvT_S7_>
    }
 8009122:	bf00      	nop
 8009124:	3708      	adds	r7, #8
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}

0800912a <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>:
 800912a:	b580      	push	{r7, lr}
 800912c:	b082      	sub	sp, #8
 800912e:	af00      	add	r7, sp, #0
 8009130:	6078      	str	r0, [r7, #4]
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f000 f890 	bl	8009258 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	4618      	mov	r0, r3
 800913c:	3708      	adds	r7, #8
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}

08009142 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j>:
      _M_deallocate(pointer __p, size_t __n)
 8009142:	b580      	push	{r7, lr}
 8009144:	b084      	sub	sp, #16
 8009146:	af00      	add	r7, sp, #0
 8009148:	60f8      	str	r0, [r7, #12]
 800914a:	60b9      	str	r1, [r7, #8]
 800914c:	607a      	str	r2, [r7, #4]
	if (__p)
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d005      	beq.n	8009160 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	687a      	ldr	r2, [r7, #4]
 8009158:	68b9      	ldr	r1, [r7, #8]
 800915a:	4618      	mov	r0, r3
 800915c:	f000 f887 	bl	800926e <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS6_PS5_j>
      }
 8009160:	bf00      	nop
 8009162:	3710      	adds	r7, #16
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}

08009168 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvT_S7_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8009168:	b580      	push	{r7, lr}
 800916a:	b082      	sub	sp, #8
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
 8009170:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8009172:	6839      	ldr	r1, [r7, #0]
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f000 f894 	bl	80092a2 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_>
    }
 800917a:	bf00      	nop
 800917c:	3708      	adds	r7, #8
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}

08009182 <_ZN9__gnu_cxx13new_allocatorIN4tama4TextEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8009182:	b480      	push	{r7}
 8009184:	b083      	sub	sp, #12
 8009186:	af00      	add	r7, sp, #0
 8009188:	6078      	str	r0, [r7, #4]
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	4618      	mov	r0, r3
 800918e:	370c      	adds	r7, #12
 8009190:	46bd      	mov	sp, r7
 8009192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009196:	4770      	bx	lr

08009198 <_ZNSt16allocator_traitsISaIN4tama4TextEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8009198:	b580      	push	{r7, lr}
 800919a:	b084      	sub	sp, #16
 800919c:	af00      	add	r7, sp, #0
 800919e:	60f8      	str	r0, [r7, #12]
 80091a0:	60b9      	str	r1, [r7, #8]
 80091a2:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80091a4:	687a      	ldr	r2, [r7, #4]
 80091a6:	68b9      	ldr	r1, [r7, #8]
 80091a8:	68f8      	ldr	r0, [r7, #12]
 80091aa:	f000 f892 	bl	80092d2 <_ZN9__gnu_cxx13new_allocatorIN4tama4TextEE10deallocateEPS2_j>
 80091ae:	bf00      	nop
 80091b0:	3710      	adds	r7, #16
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}

080091b6 <_ZSt11__addressofIN4tama4TextEEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80091b6:	b480      	push	{r7}
 80091b8:	b083      	sub	sp, #12
 80091ba:	af00      	add	r7, sp, #0
 80091bc:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	4618      	mov	r0, r3
 80091c2:	370c      	adds	r7, #12
 80091c4:	46bd      	mov	sp, r7
 80091c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ca:	4770      	bx	lr

080091cc <_ZNSt12_Destroy_auxILb0EE9__destroyIPN4tama4TextEEEvT_S5_>:
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b082      	sub	sp, #8
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
 80091d4:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 80091d6:	687a      	ldr	r2, [r7, #4]
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	429a      	cmp	r2, r3
 80091dc:	d00a      	beq.n	80091f4 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN4tama4TextEEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f7ff ffe9 	bl	80091b6 <_ZSt11__addressofIN4tama4TextEEPT_RS2_>
 80091e4:	4603      	mov	r3, r0
 80091e6:	4618      	mov	r0, r3
 80091e8:	f000 f880 	bl	80092ec <_ZSt8_DestroyIN4tama4TextEEvPT_>
	  for (; __first != __last; ++__first)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	3348      	adds	r3, #72	; 0x48
 80091f0:	607b      	str	r3, [r7, #4]
 80091f2:	e7f0      	b.n	80091d6 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN4tama4TextEEEvT_S5_+0xa>
	}
 80091f4:	bf00      	nop
 80091f6:	3708      	adds	r7, #8
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}

080091fc <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama5StageEEED1Ev>:
 80091fc:	b480      	push	{r7}
 80091fe:	b083      	sub	sp, #12
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	4618      	mov	r0, r3
 8009208:	370c      	adds	r7, #12
 800920a:	46bd      	mov	sp, r7
 800920c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009210:	4770      	bx	lr

08009212 <_ZSt11__addressofISt10shared_ptrIN4tama5StageEEEPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8009212:	b480      	push	{r7}
 8009214:	b083      	sub	sp, #12
 8009216:	af00      	add	r7, sp, #0
 8009218:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	4618      	mov	r0, r3
 800921e:	370c      	adds	r7, #12
 8009220:	46bd      	mov	sp, r7
 8009222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009226:	4770      	bx	lr

08009228 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrIN4tama5StageEEEEvT_S7_>:
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 8009228:	b580      	push	{r7, lr}
 800922a:	b082      	sub	sp, #8
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
 8009230:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8009232:	687a      	ldr	r2, [r7, #4]
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	429a      	cmp	r2, r3
 8009238:	d00a      	beq.n	8009250 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrIN4tama5StageEEEEvT_S7_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f7ff ffe9 	bl	8009212 <_ZSt11__addressofISt10shared_ptrIN4tama5StageEEEPT_RS4_>
 8009240:	4603      	mov	r3, r0
 8009242:	4618      	mov	r0, r3
 8009244:	f000 f85d 	bl	8009302 <_ZSt8_DestroyISt10shared_ptrIN4tama5StageEEEvPT_>
	  for (; __first != __last; ++__first)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	3308      	adds	r3, #8
 800924c:	607b      	str	r3, [r7, #4]
 800924e:	e7f0      	b.n	8009232 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrIN4tama5StageEEEEvT_S7_+0xa>
	}
 8009250:	bf00      	nop
 8009252:	3708      	adds	r7, #8
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}

08009258 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>:
 8009258:	b480      	push	{r7}
 800925a:	b083      	sub	sp, #12
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	4618      	mov	r0, r3
 8009264:	370c      	adds	r7, #12
 8009266:	46bd      	mov	sp, r7
 8009268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926c:	4770      	bx	lr

0800926e <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800926e:	b580      	push	{r7, lr}
 8009270:	b084      	sub	sp, #16
 8009272:	af00      	add	r7, sp, #0
 8009274:	60f8      	str	r0, [r7, #12]
 8009276:	60b9      	str	r1, [r7, #8]
 8009278:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800927a:	687a      	ldr	r2, [r7, #4]
 800927c:	68b9      	ldr	r1, [r7, #8]
 800927e:	68f8      	ldr	r0, [r7, #12]
 8009280:	f000 f84a 	bl	8009318 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS6_j>
 8009284:	bf00      	nop
 8009286:	3710      	adds	r7, #16
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}

0800928c <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800928c:	b480      	push	{r7}
 800928e:	b083      	sub	sp, #12
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	4618      	mov	r0, r3
 8009298:	370c      	adds	r7, #12
 800929a:	46bd      	mov	sp, r7
 800929c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a0:	4770      	bx	lr

080092a2 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_>:
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 80092a2:	b580      	push	{r7, lr}
 80092a4:	b082      	sub	sp, #8
 80092a6:	af00      	add	r7, sp, #0
 80092a8:	6078      	str	r0, [r7, #4]
 80092aa:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 80092ac:	687a      	ldr	r2, [r7, #4]
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	429a      	cmp	r2, r3
 80092b2:	d00a      	beq.n	80092ca <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f7ff ffe9 	bl	800928c <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 80092ba:	4603      	mov	r3, r0
 80092bc:	4618      	mov	r0, r3
 80092be:	f000 f838 	bl	8009332 <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>
	  for (; __first != __last; ++__first)
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	3318      	adds	r3, #24
 80092c6:	607b      	str	r3, [r7, #4]
 80092c8:	e7f0      	b.n	80092ac <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_+0xa>
	}
 80092ca:	bf00      	nop
 80092cc:	3708      	adds	r7, #8
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}

080092d2 <_ZN9__gnu_cxx13new_allocatorIN4tama4TextEE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 80092d2:	b580      	push	{r7, lr}
 80092d4:	b084      	sub	sp, #16
 80092d6:	af00      	add	r7, sp, #0
 80092d8:	60f8      	str	r0, [r7, #12]
 80092da:	60b9      	str	r1, [r7, #8]
 80092dc:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 80092de:	68b8      	ldr	r0, [r7, #8]
 80092e0:	f016 fb06 	bl	801f8f0 <_ZdlPv>
      }
 80092e4:	bf00      	nop
 80092e6:	3710      	adds	r7, #16
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}

080092ec <_ZSt8_DestroyIN4tama4TextEEvPT_>:
    _Destroy(_Tp* __pointer)
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b082      	sub	sp, #8
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f7fb ff85 	bl	8005204 <_ZN4tama4TextD1Ev>
 80092fa:	bf00      	nop
 80092fc:	3708      	adds	r7, #8
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}

08009302 <_ZSt8_DestroyISt10shared_ptrIN4tama5StageEEEvPT_>:
    _Destroy(_Tp* __pointer)
 8009302:	b580      	push	{r7, lr}
 8009304:	b082      	sub	sp, #8
 8009306:	af00      	add	r7, sp, #0
 8009308:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f7f9 fd57 	bl	8002dbe <_ZNSt10shared_ptrIN4tama5StageEED1Ev>
 8009310:	bf00      	nop
 8009312:	3708      	adds	r7, #8
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}

08009318 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS6_j>:
      deallocate(pointer __p, size_type)
 8009318:	b580      	push	{r7, lr}
 800931a:	b084      	sub	sp, #16
 800931c:	af00      	add	r7, sp, #0
 800931e:	60f8      	str	r0, [r7, #12]
 8009320:	60b9      	str	r1, [r7, #8]
 8009322:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8009324:	68b8      	ldr	r0, [r7, #8]
 8009326:	f016 fae3 	bl	801f8f0 <_ZdlPv>
      }
 800932a:	bf00      	nop
 800932c:	3710      	adds	r7, #16
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}

08009332 <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>:
    _Destroy(_Tp* __pointer)
 8009332:	b580      	push	{r7, lr}
 8009334:	b082      	sub	sp, #8
 8009336:	af00      	add	r7, sp, #0
 8009338:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 800933a:	6878      	ldr	r0, [r7, #4]
 800933c:	f016 fba3 	bl	801fa86 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009340:	bf00      	nop
 8009342:	3708      	adds	r7, #8
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}

08009348 <_ZNSt19_Sp_counted_deleterIPN4tama8PlayMenuENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 8009348:	b580      	push	{r7, lr}
 800934a:	b082      	sub	sp, #8
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
 8009350:	4a08      	ldr	r2, [pc, #32]	; (8009374 <_ZNSt19_Sp_counted_deleterIPN4tama8PlayMenuENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev+0x2c>)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	601a      	str	r2, [r3, #0]
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	330c      	adds	r3, #12
 800935a:	4618      	mov	r0, r3
 800935c:	f7ff f8e0 	bl	8008520 <_ZNSt19_Sp_counted_deleterIPN4tama8PlayMenuENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	4618      	mov	r0, r3
 8009364:	f7fa fd76 	bl	8003e54 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	4618      	mov	r0, r3
 800936c:	3708      	adds	r7, #8
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}
 8009372:	bf00      	nop
 8009374:	080236ac 	.word	0x080236ac

08009378 <_ZNSt19_Sp_counted_deleterIPN4tama8PlayMenuENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
 8009378:	b580      	push	{r7, lr}
 800937a:	b082      	sub	sp, #8
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f7ff ffe1 	bl	8009348 <_ZNSt19_Sp_counted_deleterIPN4tama8PlayMenuENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
 8009386:	2114      	movs	r1, #20
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f016 fa96 	bl	801f8ba <_ZdlPvj>
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	4618      	mov	r0, r3
 8009392:	3708      	adds	r7, #8
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}

08009398 <_ZNSt19_Sp_counted_deleterIPN4tama8PlayMenuENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8009398:	b580      	push	{r7, lr}
 800939a:	b082      	sub	sp, #8
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	330c      	adds	r3, #12
 80093a4:	4618      	mov	r0, r3
 80093a6:	f000 f924 	bl	80095f2 <_ZNSt19_Sp_counted_deleterIPN4tama8PlayMenuENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>
 80093aa:	4602      	mov	r2, r0
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	691b      	ldr	r3, [r3, #16]
 80093b0:	4619      	mov	r1, r3
 80093b2:	4610      	mov	r0, r2
 80093b4:	f7ff f903 	bl	80085be <_ZNSt12__shared_ptrIN4tama8PlayMenuELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>
 80093b8:	bf00      	nop
 80093ba:	3708      	adds	r7, #8
 80093bc:	46bd      	mov	sp, r7
 80093be:	bd80      	pop	{r7, pc}

080093c0 <_ZNSt19_Sp_counted_deleterIPN4tama8PlayMenuENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      _M_destroy() noexcept
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b086      	sub	sp, #24
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	330c      	adds	r3, #12
 80093cc:	4618      	mov	r0, r3
 80093ce:	f000 f91d 	bl	800960c <_ZNSt19_Sp_counted_deleterIPN4tama8PlayMenuENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>
 80093d2:	4602      	mov	r2, r0
 80093d4:	f107 0314 	add.w	r3, r7, #20
 80093d8:	4611      	mov	r1, r2
 80093da:	4618      	mov	r0, r3
 80093dc:	f7ff f838 	bl	8008450 <_ZNSaISt19_Sp_counted_deleterIPN4tama8PlayMenuENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 80093e0:	f107 0114 	add.w	r1, r7, #20
 80093e4:	f107 030c 	add.w	r3, r7, #12
 80093e8:	687a      	ldr	r2, [r7, #4]
 80093ea:	4618      	mov	r0, r3
 80093ec:	f7ff fad0 	bl	8008990 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama8PlayMenuENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
	this->~_Sp_counted_deleter();
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f7ff ffa9 	bl	8009348 <_ZNSt19_Sp_counted_deleterIPN4tama8PlayMenuENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 80093f6:	f107 030c 	add.w	r3, r7, #12
 80093fa:	4618      	mov	r0, r3
 80093fc:	f7ff f854 	bl	80084a8 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama8PlayMenuENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	__allocator_type __a(_M_impl._M_alloc());
 8009400:	f107 0314 	add.w	r3, r7, #20
 8009404:	4618      	mov	r0, r3
 8009406:	f7ff f830 	bl	800846a <_ZNSaISt19_Sp_counted_deleterIPN4tama8PlayMenuENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
      }
 800940a:	bf00      	nop
 800940c:	3718      	adds	r7, #24
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}

08009412 <_ZNSt19_Sp_counted_deleterIPN4tama8PlayMenuENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept
 8009412:	b480      	push	{r7}
 8009414:	b083      	sub	sp, #12
 8009416:	af00      	add	r7, sp, #0
 8009418:	6078      	str	r0, [r7, #4]
 800941a:	6039      	str	r1, [r7, #0]
        return nullptr;
 800941c:	2300      	movs	r3, #0
      }
 800941e:	4618      	mov	r0, r3
 8009420:	370c      	adds	r7, #12
 8009422:	46bd      	mov	sp, r7
 8009424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009428:	4770      	bx	lr
	...

0800942c <_ZNSt19_Sp_counted_deleterIPN4tama4WashENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 800942c:	b580      	push	{r7, lr}
 800942e:	b082      	sub	sp, #8
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
 8009434:	4a08      	ldr	r2, [pc, #32]	; (8009458 <_ZNSt19_Sp_counted_deleterIPN4tama4WashENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev+0x2c>)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	601a      	str	r2, [r3, #0]
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	330c      	adds	r3, #12
 800943e:	4618      	mov	r0, r3
 8009440:	f7fe ff34 	bl	80082ac <_ZNSt19_Sp_counted_deleterIPN4tama4WashENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	4618      	mov	r0, r3
 8009448:	f7fa fd04 	bl	8003e54 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	4618      	mov	r0, r3
 8009450:	3708      	adds	r7, #8
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}
 8009456:	bf00      	nop
 8009458:	080236c8 	.word	0x080236c8

0800945c <_ZNSt19_Sp_counted_deleterIPN4tama4WashENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
 800945c:	b580      	push	{r7, lr}
 800945e:	b082      	sub	sp, #8
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f7ff ffe1 	bl	800942c <_ZNSt19_Sp_counted_deleterIPN4tama4WashENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
 800946a:	2114      	movs	r1, #20
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f016 fa24 	bl	801f8ba <_ZdlPvj>
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	4618      	mov	r0, r3
 8009476:	3708      	adds	r7, #8
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}

0800947c <_ZNSt19_Sp_counted_deleterIPN4tama4WashENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      _M_dispose() noexcept
 800947c:	b580      	push	{r7, lr}
 800947e:	b082      	sub	sp, #8
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	330c      	adds	r3, #12
 8009488:	4618      	mov	r0, r3
 800948a:	f000 f8cd 	bl	8009628 <_ZNSt19_Sp_counted_deleterIPN4tama4WashENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>
 800948e:	4602      	mov	r2, r0
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	691b      	ldr	r3, [r3, #16]
 8009494:	4619      	mov	r1, r3
 8009496:	4610      	mov	r0, r2
 8009498:	f7fe ff57 	bl	800834a <_ZNSt12__shared_ptrIN4tama4WashELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>
 800949c:	bf00      	nop
 800949e:	3708      	adds	r7, #8
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}

080094a4 <_ZNSt19_Sp_counted_deleterIPN4tama4WashENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      _M_destroy() noexcept
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b086      	sub	sp, #24
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	330c      	adds	r3, #12
 80094b0:	4618      	mov	r0, r3
 80094b2:	f000 f8c6 	bl	8009642 <_ZNSt19_Sp_counted_deleterIPN4tama4WashENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>
 80094b6:	4602      	mov	r2, r0
 80094b8:	f107 0314 	add.w	r3, r7, #20
 80094bc:	4611      	mov	r1, r2
 80094be:	4618      	mov	r0, r3
 80094c0:	f7fe fe8c 	bl	80081dc <_ZNSaISt19_Sp_counted_deleterIPN4tama4WashENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 80094c4:	f107 0114 	add.w	r1, r7, #20
 80094c8:	f107 030c 	add.w	r3, r7, #12
 80094cc:	687a      	ldr	r2, [r7, #4]
 80094ce:	4618      	mov	r0, r3
 80094d0:	f7ff f9a8 	bl	8008824 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama4WashENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
	this->~_Sp_counted_deleter();
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f7ff ffa9 	bl	800942c <_ZNSt19_Sp_counted_deleterIPN4tama4WashENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 80094da:	f107 030c 	add.w	r3, r7, #12
 80094de:	4618      	mov	r0, r3
 80094e0:	f7fe fea8 	bl	8008234 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama4WashENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	__allocator_type __a(_M_impl._M_alloc());
 80094e4:	f107 0314 	add.w	r3, r7, #20
 80094e8:	4618      	mov	r0, r3
 80094ea:	f7fe fe84 	bl	80081f6 <_ZNSaISt19_Sp_counted_deleterIPN4tama4WashENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
      }
 80094ee:	bf00      	nop
 80094f0:	3718      	adds	r7, #24
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}

080094f6 <_ZNSt19_Sp_counted_deleterIPN4tama4WashENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept
 80094f6:	b480      	push	{r7}
 80094f8:	b083      	sub	sp, #12
 80094fa:	af00      	add	r7, sp, #0
 80094fc:	6078      	str	r0, [r7, #4]
 80094fe:	6039      	str	r1, [r7, #0]
        return nullptr;
 8009500:	2300      	movs	r3, #0
      }
 8009502:	4618      	mov	r0, r3
 8009504:	370c      	adds	r7, #12
 8009506:	46bd      	mov	sp, r7
 8009508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950c:	4770      	bx	lr
	...

08009510 <_ZNSt19_Sp_counted_deleterIPN4tama3EatENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 8009510:	b580      	push	{r7, lr}
 8009512:	b082      	sub	sp, #8
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
 8009518:	4a08      	ldr	r2, [pc, #32]	; (800953c <_ZNSt19_Sp_counted_deleterIPN4tama3EatENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev+0x2c>)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	601a      	str	r2, [r3, #0]
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	330c      	adds	r3, #12
 8009522:	4618      	mov	r0, r3
 8009524:	f7fe fd87 	bl	8008036 <_ZNSt19_Sp_counted_deleterIPN4tama3EatENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	4618      	mov	r0, r3
 800952c:	f7fa fc92 	bl	8003e54 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	4618      	mov	r0, r3
 8009534:	3708      	adds	r7, #8
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}
 800953a:	bf00      	nop
 800953c:	080236e4 	.word	0x080236e4

08009540 <_ZNSt19_Sp_counted_deleterIPN4tama3EatENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
 8009540:	b580      	push	{r7, lr}
 8009542:	b082      	sub	sp, #8
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f7ff ffe1 	bl	8009510 <_ZNSt19_Sp_counted_deleterIPN4tama3EatENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
 800954e:	2114      	movs	r1, #20
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f016 f9b2 	bl	801f8ba <_ZdlPvj>
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	4618      	mov	r0, r3
 800955a:	3708      	adds	r7, #8
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}

08009560 <_ZNSt19_Sp_counted_deleterIPN4tama3EatENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8009560:	b580      	push	{r7, lr}
 8009562:	b082      	sub	sp, #8
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	330c      	adds	r3, #12
 800956c:	4618      	mov	r0, r3
 800956e:	f000 f876 	bl	800965e <_ZNSt19_Sp_counted_deleterIPN4tama3EatENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>
 8009572:	4602      	mov	r2, r0
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	691b      	ldr	r3, [r3, #16]
 8009578:	4619      	mov	r1, r3
 800957a:	4610      	mov	r0, r2
 800957c:	f7fe fdab 	bl	80080d6 <_ZNSt12__shared_ptrIN4tama3EatELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>
 8009580:	bf00      	nop
 8009582:	3708      	adds	r7, #8
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}

08009588 <_ZNSt19_Sp_counted_deleterIPN4tama3EatENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8009588:	b580      	push	{r7, lr}
 800958a:	b086      	sub	sp, #24
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	330c      	adds	r3, #12
 8009594:	4618      	mov	r0, r3
 8009596:	f000 f86f 	bl	8009678 <_ZNSt19_Sp_counted_deleterIPN4tama3EatENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>
 800959a:	4602      	mov	r2, r0
 800959c:	f107 0314 	add.w	r3, r7, #20
 80095a0:	4611      	mov	r1, r2
 80095a2:	4618      	mov	r0, r3
 80095a4:	f7fe fcdf 	bl	8007f66 <_ZNSaISt19_Sp_counted_deleterIPN4tama3EatENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 80095a8:	f107 0114 	add.w	r1, r7, #20
 80095ac:	f107 030c 	add.w	r3, r7, #12
 80095b0:	687a      	ldr	r2, [r7, #4]
 80095b2:	4618      	mov	r0, r3
 80095b4:	f7ff f880 	bl	80086b8 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama3EatENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
	this->~_Sp_counted_deleter();
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f7ff ffa9 	bl	8009510 <_ZNSt19_Sp_counted_deleterIPN4tama3EatENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 80095be:	f107 030c 	add.w	r3, r7, #12
 80095c2:	4618      	mov	r0, r3
 80095c4:	f7fe fcfb 	bl	8007fbe <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama3EatENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	__allocator_type __a(_M_impl._M_alloc());
 80095c8:	f107 0314 	add.w	r3, r7, #20
 80095cc:	4618      	mov	r0, r3
 80095ce:	f7fe fcd7 	bl	8007f80 <_ZNSaISt19_Sp_counted_deleterIPN4tama3EatENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
      }
 80095d2:	bf00      	nop
 80095d4:	3718      	adds	r7, #24
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}

080095da <_ZNSt19_Sp_counted_deleterIPN4tama3EatENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept
 80095da:	b480      	push	{r7}
 80095dc:	b083      	sub	sp, #12
 80095de:	af00      	add	r7, sp, #0
 80095e0:	6078      	str	r0, [r7, #4]
 80095e2:	6039      	str	r1, [r7, #0]
        return nullptr;
 80095e4:	2300      	movs	r3, #0
      }
 80095e6:	4618      	mov	r0, r3
 80095e8:	370c      	adds	r7, #12
 80095ea:	46bd      	mov	sp, r7
 80095ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f0:	4770      	bx	lr

080095f2 <_ZNSt19_Sp_counted_deleterIPN4tama8PlayMenuENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 80095f2:	b580      	push	{r7, lr}
 80095f4:	b082      	sub	sp, #8
 80095f6:	af00      	add	r7, sp, #0
 80095f8:	6078      	str	r0, [r7, #4]
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	4618      	mov	r0, r3
 80095fe:	f000 f849 	bl	8009694 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama8PlayMenuELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>
 8009602:	4603      	mov	r3, r0
 8009604:	4618      	mov	r0, r3
 8009606:	3708      	adds	r7, #8
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}

0800960c <_ZNSt19_Sp_counted_deleterIPN4tama8PlayMenuENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 800960c:	b580      	push	{r7, lr}
 800960e:	b082      	sub	sp, #8
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	3301      	adds	r3, #1
 8009618:	4618      	mov	r0, r3
 800961a:	f000 f846 	bl	80096aa <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama8PlayMenuEELb1EE6_S_getERS3_>
 800961e:	4603      	mov	r3, r0
 8009620:	4618      	mov	r0, r3
 8009622:	3708      	adds	r7, #8
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}

08009628 <_ZNSt19_Sp_counted_deleterIPN4tama4WashENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 8009628:	b580      	push	{r7, lr}
 800962a:	b082      	sub	sp, #8
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	4618      	mov	r0, r3
 8009634:	f000 f844 	bl	80096c0 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama4WashELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>
 8009638:	4603      	mov	r3, r0
 800963a:	4618      	mov	r0, r3
 800963c:	3708      	adds	r7, #8
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}

08009642 <_ZNSt19_Sp_counted_deleterIPN4tama4WashENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 8009642:	b580      	push	{r7, lr}
 8009644:	b082      	sub	sp, #8
 8009646:	af00      	add	r7, sp, #0
 8009648:	6078      	str	r0, [r7, #4]
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	3301      	adds	r3, #1
 800964e:	4618      	mov	r0, r3
 8009650:	f000 f841 	bl	80096d6 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama4WashEELb1EE6_S_getERS3_>
 8009654:	4603      	mov	r3, r0
 8009656:	4618      	mov	r0, r3
 8009658:	3708      	adds	r7, #8
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}

0800965e <_ZNSt19_Sp_counted_deleterIPN4tama3EatENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 800965e:	b580      	push	{r7, lr}
 8009660:	b082      	sub	sp, #8
 8009662:	af00      	add	r7, sp, #0
 8009664:	6078      	str	r0, [r7, #4]
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	4618      	mov	r0, r3
 800966a:	f000 f83f 	bl	80096ec <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama3EatELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>
 800966e:	4603      	mov	r3, r0
 8009670:	4618      	mov	r0, r3
 8009672:	3708      	adds	r7, #8
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}

08009678 <_ZNSt19_Sp_counted_deleterIPN4tama3EatENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 8009678:	b580      	push	{r7, lr}
 800967a:	b082      	sub	sp, #8
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	3301      	adds	r3, #1
 8009684:	4618      	mov	r0, r3
 8009686:	f000 f83c 	bl	8009702 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama3EatEELb1EE6_S_getERS3_>
 800968a:	4603      	mov	r3, r0
 800968c:	4618      	mov	r0, r3
 800968e:	3708      	adds	r7, #8
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}

08009694 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama8PlayMenuELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>:
      _S_get(_Sp_ebo_helper& __eboh)
 8009694:	b480      	push	{r7}
 8009696:	b083      	sub	sp, #12
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
      { return __eboh._M_tp; }
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	4618      	mov	r0, r3
 80096a0:	370c      	adds	r7, #12
 80096a2:	46bd      	mov	sp, r7
 80096a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a8:	4770      	bx	lr

080096aa <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama8PlayMenuEELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 80096aa:	b480      	push	{r7}
 80096ac:	b083      	sub	sp, #12
 80096ae:	af00      	add	r7, sp, #0
 80096b0:	6078      	str	r0, [r7, #4]
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	4618      	mov	r0, r3
 80096b6:	370c      	adds	r7, #12
 80096b8:	46bd      	mov	sp, r7
 80096ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096be:	4770      	bx	lr

080096c0 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama4WashELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>:
      _S_get(_Sp_ebo_helper& __eboh)
 80096c0:	b480      	push	{r7}
 80096c2:	b083      	sub	sp, #12
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
      { return __eboh._M_tp; }
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	4618      	mov	r0, r3
 80096cc:	370c      	adds	r7, #12
 80096ce:	46bd      	mov	sp, r7
 80096d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d4:	4770      	bx	lr

080096d6 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama4WashEELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 80096d6:	b480      	push	{r7}
 80096d8:	b083      	sub	sp, #12
 80096da:	af00      	add	r7, sp, #0
 80096dc:	6078      	str	r0, [r7, #4]
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	4618      	mov	r0, r3
 80096e2:	370c      	adds	r7, #12
 80096e4:	46bd      	mov	sp, r7
 80096e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ea:	4770      	bx	lr

080096ec <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama3EatELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>:
      _S_get(_Sp_ebo_helper& __eboh)
 80096ec:	b480      	push	{r7}
 80096ee:	b083      	sub	sp, #12
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
      { return __eboh._M_tp; }
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	4618      	mov	r0, r3
 80096f8:	370c      	adds	r7, #12
 80096fa:	46bd      	mov	sp, r7
 80096fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009700:	4770      	bx	lr

08009702 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama3EatEELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 8009702:	b480      	push	{r7}
 8009704:	b083      	sub	sp, #12
 8009706:	af00      	add	r7, sp, #0
 8009708:	6078      	str	r0, [r7, #4]
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	4618      	mov	r0, r3
 800970e:	370c      	adds	r7, #12
 8009710:	46bd      	mov	sp, r7
 8009712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009716:	4770      	bx	lr

08009718 <_ZNSt12__shared_ptrIN4tama4HomeELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_ptr() = default;
 8009718:	b580      	push	{r7, lr}
 800971a:	b082      	sub	sp, #8
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	3304      	adds	r3, #4
 8009724:	4618      	mov	r0, r3
 8009726:	f7f9 fcf4 	bl	8003112 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	4618      	mov	r0, r3
 800972e:	3708      	adds	r7, #8
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}

08009734 <_ZNSt10shared_ptrIN4tama4HomeEED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 8009734:	b580      	push	{r7, lr}
 8009736:	b082      	sub	sp, #8
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	4618      	mov	r0, r3
 8009740:	f7ff ffea 	bl	8009718 <_ZNSt12__shared_ptrIN4tama4HomeELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	4618      	mov	r0, r3
 8009748:	3708      	adds	r7, #8
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}

0800974e <_ZN4tama3Eat7onInputENS_6ButtonE>:

#include "Eat.h"
#include "../../main/Home.h"

void tama::Eat::onInput(tama::Button button)
{
 800974e:	b590      	push	{r4, r7, lr}
 8009750:	b089      	sub	sp, #36	; 0x24
 8009752:	af00      	add	r7, sp, #0
 8009754:	6078      	str	r0, [r7, #4]
 8009756:	460b      	mov	r3, r1
 8009758:	70fb      	strb	r3, [r7, #3]
    if (button == Button::A)
 800975a:	78fb      	ldrb	r3, [r7, #3]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d104      	bne.n	800976a <_ZN4tama3Eat7onInputENS_6ButtonE+0x1c>
    {
        menu.moveToNextItem();
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	3314      	adds	r3, #20
 8009764:	4618      	mov	r0, r3
 8009766:	f003 fee3 	bl	800d530 <_ZN4tama4Menu14moveToNextItemEv>
    }
    if (button == Button::B)
 800976a:	78fb      	ldrb	r3, [r7, #3]
 800976c:	2b01      	cmp	r3, #1
 800976e:	d105      	bne.n	800977c <_ZN4tama3Eat7onInputENS_6ButtonE+0x2e>
    {
        int selectedItem = menu.getSelectedItem();
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	3314      	adds	r3, #20
 8009774:	4618      	mov	r0, r3
 8009776:	f003 fecf 	bl	800d518 <_ZN4tama4Menu15getSelectedItemEv>
 800977a:	61f8      	str	r0, [r7, #28]
    }
    if (button == Button::C)
 800977c:	78fb      	ldrb	r3, [r7, #3]
 800977e:	2b02      	cmp	r3, #2
 8009780:	d126      	bne.n	80097d0 <_ZN4tama3Eat7onInputENS_6ButtonE+0x82>
    {
        context->switchStage(std::make_shared<Home>(context));
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	330c      	adds	r3, #12
 8009786:	4618      	mov	r0, r3
 8009788:	f7fa fb20 	bl	8003dcc <_ZNKSt19__shared_ptr_accessIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800978c:	4604      	mov	r4, r0
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f103 020c 	add.w	r2, r3, #12
 8009794:	f107 0314 	add.w	r3, r7, #20
 8009798:	4611      	mov	r1, r2
 800979a:	4618      	mov	r0, r3
 800979c:	f000 f88c 	bl	80098b8 <_ZSt11make_sharedIN4tama4HomeEJRSt10shared_ptrINS0_7ContextEEEES2_IT_EDpOT0_>
 80097a0:	f107 0214 	add.w	r2, r7, #20
 80097a4:	f107 030c 	add.w	r3, r7, #12
 80097a8:	4611      	mov	r1, r2
 80097aa:	4618      	mov	r0, r3
 80097ac:	f000 f8ac 	bl	8009908 <_ZNSt10shared_ptrIN4tama5StageEEC1INS0_4HomeEvEEOS_IT_E>
 80097b0:	f107 030c 	add.w	r3, r7, #12
 80097b4:	4619      	mov	r1, r3
 80097b6:	4620      	mov	r0, r4
 80097b8:	f7f9 fa9f 	bl	8002cfa <_ZN4tama7Context11switchStageESt10shared_ptrINS_5StageEE>
 80097bc:	f107 030c 	add.w	r3, r7, #12
 80097c0:	4618      	mov	r0, r3
 80097c2:	f7f9 fafc 	bl	8002dbe <_ZNSt10shared_ptrIN4tama5StageEED1Ev>
 80097c6:	f107 0314 	add.w	r3, r7, #20
 80097ca:	4618      	mov	r0, r3
 80097cc:	f7ff ffb2 	bl	8009734 <_ZNSt10shared_ptrIN4tama4HomeEED1Ev>
    }
}
 80097d0:	bf00      	nop
 80097d2:	3724      	adds	r7, #36	; 0x24
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd90      	pop	{r4, r7, pc}

080097d8 <_ZN4tama3Eat6onInitEv>:

void tama::Eat::onInit()
{
 80097d8:	b480      	push	{r7}
 80097da:	b083      	sub	sp, #12
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]

}
 80097e0:	bf00      	nop
 80097e2:	370c      	adds	r7, #12
 80097e4:	46bd      	mov	sp, r7
 80097e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ea:	4770      	bx	lr

080097ec <_ZN4tama3Eat7onFrameEv>:

void tama::Eat::onFrame()
{
 80097ec:	b480      	push	{r7}
 80097ee:	b083      	sub	sp, #12
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]

}
 80097f4:	bf00      	nop
 80097f6:	370c      	adds	r7, #12
 80097f8:	46bd      	mov	sp, r7
 80097fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fe:	4770      	bx	lr

08009800 <_ZN4tama3EatC1ERKSt10shared_ptrINS_7ContextEE>:

tama::Eat::Eat(const std::shared_ptr<Context> &context) : Stage(context), menu(Menu(scene, context))
 8009800:	b590      	push	{r4, r7, lr}
 8009802:	b08b      	sub	sp, #44	; 0x2c
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
 8009808:	6039      	str	r1, [r7, #0]
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6839      	ldr	r1, [r7, #0]
 800980e:	4618      	mov	r0, r3
 8009810:	f7fa fa74 	bl	8003cfc <_ZN4tama5StageC1ERKSt10shared_ptrINS_7ContextEE>
 8009814:	4a25      	ldr	r2, [pc, #148]	; (80098ac <_ZN4tama3EatC1ERKSt10shared_ptrINS_7ContextEE+0xac>)
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	601a      	str	r2, [r3, #0]
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f103 0414 	add.w	r4, r3, #20
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	1d1a      	adds	r2, r3, #4
 8009824:	f107 0314 	add.w	r3, r7, #20
 8009828:	4611      	mov	r1, r2
 800982a:	4618      	mov	r0, r3
 800982c:	f7fa f9e7 	bl	8003bfe <_ZNSt10shared_ptrIN4tama5SceneEEC1ERKS2_>
 8009830:	f107 0314 	add.w	r3, r7, #20
 8009834:	683a      	ldr	r2, [r7, #0]
 8009836:	4619      	mov	r1, r3
 8009838:	4620      	mov	r0, r4
 800983a:	f003 fd80 	bl	800d33e <_ZN4tama4MenuC1ESt10shared_ptrINS_5SceneEERKS1_INS_7ContextEE>
 800983e:	f107 0314 	add.w	r3, r7, #20
 8009842:	4618      	mov	r0, r3
 8009844:	f7fa f9eb 	bl	8003c1e <_ZNSt10shared_ptrIN4tama5SceneEED1Ev>
{
    std::vector<std::string> options;
 8009848:	f107 0308 	add.w	r3, r7, #8
 800984c:	4618      	mov	r0, r3
 800984e:	f000 f86e 	bl	800992e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
    options.emplace_back("MEAL");
 8009852:	f107 0308 	add.w	r3, r7, #8
 8009856:	4916      	ldr	r1, [pc, #88]	; (80098b0 <_ZN4tama3EatC1ERKSt10shared_ptrINS_7ContextEE+0xb0>)
 8009858:	4618      	mov	r0, r3
 800985a:	f000 f880 	bl	800995e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJRA5_KcEEEvDpOT_>
    options.emplace_back("SNACK");
 800985e:	f107 0308 	add.w	r3, r7, #8
 8009862:	4914      	ldr	r1, [pc, #80]	; (80098b4 <_ZN4tama3EatC1ERKSt10shared_ptrINS_7ContextEE+0xb4>)
 8009864:	4618      	mov	r0, r3
 8009866:	f000 f8b4 	bl	80099d2 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJRA6_KcEEEvDpOT_>
    menu.setOptions(options);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	f103 0414 	add.w	r4, r3, #20
 8009870:	f107 0208 	add.w	r2, r7, #8
 8009874:	f107 031c 	add.w	r3, r7, #28
 8009878:	4611      	mov	r1, r2
 800987a:	4618      	mov	r0, r3
 800987c:	f000 f8d8 	bl	8009a30 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ERKS7_>
 8009880:	f107 031c 	add.w	r3, r7, #28
 8009884:	4619      	mov	r1, r3
 8009886:	4620      	mov	r0, r4
 8009888:	f003 fd47 	bl	800d31a <_ZN4tama4Menu10setOptionsESt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EE>
 800988c:	f107 031c 	add.w	r3, r7, #28
 8009890:	4618      	mov	r0, r3
 8009892:	f7ff faf1 	bl	8008e78 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
    std::vector<std::string> options;
 8009896:	f107 0308 	add.w	r3, r7, #8
 800989a:	4618      	mov	r0, r3
 800989c:	f7ff faec 	bl	8008e78 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
}
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	4618      	mov	r0, r3
 80098a4:	372c      	adds	r7, #44	; 0x2c
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd90      	pop	{r4, r7, pc}
 80098aa:	bf00      	nop
 80098ac:	08023730 	.word	0x08023730
 80098b0:	080209b0 	.word	0x080209b0
 80098b4:	080209b8 	.word	0x080209b8

080098b8 <_ZSt11make_sharedIN4tama4HomeEJRSt10shared_ptrINS0_7ContextEEEES2_IT_EDpOT0_>:
    make_shared(_Args&&... __args)
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b084      	sub	sp, #16
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
 80098c0:	6039      	str	r1, [r7, #0]
				       std::forward<_Args>(__args)...);
 80098c2:	f107 030c 	add.w	r3, r7, #12
 80098c6:	4618      	mov	r0, r3
 80098c8:	f000 f8ef 	bl	8009aaa <_ZNSaIN4tama4HomeEEC1Ev>
 80098cc:	6838      	ldr	r0, [r7, #0]
 80098ce:	f7fb fd5f 	bl	8005390 <_ZSt7forwardIRSt10shared_ptrIN4tama7ContextEEEOT_RNSt16remove_referenceIS5_E4typeE>
 80098d2:	4602      	mov	r2, r0
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f107 010c 	add.w	r1, r7, #12
 80098da:	4618      	mov	r0, r3
 80098dc:	f000 f8fd 	bl	8009ada <_ZSt15allocate_sharedIN4tama4HomeESaIS1_EJRSt10shared_ptrINS0_7ContextEEEES3_IT_ERKT0_DpOT1_>
 80098e0:	f107 030c 	add.w	r3, r7, #12
 80098e4:	4618      	mov	r0, r3
 80098e6:	f000 f8ec 	bl	8009ac2 <_ZNSaIN4tama4HomeEED1Ev>
    }
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	3710      	adds	r7, #16
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}

080098f2 <_ZSt4moveIRSt10shared_ptrIN4tama4HomeEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 80098f2:	b480      	push	{r7}
 80098f4:	b083      	sub	sp, #12
 80098f6:	af00      	add	r7, sp, #0
 80098f8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	4618      	mov	r0, r3
 80098fe:	370c      	adds	r7, #12
 8009900:	46bd      	mov	sp, r7
 8009902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009906:	4770      	bx	lr

08009908 <_ZNSt10shared_ptrIN4tama5StageEEC1INS0_4HomeEvEEOS_IT_E>:
	shared_ptr(shared_ptr<_Yp>&& __r) noexcept
 8009908:	b590      	push	{r4, r7, lr}
 800990a:	b083      	sub	sp, #12
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
 8009910:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 8009912:	687c      	ldr	r4, [r7, #4]
 8009914:	6838      	ldr	r0, [r7, #0]
 8009916:	f7ff ffec 	bl	80098f2 <_ZSt4moveIRSt10shared_ptrIN4tama4HomeEEEONSt16remove_referenceIT_E4typeEOS6_>
 800991a:	4603      	mov	r3, r0
 800991c:	4619      	mov	r1, r3
 800991e:	4620      	mov	r0, r4
 8009920:	f000 f8ee 	bl	8009b00 <_ZNSt12__shared_ptrIN4tama5StageELN9__gnu_cxx12_Lock_policyE0EEC1INS0_4HomeEvEEOS_IT_LS3_0EE>
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	4618      	mov	r0, r3
 8009928:	370c      	adds	r7, #12
 800992a:	46bd      	mov	sp, r7
 800992c:	bd90      	pop	{r4, r7, pc}

0800992e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>:
      vector()
 800992e:	b580      	push	{r7, lr}
 8009930:	b082      	sub	sp, #8
 8009932:	af00      	add	r7, sp, #0
 8009934:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	4618      	mov	r0, r3
 800993a:	f000 f8ff 	bl	8009b3c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	4618      	mov	r0, r3
 8009942:	3708      	adds	r7, #8
 8009944:	46bd      	mov	sp, r7
 8009946:	bd80      	pop	{r7, pc}

08009948 <_ZSt7forwardIRA5_KcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009948:	b480      	push	{r7}
 800994a:	b083      	sub	sp, #12
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	4618      	mov	r0, r3
 8009954:	370c      	adds	r7, #12
 8009956:	46bd      	mov	sp, r7
 8009958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995c:	4770      	bx	lr

0800995e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJRA5_KcEEEvDpOT_>:
      vector<_Tp, _Alloc>::
 800995e:	b5b0      	push	{r4, r5, r7, lr}
 8009960:	b082      	sub	sp, #8
 8009962:	af00      	add	r7, sp, #0
 8009964:	6078      	str	r0, [r7, #4]
 8009966:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	685a      	ldr	r2, [r3, #4]
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	689b      	ldr	r3, [r3, #8]
 8009970:	429a      	cmp	r2, r3
 8009972:	d012      	beq.n	800999a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJRA5_KcEEEvDpOT_+0x3c>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8009974:	687c      	ldr	r4, [r7, #4]
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	685d      	ldr	r5, [r3, #4]
 800997a:	6838      	ldr	r0, [r7, #0]
 800997c:	f7ff ffe4 	bl	8009948 <_ZSt7forwardIRA5_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 8009980:	4603      	mov	r3, r0
 8009982:	461a      	mov	r2, r3
 8009984:	4629      	mov	r1, r5
 8009986:	4620      	mov	r0, r4
 8009988:	f000 f8e5 	bl	8009b56 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRA5_KcEEEvRS6_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	685b      	ldr	r3, [r3, #4]
 8009990:	f103 0218 	add.w	r2, r3, #24
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	605a      	str	r2, [r3, #4]
      }
 8009998:	e00c      	b.n	80099b4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJRA5_KcEEEvDpOT_+0x56>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800999a:	6878      	ldr	r0, [r7, #4]
 800999c:	f000 f8ee 	bl	8009b7c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>
 80099a0:	4604      	mov	r4, r0
 80099a2:	6838      	ldr	r0, [r7, #0]
 80099a4:	f7ff ffd0 	bl	8009948 <_ZSt7forwardIRA5_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 80099a8:	4603      	mov	r3, r0
 80099aa:	461a      	mov	r2, r3
 80099ac:	4621      	mov	r1, r4
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f000 f8f6 	bl	8009ba0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRA5_KcEEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>
      }
 80099b4:	bf00      	nop
 80099b6:	3708      	adds	r7, #8
 80099b8:	46bd      	mov	sp, r7
 80099ba:	bdb0      	pop	{r4, r5, r7, pc}

080099bc <_ZSt7forwardIRA6_KcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80099bc:	b480      	push	{r7}
 80099be:	b083      	sub	sp, #12
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	4618      	mov	r0, r3
 80099c8:	370c      	adds	r7, #12
 80099ca:	46bd      	mov	sp, r7
 80099cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d0:	4770      	bx	lr

080099d2 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJRA6_KcEEEvDpOT_>:
      vector<_Tp, _Alloc>::
 80099d2:	b5b0      	push	{r4, r5, r7, lr}
 80099d4:	b082      	sub	sp, #8
 80099d6:	af00      	add	r7, sp, #0
 80099d8:	6078      	str	r0, [r7, #4]
 80099da:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	685a      	ldr	r2, [r3, #4]
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	689b      	ldr	r3, [r3, #8]
 80099e4:	429a      	cmp	r2, r3
 80099e6:	d012      	beq.n	8009a0e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJRA6_KcEEEvDpOT_+0x3c>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 80099e8:	687c      	ldr	r4, [r7, #4]
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	685d      	ldr	r5, [r3, #4]
 80099ee:	6838      	ldr	r0, [r7, #0]
 80099f0:	f7ff ffe4 	bl	80099bc <_ZSt7forwardIRA6_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 80099f4:	4603      	mov	r3, r0
 80099f6:	461a      	mov	r2, r3
 80099f8:	4629      	mov	r1, r5
 80099fa:	4620      	mov	r0, r4
 80099fc:	f000 f968 	bl	8009cd0 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRA6_KcEEEvRS6_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	685b      	ldr	r3, [r3, #4]
 8009a04:	f103 0218 	add.w	r2, r3, #24
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	605a      	str	r2, [r3, #4]
      }
 8009a0c:	e00c      	b.n	8009a28 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJRA6_KcEEEvDpOT_+0x56>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f000 f8b4 	bl	8009b7c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>
 8009a14:	4604      	mov	r4, r0
 8009a16:	6838      	ldr	r0, [r7, #0]
 8009a18:	f7ff ffd0 	bl	80099bc <_ZSt7forwardIRA6_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	461a      	mov	r2, r3
 8009a20:	4621      	mov	r1, r4
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f000 f968 	bl	8009cf8 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRA6_KcEEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>
      }
 8009a28:	bf00      	nop
 8009a2a:	3708      	adds	r7, #8
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bdb0      	pop	{r4, r5, r7, pc}

08009a30 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ERKS7_>:
      vector(const vector& __x)
 8009a30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a32:	b085      	sub	sp, #20
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
 8009a38:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 8009a3a:	687c      	ldr	r4, [r7, #4]
 8009a3c:	6838      	ldr	r0, [r7, #0]
 8009a3e:	f000 f9f3 	bl	8009e28 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 8009a42:	4605      	mov	r5, r0
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	4618      	mov	r0, r3
 8009a48:	f000 fa12 	bl	8009e70 <_ZNKSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8009a4c:	4602      	mov	r2, r0
 8009a4e:	f107 030c 	add.w	r3, r7, #12
 8009a52:	4611      	mov	r1, r2
 8009a54:	4618      	mov	r0, r3
 8009a56:	f000 f9fd 	bl	8009e54 <_ZN9__gnu_cxx14__alloc_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE17_S_select_on_copyERKS7_>
 8009a5a:	f107 030c 	add.w	r3, r7, #12
 8009a5e:	461a      	mov	r2, r3
 8009a60:	4629      	mov	r1, r5
 8009a62:	4620      	mov	r0, r4
 8009a64:	f000 fa0f 	bl	8009e86 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1EjRKS6_>
 8009a68:	f107 030c 	add.w	r3, r7, #12
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f7ff fb5c 	bl	800912a <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8009a72:	6838      	ldr	r0, [r7, #0]
 8009a74:	f000 fa1b 	bl	8009eae <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>
 8009a78:	4605      	mov	r5, r0
 8009a7a:	6838      	ldr	r0, [r7, #0]
 8009a7c:	f000 fa2b 	bl	8009ed6 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>
 8009a80:	4606      	mov	r6, r0
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	4618      	mov	r0, r3
 8009a8a:	f7ff fadd 	bl	8009048 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8009a8e:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8009a90:	4622      	mov	r2, r4
 8009a92:	4631      	mov	r1, r6
 8009a94:	4628      	mov	r0, r5
 8009a96:	f000 fa32 	bl	8009efe <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS7_SaIS7_EEEEPS7_S7_ET0_T_SG_SF_RSaIT1_E>
 8009a9a:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	605a      	str	r2, [r3, #4]
      }
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	3714      	adds	r7, #20
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009aaa <_ZNSaIN4tama4HomeEEC1Ev>:
      allocator() throw() { }
 8009aaa:	b580      	push	{r7, lr}
 8009aac:	b082      	sub	sp, #8
 8009aae:	af00      	add	r7, sp, #0
 8009ab0:	6078      	str	r0, [r7, #4]
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f000 fa34 	bl	8009f20 <_ZN9__gnu_cxx13new_allocatorIN4tama4HomeEEC1Ev>
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	4618      	mov	r0, r3
 8009abc:	3708      	adds	r7, #8
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bd80      	pop	{r7, pc}

08009ac2 <_ZNSaIN4tama4HomeEED1Ev>:
      ~allocator() throw() { }
 8009ac2:	b580      	push	{r7, lr}
 8009ac4:	b082      	sub	sp, #8
 8009ac6:	af00      	add	r7, sp, #0
 8009ac8:	6078      	str	r0, [r7, #4]
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f000 fa33 	bl	8009f36 <_ZN9__gnu_cxx13new_allocatorIN4tama4HomeEED1Ev>
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	3708      	adds	r7, #8
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}

08009ada <_ZSt15allocate_sharedIN4tama4HomeESaIS1_EJRSt10shared_ptrINS0_7ContextEEEES3_IT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 8009ada:	b590      	push	{r4, r7, lr}
 8009adc:	b087      	sub	sp, #28
 8009ade:	af00      	add	r7, sp, #0
 8009ae0:	60f8      	str	r0, [r7, #12]
 8009ae2:	60b9      	str	r1, [r7, #8]
 8009ae4:	607a      	str	r2, [r7, #4]
			     std::forward<_Args>(__args)...);
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f7fb fc52 	bl	8005390 <_ZSt7forwardIRSt10shared_ptrIN4tama7ContextEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8009aec:	4603      	mov	r3, r0
 8009aee:	68ba      	ldr	r2, [r7, #8]
 8009af0:	4621      	mov	r1, r4
 8009af2:	68f8      	ldr	r0, [r7, #12]
 8009af4:	f000 fa2a 	bl	8009f4c <_ZNSt10shared_ptrIN4tama4HomeEEC1ISaIS1_EJRS_INS0_7ContextEEEEESt19_Sp_make_shared_tagRKT_DpOT0_>
    }
 8009af8:	68f8      	ldr	r0, [r7, #12]
 8009afa:	371c      	adds	r7, #28
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd90      	pop	{r4, r7, pc}

08009b00 <_ZNSt12__shared_ptrIN4tama5StageELN9__gnu_cxx12_Lock_policyE0EEC1INS0_4HomeEvEEOS_IT_LS3_0EE>:
	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b082      	sub	sp, #8
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
 8009b08:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount()
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	681a      	ldr	r2, [r3, #0]
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	601a      	str	r2, [r3, #0]
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	3304      	adds	r3, #4
 8009b16:	4618      	mov	r0, r3
 8009b18:	f7fa fa29 	bl	8003f6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _M_refcount._M_swap(__r._M_refcount);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	1d1a      	adds	r2, r3, #4
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	3304      	adds	r3, #4
 8009b24:	4619      	mov	r1, r3
 8009b26:	4610      	mov	r0, r2
 8009b28:	f7fa fb2a 	bl	8004180 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  __r._M_ptr = 0;
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	2200      	movs	r2, #0
 8009b30:	601a      	str	r2, [r3, #0]
	}
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	4618      	mov	r0, r3
 8009b36:	3708      	adds	r7, #8
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}

08009b3c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>:
      _Vector_base()
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b082      	sub	sp, #8
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	4618      	mov	r0, r3
 8009b48:	f000 fa16 	bl	8009f78 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implC1Ev>
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	4618      	mov	r0, r3
 8009b50:	3708      	adds	r7, #8
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}

08009b56 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRA5_KcEEEvRS6_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8009b56:	b580      	push	{r7, lr}
 8009b58:	b084      	sub	sp, #16
 8009b5a:	af00      	add	r7, sp, #0
 8009b5c:	60f8      	str	r0, [r7, #12]
 8009b5e:	60b9      	str	r1, [r7, #8]
 8009b60:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f7ff fef0 	bl	8009948 <_ZSt7forwardIRA5_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	461a      	mov	r2, r3
 8009b6c:	68b9      	ldr	r1, [r7, #8]
 8009b6e:	68f8      	ldr	r0, [r7, #12]
 8009b70:	f000 fa17 	bl	8009fa2 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JRA5_KcEEEvPT_DpOT0_>
 8009b74:	bf00      	nop
 8009b76:	3710      	adds	r7, #16
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bd80      	pop	{r7, pc}

08009b7c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b084      	sub	sp, #16
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	1d1a      	adds	r2, r3, #4
 8009b88:	f107 030c 	add.w	r3, r7, #12
 8009b8c:	4611      	mov	r1, r2
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f000 fa2e 	bl	8009ff0 <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS7_>
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	4618      	mov	r0, r3
 8009b98:	3710      	adds	r7, #16
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	bd80      	pop	{r7, pc}
	...

08009ba0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRA5_KcEEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8009ba0:	b5b0      	push	{r4, r5, r7, lr}
 8009ba2:	b08a      	sub	sp, #40	; 0x28
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	60f8      	str	r0, [r7, #12]
 8009ba8:	60b9      	str	r1, [r7, #8]
 8009baa:	607a      	str	r2, [r7, #4]
      const size_type __len =
 8009bac:	4a46      	ldr	r2, [pc, #280]	; (8009cc8 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRA5_KcEEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x128>)
 8009bae:	2101      	movs	r1, #1
 8009bb0:	68f8      	ldr	r0, [r7, #12]
 8009bb2:	f000 fa2d 	bl	800a010 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc>
 8009bb6:	6278      	str	r0, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8009bb8:	68f8      	ldr	r0, [r7, #12]
 8009bba:	f000 fa71 	bl	800a0a0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	617b      	str	r3, [r7, #20]
 8009bc2:	f107 0214 	add.w	r2, r7, #20
 8009bc6:	f107 0308 	add.w	r3, r7, #8
 8009bca:	4611      	mov	r1, r2
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f000 fa77 	bl	800a0c0 <_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f000 fa8c 	bl	800a0f8 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj>
 8009be0:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8009be2:	69fb      	ldr	r3, [r7, #28]
 8009be4:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8009be6:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8009be8:	6a3a      	ldr	r2, [r7, #32]
 8009bea:	4613      	mov	r3, r2
 8009bec:	005b      	lsls	r3, r3, #1
 8009bee:	4413      	add	r3, r2
 8009bf0:	00db      	lsls	r3, r3, #3
 8009bf2:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 8009bf4:	69fb      	ldr	r3, [r7, #28]
 8009bf6:	189d      	adds	r5, r3, r2
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f7ff fea5 	bl	8009948 <_ZSt7forwardIRA5_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	461a      	mov	r2, r3
 8009c02:	4629      	mov	r1, r5
 8009c04:	4620      	mov	r0, r4
 8009c06:	f7ff ffa6 	bl	8009b56 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRA5_KcEEEvRS6_PT_DpOT0_>
	  __new_finish = pointer();
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	61bb      	str	r3, [r7, #24]
	    (this->_M_impl._M_start, __position.base(),
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681c      	ldr	r4, [r3, #0]
 8009c12:	f107 0308 	add.w	r3, r7, #8
 8009c16:	4618      	mov	r0, r3
 8009c18:	f000 fa82 	bl	800a120 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	681d      	ldr	r5, [r3, #0]
	     __new_start, _M_get_Tp_allocator());
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	4618      	mov	r0, r3
 8009c24:	f7ff fa10 	bl	8009048 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8009c28:	4603      	mov	r3, r0
	  __new_finish
 8009c2a:	69fa      	ldr	r2, [r7, #28]
 8009c2c:	4629      	mov	r1, r5
 8009c2e:	4620      	mov	r0, r4
 8009c30:	f000 fa81 	bl	800a136 <_ZSt34__uninitialized_move_if_noexcept_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>
 8009c34:	61b8      	str	r0, [r7, #24]
	  ++__new_finish;
 8009c36:	69bb      	ldr	r3, [r7, #24]
 8009c38:	3318      	adds	r3, #24
 8009c3a:	61bb      	str	r3, [r7, #24]
	    (__position.base(), this->_M_impl._M_finish,
 8009c3c:	f107 0308 	add.w	r3, r7, #8
 8009c40:	4618      	mov	r0, r3
 8009c42:	f000 fa6d 	bl	800a120 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8009c46:	4603      	mov	r3, r0
 8009c48:	681c      	ldr	r4, [r3, #0]
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	685d      	ldr	r5, [r3, #4]
	     __new_finish, _M_get_Tp_allocator());
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	4618      	mov	r0, r3
 8009c52:	f7ff f9f9 	bl	8009048 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8009c56:	4603      	mov	r3, r0
	  __new_finish
 8009c58:	69ba      	ldr	r2, [r7, #24]
 8009c5a:	4629      	mov	r1, r5
 8009c5c:	4620      	mov	r0, r4
 8009c5e:	f000 fa6a 	bl	800a136 <_ZSt34__uninitialized_move_if_noexcept_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>
 8009c62:	61b8      	str	r0, [r7, #24]
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	681c      	ldr	r4, [r3, #0]
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	685d      	ldr	r5, [r3, #4]
		    _M_get_Tp_allocator());
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f7ff f9ea 	bl	8009048 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8009c74:	4603      	mov	r3, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8009c76:	461a      	mov	r2, r3
 8009c78:	4629      	mov	r1, r5
 8009c7a:	4620      	mov	r0, r4
 8009c7c:	f7ff f9ef 	bl	800905e <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
      _M_deallocate(this->_M_impl._M_start,
 8009c80:	68f8      	ldr	r0, [r7, #12]
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	6819      	ldr	r1, [r3, #0]
		    this->_M_impl._M_end_of_storage
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	689b      	ldr	r3, [r3, #8]
		    - this->_M_impl._M_start);
 8009c8a:	461a      	mov	r2, r3
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	1ad3      	subs	r3, r2, r3
 8009c92:	10db      	asrs	r3, r3, #3
 8009c94:	4a0d      	ldr	r2, [pc, #52]	; (8009ccc <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRA5_KcEEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x12c>)
 8009c96:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(this->_M_impl._M_start,
 8009c9a:	461a      	mov	r2, r3
 8009c9c:	f7ff fa51 	bl	8009142 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j>
      this->_M_impl._M_start = __new_start;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	69fa      	ldr	r2, [r7, #28]
 8009ca4:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	69ba      	ldr	r2, [r7, #24]
 8009caa:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8009cac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cae:	4613      	mov	r3, r2
 8009cb0:	005b      	lsls	r3, r3, #1
 8009cb2:	4413      	add	r3, r2
 8009cb4:	00db      	lsls	r3, r3, #3
 8009cb6:	461a      	mov	r2, r3
 8009cb8:	69fb      	ldr	r3, [r7, #28]
 8009cba:	441a      	add	r2, r3
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	609a      	str	r2, [r3, #8]
    }
 8009cc0:	bf00      	nop
 8009cc2:	3728      	adds	r7, #40	; 0x28
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bdb0      	pop	{r4, r5, r7, pc}
 8009cc8:	080209c0 	.word	0x080209c0
 8009ccc:	aaaaaaab 	.word	0xaaaaaaab

08009cd0 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRA6_KcEEEvRS6_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b084      	sub	sp, #16
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	60f8      	str	r0, [r7, #12]
 8009cd8:	60b9      	str	r1, [r7, #8]
 8009cda:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f7ff fe6d 	bl	80099bc <_ZSt7forwardIRA6_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	461a      	mov	r2, r3
 8009ce6:	68b9      	ldr	r1, [r7, #8]
 8009ce8:	68f8      	ldr	r0, [r7, #12]
 8009cea:	f000 fa3d 	bl	800a168 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JRA6_KcEEEvPT_DpOT0_>
 8009cee:	bf00      	nop
 8009cf0:	3710      	adds	r7, #16
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}
	...

08009cf8 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRA6_KcEEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8009cf8:	b5b0      	push	{r4, r5, r7, lr}
 8009cfa:	b08a      	sub	sp, #40	; 0x28
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	60f8      	str	r0, [r7, #12]
 8009d00:	60b9      	str	r1, [r7, #8]
 8009d02:	607a      	str	r2, [r7, #4]
      const size_type __len =
 8009d04:	4a46      	ldr	r2, [pc, #280]	; (8009e20 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRA6_KcEEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x128>)
 8009d06:	2101      	movs	r1, #1
 8009d08:	68f8      	ldr	r0, [r7, #12]
 8009d0a:	f000 f981 	bl	800a010 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc>
 8009d0e:	6278      	str	r0, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8009d10:	68f8      	ldr	r0, [r7, #12]
 8009d12:	f000 f9c5 	bl	800a0a0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>
 8009d16:	4603      	mov	r3, r0
 8009d18:	617b      	str	r3, [r7, #20]
 8009d1a:	f107 0214 	add.w	r2, r7, #20
 8009d1e:	f107 0308 	add.w	r3, r7, #8
 8009d22:	4611      	mov	r1, r2
 8009d24:	4618      	mov	r0, r3
 8009d26:	f000 f9cb 	bl	800a0c0 <_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009d32:	4618      	mov	r0, r3
 8009d34:	f000 f9e0 	bl	800a0f8 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj>
 8009d38:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8009d3a:	69fb      	ldr	r3, [r7, #28]
 8009d3c:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8009d3e:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8009d40:	6a3a      	ldr	r2, [r7, #32]
 8009d42:	4613      	mov	r3, r2
 8009d44:	005b      	lsls	r3, r3, #1
 8009d46:	4413      	add	r3, r2
 8009d48:	00db      	lsls	r3, r3, #3
 8009d4a:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 8009d4c:	69fb      	ldr	r3, [r7, #28]
 8009d4e:	189d      	adds	r5, r3, r2
 8009d50:	6878      	ldr	r0, [r7, #4]
 8009d52:	f7ff fe33 	bl	80099bc <_ZSt7forwardIRA6_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 8009d56:	4603      	mov	r3, r0
 8009d58:	461a      	mov	r2, r3
 8009d5a:	4629      	mov	r1, r5
 8009d5c:	4620      	mov	r0, r4
 8009d5e:	f7ff ffb7 	bl	8009cd0 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRA6_KcEEEvRS6_PT_DpOT0_>
	  __new_finish = pointer();
 8009d62:	2300      	movs	r3, #0
 8009d64:	61bb      	str	r3, [r7, #24]
	    (this->_M_impl._M_start, __position.base(),
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	681c      	ldr	r4, [r3, #0]
 8009d6a:	f107 0308 	add.w	r3, r7, #8
 8009d6e:	4618      	mov	r0, r3
 8009d70:	f000 f9d6 	bl	800a120 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8009d74:	4603      	mov	r3, r0
 8009d76:	681d      	ldr	r5, [r3, #0]
	     __new_start, _M_get_Tp_allocator());
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	f7ff f964 	bl	8009048 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8009d80:	4603      	mov	r3, r0
	  __new_finish
 8009d82:	69fa      	ldr	r2, [r7, #28]
 8009d84:	4629      	mov	r1, r5
 8009d86:	4620      	mov	r0, r4
 8009d88:	f000 f9d5 	bl	800a136 <_ZSt34__uninitialized_move_if_noexcept_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>
 8009d8c:	61b8      	str	r0, [r7, #24]
	  ++__new_finish;
 8009d8e:	69bb      	ldr	r3, [r7, #24]
 8009d90:	3318      	adds	r3, #24
 8009d92:	61bb      	str	r3, [r7, #24]
	    (__position.base(), this->_M_impl._M_finish,
 8009d94:	f107 0308 	add.w	r3, r7, #8
 8009d98:	4618      	mov	r0, r3
 8009d9a:	f000 f9c1 	bl	800a120 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	681c      	ldr	r4, [r3, #0]
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	685d      	ldr	r5, [r3, #4]
	     __new_finish, _M_get_Tp_allocator());
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	4618      	mov	r0, r3
 8009daa:	f7ff f94d 	bl	8009048 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8009dae:	4603      	mov	r3, r0
	  __new_finish
 8009db0:	69ba      	ldr	r2, [r7, #24]
 8009db2:	4629      	mov	r1, r5
 8009db4:	4620      	mov	r0, r4
 8009db6:	f000 f9be 	bl	800a136 <_ZSt34__uninitialized_move_if_noexcept_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>
 8009dba:	61b8      	str	r0, [r7, #24]
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	681c      	ldr	r4, [r3, #0]
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	685d      	ldr	r5, [r3, #4]
		    _M_get_Tp_allocator());
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f7ff f93e 	bl	8009048 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8009dcc:	4603      	mov	r3, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8009dce:	461a      	mov	r2, r3
 8009dd0:	4629      	mov	r1, r5
 8009dd2:	4620      	mov	r0, r4
 8009dd4:	f7ff f943 	bl	800905e <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
      _M_deallocate(this->_M_impl._M_start,
 8009dd8:	68f8      	ldr	r0, [r7, #12]
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	6819      	ldr	r1, [r3, #0]
		    this->_M_impl._M_end_of_storage
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	689b      	ldr	r3, [r3, #8]
		    - this->_M_impl._M_start);
 8009de2:	461a      	mov	r2, r3
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	1ad3      	subs	r3, r2, r3
 8009dea:	10db      	asrs	r3, r3, #3
 8009dec:	4a0d      	ldr	r2, [pc, #52]	; (8009e24 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRA6_KcEEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x12c>)
 8009dee:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(this->_M_impl._M_start,
 8009df2:	461a      	mov	r2, r3
 8009df4:	f7ff f9a5 	bl	8009142 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j>
      this->_M_impl._M_start = __new_start;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	69fa      	ldr	r2, [r7, #28]
 8009dfc:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	69ba      	ldr	r2, [r7, #24]
 8009e02:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8009e04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e06:	4613      	mov	r3, r2
 8009e08:	005b      	lsls	r3, r3, #1
 8009e0a:	4413      	add	r3, r2
 8009e0c:	00db      	lsls	r3, r3, #3
 8009e0e:	461a      	mov	r2, r3
 8009e10:	69fb      	ldr	r3, [r7, #28]
 8009e12:	441a      	add	r2, r3
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	609a      	str	r2, [r3, #8]
    }
 8009e18:	bf00      	nop
 8009e1a:	3728      	adds	r7, #40	; 0x28
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bdb0      	pop	{r4, r5, r7, pc}
 8009e20:	080209c0 	.word	0x080209c0
 8009e24:	aaaaaaab 	.word	0xaaaaaaab

08009e28 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8009e28:	b480      	push	{r7}
 8009e2a:	b083      	sub	sp, #12
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	685b      	ldr	r3, [r3, #4]
 8009e34:	461a      	mov	r2, r3
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	1ad3      	subs	r3, r2, r3
 8009e3c:	10db      	asrs	r3, r3, #3
 8009e3e:	4a04      	ldr	r2, [pc, #16]	; (8009e50 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv+0x28>)
 8009e40:	fb02 f303 	mul.w	r3, r2, r3
 8009e44:	4618      	mov	r0, r3
 8009e46:	370c      	adds	r7, #12
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4e:	4770      	bx	lr
 8009e50:	aaaaaaab 	.word	0xaaaaaaab

08009e54 <_ZN9__gnu_cxx14__alloc_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE17_S_select_on_copyERKS7_>:
    template<typename _Ptr>
      static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type
      destroy(_Alloc& __a, _Ptr __p)
      { _Base_type::destroy(__a, std::addressof(*__p)); }

    static _Alloc _S_select_on_copy(const _Alloc& __a)
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b082      	sub	sp, #8
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
 8009e5c:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6839      	ldr	r1, [r7, #0]
 8009e62:	4618      	mov	r0, r3
 8009e64:	f000 f9a7 	bl	800a1b6 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE37select_on_container_copy_constructionERKS6_>
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	3708      	adds	r7, #8
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}

08009e70 <_ZNKSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8009e70:	b480      	push	{r7}
 8009e72:	b083      	sub	sp, #12
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	370c      	adds	r7, #12
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e84:	4770      	bx	lr

08009e86 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1EjRKS6_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 8009e86:	b580      	push	{r7, lr}
 8009e88:	b084      	sub	sp, #16
 8009e8a:	af00      	add	r7, sp, #0
 8009e8c:	60f8      	str	r0, [r7, #12]
 8009e8e:	60b9      	str	r1, [r7, #8]
 8009e90:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	6879      	ldr	r1, [r7, #4]
 8009e96:	4618      	mov	r0, r3
 8009e98:	f000 f9a8 	bl	800a1ec <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implC1ERKS6_>
      { _M_create_storage(__n); }
 8009e9c:	68b9      	ldr	r1, [r7, #8]
 8009e9e:	68f8      	ldr	r0, [r7, #12]
 8009ea0:	f000 f9bb 	bl	800a21a <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_create_storageEj>
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	3710      	adds	r7, #16
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}

08009eae <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8009eae:	b580      	push	{r7, lr}
 8009eb0:	b084      	sub	sp, #16
 8009eb2:	af00      	add	r7, sp, #0
 8009eb4:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	60fb      	str	r3, [r7, #12]
 8009ebc:	f107 020c 	add.w	r2, r7, #12
 8009ec0:	f107 0308 	add.w	r3, r7, #8
 8009ec4:	4611      	mov	r1, r2
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f000 f9c5 	bl	800a256 <_ZN9__gnu_cxx17__normal_iteratorIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS8_>
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	4618      	mov	r0, r3
 8009ed0:	3710      	adds	r7, #16
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}

08009ed6 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8009ed6:	b580      	push	{r7, lr}
 8009ed8:	b084      	sub	sp, #16
 8009eda:	af00      	add	r7, sp, #0
 8009edc:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	685b      	ldr	r3, [r3, #4]
 8009ee2:	60fb      	str	r3, [r7, #12]
 8009ee4:	f107 020c 	add.w	r2, r7, #12
 8009ee8:	f107 0308 	add.w	r3, r7, #8
 8009eec:	4611      	mov	r1, r2
 8009eee:	4618      	mov	r0, r3
 8009ef0:	f000 f9b1 	bl	800a256 <_ZN9__gnu_cxx17__normal_iteratorIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS8_>
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3710      	adds	r7, #16
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}

08009efe <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS7_SaIS7_EEEEPS7_S7_ET0_T_SG_SF_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8009efe:	b580      	push	{r7, lr}
 8009f00:	b084      	sub	sp, #16
 8009f02:	af00      	add	r7, sp, #0
 8009f04:	60f8      	str	r0, [r7, #12]
 8009f06:	60b9      	str	r1, [r7, #8]
 8009f08:	607a      	str	r2, [r7, #4]
 8009f0a:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8009f0c:	687a      	ldr	r2, [r7, #4]
 8009f0e:	68b9      	ldr	r1, [r7, #8]
 8009f10:	68f8      	ldr	r0, [r7, #12]
 8009f12:	f000 f9b0 	bl	800a276 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS7_SaIS7_EEEEPS7_ET0_T_SG_SF_>
 8009f16:	4603      	mov	r3, r0
 8009f18:	4618      	mov	r0, r3
 8009f1a:	3710      	adds	r7, #16
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}

08009f20 <_ZN9__gnu_cxx13new_allocatorIN4tama4HomeEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8009f20:	b480      	push	{r7}
 8009f22:	b083      	sub	sp, #12
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	370c      	adds	r7, #12
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f34:	4770      	bx	lr

08009f36 <_ZN9__gnu_cxx13new_allocatorIN4tama4HomeEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8009f36:	b480      	push	{r7}
 8009f38:	b083      	sub	sp, #12
 8009f3a:	af00      	add	r7, sp, #0
 8009f3c:	6078      	str	r0, [r7, #4]
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	4618      	mov	r0, r3
 8009f42:	370c      	adds	r7, #12
 8009f44:	46bd      	mov	sp, r7
 8009f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4a:	4770      	bx	lr

08009f4c <_ZNSt10shared_ptrIN4tama4HomeEEC1ISaIS1_EJRS_INS0_7ContextEEEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8009f4c:	b5b0      	push	{r4, r5, r7, lr}
 8009f4e:	b084      	sub	sp, #16
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	60f8      	str	r0, [r7, #12]
 8009f54:	7239      	strb	r1, [r7, #8]
 8009f56:	607a      	str	r2, [r7, #4]
 8009f58:	603b      	str	r3, [r7, #0]
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
 8009f5a:	68fc      	ldr	r4, [r7, #12]
 8009f5c:	6838      	ldr	r0, [r7, #0]
 8009f5e:	f7fb fa17 	bl	8005390 <_ZSt7forwardIRSt10shared_ptrIN4tama7ContextEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8009f62:	4603      	mov	r3, r0
 8009f64:	687a      	ldr	r2, [r7, #4]
 8009f66:	4629      	mov	r1, r5
 8009f68:	4620      	mov	r0, r4
 8009f6a:	f000 f9b3 	bl	800a2d4 <_ZNSt12__shared_ptrIN4tama4HomeELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJRSt10shared_ptrINS0_7ContextEEEEESt19_Sp_make_shared_tagRKT_DpOT0_>
	{ }
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	4618      	mov	r0, r3
 8009f72:	3710      	adds	r7, #16
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bdb0      	pop	{r4, r5, r7, pc}

08009f78 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implC1Ev>:
	_Vector_impl()
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b082      	sub	sp, #8
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 8009f80:	6878      	ldr	r0, [r7, #4]
 8009f82:	f000 fa22 	bl	800a3ca <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2200      	movs	r2, #0
 8009f8a:	601a      	str	r2, [r3, #0]
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2200      	movs	r2, #0
 8009f90:	605a      	str	r2, [r3, #4]
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2200      	movs	r2, #0
 8009f96:	609a      	str	r2, [r3, #8]
	{ }
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	3708      	adds	r7, #8
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}

08009fa2 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JRA5_KcEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8009fa2:	b5b0      	push	{r4, r5, r7, lr}
 8009fa4:	b086      	sub	sp, #24
 8009fa6:	af00      	add	r7, sp, #0
 8009fa8:	60f8      	str	r0, [r7, #12]
 8009faa:	60b9      	str	r1, [r7, #8]
 8009fac:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	f7ff fcca 	bl	8009948 <_ZSt7forwardIRA5_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 8009fb4:	4605      	mov	r5, r0
 8009fb6:	f107 0314 	add.w	r3, r7, #20
 8009fba:	4618      	mov	r0, r3
 8009fbc:	f015 fcab 	bl	801f916 <_ZNSaIcEC1Ev>
 8009fc0:	f107 0414 	add.w	r4, r7, #20
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	4619      	mov	r1, r3
 8009fc8:	2018      	movs	r0, #24
 8009fca:	f7f7 f838 	bl	800103e <_ZnwjPv>
 8009fce:	4603      	mov	r3, r0
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d004      	beq.n	8009fde <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JRA5_KcEEEvPT_DpOT0_+0x3c>
 8009fd4:	4622      	mov	r2, r4
 8009fd6:	4629      	mov	r1, r5
 8009fd8:	4618      	mov	r0, r3
 8009fda:	f015 fd9f 	bl	801fb1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009fde:	f107 0314 	add.w	r3, r7, #20
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	f015 fc98 	bl	801f918 <_ZNSaIcED1Ev>
 8009fe8:	bf00      	nop
 8009fea:	3718      	adds	r7, #24
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bdb0      	pop	{r4, r5, r7, pc}

08009ff0 <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS7_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8009ff0:	b480      	push	{r7}
 8009ff2:	b083      	sub	sp, #12
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
 8009ff8:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	681a      	ldr	r2, [r3, #0]
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	601a      	str	r2, [r3, #0]
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	4618      	mov	r0, r3
 800a006:	370c      	adds	r7, #12
 800a008:	46bd      	mov	sp, r7
 800a00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00e:	4770      	bx	lr

0800a010 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800a010:	b590      	push	{r4, r7, lr}
 800a012:	b087      	sub	sp, #28
 800a014:	af00      	add	r7, sp, #0
 800a016:	60f8      	str	r0, [r7, #12]
 800a018:	60b9      	str	r1, [r7, #8]
 800a01a:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800a01c:	68f8      	ldr	r0, [r7, #12]
 800a01e:	f000 f9e0 	bl	800a3e2 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 800a022:	4604      	mov	r4, r0
 800a024:	68f8      	ldr	r0, [r7, #12]
 800a026:	f7ff feff 	bl	8009e28 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 800a02a:	4603      	mov	r3, r0
 800a02c:	1ae2      	subs	r2, r4, r3
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	429a      	cmp	r2, r3
 800a032:	bf34      	ite	cc
 800a034:	2301      	movcc	r3, #1
 800a036:	2300      	movcs	r3, #0
 800a038:	b2db      	uxtb	r3, r3
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d003      	beq.n	800a046 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	4618      	mov	r0, r3
 800a042:	f015 fc70 	bl	801f926 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + std::max(size(), __n);
 800a046:	68f8      	ldr	r0, [r7, #12]
 800a048:	f7ff feee 	bl	8009e28 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 800a04c:	4604      	mov	r4, r0
 800a04e:	68f8      	ldr	r0, [r7, #12]
 800a050:	f7ff feea 	bl	8009e28 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 800a054:	4603      	mov	r3, r0
 800a056:	613b      	str	r3, [r7, #16]
 800a058:	f107 0208 	add.w	r2, r7, #8
 800a05c:	f107 0310 	add.w	r3, r7, #16
 800a060:	4611      	mov	r1, r2
 800a062:	4618      	mov	r0, r3
 800a064:	f7f8 fc1d 	bl	80028a2 <_ZSt3maxIjERKT_S2_S2_>
 800a068:	4603      	mov	r3, r0
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	4423      	add	r3, r4
 800a06e:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800a070:	68f8      	ldr	r0, [r7, #12]
 800a072:	f7ff fed9 	bl	8009e28 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 800a076:	4602      	mov	r2, r0
 800a078:	697b      	ldr	r3, [r7, #20]
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d306      	bcc.n	800a08c <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x7c>
 800a07e:	68f8      	ldr	r0, [r7, #12]
 800a080:	f000 f9af 	bl	800a3e2 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 800a084:	4602      	mov	r2, r0
 800a086:	697b      	ldr	r3, [r7, #20]
 800a088:	4293      	cmp	r3, r2
 800a08a:	d904      	bls.n	800a096 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x86>
 800a08c:	68f8      	ldr	r0, [r7, #12]
 800a08e:	f000 f9a8 	bl	800a3e2 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 800a092:	4603      	mov	r3, r0
 800a094:	e000      	b.n	800a098 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x88>
 800a096:	697b      	ldr	r3, [r7, #20]
      }
 800a098:	4618      	mov	r0, r3
 800a09a:	371c      	adds	r7, #28
 800a09c:	46bd      	mov	sp, r7
 800a09e:	bd90      	pop	{r4, r7, pc}

0800a0a0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b084      	sub	sp, #16
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800a0a8:	687a      	ldr	r2, [r7, #4]
 800a0aa:	f107 030c 	add.w	r3, r7, #12
 800a0ae:	4611      	mov	r1, r2
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	f7ff ff9d 	bl	8009ff0 <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS7_>
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	3710      	adds	r7, #16
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}

0800a0c0 <_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800a0c0:	b590      	push	{r4, r7, lr}
 800a0c2:	b083      	sub	sp, #12
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
 800a0c8:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f000 f828 	bl	800a120 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	461c      	mov	r4, r3
 800a0d6:	6838      	ldr	r0, [r7, #0]
 800a0d8:	f000 f822 	bl	800a120 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	1ae3      	subs	r3, r4, r3
 800a0e2:	10db      	asrs	r3, r3, #3
 800a0e4:	4a03      	ldr	r2, [pc, #12]	; (800a0f4 <_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_+0x34>)
 800a0e6:	fb02 f303 	mul.w	r3, r2, r3
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	370c      	adds	r7, #12
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd90      	pop	{r4, r7, pc}
 800a0f2:	bf00      	nop
 800a0f4:	aaaaaaab 	.word	0xaaaaaaab

0800a0f8 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b082      	sub	sp, #8
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
 800a100:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d006      	beq.n	800a116 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj+0x1e>
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	6839      	ldr	r1, [r7, #0]
 800a10c:	4618      	mov	r0, r3
 800a10e:	f000 f979 	bl	800a404 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_j>
 800a112:	4603      	mov	r3, r0
 800a114:	e000      	b.n	800a118 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj+0x20>
 800a116:	2300      	movs	r3, #0
      }
 800a118:	4618      	mov	r0, r3
 800a11a:	3708      	adds	r7, #8
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd80      	pop	{r7, pc}

0800a120 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800a120:	b480      	push	{r7}
 800a122:	b083      	sub	sp, #12
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	4618      	mov	r0, r3
 800a12c:	370c      	adds	r7, #12
 800a12e:	46bd      	mov	sp, r7
 800a130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a134:	4770      	bx	lr

0800a136 <_ZSt34__uninitialized_move_if_noexcept_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800a136:	b590      	push	{r4, r7, lr}
 800a138:	b085      	sub	sp, #20
 800a13a:	af00      	add	r7, sp, #0
 800a13c:	60f8      	str	r0, [r7, #12]
 800a13e:	60b9      	str	r1, [r7, #8]
 800a140:	607a      	str	r2, [r7, #4]
 800a142:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 800a144:	68f8      	ldr	r0, [r7, #12]
 800a146:	f000 f96c 	bl	800a422 <_ZSt32__make_move_if_noexcept_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt13move_iteratorIPS5_EET0_PT_>
 800a14a:	4604      	mov	r4, r0
 800a14c:	68b8      	ldr	r0, [r7, #8]
 800a14e:	f000 f968 	bl	800a422 <_ZSt32__make_move_if_noexcept_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt13move_iteratorIPS5_EET0_PT_>
 800a152:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	687a      	ldr	r2, [r7, #4]
 800a158:	4620      	mov	r0, r4
 800a15a:	f000 f971 	bl	800a440 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_S6_ET0_T_SA_S9_RSaIT1_E>
 800a15e:	4603      	mov	r3, r0
    }
 800a160:	4618      	mov	r0, r3
 800a162:	3714      	adds	r7, #20
 800a164:	46bd      	mov	sp, r7
 800a166:	bd90      	pop	{r4, r7, pc}

0800a168 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JRA6_KcEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800a168:	b5b0      	push	{r4, r5, r7, lr}
 800a16a:	b086      	sub	sp, #24
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	60f8      	str	r0, [r7, #12]
 800a170:	60b9      	str	r1, [r7, #8]
 800a172:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f7ff fc21 	bl	80099bc <_ZSt7forwardIRA6_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 800a17a:	4605      	mov	r5, r0
 800a17c:	f107 0314 	add.w	r3, r7, #20
 800a180:	4618      	mov	r0, r3
 800a182:	f015 fbc8 	bl	801f916 <_ZNSaIcEC1Ev>
 800a186:	f107 0414 	add.w	r4, r7, #20
 800a18a:	68bb      	ldr	r3, [r7, #8]
 800a18c:	4619      	mov	r1, r3
 800a18e:	2018      	movs	r0, #24
 800a190:	f7f6 ff55 	bl	800103e <_ZnwjPv>
 800a194:	4603      	mov	r3, r0
 800a196:	2b00      	cmp	r3, #0
 800a198:	d004      	beq.n	800a1a4 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JRA6_KcEEEvPT_DpOT0_+0x3c>
 800a19a:	4622      	mov	r2, r4
 800a19c:	4629      	mov	r1, r5
 800a19e:	4618      	mov	r0, r3
 800a1a0:	f015 fcbc 	bl	801fb1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a1a4:	f107 0314 	add.w	r3, r7, #20
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	f015 fbb5 	bl	801f918 <_ZNSaIcED1Ev>
 800a1ae:	bf00      	nop
 800a1b0:	3718      	adds	r7, #24
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bdb0      	pop	{r4, r5, r7, pc}

0800a1b6 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE37select_on_container_copy_constructionERKS6_>:
       *  @brief  Obtain an allocator to use when copying a container.
       *  @param  __rhs  An allocator.
       *  @return @c __rhs
      */
      static allocator_type
      select_on_container_copy_construction(const allocator_type& __rhs)
 800a1b6:	b580      	push	{r7, lr}
 800a1b8:	b082      	sub	sp, #8
 800a1ba:	af00      	add	r7, sp, #0
 800a1bc:	6078      	str	r0, [r7, #4]
 800a1be:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 800a1c0:	6839      	ldr	r1, [r7, #0]
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	f000 f804 	bl	800a1d0 <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ERKS5_>
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	3708      	adds	r7, #8
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}

0800a1d0 <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ERKS5_>:
      allocator(const allocator& __a) throw()
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b082      	sub	sp, #8
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
 800a1d8:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800a1da:	6839      	ldr	r1, [r7, #0]
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	f000 f940 	bl	800a462 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ERKS7_>
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	3708      	adds	r7, #8
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}

0800a1ec <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implC1ERKS6_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b082      	sub	sp, #8
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
 800a1f4:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
 800a1f6:	6839      	ldr	r1, [r7, #0]
 800a1f8:	6878      	ldr	r0, [r7, #4]
 800a1fa:	f7ff ffe9 	bl	800a1d0 <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ERKS5_>
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	2200      	movs	r2, #0
 800a202:	601a      	str	r2, [r3, #0]
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2200      	movs	r2, #0
 800a208:	605a      	str	r2, [r3, #4]
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2200      	movs	r2, #0
 800a20e:	609a      	str	r2, [r3, #8]
	{ }
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	4618      	mov	r0, r3
 800a214:	3708      	adds	r7, #8
 800a216:	46bd      	mov	sp, r7
 800a218:	bd80      	pop	{r7, pc}

0800a21a <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 800a21a:	b580      	push	{r7, lr}
 800a21c:	b082      	sub	sp, #8
 800a21e:	af00      	add	r7, sp, #0
 800a220:	6078      	str	r0, [r7, #4]
 800a222:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 800a224:	6839      	ldr	r1, [r7, #0]
 800a226:	6878      	ldr	r0, [r7, #4]
 800a228:	f7ff ff66 	bl	800a0f8 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj>
 800a22c:	4602      	mov	r2, r0
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681a      	ldr	r2, [r3, #0]
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	6819      	ldr	r1, [r3, #0]
 800a23e:	683a      	ldr	r2, [r7, #0]
 800a240:	4613      	mov	r3, r2
 800a242:	005b      	lsls	r3, r3, #1
 800a244:	4413      	add	r3, r2
 800a246:	00db      	lsls	r3, r3, #3
 800a248:	18ca      	adds	r2, r1, r3
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	609a      	str	r2, [r3, #8]
      }
 800a24e:	bf00      	nop
 800a250:	3708      	adds	r7, #8
 800a252:	46bd      	mov	sp, r7
 800a254:	bd80      	pop	{r7, pc}

0800a256 <_ZN9__gnu_cxx17__normal_iteratorIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS8_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800a256:	b480      	push	{r7}
 800a258:	b083      	sub	sp, #12
 800a25a:	af00      	add	r7, sp, #0
 800a25c:	6078      	str	r0, [r7, #4]
 800a25e:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	681a      	ldr	r2, [r3, #0]
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	601a      	str	r2, [r3, #0]
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	4618      	mov	r0, r3
 800a26c:	370c      	adds	r7, #12
 800a26e:	46bd      	mov	sp, r7
 800a270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a274:	4770      	bx	lr

0800a276 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS7_SaIS7_EEEEPS7_ET0_T_SG_SF_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800a276:	b580      	push	{r7, lr}
 800a278:	b086      	sub	sp, #24
 800a27a:	af00      	add	r7, sp, #0
 800a27c:	60f8      	str	r0, [r7, #12]
 800a27e:	60b9      	str	r1, [r7, #8]
 800a280:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800a282:	2301      	movs	r3, #1
 800a284:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800a286:	687a      	ldr	r2, [r7, #4]
 800a288:	68b9      	ldr	r1, [r7, #8]
 800a28a:	68f8      	ldr	r0, [r7, #12]
 800a28c:	f000 f8f5 	bl	800a47a <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS9_SaIS9_EEEEPS9_EET0_T_SI_SH_>
 800a290:	4603      	mov	r3, r0
    }
 800a292:	4618      	mov	r0, r3
 800a294:	3718      	adds	r7, #24
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}

0800a29a <_ZNSt12__shared_ptrIN4tama4HomeELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>:
        struct _Deleter
 800a29a:	b580      	push	{r7, lr}
 800a29c:	b082      	sub	sp, #8
 800a29e:	af00      	add	r7, sp, #0
 800a2a0:	6078      	str	r0, [r7, #4]
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	f7ff fc0c 	bl	8009ac2 <_ZNSaIN4tama4HomeEED1Ev>
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	3708      	adds	r7, #8
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bd80      	pop	{r7, pc}

0800a2b4 <_ZNSt12__shared_ptrIN4tama4HomeELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>:
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b082      	sub	sp, #8
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
 800a2bc:	6039      	str	r1, [r7, #0]
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	683a      	ldr	r2, [r7, #0]
 800a2c2:	4611      	mov	r1, r2
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	f000 f907 	bl	800a4d8 <_ZNSaIN4tama4HomeEEC1ERKS1_>
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	3708      	adds	r7, #8
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bd80      	pop	{r7, pc}

0800a2d4 <_ZNSt12__shared_ptrIN4tama4HomeELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJRSt10shared_ptrINS0_7ContextEEEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b08c      	sub	sp, #48	; 0x30
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	60f8      	str	r0, [r7, #12]
 800a2dc:	7239      	strb	r1, [r7, #8]
 800a2de:	607a      	str	r2, [r7, #4]
 800a2e0:	603b      	str	r3, [r7, #0]
	: _M_ptr(), _M_refcount()
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	601a      	str	r2, [r3, #0]
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	3304      	adds	r3, #4
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	f7f9 fe3e 	bl	8003f6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 800a2f2:	f107 0320 	add.w	r3, r7, #32
 800a2f6:	6879      	ldr	r1, [r7, #4]
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	f000 f8ed 	bl	800a4d8 <_ZNSaIN4tama4HomeEEC1ERKS1_>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 800a2fe:	f107 0318 	add.w	r3, r7, #24
 800a302:	f107 0220 	add.w	r2, r7, #32
 800a306:	4611      	mov	r1, r2
 800a308:	4618      	mov	r0, r3
 800a30a:	f000 f8f3 	bl	800a4f4 <_ZSt18__allocate_guardedISaIN4tama4HomeEEESt15__allocated_ptrIT_ERS4_>
	  auto __ptr = __guard.get();
 800a30e:	f107 0318 	add.w	r3, r7, #24
 800a312:	4618      	mov	r0, r3
 800a314:	f000 f916 	bl	800a544 <_ZNSt15__allocated_ptrISaIN4tama4HomeEEE3getEv>
 800a318:	62f8      	str	r0, [r7, #44]	; 0x2c
	  __traits::construct(__del._M_alloc, __ptr,
 800a31a:	6838      	ldr	r0, [r7, #0]
 800a31c:	f7fb f838 	bl	8005390 <_ZSt7forwardIRSt10shared_ptrIN4tama7ContextEEEOT_RNSt16remove_referenceIS5_E4typeE>
 800a320:	4602      	mov	r2, r0
 800a322:	f107 0320 	add.w	r3, r7, #32
 800a326:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a328:	4618      	mov	r0, r3
 800a32a:	f000 f919 	bl	800a560 <_ZNSt16allocator_traitsISaIN4tama4HomeEEE9constructIS1_JRSt10shared_ptrINS0_7ContextEEEEEvRS2_PT_DpOT0_>
	  __guard = nullptr;
 800a32e:	f107 0318 	add.w	r3, r7, #24
 800a332:	2100      	movs	r1, #0
 800a334:	4618      	mov	r0, r3
 800a336:	f000 f926 	bl	800a586 <_ZNSt15__allocated_ptrISaIN4tama4HomeEEEaSEDn>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 800a33a:	f107 0220 	add.w	r2, r7, #32
 800a33e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a342:	4611      	mov	r1, r2
 800a344:	4618      	mov	r0, r3
 800a346:	f7ff ffb5 	bl	800a2b4 <_ZNSt12__shared_ptrIN4tama4HomeELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>
 800a34a:	f107 0220 	add.w	r2, r7, #32
 800a34e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a352:	4611      	mov	r1, r2
 800a354:	4618      	mov	r0, r3
 800a356:	f000 f8bf 	bl	800a4d8 <_ZNSaIN4tama4HomeEEC1ERKS1_>
 800a35a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a35e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800a362:	f107 0014 	add.w	r0, r7, #20
 800a366:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a368:	f000 f942 	bl	800a5f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama4HomeENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
 800a36c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a370:	4618      	mov	r0, r3
 800a372:	f7ff fba6 	bl	8009ac2 <_ZNSaIN4tama4HomeEED1Ev>
 800a376:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a37a:	4618      	mov	r0, r3
 800a37c:	f7ff ff8d 	bl	800a29a <_ZNSt12__shared_ptrIN4tama4HomeELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	  _M_refcount._M_swap(__count);
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	3304      	adds	r3, #4
 800a384:	f107 0214 	add.w	r2, r7, #20
 800a388:	4611      	mov	r1, r2
 800a38a:	4618      	mov	r0, r3
 800a38c:	f7f9 fef8 	bl	8004180 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  _M_ptr = __ptr;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a394:	601a      	str	r2, [r3, #0]
	  _M_enable_shared_from_this_with(_M_ptr);
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	4619      	mov	r1, r3
 800a39c:	68f8      	ldr	r0, [r7, #12]
 800a39e:	f000 f97e 	bl	800a69e <_ZNSt12__shared_ptrIN4tama4HomeELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 800a3a2:	f107 0314 	add.w	r3, r7, #20
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f7f8 feb3 	bl	8003112 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 800a3ac:	f107 0318 	add.w	r3, r7, #24
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	f000 f8b2 	bl	800a51a <_ZNSt15__allocated_ptrISaIN4tama4HomeEEED1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 800a3b6:	f107 0320 	add.w	r3, r7, #32
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	f7ff ff6d 	bl	800a29a <_ZNSt12__shared_ptrIN4tama4HomeELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	}
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	3730      	adds	r7, #48	; 0x30
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bd80      	pop	{r7, pc}

0800a3ca <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>:
      allocator() throw() { }
 800a3ca:	b580      	push	{r7, lr}
 800a3cc:	b082      	sub	sp, #8
 800a3ce:	af00      	add	r7, sp, #0
 800a3d0:	6078      	str	r0, [r7, #4]
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	f000 f96e 	bl	800a6b4 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	4618      	mov	r0, r3
 800a3dc:	3708      	adds	r7, #8
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}

0800a3e2 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800a3e2:	b580      	push	{r7, lr}
 800a3e4:	b082      	sub	sp, #8
 800a3e6:	af00      	add	r7, sp, #0
 800a3e8:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	f7ff fd3f 	bl	8009e70 <_ZNKSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	f000 f968 	bl	800a6ca <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8max_sizeERKS6_>
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	3708      	adds	r7, #8
 800a400:	46bd      	mov	sp, r7
 800a402:	bd80      	pop	{r7, pc}

0800a404 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 800a404:	b580      	push	{r7, lr}
 800a406:	b082      	sub	sp, #8
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
 800a40c:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800a40e:	2200      	movs	r2, #0
 800a410:	6839      	ldr	r1, [r7, #0]
 800a412:	6878      	ldr	r0, [r7, #4]
 800a414:	f000 f965 	bl	800a6e2 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv>
 800a418:	4603      	mov	r3, r0
 800a41a:	4618      	mov	r0, r3
 800a41c:	3708      	adds	r7, #8
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}

0800a422 <_ZSt32__make_move_if_noexcept_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt13move_iteratorIPS5_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 800a422:	b580      	push	{r7, lr}
 800a424:	b084      	sub	sp, #16
 800a426:	af00      	add	r7, sp, #0
 800a428:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 800a42a:	f107 030c 	add.w	r3, r7, #12
 800a42e:	6879      	ldr	r1, [r7, #4]
 800a430:	4618      	mov	r0, r3
 800a432:	f000 f977 	bl	800a724 <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ES6_>
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	4618      	mov	r0, r3
 800a43a:	3710      	adds	r7, #16
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}

0800a440 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_S6_ET0_T_SA_S9_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800a440:	b580      	push	{r7, lr}
 800a442:	b084      	sub	sp, #16
 800a444:	af00      	add	r7, sp, #0
 800a446:	60f8      	str	r0, [r7, #12]
 800a448:	60b9      	str	r1, [r7, #8]
 800a44a:	607a      	str	r2, [r7, #4]
 800a44c:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800a44e:	687a      	ldr	r2, [r7, #4]
 800a450:	68b9      	ldr	r1, [r7, #8]
 800a452:	68f8      	ldr	r0, [r7, #12]
 800a454:	f000 f975 	bl	800a742 <_ZSt18uninitialized_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_ET0_T_SA_S9_>
 800a458:	4603      	mov	r3, r0
 800a45a:	4618      	mov	r0, r3
 800a45c:	3710      	adds	r7, #16
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}

0800a462 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ERKS7_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800a462:	b480      	push	{r7}
 800a464:	b083      	sub	sp, #12
 800a466:	af00      	add	r7, sp, #0
 800a468:	6078      	str	r0, [r7, #4]
 800a46a:	6039      	str	r1, [r7, #0]
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	4618      	mov	r0, r3
 800a470:	370c      	adds	r7, #12
 800a472:	46bd      	mov	sp, r7
 800a474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a478:	4770      	bx	lr

0800a47a <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS9_SaIS9_EEEEPS9_EET0_T_SI_SH_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800a47a:	b590      	push	{r4, r7, lr}
 800a47c:	b087      	sub	sp, #28
 800a47e:	af00      	add	r7, sp, #0
 800a480:	60f8      	str	r0, [r7, #12]
 800a482:	60b9      	str	r1, [r7, #8]
 800a484:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 800a48a:	f107 0208 	add.w	r2, r7, #8
 800a48e:	f107 030c 	add.w	r3, r7, #12
 800a492:	4611      	mov	r1, r2
 800a494:	4618      	mov	r0, r3
 800a496:	f000 f966 	bl	800a766 <_ZN9__gnu_cxxneIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEEbRKNS_17__normal_iteratorIT_T0_EESH_>
 800a49a:	4603      	mov	r3, r0
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d016      	beq.n	800a4ce <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS9_SaIS9_EEEEPS9_EET0_T_SI_SH_+0x54>
		std::_Construct(std::__addressof(*__cur), *__first);
 800a4a0:	6978      	ldr	r0, [r7, #20]
 800a4a2:	f7fe fef3 	bl	800928c <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 800a4a6:	4604      	mov	r4, r0
 800a4a8:	f107 030c 	add.w	r3, r7, #12
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	f000 f983 	bl	800a7b8 <_ZNK9__gnu_cxx17__normal_iteratorIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEdeEv>
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	4619      	mov	r1, r3
 800a4b6:	4620      	mov	r0, r4
 800a4b8:	f000 f995 	bl	800a7e6 <_ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJRKS5_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 800a4bc:	f107 030c 	add.w	r3, r7, #12
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	f000 f968 	bl	800a796 <_ZN9__gnu_cxx17__normal_iteratorIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEppEv>
 800a4c6:	697b      	ldr	r3, [r7, #20]
 800a4c8:	3318      	adds	r3, #24
 800a4ca:	617b      	str	r3, [r7, #20]
 800a4cc:	e7dd      	b.n	800a48a <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS9_SaIS9_EEEEPS9_EET0_T_SI_SH_+0x10>
	      return __cur;
 800a4ce:	697b      	ldr	r3, [r7, #20]
	}
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	371c      	adds	r7, #28
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd90      	pop	{r4, r7, pc}

0800a4d8 <_ZNSaIN4tama4HomeEEC1ERKS1_>:
      allocator(const allocator& __a) throw()
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b082      	sub	sp, #8
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
 800a4e0:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800a4e2:	6839      	ldr	r1, [r7, #0]
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	f000 f997 	bl	800a818 <_ZN9__gnu_cxx13new_allocatorIN4tama4HomeEEC1ERKS3_>
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	3708      	adds	r7, #8
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	bd80      	pop	{r7, pc}

0800a4f4 <_ZSt18__allocate_guardedISaIN4tama4HomeEEESt15__allocated_ptrIT_ERS4_>:
    __allocate_guarded(_Alloc& __a)
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b082      	sub	sp, #8
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
 800a4fc:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 800a4fe:	2101      	movs	r1, #1
 800a500:	6838      	ldr	r0, [r7, #0]
 800a502:	f000 f995 	bl	800a830 <_ZNSt16allocator_traitsISaIN4tama4HomeEEE8allocateERS2_j>
 800a506:	4603      	mov	r3, r0
 800a508:	461a      	mov	r2, r3
 800a50a:	6839      	ldr	r1, [r7, #0]
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	f000 f99e 	bl	800a84e <_ZNSt15__allocated_ptrISaIN4tama4HomeEEEC1ERS2_PS1_>
    }
 800a512:	6878      	ldr	r0, [r7, #4]
 800a514:	3708      	adds	r7, #8
 800a516:	46bd      	mov	sp, r7
 800a518:	bd80      	pop	{r7, pc}

0800a51a <_ZNSt15__allocated_ptrISaIN4tama4HomeEEED1Ev>:
      ~__allocated_ptr()
 800a51a:	b580      	push	{r7, lr}
 800a51c:	b082      	sub	sp, #8
 800a51e:	af00      	add	r7, sp, #0
 800a520:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	685b      	ldr	r3, [r3, #4]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d007      	beq.n	800a53a <_ZNSt15__allocated_ptrISaIN4tama4HomeEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6818      	ldr	r0, [r3, #0]
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	685b      	ldr	r3, [r3, #4]
 800a532:	2201      	movs	r2, #1
 800a534:	4619      	mov	r1, r3
 800a536:	f000 f99e 	bl	800a876 <_ZNSt16allocator_traitsISaIN4tama4HomeEEE10deallocateERS2_PS1_j>
      }
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	4618      	mov	r0, r3
 800a53e:	3708      	adds	r7, #8
 800a540:	46bd      	mov	sp, r7
 800a542:	bd80      	pop	{r7, pc}

0800a544 <_ZNSt15__allocated_ptrISaIN4tama4HomeEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 800a544:	b580      	push	{r7, lr}
 800a546:	b082      	sub	sp, #8
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	685b      	ldr	r3, [r3, #4]
 800a550:	4618      	mov	r0, r3
 800a552:	f000 f99f 	bl	800a894 <_ZNSt15__allocated_ptrISaIN4tama4HomeEEE10_S_raw_ptrEPS1_>
 800a556:	4603      	mov	r3, r0
 800a558:	4618      	mov	r0, r3
 800a55a:	3708      	adds	r7, #8
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}

0800a560 <_ZNSt16allocator_traitsISaIN4tama4HomeEEE9constructIS1_JRSt10shared_ptrINS0_7ContextEEEEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 800a560:	b580      	push	{r7, lr}
 800a562:	b084      	sub	sp, #16
 800a564:	af00      	add	r7, sp, #0
 800a566:	60f8      	str	r0, [r7, #12]
 800a568:	60b9      	str	r1, [r7, #8]
 800a56a:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800a56c:	6878      	ldr	r0, [r7, #4]
 800a56e:	f7fa ff0f 	bl	8005390 <_ZSt7forwardIRSt10shared_ptrIN4tama7ContextEEEOT_RNSt16remove_referenceIS5_E4typeE>
 800a572:	4603      	mov	r3, r0
 800a574:	461a      	mov	r2, r3
 800a576:	68b9      	ldr	r1, [r7, #8]
 800a578:	68f8      	ldr	r0, [r7, #12]
 800a57a:	f000 f996 	bl	800a8aa <_ZN9__gnu_cxx13new_allocatorIN4tama4HomeEE9constructIS2_JRSt10shared_ptrINS1_7ContextEEEEEvPT_DpOT0_>
 800a57e:	bf00      	nop
 800a580:	3710      	adds	r7, #16
 800a582:	46bd      	mov	sp, r7
 800a584:	bd80      	pop	{r7, pc}

0800a586 <_ZNSt15__allocated_ptrISaIN4tama4HomeEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 800a586:	b480      	push	{r7}
 800a588:	b083      	sub	sp, #12
 800a58a:	af00      	add	r7, sp, #0
 800a58c:	6078      	str	r0, [r7, #4]
 800a58e:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2200      	movs	r2, #0
 800a594:	605a      	str	r2, [r3, #4]
	return *this;
 800a596:	687b      	ldr	r3, [r7, #4]
      }
 800a598:	4618      	mov	r0, r3
 800a59a:	370c      	adds	r7, #12
 800a59c:	46bd      	mov	sp, r7
 800a59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a2:	4770      	bx	lr

0800a5a4 <_ZSt4moveIRNSt12__shared_ptrIN4tama4HomeELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 800a5a4:	b480      	push	{r7}
 800a5a6:	b083      	sub	sp, #12
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	370c      	adds	r7, #12
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b8:	4770      	bx	lr

0800a5ba <_ZNSt12__shared_ptrIN4tama4HomeELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>:
        struct _Deleter
 800a5ba:	b580      	push	{r7, lr}
 800a5bc:	b082      	sub	sp, #8
 800a5be:	af00      	add	r7, sp, #0
 800a5c0:	6078      	str	r0, [r7, #4]
 800a5c2:	6039      	str	r1, [r7, #0]
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	683a      	ldr	r2, [r7, #0]
 800a5c8:	4611      	mov	r1, r2
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	f7ff ff84 	bl	800a4d8 <_ZNSaIN4tama4HomeEEC1ERKS1_>
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	3708      	adds	r7, #8
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	bd80      	pop	{r7, pc}

0800a5da <_ZSt4moveIRSaIN4tama4HomeEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800a5da:	b480      	push	{r7}
 800a5dc:	b083      	sub	sp, #12
 800a5de:	af00      	add	r7, sp, #0
 800a5e0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	370c      	adds	r7, #12
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ee:	4770      	bx	lr

0800a5f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama4HomeENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
 800a5f0:	b5b0      	push	{r4, r5, r7, lr}
 800a5f2:	b08a      	sub	sp, #40	; 0x28
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	60f8      	str	r0, [r7, #12]
 800a5f8:	60b9      	str	r1, [r7, #8]
 800a5fa:	607a      	str	r2, [r7, #4]
 800a5fc:	603b      	str	r3, [r7, #0]
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	2200      	movs	r2, #0
 800a602:	601a      	str	r2, [r3, #0]
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 800a604:	f107 031c 	add.w	r3, r7, #28
 800a608:	6839      	ldr	r1, [r7, #0]
 800a60a:	4618      	mov	r0, r3
 800a60c:	f000 f968 	bl	800a8e0 <_ZNSaISt19_Sp_counted_deleterIPN4tama4HomeENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	      auto __guard = std::__allocate_guarded(__a2);
 800a610:	f107 0314 	add.w	r3, r7, #20
 800a614:	f107 021c 	add.w	r2, r7, #28
 800a618:	4611      	mov	r1, r2
 800a61a:	4618      	mov	r0, r3
 800a61c:	f000 f979 	bl	800a912 <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama4HomeENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>
	      _Sp_cd_type* __mem = __guard.get();
 800a620:	f107 0314 	add.w	r3, r7, #20
 800a624:	4618      	mov	r0, r3
 800a626:	f000 f99c 	bl	800a962 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama4HomeENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>
 800a62a:	6278      	str	r0, [r7, #36]	; 0x24
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 800a62c:	6878      	ldr	r0, [r7, #4]
 800a62e:	f7ff ffb9 	bl	800a5a4 <_ZSt4moveIRNSt12__shared_ptrIN4tama4HomeELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800a632:	4602      	mov	r2, r0
 800a634:	f107 0320 	add.w	r3, r7, #32
 800a638:	4611      	mov	r1, r2
 800a63a:	4618      	mov	r0, r3
 800a63c:	f7ff ffbd 	bl	800a5ba <_ZNSt12__shared_ptrIN4tama4HomeELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 800a640:	f107 0420 	add.w	r4, r7, #32
 800a644:	6838      	ldr	r0, [r7, #0]
 800a646:	f7ff ffc8 	bl	800a5da <_ZSt4moveIRSaIN4tama4HomeEEEONSt16remove_referenceIT_E4typeEOS5_>
 800a64a:	4605      	mov	r5, r0
 800a64c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a64e:	4619      	mov	r1, r3
 800a650:	2014      	movs	r0, #20
 800a652:	f7f6 fcf4 	bl	800103e <_ZnwjPv>
 800a656:	2800      	cmp	r0, #0
 800a658:	d004      	beq.n	800a664 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama4HomeENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x74>
 800a65a:	462b      	mov	r3, r5
 800a65c:	4622      	mov	r2, r4
 800a65e:	68b9      	ldr	r1, [r7, #8]
 800a660:	f000 f9b8 	bl	800a9d4 <_ZNSt19_Sp_counted_deleterIPN4tama4HomeENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>
 800a664:	f107 0320 	add.w	r3, r7, #32
 800a668:	4618      	mov	r0, r3
 800a66a:	f7ff fe16 	bl	800a29a <_ZNSt12__shared_ptrIN4tama4HomeELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	      _M_pi = __mem;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a672:	601a      	str	r2, [r3, #0]
	      __guard = nullptr;
 800a674:	f107 0314 	add.w	r3, r7, #20
 800a678:	2100      	movs	r1, #0
 800a67a:	4618      	mov	r0, r3
 800a67c:	f000 f9d8 	bl	800aa30 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama4HomeENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>
	      auto __guard = std::__allocate_guarded(__a2);
 800a680:	f107 0314 	add.w	r3, r7, #20
 800a684:	4618      	mov	r0, r3
 800a686:	f000 f957 	bl	800a938 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama4HomeENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 800a68a:	f107 031c 	add.w	r3, r7, #28
 800a68e:	4618      	mov	r0, r3
 800a690:	f000 f933 	bl	800a8fa <_ZNSaISt19_Sp_counted_deleterIPN4tama4HomeENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
	}
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	4618      	mov	r0, r3
 800a698:	3728      	adds	r7, #40	; 0x28
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bdb0      	pop	{r4, r5, r7, pc}

0800a69e <_ZNSt12__shared_ptrIN4tama4HomeELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 800a69e:	b480      	push	{r7}
 800a6a0:	b083      	sub	sp, #12
 800a6a2:	af00      	add	r7, sp, #0
 800a6a4:	6078      	str	r0, [r7, #4]
 800a6a6:	6039      	str	r1, [r7, #0]
	{ }
 800a6a8:	bf00      	nop
 800a6aa:	370c      	adds	r7, #12
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b2:	4770      	bx	lr

0800a6b4 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800a6b4:	b480      	push	{r7}
 800a6b6:	b083      	sub	sp, #12
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	4618      	mov	r0, r3
 800a6c0:	370c      	adds	r7, #12
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c8:	4770      	bx	lr

0800a6ca <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8max_sizeERKS6_>:
      max_size(const allocator_type& __a) noexcept
 800a6ca:	b580      	push	{r7, lr}
 800a6cc:	b082      	sub	sp, #8
 800a6ce:	af00      	add	r7, sp, #0
 800a6d0:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	f000 f9dc 	bl	800aa90 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	4618      	mov	r0, r3
 800a6dc:	3708      	adds	r7, #8
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bd80      	pop	{r7, pc}

0800a6e2 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800a6e2:	b580      	push	{r7, lr}
 800a6e4:	b084      	sub	sp, #16
 800a6e6:	af00      	add	r7, sp, #0
 800a6e8:	60f8      	str	r0, [r7, #12]
 800a6ea:	60b9      	str	r1, [r7, #8]
 800a6ec:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800a6ee:	68f8      	ldr	r0, [r7, #12]
 800a6f0:	f000 f9ce 	bl	800aa90 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>
 800a6f4:	4602      	mov	r2, r0
 800a6f6:	68bb      	ldr	r3, [r7, #8]
 800a6f8:	4293      	cmp	r3, r2
 800a6fa:	bf8c      	ite	hi
 800a6fc:	2301      	movhi	r3, #1
 800a6fe:	2300      	movls	r3, #0
 800a700:	b2db      	uxtb	r3, r3
 800a702:	2b00      	cmp	r3, #0
 800a704:	d001      	beq.n	800a70a <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800a706:	f015 f908 	bl	801f91a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800a70a:	68ba      	ldr	r2, [r7, #8]
 800a70c:	4613      	mov	r3, r2
 800a70e:	005b      	lsls	r3, r3, #1
 800a710:	4413      	add	r3, r2
 800a712:	00db      	lsls	r3, r3, #3
 800a714:	4618      	mov	r0, r3
 800a716:	f015 f8d2 	bl	801f8be <_Znwj>
 800a71a:	4603      	mov	r3, r0
      }
 800a71c:	4618      	mov	r0, r3
 800a71e:	3710      	adds	r7, #16
 800a720:	46bd      	mov	sp, r7
 800a722:	bd80      	pop	{r7, pc}

0800a724 <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ES6_>:
      move_iterator(iterator_type __i)
 800a724:	b480      	push	{r7}
 800a726:	b083      	sub	sp, #12
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
 800a72c:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	683a      	ldr	r2, [r7, #0]
 800a732:	601a      	str	r2, [r3, #0]
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	4618      	mov	r0, r3
 800a738:	370c      	adds	r7, #12
 800a73a:	46bd      	mov	sp, r7
 800a73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a740:	4770      	bx	lr

0800a742 <_ZSt18uninitialized_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_ET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800a742:	b580      	push	{r7, lr}
 800a744:	b086      	sub	sp, #24
 800a746:	af00      	add	r7, sp, #0
 800a748:	60f8      	str	r0, [r7, #12]
 800a74a:	60b9      	str	r1, [r7, #8]
 800a74c:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800a74e:	2301      	movs	r3, #1
 800a750:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800a752:	687a      	ldr	r2, [r7, #4]
 800a754:	68b9      	ldr	r1, [r7, #8]
 800a756:	68f8      	ldr	r0, [r7, #12]
 800a758:	f000 f9a8 	bl	800aaac <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_>
 800a75c:	4603      	mov	r3, r0
    }
 800a75e:	4618      	mov	r0, r3
 800a760:	3718      	adds	r7, #24
 800a762:	46bd      	mov	sp, r7
 800a764:	bd80      	pop	{r7, pc}

0800a766 <_ZN9__gnu_cxxneIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEEbRKNS_17__normal_iteratorIT_T0_EESH_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 800a766:	b590      	push	{r4, r7, lr}
 800a768:	b083      	sub	sp, #12
 800a76a:	af00      	add	r7, sp, #0
 800a76c:	6078      	str	r0, [r7, #4]
 800a76e:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 800a770:	6878      	ldr	r0, [r7, #4]
 800a772:	f000 f9ca 	bl	800ab0a <_ZNK9__gnu_cxx17__normal_iteratorIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 800a776:	4603      	mov	r3, r0
 800a778:	681c      	ldr	r4, [r3, #0]
 800a77a:	6838      	ldr	r0, [r7, #0]
 800a77c:	f000 f9c5 	bl	800ab0a <_ZNK9__gnu_cxx17__normal_iteratorIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 800a780:	4603      	mov	r3, r0
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	429c      	cmp	r4, r3
 800a786:	bf14      	ite	ne
 800a788:	2301      	movne	r3, #1
 800a78a:	2300      	moveq	r3, #0
 800a78c:	b2db      	uxtb	r3, r3
 800a78e:	4618      	mov	r0, r3
 800a790:	370c      	adds	r7, #12
 800a792:	46bd      	mov	sp, r7
 800a794:	bd90      	pop	{r4, r7, pc}

0800a796 <_ZN9__gnu_cxx17__normal_iteratorIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800a796:	b480      	push	{r7}
 800a798:	b083      	sub	sp, #12
 800a79a:	af00      	add	r7, sp, #0
 800a79c:	6078      	str	r0, [r7, #4]
	++_M_current;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	f103 0218 	add.w	r2, r3, #24
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	601a      	str	r2, [r3, #0]
	return *this;
 800a7aa:	687b      	ldr	r3, [r7, #4]
      }
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	370c      	adds	r7, #12
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b6:	4770      	bx	lr

0800a7b8 <_ZNK9__gnu_cxx17__normal_iteratorIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800a7b8:	b480      	push	{r7}
 800a7ba:	b083      	sub	sp, #12
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	370c      	adds	r7, #12
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ce:	4770      	bx	lr

0800a7d0 <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800a7d0:	b480      	push	{r7}
 800a7d2:	b083      	sub	sp, #12
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	4618      	mov	r0, r3
 800a7dc:	370c      	adds	r7, #12
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e4:	4770      	bx	lr

0800a7e6 <_ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJRKS5_EEvPT_DpOT0_>:
    _Construct(_T1* __p, _Args&&... __args)
 800a7e6:	b590      	push	{r4, r7, lr}
 800a7e8:	b083      	sub	sp, #12
 800a7ea:	af00      	add	r7, sp, #0
 800a7ec:	6078      	str	r0, [r7, #4]
 800a7ee:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
 800a7f0:	6838      	ldr	r0, [r7, #0]
 800a7f2:	f7ff ffed 	bl	800a7d0 <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800a7f6:	4604      	mov	r4, r0
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	4619      	mov	r1, r3
 800a7fc:	2018      	movs	r0, #24
 800a7fe:	f7f6 fc1e 	bl	800103e <_ZnwjPv>
 800a802:	4603      	mov	r3, r0
 800a804:	2b00      	cmp	r3, #0
 800a806:	d003      	beq.n	800a810 <_ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJRKS5_EEvPT_DpOT0_+0x2a>
 800a808:	4621      	mov	r1, r4
 800a80a:	4618      	mov	r0, r3
 800a80c:	f015 f954 	bl	801fab8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800a810:	bf00      	nop
 800a812:	370c      	adds	r7, #12
 800a814:	46bd      	mov	sp, r7
 800a816:	bd90      	pop	{r4, r7, pc}

0800a818 <_ZN9__gnu_cxx13new_allocatorIN4tama4HomeEEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800a818:	b480      	push	{r7}
 800a81a:	b083      	sub	sp, #12
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
 800a820:	6039      	str	r1, [r7, #0]
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	4618      	mov	r0, r3
 800a826:	370c      	adds	r7, #12
 800a828:	46bd      	mov	sp, r7
 800a82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82e:	4770      	bx	lr

0800a830 <_ZNSt16allocator_traitsISaIN4tama4HomeEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800a830:	b580      	push	{r7, lr}
 800a832:	b082      	sub	sp, #8
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
 800a838:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800a83a:	2200      	movs	r2, #0
 800a83c:	6839      	ldr	r1, [r7, #0]
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f000 f96e 	bl	800ab20 <_ZN9__gnu_cxx13new_allocatorIN4tama4HomeEE8allocateEjPKv>
 800a844:	4603      	mov	r3, r0
 800a846:	4618      	mov	r0, r3
 800a848:	3708      	adds	r7, #8
 800a84a:	46bd      	mov	sp, r7
 800a84c:	bd80      	pop	{r7, pc}

0800a84e <_ZNSt15__allocated_ptrISaIN4tama4HomeEEEC1ERS2_PS1_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 800a84e:	b580      	push	{r7, lr}
 800a850:	b084      	sub	sp, #16
 800a852:	af00      	add	r7, sp, #0
 800a854:	60f8      	str	r0, [r7, #12]
 800a856:	60b9      	str	r1, [r7, #8]
 800a858:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800a85a:	68b8      	ldr	r0, [r7, #8]
 800a85c:	f000 f981 	bl	800ab62 <_ZSt11__addressofISaIN4tama4HomeEEEPT_RS3_>
 800a860:	4602      	mov	r2, r0
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	601a      	str	r2, [r3, #0]
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	687a      	ldr	r2, [r7, #4]
 800a86a:	605a      	str	r2, [r3, #4]
      { }
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	4618      	mov	r0, r3
 800a870:	3710      	adds	r7, #16
 800a872:	46bd      	mov	sp, r7
 800a874:	bd80      	pop	{r7, pc}

0800a876 <_ZNSt16allocator_traitsISaIN4tama4HomeEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800a876:	b580      	push	{r7, lr}
 800a878:	b084      	sub	sp, #16
 800a87a:	af00      	add	r7, sp, #0
 800a87c:	60f8      	str	r0, [r7, #12]
 800a87e:	60b9      	str	r1, [r7, #8]
 800a880:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800a882:	687a      	ldr	r2, [r7, #4]
 800a884:	68b9      	ldr	r1, [r7, #8]
 800a886:	68f8      	ldr	r0, [r7, #12]
 800a888:	f000 f976 	bl	800ab78 <_ZN9__gnu_cxx13new_allocatorIN4tama4HomeEE10deallocateEPS2_j>
 800a88c:	bf00      	nop
 800a88e:	3710      	adds	r7, #16
 800a890:	46bd      	mov	sp, r7
 800a892:	bd80      	pop	{r7, pc}

0800a894 <_ZNSt15__allocated_ptrISaIN4tama4HomeEEE10_S_raw_ptrEPS1_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 800a894:	b480      	push	{r7}
 800a896:	b083      	sub	sp, #12
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	4618      	mov	r0, r3
 800a8a0:	370c      	adds	r7, #12
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a8:	4770      	bx	lr

0800a8aa <_ZN9__gnu_cxx13new_allocatorIN4tama4HomeEE9constructIS2_JRSt10shared_ptrINS1_7ContextEEEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800a8aa:	b590      	push	{r4, r7, lr}
 800a8ac:	b085      	sub	sp, #20
 800a8ae:	af00      	add	r7, sp, #0
 800a8b0:	60f8      	str	r0, [r7, #12]
 800a8b2:	60b9      	str	r1, [r7, #8]
 800a8b4:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800a8b6:	6878      	ldr	r0, [r7, #4]
 800a8b8:	f7fa fd6a 	bl	8005390 <_ZSt7forwardIRSt10shared_ptrIN4tama7ContextEEEOT_RNSt16remove_referenceIS5_E4typeE>
 800a8bc:	4604      	mov	r4, r0
 800a8be:	68bb      	ldr	r3, [r7, #8]
 800a8c0:	4619      	mov	r1, r3
 800a8c2:	f44f 70d6 	mov.w	r0, #428	; 0x1ac
 800a8c6:	f7f6 fbba 	bl	800103e <_ZnwjPv>
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d003      	beq.n	800a8d8 <_ZN9__gnu_cxx13new_allocatorIN4tama4HomeEE9constructIS2_JRSt10shared_ptrINS1_7ContextEEEEEvPT_DpOT0_+0x2e>
 800a8d0:	4621      	mov	r1, r4
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	f7fc fb08 	bl	8006ee8 <_ZN4tama4HomeC1ERKSt10shared_ptrINS_7ContextEE>
 800a8d8:	bf00      	nop
 800a8da:	3714      	adds	r7, #20
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	bd90      	pop	{r4, r7, pc}

0800a8e0 <_ZNSaISt19_Sp_counted_deleterIPN4tama4HomeENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) throw() { }
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b082      	sub	sp, #8
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
 800a8e8:	6039      	str	r1, [r7, #0]
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f000 f951 	bl	800ab92 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama4HomeENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	3708      	adds	r7, #8
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}

0800a8fa <_ZNSaISt19_Sp_counted_deleterIPN4tama4HomeENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>:
      ~allocator() throw() { }
 800a8fa:	b580      	push	{r7, lr}
 800a8fc:	b082      	sub	sp, #8
 800a8fe:	af00      	add	r7, sp, #0
 800a900:	6078      	str	r0, [r7, #4]
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	f000 f950 	bl	800aba8 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama4HomeENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	4618      	mov	r0, r3
 800a90c:	3708      	adds	r7, #8
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd80      	pop	{r7, pc}

0800a912 <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama4HomeENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>:
    __allocate_guarded(_Alloc& __a)
 800a912:	b580      	push	{r7, lr}
 800a914:	b082      	sub	sp, #8
 800a916:	af00      	add	r7, sp, #0
 800a918:	6078      	str	r0, [r7, #4]
 800a91a:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 800a91c:	2101      	movs	r1, #1
 800a91e:	6838      	ldr	r0, [r7, #0]
 800a920:	f000 f94d 	bl	800abbe <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama4HomeENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>
 800a924:	4603      	mov	r3, r0
 800a926:	461a      	mov	r2, r3
 800a928:	6839      	ldr	r1, [r7, #0]
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	f000 f956 	bl	800abdc <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama4HomeENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
    }
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	3708      	adds	r7, #8
 800a934:	46bd      	mov	sp, r7
 800a936:	bd80      	pop	{r7, pc}

0800a938 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama4HomeENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>:
      ~__allocated_ptr()
 800a938:	b580      	push	{r7, lr}
 800a93a:	b082      	sub	sp, #8
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	685b      	ldr	r3, [r3, #4]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d007      	beq.n	800a958 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama4HomeENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	6818      	ldr	r0, [r3, #0]
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	685b      	ldr	r3, [r3, #4]
 800a950:	2201      	movs	r2, #1
 800a952:	4619      	mov	r1, r3
 800a954:	f000 f956 	bl	800ac04 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama4HomeENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>
      }
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	4618      	mov	r0, r3
 800a95c:	3708      	adds	r7, #8
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd80      	pop	{r7, pc}

0800a962 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama4HomeENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 800a962:	b580      	push	{r7, lr}
 800a964:	b082      	sub	sp, #8
 800a966:	af00      	add	r7, sp, #0
 800a968:	6078      	str	r0, [r7, #4]
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	685b      	ldr	r3, [r3, #4]
 800a96e:	4618      	mov	r0, r3
 800a970:	f000 f957 	bl	800ac22 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama4HomeENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>
 800a974:	4603      	mov	r3, r0
 800a976:	4618      	mov	r0, r3
 800a978:	3708      	adds	r7, #8
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}

0800a97e <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama4HomeELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, false>
 800a97e:	b580      	push	{r7, lr}
 800a980:	b082      	sub	sp, #8
 800a982:	af00      	add	r7, sp, #0
 800a984:	6078      	str	r0, [r7, #4]
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	4618      	mov	r0, r3
 800a98a:	f7ff fc86 	bl	800a29a <_ZNSt12__shared_ptrIN4tama4HomeELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	4618      	mov	r0, r3
 800a992:	3708      	adds	r7, #8
 800a994:	46bd      	mov	sp, r7
 800a996:	bd80      	pop	{r7, pc}

0800a998 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama4HomeEELb1EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp
 800a998:	b580      	push	{r7, lr}
 800a99a:	b082      	sub	sp, #8
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	f7ff f88e 	bl	8009ac2 <_ZNSaIN4tama4HomeEED1Ev>
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	3708      	adds	r7, #8
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	bd80      	pop	{r7, pc}

0800a9b0 <_ZNSt19_Sp_counted_deleterIPN4tama4HomeENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>:
      class _Impl : _Sp_ebo_helper<0, _Deleter>, _Sp_ebo_helper<1, _Alloc>
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b082      	sub	sp, #8
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	3301      	adds	r3, #1
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f7ff ffeb 	bl	800a998 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama4HomeEELb1EED1Ev>
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	f7ff ffda 	bl	800a97e <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama4HomeELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	3708      	adds	r7, #8
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	bd80      	pop	{r7, pc}

0800a9d4 <_ZNSt19_Sp_counted_deleterIPN4tama4HomeENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 800a9d4:	b590      	push	{r4, r7, lr}
 800a9d6:	b087      	sub	sp, #28
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	60f8      	str	r0, [r7, #12]
 800a9dc:	60b9      	str	r1, [r7, #8]
 800a9de:	607a      	str	r2, [r7, #4]
 800a9e0:	603b      	str	r3, [r7, #0]
      : _M_impl(__p, std::move(__d), __a) { }
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	f7f9 feaf 	bl	8004748 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800a9ea:	4a10      	ldr	r2, [pc, #64]	; (800aa2c <_ZNSt19_Sp_counted_deleterIPN4tama4HomeENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_+0x58>)
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	601a      	str	r2, [r3, #0]
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	f103 040c 	add.w	r4, r3, #12
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f7ff fdd4 	bl	800a5a4 <_ZSt4moveIRNSt12__shared_ptrIN4tama4HomeELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800a9fc:	4602      	mov	r2, r0
 800a9fe:	f107 0314 	add.w	r3, r7, #20
 800aa02:	4611      	mov	r1, r2
 800aa04:	4618      	mov	r0, r3
 800aa06:	f7ff fdd8 	bl	800a5ba <_ZNSt12__shared_ptrIN4tama4HomeELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 800aa0a:	f107 0214 	add.w	r2, r7, #20
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	68b9      	ldr	r1, [r7, #8]
 800aa12:	4620      	mov	r0, r4
 800aa14:	f000 f910 	bl	800ac38 <_ZNSt19_Sp_counted_deleterIPN4tama4HomeENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>
 800aa18:	f107 0314 	add.w	r3, r7, #20
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	f7ff fc3c 	bl	800a29a <_ZNSt12__shared_ptrIN4tama4HomeELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	4618      	mov	r0, r3
 800aa26:	371c      	adds	r7, #28
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bd90      	pop	{r4, r7, pc}
 800aa2c:	08023714 	.word	0x08023714

0800aa30 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama4HomeENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 800aa30:	b480      	push	{r7}
 800aa32:	b083      	sub	sp, #12
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
 800aa38:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	605a      	str	r2, [r3, #4]
	return *this;
 800aa40:	687b      	ldr	r3, [r7, #4]
      }
 800aa42:	4618      	mov	r0, r3
 800aa44:	370c      	adds	r7, #12
 800aa46:	46bd      	mov	sp, r7
 800aa48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4c:	4770      	bx	lr

0800aa4e <_ZNSt12__shared_ptrIN4tama4HomeELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>:
          void operator()(typename _Alloc::value_type* __ptr)
 800aa4e:	b590      	push	{r4, r7, lr}
 800aa50:	b085      	sub	sp, #20
 800aa52:	af00      	add	r7, sp, #0
 800aa54:	6078      	str	r0, [r7, #4]
 800aa56:	6039      	str	r1, [r7, #0]
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 800aa58:	6879      	ldr	r1, [r7, #4]
 800aa5a:	f107 0308 	add.w	r3, r7, #8
 800aa5e:	683a      	ldr	r2, [r7, #0]
 800aa60:	4618      	mov	r0, r3
 800aa62:	f7ff fef4 	bl	800a84e <_ZNSt15__allocated_ptrISaIN4tama4HomeEEEC1ERS2_PS1_>
	    allocator_traits<_Alloc>::destroy(_M_alloc, __guard.get());
 800aa66:	687c      	ldr	r4, [r7, #4]
 800aa68:	f107 0308 	add.w	r3, r7, #8
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f7ff fd69 	bl	800a544 <_ZNSt15__allocated_ptrISaIN4tama4HomeEEE3getEv>
 800aa72:	4603      	mov	r3, r0
 800aa74:	4619      	mov	r1, r3
 800aa76:	4620      	mov	r0, r4
 800aa78:	f000 f8fc 	bl	800ac74 <_ZNSt16allocator_traitsISaIN4tama4HomeEEE7destroyIS1_EEvRS2_PT_>
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 800aa7c:	f107 0308 	add.w	r3, r7, #8
 800aa80:	4618      	mov	r0, r3
 800aa82:	f7ff fd4a 	bl	800a51a <_ZNSt15__allocated_ptrISaIN4tama4HomeEEED1Ev>
          }
 800aa86:	bf00      	nop
 800aa88:	3714      	adds	r7, #20
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd90      	pop	{r4, r7, pc}
	...

0800aa90 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800aa90:	b480      	push	{r7}
 800aa92:	b083      	sub	sp, #12
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800aa98:	4b03      	ldr	r3, [pc, #12]	; (800aaa8 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv+0x18>)
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	370c      	adds	r7, #12
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa4:	4770      	bx	lr
 800aaa6:	bf00      	nop
 800aaa8:	0aaaaaaa 	.word	0x0aaaaaaa

0800aaac <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800aaac:	b590      	push	{r4, r7, lr}
 800aaae:	b087      	sub	sp, #28
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	60f8      	str	r0, [r7, #12]
 800aab4:	60b9      	str	r1, [r7, #8]
 800aab6:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 800aabc:	f107 0208 	add.w	r2, r7, #8
 800aac0:	f107 030c 	add.w	r3, r7, #12
 800aac4:	4611      	mov	r1, r2
 800aac6:	4618      	mov	r0, r3
 800aac8:	f000 f8e1 	bl	800ac8e <_ZStneIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>
 800aacc:	4603      	mov	r3, r0
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d016      	beq.n	800ab00 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_+0x54>
		std::_Construct(std::__addressof(*__cur), *__first);
 800aad2:	6978      	ldr	r0, [r7, #20]
 800aad4:	f7fe fbda 	bl	800928c <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 800aad8:	4604      	mov	r4, r0
 800aada:	f107 030c 	add.w	r3, r7, #12
 800aade:	4618      	mov	r0, r3
 800aae0:	f000 f8f7 	bl	800acd2 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>
 800aae4:	4603      	mov	r3, r0
 800aae6:	4619      	mov	r1, r3
 800aae8:	4620      	mov	r0, r4
 800aaea:	f000 f909 	bl	800ad00 <_ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 800aaee:	f107 030c 	add.w	r3, r7, #12
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	f000 f8dc 	bl	800acb0 <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>
 800aaf8:	697b      	ldr	r3, [r7, #20]
 800aafa:	3318      	adds	r3, #24
 800aafc:	617b      	str	r3, [r7, #20]
 800aafe:	e7dd      	b.n	800aabc <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_+0x10>
	      return __cur;
 800ab00:	697b      	ldr	r3, [r7, #20]
	}
 800ab02:	4618      	mov	r0, r3
 800ab04:	371c      	adds	r7, #28
 800ab06:	46bd      	mov	sp, r7
 800ab08:	bd90      	pop	{r4, r7, pc}

0800ab0a <_ZNK9__gnu_cxx17__normal_iteratorIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800ab0a:	b480      	push	{r7}
 800ab0c:	b083      	sub	sp, #12
 800ab0e:	af00      	add	r7, sp, #0
 800ab10:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	4618      	mov	r0, r3
 800ab16:	370c      	adds	r7, #12
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1e:	4770      	bx	lr

0800ab20 <_ZN9__gnu_cxx13new_allocatorIN4tama4HomeEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b084      	sub	sp, #16
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	60f8      	str	r0, [r7, #12]
 800ab28:	60b9      	str	r1, [r7, #8]
 800ab2a:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800ab2c:	68f8      	ldr	r0, [r7, #12]
 800ab2e:	f000 f901 	bl	800ad34 <_ZNK9__gnu_cxx13new_allocatorIN4tama4HomeEE8max_sizeEv>
 800ab32:	4602      	mov	r2, r0
 800ab34:	68bb      	ldr	r3, [r7, #8]
 800ab36:	4293      	cmp	r3, r2
 800ab38:	bf8c      	ite	hi
 800ab3a:	2301      	movhi	r3, #1
 800ab3c:	2300      	movls	r3, #0
 800ab3e:	b2db      	uxtb	r3, r3
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d001      	beq.n	800ab48 <_ZN9__gnu_cxx13new_allocatorIN4tama4HomeEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800ab44:	f014 fee9 	bl	801f91a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800ab48:	68bb      	ldr	r3, [r7, #8]
 800ab4a:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 800ab4e:	fb02 f303 	mul.w	r3, r2, r3
 800ab52:	4618      	mov	r0, r3
 800ab54:	f014 feb3 	bl	801f8be <_Znwj>
 800ab58:	4603      	mov	r3, r0
      }
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	3710      	adds	r7, #16
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}

0800ab62 <_ZSt11__addressofISaIN4tama4HomeEEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800ab62:	b480      	push	{r7}
 800ab64:	b083      	sub	sp, #12
 800ab66:	af00      	add	r7, sp, #0
 800ab68:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	370c      	adds	r7, #12
 800ab70:	46bd      	mov	sp, r7
 800ab72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab76:	4770      	bx	lr

0800ab78 <_ZN9__gnu_cxx13new_allocatorIN4tama4HomeEE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b084      	sub	sp, #16
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	60f8      	str	r0, [r7, #12]
 800ab80:	60b9      	str	r1, [r7, #8]
 800ab82:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800ab84:	68b8      	ldr	r0, [r7, #8]
 800ab86:	f014 feb3 	bl	801f8f0 <_ZdlPv>
      }
 800ab8a:	bf00      	nop
 800ab8c:	3710      	adds	r7, #16
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	bd80      	pop	{r7, pc}

0800ab92 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama4HomeENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800ab92:	b480      	push	{r7}
 800ab94:	b083      	sub	sp, #12
 800ab96:	af00      	add	r7, sp, #0
 800ab98:	6078      	str	r0, [r7, #4]
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	370c      	adds	r7, #12
 800aba0:	46bd      	mov	sp, r7
 800aba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba6:	4770      	bx	lr

0800aba8 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama4HomeENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800aba8:	b480      	push	{r7}
 800abaa:	b083      	sub	sp, #12
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	4618      	mov	r0, r3
 800abb4:	370c      	adds	r7, #12
 800abb6:	46bd      	mov	sp, r7
 800abb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbc:	4770      	bx	lr

0800abbe <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama4HomeENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>:
      allocate(allocator_type& __a, size_type __n)
 800abbe:	b580      	push	{r7, lr}
 800abc0:	b082      	sub	sp, #8
 800abc2:	af00      	add	r7, sp, #0
 800abc4:	6078      	str	r0, [r7, #4]
 800abc6:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800abc8:	2200      	movs	r2, #0
 800abca:	6839      	ldr	r1, [r7, #0]
 800abcc:	6878      	ldr	r0, [r7, #4]
 800abce:	f000 f8bf 	bl	800ad50 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama4HomeENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>
 800abd2:	4603      	mov	r3, r0
 800abd4:	4618      	mov	r0, r3
 800abd6:	3708      	adds	r7, #8
 800abd8:	46bd      	mov	sp, r7
 800abda:	bd80      	pop	{r7, pc}

0800abdc <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama4HomeENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 800abdc:	b580      	push	{r7, lr}
 800abde:	b084      	sub	sp, #16
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	60f8      	str	r0, [r7, #12]
 800abe4:	60b9      	str	r1, [r7, #8]
 800abe6:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800abe8:	68b8      	ldr	r0, [r7, #8]
 800abea:	f000 f8d2 	bl	800ad92 <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama4HomeENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>
 800abee:	4602      	mov	r2, r0
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	601a      	str	r2, [r3, #0]
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	687a      	ldr	r2, [r7, #4]
 800abf8:	605a      	str	r2, [r3, #4]
      { }
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	4618      	mov	r0, r3
 800abfe:	3710      	adds	r7, #16
 800ac00:	46bd      	mov	sp, r7
 800ac02:	bd80      	pop	{r7, pc}

0800ac04 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama4HomeENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b084      	sub	sp, #16
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	60f8      	str	r0, [r7, #12]
 800ac0c:	60b9      	str	r1, [r7, #8]
 800ac0e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800ac10:	687a      	ldr	r2, [r7, #4]
 800ac12:	68b9      	ldr	r1, [r7, #8]
 800ac14:	68f8      	ldr	r0, [r7, #12]
 800ac16:	f000 f8c7 	bl	800ada8 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama4HomeENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>
 800ac1a:	bf00      	nop
 800ac1c:	3710      	adds	r7, #16
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	bd80      	pop	{r7, pc}

0800ac22 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama4HomeENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 800ac22:	b480      	push	{r7}
 800ac24:	b083      	sub	sp, #12
 800ac26:	af00      	add	r7, sp, #0
 800ac28:	6078      	str	r0, [r7, #4]
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	370c      	adds	r7, #12
 800ac30:	46bd      	mov	sp, r7
 800ac32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac36:	4770      	bx	lr

0800ac38 <_ZNSt19_Sp_counted_deleterIPN4tama4HomeENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 800ac38:	b590      	push	{r4, r7, lr}
 800ac3a:	b085      	sub	sp, #20
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	60f8      	str	r0, [r7, #12]
 800ac40:	60b9      	str	r1, [r7, #8]
 800ac42:	607a      	str	r2, [r7, #4]
 800ac44:	603b      	str	r3, [r7, #0]
	: _M_ptr(__p), _Del_base(std::move(__d)), _Alloc_base(__a)
 800ac46:	68fc      	ldr	r4, [r7, #12]
 800ac48:	6878      	ldr	r0, [r7, #4]
 800ac4a:	f7ff fcab 	bl	800a5a4 <_ZSt4moveIRNSt12__shared_ptrIN4tama4HomeELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800ac4e:	4603      	mov	r3, r0
 800ac50:	4619      	mov	r1, r3
 800ac52:	4620      	mov	r0, r4
 800ac54:	f000 f8b5 	bl	800adc2 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama4HomeELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	3301      	adds	r3, #1
 800ac5c:	6839      	ldr	r1, [r7, #0]
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f000 f8c2 	bl	800ade8 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama4HomeEELb1EEC1ERKS2_>
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	68ba      	ldr	r2, [r7, #8]
 800ac68:	605a      	str	r2, [r3, #4]
	{ }
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	3714      	adds	r7, #20
 800ac70:	46bd      	mov	sp, r7
 800ac72:	bd90      	pop	{r4, r7, pc}

0800ac74 <_ZNSt16allocator_traitsISaIN4tama4HomeEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b082      	sub	sp, #8
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
 800ac7c:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 800ac7e:	6839      	ldr	r1, [r7, #0]
 800ac80:	6878      	ldr	r0, [r7, #4]
 800ac82:	f000 f921 	bl	800aec8 <_ZN9__gnu_cxx13new_allocatorIN4tama4HomeEE7destroyIS2_EEvPT_>
 800ac86:	bf00      	nop
 800ac88:	3708      	adds	r7, #8
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bd80      	pop	{r7, pc}

0800ac8e <_ZStneIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>:
    operator!=(const move_iterator<_Iterator>& __x,
 800ac8e:	b580      	push	{r7, lr}
 800ac90:	b082      	sub	sp, #8
 800ac92:	af00      	add	r7, sp, #0
 800ac94:	6078      	str	r0, [r7, #4]
 800ac96:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 800ac98:	6839      	ldr	r1, [r7, #0]
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	f000 f920 	bl	800aee0 <_ZSteqIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>
 800aca0:	4603      	mov	r3, r0
 800aca2:	f083 0301 	eor.w	r3, r3, #1
 800aca6:	b2db      	uxtb	r3, r3
 800aca8:	4618      	mov	r0, r3
 800acaa:	3708      	adds	r7, #8
 800acac:	46bd      	mov	sp, r7
 800acae:	bd80      	pop	{r7, pc}

0800acb0 <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>:
      operator++()
 800acb0:	b480      	push	{r7}
 800acb2:	b083      	sub	sp, #12
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
	++_M_current;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	f103 0218 	add.w	r2, r3, #24
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	601a      	str	r2, [r3, #0]
	return *this;
 800acc4:	687b      	ldr	r3, [r7, #4]
      }
 800acc6:	4618      	mov	r0, r3
 800acc8:	370c      	adds	r7, #12
 800acca:	46bd      	mov	sp, r7
 800accc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd0:	4770      	bx	lr

0800acd2 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>:
      operator*() const
 800acd2:	b480      	push	{r7}
 800acd4:	b083      	sub	sp, #12
 800acd6:	af00      	add	r7, sp, #0
 800acd8:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	4618      	mov	r0, r3
 800ace0:	370c      	adds	r7, #12
 800ace2:	46bd      	mov	sp, r7
 800ace4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace8:	4770      	bx	lr

0800acea <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800acea:	b480      	push	{r7}
 800acec:	b083      	sub	sp, #12
 800acee:	af00      	add	r7, sp, #0
 800acf0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	4618      	mov	r0, r3
 800acf6:	370c      	adds	r7, #12
 800acf8:	46bd      	mov	sp, r7
 800acfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfe:	4770      	bx	lr

0800ad00 <_ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_EEvPT_DpOT0_>:
    _Construct(_T1* __p, _Args&&... __args)
 800ad00:	b590      	push	{r4, r7, lr}
 800ad02:	b083      	sub	sp, #12
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
 800ad08:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
 800ad0a:	6838      	ldr	r0, [r7, #0]
 800ad0c:	f7ff ffed 	bl	800acea <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800ad10:	4604      	mov	r4, r0
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	4619      	mov	r1, r3
 800ad16:	2018      	movs	r0, #24
 800ad18:	f7f6 f991 	bl	800103e <_ZnwjPv>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d003      	beq.n	800ad2a <_ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_EEvPT_DpOT0_+0x2a>
 800ad22:	4621      	mov	r1, r4
 800ad24:	4618      	mov	r0, r3
 800ad26:	f014 fe94 	bl	801fa52 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 800ad2a:	bf00      	nop
 800ad2c:	370c      	adds	r7, #12
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bd90      	pop	{r4, r7, pc}
	...

0800ad34 <_ZNK9__gnu_cxx13new_allocatorIN4tama4HomeEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800ad34:	b480      	push	{r7}
 800ad36:	b083      	sub	sp, #12
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800ad3c:	4b03      	ldr	r3, [pc, #12]	; (800ad4c <_ZNK9__gnu_cxx13new_allocatorIN4tama4HomeEE8max_sizeEv+0x18>)
 800ad3e:	4618      	mov	r0, r3
 800ad40:	370c      	adds	r7, #12
 800ad42:	46bd      	mov	sp, r7
 800ad44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad48:	4770      	bx	lr
 800ad4a:	bf00      	nop
 800ad4c:	00991f1a 	.word	0x00991f1a

0800ad50 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama4HomeENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b084      	sub	sp, #16
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	60f8      	str	r0, [r7, #12]
 800ad58:	60b9      	str	r1, [r7, #8]
 800ad5a:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800ad5c:	68f8      	ldr	r0, [r7, #12]
 800ad5e:	f000 f8d5 	bl	800af0c <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama4HomeENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>
 800ad62:	4602      	mov	r2, r0
 800ad64:	68bb      	ldr	r3, [r7, #8]
 800ad66:	4293      	cmp	r3, r2
 800ad68:	bf8c      	ite	hi
 800ad6a:	2301      	movhi	r3, #1
 800ad6c:	2300      	movls	r3, #0
 800ad6e:	b2db      	uxtb	r3, r3
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d001      	beq.n	800ad78 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama4HomeENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800ad74:	f014 fdd1 	bl	801f91a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800ad78:	68ba      	ldr	r2, [r7, #8]
 800ad7a:	4613      	mov	r3, r2
 800ad7c:	009b      	lsls	r3, r3, #2
 800ad7e:	4413      	add	r3, r2
 800ad80:	009b      	lsls	r3, r3, #2
 800ad82:	4618      	mov	r0, r3
 800ad84:	f014 fd9b 	bl	801f8be <_Znwj>
 800ad88:	4603      	mov	r3, r0
      }
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	3710      	adds	r7, #16
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bd80      	pop	{r7, pc}

0800ad92 <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama4HomeENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800ad92:	b480      	push	{r7}
 800ad94:	b083      	sub	sp, #12
 800ad96:	af00      	add	r7, sp, #0
 800ad98:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	370c      	adds	r7, #12
 800ada0:	46bd      	mov	sp, r7
 800ada2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada6:	4770      	bx	lr

0800ada8 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama4HomeENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>:
      deallocate(pointer __p, size_type)
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b084      	sub	sp, #16
 800adac:	af00      	add	r7, sp, #0
 800adae:	60f8      	str	r0, [r7, #12]
 800adb0:	60b9      	str	r1, [r7, #8]
 800adb2:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800adb4:	68b8      	ldr	r0, [r7, #8]
 800adb6:	f014 fd9b 	bl	801f8f0 <_ZdlPv>
      }
 800adba:	bf00      	nop
 800adbc:	3710      	adds	r7, #16
 800adbe:	46bd      	mov	sp, r7
 800adc0:	bd80      	pop	{r7, pc}

0800adc2 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama4HomeELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _M_tp(std::move(__tp)) { }
 800adc2:	b590      	push	{r4, r7, lr}
 800adc4:	b083      	sub	sp, #12
 800adc6:	af00      	add	r7, sp, #0
 800adc8:	6078      	str	r0, [r7, #4]
 800adca:	6039      	str	r1, [r7, #0]
 800adcc:	687c      	ldr	r4, [r7, #4]
 800adce:	6838      	ldr	r0, [r7, #0]
 800add0:	f7ff fbe8 	bl	800a5a4 <_ZSt4moveIRNSt12__shared_ptrIN4tama4HomeELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800add4:	4603      	mov	r3, r0
 800add6:	4619      	mov	r1, r3
 800add8:	4620      	mov	r0, r4
 800adda:	f7ff fbee 	bl	800a5ba <_ZNSt12__shared_ptrIN4tama4HomeELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	4618      	mov	r0, r3
 800ade2:	370c      	adds	r7, #12
 800ade4:	46bd      	mov	sp, r7
 800ade6:	bd90      	pop	{r4, r7, pc}

0800ade8 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama4HomeEELb1EEC1ERKS2_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 800ade8:	b580      	push	{r7, lr}
 800adea:	b082      	sub	sp, #8
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
 800adf0:	6039      	str	r1, [r7, #0]
 800adf2:	6839      	ldr	r1, [r7, #0]
 800adf4:	6878      	ldr	r0, [r7, #4]
 800adf6:	f7ff fb6f 	bl	800a4d8 <_ZNSaIN4tama4HomeEEC1ERKS1_>
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	4618      	mov	r0, r3
 800adfe:	3708      	adds	r7, #8
 800ae00:	46bd      	mov	sp, r7
 800ae02:	bd80      	pop	{r7, pc}

0800ae04 <_ZNSt5arrayIN4tama6SpriteELj9EED1Ev>:
    struct array
 800ae04:	b590      	push	{r4, r7, lr}
 800ae06:	b083      	sub	sp, #12
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d00a      	beq.n	800ae28 <_ZNSt5arrayIN4tama6SpriteELj9EED1Ev+0x24>
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	f503 7490 	add.w	r4, r3, #288	; 0x120
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	429c      	cmp	r4, r3
 800ae1c:	d004      	beq.n	800ae28 <_ZNSt5arrayIN4tama6SpriteELj9EED1Ev+0x24>
 800ae1e:	3c20      	subs	r4, #32
 800ae20:	4620      	mov	r0, r4
 800ae22:	f7fa fd69 	bl	80058f8 <_ZN4tama6SpriteD1Ev>
 800ae26:	e7f7      	b.n	800ae18 <_ZNSt5arrayIN4tama6SpriteELj9EED1Ev+0x14>
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	370c      	adds	r7, #12
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	bd90      	pop	{r4, r7, pc}

0800ae32 <_ZN4tama11ActionIconsD1Ev>:
#include "../../display/scene/Scene.h"
#include "../../../runtime/context/Context.h"

namespace tama
{
    class ActionIcons
 800ae32:	b580      	push	{r7, lr}
 800ae34:	b082      	sub	sp, #8
 800ae36:	af00      	add	r7, sp, #0
 800ae38:	6078      	str	r0, [r7, #4]
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	f503 7398 	add.w	r3, r3, #304	; 0x130
 800ae40:	4618      	mov	r0, r3
 800ae42:	f7fa fd59 	bl	80058f8 <_ZN4tama6SpriteD1Ev>
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	3310      	adds	r3, #16
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	f7ff ffda 	bl	800ae04 <_ZNSt5arrayIN4tama6SpriteELj9EED1Ev>
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	3308      	adds	r3, #8
 800ae54:	4618      	mov	r0, r3
 800ae56:	f7fa fa05 	bl	8005264 <_ZNSt10shared_ptrIN4tama7ContextEED1Ev>
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	f7f8 fede 	bl	8003c1e <_ZNSt10shared_ptrIN4tama5SceneEED1Ev>
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	4618      	mov	r0, r3
 800ae66:	3708      	adds	r7, #8
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	bd80      	pop	{r7, pc}

0800ae6c <_ZN4tama4HomeD1Ev>:

namespace tama
{
    using namespace tama::asset;

    class Home : public Stage
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b082      	sub	sp, #8
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
 800ae74:	4a13      	ldr	r2, [pc, #76]	; (800aec4 <_ZN4tama4HomeD1Ev+0x58>)
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	601a      	str	r2, [r3, #0]
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800ae80:	4618      	mov	r0, r3
 800ae82:	f7fa fd39 	bl	80058f8 <_ZN4tama6SpriteD1Ev>
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	f7fa f9ac 	bl	80051ea <_ZNSt10shared_ptrIN4tama7TextureEED1Ev>
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800ae98:	4618      	mov	r0, r3
 800ae9a:	f7fa f9a6 	bl	80051ea <_ZNSt10shared_ptrIN4tama7TextureEED1Ev>
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	3328      	adds	r3, #40	; 0x28
 800aea2:	4618      	mov	r0, r3
 800aea4:	f7ff ffc5 	bl	800ae32 <_ZN4tama11ActionIconsD1Ev>
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	3318      	adds	r3, #24
 800aeac:	4618      	mov	r0, r3
 800aeae:	f7fa fa0d 	bl	80052cc <_ZNSt10shared_ptrIN4tama11TimeMonitorEED1Ev>
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	f7fa f9e3 	bl	8005280 <_ZN4tama5StageD1Ev>
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	4618      	mov	r0, r3
 800aebe:	3708      	adds	r7, #8
 800aec0:	46bd      	mov	sp, r7
 800aec2:	bd80      	pop	{r7, pc}
 800aec4:	08023700 	.word	0x08023700

0800aec8 <_ZN9__gnu_cxx13new_allocatorIN4tama4HomeEE7destroyIS2_EEvPT_>:
	destroy(_Up* __p) { __p->~_Up(); }
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b082      	sub	sp, #8
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
 800aed0:	6039      	str	r1, [r7, #0]
 800aed2:	6838      	ldr	r0, [r7, #0]
 800aed4:	f7ff ffca 	bl	800ae6c <_ZN4tama4HomeD1Ev>
 800aed8:	bf00      	nop
 800aeda:	3708      	adds	r7, #8
 800aedc:	46bd      	mov	sp, r7
 800aede:	bd80      	pop	{r7, pc}

0800aee0 <_ZSteqIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>:
    operator==(const move_iterator<_Iterator>& __x,
 800aee0:	b590      	push	{r4, r7, lr}
 800aee2:	b083      	sub	sp, #12
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
 800aee8:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	f000 f81c 	bl	800af28 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 800aef0:	4604      	mov	r4, r0
 800aef2:	6838      	ldr	r0, [r7, #0]
 800aef4:	f000 f818 	bl	800af28 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 800aef8:	4603      	mov	r3, r0
 800aefa:	429c      	cmp	r4, r3
 800aefc:	bf0c      	ite	eq
 800aefe:	2301      	moveq	r3, #1
 800af00:	2300      	movne	r3, #0
 800af02:	b2db      	uxtb	r3, r3
 800af04:	4618      	mov	r0, r3
 800af06:	370c      	adds	r7, #12
 800af08:	46bd      	mov	sp, r7
 800af0a:	bd90      	pop	{r4, r7, pc}

0800af0c <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama4HomeENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800af0c:	b480      	push	{r7}
 800af0e:	b083      	sub	sp, #12
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800af14:	4b03      	ldr	r3, [pc, #12]	; (800af24 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama4HomeENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv+0x18>)
 800af16:	4618      	mov	r0, r3
 800af18:	370c      	adds	r7, #12
 800af1a:	46bd      	mov	sp, r7
 800af1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af20:	4770      	bx	lr
 800af22:	bf00      	nop
 800af24:	0ccccccc 	.word	0x0ccccccc

0800af28 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>:
      base() const
 800af28:	b480      	push	{r7}
 800af2a:	b083      	sub	sp, #12
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	4618      	mov	r0, r3
 800af36:	370c      	adds	r7, #12
 800af38:	46bd      	mov	sp, r7
 800af3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3e:	4770      	bx	lr

0800af40 <_ZNSt19_Sp_counted_deleterIPN4tama4HomeENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 800af40:	b580      	push	{r7, lr}
 800af42:	b082      	sub	sp, #8
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
 800af48:	4a08      	ldr	r2, [pc, #32]	; (800af6c <_ZNSt19_Sp_counted_deleterIPN4tama4HomeENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev+0x2c>)
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	601a      	str	r2, [r3, #0]
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	330c      	adds	r3, #12
 800af52:	4618      	mov	r0, r3
 800af54:	f7ff fd2c 	bl	800a9b0 <_ZNSt19_Sp_counted_deleterIPN4tama4HomeENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	4618      	mov	r0, r3
 800af5c:	f7f8 ff7a 	bl	8003e54 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	4618      	mov	r0, r3
 800af64:	3708      	adds	r7, #8
 800af66:	46bd      	mov	sp, r7
 800af68:	bd80      	pop	{r7, pc}
 800af6a:	bf00      	nop
 800af6c:	08023714 	.word	0x08023714

0800af70 <_ZNSt19_Sp_counted_deleterIPN4tama4HomeENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
 800af70:	b580      	push	{r7, lr}
 800af72:	b082      	sub	sp, #8
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
 800af78:	6878      	ldr	r0, [r7, #4]
 800af7a:	f7ff ffe1 	bl	800af40 <_ZNSt19_Sp_counted_deleterIPN4tama4HomeENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
 800af7e:	2114      	movs	r1, #20
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f014 fc9a 	bl	801f8ba <_ZdlPvj>
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	4618      	mov	r0, r3
 800af8a:	3708      	adds	r7, #8
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bd80      	pop	{r7, pc}

0800af90 <_ZNSt19_Sp_counted_deleterIPN4tama4HomeENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      _M_dispose() noexcept
 800af90:	b580      	push	{r7, lr}
 800af92:	b082      	sub	sp, #8
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	330c      	adds	r3, #12
 800af9c:	4618      	mov	r0, r3
 800af9e:	f000 f840 	bl	800b022 <_ZNSt19_Sp_counted_deleterIPN4tama4HomeENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>
 800afa2:	4602      	mov	r2, r0
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	691b      	ldr	r3, [r3, #16]
 800afa8:	4619      	mov	r1, r3
 800afaa:	4610      	mov	r0, r2
 800afac:	f7ff fd4f 	bl	800aa4e <_ZNSt12__shared_ptrIN4tama4HomeELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>
 800afb0:	bf00      	nop
 800afb2:	3708      	adds	r7, #8
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bd80      	pop	{r7, pc}

0800afb8 <_ZNSt19_Sp_counted_deleterIPN4tama4HomeENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      _M_destroy() noexcept
 800afb8:	b580      	push	{r7, lr}
 800afba:	b086      	sub	sp, #24
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	330c      	adds	r3, #12
 800afc4:	4618      	mov	r0, r3
 800afc6:	f000 f839 	bl	800b03c <_ZNSt19_Sp_counted_deleterIPN4tama4HomeENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>
 800afca:	4602      	mov	r2, r0
 800afcc:	f107 0314 	add.w	r3, r7, #20
 800afd0:	4611      	mov	r1, r2
 800afd2:	4618      	mov	r0, r3
 800afd4:	f7ff fc84 	bl	800a8e0 <_ZNSaISt19_Sp_counted_deleterIPN4tama4HomeENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 800afd8:	f107 0114 	add.w	r1, r7, #20
 800afdc:	f107 030c 	add.w	r3, r7, #12
 800afe0:	687a      	ldr	r2, [r7, #4]
 800afe2:	4618      	mov	r0, r3
 800afe4:	f7ff fdfa 	bl	800abdc <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama4HomeENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
	this->~_Sp_counted_deleter();
 800afe8:	6878      	ldr	r0, [r7, #4]
 800afea:	f7ff ffa9 	bl	800af40 <_ZNSt19_Sp_counted_deleterIPN4tama4HomeENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 800afee:	f107 030c 	add.w	r3, r7, #12
 800aff2:	4618      	mov	r0, r3
 800aff4:	f7ff fca0 	bl	800a938 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama4HomeENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	__allocator_type __a(_M_impl._M_alloc());
 800aff8:	f107 0314 	add.w	r3, r7, #20
 800affc:	4618      	mov	r0, r3
 800affe:	f7ff fc7c 	bl	800a8fa <_ZNSaISt19_Sp_counted_deleterIPN4tama4HomeENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
      }
 800b002:	bf00      	nop
 800b004:	3718      	adds	r7, #24
 800b006:	46bd      	mov	sp, r7
 800b008:	bd80      	pop	{r7, pc}

0800b00a <_ZNSt19_Sp_counted_deleterIPN4tama4HomeENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept
 800b00a:	b480      	push	{r7}
 800b00c:	b083      	sub	sp, #12
 800b00e:	af00      	add	r7, sp, #0
 800b010:	6078      	str	r0, [r7, #4]
 800b012:	6039      	str	r1, [r7, #0]
        return nullptr;
 800b014:	2300      	movs	r3, #0
      }
 800b016:	4618      	mov	r0, r3
 800b018:	370c      	adds	r7, #12
 800b01a:	46bd      	mov	sp, r7
 800b01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b020:	4770      	bx	lr

0800b022 <_ZNSt19_Sp_counted_deleterIPN4tama4HomeENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 800b022:	b580      	push	{r7, lr}
 800b024:	b082      	sub	sp, #8
 800b026:	af00      	add	r7, sp, #0
 800b028:	6078      	str	r0, [r7, #4]
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	4618      	mov	r0, r3
 800b02e:	f000 f813 	bl	800b058 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama4HomeELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>
 800b032:	4603      	mov	r3, r0
 800b034:	4618      	mov	r0, r3
 800b036:	3708      	adds	r7, #8
 800b038:	46bd      	mov	sp, r7
 800b03a:	bd80      	pop	{r7, pc}

0800b03c <_ZNSt19_Sp_counted_deleterIPN4tama4HomeENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b082      	sub	sp, #8
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	3301      	adds	r3, #1
 800b048:	4618      	mov	r0, r3
 800b04a:	f000 f810 	bl	800b06e <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama4HomeEELb1EE6_S_getERS3_>
 800b04e:	4603      	mov	r3, r0
 800b050:	4618      	mov	r0, r3
 800b052:	3708      	adds	r7, #8
 800b054:	46bd      	mov	sp, r7
 800b056:	bd80      	pop	{r7, pc}

0800b058 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama4HomeELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>:
      _S_get(_Sp_ebo_helper& __eboh)
 800b058:	b480      	push	{r7}
 800b05a:	b083      	sub	sp, #12
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
      { return __eboh._M_tp; }
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	4618      	mov	r0, r3
 800b064:	370c      	adds	r7, #12
 800b066:	46bd      	mov	sp, r7
 800b068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06c:	4770      	bx	lr

0800b06e <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama4HomeEELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 800b06e:	b480      	push	{r7}
 800b070:	b083      	sub	sp, #12
 800b072:	af00      	add	r7, sp, #0
 800b074:	6078      	str	r0, [r7, #4]
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	4618      	mov	r0, r3
 800b07a:	370c      	adds	r7, #12
 800b07c:	46bd      	mov	sp, r7
 800b07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b082:	4770      	bx	lr

0800b084 <_ZNSt7__cxx119to_stringEi>:
  // NB: (v)snprintf vs sprintf.

  // DR 1261.
  inline string
  to_string(int __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(int),
 800b084:	b580      	push	{r7, lr}
 800b086:	b084      	sub	sp, #16
 800b088:	af02      	add	r7, sp, #8
 800b08a:	6078      	str	r0, [r7, #4]
 800b08c:	6039      	str	r1, [r7, #0]
					   "%d", __val); }
 800b08e:	6878      	ldr	r0, [r7, #4]
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	9300      	str	r3, [sp, #0]
 800b094:	4b04      	ldr	r3, [pc, #16]	; (800b0a8 <_ZNSt7__cxx119to_stringEi+0x24>)
 800b096:	2210      	movs	r2, #16
 800b098:	4904      	ldr	r1, [pc, #16]	; (800b0ac <_ZNSt7__cxx119to_stringEi+0x28>)
 800b09a:	f000 fb85 	bl	800b7a8 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
 800b09e:	6878      	ldr	r0, [r7, #4]
 800b0a0:	3708      	adds	r7, #8
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	bd80      	pop	{r7, pc}
 800b0a6:	bf00      	nop
 800b0a8:	080209dc 	.word	0x080209dc
 800b0ac:	080202cd 	.word	0x080202cd

0800b0b0 <_ZN4tama11JumpingGameC1ERKSt10shared_ptrINS_7ContextEE>:

#include "JumpingGame.h"

void frameOnJump();

tama::JumpingGame::JumpingGame(const std::shared_ptr<Context> &context) : Stage(context)
 800b0b0:	b5b0      	push	{r4, r5, r7, lr}
 800b0b2:	b0b4      	sub	sp, #208	; 0xd0
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
 800b0b8:	6039      	str	r1, [r7, #0]
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	6839      	ldr	r1, [r7, #0]
 800b0be:	4618      	mov	r0, r3
 800b0c0:	f7f8 fe1c 	bl	8003cfc <_ZN4tama5StageC1ERKSt10shared_ptrINS_7ContextEE>
 800b0c4:	4acf      	ldr	r2, [pc, #828]	; (800b404 <_ZN4tama11JumpingGameC1ERKSt10shared_ptrINS_7ContextEE+0x354>)
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	601a      	str	r2, [r3, #0]
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	f103 0414 	add.w	r4, r3, #20
 800b0d0:	f107 0320 	add.w	r3, r7, #32
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	f014 fc1e 	bl	801f916 <_ZNSaIcEC1Ev>
 800b0da:	f107 0220 	add.w	r2, r7, #32
 800b0de:	f107 0308 	add.w	r3, r7, #8
 800b0e2:	49c9      	ldr	r1, [pc, #804]	; (800b408 <_ZN4tama11JumpingGameC1ERKSt10shared_ptrINS_7ContextEE+0x358>)
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	f014 fd19 	bl	801fb1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800b0ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b0ee:	f06f 0205 	mvn.w	r2, #5
 800b0f2:	f06f 0105 	mvn.w	r1, #5
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	f7f5 fed8 	bl	8000eac <_ZN4tama5Vec2dC1Eii>
 800b0fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b100:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800b104:	4611      	mov	r1, r2
 800b106:	4618      	mov	r0, r3
 800b108:	f7f5 ff00 	bl	8000f0c <_ZN4tama4util15fromBottomRightERKNS_5Vec2dE>
 800b10c:	f107 0108 	add.w	r1, r7, #8
 800b110:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b114:	cb0c      	ldmia	r3, {r2, r3}
 800b116:	4620      	mov	r0, r4
 800b118:	f004 fb16 	bl	800f748 <_ZN4tama4TextC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS_5Vec2dE>
 800b11c:	f107 0308 	add.w	r3, r7, #8
 800b120:	4618      	mov	r0, r3
 800b122:	f014 fcb0 	bl	801fa86 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b126:	f107 0320 	add.w	r3, r7, #32
 800b12a:	4618      	mov	r0, r3
 800b12c:	f014 fbf4 	bl	801f918 <_ZNSaIcED1Ev>
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	f103 045c 	add.w	r4, r3, #92	; 0x5c
 800b136:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800b13a:	4618      	mov	r0, r3
 800b13c:	f014 fbeb 	bl	801f916 <_ZNSaIcEC1Ev>
 800b140:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800b144:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b148:	49b0      	ldr	r1, [pc, #704]	; (800b40c <_ZN4tama11JumpingGameC1ERKSt10shared_ptrINS_7ContextEE+0x35c>)
 800b14a:	4618      	mov	r0, r3
 800b14c:	f014 fce6 	bl	801fb1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800b150:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b154:	2205      	movs	r2, #5
 800b156:	2114      	movs	r1, #20
 800b158:	4618      	mov	r0, r3
 800b15a:	f7f5 fea7 	bl	8000eac <_ZN4tama5Vec2dC1Eii>
 800b15e:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800b162:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b166:	cb0c      	ldmia	r3, {r2, r3}
 800b168:	4620      	mov	r0, r4
 800b16a:	f004 faed 	bl	800f748 <_ZN4tama4TextC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS_5Vec2dE>
 800b16e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b172:	4618      	mov	r0, r3
 800b174:	f014 fc87 	bl	801fa86 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b178:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800b17c:	4618      	mov	r0, r3
 800b17e:	f014 fbcb 	bl	801f918 <_ZNSaIcED1Ev>
        void onFrame() override;

    private:
        Text obstacle = Text(std::string("H"), tama::util::fromBottomRight(Vec2d(-6, -6)));
        Text pointsText = Text(std::string("0"), Vec2d(20, 5));
        std::shared_ptr<Texture> petFrontPosOne = context->getTextureLoader()->load(
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	330c      	adds	r3, #12
 800b186:	4618      	mov	r0, r3
 800b188:	f7f8 fe20 	bl	8003dcc <_ZNKSt19__shared_ptr_accessIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800b18c:	4602      	mov	r2, r0
 800b18e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b192:	4611      	mov	r1, r2
 800b194:	4618      	mov	r0, r3
 800b196:	f7f7 ff2d 	bl	8002ff4 <_ZN4tama7Context16getTextureLoaderEv>
 800b19a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b19e:	4618      	mov	r0, r3
 800b1a0:	f7fa fc44 	bl	8005a2c <_ZNKSt19__shared_ptr_accessIN4tama13TextureLoaderELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800b1a4:	4605      	mov	r5, r0
                *context->getGameState().getPetDb().getPetTextures({first, BABY, MASCULINE}).frontStandard
                );
 800b1a6:	682b      	ldr	r3, [r5, #0]
 800b1a8:	681c      	ldr	r4, [r3, #0]
                *context->getGameState().getPetDb().getPetTextures({first, BABY, MASCULINE}).frontStandard
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	330c      	adds	r3, #12
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	f7f8 fe0c 	bl	8003dcc <_ZNKSt19__shared_ptr_accessIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800b1b4:	4603      	mov	r3, r0
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	f7f7 ff3a 	bl	8003030 <_ZN4tama7Context12getGameStateEv>
 800b1bc:	4603      	mov	r3, r0
 800b1be:	4618      	mov	r0, r3
 800b1c0:	f7f5 ff31 	bl	8001026 <_ZN4tama9GameState8getPetDbEv>
 800b1c4:	4601      	mov	r1, r0
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 800b1d8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b1dc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800b1de:	4618      	mov	r0, r3
 800b1e0:	f7f6 f882 	bl	80012e8 <_ZN4tama5PetDb14getPetTexturesENS_13PetIdentifierE>
 800b1e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	33a4      	adds	r3, #164	; 0xa4
 800b1ea:	4629      	mov	r1, r5
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	47a0      	blx	r4
        std::shared_ptr<Texture> petFrontPosOne = context->getTextureLoader()->load(
 800b1f0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	f7fa fbb9 	bl	800596c <_ZNSt10shared_ptrIN4tama13TextureLoaderEED1Ev>
        std::shared_ptr<Texture> petFrontPosTwo = context->getTextureLoader()->load(firstMale::baby::frontTwo);
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	330c      	adds	r3, #12
 800b1fe:	4618      	mov	r0, r3
 800b200:	f7f8 fde4 	bl	8003dcc <_ZNKSt19__shared_ptr_accessIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800b204:	4602      	mov	r2, r0
 800b206:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800b20a:	4611      	mov	r1, r2
 800b20c:	4618      	mov	r0, r3
 800b20e:	f7f7 fef1 	bl	8002ff4 <_ZN4tama7Context16getTextureLoaderEv>
 800b212:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800b216:	4618      	mov	r0, r3
 800b218:	f7fa fc08 	bl	8005a2c <_ZNKSt19__shared_ptr_accessIN4tama13TextureLoaderELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800b21c:	4601      	mov	r1, r0
 800b21e:	680b      	ldr	r3, [r1, #0]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	687a      	ldr	r2, [r7, #4]
 800b224:	f102 00ac 	add.w	r0, r2, #172	; 0xac
 800b228:	4a79      	ldr	r2, [pc, #484]	; (800b410 <_ZN4tama11JumpingGameC1ERKSt10shared_ptrINS_7ContextEE+0x360>)
 800b22a:	4798      	blx	r3
 800b22c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800b230:	4618      	mov	r0, r3
 800b232:	f7fa fb9b 	bl	800596c <_ZNSt10shared_ptrIN4tama13TextureLoaderEED1Ev>
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	f103 04b4 	add.w	r4, r3, #180	; 0xb4
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	f103 05a4 	add.w	r5, r3, #164	; 0xa4
        Sprite pet = Sprite(petFrontPosOne, Vec2d(tama::util::fromBottomLeft(Vec2d(5, -petFrontPosOne->height + 1))));
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	33a4      	adds	r3, #164	; 0xa4
 800b246:	4618      	mov	r0, r3
 800b248:	f7fb ff32 	bl	80070b0 <_ZNKSt19__shared_ptr_accessIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800b24c:	4603      	mov	r3, r0
 800b24e:	685b      	ldr	r3, [r3, #4]
 800b250:	f1c3 0301 	rsb	r3, r3, #1
 800b254:	461a      	mov	r2, r3
 800b256:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800b25a:	2105      	movs	r1, #5
 800b25c:	4618      	mov	r0, r3
 800b25e:	f7f5 fe25 	bl	8000eac <_ZN4tama5Vec2dC1Eii>
 800b262:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800b266:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800b26a:	4611      	mov	r1, r2
 800b26c:	4618      	mov	r0, r3
 800b26e:	f7f5 fe31 	bl	8000ed4 <_ZN4tama4util14fromBottomLeftERKNS_5Vec2dE>
 800b272:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800b276:	461a      	mov	r2, r3
 800b278:	4629      	mov	r1, r5
 800b27a:	4620      	mov	r0, r4
 800b27c:	f003 fbcc 	bl	800ea18 <_ZN4tama6SpriteC1ERKSt10shared_ptrINS_7TextureEERKNS_5Vec2dE>
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	33d4      	adds	r3, #212	; 0xd4
 800b284:	4618      	mov	r0, r3
 800b286:	f7fa f88e 	bl	80053a6 <_ZNSt10shared_ptrIN4tama11TimeMonitorEEC1Ev>
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2201      	movs	r2, #1
 800b28e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	2200      	movs	r2, #0
 800b296:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	2200      	movs	r2, #0
 800b29e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	2205      	movs	r2, #5
 800b2a6:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800b2b0:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
{
    oneFrameTimer = context->getTimeMonitorCreator()->createTimeMonitor();
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	f103 04d4 	add.w	r4, r3, #212	; 0xd4
 800b2c2:	6838      	ldr	r0, [r7, #0]
 800b2c4:	f7f8 fd82 	bl	8003dcc <_ZNKSt19__shared_ptr_accessIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800b2c8:	4602      	mov	r2, r0
 800b2ca:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800b2ce:	4611      	mov	r1, r2
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	f7f7 feb8 	bl	8003046 <_ZN4tama7Context21getTimeMonitorCreatorEv>
 800b2d6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800b2da:	4618      	mov	r0, r3
 800b2dc:	f7fa f870 	bl	80053c0 <_ZNKSt19__shared_ptr_accessIN4tama18TimeMonitorCreatorELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800b2e0:	4602      	mov	r2, r0
 800b2e2:	6813      	ldr	r3, [r2, #0]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	f107 0090 	add.w	r0, r7, #144	; 0x90
 800b2ea:	4611      	mov	r1, r2
 800b2ec:	4798      	blx	r3
 800b2ee:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800b2f2:	4619      	mov	r1, r3
 800b2f4:	4620      	mov	r0, r4
 800b2f6:	f7fa f86f 	bl	80053d8 <_ZNSt10shared_ptrIN4tama11TimeMonitorEEaSEOS2_>
 800b2fa:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800b2fe:	4618      	mov	r0, r3
 800b300:	f7f9 ffe4 	bl	80052cc <_ZNSt10shared_ptrIN4tama11TimeMonitorEED1Ev>
 800b304:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800b308:	4618      	mov	r0, r3
 800b30a:	f7f9 fffa 	bl	8005302 <_ZNSt10shared_ptrIN4tama18TimeMonitorCreatorEED1Ev>
    scene->addDrawable(std::shared_ptr<Text>(&obstacle));
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	3304      	adds	r3, #4
 800b312:	4618      	mov	r0, r3
 800b314:	f7fa f873 	bl	80053fe <_ZNKSt19__shared_ptr_accessIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800b318:	4604      	mov	r4, r0
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	f103 0214 	add.w	r2, r3, #20
 800b320:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800b324:	4611      	mov	r1, r2
 800b326:	4618      	mov	r0, r3
 800b328:	f7fa f875 	bl	8005416 <_ZNSt10shared_ptrIN4tama4TextEEC1IS1_vEEPT_>
 800b32c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800b330:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800b334:	4611      	mov	r1, r2
 800b336:	4618      	mov	r0, r3
 800b338:	f7fa f887 	bl	800544a <_ZNSt10shared_ptrIN4tama8DrawableEEC1INS0_4TextEvEEOS_IT_E>
 800b33c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800b340:	4619      	mov	r1, r3
 800b342:	4620      	mov	r0, r4
 800b344:	f005 fdd0 	bl	8010ee8 <_ZN4tama5Scene11addDrawableESt10shared_ptrINS_8DrawableEE>
 800b348:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800b34c:	4618      	mov	r0, r3
 800b34e:	f7f9 fbcd 	bl	8004aec <_ZNSt10shared_ptrIN4tama8DrawableEED1Ev>
 800b352:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800b356:	4618      	mov	r0, r3
 800b358:	f7f9 ffee 	bl	8005338 <_ZNSt10shared_ptrIN4tama4TextEED1Ev>
    scene->addDrawable(std::shared_ptr<Sprite>(&pet));
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	3304      	adds	r3, #4
 800b360:	4618      	mov	r0, r3
 800b362:	f7fa f84c 	bl	80053fe <_ZNKSt19__shared_ptr_accessIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800b366:	4604      	mov	r4, r0
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	f103 02b4 	add.w	r2, r3, #180	; 0xb4
 800b36e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800b372:	4611      	mov	r1, r2
 800b374:	4618      	mov	r0, r3
 800b376:	f7fa fbf7 	bl	8005b68 <_ZNSt10shared_ptrIN4tama6SpriteEEC1IS1_vEEPT_>
 800b37a:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 800b37e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800b382:	4611      	mov	r1, r2
 800b384:	4618      	mov	r0, r3
 800b386:	f7fa fba0 	bl	8005aca <_ZNSt10shared_ptrIN4tama8DrawableEEC1INS0_6SpriteEvEEOS_IT_E>
 800b38a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800b38e:	4619      	mov	r1, r3
 800b390:	4620      	mov	r0, r4
 800b392:	f005 fda9 	bl	8010ee8 <_ZN4tama5Scene11addDrawableESt10shared_ptrINS_8DrawableEE>
 800b396:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800b39a:	4618      	mov	r0, r3
 800b39c:	f7f9 fba6 	bl	8004aec <_ZNSt10shared_ptrIN4tama8DrawableEED1Ev>
 800b3a0:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	f7fa fa99 	bl	80058dc <_ZNSt10shared_ptrIN4tama6SpriteEED1Ev>
    scene->addDrawable(std::shared_ptr<Text>(&pointsText));
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	3304      	adds	r3, #4
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	f7fa f825 	bl	80053fe <_ZNKSt19__shared_ptr_accessIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800b3b4:	4604      	mov	r4, r0
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	f103 025c 	add.w	r2, r3, #92	; 0x5c
 800b3bc:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800b3c0:	4611      	mov	r1, r2
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	f7fa f827 	bl	8005416 <_ZNSt10shared_ptrIN4tama4TextEEC1IS1_vEEPT_>
 800b3c8:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 800b3cc:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800b3d0:	4611      	mov	r1, r2
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	f7fa f839 	bl	800544a <_ZNSt10shared_ptrIN4tama8DrawableEEC1INS0_4TextEvEEOS_IT_E>
 800b3d8:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800b3dc:	4619      	mov	r1, r3
 800b3de:	4620      	mov	r0, r4
 800b3e0:	f005 fd82 	bl	8010ee8 <_ZN4tama5Scene11addDrawableESt10shared_ptrINS_8DrawableEE>
 800b3e4:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	f7f9 fb7f 	bl	8004aec <_ZNSt10shared_ptrIN4tama8DrawableEED1Ev>
 800b3ee:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	f7f9 ffa0 	bl	8005338 <_ZNSt10shared_ptrIN4tama4TextEED1Ev>
}
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	37d0      	adds	r7, #208	; 0xd0
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bdb0      	pop	{r4, r5, r7, pc}
 800b402:	bf00      	nop
 800b404:	08023744 	.word	0x08023744
 800b408:	080209e0 	.word	0x080209e0
 800b40c:	080209e4 	.word	0x080209e4
 800b410:	200000b4 	.word	0x200000b4

0800b414 <_ZN4tama11JumpingGame7onInputENS_6ButtonE>:

void tama::JumpingGame::onInput(tama::Button button)
{
 800b414:	b590      	push	{r4, r7, lr}
 800b416:	b087      	sub	sp, #28
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
 800b41c:	460b      	mov	r3, r1
 800b41e:	70fb      	strb	r3, [r7, #3]
    if (button == Button::C)
 800b420:	78fb      	ldrb	r3, [r7, #3]
 800b422:	2b02      	cmp	r3, #2
 800b424:	d126      	bne.n	800b474 <_ZN4tama11JumpingGame7onInputENS_6ButtonE+0x60>
    {
        context->switchStage(std::make_shared<PlayMenu>(context));
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	330c      	adds	r3, #12
 800b42a:	4618      	mov	r0, r3
 800b42c:	f7f8 fcce 	bl	8003dcc <_ZNKSt19__shared_ptr_accessIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800b430:	4604      	mov	r4, r0
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	f103 020c 	add.w	r2, r3, #12
 800b438:	f107 0310 	add.w	r3, r7, #16
 800b43c:	4611      	mov	r1, r2
 800b43e:	4618      	mov	r0, r3
 800b440:	f7fb feb8 	bl	80071b4 <_ZSt11make_sharedIN4tama8PlayMenuEJRSt10shared_ptrINS0_7ContextEEEES2_IT_EDpOT0_>
 800b444:	f107 0210 	add.w	r2, r7, #16
 800b448:	f107 0308 	add.w	r3, r7, #8
 800b44c:	4611      	mov	r1, r2
 800b44e:	4618      	mov	r0, r3
 800b450:	f7fb fed8 	bl	8007204 <_ZNSt10shared_ptrIN4tama5StageEEC1INS0_8PlayMenuEvEEOS_IT_E>
 800b454:	f107 0308 	add.w	r3, r7, #8
 800b458:	4619      	mov	r1, r3
 800b45a:	4620      	mov	r0, r4
 800b45c:	f7f7 fc4d 	bl	8002cfa <_ZN4tama7Context11switchStageESt10shared_ptrINS_5StageEE>
 800b460:	f107 0308 	add.w	r3, r7, #8
 800b464:	4618      	mov	r0, r3
 800b466:	f7f7 fcaa 	bl	8002dbe <_ZNSt10shared_ptrIN4tama5StageEED1Ev>
 800b46a:	f107 0310 	add.w	r3, r7, #16
 800b46e:	4618      	mov	r0, r3
 800b470:	f7fb fb90 	bl	8006b94 <_ZNSt10shared_ptrIN4tama8PlayMenuEED1Ev>
    }
    if (button == Button::B)
 800b474:	78fb      	ldrb	r3, [r7, #3]
 800b476:	2b01      	cmp	r3, #1
 800b478:	d103      	bne.n	800b482 <_ZN4tama11JumpingGame7onInputENS_6ButtonE+0x6e>
    {
        isJumping = true;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	2201      	movs	r2, #1
 800b47e:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
    }
}
 800b482:	bf00      	nop
 800b484:	371c      	adds	r7, #28
 800b486:	46bd      	mov	sp, r7
 800b488:	bd90      	pop	{r4, r7, pc}

0800b48a <_ZN4tama11JumpingGame6onInitEv>:

void tama::JumpingGame::onInit()
{
 800b48a:	b480      	push	{r7}
 800b48c:	b083      	sub	sp, #12
 800b48e:	af00      	add	r7, sp, #0
 800b490:	6078      	str	r0, [r7, #4]

}
 800b492:	bf00      	nop
 800b494:	370c      	adds	r7, #12
 800b496:	46bd      	mov	sp, r7
 800b498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49c:	4770      	bx	lr

0800b49e <_ZN4tama11JumpingGame7onFrameEv>:

void tama::JumpingGame::onFrame()
{
 800b49e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4a0:	b095      	sub	sp, #84	; 0x54
 800b4a2:	af00      	add	r7, sp, #0
 800b4a4:	6078      	str	r0, [r7, #4]
    if (oneFrameTimer->getElapsedTime() >= oneFrameTime)
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	33d4      	adds	r3, #212	; 0xd4
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	f7f9 fcb5 	bl	8004e1a <_ZNKSt19__shared_ptr_accessIN4tama11TimeMonitorELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800b4b0:	4602      	mov	r2, r0
 800b4b2:	6813      	ldr	r3, [r2, #0]
 800b4b4:	3304      	adds	r3, #4
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	4610      	mov	r0, r2
 800b4ba:	4798      	blx	r3
 800b4bc:	4602      	mov	r2, r0
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b4c4:	429a      	cmp	r2, r3
 800b4c6:	bf2c      	ite	cs
 800b4c8:	2301      	movcs	r3, #1
 800b4ca:	2300      	movcc	r3, #0
 800b4cc:	b2db      	uxtb	r3, r3
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	f000 80b8 	beq.w	800b644 <_ZN4tama11JumpingGame7onFrameEv+0x1a6>
    {
        oneFrameTimer->startTimer();
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	33d4      	adds	r3, #212	; 0xd4
 800b4d8:	4618      	mov	r0, r3
 800b4da:	f7f9 fc9e 	bl	8004e1a <_ZNKSt19__shared_ptr_accessIN4tama11TimeMonitorELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800b4de:	4602      	mov	r2, r0
 800b4e0:	6813      	ldr	r3, [r2, #0]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	4610      	mov	r0, r2
 800b4e6:	4798      	blx	r3
        if (isJumping) { frameOnJump(); }
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d003      	beq.n	800b4fa <_ZN4tama11JumpingGame7onFrameEv+0x5c>
 800b4f2:	6878      	ldr	r0, [r7, #4]
 800b4f4:	f000 f8aa 	bl	800b64c <_ZN4tama11JumpingGame11frameOnJumpEv>
 800b4f8:	e044      	b.n	800b584 <_ZN4tama11JumpingGame7onFrameEv+0xe6>
        else {
            isPosOne = !isPosOne;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800b500:	f083 0301 	eor.w	r3, r3, #1
 800b504:	b2da      	uxtb	r2, r3
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            isPosOne ? pet.setTexture(petFrontPosTwo) : pet.setTexture(petFrontPosOne);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800b512:	2400      	movs	r4, #0
 800b514:	2500      	movs	r5, #0
 800b516:	2b00      	cmp	r3, #0
 800b518:	d013      	beq.n	800b542 <_ZN4tama11JumpingGame7onFrameEv+0xa4>
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	f103 06b4 	add.w	r6, r3, #180	; 0xb4
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	f103 02ac 	add.w	r2, r3, #172	; 0xac
 800b526:	f107 0308 	add.w	r3, r7, #8
 800b52a:	4611      	mov	r1, r2
 800b52c:	4618      	mov	r0, r3
 800b52e:	f7fb fbf7 	bl	8006d20 <_ZNSt10shared_ptrIN4tama7TextureEEC1ERKS2_>
 800b532:	2401      	movs	r4, #1
 800b534:	f107 0308 	add.w	r3, r7, #8
 800b538:	4619      	mov	r1, r3
 800b53a:	4630      	mov	r0, r6
 800b53c:	f003 f97f 	bl	800e83e <_ZN4tama6Sprite10setTextureESt10shared_ptrINS_7TextureEE>
 800b540:	e012      	b.n	800b568 <_ZN4tama11JumpingGame7onFrameEv+0xca>
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	f103 06b4 	add.w	r6, r3, #180	; 0xb4
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	f103 02a4 	add.w	r2, r3, #164	; 0xa4
 800b54e:	f107 0310 	add.w	r3, r7, #16
 800b552:	4611      	mov	r1, r2
 800b554:	4618      	mov	r0, r3
 800b556:	f7fb fbe3 	bl	8006d20 <_ZNSt10shared_ptrIN4tama7TextureEEC1ERKS2_>
 800b55a:	2501      	movs	r5, #1
 800b55c:	f107 0310 	add.w	r3, r7, #16
 800b560:	4619      	mov	r1, r3
 800b562:	4630      	mov	r0, r6
 800b564:	f003 f96b 	bl	800e83e <_ZN4tama6Sprite10setTextureESt10shared_ptrINS_7TextureEE>
 800b568:	2d00      	cmp	r5, #0
 800b56a:	d004      	beq.n	800b576 <_ZN4tama11JumpingGame7onFrameEv+0xd8>
 800b56c:	f107 0310 	add.w	r3, r7, #16
 800b570:	4618      	mov	r0, r3
 800b572:	f7f9 fe3a 	bl	80051ea <_ZNSt10shared_ptrIN4tama7TextureEED1Ev>
 800b576:	2c00      	cmp	r4, #0
 800b578:	d004      	beq.n	800b584 <_ZN4tama11JumpingGame7onFrameEv+0xe6>
 800b57a:	f107 0308 	add.w	r3, r7, #8
 800b57e:	4618      	mov	r0, r3
 800b580:	f7f9 fe33 	bl	80051ea <_ZNSt10shared_ptrIN4tama7TextureEED1Ev>
        }
        obstacle.move(Vec2d(-5, 0));
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	f103 0414 	add.w	r4, r3, #20
 800b58a:	f107 0318 	add.w	r3, r7, #24
 800b58e:	2200      	movs	r2, #0
 800b590:	f06f 0104 	mvn.w	r1, #4
 800b594:	4618      	mov	r0, r3
 800b596:	f7f5 fc89 	bl	8000eac <_ZN4tama5Vec2dC1Eii>
 800b59a:	f107 0318 	add.w	r3, r7, #24
 800b59e:	e893 0006 	ldmia.w	r3, {r1, r2}
 800b5a2:	4620      	mov	r0, r4
 800b5a4:	f003 fca0 	bl	800eee8 <_ZN4tama4Text4moveENS_5Vec2dE>
        if (!tama::util::fitsInContent(obstacle.getPosition()))
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	f103 0214 	add.w	r2, r3, #20
 800b5ae:	f107 0320 	add.w	r3, r7, #32
 800b5b2:	4611      	mov	r1, r2
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	f003 fc85 	bl	800eec4 <_ZN4tama4Text11getPositionEv>
 800b5ba:	f107 0320 	add.w	r3, r7, #32
 800b5be:	4618      	mov	r0, r3
 800b5c0:	f7f5 fcd6 	bl	8000f70 <_ZN4tama4util13fitsInContentERKNS_5Vec2dE>
 800b5c4:	4603      	mov	r3, r0
 800b5c6:	f083 0301 	eor.w	r3, r3, #1
 800b5ca:	b2db      	uxtb	r3, r3
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d039      	beq.n	800b644 <_ZN4tama11JumpingGame7onFrameEv+0x1a6>
        {
            points += 10;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800b5d6:	f103 020a 	add.w	r2, r3, #10
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
            pointsText.setText(std::to_string(points));
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	f103 045c 	add.w	r4, r3, #92	; 0x5c
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 800b5ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b5f0:	4611      	mov	r1, r2
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	f7ff fd46 	bl	800b084 <_ZNSt7__cxx119to_stringEi>
 800b5f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b5fc:	4619      	mov	r1, r3
 800b5fe:	4620      	mov	r0, r4
 800b600:	f003 fce0 	bl	800efc4 <_ZN4tama4Text7setTextENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800b604:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b608:	4618      	mov	r0, r3
 800b60a:	f014 fa3c 	bl	801fa86 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
            obstacle.setPosition(Vec2d(tama::util::fromBottomRight(Vec2d(-6, -6))));
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	f103 0414 	add.w	r4, r3, #20
 800b614:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b618:	f06f 0205 	mvn.w	r2, #5
 800b61c:	f06f 0105 	mvn.w	r1, #5
 800b620:	4618      	mov	r0, r3
 800b622:	f7f5 fc43 	bl	8000eac <_ZN4tama5Vec2dC1Eii>
 800b626:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800b62a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800b62e:	4611      	mov	r1, r2
 800b630:	4618      	mov	r0, r3
 800b632:	f7f5 fc6b 	bl	8000f0c <_ZN4tama4util15fromBottomRightERKNS_5Vec2dE>
 800b636:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800b63a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800b63e:	4620      	mov	r0, r4
 800b640:	f003 fc1c 	bl	800ee7c <_ZN4tama4Text11setPositionENS_5Vec2dE>
        }
    }
}
 800b644:	bf00      	nop
 800b646:	3754      	adds	r7, #84	; 0x54
 800b648:	46bd      	mov	sp, r7
 800b64a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b64c <_ZN4tama11JumpingGame11frameOnJumpEv>:

void tama::JumpingGame::frameOnJump()
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b082      	sub	sp, #8
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
    if (jumpAnimationProgress > jumpAnimationEnd)
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b660:	429a      	cmp	r2, r3
 800b662:	dd08      	ble.n	800b676 <_ZN4tama11JumpingGame11frameOnJumpEv+0x2a>
    {
        isJumping = false;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	2200      	movs	r2, #0
 800b668:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
        jumpAnimationProgress = 0;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2200      	movs	r2, #0
 800b670:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    else
    {
        onJumpingAnimationFrame();
        jumpAnimationProgress++;
    }
}
 800b674:	e009      	b.n	800b68a <_ZN4tama11JumpingGame11frameOnJumpEv+0x3e>
        onJumpingAnimationFrame();
 800b676:	6878      	ldr	r0, [r7, #4]
 800b678:	f000 f80c 	bl	800b694 <_ZN4tama11JumpingGame23onJumpingAnimationFrameEv>
        jumpAnimationProgress++;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b682:	1c5a      	adds	r2, r3, #1
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
}
 800b68a:	bf00      	nop
 800b68c:	3708      	adds	r7, #8
 800b68e:	46bd      	mov	sp, r7
 800b690:	bd80      	pop	{r7, pc}
	...

0800b694 <_ZN4tama11JumpingGame23onJumpingAnimationFrameEv>:

void tama::JumpingGame::onJumpingAnimationFrame()
{
 800b694:	b590      	push	{r4, r7, lr}
 800b696:	b08f      	sub	sp, #60	; 0x3c
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
    switch (jumpAnimationProgress)
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b6a2:	2b05      	cmp	r3, #5
 800b6a4:	d87d      	bhi.n	800b7a2 <_ZN4tama11JumpingGame23onJumpingAnimationFrameEv+0x10e>
 800b6a6:	a201      	add	r2, pc, #4	; (adr r2, 800b6ac <_ZN4tama11JumpingGame23onJumpingAnimationFrameEv+0x18>)
 800b6a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6ac:	0800b6c5 	.word	0x0800b6c5
 800b6b0:	0800b6eb 	.word	0x0800b6eb
 800b6b4:	0800b711 	.word	0x0800b711
 800b6b8:	0800b737 	.word	0x0800b737
 800b6bc:	0800b75b 	.word	0x0800b75b
 800b6c0:	0800b77f 	.word	0x0800b77f
    {
        case 0:
            pet.move(Vec2d(0, -4));
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	f103 04b4 	add.w	r4, r3, #180	; 0xb4
 800b6ca:	f107 0308 	add.w	r3, r7, #8
 800b6ce:	f06f 0203 	mvn.w	r2, #3
 800b6d2:	2100      	movs	r1, #0
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	f7f5 fbe9 	bl	8000eac <_ZN4tama5Vec2dC1Eii>
 800b6da:	f107 0308 	add.w	r3, r7, #8
 800b6de:	e893 0006 	ldmia.w	r3, {r1, r2}
 800b6e2:	4620      	mov	r0, r4
 800b6e4:	f003 f8f0 	bl	800e8c8 <_ZN4tama6Sprite4moveENS_5Vec2dE>
            return;
 800b6e8:	e05b      	b.n	800b7a2 <_ZN4tama11JumpingGame23onJumpingAnimationFrameEv+0x10e>
        case 1:
            pet.move(Vec2d(0, -4));
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	f103 04b4 	add.w	r4, r3, #180	; 0xb4
 800b6f0:	f107 0310 	add.w	r3, r7, #16
 800b6f4:	f06f 0203 	mvn.w	r2, #3
 800b6f8:	2100      	movs	r1, #0
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	f7f5 fbd6 	bl	8000eac <_ZN4tama5Vec2dC1Eii>
 800b700:	f107 0310 	add.w	r3, r7, #16
 800b704:	e893 0006 	ldmia.w	r3, {r1, r2}
 800b708:	4620      	mov	r0, r4
 800b70a:	f003 f8dd 	bl	800e8c8 <_ZN4tama6Sprite4moveENS_5Vec2dE>
            return;
 800b70e:	e048      	b.n	800b7a2 <_ZN4tama11JumpingGame23onJumpingAnimationFrameEv+0x10e>
        case 2:
            pet.move(Vec2d(0, -4));
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	f103 04b4 	add.w	r4, r3, #180	; 0xb4
 800b716:	f107 0318 	add.w	r3, r7, #24
 800b71a:	f06f 0203 	mvn.w	r2, #3
 800b71e:	2100      	movs	r1, #0
 800b720:	4618      	mov	r0, r3
 800b722:	f7f5 fbc3 	bl	8000eac <_ZN4tama5Vec2dC1Eii>
 800b726:	f107 0318 	add.w	r3, r7, #24
 800b72a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800b72e:	4620      	mov	r0, r4
 800b730:	f003 f8ca 	bl	800e8c8 <_ZN4tama6Sprite4moveENS_5Vec2dE>
            return;
 800b734:	e035      	b.n	800b7a2 <_ZN4tama11JumpingGame23onJumpingAnimationFrameEv+0x10e>
        case 3:
            pet.move(Vec2d(0, 4));
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	f103 04b4 	add.w	r4, r3, #180	; 0xb4
 800b73c:	f107 0320 	add.w	r3, r7, #32
 800b740:	2204      	movs	r2, #4
 800b742:	2100      	movs	r1, #0
 800b744:	4618      	mov	r0, r3
 800b746:	f7f5 fbb1 	bl	8000eac <_ZN4tama5Vec2dC1Eii>
 800b74a:	f107 0320 	add.w	r3, r7, #32
 800b74e:	e893 0006 	ldmia.w	r3, {r1, r2}
 800b752:	4620      	mov	r0, r4
 800b754:	f003 f8b8 	bl	800e8c8 <_ZN4tama6Sprite4moveENS_5Vec2dE>
            return;
 800b758:	e023      	b.n	800b7a2 <_ZN4tama11JumpingGame23onJumpingAnimationFrameEv+0x10e>
        case 4:
            pet.move(Vec2d(0, 4));
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	f103 04b4 	add.w	r4, r3, #180	; 0xb4
 800b760:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b764:	2204      	movs	r2, #4
 800b766:	2100      	movs	r1, #0
 800b768:	4618      	mov	r0, r3
 800b76a:	f7f5 fb9f 	bl	8000eac <_ZN4tama5Vec2dC1Eii>
 800b76e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b772:	e893 0006 	ldmia.w	r3, {r1, r2}
 800b776:	4620      	mov	r0, r4
 800b778:	f003 f8a6 	bl	800e8c8 <_ZN4tama6Sprite4moveENS_5Vec2dE>
            return;
 800b77c:	e011      	b.n	800b7a2 <_ZN4tama11JumpingGame23onJumpingAnimationFrameEv+0x10e>
        case 5:
            pet.move(Vec2d(0, 4));
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	f103 04b4 	add.w	r4, r3, #180	; 0xb4
 800b784:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b788:	2204      	movs	r2, #4
 800b78a:	2100      	movs	r1, #0
 800b78c:	4618      	mov	r0, r3
 800b78e:	f7f5 fb8d 	bl	8000eac <_ZN4tama5Vec2dC1Eii>
 800b792:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b796:	e893 0006 	ldmia.w	r3, {r1, r2}
 800b79a:	4620      	mov	r0, r4
 800b79c:	f003 f894 	bl	800e8c8 <_ZN4tama6Sprite4moveENS_5Vec2dE>
            return;
 800b7a0:	bf00      	nop
    }
 800b7a2:	373c      	adds	r7, #60	; 0x3c
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bd90      	pop	{r4, r7, pc}

0800b7a8 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>:
    }

  // Helper for the to_string / to_wstring functions.
  template<typename _String, typename _CharT = typename _String::value_type>
    _String
    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,
 800b7a8:	b408      	push	{r3}
 800b7aa:	b590      	push	{r4, r7, lr}
 800b7ac:	b088      	sub	sp, #32
 800b7ae:	af00      	add	r7, sp, #0
 800b7b0:	60f8      	str	r0, [r7, #12]
 800b7b2:	60b9      	str	r1, [r7, #8]
 800b7b4:	607a      	str	r2, [r7, #4]
				 __builtin_va_list), std::size_t __n,
		 const _CharT* __fmt, ...)
    {
      // XXX Eventually the result should be constructed in-place in
      // the __cxx11 string, likely with the help of internal hooks.
      _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	3307      	adds	r3, #7
 800b7ba:	3307      	adds	r3, #7
 800b7bc:	08db      	lsrs	r3, r3, #3
 800b7be:	00db      	lsls	r3, r3, #3
 800b7c0:	ebad 0d03 	sub.w	sp, sp, r3
 800b7c4:	466b      	mov	r3, sp
 800b7c6:	3307      	adds	r3, #7
 800b7c8:	08db      	lsrs	r3, r3, #3
 800b7ca:	00db      	lsls	r3, r3, #3
 800b7cc:	61fb      	str	r3, [r7, #28]
							  * __n));

      __builtin_va_list __args;
      __builtin_va_start(__args, __fmt);
 800b7ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b7d2:	613b      	str	r3, [r7, #16]

      const int __len = __convf(__s, __n, __fmt, __args);
 800b7d4:	68bc      	ldr	r4, [r7, #8]
 800b7d6:	693b      	ldr	r3, [r7, #16]
 800b7d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b7da:	6879      	ldr	r1, [r7, #4]
 800b7dc:	69f8      	ldr	r0, [r7, #28]
 800b7de:	47a0      	blx	r4
 800b7e0:	61b8      	str	r0, [r7, #24]

      __builtin_va_end(__args);

      return _String(__s, __s + __len);
 800b7e2:	69bb      	ldr	r3, [r7, #24]
 800b7e4:	69fa      	ldr	r2, [r7, #28]
 800b7e6:	18d4      	adds	r4, r2, r3
 800b7e8:	f107 0314 	add.w	r3, r7, #20
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	f014 f892 	bl	801f916 <_ZNSaIcEC1Ev>
 800b7f2:	f107 0314 	add.w	r3, r7, #20
 800b7f6:	4622      	mov	r2, r4
 800b7f8:	69f9      	ldr	r1, [r7, #28]
 800b7fa:	68f8      	ldr	r0, [r7, #12]
 800b7fc:	f000 f80c 	bl	800b818 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>
 800b800:	f107 0314 	add.w	r3, r7, #20
 800b804:	4618      	mov	r0, r3
 800b806:	f014 f887 	bl	801f918 <_ZNSaIcED1Ev>
    }
 800b80a:	68f8      	ldr	r0, [r7, #12]
 800b80c:	3720      	adds	r7, #32
 800b80e:	46bd      	mov	sp, r7
 800b810:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800b814:	b001      	add	sp, #4
 800b816:	4770      	bx	lr

0800b818 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>:
        basic_string(_InputIterator __beg, _InputIterator __end,
 800b818:	b590      	push	{r4, r7, lr}
 800b81a:	b085      	sub	sp, #20
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	60f8      	str	r0, [r7, #12]
 800b820:	60b9      	str	r1, [r7, #8]
 800b822:	607a      	str	r2, [r7, #4]
 800b824:	603b      	str	r3, [r7, #0]
	: _M_dataplus(_M_local_data(), __a)
 800b826:	68fc      	ldr	r4, [r7, #12]
 800b828:	68f8      	ldr	r0, [r7, #12]
 800b82a:	f014 f8a5 	bl	801f978 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 800b82e:	4603      	mov	r3, r0
 800b830:	683a      	ldr	r2, [r7, #0]
 800b832:	4619      	mov	r1, r3
 800b834:	4620      	mov	r0, r4
 800b836:	f014 f93d 	bl	801fab4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
	{ _M_construct(__beg, __end); }
 800b83a:	687a      	ldr	r2, [r7, #4]
 800b83c:	68b9      	ldr	r1, [r7, #8]
 800b83e:	68f8      	ldr	r0, [r7, #12]
 800b840:	f000 f805 	bl	800b84e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	4618      	mov	r0, r3
 800b848:	3714      	adds	r7, #20
 800b84a:	46bd      	mov	sp, r7
 800b84c:	bd90      	pop	{r4, r7, pc}

0800b84e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>:
        _M_construct(_InIterator __beg, _InIterator __end)
 800b84e:	b580      	push	{r7, lr}
 800b850:	b086      	sub	sp, #24
 800b852:	af00      	add	r7, sp, #0
 800b854:	60f8      	str	r0, [r7, #12]
 800b856:	60b9      	str	r1, [r7, #8]
 800b858:	607a      	str	r2, [r7, #4]
	  _M_construct_aux(__beg, __end, _Integral());
 800b85a:	687a      	ldr	r2, [r7, #4]
 800b85c:	68b9      	ldr	r1, [r7, #8]
 800b85e:	68f8      	ldr	r0, [r7, #12]
 800b860:	f000 f804 	bl	800b86c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>
        }
 800b864:	bf00      	nop
 800b866:	3718      	adds	r7, #24
 800b868:	46bd      	mov	sp, r7
 800b86a:	bd80      	pop	{r7, pc}

0800b86c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>:
        _M_construct_aux(_InIterator __beg, _InIterator __end,
 800b86c:	b590      	push	{r4, r7, lr}
 800b86e:	b087      	sub	sp, #28
 800b870:	af00      	add	r7, sp, #0
 800b872:	60f8      	str	r0, [r7, #12]
 800b874:	60b9      	str	r1, [r7, #8]
 800b876:	607a      	str	r2, [r7, #4]
 800b878:	703b      	strb	r3, [r7, #0]
          _M_construct(__beg, __end, _Tag());
 800b87a:	4623      	mov	r3, r4
 800b87c:	687a      	ldr	r2, [r7, #4]
 800b87e:	68b9      	ldr	r1, [r7, #8]
 800b880:	68f8      	ldr	r0, [r7, #12]
 800b882:	f000 f805 	bl	800b890 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
	}
 800b886:	bf00      	nop
 800b888:	371c      	adds	r7, #28
 800b88a:	46bd      	mov	sp, r7
 800b88c:	bd90      	pop	{r4, r7, pc}
	...

0800b890 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
 800b890:	b580      	push	{r7, lr}
 800b892:	b086      	sub	sp, #24
 800b894:	af00      	add	r7, sp, #0
 800b896:	60f8      	str	r0, [r7, #12]
 800b898:	60b9      	str	r1, [r7, #8]
 800b89a:	607a      	str	r2, [r7, #4]
 800b89c:	703b      	strb	r3, [r7, #0]
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 800b89e:	68b8      	ldr	r0, [r7, #8]
 800b8a0:	f000 f83e 	bl	800b920 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>
 800b8a4:	4603      	mov	r3, r0
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d005      	beq.n	800b8b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 800b8aa:	68ba      	ldr	r2, [r7, #8]
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	429a      	cmp	r2, r3
 800b8b0:	d001      	beq.n	800b8b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 800b8b2:	2301      	movs	r3, #1
 800b8b4:	e000      	b.n	800b8b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x28>
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d002      	beq.n	800b8c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x32>
	  std::__throw_logic_error(__N("basic_string::"
 800b8bc:	4817      	ldr	r0, [pc, #92]	; (800b91c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x8c>)
 800b8be:	f014 f82f 	bl	801f920 <_ZSt19__throw_logic_errorPKc>
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 800b8c2:	6879      	ldr	r1, [r7, #4]
 800b8c4:	68b8      	ldr	r0, [r7, #8]
 800b8c6:	f000 f845 	bl	800b954 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	617b      	str	r3, [r7, #20]

	if (__dnew > size_type(_S_local_capacity))
 800b8ce:	697b      	ldr	r3, [r7, #20]
 800b8d0:	2b0f      	cmp	r3, #15
 800b8d2:	d910      	bls.n	800b8f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x66>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
 800b8d4:	f107 0314 	add.w	r3, r7, #20
 800b8d8:	2200      	movs	r2, #0
 800b8da:	4619      	mov	r1, r3
 800b8dc:	68f8      	ldr	r0, [r7, #12]
 800b8de:	f014 f855 	bl	801f98c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800b8e2:	4603      	mov	r3, r0
 800b8e4:	4619      	mov	r1, r3
 800b8e6:	68f8      	ldr	r0, [r7, #12]
 800b8e8:	f014 f842 	bl	801f970 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 800b8ec:	697b      	ldr	r3, [r7, #20]
 800b8ee:	4619      	mov	r1, r3
 800b8f0:	68f8      	ldr	r0, [r7, #12]
 800b8f2:	f014 f843 	bl	801f97c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 800b8f6:	68f8      	ldr	r0, [r7, #12]
 800b8f8:	f014 f83c 	bl	801f974 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 800b8fc:	4603      	mov	r3, r0
 800b8fe:	687a      	ldr	r2, [r7, #4]
 800b900:	68b9      	ldr	r1, [r7, #8]
 800b902:	4618      	mov	r0, r3
 800b904:	f014 f86d 	bl	801f9e2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
 800b908:	697b      	ldr	r3, [r7, #20]
 800b90a:	4619      	mov	r1, r3
 800b90c:	68f8      	ldr	r0, [r7, #12]
 800b90e:	f014 f837 	bl	801f980 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 800b912:	bf00      	nop
 800b914:	3718      	adds	r7, #24
 800b916:	46bd      	mov	sp, r7
 800b918:	bd80      	pop	{r7, pc}
 800b91a:	bf00      	nop
 800b91c:	080209e8 	.word	0x080209e8

0800b920 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>:


  // For use in string and vstring.
  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
 800b920:	b480      	push	{r7}
 800b922:	b083      	sub	sp, #12
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
    { return __ptr == 0; }
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	bf0c      	ite	eq
 800b92e:	2301      	moveq	r3, #1
 800b930:	2300      	movne	r3, #0
 800b932:	b2db      	uxtb	r3, r3
 800b934:	4618      	mov	r0, r3
 800b936:	370c      	adds	r7, #12
 800b938:	46bd      	mov	sp, r7
 800b93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93e:	4770      	bx	lr

0800b940 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 800b940:	b480      	push	{r7}
 800b942:	b083      	sub	sp, #12
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800b948:	4618      	mov	r0, r3
 800b94a:	370c      	adds	r7, #12
 800b94c:	46bd      	mov	sp, r7
 800b94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b952:	4770      	bx	lr

0800b954 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 800b954:	b5b0      	push	{r4, r5, r7, lr}
 800b956:	b084      	sub	sp, #16
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
 800b95c:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 800b95e:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 800b960:	1d3b      	adds	r3, r7, #4
 800b962:	4618      	mov	r0, r3
 800b964:	f7ff ffec 	bl	800b940 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
 800b968:	462a      	mov	r2, r5
 800b96a:	6839      	ldr	r1, [r7, #0]
 800b96c:	4620      	mov	r0, r4
 800b96e:	f000 f805 	bl	800b97c <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 800b972:	4603      	mov	r3, r0
    }
 800b974:	4618      	mov	r0, r3
 800b976:	3710      	adds	r7, #16
 800b978:	46bd      	mov	sp, r7
 800b97a:	bdb0      	pop	{r4, r5, r7, pc}

0800b97c <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800b97c:	b480      	push	{r7}
 800b97e:	b085      	sub	sp, #20
 800b980:	af00      	add	r7, sp, #0
 800b982:	60f8      	str	r0, [r7, #12]
 800b984:	60b9      	str	r1, [r7, #8]
 800b986:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 800b988:	68ba      	ldr	r2, [r7, #8]
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	1ad3      	subs	r3, r2, r3
    }
 800b98e:	4618      	mov	r0, r3
 800b990:	3714      	adds	r7, #20
 800b992:	46bd      	mov	sp, r7
 800b994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b998:	4770      	bx	lr

0800b99a <_ZNSt12__shared_ptrIN4tama11JumpingGameELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_ptr() = default;
 800b99a:	b580      	push	{r7, lr}
 800b99c:	b082      	sub	sp, #8
 800b99e:	af00      	add	r7, sp, #0
 800b9a0:	6078      	str	r0, [r7, #4]
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	3304      	adds	r3, #4
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	f7f7 fbb3 	bl	8003112 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	3708      	adds	r7, #8
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	bd80      	pop	{r7, pc}

0800b9b6 <_ZNSt10shared_ptrIN4tama11JumpingGameEED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 800b9b6:	b580      	push	{r7, lr}
 800b9b8:	b082      	sub	sp, #8
 800b9ba:	af00      	add	r7, sp, #0
 800b9bc:	6078      	str	r0, [r7, #4]
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	f7ff ffea 	bl	800b99a <_ZNSt12__shared_ptrIN4tama11JumpingGameELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	3708      	adds	r7, #8
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	bd80      	pop	{r7, pc}

0800b9d0 <_ZN4tama8PlayMenu7onInputENS_6ButtonE>:

#include "PlayMenu.h"
#include "../jumping-game/JumpingGame.h"

void tama::PlayMenu::onInput(tama::Button button)
{
 800b9d0:	b590      	push	{r4, r7, lr}
 800b9d2:	b08d      	sub	sp, #52	; 0x34
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
 800b9d8:	460b      	mov	r3, r1
 800b9da:	70fb      	strb	r3, [r7, #3]
    if (button == Button::A)
 800b9dc:	78fb      	ldrb	r3, [r7, #3]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d104      	bne.n	800b9ec <_ZN4tama8PlayMenu7onInputENS_6ButtonE+0x1c>
    {
        menu.moveToNextItem();
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	3314      	adds	r3, #20
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	f001 fda2 	bl	800d530 <_ZN4tama4Menu14moveToNextItemEv>
    }
    if (button == Button::B)
 800b9ec:	78fb      	ldrb	r3, [r7, #3]
 800b9ee:	2b01      	cmp	r3, #1
 800b9f0:	d12f      	bne.n	800ba52 <_ZN4tama8PlayMenu7onInputENS_6ButtonE+0x82>
    {
        int selectedItem = menu.getSelectedItem();
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	3314      	adds	r3, #20
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	f001 fd8e 	bl	800d518 <_ZN4tama4Menu15getSelectedItemEv>
 800b9fc:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (selectedItem == 0)
 800b9fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d126      	bne.n	800ba52 <_ZN4tama8PlayMenu7onInputENS_6ButtonE+0x82>
        {
            context->switchStage(std::make_shared<JumpingGame>(context));
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	330c      	adds	r3, #12
 800ba08:	4618      	mov	r0, r3
 800ba0a:	f7f8 f9df 	bl	8003dcc <_ZNKSt19__shared_ptr_accessIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800ba0e:	4604      	mov	r4, r0
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	f103 020c 	add.w	r2, r3, #12
 800ba16:	f107 0314 	add.w	r3, r7, #20
 800ba1a:	4611      	mov	r1, r2
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	f000 f8b7 	bl	800bb90 <_ZSt11make_sharedIN4tama11JumpingGameEJRSt10shared_ptrINS0_7ContextEEEES2_IT_EDpOT0_>
 800ba22:	f107 0214 	add.w	r2, r7, #20
 800ba26:	f107 030c 	add.w	r3, r7, #12
 800ba2a:	4611      	mov	r1, r2
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	f000 f8d7 	bl	800bbe0 <_ZNSt10shared_ptrIN4tama5StageEEC1INS0_11JumpingGameEvEEOS_IT_E>
 800ba32:	f107 030c 	add.w	r3, r7, #12
 800ba36:	4619      	mov	r1, r3
 800ba38:	4620      	mov	r0, r4
 800ba3a:	f7f7 f95e 	bl	8002cfa <_ZN4tama7Context11switchStageESt10shared_ptrINS_5StageEE>
 800ba3e:	f107 030c 	add.w	r3, r7, #12
 800ba42:	4618      	mov	r0, r3
 800ba44:	f7f7 f9bb 	bl	8002dbe <_ZNSt10shared_ptrIN4tama5StageEED1Ev>
 800ba48:	f107 0314 	add.w	r3, r7, #20
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	f7ff ffb2 	bl	800b9b6 <_ZNSt10shared_ptrIN4tama11JumpingGameEED1Ev>
        }
    }
    if (button == Button::C)
 800ba52:	78fb      	ldrb	r3, [r7, #3]
 800ba54:	2b02      	cmp	r3, #2
 800ba56:	d126      	bne.n	800baa6 <_ZN4tama8PlayMenu7onInputENS_6ButtonE+0xd6>
    {
        context->switchStage(std::make_shared<Home>(context));
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	330c      	adds	r3, #12
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	f7f8 f9b5 	bl	8003dcc <_ZNKSt19__shared_ptr_accessIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800ba62:	4604      	mov	r4, r0
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	f103 020c 	add.w	r2, r3, #12
 800ba6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ba6e:	4611      	mov	r1, r2
 800ba70:	4618      	mov	r0, r3
 800ba72:	f7fd ff21 	bl	80098b8 <_ZSt11make_sharedIN4tama4HomeEJRSt10shared_ptrINS0_7ContextEEEES2_IT_EDpOT0_>
 800ba76:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800ba7a:	f107 031c 	add.w	r3, r7, #28
 800ba7e:	4611      	mov	r1, r2
 800ba80:	4618      	mov	r0, r3
 800ba82:	f7fd ff41 	bl	8009908 <_ZNSt10shared_ptrIN4tama5StageEEC1INS0_4HomeEvEEOS_IT_E>
 800ba86:	f107 031c 	add.w	r3, r7, #28
 800ba8a:	4619      	mov	r1, r3
 800ba8c:	4620      	mov	r0, r4
 800ba8e:	f7f7 f934 	bl	8002cfa <_ZN4tama7Context11switchStageESt10shared_ptrINS_5StageEE>
 800ba92:	f107 031c 	add.w	r3, r7, #28
 800ba96:	4618      	mov	r0, r3
 800ba98:	f7f7 f991 	bl	8002dbe <_ZNSt10shared_ptrIN4tama5StageEED1Ev>
 800ba9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800baa0:	4618      	mov	r0, r3
 800baa2:	f7fd fe47 	bl	8009734 <_ZNSt10shared_ptrIN4tama4HomeEED1Ev>
    }
}
 800baa6:	bf00      	nop
 800baa8:	3734      	adds	r7, #52	; 0x34
 800baaa:	46bd      	mov	sp, r7
 800baac:	bd90      	pop	{r4, r7, pc}

0800baae <_ZN4tama8PlayMenu6onInitEv>:

void tama::PlayMenu::onInit()
{
 800baae:	b480      	push	{r7}
 800bab0:	b083      	sub	sp, #12
 800bab2:	af00      	add	r7, sp, #0
 800bab4:	6078      	str	r0, [r7, #4]

}
 800bab6:	bf00      	nop
 800bab8:	370c      	adds	r7, #12
 800baba:	46bd      	mov	sp, r7
 800babc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac0:	4770      	bx	lr

0800bac2 <_ZN4tama8PlayMenu7onFrameEv>:

void tama::PlayMenu::onFrame()
{
 800bac2:	b480      	push	{r7}
 800bac4:	b083      	sub	sp, #12
 800bac6:	af00      	add	r7, sp, #0
 800bac8:	6078      	str	r0, [r7, #4]

}
 800baca:	bf00      	nop
 800bacc:	370c      	adds	r7, #12
 800bace:	46bd      	mov	sp, r7
 800bad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad4:	4770      	bx	lr
	...

0800bad8 <_ZN4tama8PlayMenuC1ERKSt10shared_ptrINS_7ContextEE>:

tama::PlayMenu::PlayMenu(const std::shared_ptr<Context> &context) : Stage(context), menu(Menu(scene, context))
 800bad8:	b590      	push	{r4, r7, lr}
 800bada:	b08b      	sub	sp, #44	; 0x2c
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
 800bae0:	6039      	str	r1, [r7, #0]
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	6839      	ldr	r1, [r7, #0]
 800bae6:	4618      	mov	r0, r3
 800bae8:	f7f8 f908 	bl	8003cfc <_ZN4tama5StageC1ERKSt10shared_ptrINS_7ContextEE>
 800baec:	4a25      	ldr	r2, [pc, #148]	; (800bb84 <_ZN4tama8PlayMenuC1ERKSt10shared_ptrINS_7ContextEE+0xac>)
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	601a      	str	r2, [r3, #0]
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	f103 0414 	add.w	r4, r3, #20
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	1d1a      	adds	r2, r3, #4
 800bafc:	f107 0314 	add.w	r3, r7, #20
 800bb00:	4611      	mov	r1, r2
 800bb02:	4618      	mov	r0, r3
 800bb04:	f7f8 f87b 	bl	8003bfe <_ZNSt10shared_ptrIN4tama5SceneEEC1ERKS2_>
 800bb08:	f107 0314 	add.w	r3, r7, #20
 800bb0c:	683a      	ldr	r2, [r7, #0]
 800bb0e:	4619      	mov	r1, r3
 800bb10:	4620      	mov	r0, r4
 800bb12:	f001 fc14 	bl	800d33e <_ZN4tama4MenuC1ESt10shared_ptrINS_5SceneEERKS1_INS_7ContextEE>
 800bb16:	f107 0314 	add.w	r3, r7, #20
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	f7f8 f87f 	bl	8003c1e <_ZNSt10shared_ptrIN4tama5SceneEED1Ev>
{
    std::vector<std::string> options;
 800bb20:	f107 0308 	add.w	r3, r7, #8
 800bb24:	4618      	mov	r0, r3
 800bb26:	f7fd ff02 	bl	800992e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
    options.emplace_back("JUMP");
 800bb2a:	f107 0308 	add.w	r3, r7, #8
 800bb2e:	4916      	ldr	r1, [pc, #88]	; (800bb88 <_ZN4tama8PlayMenuC1ERKSt10shared_ptrINS_7ContextEE+0xb0>)
 800bb30:	4618      	mov	r0, r3
 800bb32:	f7fd ff14 	bl	800995e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJRA5_KcEEEvDpOT_>
    options.emplace_back("SHOP");
 800bb36:	f107 0308 	add.w	r3, r7, #8
 800bb3a:	4914      	ldr	r1, [pc, #80]	; (800bb8c <_ZN4tama8PlayMenuC1ERKSt10shared_ptrINS_7ContextEE+0xb4>)
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	f7fd ff0e 	bl	800995e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJRA5_KcEEEvDpOT_>
    menu.setOptions(options);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	f103 0414 	add.w	r4, r3, #20
 800bb48:	f107 0208 	add.w	r2, r7, #8
 800bb4c:	f107 031c 	add.w	r3, r7, #28
 800bb50:	4611      	mov	r1, r2
 800bb52:	4618      	mov	r0, r3
 800bb54:	f7fd ff6c 	bl	8009a30 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ERKS7_>
 800bb58:	f107 031c 	add.w	r3, r7, #28
 800bb5c:	4619      	mov	r1, r3
 800bb5e:	4620      	mov	r0, r4
 800bb60:	f001 fbdb 	bl	800d31a <_ZN4tama4Menu10setOptionsESt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EE>
 800bb64:	f107 031c 	add.w	r3, r7, #28
 800bb68:	4618      	mov	r0, r3
 800bb6a:	f7fd f985 	bl	8008e78 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
    std::vector<std::string> options;
 800bb6e:	f107 0308 	add.w	r3, r7, #8
 800bb72:	4618      	mov	r0, r3
 800bb74:	f7fd f980 	bl	8008e78 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
}
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	372c      	adds	r7, #44	; 0x2c
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	bd90      	pop	{r4, r7, pc}
 800bb82:	bf00      	nop
 800bb84:	08023774 	.word	0x08023774
 800bb88:	08020a14 	.word	0x08020a14
 800bb8c:	08020a1c 	.word	0x08020a1c

0800bb90 <_ZSt11make_sharedIN4tama11JumpingGameEJRSt10shared_ptrINS0_7ContextEEEES2_IT_EDpOT0_>:
    make_shared(_Args&&... __args)
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b084      	sub	sp, #16
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
 800bb98:	6039      	str	r1, [r7, #0]
				       std::forward<_Args>(__args)...);
 800bb9a:	f107 030c 	add.w	r3, r7, #12
 800bb9e:	4618      	mov	r0, r3
 800bba0:	f000 f831 	bl	800bc06 <_ZNSaIN4tama11JumpingGameEEC1Ev>
 800bba4:	6838      	ldr	r0, [r7, #0]
 800bba6:	f7f9 fbf3 	bl	8005390 <_ZSt7forwardIRSt10shared_ptrIN4tama7ContextEEEOT_RNSt16remove_referenceIS5_E4typeE>
 800bbaa:	4602      	mov	r2, r0
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	f107 010c 	add.w	r1, r7, #12
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	f000 f83f 	bl	800bc36 <_ZSt15allocate_sharedIN4tama11JumpingGameESaIS1_EJRSt10shared_ptrINS0_7ContextEEEES3_IT_ERKT0_DpOT1_>
 800bbb8:	f107 030c 	add.w	r3, r7, #12
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	f000 f82e 	bl	800bc1e <_ZNSaIN4tama11JumpingGameEED1Ev>
    }
 800bbc2:	6878      	ldr	r0, [r7, #4]
 800bbc4:	3710      	adds	r7, #16
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	bd80      	pop	{r7, pc}

0800bbca <_ZSt4moveIRSt10shared_ptrIN4tama11JumpingGameEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 800bbca:	b480      	push	{r7}
 800bbcc:	b083      	sub	sp, #12
 800bbce:	af00      	add	r7, sp, #0
 800bbd0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	370c      	adds	r7, #12
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbde:	4770      	bx	lr

0800bbe0 <_ZNSt10shared_ptrIN4tama5StageEEC1INS0_11JumpingGameEvEEOS_IT_E>:
	shared_ptr(shared_ptr<_Yp>&& __r) noexcept
 800bbe0:	b590      	push	{r4, r7, lr}
 800bbe2:	b083      	sub	sp, #12
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
 800bbe8:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 800bbea:	687c      	ldr	r4, [r7, #4]
 800bbec:	6838      	ldr	r0, [r7, #0]
 800bbee:	f7ff ffec 	bl	800bbca <_ZSt4moveIRSt10shared_ptrIN4tama11JumpingGameEEEONSt16remove_referenceIT_E4typeEOS6_>
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	4619      	mov	r1, r3
 800bbf6:	4620      	mov	r0, r4
 800bbf8:	f000 f830 	bl	800bc5c <_ZNSt12__shared_ptrIN4tama5StageELN9__gnu_cxx12_Lock_policyE0EEC1INS0_11JumpingGameEvEEOS_IT_LS3_0EE>
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	4618      	mov	r0, r3
 800bc00:	370c      	adds	r7, #12
 800bc02:	46bd      	mov	sp, r7
 800bc04:	bd90      	pop	{r4, r7, pc}

0800bc06 <_ZNSaIN4tama11JumpingGameEEC1Ev>:
      allocator() throw() { }
 800bc06:	b580      	push	{r7, lr}
 800bc08:	b082      	sub	sp, #8
 800bc0a:	af00      	add	r7, sp, #0
 800bc0c:	6078      	str	r0, [r7, #4]
 800bc0e:	6878      	ldr	r0, [r7, #4]
 800bc10:	f000 f842 	bl	800bc98 <_ZN9__gnu_cxx13new_allocatorIN4tama11JumpingGameEEC1Ev>
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	4618      	mov	r0, r3
 800bc18:	3708      	adds	r7, #8
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	bd80      	pop	{r7, pc}

0800bc1e <_ZNSaIN4tama11JumpingGameEED1Ev>:
      ~allocator() throw() { }
 800bc1e:	b580      	push	{r7, lr}
 800bc20:	b082      	sub	sp, #8
 800bc22:	af00      	add	r7, sp, #0
 800bc24:	6078      	str	r0, [r7, #4]
 800bc26:	6878      	ldr	r0, [r7, #4]
 800bc28:	f000 f841 	bl	800bcae <_ZN9__gnu_cxx13new_allocatorIN4tama11JumpingGameEED1Ev>
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	4618      	mov	r0, r3
 800bc30:	3708      	adds	r7, #8
 800bc32:	46bd      	mov	sp, r7
 800bc34:	bd80      	pop	{r7, pc}

0800bc36 <_ZSt15allocate_sharedIN4tama11JumpingGameESaIS1_EJRSt10shared_ptrINS0_7ContextEEEES3_IT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 800bc36:	b590      	push	{r4, r7, lr}
 800bc38:	b087      	sub	sp, #28
 800bc3a:	af00      	add	r7, sp, #0
 800bc3c:	60f8      	str	r0, [r7, #12]
 800bc3e:	60b9      	str	r1, [r7, #8]
 800bc40:	607a      	str	r2, [r7, #4]
			     std::forward<_Args>(__args)...);
 800bc42:	6878      	ldr	r0, [r7, #4]
 800bc44:	f7f9 fba4 	bl	8005390 <_ZSt7forwardIRSt10shared_ptrIN4tama7ContextEEEOT_RNSt16remove_referenceIS5_E4typeE>
 800bc48:	4603      	mov	r3, r0
 800bc4a:	68ba      	ldr	r2, [r7, #8]
 800bc4c:	4621      	mov	r1, r4
 800bc4e:	68f8      	ldr	r0, [r7, #12]
 800bc50:	f000 f838 	bl	800bcc4 <_ZNSt10shared_ptrIN4tama11JumpingGameEEC1ISaIS1_EJRS_INS0_7ContextEEEEESt19_Sp_make_shared_tagRKT_DpOT0_>
    }
 800bc54:	68f8      	ldr	r0, [r7, #12]
 800bc56:	371c      	adds	r7, #28
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	bd90      	pop	{r4, r7, pc}

0800bc5c <_ZNSt12__shared_ptrIN4tama5StageELN9__gnu_cxx12_Lock_policyE0EEC1INS0_11JumpingGameEvEEOS_IT_LS3_0EE>:
	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b082      	sub	sp, #8
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
 800bc64:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount()
 800bc66:	683b      	ldr	r3, [r7, #0]
 800bc68:	681a      	ldr	r2, [r3, #0]
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	601a      	str	r2, [r3, #0]
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	3304      	adds	r3, #4
 800bc72:	4618      	mov	r0, r3
 800bc74:	f7f8 f97b 	bl	8003f6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _M_refcount._M_swap(__r._M_refcount);
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	1d1a      	adds	r2, r3, #4
 800bc7c:	683b      	ldr	r3, [r7, #0]
 800bc7e:	3304      	adds	r3, #4
 800bc80:	4619      	mov	r1, r3
 800bc82:	4610      	mov	r0, r2
 800bc84:	f7f8 fa7c 	bl	8004180 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  __r._M_ptr = 0;
 800bc88:	683b      	ldr	r3, [r7, #0]
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	601a      	str	r2, [r3, #0]
	}
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	4618      	mov	r0, r3
 800bc92:	3708      	adds	r7, #8
 800bc94:	46bd      	mov	sp, r7
 800bc96:	bd80      	pop	{r7, pc}

0800bc98 <_ZN9__gnu_cxx13new_allocatorIN4tama11JumpingGameEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800bc98:	b480      	push	{r7}
 800bc9a:	b083      	sub	sp, #12
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	4618      	mov	r0, r3
 800bca4:	370c      	adds	r7, #12
 800bca6:	46bd      	mov	sp, r7
 800bca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcac:	4770      	bx	lr

0800bcae <_ZN9__gnu_cxx13new_allocatorIN4tama11JumpingGameEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800bcae:	b480      	push	{r7}
 800bcb0:	b083      	sub	sp, #12
 800bcb2:	af00      	add	r7, sp, #0
 800bcb4:	6078      	str	r0, [r7, #4]
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	4618      	mov	r0, r3
 800bcba:	370c      	adds	r7, #12
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc2:	4770      	bx	lr

0800bcc4 <_ZNSt10shared_ptrIN4tama11JumpingGameEEC1ISaIS1_EJRS_INS0_7ContextEEEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 800bcc4:	b5b0      	push	{r4, r5, r7, lr}
 800bcc6:	b084      	sub	sp, #16
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	60f8      	str	r0, [r7, #12]
 800bccc:	7239      	strb	r1, [r7, #8]
 800bcce:	607a      	str	r2, [r7, #4]
 800bcd0:	603b      	str	r3, [r7, #0]
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
 800bcd2:	68fc      	ldr	r4, [r7, #12]
 800bcd4:	6838      	ldr	r0, [r7, #0]
 800bcd6:	f7f9 fb5b 	bl	8005390 <_ZSt7forwardIRSt10shared_ptrIN4tama7ContextEEEOT_RNSt16remove_referenceIS5_E4typeE>
 800bcda:	4603      	mov	r3, r0
 800bcdc:	687a      	ldr	r2, [r7, #4]
 800bcde:	4629      	mov	r1, r5
 800bce0:	4620      	mov	r0, r4
 800bce2:	f000 f822 	bl	800bd2a <_ZNSt12__shared_ptrIN4tama11JumpingGameELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJRSt10shared_ptrINS0_7ContextEEEEESt19_Sp_make_shared_tagRKT_DpOT0_>
	{ }
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	4618      	mov	r0, r3
 800bcea:	3710      	adds	r7, #16
 800bcec:	46bd      	mov	sp, r7
 800bcee:	bdb0      	pop	{r4, r5, r7, pc}

0800bcf0 <_ZNSt12__shared_ptrIN4tama11JumpingGameELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>:
        struct _Deleter
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b082      	sub	sp, #8
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	f7ff ff8f 	bl	800bc1e <_ZNSaIN4tama11JumpingGameEED1Ev>
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	4618      	mov	r0, r3
 800bd04:	3708      	adds	r7, #8
 800bd06:	46bd      	mov	sp, r7
 800bd08:	bd80      	pop	{r7, pc}

0800bd0a <_ZNSt12__shared_ptrIN4tama11JumpingGameELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>:
 800bd0a:	b580      	push	{r7, lr}
 800bd0c:	b082      	sub	sp, #8
 800bd0e:	af00      	add	r7, sp, #0
 800bd10:	6078      	str	r0, [r7, #4]
 800bd12:	6039      	str	r1, [r7, #0]
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	683a      	ldr	r2, [r7, #0]
 800bd18:	4611      	mov	r1, r2
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	f000 f880 	bl	800be20 <_ZNSaIN4tama11JumpingGameEEC1ERKS1_>
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	4618      	mov	r0, r3
 800bd24:	3708      	adds	r7, #8
 800bd26:	46bd      	mov	sp, r7
 800bd28:	bd80      	pop	{r7, pc}

0800bd2a <_ZNSt12__shared_ptrIN4tama11JumpingGameELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJRSt10shared_ptrINS0_7ContextEEEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 800bd2a:	b580      	push	{r7, lr}
 800bd2c:	b08c      	sub	sp, #48	; 0x30
 800bd2e:	af00      	add	r7, sp, #0
 800bd30:	60f8      	str	r0, [r7, #12]
 800bd32:	7239      	strb	r1, [r7, #8]
 800bd34:	607a      	str	r2, [r7, #4]
 800bd36:	603b      	str	r3, [r7, #0]
	: _M_ptr(), _M_refcount()
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	601a      	str	r2, [r3, #0]
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	3304      	adds	r3, #4
 800bd42:	4618      	mov	r0, r3
 800bd44:	f7f8 f913 	bl	8003f6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 800bd48:	f107 0320 	add.w	r3, r7, #32
 800bd4c:	6879      	ldr	r1, [r7, #4]
 800bd4e:	4618      	mov	r0, r3
 800bd50:	f000 f866 	bl	800be20 <_ZNSaIN4tama11JumpingGameEEC1ERKS1_>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 800bd54:	f107 0318 	add.w	r3, r7, #24
 800bd58:	f107 0220 	add.w	r2, r7, #32
 800bd5c:	4611      	mov	r1, r2
 800bd5e:	4618      	mov	r0, r3
 800bd60:	f000 f86c 	bl	800be3c <_ZSt18__allocate_guardedISaIN4tama11JumpingGameEEESt15__allocated_ptrIT_ERS4_>
	  auto __ptr = __guard.get();
 800bd64:	f107 0318 	add.w	r3, r7, #24
 800bd68:	4618      	mov	r0, r3
 800bd6a:	f000 f88f 	bl	800be8c <_ZNSt15__allocated_ptrISaIN4tama11JumpingGameEEE3getEv>
 800bd6e:	62f8      	str	r0, [r7, #44]	; 0x2c
	  __traits::construct(__del._M_alloc, __ptr,
 800bd70:	6838      	ldr	r0, [r7, #0]
 800bd72:	f7f9 fb0d 	bl	8005390 <_ZSt7forwardIRSt10shared_ptrIN4tama7ContextEEEOT_RNSt16remove_referenceIS5_E4typeE>
 800bd76:	4602      	mov	r2, r0
 800bd78:	f107 0320 	add.w	r3, r7, #32
 800bd7c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bd7e:	4618      	mov	r0, r3
 800bd80:	f000 f892 	bl	800bea8 <_ZNSt16allocator_traitsISaIN4tama11JumpingGameEEE9constructIS1_JRSt10shared_ptrINS0_7ContextEEEEEvRS2_PT_DpOT0_>
	  __guard = nullptr;
 800bd84:	f107 0318 	add.w	r3, r7, #24
 800bd88:	2100      	movs	r1, #0
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	f000 f89f 	bl	800bece <_ZNSt15__allocated_ptrISaIN4tama11JumpingGameEEEaSEDn>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 800bd90:	f107 0220 	add.w	r2, r7, #32
 800bd94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bd98:	4611      	mov	r1, r2
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	f7ff ffb5 	bl	800bd0a <_ZNSt12__shared_ptrIN4tama11JumpingGameELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>
 800bda0:	f107 0220 	add.w	r2, r7, #32
 800bda4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bda8:	4611      	mov	r1, r2
 800bdaa:	4618      	mov	r0, r3
 800bdac:	f000 f838 	bl	800be20 <_ZNSaIN4tama11JumpingGameEEC1ERKS1_>
 800bdb0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bdb4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800bdb8:	f107 0014 	add.w	r0, r7, #20
 800bdbc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bdbe:	f000 f8bb 	bl	800bf38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama11JumpingGameENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
 800bdc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	f7ff ff29 	bl	800bc1e <_ZNSaIN4tama11JumpingGameEED1Ev>
 800bdcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	f7ff ff8d 	bl	800bcf0 <_ZNSt12__shared_ptrIN4tama11JumpingGameELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	  _M_refcount._M_swap(__count);
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	3304      	adds	r3, #4
 800bdda:	f107 0214 	add.w	r2, r7, #20
 800bdde:	4611      	mov	r1, r2
 800bde0:	4618      	mov	r0, r3
 800bde2:	f7f8 f9cd 	bl	8004180 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  _M_ptr = __ptr;
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bdea:	601a      	str	r2, [r3, #0]
	  _M_enable_shared_from_this_with(_M_ptr);
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	4619      	mov	r1, r3
 800bdf2:	68f8      	ldr	r0, [r7, #12]
 800bdf4:	f000 f8f7 	bl	800bfe6 <_ZNSt12__shared_ptrIN4tama11JumpingGameELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 800bdf8:	f107 0314 	add.w	r3, r7, #20
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	f7f7 f988 	bl	8003112 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 800be02:	f107 0318 	add.w	r3, r7, #24
 800be06:	4618      	mov	r0, r3
 800be08:	f000 f82b 	bl	800be62 <_ZNSt15__allocated_ptrISaIN4tama11JumpingGameEEED1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 800be0c:	f107 0320 	add.w	r3, r7, #32
 800be10:	4618      	mov	r0, r3
 800be12:	f7ff ff6d 	bl	800bcf0 <_ZNSt12__shared_ptrIN4tama11JumpingGameELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	}
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	4618      	mov	r0, r3
 800be1a:	3730      	adds	r7, #48	; 0x30
 800be1c:	46bd      	mov	sp, r7
 800be1e:	bd80      	pop	{r7, pc}

0800be20 <_ZNSaIN4tama11JumpingGameEEC1ERKS1_>:
      allocator(const allocator& __a) throw()
 800be20:	b580      	push	{r7, lr}
 800be22:	b082      	sub	sp, #8
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
 800be28:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800be2a:	6839      	ldr	r1, [r7, #0]
 800be2c:	6878      	ldr	r0, [r7, #4]
 800be2e:	f000 f8e5 	bl	800bffc <_ZN9__gnu_cxx13new_allocatorIN4tama11JumpingGameEEC1ERKS3_>
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	4618      	mov	r0, r3
 800be36:	3708      	adds	r7, #8
 800be38:	46bd      	mov	sp, r7
 800be3a:	bd80      	pop	{r7, pc}

0800be3c <_ZSt18__allocate_guardedISaIN4tama11JumpingGameEEESt15__allocated_ptrIT_ERS4_>:
    __allocate_guarded(_Alloc& __a)
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b082      	sub	sp, #8
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
 800be44:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 800be46:	2101      	movs	r1, #1
 800be48:	6838      	ldr	r0, [r7, #0]
 800be4a:	f000 f8e3 	bl	800c014 <_ZNSt16allocator_traitsISaIN4tama11JumpingGameEEE8allocateERS2_j>
 800be4e:	4603      	mov	r3, r0
 800be50:	461a      	mov	r2, r3
 800be52:	6839      	ldr	r1, [r7, #0]
 800be54:	6878      	ldr	r0, [r7, #4]
 800be56:	f000 f8ec 	bl	800c032 <_ZNSt15__allocated_ptrISaIN4tama11JumpingGameEEEC1ERS2_PS1_>
    }
 800be5a:	6878      	ldr	r0, [r7, #4]
 800be5c:	3708      	adds	r7, #8
 800be5e:	46bd      	mov	sp, r7
 800be60:	bd80      	pop	{r7, pc}

0800be62 <_ZNSt15__allocated_ptrISaIN4tama11JumpingGameEEED1Ev>:
      ~__allocated_ptr()
 800be62:	b580      	push	{r7, lr}
 800be64:	b082      	sub	sp, #8
 800be66:	af00      	add	r7, sp, #0
 800be68:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	685b      	ldr	r3, [r3, #4]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d007      	beq.n	800be82 <_ZNSt15__allocated_ptrISaIN4tama11JumpingGameEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	6818      	ldr	r0, [r3, #0]
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	685b      	ldr	r3, [r3, #4]
 800be7a:	2201      	movs	r2, #1
 800be7c:	4619      	mov	r1, r3
 800be7e:	f000 f8ec 	bl	800c05a <_ZNSt16allocator_traitsISaIN4tama11JumpingGameEEE10deallocateERS2_PS1_j>
      }
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	4618      	mov	r0, r3
 800be86:	3708      	adds	r7, #8
 800be88:	46bd      	mov	sp, r7
 800be8a:	bd80      	pop	{r7, pc}

0800be8c <_ZNSt15__allocated_ptrISaIN4tama11JumpingGameEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b082      	sub	sp, #8
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	685b      	ldr	r3, [r3, #4]
 800be98:	4618      	mov	r0, r3
 800be9a:	f000 f8ed 	bl	800c078 <_ZNSt15__allocated_ptrISaIN4tama11JumpingGameEEE10_S_raw_ptrEPS1_>
 800be9e:	4603      	mov	r3, r0
 800bea0:	4618      	mov	r0, r3
 800bea2:	3708      	adds	r7, #8
 800bea4:	46bd      	mov	sp, r7
 800bea6:	bd80      	pop	{r7, pc}

0800bea8 <_ZNSt16allocator_traitsISaIN4tama11JumpingGameEEE9constructIS1_JRSt10shared_ptrINS0_7ContextEEEEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b084      	sub	sp, #16
 800beac:	af00      	add	r7, sp, #0
 800beae:	60f8      	str	r0, [r7, #12]
 800beb0:	60b9      	str	r1, [r7, #8]
 800beb2:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800beb4:	6878      	ldr	r0, [r7, #4]
 800beb6:	f7f9 fa6b 	bl	8005390 <_ZSt7forwardIRSt10shared_ptrIN4tama7ContextEEEOT_RNSt16remove_referenceIS5_E4typeE>
 800beba:	4603      	mov	r3, r0
 800bebc:	461a      	mov	r2, r3
 800bebe:	68b9      	ldr	r1, [r7, #8]
 800bec0:	68f8      	ldr	r0, [r7, #12]
 800bec2:	f000 f8e4 	bl	800c08e <_ZN9__gnu_cxx13new_allocatorIN4tama11JumpingGameEE9constructIS2_JRSt10shared_ptrINS1_7ContextEEEEEvPT_DpOT0_>
 800bec6:	bf00      	nop
 800bec8:	3710      	adds	r7, #16
 800beca:	46bd      	mov	sp, r7
 800becc:	bd80      	pop	{r7, pc}

0800bece <_ZNSt15__allocated_ptrISaIN4tama11JumpingGameEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 800bece:	b480      	push	{r7}
 800bed0:	b083      	sub	sp, #12
 800bed2:	af00      	add	r7, sp, #0
 800bed4:	6078      	str	r0, [r7, #4]
 800bed6:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2200      	movs	r2, #0
 800bedc:	605a      	str	r2, [r3, #4]
	return *this;
 800bede:	687b      	ldr	r3, [r7, #4]
      }
 800bee0:	4618      	mov	r0, r3
 800bee2:	370c      	adds	r7, #12
 800bee4:	46bd      	mov	sp, r7
 800bee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beea:	4770      	bx	lr

0800beec <_ZSt4moveIRNSt12__shared_ptrIN4tama11JumpingGameELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 800beec:	b480      	push	{r7}
 800beee:	b083      	sub	sp, #12
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	4618      	mov	r0, r3
 800bef8:	370c      	adds	r7, #12
 800befa:	46bd      	mov	sp, r7
 800befc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf00:	4770      	bx	lr

0800bf02 <_ZNSt12__shared_ptrIN4tama11JumpingGameELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>:
        struct _Deleter
 800bf02:	b580      	push	{r7, lr}
 800bf04:	b082      	sub	sp, #8
 800bf06:	af00      	add	r7, sp, #0
 800bf08:	6078      	str	r0, [r7, #4]
 800bf0a:	6039      	str	r1, [r7, #0]
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	683a      	ldr	r2, [r7, #0]
 800bf10:	4611      	mov	r1, r2
 800bf12:	4618      	mov	r0, r3
 800bf14:	f7ff ff84 	bl	800be20 <_ZNSaIN4tama11JumpingGameEEC1ERKS1_>
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	3708      	adds	r7, #8
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	bd80      	pop	{r7, pc}

0800bf22 <_ZSt4moveIRSaIN4tama11JumpingGameEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800bf22:	b480      	push	{r7}
 800bf24:	b083      	sub	sp, #12
 800bf26:	af00      	add	r7, sp, #0
 800bf28:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	370c      	adds	r7, #12
 800bf30:	46bd      	mov	sp, r7
 800bf32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf36:	4770      	bx	lr

0800bf38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama11JumpingGameENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
 800bf38:	b5b0      	push	{r4, r5, r7, lr}
 800bf3a:	b08a      	sub	sp, #40	; 0x28
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	60f8      	str	r0, [r7, #12]
 800bf40:	60b9      	str	r1, [r7, #8]
 800bf42:	607a      	str	r2, [r7, #4]
 800bf44:	603b      	str	r3, [r7, #0]
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	2200      	movs	r2, #0
 800bf4a:	601a      	str	r2, [r3, #0]
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 800bf4c:	f107 031c 	add.w	r3, r7, #28
 800bf50:	6839      	ldr	r1, [r7, #0]
 800bf52:	4618      	mov	r0, r3
 800bf54:	f000 f8b5 	bl	800c0c2 <_ZNSaISt19_Sp_counted_deleterIPN4tama11JumpingGameENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	      auto __guard = std::__allocate_guarded(__a2);
 800bf58:	f107 0314 	add.w	r3, r7, #20
 800bf5c:	f107 021c 	add.w	r2, r7, #28
 800bf60:	4611      	mov	r1, r2
 800bf62:	4618      	mov	r0, r3
 800bf64:	f000 f8c6 	bl	800c0f4 <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama11JumpingGameENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>
	      _Sp_cd_type* __mem = __guard.get();
 800bf68:	f107 0314 	add.w	r3, r7, #20
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	f000 f8e9 	bl	800c144 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama11JumpingGameENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>
 800bf72:	6278      	str	r0, [r7, #36]	; 0x24
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 800bf74:	6878      	ldr	r0, [r7, #4]
 800bf76:	f7ff ffb9 	bl	800beec <_ZSt4moveIRNSt12__shared_ptrIN4tama11JumpingGameELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800bf7a:	4602      	mov	r2, r0
 800bf7c:	f107 0320 	add.w	r3, r7, #32
 800bf80:	4611      	mov	r1, r2
 800bf82:	4618      	mov	r0, r3
 800bf84:	f7ff ffbd 	bl	800bf02 <_ZNSt12__shared_ptrIN4tama11JumpingGameELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 800bf88:	f107 0420 	add.w	r4, r7, #32
 800bf8c:	6838      	ldr	r0, [r7, #0]
 800bf8e:	f7ff ffc8 	bl	800bf22 <_ZSt4moveIRSaIN4tama11JumpingGameEEEONSt16remove_referenceIT_E4typeEOS5_>
 800bf92:	4605      	mov	r5, r0
 800bf94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf96:	4619      	mov	r1, r3
 800bf98:	2014      	movs	r0, #20
 800bf9a:	f7f5 f850 	bl	800103e <_ZnwjPv>
 800bf9e:	2800      	cmp	r0, #0
 800bfa0:	d004      	beq.n	800bfac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama11JumpingGameENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x74>
 800bfa2:	462b      	mov	r3, r5
 800bfa4:	4622      	mov	r2, r4
 800bfa6:	68b9      	ldr	r1, [r7, #8]
 800bfa8:	f000 f906 	bl	800c1b8 <_ZNSt19_Sp_counted_deleterIPN4tama11JumpingGameENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>
 800bfac:	f107 0320 	add.w	r3, r7, #32
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	f7ff fe9d 	bl	800bcf0 <_ZNSt12__shared_ptrIN4tama11JumpingGameELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	      _M_pi = __mem;
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bfba:	601a      	str	r2, [r3, #0]
	      __guard = nullptr;
 800bfbc:	f107 0314 	add.w	r3, r7, #20
 800bfc0:	2100      	movs	r1, #0
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	f000 f926 	bl	800c214 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama11JumpingGameENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>
	      auto __guard = std::__allocate_guarded(__a2);
 800bfc8:	f107 0314 	add.w	r3, r7, #20
 800bfcc:	4618      	mov	r0, r3
 800bfce:	f000 f8a4 	bl	800c11a <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama11JumpingGameENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 800bfd2:	f107 031c 	add.w	r3, r7, #28
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	f000 f880 	bl	800c0dc <_ZNSaISt19_Sp_counted_deleterIPN4tama11JumpingGameENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
	}
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	4618      	mov	r0, r3
 800bfe0:	3728      	adds	r7, #40	; 0x28
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	bdb0      	pop	{r4, r5, r7, pc}

0800bfe6 <_ZNSt12__shared_ptrIN4tama11JumpingGameELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 800bfe6:	b480      	push	{r7}
 800bfe8:	b083      	sub	sp, #12
 800bfea:	af00      	add	r7, sp, #0
 800bfec:	6078      	str	r0, [r7, #4]
 800bfee:	6039      	str	r1, [r7, #0]
	{ }
 800bff0:	bf00      	nop
 800bff2:	370c      	adds	r7, #12
 800bff4:	46bd      	mov	sp, r7
 800bff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffa:	4770      	bx	lr

0800bffc <_ZN9__gnu_cxx13new_allocatorIN4tama11JumpingGameEEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800bffc:	b480      	push	{r7}
 800bffe:	b083      	sub	sp, #12
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
 800c004:	6039      	str	r1, [r7, #0]
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	4618      	mov	r0, r3
 800c00a:	370c      	adds	r7, #12
 800c00c:	46bd      	mov	sp, r7
 800c00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c012:	4770      	bx	lr

0800c014 <_ZNSt16allocator_traitsISaIN4tama11JumpingGameEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800c014:	b580      	push	{r7, lr}
 800c016:	b082      	sub	sp, #8
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
 800c01c:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800c01e:	2200      	movs	r2, #0
 800c020:	6839      	ldr	r1, [r7, #0]
 800c022:	6878      	ldr	r0, [r7, #4]
 800c024:	f000 f925 	bl	800c272 <_ZN9__gnu_cxx13new_allocatorIN4tama11JumpingGameEE8allocateEjPKv>
 800c028:	4603      	mov	r3, r0
 800c02a:	4618      	mov	r0, r3
 800c02c:	3708      	adds	r7, #8
 800c02e:	46bd      	mov	sp, r7
 800c030:	bd80      	pop	{r7, pc}

0800c032 <_ZNSt15__allocated_ptrISaIN4tama11JumpingGameEEEC1ERS2_PS1_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 800c032:	b580      	push	{r7, lr}
 800c034:	b084      	sub	sp, #16
 800c036:	af00      	add	r7, sp, #0
 800c038:	60f8      	str	r0, [r7, #12]
 800c03a:	60b9      	str	r1, [r7, #8]
 800c03c:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800c03e:	68b8      	ldr	r0, [r7, #8]
 800c040:	f000 f938 	bl	800c2b4 <_ZSt11__addressofISaIN4tama11JumpingGameEEEPT_RS3_>
 800c044:	4602      	mov	r2, r0
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	601a      	str	r2, [r3, #0]
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	687a      	ldr	r2, [r7, #4]
 800c04e:	605a      	str	r2, [r3, #4]
      { }
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	4618      	mov	r0, r3
 800c054:	3710      	adds	r7, #16
 800c056:	46bd      	mov	sp, r7
 800c058:	bd80      	pop	{r7, pc}

0800c05a <_ZNSt16allocator_traitsISaIN4tama11JumpingGameEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800c05a:	b580      	push	{r7, lr}
 800c05c:	b084      	sub	sp, #16
 800c05e:	af00      	add	r7, sp, #0
 800c060:	60f8      	str	r0, [r7, #12]
 800c062:	60b9      	str	r1, [r7, #8]
 800c064:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800c066:	687a      	ldr	r2, [r7, #4]
 800c068:	68b9      	ldr	r1, [r7, #8]
 800c06a:	68f8      	ldr	r0, [r7, #12]
 800c06c:	f000 f92d 	bl	800c2ca <_ZN9__gnu_cxx13new_allocatorIN4tama11JumpingGameEE10deallocateEPS2_j>
 800c070:	bf00      	nop
 800c072:	3710      	adds	r7, #16
 800c074:	46bd      	mov	sp, r7
 800c076:	bd80      	pop	{r7, pc}

0800c078 <_ZNSt15__allocated_ptrISaIN4tama11JumpingGameEEE10_S_raw_ptrEPS1_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 800c078:	b480      	push	{r7}
 800c07a:	b083      	sub	sp, #12
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	4618      	mov	r0, r3
 800c084:	370c      	adds	r7, #12
 800c086:	46bd      	mov	sp, r7
 800c088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08c:	4770      	bx	lr

0800c08e <_ZN9__gnu_cxx13new_allocatorIN4tama11JumpingGameEE9constructIS2_JRSt10shared_ptrINS1_7ContextEEEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800c08e:	b590      	push	{r4, r7, lr}
 800c090:	b085      	sub	sp, #20
 800c092:	af00      	add	r7, sp, #0
 800c094:	60f8      	str	r0, [r7, #12]
 800c096:	60b9      	str	r1, [r7, #8]
 800c098:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800c09a:	6878      	ldr	r0, [r7, #4]
 800c09c:	f7f9 f978 	bl	8005390 <_ZSt7forwardIRSt10shared_ptrIN4tama7ContextEEEOT_RNSt16remove_referenceIS5_E4typeE>
 800c0a0:	4604      	mov	r4, r0
 800c0a2:	68bb      	ldr	r3, [r7, #8]
 800c0a4:	4619      	mov	r1, r3
 800c0a6:	20f0      	movs	r0, #240	; 0xf0
 800c0a8:	f7f4 ffc9 	bl	800103e <_ZnwjPv>
 800c0ac:	4603      	mov	r3, r0
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d003      	beq.n	800c0ba <_ZN9__gnu_cxx13new_allocatorIN4tama11JumpingGameEE9constructIS2_JRSt10shared_ptrINS1_7ContextEEEEEvPT_DpOT0_+0x2c>
 800c0b2:	4621      	mov	r1, r4
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	f7fe fffb 	bl	800b0b0 <_ZN4tama11JumpingGameC1ERKSt10shared_ptrINS_7ContextEE>
 800c0ba:	bf00      	nop
 800c0bc:	3714      	adds	r7, #20
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	bd90      	pop	{r4, r7, pc}

0800c0c2 <_ZNSaISt19_Sp_counted_deleterIPN4tama11JumpingGameENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) throw() { }
 800c0c2:	b580      	push	{r7, lr}
 800c0c4:	b082      	sub	sp, #8
 800c0c6:	af00      	add	r7, sp, #0
 800c0c8:	6078      	str	r0, [r7, #4]
 800c0ca:	6039      	str	r1, [r7, #0]
 800c0cc:	6878      	ldr	r0, [r7, #4]
 800c0ce:	f000 f909 	bl	800c2e4 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama11JumpingGameENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	3708      	adds	r7, #8
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	bd80      	pop	{r7, pc}

0800c0dc <_ZNSaISt19_Sp_counted_deleterIPN4tama11JumpingGameENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>:
      ~allocator() throw() { }
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b082      	sub	sp, #8
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
 800c0e4:	6878      	ldr	r0, [r7, #4]
 800c0e6:	f000 f908 	bl	800c2fa <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama11JumpingGameENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	3708      	adds	r7, #8
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bd80      	pop	{r7, pc}

0800c0f4 <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama11JumpingGameENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>:
    __allocate_guarded(_Alloc& __a)
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b082      	sub	sp, #8
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
 800c0fc:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 800c0fe:	2101      	movs	r1, #1
 800c100:	6838      	ldr	r0, [r7, #0]
 800c102:	f000 f905 	bl	800c310 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama11JumpingGameENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>
 800c106:	4603      	mov	r3, r0
 800c108:	461a      	mov	r2, r3
 800c10a:	6839      	ldr	r1, [r7, #0]
 800c10c:	6878      	ldr	r0, [r7, #4]
 800c10e:	f000 f90e 	bl	800c32e <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama11JumpingGameENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
    }
 800c112:	6878      	ldr	r0, [r7, #4]
 800c114:	3708      	adds	r7, #8
 800c116:	46bd      	mov	sp, r7
 800c118:	bd80      	pop	{r7, pc}

0800c11a <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama11JumpingGameENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>:
      ~__allocated_ptr()
 800c11a:	b580      	push	{r7, lr}
 800c11c:	b082      	sub	sp, #8
 800c11e:	af00      	add	r7, sp, #0
 800c120:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	685b      	ldr	r3, [r3, #4]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d007      	beq.n	800c13a <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama11JumpingGameENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	6818      	ldr	r0, [r3, #0]
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	685b      	ldr	r3, [r3, #4]
 800c132:	2201      	movs	r2, #1
 800c134:	4619      	mov	r1, r3
 800c136:	f000 f90e 	bl	800c356 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama11JumpingGameENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>
      }
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	4618      	mov	r0, r3
 800c13e:	3708      	adds	r7, #8
 800c140:	46bd      	mov	sp, r7
 800c142:	bd80      	pop	{r7, pc}

0800c144 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama11JumpingGameENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 800c144:	b580      	push	{r7, lr}
 800c146:	b082      	sub	sp, #8
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	685b      	ldr	r3, [r3, #4]
 800c150:	4618      	mov	r0, r3
 800c152:	f000 f90f 	bl	800c374 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama11JumpingGameENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>
 800c156:	4603      	mov	r3, r0
 800c158:	4618      	mov	r0, r3
 800c15a:	3708      	adds	r7, #8
 800c15c:	46bd      	mov	sp, r7
 800c15e:	bd80      	pop	{r7, pc}

0800c160 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama11JumpingGameELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, false>
 800c160:	b580      	push	{r7, lr}
 800c162:	b082      	sub	sp, #8
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	4618      	mov	r0, r3
 800c16c:	f7ff fdc0 	bl	800bcf0 <_ZNSt12__shared_ptrIN4tama11JumpingGameELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	4618      	mov	r0, r3
 800c174:	3708      	adds	r7, #8
 800c176:	46bd      	mov	sp, r7
 800c178:	bd80      	pop	{r7, pc}

0800c17a <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama11JumpingGameEELb1EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp
 800c17a:	b580      	push	{r7, lr}
 800c17c:	b082      	sub	sp, #8
 800c17e:	af00      	add	r7, sp, #0
 800c180:	6078      	str	r0, [r7, #4]
 800c182:	6878      	ldr	r0, [r7, #4]
 800c184:	f7ff fd4b 	bl	800bc1e <_ZNSaIN4tama11JumpingGameEED1Ev>
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	4618      	mov	r0, r3
 800c18c:	3708      	adds	r7, #8
 800c18e:	46bd      	mov	sp, r7
 800c190:	bd80      	pop	{r7, pc}

0800c192 <_ZNSt19_Sp_counted_deleterIPN4tama11JumpingGameENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>:
      class _Impl : _Sp_ebo_helper<0, _Deleter>, _Sp_ebo_helper<1, _Alloc>
 800c192:	b580      	push	{r7, lr}
 800c194:	b082      	sub	sp, #8
 800c196:	af00      	add	r7, sp, #0
 800c198:	6078      	str	r0, [r7, #4]
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	3301      	adds	r3, #1
 800c19e:	4618      	mov	r0, r3
 800c1a0:	f7ff ffeb 	bl	800c17a <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama11JumpingGameEELb1EED1Ev>
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	f7ff ffda 	bl	800c160 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama11JumpingGameELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	3708      	adds	r7, #8
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	bd80      	pop	{r7, pc}
	...

0800c1b8 <_ZNSt19_Sp_counted_deleterIPN4tama11JumpingGameENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 800c1b8:	b590      	push	{r4, r7, lr}
 800c1ba:	b087      	sub	sp, #28
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	60f8      	str	r0, [r7, #12]
 800c1c0:	60b9      	str	r1, [r7, #8]
 800c1c2:	607a      	str	r2, [r7, #4]
 800c1c4:	603b      	str	r3, [r7, #0]
      : _M_impl(__p, std::move(__d), __a) { }
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	f7f8 fabd 	bl	8004748 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800c1ce:	4a10      	ldr	r2, [pc, #64]	; (800c210 <_ZNSt19_Sp_counted_deleterIPN4tama11JumpingGameENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_+0x58>)
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	601a      	str	r2, [r3, #0]
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	f103 040c 	add.w	r4, r3, #12
 800c1da:	6878      	ldr	r0, [r7, #4]
 800c1dc:	f7ff fe86 	bl	800beec <_ZSt4moveIRNSt12__shared_ptrIN4tama11JumpingGameELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800c1e0:	4602      	mov	r2, r0
 800c1e2:	f107 0314 	add.w	r3, r7, #20
 800c1e6:	4611      	mov	r1, r2
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	f7ff fe8a 	bl	800bf02 <_ZNSt12__shared_ptrIN4tama11JumpingGameELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 800c1ee:	f107 0214 	add.w	r2, r7, #20
 800c1f2:	683b      	ldr	r3, [r7, #0]
 800c1f4:	68b9      	ldr	r1, [r7, #8]
 800c1f6:	4620      	mov	r0, r4
 800c1f8:	f000 f8c7 	bl	800c38a <_ZNSt19_Sp_counted_deleterIPN4tama11JumpingGameENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>
 800c1fc:	f107 0314 	add.w	r3, r7, #20
 800c200:	4618      	mov	r0, r3
 800c202:	f7ff fd75 	bl	800bcf0 <_ZNSt12__shared_ptrIN4tama11JumpingGameELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	4618      	mov	r0, r3
 800c20a:	371c      	adds	r7, #28
 800c20c:	46bd      	mov	sp, r7
 800c20e:	bd90      	pop	{r4, r7, pc}
 800c210:	08023758 	.word	0x08023758

0800c214 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama11JumpingGameENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 800c214:	b480      	push	{r7}
 800c216:	b083      	sub	sp, #12
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
 800c21c:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	2200      	movs	r2, #0
 800c222:	605a      	str	r2, [r3, #4]
	return *this;
 800c224:	687b      	ldr	r3, [r7, #4]
      }
 800c226:	4618      	mov	r0, r3
 800c228:	370c      	adds	r7, #12
 800c22a:	46bd      	mov	sp, r7
 800c22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c230:	4770      	bx	lr

0800c232 <_ZNSt12__shared_ptrIN4tama11JumpingGameELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>:
          void operator()(typename _Alloc::value_type* __ptr)
 800c232:	b590      	push	{r4, r7, lr}
 800c234:	b085      	sub	sp, #20
 800c236:	af00      	add	r7, sp, #0
 800c238:	6078      	str	r0, [r7, #4]
 800c23a:	6039      	str	r1, [r7, #0]
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 800c23c:	6879      	ldr	r1, [r7, #4]
 800c23e:	f107 0308 	add.w	r3, r7, #8
 800c242:	683a      	ldr	r2, [r7, #0]
 800c244:	4618      	mov	r0, r3
 800c246:	f7ff fef4 	bl	800c032 <_ZNSt15__allocated_ptrISaIN4tama11JumpingGameEEEC1ERS2_PS1_>
	    allocator_traits<_Alloc>::destroy(_M_alloc, __guard.get());
 800c24a:	687c      	ldr	r4, [r7, #4]
 800c24c:	f107 0308 	add.w	r3, r7, #8
 800c250:	4618      	mov	r0, r3
 800c252:	f7ff fe1b 	bl	800be8c <_ZNSt15__allocated_ptrISaIN4tama11JumpingGameEEE3getEv>
 800c256:	4603      	mov	r3, r0
 800c258:	4619      	mov	r1, r3
 800c25a:	4620      	mov	r0, r4
 800c25c:	f000 f8b3 	bl	800c3c6 <_ZNSt16allocator_traitsISaIN4tama11JumpingGameEEE7destroyIS1_EEvRS2_PT_>
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 800c260:	f107 0308 	add.w	r3, r7, #8
 800c264:	4618      	mov	r0, r3
 800c266:	f7ff fdfc 	bl	800be62 <_ZNSt15__allocated_ptrISaIN4tama11JumpingGameEEED1Ev>
          }
 800c26a:	bf00      	nop
 800c26c:	3714      	adds	r7, #20
 800c26e:	46bd      	mov	sp, r7
 800c270:	bd90      	pop	{r4, r7, pc}

0800c272 <_ZN9__gnu_cxx13new_allocatorIN4tama11JumpingGameEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800c272:	b580      	push	{r7, lr}
 800c274:	b084      	sub	sp, #16
 800c276:	af00      	add	r7, sp, #0
 800c278:	60f8      	str	r0, [r7, #12]
 800c27a:	60b9      	str	r1, [r7, #8]
 800c27c:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800c27e:	68f8      	ldr	r0, [r7, #12]
 800c280:	f000 f8ae 	bl	800c3e0 <_ZNK9__gnu_cxx13new_allocatorIN4tama11JumpingGameEE8max_sizeEv>
 800c284:	4602      	mov	r2, r0
 800c286:	68bb      	ldr	r3, [r7, #8]
 800c288:	4293      	cmp	r3, r2
 800c28a:	bf8c      	ite	hi
 800c28c:	2301      	movhi	r3, #1
 800c28e:	2300      	movls	r3, #0
 800c290:	b2db      	uxtb	r3, r3
 800c292:	2b00      	cmp	r3, #0
 800c294:	d001      	beq.n	800c29a <_ZN9__gnu_cxx13new_allocatorIN4tama11JumpingGameEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800c296:	f013 fb40 	bl	801f91a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800c29a:	68ba      	ldr	r2, [r7, #8]
 800c29c:	4613      	mov	r3, r2
 800c29e:	011b      	lsls	r3, r3, #4
 800c2a0:	1a9b      	subs	r3, r3, r2
 800c2a2:	011b      	lsls	r3, r3, #4
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	f013 fb0a 	bl	801f8be <_Znwj>
 800c2aa:	4603      	mov	r3, r0
      }
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	3710      	adds	r7, #16
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	bd80      	pop	{r7, pc}

0800c2b4 <_ZSt11__addressofISaIN4tama11JumpingGameEEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800c2b4:	b480      	push	{r7}
 800c2b6:	b083      	sub	sp, #12
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	4618      	mov	r0, r3
 800c2c0:	370c      	adds	r7, #12
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c8:	4770      	bx	lr

0800c2ca <_ZN9__gnu_cxx13new_allocatorIN4tama11JumpingGameEE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 800c2ca:	b580      	push	{r7, lr}
 800c2cc:	b084      	sub	sp, #16
 800c2ce:	af00      	add	r7, sp, #0
 800c2d0:	60f8      	str	r0, [r7, #12]
 800c2d2:	60b9      	str	r1, [r7, #8]
 800c2d4:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800c2d6:	68b8      	ldr	r0, [r7, #8]
 800c2d8:	f013 fb0a 	bl	801f8f0 <_ZdlPv>
      }
 800c2dc:	bf00      	nop
 800c2de:	3710      	adds	r7, #16
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	bd80      	pop	{r7, pc}

0800c2e4 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama11JumpingGameENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800c2e4:	b480      	push	{r7}
 800c2e6:	b083      	sub	sp, #12
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	6078      	str	r0, [r7, #4]
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	370c      	adds	r7, #12
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f8:	4770      	bx	lr

0800c2fa <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama11JumpingGameENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800c2fa:	b480      	push	{r7}
 800c2fc:	b083      	sub	sp, #12
 800c2fe:	af00      	add	r7, sp, #0
 800c300:	6078      	str	r0, [r7, #4]
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	4618      	mov	r0, r3
 800c306:	370c      	adds	r7, #12
 800c308:	46bd      	mov	sp, r7
 800c30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30e:	4770      	bx	lr

0800c310 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama11JumpingGameENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>:
      allocate(allocator_type& __a, size_type __n)
 800c310:	b580      	push	{r7, lr}
 800c312:	b082      	sub	sp, #8
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
 800c318:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800c31a:	2200      	movs	r2, #0
 800c31c:	6839      	ldr	r1, [r7, #0]
 800c31e:	6878      	ldr	r0, [r7, #4]
 800c320:	f000 f86c 	bl	800c3fc <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama11JumpingGameENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>
 800c324:	4603      	mov	r3, r0
 800c326:	4618      	mov	r0, r3
 800c328:	3708      	adds	r7, #8
 800c32a:	46bd      	mov	sp, r7
 800c32c:	bd80      	pop	{r7, pc}

0800c32e <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama11JumpingGameENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 800c32e:	b580      	push	{r7, lr}
 800c330:	b084      	sub	sp, #16
 800c332:	af00      	add	r7, sp, #0
 800c334:	60f8      	str	r0, [r7, #12]
 800c336:	60b9      	str	r1, [r7, #8]
 800c338:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800c33a:	68b8      	ldr	r0, [r7, #8]
 800c33c:	f000 f87f 	bl	800c43e <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama11JumpingGameENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>
 800c340:	4602      	mov	r2, r0
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	601a      	str	r2, [r3, #0]
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	687a      	ldr	r2, [r7, #4]
 800c34a:	605a      	str	r2, [r3, #4]
      { }
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	4618      	mov	r0, r3
 800c350:	3710      	adds	r7, #16
 800c352:	46bd      	mov	sp, r7
 800c354:	bd80      	pop	{r7, pc}

0800c356 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama11JumpingGameENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800c356:	b580      	push	{r7, lr}
 800c358:	b084      	sub	sp, #16
 800c35a:	af00      	add	r7, sp, #0
 800c35c:	60f8      	str	r0, [r7, #12]
 800c35e:	60b9      	str	r1, [r7, #8]
 800c360:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800c362:	687a      	ldr	r2, [r7, #4]
 800c364:	68b9      	ldr	r1, [r7, #8]
 800c366:	68f8      	ldr	r0, [r7, #12]
 800c368:	f000 f874 	bl	800c454 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama11JumpingGameENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>
 800c36c:	bf00      	nop
 800c36e:	3710      	adds	r7, #16
 800c370:	46bd      	mov	sp, r7
 800c372:	bd80      	pop	{r7, pc}

0800c374 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama11JumpingGameENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 800c374:	b480      	push	{r7}
 800c376:	b083      	sub	sp, #12
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	4618      	mov	r0, r3
 800c380:	370c      	adds	r7, #12
 800c382:	46bd      	mov	sp, r7
 800c384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c388:	4770      	bx	lr

0800c38a <_ZNSt19_Sp_counted_deleterIPN4tama11JumpingGameENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 800c38a:	b590      	push	{r4, r7, lr}
 800c38c:	b085      	sub	sp, #20
 800c38e:	af00      	add	r7, sp, #0
 800c390:	60f8      	str	r0, [r7, #12]
 800c392:	60b9      	str	r1, [r7, #8]
 800c394:	607a      	str	r2, [r7, #4]
 800c396:	603b      	str	r3, [r7, #0]
	: _M_ptr(__p), _Del_base(std::move(__d)), _Alloc_base(__a)
 800c398:	68fc      	ldr	r4, [r7, #12]
 800c39a:	6878      	ldr	r0, [r7, #4]
 800c39c:	f7ff fda6 	bl	800beec <_ZSt4moveIRNSt12__shared_ptrIN4tama11JumpingGameELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800c3a0:	4603      	mov	r3, r0
 800c3a2:	4619      	mov	r1, r3
 800c3a4:	4620      	mov	r0, r4
 800c3a6:	f000 f862 	bl	800c46e <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama11JumpingGameELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	3301      	adds	r3, #1
 800c3ae:	6839      	ldr	r1, [r7, #0]
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	f000 f86f 	bl	800c494 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama11JumpingGameEELb1EEC1ERKS2_>
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	68ba      	ldr	r2, [r7, #8]
 800c3ba:	605a      	str	r2, [r3, #4]
	{ }
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	4618      	mov	r0, r3
 800c3c0:	3714      	adds	r7, #20
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	bd90      	pop	{r4, r7, pc}

0800c3c6 <_ZNSt16allocator_traitsISaIN4tama11JumpingGameEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 800c3c6:	b580      	push	{r7, lr}
 800c3c8:	b082      	sub	sp, #8
 800c3ca:	af00      	add	r7, sp, #0
 800c3cc:	6078      	str	r0, [r7, #4]
 800c3ce:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 800c3d0:	6839      	ldr	r1, [r7, #0]
 800c3d2:	6878      	ldr	r0, [r7, #4]
 800c3d4:	f000 f89c 	bl	800c510 <_ZN9__gnu_cxx13new_allocatorIN4tama11JumpingGameEE7destroyIS2_EEvPT_>
 800c3d8:	bf00      	nop
 800c3da:	3708      	adds	r7, #8
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	bd80      	pop	{r7, pc}

0800c3e0 <_ZNK9__gnu_cxx13new_allocatorIN4tama11JumpingGameEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800c3e0:	b480      	push	{r7}
 800c3e2:	b083      	sub	sp, #12
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800c3e8:	4b03      	ldr	r3, [pc, #12]	; (800c3f8 <_ZNK9__gnu_cxx13new_allocatorIN4tama11JumpingGameEE8max_sizeEv+0x18>)
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	370c      	adds	r7, #12
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f4:	4770      	bx	lr
 800c3f6:	bf00      	nop
 800c3f8:	01111111 	.word	0x01111111

0800c3fc <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama11JumpingGameENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b084      	sub	sp, #16
 800c400:	af00      	add	r7, sp, #0
 800c402:	60f8      	str	r0, [r7, #12]
 800c404:	60b9      	str	r1, [r7, #8]
 800c406:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800c408:	68f8      	ldr	r0, [r7, #12]
 800c40a:	f000 f88d 	bl	800c528 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama11JumpingGameENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>
 800c40e:	4602      	mov	r2, r0
 800c410:	68bb      	ldr	r3, [r7, #8]
 800c412:	4293      	cmp	r3, r2
 800c414:	bf8c      	ite	hi
 800c416:	2301      	movhi	r3, #1
 800c418:	2300      	movls	r3, #0
 800c41a:	b2db      	uxtb	r3, r3
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d001      	beq.n	800c424 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama11JumpingGameENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800c420:	f013 fa7b 	bl	801f91a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800c424:	68ba      	ldr	r2, [r7, #8]
 800c426:	4613      	mov	r3, r2
 800c428:	009b      	lsls	r3, r3, #2
 800c42a:	4413      	add	r3, r2
 800c42c:	009b      	lsls	r3, r3, #2
 800c42e:	4618      	mov	r0, r3
 800c430:	f013 fa45 	bl	801f8be <_Znwj>
 800c434:	4603      	mov	r3, r0
      }
 800c436:	4618      	mov	r0, r3
 800c438:	3710      	adds	r7, #16
 800c43a:	46bd      	mov	sp, r7
 800c43c:	bd80      	pop	{r7, pc}

0800c43e <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama11JumpingGameENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800c43e:	b480      	push	{r7}
 800c440:	b083      	sub	sp, #12
 800c442:	af00      	add	r7, sp, #0
 800c444:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	4618      	mov	r0, r3
 800c44a:	370c      	adds	r7, #12
 800c44c:	46bd      	mov	sp, r7
 800c44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c452:	4770      	bx	lr

0800c454 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama11JumpingGameENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>:
      deallocate(pointer __p, size_type)
 800c454:	b580      	push	{r7, lr}
 800c456:	b084      	sub	sp, #16
 800c458:	af00      	add	r7, sp, #0
 800c45a:	60f8      	str	r0, [r7, #12]
 800c45c:	60b9      	str	r1, [r7, #8]
 800c45e:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800c460:	68b8      	ldr	r0, [r7, #8]
 800c462:	f013 fa45 	bl	801f8f0 <_ZdlPv>
      }
 800c466:	bf00      	nop
 800c468:	3710      	adds	r7, #16
 800c46a:	46bd      	mov	sp, r7
 800c46c:	bd80      	pop	{r7, pc}

0800c46e <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama11JumpingGameELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _M_tp(std::move(__tp)) { }
 800c46e:	b590      	push	{r4, r7, lr}
 800c470:	b083      	sub	sp, #12
 800c472:	af00      	add	r7, sp, #0
 800c474:	6078      	str	r0, [r7, #4]
 800c476:	6039      	str	r1, [r7, #0]
 800c478:	687c      	ldr	r4, [r7, #4]
 800c47a:	6838      	ldr	r0, [r7, #0]
 800c47c:	f7ff fd36 	bl	800beec <_ZSt4moveIRNSt12__shared_ptrIN4tama11JumpingGameELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800c480:	4603      	mov	r3, r0
 800c482:	4619      	mov	r1, r3
 800c484:	4620      	mov	r0, r4
 800c486:	f7ff fd3c 	bl	800bf02 <_ZNSt12__shared_ptrIN4tama11JumpingGameELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	4618      	mov	r0, r3
 800c48e:	370c      	adds	r7, #12
 800c490:	46bd      	mov	sp, r7
 800c492:	bd90      	pop	{r4, r7, pc}

0800c494 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama11JumpingGameEELb1EEC1ERKS2_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 800c494:	b580      	push	{r7, lr}
 800c496:	b082      	sub	sp, #8
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
 800c49c:	6039      	str	r1, [r7, #0]
 800c49e:	6839      	ldr	r1, [r7, #0]
 800c4a0:	6878      	ldr	r0, [r7, #4]
 800c4a2:	f7ff fcbd 	bl	800be20 <_ZNSaIN4tama11JumpingGameEEC1ERKS1_>
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	3708      	adds	r7, #8
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	bd80      	pop	{r7, pc}

0800c4b0 <_ZN4tama11JumpingGameD1Ev>:
#include "../../../../ui/display/drawable/sprite/Sprite.h"
#include "../menu/PlayMenu.h"

namespace tama
{
    class JumpingGame : public Stage
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b082      	sub	sp, #8
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
 800c4b8:	4a14      	ldr	r2, [pc, #80]	; (800c50c <_ZN4tama11JumpingGameD1Ev+0x5c>)
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	601a      	str	r2, [r3, #0]
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	33d4      	adds	r3, #212	; 0xd4
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	f7f8 ff02 	bl	80052cc <_ZNSt10shared_ptrIN4tama11TimeMonitorEED1Ev>
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	33b4      	adds	r3, #180	; 0xb4
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	f7f9 fa13 	bl	80058f8 <_ZN4tama6SpriteD1Ev>
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	33ac      	adds	r3, #172	; 0xac
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	f7f8 fe87 	bl	80051ea <_ZNSt10shared_ptrIN4tama7TextureEED1Ev>
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	33a4      	adds	r3, #164	; 0xa4
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	f7f8 fe82 	bl	80051ea <_ZNSt10shared_ptrIN4tama7TextureEED1Ev>
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	335c      	adds	r3, #92	; 0x5c
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f7f8 fe8a 	bl	8005204 <_ZN4tama4TextD1Ev>
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	3314      	adds	r3, #20
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	f7f8 fe85 	bl	8005204 <_ZN4tama4TextD1Ev>
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	f7f8 febf 	bl	8005280 <_ZN4tama5StageD1Ev>
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	4618      	mov	r0, r3
 800c506:	3708      	adds	r7, #8
 800c508:	46bd      	mov	sp, r7
 800c50a:	bd80      	pop	{r7, pc}
 800c50c:	08023744 	.word	0x08023744

0800c510 <_ZN9__gnu_cxx13new_allocatorIN4tama11JumpingGameEE7destroyIS2_EEvPT_>:
	destroy(_Up* __p) { __p->~_Up(); }
 800c510:	b580      	push	{r7, lr}
 800c512:	b082      	sub	sp, #8
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
 800c518:	6039      	str	r1, [r7, #0]
 800c51a:	6838      	ldr	r0, [r7, #0]
 800c51c:	f7ff ffc8 	bl	800c4b0 <_ZN4tama11JumpingGameD1Ev>
 800c520:	bf00      	nop
 800c522:	3708      	adds	r7, #8
 800c524:	46bd      	mov	sp, r7
 800c526:	bd80      	pop	{r7, pc}

0800c528 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama11JumpingGameENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800c528:	b480      	push	{r7}
 800c52a:	b083      	sub	sp, #12
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800c530:	4b03      	ldr	r3, [pc, #12]	; (800c540 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama11JumpingGameENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv+0x18>)
 800c532:	4618      	mov	r0, r3
 800c534:	370c      	adds	r7, #12
 800c536:	46bd      	mov	sp, r7
 800c538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53c:	4770      	bx	lr
 800c53e:	bf00      	nop
 800c540:	0ccccccc 	.word	0x0ccccccc

0800c544 <_ZNSt19_Sp_counted_deleterIPN4tama11JumpingGameENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 800c544:	b580      	push	{r7, lr}
 800c546:	b082      	sub	sp, #8
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
 800c54c:	4a08      	ldr	r2, [pc, #32]	; (800c570 <_ZNSt19_Sp_counted_deleterIPN4tama11JumpingGameENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev+0x2c>)
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	601a      	str	r2, [r3, #0]
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	330c      	adds	r3, #12
 800c556:	4618      	mov	r0, r3
 800c558:	f7ff fe1b 	bl	800c192 <_ZNSt19_Sp_counted_deleterIPN4tama11JumpingGameENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	4618      	mov	r0, r3
 800c560:	f7f7 fc78 	bl	8003e54 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	4618      	mov	r0, r3
 800c568:	3708      	adds	r7, #8
 800c56a:	46bd      	mov	sp, r7
 800c56c:	bd80      	pop	{r7, pc}
 800c56e:	bf00      	nop
 800c570:	08023758 	.word	0x08023758

0800c574 <_ZNSt19_Sp_counted_deleterIPN4tama11JumpingGameENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
 800c574:	b580      	push	{r7, lr}
 800c576:	b082      	sub	sp, #8
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
 800c57c:	6878      	ldr	r0, [r7, #4]
 800c57e:	f7ff ffe1 	bl	800c544 <_ZNSt19_Sp_counted_deleterIPN4tama11JumpingGameENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
 800c582:	2114      	movs	r1, #20
 800c584:	6878      	ldr	r0, [r7, #4]
 800c586:	f013 f998 	bl	801f8ba <_ZdlPvj>
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	4618      	mov	r0, r3
 800c58e:	3708      	adds	r7, #8
 800c590:	46bd      	mov	sp, r7
 800c592:	bd80      	pop	{r7, pc}

0800c594 <_ZNSt19_Sp_counted_deleterIPN4tama11JumpingGameENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      _M_dispose() noexcept
 800c594:	b580      	push	{r7, lr}
 800c596:	b082      	sub	sp, #8
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	330c      	adds	r3, #12
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	f000 f840 	bl	800c626 <_ZNSt19_Sp_counted_deleterIPN4tama11JumpingGameENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>
 800c5a6:	4602      	mov	r2, r0
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	691b      	ldr	r3, [r3, #16]
 800c5ac:	4619      	mov	r1, r3
 800c5ae:	4610      	mov	r0, r2
 800c5b0:	f7ff fe3f 	bl	800c232 <_ZNSt12__shared_ptrIN4tama11JumpingGameELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>
 800c5b4:	bf00      	nop
 800c5b6:	3708      	adds	r7, #8
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	bd80      	pop	{r7, pc}

0800c5bc <_ZNSt19_Sp_counted_deleterIPN4tama11JumpingGameENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      _M_destroy() noexcept
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b086      	sub	sp, #24
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	330c      	adds	r3, #12
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	f000 f839 	bl	800c640 <_ZNSt19_Sp_counted_deleterIPN4tama11JumpingGameENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>
 800c5ce:	4602      	mov	r2, r0
 800c5d0:	f107 0314 	add.w	r3, r7, #20
 800c5d4:	4611      	mov	r1, r2
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	f7ff fd73 	bl	800c0c2 <_ZNSaISt19_Sp_counted_deleterIPN4tama11JumpingGameENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 800c5dc:	f107 0114 	add.w	r1, r7, #20
 800c5e0:	f107 030c 	add.w	r3, r7, #12
 800c5e4:	687a      	ldr	r2, [r7, #4]
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	f7ff fea1 	bl	800c32e <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama11JumpingGameENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
	this->~_Sp_counted_deleter();
 800c5ec:	6878      	ldr	r0, [r7, #4]
 800c5ee:	f7ff ffa9 	bl	800c544 <_ZNSt19_Sp_counted_deleterIPN4tama11JumpingGameENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 800c5f2:	f107 030c 	add.w	r3, r7, #12
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	f7ff fd8f 	bl	800c11a <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama11JumpingGameENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	__allocator_type __a(_M_impl._M_alloc());
 800c5fc:	f107 0314 	add.w	r3, r7, #20
 800c600:	4618      	mov	r0, r3
 800c602:	f7ff fd6b 	bl	800c0dc <_ZNSaISt19_Sp_counted_deleterIPN4tama11JumpingGameENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
      }
 800c606:	bf00      	nop
 800c608:	3718      	adds	r7, #24
 800c60a:	46bd      	mov	sp, r7
 800c60c:	bd80      	pop	{r7, pc}

0800c60e <_ZNSt19_Sp_counted_deleterIPN4tama11JumpingGameENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept
 800c60e:	b480      	push	{r7}
 800c610:	b083      	sub	sp, #12
 800c612:	af00      	add	r7, sp, #0
 800c614:	6078      	str	r0, [r7, #4]
 800c616:	6039      	str	r1, [r7, #0]
        return nullptr;
 800c618:	2300      	movs	r3, #0
      }
 800c61a:	4618      	mov	r0, r3
 800c61c:	370c      	adds	r7, #12
 800c61e:	46bd      	mov	sp, r7
 800c620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c624:	4770      	bx	lr

0800c626 <_ZNSt19_Sp_counted_deleterIPN4tama11JumpingGameENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 800c626:	b580      	push	{r7, lr}
 800c628:	b082      	sub	sp, #8
 800c62a:	af00      	add	r7, sp, #0
 800c62c:	6078      	str	r0, [r7, #4]
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	4618      	mov	r0, r3
 800c632:	f000 f813 	bl	800c65c <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama11JumpingGameELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>
 800c636:	4603      	mov	r3, r0
 800c638:	4618      	mov	r0, r3
 800c63a:	3708      	adds	r7, #8
 800c63c:	46bd      	mov	sp, r7
 800c63e:	bd80      	pop	{r7, pc}

0800c640 <_ZNSt19_Sp_counted_deleterIPN4tama11JumpingGameENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 800c640:	b580      	push	{r7, lr}
 800c642:	b082      	sub	sp, #8
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	3301      	adds	r3, #1
 800c64c:	4618      	mov	r0, r3
 800c64e:	f000 f810 	bl	800c672 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama11JumpingGameEELb1EE6_S_getERS3_>
 800c652:	4603      	mov	r3, r0
 800c654:	4618      	mov	r0, r3
 800c656:	3708      	adds	r7, #8
 800c658:	46bd      	mov	sp, r7
 800c65a:	bd80      	pop	{r7, pc}

0800c65c <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama11JumpingGameELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>:
      _S_get(_Sp_ebo_helper& __eboh)
 800c65c:	b480      	push	{r7}
 800c65e:	b083      	sub	sp, #12
 800c660:	af00      	add	r7, sp, #0
 800c662:	6078      	str	r0, [r7, #4]
      { return __eboh._M_tp; }
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	4618      	mov	r0, r3
 800c668:	370c      	adds	r7, #12
 800c66a:	46bd      	mov	sp, r7
 800c66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c670:	4770      	bx	lr

0800c672 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama11JumpingGameEELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 800c672:	b480      	push	{r7}
 800c674:	b083      	sub	sp, #12
 800c676:	af00      	add	r7, sp, #0
 800c678:	6078      	str	r0, [r7, #4]
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	4618      	mov	r0, r3
 800c67e:	370c      	adds	r7, #12
 800c680:	46bd      	mov	sp, r7
 800c682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c686:	4770      	bx	lr

0800c688 <_ZN4tama4Wash7onInputENS_6ButtonE>:
#include "Wash.h"
#include "../../main/Home.h"


void tama::Wash::onInput(tama::Button button)
{
 800c688:	b480      	push	{r7}
 800c68a:	b083      	sub	sp, #12
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
 800c690:	460b      	mov	r3, r1
 800c692:	70fb      	strb	r3, [r7, #3]

}
 800c694:	bf00      	nop
 800c696:	370c      	adds	r7, #12
 800c698:	46bd      	mov	sp, r7
 800c69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69e:	4770      	bx	lr

0800c6a0 <_ZN4tama4Wash6onInitEv>:

void tama::Wash::onInit()
{
 800c6a0:	b480      	push	{r7}
 800c6a2:	b083      	sub	sp, #12
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	6078      	str	r0, [r7, #4]

}
 800c6a8:	bf00      	nop
 800c6aa:	370c      	adds	r7, #12
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b2:	4770      	bx	lr

0800c6b4 <_ZN4tama4Wash7onFrameEv>:

void tama::Wash::onFrame()
{
 800c6b4:	b5b0      	push	{r4, r5, r7, lr}
 800c6b6:	b08a      	sub	sp, #40	; 0x28
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < washElementsCount; ++i)
 800c6bc:	2300      	movs	r3, #0
 800c6be:	627b      	str	r3, [r7, #36]	; 0x24
 800c6c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6c2:	2b05      	cmp	r3, #5
 800c6c4:	dc1f      	bgt.n	800c706 <_ZN4tama4Wash7onFrameEv+0x52>
    {
        washElements[i].move(Vec2d(-8, 0));
 800c6c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6c8:	015b      	lsls	r3, r3, #5
 800c6ca:	3318      	adds	r3, #24
 800c6cc:	687a      	ldr	r2, [r7, #4]
 800c6ce:	4413      	add	r3, r2
 800c6d0:	1d1d      	adds	r5, r3, #4
 800c6d2:	687a      	ldr	r2, [r7, #4]
 800c6d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6d6:	015b      	lsls	r3, r3, #5
 800c6d8:	4413      	add	r3, r2
 800c6da:	331c      	adds	r3, #28
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	3310      	adds	r3, #16
 800c6e0:	681c      	ldr	r4, [r3, #0]
 800c6e2:	f107 030c 	add.w	r3, r7, #12
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	f06f 0107 	mvn.w	r1, #7
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	f7f4 fbdd 	bl	8000eac <_ZN4tama5Vec2dC1Eii>
 800c6f2:	f107 030c 	add.w	r3, r7, #12
 800c6f6:	e893 0006 	ldmia.w	r3, {r1, r2}
 800c6fa:	4628      	mov	r0, r5
 800c6fc:	47a0      	blx	r4
    for (int i = 0; i < washElementsCount; ++i)
 800c6fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c700:	3301      	adds	r3, #1
 800c702:	627b      	str	r3, [r7, #36]	; 0x24
 800c704:	e7dc      	b.n	800c6c0 <_ZN4tama4Wash7onFrameEv+0xc>
    }
    animationStep++;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	699b      	ldr	r3, [r3, #24]
 800c70a:	1c5a      	adds	r2, r3, #1
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	619a      	str	r2, [r3, #24]
    if (animationStep == animationLength)
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	699a      	ldr	r2, [r3, #24]
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	695b      	ldr	r3, [r3, #20]
 800c718:	429a      	cmp	r2, r3
 800c71a:	d126      	bne.n	800c76a <_ZN4tama4Wash7onFrameEv+0xb6>
    {
        context->switchStage(std::make_shared<Home>(context));
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	330c      	adds	r3, #12
 800c720:	4618      	mov	r0, r3
 800c722:	f7f7 fb53 	bl	8003dcc <_ZNKSt19__shared_ptr_accessIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800c726:	4604      	mov	r4, r0
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	f103 020c 	add.w	r2, r3, #12
 800c72e:	f107 031c 	add.w	r3, r7, #28
 800c732:	4611      	mov	r1, r2
 800c734:	4618      	mov	r0, r3
 800c736:	f7fd f8bf 	bl	80098b8 <_ZSt11make_sharedIN4tama4HomeEJRSt10shared_ptrINS0_7ContextEEEES2_IT_EDpOT0_>
 800c73a:	f107 021c 	add.w	r2, r7, #28
 800c73e:	f107 0314 	add.w	r3, r7, #20
 800c742:	4611      	mov	r1, r2
 800c744:	4618      	mov	r0, r3
 800c746:	f7fd f8df 	bl	8009908 <_ZNSt10shared_ptrIN4tama5StageEEC1INS0_4HomeEvEEOS_IT_E>
 800c74a:	f107 0314 	add.w	r3, r7, #20
 800c74e:	4619      	mov	r1, r3
 800c750:	4620      	mov	r0, r4
 800c752:	f7f6 fad2 	bl	8002cfa <_ZN4tama7Context11switchStageESt10shared_ptrINS_5StageEE>
 800c756:	f107 0314 	add.w	r3, r7, #20
 800c75a:	4618      	mov	r0, r3
 800c75c:	f7f6 fb2f 	bl	8002dbe <_ZNSt10shared_ptrIN4tama5StageEED1Ev>
 800c760:	f107 031c 	add.w	r3, r7, #28
 800c764:	4618      	mov	r0, r3
 800c766:	f7fc ffe5 	bl	8009734 <_ZNSt10shared_ptrIN4tama4HomeEED1Ev>
    }
}
 800c76a:	bf00      	nop
 800c76c:	3728      	adds	r7, #40	; 0x28
 800c76e:	46bd      	mov	sp, r7
 800c770:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800c774 <_ZN4tama4WashC1ERKSt10shared_ptrINS_7ContextEE>:

tama::Wash::Wash(const std::shared_ptr<Context> &context) : Stage(context)
 800c774:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c776:	b093      	sub	sp, #76	; 0x4c
 800c778:	af00      	add	r7, sp, #0
 800c77a:	6078      	str	r0, [r7, #4]
 800c77c:	6039      	str	r1, [r7, #0]
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	6839      	ldr	r1, [r7, #0]
 800c782:	4618      	mov	r0, r3
 800c784:	f7f7 faba 	bl	8003cfc <_ZN4tama5StageC1ERKSt10shared_ptrINS_7ContextEE>
 800c788:	4a61      	ldr	r2, [pc, #388]	; (800c910 <_ZN4tama4WashC1ERKSt10shared_ptrINS_7ContextEE+0x19c>)
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	601a      	str	r2, [r3, #0]
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	2206      	movs	r2, #6
 800c792:	615a      	str	r2, [r3, #20]
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	2201      	movs	r2, #1
 800c798:	619a      	str	r2, [r3, #24]
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	331c      	adds	r3, #28
 800c79e:	2405      	movs	r4, #5
 800c7a0:	461d      	mov	r5, r3
 800c7a2:	2c00      	cmp	r4, #0
 800c7a4:	db05      	blt.n	800c7b2 <_ZN4tama4WashC1ERKSt10shared_ptrINS_7ContextEE+0x3e>
 800c7a6:	4628      	mov	r0, r5
 800c7a8:	f002 f974 	bl	800ea94 <_ZN4tama6SpriteC1Ev>
 800c7ac:	3520      	adds	r5, #32
 800c7ae:	3c01      	subs	r4, #1
 800c7b0:	e7f7      	b.n	800c7a2 <_ZN4tama4WashC1ERKSt10shared_ptrINS_7ContextEE+0x2e>
{
    auto washTexture = context->getTextureLoader()->load(tama::asset::menu::wash);
 800c7b2:	6838      	ldr	r0, [r7, #0]
 800c7b4:	f7f7 fb0a 	bl	8003dcc <_ZNKSt19__shared_ptr_accessIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800c7b8:	4602      	mov	r2, r0
 800c7ba:	f107 0314 	add.w	r3, r7, #20
 800c7be:	4611      	mov	r1, r2
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	f7f6 fc17 	bl	8002ff4 <_ZN4tama7Context16getTextureLoaderEv>
 800c7c6:	f107 0314 	add.w	r3, r7, #20
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	f7f9 f92e 	bl	8005a2c <_ZNKSt19__shared_ptr_accessIN4tama13TextureLoaderELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800c7d0:	4601      	mov	r1, r0
 800c7d2:	680b      	ldr	r3, [r1, #0]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	f107 000c 	add.w	r0, r7, #12
 800c7da:	4a4e      	ldr	r2, [pc, #312]	; (800c914 <_ZN4tama4WashC1ERKSt10shared_ptrINS_7ContextEE+0x1a0>)
 800c7dc:	4798      	blx	r3
 800c7de:	f107 0314 	add.w	r3, r7, #20
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	f7f9 f8c2 	bl	800596c <_ZNSt10shared_ptrIN4tama13TextureLoaderEED1Ev>
    for (int i = 0; i < washElementsCount; ++i)
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	647b      	str	r3, [r7, #68]	; 0x44
 800c7ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c7ee:	2b05      	cmp	r3, #5
 800c7f0:	f300 8083 	bgt.w	800c8fa <_ZN4tama4WashC1ERKSt10shared_ptrINS_7ContextEE+0x186>
    {
        washElements[i].setTexture(washTexture);
 800c7f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c7f6:	015b      	lsls	r3, r3, #5
 800c7f8:	3318      	adds	r3, #24
 800c7fa:	687a      	ldr	r2, [r7, #4]
 800c7fc:	4413      	add	r3, r2
 800c7fe:	1d1d      	adds	r5, r3, #4
 800c800:	687a      	ldr	r2, [r7, #4]
 800c802:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c804:	015b      	lsls	r3, r3, #5
 800c806:	4413      	add	r3, r2
 800c808:	331c      	adds	r3, #28
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	681c      	ldr	r4, [r3, #0]
 800c80e:	f107 020c 	add.w	r2, r7, #12
 800c812:	f107 031c 	add.w	r3, r7, #28
 800c816:	4611      	mov	r1, r2
 800c818:	4618      	mov	r0, r3
 800c81a:	f7fa fa81 	bl	8006d20 <_ZNSt10shared_ptrIN4tama7TextureEEC1ERKS2_>
 800c81e:	f107 031c 	add.w	r3, r7, #28
 800c822:	4619      	mov	r1, r3
 800c824:	4628      	mov	r0, r5
 800c826:	47a0      	blx	r4
 800c828:	f107 031c 	add.w	r3, r7, #28
 800c82c:	4618      	mov	r0, r3
 800c82e:	f7f8 fcdc 	bl	80051ea <_ZNSt10shared_ptrIN4tama7TextureEED1Ev>
        washElements[i].setPosition(tama::util::fromTopRight(Vec2d(-washTexture->width, i * washTexture->height)));
 800c832:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c834:	015b      	lsls	r3, r3, #5
 800c836:	3318      	adds	r3, #24
 800c838:	687a      	ldr	r2, [r7, #4]
 800c83a:	4413      	add	r3, r2
 800c83c:	1d1d      	adds	r5, r3, #4
 800c83e:	687a      	ldr	r2, [r7, #4]
 800c840:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c842:	015b      	lsls	r3, r3, #5
 800c844:	4413      	add	r3, r2
 800c846:	331c      	adds	r3, #28
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	3304      	adds	r3, #4
 800c84c:	681c      	ldr	r4, [r3, #0]
 800c84e:	f107 030c 	add.w	r3, r7, #12
 800c852:	4618      	mov	r0, r3
 800c854:	f7fa fc2c 	bl	80070b0 <_ZNKSt19__shared_ptr_accessIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800c858:	4603      	mov	r3, r0
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	425b      	negs	r3, r3
 800c85e:	461e      	mov	r6, r3
 800c860:	f107 030c 	add.w	r3, r7, #12
 800c864:	4618      	mov	r0, r3
 800c866:	f7fa fc23 	bl	80070b0 <_ZNKSt19__shared_ptr_accessIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800c86a:	4603      	mov	r3, r0
 800c86c:	685b      	ldr	r3, [r3, #4]
 800c86e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c870:	fb02 f303 	mul.w	r3, r2, r3
 800c874:	461a      	mov	r2, r3
 800c876:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c87a:	4631      	mov	r1, r6
 800c87c:	4618      	mov	r0, r3
 800c87e:	f7f4 fb15 	bl	8000eac <_ZN4tama5Vec2dC1Eii>
 800c882:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c886:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800c88a:	4611      	mov	r1, r2
 800c88c:	4618      	mov	r0, r3
 800c88e:	f7f4 fb59 	bl	8000f44 <_ZN4tama4util12fromTopRightERKNS_5Vec2dE>
 800c892:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c896:	e893 0006 	ldmia.w	r3, {r1, r2}
 800c89a:	4628      	mov	r0, r5
 800c89c:	47a0      	blx	r4
        scene->addDrawable(std::shared_ptr<Sprite>(&(washElements[i])));
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	3304      	adds	r3, #4
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	f7f8 fdab 	bl	80053fe <_ZNKSt19__shared_ptr_accessIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800c8a8:	4604      	mov	r4, r0
 800c8aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c8ac:	015b      	lsls	r3, r3, #5
 800c8ae:	3318      	adds	r3, #24
 800c8b0:	687a      	ldr	r2, [r7, #4]
 800c8b2:	4413      	add	r3, r2
 800c8b4:	1d1a      	adds	r2, r3, #4
 800c8b6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c8ba:	4611      	mov	r1, r2
 800c8bc:	4618      	mov	r0, r3
 800c8be:	f7f9 f953 	bl	8005b68 <_ZNSt10shared_ptrIN4tama6SpriteEEC1IS1_vEEPT_>
 800c8c2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800c8c6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c8ca:	4611      	mov	r1, r2
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	f7f9 f8fc 	bl	8005aca <_ZNSt10shared_ptrIN4tama8DrawableEEC1INS0_6SpriteEvEEOS_IT_E>
 800c8d2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c8d6:	4619      	mov	r1, r3
 800c8d8:	4620      	mov	r0, r4
 800c8da:	f004 fb05 	bl	8010ee8 <_ZN4tama5Scene11addDrawableESt10shared_ptrINS_8DrawableEE>
 800c8de:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	f7f8 f902 	bl	8004aec <_ZNSt10shared_ptrIN4tama8DrawableEED1Ev>
 800c8e8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	f7f8 fff5 	bl	80058dc <_ZNSt10shared_ptrIN4tama6SpriteEED1Ev>
    for (int i = 0; i < washElementsCount; ++i)
 800c8f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c8f4:	3301      	adds	r3, #1
 800c8f6:	647b      	str	r3, [r7, #68]	; 0x44
 800c8f8:	e778      	b.n	800c7ec <_ZN4tama4WashC1ERKSt10shared_ptrINS_7ContextEE+0x78>
    auto washTexture = context->getTextureLoader()->load(tama::asset::menu::wash);
 800c8fa:	f107 030c 	add.w	r3, r7, #12
 800c8fe:	4618      	mov	r0, r3
 800c900:	f7f8 fc73 	bl	80051ea <_ZNSt10shared_ptrIN4tama7TextureEED1Ev>
    }
}
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	4618      	mov	r0, r3
 800c908:	374c      	adds	r7, #76	; 0x4c
 800c90a:	46bd      	mov	sp, r7
 800c90c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c90e:	bf00      	nop
 800c910:	08023788 	.word	0x08023788
 800c914:	2000009c 	.word	0x2000009c

0800c918 <_ZN4tama11ActionIcons8initMenuEv>:
#include "../../../assets/common/icon-bar-background.texture.h"
#include "../../../assets/common/icon-bar-big-icons.texture.h"


void tama::ActionIcons::initMenu()
{
 800c918:	b590      	push	{r4, r7, lr}
 800c91a:	f5ad 7d2d 	sub.w	sp, sp, #692	; 0x2b4
 800c91e:	af00      	add	r7, sp, #0
 800c920:	1d3b      	adds	r3, r7, #4
 800c922:	6018      	str	r0, [r3, #0]
    scene->addDrawable(std::make_shared<Sprite>(context->getTextureLoader()->load(tama::asset::iconBarBackgroundLeft), Vec2d(0, 0)));
 800c924:	1d3b      	adds	r3, r7, #4
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	4618      	mov	r0, r3
 800c92a:	f7f8 fd68 	bl	80053fe <_ZNKSt19__shared_ptr_accessIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800c92e:	4604      	mov	r4, r0
 800c930:	1d3b      	adds	r3, r7, #4
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	3308      	adds	r3, #8
 800c936:	4618      	mov	r0, r3
 800c938:	f7f7 fa48 	bl	8003dcc <_ZNKSt19__shared_ptr_accessIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800c93c:	4602      	mov	r2, r0
 800c93e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c942:	4611      	mov	r1, r2
 800c944:	4618      	mov	r0, r3
 800c946:	f7f6 fb55 	bl	8002ff4 <_ZN4tama7Context16getTextureLoaderEv>
 800c94a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c94e:	4618      	mov	r0, r3
 800c950:	f7f9 f86c 	bl	8005a2c <_ZNKSt19__shared_ptr_accessIN4tama13TextureLoaderELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800c954:	4601      	mov	r1, r0
 800c956:	680b      	ldr	r3, [r1, #0]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	f107 001c 	add.w	r0, r7, #28
 800c95e:	4aeb      	ldr	r2, [pc, #940]	; (800cd0c <_ZN4tama11ActionIcons8initMenuEv+0x3f4>)
 800c960:	4798      	blx	r3
 800c962:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c966:	2200      	movs	r2, #0
 800c968:	2100      	movs	r1, #0
 800c96a:	4618      	mov	r0, r3
 800c96c:	f7f4 fa9e 	bl	8000eac <_ZN4tama5Vec2dC1Eii>
 800c970:	f107 0314 	add.w	r3, r7, #20
 800c974:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800c978:	f107 011c 	add.w	r1, r7, #28
 800c97c:	4618      	mov	r0, r3
 800c97e:	f7f9 f877 	bl	8005a70 <_ZSt11make_sharedIN4tama6SpriteEJSt10shared_ptrINS0_7TextureEENS0_5Vec2dEEES2_IT_EDpOT0_>
 800c982:	f107 0214 	add.w	r2, r7, #20
 800c986:	f107 030c 	add.w	r3, r7, #12
 800c98a:	4611      	mov	r1, r2
 800c98c:	4618      	mov	r0, r3
 800c98e:	f7f9 f89c 	bl	8005aca <_ZNSt10shared_ptrIN4tama8DrawableEEC1INS0_6SpriteEvEEOS_IT_E>
 800c992:	f107 030c 	add.w	r3, r7, #12
 800c996:	4619      	mov	r1, r3
 800c998:	4620      	mov	r0, r4
 800c99a:	f004 faa5 	bl	8010ee8 <_ZN4tama5Scene11addDrawableESt10shared_ptrINS_8DrawableEE>
 800c99e:	f107 030c 	add.w	r3, r7, #12
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	f7f8 f8a2 	bl	8004aec <_ZNSt10shared_ptrIN4tama8DrawableEED1Ev>
 800c9a8:	f107 0314 	add.w	r3, r7, #20
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	f7f8 ff95 	bl	80058dc <_ZNSt10shared_ptrIN4tama6SpriteEED1Ev>
 800c9b2:	f107 031c 	add.w	r3, r7, #28
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	f7f8 fc17 	bl	80051ea <_ZNSt10shared_ptrIN4tama7TextureEED1Ev>
 800c9bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	f7f8 ffd3 	bl	800596c <_ZNSt10shared_ptrIN4tama13TextureLoaderEED1Ev>
    scene->addDrawable(std::make_shared<Sprite>(context->getTextureLoader()->load(tama::asset::iconBarBackgroundRight), Vec2d(84-14, 0)));
 800c9c6:	1d3b      	adds	r3, r7, #4
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	f7f8 fd17 	bl	80053fe <_ZNKSt19__shared_ptr_accessIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800c9d0:	4604      	mov	r4, r0
 800c9d2:	1d3b      	adds	r3, r7, #4
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	3308      	adds	r3, #8
 800c9d8:	4618      	mov	r0, r3
 800c9da:	f7f7 f9f7 	bl	8003dcc <_ZNKSt19__shared_ptr_accessIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800c9de:	4602      	mov	r2, r0
 800c9e0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800c9e4:	4611      	mov	r1, r2
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	f7f6 fb04 	bl	8002ff4 <_ZN4tama7Context16getTextureLoaderEv>
 800c9ec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	f7f9 f81b 	bl	8005a2c <_ZNKSt19__shared_ptr_accessIN4tama13TextureLoaderELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800c9f6:	4601      	mov	r1, r0
 800c9f8:	680b      	ldr	r3, [r1, #0]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	f107 0044 	add.w	r0, r7, #68	; 0x44
 800ca00:	4ac3      	ldr	r2, [pc, #780]	; (800cd10 <_ZN4tama11ActionIcons8initMenuEv+0x3f8>)
 800ca02:	4798      	blx	r3
 800ca04:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800ca08:	2200      	movs	r2, #0
 800ca0a:	2146      	movs	r1, #70	; 0x46
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	f7f4 fa4d 	bl	8000eac <_ZN4tama5Vec2dC1Eii>
 800ca12:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800ca16:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800ca1a:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800ca1e:	4618      	mov	r0, r3
 800ca20:	f7f9 f826 	bl	8005a70 <_ZSt11make_sharedIN4tama6SpriteEJSt10shared_ptrINS0_7TextureEENS0_5Vec2dEEES2_IT_EDpOT0_>
 800ca24:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800ca28:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ca2c:	4611      	mov	r1, r2
 800ca2e:	4618      	mov	r0, r3
 800ca30:	f7f9 f84b 	bl	8005aca <_ZNSt10shared_ptrIN4tama8DrawableEEC1INS0_6SpriteEvEEOS_IT_E>
 800ca34:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ca38:	4619      	mov	r1, r3
 800ca3a:	4620      	mov	r0, r4
 800ca3c:	f004 fa54 	bl	8010ee8 <_ZN4tama5Scene11addDrawableESt10shared_ptrINS_8DrawableEE>
 800ca40:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ca44:	4618      	mov	r0, r3
 800ca46:	f7f8 f851 	bl	8004aec <_ZNSt10shared_ptrIN4tama8DrawableEED1Ev>
 800ca4a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800ca4e:	4618      	mov	r0, r3
 800ca50:	f7f8 ff44 	bl	80058dc <_ZNSt10shared_ptrIN4tama6SpriteEED1Ev>
 800ca54:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800ca58:	4618      	mov	r0, r3
 800ca5a:	f7f8 fbc6 	bl	80051ea <_ZNSt10shared_ptrIN4tama7TextureEED1Ev>
 800ca5e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800ca62:	4618      	mov	r0, r3
 800ca64:	f7f8 ff82 	bl	800596c <_ZNSt10shared_ptrIN4tama13TextureLoaderEED1Ev>

    bigIcons.at(0) = Sprite(context->getTextureLoader()->load(tama::asset::bigIcon1), Vec2d(0, 0));
 800ca68:	1d3b      	adds	r3, r7, #4
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	3310      	adds	r3, #16
 800ca6e:	2100      	movs	r1, #0
 800ca70:	4618      	mov	r0, r3
 800ca72:	f7f8 ffc1 	bl	80059f8 <_ZNSt5arrayIN4tama6SpriteELj9EE2atEj>
 800ca76:	4604      	mov	r4, r0
 800ca78:	1d3b      	adds	r3, r7, #4
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	3308      	adds	r3, #8
 800ca7e:	4618      	mov	r0, r3
 800ca80:	f7f7 f9a4 	bl	8003dcc <_ZNKSt19__shared_ptr_accessIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800ca84:	4602      	mov	r2, r0
 800ca86:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800ca8a:	4611      	mov	r1, r2
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	f7f6 fab1 	bl	8002ff4 <_ZN4tama7Context16getTextureLoaderEv>
 800ca92:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800ca96:	4618      	mov	r0, r3
 800ca98:	f7f8 ffc8 	bl	8005a2c <_ZNKSt19__shared_ptr_accessIN4tama13TextureLoaderELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800ca9c:	4601      	mov	r1, r0
 800ca9e:	680b      	ldr	r3, [r1, #0]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 800caa6:	4a9b      	ldr	r2, [pc, #620]	; (800cd14 <_ZN4tama11ActionIcons8initMenuEv+0x3fc>)
 800caa8:	4798      	blx	r3
 800caaa:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800caae:	2200      	movs	r2, #0
 800cab0:	2100      	movs	r1, #0
 800cab2:	4618      	mov	r0, r3
 800cab4:	f7f4 f9fa 	bl	8000eac <_ZN4tama5Vec2dC1Eii>
 800cab8:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800cabc:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 800cac0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800cac4:	4618      	mov	r0, r3
 800cac6:	f001 ffa7 	bl	800ea18 <_ZN4tama6SpriteC1ERKSt10shared_ptrINS_7TextureEERKNS_5Vec2dE>
 800caca:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800cace:	4619      	mov	r1, r3
 800cad0:	4620      	mov	r0, r4
 800cad2:	f7f8 ff64 	bl	800599e <_ZN4tama6SpriteaSEOS0_>
 800cad6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800cada:	4618      	mov	r0, r3
 800cadc:	f7f8 ff0c 	bl	80058f8 <_ZN4tama6SpriteD1Ev>
 800cae0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800cae4:	4618      	mov	r0, r3
 800cae6:	f7f8 fb80 	bl	80051ea <_ZNSt10shared_ptrIN4tama7TextureEED1Ev>
 800caea:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800caee:	4618      	mov	r0, r3
 800caf0:	f7f8 ff3c 	bl	800596c <_ZNSt10shared_ptrIN4tama13TextureLoaderEED1Ev>
    bigIcons.at(1) = Sprite(context->getTextureLoader()->load(tama::asset::bigIcon2), Vec2d(0, 8));
 800caf4:	1d3b      	adds	r3, r7, #4
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	3310      	adds	r3, #16
 800cafa:	2101      	movs	r1, #1
 800cafc:	4618      	mov	r0, r3
 800cafe:	f7f8 ff7b 	bl	80059f8 <_ZNSt5arrayIN4tama6SpriteELj9EE2atEj>
 800cb02:	4604      	mov	r4, r0
 800cb04:	1d3b      	adds	r3, r7, #4
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	3308      	adds	r3, #8
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	f7f7 f95e 	bl	8003dcc <_ZNKSt19__shared_ptr_accessIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800cb10:	4602      	mov	r2, r0
 800cb12:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800cb16:	4611      	mov	r1, r2
 800cb18:	4618      	mov	r0, r3
 800cb1a:	f7f6 fa6b 	bl	8002ff4 <_ZN4tama7Context16getTextureLoaderEv>
 800cb1e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800cb22:	4618      	mov	r0, r3
 800cb24:	f7f8 ff82 	bl	8005a2c <_ZNKSt19__shared_ptr_accessIN4tama13TextureLoaderELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800cb28:	4601      	mov	r1, r0
 800cb2a:	680b      	ldr	r3, [r1, #0]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	f107 00b4 	add.w	r0, r7, #180	; 0xb4
 800cb32:	4a79      	ldr	r2, [pc, #484]	; (800cd18 <_ZN4tama11ActionIcons8initMenuEv+0x400>)
 800cb34:	4798      	blx	r3
 800cb36:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800cb3a:	2208      	movs	r2, #8
 800cb3c:	2100      	movs	r1, #0
 800cb3e:	4618      	mov	r0, r3
 800cb40:	f7f4 f9b4 	bl	8000eac <_ZN4tama5Vec2dC1Eii>
 800cb44:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 800cb48:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 800cb4c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800cb50:	4618      	mov	r0, r3
 800cb52:	f001 ff61 	bl	800ea18 <_ZN4tama6SpriteC1ERKSt10shared_ptrINS_7TextureEERKNS_5Vec2dE>
 800cb56:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800cb5a:	4619      	mov	r1, r3
 800cb5c:	4620      	mov	r0, r4
 800cb5e:	f7f8 ff1e 	bl	800599e <_ZN4tama6SpriteaSEOS0_>
 800cb62:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800cb66:	4618      	mov	r0, r3
 800cb68:	f7f8 fec6 	bl	80058f8 <_ZN4tama6SpriteD1Ev>
 800cb6c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800cb70:	4618      	mov	r0, r3
 800cb72:	f7f8 fb3a 	bl	80051ea <_ZNSt10shared_ptrIN4tama7TextureEED1Ev>
 800cb76:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	f7f8 fef6 	bl	800596c <_ZNSt10shared_ptrIN4tama13TextureLoaderEED1Ev>
    bigIcons.at(2) = Sprite(context->getTextureLoader()->load(tama::asset::bigIcon3), Vec2d(0, 15));
 800cb80:	1d3b      	adds	r3, r7, #4
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	3310      	adds	r3, #16
 800cb86:	2102      	movs	r1, #2
 800cb88:	4618      	mov	r0, r3
 800cb8a:	f7f8 ff35 	bl	80059f8 <_ZNSt5arrayIN4tama6SpriteELj9EE2atEj>
 800cb8e:	4604      	mov	r4, r0
 800cb90:	1d3b      	adds	r3, r7, #4
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	3308      	adds	r3, #8
 800cb96:	4618      	mov	r0, r3
 800cb98:	f7f7 f918 	bl	8003dcc <_ZNKSt19__shared_ptr_accessIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800cb9c:	4602      	mov	r2, r0
 800cb9e:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800cba2:	4611      	mov	r1, r2
 800cba4:	4618      	mov	r0, r3
 800cba6:	f7f6 fa25 	bl	8002ff4 <_ZN4tama7Context16getTextureLoaderEv>
 800cbaa:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800cbae:	4618      	mov	r0, r3
 800cbb0:	f7f8 ff3c 	bl	8005a2c <_ZNKSt19__shared_ptr_accessIN4tama13TextureLoaderELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800cbb4:	4601      	mov	r1, r0
 800cbb6:	680b      	ldr	r3, [r1, #0]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	f107 00ec 	add.w	r0, r7, #236	; 0xec
 800cbbe:	4a57      	ldr	r2, [pc, #348]	; (800cd1c <_ZN4tama11ActionIcons8initMenuEv+0x404>)
 800cbc0:	4798      	blx	r3
 800cbc2:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800cbc6:	220f      	movs	r2, #15
 800cbc8:	2100      	movs	r1, #0
 800cbca:	4618      	mov	r0, r3
 800cbcc:	f7f4 f96e 	bl	8000eac <_ZN4tama5Vec2dC1Eii>
 800cbd0:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 800cbd4:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 800cbd8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800cbdc:	4618      	mov	r0, r3
 800cbde:	f001 ff1b 	bl	800ea18 <_ZN4tama6SpriteC1ERKSt10shared_ptrINS_7TextureEERKNS_5Vec2dE>
 800cbe2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800cbe6:	4619      	mov	r1, r3
 800cbe8:	4620      	mov	r0, r4
 800cbea:	f7f8 fed8 	bl	800599e <_ZN4tama6SpriteaSEOS0_>
 800cbee:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	f7f8 fe80 	bl	80058f8 <_ZN4tama6SpriteD1Ev>
 800cbf8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	f7f8 faf4 	bl	80051ea <_ZNSt10shared_ptrIN4tama7TextureEED1Ev>
 800cc02:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800cc06:	4618      	mov	r0, r3
 800cc08:	f7f8 feb0 	bl	800596c <_ZNSt10shared_ptrIN4tama13TextureLoaderEED1Ev>
    bigIcons.at(3) = Sprite(context->getTextureLoader()->load(tama::asset::bigIcon4), Vec2d(0, 22));
 800cc0c:	1d3b      	adds	r3, r7, #4
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	3310      	adds	r3, #16
 800cc12:	2103      	movs	r1, #3
 800cc14:	4618      	mov	r0, r3
 800cc16:	f7f8 feef 	bl	80059f8 <_ZNSt5arrayIN4tama6SpriteELj9EE2atEj>
 800cc1a:	4604      	mov	r4, r0
 800cc1c:	1d3b      	adds	r3, r7, #4
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	3308      	adds	r3, #8
 800cc22:	4618      	mov	r0, r3
 800cc24:	f7f7 f8d2 	bl	8003dcc <_ZNKSt19__shared_ptr_accessIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800cc28:	4602      	mov	r2, r0
 800cc2a:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800cc2e:	4611      	mov	r1, r2
 800cc30:	4618      	mov	r0, r3
 800cc32:	f7f6 f9df 	bl	8002ff4 <_ZN4tama7Context16getTextureLoaderEv>
 800cc36:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	f7f8 fef6 	bl	8005a2c <_ZNKSt19__shared_ptr_accessIN4tama13TextureLoaderELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800cc40:	4601      	mov	r1, r0
 800cc42:	680b      	ldr	r3, [r1, #0]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	f507 7092 	add.w	r0, r7, #292	; 0x124
 800cc4a:	4a35      	ldr	r2, [pc, #212]	; (800cd20 <_ZN4tama11ActionIcons8initMenuEv+0x408>)
 800cc4c:	4798      	blx	r3
 800cc4e:	f507 739a 	add.w	r3, r7, #308	; 0x134
 800cc52:	2216      	movs	r2, #22
 800cc54:	2100      	movs	r1, #0
 800cc56:	4618      	mov	r0, r3
 800cc58:	f7f4 f928 	bl	8000eac <_ZN4tama5Vec2dC1Eii>
 800cc5c:	f507 729a 	add.w	r2, r7, #308	; 0x134
 800cc60:	f507 7192 	add.w	r1, r7, #292	; 0x124
 800cc64:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800cc68:	4618      	mov	r0, r3
 800cc6a:	f001 fed5 	bl	800ea18 <_ZN4tama6SpriteC1ERKSt10shared_ptrINS_7TextureEERKNS_5Vec2dE>
 800cc6e:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800cc72:	4619      	mov	r1, r3
 800cc74:	4620      	mov	r0, r4
 800cc76:	f7f8 fe92 	bl	800599e <_ZN4tama6SpriteaSEOS0_>
 800cc7a:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800cc7e:	4618      	mov	r0, r3
 800cc80:	f7f8 fe3a 	bl	80058f8 <_ZN4tama6SpriteD1Ev>
 800cc84:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800cc88:	4618      	mov	r0, r3
 800cc8a:	f7f8 faae 	bl	80051ea <_ZNSt10shared_ptrIN4tama7TextureEED1Ev>
 800cc8e:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800cc92:	4618      	mov	r0, r3
 800cc94:	f7f8 fe6a 	bl	800596c <_ZNSt10shared_ptrIN4tama13TextureLoaderEED1Ev>
    bigIcons.at(4) = Sprite(context->getTextureLoader()->load(tama::asset::bigIcon5), Vec2d(0, 29));
 800cc98:	1d3b      	adds	r3, r7, #4
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	3310      	adds	r3, #16
 800cc9e:	2104      	movs	r1, #4
 800cca0:	4618      	mov	r0, r3
 800cca2:	f7f8 fea9 	bl	80059f8 <_ZNSt5arrayIN4tama6SpriteELj9EE2atEj>
 800cca6:	4604      	mov	r4, r0
 800cca8:	1d3b      	adds	r3, r7, #4
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	3308      	adds	r3, #8
 800ccae:	4618      	mov	r0, r3
 800ccb0:	f7f7 f88c 	bl	8003dcc <_ZNKSt19__shared_ptr_accessIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800ccb4:	4602      	mov	r2, r0
 800ccb6:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800ccba:	4611      	mov	r1, r2
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	f7f6 f999 	bl	8002ff4 <_ZN4tama7Context16getTextureLoaderEv>
 800ccc2:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	f7f8 feb0 	bl	8005a2c <_ZNKSt19__shared_ptr_accessIN4tama13TextureLoaderELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800cccc:	4601      	mov	r1, r0
 800ccce:	680b      	ldr	r3, [r1, #0]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	f507 70ae 	add.w	r0, r7, #348	; 0x15c
 800ccd6:	4a13      	ldr	r2, [pc, #76]	; (800cd24 <_ZN4tama11ActionIcons8initMenuEv+0x40c>)
 800ccd8:	4798      	blx	r3
 800ccda:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800ccde:	221d      	movs	r2, #29
 800cce0:	2100      	movs	r1, #0
 800cce2:	4618      	mov	r0, r3
 800cce4:	f7f4 f8e2 	bl	8000eac <_ZN4tama5Vec2dC1Eii>
 800cce8:	f507 72b6 	add.w	r2, r7, #364	; 0x16c
 800ccec:	f507 71ae 	add.w	r1, r7, #348	; 0x15c
 800ccf0:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	f001 fe8f 	bl	800ea18 <_ZN4tama6SpriteC1ERKSt10shared_ptrINS_7TextureEERKNS_5Vec2dE>
 800ccfa:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800ccfe:	4619      	mov	r1, r3
 800cd00:	4620      	mov	r0, r4
 800cd02:	f7f8 fe4c 	bl	800599e <_ZN4tama6SpriteaSEOS0_>
 800cd06:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800cd0a:	e00d      	b.n	800cd28 <_ZN4tama11ActionIcons8initMenuEv+0x410>
 800cd0c:	20000000 	.word	0x20000000
 800cd10:	2000000c 	.word	0x2000000c
 800cd14:	20000024 	.word	0x20000024
 800cd18:	20000030 	.word	0x20000030
 800cd1c:	2000003c 	.word	0x2000003c
 800cd20:	20000048 	.word	0x20000048
 800cd24:	20000054 	.word	0x20000054
 800cd28:	4618      	mov	r0, r3
 800cd2a:	f7f8 fde5 	bl	80058f8 <_ZN4tama6SpriteD1Ev>
 800cd2e:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 800cd32:	4618      	mov	r0, r3
 800cd34:	f7f8 fa59 	bl	80051ea <_ZNSt10shared_ptrIN4tama7TextureEED1Ev>
 800cd38:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	f7f8 fe15 	bl	800596c <_ZNSt10shared_ptrIN4tama13TextureLoaderEED1Ev>
    bigIcons.at(5) = Sprite(context->getTextureLoader()->load(tama::asset::bigIcon6), Vec2d(65, 0));
 800cd42:	1d3b      	adds	r3, r7, #4
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	3310      	adds	r3, #16
 800cd48:	2105      	movs	r1, #5
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	f7f8 fe54 	bl	80059f8 <_ZNSt5arrayIN4tama6SpriteELj9EE2atEj>
 800cd50:	4604      	mov	r4, r0
 800cd52:	1d3b      	adds	r3, r7, #4
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	3308      	adds	r3, #8
 800cd58:	4618      	mov	r0, r3
 800cd5a:	f7f7 f837 	bl	8003dcc <_ZNKSt19__shared_ptr_accessIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800cd5e:	4602      	mov	r2, r0
 800cd60:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800cd64:	4611      	mov	r1, r2
 800cd66:	4618      	mov	r0, r3
 800cd68:	f7f6 f944 	bl	8002ff4 <_ZN4tama7Context16getTextureLoaderEv>
 800cd6c:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800cd70:	4618      	mov	r0, r3
 800cd72:	f7f8 fe5b 	bl	8005a2c <_ZNKSt19__shared_ptr_accessIN4tama13TextureLoaderELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800cd76:	4601      	mov	r1, r0
 800cd78:	680b      	ldr	r3, [r1, #0]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	f507 70ca 	add.w	r0, r7, #404	; 0x194
 800cd80:	4ad8      	ldr	r2, [pc, #864]	; (800d0e4 <_ZN4tama11ActionIcons8initMenuEv+0x7cc>)
 800cd82:	4798      	blx	r3
 800cd84:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 800cd88:	2200      	movs	r2, #0
 800cd8a:	2141      	movs	r1, #65	; 0x41
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	f7f4 f88d 	bl	8000eac <_ZN4tama5Vec2dC1Eii>
 800cd92:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800cd96:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 800cd9a:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 800cd9e:	4618      	mov	r0, r3
 800cda0:	f001 fe3a 	bl	800ea18 <_ZN4tama6SpriteC1ERKSt10shared_ptrINS_7TextureEERKNS_5Vec2dE>
 800cda4:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 800cda8:	4619      	mov	r1, r3
 800cdaa:	4620      	mov	r0, r4
 800cdac:	f7f8 fdf7 	bl	800599e <_ZN4tama6SpriteaSEOS0_>
 800cdb0:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	f7f8 fd9f 	bl	80058f8 <_ZN4tama6SpriteD1Ev>
 800cdba:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	f7f8 fa13 	bl	80051ea <_ZNSt10shared_ptrIN4tama7TextureEED1Ev>
 800cdc4:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800cdc8:	4618      	mov	r0, r3
 800cdca:	f7f8 fdcf 	bl	800596c <_ZNSt10shared_ptrIN4tama13TextureLoaderEED1Ev>
    bigIcons.at(6) = Sprite(context->getTextureLoader()->load(tama::asset::bigIcon7), Vec2d(65, 8));
 800cdce:	1d3b      	adds	r3, r7, #4
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	3310      	adds	r3, #16
 800cdd4:	2106      	movs	r1, #6
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	f7f8 fe0e 	bl	80059f8 <_ZNSt5arrayIN4tama6SpriteELj9EE2atEj>
 800cddc:	4604      	mov	r4, r0
 800cdde:	1d3b      	adds	r3, r7, #4
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	3308      	adds	r3, #8
 800cde4:	4618      	mov	r0, r3
 800cde6:	f7f6 fff1 	bl	8003dcc <_ZNKSt19__shared_ptr_accessIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800cdea:	4602      	mov	r2, r0
 800cdec:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 800cdf0:	4611      	mov	r1, r2
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	f7f6 f8fe 	bl	8002ff4 <_ZN4tama7Context16getTextureLoaderEv>
 800cdf8:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 800cdfc:	4618      	mov	r0, r3
 800cdfe:	f7f8 fe15 	bl	8005a2c <_ZNKSt19__shared_ptr_accessIN4tama13TextureLoaderELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800ce02:	4601      	mov	r1, r0
 800ce04:	680b      	ldr	r3, [r1, #0]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	f507 70e6 	add.w	r0, r7, #460	; 0x1cc
 800ce0c:	4ab6      	ldr	r2, [pc, #728]	; (800d0e8 <_ZN4tama11ActionIcons8initMenuEv+0x7d0>)
 800ce0e:	4798      	blx	r3
 800ce10:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 800ce14:	2208      	movs	r2, #8
 800ce16:	2141      	movs	r1, #65	; 0x41
 800ce18:	4618      	mov	r0, r3
 800ce1a:	f7f4 f847 	bl	8000eac <_ZN4tama5Vec2dC1Eii>
 800ce1e:	f507 72ee 	add.w	r2, r7, #476	; 0x1dc
 800ce22:	f507 71e6 	add.w	r1, r7, #460	; 0x1cc
 800ce26:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	f001 fdf4 	bl	800ea18 <_ZN4tama6SpriteC1ERKSt10shared_ptrINS_7TextureEERKNS_5Vec2dE>
 800ce30:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 800ce34:	4619      	mov	r1, r3
 800ce36:	4620      	mov	r0, r4
 800ce38:	f7f8 fdb1 	bl	800599e <_ZN4tama6SpriteaSEOS0_>
 800ce3c:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 800ce40:	4618      	mov	r0, r3
 800ce42:	f7f8 fd59 	bl	80058f8 <_ZN4tama6SpriteD1Ev>
 800ce46:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	f7f8 f9cd 	bl	80051ea <_ZNSt10shared_ptrIN4tama7TextureEED1Ev>
 800ce50:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 800ce54:	4618      	mov	r0, r3
 800ce56:	f7f8 fd89 	bl	800596c <_ZNSt10shared_ptrIN4tama13TextureLoaderEED1Ev>
    bigIcons.at(7) = Sprite(context->getTextureLoader()->load(tama::asset::bigIcon8), Vec2d(65, 15));
 800ce5a:	1d3b      	adds	r3, r7, #4
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	3310      	adds	r3, #16
 800ce60:	2107      	movs	r1, #7
 800ce62:	4618      	mov	r0, r3
 800ce64:	f7f8 fdc8 	bl	80059f8 <_ZNSt5arrayIN4tama6SpriteELj9EE2atEj>
 800ce68:	4604      	mov	r4, r0
 800ce6a:	1d3b      	adds	r3, r7, #4
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	3308      	adds	r3, #8
 800ce70:	4618      	mov	r0, r3
 800ce72:	f7f6 ffab 	bl	8003dcc <_ZNKSt19__shared_ptr_accessIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800ce76:	4602      	mov	r2, r0
 800ce78:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 800ce7c:	4611      	mov	r1, r2
 800ce7e:	4618      	mov	r0, r3
 800ce80:	f7f6 f8b8 	bl	8002ff4 <_ZN4tama7Context16getTextureLoaderEv>
 800ce84:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 800ce88:	4618      	mov	r0, r3
 800ce8a:	f7f8 fdcf 	bl	8005a2c <_ZNKSt19__shared_ptr_accessIN4tama13TextureLoaderELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800ce8e:	4601      	mov	r1, r0
 800ce90:	680b      	ldr	r3, [r1, #0]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	f507 7001 	add.w	r0, r7, #516	; 0x204
 800ce98:	4a94      	ldr	r2, [pc, #592]	; (800d0ec <_ZN4tama11ActionIcons8initMenuEv+0x7d4>)
 800ce9a:	4798      	blx	r3
 800ce9c:	f507 7305 	add.w	r3, r7, #532	; 0x214
 800cea0:	220f      	movs	r2, #15
 800cea2:	2141      	movs	r1, #65	; 0x41
 800cea4:	4618      	mov	r0, r3
 800cea6:	f7f4 f801 	bl	8000eac <_ZN4tama5Vec2dC1Eii>
 800ceaa:	f507 7205 	add.w	r2, r7, #532	; 0x214
 800ceae:	f507 7101 	add.w	r1, r7, #516	; 0x204
 800ceb2:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	f001 fdae 	bl	800ea18 <_ZN4tama6SpriteC1ERKSt10shared_ptrINS_7TextureEERKNS_5Vec2dE>
 800cebc:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 800cec0:	4619      	mov	r1, r3
 800cec2:	4620      	mov	r0, r4
 800cec4:	f7f8 fd6b 	bl	800599e <_ZN4tama6SpriteaSEOS0_>
 800cec8:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 800cecc:	4618      	mov	r0, r3
 800cece:	f7f8 fd13 	bl	80058f8 <_ZN4tama6SpriteD1Ev>
 800ced2:	f507 7301 	add.w	r3, r7, #516	; 0x204
 800ced6:	4618      	mov	r0, r3
 800ced8:	f7f8 f987 	bl	80051ea <_ZNSt10shared_ptrIN4tama7TextureEED1Ev>
 800cedc:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 800cee0:	4618      	mov	r0, r3
 800cee2:	f7f8 fd43 	bl	800596c <_ZNSt10shared_ptrIN4tama13TextureLoaderEED1Ev>
    bigIcons.at(8) = Sprite(context->getTextureLoader()->load(tama::asset::bigIcon9), Vec2d(65, 20));
 800cee6:	1d3b      	adds	r3, r7, #4
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	3310      	adds	r3, #16
 800ceec:	2108      	movs	r1, #8
 800ceee:	4618      	mov	r0, r3
 800cef0:	f7f8 fd82 	bl	80059f8 <_ZNSt5arrayIN4tama6SpriteELj9EE2atEj>
 800cef4:	4604      	mov	r4, r0
 800cef6:	1d3b      	adds	r3, r7, #4
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	3308      	adds	r3, #8
 800cefc:	4618      	mov	r0, r3
 800cefe:	f7f6 ff65 	bl	8003dcc <_ZNKSt19__shared_ptr_accessIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800cf02:	4602      	mov	r2, r0
 800cf04:	f507 7311 	add.w	r3, r7, #580	; 0x244
 800cf08:	4611      	mov	r1, r2
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	f7f6 f872 	bl	8002ff4 <_ZN4tama7Context16getTextureLoaderEv>
 800cf10:	f507 7311 	add.w	r3, r7, #580	; 0x244
 800cf14:	4618      	mov	r0, r3
 800cf16:	f7f8 fd89 	bl	8005a2c <_ZNKSt19__shared_ptr_accessIN4tama13TextureLoaderELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800cf1a:	4601      	mov	r1, r0
 800cf1c:	680b      	ldr	r3, [r1, #0]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	f507 700f 	add.w	r0, r7, #572	; 0x23c
 800cf24:	4a72      	ldr	r2, [pc, #456]	; (800d0f0 <_ZN4tama11ActionIcons8initMenuEv+0x7d8>)
 800cf26:	4798      	blx	r3
 800cf28:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 800cf2c:	2214      	movs	r2, #20
 800cf2e:	2141      	movs	r1, #65	; 0x41
 800cf30:	4618      	mov	r0, r3
 800cf32:	f7f3 ffbb 	bl	8000eac <_ZN4tama5Vec2dC1Eii>
 800cf36:	f507 7213 	add.w	r2, r7, #588	; 0x24c
 800cf3a:	f507 710f 	add.w	r1, r7, #572	; 0x23c
 800cf3e:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800cf42:	4618      	mov	r0, r3
 800cf44:	f001 fd68 	bl	800ea18 <_ZN4tama6SpriteC1ERKSt10shared_ptrINS_7TextureEERKNS_5Vec2dE>
 800cf48:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800cf4c:	4619      	mov	r1, r3
 800cf4e:	4620      	mov	r0, r4
 800cf50:	f7f8 fd25 	bl	800599e <_ZN4tama6SpriteaSEOS0_>
 800cf54:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800cf58:	4618      	mov	r0, r3
 800cf5a:	f7f8 fccd 	bl	80058f8 <_ZN4tama6SpriteD1Ev>
 800cf5e:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 800cf62:	4618      	mov	r0, r3
 800cf64:	f7f8 f941 	bl	80051ea <_ZNSt10shared_ptrIN4tama7TextureEED1Ev>
 800cf68:	f507 7311 	add.w	r3, r7, #580	; 0x244
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	f7f8 fcfd 	bl	800596c <_ZNSt10shared_ptrIN4tama13TextureLoaderEED1Ev>

    for (int i = 0; i < 9; ++i)
 800cf72:	2300      	movs	r3, #0
 800cf74:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 800cf78:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 800cf7c:	2b08      	cmp	r3, #8
 800cf7e:	dc42      	bgt.n	800d006 <_ZN4tama11ActionIcons8initMenuEv+0x6ee>
    {
        bigIcons.at(i).hide();
 800cf80:	1d3b      	adds	r3, r7, #4
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	3310      	adds	r3, #16
 800cf86:	f8d7 22ac 	ldr.w	r2, [r7, #684]	; 0x2ac
 800cf8a:	4611      	mov	r1, r2
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	f7f8 fd33 	bl	80059f8 <_ZNSt5arrayIN4tama6SpriteELj9EE2atEj>
 800cf92:	4602      	mov	r2, r0
 800cf94:	6813      	ldr	r3, [r2, #0]
 800cf96:	3314      	adds	r3, #20
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	4610      	mov	r0, r2
 800cf9c:	4798      	blx	r3
        scene->addDrawable(std::shared_ptr<Sprite>(&bigIcons.at(i)));
 800cf9e:	1d3b      	adds	r3, r7, #4
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	f7f8 fa2b 	bl	80053fe <_ZNKSt19__shared_ptr_accessIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800cfa8:	4604      	mov	r4, r0
 800cfaa:	1d3b      	adds	r3, r7, #4
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	3310      	adds	r3, #16
 800cfb0:	f8d7 22ac 	ldr.w	r2, [r7, #684]	; 0x2ac
 800cfb4:	4611      	mov	r1, r2
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	f7f8 fd1e 	bl	80059f8 <_ZNSt5arrayIN4tama6SpriteELj9EE2atEj>
 800cfbc:	4602      	mov	r2, r0
 800cfbe:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 800cfc2:	4611      	mov	r1, r2
 800cfc4:	4618      	mov	r0, r3
 800cfc6:	f7f8 fdcf 	bl	8005b68 <_ZNSt10shared_ptrIN4tama6SpriteEEC1IS1_vEEPT_>
 800cfca:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 800cfce:	f507 7315 	add.w	r3, r7, #596	; 0x254
 800cfd2:	4611      	mov	r1, r2
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	f7f8 fd78 	bl	8005aca <_ZNSt10shared_ptrIN4tama8DrawableEEC1INS0_6SpriteEvEEOS_IT_E>
 800cfda:	f507 7315 	add.w	r3, r7, #596	; 0x254
 800cfde:	4619      	mov	r1, r3
 800cfe0:	4620      	mov	r0, r4
 800cfe2:	f003 ff81 	bl	8010ee8 <_ZN4tama5Scene11addDrawableESt10shared_ptrINS_8DrawableEE>
 800cfe6:	f507 7315 	add.w	r3, r7, #596	; 0x254
 800cfea:	4618      	mov	r0, r3
 800cfec:	f7f7 fd7e 	bl	8004aec <_ZNSt10shared_ptrIN4tama8DrawableEED1Ev>
 800cff0:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 800cff4:	4618      	mov	r0, r3
 800cff6:	f7f8 fc71 	bl	80058dc <_ZNSt10shared_ptrIN4tama6SpriteEED1Ev>
    for (int i = 0; i < 9; ++i)
 800cffa:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 800cffe:	3301      	adds	r3, #1
 800d000:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 800d004:	e7b8      	b.n	800cf78 <_ZN4tama11ActionIcons8initMenuEv+0x660>
    }

    okIcon = Sprite(context->getTextureLoader()->load(tama::asset::okIcon), Vec2d(84 - 11, 48 - 8));
 800d006:	1d3b      	adds	r3, r7, #4
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	f503 7498 	add.w	r4, r3, #304	; 0x130
 800d00e:	1d3b      	adds	r3, r7, #4
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	3308      	adds	r3, #8
 800d014:	4618      	mov	r0, r3
 800d016:	f7f6 fed9 	bl	8003dcc <_ZNKSt19__shared_ptr_accessIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800d01a:	4602      	mov	r2, r0
 800d01c:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 800d020:	4611      	mov	r1, r2
 800d022:	4618      	mov	r0, r3
 800d024:	f7f5 ffe6 	bl	8002ff4 <_ZN4tama7Context16getTextureLoaderEv>
 800d028:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 800d02c:	4618      	mov	r0, r3
 800d02e:	f7f8 fcfd 	bl	8005a2c <_ZNKSt19__shared_ptr_accessIN4tama13TextureLoaderELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800d032:	4601      	mov	r1, r0
 800d034:	680b      	ldr	r3, [r1, #0]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	f507 7021 	add.w	r0, r7, #644	; 0x284
 800d03c:	4a2d      	ldr	r2, [pc, #180]	; (800d0f4 <_ZN4tama11ActionIcons8initMenuEv+0x7dc>)
 800d03e:	4798      	blx	r3
 800d040:	f507 7325 	add.w	r3, r7, #660	; 0x294
 800d044:	2228      	movs	r2, #40	; 0x28
 800d046:	2149      	movs	r1, #73	; 0x49
 800d048:	4618      	mov	r0, r3
 800d04a:	f7f3 ff2f 	bl	8000eac <_ZN4tama5Vec2dC1Eii>
 800d04e:	f507 7225 	add.w	r2, r7, #660	; 0x294
 800d052:	f507 7121 	add.w	r1, r7, #644	; 0x284
 800d056:	f507 7319 	add.w	r3, r7, #612	; 0x264
 800d05a:	4618      	mov	r0, r3
 800d05c:	f001 fcdc 	bl	800ea18 <_ZN4tama6SpriteC1ERKSt10shared_ptrINS_7TextureEERKNS_5Vec2dE>
 800d060:	f507 7319 	add.w	r3, r7, #612	; 0x264
 800d064:	4619      	mov	r1, r3
 800d066:	4620      	mov	r0, r4
 800d068:	f7f8 fc99 	bl	800599e <_ZN4tama6SpriteaSEOS0_>
 800d06c:	f507 7319 	add.w	r3, r7, #612	; 0x264
 800d070:	4618      	mov	r0, r3
 800d072:	f7f8 fc41 	bl	80058f8 <_ZN4tama6SpriteD1Ev>
 800d076:	f507 7321 	add.w	r3, r7, #644	; 0x284
 800d07a:	4618      	mov	r0, r3
 800d07c:	f7f8 f8b5 	bl	80051ea <_ZNSt10shared_ptrIN4tama7TextureEED1Ev>
 800d080:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 800d084:	4618      	mov	r0, r3
 800d086:	f7f8 fc71 	bl	800596c <_ZNSt10shared_ptrIN4tama13TextureLoaderEED1Ev>
    scene->addDrawable(std::shared_ptr<Sprite>(&okIcon));
 800d08a:	1d3b      	adds	r3, r7, #4
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	4618      	mov	r0, r3
 800d090:	f7f8 f9b5 	bl	80053fe <_ZNKSt19__shared_ptr_accessIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800d094:	4604      	mov	r4, r0
 800d096:	1d3b      	adds	r3, r7, #4
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	f503 7298 	add.w	r2, r3, #304	; 0x130
 800d09e:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 800d0a2:	4611      	mov	r1, r2
 800d0a4:	4618      	mov	r0, r3
 800d0a6:	f7f8 fd5f 	bl	8005b68 <_ZNSt10shared_ptrIN4tama6SpriteEEC1IS1_vEEPT_>
 800d0aa:	f507 7229 	add.w	r2, r7, #676	; 0x2a4
 800d0ae:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 800d0b2:	4611      	mov	r1, r2
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	f7f8 fd08 	bl	8005aca <_ZNSt10shared_ptrIN4tama8DrawableEEC1INS0_6SpriteEvEEOS_IT_E>
 800d0ba:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 800d0be:	4619      	mov	r1, r3
 800d0c0:	4620      	mov	r0, r4
 800d0c2:	f003 ff11 	bl	8010ee8 <_ZN4tama5Scene11addDrawableESt10shared_ptrINS_8DrawableEE>
 800d0c6:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	f7f7 fd0e 	bl	8004aec <_ZNSt10shared_ptrIN4tama8DrawableEED1Ev>
 800d0d0:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	f7f8 fc01 	bl	80058dc <_ZNSt10shared_ptrIN4tama6SpriteEED1Ev>
}
 800d0da:	bf00      	nop
 800d0dc:	f507 772d 	add.w	r7, r7, #692	; 0x2b4
 800d0e0:	46bd      	mov	sp, r7
 800d0e2:	bd90      	pop	{r4, r7, pc}
 800d0e4:	20000060 	.word	0x20000060
 800d0e8:	2000006c 	.word	0x2000006c
 800d0ec:	20000078 	.word	0x20000078
 800d0f0:	20000084 	.word	0x20000084
 800d0f4:	20000018 	.word	0x20000018

0800d0f8 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EEaSERKS4_>:
    class __shared_ptr
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b082      	sub	sp, #8
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]
 800d100:	6039      	str	r1, [r7, #0]
 800d102:	683b      	ldr	r3, [r7, #0]
 800d104:	681a      	ldr	r2, [r3, #0]
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	601a      	str	r2, [r3, #0]
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	1d1a      	adds	r2, r3, #4
 800d10e:	683b      	ldr	r3, [r7, #0]
 800d110:	3304      	adds	r3, #4
 800d112:	4619      	mov	r1, r3
 800d114:	4610      	mov	r0, r2
 800d116:	f7f7 feb9 	bl	8004e8c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	4618      	mov	r0, r3
 800d11e:	3708      	adds	r7, #8
 800d120:	46bd      	mov	sp, r7
 800d122:	bd80      	pop	{r7, pc}

0800d124 <_ZNSt10shared_ptrIN4tama5SceneEEaSERKS2_>:
    class shared_ptr : public __shared_ptr<_Tp>
 800d124:	b580      	push	{r7, lr}
 800d126:	b082      	sub	sp, #8
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
 800d12c:	6039      	str	r1, [r7, #0]
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	683a      	ldr	r2, [r7, #0]
 800d132:	4611      	mov	r1, r2
 800d134:	4618      	mov	r0, r3
 800d136:	f7ff ffdf 	bl	800d0f8 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EEaSERKS4_>
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	4618      	mov	r0, r3
 800d13e:	3708      	adds	r7, #8
 800d140:	46bd      	mov	sp, r7
 800d142:	bd80      	pop	{r7, pc}

0800d144 <_ZNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EEaSERKS4_>:
 800d144:	b580      	push	{r7, lr}
 800d146:	b082      	sub	sp, #8
 800d148:	af00      	add	r7, sp, #0
 800d14a:	6078      	str	r0, [r7, #4]
 800d14c:	6039      	str	r1, [r7, #0]
 800d14e:	683b      	ldr	r3, [r7, #0]
 800d150:	681a      	ldr	r2, [r3, #0]
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	601a      	str	r2, [r3, #0]
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	1d1a      	adds	r2, r3, #4
 800d15a:	683b      	ldr	r3, [r7, #0]
 800d15c:	3304      	adds	r3, #4
 800d15e:	4619      	mov	r1, r3
 800d160:	4610      	mov	r0, r2
 800d162:	f7f7 fe93 	bl	8004e8c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	4618      	mov	r0, r3
 800d16a:	3708      	adds	r7, #8
 800d16c:	46bd      	mov	sp, r7
 800d16e:	bd80      	pop	{r7, pc}

0800d170 <_ZNSt10shared_ptrIN4tama7ContextEEaSERKS2_>:
 800d170:	b580      	push	{r7, lr}
 800d172:	b082      	sub	sp, #8
 800d174:	af00      	add	r7, sp, #0
 800d176:	6078      	str	r0, [r7, #4]
 800d178:	6039      	str	r1, [r7, #0]
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	683a      	ldr	r2, [r7, #0]
 800d17e:	4611      	mov	r1, r2
 800d180:	4618      	mov	r0, r3
 800d182:	f7ff ffdf 	bl	800d144 <_ZNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EEaSERKS4_>
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	4618      	mov	r0, r3
 800d18a:	3708      	adds	r7, #8
 800d18c:	46bd      	mov	sp, r7
 800d18e:	bd80      	pop	{r7, pc}

0800d190 <_ZN4tama11ActionIconsC1ESt10shared_ptrINS_5SceneEERKS1_INS_7ContextEE>:

tama::ActionIcons::ActionIcons(std::shared_ptr<Scene> scene, const std::shared_ptr<Context> & context)
 800d190:	b580      	push	{r7, lr}
 800d192:	b084      	sub	sp, #16
 800d194:	af00      	add	r7, sp, #0
 800d196:	60f8      	str	r0, [r7, #12]
 800d198:	60b9      	str	r1, [r7, #8]
 800d19a:	607a      	str	r2, [r7, #4]
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	4618      	mov	r0, r3
 800d1a0:	f7f6 fe07 	bl	8003db2 <_ZNSt10shared_ptrIN4tama5SceneEEC1Ev>
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	3308      	adds	r3, #8
 800d1a8:	4618      	mov	r0, r3
 800d1aa:	f000 f898 	bl	800d2de <_ZNSt10shared_ptrIN4tama7ContextEEC1Ev>
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	3310      	adds	r3, #16
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	f7f8 fbb8 	bl	8005928 <_ZNSt5arrayIN4tama6SpriteELj9EEC1Ev>
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	f503 7398 	add.w	r3, r3, #304	; 0x130
 800d1be:	4618      	mov	r0, r3
 800d1c0:	f001 fc68 	bl	800ea94 <_ZN4tama6SpriteC1Ev>
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	2209      	movs	r2, #9
 800d1c8:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
{
    this->scene = scene;
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	68b9      	ldr	r1, [r7, #8]
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	f7ff ffa7 	bl	800d124 <_ZNSt10shared_ptrIN4tama5SceneEEaSERKS2_>
    this->context = context;
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	3308      	adds	r3, #8
 800d1da:	6879      	ldr	r1, [r7, #4]
 800d1dc:	4618      	mov	r0, r3
 800d1de:	f7ff ffc7 	bl	800d170 <_ZNSt10shared_ptrIN4tama7ContextEEaSERKS2_>
    initMenu();
 800d1e2:	68f8      	ldr	r0, [r7, #12]
 800d1e4:	f7ff fb98 	bl	800c918 <_ZN4tama11ActionIcons8initMenuEv>
}
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	3710      	adds	r7, #16
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	bd80      	pop	{r7, pc}
	...

0800d1f4 <_ZN4tama11ActionIcons18changeSelectedIconEv>:

void tama::ActionIcons::changeSelectedIcon()
{
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b082      	sub	sp, #8
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	6078      	str	r0, [r7, #4]
    if (selectedIconIndex != 9)
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800d202:	2b09      	cmp	r3, #9
 800d204:	d00f      	beq.n	800d226 <_ZN4tama11ActionIcons18changeSelectedIconEv+0x32>
    {
        bigIcons.at(selectedIconIndex).hide();
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	f103 0210 	add.w	r2, r3, #16
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800d212:	4619      	mov	r1, r3
 800d214:	4610      	mov	r0, r2
 800d216:	f7f8 fbef 	bl	80059f8 <_ZNSt5arrayIN4tama6SpriteELj9EE2atEj>
 800d21a:	4602      	mov	r2, r0
 800d21c:	6813      	ldr	r3, [r2, #0]
 800d21e:	3314      	adds	r3, #20
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	4610      	mov	r0, r2
 800d224:	4798      	blx	r3
    }
    selectedIconIndex++;
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800d22c:	1c5a      	adds	r2, r3, #1
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
    selectedIconIndex %= 10;
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	f8d3 1150 	ldr.w	r1, [r3, #336]	; 0x150
 800d23a:	4b13      	ldr	r3, [pc, #76]	; (800d288 <_ZN4tama11ActionIcons18changeSelectedIconEv+0x94>)
 800d23c:	fb83 2301 	smull	r2, r3, r3, r1
 800d240:	109a      	asrs	r2, r3, #2
 800d242:	17cb      	asrs	r3, r1, #31
 800d244:	1ad2      	subs	r2, r2, r3
 800d246:	4613      	mov	r3, r2
 800d248:	009b      	lsls	r3, r3, #2
 800d24a:	4413      	add	r3, r2
 800d24c:	005b      	lsls	r3, r3, #1
 800d24e:	1aca      	subs	r2, r1, r3
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
    if (selectedIconIndex != 9)
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800d25c:	2b09      	cmp	r3, #9
 800d25e:	d00f      	beq.n	800d280 <_ZN4tama11ActionIcons18changeSelectedIconEv+0x8c>
    {
        bigIcons.at(selectedIconIndex).show();
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	f103 0210 	add.w	r2, r3, #16
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800d26c:	4619      	mov	r1, r3
 800d26e:	4610      	mov	r0, r2
 800d270:	f7f8 fbc2 	bl	80059f8 <_ZNSt5arrayIN4tama6SpriteELj9EE2atEj>
 800d274:	4602      	mov	r2, r0
 800d276:	6813      	ldr	r3, [r2, #0]
 800d278:	3318      	adds	r3, #24
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	4610      	mov	r0, r2
 800d27e:	4798      	blx	r3
    }
}
 800d280:	bf00      	nop
 800d282:	3708      	adds	r7, #8
 800d284:	46bd      	mov	sp, r7
 800d286:	bd80      	pop	{r7, pc}
 800d288:	66666667 	.word	0x66666667

0800d28c <_ZN4tama11ActionIcons15removeSelectionEv>:

void tama::ActionIcons::removeSelection()
{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b082      	sub	sp, #8
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
    bigIcons.at(selectedIconIndex).hide();
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	f103 0210 	add.w	r2, r3, #16
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800d2a0:	4619      	mov	r1, r3
 800d2a2:	4610      	mov	r0, r2
 800d2a4:	f7f8 fba8 	bl	80059f8 <_ZNSt5arrayIN4tama6SpriteELj9EE2atEj>
 800d2a8:	4602      	mov	r2, r0
 800d2aa:	6813      	ldr	r3, [r2, #0]
 800d2ac:	3314      	adds	r3, #20
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	4610      	mov	r0, r2
 800d2b2:	4798      	blx	r3
    selectedIconIndex = 9;
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	2209      	movs	r2, #9
 800d2b8:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
}
 800d2bc:	bf00      	nop
 800d2be:	3708      	adds	r7, #8
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	bd80      	pop	{r7, pc}

0800d2c4 <_ZN4tama11ActionIcons20getSelectedIconIndexEv>:

int tama::ActionIcons::getSelectedIconIndex()
{
 800d2c4:	b480      	push	{r7}
 800d2c6:	b083      	sub	sp, #12
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	6078      	str	r0, [r7, #4]
    return selectedIconIndex;
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
}
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	370c      	adds	r7, #12
 800d2d6:	46bd      	mov	sp, r7
 800d2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2dc:	4770      	bx	lr

0800d2de <_ZNSt10shared_ptrIN4tama7ContextEEC1Ev>:
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }
 800d2de:	b580      	push	{r7, lr}
 800d2e0:	b082      	sub	sp, #8
 800d2e2:	af00      	add	r7, sp, #0
 800d2e4:	6078      	str	r0, [r7, #4]
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	f000 f805 	bl	800d2f8 <_ZNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	3708      	adds	r7, #8
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	bd80      	pop	{r7, pc}

0800d2f8 <_ZNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_ptr() noexcept
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b082      	sub	sp, #8
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	6078      	str	r0, [r7, #4]
      : _M_ptr(0), _M_refcount()
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	2200      	movs	r2, #0
 800d304:	601a      	str	r2, [r3, #0]
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	3304      	adds	r3, #4
 800d30a:	4618      	mov	r0, r3
 800d30c:	f7f6 fe2f 	bl	8003f6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
      { }
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	4618      	mov	r0, r3
 800d314:	3708      	adds	r7, #8
 800d316:	46bd      	mov	sp, r7
 800d318:	bd80      	pop	{r7, pc}

0800d31a <_ZN4tama4Menu10setOptionsESt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EE>:
#include "Menu.h"



void tama::Menu::setOptions(std::vector<std::string> options)
{
 800d31a:	b580      	push	{r7, lr}
 800d31c:	b082      	sub	sp, #8
 800d31e:	af00      	add	r7, sp, #0
 800d320:	6078      	str	r0, [r7, #4]
 800d322:	6039      	str	r1, [r7, #0]
    this->options = options;
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	334c      	adds	r3, #76	; 0x4c
 800d328:	6839      	ldr	r1, [r7, #0]
 800d32a:	4618      	mov	r0, r3
 800d32c:	f000 f92e 	bl	800d58c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_>
    initMenu();
 800d330:	6878      	ldr	r0, [r7, #4]
 800d332:	f000 f83b 	bl	800d3ac <_ZN4tama4Menu8initMenuEv>
}
 800d336:	bf00      	nop
 800d338:	3708      	adds	r7, #8
 800d33a:	46bd      	mov	sp, r7
 800d33c:	bd80      	pop	{r7, pc}

0800d33e <_ZN4tama4MenuC1ESt10shared_ptrINS_5SceneEERKS1_INS_7ContextEE>:

tama::Menu::Menu(std::shared_ptr<Scene> scene, const std::shared_ptr<Context> &context)
 800d33e:	b580      	push	{r7, lr}
 800d340:	b084      	sub	sp, #16
 800d342:	af00      	add	r7, sp, #0
 800d344:	60f8      	str	r0, [r7, #12]
 800d346:	60b9      	str	r1, [r7, #8]
 800d348:	607a      	str	r2, [r7, #4]
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	4618      	mov	r0, r3
 800d34e:	f7f6 fd30 	bl	8003db2 <_ZNSt10shared_ptrIN4tama5SceneEEC1Ev>
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	3308      	adds	r3, #8
 800d356:	4618      	mov	r0, r3
 800d358:	f7ff ffc1 	bl	800d2de <_ZNSt10shared_ptrIN4tama7ContextEEC1Ev>
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	2200      	movs	r2, #0
 800d360:	611a      	str	r2, [r3, #16]
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	3314      	adds	r3, #20
 800d366:	4618      	mov	r0, r3
 800d368:	f001 fb94 	bl	800ea94 <_ZN4tama6SpriteC1Ev>
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	3334      	adds	r3, #52	; 0x34
 800d370:	4618      	mov	r0, r3
 800d372:	f000 fa17 	bl	800d7a4 <_ZNSt6vectorIN4tama4TextESaIS1_EEC1Ev>
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	3340      	adds	r3, #64	; 0x40
 800d37a:	4618      	mov	r0, r3
 800d37c:	f000 fa1f 	bl	800d7be <_ZNSt6vectorISt10shared_ptrIN4tama5StageEESaIS3_EEC1Ev>
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	334c      	adds	r3, #76	; 0x4c
 800d384:	4618      	mov	r0, r3
 800d386:	f7fc fad2 	bl	800992e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
{
    this->scene = scene;
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	68b9      	ldr	r1, [r7, #8]
 800d38e:	4618      	mov	r0, r3
 800d390:	f7ff fec8 	bl	800d124 <_ZNSt10shared_ptrIN4tama5SceneEEaSERKS2_>
    this->context = context;
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	3308      	adds	r3, #8
 800d398:	6879      	ldr	r1, [r7, #4]
 800d39a:	4618      	mov	r0, r3
 800d39c:	f7ff fee8 	bl	800d170 <_ZNSt10shared_ptrIN4tama7ContextEEaSERKS2_>
}
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	3710      	adds	r7, #16
 800d3a6:	46bd      	mov	sp, r7
 800d3a8:	bd80      	pop	{r7, pc}
	...

0800d3ac <_ZN4tama4Menu8initMenuEv>:

void tama::Menu::initMenu()
{
 800d3ac:	b590      	push	{r4, r7, lr}
 800d3ae:	b095      	sub	sp, #84	; 0x54
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < options.size(); ++i)
 800d3b4:	2300      	movs	r3, #0
 800d3b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	334c      	adds	r3, #76	; 0x4c
 800d3bc:	4618      	mov	r0, r3
 800d3be:	f7fc fd33 	bl	8009e28 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 800d3c2:	4602      	mov	r2, r0
 800d3c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d3c6:	429a      	cmp	r2, r3
 800d3c8:	bf8c      	ite	hi
 800d3ca:	2301      	movhi	r3, #1
 800d3cc:	2300      	movls	r3, #0
 800d3ce:	b2db      	uxtb	r3, r3
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d038      	beq.n	800d446 <_ZN4tama4Menu8initMenuEv+0x9a>
    {
        auto text = std::make_shared<Text>(options[i], Vec2d(10, i * 8));
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	334c      	adds	r3, #76	; 0x4c
 800d3d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d3da:	4611      	mov	r1, r2
 800d3dc:	4618      	mov	r0, r3
 800d3de:	f000 f9fb 	bl	800d7d8 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEixEj>
 800d3e2:	4604      	mov	r4, r0
 800d3e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d3e6:	00da      	lsls	r2, r3, #3
 800d3e8:	f107 0314 	add.w	r3, r7, #20
 800d3ec:	210a      	movs	r1, #10
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	f7f3 fd5c 	bl	8000eac <_ZN4tama5Vec2dC1Eii>
 800d3f4:	f107 030c 	add.w	r3, r7, #12
 800d3f8:	f107 0214 	add.w	r2, r7, #20
 800d3fc:	4621      	mov	r1, r4
 800d3fe:	4618      	mov	r0, r3
 800d400:	f000 fa08 	bl	800d814 <_ZSt11make_sharedIN4tama4TextEJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS0_5Vec2dEEESt10shared_ptrIT_EDpOT0_>
        //optionTexts.emplace_back(text);
        scene->addDrawable(text);
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	4618      	mov	r0, r3
 800d408:	f7f7 fff9 	bl	80053fe <_ZNKSt19__shared_ptr_accessIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800d40c:	4604      	mov	r4, r0
 800d40e:	f107 020c 	add.w	r2, r7, #12
 800d412:	f107 031c 	add.w	r3, r7, #28
 800d416:	4611      	mov	r1, r2
 800d418:	4618      	mov	r0, r3
 800d41a:	f000 fa1d 	bl	800d858 <_ZNSt10shared_ptrIN4tama8DrawableEEC1INS0_4TextEvEERKS_IT_E>
 800d41e:	f107 031c 	add.w	r3, r7, #28
 800d422:	4619      	mov	r1, r3
 800d424:	4620      	mov	r0, r4
 800d426:	f003 fd5f 	bl	8010ee8 <_ZN4tama5Scene11addDrawableESt10shared_ptrINS_8DrawableEE>
 800d42a:	f107 031c 	add.w	r3, r7, #28
 800d42e:	4618      	mov	r0, r3
 800d430:	f7f7 fb5c 	bl	8004aec <_ZNSt10shared_ptrIN4tama8DrawableEED1Ev>
        auto text = std::make_shared<Text>(options[i], Vec2d(10, i * 8));
 800d434:	f107 030c 	add.w	r3, r7, #12
 800d438:	4618      	mov	r0, r3
 800d43a:	f7f7 ff7d 	bl	8005338 <_ZNSt10shared_ptrIN4tama4TextEED1Ev>
    for (int i = 0; i < options.size(); ++i)
 800d43e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d440:	3301      	adds	r3, #1
 800d442:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d444:	e7b8      	b.n	800d3b8 <_ZN4tama4Menu8initMenuEv+0xc>
    }
    cursor.setPosition(Vec2d(0, 0));
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	f103 0414 	add.w	r4, r3, #20
 800d44c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d450:	2200      	movs	r2, #0
 800d452:	2100      	movs	r1, #0
 800d454:	4618      	mov	r0, r3
 800d456:	f7f3 fd29 	bl	8000eac <_ZN4tama5Vec2dC1Eii>
 800d45a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d45e:	e893 0006 	ldmia.w	r3, {r1, r2}
 800d462:	4620      	mov	r0, r4
 800d464:	f001 f9fa 	bl	800e85c <_ZN4tama6Sprite11setPositionENS_5Vec2dE>
    cursor.setTexture(context->getTextureLoader()->load(tama::asset::menuCursor));
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	f103 0414 	add.w	r4, r3, #20
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	3308      	adds	r3, #8
 800d472:	4618      	mov	r0, r3
 800d474:	f7f6 fcaa 	bl	8003dcc <_ZNKSt19__shared_ptr_accessIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800d478:	4602      	mov	r2, r0
 800d47a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800d47e:	4611      	mov	r1, r2
 800d480:	4618      	mov	r0, r3
 800d482:	f7f5 fdb7 	bl	8002ff4 <_ZN4tama7Context16getTextureLoaderEv>
 800d486:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800d48a:	4618      	mov	r0, r3
 800d48c:	f7f8 face 	bl	8005a2c <_ZNKSt19__shared_ptr_accessIN4tama13TextureLoaderELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800d490:	4601      	mov	r1, r0
 800d492:	680b      	ldr	r3, [r1, #0]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800d49a:	4a1e      	ldr	r2, [pc, #120]	; (800d514 <_ZN4tama4Menu8initMenuEv+0x168>)
 800d49c:	4798      	blx	r3
 800d49e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d4a2:	4619      	mov	r1, r3
 800d4a4:	4620      	mov	r0, r4
 800d4a6:	f001 f9ca 	bl	800e83e <_ZN4tama6Sprite10setTextureESt10shared_ptrINS_7TextureEE>
 800d4aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	f7f7 fe9b 	bl	80051ea <_ZNSt10shared_ptrIN4tama7TextureEED1Ev>
 800d4b4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	f7f8 fa57 	bl	800596c <_ZNSt10shared_ptrIN4tama13TextureLoaderEED1Ev>
    scene->addDrawable(std::shared_ptr<Sprite>(&cursor));
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	f7f7 ff9c 	bl	80053fe <_ZNKSt19__shared_ptr_accessIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800d4c6:	4604      	mov	r4, r0
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	f103 0214 	add.w	r2, r3, #20
 800d4ce:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d4d2:	4611      	mov	r1, r2
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	f7f8 fb47 	bl	8005b68 <_ZNSt10shared_ptrIN4tama6SpriteEEC1IS1_vEEPT_>
 800d4da:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800d4de:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d4e2:	4611      	mov	r1, r2
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	f7f8 faf0 	bl	8005aca <_ZNSt10shared_ptrIN4tama8DrawableEEC1INS0_6SpriteEvEEOS_IT_E>
 800d4ea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d4ee:	4619      	mov	r1, r3
 800d4f0:	4620      	mov	r0, r4
 800d4f2:	f003 fcf9 	bl	8010ee8 <_ZN4tama5Scene11addDrawableESt10shared_ptrINS_8DrawableEE>
 800d4f6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	f7f7 faf6 	bl	8004aec <_ZNSt10shared_ptrIN4tama8DrawableEED1Ev>
 800d500:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d504:	4618      	mov	r0, r3
 800d506:	f7f8 f9e9 	bl	80058dc <_ZNSt10shared_ptrIN4tama6SpriteEED1Ev>
}
 800d50a:	bf00      	nop
 800d50c:	3754      	adds	r7, #84	; 0x54
 800d50e:	46bd      	mov	sp, r7
 800d510:	bd90      	pop	{r4, r7, pc}
 800d512:	bf00      	nop
 800d514:	20000090 	.word	0x20000090

0800d518 <_ZN4tama4Menu15getSelectedItemEv>:

int tama::Menu::getSelectedItem()
{
 800d518:	b480      	push	{r7}
 800d51a:	b083      	sub	sp, #12
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	6078      	str	r0, [r7, #4]
    return selectedItem;
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	691b      	ldr	r3, [r3, #16]
}
 800d524:	4618      	mov	r0, r3
 800d526:	370c      	adds	r7, #12
 800d528:	46bd      	mov	sp, r7
 800d52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d52e:	4770      	bx	lr

0800d530 <_ZN4tama4Menu14moveToNextItemEv>:

void tama::Menu::moveToNextItem()
{
 800d530:	b590      	push	{r4, r7, lr}
 800d532:	b085      	sub	sp, #20
 800d534:	af00      	add	r7, sp, #0
 800d536:	6078      	str	r0, [r7, #4]
    selectedItem++;
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	691b      	ldr	r3, [r3, #16]
 800d53c:	1c5a      	adds	r2, r3, #1
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	611a      	str	r2, [r3, #16]
    cursor.move(Vec2d(0, 8));
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	f103 0414 	add.w	r4, r3, #20
 800d548:	f107 0308 	add.w	r3, r7, #8
 800d54c:	2208      	movs	r2, #8
 800d54e:	2100      	movs	r1, #0
 800d550:	4618      	mov	r0, r3
 800d552:	f7f3 fcab 	bl	8000eac <_ZN4tama5Vec2dC1Eii>
 800d556:	f107 0308 	add.w	r3, r7, #8
 800d55a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800d55e:	4620      	mov	r0, r4
 800d560:	f001 f9b2 	bl	800e8c8 <_ZN4tama6Sprite4moveENS_5Vec2dE>
}
 800d564:	bf00      	nop
 800d566:	3714      	adds	r7, #20
 800d568:	46bd      	mov	sp, r7
 800d56a:	bd90      	pop	{r4, r7, pc}

0800d56c <_ZN9__gnu_cxx14__alloc_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE27_S_propagate_on_copy_assignEv>:

    static void _S_on_swap(_Alloc& __a, _Alloc& __b)
    { std::__alloc_on_swap(__a, __b); }

    static constexpr bool _S_propagate_on_copy_assign()
 800d56c:	b480      	push	{r7}
 800d56e:	af00      	add	r7, sp, #0
    { return _Base_type::propagate_on_container_copy_assignment::value; }
 800d570:	2300      	movs	r3, #0
 800d572:	4618      	mov	r0, r3
 800d574:	46bd      	mov	sp, r7
 800d576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d57a:	4770      	bx	lr

0800d57c <_ZN9__gnu_cxx14__alloc_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE15_S_always_equalEv>:
    { return _Base_type::propagate_on_container_move_assignment::value; }

    static constexpr bool _S_propagate_on_swap()
    { return _Base_type::propagate_on_container_swap::value; }

    static constexpr bool _S_always_equal()
 800d57c:	b480      	push	{r7}
 800d57e:	af00      	add	r7, sp, #0
    { return _Base_type::is_always_equal::value; }
 800d580:	2301      	movs	r3, #1
 800d582:	4618      	mov	r0, r3
 800d584:	46bd      	mov	sp, r7
 800d586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58a:	4770      	bx	lr

0800d58c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_>:
    vector<_Tp, _Alloc>::
 800d58c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d58e:	b085      	sub	sp, #20
 800d590:	af00      	add	r7, sp, #0
 800d592:	6078      	str	r0, [r7, #4]
 800d594:	6039      	str	r1, [r7, #0]
      if (&__x != this)
 800d596:	683a      	ldr	r2, [r7, #0]
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	429a      	cmp	r2, r3
 800d59c:	f000 80fa 	beq.w	800d794 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_+0x208>
	  if (_Alloc_traits::_S_propagate_on_copy_assign())
 800d5a0:	f7ff ffe4 	bl	800d56c <_ZN9__gnu_cxx14__alloc_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE27_S_propagate_on_copy_assignEv>
 800d5a4:	4603      	mov	r3, r0
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d047      	beq.n	800d63a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_+0xae>
	      if (!_Alloc_traits::_S_always_equal()
 800d5aa:	f7ff ffe7 	bl	800d57c <_ZN9__gnu_cxx14__alloc_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE15_S_always_equalEv>
 800d5ae:	4603      	mov	r3, r0
 800d5b0:	f083 0301 	eor.w	r3, r3, #1
 800d5b4:	b2db      	uxtb	r3, r3
	          && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d012      	beq.n	800d5e0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_+0x54>
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	4618      	mov	r0, r3
 800d5be:	f7fb fd43 	bl	8009048 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 800d5c2:	4604      	mov	r4, r0
 800d5c4:	683b      	ldr	r3, [r7, #0]
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	f7fc fc52 	bl	8009e70 <_ZNKSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 800d5cc:	4603      	mov	r3, r0
 800d5ce:	4619      	mov	r1, r3
 800d5d0:	4620      	mov	r0, r4
 800d5d2:	f000 f951 	bl	800d878 <_ZStneINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSaIT_ES9_>
 800d5d6:	4603      	mov	r3, r0
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d001      	beq.n	800d5e0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_+0x54>
 800d5dc:	2301      	movs	r3, #1
 800d5de:	e000      	b.n	800d5e2 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_+0x56>
 800d5e0:	2300      	movs	r3, #0
	      if (!_Alloc_traits::_S_always_equal()
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d01b      	beq.n	800d61e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_+0x92>
		  this->clear();
 800d5e6:	6878      	ldr	r0, [r7, #4]
 800d5e8:	f000 f952 	bl	800d890 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5clearEv>
		  _M_deallocate(this->_M_impl._M_start,
 800d5ec:	6878      	ldr	r0, [r7, #4]
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	6819      	ldr	r1, [r3, #0]
				this->_M_impl._M_end_of_storage
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	689b      	ldr	r3, [r3, #8]
				- this->_M_impl._M_start);
 800d5f6:	461a      	mov	r2, r3
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	1ad3      	subs	r3, r2, r3
 800d5fe:	10db      	asrs	r3, r3, #3
 800d600:	4a67      	ldr	r2, [pc, #412]	; (800d7a0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_+0x214>)
 800d602:	fb02 f303 	mul.w	r3, r2, r3
		  _M_deallocate(this->_M_impl._M_start,
 800d606:	461a      	mov	r2, r3
 800d608:	f7fb fd9b 	bl	8009142 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j>
		  this->_M_impl._M_start = nullptr;
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	2200      	movs	r2, #0
 800d610:	601a      	str	r2, [r3, #0]
		  this->_M_impl._M_finish = nullptr;
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	2200      	movs	r2, #0
 800d616:	605a      	str	r2, [r3, #4]
		  this->_M_impl._M_end_of_storage = nullptr;
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	2200      	movs	r2, #0
 800d61c:	609a      	str	r2, [r3, #8]
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	4618      	mov	r0, r3
 800d622:	f7fb fd11 	bl	8009048 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 800d626:	4604      	mov	r4, r0
 800d628:	683b      	ldr	r3, [r7, #0]
 800d62a:	4618      	mov	r0, r3
 800d62c:	f7fc fc20 	bl	8009e70 <_ZNKSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 800d630:	4603      	mov	r3, r0
 800d632:	4619      	mov	r1, r3
 800d634:	4620      	mov	r0, r4
 800d636:	f000 f939 	bl	800d8ac <_ZSt15__alloc_on_copyISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvRT_RKS7_>
	  const size_type __xlen = __x.size();
 800d63a:	6838      	ldr	r0, [r7, #0]
 800d63c:	f7fc fbf4 	bl	8009e28 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 800d640:	60f8      	str	r0, [r7, #12]
	  if (__xlen > capacity())
 800d642:	6878      	ldr	r0, [r7, #4]
 800d644:	f000 f940 	bl	800d8c8 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8capacityEv>
 800d648:	4602      	mov	r2, r0
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	4293      	cmp	r3, r2
 800d64e:	bf8c      	ite	hi
 800d650:	2301      	movhi	r3, #1
 800d652:	2300      	movls	r3, #0
 800d654:	b2db      	uxtb	r3, r3
 800d656:	2b00      	cmp	r3, #0
 800d658:	d039      	beq.n	800d6ce <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_+0x142>
	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
 800d65a:	6838      	ldr	r0, [r7, #0]
 800d65c:	f7fc fc27 	bl	8009eae <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>
 800d660:	4604      	mov	r4, r0
 800d662:	6838      	ldr	r0, [r7, #0]
 800d664:	f7fc fc37 	bl	8009ed6 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>
 800d668:	4603      	mov	r3, r0
 800d66a:	4622      	mov	r2, r4
 800d66c:	68f9      	ldr	r1, [r7, #12]
 800d66e:	6878      	ldr	r0, [r7, #4]
 800d670:	f000 f940 	bl	800d8f4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKS5_S7_EEEEPS5_jT_SF_>
 800d674:	60b8      	str	r0, [r7, #8]
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	681c      	ldr	r4, [r3, #0]
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	4618      	mov	r0, r3
 800d682:	f7fb fce1 	bl	8009048 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 800d686:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800d688:	461a      	mov	r2, r3
 800d68a:	4629      	mov	r1, r5
 800d68c:	4620      	mov	r0, r4
 800d68e:	f7fb fce6 	bl	800905e <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
	      _M_deallocate(this->_M_impl._M_start,
 800d692:	6878      	ldr	r0, [r7, #4]
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	689b      	ldr	r3, [r3, #8]
			    - this->_M_impl._M_start);
 800d69c:	461a      	mov	r2, r3
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	1ad3      	subs	r3, r2, r3
 800d6a4:	10db      	asrs	r3, r3, #3
 800d6a6:	4a3e      	ldr	r2, [pc, #248]	; (800d7a0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_+0x214>)
 800d6a8:	fb02 f303 	mul.w	r3, r2, r3
	      _M_deallocate(this->_M_impl._M_start,
 800d6ac:	461a      	mov	r2, r3
 800d6ae:	f7fb fd48 	bl	8009142 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j>
	      this->_M_impl._M_start = __tmp;
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	68ba      	ldr	r2, [r7, #8]
 800d6b6:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	6819      	ldr	r1, [r3, #0]
 800d6bc:	68fa      	ldr	r2, [r7, #12]
 800d6be:	4613      	mov	r3, r2
 800d6c0:	005b      	lsls	r3, r3, #1
 800d6c2:	4413      	add	r3, r2
 800d6c4:	00db      	lsls	r3, r3, #3
 800d6c6:	18ca      	adds	r2, r1, r3
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	609a      	str	r2, [r3, #8]
 800d6cc:	e058      	b.n	800d780 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_+0x1f4>
	  else if (size() >= __xlen)
 800d6ce:	6878      	ldr	r0, [r7, #4]
 800d6d0:	f7fc fbaa 	bl	8009e28 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 800d6d4:	4602      	mov	r2, r0
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	4293      	cmp	r3, r2
 800d6da:	bf94      	ite	ls
 800d6dc:	2301      	movls	r3, #1
 800d6de:	2300      	movhi	r3, #0
 800d6e0:	b2db      	uxtb	r3, r3
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d020      	beq.n	800d728 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_+0x19c>
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 800d6e6:	6838      	ldr	r0, [r7, #0]
 800d6e8:	f7fc fbe1 	bl	8009eae <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>
 800d6ec:	4604      	mov	r4, r0
 800d6ee:	6838      	ldr	r0, [r7, #0]
 800d6f0:	f7fc fbf1 	bl	8009ed6 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>
 800d6f4:	4605      	mov	r5, r0
 800d6f6:	6878      	ldr	r0, [r7, #4]
 800d6f8:	f7fc fcd2 	bl	800a0a0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>
 800d6fc:	4603      	mov	r3, r0
 800d6fe:	461a      	mov	r2, r3
 800d700:	4629      	mov	r1, r5
 800d702:	4620      	mov	r0, r4
 800d704:	f000 f912 	bl	800d92c <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS7_SaIS7_EEEENS1_IPS7_SC_EEET0_T_SH_SG_>
 800d708:	4604      	mov	r4, r0
 800d70a:	6878      	ldr	r0, [r7, #4]
 800d70c:	f7fc fa36 	bl	8009b7c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>
 800d710:	4605      	mov	r5, r0
			    end(), _M_get_Tp_allocator());
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	4618      	mov	r0, r3
 800d716:	f7fb fc97 	bl	8009048 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 800d71a:	4603      	mov	r3, r0
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 800d71c:	461a      	mov	r2, r3
 800d71e:	4629      	mov	r1, r5
 800d720:	4620      	mov	r0, r4
 800d722:	f000 f91b 	bl	800d95c <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS7_SaIS7_EEEES7_EvT_SD_RSaIT0_E>
 800d726:	e02b      	b.n	800d780 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_+0x1f4>
	      std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
 800d728:	683b      	ldr	r3, [r7, #0]
 800d72a:	681d      	ldr	r5, [r3, #0]
 800d72c:	683b      	ldr	r3, [r7, #0]
 800d72e:	681c      	ldr	r4, [r3, #0]
 800d730:	6878      	ldr	r0, [r7, #4]
 800d732:	f7fc fb79 	bl	8009e28 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 800d736:	4602      	mov	r2, r0
 800d738:	4613      	mov	r3, r2
 800d73a:	005b      	lsls	r3, r3, #1
 800d73c:	4413      	add	r3, r2
 800d73e:	00db      	lsls	r3, r3, #3
 800d740:	18e1      	adds	r1, r4, r3
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	461a      	mov	r2, r3
 800d748:	4628      	mov	r0, r5
 800d74a:	f000 f915 	bl	800d978 <_ZSt4copyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ET0_T_S8_S7_>
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 800d74e:	683b      	ldr	r3, [r7, #0]
 800d750:	681c      	ldr	r4, [r3, #0]
 800d752:	6878      	ldr	r0, [r7, #4]
 800d754:	f7fc fb68 	bl	8009e28 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 800d758:	4602      	mov	r2, r0
 800d75a:	4613      	mov	r3, r2
 800d75c:	005b      	lsls	r3, r3, #1
 800d75e:	4413      	add	r3, r2
 800d760:	00db      	lsls	r3, r3, #3
 800d762:	441c      	add	r4, r3
					  __x._M_impl._M_finish,
 800d764:	683b      	ldr	r3, [r7, #0]
 800d766:	685d      	ldr	r5, [r3, #4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	685e      	ldr	r6, [r3, #4]
					  _M_get_Tp_allocator());
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	4618      	mov	r0, r3
 800d770:	f7fb fc6a 	bl	8009048 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 800d774:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 800d776:	4632      	mov	r2, r6
 800d778:	4629      	mov	r1, r5
 800d77a:	4620      	mov	r0, r4
 800d77c:	f000 f914 	bl	800d9a8 <_ZSt22__uninitialized_copy_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_S5_ET0_T_S8_S7_RSaIT1_E>
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	6819      	ldr	r1, [r3, #0]
 800d784:	68fa      	ldr	r2, [r7, #12]
 800d786:	4613      	mov	r3, r2
 800d788:	005b      	lsls	r3, r3, #1
 800d78a:	4413      	add	r3, r2
 800d78c:	00db      	lsls	r3, r3, #3
 800d78e:	18ca      	adds	r2, r1, r3
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	605a      	str	r2, [r3, #4]
      return *this;
 800d794:	687b      	ldr	r3, [r7, #4]
    }
 800d796:	4618      	mov	r0, r3
 800d798:	3714      	adds	r7, #20
 800d79a:	46bd      	mov	sp, r7
 800d79c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d79e:	bf00      	nop
 800d7a0:	aaaaaaab 	.word	0xaaaaaaab

0800d7a4 <_ZNSt6vectorIN4tama4TextESaIS1_EEC1Ev>:
      vector()
 800d7a4:	b580      	push	{r7, lr}
 800d7a6:	b082      	sub	sp, #8
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	f000 f90b 	bl	800d9ca <_ZNSt12_Vector_baseIN4tama4TextESaIS1_EEC1Ev>
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	3708      	adds	r7, #8
 800d7ba:	46bd      	mov	sp, r7
 800d7bc:	bd80      	pop	{r7, pc}

0800d7be <_ZNSt6vectorISt10shared_ptrIN4tama5StageEESaIS3_EEC1Ev>:
      vector()
 800d7be:	b580      	push	{r7, lr}
 800d7c0:	b082      	sub	sp, #8
 800d7c2:	af00      	add	r7, sp, #0
 800d7c4:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	f000 f90b 	bl	800d9e4 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama5StageEESaIS3_EEC1Ev>
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	3708      	adds	r7, #8
 800d7d4:	46bd      	mov	sp, r7
 800d7d6:	bd80      	pop	{r7, pc}

0800d7d8 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 800d7d8:	b480      	push	{r7}
 800d7da:	b083      	sub	sp, #12
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	6078      	str	r0, [r7, #4]
 800d7e0:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	6819      	ldr	r1, [r3, #0]
 800d7e6:	683a      	ldr	r2, [r7, #0]
 800d7e8:	4613      	mov	r3, r2
 800d7ea:	005b      	lsls	r3, r3, #1
 800d7ec:	4413      	add	r3, r2
 800d7ee:	00db      	lsls	r3, r3, #3
 800d7f0:	440b      	add	r3, r1
      }
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	370c      	adds	r7, #12
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fc:	4770      	bx	lr

0800d7fe <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800d7fe:	b480      	push	{r7}
 800d800:	b083      	sub	sp, #12
 800d802:	af00      	add	r7, sp, #0
 800d804:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	4618      	mov	r0, r3
 800d80a:	370c      	adds	r7, #12
 800d80c:	46bd      	mov	sp, r7
 800d80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d812:	4770      	bx	lr

0800d814 <_ZSt11make_sharedIN4tama4TextEJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS0_5Vec2dEEESt10shared_ptrIT_EDpOT0_>:
    make_shared(_Args&&... __args)
 800d814:	b590      	push	{r4, r7, lr}
 800d816:	b087      	sub	sp, #28
 800d818:	af00      	add	r7, sp, #0
 800d81a:	60f8      	str	r0, [r7, #12]
 800d81c:	60b9      	str	r1, [r7, #8]
 800d81e:	607a      	str	r2, [r7, #4]
				       std::forward<_Args>(__args)...);
 800d820:	f107 0314 	add.w	r3, r7, #20
 800d824:	4618      	mov	r0, r3
 800d826:	f000 f8ea 	bl	800d9fe <_ZNSaIN4tama4TextEEC1Ev>
 800d82a:	68b8      	ldr	r0, [r7, #8]
 800d82c:	f7ff ffe7 	bl	800d7fe <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 800d830:	4604      	mov	r4, r0
 800d832:	6878      	ldr	r0, [r7, #4]
 800d834:	f7f8 f911 	bl	8005a5a <_ZSt7forwardIN4tama5Vec2dEEOT_RNSt16remove_referenceIS2_E4typeE>
 800d838:	4603      	mov	r3, r0
 800d83a:	68f8      	ldr	r0, [r7, #12]
 800d83c:	f107 0114 	add.w	r1, r7, #20
 800d840:	4622      	mov	r2, r4
 800d842:	f000 f8e8 	bl	800da16 <_ZSt15allocate_sharedIN4tama4TextESaIS1_EJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS0_5Vec2dEEESt10shared_ptrIT_ERKT0_DpOT1_>
 800d846:	f107 0314 	add.w	r3, r7, #20
 800d84a:	4618      	mov	r0, r3
 800d84c:	f7fb fc15 	bl	800907a <_ZNSaIN4tama4TextEED1Ev>
    }
 800d850:	68f8      	ldr	r0, [r7, #12]
 800d852:	371c      	adds	r7, #28
 800d854:	46bd      	mov	sp, r7
 800d856:	bd90      	pop	{r4, r7, pc}

0800d858 <_ZNSt10shared_ptrIN4tama8DrawableEEC1INS0_4TextEvEERKS_IT_E>:
	shared_ptr(const shared_ptr<_Yp>& __r) noexcept
 800d858:	b580      	push	{r7, lr}
 800d85a:	b082      	sub	sp, #8
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
 800d860:	6039      	str	r1, [r7, #0]
        : __shared_ptr<_Tp>(__r) { }
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	683a      	ldr	r2, [r7, #0]
 800d866:	4611      	mov	r1, r2
 800d868:	4618      	mov	r0, r3
 800d86a:	f000 f8ee 	bl	800da4a <_ZNSt12__shared_ptrIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0EEC1INS0_4TextEvEERKS_IT_LS3_0EE>
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	4618      	mov	r0, r3
 800d872:	3708      	adds	r7, #8
 800d874:	46bd      	mov	sp, r7
 800d876:	bd80      	pop	{r7, pc}

0800d878 <_ZStneINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSaIT_ES9_>:
    _GLIBCXX_USE_NOEXCEPT
    { return false; }

  template<typename _Tp>
    inline bool
    operator!=(const allocator<_Tp>&, const allocator<_Tp>&)
 800d878:	b480      	push	{r7}
 800d87a:	b083      	sub	sp, #12
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	6078      	str	r0, [r7, #4]
 800d880:	6039      	str	r1, [r7, #0]
    _GLIBCXX_USE_NOEXCEPT
    { return false; }
 800d882:	2300      	movs	r3, #0
 800d884:	4618      	mov	r0, r3
 800d886:	370c      	adds	r7, #12
 800d888:	46bd      	mov	sp, r7
 800d88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d88e:	4770      	bx	lr

0800d890 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 800d890:	b580      	push	{r7, lr}
 800d892:	b082      	sub	sp, #8
 800d894:	af00      	add	r7, sp, #0
 800d896:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	4619      	mov	r1, r3
 800d89e:	6878      	ldr	r0, [r7, #4]
 800d8a0:	f000 f8e9 	bl	800da76 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endEPS5_>
 800d8a4:	bf00      	nop
 800d8a6:	3708      	adds	r7, #8
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	bd80      	pop	{r7, pc}

0800d8ac <_ZSt15__alloc_on_copyISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvRT_RKS7_>:
    inline void
    __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)
    { }

  template<typename _Alloc>
    inline void __alloc_on_copy(_Alloc& __one, const _Alloc& __two)
 800d8ac:	b580      	push	{r7, lr}
 800d8ae:	b084      	sub	sp, #16
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	6078      	str	r0, [r7, #4]
 800d8b4:	6039      	str	r1, [r7, #0]
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_copy_assignment __pocca;
      __do_alloc_on_copy(__one, __two, __pocca());
 800d8b6:	461a      	mov	r2, r3
 800d8b8:	6839      	ldr	r1, [r7, #0]
 800d8ba:	6878      	ldr	r0, [r7, #4]
 800d8bc:	f000 f8f3 	bl	800daa6 <_ZSt18__do_alloc_on_copyISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvRT_RKS7_St17integral_constantIbLb0EE>
    }
 800d8c0:	bf00      	nop
 800d8c2:	3710      	adds	r7, #16
 800d8c4:	46bd      	mov	sp, r7
 800d8c6:	bd80      	pop	{r7, pc}

0800d8c8 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 800d8c8:	b480      	push	{r7}
 800d8ca:	b083      	sub	sp, #12
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	689b      	ldr	r3, [r3, #8]
			 - this->_M_impl._M_start); }
 800d8d4:	461a      	mov	r2, r3
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	1ad3      	subs	r3, r2, r3
 800d8dc:	10db      	asrs	r3, r3, #3
 800d8de:	4a04      	ldr	r2, [pc, #16]	; (800d8f0 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8capacityEv+0x28>)
 800d8e0:	fb02 f303 	mul.w	r3, r2, r3
 800d8e4:	4618      	mov	r0, r3
 800d8e6:	370c      	adds	r7, #12
 800d8e8:	46bd      	mov	sp, r7
 800d8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ee:	4770      	bx	lr
 800d8f0:	aaaaaaab 	.word	0xaaaaaaab

0800d8f4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKS5_S7_EEEEPS5_jT_SF_>:
	_M_allocate_and_copy(size_type __n,
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	b086      	sub	sp, #24
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	60f8      	str	r0, [r7, #12]
 800d8fc:	60b9      	str	r1, [r7, #8]
 800d8fe:	607a      	str	r2, [r7, #4]
 800d900:	603b      	str	r3, [r7, #0]
	  pointer __result = this->_M_allocate(__n);
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	68b9      	ldr	r1, [r7, #8]
 800d906:	4618      	mov	r0, r3
 800d908:	f7fc fbf6 	bl	800a0f8 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj>
 800d90c:	6178      	str	r0, [r7, #20]
					  _M_get_Tp_allocator());
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	4618      	mov	r0, r3
 800d912:	f7fb fb99 	bl	8009048 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 800d916:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 800d918:	697a      	ldr	r2, [r7, #20]
 800d91a:	6839      	ldr	r1, [r7, #0]
 800d91c:	6878      	ldr	r0, [r7, #4]
 800d91e:	f7fc faee 	bl	8009efe <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS7_SaIS7_EEEEPS7_S7_ET0_T_SG_SF_RSaIT1_E>
	      return __result;
 800d922:	697b      	ldr	r3, [r7, #20]
	}
 800d924:	4618      	mov	r0, r3
 800d926:	3718      	adds	r7, #24
 800d928:	46bd      	mov	sp, r7
 800d92a:	bd80      	pop	{r7, pc}

0800d92c <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS7_SaIS7_EEEENS1_IPS7_SC_EEET0_T_SH_SG_>:
    copy(_II __first, _II __last, _OI __result)
 800d92c:	b590      	push	{r4, r7, lr}
 800d92e:	b085      	sub	sp, #20
 800d930:	af00      	add	r7, sp, #0
 800d932:	60f8      	str	r0, [r7, #12]
 800d934:	60b9      	str	r1, [r7, #8]
 800d936:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 800d938:	68f8      	ldr	r0, [r7, #12]
 800d93a:	f000 f8c0 	bl	800dabe <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS7_SaIS7_EEEEET_SE_>
 800d93e:	4604      	mov	r4, r0
 800d940:	68b8      	ldr	r0, [r7, #8]
 800d942:	f000 f8bc 	bl	800dabe <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS7_SaIS7_EEEEET_SE_>
 800d946:	4603      	mov	r3, r0
	       __result));
 800d948:	687a      	ldr	r2, [r7, #4]
 800d94a:	4619      	mov	r1, r3
 800d94c:	4620      	mov	r0, r4
 800d94e:	f000 f8c1 	bl	800dad4 <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS7_SaIS7_EEEENS1_IPS7_SC_EEET1_T0_SH_SG_>
 800d952:	4603      	mov	r3, r0
    }
 800d954:	4618      	mov	r0, r3
 800d956:	3714      	adds	r7, #20
 800d958:	46bd      	mov	sp, r7
 800d95a:	bd90      	pop	{r4, r7, pc}

0800d95c <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS7_SaIS7_EEEES7_EvT_SD_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800d95c:	b580      	push	{r7, lr}
 800d95e:	b084      	sub	sp, #16
 800d960:	af00      	add	r7, sp, #0
 800d962:	60f8      	str	r0, [r7, #12]
 800d964:	60b9      	str	r1, [r7, #8]
 800d966:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800d968:	68b9      	ldr	r1, [r7, #8]
 800d96a:	68f8      	ldr	r0, [r7, #12]
 800d96c:	f000 f8d8 	bl	800db20 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS7_SaIS7_EEEEEvT_SD_>
    }
 800d970:	bf00      	nop
 800d972:	3710      	adds	r7, #16
 800d974:	46bd      	mov	sp, r7
 800d976:	bd80      	pop	{r7, pc}

0800d978 <_ZSt4copyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ET0_T_S8_S7_>:
    copy(_II __first, _II __last, _OI __result)
 800d978:	b590      	push	{r4, r7, lr}
 800d97a:	b085      	sub	sp, #20
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	60f8      	str	r0, [r7, #12]
 800d980:	60b9      	str	r1, [r7, #8]
 800d982:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 800d984:	68f8      	ldr	r0, [r7, #12]
 800d986:	f000 f8d8 	bl	800db3a <_ZSt12__miter_baseIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S7_>
 800d98a:	4604      	mov	r4, r0
 800d98c:	68b8      	ldr	r0, [r7, #8]
 800d98e:	f000 f8d4 	bl	800db3a <_ZSt12__miter_baseIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S7_>
 800d992:	4603      	mov	r3, r0
	       __result));
 800d994:	687a      	ldr	r2, [r7, #4]
 800d996:	4619      	mov	r1, r3
 800d998:	4620      	mov	r0, r4
 800d99a:	f000 f8d9 	bl	800db50 <_ZSt14__copy_move_a2ILb0EPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ET1_T0_S8_S7_>
 800d99e:	4603      	mov	r3, r0
    }
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	3714      	adds	r7, #20
 800d9a4:	46bd      	mov	sp, r7
 800d9a6:	bd90      	pop	{r4, r7, pc}

0800d9a8 <_ZSt22__uninitialized_copy_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_S5_ET0_T_S8_S7_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b084      	sub	sp, #16
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	60f8      	str	r0, [r7, #12]
 800d9b0:	60b9      	str	r1, [r7, #8]
 800d9b2:	607a      	str	r2, [r7, #4]
 800d9b4:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800d9b6:	687a      	ldr	r2, [r7, #4]
 800d9b8:	68b9      	ldr	r1, [r7, #8]
 800d9ba:	68f8      	ldr	r0, [r7, #12]
 800d9bc:	f000 f8e4 	bl	800db88 <_ZSt18uninitialized_copyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ET0_T_S8_S7_>
 800d9c0:	4603      	mov	r3, r0
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	3710      	adds	r7, #16
 800d9c6:	46bd      	mov	sp, r7
 800d9c8:	bd80      	pop	{r7, pc}

0800d9ca <_ZNSt12_Vector_baseIN4tama4TextESaIS1_EEC1Ev>:
      _Vector_base()
 800d9ca:	b580      	push	{r7, lr}
 800d9cc:	b082      	sub	sp, #8
 800d9ce:	af00      	add	r7, sp, #0
 800d9d0:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	f000 f8e9 	bl	800dbac <_ZNSt12_Vector_baseIN4tama4TextESaIS1_EE12_Vector_implC1Ev>
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	4618      	mov	r0, r3
 800d9de:	3708      	adds	r7, #8
 800d9e0:	46bd      	mov	sp, r7
 800d9e2:	bd80      	pop	{r7, pc}

0800d9e4 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama5StageEESaIS3_EEC1Ev>:
      _Vector_base()
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	b082      	sub	sp, #8
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	f000 f8f1 	bl	800dbd6 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama5StageEESaIS3_EE12_Vector_implC1Ev>
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	3708      	adds	r7, #8
 800d9fa:	46bd      	mov	sp, r7
 800d9fc:	bd80      	pop	{r7, pc}

0800d9fe <_ZNSaIN4tama4TextEEC1Ev>:
      allocator() throw() { }
 800d9fe:	b580      	push	{r7, lr}
 800da00:	b082      	sub	sp, #8
 800da02:	af00      	add	r7, sp, #0
 800da04:	6078      	str	r0, [r7, #4]
 800da06:	6878      	ldr	r0, [r7, #4]
 800da08:	f000 f8fa 	bl	800dc00 <_ZN9__gnu_cxx13new_allocatorIN4tama4TextEEC1Ev>
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	4618      	mov	r0, r3
 800da10:	3708      	adds	r7, #8
 800da12:	46bd      	mov	sp, r7
 800da14:	bd80      	pop	{r7, pc}

0800da16 <_ZSt15allocate_sharedIN4tama4TextESaIS1_EJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS0_5Vec2dEEESt10shared_ptrIT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 800da16:	b5b0      	push	{r4, r5, r7, lr}
 800da18:	b088      	sub	sp, #32
 800da1a:	af02      	add	r7, sp, #8
 800da1c:	60f8      	str	r0, [r7, #12]
 800da1e:	60b9      	str	r1, [r7, #8]
 800da20:	607a      	str	r2, [r7, #4]
 800da22:	603b      	str	r3, [r7, #0]
			     std::forward<_Args>(__args)...);
 800da24:	6878      	ldr	r0, [r7, #4]
 800da26:	f7ff feea 	bl	800d7fe <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 800da2a:	4604      	mov	r4, r0
 800da2c:	6838      	ldr	r0, [r7, #0]
 800da2e:	f7f8 f814 	bl	8005a5a <_ZSt7forwardIN4tama5Vec2dEEOT_RNSt16remove_referenceIS2_E4typeE>
 800da32:	4603      	mov	r3, r0
 800da34:	9300      	str	r3, [sp, #0]
 800da36:	4623      	mov	r3, r4
 800da38:	68ba      	ldr	r2, [r7, #8]
 800da3a:	4629      	mov	r1, r5
 800da3c:	68f8      	ldr	r0, [r7, #12]
 800da3e:	f000 f8ea 	bl	800dc16 <_ZNSt10shared_ptrIN4tama4TextEEC1ISaIS1_EJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS0_5Vec2dEEEESt19_Sp_make_shared_tagRKT_DpOT0_>
    }
 800da42:	68f8      	ldr	r0, [r7, #12]
 800da44:	3718      	adds	r7, #24
 800da46:	46bd      	mov	sp, r7
 800da48:	bdb0      	pop	{r4, r5, r7, pc}

0800da4a <_ZNSt12__shared_ptrIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0EEC1INS0_4TextEvEERKS_IT_LS3_0EE>:
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
 800da4a:	b580      	push	{r7, lr}
 800da4c:	b082      	sub	sp, #8
 800da4e:	af00      	add	r7, sp, #0
 800da50:	6078      	str	r0, [r7, #4]
 800da52:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
 800da54:	683b      	ldr	r3, [r7, #0]
 800da56:	681a      	ldr	r2, [r3, #0]
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	601a      	str	r2, [r3, #0]
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	1d1a      	adds	r2, r3, #4
 800da60:	683b      	ldr	r3, [r7, #0]
 800da62:	3304      	adds	r3, #4
 800da64:	4619      	mov	r1, r3
 800da66:	4610      	mov	r0, r2
 800da68:	f7f5 fb3c 	bl	80030e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	{ }
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	4618      	mov	r0, r3
 800da70:	3708      	adds	r7, #8
 800da72:	46bd      	mov	sp, r7
 800da74:	bd80      	pop	{r7, pc}

0800da76 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endEPS5_>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 800da76:	b590      	push	{r4, r7, lr}
 800da78:	b083      	sub	sp, #12
 800da7a:	af00      	add	r7, sp, #0
 800da7c:	6078      	str	r0, [r7, #4]
 800da7e:	6039      	str	r1, [r7, #0]
      {
	std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	685c      	ldr	r4, [r3, #4]
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	4618      	mov	r0, r3
 800da88:	f7fb fade 	bl	8009048 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 800da8c:	4603      	mov	r3, r0
 800da8e:	461a      	mov	r2, r3
 800da90:	4621      	mov	r1, r4
 800da92:	6838      	ldr	r0, [r7, #0]
 800da94:	f7fb fae3 	bl	800905e <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
	this->_M_impl._M_finish = __pos;
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	683a      	ldr	r2, [r7, #0]
 800da9c:	605a      	str	r2, [r3, #4]
      }
 800da9e:	bf00      	nop
 800daa0:	370c      	adds	r7, #12
 800daa2:	46bd      	mov	sp, r7
 800daa4:	bd90      	pop	{r4, r7, pc}

0800daa6 <_ZSt18__do_alloc_on_copyISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvRT_RKS7_St17integral_constantIbLb0EE>:
    __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)
 800daa6:	b480      	push	{r7}
 800daa8:	b085      	sub	sp, #20
 800daaa:	af00      	add	r7, sp, #0
 800daac:	60f8      	str	r0, [r7, #12]
 800daae:	60b9      	str	r1, [r7, #8]
 800dab0:	713a      	strb	r2, [r7, #4]
    { }
 800dab2:	bf00      	nop
 800dab4:	3714      	adds	r7, #20
 800dab6:	46bd      	mov	sp, r7
 800dab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dabc:	4770      	bx	lr

0800dabe <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS7_SaIS7_EEEEET_SE_>:
    __miter_base(_Iterator __it)
 800dabe:	b480      	push	{r7}
 800dac0:	b083      	sub	sp, #12
 800dac2:	af00      	add	r7, sp, #0
 800dac4:	6078      	str	r0, [r7, #4]
    { return __it; }
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	4618      	mov	r0, r3
 800daca:	370c      	adds	r7, #12
 800dacc:	46bd      	mov	sp, r7
 800dace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad2:	4770      	bx	lr

0800dad4 <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS7_SaIS7_EEEENS1_IPS7_SC_EEET1_T0_SH_SG_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800dad4:	b5b0      	push	{r4, r5, r7, lr}
 800dad6:	b086      	sub	sp, #24
 800dad8:	af00      	add	r7, sp, #0
 800dada:	60f8      	str	r0, [r7, #12]
 800dadc:	60b9      	str	r1, [r7, #8]
 800dade:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 800dae0:	68f8      	ldr	r0, [r7, #12]
 800dae2:	f000 f8b4 	bl	800dc4e <_ZSt12__niter_baseIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS5_SaIS5_EEET_N9__gnu_cxx17__normal_iteratorISB_T0_EE>
 800dae6:	4604      	mov	r4, r0
 800dae8:	68b8      	ldr	r0, [r7, #8]
 800daea:	f000 f8b0 	bl	800dc4e <_ZSt12__niter_baseIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS5_SaIS5_EEET_N9__gnu_cxx17__normal_iteratorISB_T0_EE>
 800daee:	4605      	mov	r5, r0
 800daf0:	6878      	ldr	r0, [r7, #4]
 800daf2:	f000 f8ba 	bl	800dc6a <_ZSt12__niter_baseIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS5_SaIS5_EEET_N9__gnu_cxx17__normal_iteratorISA_T0_EE>
 800daf6:	4603      	mov	r3, r0
 800daf8:	461a      	mov	r2, r3
 800dafa:	4629      	mov	r1, r5
 800dafc:	4620      	mov	r0, r4
 800dafe:	f000 f8c2 	bl	800dc86 <_ZSt13__copy_move_aILb0EPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPS5_ET1_T0_SA_S9_>
 800db02:	4603      	mov	r3, r0
 800db04:	617b      	str	r3, [r7, #20]
					     std::__niter_base(__result)));
 800db06:	f107 0214 	add.w	r2, r7, #20
 800db0a:	f107 0310 	add.w	r3, r7, #16
 800db0e:	4611      	mov	r1, r2
 800db10:	4618      	mov	r0, r3
 800db12:	f7fc fa6d 	bl	8009ff0 <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS7_>
 800db16:	693b      	ldr	r3, [r7, #16]
    }
 800db18:	4618      	mov	r0, r3
 800db1a:	3718      	adds	r7, #24
 800db1c:	46bd      	mov	sp, r7
 800db1e:	bdb0      	pop	{r4, r5, r7, pc}

0800db20 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS7_SaIS7_EEEEEvT_SD_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800db20:	b580      	push	{r7, lr}
 800db22:	b082      	sub	sp, #8
 800db24:	af00      	add	r7, sp, #0
 800db26:	6078      	str	r0, [r7, #4]
 800db28:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 800db2a:	6839      	ldr	r1, [r7, #0]
 800db2c:	6878      	ldr	r0, [r7, #4]
 800db2e:	f000 f8bc 	bl	800dcaa <_ZNSt12_Destroy_auxILb0EE9__destroyIN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS9_SaIS9_EEEEEEvT_SF_>
    }
 800db32:	bf00      	nop
 800db34:	3708      	adds	r7, #8
 800db36:	46bd      	mov	sp, r7
 800db38:	bd80      	pop	{r7, pc}

0800db3a <_ZSt12__miter_baseIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S7_>:
    __miter_base(_Iterator __it)
 800db3a:	b480      	push	{r7}
 800db3c:	b083      	sub	sp, #12
 800db3e:	af00      	add	r7, sp, #0
 800db40:	6078      	str	r0, [r7, #4]
    { return __it; }
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	4618      	mov	r0, r3
 800db46:	370c      	adds	r7, #12
 800db48:	46bd      	mov	sp, r7
 800db4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4e:	4770      	bx	lr

0800db50 <_ZSt14__copy_move_a2ILb0EPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ET1_T0_S8_S7_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800db50:	b5b0      	push	{r4, r5, r7, lr}
 800db52:	b084      	sub	sp, #16
 800db54:	af00      	add	r7, sp, #0
 800db56:	60f8      	str	r0, [r7, #12]
 800db58:	60b9      	str	r1, [r7, #8]
 800db5a:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 800db5c:	68f8      	ldr	r0, [r7, #12]
 800db5e:	f000 f8c7 	bl	800dcf0 <_ZSt12__niter_baseIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S7_>
 800db62:	4604      	mov	r4, r0
 800db64:	68b8      	ldr	r0, [r7, #8]
 800db66:	f000 f8c3 	bl	800dcf0 <_ZSt12__niter_baseIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S7_>
 800db6a:	4605      	mov	r5, r0
 800db6c:	6878      	ldr	r0, [r7, #4]
 800db6e:	f000 f8bf 	bl	800dcf0 <_ZSt12__niter_baseIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S7_>
 800db72:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 800db74:	461a      	mov	r2, r3
 800db76:	4629      	mov	r1, r5
 800db78:	4620      	mov	r0, r4
 800db7a:	f000 f8c4 	bl	800dd06 <_ZSt13__copy_move_aILb0EPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ET1_T0_S8_S7_>
 800db7e:	4603      	mov	r3, r0
    }
 800db80:	4618      	mov	r0, r3
 800db82:	3710      	adds	r7, #16
 800db84:	46bd      	mov	sp, r7
 800db86:	bdb0      	pop	{r4, r5, r7, pc}

0800db88 <_ZSt18uninitialized_copyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ET0_T_S8_S7_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800db88:	b580      	push	{r7, lr}
 800db8a:	b086      	sub	sp, #24
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	60f8      	str	r0, [r7, #12]
 800db90:	60b9      	str	r1, [r7, #8]
 800db92:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800db94:	2301      	movs	r3, #1
 800db96:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800db98:	687a      	ldr	r2, [r7, #4]
 800db9a:	68b9      	ldr	r1, [r7, #8]
 800db9c:	68f8      	ldr	r0, [r7, #12]
 800db9e:	f000 f8c4 	bl	800dd2a <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_EET0_T_SA_S9_>
 800dba2:	4603      	mov	r3, r0
    }
 800dba4:	4618      	mov	r0, r3
 800dba6:	3718      	adds	r7, #24
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	bd80      	pop	{r7, pc}

0800dbac <_ZNSt12_Vector_baseIN4tama4TextESaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl()
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b082      	sub	sp, #8
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 800dbb4:	6878      	ldr	r0, [r7, #4]
 800dbb6:	f7ff ff22 	bl	800d9fe <_ZNSaIN4tama4TextEEC1Ev>
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	2200      	movs	r2, #0
 800dbbe:	601a      	str	r2, [r3, #0]
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	2200      	movs	r2, #0
 800dbc4:	605a      	str	r2, [r3, #4]
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	2200      	movs	r2, #0
 800dbca:	609a      	str	r2, [r3, #8]
	{ }
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	4618      	mov	r0, r3
 800dbd0:	3708      	adds	r7, #8
 800dbd2:	46bd      	mov	sp, r7
 800dbd4:	bd80      	pop	{r7, pc}

0800dbd6 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama5StageEESaIS3_EE12_Vector_implC1Ev>:
	_Vector_impl()
 800dbd6:	b580      	push	{r7, lr}
 800dbd8:	b082      	sub	sp, #8
 800dbda:	af00      	add	r7, sp, #0
 800dbdc:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 800dbde:	6878      	ldr	r0, [r7, #4]
 800dbe0:	f7f5 fdf9 	bl	80037d6 <_ZNSaISt10shared_ptrIN4tama5StageEEEC1Ev>
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	2200      	movs	r2, #0
 800dbe8:	601a      	str	r2, [r3, #0]
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	2200      	movs	r2, #0
 800dbee:	605a      	str	r2, [r3, #4]
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	2200      	movs	r2, #0
 800dbf4:	609a      	str	r2, [r3, #8]
	{ }
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	3708      	adds	r7, #8
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	bd80      	pop	{r7, pc}

0800dc00 <_ZN9__gnu_cxx13new_allocatorIN4tama4TextEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800dc00:	b480      	push	{r7}
 800dc02:	b083      	sub	sp, #12
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	370c      	adds	r7, #12
 800dc0e:	46bd      	mov	sp, r7
 800dc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc14:	4770      	bx	lr

0800dc16 <_ZNSt10shared_ptrIN4tama4TextEEC1ISaIS1_EJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS0_5Vec2dEEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 800dc16:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc18:	b087      	sub	sp, #28
 800dc1a:	af02      	add	r7, sp, #8
 800dc1c:	60f8      	str	r0, [r7, #12]
 800dc1e:	7239      	strb	r1, [r7, #8]
 800dc20:	607a      	str	r2, [r7, #4]
 800dc22:	603b      	str	r3, [r7, #0]
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
 800dc24:	68fc      	ldr	r4, [r7, #12]
 800dc26:	6838      	ldr	r0, [r7, #0]
 800dc28:	f7ff fde9 	bl	800d7fe <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 800dc2c:	4605      	mov	r5, r0
 800dc2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dc30:	f7f7 ff13 	bl	8005a5a <_ZSt7forwardIN4tama5Vec2dEEOT_RNSt16remove_referenceIS2_E4typeE>
 800dc34:	4603      	mov	r3, r0
 800dc36:	9300      	str	r3, [sp, #0]
 800dc38:	462b      	mov	r3, r5
 800dc3a:	687a      	ldr	r2, [r7, #4]
 800dc3c:	4631      	mov	r1, r6
 800dc3e:	4620      	mov	r0, r4
 800dc40:	f000 f8b0 	bl	800dda4 <_ZNSt12__shared_ptrIN4tama4TextELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS0_5Vec2dEEEESt19_Sp_make_shared_tagRKT_DpOT0_>
	{ }
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	4618      	mov	r0, r3
 800dc48:	3714      	adds	r7, #20
 800dc4a:	46bd      	mov	sp, r7
 800dc4c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dc4e <_ZSt12__niter_baseIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS5_SaIS5_EEET_N9__gnu_cxx17__normal_iteratorISB_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800dc4e:	b580      	push	{r7, lr}
 800dc50:	b082      	sub	sp, #8
 800dc52:	af00      	add	r7, sp, #0
 800dc54:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 800dc56:	1d3b      	adds	r3, r7, #4
 800dc58:	4618      	mov	r0, r3
 800dc5a:	f7fc ff56 	bl	800ab0a <_ZNK9__gnu_cxx17__normal_iteratorIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 800dc5e:	4603      	mov	r3, r0
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	4618      	mov	r0, r3
 800dc64:	3708      	adds	r7, #8
 800dc66:	46bd      	mov	sp, r7
 800dc68:	bd80      	pop	{r7, pc}

0800dc6a <_ZSt12__niter_baseIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS5_SaIS5_EEET_N9__gnu_cxx17__normal_iteratorISA_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800dc6a:	b580      	push	{r7, lr}
 800dc6c:	b082      	sub	sp, #8
 800dc6e:	af00      	add	r7, sp, #0
 800dc70:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 800dc72:	1d3b      	adds	r3, r7, #4
 800dc74:	4618      	mov	r0, r3
 800dc76:	f7fc fa53 	bl	800a120 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 800dc7a:	4603      	mov	r3, r0
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	4618      	mov	r0, r3
 800dc80:	3708      	adds	r7, #8
 800dc82:	46bd      	mov	sp, r7
 800dc84:	bd80      	pop	{r7, pc}

0800dc86 <_ZSt13__copy_move_aILb0EPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPS5_ET1_T0_SA_S9_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800dc86:	b580      	push	{r7, lr}
 800dc88:	b086      	sub	sp, #24
 800dc8a:	af00      	add	r7, sp, #0
 800dc8c:	60f8      	str	r0, [r7, #12]
 800dc8e:	60b9      	str	r1, [r7, #8]
 800dc90:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 800dc92:	2300      	movs	r3, #0
 800dc94:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 800dc96:	687a      	ldr	r2, [r7, #4]
 800dc98:	68b9      	ldr	r1, [r7, #8]
 800dc9a:	68f8      	ldr	r0, [r7, #12]
 800dc9c:	f000 f902 	bl	800dea4 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPS8_EET0_T_SD_SC_>
 800dca0:	4603      	mov	r3, r0
    }
 800dca2:	4618      	mov	r0, r3
 800dca4:	3718      	adds	r7, #24
 800dca6:	46bd      	mov	sp, r7
 800dca8:	bd80      	pop	{r7, pc}

0800dcaa <_ZNSt12_Destroy_auxILb0EE9__destroyIN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS9_SaIS9_EEEEEEvT_SF_>:
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 800dcaa:	b580      	push	{r7, lr}
 800dcac:	b082      	sub	sp, #8
 800dcae:	af00      	add	r7, sp, #0
 800dcb0:	6078      	str	r0, [r7, #4]
 800dcb2:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800dcb4:	463a      	mov	r2, r7
 800dcb6:	1d3b      	adds	r3, r7, #4
 800dcb8:	4611      	mov	r1, r2
 800dcba:	4618      	mov	r0, r3
 800dcbc:	f000 f918 	bl	800def0 <_ZN9__gnu_cxxneIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEEbRKNS_17__normal_iteratorIT_T0_EESG_>
 800dcc0:	4603      	mov	r3, r0
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d010      	beq.n	800dce8 <_ZNSt12_Destroy_auxILb0EE9__destroyIN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS9_SaIS9_EEEEEEvT_SF_+0x3e>
	    std::_Destroy(std::__addressof(*__first));
 800dcc6:	1d3b      	adds	r3, r7, #4
 800dcc8:	4618      	mov	r0, r3
 800dcca:	f000 f93a 	bl	800df42 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEdeEv>
 800dcce:	4603      	mov	r3, r0
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	f7fb fadb 	bl	800928c <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 800dcd6:	4603      	mov	r3, r0
 800dcd8:	4618      	mov	r0, r3
 800dcda:	f7fb fb2a 	bl	8009332 <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>
	  for (; __first != __last; ++__first)
 800dcde:	1d3b      	adds	r3, r7, #4
 800dce0:	4618      	mov	r0, r3
 800dce2:	f000 f91d 	bl	800df20 <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEppEv>
 800dce6:	e7e5      	b.n	800dcb4 <_ZNSt12_Destroy_auxILb0EE9__destroyIN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS9_SaIS9_EEEEEEvT_SF_+0xa>
	}
 800dce8:	bf00      	nop
 800dcea:	3708      	adds	r7, #8
 800dcec:	46bd      	mov	sp, r7
 800dcee:	bd80      	pop	{r7, pc}

0800dcf0 <_ZSt12__niter_baseIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S7_>:
    __niter_base(_Iterator __it)
 800dcf0:	b480      	push	{r7}
 800dcf2:	b083      	sub	sp, #12
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	6078      	str	r0, [r7, #4]
    { return __it; }
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	370c      	adds	r7, #12
 800dcfe:	46bd      	mov	sp, r7
 800dd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd04:	4770      	bx	lr

0800dd06 <_ZSt13__copy_move_aILb0EPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ET1_T0_S8_S7_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800dd06:	b580      	push	{r7, lr}
 800dd08:	b086      	sub	sp, #24
 800dd0a:	af00      	add	r7, sp, #0
 800dd0c:	60f8      	str	r0, [r7, #12]
 800dd0e:	60b9      	str	r1, [r7, #8]
 800dd10:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 800dd12:	2300      	movs	r3, #0
 800dd14:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 800dd16:	687a      	ldr	r2, [r7, #4]
 800dd18:	68b9      	ldr	r1, [r7, #8]
 800dd1a:	68f8      	ldr	r0, [r7, #12]
 800dd1c:	f000 f91e 	bl	800df5c <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_EET0_T_SB_SA_>
 800dd20:	4603      	mov	r3, r0
    }
 800dd22:	4618      	mov	r0, r3
 800dd24:	3718      	adds	r7, #24
 800dd26:	46bd      	mov	sp, r7
 800dd28:	bd80      	pop	{r7, pc}

0800dd2a <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_EET0_T_SA_S9_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800dd2a:	b580      	push	{r7, lr}
 800dd2c:	b086      	sub	sp, #24
 800dd2e:	af00      	add	r7, sp, #0
 800dd30:	60f8      	str	r0, [r7, #12]
 800dd32:	60b9      	str	r1, [r7, #8]
 800dd34:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 800dd3a:	68fa      	ldr	r2, [r7, #12]
 800dd3c:	68bb      	ldr	r3, [r7, #8]
 800dd3e:	429a      	cmp	r2, r3
 800dd40:	d00e      	beq.n	800dd60 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_EET0_T_SA_S9_+0x36>
		std::_Construct(std::__addressof(*__cur), *__first);
 800dd42:	6978      	ldr	r0, [r7, #20]
 800dd44:	f7fb faa2 	bl	800928c <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 800dd48:	4603      	mov	r3, r0
 800dd4a:	68f9      	ldr	r1, [r7, #12]
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	f000 f92b 	bl	800dfa8 <_ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJRS5_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	3318      	adds	r3, #24
 800dd56:	60fb      	str	r3, [r7, #12]
 800dd58:	697b      	ldr	r3, [r7, #20]
 800dd5a:	3318      	adds	r3, #24
 800dd5c:	617b      	str	r3, [r7, #20]
 800dd5e:	e7ec      	b.n	800dd3a <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_EET0_T_SA_S9_+0x10>
	      return __cur;
 800dd60:	697b      	ldr	r3, [r7, #20]
	}
 800dd62:	4618      	mov	r0, r3
 800dd64:	3718      	adds	r7, #24
 800dd66:	46bd      	mov	sp, r7
 800dd68:	bd80      	pop	{r7, pc}

0800dd6a <_ZNSt12__shared_ptrIN4tama4TextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>:
        struct _Deleter
 800dd6a:	b580      	push	{r7, lr}
 800dd6c:	b082      	sub	sp, #8
 800dd6e:	af00      	add	r7, sp, #0
 800dd70:	6078      	str	r0, [r7, #4]
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	4618      	mov	r0, r3
 800dd76:	f7fb f980 	bl	800907a <_ZNSaIN4tama4TextEED1Ev>
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	3708      	adds	r7, #8
 800dd80:	46bd      	mov	sp, r7
 800dd82:	bd80      	pop	{r7, pc}

0800dd84 <_ZNSt12__shared_ptrIN4tama4TextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>:
 800dd84:	b580      	push	{r7, lr}
 800dd86:	b082      	sub	sp, #8
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	6078      	str	r0, [r7, #4]
 800dd8c:	6039      	str	r1, [r7, #0]
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	683a      	ldr	r2, [r7, #0]
 800dd92:	4611      	mov	r1, r2
 800dd94:	4618      	mov	r0, r3
 800dd96:	f000 f920 	bl	800dfda <_ZNSaIN4tama4TextEEC1ERKS1_>
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	3708      	adds	r7, #8
 800dda0:	46bd      	mov	sp, r7
 800dda2:	bd80      	pop	{r7, pc}

0800dda4 <_ZNSt12__shared_ptrIN4tama4TextELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS0_5Vec2dEEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 800dda4:	b590      	push	{r4, r7, lr}
 800dda6:	b08d      	sub	sp, #52	; 0x34
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	60f8      	str	r0, [r7, #12]
 800ddac:	7239      	strb	r1, [r7, #8]
 800ddae:	607a      	str	r2, [r7, #4]
 800ddb0:	603b      	str	r3, [r7, #0]
	: _M_ptr(), _M_refcount()
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	2200      	movs	r2, #0
 800ddb6:	601a      	str	r2, [r3, #0]
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	3304      	adds	r3, #4
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	f7f6 f8d6 	bl	8003f6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 800ddc2:	f107 0320 	add.w	r3, r7, #32
 800ddc6:	6879      	ldr	r1, [r7, #4]
 800ddc8:	4618      	mov	r0, r3
 800ddca:	f000 f906 	bl	800dfda <_ZNSaIN4tama4TextEEC1ERKS1_>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 800ddce:	f107 0318 	add.w	r3, r7, #24
 800ddd2:	f107 0220 	add.w	r2, r7, #32
 800ddd6:	4611      	mov	r1, r2
 800ddd8:	4618      	mov	r0, r3
 800ddda:	f000 f90c 	bl	800dff6 <_ZSt18__allocate_guardedISaIN4tama4TextEEESt15__allocated_ptrIT_ERS4_>
	  auto __ptr = __guard.get();
 800ddde:	f107 0318 	add.w	r3, r7, #24
 800dde2:	4618      	mov	r0, r3
 800dde4:	f000 f92f 	bl	800e046 <_ZNSt15__allocated_ptrISaIN4tama4TextEEE3getEv>
 800dde8:	62f8      	str	r0, [r7, #44]	; 0x2c
	  __traits::construct(__del._M_alloc, __ptr,
 800ddea:	6838      	ldr	r0, [r7, #0]
 800ddec:	f7ff fd07 	bl	800d7fe <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 800ddf0:	4604      	mov	r4, r0
 800ddf2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800ddf4:	f7f7 fe31 	bl	8005a5a <_ZSt7forwardIN4tama5Vec2dEEOT_RNSt16remove_referenceIS2_E4typeE>
 800ddf8:	4603      	mov	r3, r0
 800ddfa:	f107 0020 	add.w	r0, r7, #32
 800ddfe:	4622      	mov	r2, r4
 800de00:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800de02:	f000 f92e 	bl	800e062 <_ZNSt16allocator_traitsISaIN4tama4TextEEE9constructIS1_JRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS0_5Vec2dEEEEvRS2_PT_DpOT0_>
	  __guard = nullptr;
 800de06:	f107 0318 	add.w	r3, r7, #24
 800de0a:	2100      	movs	r1, #0
 800de0c:	4618      	mov	r0, r3
 800de0e:	f000 f940 	bl	800e092 <_ZNSt15__allocated_ptrISaIN4tama4TextEEEaSEDn>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 800de12:	f107 0220 	add.w	r2, r7, #32
 800de16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800de1a:	4611      	mov	r1, r2
 800de1c:	4618      	mov	r0, r3
 800de1e:	f7ff ffb1 	bl	800dd84 <_ZNSt12__shared_ptrIN4tama4TextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>
 800de22:	f107 0220 	add.w	r2, r7, #32
 800de26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800de2a:	4611      	mov	r1, r2
 800de2c:	4618      	mov	r0, r3
 800de2e:	f000 f8d4 	bl	800dfda <_ZNSaIN4tama4TextEEC1ERKS1_>
 800de32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800de36:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800de3a:	f107 0014 	add.w	r0, r7, #20
 800de3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800de40:	f000 f95c 	bl	800e0fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama4TextENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
 800de44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800de48:	4618      	mov	r0, r3
 800de4a:	f7fb f916 	bl	800907a <_ZNSaIN4tama4TextEED1Ev>
 800de4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800de52:	4618      	mov	r0, r3
 800de54:	f7ff ff89 	bl	800dd6a <_ZNSt12__shared_ptrIN4tama4TextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	  _M_refcount._M_swap(__count);
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	3304      	adds	r3, #4
 800de5c:	f107 0214 	add.w	r2, r7, #20
 800de60:	4611      	mov	r1, r2
 800de62:	4618      	mov	r0, r3
 800de64:	f7f6 f98c 	bl	8004180 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  _M_ptr = __ptr;
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800de6c:	601a      	str	r2, [r3, #0]
	  _M_enable_shared_from_this_with(_M_ptr);
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	4619      	mov	r1, r3
 800de74:	68f8      	ldr	r0, [r7, #12]
 800de76:	f7f7 fc03 	bl	8005680 <_ZNSt12__shared_ptrIN4tama4TextELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 800de7a:	f107 0314 	add.w	r3, r7, #20
 800de7e:	4618      	mov	r0, r3
 800de80:	f7f5 f947 	bl	8003112 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 800de84:	f107 0318 	add.w	r3, r7, #24
 800de88:	4618      	mov	r0, r3
 800de8a:	f000 f8c7 	bl	800e01c <_ZNSt15__allocated_ptrISaIN4tama4TextEEED1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 800de8e:	f107 0320 	add.w	r3, r7, #32
 800de92:	4618      	mov	r0, r3
 800de94:	f7ff ff69 	bl	800dd6a <_ZNSt12__shared_ptrIN4tama4TextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	}
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	4618      	mov	r0, r3
 800de9c:	3734      	adds	r7, #52	; 0x34
 800de9e:	46bd      	mov	sp, r7
 800dea0:	bd90      	pop	{r4, r7, pc}
	...

0800dea4 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPS8_EET0_T_SD_SC_>:
        __copy_m(_II __first, _II __last, _OI __result)
 800dea4:	b580      	push	{r7, lr}
 800dea6:	b086      	sub	sp, #24
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	60f8      	str	r0, [r7, #12]
 800deac:	60b9      	str	r1, [r7, #8]
 800deae:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800deb0:	68ba      	ldr	r2, [r7, #8]
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	1ad3      	subs	r3, r2, r3
 800deb6:	10db      	asrs	r3, r3, #3
 800deb8:	4a0c      	ldr	r2, [pc, #48]	; (800deec <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPS8_EET0_T_SD_SC_+0x48>)
 800deba:	fb02 f303 	mul.w	r3, r2, r3
 800debe:	617b      	str	r3, [r7, #20]
 800dec0:	697b      	ldr	r3, [r7, #20]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	dd0d      	ble.n	800dee2 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPS8_EET0_T_SD_SC_+0x3e>
	      *__result = *__first;
 800dec6:	68f9      	ldr	r1, [r7, #12]
 800dec8:	6878      	ldr	r0, [r7, #4]
 800deca:	f011 fde2 	bl	801fa92 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
	      ++__first;
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	3318      	adds	r3, #24
 800ded2:	60fb      	str	r3, [r7, #12]
	      ++__result;
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	3318      	adds	r3, #24
 800ded8:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800deda:	697b      	ldr	r3, [r7, #20]
 800dedc:	3b01      	subs	r3, #1
 800dede:	617b      	str	r3, [r7, #20]
 800dee0:	e7ee      	b.n	800dec0 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPS8_EET0_T_SD_SC_+0x1c>
	  return __result;
 800dee2:	687b      	ldr	r3, [r7, #4]
	}
 800dee4:	4618      	mov	r0, r3
 800dee6:	3718      	adds	r7, #24
 800dee8:	46bd      	mov	sp, r7
 800deea:	bd80      	pop	{r7, pc}
 800deec:	aaaaaaab 	.word	0xaaaaaaab

0800def0 <_ZN9__gnu_cxxneIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEEbRKNS_17__normal_iteratorIT_T0_EESG_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 800def0:	b590      	push	{r4, r7, lr}
 800def2:	b083      	sub	sp, #12
 800def4:	af00      	add	r7, sp, #0
 800def6:	6078      	str	r0, [r7, #4]
 800def8:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 800defa:	6878      	ldr	r0, [r7, #4]
 800defc:	f7fc f910 	bl	800a120 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 800df00:	4603      	mov	r3, r0
 800df02:	681c      	ldr	r4, [r3, #0]
 800df04:	6838      	ldr	r0, [r7, #0]
 800df06:	f7fc f90b 	bl	800a120 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 800df0a:	4603      	mov	r3, r0
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	429c      	cmp	r4, r3
 800df10:	bf14      	ite	ne
 800df12:	2301      	movne	r3, #1
 800df14:	2300      	moveq	r3, #0
 800df16:	b2db      	uxtb	r3, r3
 800df18:	4618      	mov	r0, r3
 800df1a:	370c      	adds	r7, #12
 800df1c:	46bd      	mov	sp, r7
 800df1e:	bd90      	pop	{r4, r7, pc}

0800df20 <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800df20:	b480      	push	{r7}
 800df22:	b083      	sub	sp, #12
 800df24:	af00      	add	r7, sp, #0
 800df26:	6078      	str	r0, [r7, #4]
	++_M_current;
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	f103 0218 	add.w	r2, r3, #24
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	601a      	str	r2, [r3, #0]
	return *this;
 800df34:	687b      	ldr	r3, [r7, #4]
      }
 800df36:	4618      	mov	r0, r3
 800df38:	370c      	adds	r7, #12
 800df3a:	46bd      	mov	sp, r7
 800df3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df40:	4770      	bx	lr

0800df42 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800df42:	b480      	push	{r7}
 800df44:	b083      	sub	sp, #12
 800df46:	af00      	add	r7, sp, #0
 800df48:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	4618      	mov	r0, r3
 800df50:	370c      	adds	r7, #12
 800df52:	46bd      	mov	sp, r7
 800df54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df58:	4770      	bx	lr
	...

0800df5c <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_EET0_T_SB_SA_>:
        __copy_m(_II __first, _II __last, _OI __result)
 800df5c:	b580      	push	{r7, lr}
 800df5e:	b086      	sub	sp, #24
 800df60:	af00      	add	r7, sp, #0
 800df62:	60f8      	str	r0, [r7, #12]
 800df64:	60b9      	str	r1, [r7, #8]
 800df66:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800df68:	68ba      	ldr	r2, [r7, #8]
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	1ad3      	subs	r3, r2, r3
 800df6e:	10db      	asrs	r3, r3, #3
 800df70:	4a0c      	ldr	r2, [pc, #48]	; (800dfa4 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_EET0_T_SB_SA_+0x48>)
 800df72:	fb02 f303 	mul.w	r3, r2, r3
 800df76:	617b      	str	r3, [r7, #20]
 800df78:	697b      	ldr	r3, [r7, #20]
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	dd0d      	ble.n	800df9a <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_EET0_T_SB_SA_+0x3e>
	      *__result = *__first;
 800df7e:	68f9      	ldr	r1, [r7, #12]
 800df80:	6878      	ldr	r0, [r7, #4]
 800df82:	f011 fd86 	bl	801fa92 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
	      ++__first;
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	3318      	adds	r3, #24
 800df8a:	60fb      	str	r3, [r7, #12]
	      ++__result;
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	3318      	adds	r3, #24
 800df90:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800df92:	697b      	ldr	r3, [r7, #20]
 800df94:	3b01      	subs	r3, #1
 800df96:	617b      	str	r3, [r7, #20]
 800df98:	e7ee      	b.n	800df78 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_EET0_T_SB_SA_+0x1c>
	  return __result;
 800df9a:	687b      	ldr	r3, [r7, #4]
	}
 800df9c:	4618      	mov	r0, r3
 800df9e:	3718      	adds	r7, #24
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	bd80      	pop	{r7, pc}
 800dfa4:	aaaaaaab 	.word	0xaaaaaaab

0800dfa8 <_ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJRS5_EEvPT_DpOT0_>:
    _Construct(_T1* __p, _Args&&... __args)
 800dfa8:	b590      	push	{r4, r7, lr}
 800dfaa:	b083      	sub	sp, #12
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	6078      	str	r0, [r7, #4]
 800dfb0:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
 800dfb2:	6838      	ldr	r0, [r7, #0]
 800dfb4:	f7ff fc23 	bl	800d7fe <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 800dfb8:	4604      	mov	r4, r0
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	4619      	mov	r1, r3
 800dfbe:	2018      	movs	r0, #24
 800dfc0:	f7f3 f83d 	bl	800103e <_ZnwjPv>
 800dfc4:	4603      	mov	r3, r0
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d003      	beq.n	800dfd2 <_ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJRS5_EEvPT_DpOT0_+0x2a>
 800dfca:	4621      	mov	r1, r4
 800dfcc:	4618      	mov	r0, r3
 800dfce:	f011 fd73 	bl	801fab8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800dfd2:	bf00      	nop
 800dfd4:	370c      	adds	r7, #12
 800dfd6:	46bd      	mov	sp, r7
 800dfd8:	bd90      	pop	{r4, r7, pc}

0800dfda <_ZNSaIN4tama4TextEEC1ERKS1_>:
      allocator(const allocator& __a) throw()
 800dfda:	b580      	push	{r7, lr}
 800dfdc:	b082      	sub	sp, #8
 800dfde:	af00      	add	r7, sp, #0
 800dfe0:	6078      	str	r0, [r7, #4]
 800dfe2:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800dfe4:	6839      	ldr	r1, [r7, #0]
 800dfe6:	6878      	ldr	r0, [r7, #4]
 800dfe8:	f000 f8df 	bl	800e1aa <_ZN9__gnu_cxx13new_allocatorIN4tama4TextEEC1ERKS3_>
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	4618      	mov	r0, r3
 800dff0:	3708      	adds	r7, #8
 800dff2:	46bd      	mov	sp, r7
 800dff4:	bd80      	pop	{r7, pc}

0800dff6 <_ZSt18__allocate_guardedISaIN4tama4TextEEESt15__allocated_ptrIT_ERS4_>:
    __allocate_guarded(_Alloc& __a)
 800dff6:	b580      	push	{r7, lr}
 800dff8:	b082      	sub	sp, #8
 800dffa:	af00      	add	r7, sp, #0
 800dffc:	6078      	str	r0, [r7, #4]
 800dffe:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 800e000:	2101      	movs	r1, #1
 800e002:	6838      	ldr	r0, [r7, #0]
 800e004:	f000 f8dd 	bl	800e1c2 <_ZNSt16allocator_traitsISaIN4tama4TextEEE8allocateERS2_j>
 800e008:	4603      	mov	r3, r0
 800e00a:	461a      	mov	r2, r3
 800e00c:	6839      	ldr	r1, [r7, #0]
 800e00e:	6878      	ldr	r0, [r7, #4]
 800e010:	f000 f8e6 	bl	800e1e0 <_ZNSt15__allocated_ptrISaIN4tama4TextEEEC1ERS2_PS1_>
    }
 800e014:	6878      	ldr	r0, [r7, #4]
 800e016:	3708      	adds	r7, #8
 800e018:	46bd      	mov	sp, r7
 800e01a:	bd80      	pop	{r7, pc}

0800e01c <_ZNSt15__allocated_ptrISaIN4tama4TextEEED1Ev>:
      ~__allocated_ptr()
 800e01c:	b580      	push	{r7, lr}
 800e01e:	b082      	sub	sp, #8
 800e020:	af00      	add	r7, sp, #0
 800e022:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	685b      	ldr	r3, [r3, #4]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d007      	beq.n	800e03c <_ZNSt15__allocated_ptrISaIN4tama4TextEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	6818      	ldr	r0, [r3, #0]
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	685b      	ldr	r3, [r3, #4]
 800e034:	2201      	movs	r2, #1
 800e036:	4619      	mov	r1, r3
 800e038:	f7fb f8ae 	bl	8009198 <_ZNSt16allocator_traitsISaIN4tama4TextEEE10deallocateERS2_PS1_j>
      }
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	4618      	mov	r0, r3
 800e040:	3708      	adds	r7, #8
 800e042:	46bd      	mov	sp, r7
 800e044:	bd80      	pop	{r7, pc}

0800e046 <_ZNSt15__allocated_ptrISaIN4tama4TextEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 800e046:	b580      	push	{r7, lr}
 800e048:	b082      	sub	sp, #8
 800e04a:	af00      	add	r7, sp, #0
 800e04c:	6078      	str	r0, [r7, #4]
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	685b      	ldr	r3, [r3, #4]
 800e052:	4618      	mov	r0, r3
 800e054:	f000 f8d8 	bl	800e208 <_ZNSt15__allocated_ptrISaIN4tama4TextEEE10_S_raw_ptrEPS1_>
 800e058:	4603      	mov	r3, r0
 800e05a:	4618      	mov	r0, r3
 800e05c:	3708      	adds	r7, #8
 800e05e:	46bd      	mov	sp, r7
 800e060:	bd80      	pop	{r7, pc}

0800e062 <_ZNSt16allocator_traitsISaIN4tama4TextEEE9constructIS1_JRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS0_5Vec2dEEEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 800e062:	b590      	push	{r4, r7, lr}
 800e064:	b085      	sub	sp, #20
 800e066:	af00      	add	r7, sp, #0
 800e068:	60f8      	str	r0, [r7, #12]
 800e06a:	60b9      	str	r1, [r7, #8]
 800e06c:	607a      	str	r2, [r7, #4]
 800e06e:	603b      	str	r3, [r7, #0]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800e070:	6878      	ldr	r0, [r7, #4]
 800e072:	f7ff fbc4 	bl	800d7fe <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 800e076:	4604      	mov	r4, r0
 800e078:	6838      	ldr	r0, [r7, #0]
 800e07a:	f7f7 fcee 	bl	8005a5a <_ZSt7forwardIN4tama5Vec2dEEOT_RNSt16remove_referenceIS2_E4typeE>
 800e07e:	4603      	mov	r3, r0
 800e080:	4622      	mov	r2, r4
 800e082:	68b9      	ldr	r1, [r7, #8]
 800e084:	68f8      	ldr	r0, [r7, #12]
 800e086:	f000 f8ca 	bl	800e21e <_ZN9__gnu_cxx13new_allocatorIN4tama4TextEE9constructIS2_JRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS1_5Vec2dEEEEvPT_DpOT0_>
 800e08a:	bf00      	nop
 800e08c:	3714      	adds	r7, #20
 800e08e:	46bd      	mov	sp, r7
 800e090:	bd90      	pop	{r4, r7, pc}

0800e092 <_ZNSt15__allocated_ptrISaIN4tama4TextEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 800e092:	b480      	push	{r7}
 800e094:	b083      	sub	sp, #12
 800e096:	af00      	add	r7, sp, #0
 800e098:	6078      	str	r0, [r7, #4]
 800e09a:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	2200      	movs	r2, #0
 800e0a0:	605a      	str	r2, [r3, #4]
	return *this;
 800e0a2:	687b      	ldr	r3, [r7, #4]
      }
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	370c      	adds	r7, #12
 800e0a8:	46bd      	mov	sp, r7
 800e0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ae:	4770      	bx	lr

0800e0b0 <_ZSt4moveIRNSt12__shared_ptrIN4tama4TextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 800e0b0:	b480      	push	{r7}
 800e0b2:	b083      	sub	sp, #12
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	370c      	adds	r7, #12
 800e0be:	46bd      	mov	sp, r7
 800e0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c4:	4770      	bx	lr

0800e0c6 <_ZNSt12__shared_ptrIN4tama4TextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>:
        struct _Deleter
 800e0c6:	b580      	push	{r7, lr}
 800e0c8:	b082      	sub	sp, #8
 800e0ca:	af00      	add	r7, sp, #0
 800e0cc:	6078      	str	r0, [r7, #4]
 800e0ce:	6039      	str	r1, [r7, #0]
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	683a      	ldr	r2, [r7, #0]
 800e0d4:	4611      	mov	r1, r2
 800e0d6:	4618      	mov	r0, r3
 800e0d8:	f7ff ff7f 	bl	800dfda <_ZNSaIN4tama4TextEEC1ERKS1_>
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	4618      	mov	r0, r3
 800e0e0:	3708      	adds	r7, #8
 800e0e2:	46bd      	mov	sp, r7
 800e0e4:	bd80      	pop	{r7, pc}

0800e0e6 <_ZSt4moveIRSaIN4tama4TextEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800e0e6:	b480      	push	{r7}
 800e0e8:	b083      	sub	sp, #12
 800e0ea:	af00      	add	r7, sp, #0
 800e0ec:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	370c      	adds	r7, #12
 800e0f4:	46bd      	mov	sp, r7
 800e0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0fa:	4770      	bx	lr

0800e0fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama4TextENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
 800e0fc:	b5b0      	push	{r4, r5, r7, lr}
 800e0fe:	b08a      	sub	sp, #40	; 0x28
 800e100:	af00      	add	r7, sp, #0
 800e102:	60f8      	str	r0, [r7, #12]
 800e104:	60b9      	str	r1, [r7, #8]
 800e106:	607a      	str	r2, [r7, #4]
 800e108:	603b      	str	r3, [r7, #0]
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	2200      	movs	r2, #0
 800e10e:	601a      	str	r2, [r3, #0]
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 800e110:	f107 031c 	add.w	r3, r7, #28
 800e114:	6839      	ldr	r1, [r7, #0]
 800e116:	4618      	mov	r0, r3
 800e118:	f000 f8b4 	bl	800e284 <_ZNSaISt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	      auto __guard = std::__allocate_guarded(__a2);
 800e11c:	f107 0314 	add.w	r3, r7, #20
 800e120:	f107 021c 	add.w	r2, r7, #28
 800e124:	4611      	mov	r1, r2
 800e126:	4618      	mov	r0, r3
 800e128:	f000 f8c5 	bl	800e2b6 <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>
	      _Sp_cd_type* __mem = __guard.get();
 800e12c:	f107 0314 	add.w	r3, r7, #20
 800e130:	4618      	mov	r0, r3
 800e132:	f000 f8e8 	bl	800e306 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>
 800e136:	6278      	str	r0, [r7, #36]	; 0x24
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 800e138:	6878      	ldr	r0, [r7, #4]
 800e13a:	f7ff ffb9 	bl	800e0b0 <_ZSt4moveIRNSt12__shared_ptrIN4tama4TextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800e13e:	4602      	mov	r2, r0
 800e140:	f107 0320 	add.w	r3, r7, #32
 800e144:	4611      	mov	r1, r2
 800e146:	4618      	mov	r0, r3
 800e148:	f7ff ffbd 	bl	800e0c6 <_ZNSt12__shared_ptrIN4tama4TextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 800e14c:	f107 0420 	add.w	r4, r7, #32
 800e150:	6838      	ldr	r0, [r7, #0]
 800e152:	f7ff ffc8 	bl	800e0e6 <_ZSt4moveIRSaIN4tama4TextEEEONSt16remove_referenceIT_E4typeEOS5_>
 800e156:	4605      	mov	r5, r0
 800e158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e15a:	4619      	mov	r1, r3
 800e15c:	2014      	movs	r0, #20
 800e15e:	f7f2 ff6e 	bl	800103e <_ZnwjPv>
 800e162:	2800      	cmp	r0, #0
 800e164:	d004      	beq.n	800e170 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama4TextENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x74>
 800e166:	462b      	mov	r3, r5
 800e168:	4622      	mov	r2, r4
 800e16a:	68b9      	ldr	r1, [r7, #8]
 800e16c:	f000 f904 	bl	800e378 <_ZNSt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>
 800e170:	f107 0320 	add.w	r3, r7, #32
 800e174:	4618      	mov	r0, r3
 800e176:	f7ff fdf8 	bl	800dd6a <_ZNSt12__shared_ptrIN4tama4TextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	      _M_pi = __mem;
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e17e:	601a      	str	r2, [r3, #0]
	      __guard = nullptr;
 800e180:	f107 0314 	add.w	r3, r7, #20
 800e184:	2100      	movs	r1, #0
 800e186:	4618      	mov	r0, r3
 800e188:	f000 f924 	bl	800e3d4 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>
	      auto __guard = std::__allocate_guarded(__a2);
 800e18c:	f107 0314 	add.w	r3, r7, #20
 800e190:	4618      	mov	r0, r3
 800e192:	f000 f8a3 	bl	800e2dc <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 800e196:	f107 031c 	add.w	r3, r7, #28
 800e19a:	4618      	mov	r0, r3
 800e19c:	f000 f87f 	bl	800e29e <_ZNSaISt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
	}
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	3728      	adds	r7, #40	; 0x28
 800e1a6:	46bd      	mov	sp, r7
 800e1a8:	bdb0      	pop	{r4, r5, r7, pc}

0800e1aa <_ZN9__gnu_cxx13new_allocatorIN4tama4TextEEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800e1aa:	b480      	push	{r7}
 800e1ac:	b083      	sub	sp, #12
 800e1ae:	af00      	add	r7, sp, #0
 800e1b0:	6078      	str	r0, [r7, #4]
 800e1b2:	6039      	str	r1, [r7, #0]
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	370c      	adds	r7, #12
 800e1ba:	46bd      	mov	sp, r7
 800e1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c0:	4770      	bx	lr

0800e1c2 <_ZNSt16allocator_traitsISaIN4tama4TextEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800e1c2:	b580      	push	{r7, lr}
 800e1c4:	b082      	sub	sp, #8
 800e1c6:	af00      	add	r7, sp, #0
 800e1c8:	6078      	str	r0, [r7, #4]
 800e1ca:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800e1cc:	2200      	movs	r2, #0
 800e1ce:	6839      	ldr	r1, [r7, #0]
 800e1d0:	6878      	ldr	r0, [r7, #4]
 800e1d2:	f000 f92e 	bl	800e432 <_ZN9__gnu_cxx13new_allocatorIN4tama4TextEE8allocateEjPKv>
 800e1d6:	4603      	mov	r3, r0
 800e1d8:	4618      	mov	r0, r3
 800e1da:	3708      	adds	r7, #8
 800e1dc:	46bd      	mov	sp, r7
 800e1de:	bd80      	pop	{r7, pc}

0800e1e0 <_ZNSt15__allocated_ptrISaIN4tama4TextEEEC1ERS2_PS1_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	b084      	sub	sp, #16
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	60f8      	str	r0, [r7, #12]
 800e1e8:	60b9      	str	r1, [r7, #8]
 800e1ea:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800e1ec:	68b8      	ldr	r0, [r7, #8]
 800e1ee:	f000 f941 	bl	800e474 <_ZSt11__addressofISaIN4tama4TextEEEPT_RS3_>
 800e1f2:	4602      	mov	r2, r0
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	601a      	str	r2, [r3, #0]
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	687a      	ldr	r2, [r7, #4]
 800e1fc:	605a      	str	r2, [r3, #4]
      { }
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	4618      	mov	r0, r3
 800e202:	3710      	adds	r7, #16
 800e204:	46bd      	mov	sp, r7
 800e206:	bd80      	pop	{r7, pc}

0800e208 <_ZNSt15__allocated_ptrISaIN4tama4TextEEE10_S_raw_ptrEPS1_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 800e208:	b480      	push	{r7}
 800e20a:	b083      	sub	sp, #12
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	6078      	str	r0, [r7, #4]
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	4618      	mov	r0, r3
 800e214:	370c      	adds	r7, #12
 800e216:	46bd      	mov	sp, r7
 800e218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e21c:	4770      	bx	lr

0800e21e <_ZN9__gnu_cxx13new_allocatorIN4tama4TextEE9constructIS2_JRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS1_5Vec2dEEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800e21e:	b590      	push	{r4, r7, lr}
 800e220:	b08d      	sub	sp, #52	; 0x34
 800e222:	af00      	add	r7, sp, #0
 800e224:	60f8      	str	r0, [r7, #12]
 800e226:	60b9      	str	r1, [r7, #8]
 800e228:	607a      	str	r2, [r7, #4]
 800e22a:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800e22c:	6878      	ldr	r0, [r7, #4]
 800e22e:	f7ff fae6 	bl	800d7fe <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 800e232:	4602      	mov	r2, r0
 800e234:	f107 0310 	add.w	r3, r7, #16
 800e238:	4611      	mov	r1, r2
 800e23a:	4618      	mov	r0, r3
 800e23c:	f011 fc3c 	bl	801fab8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800e240:	f107 0410 	add.w	r4, r7, #16
 800e244:	6838      	ldr	r0, [r7, #0]
 800e246:	f7f7 fc08 	bl	8005a5a <_ZSt7forwardIN4tama5Vec2dEEOT_RNSt16remove_referenceIS2_E4typeE>
 800e24a:	4602      	mov	r2, r0
 800e24c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e250:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e254:	e883 0003 	stmia.w	r3, {r0, r1}
 800e258:	68bb      	ldr	r3, [r7, #8]
 800e25a:	4619      	mov	r1, r3
 800e25c:	2048      	movs	r0, #72	; 0x48
 800e25e:	f7f2 feee 	bl	800103e <_ZnwjPv>
 800e262:	2800      	cmp	r0, #0
 800e264:	d005      	beq.n	800e272 <_ZN9__gnu_cxx13new_allocatorIN4tama4TextEE9constructIS2_JRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS1_5Vec2dEEEEvPT_DpOT0_+0x54>
 800e266:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e26a:	cb0c      	ldmia	r3, {r2, r3}
 800e26c:	4621      	mov	r1, r4
 800e26e:	f001 fa6b 	bl	800f748 <_ZN4tama4TextC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS_5Vec2dE>
 800e272:	f107 0310 	add.w	r3, r7, #16
 800e276:	4618      	mov	r0, r3
 800e278:	f011 fc05 	bl	801fa86 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800e27c:	bf00      	nop
 800e27e:	3734      	adds	r7, #52	; 0x34
 800e280:	46bd      	mov	sp, r7
 800e282:	bd90      	pop	{r4, r7, pc}

0800e284 <_ZNSaISt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) throw() { }
 800e284:	b580      	push	{r7, lr}
 800e286:	b082      	sub	sp, #8
 800e288:	af00      	add	r7, sp, #0
 800e28a:	6078      	str	r0, [r7, #4]
 800e28c:	6039      	str	r1, [r7, #0]
 800e28e:	6878      	ldr	r0, [r7, #4]
 800e290:	f000 f8fb 	bl	800e48a <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	4618      	mov	r0, r3
 800e298:	3708      	adds	r7, #8
 800e29a:	46bd      	mov	sp, r7
 800e29c:	bd80      	pop	{r7, pc}

0800e29e <_ZNSaISt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>:
      ~allocator() throw() { }
 800e29e:	b580      	push	{r7, lr}
 800e2a0:	b082      	sub	sp, #8
 800e2a2:	af00      	add	r7, sp, #0
 800e2a4:	6078      	str	r0, [r7, #4]
 800e2a6:	6878      	ldr	r0, [r7, #4]
 800e2a8:	f000 f8fa 	bl	800e4a0 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	3708      	adds	r7, #8
 800e2b2:	46bd      	mov	sp, r7
 800e2b4:	bd80      	pop	{r7, pc}

0800e2b6 <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>:
    __allocate_guarded(_Alloc& __a)
 800e2b6:	b580      	push	{r7, lr}
 800e2b8:	b082      	sub	sp, #8
 800e2ba:	af00      	add	r7, sp, #0
 800e2bc:	6078      	str	r0, [r7, #4]
 800e2be:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 800e2c0:	2101      	movs	r1, #1
 800e2c2:	6838      	ldr	r0, [r7, #0]
 800e2c4:	f000 f8f7 	bl	800e4b6 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>
 800e2c8:	4603      	mov	r3, r0
 800e2ca:	461a      	mov	r2, r3
 800e2cc:	6839      	ldr	r1, [r7, #0]
 800e2ce:	6878      	ldr	r0, [r7, #4]
 800e2d0:	f000 f900 	bl	800e4d4 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
    }
 800e2d4:	6878      	ldr	r0, [r7, #4]
 800e2d6:	3708      	adds	r7, #8
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	bd80      	pop	{r7, pc}

0800e2dc <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>:
      ~__allocated_ptr()
 800e2dc:	b580      	push	{r7, lr}
 800e2de:	b082      	sub	sp, #8
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	685b      	ldr	r3, [r3, #4]
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d007      	beq.n	800e2fc <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	6818      	ldr	r0, [r3, #0]
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	685b      	ldr	r3, [r3, #4]
 800e2f4:	2201      	movs	r2, #1
 800e2f6:	4619      	mov	r1, r3
 800e2f8:	f000 f900 	bl	800e4fc <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>
      }
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	4618      	mov	r0, r3
 800e300:	3708      	adds	r7, #8
 800e302:	46bd      	mov	sp, r7
 800e304:	bd80      	pop	{r7, pc}

0800e306 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 800e306:	b580      	push	{r7, lr}
 800e308:	b082      	sub	sp, #8
 800e30a:	af00      	add	r7, sp, #0
 800e30c:	6078      	str	r0, [r7, #4]
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	685b      	ldr	r3, [r3, #4]
 800e312:	4618      	mov	r0, r3
 800e314:	f000 f901 	bl	800e51a <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>
 800e318:	4603      	mov	r3, r0
 800e31a:	4618      	mov	r0, r3
 800e31c:	3708      	adds	r7, #8
 800e31e:	46bd      	mov	sp, r7
 800e320:	bd80      	pop	{r7, pc}

0800e322 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama4TextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, false>
 800e322:	b580      	push	{r7, lr}
 800e324:	b082      	sub	sp, #8
 800e326:	af00      	add	r7, sp, #0
 800e328:	6078      	str	r0, [r7, #4]
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	4618      	mov	r0, r3
 800e32e:	f7ff fd1c 	bl	800dd6a <_ZNSt12__shared_ptrIN4tama4TextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	4618      	mov	r0, r3
 800e336:	3708      	adds	r7, #8
 800e338:	46bd      	mov	sp, r7
 800e33a:	bd80      	pop	{r7, pc}

0800e33c <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama4TextEELb1EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp
 800e33c:	b580      	push	{r7, lr}
 800e33e:	b082      	sub	sp, #8
 800e340:	af00      	add	r7, sp, #0
 800e342:	6078      	str	r0, [r7, #4]
 800e344:	6878      	ldr	r0, [r7, #4]
 800e346:	f7fa fe98 	bl	800907a <_ZNSaIN4tama4TextEED1Ev>
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	4618      	mov	r0, r3
 800e34e:	3708      	adds	r7, #8
 800e350:	46bd      	mov	sp, r7
 800e352:	bd80      	pop	{r7, pc}

0800e354 <_ZNSt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>:
      class _Impl : _Sp_ebo_helper<0, _Deleter>, _Sp_ebo_helper<1, _Alloc>
 800e354:	b580      	push	{r7, lr}
 800e356:	b082      	sub	sp, #8
 800e358:	af00      	add	r7, sp, #0
 800e35a:	6078      	str	r0, [r7, #4]
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	3301      	adds	r3, #1
 800e360:	4618      	mov	r0, r3
 800e362:	f7ff ffeb 	bl	800e33c <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama4TextEELb1EED1Ev>
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	4618      	mov	r0, r3
 800e36a:	f7ff ffda 	bl	800e322 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama4TextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	4618      	mov	r0, r3
 800e372:	3708      	adds	r7, #8
 800e374:	46bd      	mov	sp, r7
 800e376:	bd80      	pop	{r7, pc}

0800e378 <_ZNSt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 800e378:	b590      	push	{r4, r7, lr}
 800e37a:	b087      	sub	sp, #28
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	60f8      	str	r0, [r7, #12]
 800e380:	60b9      	str	r1, [r7, #8]
 800e382:	607a      	str	r2, [r7, #4]
 800e384:	603b      	str	r3, [r7, #0]
      : _M_impl(__p, std::move(__d), __a) { }
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	4618      	mov	r0, r3
 800e38a:	f7f6 f9dd 	bl	8004748 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800e38e:	4a10      	ldr	r2, [pc, #64]	; (800e3d0 <_ZNSt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_+0x58>)
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	601a      	str	r2, [r3, #0]
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	f103 040c 	add.w	r4, r3, #12
 800e39a:	6878      	ldr	r0, [r7, #4]
 800e39c:	f7ff fe88 	bl	800e0b0 <_ZSt4moveIRNSt12__shared_ptrIN4tama4TextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800e3a0:	4602      	mov	r2, r0
 800e3a2:	f107 0314 	add.w	r3, r7, #20
 800e3a6:	4611      	mov	r1, r2
 800e3a8:	4618      	mov	r0, r3
 800e3aa:	f7ff fe8c 	bl	800e0c6 <_ZNSt12__shared_ptrIN4tama4TextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 800e3ae:	f107 0214 	add.w	r2, r7, #20
 800e3b2:	683b      	ldr	r3, [r7, #0]
 800e3b4:	68b9      	ldr	r1, [r7, #8]
 800e3b6:	4620      	mov	r0, r4
 800e3b8:	f000 f8ba 	bl	800e530 <_ZNSt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>
 800e3bc:	f107 0314 	add.w	r3, r7, #20
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	f7ff fcd2 	bl	800dd6a <_ZNSt12__shared_ptrIN4tama4TextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	371c      	adds	r7, #28
 800e3cc:	46bd      	mov	sp, r7
 800e3ce:	bd90      	pop	{r4, r7, pc}
 800e3d0:	0802379c 	.word	0x0802379c

0800e3d4 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 800e3d4:	b480      	push	{r7}
 800e3d6:	b083      	sub	sp, #12
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	6078      	str	r0, [r7, #4]
 800e3dc:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	605a      	str	r2, [r3, #4]
	return *this;
 800e3e4:	687b      	ldr	r3, [r7, #4]
      }
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	370c      	adds	r7, #12
 800e3ea:	46bd      	mov	sp, r7
 800e3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f0:	4770      	bx	lr

0800e3f2 <_ZNSt12__shared_ptrIN4tama4TextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>:
          void operator()(typename _Alloc::value_type* __ptr)
 800e3f2:	b590      	push	{r4, r7, lr}
 800e3f4:	b085      	sub	sp, #20
 800e3f6:	af00      	add	r7, sp, #0
 800e3f8:	6078      	str	r0, [r7, #4]
 800e3fa:	6039      	str	r1, [r7, #0]
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 800e3fc:	6879      	ldr	r1, [r7, #4]
 800e3fe:	f107 0308 	add.w	r3, r7, #8
 800e402:	683a      	ldr	r2, [r7, #0]
 800e404:	4618      	mov	r0, r3
 800e406:	f7ff feeb 	bl	800e1e0 <_ZNSt15__allocated_ptrISaIN4tama4TextEEEC1ERS2_PS1_>
	    allocator_traits<_Alloc>::destroy(_M_alloc, __guard.get());
 800e40a:	687c      	ldr	r4, [r7, #4]
 800e40c:	f107 0308 	add.w	r3, r7, #8
 800e410:	4618      	mov	r0, r3
 800e412:	f7ff fe18 	bl	800e046 <_ZNSt15__allocated_ptrISaIN4tama4TextEEE3getEv>
 800e416:	4603      	mov	r3, r0
 800e418:	4619      	mov	r1, r3
 800e41a:	4620      	mov	r0, r4
 800e41c:	f000 f8a6 	bl	800e56c <_ZNSt16allocator_traitsISaIN4tama4TextEEE7destroyIS1_EEvRS2_PT_>
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 800e420:	f107 0308 	add.w	r3, r7, #8
 800e424:	4618      	mov	r0, r3
 800e426:	f7ff fdf9 	bl	800e01c <_ZNSt15__allocated_ptrISaIN4tama4TextEEED1Ev>
          }
 800e42a:	bf00      	nop
 800e42c:	3714      	adds	r7, #20
 800e42e:	46bd      	mov	sp, r7
 800e430:	bd90      	pop	{r4, r7, pc}

0800e432 <_ZN9__gnu_cxx13new_allocatorIN4tama4TextEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800e432:	b580      	push	{r7, lr}
 800e434:	b084      	sub	sp, #16
 800e436:	af00      	add	r7, sp, #0
 800e438:	60f8      	str	r0, [r7, #12]
 800e43a:	60b9      	str	r1, [r7, #8]
 800e43c:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800e43e:	68f8      	ldr	r0, [r7, #12]
 800e440:	f000 f8a2 	bl	800e588 <_ZNK9__gnu_cxx13new_allocatorIN4tama4TextEE8max_sizeEv>
 800e444:	4602      	mov	r2, r0
 800e446:	68bb      	ldr	r3, [r7, #8]
 800e448:	4293      	cmp	r3, r2
 800e44a:	bf8c      	ite	hi
 800e44c:	2301      	movhi	r3, #1
 800e44e:	2300      	movls	r3, #0
 800e450:	b2db      	uxtb	r3, r3
 800e452:	2b00      	cmp	r3, #0
 800e454:	d001      	beq.n	800e45a <_ZN9__gnu_cxx13new_allocatorIN4tama4TextEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800e456:	f011 fa60 	bl	801f91a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800e45a:	68ba      	ldr	r2, [r7, #8]
 800e45c:	4613      	mov	r3, r2
 800e45e:	00db      	lsls	r3, r3, #3
 800e460:	4413      	add	r3, r2
 800e462:	00db      	lsls	r3, r3, #3
 800e464:	4618      	mov	r0, r3
 800e466:	f011 fa2a 	bl	801f8be <_Znwj>
 800e46a:	4603      	mov	r3, r0
      }
 800e46c:	4618      	mov	r0, r3
 800e46e:	3710      	adds	r7, #16
 800e470:	46bd      	mov	sp, r7
 800e472:	bd80      	pop	{r7, pc}

0800e474 <_ZSt11__addressofISaIN4tama4TextEEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800e474:	b480      	push	{r7}
 800e476:	b083      	sub	sp, #12
 800e478:	af00      	add	r7, sp, #0
 800e47a:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	4618      	mov	r0, r3
 800e480:	370c      	adds	r7, #12
 800e482:	46bd      	mov	sp, r7
 800e484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e488:	4770      	bx	lr

0800e48a <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800e48a:	b480      	push	{r7}
 800e48c:	b083      	sub	sp, #12
 800e48e:	af00      	add	r7, sp, #0
 800e490:	6078      	str	r0, [r7, #4]
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	4618      	mov	r0, r3
 800e496:	370c      	adds	r7, #12
 800e498:	46bd      	mov	sp, r7
 800e49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e49e:	4770      	bx	lr

0800e4a0 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800e4a0:	b480      	push	{r7}
 800e4a2:	b083      	sub	sp, #12
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	6078      	str	r0, [r7, #4]
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	370c      	adds	r7, #12
 800e4ae:	46bd      	mov	sp, r7
 800e4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b4:	4770      	bx	lr

0800e4b6 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>:
      allocate(allocator_type& __a, size_type __n)
 800e4b6:	b580      	push	{r7, lr}
 800e4b8:	b082      	sub	sp, #8
 800e4ba:	af00      	add	r7, sp, #0
 800e4bc:	6078      	str	r0, [r7, #4]
 800e4be:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800e4c0:	2200      	movs	r2, #0
 800e4c2:	6839      	ldr	r1, [r7, #0]
 800e4c4:	6878      	ldr	r0, [r7, #4]
 800e4c6:	f000 f86d 	bl	800e5a4 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>
 800e4ca:	4603      	mov	r3, r0
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	3708      	adds	r7, #8
 800e4d0:	46bd      	mov	sp, r7
 800e4d2:	bd80      	pop	{r7, pc}

0800e4d4 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 800e4d4:	b580      	push	{r7, lr}
 800e4d6:	b084      	sub	sp, #16
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	60f8      	str	r0, [r7, #12]
 800e4dc:	60b9      	str	r1, [r7, #8]
 800e4de:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800e4e0:	68b8      	ldr	r0, [r7, #8]
 800e4e2:	f000 f880 	bl	800e5e6 <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>
 800e4e6:	4602      	mov	r2, r0
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	601a      	str	r2, [r3, #0]
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	687a      	ldr	r2, [r7, #4]
 800e4f0:	605a      	str	r2, [r3, #4]
      { }
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	3710      	adds	r7, #16
 800e4f8:	46bd      	mov	sp, r7
 800e4fa:	bd80      	pop	{r7, pc}

0800e4fc <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800e4fc:	b580      	push	{r7, lr}
 800e4fe:	b084      	sub	sp, #16
 800e500:	af00      	add	r7, sp, #0
 800e502:	60f8      	str	r0, [r7, #12]
 800e504:	60b9      	str	r1, [r7, #8]
 800e506:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800e508:	687a      	ldr	r2, [r7, #4]
 800e50a:	68b9      	ldr	r1, [r7, #8]
 800e50c:	68f8      	ldr	r0, [r7, #12]
 800e50e:	f000 f875 	bl	800e5fc <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>
 800e512:	bf00      	nop
 800e514:	3710      	adds	r7, #16
 800e516:	46bd      	mov	sp, r7
 800e518:	bd80      	pop	{r7, pc}

0800e51a <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 800e51a:	b480      	push	{r7}
 800e51c:	b083      	sub	sp, #12
 800e51e:	af00      	add	r7, sp, #0
 800e520:	6078      	str	r0, [r7, #4]
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	4618      	mov	r0, r3
 800e526:	370c      	adds	r7, #12
 800e528:	46bd      	mov	sp, r7
 800e52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e52e:	4770      	bx	lr

0800e530 <_ZNSt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 800e530:	b590      	push	{r4, r7, lr}
 800e532:	b085      	sub	sp, #20
 800e534:	af00      	add	r7, sp, #0
 800e536:	60f8      	str	r0, [r7, #12]
 800e538:	60b9      	str	r1, [r7, #8]
 800e53a:	607a      	str	r2, [r7, #4]
 800e53c:	603b      	str	r3, [r7, #0]
	: _M_ptr(__p), _Del_base(std::move(__d)), _Alloc_base(__a)
 800e53e:	68fc      	ldr	r4, [r7, #12]
 800e540:	6878      	ldr	r0, [r7, #4]
 800e542:	f7ff fdb5 	bl	800e0b0 <_ZSt4moveIRNSt12__shared_ptrIN4tama4TextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800e546:	4603      	mov	r3, r0
 800e548:	4619      	mov	r1, r3
 800e54a:	4620      	mov	r0, r4
 800e54c:	f000 f863 	bl	800e616 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama4TextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	3301      	adds	r3, #1
 800e554:	6839      	ldr	r1, [r7, #0]
 800e556:	4618      	mov	r0, r3
 800e558:	f000 f870 	bl	800e63c <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama4TextEELb1EEC1ERKS2_>
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	68ba      	ldr	r2, [r7, #8]
 800e560:	605a      	str	r2, [r3, #4]
	{ }
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	4618      	mov	r0, r3
 800e566:	3714      	adds	r7, #20
 800e568:	46bd      	mov	sp, r7
 800e56a:	bd90      	pop	{r4, r7, pc}

0800e56c <_ZNSt16allocator_traitsISaIN4tama4TextEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 800e56c:	b580      	push	{r7, lr}
 800e56e:	b082      	sub	sp, #8
 800e570:	af00      	add	r7, sp, #0
 800e572:	6078      	str	r0, [r7, #4]
 800e574:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 800e576:	6839      	ldr	r1, [r7, #0]
 800e578:	6878      	ldr	r0, [r7, #4]
 800e57a:	f000 f86d 	bl	800e658 <_ZN9__gnu_cxx13new_allocatorIN4tama4TextEE7destroyIS2_EEvPT_>
 800e57e:	bf00      	nop
 800e580:	3708      	adds	r7, #8
 800e582:	46bd      	mov	sp, r7
 800e584:	bd80      	pop	{r7, pc}
	...

0800e588 <_ZNK9__gnu_cxx13new_allocatorIN4tama4TextEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800e588:	b480      	push	{r7}
 800e58a:	b083      	sub	sp, #12
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800e590:	4b03      	ldr	r3, [pc, #12]	; (800e5a0 <_ZNK9__gnu_cxx13new_allocatorIN4tama4TextEE8max_sizeEv+0x18>)
 800e592:	4618      	mov	r0, r3
 800e594:	370c      	adds	r7, #12
 800e596:	46bd      	mov	sp, r7
 800e598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e59c:	4770      	bx	lr
 800e59e:	bf00      	nop
 800e5a0:	038e38e3 	.word	0x038e38e3

0800e5a4 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800e5a4:	b580      	push	{r7, lr}
 800e5a6:	b084      	sub	sp, #16
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	60f8      	str	r0, [r7, #12]
 800e5ac:	60b9      	str	r1, [r7, #8]
 800e5ae:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800e5b0:	68f8      	ldr	r0, [r7, #12]
 800e5b2:	f000 f85d 	bl	800e670 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>
 800e5b6:	4602      	mov	r2, r0
 800e5b8:	68bb      	ldr	r3, [r7, #8]
 800e5ba:	4293      	cmp	r3, r2
 800e5bc:	bf8c      	ite	hi
 800e5be:	2301      	movhi	r3, #1
 800e5c0:	2300      	movls	r3, #0
 800e5c2:	b2db      	uxtb	r3, r3
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d001      	beq.n	800e5cc <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800e5c8:	f011 f9a7 	bl	801f91a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800e5cc:	68ba      	ldr	r2, [r7, #8]
 800e5ce:	4613      	mov	r3, r2
 800e5d0:	009b      	lsls	r3, r3, #2
 800e5d2:	4413      	add	r3, r2
 800e5d4:	009b      	lsls	r3, r3, #2
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	f011 f971 	bl	801f8be <_Znwj>
 800e5dc:	4603      	mov	r3, r0
      }
 800e5de:	4618      	mov	r0, r3
 800e5e0:	3710      	adds	r7, #16
 800e5e2:	46bd      	mov	sp, r7
 800e5e4:	bd80      	pop	{r7, pc}

0800e5e6 <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800e5e6:	b480      	push	{r7}
 800e5e8:	b083      	sub	sp, #12
 800e5ea:	af00      	add	r7, sp, #0
 800e5ec:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	4618      	mov	r0, r3
 800e5f2:	370c      	adds	r7, #12
 800e5f4:	46bd      	mov	sp, r7
 800e5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5fa:	4770      	bx	lr

0800e5fc <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>:
      deallocate(pointer __p, size_type)
 800e5fc:	b580      	push	{r7, lr}
 800e5fe:	b084      	sub	sp, #16
 800e600:	af00      	add	r7, sp, #0
 800e602:	60f8      	str	r0, [r7, #12]
 800e604:	60b9      	str	r1, [r7, #8]
 800e606:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800e608:	68b8      	ldr	r0, [r7, #8]
 800e60a:	f011 f971 	bl	801f8f0 <_ZdlPv>
      }
 800e60e:	bf00      	nop
 800e610:	3710      	adds	r7, #16
 800e612:	46bd      	mov	sp, r7
 800e614:	bd80      	pop	{r7, pc}

0800e616 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama4TextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _M_tp(std::move(__tp)) { }
 800e616:	b590      	push	{r4, r7, lr}
 800e618:	b083      	sub	sp, #12
 800e61a:	af00      	add	r7, sp, #0
 800e61c:	6078      	str	r0, [r7, #4]
 800e61e:	6039      	str	r1, [r7, #0]
 800e620:	687c      	ldr	r4, [r7, #4]
 800e622:	6838      	ldr	r0, [r7, #0]
 800e624:	f7ff fd44 	bl	800e0b0 <_ZSt4moveIRNSt12__shared_ptrIN4tama4TextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800e628:	4603      	mov	r3, r0
 800e62a:	4619      	mov	r1, r3
 800e62c:	4620      	mov	r0, r4
 800e62e:	f7ff fd4a 	bl	800e0c6 <_ZNSt12__shared_ptrIN4tama4TextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	4618      	mov	r0, r3
 800e636:	370c      	adds	r7, #12
 800e638:	46bd      	mov	sp, r7
 800e63a:	bd90      	pop	{r4, r7, pc}

0800e63c <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama4TextEELb1EEC1ERKS2_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 800e63c:	b580      	push	{r7, lr}
 800e63e:	b082      	sub	sp, #8
 800e640:	af00      	add	r7, sp, #0
 800e642:	6078      	str	r0, [r7, #4]
 800e644:	6039      	str	r1, [r7, #0]
 800e646:	6839      	ldr	r1, [r7, #0]
 800e648:	6878      	ldr	r0, [r7, #4]
 800e64a:	f7ff fcc6 	bl	800dfda <_ZNSaIN4tama4TextEEC1ERKS1_>
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	4618      	mov	r0, r3
 800e652:	3708      	adds	r7, #8
 800e654:	46bd      	mov	sp, r7
 800e656:	bd80      	pop	{r7, pc}

0800e658 <_ZN9__gnu_cxx13new_allocatorIN4tama4TextEE7destroyIS2_EEvPT_>:
	destroy(_Up* __p) { __p->~_Up(); }
 800e658:	b580      	push	{r7, lr}
 800e65a:	b082      	sub	sp, #8
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	6078      	str	r0, [r7, #4]
 800e660:	6039      	str	r1, [r7, #0]
 800e662:	6838      	ldr	r0, [r7, #0]
 800e664:	f7f6 fdce 	bl	8005204 <_ZN4tama4TextD1Ev>
 800e668:	bf00      	nop
 800e66a:	3708      	adds	r7, #8
 800e66c:	46bd      	mov	sp, r7
 800e66e:	bd80      	pop	{r7, pc}

0800e670 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800e670:	b480      	push	{r7}
 800e672:	b083      	sub	sp, #12
 800e674:	af00      	add	r7, sp, #0
 800e676:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800e678:	4b03      	ldr	r3, [pc, #12]	; (800e688 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv+0x18>)
 800e67a:	4618      	mov	r0, r3
 800e67c:	370c      	adds	r7, #12
 800e67e:	46bd      	mov	sp, r7
 800e680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e684:	4770      	bx	lr
 800e686:	bf00      	nop
 800e688:	0ccccccc 	.word	0x0ccccccc

0800e68c <_ZNSt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 800e68c:	b580      	push	{r7, lr}
 800e68e:	b082      	sub	sp, #8
 800e690:	af00      	add	r7, sp, #0
 800e692:	6078      	str	r0, [r7, #4]
 800e694:	4a08      	ldr	r2, [pc, #32]	; (800e6b8 <_ZNSt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev+0x2c>)
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	601a      	str	r2, [r3, #0]
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	330c      	adds	r3, #12
 800e69e:	4618      	mov	r0, r3
 800e6a0:	f7ff fe58 	bl	800e354 <_ZNSt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	f7f5 fbd4 	bl	8003e54 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	3708      	adds	r7, #8
 800e6b2:	46bd      	mov	sp, r7
 800e6b4:	bd80      	pop	{r7, pc}
 800e6b6:	bf00      	nop
 800e6b8:	0802379c 	.word	0x0802379c

0800e6bc <_ZNSt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	b082      	sub	sp, #8
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]
 800e6c4:	6878      	ldr	r0, [r7, #4]
 800e6c6:	f7ff ffe1 	bl	800e68c <_ZNSt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
 800e6ca:	2114      	movs	r1, #20
 800e6cc:	6878      	ldr	r0, [r7, #4]
 800e6ce:	f011 f8f4 	bl	801f8ba <_ZdlPvj>
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	3708      	adds	r7, #8
 800e6d8:	46bd      	mov	sp, r7
 800e6da:	bd80      	pop	{r7, pc}

0800e6dc <_ZNSt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      _M_dispose() noexcept
 800e6dc:	b580      	push	{r7, lr}
 800e6de:	b082      	sub	sp, #8
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	330c      	adds	r3, #12
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	f000 f840 	bl	800e76e <_ZNSt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>
 800e6ee:	4602      	mov	r2, r0
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	691b      	ldr	r3, [r3, #16]
 800e6f4:	4619      	mov	r1, r3
 800e6f6:	4610      	mov	r0, r2
 800e6f8:	f7ff fe7b 	bl	800e3f2 <_ZNSt12__shared_ptrIN4tama4TextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>
 800e6fc:	bf00      	nop
 800e6fe:	3708      	adds	r7, #8
 800e700:	46bd      	mov	sp, r7
 800e702:	bd80      	pop	{r7, pc}

0800e704 <_ZNSt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      _M_destroy() noexcept
 800e704:	b580      	push	{r7, lr}
 800e706:	b086      	sub	sp, #24
 800e708:	af00      	add	r7, sp, #0
 800e70a:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	330c      	adds	r3, #12
 800e710:	4618      	mov	r0, r3
 800e712:	f000 f839 	bl	800e788 <_ZNSt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>
 800e716:	4602      	mov	r2, r0
 800e718:	f107 0314 	add.w	r3, r7, #20
 800e71c:	4611      	mov	r1, r2
 800e71e:	4618      	mov	r0, r3
 800e720:	f7ff fdb0 	bl	800e284 <_ZNSaISt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 800e724:	f107 0114 	add.w	r1, r7, #20
 800e728:	f107 030c 	add.w	r3, r7, #12
 800e72c:	687a      	ldr	r2, [r7, #4]
 800e72e:	4618      	mov	r0, r3
 800e730:	f7ff fed0 	bl	800e4d4 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
	this->~_Sp_counted_deleter();
 800e734:	6878      	ldr	r0, [r7, #4]
 800e736:	f7ff ffa9 	bl	800e68c <_ZNSt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 800e73a:	f107 030c 	add.w	r3, r7, #12
 800e73e:	4618      	mov	r0, r3
 800e740:	f7ff fdcc 	bl	800e2dc <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	__allocator_type __a(_M_impl._M_alloc());
 800e744:	f107 0314 	add.w	r3, r7, #20
 800e748:	4618      	mov	r0, r3
 800e74a:	f7ff fda8 	bl	800e29e <_ZNSaISt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
      }
 800e74e:	bf00      	nop
 800e750:	3718      	adds	r7, #24
 800e752:	46bd      	mov	sp, r7
 800e754:	bd80      	pop	{r7, pc}

0800e756 <_ZNSt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept
 800e756:	b480      	push	{r7}
 800e758:	b083      	sub	sp, #12
 800e75a:	af00      	add	r7, sp, #0
 800e75c:	6078      	str	r0, [r7, #4]
 800e75e:	6039      	str	r1, [r7, #0]
        return nullptr;
 800e760:	2300      	movs	r3, #0
      }
 800e762:	4618      	mov	r0, r3
 800e764:	370c      	adds	r7, #12
 800e766:	46bd      	mov	sp, r7
 800e768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e76c:	4770      	bx	lr

0800e76e <_ZNSt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 800e76e:	b580      	push	{r7, lr}
 800e770:	b082      	sub	sp, #8
 800e772:	af00      	add	r7, sp, #0
 800e774:	6078      	str	r0, [r7, #4]
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	4618      	mov	r0, r3
 800e77a:	f000 f813 	bl	800e7a4 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama4TextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>
 800e77e:	4603      	mov	r3, r0
 800e780:	4618      	mov	r0, r3
 800e782:	3708      	adds	r7, #8
 800e784:	46bd      	mov	sp, r7
 800e786:	bd80      	pop	{r7, pc}

0800e788 <_ZNSt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 800e788:	b580      	push	{r7, lr}
 800e78a:	b082      	sub	sp, #8
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	6078      	str	r0, [r7, #4]
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	3301      	adds	r3, #1
 800e794:	4618      	mov	r0, r3
 800e796:	f000 f810 	bl	800e7ba <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama4TextEELb1EE6_S_getERS3_>
 800e79a:	4603      	mov	r3, r0
 800e79c:	4618      	mov	r0, r3
 800e79e:	3708      	adds	r7, #8
 800e7a0:	46bd      	mov	sp, r7
 800e7a2:	bd80      	pop	{r7, pc}

0800e7a4 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama4TextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>:
      _S_get(_Sp_ebo_helper& __eboh)
 800e7a4:	b480      	push	{r7}
 800e7a6:	b083      	sub	sp, #12
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	6078      	str	r0, [r7, #4]
      { return __eboh._M_tp; }
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	370c      	adds	r7, #12
 800e7b2:	46bd      	mov	sp, r7
 800e7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b8:	4770      	bx	lr

0800e7ba <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama4TextEELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 800e7ba:	b480      	push	{r7}
 800e7bc:	b083      	sub	sp, #12
 800e7be:	af00      	add	r7, sp, #0
 800e7c0:	6078      	str	r0, [r7, #4]
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	370c      	adds	r7, #12
 800e7c8:	46bd      	mov	sp, r7
 800e7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ce:	4770      	bx	lr

0800e7d0 <_ZN4tama5Vec2dC1Ev>:
{
    class Vec2d
    {
    public:
        Vec2d(int x, int y);
        Vec2d(): x(0), y(0) {}
 800e7d0:	b480      	push	{r7}
 800e7d2:	b083      	sub	sp, #12
 800e7d4:	af00      	add	r7, sp, #0
 800e7d6:	6078      	str	r0, [r7, #4]
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	2200      	movs	r2, #0
 800e7dc:	601a      	str	r2, [r3, #0]
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	2200      	movs	r2, #0
 800e7e2:	605a      	str	r2, [r3, #4]
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	4618      	mov	r0, r3
 800e7e8:	370c      	adds	r7, #12
 800e7ea:	46bd      	mov	sp, r7
 800e7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f0:	4770      	bx	lr

0800e7f2 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EEaSERKS4_>:
    class __shared_ptr
 800e7f2:	b580      	push	{r7, lr}
 800e7f4:	b082      	sub	sp, #8
 800e7f6:	af00      	add	r7, sp, #0
 800e7f8:	6078      	str	r0, [r7, #4]
 800e7fa:	6039      	str	r1, [r7, #0]
 800e7fc:	683b      	ldr	r3, [r7, #0]
 800e7fe:	681a      	ldr	r2, [r3, #0]
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	601a      	str	r2, [r3, #0]
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	1d1a      	adds	r2, r3, #4
 800e808:	683b      	ldr	r3, [r7, #0]
 800e80a:	3304      	adds	r3, #4
 800e80c:	4619      	mov	r1, r3
 800e80e:	4610      	mov	r0, r2
 800e810:	f7f6 fb3c 	bl	8004e8c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	4618      	mov	r0, r3
 800e818:	3708      	adds	r7, #8
 800e81a:	46bd      	mov	sp, r7
 800e81c:	bd80      	pop	{r7, pc}

0800e81e <_ZNSt10shared_ptrIN4tama7TextureEEaSERKS2_>:
    class shared_ptr : public __shared_ptr<_Tp>
 800e81e:	b580      	push	{r7, lr}
 800e820:	b082      	sub	sp, #8
 800e822:	af00      	add	r7, sp, #0
 800e824:	6078      	str	r0, [r7, #4]
 800e826:	6039      	str	r1, [r7, #0]
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	683a      	ldr	r2, [r7, #0]
 800e82c:	4611      	mov	r1, r2
 800e82e:	4618      	mov	r0, r3
 800e830:	f7ff ffdf 	bl	800e7f2 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EEaSERKS4_>
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	4618      	mov	r0, r3
 800e838:	3708      	adds	r7, #8
 800e83a:	46bd      	mov	sp, r7
 800e83c:	bd80      	pop	{r7, pc}

0800e83e <_ZN4tama6Sprite10setTextureESt10shared_ptrINS_7TextureEE>:
//

#include "Sprite.h"

void tama::Sprite::setTexture(std::shared_ptr<tama::Texture> texture)
{
 800e83e:	b580      	push	{r7, lr}
 800e840:	b082      	sub	sp, #8
 800e842:	af00      	add	r7, sp, #0
 800e844:	6078      	str	r0, [r7, #4]
 800e846:	6039      	str	r1, [r7, #0]
    this->texture = texture;
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	3304      	adds	r3, #4
 800e84c:	6839      	ldr	r1, [r7, #0]
 800e84e:	4618      	mov	r0, r3
 800e850:	f7ff ffe5 	bl	800e81e <_ZNSt10shared_ptrIN4tama7TextureEEaSERKS2_>
}
 800e854:	bf00      	nop
 800e856:	3708      	adds	r7, #8
 800e858:	46bd      	mov	sp, r7
 800e85a:	bd80      	pop	{r7, pc}

0800e85c <_ZN4tama6Sprite11setPositionENS_5Vec2dE>:

void tama::Sprite::setPosition(tama::Vec2d position)
{
 800e85c:	b580      	push	{r7, lr}
 800e85e:	b084      	sub	sp, #16
 800e860:	af00      	add	r7, sp, #0
 800e862:	60f8      	str	r0, [r7, #12]
 800e864:	1d3b      	adds	r3, r7, #4
 800e866:	e883 0006 	stmia.w	r3, {r1, r2}
    this->position = position;
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	330c      	adds	r3, #12
 800e86e:	1d3a      	adds	r2, r7, #4
 800e870:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e874:	e883 0003 	stmia.w	r3, {r0, r1}
    notifyObserver();
 800e878:	68f8      	ldr	r0, [r7, #12]
 800e87a:	f000 f8a2 	bl	800e9c2 <_ZN4tama6Sprite14notifyObserverEv>
}
 800e87e:	bf00      	nop
 800e880:	3710      	adds	r7, #16
 800e882:	46bd      	mov	sp, r7
 800e884:	bd80      	pop	{r7, pc}

0800e886 <_ZN4tama6Sprite10getTextureEv>:

std::shared_ptr<tama::Texture> tama::Sprite::getTexture()
{
 800e886:	b580      	push	{r7, lr}
 800e888:	b082      	sub	sp, #8
 800e88a:	af00      	add	r7, sp, #0
 800e88c:	6078      	str	r0, [r7, #4]
 800e88e:	6039      	str	r1, [r7, #0]
    return texture;
 800e890:	683b      	ldr	r3, [r7, #0]
 800e892:	3304      	adds	r3, #4
 800e894:	4619      	mov	r1, r3
 800e896:	6878      	ldr	r0, [r7, #4]
 800e898:	f7f8 fa42 	bl	8006d20 <_ZNSt10shared_ptrIN4tama7TextureEEC1ERKS2_>
}
 800e89c:	6878      	ldr	r0, [r7, #4]
 800e89e:	3708      	adds	r7, #8
 800e8a0:	46bd      	mov	sp, r7
 800e8a2:	bd80      	pop	{r7, pc}

0800e8a4 <_ZN4tama6Sprite11getPositionEv>:

tama::Vec2d tama::Sprite::getPosition()
{
 800e8a4:	b480      	push	{r7}
 800e8a6:	b083      	sub	sp, #12
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	6078      	str	r0, [r7, #4]
 800e8ac:	6039      	str	r1, [r7, #0]
    return position;
 800e8ae:	687a      	ldr	r2, [r7, #4]
 800e8b0:	683b      	ldr	r3, [r7, #0]
 800e8b2:	330c      	adds	r3, #12
 800e8b4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e8b8:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800e8bc:	6878      	ldr	r0, [r7, #4]
 800e8be:	370c      	adds	r7, #12
 800e8c0:	46bd      	mov	sp, r7
 800e8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c6:	4770      	bx	lr

0800e8c8 <_ZN4tama6Sprite4moveENS_5Vec2dE>:

void tama::Sprite::move(tama::Vec2d delta)
{
 800e8c8:	b590      	push	{r4, r7, lr}
 800e8ca:	b087      	sub	sp, #28
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	6178      	str	r0, [r7, #20]
 800e8d0:	f107 030c 	add.w	r3, r7, #12
 800e8d4:	e883 0006 	stmia.w	r3, {r1, r2}
    position = position + delta;
 800e8d8:	697b      	ldr	r3, [r7, #20]
 800e8da:	f103 010c 	add.w	r1, r3, #12
 800e8de:	697c      	ldr	r4, [r7, #20]
 800e8e0:	4638      	mov	r0, r7
 800e8e2:	f107 030c 	add.w	r3, r7, #12
 800e8e6:	cb0c      	ldmia	r3, {r2, r3}
 800e8e8:	f7f2 fac8 	bl	8000e7c <_ZN4tama5Vec2dplES0_>
 800e8ec:	f104 030c 	add.w	r3, r4, #12
 800e8f0:	463a      	mov	r2, r7
 800e8f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e8f6:	e883 0003 	stmia.w	r3, {r0, r1}
    notifyObserver();
 800e8fa:	6978      	ldr	r0, [r7, #20]
 800e8fc:	f000 f861 	bl	800e9c2 <_ZN4tama6Sprite14notifyObserverEv>
}
 800e900:	bf00      	nop
 800e902:	371c      	adds	r7, #28
 800e904:	46bd      	mov	sp, r7
 800e906:	bd90      	pop	{r4, r7, pc}

0800e908 <_ZN4tama6Sprite4hideEv>:

void tama::Sprite::hide()
{
 800e908:	b580      	push	{r7, lr}
 800e90a:	b082      	sub	sp, #8
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	6078      	str	r0, [r7, #4]
    visible = false;
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	2200      	movs	r2, #0
 800e914:	751a      	strb	r2, [r3, #20]
    notifyObserver();
 800e916:	6878      	ldr	r0, [r7, #4]
 800e918:	f000 f853 	bl	800e9c2 <_ZN4tama6Sprite14notifyObserverEv>
}
 800e91c:	bf00      	nop
 800e91e:	3708      	adds	r7, #8
 800e920:	46bd      	mov	sp, r7
 800e922:	bd80      	pop	{r7, pc}

0800e924 <_ZN4tama6Sprite4showEv>:

void tama::Sprite::show()
{
 800e924:	b580      	push	{r7, lr}
 800e926:	b082      	sub	sp, #8
 800e928:	af00      	add	r7, sp, #0
 800e92a:	6078      	str	r0, [r7, #4]
    visible = true;
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	2201      	movs	r2, #1
 800e930:	751a      	strb	r2, [r3, #20]
    notifyObserver();
 800e932:	6878      	ldr	r0, [r7, #4]
 800e934:	f000 f845 	bl	800e9c2 <_ZN4tama6Sprite14notifyObserverEv>
}
 800e938:	bf00      	nop
 800e93a:	3708      	adds	r7, #8
 800e93c:	46bd      	mov	sp, r7
 800e93e:	bd80      	pop	{r7, pc}

0800e940 <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEaSERKS4_>:
 800e940:	b580      	push	{r7, lr}
 800e942:	b082      	sub	sp, #8
 800e944:	af00      	add	r7, sp, #0
 800e946:	6078      	str	r0, [r7, #4]
 800e948:	6039      	str	r1, [r7, #0]
 800e94a:	683b      	ldr	r3, [r7, #0]
 800e94c:	681a      	ldr	r2, [r3, #0]
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	601a      	str	r2, [r3, #0]
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	1d1a      	adds	r2, r3, #4
 800e956:	683b      	ldr	r3, [r7, #0]
 800e958:	3304      	adds	r3, #4
 800e95a:	4619      	mov	r1, r3
 800e95c:	4610      	mov	r0, r2
 800e95e:	f7f6 fa95 	bl	8004e8c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	4618      	mov	r0, r3
 800e966:	3708      	adds	r7, #8
 800e968:	46bd      	mov	sp, r7
 800e96a:	bd80      	pop	{r7, pc}

0800e96c <_ZNSt10shared_ptrIN4tama14ChangeObserverEEaSERKS2_>:
 800e96c:	b580      	push	{r7, lr}
 800e96e:	b082      	sub	sp, #8
 800e970:	af00      	add	r7, sp, #0
 800e972:	6078      	str	r0, [r7, #4]
 800e974:	6039      	str	r1, [r7, #0]
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	683a      	ldr	r2, [r7, #0]
 800e97a:	4611      	mov	r1, r2
 800e97c:	4618      	mov	r0, r3
 800e97e:	f7ff ffdf 	bl	800e940 <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEaSERKS4_>
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	4618      	mov	r0, r3
 800e986:	3708      	adds	r7, #8
 800e988:	46bd      	mov	sp, r7
 800e98a:	bd80      	pop	{r7, pc}

0800e98c <_ZN4tama6Sprite17setChangeObserverESt10shared_ptrINS_14ChangeObserverEE>:

void tama::Sprite::setChangeObserver(std::shared_ptr<tama::ChangeObserver> observer)
{
 800e98c:	b580      	push	{r7, lr}
 800e98e:	b082      	sub	sp, #8
 800e990:	af00      	add	r7, sp, #0
 800e992:	6078      	str	r0, [r7, #4]
 800e994:	6039      	str	r1, [r7, #0]
    this->observer = observer;
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	3318      	adds	r3, #24
 800e99a:	6839      	ldr	r1, [r7, #0]
 800e99c:	4618      	mov	r0, r3
 800e99e:	f7ff ffe5 	bl	800e96c <_ZNSt10shared_ptrIN4tama14ChangeObserverEEaSERKS2_>
}
 800e9a2:	bf00      	nop
 800e9a4:	3708      	adds	r7, #8
 800e9a6:	46bd      	mov	sp, r7
 800e9a8:	bd80      	pop	{r7, pc}

0800e9aa <_ZN4tama6Sprite9isVisibleEv>:

bool tama::Sprite::isVisible()
{
 800e9aa:	b480      	push	{r7}
 800e9ac:	b083      	sub	sp, #12
 800e9ae:	af00      	add	r7, sp, #0
 800e9b0:	6078      	str	r0, [r7, #4]
    return visible;
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	7d1b      	ldrb	r3, [r3, #20]
}
 800e9b6:	4618      	mov	r0, r3
 800e9b8:	370c      	adds	r7, #12
 800e9ba:	46bd      	mov	sp, r7
 800e9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c0:	4770      	bx	lr

0800e9c2 <_ZN4tama6Sprite14notifyObserverEv>:

void tama::Sprite::notifyObserver()
{
 800e9c2:	b580      	push	{r7, lr}
 800e9c4:	b082      	sub	sp, #8
 800e9c6:	af00      	add	r7, sp, #0
 800e9c8:	6078      	str	r0, [r7, #4]
    if (observer != nullptr)
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	3318      	adds	r3, #24
 800e9ce:	2100      	movs	r1, #0
 800e9d0:	4618      	mov	r0, r3
 800e9d2:	f000 f8a7 	bl	800eb24 <_ZStneIN4tama14ChangeObserverEEbRKSt10shared_ptrIT_EDn>
 800e9d6:	4603      	mov	r3, r0
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d009      	beq.n	800e9f0 <_ZN4tama6Sprite14notifyObserverEv+0x2e>
    {
        observer->onChange();
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	3318      	adds	r3, #24
 800e9e0:	4618      	mov	r0, r3
 800e9e2:	f000 f8ad 	bl	800eb40 <_ZNKSt19__shared_ptr_accessIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800e9e6:	4602      	mov	r2, r0
 800e9e8:	6813      	ldr	r3, [r2, #0]
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	4610      	mov	r0, r2
 800e9ee:	4798      	blx	r3
    }
}
 800e9f0:	bf00      	nop
 800e9f2:	3708      	adds	r7, #8
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	bd80      	pop	{r7, pc}

0800e9f8 <_ZN4tama8DrawableC1Ev>:
#include "../../../common/observers/ChangeObserver.h"
#include "texture.h"

namespace tama
{
    class Drawable
 800e9f8:	b480      	push	{r7}
 800e9fa:	b083      	sub	sp, #12
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	6078      	str	r0, [r7, #4]
 800ea00:	4a04      	ldr	r2, [pc, #16]	; (800ea14 <_ZN4tama8DrawableC1Ev+0x1c>)
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	601a      	str	r2, [r3, #0]
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	4618      	mov	r0, r3
 800ea0a:	370c      	adds	r7, #12
 800ea0c:	46bd      	mov	sp, r7
 800ea0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea12:	4770      	bx	lr
 800ea14:	080237e4 	.word	0x080237e4

0800ea18 <_ZN4tama6SpriteC1ERKSt10shared_ptrINS_7TextureEERKNS_5Vec2dE>:

tama::Sprite::Sprite(const std::shared_ptr<Texture> &texture, const tama::Vec2d &position) : texture(texture),
 800ea18:	b590      	push	{r4, r7, lr}
 800ea1a:	b087      	sub	sp, #28
 800ea1c:	af00      	add	r7, sp, #0
 800ea1e:	60f8      	str	r0, [r7, #12]
 800ea20:	60b9      	str	r1, [r7, #8]
 800ea22:	607a      	str	r2, [r7, #4]
                                                                                             position(position)
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	4618      	mov	r0, r3
 800ea28:	f7ff ffe6 	bl	800e9f8 <_ZN4tama8DrawableC1Ev>
 800ea2c:	4a18      	ldr	r2, [pc, #96]	; (800ea90 <_ZN4tama6SpriteC1ERKSt10shared_ptrINS_7TextureEERKNS_5Vec2dE+0x78>)
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	601a      	str	r2, [r3, #0]
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	3304      	adds	r3, #4
 800ea36:	68b9      	ldr	r1, [r7, #8]
 800ea38:	4618      	mov	r0, r3
 800ea3a:	f7f8 f971 	bl	8006d20 <_ZNSt10shared_ptrIN4tama7TextureEEC1ERKS2_>
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	687a      	ldr	r2, [r7, #4]
 800ea42:	330c      	adds	r3, #12
 800ea44:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ea48:	e883 0003 	stmia.w	r3, {r0, r1}
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	3318      	adds	r3, #24
 800ea50:	4618      	mov	r0, r3
 800ea52:	f000 f881 	bl	800eb58 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEC1Ev>
{
    observer = nullptr;
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	f103 0418 	add.w	r4, r3, #24
 800ea5c:	f107 0310 	add.w	r3, r7, #16
 800ea60:	2100      	movs	r1, #0
 800ea62:	4618      	mov	r0, r3
 800ea64:	f000 f885 	bl	800eb72 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEC1EDn>
 800ea68:	f107 0310 	add.w	r3, r7, #16
 800ea6c:	4619      	mov	r1, r3
 800ea6e:	4620      	mov	r0, r4
 800ea70:	f7f7 f849 	bl	8005b06 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEaSEOS2_>
 800ea74:	f107 0310 	add.w	r3, r7, #16
 800ea78:	4618      	mov	r0, r3
 800ea7a:	f7f5 ff1a 	bl	80048b2 <_ZNSt10shared_ptrIN4tama14ChangeObserverEED1Ev>
    visible = true;
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	2201      	movs	r2, #1
 800ea82:	751a      	strb	r2, [r3, #20]
}
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	4618      	mov	r0, r3
 800ea88:	371c      	adds	r7, #28
 800ea8a:	46bd      	mov	sp, r7
 800ea8c:	bd90      	pop	{r4, r7, pc}
 800ea8e:	bf00      	nop
 800ea90:	080237b8 	.word	0x080237b8

0800ea94 <_ZN4tama6SpriteC1Ev>:

tama::Sprite::Sprite()
 800ea94:	b590      	push	{r4, r7, lr}
 800ea96:	b087      	sub	sp, #28
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	6078      	str	r0, [r7, #4]
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	4618      	mov	r0, r3
 800eaa0:	f7ff ffaa 	bl	800e9f8 <_ZN4tama8DrawableC1Ev>
 800eaa4:	4a1e      	ldr	r2, [pc, #120]	; (800eb20 <_ZN4tama6SpriteC1Ev+0x8c>)
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	601a      	str	r2, [r3, #0]
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	3304      	adds	r3, #4
 800eaae:	4618      	mov	r0, r3
 800eab0:	f000 f86c 	bl	800eb8c <_ZNSt10shared_ptrIN4tama7TextureEEC1Ev>
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	330c      	adds	r3, #12
 800eab8:	4618      	mov	r0, r3
 800eaba:	f7ff fe89 	bl	800e7d0 <_ZN4tama5Vec2dC1Ev>
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	3318      	adds	r3, #24
 800eac2:	4618      	mov	r0, r3
 800eac4:	f000 f848 	bl	800eb58 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEC1Ev>
{
    observer = nullptr;
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	f103 0418 	add.w	r4, r3, #24
 800eace:	f107 0308 	add.w	r3, r7, #8
 800ead2:	2100      	movs	r1, #0
 800ead4:	4618      	mov	r0, r3
 800ead6:	f000 f84c 	bl	800eb72 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEC1EDn>
 800eada:	f107 0308 	add.w	r3, r7, #8
 800eade:	4619      	mov	r1, r3
 800eae0:	4620      	mov	r0, r4
 800eae2:	f7f7 f810 	bl	8005b06 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEaSEOS2_>
 800eae6:	f107 0308 	add.w	r3, r7, #8
 800eaea:	4618      	mov	r0, r3
 800eaec:	f7f5 fee1 	bl	80048b2 <_ZNSt10shared_ptrIN4tama14ChangeObserverEED1Ev>
    visible = true;
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	2201      	movs	r2, #1
 800eaf4:	751a      	strb	r2, [r3, #20]
    position = Vec2d(0, 0);
 800eaf6:	f107 0310 	add.w	r3, r7, #16
 800eafa:	2200      	movs	r2, #0
 800eafc:	2100      	movs	r1, #0
 800eafe:	4618      	mov	r0, r3
 800eb00:	f7f2 f9d4 	bl	8000eac <_ZN4tama5Vec2dC1Eii>
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	330c      	adds	r3, #12
 800eb08:	f107 0210 	add.w	r2, r7, #16
 800eb0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800eb10:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	4618      	mov	r0, r3
 800eb18:	371c      	adds	r7, #28
 800eb1a:	46bd      	mov	sp, r7
 800eb1c:	bd90      	pop	{r4, r7, pc}
 800eb1e:	bf00      	nop
 800eb20:	080237b8 	.word	0x080237b8

0800eb24 <_ZStneIN4tama14ChangeObserverEEbRKSt10shared_ptrIT_EDn>:
    operator!=(const shared_ptr<_Tp>& __a, nullptr_t) noexcept
 800eb24:	b580      	push	{r7, lr}
 800eb26:	b082      	sub	sp, #8
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	6078      	str	r0, [r7, #4]
 800eb2c:	6039      	str	r1, [r7, #0]
    { return (bool)__a; }
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	4618      	mov	r0, r3
 800eb32:	f000 f838 	bl	800eba6 <_ZNKSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEcvbEv>
 800eb36:	4603      	mov	r3, r0
 800eb38:	4618      	mov	r0, r3
 800eb3a:	3708      	adds	r7, #8
 800eb3c:	46bd      	mov	sp, r7
 800eb3e:	bd80      	pop	{r7, pc}

0800eb40 <_ZNKSt19__shared_ptr_accessIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 800eb40:	b580      	push	{r7, lr}
 800eb42:	b082      	sub	sp, #8
 800eb44:	af00      	add	r7, sp, #0
 800eb46:	6078      	str	r0, [r7, #4]
	return _M_get();
 800eb48:	6878      	ldr	r0, [r7, #4]
 800eb4a:	f000 f83d 	bl	800ebc8 <_ZNKSt19__shared_ptr_accessIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 800eb4e:	4603      	mov	r3, r0
      }
 800eb50:	4618      	mov	r0, r3
 800eb52:	3708      	adds	r7, #8
 800eb54:	46bd      	mov	sp, r7
 800eb56:	bd80      	pop	{r7, pc}

0800eb58 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEC1Ev>:
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }
 800eb58:	b580      	push	{r7, lr}
 800eb5a:	b082      	sub	sp, #8
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	6078      	str	r0, [r7, #4]
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	4618      	mov	r0, r3
 800eb64:	f000 f83c 	bl	800ebe0 <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	4618      	mov	r0, r3
 800eb6c:	3708      	adds	r7, #8
 800eb6e:	46bd      	mov	sp, r7
 800eb70:	bd80      	pop	{r7, pc}

0800eb72 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEC1EDn>:
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }
 800eb72:	b580      	push	{r7, lr}
 800eb74:	b082      	sub	sp, #8
 800eb76:	af00      	add	r7, sp, #0
 800eb78:	6078      	str	r0, [r7, #4]
 800eb7a:	6039      	str	r1, [r7, #0]
 800eb7c:	6878      	ldr	r0, [r7, #4]
 800eb7e:	f7ff ffeb 	bl	800eb58 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEC1Ev>
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	4618      	mov	r0, r3
 800eb86:	3708      	adds	r7, #8
 800eb88:	46bd      	mov	sp, r7
 800eb8a:	bd80      	pop	{r7, pc}

0800eb8c <_ZNSt10shared_ptrIN4tama7TextureEEC1Ev>:
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }
 800eb8c:	b580      	push	{r7, lr}
 800eb8e:	b082      	sub	sp, #8
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	6078      	str	r0, [r7, #4]
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	4618      	mov	r0, r3
 800eb98:	f000 f833 	bl	800ec02 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	4618      	mov	r0, r3
 800eba0:	3708      	adds	r7, #8
 800eba2:	46bd      	mov	sp, r7
 800eba4:	bd80      	pop	{r7, pc}

0800eba6 <_ZNKSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEcvbEv>:
      explicit operator bool() const // never throws
 800eba6:	b480      	push	{r7}
 800eba8:	b083      	sub	sp, #12
 800ebaa:	af00      	add	r7, sp, #0
 800ebac:	6078      	str	r0, [r7, #4]
      { return _M_ptr == 0 ? false : true; }
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	bf14      	ite	ne
 800ebb6:	2301      	movne	r3, #1
 800ebb8:	2300      	moveq	r3, #0
 800ebba:	b2db      	uxtb	r3, r3
 800ebbc:	4618      	mov	r0, r3
 800ebbe:	370c      	adds	r7, #12
 800ebc0:	46bd      	mov	sp, r7
 800ebc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc6:	4770      	bx	lr

0800ebc8 <_ZNKSt19__shared_ptr_accessIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 800ebc8:	b580      	push	{r7, lr}
 800ebca:	b082      	sub	sp, #8
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 800ebd0:	6878      	ldr	r0, [r7, #4]
 800ebd2:	f000 f827 	bl	800ec24 <_ZNKSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EE3getEv>
 800ebd6:	4603      	mov	r3, r0
 800ebd8:	4618      	mov	r0, r3
 800ebda:	3708      	adds	r7, #8
 800ebdc:	46bd      	mov	sp, r7
 800ebde:	bd80      	pop	{r7, pc}

0800ebe0 <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_ptr() noexcept
 800ebe0:	b580      	push	{r7, lr}
 800ebe2:	b082      	sub	sp, #8
 800ebe4:	af00      	add	r7, sp, #0
 800ebe6:	6078      	str	r0, [r7, #4]
      : _M_ptr(0), _M_refcount()
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	2200      	movs	r2, #0
 800ebec:	601a      	str	r2, [r3, #0]
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	3304      	adds	r3, #4
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	f7f5 f9bb 	bl	8003f6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
      { }
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	3708      	adds	r7, #8
 800ebfe:	46bd      	mov	sp, r7
 800ec00:	bd80      	pop	{r7, pc}

0800ec02 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_ptr() noexcept
 800ec02:	b580      	push	{r7, lr}
 800ec04:	b082      	sub	sp, #8
 800ec06:	af00      	add	r7, sp, #0
 800ec08:	6078      	str	r0, [r7, #4]
      : _M_ptr(0), _M_refcount()
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	2200      	movs	r2, #0
 800ec0e:	601a      	str	r2, [r3, #0]
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	3304      	adds	r3, #4
 800ec14:	4618      	mov	r0, r3
 800ec16:	f7f5 f9aa 	bl	8003f6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
      { }
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	4618      	mov	r0, r3
 800ec1e:	3708      	adds	r7, #8
 800ec20:	46bd      	mov	sp, r7
 800ec22:	bd80      	pop	{r7, pc}

0800ec24 <_ZNKSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 800ec24:	b480      	push	{r7}
 800ec26:	b083      	sub	sp, #12
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	4618      	mov	r0, r3
 800ec32:	370c      	adds	r7, #12
 800ec34:	46bd      	mov	sp, r7
 800ec36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec3a:	4770      	bx	lr

0800ec3c <_ZN4tama7TextureC1Ejj>:
    {
        unsigned width;
        unsigned height;
        PixelColor ** data;

        Texture(unsigned int width, unsigned int height) : width(width), height(height)
 800ec3c:	b590      	push	{r4, r7, lr}
 800ec3e:	b087      	sub	sp, #28
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	60f8      	str	r0, [r7, #12]
 800ec44:	60b9      	str	r1, [r7, #8]
 800ec46:	607a      	str	r2, [r7, #4]
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	68ba      	ldr	r2, [r7, #8]
 800ec4c:	601a      	str	r2, [r3, #0]
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	687a      	ldr	r2, [r7, #4]
 800ec52:	605a      	str	r2, [r3, #4]
        {
            data = new PixelColor*[height];
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	4a1e      	ldr	r2, [pc, #120]	; (800ecd0 <_ZN4tama7TextureC1Ejj+0x94>)
 800ec58:	4293      	cmp	r3, r2
 800ec5a:	d801      	bhi.n	800ec60 <_ZN4tama7TextureC1Ejj+0x24>
 800ec5c:	009b      	lsls	r3, r3, #2
 800ec5e:	e001      	b.n	800ec64 <_ZN4tama7TextureC1Ejj+0x28>
 800ec60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ec64:	4618      	mov	r0, r3
 800ec66:	f010 fe26 	bl	801f8b6 <_Znaj>
 800ec6a:	4603      	mov	r3, r0
 800ec6c:	461a      	mov	r2, r3
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	609a      	str	r2, [r3, #8]
            for (unsigned i = 0; i < height; ++i)
 800ec72:	2300      	movs	r3, #0
 800ec74:	617b      	str	r3, [r7, #20]
 800ec76:	697a      	ldr	r2, [r7, #20]
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	429a      	cmp	r2, r3
 800ec7c:	d222      	bcs.n	800ecc4 <_ZN4tama7TextureC1Ejj+0x88>
            {
                data[i] = new PixelColor[width];
 800ec7e:	68b9      	ldr	r1, [r7, #8]
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	689a      	ldr	r2, [r3, #8]
 800ec84:	697b      	ldr	r3, [r7, #20]
 800ec86:	009b      	lsls	r3, r3, #2
 800ec88:	18d4      	adds	r4, r2, r3
 800ec8a:	4608      	mov	r0, r1
 800ec8c:	f010 fe13 	bl	801f8b6 <_Znaj>
 800ec90:	4603      	mov	r3, r0
 800ec92:	6023      	str	r3, [r4, #0]
                for (unsigned j = 0; j < width; ++j)
 800ec94:	2300      	movs	r3, #0
 800ec96:	613b      	str	r3, [r7, #16]
 800ec98:	693a      	ldr	r2, [r7, #16]
 800ec9a:	68bb      	ldr	r3, [r7, #8]
 800ec9c:	429a      	cmp	r2, r3
 800ec9e:	d20d      	bcs.n	800ecbc <_ZN4tama7TextureC1Ejj+0x80>
                {
                    data[i][j] = PixelColor::WHITE;
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	689a      	ldr	r2, [r3, #8]
 800eca4:	697b      	ldr	r3, [r7, #20]
 800eca6:	009b      	lsls	r3, r3, #2
 800eca8:	4413      	add	r3, r2
 800ecaa:	681a      	ldr	r2, [r3, #0]
 800ecac:	693b      	ldr	r3, [r7, #16]
 800ecae:	4413      	add	r3, r2
 800ecb0:	2200      	movs	r2, #0
 800ecb2:	701a      	strb	r2, [r3, #0]
                for (unsigned j = 0; j < width; ++j)
 800ecb4:	693b      	ldr	r3, [r7, #16]
 800ecb6:	3301      	adds	r3, #1
 800ecb8:	613b      	str	r3, [r7, #16]
 800ecba:	e7ed      	b.n	800ec98 <_ZN4tama7TextureC1Ejj+0x5c>
            for (unsigned i = 0; i < height; ++i)
 800ecbc:	697b      	ldr	r3, [r7, #20]
 800ecbe:	3301      	adds	r3, #1
 800ecc0:	617b      	str	r3, [r7, #20]
 800ecc2:	e7d8      	b.n	800ec76 <_ZN4tama7TextureC1Ejj+0x3a>
                }
            }
        }
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	371c      	adds	r7, #28
 800ecca:	46bd      	mov	sp, r7
 800eccc:	bd90      	pop	{r4, r7, pc}
 800ecce:	bf00      	nop
 800ecd0:	1ffffffe 	.word	0x1ffffffe

0800ecd4 <_ZN4tama7Texture8insertAtENS_5Vec2dESt10shared_ptrIS0_E>:

        Texture(unsigned int width, unsigned int height, PixelColor **data) : width(width), height(height), data(data)
        {}

        void insertAt(Vec2d position, std::shared_ptr<Texture> texture)
 800ecd4:	b580      	push	{r7, lr}
 800ecd6:	b08a      	sub	sp, #40	; 0x28
 800ecd8:	af02      	add	r7, sp, #8
 800ecda:	60f8      	str	r0, [r7, #12]
 800ecdc:	1d38      	adds	r0, r7, #4
 800ecde:	e880 0006 	stmia.w	r0, {r1, r2}
 800ece2:	603b      	str	r3, [r7, #0]
        {
            for (unsigned i = 0; i < texture->height; ++i)
 800ece4:	2300      	movs	r3, #0
 800ece6:	61fb      	str	r3, [r7, #28]
 800ece8:	6838      	ldr	r0, [r7, #0]
 800ecea:	f7f8 f9e1 	bl	80070b0 <_ZNKSt19__shared_ptr_accessIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800ecee:	4603      	mov	r3, r0
 800ecf0:	685b      	ldr	r3, [r3, #4]
 800ecf2:	69fa      	ldr	r2, [r7, #28]
 800ecf4:	429a      	cmp	r2, r3
 800ecf6:	bf34      	ite	cc
 800ecf8:	2301      	movcc	r3, #1
 800ecfa:	2300      	movcs	r3, #0
 800ecfc:	b2db      	uxtb	r3, r3
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d042      	beq.n	800ed88 <_ZN4tama7Texture8insertAtENS_5Vec2dESt10shared_ptrIS0_E+0xb4>
            {
                for (unsigned j = 0; j < texture->width; ++j)
 800ed02:	2300      	movs	r3, #0
 800ed04:	61bb      	str	r3, [r7, #24]
 800ed06:	6838      	ldr	r0, [r7, #0]
 800ed08:	f7f8 f9d2 	bl	80070b0 <_ZNKSt19__shared_ptr_accessIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800ed0c:	4603      	mov	r3, r0
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	69ba      	ldr	r2, [r7, #24]
 800ed12:	429a      	cmp	r2, r3
 800ed14:	bf34      	ite	cc
 800ed16:	2301      	movcc	r3, #1
 800ed18:	2300      	movcs	r3, #0
 800ed1a:	b2db      	uxtb	r3, r3
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d02f      	beq.n	800ed80 <_ZN4tama7Texture8insertAtENS_5Vec2dESt10shared_ptrIS0_E+0xac>
                {
                    unsigned newY = i + position.y;
 800ed20:	68bb      	ldr	r3, [r7, #8]
 800ed22:	461a      	mov	r2, r3
 800ed24:	69fb      	ldr	r3, [r7, #28]
 800ed26:	4413      	add	r3, r2
 800ed28:	617b      	str	r3, [r7, #20]
                    unsigned newX = j + position.x;
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	461a      	mov	r2, r3
 800ed2e:	69bb      	ldr	r3, [r7, #24]
 800ed30:	4413      	add	r3, r2
 800ed32:	613b      	str	r3, [r7, #16]
                    if (shouldDrawPixel(texture, i, j, newY, newX))
 800ed34:	693b      	ldr	r3, [r7, #16]
 800ed36:	9301      	str	r3, [sp, #4]
 800ed38:	697b      	ldr	r3, [r7, #20]
 800ed3a:	9300      	str	r3, [sp, #0]
 800ed3c:	69bb      	ldr	r3, [r7, #24]
 800ed3e:	69fa      	ldr	r2, [r7, #28]
 800ed40:	6839      	ldr	r1, [r7, #0]
 800ed42:	68f8      	ldr	r0, [r7, #12]
 800ed44:	f000 f85d 	bl	800ee02 <_ZNK4tama7Texture15shouldDrawPixelERKSt10shared_ptrIS0_Ejjjj>
 800ed48:	4603      	mov	r3, r0
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d014      	beq.n	800ed78 <_ZN4tama7Texture8insertAtENS_5Vec2dESt10shared_ptrIS0_E+0xa4>
                    {
                        this->data[newY][newX] = texture->data[i][j];
 800ed4e:	6838      	ldr	r0, [r7, #0]
 800ed50:	f7f8 f9ae 	bl	80070b0 <_ZNKSt19__shared_ptr_accessIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800ed54:	4603      	mov	r3, r0
 800ed56:	689a      	ldr	r2, [r3, #8]
 800ed58:	69fb      	ldr	r3, [r7, #28]
 800ed5a:	009b      	lsls	r3, r3, #2
 800ed5c:	4413      	add	r3, r2
 800ed5e:	681a      	ldr	r2, [r3, #0]
 800ed60:	69bb      	ldr	r3, [r7, #24]
 800ed62:	441a      	add	r2, r3
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	6899      	ldr	r1, [r3, #8]
 800ed68:	697b      	ldr	r3, [r7, #20]
 800ed6a:	009b      	lsls	r3, r3, #2
 800ed6c:	440b      	add	r3, r1
 800ed6e:	6819      	ldr	r1, [r3, #0]
 800ed70:	693b      	ldr	r3, [r7, #16]
 800ed72:	440b      	add	r3, r1
 800ed74:	7812      	ldrb	r2, [r2, #0]
 800ed76:	701a      	strb	r2, [r3, #0]
                for (unsigned j = 0; j < texture->width; ++j)
 800ed78:	69bb      	ldr	r3, [r7, #24]
 800ed7a:	3301      	adds	r3, #1
 800ed7c:	61bb      	str	r3, [r7, #24]
 800ed7e:	e7c2      	b.n	800ed06 <_ZN4tama7Texture8insertAtENS_5Vec2dESt10shared_ptrIS0_E+0x32>
            for (unsigned i = 0; i < texture->height; ++i)
 800ed80:	69fb      	ldr	r3, [r7, #28]
 800ed82:	3301      	adds	r3, #1
 800ed84:	61fb      	str	r3, [r7, #28]
 800ed86:	e7af      	b.n	800ece8 <_ZN4tama7Texture8insertAtENS_5Vec2dESt10shared_ptrIS0_E+0x14>
                    }
                }
            }
        }
 800ed88:	bf00      	nop
 800ed8a:	3720      	adds	r7, #32
 800ed8c:	46bd      	mov	sp, r7
 800ed8e:	bd80      	pop	{r7, pc}

0800ed90 <_ZN4tama7Texture17deleteTextureDataEv>:
            deleteTextureData();
            this->data = d;
        }


        void deleteTextureData()
 800ed90:	b580      	push	{r7, lr}
 800ed92:	b084      	sub	sp, #16
 800ed94:	af00      	add	r7, sp, #0
 800ed96:	6078      	str	r0, [r7, #4]
        {
            for (unsigned i = 0; i < height; ++i)
 800ed98:	2300      	movs	r3, #0
 800ed9a:	60fb      	str	r3, [r7, #12]
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	685b      	ldr	r3, [r3, #4]
 800eda0:	68fa      	ldr	r2, [r7, #12]
 800eda2:	429a      	cmp	r2, r3
 800eda4:	d21c      	bcs.n	800ede0 <_ZN4tama7Texture17deleteTextureDataEv+0x50>
            {
            	if (data[i] != nullptr)
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	689a      	ldr	r2, [r3, #8]
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	009b      	lsls	r3, r3, #2
 800edae:	4413      	add	r3, r2
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d010      	beq.n	800edd8 <_ZN4tama7Texture17deleteTextureDataEv+0x48>
            		delete[] data[i];
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	689a      	ldr	r2, [r3, #8]
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	009b      	lsls	r3, r3, #2
 800edbe:	4413      	add	r3, r2
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d008      	beq.n	800edd8 <_ZN4tama7Texture17deleteTextureDataEv+0x48>
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	689a      	ldr	r2, [r3, #8]
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	009b      	lsls	r3, r3, #2
 800edce:	4413      	add	r3, r2
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	4618      	mov	r0, r3
 800edd4:	f010 fd6a 	bl	801f8ac <_ZdaPv>
            for (unsigned i = 0; i < height; ++i)
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	3301      	adds	r3, #1
 800eddc:	60fb      	str	r3, [r7, #12]
 800edde:	e7dd      	b.n	800ed9c <_ZN4tama7Texture17deleteTextureDataEv+0xc>
            }
            if (data != nullptr)
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	689b      	ldr	r3, [r3, #8]
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d008      	beq.n	800edfa <_ZN4tama7Texture17deleteTextureDataEv+0x6a>
            	delete[] data;
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	689b      	ldr	r3, [r3, #8]
 800edec:	2b00      	cmp	r3, #0
 800edee:	d004      	beq.n	800edfa <_ZN4tama7Texture17deleteTextureDataEv+0x6a>
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	689b      	ldr	r3, [r3, #8]
 800edf4:	4618      	mov	r0, r3
 800edf6:	f010 fd59 	bl	801f8ac <_ZdaPv>
        }
 800edfa:	bf00      	nop
 800edfc:	3710      	adds	r7, #16
 800edfe:	46bd      	mov	sp, r7
 800ee00:	bd80      	pop	{r7, pc}

0800ee02 <_ZNK4tama7Texture15shouldDrawPixelERKSt10shared_ptrIS0_Ejjjj>:


        bool shouldDrawPixel(const std::shared_ptr<Texture> &texture, unsigned int i, unsigned int j, unsigned int newY,
 800ee02:	b580      	push	{r7, lr}
 800ee04:	b084      	sub	sp, #16
 800ee06:	af00      	add	r7, sp, #0
 800ee08:	60f8      	str	r0, [r7, #12]
 800ee0a:	60b9      	str	r1, [r7, #8]
 800ee0c:	607a      	str	r2, [r7, #4]
 800ee0e:	603b      	str	r3, [r7, #0]
                             unsigned int newX) const
        { return newX < width && newY < height && texture->data[i][j] != PixelColor::TRANSPARENT; }
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	69fa      	ldr	r2, [r7, #28]
 800ee16:	429a      	cmp	r2, r3
 800ee18:	d214      	bcs.n	800ee44 <_ZNK4tama7Texture15shouldDrawPixelERKSt10shared_ptrIS0_Ejjjj+0x42>
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	685b      	ldr	r3, [r3, #4]
 800ee1e:	69ba      	ldr	r2, [r7, #24]
 800ee20:	429a      	cmp	r2, r3
 800ee22:	d20f      	bcs.n	800ee44 <_ZNK4tama7Texture15shouldDrawPixelERKSt10shared_ptrIS0_Ejjjj+0x42>
 800ee24:	68b8      	ldr	r0, [r7, #8]
 800ee26:	f7f8 f943 	bl	80070b0 <_ZNKSt19__shared_ptr_accessIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800ee2a:	4603      	mov	r3, r0
 800ee2c:	689a      	ldr	r2, [r3, #8]
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	009b      	lsls	r3, r3, #2
 800ee32:	4413      	add	r3, r2
 800ee34:	681a      	ldr	r2, [r3, #0]
 800ee36:	683b      	ldr	r3, [r7, #0]
 800ee38:	4413      	add	r3, r2
 800ee3a:	781b      	ldrb	r3, [r3, #0]
 800ee3c:	2b02      	cmp	r3, #2
 800ee3e:	d001      	beq.n	800ee44 <_ZNK4tama7Texture15shouldDrawPixelERKSt10shared_ptrIS0_Ejjjj+0x42>
 800ee40:	2301      	movs	r3, #1
 800ee42:	e000      	b.n	800ee46 <_ZNK4tama7Texture15shouldDrawPixelERKSt10shared_ptrIS0_Ejjjj+0x44>
 800ee44:	2300      	movs	r3, #0
 800ee46:	4618      	mov	r0, r3
 800ee48:	3710      	adds	r7, #16
 800ee4a:	46bd      	mov	sp, r7
 800ee4c:	bd80      	pop	{r7, pc}

0800ee4e <_ZN4tama7TextureD1Ev>:

        ~Texture()
 800ee4e:	b580      	push	{r7, lr}
 800ee50:	b082      	sub	sp, #8
 800ee52:	af00      	add	r7, sp, #0
 800ee54:	6078      	str	r0, [r7, #4]
        {
            deleteTextureData();
 800ee56:	6878      	ldr	r0, [r7, #4]
 800ee58:	f7ff ff9a 	bl	800ed90 <_ZN4tama7Texture17deleteTextureDataEv>
        }
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	4618      	mov	r0, r3
 800ee60:	3708      	adds	r7, #8
 800ee62:	46bd      	mov	sp, r7
 800ee64:	bd80      	pop	{r7, pc}

0800ee66 <_ZN4tama4Text10setTextureESt10shared_ptrINS_7TextureEE>:
#include "Text.h"
#include "../../../../../STM32F411Disco-drivers/texture-loader/Stm32TextureLoader.h"
#include "../../../../assets/text/standard-font.texture.h"

void tama::Text::setTexture(std::shared_ptr<Texture> ptr)
{
 800ee66:	b480      	push	{r7}
 800ee68:	b083      	sub	sp, #12
 800ee6a:	af00      	add	r7, sp, #0
 800ee6c:	6078      	str	r0, [r7, #4]
 800ee6e:	6039      	str	r1, [r7, #0]

}
 800ee70:	bf00      	nop
 800ee72:	370c      	adds	r7, #12
 800ee74:	46bd      	mov	sp, r7
 800ee76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee7a:	4770      	bx	lr

0800ee7c <_ZN4tama4Text11setPositionENS_5Vec2dE>:

void tama::Text::setPosition(tama::Vec2d d)
{
 800ee7c:	b580      	push	{r7, lr}
 800ee7e:	b084      	sub	sp, #16
 800ee80:	af00      	add	r7, sp, #0
 800ee82:	60f8      	str	r0, [r7, #12]
 800ee84:	1d3b      	adds	r3, r7, #4
 800ee86:	e883 0006 	stmia.w	r3, {r1, r2}
    this->position = d;
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	3338      	adds	r3, #56	; 0x38
 800ee8e:	1d3a      	adds	r2, r7, #4
 800ee90:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ee94:	e883 0003 	stmia.w	r3, {r0, r1}
    notifyObserver();
 800ee98:	68f8      	ldr	r0, [r7, #12]
 800ee9a:	f000 f8a5 	bl	800efe8 <_ZN4tama4Text14notifyObserverEv>
}
 800ee9e:	bf00      	nop
 800eea0:	3710      	adds	r7, #16
 800eea2:	46bd      	mov	sp, r7
 800eea4:	bd80      	pop	{r7, pc}

0800eea6 <_ZN4tama4Text10getTextureEv>:

std::shared_ptr<tama::Texture> tama::Text::getTexture()
{
 800eea6:	b580      	push	{r7, lr}
 800eea8:	b082      	sub	sp, #8
 800eeaa:	af00      	add	r7, sp, #0
 800eeac:	6078      	str	r0, [r7, #4]
 800eeae:	6039      	str	r1, [r7, #0]
    return texture;
 800eeb0:	683b      	ldr	r3, [r7, #0]
 800eeb2:	3328      	adds	r3, #40	; 0x28
 800eeb4:	4619      	mov	r1, r3
 800eeb6:	6878      	ldr	r0, [r7, #4]
 800eeb8:	f7f7 ff32 	bl	8006d20 <_ZNSt10shared_ptrIN4tama7TextureEEC1ERKS2_>
}
 800eebc:	6878      	ldr	r0, [r7, #4]
 800eebe:	3708      	adds	r7, #8
 800eec0:	46bd      	mov	sp, r7
 800eec2:	bd80      	pop	{r7, pc}

0800eec4 <_ZN4tama4Text11getPositionEv>:

tama::Vec2d tama::Text::getPosition()
{
 800eec4:	b480      	push	{r7}
 800eec6:	b083      	sub	sp, #12
 800eec8:	af00      	add	r7, sp, #0
 800eeca:	6078      	str	r0, [r7, #4]
 800eecc:	6039      	str	r1, [r7, #0]
    return position;
 800eece:	687a      	ldr	r2, [r7, #4]
 800eed0:	683b      	ldr	r3, [r7, #0]
 800eed2:	3338      	adds	r3, #56	; 0x38
 800eed4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800eed8:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800eedc:	6878      	ldr	r0, [r7, #4]
 800eede:	370c      	adds	r7, #12
 800eee0:	46bd      	mov	sp, r7
 800eee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee6:	4770      	bx	lr

0800eee8 <_ZN4tama4Text4moveENS_5Vec2dE>:
{
    return text;
}

void tama::Text::move(tama::Vec2d delta)
{
 800eee8:	b590      	push	{r4, r7, lr}
 800eeea:	b087      	sub	sp, #28
 800eeec:	af00      	add	r7, sp, #0
 800eeee:	6178      	str	r0, [r7, #20]
 800eef0:	f107 030c 	add.w	r3, r7, #12
 800eef4:	e883 0006 	stmia.w	r3, {r1, r2}
    position = position + delta;
 800eef8:	697b      	ldr	r3, [r7, #20]
 800eefa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800eefe:	697c      	ldr	r4, [r7, #20]
 800ef00:	4638      	mov	r0, r7
 800ef02:	f107 030c 	add.w	r3, r7, #12
 800ef06:	cb0c      	ldmia	r3, {r2, r3}
 800ef08:	f7f1 ffb8 	bl	8000e7c <_ZN4tama5Vec2dplES0_>
 800ef0c:	f104 0338 	add.w	r3, r4, #56	; 0x38
 800ef10:	463a      	mov	r2, r7
 800ef12:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ef16:	e883 0003 	stmia.w	r3, {r0, r1}
    notifyObserver();
 800ef1a:	6978      	ldr	r0, [r7, #20]
 800ef1c:	f000 f864 	bl	800efe8 <_ZN4tama4Text14notifyObserverEv>
}
 800ef20:	bf00      	nop
 800ef22:	371c      	adds	r7, #28
 800ef24:	46bd      	mov	sp, r7
 800ef26:	bd90      	pop	{r4, r7, pc}

0800ef28 <_ZN4tama4Text4hideEv>:

void tama::Text::hide()
{
 800ef28:	b580      	push	{r7, lr}
 800ef2a:	b082      	sub	sp, #8
 800ef2c:	af00      	add	r7, sp, #0
 800ef2e:	6078      	str	r0, [r7, #4]
    visible = false;
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	2200      	movs	r2, #0
 800ef34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    notifyObserver();
 800ef38:	6878      	ldr	r0, [r7, #4]
 800ef3a:	f000 f855 	bl	800efe8 <_ZN4tama4Text14notifyObserverEv>
}
 800ef3e:	bf00      	nop
 800ef40:	3708      	adds	r7, #8
 800ef42:	46bd      	mov	sp, r7
 800ef44:	bd80      	pop	{r7, pc}

0800ef46 <_ZN4tama4Text4showEv>:

void tama::Text::show()
{
 800ef46:	b580      	push	{r7, lr}
 800ef48:	b082      	sub	sp, #8
 800ef4a:	af00      	add	r7, sp, #0
 800ef4c:	6078      	str	r0, [r7, #4]
    visible = true;
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	2201      	movs	r2, #1
 800ef52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    notifyObserver();
 800ef56:	6878      	ldr	r0, [r7, #4]
 800ef58:	f000 f846 	bl	800efe8 <_ZN4tama4Text14notifyObserverEv>
}
 800ef5c:	bf00      	nop
 800ef5e:	3708      	adds	r7, #8
 800ef60:	46bd      	mov	sp, r7
 800ef62:	bd80      	pop	{r7, pc}

0800ef64 <_ZN4tama4Text17setChangeObserverESt10shared_ptrINS_14ChangeObserverEE>:

void tama::Text::setChangeObserver(std::shared_ptr<ChangeObserver> ptr)
{
 800ef64:	b580      	push	{r7, lr}
 800ef66:	b082      	sub	sp, #8
 800ef68:	af00      	add	r7, sp, #0
 800ef6a:	6078      	str	r0, [r7, #4]
 800ef6c:	6039      	str	r1, [r7, #0]
    this->observer = observer;
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	f103 0208 	add.w	r2, r3, #8
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	3308      	adds	r3, #8
 800ef78:	4619      	mov	r1, r3
 800ef7a:	4610      	mov	r0, r2
 800ef7c:	f7ff fcf6 	bl	800e96c <_ZNSt10shared_ptrIN4tama14ChangeObserverEEaSERKS2_>
}
 800ef80:	bf00      	nop
 800ef82:	3708      	adds	r7, #8
 800ef84:	46bd      	mov	sp, r7
 800ef86:	bd80      	pop	{r7, pc}

0800ef88 <_ZN4tama4Text9isVisibleEv>:

bool tama::Text::isVisible()
{
 800ef88:	b480      	push	{r7}
 800ef8a:	b083      	sub	sp, #12
 800ef8c:	af00      	add	r7, sp, #0
 800ef8e:	6078      	str	r0, [r7, #4]
    return visible;
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
}
 800ef96:	4618      	mov	r0, r3
 800ef98:	370c      	adds	r7, #12
 800ef9a:	46bd      	mov	sp, r7
 800ef9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa0:	4770      	bx	lr

0800efa2 <_ZN4tama4Text11afterUpdateEv>:

void tama::Text::afterUpdate()
{
 800efa2:	b580      	push	{r7, lr}
 800efa4:	b082      	sub	sp, #8
 800efa6:	af00      	add	r7, sp, #0
 800efa8:	6078      	str	r0, [r7, #4]
    recalculateDimensions();
 800efaa:	6878      	ldr	r0, [r7, #4]
 800efac:	f000 fb98 	bl	800f6e0 <_ZN4tama4Text21recalculateDimensionsEv>
    updateTexture();
 800efb0:	6878      	ldr	r0, [r7, #4]
 800efb2:	f000 f834 	bl	800f01e <_ZN4tama4Text13updateTextureEv>
    notifyObserver();
 800efb6:	6878      	ldr	r0, [r7, #4]
 800efb8:	f000 f816 	bl	800efe8 <_ZN4tama4Text14notifyObserverEv>
}
 800efbc:	bf00      	nop
 800efbe:	3708      	adds	r7, #8
 800efc0:	46bd      	mov	sp, r7
 800efc2:	bd80      	pop	{r7, pc}

0800efc4 <_ZN4tama4Text7setTextENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
    afterUpdate();

}

void tama::Text::setText(std::string text)
{
 800efc4:	b580      	push	{r7, lr}
 800efc6:	b082      	sub	sp, #8
 800efc8:	af00      	add	r7, sp, #0
 800efca:	6078      	str	r0, [r7, #4]
 800efcc:	6039      	str	r1, [r7, #0]
    this->text = text;
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	3310      	adds	r3, #16
 800efd2:	6839      	ldr	r1, [r7, #0]
 800efd4:	4618      	mov	r0, r3
 800efd6:	f010 fd5c 	bl	801fa92 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
    afterUpdate();
 800efda:	6878      	ldr	r0, [r7, #4]
 800efdc:	f7ff ffe1 	bl	800efa2 <_ZN4tama4Text11afterUpdateEv>

}
 800efe0:	bf00      	nop
 800efe2:	3708      	adds	r7, #8
 800efe4:	46bd      	mov	sp, r7
 800efe6:	bd80      	pop	{r7, pc}

0800efe8 <_ZN4tama4Text14notifyObserverEv>:

void tama::Text::notifyObserver()
{
 800efe8:	b580      	push	{r7, lr}
 800efea:	b082      	sub	sp, #8
 800efec:	af00      	add	r7, sp, #0
 800efee:	6078      	str	r0, [r7, #4]
    if (observer != nullptr)
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	3308      	adds	r3, #8
 800eff4:	2100      	movs	r1, #0
 800eff6:	4618      	mov	r0, r3
 800eff8:	f7ff fd94 	bl	800eb24 <_ZStneIN4tama14ChangeObserverEEbRKSt10shared_ptrIT_EDn>
 800effc:	4603      	mov	r3, r0
 800effe:	2b00      	cmp	r3, #0
 800f000:	d009      	beq.n	800f016 <_ZN4tama4Text14notifyObserverEv+0x2e>
    {
        observer->onChange();
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	3308      	adds	r3, #8
 800f006:	4618      	mov	r0, r3
 800f008:	f7ff fd9a 	bl	800eb40 <_ZNKSt19__shared_ptr_accessIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800f00c:	4602      	mov	r2, r0
 800f00e:	6813      	ldr	r3, [r2, #0]
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	4610      	mov	r0, r2
 800f014:	4798      	blx	r3
    }
}
 800f016:	bf00      	nop
 800f018:	3708      	adds	r7, #8
 800f01a:	46bd      	mov	sp, r7
 800f01c:	bd80      	pop	{r7, pc}

0800f01e <_ZN4tama4Text13updateTextureEv>:
    recalculateDimensions();
    updateTexture();
}

void tama::Text::updateTexture()
{
 800f01e:	b590      	push	{r4, r7, lr}
 800f020:	b08f      	sub	sp, #60	; 0x3c
 800f022:	af00      	add	r7, sp, #0
 800f024:	6078      	str	r0, [r7, #4]
    texture = std::make_shared<Texture>(dimensions.x, dimensions.y);
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	f103 0428 	add.w	r4, r3, #40	; 0x28
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	f103 0244 	add.w	r2, r3, #68	; 0x44
 800f038:	f107 0314 	add.w	r3, r7, #20
 800f03c:	4618      	mov	r0, r3
 800f03e:	f000 fca0 	bl	800f982 <_ZSt11make_sharedIN4tama7TextureEJRiS2_EESt10shared_ptrIT_EDpOT0_>
 800f042:	f107 0314 	add.w	r3, r7, #20
 800f046:	4619      	mov	r1, r3
 800f048:	4620      	mov	r0, r4
 800f04a:	f7f6 fd7a 	bl	8005b42 <_ZNSt10shared_ptrIN4tama7TextureEEaSEOS2_>
 800f04e:	f107 0314 	add.w	r3, r7, #20
 800f052:	4618      	mov	r0, r3
 800f054:	f7f6 f8c9 	bl	80051ea <_ZNSt10shared_ptrIN4tama7TextureEED1Ev>
    unsigned line = 0;
 800f058:	2300      	movs	r3, #0
 800f05a:	637b      	str	r3, [r7, #52]	; 0x34
    unsigned letterInLine = 0;
 800f05c:	2300      	movs	r3, #0
 800f05e:	633b      	str	r3, [r7, #48]	; 0x30

    for (unsigned i = 0; i < text.size(); ++i)
 800f060:	2300      	movs	r3, #0
 800f062:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	3310      	adds	r3, #16
 800f068:	4618      	mov	r0, r3
 800f06a:	f010 fd1e 	bl	801faaa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 800f06e:	4602      	mov	r2, r0
 800f070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f072:	4293      	cmp	r3, r2
 800f074:	bf34      	ite	cc
 800f076:	2301      	movcc	r3, #1
 800f078:	2300      	movcs	r3, #0
 800f07a:	b2db      	uxtb	r3, r3
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d05b      	beq.n	800f138 <_ZN4tama4Text13updateTextureEv+0x11a>
    {
        if (text[i] == '\n')
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	3310      	adds	r3, #16
 800f084:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f086:	4618      	mov	r0, r3
 800f088:	f010 fd11 	bl	801faae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 800f08c:	4603      	mov	r3, r0
 800f08e:	781b      	ldrb	r3, [r3, #0]
 800f090:	2b0a      	cmp	r3, #10
 800f092:	bf0c      	ite	eq
 800f094:	2301      	moveq	r3, #1
 800f096:	2300      	movne	r3, #0
 800f098:	b2db      	uxtb	r3, r3
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d005      	beq.n	800f0aa <_ZN4tama4Text13updateTextureEv+0x8c>
        {
            line++;
 800f09e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0a0:	3301      	adds	r3, #1
 800f0a2:	637b      	str	r3, [r7, #52]	; 0x34
            letterInLine = 0;
 800f0a4:	2300      	movs	r3, #0
 800f0a6:	633b      	str	r3, [r7, #48]	; 0x30
 800f0a8:	e042      	b.n	800f130 <_ZN4tama4Text13updateTextureEv+0x112>
            continue;
        }

        auto letter = getTextureForLetter(text[i]);
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	3310      	adds	r3, #16
 800f0ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f0b0:	4618      	mov	r0, r3
 800f0b2:	f010 fcfc 	bl	801faae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 800f0b6:	4603      	mov	r3, r0
 800f0b8:	781a      	ldrb	r2, [r3, #0]
 800f0ba:	f107 030c 	add.w	r3, r7, #12
 800f0be:	6879      	ldr	r1, [r7, #4]
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	f000 f83d 	bl	800f140 <_ZN4tama4Text19getTextureForLetterEc>
        texture->insertAt(Vec2d(letterInLine++ * (size + 1), line * (size + 1)), letter);
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	3328      	adds	r3, #40	; 0x28
 800f0ca:	4618      	mov	r0, r3
 800f0cc:	f7f7 fff0 	bl	80070b0 <_ZNKSt19__shared_ptr_accessIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800f0d0:	4604      	mov	r4, r0
 800f0d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0d4:	1c5a      	adds	r2, r3, #1
 800f0d6:	633a      	str	r2, [r7, #48]	; 0x30
 800f0d8:	687a      	ldr	r2, [r7, #4]
 800f0da:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f0dc:	3201      	adds	r2, #1
 800f0de:	fb02 f303 	mul.w	r3, r2, r3
 800f0e2:	4619      	mov	r1, r3
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f0e8:	3301      	adds	r3, #1
 800f0ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f0ec:	fb02 f303 	mul.w	r3, r2, r3
 800f0f0:	461a      	mov	r2, r3
 800f0f2:	f107 031c 	add.w	r3, r7, #28
 800f0f6:	4618      	mov	r0, r3
 800f0f8:	f7f1 fed8 	bl	8000eac <_ZN4tama5Vec2dC1Eii>
 800f0fc:	f107 020c 	add.w	r2, r7, #12
 800f100:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f104:	4611      	mov	r1, r2
 800f106:	4618      	mov	r0, r3
 800f108:	f7f7 fe0a 	bl	8006d20 <_ZNSt10shared_ptrIN4tama7TextureEEC1ERKS2_>
 800f10c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f110:	f107 021c 	add.w	r2, r7, #28
 800f114:	ca06      	ldmia	r2, {r1, r2}
 800f116:	4620      	mov	r0, r4
 800f118:	f7ff fddc 	bl	800ecd4 <_ZN4tama7Texture8insertAtENS_5Vec2dESt10shared_ptrIS0_E>
 800f11c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f120:	4618      	mov	r0, r3
 800f122:	f7f6 f862 	bl	80051ea <_ZNSt10shared_ptrIN4tama7TextureEED1Ev>
        auto letter = getTextureForLetter(text[i]);
 800f126:	f107 030c 	add.w	r3, r7, #12
 800f12a:	4618      	mov	r0, r3
 800f12c:	f7f6 f85d 	bl	80051ea <_ZNSt10shared_ptrIN4tama7TextureEED1Ev>
    for (unsigned i = 0; i < text.size(); ++i)
 800f130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f132:	3301      	adds	r3, #1
 800f134:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f136:	e795      	b.n	800f064 <_ZN4tama4Text13updateTextureEv+0x46>
        //texture->insertAt(Vec2d(0, 0), letter);
    }
}
 800f138:	bf00      	nop
 800f13a:	373c      	adds	r7, #60	; 0x3c
 800f13c:	46bd      	mov	sp, r7
 800f13e:	bd90      	pop	{r4, r7, pc}

0800f140 <_ZN4tama4Text19getTextureForLetterEc>:

std::shared_ptr<tama::Texture> tama::Text::getTextureForLetter(char letter)
{
 800f140:	b580      	push	{r7, lr}
 800f142:	b086      	sub	sp, #24
 800f144:	af00      	add	r7, sp, #0
 800f146:	60f8      	str	r0, [r7, #12]
 800f148:	60b9      	str	r1, [r7, #8]
 800f14a:	4613      	mov	r3, r2
 800f14c:	71fb      	strb	r3, [r7, #7]
    switch (letter)
 800f14e:	79fb      	ldrb	r3, [r7, #7]
 800f150:	3b20      	subs	r3, #32
 800f152:	2b3f      	cmp	r3, #63	; 0x3f
 800f154:	f200 829a 	bhi.w	800f68c <_ZN4tama4Text19getTextureForLetterEc+0x54c>
 800f158:	a201      	add	r2, pc, #4	; (adr r2, 800f160 <_ZN4tama4Text19getTextureForLetterEc+0x20>)
 800f15a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f15e:	bf00      	nop
 800f160:	0800f4d1 	.word	0x0800f4d1
 800f164:	0800f68d 	.word	0x0800f68d
 800f168:	0800f68d 	.word	0x0800f68d
 800f16c:	0800f68d 	.word	0x0800f68d
 800f170:	0800f68d 	.word	0x0800f68d
 800f174:	0800f68d 	.word	0x0800f68d
 800f178:	0800f68d 	.word	0x0800f68d
 800f17c:	0800f68d 	.word	0x0800f68d
 800f180:	0800f68d 	.word	0x0800f68d
 800f184:	0800f68d 	.word	0x0800f68d
 800f188:	0800f68d 	.word	0x0800f68d
 800f18c:	0800f68d 	.word	0x0800f68d
 800f190:	0800f68d 	.word	0x0800f68d
 800f194:	0800f65d 	.word	0x0800f65d
 800f198:	0800f68d 	.word	0x0800f68d
 800f19c:	0800f68d 	.word	0x0800f68d
 800f1a0:	0800f555 	.word	0x0800f555
 800f1a4:	0800f56d 	.word	0x0800f56d
 800f1a8:	0800f585 	.word	0x0800f585
 800f1ac:	0800f59d 	.word	0x0800f59d
 800f1b0:	0800f5b5 	.word	0x0800f5b5
 800f1b4:	0800f5cd 	.word	0x0800f5cd
 800f1b8:	0800f5e5 	.word	0x0800f5e5
 800f1bc:	0800f5fd 	.word	0x0800f5fd
 800f1c0:	0800f615 	.word	0x0800f615
 800f1c4:	0800f62d 	.word	0x0800f62d
 800f1c8:	0800f645 	.word	0x0800f645
 800f1cc:	0800f68d 	.word	0x0800f68d
 800f1d0:	0800f68d 	.word	0x0800f68d
 800f1d4:	0800f68d 	.word	0x0800f68d
 800f1d8:	0800f68d 	.word	0x0800f68d
 800f1dc:	0800f68d 	.word	0x0800f68d
 800f1e0:	0800f68d 	.word	0x0800f68d
 800f1e4:	0800f2f1 	.word	0x0800f2f1
 800f1e8:	0800f309 	.word	0x0800f309
 800f1ec:	0800f321 	.word	0x0800f321
 800f1f0:	0800f291 	.word	0x0800f291
 800f1f4:	0800f339 	.word	0x0800f339
 800f1f8:	0800f351 	.word	0x0800f351
 800f1fc:	0800f369 	.word	0x0800f369
 800f200:	0800f381 	.word	0x0800f381
 800f204:	0800f2d9 	.word	0x0800f2d9
 800f208:	0800f261 	.word	0x0800f261
 800f20c:	0800f399 	.word	0x0800f399
 800f210:	0800f3b1 	.word	0x0800f3b1
 800f214:	0800f3c9 	.word	0x0800f3c9
 800f218:	0800f3e1 	.word	0x0800f3e1
 800f21c:	0800f3f9 	.word	0x0800f3f9
 800f220:	0800f411 	.word	0x0800f411
 800f224:	0800f429 	.word	0x0800f429
 800f228:	0800f441 	.word	0x0800f441
 800f22c:	0800f2a9 	.word	0x0800f2a9
 800f230:	0800f2c1 	.word	0x0800f2c1
 800f234:	0800f279 	.word	0x0800f279
 800f238:	0800f489 	.word	0x0800f489
 800f23c:	0800f459 	.word	0x0800f459
 800f240:	0800f471 	.word	0x0800f471
 800f244:	0800f4a1 	.word	0x0800f4a1
 800f248:	0800f4b9 	.word	0x0800f4b9
 800f24c:	0800f68d 	.word	0x0800f68d
 800f250:	0800f68d 	.word	0x0800f68d
 800f254:	0800f68d 	.word	0x0800f68d
 800f258:	0800f68d 	.word	0x0800f68d
 800f25c:	0800f675 	.word	0x0800f675
    {
        case 'J': return textureLoader->load(tama::asset::font::standard::J);
 800f260:	68bb      	ldr	r3, [r7, #8]
 800f262:	3304      	adds	r3, #4
 800f264:	4618      	mov	r0, r3
 800f266:	f000 fbae 	bl	800f9c6 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 800f26a:	4601      	mov	r1, r0
 800f26c:	680b      	ldr	r3, [r1, #0]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	68f8      	ldr	r0, [r7, #12]
 800f272:	4a9d      	ldr	r2, [pc, #628]	; (800f4e8 <_ZN4tama4Text19getTextureForLetterEc+0x3a8>)
 800f274:	4798      	blx	r3
 800f276:	e215      	b.n	800f6a4 <_ZN4tama4Text19getTextureForLetterEc+0x564>
        case 'U': return textureLoader->load(tama::asset::font::standard::U);
 800f278:	68bb      	ldr	r3, [r7, #8]
 800f27a:	3304      	adds	r3, #4
 800f27c:	4618      	mov	r0, r3
 800f27e:	f000 fba2 	bl	800f9c6 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 800f282:	4601      	mov	r1, r0
 800f284:	680b      	ldr	r3, [r1, #0]
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	68f8      	ldr	r0, [r7, #12]
 800f28a:	4a98      	ldr	r2, [pc, #608]	; (800f4ec <_ZN4tama4Text19getTextureForLetterEc+0x3ac>)
 800f28c:	4798      	blx	r3
 800f28e:	e209      	b.n	800f6a4 <_ZN4tama4Text19getTextureForLetterEc+0x564>
        case 'D': return textureLoader->load(tama::asset::font::standard::D);
 800f290:	68bb      	ldr	r3, [r7, #8]
 800f292:	3304      	adds	r3, #4
 800f294:	4618      	mov	r0, r3
 800f296:	f000 fb96 	bl	800f9c6 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 800f29a:	4601      	mov	r1, r0
 800f29c:	680b      	ldr	r3, [r1, #0]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	68f8      	ldr	r0, [r7, #12]
 800f2a2:	4a93      	ldr	r2, [pc, #588]	; (800f4f0 <_ZN4tama4Text19getTextureForLetterEc+0x3b0>)
 800f2a4:	4798      	blx	r3
 800f2a6:	e1fd      	b.n	800f6a4 <_ZN4tama4Text19getTextureForLetterEc+0x564>
        case 'S': return textureLoader->load(tama::asset::font::standard::S);
 800f2a8:	68bb      	ldr	r3, [r7, #8]
 800f2aa:	3304      	adds	r3, #4
 800f2ac:	4618      	mov	r0, r3
 800f2ae:	f000 fb8a 	bl	800f9c6 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 800f2b2:	4601      	mov	r1, r0
 800f2b4:	680b      	ldr	r3, [r1, #0]
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	68f8      	ldr	r0, [r7, #12]
 800f2ba:	4a8e      	ldr	r2, [pc, #568]	; (800f4f4 <_ZN4tama4Text19getTextureForLetterEc+0x3b4>)
 800f2bc:	4798      	blx	r3
 800f2be:	e1f1      	b.n	800f6a4 <_ZN4tama4Text19getTextureForLetterEc+0x564>
        case 'T': return textureLoader->load(tama::asset::font::standard::T);
 800f2c0:	68bb      	ldr	r3, [r7, #8]
 800f2c2:	3304      	adds	r3, #4
 800f2c4:	4618      	mov	r0, r3
 800f2c6:	f000 fb7e 	bl	800f9c6 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 800f2ca:	4601      	mov	r1, r0
 800f2cc:	680b      	ldr	r3, [r1, #0]
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	68f8      	ldr	r0, [r7, #12]
 800f2d2:	4a89      	ldr	r2, [pc, #548]	; (800f4f8 <_ZN4tama4Text19getTextureForLetterEc+0x3b8>)
 800f2d4:	4798      	blx	r3
 800f2d6:	e1e5      	b.n	800f6a4 <_ZN4tama4Text19getTextureForLetterEc+0x564>
        case 'I': return textureLoader->load(tama::asset::font::standard::I);
 800f2d8:	68bb      	ldr	r3, [r7, #8]
 800f2da:	3304      	adds	r3, #4
 800f2dc:	4618      	mov	r0, r3
 800f2de:	f000 fb72 	bl	800f9c6 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 800f2e2:	4601      	mov	r1, r0
 800f2e4:	680b      	ldr	r3, [r1, #0]
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	68f8      	ldr	r0, [r7, #12]
 800f2ea:	4a84      	ldr	r2, [pc, #528]	; (800f4fc <_ZN4tama4Text19getTextureForLetterEc+0x3bc>)
 800f2ec:	4798      	blx	r3
 800f2ee:	e1d9      	b.n	800f6a4 <_ZN4tama4Text19getTextureForLetterEc+0x564>
        case 'A': return textureLoader->load(tama::asset::font::standard::A);
 800f2f0:	68bb      	ldr	r3, [r7, #8]
 800f2f2:	3304      	adds	r3, #4
 800f2f4:	4618      	mov	r0, r3
 800f2f6:	f000 fb66 	bl	800f9c6 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 800f2fa:	4601      	mov	r1, r0
 800f2fc:	680b      	ldr	r3, [r1, #0]
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	68f8      	ldr	r0, [r7, #12]
 800f302:	4a7f      	ldr	r2, [pc, #508]	; (800f500 <_ZN4tama4Text19getTextureForLetterEc+0x3c0>)
 800f304:	4798      	blx	r3
 800f306:	e1cd      	b.n	800f6a4 <_ZN4tama4Text19getTextureForLetterEc+0x564>
        case 'B': return textureLoader->load(tama::asset::font::standard::B);
 800f308:	68bb      	ldr	r3, [r7, #8]
 800f30a:	3304      	adds	r3, #4
 800f30c:	4618      	mov	r0, r3
 800f30e:	f000 fb5a 	bl	800f9c6 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 800f312:	4601      	mov	r1, r0
 800f314:	680b      	ldr	r3, [r1, #0]
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	68f8      	ldr	r0, [r7, #12]
 800f31a:	4a7a      	ldr	r2, [pc, #488]	; (800f504 <_ZN4tama4Text19getTextureForLetterEc+0x3c4>)
 800f31c:	4798      	blx	r3
 800f31e:	e1c1      	b.n	800f6a4 <_ZN4tama4Text19getTextureForLetterEc+0x564>
        case 'C': return textureLoader->load(tama::asset::font::standard::C);
 800f320:	68bb      	ldr	r3, [r7, #8]
 800f322:	3304      	adds	r3, #4
 800f324:	4618      	mov	r0, r3
 800f326:	f000 fb4e 	bl	800f9c6 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 800f32a:	4601      	mov	r1, r0
 800f32c:	680b      	ldr	r3, [r1, #0]
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	68f8      	ldr	r0, [r7, #12]
 800f332:	4a75      	ldr	r2, [pc, #468]	; (800f508 <_ZN4tama4Text19getTextureForLetterEc+0x3c8>)
 800f334:	4798      	blx	r3
 800f336:	e1b5      	b.n	800f6a4 <_ZN4tama4Text19getTextureForLetterEc+0x564>
        case 'E': return textureLoader->load(tama::asset::font::standard::E);
 800f338:	68bb      	ldr	r3, [r7, #8]
 800f33a:	3304      	adds	r3, #4
 800f33c:	4618      	mov	r0, r3
 800f33e:	f000 fb42 	bl	800f9c6 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 800f342:	4601      	mov	r1, r0
 800f344:	680b      	ldr	r3, [r1, #0]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	68f8      	ldr	r0, [r7, #12]
 800f34a:	4a70      	ldr	r2, [pc, #448]	; (800f50c <_ZN4tama4Text19getTextureForLetterEc+0x3cc>)
 800f34c:	4798      	blx	r3
 800f34e:	e1a9      	b.n	800f6a4 <_ZN4tama4Text19getTextureForLetterEc+0x564>
        case 'F': return textureLoader->load(tama::asset::font::standard::F);
 800f350:	68bb      	ldr	r3, [r7, #8]
 800f352:	3304      	adds	r3, #4
 800f354:	4618      	mov	r0, r3
 800f356:	f000 fb36 	bl	800f9c6 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 800f35a:	4601      	mov	r1, r0
 800f35c:	680b      	ldr	r3, [r1, #0]
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	68f8      	ldr	r0, [r7, #12]
 800f362:	4a6b      	ldr	r2, [pc, #428]	; (800f510 <_ZN4tama4Text19getTextureForLetterEc+0x3d0>)
 800f364:	4798      	blx	r3
 800f366:	e19d      	b.n	800f6a4 <_ZN4tama4Text19getTextureForLetterEc+0x564>
        case 'G': return textureLoader->load(tama::asset::font::standard::G);
 800f368:	68bb      	ldr	r3, [r7, #8]
 800f36a:	3304      	adds	r3, #4
 800f36c:	4618      	mov	r0, r3
 800f36e:	f000 fb2a 	bl	800f9c6 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 800f372:	4601      	mov	r1, r0
 800f374:	680b      	ldr	r3, [r1, #0]
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	68f8      	ldr	r0, [r7, #12]
 800f37a:	4a66      	ldr	r2, [pc, #408]	; (800f514 <_ZN4tama4Text19getTextureForLetterEc+0x3d4>)
 800f37c:	4798      	blx	r3
 800f37e:	e191      	b.n	800f6a4 <_ZN4tama4Text19getTextureForLetterEc+0x564>
        case 'H': return textureLoader->load(tama::asset::font::standard::H);
 800f380:	68bb      	ldr	r3, [r7, #8]
 800f382:	3304      	adds	r3, #4
 800f384:	4618      	mov	r0, r3
 800f386:	f000 fb1e 	bl	800f9c6 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 800f38a:	4601      	mov	r1, r0
 800f38c:	680b      	ldr	r3, [r1, #0]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	68f8      	ldr	r0, [r7, #12]
 800f392:	4a61      	ldr	r2, [pc, #388]	; (800f518 <_ZN4tama4Text19getTextureForLetterEc+0x3d8>)
 800f394:	4798      	blx	r3
 800f396:	e185      	b.n	800f6a4 <_ZN4tama4Text19getTextureForLetterEc+0x564>
        case 'K': return textureLoader->load(tama::asset::font::standard::K);
 800f398:	68bb      	ldr	r3, [r7, #8]
 800f39a:	3304      	adds	r3, #4
 800f39c:	4618      	mov	r0, r3
 800f39e:	f000 fb12 	bl	800f9c6 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 800f3a2:	4601      	mov	r1, r0
 800f3a4:	680b      	ldr	r3, [r1, #0]
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	68f8      	ldr	r0, [r7, #12]
 800f3aa:	4a5c      	ldr	r2, [pc, #368]	; (800f51c <_ZN4tama4Text19getTextureForLetterEc+0x3dc>)
 800f3ac:	4798      	blx	r3
 800f3ae:	e179      	b.n	800f6a4 <_ZN4tama4Text19getTextureForLetterEc+0x564>
        case 'L': return textureLoader->load(tama::asset::font::standard::L);
 800f3b0:	68bb      	ldr	r3, [r7, #8]
 800f3b2:	3304      	adds	r3, #4
 800f3b4:	4618      	mov	r0, r3
 800f3b6:	f000 fb06 	bl	800f9c6 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 800f3ba:	4601      	mov	r1, r0
 800f3bc:	680b      	ldr	r3, [r1, #0]
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	68f8      	ldr	r0, [r7, #12]
 800f3c2:	4a57      	ldr	r2, [pc, #348]	; (800f520 <_ZN4tama4Text19getTextureForLetterEc+0x3e0>)
 800f3c4:	4798      	blx	r3
 800f3c6:	e16d      	b.n	800f6a4 <_ZN4tama4Text19getTextureForLetterEc+0x564>
        case 'M': return textureLoader->load(tama::asset::font::standard::M);
 800f3c8:	68bb      	ldr	r3, [r7, #8]
 800f3ca:	3304      	adds	r3, #4
 800f3cc:	4618      	mov	r0, r3
 800f3ce:	f000 fafa 	bl	800f9c6 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 800f3d2:	4601      	mov	r1, r0
 800f3d4:	680b      	ldr	r3, [r1, #0]
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	68f8      	ldr	r0, [r7, #12]
 800f3da:	4a52      	ldr	r2, [pc, #328]	; (800f524 <_ZN4tama4Text19getTextureForLetterEc+0x3e4>)
 800f3dc:	4798      	blx	r3
 800f3de:	e161      	b.n	800f6a4 <_ZN4tama4Text19getTextureForLetterEc+0x564>
        case 'N': return textureLoader->load(tama::asset::font::standard::N);
 800f3e0:	68bb      	ldr	r3, [r7, #8]
 800f3e2:	3304      	adds	r3, #4
 800f3e4:	4618      	mov	r0, r3
 800f3e6:	f000 faee 	bl	800f9c6 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 800f3ea:	4601      	mov	r1, r0
 800f3ec:	680b      	ldr	r3, [r1, #0]
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	68f8      	ldr	r0, [r7, #12]
 800f3f2:	4a4d      	ldr	r2, [pc, #308]	; (800f528 <_ZN4tama4Text19getTextureForLetterEc+0x3e8>)
 800f3f4:	4798      	blx	r3
 800f3f6:	e155      	b.n	800f6a4 <_ZN4tama4Text19getTextureForLetterEc+0x564>
        case 'O': return textureLoader->load(tama::asset::font::standard::O);
 800f3f8:	68bb      	ldr	r3, [r7, #8]
 800f3fa:	3304      	adds	r3, #4
 800f3fc:	4618      	mov	r0, r3
 800f3fe:	f000 fae2 	bl	800f9c6 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 800f402:	4601      	mov	r1, r0
 800f404:	680b      	ldr	r3, [r1, #0]
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	68f8      	ldr	r0, [r7, #12]
 800f40a:	4a48      	ldr	r2, [pc, #288]	; (800f52c <_ZN4tama4Text19getTextureForLetterEc+0x3ec>)
 800f40c:	4798      	blx	r3
 800f40e:	e149      	b.n	800f6a4 <_ZN4tama4Text19getTextureForLetterEc+0x564>
        case 'P': return textureLoader->load(tama::asset::font::standard::P);
 800f410:	68bb      	ldr	r3, [r7, #8]
 800f412:	3304      	adds	r3, #4
 800f414:	4618      	mov	r0, r3
 800f416:	f000 fad6 	bl	800f9c6 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 800f41a:	4601      	mov	r1, r0
 800f41c:	680b      	ldr	r3, [r1, #0]
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	68f8      	ldr	r0, [r7, #12]
 800f422:	4a43      	ldr	r2, [pc, #268]	; (800f530 <_ZN4tama4Text19getTextureForLetterEc+0x3f0>)
 800f424:	4798      	blx	r3
 800f426:	e13d      	b.n	800f6a4 <_ZN4tama4Text19getTextureForLetterEc+0x564>
        case 'Q': return textureLoader->load(tama::asset::font::standard::Q);
 800f428:	68bb      	ldr	r3, [r7, #8]
 800f42a:	3304      	adds	r3, #4
 800f42c:	4618      	mov	r0, r3
 800f42e:	f000 faca 	bl	800f9c6 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 800f432:	4601      	mov	r1, r0
 800f434:	680b      	ldr	r3, [r1, #0]
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	68f8      	ldr	r0, [r7, #12]
 800f43a:	4a3e      	ldr	r2, [pc, #248]	; (800f534 <_ZN4tama4Text19getTextureForLetterEc+0x3f4>)
 800f43c:	4798      	blx	r3
 800f43e:	e131      	b.n	800f6a4 <_ZN4tama4Text19getTextureForLetterEc+0x564>
        case 'R': return textureLoader->load(tama::asset::font::standard::R);
 800f440:	68bb      	ldr	r3, [r7, #8]
 800f442:	3304      	adds	r3, #4
 800f444:	4618      	mov	r0, r3
 800f446:	f000 fabe 	bl	800f9c6 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 800f44a:	4601      	mov	r1, r0
 800f44c:	680b      	ldr	r3, [r1, #0]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	68f8      	ldr	r0, [r7, #12]
 800f452:	4a39      	ldr	r2, [pc, #228]	; (800f538 <_ZN4tama4Text19getTextureForLetterEc+0x3f8>)
 800f454:	4798      	blx	r3
 800f456:	e125      	b.n	800f6a4 <_ZN4tama4Text19getTextureForLetterEc+0x564>
        case 'W': return textureLoader->load(tama::asset::font::standard::W);
 800f458:	68bb      	ldr	r3, [r7, #8]
 800f45a:	3304      	adds	r3, #4
 800f45c:	4618      	mov	r0, r3
 800f45e:	f000 fab2 	bl	800f9c6 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 800f462:	4601      	mov	r1, r0
 800f464:	680b      	ldr	r3, [r1, #0]
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	68f8      	ldr	r0, [r7, #12]
 800f46a:	4a34      	ldr	r2, [pc, #208]	; (800f53c <_ZN4tama4Text19getTextureForLetterEc+0x3fc>)
 800f46c:	4798      	blx	r3
 800f46e:	e119      	b.n	800f6a4 <_ZN4tama4Text19getTextureForLetterEc+0x564>
        case 'X': return textureLoader->load(tama::asset::font::standard::X);
 800f470:	68bb      	ldr	r3, [r7, #8]
 800f472:	3304      	adds	r3, #4
 800f474:	4618      	mov	r0, r3
 800f476:	f000 faa6 	bl	800f9c6 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 800f47a:	4601      	mov	r1, r0
 800f47c:	680b      	ldr	r3, [r1, #0]
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	68f8      	ldr	r0, [r7, #12]
 800f482:	4a2f      	ldr	r2, [pc, #188]	; (800f540 <_ZN4tama4Text19getTextureForLetterEc+0x400>)
 800f484:	4798      	blx	r3
 800f486:	e10d      	b.n	800f6a4 <_ZN4tama4Text19getTextureForLetterEc+0x564>
        case 'V': return textureLoader->load(tama::asset::font::standard::V);
 800f488:	68bb      	ldr	r3, [r7, #8]
 800f48a:	3304      	adds	r3, #4
 800f48c:	4618      	mov	r0, r3
 800f48e:	f000 fa9a 	bl	800f9c6 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 800f492:	4601      	mov	r1, r0
 800f494:	680b      	ldr	r3, [r1, #0]
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	68f8      	ldr	r0, [r7, #12]
 800f49a:	4a2a      	ldr	r2, [pc, #168]	; (800f544 <_ZN4tama4Text19getTextureForLetterEc+0x404>)
 800f49c:	4798      	blx	r3
 800f49e:	e101      	b.n	800f6a4 <_ZN4tama4Text19getTextureForLetterEc+0x564>
        case 'Y': return textureLoader->load(tama::asset::font::standard::Y);
 800f4a0:	68bb      	ldr	r3, [r7, #8]
 800f4a2:	3304      	adds	r3, #4
 800f4a4:	4618      	mov	r0, r3
 800f4a6:	f000 fa8e 	bl	800f9c6 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 800f4aa:	4601      	mov	r1, r0
 800f4ac:	680b      	ldr	r3, [r1, #0]
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	68f8      	ldr	r0, [r7, #12]
 800f4b2:	4a25      	ldr	r2, [pc, #148]	; (800f548 <_ZN4tama4Text19getTextureForLetterEc+0x408>)
 800f4b4:	4798      	blx	r3
 800f4b6:	e0f5      	b.n	800f6a4 <_ZN4tama4Text19getTextureForLetterEc+0x564>
        case 'Z': return textureLoader->load(tama::asset::font::standard::Z);
 800f4b8:	68bb      	ldr	r3, [r7, #8]
 800f4ba:	3304      	adds	r3, #4
 800f4bc:	4618      	mov	r0, r3
 800f4be:	f000 fa82 	bl	800f9c6 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 800f4c2:	4601      	mov	r1, r0
 800f4c4:	680b      	ldr	r3, [r1, #0]
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	68f8      	ldr	r0, [r7, #12]
 800f4ca:	4a20      	ldr	r2, [pc, #128]	; (800f54c <_ZN4tama4Text19getTextureForLetterEc+0x40c>)
 800f4cc:	4798      	blx	r3
 800f4ce:	e0e9      	b.n	800f6a4 <_ZN4tama4Text19getTextureForLetterEc+0x564>
        case ' ': return textureLoader->load(tama::asset::font::standard::SPC);
 800f4d0:	68bb      	ldr	r3, [r7, #8]
 800f4d2:	3304      	adds	r3, #4
 800f4d4:	4618      	mov	r0, r3
 800f4d6:	f000 fa76 	bl	800f9c6 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 800f4da:	4601      	mov	r1, r0
 800f4dc:	680b      	ldr	r3, [r1, #0]
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	68f8      	ldr	r0, [r7, #12]
 800f4e2:	4a1b      	ldr	r2, [pc, #108]	; (800f550 <_ZN4tama4Text19getTextureForLetterEc+0x410>)
 800f4e4:	4798      	blx	r3
 800f4e6:	e0dd      	b.n	800f6a4 <_ZN4tama4Text19getTextureForLetterEc+0x564>
 800f4e8:	200000d4 	.word	0x200000d4
 800f4ec:	200000e0 	.word	0x200000e0
 800f4f0:	200000ec 	.word	0x200000ec
 800f4f4:	200000f8 	.word	0x200000f8
 800f4f8:	20000104 	.word	0x20000104
 800f4fc:	20000110 	.word	0x20000110
 800f500:	2000011c 	.word	0x2000011c
 800f504:	20000128 	.word	0x20000128
 800f508:	20000134 	.word	0x20000134
 800f50c:	20000140 	.word	0x20000140
 800f510:	2000014c 	.word	0x2000014c
 800f514:	20000158 	.word	0x20000158
 800f518:	20000164 	.word	0x20000164
 800f51c:	20000170 	.word	0x20000170
 800f520:	2000017c 	.word	0x2000017c
 800f524:	20000188 	.word	0x20000188
 800f528:	20000194 	.word	0x20000194
 800f52c:	200001a0 	.word	0x200001a0
 800f530:	200001ac 	.word	0x200001ac
 800f534:	200001b8 	.word	0x200001b8
 800f538:	200001c4 	.word	0x200001c4
 800f53c:	200001d0 	.word	0x200001d0
 800f540:	200001e8 	.word	0x200001e8
 800f544:	200001dc 	.word	0x200001dc
 800f548:	200001f4 	.word	0x200001f4
 800f54c:	20000200 	.word	0x20000200
 800f550:	2000020c 	.word	0x2000020c
        case '0': return textureLoader->load(tama::asset::font::standard::Zero);
 800f554:	68bb      	ldr	r3, [r7, #8]
 800f556:	3304      	adds	r3, #4
 800f558:	4618      	mov	r0, r3
 800f55a:	f000 fa34 	bl	800f9c6 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 800f55e:	4601      	mov	r1, r0
 800f560:	680b      	ldr	r3, [r1, #0]
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	68f8      	ldr	r0, [r7, #12]
 800f566:	4a51      	ldr	r2, [pc, #324]	; (800f6ac <_ZN4tama4Text19getTextureForLetterEc+0x56c>)
 800f568:	4798      	blx	r3
 800f56a:	e09b      	b.n	800f6a4 <_ZN4tama4Text19getTextureForLetterEc+0x564>
        case '1': return textureLoader->load(tama::asset::font::standard::One);
 800f56c:	68bb      	ldr	r3, [r7, #8]
 800f56e:	3304      	adds	r3, #4
 800f570:	4618      	mov	r0, r3
 800f572:	f000 fa28 	bl	800f9c6 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 800f576:	4601      	mov	r1, r0
 800f578:	680b      	ldr	r3, [r1, #0]
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	68f8      	ldr	r0, [r7, #12]
 800f57e:	4a4c      	ldr	r2, [pc, #304]	; (800f6b0 <_ZN4tama4Text19getTextureForLetterEc+0x570>)
 800f580:	4798      	blx	r3
 800f582:	e08f      	b.n	800f6a4 <_ZN4tama4Text19getTextureForLetterEc+0x564>
        case '2': return textureLoader->load(tama::asset::font::standard::Two);
 800f584:	68bb      	ldr	r3, [r7, #8]
 800f586:	3304      	adds	r3, #4
 800f588:	4618      	mov	r0, r3
 800f58a:	f000 fa1c 	bl	800f9c6 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 800f58e:	4601      	mov	r1, r0
 800f590:	680b      	ldr	r3, [r1, #0]
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	68f8      	ldr	r0, [r7, #12]
 800f596:	4a47      	ldr	r2, [pc, #284]	; (800f6b4 <_ZN4tama4Text19getTextureForLetterEc+0x574>)
 800f598:	4798      	blx	r3
 800f59a:	e083      	b.n	800f6a4 <_ZN4tama4Text19getTextureForLetterEc+0x564>
        case '3': return textureLoader->load(tama::asset::font::standard::Three);
 800f59c:	68bb      	ldr	r3, [r7, #8]
 800f59e:	3304      	adds	r3, #4
 800f5a0:	4618      	mov	r0, r3
 800f5a2:	f000 fa10 	bl	800f9c6 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 800f5a6:	4601      	mov	r1, r0
 800f5a8:	680b      	ldr	r3, [r1, #0]
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	68f8      	ldr	r0, [r7, #12]
 800f5ae:	4a42      	ldr	r2, [pc, #264]	; (800f6b8 <_ZN4tama4Text19getTextureForLetterEc+0x578>)
 800f5b0:	4798      	blx	r3
 800f5b2:	e077      	b.n	800f6a4 <_ZN4tama4Text19getTextureForLetterEc+0x564>
        case '4': return textureLoader->load(tama::asset::font::standard::Four);
 800f5b4:	68bb      	ldr	r3, [r7, #8]
 800f5b6:	3304      	adds	r3, #4
 800f5b8:	4618      	mov	r0, r3
 800f5ba:	f000 fa04 	bl	800f9c6 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 800f5be:	4601      	mov	r1, r0
 800f5c0:	680b      	ldr	r3, [r1, #0]
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	68f8      	ldr	r0, [r7, #12]
 800f5c6:	4a3d      	ldr	r2, [pc, #244]	; (800f6bc <_ZN4tama4Text19getTextureForLetterEc+0x57c>)
 800f5c8:	4798      	blx	r3
 800f5ca:	e06b      	b.n	800f6a4 <_ZN4tama4Text19getTextureForLetterEc+0x564>
        case '5': return textureLoader->load(tama::asset::font::standard::Five);
 800f5cc:	68bb      	ldr	r3, [r7, #8]
 800f5ce:	3304      	adds	r3, #4
 800f5d0:	4618      	mov	r0, r3
 800f5d2:	f000 f9f8 	bl	800f9c6 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 800f5d6:	4601      	mov	r1, r0
 800f5d8:	680b      	ldr	r3, [r1, #0]
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	68f8      	ldr	r0, [r7, #12]
 800f5de:	4a38      	ldr	r2, [pc, #224]	; (800f6c0 <_ZN4tama4Text19getTextureForLetterEc+0x580>)
 800f5e0:	4798      	blx	r3
 800f5e2:	e05f      	b.n	800f6a4 <_ZN4tama4Text19getTextureForLetterEc+0x564>
        case '6': return textureLoader->load(tama::asset::font::standard::Six);
 800f5e4:	68bb      	ldr	r3, [r7, #8]
 800f5e6:	3304      	adds	r3, #4
 800f5e8:	4618      	mov	r0, r3
 800f5ea:	f000 f9ec 	bl	800f9c6 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 800f5ee:	4601      	mov	r1, r0
 800f5f0:	680b      	ldr	r3, [r1, #0]
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	68f8      	ldr	r0, [r7, #12]
 800f5f6:	4a33      	ldr	r2, [pc, #204]	; (800f6c4 <_ZN4tama4Text19getTextureForLetterEc+0x584>)
 800f5f8:	4798      	blx	r3
 800f5fa:	e053      	b.n	800f6a4 <_ZN4tama4Text19getTextureForLetterEc+0x564>
        case '7': return textureLoader->load(tama::asset::font::standard::Seven);
 800f5fc:	68bb      	ldr	r3, [r7, #8]
 800f5fe:	3304      	adds	r3, #4
 800f600:	4618      	mov	r0, r3
 800f602:	f000 f9e0 	bl	800f9c6 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 800f606:	4601      	mov	r1, r0
 800f608:	680b      	ldr	r3, [r1, #0]
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	68f8      	ldr	r0, [r7, #12]
 800f60e:	4a2e      	ldr	r2, [pc, #184]	; (800f6c8 <_ZN4tama4Text19getTextureForLetterEc+0x588>)
 800f610:	4798      	blx	r3
 800f612:	e047      	b.n	800f6a4 <_ZN4tama4Text19getTextureForLetterEc+0x564>
        case '8': return textureLoader->load(tama::asset::font::standard::Eight);
 800f614:	68bb      	ldr	r3, [r7, #8]
 800f616:	3304      	adds	r3, #4
 800f618:	4618      	mov	r0, r3
 800f61a:	f000 f9d4 	bl	800f9c6 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 800f61e:	4601      	mov	r1, r0
 800f620:	680b      	ldr	r3, [r1, #0]
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	68f8      	ldr	r0, [r7, #12]
 800f626:	4a29      	ldr	r2, [pc, #164]	; (800f6cc <_ZN4tama4Text19getTextureForLetterEc+0x58c>)
 800f628:	4798      	blx	r3
 800f62a:	e03b      	b.n	800f6a4 <_ZN4tama4Text19getTextureForLetterEc+0x564>
        case '9': return textureLoader->load(tama::asset::font::standard::Nine);
 800f62c:	68bb      	ldr	r3, [r7, #8]
 800f62e:	3304      	adds	r3, #4
 800f630:	4618      	mov	r0, r3
 800f632:	f000 f9c8 	bl	800f9c6 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 800f636:	4601      	mov	r1, r0
 800f638:	680b      	ldr	r3, [r1, #0]
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	68f8      	ldr	r0, [r7, #12]
 800f63e:	4a24      	ldr	r2, [pc, #144]	; (800f6d0 <_ZN4tama4Text19getTextureForLetterEc+0x590>)
 800f640:	4798      	blx	r3
 800f642:	e02f      	b.n	800f6a4 <_ZN4tama4Text19getTextureForLetterEc+0x564>
        case ':': return textureLoader->load(tama::asset::font::standard::Colon);
 800f644:	68bb      	ldr	r3, [r7, #8]
 800f646:	3304      	adds	r3, #4
 800f648:	4618      	mov	r0, r3
 800f64a:	f000 f9bc 	bl	800f9c6 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 800f64e:	4601      	mov	r1, r0
 800f650:	680b      	ldr	r3, [r1, #0]
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	68f8      	ldr	r0, [r7, #12]
 800f656:	4a1f      	ldr	r2, [pc, #124]	; (800f6d4 <_ZN4tama4Text19getTextureForLetterEc+0x594>)
 800f658:	4798      	blx	r3
 800f65a:	e023      	b.n	800f6a4 <_ZN4tama4Text19getTextureForLetterEc+0x564>
        case '-': return textureLoader->load(tama::asset::font::standard::Dash);
 800f65c:	68bb      	ldr	r3, [r7, #8]
 800f65e:	3304      	adds	r3, #4
 800f660:	4618      	mov	r0, r3
 800f662:	f000 f9b0 	bl	800f9c6 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 800f666:	4601      	mov	r1, r0
 800f668:	680b      	ldr	r3, [r1, #0]
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	68f8      	ldr	r0, [r7, #12]
 800f66e:	4a1a      	ldr	r2, [pc, #104]	; (800f6d8 <_ZN4tama4Text19getTextureForLetterEc+0x598>)
 800f670:	4798      	blx	r3
 800f672:	e017      	b.n	800f6a4 <_ZN4tama4Text19getTextureForLetterEc+0x564>
        case '_': return textureLoader->load(tama::asset::font::standard::Underscore);
 800f674:	68bb      	ldr	r3, [r7, #8]
 800f676:	3304      	adds	r3, #4
 800f678:	4618      	mov	r0, r3
 800f67a:	f000 f9a4 	bl	800f9c6 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 800f67e:	4601      	mov	r1, r0
 800f680:	680b      	ldr	r3, [r1, #0]
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	68f8      	ldr	r0, [r7, #12]
 800f686:	4a15      	ldr	r2, [pc, #84]	; (800f6dc <_ZN4tama4Text19getTextureForLetterEc+0x59c>)
 800f688:	4798      	blx	r3
 800f68a:	e00b      	b.n	800f6a4 <_ZN4tama4Text19getTextureForLetterEc+0x564>
    }
    return std::make_shared<tama::Texture>(0, 0);
 800f68c:	2300      	movs	r3, #0
 800f68e:	613b      	str	r3, [r7, #16]
 800f690:	2300      	movs	r3, #0
 800f692:	617b      	str	r3, [r7, #20]
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	f107 0214 	add.w	r2, r7, #20
 800f69a:	f107 0110 	add.w	r1, r7, #16
 800f69e:	4618      	mov	r0, r3
 800f6a0:	f000 f9a8 	bl	800f9f4 <_ZSt11make_sharedIN4tama7TextureEJiiEESt10shared_ptrIT_EDpOT0_>
}
 800f6a4:	68f8      	ldr	r0, [r7, #12]
 800f6a6:	3718      	adds	r7, #24
 800f6a8:	46bd      	mov	sp, r7
 800f6aa:	bd80      	pop	{r7, pc}
 800f6ac:	20000218 	.word	0x20000218
 800f6b0:	20000224 	.word	0x20000224
 800f6b4:	20000230 	.word	0x20000230
 800f6b8:	2000023c 	.word	0x2000023c
 800f6bc:	20000248 	.word	0x20000248
 800f6c0:	20000254 	.word	0x20000254
 800f6c4:	20000260 	.word	0x20000260
 800f6c8:	2000026c 	.word	0x2000026c
 800f6cc:	20000278 	.word	0x20000278
 800f6d0:	20000284 	.word	0x20000284
 800f6d4:	200002a8 	.word	0x200002a8
 800f6d8:	2000029c 	.word	0x2000029c
 800f6dc:	20000290 	.word	0x20000290

0800f6e0 <_ZN4tama4Text21recalculateDimensionsEv>:

void tama::Text::recalculateDimensions()
{
 800f6e0:	b5b0      	push	{r4, r5, r7, lr}
 800f6e2:	b084      	sub	sp, #16
 800f6e4:	af00      	add	r7, sp, #0
 800f6e6:	6078      	str	r0, [r7, #4]
    dimensions.x = (size + 1) * text.size();
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f6ec:	1c5c      	adds	r4, r3, #1
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	3310      	adds	r3, #16
 800f6f2:	4618      	mov	r0, r3
 800f6f4:	f010 f9d9 	bl	801faaa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 800f6f8:	4603      	mov	r3, r0
 800f6fa:	fb03 f304 	mul.w	r3, r3, r4
 800f6fe:	461a      	mov	r2, r3
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	641a      	str	r2, [r3, #64]	; 0x40
    dimensions.y = (size + 1) * (std::count(text.begin(), text.end(), '\n') + 1) ;
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f708:	1c5c      	adds	r4, r3, #1
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	3310      	adds	r3, #16
 800f70e:	4618      	mov	r0, r3
 800f710:	f010 f9c5 	bl	801fa9e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5beginEv>
 800f714:	4605      	mov	r5, r0
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	3310      	adds	r3, #16
 800f71a:	4618      	mov	r0, r3
 800f71c:	f010 f9c1 	bl	801faa2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE3endEv>
 800f720:	4601      	mov	r1, r0
 800f722:	230a      	movs	r3, #10
 800f724:	73fb      	strb	r3, [r7, #15]
 800f726:	f107 030f 	add.w	r3, r7, #15
 800f72a:	461a      	mov	r2, r3
 800f72c:	4628      	mov	r0, r5
 800f72e:	f000 f983 	bl	800fa38 <_ZSt5countIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEcENSt15iterator_traitsIT_E15difference_typeESB_SB_RKT0_>
 800f732:	4603      	mov	r3, r0
 800f734:	3301      	adds	r3, #1
 800f736:	fb03 f304 	mul.w	r3, r3, r4
 800f73a:	461a      	mov	r2, r3
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	645a      	str	r2, [r3, #68]	; 0x44

}
 800f740:	bf00      	nop
 800f742:	3710      	adds	r7, #16
 800f744:	46bd      	mov	sp, r7
 800f746:	bdb0      	pop	{r4, r5, r7, pc}

0800f748 <_ZN4tama4TextC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS_5Vec2dE>:

tama::Text::Text(std::string text, Vec2d position):
 800f748:	b590      	push	{r4, r7, lr}
 800f74a:	b089      	sub	sp, #36	; 0x24
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	60f8      	str	r0, [r7, #12]
 800f750:	60b9      	str	r1, [r7, #8]
 800f752:	4639      	mov	r1, r7
 800f754:	e881 000c 	stmia.w	r1, {r2, r3}
        position(position), text(text)
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	4618      	mov	r0, r3
 800f75c:	f7ff f94c 	bl	800e9f8 <_ZN4tama8DrawableC1Ev>
 800f760:	4a2f      	ldr	r2, [pc, #188]	; (800f820 <_ZN4tama4TextC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS_5Vec2dE+0xd8>)
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	601a      	str	r2, [r3, #0]
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	3304      	adds	r3, #4
 800f76a:	4618      	mov	r0, r3
 800f76c:	f000 f874 	bl	800f858 <_ZNSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEC1IS3_vEEv>
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	3308      	adds	r3, #8
 800f774:	4618      	mov	r0, r3
 800f776:	f7ff f9ef 	bl	800eb58 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEC1Ev>
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	3310      	adds	r3, #16
 800f77e:	68b9      	ldr	r1, [r7, #8]
 800f780:	4618      	mov	r0, r3
 800f782:	f010 f999 	bl	801fab8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	3328      	adds	r3, #40	; 0x28
 800f78a:	4618      	mov	r0, r3
 800f78c:	f7ff f9fe 	bl	800eb8c <_ZNSt10shared_ptrIN4tama7TextureEEC1Ev>
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	2207      	movs	r2, #7
 800f794:	631a      	str	r2, [r3, #48]	; 0x30
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	2200      	movs	r2, #0
 800f79a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	3338      	adds	r3, #56	; 0x38
 800f7a2:	463a      	mov	r2, r7
 800f7a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f7a8:	e883 0003 	stmia.w	r3, {r0, r1}
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	3340      	adds	r3, #64	; 0x40
 800f7b0:	4618      	mov	r0, r3
 800f7b2:	f7ff f80d 	bl	800e7d0 <_ZN4tama5Vec2dC1Ev>
{
    textureLoader = std::make_unique<tama::Stm32TextureLoader>();
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	1d1c      	adds	r4, r3, #4
 800f7ba:	f107 0314 	add.w	r3, r7, #20
 800f7be:	4618      	mov	r0, r3
 800f7c0:	f000 f87c 	bl	800f8bc <_ZSt11make_uniqueIN4tama18Stm32TextureLoaderEJEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 800f7c4:	f107 0314 	add.w	r3, r7, #20
 800f7c8:	4619      	mov	r1, r3
 800f7ca:	4620      	mov	r0, r4
 800f7cc:	f000 f8ab 	bl	800f926 <_ZNSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEaSINS0_18Stm32TextureLoaderES2_IS6_EEENSt9enable_ifIXsrSt6__and_IJS9_IJSt14is_convertibleINS_IT_T0_E7pointerEPS1_ESt6__not_ISt8is_arrayISB_EESt5__or_IJS9_IJSt12is_referenceIS3_ESt7is_sameIS3_SC_EEES9_IJSH_ISN_ESA_ISC_S3_EEEEEEESt13is_assignableIRS3_OSC_EEE5valueERS4_E4typeEOSD_>
 800f7d0:	f107 0314 	add.w	r3, r7, #20
 800f7d4:	4618      	mov	r0, r3
 800f7d6:	f000 f887 	bl	800f8e8 <_ZNSt10unique_ptrIN4tama18Stm32TextureLoaderESt14default_deleteIS1_EED1Ev>
    observer = nullptr;
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	f103 0408 	add.w	r4, r3, #8
 800f7e0:	f107 0318 	add.w	r3, r7, #24
 800f7e4:	2100      	movs	r1, #0
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	f7ff f9c3 	bl	800eb72 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEC1EDn>
 800f7ec:	f107 0318 	add.w	r3, r7, #24
 800f7f0:	4619      	mov	r1, r3
 800f7f2:	4620      	mov	r0, r4
 800f7f4:	f7f6 f987 	bl	8005b06 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEaSEOS2_>
 800f7f8:	f107 0318 	add.w	r3, r7, #24
 800f7fc:	4618      	mov	r0, r3
 800f7fe:	f7f5 f858 	bl	80048b2 <_ZNSt10shared_ptrIN4tama14ChangeObserverEED1Ev>
    visible = true;
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	2201      	movs	r2, #1
 800f806:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    recalculateDimensions();
 800f80a:	68f8      	ldr	r0, [r7, #12]
 800f80c:	f7ff ff68 	bl	800f6e0 <_ZN4tama4Text21recalculateDimensionsEv>
    updateTexture();
 800f810:	68f8      	ldr	r0, [r7, #12]
 800f812:	f7ff fc04 	bl	800f01e <_ZN4tama4Text13updateTextureEv>
}
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	4618      	mov	r0, r3
 800f81a:	3724      	adds	r7, #36	; 0x24
 800f81c:	46bd      	mov	sp, r7
 800f81e:	bd90      	pop	{r4, r7, pc}
 800f820:	080247cc 	.word	0x080247cc

0800f824 <_ZNSt5tupleIJPN4tama13TextureLoaderESt14default_deleteIS1_EEEC1IS2_S4_Lb1EEEv>:
      constexpr tuple()
 800f824:	b580      	push	{r7, lr}
 800f826:	b082      	sub	sp, #8
 800f828:	af00      	add	r7, sp, #0
 800f82a:	6078      	str	r0, [r7, #4]
      : _Inherited() { }
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	4618      	mov	r0, r3
 800f830:	f000 f916 	bl	800fa60 <_ZNSt11_Tuple_implILj0EJPN4tama13TextureLoaderESt14default_deleteIS1_EEEC1Ev>
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	4618      	mov	r0, r3
 800f838:	3708      	adds	r7, #8
 800f83a:	46bd      	mov	sp, r7
 800f83c:	bd80      	pop	{r7, pc}

0800f83e <_ZNSt15__uniq_ptr_implIN4tama13TextureLoaderESt14default_deleteIS1_EEC1Ev>:
      __uniq_ptr_impl() = default;
 800f83e:	b580      	push	{r7, lr}
 800f840:	b082      	sub	sp, #8
 800f842:	af00      	add	r7, sp, #0
 800f844:	6078      	str	r0, [r7, #4]
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	4618      	mov	r0, r3
 800f84a:	f7ff ffeb 	bl	800f824 <_ZNSt5tupleIJPN4tama13TextureLoaderESt14default_deleteIS1_EEEC1IS2_S4_Lb1EEEv>
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	4618      	mov	r0, r3
 800f852:	3708      	adds	r7, #8
 800f854:	46bd      	mov	sp, r7
 800f856:	bd80      	pop	{r7, pc}

0800f858 <_ZNSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEC1IS3_vEEv>:
	constexpr unique_ptr() noexcept
 800f858:	b580      	push	{r7, lr}
 800f85a:	b082      	sub	sp, #8
 800f85c:	af00      	add	r7, sp, #0
 800f85e:	6078      	str	r0, [r7, #4]
	: _M_t()
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	2200      	movs	r2, #0
 800f864:	601a      	str	r2, [r3, #0]
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	4618      	mov	r0, r3
 800f86a:	f7ff ffe8 	bl	800f83e <_ZNSt15__uniq_ptr_implIN4tama13TextureLoaderESt14default_deleteIS1_EEC1Ev>
        { }
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	4618      	mov	r0, r3
 800f872:	3708      	adds	r7, #8
 800f874:	46bd      	mov	sp, r7
 800f876:	bd80      	pop	{r7, pc}

0800f878 <_ZN4tama13TextureLoaderC1Ev>:
#include "../../../../assets/texture-asset.h"
#include <memory>

namespace tama
{
    class TextureLoader
 800f878:	b480      	push	{r7}
 800f87a:	b083      	sub	sp, #12
 800f87c:	af00      	add	r7, sp, #0
 800f87e:	6078      	str	r0, [r7, #4]
 800f880:	4a04      	ldr	r2, [pc, #16]	; (800f894 <_ZN4tama13TextureLoaderC1Ev+0x1c>)
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	601a      	str	r2, [r3, #0]
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	4618      	mov	r0, r3
 800f88a:	370c      	adds	r7, #12
 800f88c:	46bd      	mov	sp, r7
 800f88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f892:	4770      	bx	lr
 800f894:	080247f8 	.word	0x080247f8

0800f898 <_ZN4tama18Stm32TextureLoaderC1Ev>:
#include "../../Core/ui/display/drawable/texture-loader/TextureLoader.h"
#include "../nokia5110-display-data-manager/Nokia5110DisplayDataManager.h"

namespace tama
{
    class Stm32TextureLoader : public TextureLoader
 800f898:	b580      	push	{r7, lr}
 800f89a:	b082      	sub	sp, #8
 800f89c:	af00      	add	r7, sp, #0
 800f89e:	6078      	str	r0, [r7, #4]
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	f7ff ffe8 	bl	800f878 <_ZN4tama13TextureLoaderC1Ev>
 800f8a8:	4a03      	ldr	r2, [pc, #12]	; (800f8b8 <_ZN4tama18Stm32TextureLoaderC1Ev+0x20>)
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	601a      	str	r2, [r3, #0]
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	4618      	mov	r0, r3
 800f8b2:	3708      	adds	r7, #8
 800f8b4:	46bd      	mov	sp, r7
 800f8b6:	bd80      	pop	{r7, pc}
 800f8b8:	0802495c 	.word	0x0802495c

0800f8bc <_ZSt11make_uniqueIN4tama18Stm32TextureLoaderEJEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>:
    { struct __invalid_type { }; };

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
 800f8bc:	b590      	push	{r4, r7, lr}
 800f8be:	b083      	sub	sp, #12
 800f8c0:	af00      	add	r7, sp, #0
 800f8c2:	6078      	str	r0, [r7, #4]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 800f8c4:	2004      	movs	r0, #4
 800f8c6:	f00f fffa 	bl	801f8be <_Znwj>
 800f8ca:	4603      	mov	r3, r0
 800f8cc:	461c      	mov	r4, r3
 800f8ce:	2300      	movs	r3, #0
 800f8d0:	6023      	str	r3, [r4, #0]
 800f8d2:	4620      	mov	r0, r4
 800f8d4:	f7ff ffe0 	bl	800f898 <_ZN4tama18Stm32TextureLoaderC1Ev>
 800f8d8:	4621      	mov	r1, r4
 800f8da:	6878      	ldr	r0, [r7, #4]
 800f8dc:	f000 f8d0 	bl	800fa80 <_ZNSt10unique_ptrIN4tama18Stm32TextureLoaderESt14default_deleteIS1_EEC1IS3_vEEPS1_>
 800f8e0:	6878      	ldr	r0, [r7, #4]
 800f8e2:	370c      	adds	r7, #12
 800f8e4:	46bd      	mov	sp, r7
 800f8e6:	bd90      	pop	{r4, r7, pc}

0800f8e8 <_ZNSt10unique_ptrIN4tama18Stm32TextureLoaderESt14default_deleteIS1_EED1Ev>:
      ~unique_ptr() noexcept
 800f8e8:	b580      	push	{r7, lr}
 800f8ea:	b084      	sub	sp, #16
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	4618      	mov	r0, r3
 800f8f4:	f000 f8d3 	bl	800fa9e <_ZNSt15__uniq_ptr_implIN4tama18Stm32TextureLoaderESt14default_deleteIS1_EE6_M_ptrEv>
 800f8f8:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d009      	beq.n	800f916 <_ZNSt10unique_ptrIN4tama18Stm32TextureLoaderESt14default_deleteIS1_EED1Ev+0x2e>
	  get_deleter()(__ptr);
 800f902:	6878      	ldr	r0, [r7, #4]
 800f904:	f000 f8d8 	bl	800fab8 <_ZNSt10unique_ptrIN4tama18Stm32TextureLoaderESt14default_deleteIS1_EE11get_deleterEv>
 800f908:	4602      	mov	r2, r0
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	4619      	mov	r1, r3
 800f910:	4610      	mov	r0, r2
 800f912:	f000 f8de 	bl	800fad2 <_ZNKSt14default_deleteIN4tama18Stm32TextureLoaderEEclEPS1_>
	__ptr = pointer();
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	2200      	movs	r2, #0
 800f91a:	601a      	str	r2, [r3, #0]
      }
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	4618      	mov	r0, r3
 800f920:	3710      	adds	r7, #16
 800f922:	46bd      	mov	sp, r7
 800f924:	bd80      	pop	{r7, pc}

0800f926 <_ZNSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEaSINS0_18Stm32TextureLoaderES2_IS6_EEENSt9enable_ifIXsrSt6__and_IJS9_IJSt14is_convertibleINS_IT_T0_E7pointerEPS1_ESt6__not_ISt8is_arrayISB_EESt5__or_IJS9_IJSt12is_referenceIS3_ESt7is_sameIS3_SC_EEES9_IJSH_ISN_ESA_ISC_S3_EEEEEEESt13is_assignableIRS3_OSC_EEE5valueERS4_E4typeEOSD_>:
	operator=(unique_ptr<_Up, _Ep>&& __u) noexcept
 800f926:	b580      	push	{r7, lr}
 800f928:	b084      	sub	sp, #16
 800f92a:	af00      	add	r7, sp, #0
 800f92c:	6078      	str	r0, [r7, #4]
 800f92e:	6039      	str	r1, [r7, #0]
	  reset(__u.release());
 800f930:	6838      	ldr	r0, [r7, #0]
 800f932:	f000 f8db 	bl	800faec <_ZNSt10unique_ptrIN4tama18Stm32TextureLoaderESt14default_deleteIS1_EE7releaseEv>
 800f936:	4603      	mov	r3, r0
 800f938:	4619      	mov	r1, r3
 800f93a:	6878      	ldr	r0, [r7, #4]
 800f93c:	f7f6 f98e 	bl	8005c5c <_ZNSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EE5resetEPS1_>
	  get_deleter() = std::forward<_Ep>(__u.get_deleter());
 800f940:	6838      	ldr	r0, [r7, #0]
 800f942:	f000 f8b9 	bl	800fab8 <_ZNSt10unique_ptrIN4tama18Stm32TextureLoaderESt14default_deleteIS1_EE11get_deleterEv>
 800f946:	4603      	mov	r3, r0
 800f948:	4618      	mov	r0, r3
 800f94a:	f000 f8e3 	bl	800fb14 <_ZSt7forwardISt14default_deleteIN4tama18Stm32TextureLoaderEEEOT_RNSt16remove_referenceIS4_E4typeE>
 800f94e:	4602      	mov	r2, r0
 800f950:	f107 030c 	add.w	r3, r7, #12
 800f954:	4611      	mov	r1, r2
 800f956:	4618      	mov	r0, r3
 800f958:	f000 f8e7 	bl	800fb2a <_ZNSt14default_deleteIN4tama13TextureLoaderEEC1INS0_18Stm32TextureLoaderEvEERKS_IT_E>
 800f95c:	6878      	ldr	r0, [r7, #4]
 800f95e:	f7f5 fd94 	bl	800548a <_ZNSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EE11get_deleterEv>
	  return *this;
 800f962:	687b      	ldr	r3, [r7, #4]
	}
 800f964:	4618      	mov	r0, r3
 800f966:	3710      	adds	r7, #16
 800f968:	46bd      	mov	sp, r7
 800f96a:	bd80      	pop	{r7, pc}

0800f96c <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f96c:	b480      	push	{r7}
 800f96e:	b083      	sub	sp, #12
 800f970:	af00      	add	r7, sp, #0
 800f972:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	4618      	mov	r0, r3
 800f978:	370c      	adds	r7, #12
 800f97a:	46bd      	mov	sp, r7
 800f97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f980:	4770      	bx	lr

0800f982 <_ZSt11make_sharedIN4tama7TextureEJRiS2_EESt10shared_ptrIT_EDpOT0_>:
    make_shared(_Args&&... __args)
 800f982:	b590      	push	{r4, r7, lr}
 800f984:	b087      	sub	sp, #28
 800f986:	af00      	add	r7, sp, #0
 800f988:	60f8      	str	r0, [r7, #12]
 800f98a:	60b9      	str	r1, [r7, #8]
 800f98c:	607a      	str	r2, [r7, #4]
				       std::forward<_Args>(__args)...);
 800f98e:	f107 0314 	add.w	r3, r7, #20
 800f992:	4618      	mov	r0, r3
 800f994:	f000 f8d5 	bl	800fb42 <_ZNSaIN4tama7TextureEEC1Ev>
 800f998:	68b8      	ldr	r0, [r7, #8]
 800f99a:	f7ff ffe7 	bl	800f96c <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 800f99e:	4604      	mov	r4, r0
 800f9a0:	6878      	ldr	r0, [r7, #4]
 800f9a2:	f7ff ffe3 	bl	800f96c <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 800f9a6:	4603      	mov	r3, r0
 800f9a8:	68f8      	ldr	r0, [r7, #12]
 800f9aa:	f107 0114 	add.w	r1, r7, #20
 800f9ae:	4622      	mov	r2, r4
 800f9b0:	f000 f8df 	bl	800fb72 <_ZSt15allocate_sharedIN4tama7TextureESaIS1_EJRiS3_EESt10shared_ptrIT_ERKT0_DpOT1_>
 800f9b4:	f107 0314 	add.w	r3, r7, #20
 800f9b8:	4618      	mov	r0, r3
 800f9ba:	f000 f8ce 	bl	800fb5a <_ZNSaIN4tama7TextureEED1Ev>
    }
 800f9be:	68f8      	ldr	r0, [r7, #12]
 800f9c0:	371c      	adds	r7, #28
 800f9c2:	46bd      	mov	sp, r7
 800f9c4:	bd90      	pop	{r4, r7, pc}

0800f9c6 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>:
      operator->() const noexcept
 800f9c6:	b580      	push	{r7, lr}
 800f9c8:	b082      	sub	sp, #8
 800f9ca:	af00      	add	r7, sp, #0
 800f9cc:	6078      	str	r0, [r7, #4]
	return get();
 800f9ce:	6878      	ldr	r0, [r7, #4]
 800f9d0:	f7f6 fa37 	bl	8005e42 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EE3getEv>
 800f9d4:	4603      	mov	r3, r0
      }
 800f9d6:	4618      	mov	r0, r3
 800f9d8:	3708      	adds	r7, #8
 800f9da:	46bd      	mov	sp, r7
 800f9dc:	bd80      	pop	{r7, pc}

0800f9de <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f9de:	b480      	push	{r7}
 800f9e0:	b083      	sub	sp, #12
 800f9e2:	af00      	add	r7, sp, #0
 800f9e4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	4618      	mov	r0, r3
 800f9ea:	370c      	adds	r7, #12
 800f9ec:	46bd      	mov	sp, r7
 800f9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f2:	4770      	bx	lr

0800f9f4 <_ZSt11make_sharedIN4tama7TextureEJiiEESt10shared_ptrIT_EDpOT0_>:
    make_shared(_Args&&... __args)
 800f9f4:	b590      	push	{r4, r7, lr}
 800f9f6:	b087      	sub	sp, #28
 800f9f8:	af00      	add	r7, sp, #0
 800f9fa:	60f8      	str	r0, [r7, #12]
 800f9fc:	60b9      	str	r1, [r7, #8]
 800f9fe:	607a      	str	r2, [r7, #4]
				       std::forward<_Args>(__args)...);
 800fa00:	f107 0314 	add.w	r3, r7, #20
 800fa04:	4618      	mov	r0, r3
 800fa06:	f000 f89c 	bl	800fb42 <_ZNSaIN4tama7TextureEEC1Ev>
 800fa0a:	68b8      	ldr	r0, [r7, #8]
 800fa0c:	f7ff ffe7 	bl	800f9de <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 800fa10:	4604      	mov	r4, r0
 800fa12:	6878      	ldr	r0, [r7, #4]
 800fa14:	f7ff ffe3 	bl	800f9de <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 800fa18:	4603      	mov	r3, r0
 800fa1a:	68f8      	ldr	r0, [r7, #12]
 800fa1c:	f107 0114 	add.w	r1, r7, #20
 800fa20:	4622      	mov	r2, r4
 800fa22:	f000 f8c0 	bl	800fba6 <_ZSt15allocate_sharedIN4tama7TextureESaIS1_EJiiEESt10shared_ptrIT_ERKT0_DpOT1_>
 800fa26:	f107 0314 	add.w	r3, r7, #20
 800fa2a:	4618      	mov	r0, r3
 800fa2c:	f000 f895 	bl	800fb5a <_ZNSaIN4tama7TextureEED1Ev>
    }
 800fa30:	68f8      	ldr	r0, [r7, #12]
 800fa32:	371c      	adds	r7, #28
 800fa34:	46bd      	mov	sp, r7
 800fa36:	bd90      	pop	{r4, r7, pc}

0800fa38 <_ZSt5countIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEcENSt15iterator_traitsIT_E15difference_typeESB_SB_RKT0_>:
   *  @return   The number of iterators @c i in the range @p [__first,__last)
   *  for which @c *i == @p __value
  */
  template<typename _InputIterator, typename _Tp>
    inline typename iterator_traits<_InputIterator>::difference_type
    count(_InputIterator __first, _InputIterator __last, const _Tp& __value)
 800fa38:	b580      	push	{r7, lr}
 800fa3a:	b084      	sub	sp, #16
 800fa3c:	af00      	add	r7, sp, #0
 800fa3e:	60f8      	str	r0, [r7, #12]
 800fa40:	60b9      	str	r1, [r7, #8]
 800fa42:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
      __glibcxx_function_requires(_EqualOpConcept<
	    typename iterator_traits<_InputIterator>::value_type, _Tp>)
      __glibcxx_requires_valid_range(__first, __last);

      return std::__count_if(__first, __last,
 800fa44:	6878      	ldr	r0, [r7, #4]
 800fa46:	f000 f8c8 	bl	800fbda <_ZN9__gnu_cxx5__ops17__iter_equals_valIKcEENS0_16_Iter_equals_valIT_EERS4_>
 800fa4a:	4603      	mov	r3, r0
			     __gnu_cxx::__ops::__iter_equals_val(__value));
 800fa4c:	461a      	mov	r2, r3
 800fa4e:	68b9      	ldr	r1, [r7, #8]
 800fa50:	68f8      	ldr	r0, [r7, #12]
 800fa52:	f000 f8d1 	bl	800fbf8 <_ZSt10__count_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEENSt15iterator_traitsIT_E15difference_typeESF_SF_T0_>
 800fa56:	4603      	mov	r3, r0
    }
 800fa58:	4618      	mov	r0, r3
 800fa5a:	3710      	adds	r7, #16
 800fa5c:	46bd      	mov	sp, r7
 800fa5e:	bd80      	pop	{r7, pc}

0800fa60 <_ZNSt11_Tuple_implILj0EJPN4tama13TextureLoaderESt14default_deleteIS1_EEEC1Ev>:
      constexpr _Tuple_impl()
 800fa60:	b580      	push	{r7, lr}
 800fa62:	b082      	sub	sp, #8
 800fa64:	af00      	add	r7, sp, #0
 800fa66:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800fa68:	6878      	ldr	r0, [r7, #4]
 800fa6a:	f000 f8ee 	bl	800fc4a <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN4tama13TextureLoaderEEEEC1Ev>
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	4618      	mov	r0, r3
 800fa72:	f000 f8f6 	bl	800fc62 <_ZNSt10_Head_baseILj0EPN4tama13TextureLoaderELb0EEC1Ev>
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	4618      	mov	r0, r3
 800fa7a:	3708      	adds	r7, #8
 800fa7c:	46bd      	mov	sp, r7
 800fa7e:	bd80      	pop	{r7, pc}

0800fa80 <_ZNSt10unique_ptrIN4tama18Stm32TextureLoaderESt14default_deleteIS1_EEC1IS3_vEEPS1_>:
	unique_ptr(pointer __p) noexcept
 800fa80:	b580      	push	{r7, lr}
 800fa82:	b082      	sub	sp, #8
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	6078      	str	r0, [r7, #4]
 800fa88:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	6839      	ldr	r1, [r7, #0]
 800fa8e:	4618      	mov	r0, r3
 800fa90:	f000 f8f5 	bl	800fc7e <_ZNSt15__uniq_ptr_implIN4tama18Stm32TextureLoaderESt14default_deleteIS1_EEC1EPS1_>
        { }
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	4618      	mov	r0, r3
 800fa98:	3708      	adds	r7, #8
 800fa9a:	46bd      	mov	sp, r7
 800fa9c:	bd80      	pop	{r7, pc}

0800fa9e <_ZNSt15__uniq_ptr_implIN4tama18Stm32TextureLoaderESt14default_deleteIS1_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800fa9e:	b580      	push	{r7, lr}
 800faa0:	b082      	sub	sp, #8
 800faa2:	af00      	add	r7, sp, #0
 800faa4:	6078      	str	r0, [r7, #4]
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	4618      	mov	r0, r3
 800faaa:	f000 f8fc 	bl	800fca6 <_ZSt3getILj0EJPN4tama18Stm32TextureLoaderESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 800faae:	4603      	mov	r3, r0
 800fab0:	4618      	mov	r0, r3
 800fab2:	3708      	adds	r7, #8
 800fab4:	46bd      	mov	sp, r7
 800fab6:	bd80      	pop	{r7, pc}

0800fab8 <_ZNSt10unique_ptrIN4tama18Stm32TextureLoaderESt14default_deleteIS1_EE11get_deleterEv>:
      get_deleter() noexcept
 800fab8:	b580      	push	{r7, lr}
 800faba:	b082      	sub	sp, #8
 800fabc:	af00      	add	r7, sp, #0
 800fabe:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	4618      	mov	r0, r3
 800fac4:	f000 f8fc 	bl	800fcc0 <_ZNSt15__uniq_ptr_implIN4tama18Stm32TextureLoaderESt14default_deleteIS1_EE10_M_deleterEv>
 800fac8:	4603      	mov	r3, r0
 800faca:	4618      	mov	r0, r3
 800facc:	3708      	adds	r7, #8
 800face:	46bd      	mov	sp, r7
 800fad0:	bd80      	pop	{r7, pc}

0800fad2 <_ZNKSt14default_deleteIN4tama18Stm32TextureLoaderEEclEPS1_>:
      operator()(_Tp* __ptr) const
 800fad2:	b580      	push	{r7, lr}
 800fad4:	b082      	sub	sp, #8
 800fad6:	af00      	add	r7, sp, #0
 800fad8:	6078      	str	r0, [r7, #4]
 800fada:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800fadc:	2104      	movs	r1, #4
 800fade:	6838      	ldr	r0, [r7, #0]
 800fae0:	f00f feeb 	bl	801f8ba <_ZdlPvj>
      }
 800fae4:	bf00      	nop
 800fae6:	3708      	adds	r7, #8
 800fae8:	46bd      	mov	sp, r7
 800faea:	bd80      	pop	{r7, pc}

0800faec <_ZNSt10unique_ptrIN4tama18Stm32TextureLoaderESt14default_deleteIS1_EE7releaseEv>:
      release() noexcept
 800faec:	b580      	push	{r7, lr}
 800faee:	b084      	sub	sp, #16
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 800faf4:	6878      	ldr	r0, [r7, #4]
 800faf6:	f000 f8f0 	bl	800fcda <_ZNKSt10unique_ptrIN4tama18Stm32TextureLoaderESt14default_deleteIS1_EE3getEv>
 800fafa:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	4618      	mov	r0, r3
 800fb00:	f7ff ffcd 	bl	800fa9e <_ZNSt15__uniq_ptr_implIN4tama18Stm32TextureLoaderESt14default_deleteIS1_EE6_M_ptrEv>
 800fb04:	4602      	mov	r2, r0
 800fb06:	2300      	movs	r3, #0
 800fb08:	6013      	str	r3, [r2, #0]
	return __p;
 800fb0a:	68fb      	ldr	r3, [r7, #12]
      }
 800fb0c:	4618      	mov	r0, r3
 800fb0e:	3710      	adds	r7, #16
 800fb10:	46bd      	mov	sp, r7
 800fb12:	bd80      	pop	{r7, pc}

0800fb14 <_ZSt7forwardISt14default_deleteIN4tama18Stm32TextureLoaderEEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800fb14:	b480      	push	{r7}
 800fb16:	b083      	sub	sp, #12
 800fb18:	af00      	add	r7, sp, #0
 800fb1a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	4618      	mov	r0, r3
 800fb20:	370c      	adds	r7, #12
 800fb22:	46bd      	mov	sp, r7
 800fb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb28:	4770      	bx	lr

0800fb2a <_ZNSt14default_deleteIN4tama13TextureLoaderEEC1INS0_18Stm32TextureLoaderEvEERKS_IT_E>:
        default_delete(const default_delete<_Up>&) noexcept { }
 800fb2a:	b480      	push	{r7}
 800fb2c:	b083      	sub	sp, #12
 800fb2e:	af00      	add	r7, sp, #0
 800fb30:	6078      	str	r0, [r7, #4]
 800fb32:	6039      	str	r1, [r7, #0]
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	4618      	mov	r0, r3
 800fb38:	370c      	adds	r7, #12
 800fb3a:	46bd      	mov	sp, r7
 800fb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb40:	4770      	bx	lr

0800fb42 <_ZNSaIN4tama7TextureEEC1Ev>:
      allocator() throw() { }
 800fb42:	b580      	push	{r7, lr}
 800fb44:	b082      	sub	sp, #8
 800fb46:	af00      	add	r7, sp, #0
 800fb48:	6078      	str	r0, [r7, #4]
 800fb4a:	6878      	ldr	r0, [r7, #4]
 800fb4c:	f000 f8d2 	bl	800fcf4 <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEEC1Ev>
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	4618      	mov	r0, r3
 800fb54:	3708      	adds	r7, #8
 800fb56:	46bd      	mov	sp, r7
 800fb58:	bd80      	pop	{r7, pc}

0800fb5a <_ZNSaIN4tama7TextureEED1Ev>:
      ~allocator() throw() { }
 800fb5a:	b580      	push	{r7, lr}
 800fb5c:	b082      	sub	sp, #8
 800fb5e:	af00      	add	r7, sp, #0
 800fb60:	6078      	str	r0, [r7, #4]
 800fb62:	6878      	ldr	r0, [r7, #4]
 800fb64:	f000 f8d1 	bl	800fd0a <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEED1Ev>
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	4618      	mov	r0, r3
 800fb6c:	3708      	adds	r7, #8
 800fb6e:	46bd      	mov	sp, r7
 800fb70:	bd80      	pop	{r7, pc}

0800fb72 <_ZSt15allocate_sharedIN4tama7TextureESaIS1_EJRiS3_EESt10shared_ptrIT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 800fb72:	b5b0      	push	{r4, r5, r7, lr}
 800fb74:	b088      	sub	sp, #32
 800fb76:	af02      	add	r7, sp, #8
 800fb78:	60f8      	str	r0, [r7, #12]
 800fb7a:	60b9      	str	r1, [r7, #8]
 800fb7c:	607a      	str	r2, [r7, #4]
 800fb7e:	603b      	str	r3, [r7, #0]
			     std::forward<_Args>(__args)...);
 800fb80:	6878      	ldr	r0, [r7, #4]
 800fb82:	f7ff fef3 	bl	800f96c <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 800fb86:	4604      	mov	r4, r0
 800fb88:	6838      	ldr	r0, [r7, #0]
 800fb8a:	f7ff feef 	bl	800f96c <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 800fb8e:	4603      	mov	r3, r0
 800fb90:	9300      	str	r3, [sp, #0]
 800fb92:	4623      	mov	r3, r4
 800fb94:	68ba      	ldr	r2, [r7, #8]
 800fb96:	4629      	mov	r1, r5
 800fb98:	68f8      	ldr	r0, [r7, #12]
 800fb9a:	f000 f8c1 	bl	800fd20 <_ZNSt10shared_ptrIN4tama7TextureEEC1ISaIS1_EJRiS5_EEESt19_Sp_make_shared_tagRKT_DpOT0_>
    }
 800fb9e:	68f8      	ldr	r0, [r7, #12]
 800fba0:	3718      	adds	r7, #24
 800fba2:	46bd      	mov	sp, r7
 800fba4:	bdb0      	pop	{r4, r5, r7, pc}

0800fba6 <_ZSt15allocate_sharedIN4tama7TextureESaIS1_EJiiEESt10shared_ptrIT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 800fba6:	b5b0      	push	{r4, r5, r7, lr}
 800fba8:	b088      	sub	sp, #32
 800fbaa:	af02      	add	r7, sp, #8
 800fbac:	60f8      	str	r0, [r7, #12]
 800fbae:	60b9      	str	r1, [r7, #8]
 800fbb0:	607a      	str	r2, [r7, #4]
 800fbb2:	603b      	str	r3, [r7, #0]
			     std::forward<_Args>(__args)...);
 800fbb4:	6878      	ldr	r0, [r7, #4]
 800fbb6:	f7ff ff12 	bl	800f9de <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 800fbba:	4604      	mov	r4, r0
 800fbbc:	6838      	ldr	r0, [r7, #0]
 800fbbe:	f7ff ff0e 	bl	800f9de <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 800fbc2:	4603      	mov	r3, r0
 800fbc4:	9300      	str	r3, [sp, #0]
 800fbc6:	4623      	mov	r3, r4
 800fbc8:	68ba      	ldr	r2, [r7, #8]
 800fbca:	4629      	mov	r1, r5
 800fbcc:	68f8      	ldr	r0, [r7, #12]
 800fbce:	f000 f8c3 	bl	800fd58 <_ZNSt10shared_ptrIN4tama7TextureEEC1ISaIS1_EJiiEEESt19_Sp_make_shared_tagRKT_DpOT0_>
    }
 800fbd2:	68f8      	ldr	r0, [r7, #12]
 800fbd4:	3718      	adds	r7, #24
 800fbd6:	46bd      	mov	sp, r7
 800fbd8:	bdb0      	pop	{r4, r5, r7, pc}

0800fbda <_ZN9__gnu_cxx5__ops17__iter_equals_valIKcEENS0_16_Iter_equals_valIT_EERS4_>:
	{ return *__it == _M_value; }
    };

  template<typename _Value>
    inline _Iter_equals_val<_Value>
    __iter_equals_val(_Value& __val)
 800fbda:	b580      	push	{r7, lr}
 800fbdc:	b084      	sub	sp, #16
 800fbde:	af00      	add	r7, sp, #0
 800fbe0:	6078      	str	r0, [r7, #4]
    { return _Iter_equals_val<_Value>(__val); }
 800fbe2:	f107 030c 	add.w	r3, r7, #12
 800fbe6:	6879      	ldr	r1, [r7, #4]
 800fbe8:	4618      	mov	r0, r3
 800fbea:	f000 f8d1 	bl	800fd90 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEC1ERS2_>
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	4618      	mov	r0, r3
 800fbf2:	3710      	adds	r7, #16
 800fbf4:	46bd      	mov	sp, r7
 800fbf6:	bd80      	pop	{r7, pc}

0800fbf8 <_ZSt10__count_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEENSt15iterator_traitsIT_E15difference_typeESF_SF_T0_>:
    __count_if(_InputIterator __first, _InputIterator __last, _Predicate __pred)
 800fbf8:	b580      	push	{r7, lr}
 800fbfa:	b086      	sub	sp, #24
 800fbfc:	af00      	add	r7, sp, #0
 800fbfe:	60f8      	str	r0, [r7, #12]
 800fc00:	60b9      	str	r1, [r7, #8]
 800fc02:	607a      	str	r2, [r7, #4]
      typename iterator_traits<_InputIterator>::difference_type __n = 0;
 800fc04:	2300      	movs	r3, #0
 800fc06:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first)
 800fc08:	f107 0208 	add.w	r2, r7, #8
 800fc0c:	f107 030c 	add.w	r3, r7, #12
 800fc10:	4611      	mov	r1, r2
 800fc12:	4618      	mov	r0, r3
 800fc14:	f000 f8cb 	bl	800fdae <_ZN9__gnu_cxxneIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 800fc18:	4603      	mov	r3, r0
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d010      	beq.n	800fc40 <_ZSt10__count_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEENSt15iterator_traitsIT_E15difference_typeESF_SF_T0_+0x48>
	if (__pred(__first))
 800fc1e:	1d3b      	adds	r3, r7, #4
 800fc20:	68f9      	ldr	r1, [r7, #12]
 800fc22:	4618      	mov	r0, r3
 800fc24:	f000 f8eb 	bl	800fdfe <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEEbT_>
 800fc28:	4603      	mov	r3, r0
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d002      	beq.n	800fc34 <_ZSt10__count_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEENSt15iterator_traitsIT_E15difference_typeESF_SF_T0_+0x3c>
	  ++__n;
 800fc2e:	697b      	ldr	r3, [r7, #20]
 800fc30:	3301      	adds	r3, #1
 800fc32:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first)
 800fc34:	f107 030c 	add.w	r3, r7, #12
 800fc38:	4618      	mov	r0, r3
 800fc3a:	f000 f8d0 	bl	800fdde <_ZN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>
 800fc3e:	e7e3      	b.n	800fc08 <_ZSt10__count_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEENSt15iterator_traitsIT_E15difference_typeESF_SF_T0_+0x10>
      return __n;
 800fc40:	697b      	ldr	r3, [r7, #20]
    }
 800fc42:	4618      	mov	r0, r3
 800fc44:	3718      	adds	r7, #24
 800fc46:	46bd      	mov	sp, r7
 800fc48:	bd80      	pop	{r7, pc}

0800fc4a <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN4tama13TextureLoaderEEEEC1Ev>:
      constexpr _Tuple_impl()
 800fc4a:	b580      	push	{r7, lr}
 800fc4c:	b082      	sub	sp, #8
 800fc4e:	af00      	add	r7, sp, #0
 800fc50:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800fc52:	6878      	ldr	r0, [r7, #4]
 800fc54:	f000 f8ea 	bl	800fe2c <_ZNSt10_Head_baseILj1ESt14default_deleteIN4tama13TextureLoaderEELb1EEC1Ev>
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	4618      	mov	r0, r3
 800fc5c:	3708      	adds	r7, #8
 800fc5e:	46bd      	mov	sp, r7
 800fc60:	bd80      	pop	{r7, pc}

0800fc62 <_ZNSt10_Head_baseILj0EPN4tama13TextureLoaderELb0EEC1Ev>:
      constexpr _Head_base()
 800fc62:	b480      	push	{r7}
 800fc64:	b083      	sub	sp, #12
 800fc66:	af00      	add	r7, sp, #0
 800fc68:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	2200      	movs	r2, #0
 800fc6e:	601a      	str	r2, [r3, #0]
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	4618      	mov	r0, r3
 800fc74:	370c      	adds	r7, #12
 800fc76:	46bd      	mov	sp, r7
 800fc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc7c:	4770      	bx	lr

0800fc7e <_ZNSt15__uniq_ptr_implIN4tama18Stm32TextureLoaderESt14default_deleteIS1_EEC1EPS1_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800fc7e:	b580      	push	{r7, lr}
 800fc80:	b082      	sub	sp, #8
 800fc82:	af00      	add	r7, sp, #0
 800fc84:	6078      	str	r0, [r7, #4]
 800fc86:	6039      	str	r1, [r7, #0]
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	4618      	mov	r0, r3
 800fc8c:	f000 f8d9 	bl	800fe42 <_ZNSt5tupleIJPN4tama18Stm32TextureLoaderESt14default_deleteIS1_EEEC1IS2_S4_Lb1EEEv>
 800fc90:	6878      	ldr	r0, [r7, #4]
 800fc92:	f7ff ff04 	bl	800fa9e <_ZNSt15__uniq_ptr_implIN4tama18Stm32TextureLoaderESt14default_deleteIS1_EE6_M_ptrEv>
 800fc96:	4602      	mov	r2, r0
 800fc98:	683b      	ldr	r3, [r7, #0]
 800fc9a:	6013      	str	r3, [r2, #0]
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	4618      	mov	r0, r3
 800fca0:	3708      	adds	r7, #8
 800fca2:	46bd      	mov	sp, r7
 800fca4:	bd80      	pop	{r7, pc}

0800fca6 <_ZSt3getILj0EJPN4tama18Stm32TextureLoaderESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 800fca6:	b580      	push	{r7, lr}
 800fca8:	b082      	sub	sp, #8
 800fcaa:	af00      	add	r7, sp, #0
 800fcac:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	f000 f8d3 	bl	800fe5c <_ZSt12__get_helperILj0EPN4tama18Stm32TextureLoaderEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>
 800fcb6:	4603      	mov	r3, r0
 800fcb8:	4618      	mov	r0, r3
 800fcba:	3708      	adds	r7, #8
 800fcbc:	46bd      	mov	sp, r7
 800fcbe:	bd80      	pop	{r7, pc}

0800fcc0 <_ZNSt15__uniq_ptr_implIN4tama18Stm32TextureLoaderESt14default_deleteIS1_EE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 800fcc0:	b580      	push	{r7, lr}
 800fcc2:	b082      	sub	sp, #8
 800fcc4:	af00      	add	r7, sp, #0
 800fcc6:	6078      	str	r0, [r7, #4]
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	4618      	mov	r0, r3
 800fccc:	f000 f8d2 	bl	800fe74 <_ZSt3getILj1EJPN4tama18Stm32TextureLoaderESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 800fcd0:	4603      	mov	r3, r0
 800fcd2:	4618      	mov	r0, r3
 800fcd4:	3708      	adds	r7, #8
 800fcd6:	46bd      	mov	sp, r7
 800fcd8:	bd80      	pop	{r7, pc}

0800fcda <_ZNKSt10unique_ptrIN4tama18Stm32TextureLoaderESt14default_deleteIS1_EE3getEv>:
      get() const noexcept
 800fcda:	b580      	push	{r7, lr}
 800fcdc:	b082      	sub	sp, #8
 800fcde:	af00      	add	r7, sp, #0
 800fce0:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	4618      	mov	r0, r3
 800fce6:	f000 f8d1 	bl	800fe8c <_ZNKSt15__uniq_ptr_implIN4tama18Stm32TextureLoaderESt14default_deleteIS1_EE6_M_ptrEv>
 800fcea:	4603      	mov	r3, r0
 800fcec:	4618      	mov	r0, r3
 800fcee:	3708      	adds	r7, #8
 800fcf0:	46bd      	mov	sp, r7
 800fcf2:	bd80      	pop	{r7, pc}

0800fcf4 <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800fcf4:	b480      	push	{r7}
 800fcf6:	b083      	sub	sp, #12
 800fcf8:	af00      	add	r7, sp, #0
 800fcfa:	6078      	str	r0, [r7, #4]
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	4618      	mov	r0, r3
 800fd00:	370c      	adds	r7, #12
 800fd02:	46bd      	mov	sp, r7
 800fd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd08:	4770      	bx	lr

0800fd0a <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800fd0a:	b480      	push	{r7}
 800fd0c:	b083      	sub	sp, #12
 800fd0e:	af00      	add	r7, sp, #0
 800fd10:	6078      	str	r0, [r7, #4]
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	4618      	mov	r0, r3
 800fd16:	370c      	adds	r7, #12
 800fd18:	46bd      	mov	sp, r7
 800fd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd1e:	4770      	bx	lr

0800fd20 <_ZNSt10shared_ptrIN4tama7TextureEEC1ISaIS1_EJRiS5_EEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 800fd20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd22:	b087      	sub	sp, #28
 800fd24:	af02      	add	r7, sp, #8
 800fd26:	60f8      	str	r0, [r7, #12]
 800fd28:	7239      	strb	r1, [r7, #8]
 800fd2a:	607a      	str	r2, [r7, #4]
 800fd2c:	603b      	str	r3, [r7, #0]
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
 800fd2e:	68fc      	ldr	r4, [r7, #12]
 800fd30:	6838      	ldr	r0, [r7, #0]
 800fd32:	f7ff fe1b 	bl	800f96c <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 800fd36:	4605      	mov	r5, r0
 800fd38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fd3a:	f7ff fe17 	bl	800f96c <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 800fd3e:	4603      	mov	r3, r0
 800fd40:	9300      	str	r3, [sp, #0]
 800fd42:	462b      	mov	r3, r5
 800fd44:	687a      	ldr	r2, [r7, #4]
 800fd46:	4631      	mov	r1, r6
 800fd48:	4620      	mov	r0, r4
 800fd4a:	f000 f8ca 	bl	800fee2 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJRiS7_EEESt19_Sp_make_shared_tagRKT_DpOT0_>
	{ }
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	4618      	mov	r0, r3
 800fd52:	3714      	adds	r7, #20
 800fd54:	46bd      	mov	sp, r7
 800fd56:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fd58 <_ZNSt10shared_ptrIN4tama7TextureEEC1ISaIS1_EJiiEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 800fd58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd5a:	b087      	sub	sp, #28
 800fd5c:	af02      	add	r7, sp, #8
 800fd5e:	60f8      	str	r0, [r7, #12]
 800fd60:	7239      	strb	r1, [r7, #8]
 800fd62:	607a      	str	r2, [r7, #4]
 800fd64:	603b      	str	r3, [r7, #0]
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
 800fd66:	68fc      	ldr	r4, [r7, #12]
 800fd68:	6838      	ldr	r0, [r7, #0]
 800fd6a:	f7ff fe38 	bl	800f9de <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 800fd6e:	4605      	mov	r5, r0
 800fd70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fd72:	f7ff fe34 	bl	800f9de <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 800fd76:	4603      	mov	r3, r0
 800fd78:	9300      	str	r3, [sp, #0]
 800fd7a:	462b      	mov	r3, r5
 800fd7c:	687a      	ldr	r2, [r7, #4]
 800fd7e:	4631      	mov	r1, r6
 800fd80:	4620      	mov	r0, r4
 800fd82:	f000 f92d 	bl	800ffe0 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJiiEEESt19_Sp_make_shared_tagRKT_DpOT0_>
	{ }
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	4618      	mov	r0, r3
 800fd8a:	3714      	adds	r7, #20
 800fd8c:	46bd      	mov	sp, r7
 800fd8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fd90 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEC1ERS2_>:
      _Iter_equals_val(_Value& __value)
 800fd90:	b480      	push	{r7}
 800fd92:	b083      	sub	sp, #12
 800fd94:	af00      	add	r7, sp, #0
 800fd96:	6078      	str	r0, [r7, #4]
 800fd98:	6039      	str	r1, [r7, #0]
	: _M_value(__value)
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	683a      	ldr	r2, [r7, #0]
 800fd9e:	601a      	str	r2, [r3, #0]
      { }
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	4618      	mov	r0, r3
 800fda4:	370c      	adds	r7, #12
 800fda6:	46bd      	mov	sp, r7
 800fda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdac:	4770      	bx	lr

0800fdae <_ZN9__gnu_cxxneIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 800fdae:	b590      	push	{r4, r7, lr}
 800fdb0:	b083      	sub	sp, #12
 800fdb2:	af00      	add	r7, sp, #0
 800fdb4:	6078      	str	r0, [r7, #4]
 800fdb6:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 800fdb8:	6878      	ldr	r0, [r7, #4]
 800fdba:	f000 f990 	bl	80100de <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 800fdbe:	4603      	mov	r3, r0
 800fdc0:	681c      	ldr	r4, [r3, #0]
 800fdc2:	6838      	ldr	r0, [r7, #0]
 800fdc4:	f000 f98b 	bl	80100de <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 800fdc8:	4603      	mov	r3, r0
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	429c      	cmp	r4, r3
 800fdce:	bf14      	ite	ne
 800fdd0:	2301      	movne	r3, #1
 800fdd2:	2300      	moveq	r3, #0
 800fdd4:	b2db      	uxtb	r3, r3
 800fdd6:	4618      	mov	r0, r3
 800fdd8:	370c      	adds	r7, #12
 800fdda:	46bd      	mov	sp, r7
 800fddc:	bd90      	pop	{r4, r7, pc}

0800fdde <_ZN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800fdde:	b480      	push	{r7}
 800fde0:	b083      	sub	sp, #12
 800fde2:	af00      	add	r7, sp, #0
 800fde4:	6078      	str	r0, [r7, #4]
	++_M_current;
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	1c5a      	adds	r2, r3, #1
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	601a      	str	r2, [r3, #0]
	return *this;
 800fdf0:	687b      	ldr	r3, [r7, #4]
      }
 800fdf2:	4618      	mov	r0, r3
 800fdf4:	370c      	adds	r7, #12
 800fdf6:	46bd      	mov	sp, r7
 800fdf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdfc:	4770      	bx	lr

0800fdfe <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEEbT_>:
	operator()(_Iterator __it)
 800fdfe:	b580      	push	{r7, lr}
 800fe00:	b082      	sub	sp, #8
 800fe02:	af00      	add	r7, sp, #0
 800fe04:	6078      	str	r0, [r7, #4]
 800fe06:	6039      	str	r1, [r7, #0]
	{ return *__it == _M_value; }
 800fe08:	463b      	mov	r3, r7
 800fe0a:	4618      	mov	r0, r3
 800fe0c:	f000 f972 	bl	80100f4 <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>
 800fe10:	4603      	mov	r3, r0
 800fe12:	781a      	ldrb	r2, [r3, #0]
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	781b      	ldrb	r3, [r3, #0]
 800fe1a:	429a      	cmp	r2, r3
 800fe1c:	bf0c      	ite	eq
 800fe1e:	2301      	moveq	r3, #1
 800fe20:	2300      	movne	r3, #0
 800fe22:	b2db      	uxtb	r3, r3
 800fe24:	4618      	mov	r0, r3
 800fe26:	3708      	adds	r7, #8
 800fe28:	46bd      	mov	sp, r7
 800fe2a:	bd80      	pop	{r7, pc}

0800fe2c <_ZNSt10_Head_baseILj1ESt14default_deleteIN4tama13TextureLoaderEELb1EEC1Ev>:
      constexpr _Head_base()
 800fe2c:	b480      	push	{r7}
 800fe2e:	b083      	sub	sp, #12
 800fe30:	af00      	add	r7, sp, #0
 800fe32:	6078      	str	r0, [r7, #4]
      : _Head() { }
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	4618      	mov	r0, r3
 800fe38:	370c      	adds	r7, #12
 800fe3a:	46bd      	mov	sp, r7
 800fe3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe40:	4770      	bx	lr

0800fe42 <_ZNSt5tupleIJPN4tama18Stm32TextureLoaderESt14default_deleteIS1_EEEC1IS2_S4_Lb1EEEv>:
      constexpr tuple()
 800fe42:	b580      	push	{r7, lr}
 800fe44:	b082      	sub	sp, #8
 800fe46:	af00      	add	r7, sp, #0
 800fe48:	6078      	str	r0, [r7, #4]
      : _Inherited() { }
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	4618      	mov	r0, r3
 800fe4e:	f000 f95d 	bl	801010c <_ZNSt11_Tuple_implILj0EJPN4tama18Stm32TextureLoaderESt14default_deleteIS1_EEEC1Ev>
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	4618      	mov	r0, r3
 800fe56:	3708      	adds	r7, #8
 800fe58:	46bd      	mov	sp, r7
 800fe5a:	bd80      	pop	{r7, pc}

0800fe5c <_ZSt12__get_helperILj0EPN4tama18Stm32TextureLoaderEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800fe5c:	b580      	push	{r7, lr}
 800fe5e:	b082      	sub	sp, #8
 800fe60:	af00      	add	r7, sp, #0
 800fe62:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800fe64:	6878      	ldr	r0, [r7, #4]
 800fe66:	f000 f961 	bl	801012c <_ZNSt11_Tuple_implILj0EJPN4tama18Stm32TextureLoaderESt14default_deleteIS1_EEE7_M_headERS5_>
 800fe6a:	4603      	mov	r3, r0
 800fe6c:	4618      	mov	r0, r3
 800fe6e:	3708      	adds	r7, #8
 800fe70:	46bd      	mov	sp, r7
 800fe72:	bd80      	pop	{r7, pc}

0800fe74 <_ZSt3getILj1EJPN4tama18Stm32TextureLoaderESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 800fe74:	b580      	push	{r7, lr}
 800fe76:	b082      	sub	sp, #8
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800fe7c:	6878      	ldr	r0, [r7, #4]
 800fe7e:	f000 f962 	bl	8010146 <_ZSt12__get_helperILj1ESt14default_deleteIN4tama18Stm32TextureLoaderEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800fe82:	4603      	mov	r3, r0
 800fe84:	4618      	mov	r0, r3
 800fe86:	3708      	adds	r7, #8
 800fe88:	46bd      	mov	sp, r7
 800fe8a:	bd80      	pop	{r7, pc}

0800fe8c <_ZNKSt15__uniq_ptr_implIN4tama18Stm32TextureLoaderESt14default_deleteIS1_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800fe8c:	b580      	push	{r7, lr}
 800fe8e:	b082      	sub	sp, #8
 800fe90:	af00      	add	r7, sp, #0
 800fe92:	6078      	str	r0, [r7, #4]
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	4618      	mov	r0, r3
 800fe98:	f000 f961 	bl	801015e <_ZSt3getILj0EJPN4tama18Stm32TextureLoaderESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>
 800fe9c:	4603      	mov	r3, r0
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	4618      	mov	r0, r3
 800fea2:	3708      	adds	r7, #8
 800fea4:	46bd      	mov	sp, r7
 800fea6:	bd80      	pop	{r7, pc}

0800fea8 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>:
        struct _Deleter
 800fea8:	b580      	push	{r7, lr}
 800feaa:	b082      	sub	sp, #8
 800feac:	af00      	add	r7, sp, #0
 800feae:	6078      	str	r0, [r7, #4]
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	4618      	mov	r0, r3
 800feb4:	f7ff fe51 	bl	800fb5a <_ZNSaIN4tama7TextureEED1Ev>
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	4618      	mov	r0, r3
 800febc:	3708      	adds	r7, #8
 800febe:	46bd      	mov	sp, r7
 800fec0:	bd80      	pop	{r7, pc}

0800fec2 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>:
 800fec2:	b580      	push	{r7, lr}
 800fec4:	b082      	sub	sp, #8
 800fec6:	af00      	add	r7, sp, #0
 800fec8:	6078      	str	r0, [r7, #4]
 800feca:	6039      	str	r1, [r7, #0]
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	683a      	ldr	r2, [r7, #0]
 800fed0:	4611      	mov	r1, r2
 800fed2:	4618      	mov	r0, r3
 800fed4:	f000 f950 	bl	8010178 <_ZNSaIN4tama7TextureEEC1ERKS1_>
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	4618      	mov	r0, r3
 800fedc:	3708      	adds	r7, #8
 800fede:	46bd      	mov	sp, r7
 800fee0:	bd80      	pop	{r7, pc}

0800fee2 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJRiS7_EEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 800fee2:	b590      	push	{r4, r7, lr}
 800fee4:	b08d      	sub	sp, #52	; 0x34
 800fee6:	af00      	add	r7, sp, #0
 800fee8:	60f8      	str	r0, [r7, #12]
 800feea:	7239      	strb	r1, [r7, #8]
 800feec:	607a      	str	r2, [r7, #4]
 800feee:	603b      	str	r3, [r7, #0]
	: _M_ptr(), _M_refcount()
 800fef0:	68fb      	ldr	r3, [r7, #12]
 800fef2:	2200      	movs	r2, #0
 800fef4:	601a      	str	r2, [r3, #0]
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	3304      	adds	r3, #4
 800fefa:	4618      	mov	r0, r3
 800fefc:	f7f4 f837 	bl	8003f6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 800ff00:	f107 0320 	add.w	r3, r7, #32
 800ff04:	6879      	ldr	r1, [r7, #4]
 800ff06:	4618      	mov	r0, r3
 800ff08:	f000 f936 	bl	8010178 <_ZNSaIN4tama7TextureEEC1ERKS1_>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 800ff0c:	f107 0318 	add.w	r3, r7, #24
 800ff10:	f107 0220 	add.w	r2, r7, #32
 800ff14:	4611      	mov	r1, r2
 800ff16:	4618      	mov	r0, r3
 800ff18:	f000 f93c 	bl	8010194 <_ZSt18__allocate_guardedISaIN4tama7TextureEEESt15__allocated_ptrIT_ERS4_>
	  auto __ptr = __guard.get();
 800ff1c:	f107 0318 	add.w	r3, r7, #24
 800ff20:	4618      	mov	r0, r3
 800ff22:	f000 f95f 	bl	80101e4 <_ZNSt15__allocated_ptrISaIN4tama7TextureEEE3getEv>
 800ff26:	62f8      	str	r0, [r7, #44]	; 0x2c
	  __traits::construct(__del._M_alloc, __ptr,
 800ff28:	6838      	ldr	r0, [r7, #0]
 800ff2a:	f7ff fd1f 	bl	800f96c <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 800ff2e:	4604      	mov	r4, r0
 800ff30:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800ff32:	f7ff fd1b 	bl	800f96c <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 800ff36:	4603      	mov	r3, r0
 800ff38:	f107 0020 	add.w	r0, r7, #32
 800ff3c:	4622      	mov	r2, r4
 800ff3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ff40:	f000 f95e 	bl	8010200 <_ZNSt16allocator_traitsISaIN4tama7TextureEEE9constructIS1_JRiS5_EEEvRS2_PT_DpOT0_>
	  __guard = nullptr;
 800ff44:	f107 0318 	add.w	r3, r7, #24
 800ff48:	2100      	movs	r1, #0
 800ff4a:	4618      	mov	r0, r3
 800ff4c:	f000 f970 	bl	8010230 <_ZNSt15__allocated_ptrISaIN4tama7TextureEEEaSEDn>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 800ff50:	f107 0220 	add.w	r2, r7, #32
 800ff54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ff58:	4611      	mov	r1, r2
 800ff5a:	4618      	mov	r0, r3
 800ff5c:	f7ff ffb1 	bl	800fec2 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>
 800ff60:	f107 0220 	add.w	r2, r7, #32
 800ff64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ff68:	4611      	mov	r1, r2
 800ff6a:	4618      	mov	r0, r3
 800ff6c:	f000 f904 	bl	8010178 <_ZNSaIN4tama7TextureEEC1ERKS1_>
 800ff70:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ff74:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800ff78:	f107 0014 	add.w	r0, r7, #20
 800ff7c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ff7e:	f000 f98c 	bl	801029a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama7TextureENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
 800ff82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ff86:	4618      	mov	r0, r3
 800ff88:	f7ff fde7 	bl	800fb5a <_ZNSaIN4tama7TextureEED1Ev>
 800ff8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ff90:	4618      	mov	r0, r3
 800ff92:	f7ff ff89 	bl	800fea8 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	  _M_refcount._M_swap(__count);
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	3304      	adds	r3, #4
 800ff9a:	f107 0214 	add.w	r2, r7, #20
 800ff9e:	4611      	mov	r1, r2
 800ffa0:	4618      	mov	r0, r3
 800ffa2:	f7f4 f8ed 	bl	8004180 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  _M_ptr = __ptr;
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ffaa:	601a      	str	r2, [r3, #0]
	  _M_enable_shared_from_this_with(_M_ptr);
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	4619      	mov	r1, r3
 800ffb2:	68f8      	ldr	r0, [r7, #12]
 800ffb4:	f000 f9c8 	bl	8010348 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 800ffb8:	f107 0314 	add.w	r3, r7, #20
 800ffbc:	4618      	mov	r0, r3
 800ffbe:	f7f3 f8a8 	bl	8003112 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 800ffc2:	f107 0318 	add.w	r3, r7, #24
 800ffc6:	4618      	mov	r0, r3
 800ffc8:	f000 f8f7 	bl	80101ba <_ZNSt15__allocated_ptrISaIN4tama7TextureEEED1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 800ffcc:	f107 0320 	add.w	r3, r7, #32
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	f7ff ff69 	bl	800fea8 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	}
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	4618      	mov	r0, r3
 800ffda:	3734      	adds	r7, #52	; 0x34
 800ffdc:	46bd      	mov	sp, r7
 800ffde:	bd90      	pop	{r4, r7, pc}

0800ffe0 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJiiEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 800ffe0:	b590      	push	{r4, r7, lr}
 800ffe2:	b08d      	sub	sp, #52	; 0x34
 800ffe4:	af00      	add	r7, sp, #0
 800ffe6:	60f8      	str	r0, [r7, #12]
 800ffe8:	7239      	strb	r1, [r7, #8]
 800ffea:	607a      	str	r2, [r7, #4]
 800ffec:	603b      	str	r3, [r7, #0]
	: _M_ptr(), _M_refcount()
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	2200      	movs	r2, #0
 800fff2:	601a      	str	r2, [r3, #0]
 800fff4:	68fb      	ldr	r3, [r7, #12]
 800fff6:	3304      	adds	r3, #4
 800fff8:	4618      	mov	r0, r3
 800fffa:	f7f3 ffb8 	bl	8003f6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 800fffe:	f107 0320 	add.w	r3, r7, #32
 8010002:	6879      	ldr	r1, [r7, #4]
 8010004:	4618      	mov	r0, r3
 8010006:	f000 f8b7 	bl	8010178 <_ZNSaIN4tama7TextureEEC1ERKS1_>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 801000a:	f107 0318 	add.w	r3, r7, #24
 801000e:	f107 0220 	add.w	r2, r7, #32
 8010012:	4611      	mov	r1, r2
 8010014:	4618      	mov	r0, r3
 8010016:	f000 f8bd 	bl	8010194 <_ZSt18__allocate_guardedISaIN4tama7TextureEEESt15__allocated_ptrIT_ERS4_>
	  auto __ptr = __guard.get();
 801001a:	f107 0318 	add.w	r3, r7, #24
 801001e:	4618      	mov	r0, r3
 8010020:	f000 f8e0 	bl	80101e4 <_ZNSt15__allocated_ptrISaIN4tama7TextureEEE3getEv>
 8010024:	62f8      	str	r0, [r7, #44]	; 0x2c
	  __traits::construct(__del._M_alloc, __ptr,
 8010026:	6838      	ldr	r0, [r7, #0]
 8010028:	f7ff fcd9 	bl	800f9de <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 801002c:	4604      	mov	r4, r0
 801002e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8010030:	f7ff fcd5 	bl	800f9de <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 8010034:	4603      	mov	r3, r0
 8010036:	f107 0020 	add.w	r0, r7, #32
 801003a:	4622      	mov	r2, r4
 801003c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801003e:	f000 f98e 	bl	801035e <_ZNSt16allocator_traitsISaIN4tama7TextureEEE9constructIS1_JiiEEEvRS2_PT_DpOT0_>
	  __guard = nullptr;
 8010042:	f107 0318 	add.w	r3, r7, #24
 8010046:	2100      	movs	r1, #0
 8010048:	4618      	mov	r0, r3
 801004a:	f000 f8f1 	bl	8010230 <_ZNSt15__allocated_ptrISaIN4tama7TextureEEEaSEDn>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 801004e:	f107 0220 	add.w	r2, r7, #32
 8010052:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010056:	4611      	mov	r1, r2
 8010058:	4618      	mov	r0, r3
 801005a:	f7ff ff32 	bl	800fec2 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>
 801005e:	f107 0220 	add.w	r2, r7, #32
 8010062:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010066:	4611      	mov	r1, r2
 8010068:	4618      	mov	r0, r3
 801006a:	f000 f885 	bl	8010178 <_ZNSaIN4tama7TextureEEC1ERKS1_>
 801006e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010072:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8010076:	f107 0014 	add.w	r0, r7, #20
 801007a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801007c:	f000 f90d 	bl	801029a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama7TextureENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
 8010080:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010084:	4618      	mov	r0, r3
 8010086:	f7ff fd68 	bl	800fb5a <_ZNSaIN4tama7TextureEED1Ev>
 801008a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801008e:	4618      	mov	r0, r3
 8010090:	f7ff ff0a 	bl	800fea8 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	  _M_refcount._M_swap(__count);
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	3304      	adds	r3, #4
 8010098:	f107 0214 	add.w	r2, r7, #20
 801009c:	4611      	mov	r1, r2
 801009e:	4618      	mov	r0, r3
 80100a0:	f7f4 f86e 	bl	8004180 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  _M_ptr = __ptr;
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80100a8:	601a      	str	r2, [r3, #0]
	  _M_enable_shared_from_this_with(_M_ptr);
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	4619      	mov	r1, r3
 80100b0:	68f8      	ldr	r0, [r7, #12]
 80100b2:	f000 f949 	bl	8010348 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 80100b6:	f107 0314 	add.w	r3, r7, #20
 80100ba:	4618      	mov	r0, r3
 80100bc:	f7f3 f829 	bl	8003112 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 80100c0:	f107 0318 	add.w	r3, r7, #24
 80100c4:	4618      	mov	r0, r3
 80100c6:	f000 f878 	bl	80101ba <_ZNSt15__allocated_ptrISaIN4tama7TextureEEED1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 80100ca:	f107 0320 	add.w	r3, r7, #32
 80100ce:	4618      	mov	r0, r3
 80100d0:	f7ff feea 	bl	800fea8 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	}
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	4618      	mov	r0, r3
 80100d8:	3734      	adds	r7, #52	; 0x34
 80100da:	46bd      	mov	sp, r7
 80100dc:	bd90      	pop	{r4, r7, pc}

080100de <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80100de:	b480      	push	{r7}
 80100e0:	b083      	sub	sp, #12
 80100e2:	af00      	add	r7, sp, #0
 80100e4:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	4618      	mov	r0, r3
 80100ea:	370c      	adds	r7, #12
 80100ec:	46bd      	mov	sp, r7
 80100ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100f2:	4770      	bx	lr

080100f4 <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80100f4:	b480      	push	{r7}
 80100f6:	b083      	sub	sp, #12
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	4618      	mov	r0, r3
 8010102:	370c      	adds	r7, #12
 8010104:	46bd      	mov	sp, r7
 8010106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801010a:	4770      	bx	lr

0801010c <_ZNSt11_Tuple_implILj0EJPN4tama18Stm32TextureLoaderESt14default_deleteIS1_EEEC1Ev>:
      constexpr _Tuple_impl()
 801010c:	b580      	push	{r7, lr}
 801010e:	b082      	sub	sp, #8
 8010110:	af00      	add	r7, sp, #0
 8010112:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8010114:	6878      	ldr	r0, [r7, #4]
 8010116:	f000 f93a 	bl	801038e <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN4tama18Stm32TextureLoaderEEEEC1Ev>
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	4618      	mov	r0, r3
 801011e:	f000 f942 	bl	80103a6 <_ZNSt10_Head_baseILj0EPN4tama18Stm32TextureLoaderELb0EEC1Ev>
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	4618      	mov	r0, r3
 8010126:	3708      	adds	r7, #8
 8010128:	46bd      	mov	sp, r7
 801012a:	bd80      	pop	{r7, pc}

0801012c <_ZNSt11_Tuple_implILj0EJPN4tama18Stm32TextureLoaderESt14default_deleteIS1_EEE7_M_headERS5_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801012c:	b580      	push	{r7, lr}
 801012e:	b082      	sub	sp, #8
 8010130:	af00      	add	r7, sp, #0
 8010132:	6078      	str	r0, [r7, #4]
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	4618      	mov	r0, r3
 8010138:	f000 f943 	bl	80103c2 <_ZNSt10_Head_baseILj0EPN4tama18Stm32TextureLoaderELb0EE7_M_headERS3_>
 801013c:	4603      	mov	r3, r0
 801013e:	4618      	mov	r0, r3
 8010140:	3708      	adds	r7, #8
 8010142:	46bd      	mov	sp, r7
 8010144:	bd80      	pop	{r7, pc}

08010146 <_ZSt12__get_helperILj1ESt14default_deleteIN4tama18Stm32TextureLoaderEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8010146:	b580      	push	{r7, lr}
 8010148:	b082      	sub	sp, #8
 801014a:	af00      	add	r7, sp, #0
 801014c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 801014e:	6878      	ldr	r0, [r7, #4]
 8010150:	f000 f942 	bl	80103d8 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN4tama18Stm32TextureLoaderEEEE7_M_headERS4_>
 8010154:	4603      	mov	r3, r0
 8010156:	4618      	mov	r0, r3
 8010158:	3708      	adds	r7, #8
 801015a:	46bd      	mov	sp, r7
 801015c:	bd80      	pop	{r7, pc}

0801015e <_ZSt3getILj0EJPN4tama18Stm32TextureLoaderESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>:
    get(const tuple<_Elements...>& __t) noexcept
 801015e:	b580      	push	{r7, lr}
 8010160:	b082      	sub	sp, #8
 8010162:	af00      	add	r7, sp, #0
 8010164:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	4618      	mov	r0, r3
 801016a:	f000 f941 	bl	80103f0 <_ZSt12__get_helperILj0EPN4tama18Stm32TextureLoaderEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>
 801016e:	4603      	mov	r3, r0
 8010170:	4618      	mov	r0, r3
 8010172:	3708      	adds	r7, #8
 8010174:	46bd      	mov	sp, r7
 8010176:	bd80      	pop	{r7, pc}

08010178 <_ZNSaIN4tama7TextureEEC1ERKS1_>:
      allocator(const allocator& __a) throw()
 8010178:	b580      	push	{r7, lr}
 801017a:	b082      	sub	sp, #8
 801017c:	af00      	add	r7, sp, #0
 801017e:	6078      	str	r0, [r7, #4]
 8010180:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8010182:	6839      	ldr	r1, [r7, #0]
 8010184:	6878      	ldr	r0, [r7, #4]
 8010186:	f000 f93f 	bl	8010408 <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEEC1ERKS3_>
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	4618      	mov	r0, r3
 801018e:	3708      	adds	r7, #8
 8010190:	46bd      	mov	sp, r7
 8010192:	bd80      	pop	{r7, pc}

08010194 <_ZSt18__allocate_guardedISaIN4tama7TextureEEESt15__allocated_ptrIT_ERS4_>:
    __allocate_guarded(_Alloc& __a)
 8010194:	b580      	push	{r7, lr}
 8010196:	b082      	sub	sp, #8
 8010198:	af00      	add	r7, sp, #0
 801019a:	6078      	str	r0, [r7, #4]
 801019c:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 801019e:	2101      	movs	r1, #1
 80101a0:	6838      	ldr	r0, [r7, #0]
 80101a2:	f000 f93d 	bl	8010420 <_ZNSt16allocator_traitsISaIN4tama7TextureEEE8allocateERS2_j>
 80101a6:	4603      	mov	r3, r0
 80101a8:	461a      	mov	r2, r3
 80101aa:	6839      	ldr	r1, [r7, #0]
 80101ac:	6878      	ldr	r0, [r7, #4]
 80101ae:	f000 f946 	bl	801043e <_ZNSt15__allocated_ptrISaIN4tama7TextureEEEC1ERS2_PS1_>
    }
 80101b2:	6878      	ldr	r0, [r7, #4]
 80101b4:	3708      	adds	r7, #8
 80101b6:	46bd      	mov	sp, r7
 80101b8:	bd80      	pop	{r7, pc}

080101ba <_ZNSt15__allocated_ptrISaIN4tama7TextureEEED1Ev>:
      ~__allocated_ptr()
 80101ba:	b580      	push	{r7, lr}
 80101bc:	b082      	sub	sp, #8
 80101be:	af00      	add	r7, sp, #0
 80101c0:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	685b      	ldr	r3, [r3, #4]
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d007      	beq.n	80101da <_ZNSt15__allocated_ptrISaIN4tama7TextureEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	6818      	ldr	r0, [r3, #0]
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	685b      	ldr	r3, [r3, #4]
 80101d2:	2201      	movs	r2, #1
 80101d4:	4619      	mov	r1, r3
 80101d6:	f000 f946 	bl	8010466 <_ZNSt16allocator_traitsISaIN4tama7TextureEEE10deallocateERS2_PS1_j>
      }
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	4618      	mov	r0, r3
 80101de:	3708      	adds	r7, #8
 80101e0:	46bd      	mov	sp, r7
 80101e2:	bd80      	pop	{r7, pc}

080101e4 <_ZNSt15__allocated_ptrISaIN4tama7TextureEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 80101e4:	b580      	push	{r7, lr}
 80101e6:	b082      	sub	sp, #8
 80101e8:	af00      	add	r7, sp, #0
 80101ea:	6078      	str	r0, [r7, #4]
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	685b      	ldr	r3, [r3, #4]
 80101f0:	4618      	mov	r0, r3
 80101f2:	f000 f947 	bl	8010484 <_ZNSt15__allocated_ptrISaIN4tama7TextureEEE10_S_raw_ptrEPS1_>
 80101f6:	4603      	mov	r3, r0
 80101f8:	4618      	mov	r0, r3
 80101fa:	3708      	adds	r7, #8
 80101fc:	46bd      	mov	sp, r7
 80101fe:	bd80      	pop	{r7, pc}

08010200 <_ZNSt16allocator_traitsISaIN4tama7TextureEEE9constructIS1_JRiS5_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8010200:	b590      	push	{r4, r7, lr}
 8010202:	b085      	sub	sp, #20
 8010204:	af00      	add	r7, sp, #0
 8010206:	60f8      	str	r0, [r7, #12]
 8010208:	60b9      	str	r1, [r7, #8]
 801020a:	607a      	str	r2, [r7, #4]
 801020c:	603b      	str	r3, [r7, #0]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 801020e:	6878      	ldr	r0, [r7, #4]
 8010210:	f7ff fbac 	bl	800f96c <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 8010214:	4604      	mov	r4, r0
 8010216:	6838      	ldr	r0, [r7, #0]
 8010218:	f7ff fba8 	bl	800f96c <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 801021c:	4603      	mov	r3, r0
 801021e:	4622      	mov	r2, r4
 8010220:	68b9      	ldr	r1, [r7, #8]
 8010222:	68f8      	ldr	r0, [r7, #12]
 8010224:	f000 f939 	bl	801049a <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE9constructIS2_JRiS5_EEEvPT_DpOT0_>
 8010228:	bf00      	nop
 801022a:	3714      	adds	r7, #20
 801022c:	46bd      	mov	sp, r7
 801022e:	bd90      	pop	{r4, r7, pc}

08010230 <_ZNSt15__allocated_ptrISaIN4tama7TextureEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 8010230:	b480      	push	{r7}
 8010232:	b083      	sub	sp, #12
 8010234:	af00      	add	r7, sp, #0
 8010236:	6078      	str	r0, [r7, #4]
 8010238:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	2200      	movs	r2, #0
 801023e:	605a      	str	r2, [r3, #4]
	return *this;
 8010240:	687b      	ldr	r3, [r7, #4]
      }
 8010242:	4618      	mov	r0, r3
 8010244:	370c      	adds	r7, #12
 8010246:	46bd      	mov	sp, r7
 8010248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801024c:	4770      	bx	lr

0801024e <_ZSt4moveIRNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 801024e:	b480      	push	{r7}
 8010250:	b083      	sub	sp, #12
 8010252:	af00      	add	r7, sp, #0
 8010254:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	4618      	mov	r0, r3
 801025a:	370c      	adds	r7, #12
 801025c:	46bd      	mov	sp, r7
 801025e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010262:	4770      	bx	lr

08010264 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>:
        struct _Deleter
 8010264:	b580      	push	{r7, lr}
 8010266:	b082      	sub	sp, #8
 8010268:	af00      	add	r7, sp, #0
 801026a:	6078      	str	r0, [r7, #4]
 801026c:	6039      	str	r1, [r7, #0]
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	683a      	ldr	r2, [r7, #0]
 8010272:	4611      	mov	r1, r2
 8010274:	4618      	mov	r0, r3
 8010276:	f7ff ff7f 	bl	8010178 <_ZNSaIN4tama7TextureEEC1ERKS1_>
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	4618      	mov	r0, r3
 801027e:	3708      	adds	r7, #8
 8010280:	46bd      	mov	sp, r7
 8010282:	bd80      	pop	{r7, pc}

08010284 <_ZSt4moveIRSaIN4tama7TextureEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8010284:	b480      	push	{r7}
 8010286:	b083      	sub	sp, #12
 8010288:	af00      	add	r7, sp, #0
 801028a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	4618      	mov	r0, r3
 8010290:	370c      	adds	r7, #12
 8010292:	46bd      	mov	sp, r7
 8010294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010298:	4770      	bx	lr

0801029a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama7TextureENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
 801029a:	b5b0      	push	{r4, r5, r7, lr}
 801029c:	b08a      	sub	sp, #40	; 0x28
 801029e:	af00      	add	r7, sp, #0
 80102a0:	60f8      	str	r0, [r7, #12]
 80102a2:	60b9      	str	r1, [r7, #8]
 80102a4:	607a      	str	r2, [r7, #4]
 80102a6:	603b      	str	r3, [r7, #0]
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	2200      	movs	r2, #0
 80102ac:	601a      	str	r2, [r3, #0]
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 80102ae:	f107 031c 	add.w	r3, r7, #28
 80102b2:	6839      	ldr	r1, [r7, #0]
 80102b4:	4618      	mov	r0, r3
 80102b6:	f000 f914 	bl	80104e2 <_ZNSaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	      auto __guard = std::__allocate_guarded(__a2);
 80102ba:	f107 0314 	add.w	r3, r7, #20
 80102be:	f107 021c 	add.w	r2, r7, #28
 80102c2:	4611      	mov	r1, r2
 80102c4:	4618      	mov	r0, r3
 80102c6:	f000 f925 	bl	8010514 <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>
	      _Sp_cd_type* __mem = __guard.get();
 80102ca:	f107 0314 	add.w	r3, r7, #20
 80102ce:	4618      	mov	r0, r3
 80102d0:	f000 f948 	bl	8010564 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>
 80102d4:	6278      	str	r0, [r7, #36]	; 0x24
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 80102d6:	6878      	ldr	r0, [r7, #4]
 80102d8:	f7ff ffb9 	bl	801024e <_ZSt4moveIRNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 80102dc:	4602      	mov	r2, r0
 80102de:	f107 0320 	add.w	r3, r7, #32
 80102e2:	4611      	mov	r1, r2
 80102e4:	4618      	mov	r0, r3
 80102e6:	f7ff ffbd 	bl	8010264 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 80102ea:	f107 0420 	add.w	r4, r7, #32
 80102ee:	6838      	ldr	r0, [r7, #0]
 80102f0:	f7ff ffc8 	bl	8010284 <_ZSt4moveIRSaIN4tama7TextureEEEONSt16remove_referenceIT_E4typeEOS5_>
 80102f4:	4605      	mov	r5, r0
 80102f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102f8:	4619      	mov	r1, r3
 80102fa:	2014      	movs	r0, #20
 80102fc:	f7f0 fe9f 	bl	800103e <_ZnwjPv>
 8010300:	2800      	cmp	r0, #0
 8010302:	d004      	beq.n	801030e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama7TextureENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x74>
 8010304:	462b      	mov	r3, r5
 8010306:	4622      	mov	r2, r4
 8010308:	68b9      	ldr	r1, [r7, #8]
 801030a:	f000 f965 	bl	80105d8 <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>
 801030e:	f107 0320 	add.w	r3, r7, #32
 8010312:	4618      	mov	r0, r3
 8010314:	f7ff fdc8 	bl	800fea8 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	      _M_pi = __mem;
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801031c:	601a      	str	r2, [r3, #0]
	      __guard = nullptr;
 801031e:	f107 0314 	add.w	r3, r7, #20
 8010322:	2100      	movs	r1, #0
 8010324:	4618      	mov	r0, r3
 8010326:	f000 f985 	bl	8010634 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>
	      auto __guard = std::__allocate_guarded(__a2);
 801032a:	f107 0314 	add.w	r3, r7, #20
 801032e:	4618      	mov	r0, r3
 8010330:	f000 f903 	bl	801053a <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 8010334:	f107 031c 	add.w	r3, r7, #28
 8010338:	4618      	mov	r0, r3
 801033a:	f000 f8df 	bl	80104fc <_ZNSaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
	}
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	4618      	mov	r0, r3
 8010342:	3728      	adds	r7, #40	; 0x28
 8010344:	46bd      	mov	sp, r7
 8010346:	bdb0      	pop	{r4, r5, r7, pc}

08010348 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 8010348:	b480      	push	{r7}
 801034a:	b083      	sub	sp, #12
 801034c:	af00      	add	r7, sp, #0
 801034e:	6078      	str	r0, [r7, #4]
 8010350:	6039      	str	r1, [r7, #0]
	{ }
 8010352:	bf00      	nop
 8010354:	370c      	adds	r7, #12
 8010356:	46bd      	mov	sp, r7
 8010358:	f85d 7b04 	ldr.w	r7, [sp], #4
 801035c:	4770      	bx	lr

0801035e <_ZNSt16allocator_traitsISaIN4tama7TextureEEE9constructIS1_JiiEEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 801035e:	b590      	push	{r4, r7, lr}
 8010360:	b085      	sub	sp, #20
 8010362:	af00      	add	r7, sp, #0
 8010364:	60f8      	str	r0, [r7, #12]
 8010366:	60b9      	str	r1, [r7, #8]
 8010368:	607a      	str	r2, [r7, #4]
 801036a:	603b      	str	r3, [r7, #0]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 801036c:	6878      	ldr	r0, [r7, #4]
 801036e:	f7ff fb36 	bl	800f9de <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 8010372:	4604      	mov	r4, r0
 8010374:	6838      	ldr	r0, [r7, #0]
 8010376:	f7ff fb32 	bl	800f9de <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 801037a:	4603      	mov	r3, r0
 801037c:	4622      	mov	r2, r4
 801037e:	68b9      	ldr	r1, [r7, #8]
 8010380:	68f8      	ldr	r0, [r7, #12]
 8010382:	f000 f986 	bl	8010692 <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE9constructIS2_JiiEEEvPT_DpOT0_>
 8010386:	bf00      	nop
 8010388:	3714      	adds	r7, #20
 801038a:	46bd      	mov	sp, r7
 801038c:	bd90      	pop	{r4, r7, pc}

0801038e <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN4tama18Stm32TextureLoaderEEEEC1Ev>:
      constexpr _Tuple_impl()
 801038e:	b580      	push	{r7, lr}
 8010390:	b082      	sub	sp, #8
 8010392:	af00      	add	r7, sp, #0
 8010394:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8010396:	6878      	ldr	r0, [r7, #4]
 8010398:	f000 f99f 	bl	80106da <_ZNSt10_Head_baseILj1ESt14default_deleteIN4tama18Stm32TextureLoaderEELb1EEC1Ev>
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	4618      	mov	r0, r3
 80103a0:	3708      	adds	r7, #8
 80103a2:	46bd      	mov	sp, r7
 80103a4:	bd80      	pop	{r7, pc}

080103a6 <_ZNSt10_Head_baseILj0EPN4tama18Stm32TextureLoaderELb0EEC1Ev>:
      constexpr _Head_base()
 80103a6:	b480      	push	{r7}
 80103a8:	b083      	sub	sp, #12
 80103aa:	af00      	add	r7, sp, #0
 80103ac:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	2200      	movs	r2, #0
 80103b2:	601a      	str	r2, [r3, #0]
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	4618      	mov	r0, r3
 80103b8:	370c      	adds	r7, #12
 80103ba:	46bd      	mov	sp, r7
 80103bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103c0:	4770      	bx	lr

080103c2 <_ZNSt10_Head_baseILj0EPN4tama18Stm32TextureLoaderELb0EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80103c2:	b480      	push	{r7}
 80103c4:	b083      	sub	sp, #12
 80103c6:	af00      	add	r7, sp, #0
 80103c8:	6078      	str	r0, [r7, #4]
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	4618      	mov	r0, r3
 80103ce:	370c      	adds	r7, #12
 80103d0:	46bd      	mov	sp, r7
 80103d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103d6:	4770      	bx	lr

080103d8 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN4tama18Stm32TextureLoaderEEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80103d8:	b580      	push	{r7, lr}
 80103da:	b082      	sub	sp, #8
 80103dc:	af00      	add	r7, sp, #0
 80103de:	6078      	str	r0, [r7, #4]
 80103e0:	6878      	ldr	r0, [r7, #4]
 80103e2:	f000 f985 	bl	80106f0 <_ZNSt10_Head_baseILj1ESt14default_deleteIN4tama18Stm32TextureLoaderEELb1EE7_M_headERS4_>
 80103e6:	4603      	mov	r3, r0
 80103e8:	4618      	mov	r0, r3
 80103ea:	3708      	adds	r7, #8
 80103ec:	46bd      	mov	sp, r7
 80103ee:	bd80      	pop	{r7, pc}

080103f0 <_ZSt12__get_helperILj0EPN4tama18Stm32TextureLoaderEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80103f0:	b580      	push	{r7, lr}
 80103f2:	b082      	sub	sp, #8
 80103f4:	af00      	add	r7, sp, #0
 80103f6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80103f8:	6878      	ldr	r0, [r7, #4]
 80103fa:	f000 f984 	bl	8010706 <_ZNSt11_Tuple_implILj0EJPN4tama18Stm32TextureLoaderESt14default_deleteIS1_EEE7_M_headERKS5_>
 80103fe:	4603      	mov	r3, r0
 8010400:	4618      	mov	r0, r3
 8010402:	3708      	adds	r7, #8
 8010404:	46bd      	mov	sp, r7
 8010406:	bd80      	pop	{r7, pc}

08010408 <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8010408:	b480      	push	{r7}
 801040a:	b083      	sub	sp, #12
 801040c:	af00      	add	r7, sp, #0
 801040e:	6078      	str	r0, [r7, #4]
 8010410:	6039      	str	r1, [r7, #0]
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	4618      	mov	r0, r3
 8010416:	370c      	adds	r7, #12
 8010418:	46bd      	mov	sp, r7
 801041a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801041e:	4770      	bx	lr

08010420 <_ZNSt16allocator_traitsISaIN4tama7TextureEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8010420:	b580      	push	{r7, lr}
 8010422:	b082      	sub	sp, #8
 8010424:	af00      	add	r7, sp, #0
 8010426:	6078      	str	r0, [r7, #4]
 8010428:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 801042a:	2200      	movs	r2, #0
 801042c:	6839      	ldr	r1, [r7, #0]
 801042e:	6878      	ldr	r0, [r7, #4]
 8010430:	f000 f976 	bl	8010720 <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE8allocateEjPKv>
 8010434:	4603      	mov	r3, r0
 8010436:	4618      	mov	r0, r3
 8010438:	3708      	adds	r7, #8
 801043a:	46bd      	mov	sp, r7
 801043c:	bd80      	pop	{r7, pc}

0801043e <_ZNSt15__allocated_ptrISaIN4tama7TextureEEEC1ERS2_PS1_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 801043e:	b580      	push	{r7, lr}
 8010440:	b084      	sub	sp, #16
 8010442:	af00      	add	r7, sp, #0
 8010444:	60f8      	str	r0, [r7, #12]
 8010446:	60b9      	str	r1, [r7, #8]
 8010448:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 801044a:	68b8      	ldr	r0, [r7, #8]
 801044c:	f000 f989 	bl	8010762 <_ZSt11__addressofISaIN4tama7TextureEEEPT_RS3_>
 8010450:	4602      	mov	r2, r0
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	601a      	str	r2, [r3, #0]
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	687a      	ldr	r2, [r7, #4]
 801045a:	605a      	str	r2, [r3, #4]
      { }
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	4618      	mov	r0, r3
 8010460:	3710      	adds	r7, #16
 8010462:	46bd      	mov	sp, r7
 8010464:	bd80      	pop	{r7, pc}

08010466 <_ZNSt16allocator_traitsISaIN4tama7TextureEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8010466:	b580      	push	{r7, lr}
 8010468:	b084      	sub	sp, #16
 801046a:	af00      	add	r7, sp, #0
 801046c:	60f8      	str	r0, [r7, #12]
 801046e:	60b9      	str	r1, [r7, #8]
 8010470:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8010472:	687a      	ldr	r2, [r7, #4]
 8010474:	68b9      	ldr	r1, [r7, #8]
 8010476:	68f8      	ldr	r0, [r7, #12]
 8010478:	f000 f97e 	bl	8010778 <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE10deallocateEPS2_j>
 801047c:	bf00      	nop
 801047e:	3710      	adds	r7, #16
 8010480:	46bd      	mov	sp, r7
 8010482:	bd80      	pop	{r7, pc}

08010484 <_ZNSt15__allocated_ptrISaIN4tama7TextureEEE10_S_raw_ptrEPS1_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 8010484:	b480      	push	{r7}
 8010486:	b083      	sub	sp, #12
 8010488:	af00      	add	r7, sp, #0
 801048a:	6078      	str	r0, [r7, #4]
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	4618      	mov	r0, r3
 8010490:	370c      	adds	r7, #12
 8010492:	46bd      	mov	sp, r7
 8010494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010498:	4770      	bx	lr

0801049a <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE9constructIS2_JRiS5_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 801049a:	b5b0      	push	{r4, r5, r7, lr}
 801049c:	b084      	sub	sp, #16
 801049e:	af00      	add	r7, sp, #0
 80104a0:	60f8      	str	r0, [r7, #12]
 80104a2:	60b9      	str	r1, [r7, #8]
 80104a4:	607a      	str	r2, [r7, #4]
 80104a6:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80104a8:	6878      	ldr	r0, [r7, #4]
 80104aa:	f7ff fa5f 	bl	800f96c <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 80104ae:	4603      	mov	r3, r0
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	461c      	mov	r4, r3
 80104b4:	6838      	ldr	r0, [r7, #0]
 80104b6:	f7ff fa59 	bl	800f96c <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 80104ba:	4603      	mov	r3, r0
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	461d      	mov	r5, r3
 80104c0:	68bb      	ldr	r3, [r7, #8]
 80104c2:	4619      	mov	r1, r3
 80104c4:	200c      	movs	r0, #12
 80104c6:	f7f0 fdba 	bl	800103e <_ZnwjPv>
 80104ca:	4603      	mov	r3, r0
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d004      	beq.n	80104da <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE9constructIS2_JRiS5_EEEvPT_DpOT0_+0x40>
 80104d0:	462a      	mov	r2, r5
 80104d2:	4621      	mov	r1, r4
 80104d4:	4618      	mov	r0, r3
 80104d6:	f7fe fbb1 	bl	800ec3c <_ZN4tama7TextureC1Ejj>
 80104da:	bf00      	nop
 80104dc:	3710      	adds	r7, #16
 80104de:	46bd      	mov	sp, r7
 80104e0:	bdb0      	pop	{r4, r5, r7, pc}

080104e2 <_ZNSaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) throw() { }
 80104e2:	b580      	push	{r7, lr}
 80104e4:	b082      	sub	sp, #8
 80104e6:	af00      	add	r7, sp, #0
 80104e8:	6078      	str	r0, [r7, #4]
 80104ea:	6039      	str	r1, [r7, #0]
 80104ec:	6878      	ldr	r0, [r7, #4]
 80104ee:	f000 f950 	bl	8010792 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	4618      	mov	r0, r3
 80104f6:	3708      	adds	r7, #8
 80104f8:	46bd      	mov	sp, r7
 80104fa:	bd80      	pop	{r7, pc}

080104fc <_ZNSaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>:
      ~allocator() throw() { }
 80104fc:	b580      	push	{r7, lr}
 80104fe:	b082      	sub	sp, #8
 8010500:	af00      	add	r7, sp, #0
 8010502:	6078      	str	r0, [r7, #4]
 8010504:	6878      	ldr	r0, [r7, #4]
 8010506:	f000 f94f 	bl	80107a8 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	4618      	mov	r0, r3
 801050e:	3708      	adds	r7, #8
 8010510:	46bd      	mov	sp, r7
 8010512:	bd80      	pop	{r7, pc}

08010514 <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>:
    __allocate_guarded(_Alloc& __a)
 8010514:	b580      	push	{r7, lr}
 8010516:	b082      	sub	sp, #8
 8010518:	af00      	add	r7, sp, #0
 801051a:	6078      	str	r0, [r7, #4]
 801051c:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 801051e:	2101      	movs	r1, #1
 8010520:	6838      	ldr	r0, [r7, #0]
 8010522:	f000 f94c 	bl	80107be <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>
 8010526:	4603      	mov	r3, r0
 8010528:	461a      	mov	r2, r3
 801052a:	6839      	ldr	r1, [r7, #0]
 801052c:	6878      	ldr	r0, [r7, #4]
 801052e:	f000 f955 	bl	80107dc <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
    }
 8010532:	6878      	ldr	r0, [r7, #4]
 8010534:	3708      	adds	r7, #8
 8010536:	46bd      	mov	sp, r7
 8010538:	bd80      	pop	{r7, pc}

0801053a <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>:
      ~__allocated_ptr()
 801053a:	b580      	push	{r7, lr}
 801053c:	b082      	sub	sp, #8
 801053e:	af00      	add	r7, sp, #0
 8010540:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	685b      	ldr	r3, [r3, #4]
 8010546:	2b00      	cmp	r3, #0
 8010548:	d007      	beq.n	801055a <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	6818      	ldr	r0, [r3, #0]
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	685b      	ldr	r3, [r3, #4]
 8010552:	2201      	movs	r2, #1
 8010554:	4619      	mov	r1, r3
 8010556:	f000 f955 	bl	8010804 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>
      }
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	4618      	mov	r0, r3
 801055e:	3708      	adds	r7, #8
 8010560:	46bd      	mov	sp, r7
 8010562:	bd80      	pop	{r7, pc}

08010564 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 8010564:	b580      	push	{r7, lr}
 8010566:	b082      	sub	sp, #8
 8010568:	af00      	add	r7, sp, #0
 801056a:	6078      	str	r0, [r7, #4]
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	685b      	ldr	r3, [r3, #4]
 8010570:	4618      	mov	r0, r3
 8010572:	f000 f956 	bl	8010822 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>
 8010576:	4603      	mov	r3, r0
 8010578:	4618      	mov	r0, r3
 801057a:	3708      	adds	r7, #8
 801057c:	46bd      	mov	sp, r7
 801057e:	bd80      	pop	{r7, pc}

08010580 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, false>
 8010580:	b580      	push	{r7, lr}
 8010582:	b082      	sub	sp, #8
 8010584:	af00      	add	r7, sp, #0
 8010586:	6078      	str	r0, [r7, #4]
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	4618      	mov	r0, r3
 801058c:	f7ff fc8c 	bl	800fea8 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	4618      	mov	r0, r3
 8010594:	3708      	adds	r7, #8
 8010596:	46bd      	mov	sp, r7
 8010598:	bd80      	pop	{r7, pc}

0801059a <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama7TextureEELb1EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp
 801059a:	b580      	push	{r7, lr}
 801059c:	b082      	sub	sp, #8
 801059e:	af00      	add	r7, sp, #0
 80105a0:	6078      	str	r0, [r7, #4]
 80105a2:	6878      	ldr	r0, [r7, #4]
 80105a4:	f7ff fad9 	bl	800fb5a <_ZNSaIN4tama7TextureEED1Ev>
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	4618      	mov	r0, r3
 80105ac:	3708      	adds	r7, #8
 80105ae:	46bd      	mov	sp, r7
 80105b0:	bd80      	pop	{r7, pc}

080105b2 <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>:
      class _Impl : _Sp_ebo_helper<0, _Deleter>, _Sp_ebo_helper<1, _Alloc>
 80105b2:	b580      	push	{r7, lr}
 80105b4:	b082      	sub	sp, #8
 80105b6:	af00      	add	r7, sp, #0
 80105b8:	6078      	str	r0, [r7, #4]
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	3301      	adds	r3, #1
 80105be:	4618      	mov	r0, r3
 80105c0:	f7ff ffeb 	bl	801059a <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama7TextureEELb1EED1Ev>
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	4618      	mov	r0, r3
 80105c8:	f7ff ffda 	bl	8010580 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	4618      	mov	r0, r3
 80105d0:	3708      	adds	r7, #8
 80105d2:	46bd      	mov	sp, r7
 80105d4:	bd80      	pop	{r7, pc}
	...

080105d8 <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 80105d8:	b590      	push	{r4, r7, lr}
 80105da:	b087      	sub	sp, #28
 80105dc:	af00      	add	r7, sp, #0
 80105de:	60f8      	str	r0, [r7, #12]
 80105e0:	60b9      	str	r1, [r7, #8]
 80105e2:	607a      	str	r2, [r7, #4]
 80105e4:	603b      	str	r3, [r7, #0]
      : _M_impl(__p, std::move(__d), __a) { }
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	4618      	mov	r0, r3
 80105ea:	f7f4 f8ad 	bl	8004748 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 80105ee:	4a10      	ldr	r2, [pc, #64]	; (8010630 <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_+0x58>)
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	601a      	str	r2, [r3, #0]
 80105f4:	68fb      	ldr	r3, [r7, #12]
 80105f6:	f103 040c 	add.w	r4, r3, #12
 80105fa:	6878      	ldr	r0, [r7, #4]
 80105fc:	f7ff fe27 	bl	801024e <_ZSt4moveIRNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8010600:	4602      	mov	r2, r0
 8010602:	f107 0314 	add.w	r3, r7, #20
 8010606:	4611      	mov	r1, r2
 8010608:	4618      	mov	r0, r3
 801060a:	f7ff fe2b 	bl	8010264 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 801060e:	f107 0214 	add.w	r2, r7, #20
 8010612:	683b      	ldr	r3, [r7, #0]
 8010614:	68b9      	ldr	r1, [r7, #8]
 8010616:	4620      	mov	r0, r4
 8010618:	f000 f90e 	bl	8010838 <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>
 801061c:	f107 0314 	add.w	r3, r7, #20
 8010620:	4618      	mov	r0, r3
 8010622:	f7ff fc41 	bl	800fea8 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	4618      	mov	r0, r3
 801062a:	371c      	adds	r7, #28
 801062c:	46bd      	mov	sp, r7
 801062e:	bd90      	pop	{r4, r7, pc}
 8010630:	080247b0 	.word	0x080247b0

08010634 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 8010634:	b480      	push	{r7}
 8010636:	b083      	sub	sp, #12
 8010638:	af00      	add	r7, sp, #0
 801063a:	6078      	str	r0, [r7, #4]
 801063c:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	2200      	movs	r2, #0
 8010642:	605a      	str	r2, [r3, #4]
	return *this;
 8010644:	687b      	ldr	r3, [r7, #4]
      }
 8010646:	4618      	mov	r0, r3
 8010648:	370c      	adds	r7, #12
 801064a:	46bd      	mov	sp, r7
 801064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010650:	4770      	bx	lr

08010652 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>:
          void operator()(typename _Alloc::value_type* __ptr)
 8010652:	b590      	push	{r4, r7, lr}
 8010654:	b085      	sub	sp, #20
 8010656:	af00      	add	r7, sp, #0
 8010658:	6078      	str	r0, [r7, #4]
 801065a:	6039      	str	r1, [r7, #0]
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 801065c:	6879      	ldr	r1, [r7, #4]
 801065e:	f107 0308 	add.w	r3, r7, #8
 8010662:	683a      	ldr	r2, [r7, #0]
 8010664:	4618      	mov	r0, r3
 8010666:	f7ff feea 	bl	801043e <_ZNSt15__allocated_ptrISaIN4tama7TextureEEEC1ERS2_PS1_>
	    allocator_traits<_Alloc>::destroy(_M_alloc, __guard.get());
 801066a:	687c      	ldr	r4, [r7, #4]
 801066c:	f107 0308 	add.w	r3, r7, #8
 8010670:	4618      	mov	r0, r3
 8010672:	f7ff fdb7 	bl	80101e4 <_ZNSt15__allocated_ptrISaIN4tama7TextureEEE3getEv>
 8010676:	4603      	mov	r3, r0
 8010678:	4619      	mov	r1, r3
 801067a:	4620      	mov	r0, r4
 801067c:	f000 f8fa 	bl	8010874 <_ZNSt16allocator_traitsISaIN4tama7TextureEEE7destroyIS1_EEvRS2_PT_>
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 8010680:	f107 0308 	add.w	r3, r7, #8
 8010684:	4618      	mov	r0, r3
 8010686:	f7ff fd98 	bl	80101ba <_ZNSt15__allocated_ptrISaIN4tama7TextureEEED1Ev>
          }
 801068a:	bf00      	nop
 801068c:	3714      	adds	r7, #20
 801068e:	46bd      	mov	sp, r7
 8010690:	bd90      	pop	{r4, r7, pc}

08010692 <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE9constructIS2_JiiEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8010692:	b5b0      	push	{r4, r5, r7, lr}
 8010694:	b084      	sub	sp, #16
 8010696:	af00      	add	r7, sp, #0
 8010698:	60f8      	str	r0, [r7, #12]
 801069a:	60b9      	str	r1, [r7, #8]
 801069c:	607a      	str	r2, [r7, #4]
 801069e:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80106a0:	6878      	ldr	r0, [r7, #4]
 80106a2:	f7ff f99c 	bl	800f9de <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 80106a6:	4603      	mov	r3, r0
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	461c      	mov	r4, r3
 80106ac:	6838      	ldr	r0, [r7, #0]
 80106ae:	f7ff f996 	bl	800f9de <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 80106b2:	4603      	mov	r3, r0
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	461d      	mov	r5, r3
 80106b8:	68bb      	ldr	r3, [r7, #8]
 80106ba:	4619      	mov	r1, r3
 80106bc:	200c      	movs	r0, #12
 80106be:	f7f0 fcbe 	bl	800103e <_ZnwjPv>
 80106c2:	4603      	mov	r3, r0
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d004      	beq.n	80106d2 <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE9constructIS2_JiiEEEvPT_DpOT0_+0x40>
 80106c8:	462a      	mov	r2, r5
 80106ca:	4621      	mov	r1, r4
 80106cc:	4618      	mov	r0, r3
 80106ce:	f7fe fab5 	bl	800ec3c <_ZN4tama7TextureC1Ejj>
 80106d2:	bf00      	nop
 80106d4:	3710      	adds	r7, #16
 80106d6:	46bd      	mov	sp, r7
 80106d8:	bdb0      	pop	{r4, r5, r7, pc}

080106da <_ZNSt10_Head_baseILj1ESt14default_deleteIN4tama18Stm32TextureLoaderEELb1EEC1Ev>:
      constexpr _Head_base()
 80106da:	b480      	push	{r7}
 80106dc:	b083      	sub	sp, #12
 80106de:	af00      	add	r7, sp, #0
 80106e0:	6078      	str	r0, [r7, #4]
      : _Head() { }
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	4618      	mov	r0, r3
 80106e6:	370c      	adds	r7, #12
 80106e8:	46bd      	mov	sp, r7
 80106ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ee:	4770      	bx	lr

080106f0 <_ZNSt10_Head_baseILj1ESt14default_deleteIN4tama18Stm32TextureLoaderEELb1EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b; }
 80106f0:	b480      	push	{r7}
 80106f2:	b083      	sub	sp, #12
 80106f4:	af00      	add	r7, sp, #0
 80106f6:	6078      	str	r0, [r7, #4]
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	4618      	mov	r0, r3
 80106fc:	370c      	adds	r7, #12
 80106fe:	46bd      	mov	sp, r7
 8010700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010704:	4770      	bx	lr

08010706 <_ZNSt11_Tuple_implILj0EJPN4tama18Stm32TextureLoaderESt14default_deleteIS1_EEE7_M_headERKS5_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8010706:	b580      	push	{r7, lr}
 8010708:	b082      	sub	sp, #8
 801070a:	af00      	add	r7, sp, #0
 801070c:	6078      	str	r0, [r7, #4]
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	4618      	mov	r0, r3
 8010712:	f000 f8bc 	bl	801088e <_ZNSt10_Head_baseILj0EPN4tama18Stm32TextureLoaderELb0EE7_M_headERKS3_>
 8010716:	4603      	mov	r3, r0
 8010718:	4618      	mov	r0, r3
 801071a:	3708      	adds	r7, #8
 801071c:	46bd      	mov	sp, r7
 801071e:	bd80      	pop	{r7, pc}

08010720 <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8010720:	b580      	push	{r7, lr}
 8010722:	b084      	sub	sp, #16
 8010724:	af00      	add	r7, sp, #0
 8010726:	60f8      	str	r0, [r7, #12]
 8010728:	60b9      	str	r1, [r7, #8]
 801072a:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 801072c:	68f8      	ldr	r0, [r7, #12]
 801072e:	f000 f8b9 	bl	80108a4 <_ZNK9__gnu_cxx13new_allocatorIN4tama7TextureEE8max_sizeEv>
 8010732:	4602      	mov	r2, r0
 8010734:	68bb      	ldr	r3, [r7, #8]
 8010736:	4293      	cmp	r3, r2
 8010738:	bf8c      	ite	hi
 801073a:	2301      	movhi	r3, #1
 801073c:	2300      	movls	r3, #0
 801073e:	b2db      	uxtb	r3, r3
 8010740:	2b00      	cmp	r3, #0
 8010742:	d001      	beq.n	8010748 <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8010744:	f00f f8e9 	bl	801f91a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8010748:	68ba      	ldr	r2, [r7, #8]
 801074a:	4613      	mov	r3, r2
 801074c:	005b      	lsls	r3, r3, #1
 801074e:	4413      	add	r3, r2
 8010750:	009b      	lsls	r3, r3, #2
 8010752:	4618      	mov	r0, r3
 8010754:	f00f f8b3 	bl	801f8be <_Znwj>
 8010758:	4603      	mov	r3, r0
      }
 801075a:	4618      	mov	r0, r3
 801075c:	3710      	adds	r7, #16
 801075e:	46bd      	mov	sp, r7
 8010760:	bd80      	pop	{r7, pc}

08010762 <_ZSt11__addressofISaIN4tama7TextureEEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8010762:	b480      	push	{r7}
 8010764:	b083      	sub	sp, #12
 8010766:	af00      	add	r7, sp, #0
 8010768:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	4618      	mov	r0, r3
 801076e:	370c      	adds	r7, #12
 8010770:	46bd      	mov	sp, r7
 8010772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010776:	4770      	bx	lr

08010778 <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 8010778:	b580      	push	{r7, lr}
 801077a:	b084      	sub	sp, #16
 801077c:	af00      	add	r7, sp, #0
 801077e:	60f8      	str	r0, [r7, #12]
 8010780:	60b9      	str	r1, [r7, #8]
 8010782:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8010784:	68b8      	ldr	r0, [r7, #8]
 8010786:	f00f f8b3 	bl	801f8f0 <_ZdlPv>
      }
 801078a:	bf00      	nop
 801078c:	3710      	adds	r7, #16
 801078e:	46bd      	mov	sp, r7
 8010790:	bd80      	pop	{r7, pc}

08010792 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8010792:	b480      	push	{r7}
 8010794:	b083      	sub	sp, #12
 8010796:	af00      	add	r7, sp, #0
 8010798:	6078      	str	r0, [r7, #4]
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	4618      	mov	r0, r3
 801079e:	370c      	adds	r7, #12
 80107a0:	46bd      	mov	sp, r7
 80107a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107a6:	4770      	bx	lr

080107a8 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80107a8:	b480      	push	{r7}
 80107aa:	b083      	sub	sp, #12
 80107ac:	af00      	add	r7, sp, #0
 80107ae:	6078      	str	r0, [r7, #4]
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	4618      	mov	r0, r3
 80107b4:	370c      	adds	r7, #12
 80107b6:	46bd      	mov	sp, r7
 80107b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107bc:	4770      	bx	lr

080107be <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>:
      allocate(allocator_type& __a, size_type __n)
 80107be:	b580      	push	{r7, lr}
 80107c0:	b082      	sub	sp, #8
 80107c2:	af00      	add	r7, sp, #0
 80107c4:	6078      	str	r0, [r7, #4]
 80107c6:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80107c8:	2200      	movs	r2, #0
 80107ca:	6839      	ldr	r1, [r7, #0]
 80107cc:	6878      	ldr	r0, [r7, #4]
 80107ce:	f000 f877 	bl	80108c0 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>
 80107d2:	4603      	mov	r3, r0
 80107d4:	4618      	mov	r0, r3
 80107d6:	3708      	adds	r7, #8
 80107d8:	46bd      	mov	sp, r7
 80107da:	bd80      	pop	{r7, pc}

080107dc <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 80107dc:	b580      	push	{r7, lr}
 80107de:	b084      	sub	sp, #16
 80107e0:	af00      	add	r7, sp, #0
 80107e2:	60f8      	str	r0, [r7, #12]
 80107e4:	60b9      	str	r1, [r7, #8]
 80107e6:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 80107e8:	68b8      	ldr	r0, [r7, #8]
 80107ea:	f000 f88a 	bl	8010902 <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>
 80107ee:	4602      	mov	r2, r0
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	601a      	str	r2, [r3, #0]
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	687a      	ldr	r2, [r7, #4]
 80107f8:	605a      	str	r2, [r3, #4]
      { }
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	4618      	mov	r0, r3
 80107fe:	3710      	adds	r7, #16
 8010800:	46bd      	mov	sp, r7
 8010802:	bd80      	pop	{r7, pc}

08010804 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8010804:	b580      	push	{r7, lr}
 8010806:	b084      	sub	sp, #16
 8010808:	af00      	add	r7, sp, #0
 801080a:	60f8      	str	r0, [r7, #12]
 801080c:	60b9      	str	r1, [r7, #8]
 801080e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8010810:	687a      	ldr	r2, [r7, #4]
 8010812:	68b9      	ldr	r1, [r7, #8]
 8010814:	68f8      	ldr	r0, [r7, #12]
 8010816:	f000 f87f 	bl	8010918 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>
 801081a:	bf00      	nop
 801081c:	3710      	adds	r7, #16
 801081e:	46bd      	mov	sp, r7
 8010820:	bd80      	pop	{r7, pc}

08010822 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 8010822:	b480      	push	{r7}
 8010824:	b083      	sub	sp, #12
 8010826:	af00      	add	r7, sp, #0
 8010828:	6078      	str	r0, [r7, #4]
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	4618      	mov	r0, r3
 801082e:	370c      	adds	r7, #12
 8010830:	46bd      	mov	sp, r7
 8010832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010836:	4770      	bx	lr

08010838 <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 8010838:	b590      	push	{r4, r7, lr}
 801083a:	b085      	sub	sp, #20
 801083c:	af00      	add	r7, sp, #0
 801083e:	60f8      	str	r0, [r7, #12]
 8010840:	60b9      	str	r1, [r7, #8]
 8010842:	607a      	str	r2, [r7, #4]
 8010844:	603b      	str	r3, [r7, #0]
	: _M_ptr(__p), _Del_base(std::move(__d)), _Alloc_base(__a)
 8010846:	68fc      	ldr	r4, [r7, #12]
 8010848:	6878      	ldr	r0, [r7, #4]
 801084a:	f7ff fd00 	bl	801024e <_ZSt4moveIRNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 801084e:	4603      	mov	r3, r0
 8010850:	4619      	mov	r1, r3
 8010852:	4620      	mov	r0, r4
 8010854:	f000 f86d 	bl	8010932 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	3301      	adds	r3, #1
 801085c:	6839      	ldr	r1, [r7, #0]
 801085e:	4618      	mov	r0, r3
 8010860:	f000 f87a 	bl	8010958 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama7TextureEELb1EEC1ERKS2_>
 8010864:	68fb      	ldr	r3, [r7, #12]
 8010866:	68ba      	ldr	r2, [r7, #8]
 8010868:	605a      	str	r2, [r3, #4]
	{ }
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	4618      	mov	r0, r3
 801086e:	3714      	adds	r7, #20
 8010870:	46bd      	mov	sp, r7
 8010872:	bd90      	pop	{r4, r7, pc}

08010874 <_ZNSt16allocator_traitsISaIN4tama7TextureEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 8010874:	b580      	push	{r7, lr}
 8010876:	b082      	sub	sp, #8
 8010878:	af00      	add	r7, sp, #0
 801087a:	6078      	str	r0, [r7, #4]
 801087c:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 801087e:	6839      	ldr	r1, [r7, #0]
 8010880:	6878      	ldr	r0, [r7, #4]
 8010882:	f000 f877 	bl	8010974 <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE7destroyIS2_EEvPT_>
 8010886:	bf00      	nop
 8010888:	3708      	adds	r7, #8
 801088a:	46bd      	mov	sp, r7
 801088c:	bd80      	pop	{r7, pc}

0801088e <_ZNSt10_Head_baseILj0EPN4tama18Stm32TextureLoaderELb0EE7_M_headERKS3_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 801088e:	b480      	push	{r7}
 8010890:	b083      	sub	sp, #12
 8010892:	af00      	add	r7, sp, #0
 8010894:	6078      	str	r0, [r7, #4]
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	4618      	mov	r0, r3
 801089a:	370c      	adds	r7, #12
 801089c:	46bd      	mov	sp, r7
 801089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108a2:	4770      	bx	lr

080108a4 <_ZNK9__gnu_cxx13new_allocatorIN4tama7TextureEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80108a4:	b480      	push	{r7}
 80108a6:	b083      	sub	sp, #12
 80108a8:	af00      	add	r7, sp, #0
 80108aa:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 80108ac:	4b03      	ldr	r3, [pc, #12]	; (80108bc <_ZNK9__gnu_cxx13new_allocatorIN4tama7TextureEE8max_sizeEv+0x18>)
 80108ae:	4618      	mov	r0, r3
 80108b0:	370c      	adds	r7, #12
 80108b2:	46bd      	mov	sp, r7
 80108b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108b8:	4770      	bx	lr
 80108ba:	bf00      	nop
 80108bc:	15555555 	.word	0x15555555

080108c0 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80108c0:	b580      	push	{r7, lr}
 80108c2:	b084      	sub	sp, #16
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	60f8      	str	r0, [r7, #12]
 80108c8:	60b9      	str	r1, [r7, #8]
 80108ca:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 80108cc:	68f8      	ldr	r0, [r7, #12]
 80108ce:	f000 f85d 	bl	801098c <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>
 80108d2:	4602      	mov	r2, r0
 80108d4:	68bb      	ldr	r3, [r7, #8]
 80108d6:	4293      	cmp	r3, r2
 80108d8:	bf8c      	ite	hi
 80108da:	2301      	movhi	r3, #1
 80108dc:	2300      	movls	r3, #0
 80108de:	b2db      	uxtb	r3, r3
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d001      	beq.n	80108e8 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80108e4:	f00f f819 	bl	801f91a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80108e8:	68ba      	ldr	r2, [r7, #8]
 80108ea:	4613      	mov	r3, r2
 80108ec:	009b      	lsls	r3, r3, #2
 80108ee:	4413      	add	r3, r2
 80108f0:	009b      	lsls	r3, r3, #2
 80108f2:	4618      	mov	r0, r3
 80108f4:	f00e ffe3 	bl	801f8be <_Znwj>
 80108f8:	4603      	mov	r3, r0
      }
 80108fa:	4618      	mov	r0, r3
 80108fc:	3710      	adds	r7, #16
 80108fe:	46bd      	mov	sp, r7
 8010900:	bd80      	pop	{r7, pc}

08010902 <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8010902:	b480      	push	{r7}
 8010904:	b083      	sub	sp, #12
 8010906:	af00      	add	r7, sp, #0
 8010908:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	4618      	mov	r0, r3
 801090e:	370c      	adds	r7, #12
 8010910:	46bd      	mov	sp, r7
 8010912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010916:	4770      	bx	lr

08010918 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>:
      deallocate(pointer __p, size_type)
 8010918:	b580      	push	{r7, lr}
 801091a:	b084      	sub	sp, #16
 801091c:	af00      	add	r7, sp, #0
 801091e:	60f8      	str	r0, [r7, #12]
 8010920:	60b9      	str	r1, [r7, #8]
 8010922:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8010924:	68b8      	ldr	r0, [r7, #8]
 8010926:	f00e ffe3 	bl	801f8f0 <_ZdlPv>
      }
 801092a:	bf00      	nop
 801092c:	3710      	adds	r7, #16
 801092e:	46bd      	mov	sp, r7
 8010930:	bd80      	pop	{r7, pc}

08010932 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _M_tp(std::move(__tp)) { }
 8010932:	b590      	push	{r4, r7, lr}
 8010934:	b083      	sub	sp, #12
 8010936:	af00      	add	r7, sp, #0
 8010938:	6078      	str	r0, [r7, #4]
 801093a:	6039      	str	r1, [r7, #0]
 801093c:	687c      	ldr	r4, [r7, #4]
 801093e:	6838      	ldr	r0, [r7, #0]
 8010940:	f7ff fc85 	bl	801024e <_ZSt4moveIRNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8010944:	4603      	mov	r3, r0
 8010946:	4619      	mov	r1, r3
 8010948:	4620      	mov	r0, r4
 801094a:	f7ff fc8b 	bl	8010264 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	4618      	mov	r0, r3
 8010952:	370c      	adds	r7, #12
 8010954:	46bd      	mov	sp, r7
 8010956:	bd90      	pop	{r4, r7, pc}

08010958 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama7TextureEELb1EEC1ERKS2_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 8010958:	b580      	push	{r7, lr}
 801095a:	b082      	sub	sp, #8
 801095c:	af00      	add	r7, sp, #0
 801095e:	6078      	str	r0, [r7, #4]
 8010960:	6039      	str	r1, [r7, #0]
 8010962:	6839      	ldr	r1, [r7, #0]
 8010964:	6878      	ldr	r0, [r7, #4]
 8010966:	f7ff fc07 	bl	8010178 <_ZNSaIN4tama7TextureEEC1ERKS1_>
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	4618      	mov	r0, r3
 801096e:	3708      	adds	r7, #8
 8010970:	46bd      	mov	sp, r7
 8010972:	bd80      	pop	{r7, pc}

08010974 <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE7destroyIS2_EEvPT_>:
	destroy(_Up* __p) { __p->~_Up(); }
 8010974:	b580      	push	{r7, lr}
 8010976:	b082      	sub	sp, #8
 8010978:	af00      	add	r7, sp, #0
 801097a:	6078      	str	r0, [r7, #4]
 801097c:	6039      	str	r1, [r7, #0]
 801097e:	6838      	ldr	r0, [r7, #0]
 8010980:	f7fe fa65 	bl	800ee4e <_ZN4tama7TextureD1Ev>
 8010984:	bf00      	nop
 8010986:	3708      	adds	r7, #8
 8010988:	46bd      	mov	sp, r7
 801098a:	bd80      	pop	{r7, pc}

0801098c <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 801098c:	b480      	push	{r7}
 801098e:	b083      	sub	sp, #12
 8010990:	af00      	add	r7, sp, #0
 8010992:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8010994:	4b03      	ldr	r3, [pc, #12]	; (80109a4 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv+0x18>)
 8010996:	4618      	mov	r0, r3
 8010998:	370c      	adds	r7, #12
 801099a:	46bd      	mov	sp, r7
 801099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a0:	4770      	bx	lr
 80109a2:	bf00      	nop
 80109a4:	0ccccccc 	.word	0x0ccccccc

080109a8 <_Z41__static_initialization_and_destruction_0ii>:

tama::Text::Text()
{
    tama::Text(Vec2d(0,0));
}
 80109a8:	b480      	push	{r7}
 80109aa:	b083      	sub	sp, #12
 80109ac:	af00      	add	r7, sp, #0
 80109ae:	6078      	str	r0, [r7, #4]
 80109b0:	6039      	str	r1, [r7, #0]
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	2b01      	cmp	r3, #1
 80109b6:	f040 818b 	bne.w	8010cd0 <_Z41__static_initialization_and_destruction_0ii+0x328>
 80109ba:	683b      	ldr	r3, [r7, #0]
 80109bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80109c0:	4293      	cmp	r3, r2
 80109c2:	f040 8185 	bne.w	8010cd0 <_Z41__static_initialization_and_destruction_0ii+0x328>
                const short dash_data[] = {0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f};

                const short underscore_data[] = {0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
                const short colon_data[] = {0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x00,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x00,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f};

                const TextureAsset J {const_cast<short *>(J_data), width, height};
 80109c6:	4b7f      	ldr	r3, [pc, #508]	; (8010bc4 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	4a7f      	ldr	r2, [pc, #508]	; (8010bc8 <_Z41__static_initialization_and_destruction_0ii+0x220>)
 80109cc:	6053      	str	r3, [r2, #4]
 80109ce:	4b7f      	ldr	r3, [pc, #508]	; (8010bcc <_Z41__static_initialization_and_destruction_0ii+0x224>)
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	4a7d      	ldr	r2, [pc, #500]	; (8010bc8 <_Z41__static_initialization_and_destruction_0ii+0x220>)
 80109d4:	6093      	str	r3, [r2, #8]
                const TextureAsset U {const_cast<short *>(U_data), width, height};
 80109d6:	4b7b      	ldr	r3, [pc, #492]	; (8010bc4 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	4a7d      	ldr	r2, [pc, #500]	; (8010bd0 <_Z41__static_initialization_and_destruction_0ii+0x228>)
 80109dc:	6053      	str	r3, [r2, #4]
 80109de:	4b7b      	ldr	r3, [pc, #492]	; (8010bcc <_Z41__static_initialization_and_destruction_0ii+0x224>)
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	4a7b      	ldr	r2, [pc, #492]	; (8010bd0 <_Z41__static_initialization_and_destruction_0ii+0x228>)
 80109e4:	6093      	str	r3, [r2, #8]
                const TextureAsset D {const_cast<short *>(D_data), width, height};
 80109e6:	4b77      	ldr	r3, [pc, #476]	; (8010bc4 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 80109e8:	681b      	ldr	r3, [r3, #0]
 80109ea:	4a7a      	ldr	r2, [pc, #488]	; (8010bd4 <_Z41__static_initialization_and_destruction_0ii+0x22c>)
 80109ec:	6053      	str	r3, [r2, #4]
 80109ee:	4b77      	ldr	r3, [pc, #476]	; (8010bcc <_Z41__static_initialization_and_destruction_0ii+0x224>)
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	4a78      	ldr	r2, [pc, #480]	; (8010bd4 <_Z41__static_initialization_and_destruction_0ii+0x22c>)
 80109f4:	6093      	str	r3, [r2, #8]
                const TextureAsset S {const_cast<short *>(S_data), width, height};
 80109f6:	4b73      	ldr	r3, [pc, #460]	; (8010bc4 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	4a77      	ldr	r2, [pc, #476]	; (8010bd8 <_Z41__static_initialization_and_destruction_0ii+0x230>)
 80109fc:	6053      	str	r3, [r2, #4]
 80109fe:	4b73      	ldr	r3, [pc, #460]	; (8010bcc <_Z41__static_initialization_and_destruction_0ii+0x224>)
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	4a75      	ldr	r2, [pc, #468]	; (8010bd8 <_Z41__static_initialization_and_destruction_0ii+0x230>)
 8010a04:	6093      	str	r3, [r2, #8]
                const TextureAsset T {const_cast<short *>(T_data), width, height};
 8010a06:	4b6f      	ldr	r3, [pc, #444]	; (8010bc4 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	4a74      	ldr	r2, [pc, #464]	; (8010bdc <_Z41__static_initialization_and_destruction_0ii+0x234>)
 8010a0c:	6053      	str	r3, [r2, #4]
 8010a0e:	4b6f      	ldr	r3, [pc, #444]	; (8010bcc <_Z41__static_initialization_and_destruction_0ii+0x224>)
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	4a72      	ldr	r2, [pc, #456]	; (8010bdc <_Z41__static_initialization_and_destruction_0ii+0x234>)
 8010a14:	6093      	str	r3, [r2, #8]
                const TextureAsset I {const_cast<short *>(I_data), width, height};
 8010a16:	4b6b      	ldr	r3, [pc, #428]	; (8010bc4 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	4a71      	ldr	r2, [pc, #452]	; (8010be0 <_Z41__static_initialization_and_destruction_0ii+0x238>)
 8010a1c:	6053      	str	r3, [r2, #4]
 8010a1e:	4b6b      	ldr	r3, [pc, #428]	; (8010bcc <_Z41__static_initialization_and_destruction_0ii+0x224>)
 8010a20:	681b      	ldr	r3, [r3, #0]
 8010a22:	4a6f      	ldr	r2, [pc, #444]	; (8010be0 <_Z41__static_initialization_and_destruction_0ii+0x238>)
 8010a24:	6093      	str	r3, [r2, #8]
                const TextureAsset A {const_cast<short *>(A_data), width, height};
 8010a26:	4b67      	ldr	r3, [pc, #412]	; (8010bc4 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	4a6e      	ldr	r2, [pc, #440]	; (8010be4 <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 8010a2c:	6053      	str	r3, [r2, #4]
 8010a2e:	4b67      	ldr	r3, [pc, #412]	; (8010bcc <_Z41__static_initialization_and_destruction_0ii+0x224>)
 8010a30:	681b      	ldr	r3, [r3, #0]
 8010a32:	4a6c      	ldr	r2, [pc, #432]	; (8010be4 <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 8010a34:	6093      	str	r3, [r2, #8]
                const TextureAsset B {const_cast<short *>(B_data), width, height};
 8010a36:	4b63      	ldr	r3, [pc, #396]	; (8010bc4 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	4a6b      	ldr	r2, [pc, #428]	; (8010be8 <_Z41__static_initialization_and_destruction_0ii+0x240>)
 8010a3c:	6053      	str	r3, [r2, #4]
 8010a3e:	4b63      	ldr	r3, [pc, #396]	; (8010bcc <_Z41__static_initialization_and_destruction_0ii+0x224>)
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	4a69      	ldr	r2, [pc, #420]	; (8010be8 <_Z41__static_initialization_and_destruction_0ii+0x240>)
 8010a44:	6093      	str	r3, [r2, #8]
                const TextureAsset C {const_cast<short *>(C_data), width, height};
 8010a46:	4b5f      	ldr	r3, [pc, #380]	; (8010bc4 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	4a68      	ldr	r2, [pc, #416]	; (8010bec <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8010a4c:	6053      	str	r3, [r2, #4]
 8010a4e:	4b5f      	ldr	r3, [pc, #380]	; (8010bcc <_Z41__static_initialization_and_destruction_0ii+0x224>)
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	4a66      	ldr	r2, [pc, #408]	; (8010bec <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8010a54:	6093      	str	r3, [r2, #8]
                const TextureAsset E {const_cast<short *>(E_data), width, height};
 8010a56:	4b5b      	ldr	r3, [pc, #364]	; (8010bc4 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	4a65      	ldr	r2, [pc, #404]	; (8010bf0 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 8010a5c:	6053      	str	r3, [r2, #4]
 8010a5e:	4b5b      	ldr	r3, [pc, #364]	; (8010bcc <_Z41__static_initialization_and_destruction_0ii+0x224>)
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	4a63      	ldr	r2, [pc, #396]	; (8010bf0 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 8010a64:	6093      	str	r3, [r2, #8]
                const TextureAsset F {const_cast<short *>(F_data), width, height};
 8010a66:	4b57      	ldr	r3, [pc, #348]	; (8010bc4 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	4a62      	ldr	r2, [pc, #392]	; (8010bf4 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 8010a6c:	6053      	str	r3, [r2, #4]
 8010a6e:	4b57      	ldr	r3, [pc, #348]	; (8010bcc <_Z41__static_initialization_and_destruction_0ii+0x224>)
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	4a60      	ldr	r2, [pc, #384]	; (8010bf4 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 8010a74:	6093      	str	r3, [r2, #8]
                const TextureAsset G {const_cast<short *>(G_data), width, height};
 8010a76:	4b53      	ldr	r3, [pc, #332]	; (8010bc4 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	4a5f      	ldr	r2, [pc, #380]	; (8010bf8 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8010a7c:	6053      	str	r3, [r2, #4]
 8010a7e:	4b53      	ldr	r3, [pc, #332]	; (8010bcc <_Z41__static_initialization_and_destruction_0ii+0x224>)
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	4a5d      	ldr	r2, [pc, #372]	; (8010bf8 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8010a84:	6093      	str	r3, [r2, #8]
                const TextureAsset H {const_cast<short *>(H_data), width, height};
 8010a86:	4b4f      	ldr	r3, [pc, #316]	; (8010bc4 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 8010a88:	681b      	ldr	r3, [r3, #0]
 8010a8a:	4a5c      	ldr	r2, [pc, #368]	; (8010bfc <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8010a8c:	6053      	str	r3, [r2, #4]
 8010a8e:	4b4f      	ldr	r3, [pc, #316]	; (8010bcc <_Z41__static_initialization_and_destruction_0ii+0x224>)
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	4a5a      	ldr	r2, [pc, #360]	; (8010bfc <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8010a94:	6093      	str	r3, [r2, #8]
                const TextureAsset K {const_cast<short *>(K_data), width, height};
 8010a96:	4b4b      	ldr	r3, [pc, #300]	; (8010bc4 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 8010a98:	681b      	ldr	r3, [r3, #0]
 8010a9a:	4a59      	ldr	r2, [pc, #356]	; (8010c00 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8010a9c:	6053      	str	r3, [r2, #4]
 8010a9e:	4b4b      	ldr	r3, [pc, #300]	; (8010bcc <_Z41__static_initialization_and_destruction_0ii+0x224>)
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	4a57      	ldr	r2, [pc, #348]	; (8010c00 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8010aa4:	6093      	str	r3, [r2, #8]
                const TextureAsset L {const_cast<short *>(L_data), width, height};
 8010aa6:	4b47      	ldr	r3, [pc, #284]	; (8010bc4 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	4a56      	ldr	r2, [pc, #344]	; (8010c04 <_Z41__static_initialization_and_destruction_0ii+0x25c>)
 8010aac:	6053      	str	r3, [r2, #4]
 8010aae:	4b47      	ldr	r3, [pc, #284]	; (8010bcc <_Z41__static_initialization_and_destruction_0ii+0x224>)
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	4a54      	ldr	r2, [pc, #336]	; (8010c04 <_Z41__static_initialization_and_destruction_0ii+0x25c>)
 8010ab4:	6093      	str	r3, [r2, #8]
                const TextureAsset M {const_cast<short *>(M_data), width, height};
 8010ab6:	4b43      	ldr	r3, [pc, #268]	; (8010bc4 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	4a53      	ldr	r2, [pc, #332]	; (8010c08 <_Z41__static_initialization_and_destruction_0ii+0x260>)
 8010abc:	6053      	str	r3, [r2, #4]
 8010abe:	4b43      	ldr	r3, [pc, #268]	; (8010bcc <_Z41__static_initialization_and_destruction_0ii+0x224>)
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	4a51      	ldr	r2, [pc, #324]	; (8010c08 <_Z41__static_initialization_and_destruction_0ii+0x260>)
 8010ac4:	6093      	str	r3, [r2, #8]
                const TextureAsset N {const_cast<short *>(N_data), width, height};
 8010ac6:	4b3f      	ldr	r3, [pc, #252]	; (8010bc4 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	4a50      	ldr	r2, [pc, #320]	; (8010c0c <_Z41__static_initialization_and_destruction_0ii+0x264>)
 8010acc:	6053      	str	r3, [r2, #4]
 8010ace:	4b3f      	ldr	r3, [pc, #252]	; (8010bcc <_Z41__static_initialization_and_destruction_0ii+0x224>)
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	4a4e      	ldr	r2, [pc, #312]	; (8010c0c <_Z41__static_initialization_and_destruction_0ii+0x264>)
 8010ad4:	6093      	str	r3, [r2, #8]
                const TextureAsset O {const_cast<short *>(O_data), width, height};
 8010ad6:	4b3b      	ldr	r3, [pc, #236]	; (8010bc4 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 8010ad8:	681b      	ldr	r3, [r3, #0]
 8010ada:	4a4d      	ldr	r2, [pc, #308]	; (8010c10 <_Z41__static_initialization_and_destruction_0ii+0x268>)
 8010adc:	6053      	str	r3, [r2, #4]
 8010ade:	4b3b      	ldr	r3, [pc, #236]	; (8010bcc <_Z41__static_initialization_and_destruction_0ii+0x224>)
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	4a4b      	ldr	r2, [pc, #300]	; (8010c10 <_Z41__static_initialization_and_destruction_0ii+0x268>)
 8010ae4:	6093      	str	r3, [r2, #8]
                const TextureAsset P {const_cast<short *>(P_data), width, height};
 8010ae6:	4b37      	ldr	r3, [pc, #220]	; (8010bc4 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	4a4a      	ldr	r2, [pc, #296]	; (8010c14 <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 8010aec:	6053      	str	r3, [r2, #4]
 8010aee:	4b37      	ldr	r3, [pc, #220]	; (8010bcc <_Z41__static_initialization_and_destruction_0ii+0x224>)
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	4a48      	ldr	r2, [pc, #288]	; (8010c14 <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 8010af4:	6093      	str	r3, [r2, #8]
                const TextureAsset Q {const_cast<short *>(Q_data), width, height};
 8010af6:	4b33      	ldr	r3, [pc, #204]	; (8010bc4 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	4a47      	ldr	r2, [pc, #284]	; (8010c18 <_Z41__static_initialization_and_destruction_0ii+0x270>)
 8010afc:	6053      	str	r3, [r2, #4]
 8010afe:	4b33      	ldr	r3, [pc, #204]	; (8010bcc <_Z41__static_initialization_and_destruction_0ii+0x224>)
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	4a45      	ldr	r2, [pc, #276]	; (8010c18 <_Z41__static_initialization_and_destruction_0ii+0x270>)
 8010b04:	6093      	str	r3, [r2, #8]
                const TextureAsset R {const_cast<short *>(R_data), width, height};
 8010b06:	4b2f      	ldr	r3, [pc, #188]	; (8010bc4 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	4a44      	ldr	r2, [pc, #272]	; (8010c1c <_Z41__static_initialization_and_destruction_0ii+0x274>)
 8010b0c:	6053      	str	r3, [r2, #4]
 8010b0e:	4b2f      	ldr	r3, [pc, #188]	; (8010bcc <_Z41__static_initialization_and_destruction_0ii+0x224>)
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	4a42      	ldr	r2, [pc, #264]	; (8010c1c <_Z41__static_initialization_and_destruction_0ii+0x274>)
 8010b14:	6093      	str	r3, [r2, #8]
                const TextureAsset W {const_cast<short *>(W_data), width, height};
 8010b16:	4b2b      	ldr	r3, [pc, #172]	; (8010bc4 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 8010b18:	681b      	ldr	r3, [r3, #0]
 8010b1a:	4a41      	ldr	r2, [pc, #260]	; (8010c20 <_Z41__static_initialization_and_destruction_0ii+0x278>)
 8010b1c:	6053      	str	r3, [r2, #4]
 8010b1e:	4b2b      	ldr	r3, [pc, #172]	; (8010bcc <_Z41__static_initialization_and_destruction_0ii+0x224>)
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	4a3f      	ldr	r2, [pc, #252]	; (8010c20 <_Z41__static_initialization_and_destruction_0ii+0x278>)
 8010b24:	6093      	str	r3, [r2, #8]
                const TextureAsset V {const_cast<short *>(V_data), width, height};
 8010b26:	4b27      	ldr	r3, [pc, #156]	; (8010bc4 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	4a3e      	ldr	r2, [pc, #248]	; (8010c24 <_Z41__static_initialization_and_destruction_0ii+0x27c>)
 8010b2c:	6053      	str	r3, [r2, #4]
 8010b2e:	4b27      	ldr	r3, [pc, #156]	; (8010bcc <_Z41__static_initialization_and_destruction_0ii+0x224>)
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	4a3c      	ldr	r2, [pc, #240]	; (8010c24 <_Z41__static_initialization_and_destruction_0ii+0x27c>)
 8010b34:	6093      	str	r3, [r2, #8]
                const TextureAsset X {const_cast<short *>(X_data), width, height};
 8010b36:	4b23      	ldr	r3, [pc, #140]	; (8010bc4 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	4a3b      	ldr	r2, [pc, #236]	; (8010c28 <_Z41__static_initialization_and_destruction_0ii+0x280>)
 8010b3c:	6053      	str	r3, [r2, #4]
 8010b3e:	4b23      	ldr	r3, [pc, #140]	; (8010bcc <_Z41__static_initialization_and_destruction_0ii+0x224>)
 8010b40:	681b      	ldr	r3, [r3, #0]
 8010b42:	4a39      	ldr	r2, [pc, #228]	; (8010c28 <_Z41__static_initialization_and_destruction_0ii+0x280>)
 8010b44:	6093      	str	r3, [r2, #8]
                const TextureAsset Y {const_cast<short *>(Y_data), width, height};
 8010b46:	4b1f      	ldr	r3, [pc, #124]	; (8010bc4 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	4a38      	ldr	r2, [pc, #224]	; (8010c2c <_Z41__static_initialization_and_destruction_0ii+0x284>)
 8010b4c:	6053      	str	r3, [r2, #4]
 8010b4e:	4b1f      	ldr	r3, [pc, #124]	; (8010bcc <_Z41__static_initialization_and_destruction_0ii+0x224>)
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	4a36      	ldr	r2, [pc, #216]	; (8010c2c <_Z41__static_initialization_and_destruction_0ii+0x284>)
 8010b54:	6093      	str	r3, [r2, #8]
                const TextureAsset Z {const_cast<short *>(Z_data), width, height};
 8010b56:	4b1b      	ldr	r3, [pc, #108]	; (8010bc4 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	4a35      	ldr	r2, [pc, #212]	; (8010c30 <_Z41__static_initialization_and_destruction_0ii+0x288>)
 8010b5c:	6053      	str	r3, [r2, #4]
 8010b5e:	4b1b      	ldr	r3, [pc, #108]	; (8010bcc <_Z41__static_initialization_and_destruction_0ii+0x224>)
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	4a33      	ldr	r2, [pc, #204]	; (8010c30 <_Z41__static_initialization_and_destruction_0ii+0x288>)
 8010b64:	6093      	str	r3, [r2, #8]
                const TextureAsset SPC {const_cast<short *>(SPC_data), width, height};
 8010b66:	4b17      	ldr	r3, [pc, #92]	; (8010bc4 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	4a32      	ldr	r2, [pc, #200]	; (8010c34 <_Z41__static_initialization_and_destruction_0ii+0x28c>)
 8010b6c:	6053      	str	r3, [r2, #4]
 8010b6e:	4b17      	ldr	r3, [pc, #92]	; (8010bcc <_Z41__static_initialization_and_destruction_0ii+0x224>)
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	4a30      	ldr	r2, [pc, #192]	; (8010c34 <_Z41__static_initialization_and_destruction_0ii+0x28c>)
 8010b74:	6093      	str	r3, [r2, #8]
                const TextureAsset Zero {const_cast<short *>(zero_data), width, height};
 8010b76:	4b13      	ldr	r3, [pc, #76]	; (8010bc4 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 8010b78:	681b      	ldr	r3, [r3, #0]
 8010b7a:	4a2f      	ldr	r2, [pc, #188]	; (8010c38 <_Z41__static_initialization_and_destruction_0ii+0x290>)
 8010b7c:	6053      	str	r3, [r2, #4]
 8010b7e:	4b13      	ldr	r3, [pc, #76]	; (8010bcc <_Z41__static_initialization_and_destruction_0ii+0x224>)
 8010b80:	681b      	ldr	r3, [r3, #0]
 8010b82:	4a2d      	ldr	r2, [pc, #180]	; (8010c38 <_Z41__static_initialization_and_destruction_0ii+0x290>)
 8010b84:	6093      	str	r3, [r2, #8]
                const TextureAsset One {const_cast<short *>(one_data), width, height};
 8010b86:	4b0f      	ldr	r3, [pc, #60]	; (8010bc4 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	4a2c      	ldr	r2, [pc, #176]	; (8010c3c <_Z41__static_initialization_and_destruction_0ii+0x294>)
 8010b8c:	6053      	str	r3, [r2, #4]
 8010b8e:	4b0f      	ldr	r3, [pc, #60]	; (8010bcc <_Z41__static_initialization_and_destruction_0ii+0x224>)
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	4a2a      	ldr	r2, [pc, #168]	; (8010c3c <_Z41__static_initialization_and_destruction_0ii+0x294>)
 8010b94:	6093      	str	r3, [r2, #8]
                const TextureAsset Two {const_cast<short *>(two_data), width, height};
 8010b96:	4b0b      	ldr	r3, [pc, #44]	; (8010bc4 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	4a29      	ldr	r2, [pc, #164]	; (8010c40 <_Z41__static_initialization_and_destruction_0ii+0x298>)
 8010b9c:	6053      	str	r3, [r2, #4]
 8010b9e:	4b0b      	ldr	r3, [pc, #44]	; (8010bcc <_Z41__static_initialization_and_destruction_0ii+0x224>)
 8010ba0:	681b      	ldr	r3, [r3, #0]
 8010ba2:	4a27      	ldr	r2, [pc, #156]	; (8010c40 <_Z41__static_initialization_and_destruction_0ii+0x298>)
 8010ba4:	6093      	str	r3, [r2, #8]
                const TextureAsset Three {const_cast<short *>(three_data), width, height};
 8010ba6:	4b07      	ldr	r3, [pc, #28]	; (8010bc4 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 8010ba8:	681b      	ldr	r3, [r3, #0]
 8010baa:	4a26      	ldr	r2, [pc, #152]	; (8010c44 <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 8010bac:	6053      	str	r3, [r2, #4]
 8010bae:	4b07      	ldr	r3, [pc, #28]	; (8010bcc <_Z41__static_initialization_and_destruction_0ii+0x224>)
 8010bb0:	681b      	ldr	r3, [r3, #0]
 8010bb2:	4a24      	ldr	r2, [pc, #144]	; (8010c44 <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 8010bb4:	6093      	str	r3, [r2, #8]
                const TextureAsset Four {const_cast<short *>(four_data), width, height};
 8010bb6:	4b03      	ldr	r3, [pc, #12]	; (8010bc4 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	4a23      	ldr	r2, [pc, #140]	; (8010c48 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8010bbc:	6053      	str	r3, [r2, #4]
 8010bbe:	4b03      	ldr	r3, [pc, #12]	; (8010bcc <_Z41__static_initialization_and_destruction_0ii+0x224>)
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	e043      	b.n	8010c4c <_Z41__static_initialization_and_destruction_0ii+0x2a4>
 8010bc4:	200000cc 	.word	0x200000cc
 8010bc8:	200000d4 	.word	0x200000d4
 8010bcc:	200000d0 	.word	0x200000d0
 8010bd0:	200000e0 	.word	0x200000e0
 8010bd4:	200000ec 	.word	0x200000ec
 8010bd8:	200000f8 	.word	0x200000f8
 8010bdc:	20000104 	.word	0x20000104
 8010be0:	20000110 	.word	0x20000110
 8010be4:	2000011c 	.word	0x2000011c
 8010be8:	20000128 	.word	0x20000128
 8010bec:	20000134 	.word	0x20000134
 8010bf0:	20000140 	.word	0x20000140
 8010bf4:	2000014c 	.word	0x2000014c
 8010bf8:	20000158 	.word	0x20000158
 8010bfc:	20000164 	.word	0x20000164
 8010c00:	20000170 	.word	0x20000170
 8010c04:	2000017c 	.word	0x2000017c
 8010c08:	20000188 	.word	0x20000188
 8010c0c:	20000194 	.word	0x20000194
 8010c10:	200001a0 	.word	0x200001a0
 8010c14:	200001ac 	.word	0x200001ac
 8010c18:	200001b8 	.word	0x200001b8
 8010c1c:	200001c4 	.word	0x200001c4
 8010c20:	200001d0 	.word	0x200001d0
 8010c24:	200001dc 	.word	0x200001dc
 8010c28:	200001e8 	.word	0x200001e8
 8010c2c:	200001f4 	.word	0x200001f4
 8010c30:	20000200 	.word	0x20000200
 8010c34:	2000020c 	.word	0x2000020c
 8010c38:	20000218 	.word	0x20000218
 8010c3c:	20000224 	.word	0x20000224
 8010c40:	20000230 	.word	0x20000230
 8010c44:	2000023c 	.word	0x2000023c
 8010c48:	20000248 	.word	0x20000248
 8010c4c:	4a23      	ldr	r2, [pc, #140]	; (8010cdc <_Z41__static_initialization_and_destruction_0ii+0x334>)
 8010c4e:	6093      	str	r3, [r2, #8]
                const TextureAsset Five {const_cast<short *>(five_data), width, height};
 8010c50:	4b23      	ldr	r3, [pc, #140]	; (8010ce0 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 8010c52:	681b      	ldr	r3, [r3, #0]
 8010c54:	4a23      	ldr	r2, [pc, #140]	; (8010ce4 <_Z41__static_initialization_and_destruction_0ii+0x33c>)
 8010c56:	6053      	str	r3, [r2, #4]
 8010c58:	4b23      	ldr	r3, [pc, #140]	; (8010ce8 <_Z41__static_initialization_and_destruction_0ii+0x340>)
 8010c5a:	681b      	ldr	r3, [r3, #0]
 8010c5c:	4a21      	ldr	r2, [pc, #132]	; (8010ce4 <_Z41__static_initialization_and_destruction_0ii+0x33c>)
 8010c5e:	6093      	str	r3, [r2, #8]
                const TextureAsset Six {const_cast<short *>(six_data), width, height};
 8010c60:	4b1f      	ldr	r3, [pc, #124]	; (8010ce0 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	4a21      	ldr	r2, [pc, #132]	; (8010cec <_Z41__static_initialization_and_destruction_0ii+0x344>)
 8010c66:	6053      	str	r3, [r2, #4]
 8010c68:	4b1f      	ldr	r3, [pc, #124]	; (8010ce8 <_Z41__static_initialization_and_destruction_0ii+0x340>)
 8010c6a:	681b      	ldr	r3, [r3, #0]
 8010c6c:	4a1f      	ldr	r2, [pc, #124]	; (8010cec <_Z41__static_initialization_and_destruction_0ii+0x344>)
 8010c6e:	6093      	str	r3, [r2, #8]
                const TextureAsset Seven {const_cast<short *>(seven_data), width, height};
 8010c70:	4b1b      	ldr	r3, [pc, #108]	; (8010ce0 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	4a1e      	ldr	r2, [pc, #120]	; (8010cf0 <_Z41__static_initialization_and_destruction_0ii+0x348>)
 8010c76:	6053      	str	r3, [r2, #4]
 8010c78:	4b1b      	ldr	r3, [pc, #108]	; (8010ce8 <_Z41__static_initialization_and_destruction_0ii+0x340>)
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	4a1c      	ldr	r2, [pc, #112]	; (8010cf0 <_Z41__static_initialization_and_destruction_0ii+0x348>)
 8010c7e:	6093      	str	r3, [r2, #8]
                const TextureAsset Eight {const_cast<short *>(eight_data), width, height};
 8010c80:	4b17      	ldr	r3, [pc, #92]	; (8010ce0 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	4a1b      	ldr	r2, [pc, #108]	; (8010cf4 <_Z41__static_initialization_and_destruction_0ii+0x34c>)
 8010c86:	6053      	str	r3, [r2, #4]
 8010c88:	4b17      	ldr	r3, [pc, #92]	; (8010ce8 <_Z41__static_initialization_and_destruction_0ii+0x340>)
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	4a19      	ldr	r2, [pc, #100]	; (8010cf4 <_Z41__static_initialization_and_destruction_0ii+0x34c>)
 8010c8e:	6093      	str	r3, [r2, #8]
                const TextureAsset Nine {const_cast<short *>(nine_data), width, height};
 8010c90:	4b13      	ldr	r3, [pc, #76]	; (8010ce0 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	4a18      	ldr	r2, [pc, #96]	; (8010cf8 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 8010c96:	6053      	str	r3, [r2, #4]
 8010c98:	4b13      	ldr	r3, [pc, #76]	; (8010ce8 <_Z41__static_initialization_and_destruction_0ii+0x340>)
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	4a16      	ldr	r2, [pc, #88]	; (8010cf8 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 8010c9e:	6093      	str	r3, [r2, #8]
                const TextureAsset Underscore {const_cast<short *>(underscore_data), width, height};
 8010ca0:	4b0f      	ldr	r3, [pc, #60]	; (8010ce0 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 8010ca2:	681b      	ldr	r3, [r3, #0]
 8010ca4:	4a15      	ldr	r2, [pc, #84]	; (8010cfc <_Z41__static_initialization_and_destruction_0ii+0x354>)
 8010ca6:	6053      	str	r3, [r2, #4]
 8010ca8:	4b0f      	ldr	r3, [pc, #60]	; (8010ce8 <_Z41__static_initialization_and_destruction_0ii+0x340>)
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	4a13      	ldr	r2, [pc, #76]	; (8010cfc <_Z41__static_initialization_and_destruction_0ii+0x354>)
 8010cae:	6093      	str	r3, [r2, #8]
                const TextureAsset Dash {const_cast<short *>(dash_data), width, height};
 8010cb0:	4b0b      	ldr	r3, [pc, #44]	; (8010ce0 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 8010cb2:	681b      	ldr	r3, [r3, #0]
 8010cb4:	4a12      	ldr	r2, [pc, #72]	; (8010d00 <_Z41__static_initialization_and_destruction_0ii+0x358>)
 8010cb6:	6053      	str	r3, [r2, #4]
 8010cb8:	4b0b      	ldr	r3, [pc, #44]	; (8010ce8 <_Z41__static_initialization_and_destruction_0ii+0x340>)
 8010cba:	681b      	ldr	r3, [r3, #0]
 8010cbc:	4a10      	ldr	r2, [pc, #64]	; (8010d00 <_Z41__static_initialization_and_destruction_0ii+0x358>)
 8010cbe:	6093      	str	r3, [r2, #8]
                const TextureAsset Colon {const_cast<short *>(colon_data), width, height};
 8010cc0:	4b07      	ldr	r3, [pc, #28]	; (8010ce0 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 8010cc2:	681b      	ldr	r3, [r3, #0]
 8010cc4:	4a0f      	ldr	r2, [pc, #60]	; (8010d04 <_Z41__static_initialization_and_destruction_0ii+0x35c>)
 8010cc6:	6053      	str	r3, [r2, #4]
 8010cc8:	4b07      	ldr	r3, [pc, #28]	; (8010ce8 <_Z41__static_initialization_and_destruction_0ii+0x340>)
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	4a0d      	ldr	r2, [pc, #52]	; (8010d04 <_Z41__static_initialization_and_destruction_0ii+0x35c>)
 8010cce:	6093      	str	r3, [r2, #8]
 8010cd0:	bf00      	nop
 8010cd2:	370c      	adds	r7, #12
 8010cd4:	46bd      	mov	sp, r7
 8010cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cda:	4770      	bx	lr
 8010cdc:	20000248 	.word	0x20000248
 8010ce0:	200000cc 	.word	0x200000cc
 8010ce4:	20000254 	.word	0x20000254
 8010ce8:	200000d0 	.word	0x200000d0
 8010cec:	20000260 	.word	0x20000260
 8010cf0:	2000026c 	.word	0x2000026c
 8010cf4:	20000278 	.word	0x20000278
 8010cf8:	20000284 	.word	0x20000284
 8010cfc:	20000290 	.word	0x20000290
 8010d00:	2000029c 	.word	0x2000029c
 8010d04:	200002a8 	.word	0x200002a8

08010d08 <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 8010d08:	b580      	push	{r7, lr}
 8010d0a:	b082      	sub	sp, #8
 8010d0c:	af00      	add	r7, sp, #0
 8010d0e:	6078      	str	r0, [r7, #4]
 8010d10:	4a08      	ldr	r2, [pc, #32]	; (8010d34 <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev+0x2c>)
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	601a      	str	r2, [r3, #0]
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	330c      	adds	r3, #12
 8010d1a:	4618      	mov	r0, r3
 8010d1c:	f7ff fc49 	bl	80105b2 <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	4618      	mov	r0, r3
 8010d24:	f7f3 f896 	bl	8003e54 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	4618      	mov	r0, r3
 8010d2c:	3708      	adds	r7, #8
 8010d2e:	46bd      	mov	sp, r7
 8010d30:	bd80      	pop	{r7, pc}
 8010d32:	bf00      	nop
 8010d34:	080247b0 	.word	0x080247b0

08010d38 <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
 8010d38:	b580      	push	{r7, lr}
 8010d3a:	b082      	sub	sp, #8
 8010d3c:	af00      	add	r7, sp, #0
 8010d3e:	6078      	str	r0, [r7, #4]
 8010d40:	6878      	ldr	r0, [r7, #4]
 8010d42:	f7ff ffe1 	bl	8010d08 <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
 8010d46:	2114      	movs	r1, #20
 8010d48:	6878      	ldr	r0, [r7, #4]
 8010d4a:	f00e fdb6 	bl	801f8ba <_ZdlPvj>
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	4618      	mov	r0, r3
 8010d52:	3708      	adds	r7, #8
 8010d54:	46bd      	mov	sp, r7
 8010d56:	bd80      	pop	{r7, pc}

08010d58 <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8010d58:	b580      	push	{r7, lr}
 8010d5a:	b082      	sub	sp, #8
 8010d5c:	af00      	add	r7, sp, #0
 8010d5e:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	330c      	adds	r3, #12
 8010d64:	4618      	mov	r0, r3
 8010d66:	f000 f840 	bl	8010dea <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>
 8010d6a:	4602      	mov	r2, r0
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	691b      	ldr	r3, [r3, #16]
 8010d70:	4619      	mov	r1, r3
 8010d72:	4610      	mov	r0, r2
 8010d74:	f7ff fc6d 	bl	8010652 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>
 8010d78:	bf00      	nop
 8010d7a:	3708      	adds	r7, #8
 8010d7c:	46bd      	mov	sp, r7
 8010d7e:	bd80      	pop	{r7, pc}

08010d80 <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8010d80:	b580      	push	{r7, lr}
 8010d82:	b086      	sub	sp, #24
 8010d84:	af00      	add	r7, sp, #0
 8010d86:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	330c      	adds	r3, #12
 8010d8c:	4618      	mov	r0, r3
 8010d8e:	f000 f839 	bl	8010e04 <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>
 8010d92:	4602      	mov	r2, r0
 8010d94:	f107 0314 	add.w	r3, r7, #20
 8010d98:	4611      	mov	r1, r2
 8010d9a:	4618      	mov	r0, r3
 8010d9c:	f7ff fba1 	bl	80104e2 <_ZNSaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8010da0:	f107 0114 	add.w	r1, r7, #20
 8010da4:	f107 030c 	add.w	r3, r7, #12
 8010da8:	687a      	ldr	r2, [r7, #4]
 8010daa:	4618      	mov	r0, r3
 8010dac:	f7ff fd16 	bl	80107dc <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
	this->~_Sp_counted_deleter();
 8010db0:	6878      	ldr	r0, [r7, #4]
 8010db2:	f7ff ffa9 	bl	8010d08 <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8010db6:	f107 030c 	add.w	r3, r7, #12
 8010dba:	4618      	mov	r0, r3
 8010dbc:	f7ff fbbd 	bl	801053a <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	__allocator_type __a(_M_impl._M_alloc());
 8010dc0:	f107 0314 	add.w	r3, r7, #20
 8010dc4:	4618      	mov	r0, r3
 8010dc6:	f7ff fb99 	bl	80104fc <_ZNSaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
      }
 8010dca:	bf00      	nop
 8010dcc:	3718      	adds	r7, #24
 8010dce:	46bd      	mov	sp, r7
 8010dd0:	bd80      	pop	{r7, pc}

08010dd2 <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept
 8010dd2:	b480      	push	{r7}
 8010dd4:	b083      	sub	sp, #12
 8010dd6:	af00      	add	r7, sp, #0
 8010dd8:	6078      	str	r0, [r7, #4]
 8010dda:	6039      	str	r1, [r7, #0]
        return nullptr;
 8010ddc:	2300      	movs	r3, #0
      }
 8010dde:	4618      	mov	r0, r3
 8010de0:	370c      	adds	r7, #12
 8010de2:	46bd      	mov	sp, r7
 8010de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010de8:	4770      	bx	lr

08010dea <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 8010dea:	b580      	push	{r7, lr}
 8010dec:	b082      	sub	sp, #8
 8010dee:	af00      	add	r7, sp, #0
 8010df0:	6078      	str	r0, [r7, #4]
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	4618      	mov	r0, r3
 8010df6:	f000 f813 	bl	8010e20 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>
 8010dfa:	4603      	mov	r3, r0
 8010dfc:	4618      	mov	r0, r3
 8010dfe:	3708      	adds	r7, #8
 8010e00:	46bd      	mov	sp, r7
 8010e02:	bd80      	pop	{r7, pc}

08010e04 <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 8010e04:	b580      	push	{r7, lr}
 8010e06:	b082      	sub	sp, #8
 8010e08:	af00      	add	r7, sp, #0
 8010e0a:	6078      	str	r0, [r7, #4]
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	3301      	adds	r3, #1
 8010e10:	4618      	mov	r0, r3
 8010e12:	f000 f810 	bl	8010e36 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama7TextureEELb1EE6_S_getERS3_>
 8010e16:	4603      	mov	r3, r0
 8010e18:	4618      	mov	r0, r3
 8010e1a:	3708      	adds	r7, #8
 8010e1c:	46bd      	mov	sp, r7
 8010e1e:	bd80      	pop	{r7, pc}

08010e20 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>:
      _S_get(_Sp_ebo_helper& __eboh)
 8010e20:	b480      	push	{r7}
 8010e22:	b083      	sub	sp, #12
 8010e24:	af00      	add	r7, sp, #0
 8010e26:	6078      	str	r0, [r7, #4]
      { return __eboh._M_tp; }
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	4618      	mov	r0, r3
 8010e2c:	370c      	adds	r7, #12
 8010e2e:	46bd      	mov	sp, r7
 8010e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e34:	4770      	bx	lr

08010e36 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama7TextureEELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 8010e36:	b480      	push	{r7}
 8010e38:	b083      	sub	sp, #12
 8010e3a:	af00      	add	r7, sp, #0
 8010e3c:	6078      	str	r0, [r7, #4]
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	4618      	mov	r0, r3
 8010e42:	370c      	adds	r7, #12
 8010e44:	46bd      	mov	sp, r7
 8010e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e4a:	4770      	bx	lr

08010e4c <_GLOBAL__sub_I__ZN4tama5asset4font8standard5widthE>:
 8010e4c:	b580      	push	{r7, lr}
 8010e4e:	af00      	add	r7, sp, #0
 8010e50:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010e54:	2001      	movs	r0, #1
 8010e56:	f7ff fda7 	bl	80109a8 <_Z41__static_initialization_and_destruction_0ii>
 8010e5a:	bd80      	pop	{r7, pc}

08010e5c <_ZN4tama14ChangeObserverC1Ev>:
#ifndef VPET_CHANGEOBSERVER_H
#define VPET_CHANGEOBSERVER_H

namespace tama
{
    class ChangeObserver
 8010e5c:	b480      	push	{r7}
 8010e5e:	b083      	sub	sp, #12
 8010e60:	af00      	add	r7, sp, #0
 8010e62:	6078      	str	r0, [r7, #4]
 8010e64:	4a04      	ldr	r2, [pc, #16]	; (8010e78 <_ZN4tama14ChangeObserverC1Ev+0x1c>)
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	601a      	str	r2, [r3, #0]
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	4618      	mov	r0, r3
 8010e6e:	370c      	adds	r7, #12
 8010e70:	46bd      	mov	sp, r7
 8010e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e76:	4770      	bx	lr
 8010e78:	08024810 	.word	0x08024810

08010e7c <_ZN4tama5SceneC1Ev>:
// Created by grzegorz on 3/28/21.
//

#include "Scene.h"

tama::Scene::Scene()
 8010e7c:	b590      	push	{r4, r7, lr}
 8010e7e:	b085      	sub	sp, #20
 8010e80:	af00      	add	r7, sp, #0
 8010e82:	6078      	str	r0, [r7, #4]
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	4618      	mov	r0, r3
 8010e88:	f7ff ffe8 	bl	8010e5c <_ZN4tama14ChangeObserverC1Ev>
 8010e8c:	4a15      	ldr	r2, [pc, #84]	; (8010ee4 <_ZN4tama5SceneC1Ev+0x68>)
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	601a      	str	r2, [r3, #0]
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	3304      	adds	r3, #4
 8010e96:	4618      	mov	r0, r3
 8010e98:	f7fd fe5e 	bl	800eb58 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEC1Ev>
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	330c      	adds	r3, #12
 8010ea0:	4618      	mov	r0, r3
 8010ea2:	f000 f8dc 	bl	801105e <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EEC1Ev>
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	2254      	movs	r2, #84	; 0x54
 8010eaa:	619a      	str	r2, [r3, #24]
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	2230      	movs	r2, #48	; 0x30
 8010eb0:	61da      	str	r2, [r3, #28]
{
    observer = nullptr;
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	1d1c      	adds	r4, r3, #4
 8010eb6:	f107 0308 	add.w	r3, r7, #8
 8010eba:	2100      	movs	r1, #0
 8010ebc:	4618      	mov	r0, r3
 8010ebe:	f7fd fe58 	bl	800eb72 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEC1EDn>
 8010ec2:	f107 0308 	add.w	r3, r7, #8
 8010ec6:	4619      	mov	r1, r3
 8010ec8:	4620      	mov	r0, r4
 8010eca:	f7f4 fe1c 	bl	8005b06 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEaSEOS2_>
 8010ece:	f107 0308 	add.w	r3, r7, #8
 8010ed2:	4618      	mov	r0, r3
 8010ed4:	f7f3 fced 	bl	80048b2 <_ZNSt10shared_ptrIN4tama14ChangeObserverEED1Ev>
}
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	4618      	mov	r0, r3
 8010edc:	3714      	adds	r7, #20
 8010ede:	46bd      	mov	sp, r7
 8010ee0:	bd90      	pop	{r4, r7, pc}
 8010ee2:	bf00      	nop
 8010ee4:	08024804 	.word	0x08024804

08010ee8 <_ZN4tama5Scene11addDrawableESt10shared_ptrINS_8DrawableEE>:
{
    this->observer = observer;
}

void tama::Scene::addDrawable(std::shared_ptr<Drawable> drawable)
{
 8010ee8:	b580      	push	{r7, lr}
 8010eea:	b082      	sub	sp, #8
 8010eec:	af00      	add	r7, sp, #0
 8010eee:	6078      	str	r0, [r7, #4]
 8010ef0:	6039      	str	r1, [r7, #0]
    this->drawables.push_back(drawable);
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	330c      	adds	r3, #12
 8010ef6:	6839      	ldr	r1, [r7, #0]
 8010ef8:	4618      	mov	r0, r3
 8010efa:	f000 f8bd 	bl	8011078 <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE9push_backERKS3_>
    //drawable->setChangeObserver(std::shared_ptr<Scene>(&(*this)));
}
 8010efe:	bf00      	nop
 8010f00:	3708      	adds	r7, #8
 8010f02:	46bd      	mov	sp, r7
 8010f04:	bd80      	pop	{r7, pc}

08010f06 <_ZNSt12__shared_ptrIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8010f06:	b580      	push	{r7, lr}
 8010f08:	b082      	sub	sp, #8
 8010f0a:	af00      	add	r7, sp, #0
 8010f0c:	6078      	str	r0, [r7, #4]
 8010f0e:	6039      	str	r1, [r7, #0]
 8010f10:	683b      	ldr	r3, [r7, #0]
 8010f12:	681a      	ldr	r2, [r3, #0]
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	601a      	str	r2, [r3, #0]
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	1d1a      	adds	r2, r3, #4
 8010f1c:	683b      	ldr	r3, [r7, #0]
 8010f1e:	3304      	adds	r3, #4
 8010f20:	4619      	mov	r1, r3
 8010f22:	4610      	mov	r0, r2
 8010f24:	f7f2 f8de 	bl	80030e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	4618      	mov	r0, r3
 8010f2c:	3708      	adds	r7, #8
 8010f2e:	46bd      	mov	sp, r7
 8010f30:	bd80      	pop	{r7, pc}

08010f32 <_ZNSt10shared_ptrIN4tama8DrawableEEC1ERKS2_>:
      shared_ptr(const shared_ptr&) noexcept = default;
 8010f32:	b580      	push	{r7, lr}
 8010f34:	b082      	sub	sp, #8
 8010f36:	af00      	add	r7, sp, #0
 8010f38:	6078      	str	r0, [r7, #4]
 8010f3a:	6039      	str	r1, [r7, #0]
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	683a      	ldr	r2, [r7, #0]
 8010f40:	4611      	mov	r1, r2
 8010f42:	4618      	mov	r0, r3
 8010f44:	f7ff ffdf 	bl	8010f06 <_ZNSt12__shared_ptrIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	4618      	mov	r0, r3
 8010f4c:	3708      	adds	r7, #8
 8010f4e:	46bd      	mov	sp, r7
 8010f50:	bd80      	pop	{r7, pc}

08010f52 <_ZN4tama5Scene12getSceneDataEv>:
{

}

std::shared_ptr<tama::Texture> tama::Scene::getSceneData()
{
 8010f52:	b590      	push	{r4, r7, lr}
 8010f54:	b08d      	sub	sp, #52	; 0x34
 8010f56:	af00      	add	r7, sp, #0
 8010f58:	6078      	str	r0, [r7, #4]
 8010f5a:	6039      	str	r1, [r7, #0]
    std::shared_ptr<tama::Texture> texture = std::make_shared<tama::Texture>(width, height);
 8010f5c:	683b      	ldr	r3, [r7, #0]
 8010f5e:	f103 0118 	add.w	r1, r3, #24
 8010f62:	683b      	ldr	r3, [r7, #0]
 8010f64:	f103 021c 	add.w	r2, r3, #28
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	4618      	mov	r0, r3
 8010f6c:	f000 f8b5 	bl	80110da <_ZSt11make_sharedIN4tama7TextureEJRjS2_EESt10shared_ptrIT_EDpOT0_>
    for (auto drawable : drawables)
 8010f70:	683b      	ldr	r3, [r7, #0]
 8010f72:	330c      	adds	r3, #12
 8010f74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010f76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010f78:	f000 f8d1 	bl	801111e <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE5beginEv>
 8010f7c:	4603      	mov	r3, r0
 8010f7e:	613b      	str	r3, [r7, #16]
 8010f80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010f82:	f000 f8dc 	bl	801113e <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE3endEv>
 8010f86:	4603      	mov	r3, r0
 8010f88:	60fb      	str	r3, [r7, #12]
 8010f8a:	f107 020c 	add.w	r2, r7, #12
 8010f8e:	f107 0310 	add.w	r3, r7, #16
 8010f92:	4611      	mov	r1, r2
 8010f94:	4618      	mov	r0, r3
 8010f96:	f000 f8e3 	bl	8011160 <_ZN9__gnu_cxxneIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEEbRKNS_17__normal_iteratorIT_T0_EESE_>
 8010f9a:	4603      	mov	r3, r0
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d04f      	beq.n	8011040 <_ZN4tama5Scene12getSceneDataEv+0xee>
 8010fa0:	f107 0310 	add.w	r3, r7, #16
 8010fa4:	4618      	mov	r0, r3
 8010fa6:	f000 f904 	bl	80111b2 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEdeEv>
 8010faa:	4602      	mov	r2, r0
 8010fac:	f107 0314 	add.w	r3, r7, #20
 8010fb0:	4611      	mov	r1, r2
 8010fb2:	4618      	mov	r0, r3
 8010fb4:	f7ff ffbd 	bl	8010f32 <_ZNSt10shared_ptrIN4tama8DrawableEEC1ERKS2_>
    {
        if (drawable->isVisible())
 8010fb8:	f107 0314 	add.w	r3, r7, #20
 8010fbc:	4618      	mov	r0, r3
 8010fbe:	f000 f904 	bl	80111ca <_ZNKSt19__shared_ptr_accessIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8010fc2:	4602      	mov	r2, r0
 8010fc4:	6813      	ldr	r3, [r2, #0]
 8010fc6:	3320      	adds	r3, #32
 8010fc8:	681b      	ldr	r3, [r3, #0]
 8010fca:	4610      	mov	r0, r2
 8010fcc:	4798      	blx	r3
 8010fce:	4603      	mov	r3, r0
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d02a      	beq.n	801102a <_ZN4tama5Scene12getSceneDataEv+0xd8>
        {
            texture->insertAt(drawable->getPosition(), drawable->getTexture());
 8010fd4:	6878      	ldr	r0, [r7, #4]
 8010fd6:	f7f6 f86b 	bl	80070b0 <_ZNKSt19__shared_ptr_accessIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8010fda:	4604      	mov	r4, r0
 8010fdc:	f107 0314 	add.w	r3, r7, #20
 8010fe0:	4618      	mov	r0, r3
 8010fe2:	f000 f8f2 	bl	80111ca <_ZNKSt19__shared_ptr_accessIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8010fe6:	4602      	mov	r2, r0
 8010fe8:	6813      	ldr	r3, [r2, #0]
 8010fea:	330c      	adds	r3, #12
 8010fec:	681b      	ldr	r3, [r3, #0]
 8010fee:	f107 001c 	add.w	r0, r7, #28
 8010ff2:	4611      	mov	r1, r2
 8010ff4:	4798      	blx	r3
 8010ff6:	f107 0314 	add.w	r3, r7, #20
 8010ffa:	4618      	mov	r0, r3
 8010ffc:	f000 f8e5 	bl	80111ca <_ZNKSt19__shared_ptr_accessIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8011000:	4602      	mov	r2, r0
 8011002:	6813      	ldr	r3, [r2, #0]
 8011004:	3308      	adds	r3, #8
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801100c:	4611      	mov	r1, r2
 801100e:	4798      	blx	r3
 8011010:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011014:	f107 021c 	add.w	r2, r7, #28
 8011018:	ca06      	ldmia	r2, {r1, r2}
 801101a:	4620      	mov	r0, r4
 801101c:	f7fd fe5a 	bl	800ecd4 <_ZN4tama7Texture8insertAtENS_5Vec2dESt10shared_ptrIS0_E>
 8011020:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011024:	4618      	mov	r0, r3
 8011026:	f7f4 f8e0 	bl	80051ea <_ZNSt10shared_ptrIN4tama7TextureEED1Ev>
    for (auto drawable : drawables)
 801102a:	f107 0314 	add.w	r3, r7, #20
 801102e:	4618      	mov	r0, r3
 8011030:	f7f3 fd5c 	bl	8004aec <_ZNSt10shared_ptrIN4tama8DrawableEED1Ev>
 8011034:	f107 0310 	add.w	r3, r7, #16
 8011038:	4618      	mov	r0, r3
 801103a:	f000 f8a9 	bl	8011190 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEppEv>
 801103e:	e7a4      	b.n	8010f8a <_ZN4tama5Scene12getSceneDataEv+0x38>
        }
    }
    return texture;
 8011040:	bf00      	nop
}
 8011042:	6878      	ldr	r0, [r7, #4]
 8011044:	3734      	adds	r7, #52	; 0x34
 8011046:	46bd      	mov	sp, r7
 8011048:	bd90      	pop	{r4, r7, pc}

0801104a <_ZN4tama5Scene8onChangeEv>:

void tama::Scene::onChange()
{
 801104a:	b480      	push	{r7}
 801104c:	b083      	sub	sp, #12
 801104e:	af00      	add	r7, sp, #0
 8011050:	6078      	str	r0, [r7, #4]

}
 8011052:	bf00      	nop
 8011054:	370c      	adds	r7, #12
 8011056:	46bd      	mov	sp, r7
 8011058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801105c:	4770      	bx	lr

0801105e <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EEC1Ev>:
      vector()
 801105e:	b580      	push	{r7, lr}
 8011060:	b082      	sub	sp, #8
 8011062:	af00      	add	r7, sp, #0
 8011064:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	4618      	mov	r0, r3
 801106a:	f000 f8ba 	bl	80111e2 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EEC1Ev>
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	4618      	mov	r0, r3
 8011072:	3708      	adds	r7, #8
 8011074:	46bd      	mov	sp, r7
 8011076:	bd80      	pop	{r7, pc}

08011078 <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE9push_backERKS3_>:
      push_back(const value_type& __x)
 8011078:	b580      	push	{r7, lr}
 801107a:	b082      	sub	sp, #8
 801107c:	af00      	add	r7, sp, #0
 801107e:	6078      	str	r0, [r7, #4]
 8011080:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	685a      	ldr	r2, [r3, #4]
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	689b      	ldr	r3, [r3, #8]
 801108a:	429a      	cmp	r2, r3
 801108c:	d00d      	beq.n	80110aa <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE9push_backERKS3_+0x32>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 801108e:	6878      	ldr	r0, [r7, #4]
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	685b      	ldr	r3, [r3, #4]
 8011094:	683a      	ldr	r2, [r7, #0]
 8011096:	4619      	mov	r1, r3
 8011098:	f000 f8bb 	bl	8011212 <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama8DrawableEEEE9constructIS3_JRKS3_EEEvRS4_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	685b      	ldr	r3, [r3, #4]
 80110a0:	f103 0208 	add.w	r2, r3, #8
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	605a      	str	r2, [r3, #4]
      }
 80110a8:	e008      	b.n	80110bc <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE9push_backERKS3_+0x44>
	  _M_realloc_insert(end(), __x);
 80110aa:	6878      	ldr	r0, [r7, #4]
 80110ac:	f000 f847 	bl	801113e <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE3endEv>
 80110b0:	4603      	mov	r3, r0
 80110b2:	683a      	ldr	r2, [r7, #0]
 80110b4:	4619      	mov	r1, r3
 80110b6:	6878      	ldr	r0, [r7, #4]
 80110b8:	f000 f8be 	bl	8011238 <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_>
      }
 80110bc:	bf00      	nop
 80110be:	3708      	adds	r7, #8
 80110c0:	46bd      	mov	sp, r7
 80110c2:	bd80      	pop	{r7, pc}

080110c4 <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80110c4:	b480      	push	{r7}
 80110c6:	b083      	sub	sp, #12
 80110c8:	af00      	add	r7, sp, #0
 80110ca:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	4618      	mov	r0, r3
 80110d0:	370c      	adds	r7, #12
 80110d2:	46bd      	mov	sp, r7
 80110d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110d8:	4770      	bx	lr

080110da <_ZSt11make_sharedIN4tama7TextureEJRjS2_EESt10shared_ptrIT_EDpOT0_>:
    make_shared(_Args&&... __args)
 80110da:	b590      	push	{r4, r7, lr}
 80110dc:	b087      	sub	sp, #28
 80110de:	af00      	add	r7, sp, #0
 80110e0:	60f8      	str	r0, [r7, #12]
 80110e2:	60b9      	str	r1, [r7, #8]
 80110e4:	607a      	str	r2, [r7, #4]
				       std::forward<_Args>(__args)...);
 80110e6:	f107 0314 	add.w	r3, r7, #20
 80110ea:	4618      	mov	r0, r3
 80110ec:	f7fe fd29 	bl	800fb42 <_ZNSaIN4tama7TextureEEC1Ev>
 80110f0:	68b8      	ldr	r0, [r7, #8]
 80110f2:	f7ff ffe7 	bl	80110c4 <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 80110f6:	4604      	mov	r4, r0
 80110f8:	6878      	ldr	r0, [r7, #4]
 80110fa:	f7ff ffe3 	bl	80110c4 <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 80110fe:	4603      	mov	r3, r0
 8011100:	68f8      	ldr	r0, [r7, #12]
 8011102:	f107 0114 	add.w	r1, r7, #20
 8011106:	4622      	mov	r2, r4
 8011108:	f000 f922 	bl	8011350 <_ZSt15allocate_sharedIN4tama7TextureESaIS1_EJRjS3_EESt10shared_ptrIT_ERKT0_DpOT1_>
 801110c:	f107 0314 	add.w	r3, r7, #20
 8011110:	4618      	mov	r0, r3
 8011112:	f7fe fd22 	bl	800fb5a <_ZNSaIN4tama7TextureEED1Ev>
    }
 8011116:	68f8      	ldr	r0, [r7, #12]
 8011118:	371c      	adds	r7, #28
 801111a:	46bd      	mov	sp, r7
 801111c:	bd90      	pop	{r4, r7, pc}

0801111e <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 801111e:	b580      	push	{r7, lr}
 8011120:	b084      	sub	sp, #16
 8011122:	af00      	add	r7, sp, #0
 8011124:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8011126:	687a      	ldr	r2, [r7, #4]
 8011128:	f107 030c 	add.w	r3, r7, #12
 801112c:	4611      	mov	r1, r2
 801112e:	4618      	mov	r0, r3
 8011130:	f000 f928 	bl	8011384 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEC1ERKS5_>
 8011134:	68fb      	ldr	r3, [r7, #12]
 8011136:	4618      	mov	r0, r3
 8011138:	3710      	adds	r7, #16
 801113a:	46bd      	mov	sp, r7
 801113c:	bd80      	pop	{r7, pc}

0801113e <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 801113e:	b580      	push	{r7, lr}
 8011140:	b084      	sub	sp, #16
 8011142:	af00      	add	r7, sp, #0
 8011144:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	1d1a      	adds	r2, r3, #4
 801114a:	f107 030c 	add.w	r3, r7, #12
 801114e:	4611      	mov	r1, r2
 8011150:	4618      	mov	r0, r3
 8011152:	f000 f917 	bl	8011384 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEC1ERKS5_>
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	4618      	mov	r0, r3
 801115a:	3710      	adds	r7, #16
 801115c:	46bd      	mov	sp, r7
 801115e:	bd80      	pop	{r7, pc}

08011160 <_ZN9__gnu_cxxneIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEEbRKNS_17__normal_iteratorIT_T0_EESE_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8011160:	b590      	push	{r4, r7, lr}
 8011162:	b083      	sub	sp, #12
 8011164:	af00      	add	r7, sp, #0
 8011166:	6078      	str	r0, [r7, #4]
 8011168:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 801116a:	6878      	ldr	r0, [r7, #4]
 801116c:	f000 f91a 	bl	80113a4 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEE4baseEv>
 8011170:	4603      	mov	r3, r0
 8011172:	681c      	ldr	r4, [r3, #0]
 8011174:	6838      	ldr	r0, [r7, #0]
 8011176:	f000 f915 	bl	80113a4 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEE4baseEv>
 801117a:	4603      	mov	r3, r0
 801117c:	681b      	ldr	r3, [r3, #0]
 801117e:	429c      	cmp	r4, r3
 8011180:	bf14      	ite	ne
 8011182:	2301      	movne	r3, #1
 8011184:	2300      	moveq	r3, #0
 8011186:	b2db      	uxtb	r3, r3
 8011188:	4618      	mov	r0, r3
 801118a:	370c      	adds	r7, #12
 801118c:	46bd      	mov	sp, r7
 801118e:	bd90      	pop	{r4, r7, pc}

08011190 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8011190:	b480      	push	{r7}
 8011192:	b083      	sub	sp, #12
 8011194:	af00      	add	r7, sp, #0
 8011196:	6078      	str	r0, [r7, #4]
	++_M_current;
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	f103 0208 	add.w	r2, r3, #8
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	601a      	str	r2, [r3, #0]
	return *this;
 80111a4:	687b      	ldr	r3, [r7, #4]
      }
 80111a6:	4618      	mov	r0, r3
 80111a8:	370c      	adds	r7, #12
 80111aa:	46bd      	mov	sp, r7
 80111ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111b0:	4770      	bx	lr

080111b2 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80111b2:	b480      	push	{r7}
 80111b4:	b083      	sub	sp, #12
 80111b6:	af00      	add	r7, sp, #0
 80111b8:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	681b      	ldr	r3, [r3, #0]
 80111be:	4618      	mov	r0, r3
 80111c0:	370c      	adds	r7, #12
 80111c2:	46bd      	mov	sp, r7
 80111c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111c8:	4770      	bx	lr

080111ca <_ZNKSt19__shared_ptr_accessIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 80111ca:	b580      	push	{r7, lr}
 80111cc:	b082      	sub	sp, #8
 80111ce:	af00      	add	r7, sp, #0
 80111d0:	6078      	str	r0, [r7, #4]
	return _M_get();
 80111d2:	6878      	ldr	r0, [r7, #4]
 80111d4:	f000 f8f1 	bl	80113ba <_ZNKSt19__shared_ptr_accessIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 80111d8:	4603      	mov	r3, r0
      }
 80111da:	4618      	mov	r0, r3
 80111dc:	3708      	adds	r7, #8
 80111de:	46bd      	mov	sp, r7
 80111e0:	bd80      	pop	{r7, pc}

080111e2 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EEC1Ev>:
      _Vector_base()
 80111e2:	b580      	push	{r7, lr}
 80111e4:	b082      	sub	sp, #8
 80111e6:	af00      	add	r7, sp, #0
 80111e8:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	4618      	mov	r0, r3
 80111ee:	f000 f8f0 	bl	80113d2 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE12_Vector_implC1Ev>
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	4618      	mov	r0, r3
 80111f6:	3708      	adds	r7, #8
 80111f8:	46bd      	mov	sp, r7
 80111fa:	bd80      	pop	{r7, pc}

080111fc <_ZSt7forwardIRKSt10shared_ptrIN4tama8DrawableEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80111fc:	b480      	push	{r7}
 80111fe:	b083      	sub	sp, #12
 8011200:	af00      	add	r7, sp, #0
 8011202:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	4618      	mov	r0, r3
 8011208:	370c      	adds	r7, #12
 801120a:	46bd      	mov	sp, r7
 801120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011210:	4770      	bx	lr

08011212 <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama8DrawableEEEE9constructIS3_JRKS3_EEEvRS4_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8011212:	b580      	push	{r7, lr}
 8011214:	b084      	sub	sp, #16
 8011216:	af00      	add	r7, sp, #0
 8011218:	60f8      	str	r0, [r7, #12]
 801121a:	60b9      	str	r1, [r7, #8]
 801121c:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 801121e:	6878      	ldr	r0, [r7, #4]
 8011220:	f7ff ffec 	bl	80111fc <_ZSt7forwardIRKSt10shared_ptrIN4tama8DrawableEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8011224:	4603      	mov	r3, r0
 8011226:	461a      	mov	r2, r3
 8011228:	68b9      	ldr	r1, [r7, #8]
 801122a:	68f8      	ldr	r0, [r7, #12]
 801122c:	f000 f8e6 	bl	80113fc <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEE9constructIS4_JRKS4_EEEvPT_DpOT0_>
 8011230:	bf00      	nop
 8011232:	3710      	adds	r7, #16
 8011234:	46bd      	mov	sp, r7
 8011236:	bd80      	pop	{r7, pc}

08011238 <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8011238:	b5b0      	push	{r4, r5, r7, lr}
 801123a:	b08a      	sub	sp, #40	; 0x28
 801123c:	af00      	add	r7, sp, #0
 801123e:	60f8      	str	r0, [r7, #12]
 8011240:	60b9      	str	r1, [r7, #8]
 8011242:	607a      	str	r2, [r7, #4]
      const size_type __len =
 8011244:	4a41      	ldr	r2, [pc, #260]	; (801134c <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x114>)
 8011246:	2101      	movs	r1, #1
 8011248:	68f8      	ldr	r0, [r7, #12]
 801124a:	f000 f8f1 	bl	8011430 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE12_M_check_lenEjPKc>
 801124e:	6278      	str	r0, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8011250:	68f8      	ldr	r0, [r7, #12]
 8011252:	f7ff ff64 	bl	801111e <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE5beginEv>
 8011256:	4603      	mov	r3, r0
 8011258:	617b      	str	r3, [r7, #20]
 801125a:	f107 0214 	add.w	r2, r7, #20
 801125e:	f107 0308 	add.w	r3, r7, #8
 8011262:	4611      	mov	r1, r2
 8011264:	4618      	mov	r0, r3
 8011266:	f000 f92b 	bl	80114c0 <_ZN9__gnu_cxxmiIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_>
 801126a:	4603      	mov	r3, r0
 801126c:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011272:	4618      	mov	r0, r3
 8011274:	f000 f93a 	bl	80114ec <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE11_M_allocateEj>
 8011278:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 801127a:	69fb      	ldr	r3, [r7, #28]
 801127c:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 801127e:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8011280:	6a3b      	ldr	r3, [r7, #32]
 8011282:	00db      	lsls	r3, r3, #3
	  _Alloc_traits::construct(this->_M_impl,
 8011284:	69fa      	ldr	r2, [r7, #28]
 8011286:	18d5      	adds	r5, r2, r3
 8011288:	6878      	ldr	r0, [r7, #4]
 801128a:	f7ff ffb7 	bl	80111fc <_ZSt7forwardIRKSt10shared_ptrIN4tama8DrawableEEEOT_RNSt16remove_referenceIS6_E4typeE>
 801128e:	4603      	mov	r3, r0
 8011290:	461a      	mov	r2, r3
 8011292:	4629      	mov	r1, r5
 8011294:	4620      	mov	r0, r4
 8011296:	f7ff ffbc 	bl	8011212 <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama8DrawableEEEE9constructIS3_JRKS3_EEEvRS4_PT_DpOT0_>
	  __new_finish = pointer();
 801129a:	2300      	movs	r3, #0
 801129c:	61bb      	str	r3, [r7, #24]
	    (this->_M_impl._M_start, __position.base(),
 801129e:	68fb      	ldr	r3, [r7, #12]
 80112a0:	681c      	ldr	r4, [r3, #0]
 80112a2:	f107 0308 	add.w	r3, r7, #8
 80112a6:	4618      	mov	r0, r3
 80112a8:	f000 f87c 	bl	80113a4 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEE4baseEv>
 80112ac:	4603      	mov	r3, r0
 80112ae:	681d      	ldr	r5, [r3, #0]
	     __new_start, _M_get_Tp_allocator());
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	4618      	mov	r0, r3
 80112b4:	f7f3 fb7d 	bl	80049b2 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE19_M_get_Tp_allocatorEv>
 80112b8:	4603      	mov	r3, r0
	  __new_finish
 80112ba:	69fa      	ldr	r2, [r7, #28]
 80112bc:	4629      	mov	r1, r5
 80112be:	4620      	mov	r0, r4
 80112c0:	f000 f928 	bl	8011514 <_ZSt34__uninitialized_move_if_noexcept_aIPSt10shared_ptrIN4tama8DrawableEES4_SaIS3_EET0_T_S7_S6_RT1_>
 80112c4:	61b8      	str	r0, [r7, #24]
	  ++__new_finish;
 80112c6:	69bb      	ldr	r3, [r7, #24]
 80112c8:	3308      	adds	r3, #8
 80112ca:	61bb      	str	r3, [r7, #24]
	    (__position.base(), this->_M_impl._M_finish,
 80112cc:	f107 0308 	add.w	r3, r7, #8
 80112d0:	4618      	mov	r0, r3
 80112d2:	f000 f867 	bl	80113a4 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEE4baseEv>
 80112d6:	4603      	mov	r3, r0
 80112d8:	681c      	ldr	r4, [r3, #0]
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	685d      	ldr	r5, [r3, #4]
	     __new_finish, _M_get_Tp_allocator());
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	4618      	mov	r0, r3
 80112e2:	f7f3 fb66 	bl	80049b2 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE19_M_get_Tp_allocatorEv>
 80112e6:	4603      	mov	r3, r0
	  __new_finish
 80112e8:	69ba      	ldr	r2, [r7, #24]
 80112ea:	4629      	mov	r1, r5
 80112ec:	4620      	mov	r0, r4
 80112ee:	f000 f911 	bl	8011514 <_ZSt34__uninitialized_move_if_noexcept_aIPSt10shared_ptrIN4tama8DrawableEES4_SaIS3_EET0_T_S7_S6_RT1_>
 80112f2:	61b8      	str	r0, [r7, #24]
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80112f4:	68fb      	ldr	r3, [r7, #12]
 80112f6:	681c      	ldr	r4, [r3, #0]
 80112f8:	68fb      	ldr	r3, [r7, #12]
 80112fa:	685d      	ldr	r5, [r3, #4]
		    _M_get_Tp_allocator());
 80112fc:	68fb      	ldr	r3, [r7, #12]
 80112fe:	4618      	mov	r0, r3
 8011300:	f7f3 fb57 	bl	80049b2 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE19_M_get_Tp_allocatorEv>
 8011304:	4603      	mov	r3, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8011306:	461a      	mov	r2, r3
 8011308:	4629      	mov	r1, r5
 801130a:	4620      	mov	r0, r4
 801130c:	f7f3 fb5c 	bl	80049c8 <_ZSt8_DestroyIPSt10shared_ptrIN4tama8DrawableEES3_EvT_S5_RSaIT0_E>
      _M_deallocate(this->_M_impl._M_start,
 8011310:	68f8      	ldr	r0, [r7, #12]
 8011312:	68fb      	ldr	r3, [r7, #12]
 8011314:	6819      	ldr	r1, [r3, #0]
		    this->_M_impl._M_end_of_storage
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	689b      	ldr	r3, [r3, #8]
		    - this->_M_impl._M_start);
 801131a:	461a      	mov	r2, r3
 801131c:	68fb      	ldr	r3, [r7, #12]
 801131e:	681b      	ldr	r3, [r3, #0]
 8011320:	1ad3      	subs	r3, r2, r3
 8011322:	10db      	asrs	r3, r3, #3
      _M_deallocate(this->_M_impl._M_start,
 8011324:	461a      	mov	r2, r3
 8011326:	f7f3 fb69 	bl	80049fc <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE13_M_deallocateEPS3_j>
      this->_M_impl._M_start = __new_start;
 801132a:	68fb      	ldr	r3, [r7, #12]
 801132c:	69fa      	ldr	r2, [r7, #28]
 801132e:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8011330:	68fb      	ldr	r3, [r7, #12]
 8011332:	69ba      	ldr	r2, [r7, #24]
 8011334:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8011336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011338:	00db      	lsls	r3, r3, #3
 801133a:	69fa      	ldr	r2, [r7, #28]
 801133c:	441a      	add	r2, r3
 801133e:	68fb      	ldr	r3, [r7, #12]
 8011340:	609a      	str	r2, [r3, #8]
    }
 8011342:	bf00      	nop
 8011344:	3728      	adds	r7, #40	; 0x28
 8011346:	46bd      	mov	sp, r7
 8011348:	bdb0      	pop	{r4, r5, r7, pc}
 801134a:	bf00      	nop
 801134c:	08020a40 	.word	0x08020a40

08011350 <_ZSt15allocate_sharedIN4tama7TextureESaIS1_EJRjS3_EESt10shared_ptrIT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 8011350:	b5b0      	push	{r4, r5, r7, lr}
 8011352:	b088      	sub	sp, #32
 8011354:	af02      	add	r7, sp, #8
 8011356:	60f8      	str	r0, [r7, #12]
 8011358:	60b9      	str	r1, [r7, #8]
 801135a:	607a      	str	r2, [r7, #4]
 801135c:	603b      	str	r3, [r7, #0]
			     std::forward<_Args>(__args)...);
 801135e:	6878      	ldr	r0, [r7, #4]
 8011360:	f7ff feb0 	bl	80110c4 <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 8011364:	4604      	mov	r4, r0
 8011366:	6838      	ldr	r0, [r7, #0]
 8011368:	f7ff feac 	bl	80110c4 <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 801136c:	4603      	mov	r3, r0
 801136e:	9300      	str	r3, [sp, #0]
 8011370:	4623      	mov	r3, r4
 8011372:	68ba      	ldr	r2, [r7, #8]
 8011374:	4629      	mov	r1, r5
 8011376:	68f8      	ldr	r0, [r7, #12]
 8011378:	f000 f8e5 	bl	8011546 <_ZNSt10shared_ptrIN4tama7TextureEEC1ISaIS1_EJRjS5_EEESt19_Sp_make_shared_tagRKT_DpOT0_>
    }
 801137c:	68f8      	ldr	r0, [r7, #12]
 801137e:	3718      	adds	r7, #24
 8011380:	46bd      	mov	sp, r7
 8011382:	bdb0      	pop	{r4, r5, r7, pc}

08011384 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEC1ERKS5_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8011384:	b480      	push	{r7}
 8011386:	b083      	sub	sp, #12
 8011388:	af00      	add	r7, sp, #0
 801138a:	6078      	str	r0, [r7, #4]
 801138c:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 801138e:	683b      	ldr	r3, [r7, #0]
 8011390:	681a      	ldr	r2, [r3, #0]
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	601a      	str	r2, [r3, #0]
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	4618      	mov	r0, r3
 801139a:	370c      	adds	r7, #12
 801139c:	46bd      	mov	sp, r7
 801139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113a2:	4770      	bx	lr

080113a4 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80113a4:	b480      	push	{r7}
 80113a6:	b083      	sub	sp, #12
 80113a8:	af00      	add	r7, sp, #0
 80113aa:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	4618      	mov	r0, r3
 80113b0:	370c      	adds	r7, #12
 80113b2:	46bd      	mov	sp, r7
 80113b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113b8:	4770      	bx	lr

080113ba <_ZNKSt19__shared_ptr_accessIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 80113ba:	b580      	push	{r7, lr}
 80113bc:	b082      	sub	sp, #8
 80113be:	af00      	add	r7, sp, #0
 80113c0:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80113c2:	6878      	ldr	r0, [r7, #4]
 80113c4:	f000 f8db 	bl	801157e <_ZNKSt12__shared_ptrIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0EE3getEv>
 80113c8:	4603      	mov	r3, r0
 80113ca:	4618      	mov	r0, r3
 80113cc:	3708      	adds	r7, #8
 80113ce:	46bd      	mov	sp, r7
 80113d0:	bd80      	pop	{r7, pc}

080113d2 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE12_Vector_implC1Ev>:
	_Vector_impl()
 80113d2:	b580      	push	{r7, lr}
 80113d4:	b082      	sub	sp, #8
 80113d6:	af00      	add	r7, sp, #0
 80113d8:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 80113da:	6878      	ldr	r0, [r7, #4]
 80113dc:	f000 f8db 	bl	8011596 <_ZNSaISt10shared_ptrIN4tama8DrawableEEEC1Ev>
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	2200      	movs	r2, #0
 80113e4:	601a      	str	r2, [r3, #0]
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	2200      	movs	r2, #0
 80113ea:	605a      	str	r2, [r3, #4]
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	2200      	movs	r2, #0
 80113f0:	609a      	str	r2, [r3, #8]
	{ }
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	4618      	mov	r0, r3
 80113f6:	3708      	adds	r7, #8
 80113f8:	46bd      	mov	sp, r7
 80113fa:	bd80      	pop	{r7, pc}

080113fc <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEE9constructIS4_JRKS4_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80113fc:	b590      	push	{r4, r7, lr}
 80113fe:	b085      	sub	sp, #20
 8011400:	af00      	add	r7, sp, #0
 8011402:	60f8      	str	r0, [r7, #12]
 8011404:	60b9      	str	r1, [r7, #8]
 8011406:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8011408:	6878      	ldr	r0, [r7, #4]
 801140a:	f7ff fef7 	bl	80111fc <_ZSt7forwardIRKSt10shared_ptrIN4tama8DrawableEEEOT_RNSt16remove_referenceIS6_E4typeE>
 801140e:	4604      	mov	r4, r0
 8011410:	68bb      	ldr	r3, [r7, #8]
 8011412:	4619      	mov	r1, r3
 8011414:	2008      	movs	r0, #8
 8011416:	f7ef fe12 	bl	800103e <_ZnwjPv>
 801141a:	4603      	mov	r3, r0
 801141c:	2b00      	cmp	r3, #0
 801141e:	d003      	beq.n	8011428 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEE9constructIS4_JRKS4_EEEvPT_DpOT0_+0x2c>
 8011420:	4621      	mov	r1, r4
 8011422:	4618      	mov	r0, r3
 8011424:	f7ff fd85 	bl	8010f32 <_ZNSt10shared_ptrIN4tama8DrawableEEC1ERKS2_>
 8011428:	bf00      	nop
 801142a:	3714      	adds	r7, #20
 801142c:	46bd      	mov	sp, r7
 801142e:	bd90      	pop	{r4, r7, pc}

08011430 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8011430:	b590      	push	{r4, r7, lr}
 8011432:	b087      	sub	sp, #28
 8011434:	af00      	add	r7, sp, #0
 8011436:	60f8      	str	r0, [r7, #12]
 8011438:	60b9      	str	r1, [r7, #8]
 801143a:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 801143c:	68f8      	ldr	r0, [r7, #12]
 801143e:	f000 f8b6 	bl	80115ae <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE8max_sizeEv>
 8011442:	4604      	mov	r4, r0
 8011444:	68f8      	ldr	r0, [r7, #12]
 8011446:	f000 f8c3 	bl	80115d0 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE4sizeEv>
 801144a:	4603      	mov	r3, r0
 801144c:	1ae2      	subs	r2, r4, r3
 801144e:	68bb      	ldr	r3, [r7, #8]
 8011450:	429a      	cmp	r2, r3
 8011452:	bf34      	ite	cc
 8011454:	2301      	movcc	r3, #1
 8011456:	2300      	movcs	r3, #0
 8011458:	b2db      	uxtb	r3, r3
 801145a:	2b00      	cmp	r3, #0
 801145c:	d003      	beq.n	8011466 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	4618      	mov	r0, r3
 8011462:	f00e fa60 	bl	801f926 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + std::max(size(), __n);
 8011466:	68f8      	ldr	r0, [r7, #12]
 8011468:	f000 f8b2 	bl	80115d0 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE4sizeEv>
 801146c:	4604      	mov	r4, r0
 801146e:	68f8      	ldr	r0, [r7, #12]
 8011470:	f000 f8ae 	bl	80115d0 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE4sizeEv>
 8011474:	4603      	mov	r3, r0
 8011476:	613b      	str	r3, [r7, #16]
 8011478:	f107 0208 	add.w	r2, r7, #8
 801147c:	f107 0310 	add.w	r3, r7, #16
 8011480:	4611      	mov	r1, r2
 8011482:	4618      	mov	r0, r3
 8011484:	f7f1 fa0d 	bl	80028a2 <_ZSt3maxIjERKT_S2_S2_>
 8011488:	4603      	mov	r3, r0
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	4423      	add	r3, r4
 801148e:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8011490:	68f8      	ldr	r0, [r7, #12]
 8011492:	f000 f89d 	bl	80115d0 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE4sizeEv>
 8011496:	4602      	mov	r2, r0
 8011498:	697b      	ldr	r3, [r7, #20]
 801149a:	4293      	cmp	r3, r2
 801149c:	d306      	bcc.n	80114ac <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE12_M_check_lenEjPKc+0x7c>
 801149e:	68f8      	ldr	r0, [r7, #12]
 80114a0:	f000 f885 	bl	80115ae <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE8max_sizeEv>
 80114a4:	4602      	mov	r2, r0
 80114a6:	697b      	ldr	r3, [r7, #20]
 80114a8:	4293      	cmp	r3, r2
 80114aa:	d904      	bls.n	80114b6 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE12_M_check_lenEjPKc+0x86>
 80114ac:	68f8      	ldr	r0, [r7, #12]
 80114ae:	f000 f87e 	bl	80115ae <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE8max_sizeEv>
 80114b2:	4603      	mov	r3, r0
 80114b4:	e000      	b.n	80114b8 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE12_M_check_lenEjPKc+0x88>
 80114b6:	697b      	ldr	r3, [r7, #20]
      }
 80114b8:	4618      	mov	r0, r3
 80114ba:	371c      	adds	r7, #28
 80114bc:	46bd      	mov	sp, r7
 80114be:	bd90      	pop	{r4, r7, pc}

080114c0 <_ZN9__gnu_cxxmiIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 80114c0:	b590      	push	{r4, r7, lr}
 80114c2:	b083      	sub	sp, #12
 80114c4:	af00      	add	r7, sp, #0
 80114c6:	6078      	str	r0, [r7, #4]
 80114c8:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 80114ca:	6878      	ldr	r0, [r7, #4]
 80114cc:	f7ff ff6a 	bl	80113a4 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEE4baseEv>
 80114d0:	4603      	mov	r3, r0
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	461c      	mov	r4, r3
 80114d6:	6838      	ldr	r0, [r7, #0]
 80114d8:	f7ff ff64 	bl	80113a4 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEE4baseEv>
 80114dc:	4603      	mov	r3, r0
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	1ae3      	subs	r3, r4, r3
 80114e2:	10db      	asrs	r3, r3, #3
 80114e4:	4618      	mov	r0, r3
 80114e6:	370c      	adds	r7, #12
 80114e8:	46bd      	mov	sp, r7
 80114ea:	bd90      	pop	{r4, r7, pc}

080114ec <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80114ec:	b580      	push	{r7, lr}
 80114ee:	b082      	sub	sp, #8
 80114f0:	af00      	add	r7, sp, #0
 80114f2:	6078      	str	r0, [r7, #4]
 80114f4:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80114f6:	683b      	ldr	r3, [r7, #0]
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d006      	beq.n	801150a <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE11_M_allocateEj+0x1e>
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	6839      	ldr	r1, [r7, #0]
 8011500:	4618      	mov	r0, r3
 8011502:	f000 f876 	bl	80115f2 <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama8DrawableEEEE8allocateERS4_j>
 8011506:	4603      	mov	r3, r0
 8011508:	e000      	b.n	801150c <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE11_M_allocateEj+0x20>
 801150a:	2300      	movs	r3, #0
      }
 801150c:	4618      	mov	r0, r3
 801150e:	3708      	adds	r7, #8
 8011510:	46bd      	mov	sp, r7
 8011512:	bd80      	pop	{r7, pc}

08011514 <_ZSt34__uninitialized_move_if_noexcept_aIPSt10shared_ptrIN4tama8DrawableEES4_SaIS3_EET0_T_S7_S6_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8011514:	b590      	push	{r4, r7, lr}
 8011516:	b085      	sub	sp, #20
 8011518:	af00      	add	r7, sp, #0
 801151a:	60f8      	str	r0, [r7, #12]
 801151c:	60b9      	str	r1, [r7, #8]
 801151e:	607a      	str	r2, [r7, #4]
 8011520:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8011522:	68f8      	ldr	r0, [r7, #12]
 8011524:	f000 f874 	bl	8011610 <_ZSt32__make_move_if_noexcept_iteratorISt10shared_ptrIN4tama8DrawableEESt13move_iteratorIPS3_EET0_PT_>
 8011528:	4604      	mov	r4, r0
 801152a:	68b8      	ldr	r0, [r7, #8]
 801152c:	f000 f870 	bl	8011610 <_ZSt32__make_move_if_noexcept_iteratorISt10shared_ptrIN4tama8DrawableEESt13move_iteratorIPS3_EET0_PT_>
 8011530:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 8011532:	683b      	ldr	r3, [r7, #0]
 8011534:	687a      	ldr	r2, [r7, #4]
 8011536:	4620      	mov	r0, r4
 8011538:	f000 f879 	bl	801162e <_ZSt22__uninitialized_copy_aISt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEES5_S4_ET0_T_S8_S7_RSaIT1_E>
 801153c:	4603      	mov	r3, r0
    }
 801153e:	4618      	mov	r0, r3
 8011540:	3714      	adds	r7, #20
 8011542:	46bd      	mov	sp, r7
 8011544:	bd90      	pop	{r4, r7, pc}

08011546 <_ZNSt10shared_ptrIN4tama7TextureEEC1ISaIS1_EJRjS5_EEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8011546:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011548:	b087      	sub	sp, #28
 801154a:	af02      	add	r7, sp, #8
 801154c:	60f8      	str	r0, [r7, #12]
 801154e:	7239      	strb	r1, [r7, #8]
 8011550:	607a      	str	r2, [r7, #4]
 8011552:	603b      	str	r3, [r7, #0]
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
 8011554:	68fc      	ldr	r4, [r7, #12]
 8011556:	6838      	ldr	r0, [r7, #0]
 8011558:	f7ff fdb4 	bl	80110c4 <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 801155c:	4605      	mov	r5, r0
 801155e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011560:	f7ff fdb0 	bl	80110c4 <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 8011564:	4603      	mov	r3, r0
 8011566:	9300      	str	r3, [sp, #0]
 8011568:	462b      	mov	r3, r5
 801156a:	687a      	ldr	r2, [r7, #4]
 801156c:	4631      	mov	r1, r6
 801156e:	4620      	mov	r0, r4
 8011570:	f000 f86e 	bl	8011650 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJRjS7_EEESt19_Sp_make_shared_tagRKT_DpOT0_>
	{ }
 8011574:	68fb      	ldr	r3, [r7, #12]
 8011576:	4618      	mov	r0, r3
 8011578:	3714      	adds	r7, #20
 801157a:	46bd      	mov	sp, r7
 801157c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801157e <_ZNKSt12__shared_ptrIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 801157e:	b480      	push	{r7}
 8011580:	b083      	sub	sp, #12
 8011582:	af00      	add	r7, sp, #0
 8011584:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	4618      	mov	r0, r3
 801158c:	370c      	adds	r7, #12
 801158e:	46bd      	mov	sp, r7
 8011590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011594:	4770      	bx	lr

08011596 <_ZNSaISt10shared_ptrIN4tama8DrawableEEEC1Ev>:
      allocator() throw() { }
 8011596:	b580      	push	{r7, lr}
 8011598:	b082      	sub	sp, #8
 801159a:	af00      	add	r7, sp, #0
 801159c:	6078      	str	r0, [r7, #4]
 801159e:	6878      	ldr	r0, [r7, #4]
 80115a0:	f000 f8d5 	bl	801174e <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEEC1Ev>
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	4618      	mov	r0, r3
 80115a8:	3708      	adds	r7, #8
 80115aa:	46bd      	mov	sp, r7
 80115ac:	bd80      	pop	{r7, pc}

080115ae <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80115ae:	b580      	push	{r7, lr}
 80115b0:	b082      	sub	sp, #8
 80115b2:	af00      	add	r7, sp, #0
 80115b4:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	4618      	mov	r0, r3
 80115ba:	f000 f8df 	bl	801177c <_ZNKSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE19_M_get_Tp_allocatorEv>
 80115be:	4603      	mov	r3, r0
 80115c0:	4618      	mov	r0, r3
 80115c2:	f000 f8cf 	bl	8011764 <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama8DrawableEEEE8max_sizeERKS4_>
 80115c6:	4603      	mov	r3, r0
 80115c8:	4618      	mov	r0, r3
 80115ca:	3708      	adds	r7, #8
 80115cc:	46bd      	mov	sp, r7
 80115ce:	bd80      	pop	{r7, pc}

080115d0 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80115d0:	b480      	push	{r7}
 80115d2:	b083      	sub	sp, #12
 80115d4:	af00      	add	r7, sp, #0
 80115d6:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	685b      	ldr	r3, [r3, #4]
 80115dc:	461a      	mov	r2, r3
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	681b      	ldr	r3, [r3, #0]
 80115e2:	1ad3      	subs	r3, r2, r3
 80115e4:	10db      	asrs	r3, r3, #3
 80115e6:	4618      	mov	r0, r3
 80115e8:	370c      	adds	r7, #12
 80115ea:	46bd      	mov	sp, r7
 80115ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115f0:	4770      	bx	lr

080115f2 <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama8DrawableEEEE8allocateERS4_j>:
      allocate(allocator_type& __a, size_type __n)
 80115f2:	b580      	push	{r7, lr}
 80115f4:	b082      	sub	sp, #8
 80115f6:	af00      	add	r7, sp, #0
 80115f8:	6078      	str	r0, [r7, #4]
 80115fa:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80115fc:	2200      	movs	r2, #0
 80115fe:	6839      	ldr	r1, [r7, #0]
 8011600:	6878      	ldr	r0, [r7, #4]
 8011602:	f000 f8c6 	bl	8011792 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEE8allocateEjPKv>
 8011606:	4603      	mov	r3, r0
 8011608:	4618      	mov	r0, r3
 801160a:	3708      	adds	r7, #8
 801160c:	46bd      	mov	sp, r7
 801160e:	bd80      	pop	{r7, pc}

08011610 <_ZSt32__make_move_if_noexcept_iteratorISt10shared_ptrIN4tama8DrawableEESt13move_iteratorIPS3_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 8011610:	b580      	push	{r7, lr}
 8011612:	b084      	sub	sp, #16
 8011614:	af00      	add	r7, sp, #0
 8011616:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8011618:	f107 030c 	add.w	r3, r7, #12
 801161c:	6879      	ldr	r1, [r7, #4]
 801161e:	4618      	mov	r0, r3
 8011620:	f000 f8d5 	bl	80117ce <_ZNSt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEEC1ES4_>
 8011624:	68fb      	ldr	r3, [r7, #12]
 8011626:	4618      	mov	r0, r3
 8011628:	3710      	adds	r7, #16
 801162a:	46bd      	mov	sp, r7
 801162c:	bd80      	pop	{r7, pc}

0801162e <_ZSt22__uninitialized_copy_aISt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEES5_S4_ET0_T_S8_S7_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 801162e:	b580      	push	{r7, lr}
 8011630:	b084      	sub	sp, #16
 8011632:	af00      	add	r7, sp, #0
 8011634:	60f8      	str	r0, [r7, #12]
 8011636:	60b9      	str	r1, [r7, #8]
 8011638:	607a      	str	r2, [r7, #4]
 801163a:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 801163c:	687a      	ldr	r2, [r7, #4]
 801163e:	68b9      	ldr	r1, [r7, #8]
 8011640:	68f8      	ldr	r0, [r7, #12]
 8011642:	f000 f8d3 	bl	80117ec <_ZSt18uninitialized_copyISt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEES5_ET0_T_S8_S7_>
 8011646:	4603      	mov	r3, r0
 8011648:	4618      	mov	r0, r3
 801164a:	3710      	adds	r7, #16
 801164c:	46bd      	mov	sp, r7
 801164e:	bd80      	pop	{r7, pc}

08011650 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJRjS7_EEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8011650:	b590      	push	{r4, r7, lr}
 8011652:	b08d      	sub	sp, #52	; 0x34
 8011654:	af00      	add	r7, sp, #0
 8011656:	60f8      	str	r0, [r7, #12]
 8011658:	7239      	strb	r1, [r7, #8]
 801165a:	607a      	str	r2, [r7, #4]
 801165c:	603b      	str	r3, [r7, #0]
	: _M_ptr(), _M_refcount()
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	2200      	movs	r2, #0
 8011662:	601a      	str	r2, [r3, #0]
 8011664:	68fb      	ldr	r3, [r7, #12]
 8011666:	3304      	adds	r3, #4
 8011668:	4618      	mov	r0, r3
 801166a:	f7f2 fc80 	bl	8003f6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 801166e:	f107 0320 	add.w	r3, r7, #32
 8011672:	6879      	ldr	r1, [r7, #4]
 8011674:	4618      	mov	r0, r3
 8011676:	f7fe fd7f 	bl	8010178 <_ZNSaIN4tama7TextureEEC1ERKS1_>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 801167a:	f107 0318 	add.w	r3, r7, #24
 801167e:	f107 0220 	add.w	r2, r7, #32
 8011682:	4611      	mov	r1, r2
 8011684:	4618      	mov	r0, r3
 8011686:	f7fe fd85 	bl	8010194 <_ZSt18__allocate_guardedISaIN4tama7TextureEEESt15__allocated_ptrIT_ERS4_>
	  auto __ptr = __guard.get();
 801168a:	f107 0318 	add.w	r3, r7, #24
 801168e:	4618      	mov	r0, r3
 8011690:	f7fe fda8 	bl	80101e4 <_ZNSt15__allocated_ptrISaIN4tama7TextureEEE3getEv>
 8011694:	62f8      	str	r0, [r7, #44]	; 0x2c
	  __traits::construct(__del._M_alloc, __ptr,
 8011696:	6838      	ldr	r0, [r7, #0]
 8011698:	f7ff fd14 	bl	80110c4 <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 801169c:	4604      	mov	r4, r0
 801169e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80116a0:	f7ff fd10 	bl	80110c4 <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 80116a4:	4603      	mov	r3, r0
 80116a6:	f107 0020 	add.w	r0, r7, #32
 80116aa:	4622      	mov	r2, r4
 80116ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80116ae:	f000 f8af 	bl	8011810 <_ZNSt16allocator_traitsISaIN4tama7TextureEEE9constructIS1_JRjS5_EEEvRS2_PT_DpOT0_>
	  __guard = nullptr;
 80116b2:	f107 0318 	add.w	r3, r7, #24
 80116b6:	2100      	movs	r1, #0
 80116b8:	4618      	mov	r0, r3
 80116ba:	f7fe fdb9 	bl	8010230 <_ZNSt15__allocated_ptrISaIN4tama7TextureEEEaSEDn>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 80116be:	f107 0220 	add.w	r2, r7, #32
 80116c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80116c6:	4611      	mov	r1, r2
 80116c8:	4618      	mov	r0, r3
 80116ca:	f7fe fbfa 	bl	800fec2 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>
 80116ce:	f107 0220 	add.w	r2, r7, #32
 80116d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80116d6:	4611      	mov	r1, r2
 80116d8:	4618      	mov	r0, r3
 80116da:	f7fe fd4d 	bl	8010178 <_ZNSaIN4tama7TextureEEC1ERKS1_>
 80116de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80116e2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80116e6:	f107 0014 	add.w	r0, r7, #20
 80116ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80116ec:	f7fe fdd5 	bl	801029a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama7TextureENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
 80116f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80116f4:	4618      	mov	r0, r3
 80116f6:	f7fe fa30 	bl	800fb5a <_ZNSaIN4tama7TextureEED1Ev>
 80116fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80116fe:	4618      	mov	r0, r3
 8011700:	f7fe fbd2 	bl	800fea8 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	  _M_refcount._M_swap(__count);
 8011704:	68fb      	ldr	r3, [r7, #12]
 8011706:	3304      	adds	r3, #4
 8011708:	f107 0214 	add.w	r2, r7, #20
 801170c:	4611      	mov	r1, r2
 801170e:	4618      	mov	r0, r3
 8011710:	f7f2 fd36 	bl	8004180 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  _M_ptr = __ptr;
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011718:	601a      	str	r2, [r3, #0]
	  _M_enable_shared_from_this_with(_M_ptr);
 801171a:	68fb      	ldr	r3, [r7, #12]
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	4619      	mov	r1, r3
 8011720:	68f8      	ldr	r0, [r7, #12]
 8011722:	f7fe fe11 	bl	8010348 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 8011726:	f107 0314 	add.w	r3, r7, #20
 801172a:	4618      	mov	r0, r3
 801172c:	f7f1 fcf1 	bl	8003112 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 8011730:	f107 0318 	add.w	r3, r7, #24
 8011734:	4618      	mov	r0, r3
 8011736:	f7fe fd40 	bl	80101ba <_ZNSt15__allocated_ptrISaIN4tama7TextureEEED1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 801173a:	f107 0320 	add.w	r3, r7, #32
 801173e:	4618      	mov	r0, r3
 8011740:	f7fe fbb2 	bl	800fea8 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	}
 8011744:	68fb      	ldr	r3, [r7, #12]
 8011746:	4618      	mov	r0, r3
 8011748:	3734      	adds	r7, #52	; 0x34
 801174a:	46bd      	mov	sp, r7
 801174c:	bd90      	pop	{r4, r7, pc}

0801174e <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 801174e:	b480      	push	{r7}
 8011750:	b083      	sub	sp, #12
 8011752:	af00      	add	r7, sp, #0
 8011754:	6078      	str	r0, [r7, #4]
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	4618      	mov	r0, r3
 801175a:	370c      	adds	r7, #12
 801175c:	46bd      	mov	sp, r7
 801175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011762:	4770      	bx	lr

08011764 <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama8DrawableEEEE8max_sizeERKS4_>:
      max_size(const allocator_type& __a) noexcept
 8011764:	b580      	push	{r7, lr}
 8011766:	b082      	sub	sp, #8
 8011768:	af00      	add	r7, sp, #0
 801176a:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 801176c:	6878      	ldr	r0, [r7, #4]
 801176e:	f000 f867 	bl	8011840 <_ZNK9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEE8max_sizeEv>
 8011772:	4603      	mov	r3, r0
 8011774:	4618      	mov	r0, r3
 8011776:	3708      	adds	r7, #8
 8011778:	46bd      	mov	sp, r7
 801177a:	bd80      	pop	{r7, pc}

0801177c <_ZNKSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 801177c:	b480      	push	{r7}
 801177e:	b083      	sub	sp, #12
 8011780:	af00      	add	r7, sp, #0
 8011782:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	4618      	mov	r0, r3
 8011788:	370c      	adds	r7, #12
 801178a:	46bd      	mov	sp, r7
 801178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011790:	4770      	bx	lr

08011792 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8011792:	b580      	push	{r7, lr}
 8011794:	b084      	sub	sp, #16
 8011796:	af00      	add	r7, sp, #0
 8011798:	60f8      	str	r0, [r7, #12]
 801179a:	60b9      	str	r1, [r7, #8]
 801179c:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 801179e:	68f8      	ldr	r0, [r7, #12]
 80117a0:	f000 f84e 	bl	8011840 <_ZNK9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEE8max_sizeEv>
 80117a4:	4602      	mov	r2, r0
 80117a6:	68bb      	ldr	r3, [r7, #8]
 80117a8:	4293      	cmp	r3, r2
 80117aa:	bf8c      	ite	hi
 80117ac:	2301      	movhi	r3, #1
 80117ae:	2300      	movls	r3, #0
 80117b0:	b2db      	uxtb	r3, r3
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d001      	beq.n	80117ba <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80117b6:	f00e f8b0 	bl	801f91a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80117ba:	68bb      	ldr	r3, [r7, #8]
 80117bc:	00db      	lsls	r3, r3, #3
 80117be:	4618      	mov	r0, r3
 80117c0:	f00e f87d 	bl	801f8be <_Znwj>
 80117c4:	4603      	mov	r3, r0
      }
 80117c6:	4618      	mov	r0, r3
 80117c8:	3710      	adds	r7, #16
 80117ca:	46bd      	mov	sp, r7
 80117cc:	bd80      	pop	{r7, pc}

080117ce <_ZNSt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEEC1ES4_>:
      move_iterator(iterator_type __i)
 80117ce:	b480      	push	{r7}
 80117d0:	b083      	sub	sp, #12
 80117d2:	af00      	add	r7, sp, #0
 80117d4:	6078      	str	r0, [r7, #4]
 80117d6:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	683a      	ldr	r2, [r7, #0]
 80117dc:	601a      	str	r2, [r3, #0]
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	4618      	mov	r0, r3
 80117e2:	370c      	adds	r7, #12
 80117e4:	46bd      	mov	sp, r7
 80117e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ea:	4770      	bx	lr

080117ec <_ZSt18uninitialized_copyISt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEES5_ET0_T_S8_S7_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 80117ec:	b580      	push	{r7, lr}
 80117ee:	b086      	sub	sp, #24
 80117f0:	af00      	add	r7, sp, #0
 80117f2:	60f8      	str	r0, [r7, #12]
 80117f4:	60b9      	str	r1, [r7, #8]
 80117f6:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 80117f8:	2301      	movs	r3, #1
 80117fa:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 80117fc:	687a      	ldr	r2, [r7, #4]
 80117fe:	68b9      	ldr	r1, [r7, #8]
 8011800:	68f8      	ldr	r0, [r7, #12]
 8011802:	f000 f829 	bl	8011858 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEES7_EET0_T_SA_S9_>
 8011806:	4603      	mov	r3, r0
    }
 8011808:	4618      	mov	r0, r3
 801180a:	3718      	adds	r7, #24
 801180c:	46bd      	mov	sp, r7
 801180e:	bd80      	pop	{r7, pc}

08011810 <_ZNSt16allocator_traitsISaIN4tama7TextureEEE9constructIS1_JRjS5_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8011810:	b590      	push	{r4, r7, lr}
 8011812:	b085      	sub	sp, #20
 8011814:	af00      	add	r7, sp, #0
 8011816:	60f8      	str	r0, [r7, #12]
 8011818:	60b9      	str	r1, [r7, #8]
 801181a:	607a      	str	r2, [r7, #4]
 801181c:	603b      	str	r3, [r7, #0]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 801181e:	6878      	ldr	r0, [r7, #4]
 8011820:	f7ff fc50 	bl	80110c4 <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 8011824:	4604      	mov	r4, r0
 8011826:	6838      	ldr	r0, [r7, #0]
 8011828:	f7ff fc4c 	bl	80110c4 <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 801182c:	4603      	mov	r3, r0
 801182e:	4622      	mov	r2, r4
 8011830:	68b9      	ldr	r1, [r7, #8]
 8011832:	68f8      	ldr	r0, [r7, #12]
 8011834:	f000 f83f 	bl	80118b6 <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE9constructIS2_JRjS5_EEEvPT_DpOT0_>
 8011838:	bf00      	nop
 801183a:	3714      	adds	r7, #20
 801183c:	46bd      	mov	sp, r7
 801183e:	bd90      	pop	{r4, r7, pc}

08011840 <_ZNK9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8011840:	b480      	push	{r7}
 8011842:	b083      	sub	sp, #12
 8011844:	af00      	add	r7, sp, #0
 8011846:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8011848:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 801184c:	4618      	mov	r0, r3
 801184e:	370c      	adds	r7, #12
 8011850:	46bd      	mov	sp, r7
 8011852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011856:	4770      	bx	lr

08011858 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEES7_EET0_T_SA_S9_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8011858:	b590      	push	{r4, r7, lr}
 801185a:	b087      	sub	sp, #28
 801185c:	af00      	add	r7, sp, #0
 801185e:	60f8      	str	r0, [r7, #12]
 8011860:	60b9      	str	r1, [r7, #8]
 8011862:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 8011868:	f107 0208 	add.w	r2, r7, #8
 801186c:	f107 030c 	add.w	r3, r7, #12
 8011870:	4611      	mov	r1, r2
 8011872:	4618      	mov	r0, r3
 8011874:	f000 f841 	bl	80118fa <_ZStneIPSt10shared_ptrIN4tama8DrawableEEEbRKSt13move_iteratorIT_ES9_>
 8011878:	4603      	mov	r3, r0
 801187a:	2b00      	cmp	r3, #0
 801187c:	d016      	beq.n	80118ac <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEES7_EET0_T_SA_S9_+0x54>
		std::_Construct(std::__addressof(*__cur), *__first);
 801187e:	6978      	ldr	r0, [r7, #20]
 8011880:	f7f3 f8f6 	bl	8004a70 <_ZSt11__addressofISt10shared_ptrIN4tama8DrawableEEEPT_RS4_>
 8011884:	4604      	mov	r4, r0
 8011886:	f107 030c 	add.w	r3, r7, #12
 801188a:	4618      	mov	r0, r3
 801188c:	f000 f857 	bl	801193e <_ZNKSt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEEdeEv>
 8011890:	4603      	mov	r3, r0
 8011892:	4619      	mov	r1, r3
 8011894:	4620      	mov	r0, r4
 8011896:	f000 f869 	bl	801196c <_ZSt10_ConstructISt10shared_ptrIN4tama8DrawableEEJS3_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 801189a:	f107 030c 	add.w	r3, r7, #12
 801189e:	4618      	mov	r0, r3
 80118a0:	f000 f83c 	bl	801191c <_ZNSt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEEppEv>
 80118a4:	697b      	ldr	r3, [r7, #20]
 80118a6:	3308      	adds	r3, #8
 80118a8:	617b      	str	r3, [r7, #20]
 80118aa:	e7dd      	b.n	8011868 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEES7_EET0_T_SA_S9_+0x10>
	      return __cur;
 80118ac:	697b      	ldr	r3, [r7, #20]
	}
 80118ae:	4618      	mov	r0, r3
 80118b0:	371c      	adds	r7, #28
 80118b2:	46bd      	mov	sp, r7
 80118b4:	bd90      	pop	{r4, r7, pc}

080118b6 <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE9constructIS2_JRjS5_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80118b6:	b5b0      	push	{r4, r5, r7, lr}
 80118b8:	b084      	sub	sp, #16
 80118ba:	af00      	add	r7, sp, #0
 80118bc:	60f8      	str	r0, [r7, #12]
 80118be:	60b9      	str	r1, [r7, #8]
 80118c0:	607a      	str	r2, [r7, #4]
 80118c2:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80118c4:	6878      	ldr	r0, [r7, #4]
 80118c6:	f7ff fbfd 	bl	80110c4 <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 80118ca:	4603      	mov	r3, r0
 80118cc:	681c      	ldr	r4, [r3, #0]
 80118ce:	6838      	ldr	r0, [r7, #0]
 80118d0:	f7ff fbf8 	bl	80110c4 <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 80118d4:	4603      	mov	r3, r0
 80118d6:	681d      	ldr	r5, [r3, #0]
 80118d8:	68bb      	ldr	r3, [r7, #8]
 80118da:	4619      	mov	r1, r3
 80118dc:	200c      	movs	r0, #12
 80118de:	f7ef fbae 	bl	800103e <_ZnwjPv>
 80118e2:	4603      	mov	r3, r0
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	d004      	beq.n	80118f2 <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE9constructIS2_JRjS5_EEEvPT_DpOT0_+0x3c>
 80118e8:	462a      	mov	r2, r5
 80118ea:	4621      	mov	r1, r4
 80118ec:	4618      	mov	r0, r3
 80118ee:	f7fd f9a5 	bl	800ec3c <_ZN4tama7TextureC1Ejj>
 80118f2:	bf00      	nop
 80118f4:	3710      	adds	r7, #16
 80118f6:	46bd      	mov	sp, r7
 80118f8:	bdb0      	pop	{r4, r5, r7, pc}

080118fa <_ZStneIPSt10shared_ptrIN4tama8DrawableEEEbRKSt13move_iteratorIT_ES9_>:
    operator!=(const move_iterator<_Iterator>& __x,
 80118fa:	b580      	push	{r7, lr}
 80118fc:	b082      	sub	sp, #8
 80118fe:	af00      	add	r7, sp, #0
 8011900:	6078      	str	r0, [r7, #4]
 8011902:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 8011904:	6839      	ldr	r1, [r7, #0]
 8011906:	6878      	ldr	r0, [r7, #4]
 8011908:	f000 f849 	bl	801199e <_ZSteqIPSt10shared_ptrIN4tama8DrawableEEEbRKSt13move_iteratorIT_ES9_>
 801190c:	4603      	mov	r3, r0
 801190e:	f083 0301 	eor.w	r3, r3, #1
 8011912:	b2db      	uxtb	r3, r3
 8011914:	4618      	mov	r0, r3
 8011916:	3708      	adds	r7, #8
 8011918:	46bd      	mov	sp, r7
 801191a:	bd80      	pop	{r7, pc}

0801191c <_ZNSt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEEppEv>:
      operator++()
 801191c:	b480      	push	{r7}
 801191e:	b083      	sub	sp, #12
 8011920:	af00      	add	r7, sp, #0
 8011922:	6078      	str	r0, [r7, #4]
	++_M_current;
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	f103 0208 	add.w	r2, r3, #8
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	601a      	str	r2, [r3, #0]
	return *this;
 8011930:	687b      	ldr	r3, [r7, #4]
      }
 8011932:	4618      	mov	r0, r3
 8011934:	370c      	adds	r7, #12
 8011936:	46bd      	mov	sp, r7
 8011938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801193c:	4770      	bx	lr

0801193e <_ZNKSt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEEdeEv>:
      operator*() const
 801193e:	b480      	push	{r7}
 8011940:	b083      	sub	sp, #12
 8011942:	af00      	add	r7, sp, #0
 8011944:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	681b      	ldr	r3, [r3, #0]
 801194a:	4618      	mov	r0, r3
 801194c:	370c      	adds	r7, #12
 801194e:	46bd      	mov	sp, r7
 8011950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011954:	4770      	bx	lr

08011956 <_ZSt7forwardISt10shared_ptrIN4tama8DrawableEEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8011956:	b480      	push	{r7}
 8011958:	b083      	sub	sp, #12
 801195a:	af00      	add	r7, sp, #0
 801195c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	4618      	mov	r0, r3
 8011962:	370c      	adds	r7, #12
 8011964:	46bd      	mov	sp, r7
 8011966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801196a:	4770      	bx	lr

0801196c <_ZSt10_ConstructISt10shared_ptrIN4tama8DrawableEEJS3_EEvPT_DpOT0_>:
    _Construct(_T1* __p, _Args&&... __args)
 801196c:	b590      	push	{r4, r7, lr}
 801196e:	b083      	sub	sp, #12
 8011970:	af00      	add	r7, sp, #0
 8011972:	6078      	str	r0, [r7, #4]
 8011974:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
 8011976:	6838      	ldr	r0, [r7, #0]
 8011978:	f7ff ffed 	bl	8011956 <_ZSt7forwardISt10shared_ptrIN4tama8DrawableEEEOT_RNSt16remove_referenceIS4_E4typeE>
 801197c:	4604      	mov	r4, r0
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	4619      	mov	r1, r3
 8011982:	2008      	movs	r0, #8
 8011984:	f7ef fb5b 	bl	800103e <_ZnwjPv>
 8011988:	4603      	mov	r3, r0
 801198a:	2b00      	cmp	r3, #0
 801198c:	d003      	beq.n	8011996 <_ZSt10_ConstructISt10shared_ptrIN4tama8DrawableEEJS3_EEvPT_DpOT0_+0x2a>
 801198e:	4621      	mov	r1, r4
 8011990:	4618      	mov	r0, r3
 8011992:	f000 f825 	bl	80119e0 <_ZNSt10shared_ptrIN4tama8DrawableEEC1EOS2_>
 8011996:	bf00      	nop
 8011998:	370c      	adds	r7, #12
 801199a:	46bd      	mov	sp, r7
 801199c:	bd90      	pop	{r4, r7, pc}

0801199e <_ZSteqIPSt10shared_ptrIN4tama8DrawableEEEbRKSt13move_iteratorIT_ES9_>:
    operator==(const move_iterator<_Iterator>& __x,
 801199e:	b590      	push	{r4, r7, lr}
 80119a0:	b083      	sub	sp, #12
 80119a2:	af00      	add	r7, sp, #0
 80119a4:	6078      	str	r0, [r7, #4]
 80119a6:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 80119a8:	6878      	ldr	r0, [r7, #4]
 80119aa:	f000 f82c 	bl	8011a06 <_ZNKSt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEE4baseEv>
 80119ae:	4604      	mov	r4, r0
 80119b0:	6838      	ldr	r0, [r7, #0]
 80119b2:	f000 f828 	bl	8011a06 <_ZNKSt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEE4baseEv>
 80119b6:	4603      	mov	r3, r0
 80119b8:	429c      	cmp	r4, r3
 80119ba:	bf0c      	ite	eq
 80119bc:	2301      	moveq	r3, #1
 80119be:	2300      	movne	r3, #0
 80119c0:	b2db      	uxtb	r3, r3
 80119c2:	4618      	mov	r0, r3
 80119c4:	370c      	adds	r7, #12
 80119c6:	46bd      	mov	sp, r7
 80119c8:	bd90      	pop	{r4, r7, pc}

080119ca <_ZSt4moveIRSt10shared_ptrIN4tama8DrawableEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 80119ca:	b480      	push	{r7}
 80119cc:	b083      	sub	sp, #12
 80119ce:	af00      	add	r7, sp, #0
 80119d0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	4618      	mov	r0, r3
 80119d6:	370c      	adds	r7, #12
 80119d8:	46bd      	mov	sp, r7
 80119da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119de:	4770      	bx	lr

080119e0 <_ZNSt10shared_ptrIN4tama8DrawableEEC1EOS2_>:
      shared_ptr(shared_ptr&& __r) noexcept
 80119e0:	b590      	push	{r4, r7, lr}
 80119e2:	b083      	sub	sp, #12
 80119e4:	af00      	add	r7, sp, #0
 80119e6:	6078      	str	r0, [r7, #4]
 80119e8:	6039      	str	r1, [r7, #0]
      : __shared_ptr<_Tp>(std::move(__r)) { }
 80119ea:	687c      	ldr	r4, [r7, #4]
 80119ec:	6838      	ldr	r0, [r7, #0]
 80119ee:	f7ff ffec 	bl	80119ca <_ZSt4moveIRSt10shared_ptrIN4tama8DrawableEEEONSt16remove_referenceIT_E4typeEOS6_>
 80119f2:	4603      	mov	r3, r0
 80119f4:	4619      	mov	r1, r3
 80119f6:	4620      	mov	r0, r4
 80119f8:	f000 f811 	bl	8011a1e <_ZNSt12__shared_ptrIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0EEC1EOS4_>
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	4618      	mov	r0, r3
 8011a00:	370c      	adds	r7, #12
 8011a02:	46bd      	mov	sp, r7
 8011a04:	bd90      	pop	{r4, r7, pc}

08011a06 <_ZNKSt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEE4baseEv>:
      base() const
 8011a06:	b480      	push	{r7}
 8011a08:	b083      	sub	sp, #12
 8011a0a:	af00      	add	r7, sp, #0
 8011a0c:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	681b      	ldr	r3, [r3, #0]
 8011a12:	4618      	mov	r0, r3
 8011a14:	370c      	adds	r7, #12
 8011a16:	46bd      	mov	sp, r7
 8011a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a1c:	4770      	bx	lr

08011a1e <_ZNSt12__shared_ptrIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0EEC1EOS4_>:
      __shared_ptr(__shared_ptr&& __r) noexcept
 8011a1e:	b580      	push	{r7, lr}
 8011a20:	b082      	sub	sp, #8
 8011a22:	af00      	add	r7, sp, #0
 8011a24:	6078      	str	r0, [r7, #4]
 8011a26:	6039      	str	r1, [r7, #0]
      : _M_ptr(__r._M_ptr), _M_refcount()
 8011a28:	683b      	ldr	r3, [r7, #0]
 8011a2a:	681a      	ldr	r2, [r3, #0]
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	601a      	str	r2, [r3, #0]
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	3304      	adds	r3, #4
 8011a34:	4618      	mov	r0, r3
 8011a36:	f7f2 fa9a 	bl	8003f6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	_M_refcount._M_swap(__r._M_refcount);
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	1d1a      	adds	r2, r3, #4
 8011a3e:	683b      	ldr	r3, [r7, #0]
 8011a40:	3304      	adds	r3, #4
 8011a42:	4619      	mov	r1, r3
 8011a44:	4610      	mov	r0, r2
 8011a46:	f7f2 fb9b 	bl	8004180 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	__r._M_ptr = 0;
 8011a4a:	683b      	ldr	r3, [r7, #0]
 8011a4c:	2200      	movs	r2, #0
 8011a4e:	601a      	str	r2, [r3, #0]
      }
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	4618      	mov	r0, r3
 8011a54:	3708      	adds	r7, #8
 8011a56:	46bd      	mov	sp, r7
 8011a58:	bd80      	pop	{r7, pc}

08011a5a <_ZN4tama11DisplayDataD1Ev>:
    public:
        void * data;
        unsigned size;
        unsigned elementSize;

        ~DisplayData() {
 8011a5a:	b580      	push	{r7, lr}
 8011a5c:	b082      	sub	sp, #8
 8011a5e:	af00      	add	r7, sp, #0
 8011a60:	6078      	str	r0, [r7, #4]
            delete[] ((short *)data);
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d004      	beq.n	8011a74 <_ZN4tama11DisplayDataD1Ev+0x1a>
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	681b      	ldr	r3, [r3, #0]
 8011a6e:	4618      	mov	r0, r3
 8011a70:	f00d ff1c 	bl	801f8ac <_ZdaPv>
        }
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	4618      	mov	r0, r3
 8011a78:	3708      	adds	r7, #8
 8011a7a:	46bd      	mov	sp, r7
 8011a7c:	bd80      	pop	{r7, pc}
	...

08011a80 <_ZN4tama25Stm32SoundPlayingStrategy4playENS_4ToneE>:
namespace tama
{
    class Stm32SoundPlayingStrategy : public SoundPlayingStrategy
    {
    public:
        void play(Tone tone) override
 8011a80:	b480      	push	{r7}
 8011a82:	b085      	sub	sp, #20
 8011a84:	af00      	add	r7, sp, #0
 8011a86:	60f8      	str	r0, [r7, #12]
 8011a88:	1d3b      	adds	r3, r7, #4
 8011a8a:	e883 0006 	stmia.w	r3, {r1, r2}
        {
            if (tone.value == 0)
 8011a8e:	68bb      	ldr	r3, [r7, #8]
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d104      	bne.n	8011a9e <_ZN4tama25Stm32SoundPlayingStrategy4playENS_4ToneE+0x1e>
            {
                __HAL_TIM_SET_PRESCALER(&htim3, 0);
 8011a94:	4b0a      	ldr	r3, [pc, #40]	; (8011ac0 <_ZN4tama25Stm32SoundPlayingStrategy4playENS_4ToneE+0x40>)
 8011a96:	681b      	ldr	r3, [r3, #0]
 8011a98:	2200      	movs	r2, #0
 8011a9a:	629a      	str	r2, [r3, #40]	; 0x28
            else
            {
                __HAL_TIM_SET_PRESCALER(&htim3, 175 - 5 * (tone.value - 1));
            }

        }
 8011a9c:	e009      	b.n	8011ab2 <_ZN4tama25Stm32SoundPlayingStrategy4playENS_4ToneE+0x32>
                __HAL_TIM_SET_PRESCALER(&htim3, 175 - 5 * (tone.value - 1));
 8011a9e:	68ba      	ldr	r2, [r7, #8]
 8011aa0:	4613      	mov	r3, r2
 8011aa2:	079b      	lsls	r3, r3, #30
 8011aa4:	1a9b      	subs	r3, r3, r2
 8011aa6:	009b      	lsls	r3, r3, #2
 8011aa8:	1a9a      	subs	r2, r3, r2
 8011aaa:	4b05      	ldr	r3, [pc, #20]	; (8011ac0 <_ZN4tama25Stm32SoundPlayingStrategy4playENS_4ToneE+0x40>)
 8011aac:	681b      	ldr	r3, [r3, #0]
 8011aae:	32b4      	adds	r2, #180	; 0xb4
 8011ab0:	629a      	str	r2, [r3, #40]	; 0x28
        }
 8011ab2:	bf00      	nop
 8011ab4:	3714      	adds	r7, #20
 8011ab6:	46bd      	mov	sp, r7
 8011ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011abc:	4770      	bx	lr
 8011abe:	bf00      	nop
 8011ac0:	200004b8 	.word	0x200004b8

08011ac4 <_ZN4tama25Stm32SoundPlayingStrategy4stopEv>:

        void stop() override
 8011ac4:	b480      	push	{r7}
 8011ac6:	b083      	sub	sp, #12
 8011ac8:	af00      	add	r7, sp, #0
 8011aca:	6078      	str	r0, [r7, #4]
        {
            __HAL_TIM_SET_PRESCALER(&htim3, 0);
 8011acc:	4b04      	ldr	r3, [pc, #16]	; (8011ae0 <_ZN4tama25Stm32SoundPlayingStrategy4stopEv+0x1c>)
 8011ace:	681b      	ldr	r3, [r3, #0]
 8011ad0:	2200      	movs	r2, #0
 8011ad2:	629a      	str	r2, [r3, #40]	; 0x28
        }
 8011ad4:	bf00      	nop
 8011ad6:	370c      	adds	r7, #12
 8011ad8:	46bd      	mov	sp, r7
 8011ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ade:	4770      	bx	lr
 8011ae0:	200004b8 	.word	0x200004b8

08011ae4 <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_ptr() = default;
 8011ae4:	b580      	push	{r7, lr}
 8011ae6:	b082      	sub	sp, #8
 8011ae8:	af00      	add	r7, sp, #0
 8011aea:	6078      	str	r0, [r7, #4]
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	3304      	adds	r3, #4
 8011af0:	4618      	mov	r0, r3
 8011af2:	f7f1 fb0e 	bl	8003112 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	4618      	mov	r0, r3
 8011afa:	3708      	adds	r7, #8
 8011afc:	46bd      	mov	sp, r7
 8011afe:	bd80      	pop	{r7, pc}

08011b00 <_ZNSt10shared_ptrIN4tama18Stm32TextureLoaderEED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 8011b00:	b580      	push	{r7, lr}
 8011b02:	b082      	sub	sp, #8
 8011b04:	af00      	add	r7, sp, #0
 8011b06:	6078      	str	r0, [r7, #4]
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	4618      	mov	r0, r3
 8011b0c:	f7ff ffea 	bl	8011ae4 <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	4618      	mov	r0, r3
 8011b14:	3708      	adds	r7, #8
 8011b16:	46bd      	mov	sp, r7
 8011b18:	bd80      	pop	{r7, pc}

08011b1a <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
 8011b1a:	b580      	push	{r7, lr}
 8011b1c:	b082      	sub	sp, #8
 8011b1e:	af00      	add	r7, sp, #0
 8011b20:	6078      	str	r0, [r7, #4]
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	3304      	adds	r3, #4
 8011b26:	4618      	mov	r0, r3
 8011b28:	f7f1 faf3 	bl	8003112 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	4618      	mov	r0, r3
 8011b30:	3708      	adds	r7, #8
 8011b32:	46bd      	mov	sp, r7
 8011b34:	bd80      	pop	{r7, pc}

08011b36 <_ZNSt10shared_ptrIN4tama27Nokia5110DisplayDataManagerEED1Ev>:
 8011b36:	b580      	push	{r7, lr}
 8011b38:	b082      	sub	sp, #8
 8011b3a:	af00      	add	r7, sp, #0
 8011b3c:	6078      	str	r0, [r7, #4]
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	4618      	mov	r0, r3
 8011b42:	f7ff ffea 	bl	8011b1a <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	4618      	mov	r0, r3
 8011b4a:	3708      	adds	r7, #8
 8011b4c:	46bd      	mov	sp, r7
 8011b4e:	bd80      	pop	{r7, pc}

08011b50 <_ZNSt12__shared_ptrIN4tama23Stm32TimeMonitorCreatorELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
 8011b50:	b580      	push	{r7, lr}
 8011b52:	b082      	sub	sp, #8
 8011b54:	af00      	add	r7, sp, #0
 8011b56:	6078      	str	r0, [r7, #4]
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	3304      	adds	r3, #4
 8011b5c:	4618      	mov	r0, r3
 8011b5e:	f7f1 fad8 	bl	8003112 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	4618      	mov	r0, r3
 8011b66:	3708      	adds	r7, #8
 8011b68:	46bd      	mov	sp, r7
 8011b6a:	bd80      	pop	{r7, pc}

08011b6c <_ZNSt10shared_ptrIN4tama23Stm32TimeMonitorCreatorEED1Ev>:
 8011b6c:	b580      	push	{r7, lr}
 8011b6e:	b082      	sub	sp, #8
 8011b70:	af00      	add	r7, sp, #0
 8011b72:	6078      	str	r0, [r7, #4]
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	4618      	mov	r0, r3
 8011b78:	f7ff ffea 	bl	8011b50 <_ZNSt12__shared_ptrIN4tama23Stm32TimeMonitorCreatorELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	4618      	mov	r0, r3
 8011b80:	3708      	adds	r7, #8
 8011b82:	46bd      	mov	sp, r7
 8011b84:	bd80      	pop	{r7, pc}

08011b86 <_ZNSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
 8011b86:	b580      	push	{r7, lr}
 8011b88:	b082      	sub	sp, #8
 8011b8a:	af00      	add	r7, sp, #0
 8011b8c:	6078      	str	r0, [r7, #4]
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	3304      	adds	r3, #4
 8011b92:	4618      	mov	r0, r3
 8011b94:	f7f1 fabd 	bl	8003112 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	4618      	mov	r0, r3
 8011b9c:	3708      	adds	r7, #8
 8011b9e:	46bd      	mov	sp, r7
 8011ba0:	bd80      	pop	{r7, pc}

08011ba2 <_ZNSt10shared_ptrIN4tama25Stm32SoundPlayingStrategyEED1Ev>:
 8011ba2:	b580      	push	{r7, lr}
 8011ba4:	b082      	sub	sp, #8
 8011ba6:	af00      	add	r7, sp, #0
 8011ba8:	6078      	str	r0, [r7, #4]
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	4618      	mov	r0, r3
 8011bae:	f7ff ffea 	bl	8011b86 <_ZNSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	4618      	mov	r0, r3
 8011bb6:	3708      	adds	r7, #8
 8011bb8:	46bd      	mov	sp, r7
 8011bba:	bd80      	pop	{r7, pc}

08011bbc <_ZNSt12__shared_ptrIN4tama20SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
 8011bbc:	b580      	push	{r7, lr}
 8011bbe:	b082      	sub	sp, #8
 8011bc0:	af00      	add	r7, sp, #0
 8011bc2:	6078      	str	r0, [r7, #4]
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	3304      	adds	r3, #4
 8011bc8:	4618      	mov	r0, r3
 8011bca:	f7f1 faa2 	bl	8003112 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	4618      	mov	r0, r3
 8011bd2:	3708      	adds	r7, #8
 8011bd4:	46bd      	mov	sp, r7
 8011bd6:	bd80      	pop	{r7, pc}

08011bd8 <_ZNSt10shared_ptrIN4tama20SoundPlayingStrategyEED1Ev>:
 8011bd8:	b580      	push	{r7, lr}
 8011bda:	b082      	sub	sp, #8
 8011bdc:	af00      	add	r7, sp, #0
 8011bde:	6078      	str	r0, [r7, #4]
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	4618      	mov	r0, r3
 8011be4:	f7ff ffea 	bl	8011bbc <_ZNSt12__shared_ptrIN4tama20SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	4618      	mov	r0, r3
 8011bec:	3708      	adds	r7, #8
 8011bee:	46bd      	mov	sp, r7
 8011bf0:	bd80      	pop	{r7, pc}

08011bf2 <_ZNSt12__shared_ptrIN4tama11TimeMonitorELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8011bf2:	b580      	push	{r7, lr}
 8011bf4:	b082      	sub	sp, #8
 8011bf6:	af00      	add	r7, sp, #0
 8011bf8:	6078      	str	r0, [r7, #4]
 8011bfa:	6039      	str	r1, [r7, #0]
 8011bfc:	683b      	ldr	r3, [r7, #0]
 8011bfe:	681a      	ldr	r2, [r3, #0]
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	601a      	str	r2, [r3, #0]
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	1d1a      	adds	r2, r3, #4
 8011c08:	683b      	ldr	r3, [r7, #0]
 8011c0a:	3304      	adds	r3, #4
 8011c0c:	4619      	mov	r1, r3
 8011c0e:	4610      	mov	r0, r2
 8011c10:	f7f1 fa68 	bl	80030e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	4618      	mov	r0, r3
 8011c18:	3708      	adds	r7, #8
 8011c1a:	46bd      	mov	sp, r7
 8011c1c:	bd80      	pop	{r7, pc}

08011c1e <_ZNSt10shared_ptrIN4tama11TimeMonitorEEC1ERKS2_>:
      shared_ptr(const shared_ptr&) noexcept = default;
 8011c1e:	b580      	push	{r7, lr}
 8011c20:	b082      	sub	sp, #8
 8011c22:	af00      	add	r7, sp, #0
 8011c24:	6078      	str	r0, [r7, #4]
 8011c26:	6039      	str	r1, [r7, #0]
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	683a      	ldr	r2, [r7, #0]
 8011c2c:	4611      	mov	r1, r2
 8011c2e:	4618      	mov	r0, r3
 8011c30:	f7ff ffdf 	bl	8011bf2 <_ZNSt12__shared_ptrIN4tama11TimeMonitorELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	4618      	mov	r0, r3
 8011c38:	3708      	adds	r7, #8
 8011c3a:	46bd      	mov	sp, r7
 8011c3c:	bd80      	pop	{r7, pc}

08011c3e <_ZN4tama11SoundPlayerD1Ev>:
#include "../tone/Tone.h"
#include "../SoundPlayingStrategy.h"

namespace tama
{
    class SoundPlayer
 8011c3e:	b580      	push	{r7, lr}
 8011c40:	b082      	sub	sp, #8
 8011c42:	af00      	add	r7, sp, #0
 8011c44:	6078      	str	r0, [r7, #4]
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	3310      	adds	r3, #16
 8011c4a:	4618      	mov	r0, r3
 8011c4c:	f7f3 f96f 	bl	8004f2e <_ZNSt6vectorIN4tama4ToneESaIS1_EED1Ev>
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	3308      	adds	r3, #8
 8011c54:	4618      	mov	r0, r3
 8011c56:	f7ff ffbf 	bl	8011bd8 <_ZNSt10shared_ptrIN4tama20SoundPlayingStrategyEED1Ev>
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	4618      	mov	r0, r3
 8011c5e:	f7f3 fb35 	bl	80052cc <_ZNSt10shared_ptrIN4tama11TimeMonitorEED1Ev>
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	4618      	mov	r0, r3
 8011c66:	3708      	adds	r7, #8
 8011c68:	46bd      	mov	sp, r7
 8011c6a:	bd80      	pop	{r7, pc}

08011c6c <_ZNSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_ptr() = default;
 8011c6c:	b580      	push	{r7, lr}
 8011c6e:	b082      	sub	sp, #8
 8011c70:	af00      	add	r7, sp, #0
 8011c72:	6078      	str	r0, [r7, #4]
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	3304      	adds	r3, #4
 8011c78:	4618      	mov	r0, r3
 8011c7a:	f7f1 fa4a 	bl	8003112 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	4618      	mov	r0, r3
 8011c82:	3708      	adds	r7, #8
 8011c84:	46bd      	mov	sp, r7
 8011c86:	bd80      	pop	{r7, pc}

08011c88 <_ZNSt10shared_ptrIN4tama10Stm32InputEED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 8011c88:	b580      	push	{r7, lr}
 8011c8a:	b082      	sub	sp, #8
 8011c8c:	af00      	add	r7, sp, #0
 8011c8e:	6078      	str	r0, [r7, #4]
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	4618      	mov	r0, r3
 8011c94:	f7ff ffea 	bl	8011c6c <_ZNSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	4618      	mov	r0, r3
 8011c9c:	3708      	adds	r7, #8
 8011c9e:	46bd      	mov	sp, r7
 8011ca0:	bd80      	pop	{r7, pc}

08011ca2 <_ZNSt12__shared_ptrIN4tama20SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8011ca2:	b580      	push	{r7, lr}
 8011ca4:	b082      	sub	sp, #8
 8011ca6:	af00      	add	r7, sp, #0
 8011ca8:	6078      	str	r0, [r7, #4]
 8011caa:	6039      	str	r1, [r7, #0]
 8011cac:	683b      	ldr	r3, [r7, #0]
 8011cae:	681a      	ldr	r2, [r3, #0]
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	601a      	str	r2, [r3, #0]
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	1d1a      	adds	r2, r3, #4
 8011cb8:	683b      	ldr	r3, [r7, #0]
 8011cba:	3304      	adds	r3, #4
 8011cbc:	4619      	mov	r1, r3
 8011cbe:	4610      	mov	r0, r2
 8011cc0:	f7f1 fa10 	bl	80030e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	4618      	mov	r0, r3
 8011cc8:	3708      	adds	r7, #8
 8011cca:	46bd      	mov	sp, r7
 8011ccc:	bd80      	pop	{r7, pc}

08011cce <_ZNSt10shared_ptrIN4tama20SoundPlayingStrategyEEC1ERKS2_>:
      shared_ptr(const shared_ptr&) noexcept = default;
 8011cce:	b580      	push	{r7, lr}
 8011cd0:	b082      	sub	sp, #8
 8011cd2:	af00      	add	r7, sp, #0
 8011cd4:	6078      	str	r0, [r7, #4]
 8011cd6:	6039      	str	r1, [r7, #0]
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	683a      	ldr	r2, [r7, #0]
 8011cdc:	4611      	mov	r1, r2
 8011cde:	4618      	mov	r0, r3
 8011ce0:	f7ff ffdf 	bl	8011ca2 <_ZNSt12__shared_ptrIN4tama20SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	4618      	mov	r0, r3
 8011ce8:	3708      	adds	r7, #8
 8011cea:	46bd      	mov	sp, r7
 8011cec:	bd80      	pop	{r7, pc}

08011cee <_ZN4tama4Main3runEv>:
#include "../STM32F411Disco-drivers/time-monitor/Stm32TimeMonitorCreator.h"
#include "../Core/stages/menu/play/menu/PlayMenu.h"


[[noreturn]] void tama::Main::run()
{
 8011cee:	b5b0      	push	{r4, r5, r7, lr}
 8011cf0:	b0cc      	sub	sp, #304	; 0x130
 8011cf2:	af02      	add	r7, sp, #8
 8011cf4:	1d3b      	adds	r3, r7, #4
 8011cf6:	6018      	str	r0, [r3, #0]
    unsigned fps = 4;
 8011cf8:	2304      	movs	r3, #4
 8011cfa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    unsigned frameMillis = 1000 / fps;
 8011cfe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011d02:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8011d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8011d0a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

    DisplayConfig displayConfig = getDefaultNokia5110DisplayConfig();
 8011d0e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8011d12:	1d3b      	adds	r3, r7, #4
 8011d14:	6819      	ldr	r1, [r3, #0]
 8011d16:	4610      	mov	r0, r2
 8011d18:	f000 f9b8 	bl	801208c <_ZN4tama4Main32getDefaultNokia5110DisplayConfigEv>
    std::unique_ptr<Display> display = std::make_unique<Nokia5510Display>(displayConfig);
 8011d1c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8011d20:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8011d24:	4611      	mov	r1, r2
 8011d26:	4618      	mov	r0, r3
 8011d28:	f000 f9eb 	bl	8012102 <_ZSt11make_uniqueIN4tama16Nokia5510DisplayEJRNS0_13DisplayConfigEEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 8011d2c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8011d30:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8011d34:	4611      	mov	r1, r2
 8011d36:	4618      	mov	r0, r3
 8011d38:	f000 fa1c 	bl	8012174 <_ZNSt10unique_ptrIN4tama7DisplayESt14default_deleteIS1_EEC1INS0_16Nokia5510DisplayES2_IS6_EvEEOS_IT_T0_E>
 8011d3c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8011d40:	4618      	mov	r0, r3
 8011d42:	f000 f9f8 	bl	8012136 <_ZNSt10unique_ptrIN4tama16Nokia5510DisplayESt14default_deleteIS1_EED1Ev>
    std::shared_ptr<TextureLoader> textureLoader = std::make_shared<Stm32TextureLoader>();
 8011d46:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8011d4a:	4618      	mov	r0, r3
 8011d4c:	f000 fa2e 	bl	80121ac <_ZSt11make_sharedIN4tama18Stm32TextureLoaderEJEESt10shared_ptrIT_EDpOT0_>
 8011d50:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8011d54:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8011d58:	4611      	mov	r1, r2
 8011d5a:	4618      	mov	r0, r3
 8011d5c:	f000 fa4a 	bl	80121f4 <_ZNSt10shared_ptrIN4tama13TextureLoaderEEC1INS0_18Stm32TextureLoaderEvEEOS_IT_E>
 8011d60:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8011d64:	4618      	mov	r0, r3
 8011d66:	f7ff fecb 	bl	8011b00 <_ZNSt10shared_ptrIN4tama18Stm32TextureLoaderEED1Ev>
    std::shared_ptr<DisplayDataManager> dataConverter = std::make_shared<Nokia5110DisplayDataManager>();
 8011d6a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8011d6e:	4618      	mov	r0, r3
 8011d70:	f000 fa53 	bl	801221a <_ZSt11make_sharedIN4tama27Nokia5110DisplayDataManagerEJEESt10shared_ptrIT_EDpOT0_>
 8011d74:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8011d78:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8011d7c:	4611      	mov	r1, r2
 8011d7e:	4618      	mov	r0, r3
 8011d80:	f000 fa6f 	bl	8012262 <_ZNSt10shared_ptrIN4tama18DisplayDataManagerEEC1INS0_27Nokia5110DisplayDataManagerEvEEOS_IT_E>
 8011d84:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8011d88:	4618      	mov	r0, r3
 8011d8a:	f7ff fed4 	bl	8011b36 <_ZNSt10shared_ptrIN4tama27Nokia5110DisplayDataManagerEED1Ev>
    std::shared_ptr<TimeMonitorCreator> timeMonitorCreator = std::make_shared<Stm32TimeMonitorCreator>();
 8011d8e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8011d92:	4618      	mov	r0, r3
 8011d94:	f000 fa78 	bl	8012288 <_ZSt11make_sharedIN4tama23Stm32TimeMonitorCreatorEJEESt10shared_ptrIT_EDpOT0_>
 8011d98:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8011d9c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8011da0:	4611      	mov	r1, r2
 8011da2:	4618      	mov	r0, r3
 8011da4:	f000 fa94 	bl	80122d0 <_ZNSt10shared_ptrIN4tama18TimeMonitorCreatorEEC1INS0_23Stm32TimeMonitorCreatorEvEEOS_IT_E>
 8011da8:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8011dac:	4618      	mov	r0, r3
 8011dae:	f7ff fedd 	bl	8011b6c <_ZNSt10shared_ptrIN4tama23Stm32TimeMonitorCreatorEED1Ev>
    std::shared_ptr<TimeMonitor> soundTimeMonitor = timeMonitorCreator->createTimeMonitor();
 8011db2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8011db6:	4618      	mov	r0, r3
 8011db8:	f7f3 fb02 	bl	80053c0 <_ZNKSt19__shared_ptr_accessIN4tama18TimeMonitorCreatorELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8011dbc:	4602      	mov	r2, r0
 8011dbe:	6813      	ldr	r3, [r2, #0]
 8011dc0:	681b      	ldr	r3, [r3, #0]
 8011dc2:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8011dc6:	4611      	mov	r1, r2
 8011dc8:	4798      	blx	r3
    std::shared_ptr<TimeMonitor> refreshTimeMonitor = timeMonitorCreator->createTimeMonitor();
 8011dca:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8011dce:	4618      	mov	r0, r3
 8011dd0:	f7f3 faf6 	bl	80053c0 <_ZNKSt19__shared_ptr_accessIN4tama18TimeMonitorCreatorELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8011dd4:	4602      	mov	r2, r0
 8011dd6:	6813      	ldr	r3, [r2, #0]
 8011dd8:	681b      	ldr	r3, [r3, #0]
 8011dda:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8011dde:	4611      	mov	r1, r2
 8011de0:	4798      	blx	r3
    std::shared_ptr<SoundPlayingStrategy> playingStrategy = std::make_shared<Stm32SoundPlayingStrategy>();
 8011de2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8011de6:	4618      	mov	r0, r3
 8011de8:	f000 fa85 	bl	80122f6 <_ZSt11make_sharedIN4tama25Stm32SoundPlayingStrategyEJEESt10shared_ptrIT_EDpOT0_>
 8011dec:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8011df0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8011df4:	4611      	mov	r1, r2
 8011df6:	4618      	mov	r0, r3
 8011df8:	f000 faa1 	bl	801233e <_ZNSt10shared_ptrIN4tama20SoundPlayingStrategyEEC1INS0_25Stm32SoundPlayingStrategyEvEEOS_IT_E>
 8011dfc:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8011e00:	4618      	mov	r0, r3
 8011e02:	f7ff fece 	bl	8011ba2 <_ZNSt10shared_ptrIN4tama25Stm32SoundPlayingStrategyEED1Ev>
    SoundPlayer soundPlayer(soundTimeMonitor);
 8011e06:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8011e0a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8011e0e:	4611      	mov	r1, r2
 8011e10:	4618      	mov	r0, r3
 8011e12:	f7ff ff04 	bl	8011c1e <_ZNSt10shared_ptrIN4tama11TimeMonitorEEC1ERKS2_>
 8011e16:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8011e1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011e1e:	4611      	mov	r1, r2
 8011e20:	4618      	mov	r0, r3
 8011e22:	f7f2 ffd6 	bl	8004dd2 <_ZN4tama11SoundPlayerC1ESt10shared_ptrINS_11TimeMonitorEE>
 8011e26:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8011e2a:	4618      	mov	r0, r3
 8011e2c:	f7f3 fa4e 	bl	80052cc <_ZNSt10shared_ptrIN4tama11TimeMonitorEED1Ev>
    std::shared_ptr<Input> input = std::make_shared<Stm32Input>();
 8011e30:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8011e34:	4618      	mov	r0, r3
 8011e36:	f000 fa95 	bl	8012364 <_ZSt11make_sharedIN4tama10Stm32InputEJEESt10shared_ptrIT_EDpOT0_>
 8011e3a:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8011e3e:	f107 0320 	add.w	r3, r7, #32
 8011e42:	4611      	mov	r1, r2
 8011e44:	4618      	mov	r0, r3
 8011e46:	f000 fab1 	bl	80123ac <_ZNSt10shared_ptrIN4tama5InputEEC1INS0_10Stm32InputEvEEOS_IT_E>
 8011e4a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8011e4e:	4618      	mov	r0, r3
 8011e50:	f7ff ff1a 	bl	8011c88 <_ZNSt10shared_ptrIN4tama10Stm32InputEED1Ev>
    soundPlayer.setPlayingStrategy(playingStrategy);
 8011e54:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8011e58:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8011e5c:	4611      	mov	r1, r2
 8011e5e:	4618      	mov	r0, r3
 8011e60:	f7ff ff35 	bl	8011cce <_ZNSt10shared_ptrIN4tama20SoundPlayingStrategyEEC1ERKS2_>
 8011e64:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8011e68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011e6c:	4611      	mov	r1, r2
 8011e6e:	4618      	mov	r0, r3
 8011e70:	f7f2 ff95 	bl	8004d9e <_ZN4tama11SoundPlayer18setPlayingStrategyESt10shared_ptrINS_20SoundPlayingStrategyEE>
 8011e74:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8011e78:	4618      	mov	r0, r3
 8011e7a:	f7ff fead 	bl	8011bd8 <_ZNSt10shared_ptrIN4tama20SoundPlayingStrategyEED1Ev>
    std::shared_ptr<Context> context = std::make_shared<Context>(textureLoader,
                                                                 input,
                                                                 std::shared_ptr<SoundPlayer>(&soundPlayer),
 8011e7e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011e82:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8011e86:	4611      	mov	r1, r2
 8011e88:	4618      	mov	r0, r3
 8011e8a:	f000 faa2 	bl	80123d2 <_ZNSt10shared_ptrIN4tama11SoundPlayerEEC1IS1_vEEPT_>
                                                                 timeMonitorCreator);
 8011e8e:	f107 0018 	add.w	r0, r7, #24
 8011e92:	f107 04e0 	add.w	r4, r7, #224	; 0xe0
 8011e96:	f107 0220 	add.w	r2, r7, #32
 8011e9a:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8011e9e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8011ea2:	9300      	str	r3, [sp, #0]
 8011ea4:	4623      	mov	r3, r4
 8011ea6:	f000 facf 	bl	8012448 <_ZSt11make_sharedIN4tama7ContextEJRSt10shared_ptrINS0_13TextureLoaderEERS2_INS0_5InputEES2_INS0_11SoundPlayerEERS2_INS0_18TimeMonitorCreatorEEEES2_IT_EDpOT0_>
 8011eaa:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8011eae:	4618      	mov	r0, r3
 8011eb0:	f7f3 fcf9 	bl	80058a6 <_ZNSt10shared_ptrIN4tama11SoundPlayerEED1Ev>
    //std::shared_ptr<Stage> loadingStage = std::make_shared<InitialLoading>(context);

    context->openNewStage(std::make_shared<PlayMenu>(context));
 8011eb4:	f107 0318 	add.w	r3, r7, #24
 8011eb8:	4618      	mov	r0, r3
 8011eba:	f7f1 ff87 	bl	8003dcc <_ZNKSt19__shared_ptr_accessIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8011ebe:	4604      	mov	r4, r0
 8011ec0:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8011ec4:	f107 0218 	add.w	r2, r7, #24
 8011ec8:	4611      	mov	r1, r2
 8011eca:	4618      	mov	r0, r3
 8011ecc:	f7f5 f972 	bl	80071b4 <_ZSt11make_sharedIN4tama8PlayMenuEJRSt10shared_ptrINS0_7ContextEEEES2_IT_EDpOT0_>
 8011ed0:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8011ed4:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8011ed8:	4611      	mov	r1, r2
 8011eda:	4618      	mov	r0, r3
 8011edc:	f7f5 f992 	bl	8007204 <_ZNSt10shared_ptrIN4tama5StageEEC1INS0_8PlayMenuEvEEOS_IT_E>
 8011ee0:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8011ee4:	4619      	mov	r1, r3
 8011ee6:	4620      	mov	r0, r4
 8011ee8:	f7f0 fef8 	bl	8002cdc <_ZN4tama7Context12openNewStageESt10shared_ptrINS_5StageEE>
 8011eec:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8011ef0:	4618      	mov	r0, r3
 8011ef2:	f7f0 ff64 	bl	8002dbe <_ZNSt10shared_ptrIN4tama5StageEED1Ev>
 8011ef6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8011efa:	4618      	mov	r0, r3
 8011efc:	f7f4 fe4a 	bl	8006b94 <_ZNSt10shared_ptrIN4tama8PlayMenuEED1Ev>
    context->getActiveStage()->onInit();
 8011f00:	f107 0318 	add.w	r3, r7, #24
 8011f04:	4618      	mov	r0, r3
 8011f06:	f7f1 ff61 	bl	8003dcc <_ZNKSt19__shared_ptr_accessIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8011f0a:	4602      	mov	r2, r0
 8011f0c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8011f10:	4611      	mov	r1, r2
 8011f12:	4618      	mov	r0, r3
 8011f14:	f7f0 ff60 	bl	8002dd8 <_ZN4tama7Context14getActiveStageEv>
 8011f18:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8011f1c:	4618      	mov	r0, r3
 8011f1e:	f000 fac1 	bl	80124a4 <_ZNKSt19__shared_ptr_accessIN4tama5StageELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8011f22:	4602      	mov	r2, r0
 8011f24:	6813      	ldr	r3, [r2, #0]
 8011f26:	3304      	adds	r3, #4
 8011f28:	681b      	ldr	r3, [r3, #0]
 8011f2a:	4610      	mov	r0, r2
 8011f2c:	4798      	blx	r3
 8011f2e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8011f32:	4618      	mov	r0, r3
 8011f34:	f7f0 ff43 	bl	8002dbe <_ZNSt10shared_ptrIN4tama5StageEED1Ev>
    refreshTimeMonitor->startTimer();
 8011f38:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8011f3c:	4618      	mov	r0, r3
 8011f3e:	f7f2 ff6c 	bl	8004e1a <_ZNKSt19__shared_ptr_accessIN4tama11TimeMonitorELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8011f42:	4602      	mov	r2, r0
 8011f44:	6813      	ldr	r3, [r2, #0]
 8011f46:	681b      	ldr	r3, [r3, #0]
 8011f48:	4610      	mov	r0, r2
 8011f4a:	4798      	blx	r3

    //    soundPlayer.play(music);

    while (true)
    {
        input->update();
 8011f4c:	f107 0320 	add.w	r3, r7, #32
 8011f50:	4618      	mov	r0, r3
 8011f52:	f7f1 f8a2 	bl	800309a <_ZNKSt19__shared_ptr_accessIN4tama5InputELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8011f56:	4602      	mov	r2, r0
 8011f58:	6813      	ldr	r3, [r2, #0]
 8011f5a:	681b      	ldr	r3, [r3, #0]
 8011f5c:	4610      	mov	r0, r2
 8011f5e:	4798      	blx	r3
        soundPlayer.update();
 8011f60:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011f64:	4618      	mov	r0, r3
 8011f66:	f7f2 fe7b 	bl	8004c60 <_ZN4tama11SoundPlayer6updateEv>
        if (refreshTimeMonitor->getElapsedTime() > frameMillis)
 8011f6a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8011f6e:	4618      	mov	r0, r3
 8011f70:	f7f2 ff53 	bl	8004e1a <_ZNKSt19__shared_ptr_accessIN4tama11TimeMonitorELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8011f74:	4602      	mov	r2, r0
 8011f76:	6813      	ldr	r3, [r2, #0]
 8011f78:	3304      	adds	r3, #4
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	4610      	mov	r0, r2
 8011f7e:	4798      	blx	r3
 8011f80:	4602      	mov	r2, r0
 8011f82:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8011f86:	4293      	cmp	r3, r2
 8011f88:	bf34      	ite	cc
 8011f8a:	2301      	movcc	r3, #1
 8011f8c:	2300      	movcs	r3, #0
 8011f8e:	b2db      	uxtb	r3, r3
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d0db      	beq.n	8011f4c <_ZN4tama4Main3runEv+0x25e>
        {
            refreshTimeMonitor->startTimer();
 8011f94:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8011f98:	4618      	mov	r0, r3
 8011f9a:	f7f2 ff3e 	bl	8004e1a <_ZNKSt19__shared_ptr_accessIN4tama11TimeMonitorELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8011f9e:	4602      	mov	r2, r0
 8011fa0:	6813      	ldr	r3, [r2, #0]
 8011fa2:	681b      	ldr	r3, [r3, #0]
 8011fa4:	4610      	mov	r0, r2
 8011fa6:	4798      	blx	r3
            auto sceneData = dataConverter->getActiveSceneDisplayData(context->getActiveStage()->getScene()->getSceneData());
 8011fa8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8011fac:	4618      	mov	r0, r3
 8011fae:	f000 fa85 	bl	80124bc <_ZNKSt19__shared_ptr_accessIN4tama18DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8011fb2:	4605      	mov	r5, r0
 8011fb4:	682b      	ldr	r3, [r5, #0]
 8011fb6:	681c      	ldr	r4, [r3, #0]
 8011fb8:	f107 0318 	add.w	r3, r7, #24
 8011fbc:	4618      	mov	r0, r3
 8011fbe:	f7f1 ff05 	bl	8003dcc <_ZNKSt19__shared_ptr_accessIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8011fc2:	4602      	mov	r2, r0
 8011fc4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011fc8:	4611      	mov	r1, r2
 8011fca:	4618      	mov	r0, r3
 8011fcc:	f7f0 ff04 	bl	8002dd8 <_ZN4tama7Context14getActiveStageEv>
 8011fd0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011fd4:	4618      	mov	r0, r3
 8011fd6:	f000 fa65 	bl	80124a4 <_ZNKSt19__shared_ptr_accessIN4tama5StageELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8011fda:	4602      	mov	r2, r0
 8011fdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011fe0:	4611      	mov	r1, r2
 8011fe2:	4618      	mov	r0, r3
 8011fe4:	f7f1 fe28 	bl	8003c38 <_ZN4tama5Stage8getSceneEv>
 8011fe8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011fec:	4618      	mov	r0, r3
 8011fee:	f7f3 fa06 	bl	80053fe <_ZNKSt19__shared_ptr_accessIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8011ff2:	4602      	mov	r2, r0
 8011ff4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8011ff8:	4611      	mov	r1, r2
 8011ffa:	4618      	mov	r0, r3
 8011ffc:	f7fe ffa9 	bl	8010f52 <_ZN4tama5Scene12getSceneDataEv>
 8012000:	f107 030c 	add.w	r3, r7, #12
 8012004:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8012008:	4629      	mov	r1, r5
 801200a:	4618      	mov	r0, r3
 801200c:	47a0      	blx	r4
 801200e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8012012:	4618      	mov	r0, r3
 8012014:	f7f3 f8e9 	bl	80051ea <_ZNSt10shared_ptrIN4tama7TextureEED1Ev>
 8012018:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801201c:	4618      	mov	r0, r3
 801201e:	f7f1 fdfe 	bl	8003c1e <_ZNSt10shared_ptrIN4tama5SceneEED1Ev>
 8012022:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012026:	4618      	mov	r0, r3
 8012028:	f7f0 fec9 	bl	8002dbe <_ZNSt10shared_ptrIN4tama5StageEED1Ev>
            display->setData(sceneData);
 801202c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8012030:	4618      	mov	r0, r3
 8012032:	f000 fa4f 	bl	80124d4 <_ZNKSt10unique_ptrIN4tama7DisplayESt14default_deleteIS1_EEptEv>
 8012036:	4602      	mov	r2, r0
 8012038:	6813      	ldr	r3, [r2, #0]
 801203a:	3304      	adds	r3, #4
 801203c:	681b      	ldr	r3, [r3, #0]
 801203e:	f107 010c 	add.w	r1, r7, #12
 8012042:	4610      	mov	r0, r2
 8012044:	4798      	blx	r3
            context->getActiveStage()->onFrame();
 8012046:	f107 0318 	add.w	r3, r7, #24
 801204a:	4618      	mov	r0, r3
 801204c:	f7f1 febe 	bl	8003dcc <_ZNKSt19__shared_ptr_accessIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8012050:	4602      	mov	r2, r0
 8012052:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012056:	4611      	mov	r1, r2
 8012058:	4618      	mov	r0, r3
 801205a:	f7f0 febd 	bl	8002dd8 <_ZN4tama7Context14getActiveStageEv>
 801205e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012062:	4618      	mov	r0, r3
 8012064:	f000 fa1e 	bl	80124a4 <_ZNKSt19__shared_ptr_accessIN4tama5StageELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8012068:	4602      	mov	r2, r0
 801206a:	6813      	ldr	r3, [r2, #0]
 801206c:	3308      	adds	r3, #8
 801206e:	681b      	ldr	r3, [r3, #0]
 8012070:	4610      	mov	r0, r2
 8012072:	4798      	blx	r3
 8012074:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012078:	4618      	mov	r0, r3
 801207a:	f7f0 fea0 	bl	8002dbe <_ZNSt10shared_ptrIN4tama5StageEED1Ev>
            auto sceneData = dataConverter->getActiveSceneDisplayData(context->getActiveStage()->getScene()->getSceneData());
 801207e:	f107 030c 	add.w	r3, r7, #12
 8012082:	4618      	mov	r0, r3
 8012084:	f7ff fce9 	bl	8011a5a <_ZN4tama11DisplayDataD1Ev>
        }
    }
 8012088:	e760      	b.n	8011f4c <_ZN4tama4Main3runEv+0x25e>
	...

0801208c <_ZN4tama4Main32getDefaultNokia5110DisplayConfigEv>:
}

tama::DisplayConfig tama::Main::getDefaultNokia5110DisplayConfig()
{
 801208c:	b480      	push	{r7}
 801208e:	b083      	sub	sp, #12
 8012090:	af00      	add	r7, sp, #0
 8012092:	6078      	str	r0, [r7, #4]
 8012094:	6039      	str	r1, [r7, #0]
    DisplayConfig cfg;
    cfg.spi = &hspi1;
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	4a10      	ldr	r2, [pc, #64]	; (80120dc <_ZN4tama4Main32getDefaultNokia5110DisplayConfigEv+0x50>)
 801209a:	601a      	str	r2, [r3, #0]
    cfg.reset_port = RST_GPIO_Port;
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	4a10      	ldr	r2, [pc, #64]	; (80120e0 <_ZN4tama4Main32getDefaultNokia5110DisplayConfigEv+0x54>)
 80120a0:	605a      	str	r2, [r3, #4]
    cfg.reset_pin = RST_Pin;
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	2280      	movs	r2, #128	; 0x80
 80120a6:	811a      	strh	r2, [r3, #8]
    cfg.bl_port = BL_GPIO_Port;
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	4a0d      	ldr	r2, [pc, #52]	; (80120e0 <_ZN4tama4Main32getDefaultNokia5110DisplayConfigEv+0x54>)
 80120ac:	60da      	str	r2, [r3, #12]
    cfg.bl_pin = BL_Pin;
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80120b4:	821a      	strh	r2, [r3, #16]
    cfg.dc_port = DC_GPIO_Port;
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	4a0a      	ldr	r2, [pc, #40]	; (80120e4 <_ZN4tama4Main32getDefaultNokia5110DisplayConfigEv+0x58>)
 80120ba:	615a      	str	r2, [r3, #20]
    cfg.dc_pin = DC_Pin;
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	2220      	movs	r2, #32
 80120c0:	841a      	strh	r2, [r3, #32]
    cfg.ce_port = CE_GPIO_Port;
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	4a08      	ldr	r2, [pc, #32]	; (80120e8 <_ZN4tama4Main32getDefaultNokia5110DisplayConfigEv+0x5c>)
 80120c6:	61da      	str	r2, [r3, #28]
    cfg.ce_pin = CE_Pin;
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	2202      	movs	r2, #2
 80120cc:	831a      	strh	r2, [r3, #24]
    return cfg;
 80120ce:	bf00      	nop
}
 80120d0:	6878      	ldr	r0, [r7, #4]
 80120d2:	370c      	adds	r7, #12
 80120d4:	46bd      	mov	sp, r7
 80120d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120da:	4770      	bx	lr
 80120dc:	20000460 	.word	0x20000460
 80120e0:	40021000 	.word	0x40021000
 80120e4:	40020800 	.word	0x40020800
 80120e8:	40020400 	.word	0x40020400

080120ec <_ZSt7forwardIRN4tama13DisplayConfigEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80120ec:	b480      	push	{r7}
 80120ee:	b083      	sub	sp, #12
 80120f0:	af00      	add	r7, sp, #0
 80120f2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	4618      	mov	r0, r3
 80120f8:	370c      	adds	r7, #12
 80120fa:	46bd      	mov	sp, r7
 80120fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012100:	4770      	bx	lr

08012102 <_ZSt11make_uniqueIN4tama16Nokia5510DisplayEJRNS0_13DisplayConfigEEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 8012102:	b5b0      	push	{r4, r5, r7, lr}
 8012104:	b082      	sub	sp, #8
 8012106:	af00      	add	r7, sp, #0
 8012108:	6078      	str	r0, [r7, #4]
 801210a:	6039      	str	r1, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 801210c:	6838      	ldr	r0, [r7, #0]
 801210e:	f7ff ffed 	bl	80120ec <_ZSt7forwardIRN4tama13DisplayConfigEEOT_RNSt16remove_referenceIS3_E4typeE>
 8012112:	4605      	mov	r5, r0
 8012114:	2030      	movs	r0, #48	; 0x30
 8012116:	f00d fbd2 	bl	801f8be <_Znwj>
 801211a:	4603      	mov	r3, r0
 801211c:	461c      	mov	r4, r3
 801211e:	4629      	mov	r1, r5
 8012120:	4620      	mov	r0, r4
 8012122:	f004 fee9 	bl	8016ef8 <_ZN4tama16Nokia5510DisplayC1ERNS_13DisplayConfigE>
 8012126:	4621      	mov	r1, r4
 8012128:	6878      	ldr	r0, [r7, #4]
 801212a:	f000 f9df 	bl	80124ec <_ZNSt10unique_ptrIN4tama16Nokia5510DisplayESt14default_deleteIS1_EEC1IS3_vEEPS1_>
 801212e:	6878      	ldr	r0, [r7, #4]
 8012130:	3708      	adds	r7, #8
 8012132:	46bd      	mov	sp, r7
 8012134:	bdb0      	pop	{r4, r5, r7, pc}

08012136 <_ZNSt10unique_ptrIN4tama16Nokia5510DisplayESt14default_deleteIS1_EED1Ev>:
      ~unique_ptr() noexcept
 8012136:	b580      	push	{r7, lr}
 8012138:	b084      	sub	sp, #16
 801213a:	af00      	add	r7, sp, #0
 801213c:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	4618      	mov	r0, r3
 8012142:	f000 f9e2 	bl	801250a <_ZNSt15__uniq_ptr_implIN4tama16Nokia5510DisplayESt14default_deleteIS1_EE6_M_ptrEv>
 8012146:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8012148:	68fb      	ldr	r3, [r7, #12]
 801214a:	681b      	ldr	r3, [r3, #0]
 801214c:	2b00      	cmp	r3, #0
 801214e:	d009      	beq.n	8012164 <_ZNSt10unique_ptrIN4tama16Nokia5510DisplayESt14default_deleteIS1_EED1Ev+0x2e>
	  get_deleter()(__ptr);
 8012150:	6878      	ldr	r0, [r7, #4]
 8012152:	f000 f9e7 	bl	8012524 <_ZNSt10unique_ptrIN4tama16Nokia5510DisplayESt14default_deleteIS1_EE11get_deleterEv>
 8012156:	4602      	mov	r2, r0
 8012158:	68fb      	ldr	r3, [r7, #12]
 801215a:	681b      	ldr	r3, [r3, #0]
 801215c:	4619      	mov	r1, r3
 801215e:	4610      	mov	r0, r2
 8012160:	f000 f9ed 	bl	801253e <_ZNKSt14default_deleteIN4tama16Nokia5510DisplayEEclEPS1_>
	__ptr = pointer();
 8012164:	68fb      	ldr	r3, [r7, #12]
 8012166:	2200      	movs	r2, #0
 8012168:	601a      	str	r2, [r3, #0]
      }
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	4618      	mov	r0, r3
 801216e:	3710      	adds	r7, #16
 8012170:	46bd      	mov	sp, r7
 8012172:	bd80      	pop	{r7, pc}

08012174 <_ZNSt10unique_ptrIN4tama7DisplayESt14default_deleteIS1_EEC1INS0_16Nokia5510DisplayES2_IS6_EvEEOS_IT_T0_E>:
	unique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept
 8012174:	b5b0      	push	{r4, r5, r7, lr}
 8012176:	b082      	sub	sp, #8
 8012178:	af00      	add	r7, sp, #0
 801217a:	6078      	str	r0, [r7, #4]
 801217c:	6039      	str	r1, [r7, #0]
	: _M_t(__u.release(), std::forward<_Ep>(__u.get_deleter()))
 801217e:	687c      	ldr	r4, [r7, #4]
 8012180:	6838      	ldr	r0, [r7, #0]
 8012182:	f000 f9e9 	bl	8012558 <_ZNSt10unique_ptrIN4tama16Nokia5510DisplayESt14default_deleteIS1_EE7releaseEv>
 8012186:	4605      	mov	r5, r0
 8012188:	6838      	ldr	r0, [r7, #0]
 801218a:	f000 f9cb 	bl	8012524 <_ZNSt10unique_ptrIN4tama16Nokia5510DisplayESt14default_deleteIS1_EE11get_deleterEv>
 801218e:	4603      	mov	r3, r0
 8012190:	4618      	mov	r0, r3
 8012192:	f000 f9f5 	bl	8012580 <_ZSt7forwardISt14default_deleteIN4tama16Nokia5510DisplayEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8012196:	4603      	mov	r3, r0
 8012198:	461a      	mov	r2, r3
 801219a:	4629      	mov	r1, r5
 801219c:	4620      	mov	r0, r4
 801219e:	f000 f9fa 	bl	8012596 <_ZNSt15__uniq_ptr_implIN4tama7DisplayESt14default_deleteIS1_EEC1IS2_INS0_16Nokia5510DisplayEEEEPS1_OT_>
	{ }
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	4618      	mov	r0, r3
 80121a6:	3708      	adds	r7, #8
 80121a8:	46bd      	mov	sp, r7
 80121aa:	bdb0      	pop	{r4, r5, r7, pc}

080121ac <_ZSt11make_sharedIN4tama18Stm32TextureLoaderEJEESt10shared_ptrIT_EDpOT0_>:
    make_shared(_Args&&... __args)
 80121ac:	b580      	push	{r7, lr}
 80121ae:	b084      	sub	sp, #16
 80121b0:	af00      	add	r7, sp, #0
 80121b2:	6078      	str	r0, [r7, #4]
				       std::forward<_Args>(__args)...);
 80121b4:	f107 030c 	add.w	r3, r7, #12
 80121b8:	4618      	mov	r0, r3
 80121ba:	f000 fa02 	bl	80125c2 <_ZNSaIN4tama18Stm32TextureLoaderEEC1Ev>
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	f107 020c 	add.w	r2, r7, #12
 80121c4:	4611      	mov	r1, r2
 80121c6:	4618      	mov	r0, r3
 80121c8:	f000 fa13 	bl	80125f2 <_ZSt15allocate_sharedIN4tama18Stm32TextureLoaderESaIS1_EJEESt10shared_ptrIT_ERKT0_DpOT1_>
 80121cc:	f107 030c 	add.w	r3, r7, #12
 80121d0:	4618      	mov	r0, r3
 80121d2:	f000 fa02 	bl	80125da <_ZNSaIN4tama18Stm32TextureLoaderEED1Ev>
    }
 80121d6:	6878      	ldr	r0, [r7, #4]
 80121d8:	3710      	adds	r7, #16
 80121da:	46bd      	mov	sp, r7
 80121dc:	bd80      	pop	{r7, pc}

080121de <_ZSt4moveIRSt10shared_ptrIN4tama18Stm32TextureLoaderEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 80121de:	b480      	push	{r7}
 80121e0:	b083      	sub	sp, #12
 80121e2:	af00      	add	r7, sp, #0
 80121e4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	4618      	mov	r0, r3
 80121ea:	370c      	adds	r7, #12
 80121ec:	46bd      	mov	sp, r7
 80121ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121f2:	4770      	bx	lr

080121f4 <_ZNSt10shared_ptrIN4tama13TextureLoaderEEC1INS0_18Stm32TextureLoaderEvEEOS_IT_E>:
	shared_ptr(shared_ptr<_Yp>&& __r) noexcept
 80121f4:	b590      	push	{r4, r7, lr}
 80121f6:	b083      	sub	sp, #12
 80121f8:	af00      	add	r7, sp, #0
 80121fa:	6078      	str	r0, [r7, #4]
 80121fc:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 80121fe:	687c      	ldr	r4, [r7, #4]
 8012200:	6838      	ldr	r0, [r7, #0]
 8012202:	f7ff ffec 	bl	80121de <_ZSt4moveIRSt10shared_ptrIN4tama18Stm32TextureLoaderEEEONSt16remove_referenceIT_E4typeEOS6_>
 8012206:	4603      	mov	r3, r0
 8012208:	4619      	mov	r1, r3
 801220a:	4620      	mov	r0, r4
 801220c:	f000 f9ff 	bl	801260e <_ZNSt12__shared_ptrIN4tama13TextureLoaderELN9__gnu_cxx12_Lock_policyE0EEC1INS0_18Stm32TextureLoaderEvEEOS_IT_LS3_0EE>
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	4618      	mov	r0, r3
 8012214:	370c      	adds	r7, #12
 8012216:	46bd      	mov	sp, r7
 8012218:	bd90      	pop	{r4, r7, pc}

0801221a <_ZSt11make_sharedIN4tama27Nokia5110DisplayDataManagerEJEESt10shared_ptrIT_EDpOT0_>:
    make_shared(_Args&&... __args)
 801221a:	b580      	push	{r7, lr}
 801221c:	b084      	sub	sp, #16
 801221e:	af00      	add	r7, sp, #0
 8012220:	6078      	str	r0, [r7, #4]
				       std::forward<_Args>(__args)...);
 8012222:	f107 030c 	add.w	r3, r7, #12
 8012226:	4618      	mov	r0, r3
 8012228:	f000 fa0f 	bl	801264a <_ZNSaIN4tama27Nokia5110DisplayDataManagerEEC1Ev>
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	f107 020c 	add.w	r2, r7, #12
 8012232:	4611      	mov	r1, r2
 8012234:	4618      	mov	r0, r3
 8012236:	f000 fa20 	bl	801267a <_ZSt15allocate_sharedIN4tama27Nokia5110DisplayDataManagerESaIS1_EJEESt10shared_ptrIT_ERKT0_DpOT1_>
 801223a:	f107 030c 	add.w	r3, r7, #12
 801223e:	4618      	mov	r0, r3
 8012240:	f000 fa0f 	bl	8012662 <_ZNSaIN4tama27Nokia5110DisplayDataManagerEED1Ev>
    }
 8012244:	6878      	ldr	r0, [r7, #4]
 8012246:	3710      	adds	r7, #16
 8012248:	46bd      	mov	sp, r7
 801224a:	bd80      	pop	{r7, pc}

0801224c <_ZSt4moveIRSt10shared_ptrIN4tama27Nokia5110DisplayDataManagerEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 801224c:	b480      	push	{r7}
 801224e:	b083      	sub	sp, #12
 8012250:	af00      	add	r7, sp, #0
 8012252:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	4618      	mov	r0, r3
 8012258:	370c      	adds	r7, #12
 801225a:	46bd      	mov	sp, r7
 801225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012260:	4770      	bx	lr

08012262 <_ZNSt10shared_ptrIN4tama18DisplayDataManagerEEC1INS0_27Nokia5110DisplayDataManagerEvEEOS_IT_E>:
	shared_ptr(shared_ptr<_Yp>&& __r) noexcept
 8012262:	b590      	push	{r4, r7, lr}
 8012264:	b083      	sub	sp, #12
 8012266:	af00      	add	r7, sp, #0
 8012268:	6078      	str	r0, [r7, #4]
 801226a:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 801226c:	687c      	ldr	r4, [r7, #4]
 801226e:	6838      	ldr	r0, [r7, #0]
 8012270:	f7ff ffec 	bl	801224c <_ZSt4moveIRSt10shared_ptrIN4tama27Nokia5110DisplayDataManagerEEEONSt16remove_referenceIT_E4typeEOS6_>
 8012274:	4603      	mov	r3, r0
 8012276:	4619      	mov	r1, r3
 8012278:	4620      	mov	r0, r4
 801227a:	f000 fa0c 	bl	8012696 <_ZNSt12__shared_ptrIN4tama18DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EEC1INS0_27Nokia5110DisplayDataManagerEvEEOS_IT_LS3_0EE>
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	4618      	mov	r0, r3
 8012282:	370c      	adds	r7, #12
 8012284:	46bd      	mov	sp, r7
 8012286:	bd90      	pop	{r4, r7, pc}

08012288 <_ZSt11make_sharedIN4tama23Stm32TimeMonitorCreatorEJEESt10shared_ptrIT_EDpOT0_>:
    make_shared(_Args&&... __args)
 8012288:	b580      	push	{r7, lr}
 801228a:	b084      	sub	sp, #16
 801228c:	af00      	add	r7, sp, #0
 801228e:	6078      	str	r0, [r7, #4]
				       std::forward<_Args>(__args)...);
 8012290:	f107 030c 	add.w	r3, r7, #12
 8012294:	4618      	mov	r0, r3
 8012296:	f000 fa1c 	bl	80126d2 <_ZNSaIN4tama23Stm32TimeMonitorCreatorEEC1Ev>
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	f107 020c 	add.w	r2, r7, #12
 80122a0:	4611      	mov	r1, r2
 80122a2:	4618      	mov	r0, r3
 80122a4:	f000 fa2d 	bl	8012702 <_ZSt15allocate_sharedIN4tama23Stm32TimeMonitorCreatorESaIS1_EJEESt10shared_ptrIT_ERKT0_DpOT1_>
 80122a8:	f107 030c 	add.w	r3, r7, #12
 80122ac:	4618      	mov	r0, r3
 80122ae:	f000 fa1c 	bl	80126ea <_ZNSaIN4tama23Stm32TimeMonitorCreatorEED1Ev>
    }
 80122b2:	6878      	ldr	r0, [r7, #4]
 80122b4:	3710      	adds	r7, #16
 80122b6:	46bd      	mov	sp, r7
 80122b8:	bd80      	pop	{r7, pc}

080122ba <_ZSt4moveIRSt10shared_ptrIN4tama23Stm32TimeMonitorCreatorEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 80122ba:	b480      	push	{r7}
 80122bc:	b083      	sub	sp, #12
 80122be:	af00      	add	r7, sp, #0
 80122c0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	4618      	mov	r0, r3
 80122c6:	370c      	adds	r7, #12
 80122c8:	46bd      	mov	sp, r7
 80122ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ce:	4770      	bx	lr

080122d0 <_ZNSt10shared_ptrIN4tama18TimeMonitorCreatorEEC1INS0_23Stm32TimeMonitorCreatorEvEEOS_IT_E>:
	shared_ptr(shared_ptr<_Yp>&& __r) noexcept
 80122d0:	b590      	push	{r4, r7, lr}
 80122d2:	b083      	sub	sp, #12
 80122d4:	af00      	add	r7, sp, #0
 80122d6:	6078      	str	r0, [r7, #4]
 80122d8:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 80122da:	687c      	ldr	r4, [r7, #4]
 80122dc:	6838      	ldr	r0, [r7, #0]
 80122de:	f7ff ffec 	bl	80122ba <_ZSt4moveIRSt10shared_ptrIN4tama23Stm32TimeMonitorCreatorEEEONSt16remove_referenceIT_E4typeEOS6_>
 80122e2:	4603      	mov	r3, r0
 80122e4:	4619      	mov	r1, r3
 80122e6:	4620      	mov	r0, r4
 80122e8:	f000 fa19 	bl	801271e <_ZNSt12__shared_ptrIN4tama18TimeMonitorCreatorELN9__gnu_cxx12_Lock_policyE0EEC1INS0_23Stm32TimeMonitorCreatorEvEEOS_IT_LS3_0EE>
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	4618      	mov	r0, r3
 80122f0:	370c      	adds	r7, #12
 80122f2:	46bd      	mov	sp, r7
 80122f4:	bd90      	pop	{r4, r7, pc}

080122f6 <_ZSt11make_sharedIN4tama25Stm32SoundPlayingStrategyEJEESt10shared_ptrIT_EDpOT0_>:
    make_shared(_Args&&... __args)
 80122f6:	b580      	push	{r7, lr}
 80122f8:	b084      	sub	sp, #16
 80122fa:	af00      	add	r7, sp, #0
 80122fc:	6078      	str	r0, [r7, #4]
				       std::forward<_Args>(__args)...);
 80122fe:	f107 030c 	add.w	r3, r7, #12
 8012302:	4618      	mov	r0, r3
 8012304:	f000 fa29 	bl	801275a <_ZNSaIN4tama25Stm32SoundPlayingStrategyEEC1Ev>
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	f107 020c 	add.w	r2, r7, #12
 801230e:	4611      	mov	r1, r2
 8012310:	4618      	mov	r0, r3
 8012312:	f000 fa3a 	bl	801278a <_ZSt15allocate_sharedIN4tama25Stm32SoundPlayingStrategyESaIS1_EJEESt10shared_ptrIT_ERKT0_DpOT1_>
 8012316:	f107 030c 	add.w	r3, r7, #12
 801231a:	4618      	mov	r0, r3
 801231c:	f000 fa29 	bl	8012772 <_ZNSaIN4tama25Stm32SoundPlayingStrategyEED1Ev>
    }
 8012320:	6878      	ldr	r0, [r7, #4]
 8012322:	3710      	adds	r7, #16
 8012324:	46bd      	mov	sp, r7
 8012326:	bd80      	pop	{r7, pc}

08012328 <_ZSt4moveIRSt10shared_ptrIN4tama25Stm32SoundPlayingStrategyEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8012328:	b480      	push	{r7}
 801232a:	b083      	sub	sp, #12
 801232c:	af00      	add	r7, sp, #0
 801232e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	4618      	mov	r0, r3
 8012334:	370c      	adds	r7, #12
 8012336:	46bd      	mov	sp, r7
 8012338:	f85d 7b04 	ldr.w	r7, [sp], #4
 801233c:	4770      	bx	lr

0801233e <_ZNSt10shared_ptrIN4tama20SoundPlayingStrategyEEC1INS0_25Stm32SoundPlayingStrategyEvEEOS_IT_E>:
	shared_ptr(shared_ptr<_Yp>&& __r) noexcept
 801233e:	b590      	push	{r4, r7, lr}
 8012340:	b083      	sub	sp, #12
 8012342:	af00      	add	r7, sp, #0
 8012344:	6078      	str	r0, [r7, #4]
 8012346:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 8012348:	687c      	ldr	r4, [r7, #4]
 801234a:	6838      	ldr	r0, [r7, #0]
 801234c:	f7ff ffec 	bl	8012328 <_ZSt4moveIRSt10shared_ptrIN4tama25Stm32SoundPlayingStrategyEEEONSt16remove_referenceIT_E4typeEOS6_>
 8012350:	4603      	mov	r3, r0
 8012352:	4619      	mov	r1, r3
 8012354:	4620      	mov	r0, r4
 8012356:	f000 fa26 	bl	80127a6 <_ZNSt12__shared_ptrIN4tama20SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EEC1INS0_25Stm32SoundPlayingStrategyEvEEOS_IT_LS3_0EE>
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	4618      	mov	r0, r3
 801235e:	370c      	adds	r7, #12
 8012360:	46bd      	mov	sp, r7
 8012362:	bd90      	pop	{r4, r7, pc}

08012364 <_ZSt11make_sharedIN4tama10Stm32InputEJEESt10shared_ptrIT_EDpOT0_>:
    make_shared(_Args&&... __args)
 8012364:	b580      	push	{r7, lr}
 8012366:	b084      	sub	sp, #16
 8012368:	af00      	add	r7, sp, #0
 801236a:	6078      	str	r0, [r7, #4]
				       std::forward<_Args>(__args)...);
 801236c:	f107 030c 	add.w	r3, r7, #12
 8012370:	4618      	mov	r0, r3
 8012372:	f000 fa36 	bl	80127e2 <_ZNSaIN4tama10Stm32InputEEC1Ev>
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	f107 020c 	add.w	r2, r7, #12
 801237c:	4611      	mov	r1, r2
 801237e:	4618      	mov	r0, r3
 8012380:	f000 fa47 	bl	8012812 <_ZSt15allocate_sharedIN4tama10Stm32InputESaIS1_EJEESt10shared_ptrIT_ERKT0_DpOT1_>
 8012384:	f107 030c 	add.w	r3, r7, #12
 8012388:	4618      	mov	r0, r3
 801238a:	f000 fa36 	bl	80127fa <_ZNSaIN4tama10Stm32InputEED1Ev>
    }
 801238e:	6878      	ldr	r0, [r7, #4]
 8012390:	3710      	adds	r7, #16
 8012392:	46bd      	mov	sp, r7
 8012394:	bd80      	pop	{r7, pc}

08012396 <_ZSt4moveIRSt10shared_ptrIN4tama10Stm32InputEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8012396:	b480      	push	{r7}
 8012398:	b083      	sub	sp, #12
 801239a:	af00      	add	r7, sp, #0
 801239c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	4618      	mov	r0, r3
 80123a2:	370c      	adds	r7, #12
 80123a4:	46bd      	mov	sp, r7
 80123a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123aa:	4770      	bx	lr

080123ac <_ZNSt10shared_ptrIN4tama5InputEEC1INS0_10Stm32InputEvEEOS_IT_E>:
	shared_ptr(shared_ptr<_Yp>&& __r) noexcept
 80123ac:	b590      	push	{r4, r7, lr}
 80123ae:	b083      	sub	sp, #12
 80123b0:	af00      	add	r7, sp, #0
 80123b2:	6078      	str	r0, [r7, #4]
 80123b4:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 80123b6:	687c      	ldr	r4, [r7, #4]
 80123b8:	6838      	ldr	r0, [r7, #0]
 80123ba:	f7ff ffec 	bl	8012396 <_ZSt4moveIRSt10shared_ptrIN4tama10Stm32InputEEEONSt16remove_referenceIT_E4typeEOS6_>
 80123be:	4603      	mov	r3, r0
 80123c0:	4619      	mov	r1, r3
 80123c2:	4620      	mov	r0, r4
 80123c4:	f000 fa33 	bl	801282e <_ZNSt12__shared_ptrIN4tama5InputELN9__gnu_cxx12_Lock_policyE0EEC1INS0_10Stm32InputEvEEOS_IT_LS3_0EE>
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	4618      	mov	r0, r3
 80123cc:	370c      	adds	r7, #12
 80123ce:	46bd      	mov	sp, r7
 80123d0:	bd90      	pop	{r4, r7, pc}

080123d2 <_ZNSt10shared_ptrIN4tama11SoundPlayerEEC1IS1_vEEPT_>:
	shared_ptr(_Yp* __p) : __shared_ptr<_Tp>(__p) { }
 80123d2:	b580      	push	{r7, lr}
 80123d4:	b082      	sub	sp, #8
 80123d6:	af00      	add	r7, sp, #0
 80123d8:	6078      	str	r0, [r7, #4]
 80123da:	6039      	str	r1, [r7, #0]
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	6839      	ldr	r1, [r7, #0]
 80123e0:	4618      	mov	r0, r3
 80123e2:	f000 fa42 	bl	801286a <_ZNSt12__shared_ptrIN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0EEC1IS1_vEEPT_>
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	4618      	mov	r0, r3
 80123ea:	3708      	adds	r7, #8
 80123ec:	46bd      	mov	sp, r7
 80123ee:	bd80      	pop	{r7, pc}

080123f0 <_ZSt7forwardIRSt10shared_ptrIN4tama13TextureLoaderEEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80123f0:	b480      	push	{r7}
 80123f2:	b083      	sub	sp, #12
 80123f4:	af00      	add	r7, sp, #0
 80123f6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	4618      	mov	r0, r3
 80123fc:	370c      	adds	r7, #12
 80123fe:	46bd      	mov	sp, r7
 8012400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012404:	4770      	bx	lr

08012406 <_ZSt7forwardIRSt10shared_ptrIN4tama5InputEEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8012406:	b480      	push	{r7}
 8012408:	b083      	sub	sp, #12
 801240a:	af00      	add	r7, sp, #0
 801240c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	4618      	mov	r0, r3
 8012412:	370c      	adds	r7, #12
 8012414:	46bd      	mov	sp, r7
 8012416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801241a:	4770      	bx	lr

0801241c <_ZSt7forwardISt10shared_ptrIN4tama11SoundPlayerEEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801241c:	b480      	push	{r7}
 801241e:	b083      	sub	sp, #12
 8012420:	af00      	add	r7, sp, #0
 8012422:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	4618      	mov	r0, r3
 8012428:	370c      	adds	r7, #12
 801242a:	46bd      	mov	sp, r7
 801242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012430:	4770      	bx	lr

08012432 <_ZSt7forwardIRSt10shared_ptrIN4tama18TimeMonitorCreatorEEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8012432:	b480      	push	{r7}
 8012434:	b083      	sub	sp, #12
 8012436:	af00      	add	r7, sp, #0
 8012438:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	4618      	mov	r0, r3
 801243e:	370c      	adds	r7, #12
 8012440:	46bd      	mov	sp, r7
 8012442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012446:	4770      	bx	lr

08012448 <_ZSt11make_sharedIN4tama7ContextEJRSt10shared_ptrINS0_13TextureLoaderEERS2_INS0_5InputEES2_INS0_11SoundPlayerEERS2_INS0_18TimeMonitorCreatorEEEES2_IT_EDpOT0_>:
    make_shared(_Args&&... __args)
 8012448:	b5f0      	push	{r4, r5, r6, r7, lr}
 801244a:	b089      	sub	sp, #36	; 0x24
 801244c:	af02      	add	r7, sp, #8
 801244e:	60f8      	str	r0, [r7, #12]
 8012450:	60b9      	str	r1, [r7, #8]
 8012452:	607a      	str	r2, [r7, #4]
 8012454:	603b      	str	r3, [r7, #0]
				       std::forward<_Args>(__args)...);
 8012456:	f107 0314 	add.w	r3, r7, #20
 801245a:	4618      	mov	r0, r3
 801245c:	f000 fa1d 	bl	801289a <_ZNSaIN4tama7ContextEEC1Ev>
 8012460:	68b8      	ldr	r0, [r7, #8]
 8012462:	f7ff ffc5 	bl	80123f0 <_ZSt7forwardIRSt10shared_ptrIN4tama13TextureLoaderEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8012466:	4605      	mov	r5, r0
 8012468:	6878      	ldr	r0, [r7, #4]
 801246a:	f7ff ffcc 	bl	8012406 <_ZSt7forwardIRSt10shared_ptrIN4tama5InputEEEOT_RNSt16remove_referenceIS5_E4typeE>
 801246e:	4606      	mov	r6, r0
 8012470:	6838      	ldr	r0, [r7, #0]
 8012472:	f7ff ffd3 	bl	801241c <_ZSt7forwardISt10shared_ptrIN4tama11SoundPlayerEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8012476:	4604      	mov	r4, r0
 8012478:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801247a:	f7ff ffda 	bl	8012432 <_ZSt7forwardIRSt10shared_ptrIN4tama18TimeMonitorCreatorEEEOT_RNSt16remove_referenceIS5_E4typeE>
 801247e:	4603      	mov	r3, r0
 8012480:	68f8      	ldr	r0, [r7, #12]
 8012482:	f107 0114 	add.w	r1, r7, #20
 8012486:	9301      	str	r3, [sp, #4]
 8012488:	9400      	str	r4, [sp, #0]
 801248a:	4633      	mov	r3, r6
 801248c:	462a      	mov	r2, r5
 801248e:	f000 fa1c 	bl	80128ca <_ZSt15allocate_sharedIN4tama7ContextESaIS1_EJRSt10shared_ptrINS0_13TextureLoaderEERS3_INS0_5InputEES3_INS0_11SoundPlayerEERS3_INS0_18TimeMonitorCreatorEEEES3_IT_ERKT0_DpOT1_>
 8012492:	f107 0314 	add.w	r3, r7, #20
 8012496:	4618      	mov	r0, r3
 8012498:	f000 fa0b 	bl	80128b2 <_ZNSaIN4tama7ContextEED1Ev>
    }
 801249c:	68f8      	ldr	r0, [r7, #12]
 801249e:	371c      	adds	r7, #28
 80124a0:	46bd      	mov	sp, r7
 80124a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080124a4 <_ZNKSt19__shared_ptr_accessIN4tama5StageELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 80124a4:	b580      	push	{r7, lr}
 80124a6:	b082      	sub	sp, #8
 80124a8:	af00      	add	r7, sp, #0
 80124aa:	6078      	str	r0, [r7, #4]
	return _M_get();
 80124ac:	6878      	ldr	r0, [r7, #4]
 80124ae:	f000 fa32 	bl	8012916 <_ZNKSt19__shared_ptr_accessIN4tama5StageELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 80124b2:	4603      	mov	r3, r0
      }
 80124b4:	4618      	mov	r0, r3
 80124b6:	3708      	adds	r7, #8
 80124b8:	46bd      	mov	sp, r7
 80124ba:	bd80      	pop	{r7, pc}

080124bc <_ZNKSt19__shared_ptr_accessIN4tama18DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 80124bc:	b580      	push	{r7, lr}
 80124be:	b082      	sub	sp, #8
 80124c0:	af00      	add	r7, sp, #0
 80124c2:	6078      	str	r0, [r7, #4]
	return _M_get();
 80124c4:	6878      	ldr	r0, [r7, #4]
 80124c6:	f000 fa32 	bl	801292e <_ZNKSt19__shared_ptr_accessIN4tama18DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 80124ca:	4603      	mov	r3, r0
      }
 80124cc:	4618      	mov	r0, r3
 80124ce:	3708      	adds	r7, #8
 80124d0:	46bd      	mov	sp, r7
 80124d2:	bd80      	pop	{r7, pc}

080124d4 <_ZNKSt10unique_ptrIN4tama7DisplayESt14default_deleteIS1_EEptEv>:
      operator->() const noexcept
 80124d4:	b580      	push	{r7, lr}
 80124d6:	b082      	sub	sp, #8
 80124d8:	af00      	add	r7, sp, #0
 80124da:	6078      	str	r0, [r7, #4]
	return get();
 80124dc:	6878      	ldr	r0, [r7, #4]
 80124de:	f000 fa32 	bl	8012946 <_ZNKSt10unique_ptrIN4tama7DisplayESt14default_deleteIS1_EE3getEv>
 80124e2:	4603      	mov	r3, r0
      }
 80124e4:	4618      	mov	r0, r3
 80124e6:	3708      	adds	r7, #8
 80124e8:	46bd      	mov	sp, r7
 80124ea:	bd80      	pop	{r7, pc}

080124ec <_ZNSt10unique_ptrIN4tama16Nokia5510DisplayESt14default_deleteIS1_EEC1IS3_vEEPS1_>:
	unique_ptr(pointer __p) noexcept
 80124ec:	b580      	push	{r7, lr}
 80124ee:	b082      	sub	sp, #8
 80124f0:	af00      	add	r7, sp, #0
 80124f2:	6078      	str	r0, [r7, #4]
 80124f4:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	6839      	ldr	r1, [r7, #0]
 80124fa:	4618      	mov	r0, r3
 80124fc:	f000 fa30 	bl	8012960 <_ZNSt15__uniq_ptr_implIN4tama16Nokia5510DisplayESt14default_deleteIS1_EEC1EPS1_>
        { }
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	4618      	mov	r0, r3
 8012504:	3708      	adds	r7, #8
 8012506:	46bd      	mov	sp, r7
 8012508:	bd80      	pop	{r7, pc}

0801250a <_ZNSt15__uniq_ptr_implIN4tama16Nokia5510DisplayESt14default_deleteIS1_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 801250a:	b580      	push	{r7, lr}
 801250c:	b082      	sub	sp, #8
 801250e:	af00      	add	r7, sp, #0
 8012510:	6078      	str	r0, [r7, #4]
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	4618      	mov	r0, r3
 8012516:	f000 fa37 	bl	8012988 <_ZSt3getILj0EJPN4tama16Nokia5510DisplayESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 801251a:	4603      	mov	r3, r0
 801251c:	4618      	mov	r0, r3
 801251e:	3708      	adds	r7, #8
 8012520:	46bd      	mov	sp, r7
 8012522:	bd80      	pop	{r7, pc}

08012524 <_ZNSt10unique_ptrIN4tama16Nokia5510DisplayESt14default_deleteIS1_EE11get_deleterEv>:
      get_deleter() noexcept
 8012524:	b580      	push	{r7, lr}
 8012526:	b082      	sub	sp, #8
 8012528:	af00      	add	r7, sp, #0
 801252a:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	4618      	mov	r0, r3
 8012530:	f000 fa37 	bl	80129a2 <_ZNSt15__uniq_ptr_implIN4tama16Nokia5510DisplayESt14default_deleteIS1_EE10_M_deleterEv>
 8012534:	4603      	mov	r3, r0
 8012536:	4618      	mov	r0, r3
 8012538:	3708      	adds	r7, #8
 801253a:	46bd      	mov	sp, r7
 801253c:	bd80      	pop	{r7, pc}

0801253e <_ZNKSt14default_deleteIN4tama16Nokia5510DisplayEEclEPS1_>:
      operator()(_Tp* __ptr) const
 801253e:	b580      	push	{r7, lr}
 8012540:	b082      	sub	sp, #8
 8012542:	af00      	add	r7, sp, #0
 8012544:	6078      	str	r0, [r7, #4]
 8012546:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8012548:	2130      	movs	r1, #48	; 0x30
 801254a:	6838      	ldr	r0, [r7, #0]
 801254c:	f00d f9b5 	bl	801f8ba <_ZdlPvj>
      }
 8012550:	bf00      	nop
 8012552:	3708      	adds	r7, #8
 8012554:	46bd      	mov	sp, r7
 8012556:	bd80      	pop	{r7, pc}

08012558 <_ZNSt10unique_ptrIN4tama16Nokia5510DisplayESt14default_deleteIS1_EE7releaseEv>:
      release() noexcept
 8012558:	b580      	push	{r7, lr}
 801255a:	b084      	sub	sp, #16
 801255c:	af00      	add	r7, sp, #0
 801255e:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 8012560:	6878      	ldr	r0, [r7, #4]
 8012562:	f000 fa2b 	bl	80129bc <_ZNKSt10unique_ptrIN4tama16Nokia5510DisplayESt14default_deleteIS1_EE3getEv>
 8012566:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	4618      	mov	r0, r3
 801256c:	f7ff ffcd 	bl	801250a <_ZNSt15__uniq_ptr_implIN4tama16Nokia5510DisplayESt14default_deleteIS1_EE6_M_ptrEv>
 8012570:	4602      	mov	r2, r0
 8012572:	2300      	movs	r3, #0
 8012574:	6013      	str	r3, [r2, #0]
	return __p;
 8012576:	68fb      	ldr	r3, [r7, #12]
      }
 8012578:	4618      	mov	r0, r3
 801257a:	3710      	adds	r7, #16
 801257c:	46bd      	mov	sp, r7
 801257e:	bd80      	pop	{r7, pc}

08012580 <_ZSt7forwardISt14default_deleteIN4tama16Nokia5510DisplayEEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8012580:	b480      	push	{r7}
 8012582:	b083      	sub	sp, #12
 8012584:	af00      	add	r7, sp, #0
 8012586:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	4618      	mov	r0, r3
 801258c:	370c      	adds	r7, #12
 801258e:	46bd      	mov	sp, r7
 8012590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012594:	4770      	bx	lr

08012596 <_ZNSt15__uniq_ptr_implIN4tama7DisplayESt14default_deleteIS1_EEC1IS2_INS0_16Nokia5510DisplayEEEEPS1_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 8012596:	b590      	push	{r4, r7, lr}
 8012598:	b085      	sub	sp, #20
 801259a:	af00      	add	r7, sp, #0
 801259c:	60f8      	str	r0, [r7, #12]
 801259e:	60b9      	str	r1, [r7, #8]
 80125a0:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 80125a2:	68fc      	ldr	r4, [r7, #12]
 80125a4:	6878      	ldr	r0, [r7, #4]
 80125a6:	f7ff ffeb 	bl	8012580 <_ZSt7forwardISt14default_deleteIN4tama16Nokia5510DisplayEEEOT_RNSt16remove_referenceIS4_E4typeE>
 80125aa:	4602      	mov	r2, r0
 80125ac:	f107 0308 	add.w	r3, r7, #8
 80125b0:	4619      	mov	r1, r3
 80125b2:	4620      	mov	r0, r4
 80125b4:	f000 fa1a 	bl	80129ec <_ZNSt5tupleIJPN4tama7DisplayESt14default_deleteIS1_EEEC1IRS2_S3_INS0_16Nokia5510DisplayEELb1EEEOT_OT0_>
 80125b8:	68fb      	ldr	r3, [r7, #12]
 80125ba:	4618      	mov	r0, r3
 80125bc:	3714      	adds	r7, #20
 80125be:	46bd      	mov	sp, r7
 80125c0:	bd90      	pop	{r4, r7, pc}

080125c2 <_ZNSaIN4tama18Stm32TextureLoaderEEC1Ev>:
 80125c2:	b580      	push	{r7, lr}
 80125c4:	b082      	sub	sp, #8
 80125c6:	af00      	add	r7, sp, #0
 80125c8:	6078      	str	r0, [r7, #4]
 80125ca:	6878      	ldr	r0, [r7, #4]
 80125cc:	f000 fa27 	bl	8012a1e <_ZN9__gnu_cxx13new_allocatorIN4tama18Stm32TextureLoaderEEC1Ev>
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	4618      	mov	r0, r3
 80125d4:	3708      	adds	r7, #8
 80125d6:	46bd      	mov	sp, r7
 80125d8:	bd80      	pop	{r7, pc}

080125da <_ZNSaIN4tama18Stm32TextureLoaderEED1Ev>:
      ~allocator() throw() { }
 80125da:	b580      	push	{r7, lr}
 80125dc:	b082      	sub	sp, #8
 80125de:	af00      	add	r7, sp, #0
 80125e0:	6078      	str	r0, [r7, #4]
 80125e2:	6878      	ldr	r0, [r7, #4]
 80125e4:	f000 fa26 	bl	8012a34 <_ZN9__gnu_cxx13new_allocatorIN4tama18Stm32TextureLoaderEED1Ev>
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	4618      	mov	r0, r3
 80125ec:	3708      	adds	r7, #8
 80125ee:	46bd      	mov	sp, r7
 80125f0:	bd80      	pop	{r7, pc}

080125f2 <_ZSt15allocate_sharedIN4tama18Stm32TextureLoaderESaIS1_EJEESt10shared_ptrIT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 80125f2:	b580      	push	{r7, lr}
 80125f4:	b084      	sub	sp, #16
 80125f6:	af00      	add	r7, sp, #0
 80125f8:	6078      	str	r0, [r7, #4]
 80125fa:	6039      	str	r1, [r7, #0]
			     std::forward<_Args>(__args)...);
 80125fc:	683a      	ldr	r2, [r7, #0]
 80125fe:	4619      	mov	r1, r3
 8012600:	6878      	ldr	r0, [r7, #4]
 8012602:	f000 fa22 	bl	8012a4a <_ZNSt10shared_ptrIN4tama18Stm32TextureLoaderEEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>
    }
 8012606:	6878      	ldr	r0, [r7, #4]
 8012608:	3710      	adds	r7, #16
 801260a:	46bd      	mov	sp, r7
 801260c:	bd80      	pop	{r7, pc}

0801260e <_ZNSt12__shared_ptrIN4tama13TextureLoaderELN9__gnu_cxx12_Lock_policyE0EEC1INS0_18Stm32TextureLoaderEvEEOS_IT_LS3_0EE>:
	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 801260e:	b580      	push	{r7, lr}
 8012610:	b082      	sub	sp, #8
 8012612:	af00      	add	r7, sp, #0
 8012614:	6078      	str	r0, [r7, #4]
 8012616:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount()
 8012618:	683b      	ldr	r3, [r7, #0]
 801261a:	681a      	ldr	r2, [r3, #0]
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	601a      	str	r2, [r3, #0]
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	3304      	adds	r3, #4
 8012624:	4618      	mov	r0, r3
 8012626:	f7f1 fca2 	bl	8003f6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _M_refcount._M_swap(__r._M_refcount);
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	1d1a      	adds	r2, r3, #4
 801262e:	683b      	ldr	r3, [r7, #0]
 8012630:	3304      	adds	r3, #4
 8012632:	4619      	mov	r1, r3
 8012634:	4610      	mov	r0, r2
 8012636:	f7f1 fda3 	bl	8004180 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  __r._M_ptr = 0;
 801263a:	683b      	ldr	r3, [r7, #0]
 801263c:	2200      	movs	r2, #0
 801263e:	601a      	str	r2, [r3, #0]
	}
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	4618      	mov	r0, r3
 8012644:	3708      	adds	r7, #8
 8012646:	46bd      	mov	sp, r7
 8012648:	bd80      	pop	{r7, pc}

0801264a <_ZNSaIN4tama27Nokia5110DisplayDataManagerEEC1Ev>:
      allocator() throw() { }
 801264a:	b580      	push	{r7, lr}
 801264c:	b082      	sub	sp, #8
 801264e:	af00      	add	r7, sp, #0
 8012650:	6078      	str	r0, [r7, #4]
 8012652:	6878      	ldr	r0, [r7, #4]
 8012654:	f000 fa0a 	bl	8012a6c <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEEC1Ev>
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	4618      	mov	r0, r3
 801265c:	3708      	adds	r7, #8
 801265e:	46bd      	mov	sp, r7
 8012660:	bd80      	pop	{r7, pc}

08012662 <_ZNSaIN4tama27Nokia5110DisplayDataManagerEED1Ev>:
      ~allocator() throw() { }
 8012662:	b580      	push	{r7, lr}
 8012664:	b082      	sub	sp, #8
 8012666:	af00      	add	r7, sp, #0
 8012668:	6078      	str	r0, [r7, #4]
 801266a:	6878      	ldr	r0, [r7, #4]
 801266c:	f000 fa09 	bl	8012a82 <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEED1Ev>
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	4618      	mov	r0, r3
 8012674:	3708      	adds	r7, #8
 8012676:	46bd      	mov	sp, r7
 8012678:	bd80      	pop	{r7, pc}

0801267a <_ZSt15allocate_sharedIN4tama27Nokia5110DisplayDataManagerESaIS1_EJEESt10shared_ptrIT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 801267a:	b580      	push	{r7, lr}
 801267c:	b084      	sub	sp, #16
 801267e:	af00      	add	r7, sp, #0
 8012680:	6078      	str	r0, [r7, #4]
 8012682:	6039      	str	r1, [r7, #0]
			     std::forward<_Args>(__args)...);
 8012684:	683a      	ldr	r2, [r7, #0]
 8012686:	4619      	mov	r1, r3
 8012688:	6878      	ldr	r0, [r7, #4]
 801268a:	f000 fa05 	bl	8012a98 <_ZNSt10shared_ptrIN4tama27Nokia5110DisplayDataManagerEEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>
    }
 801268e:	6878      	ldr	r0, [r7, #4]
 8012690:	3710      	adds	r7, #16
 8012692:	46bd      	mov	sp, r7
 8012694:	bd80      	pop	{r7, pc}

08012696 <_ZNSt12__shared_ptrIN4tama18DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EEC1INS0_27Nokia5110DisplayDataManagerEvEEOS_IT_LS3_0EE>:
	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 8012696:	b580      	push	{r7, lr}
 8012698:	b082      	sub	sp, #8
 801269a:	af00      	add	r7, sp, #0
 801269c:	6078      	str	r0, [r7, #4]
 801269e:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount()
 80126a0:	683b      	ldr	r3, [r7, #0]
 80126a2:	681a      	ldr	r2, [r3, #0]
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	601a      	str	r2, [r3, #0]
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	3304      	adds	r3, #4
 80126ac:	4618      	mov	r0, r3
 80126ae:	f7f1 fc5e 	bl	8003f6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _M_refcount._M_swap(__r._M_refcount);
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	1d1a      	adds	r2, r3, #4
 80126b6:	683b      	ldr	r3, [r7, #0]
 80126b8:	3304      	adds	r3, #4
 80126ba:	4619      	mov	r1, r3
 80126bc:	4610      	mov	r0, r2
 80126be:	f7f1 fd5f 	bl	8004180 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  __r._M_ptr = 0;
 80126c2:	683b      	ldr	r3, [r7, #0]
 80126c4:	2200      	movs	r2, #0
 80126c6:	601a      	str	r2, [r3, #0]
	}
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	4618      	mov	r0, r3
 80126cc:	3708      	adds	r7, #8
 80126ce:	46bd      	mov	sp, r7
 80126d0:	bd80      	pop	{r7, pc}

080126d2 <_ZNSaIN4tama23Stm32TimeMonitorCreatorEEC1Ev>:
      allocator() throw() { }
 80126d2:	b580      	push	{r7, lr}
 80126d4:	b082      	sub	sp, #8
 80126d6:	af00      	add	r7, sp, #0
 80126d8:	6078      	str	r0, [r7, #4]
 80126da:	6878      	ldr	r0, [r7, #4]
 80126dc:	f000 f9ed 	bl	8012aba <_ZN9__gnu_cxx13new_allocatorIN4tama23Stm32TimeMonitorCreatorEEC1Ev>
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	4618      	mov	r0, r3
 80126e4:	3708      	adds	r7, #8
 80126e6:	46bd      	mov	sp, r7
 80126e8:	bd80      	pop	{r7, pc}

080126ea <_ZNSaIN4tama23Stm32TimeMonitorCreatorEED1Ev>:
      ~allocator() throw() { }
 80126ea:	b580      	push	{r7, lr}
 80126ec:	b082      	sub	sp, #8
 80126ee:	af00      	add	r7, sp, #0
 80126f0:	6078      	str	r0, [r7, #4]
 80126f2:	6878      	ldr	r0, [r7, #4]
 80126f4:	f000 f9ec 	bl	8012ad0 <_ZN9__gnu_cxx13new_allocatorIN4tama23Stm32TimeMonitorCreatorEED1Ev>
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	4618      	mov	r0, r3
 80126fc:	3708      	adds	r7, #8
 80126fe:	46bd      	mov	sp, r7
 8012700:	bd80      	pop	{r7, pc}

08012702 <_ZSt15allocate_sharedIN4tama23Stm32TimeMonitorCreatorESaIS1_EJEESt10shared_ptrIT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 8012702:	b580      	push	{r7, lr}
 8012704:	b084      	sub	sp, #16
 8012706:	af00      	add	r7, sp, #0
 8012708:	6078      	str	r0, [r7, #4]
 801270a:	6039      	str	r1, [r7, #0]
			     std::forward<_Args>(__args)...);
 801270c:	683a      	ldr	r2, [r7, #0]
 801270e:	4619      	mov	r1, r3
 8012710:	6878      	ldr	r0, [r7, #4]
 8012712:	f000 f9e8 	bl	8012ae6 <_ZNSt10shared_ptrIN4tama23Stm32TimeMonitorCreatorEEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>
    }
 8012716:	6878      	ldr	r0, [r7, #4]
 8012718:	3710      	adds	r7, #16
 801271a:	46bd      	mov	sp, r7
 801271c:	bd80      	pop	{r7, pc}

0801271e <_ZNSt12__shared_ptrIN4tama18TimeMonitorCreatorELN9__gnu_cxx12_Lock_policyE0EEC1INS0_23Stm32TimeMonitorCreatorEvEEOS_IT_LS3_0EE>:
	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 801271e:	b580      	push	{r7, lr}
 8012720:	b082      	sub	sp, #8
 8012722:	af00      	add	r7, sp, #0
 8012724:	6078      	str	r0, [r7, #4]
 8012726:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount()
 8012728:	683b      	ldr	r3, [r7, #0]
 801272a:	681a      	ldr	r2, [r3, #0]
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	601a      	str	r2, [r3, #0]
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	3304      	adds	r3, #4
 8012734:	4618      	mov	r0, r3
 8012736:	f7f1 fc1a 	bl	8003f6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _M_refcount._M_swap(__r._M_refcount);
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	1d1a      	adds	r2, r3, #4
 801273e:	683b      	ldr	r3, [r7, #0]
 8012740:	3304      	adds	r3, #4
 8012742:	4619      	mov	r1, r3
 8012744:	4610      	mov	r0, r2
 8012746:	f7f1 fd1b 	bl	8004180 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  __r._M_ptr = 0;
 801274a:	683b      	ldr	r3, [r7, #0]
 801274c:	2200      	movs	r2, #0
 801274e:	601a      	str	r2, [r3, #0]
	}
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	4618      	mov	r0, r3
 8012754:	3708      	adds	r7, #8
 8012756:	46bd      	mov	sp, r7
 8012758:	bd80      	pop	{r7, pc}

0801275a <_ZNSaIN4tama25Stm32SoundPlayingStrategyEEC1Ev>:
      allocator() throw() { }
 801275a:	b580      	push	{r7, lr}
 801275c:	b082      	sub	sp, #8
 801275e:	af00      	add	r7, sp, #0
 8012760:	6078      	str	r0, [r7, #4]
 8012762:	6878      	ldr	r0, [r7, #4]
 8012764:	f000 f9d0 	bl	8012b08 <_ZN9__gnu_cxx13new_allocatorIN4tama25Stm32SoundPlayingStrategyEEC1Ev>
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	4618      	mov	r0, r3
 801276c:	3708      	adds	r7, #8
 801276e:	46bd      	mov	sp, r7
 8012770:	bd80      	pop	{r7, pc}

08012772 <_ZNSaIN4tama25Stm32SoundPlayingStrategyEED1Ev>:
      ~allocator() throw() { }
 8012772:	b580      	push	{r7, lr}
 8012774:	b082      	sub	sp, #8
 8012776:	af00      	add	r7, sp, #0
 8012778:	6078      	str	r0, [r7, #4]
 801277a:	6878      	ldr	r0, [r7, #4]
 801277c:	f000 f9cf 	bl	8012b1e <_ZN9__gnu_cxx13new_allocatorIN4tama25Stm32SoundPlayingStrategyEED1Ev>
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	4618      	mov	r0, r3
 8012784:	3708      	adds	r7, #8
 8012786:	46bd      	mov	sp, r7
 8012788:	bd80      	pop	{r7, pc}

0801278a <_ZSt15allocate_sharedIN4tama25Stm32SoundPlayingStrategyESaIS1_EJEESt10shared_ptrIT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 801278a:	b580      	push	{r7, lr}
 801278c:	b084      	sub	sp, #16
 801278e:	af00      	add	r7, sp, #0
 8012790:	6078      	str	r0, [r7, #4]
 8012792:	6039      	str	r1, [r7, #0]
			     std::forward<_Args>(__args)...);
 8012794:	683a      	ldr	r2, [r7, #0]
 8012796:	4619      	mov	r1, r3
 8012798:	6878      	ldr	r0, [r7, #4]
 801279a:	f000 f9cb 	bl	8012b34 <_ZNSt10shared_ptrIN4tama25Stm32SoundPlayingStrategyEEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>
    }
 801279e:	6878      	ldr	r0, [r7, #4]
 80127a0:	3710      	adds	r7, #16
 80127a2:	46bd      	mov	sp, r7
 80127a4:	bd80      	pop	{r7, pc}

080127a6 <_ZNSt12__shared_ptrIN4tama20SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EEC1INS0_25Stm32SoundPlayingStrategyEvEEOS_IT_LS3_0EE>:
	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 80127a6:	b580      	push	{r7, lr}
 80127a8:	b082      	sub	sp, #8
 80127aa:	af00      	add	r7, sp, #0
 80127ac:	6078      	str	r0, [r7, #4]
 80127ae:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount()
 80127b0:	683b      	ldr	r3, [r7, #0]
 80127b2:	681a      	ldr	r2, [r3, #0]
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	601a      	str	r2, [r3, #0]
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	3304      	adds	r3, #4
 80127bc:	4618      	mov	r0, r3
 80127be:	f7f1 fbd6 	bl	8003f6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _M_refcount._M_swap(__r._M_refcount);
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	1d1a      	adds	r2, r3, #4
 80127c6:	683b      	ldr	r3, [r7, #0]
 80127c8:	3304      	adds	r3, #4
 80127ca:	4619      	mov	r1, r3
 80127cc:	4610      	mov	r0, r2
 80127ce:	f7f1 fcd7 	bl	8004180 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  __r._M_ptr = 0;
 80127d2:	683b      	ldr	r3, [r7, #0]
 80127d4:	2200      	movs	r2, #0
 80127d6:	601a      	str	r2, [r3, #0]
	}
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	4618      	mov	r0, r3
 80127dc:	3708      	adds	r7, #8
 80127de:	46bd      	mov	sp, r7
 80127e0:	bd80      	pop	{r7, pc}

080127e2 <_ZNSaIN4tama10Stm32InputEEC1Ev>:
      allocator() throw() { }
 80127e2:	b580      	push	{r7, lr}
 80127e4:	b082      	sub	sp, #8
 80127e6:	af00      	add	r7, sp, #0
 80127e8:	6078      	str	r0, [r7, #4]
 80127ea:	6878      	ldr	r0, [r7, #4]
 80127ec:	f000 f9b3 	bl	8012b56 <_ZN9__gnu_cxx13new_allocatorIN4tama10Stm32InputEEC1Ev>
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	4618      	mov	r0, r3
 80127f4:	3708      	adds	r7, #8
 80127f6:	46bd      	mov	sp, r7
 80127f8:	bd80      	pop	{r7, pc}

080127fa <_ZNSaIN4tama10Stm32InputEED1Ev>:
      ~allocator() throw() { }
 80127fa:	b580      	push	{r7, lr}
 80127fc:	b082      	sub	sp, #8
 80127fe:	af00      	add	r7, sp, #0
 8012800:	6078      	str	r0, [r7, #4]
 8012802:	6878      	ldr	r0, [r7, #4]
 8012804:	f000 f9b2 	bl	8012b6c <_ZN9__gnu_cxx13new_allocatorIN4tama10Stm32InputEED1Ev>
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	4618      	mov	r0, r3
 801280c:	3708      	adds	r7, #8
 801280e:	46bd      	mov	sp, r7
 8012810:	bd80      	pop	{r7, pc}

08012812 <_ZSt15allocate_sharedIN4tama10Stm32InputESaIS1_EJEESt10shared_ptrIT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 8012812:	b580      	push	{r7, lr}
 8012814:	b084      	sub	sp, #16
 8012816:	af00      	add	r7, sp, #0
 8012818:	6078      	str	r0, [r7, #4]
 801281a:	6039      	str	r1, [r7, #0]
			     std::forward<_Args>(__args)...);
 801281c:	683a      	ldr	r2, [r7, #0]
 801281e:	4619      	mov	r1, r3
 8012820:	6878      	ldr	r0, [r7, #4]
 8012822:	f000 f9ae 	bl	8012b82 <_ZNSt10shared_ptrIN4tama10Stm32InputEEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>
    }
 8012826:	6878      	ldr	r0, [r7, #4]
 8012828:	3710      	adds	r7, #16
 801282a:	46bd      	mov	sp, r7
 801282c:	bd80      	pop	{r7, pc}

0801282e <_ZNSt12__shared_ptrIN4tama5InputELN9__gnu_cxx12_Lock_policyE0EEC1INS0_10Stm32InputEvEEOS_IT_LS3_0EE>:
	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 801282e:	b580      	push	{r7, lr}
 8012830:	b082      	sub	sp, #8
 8012832:	af00      	add	r7, sp, #0
 8012834:	6078      	str	r0, [r7, #4]
 8012836:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount()
 8012838:	683b      	ldr	r3, [r7, #0]
 801283a:	681a      	ldr	r2, [r3, #0]
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	601a      	str	r2, [r3, #0]
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	3304      	adds	r3, #4
 8012844:	4618      	mov	r0, r3
 8012846:	f7f1 fb92 	bl	8003f6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _M_refcount._M_swap(__r._M_refcount);
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	1d1a      	adds	r2, r3, #4
 801284e:	683b      	ldr	r3, [r7, #0]
 8012850:	3304      	adds	r3, #4
 8012852:	4619      	mov	r1, r3
 8012854:	4610      	mov	r0, r2
 8012856:	f7f1 fc93 	bl	8004180 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  __r._M_ptr = 0;
 801285a:	683b      	ldr	r3, [r7, #0]
 801285c:	2200      	movs	r2, #0
 801285e:	601a      	str	r2, [r3, #0]
	}
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	4618      	mov	r0, r3
 8012864:	3708      	adds	r7, #8
 8012866:	46bd      	mov	sp, r7
 8012868:	bd80      	pop	{r7, pc}

0801286a <_ZNSt12__shared_ptrIN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0EEC1IS1_vEEPT_>:
	__shared_ptr(_Yp* __p)
 801286a:	b590      	push	{r4, r7, lr}
 801286c:	b085      	sub	sp, #20
 801286e:	af00      	add	r7, sp, #0
 8012870:	6078      	str	r0, [r7, #4]
 8012872:	6039      	str	r1, [r7, #0]
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	683a      	ldr	r2, [r7, #0]
 8012878:	601a      	str	r2, [r3, #0]
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	3304      	adds	r3, #4
 801287e:	4622      	mov	r2, r4
 8012880:	6839      	ldr	r1, [r7, #0]
 8012882:	4618      	mov	r0, r3
 8012884:	f000 f98e 	bl	8012ba4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama11SoundPlayerEEET_St17integral_constantIbLb0EE>
	  _M_enable_shared_from_this_with(__p);
 8012888:	6839      	ldr	r1, [r7, #0]
 801288a:	6878      	ldr	r0, [r7, #4]
 801288c:	f000 f999 	bl	8012bc2 <_ZNSt12__shared_ptrIN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	}
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	4618      	mov	r0, r3
 8012894:	3714      	adds	r7, #20
 8012896:	46bd      	mov	sp, r7
 8012898:	bd90      	pop	{r4, r7, pc}

0801289a <_ZNSaIN4tama7ContextEEC1Ev>:
      allocator() throw() { }
 801289a:	b580      	push	{r7, lr}
 801289c:	b082      	sub	sp, #8
 801289e:	af00      	add	r7, sp, #0
 80128a0:	6078      	str	r0, [r7, #4]
 80128a2:	6878      	ldr	r0, [r7, #4]
 80128a4:	f000 f998 	bl	8012bd8 <_ZN9__gnu_cxx13new_allocatorIN4tama7ContextEEC1Ev>
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	4618      	mov	r0, r3
 80128ac:	3708      	adds	r7, #8
 80128ae:	46bd      	mov	sp, r7
 80128b0:	bd80      	pop	{r7, pc}

080128b2 <_ZNSaIN4tama7ContextEED1Ev>:
      ~allocator() throw() { }
 80128b2:	b580      	push	{r7, lr}
 80128b4:	b082      	sub	sp, #8
 80128b6:	af00      	add	r7, sp, #0
 80128b8:	6078      	str	r0, [r7, #4]
 80128ba:	6878      	ldr	r0, [r7, #4]
 80128bc:	f000 f997 	bl	8012bee <_ZN9__gnu_cxx13new_allocatorIN4tama7ContextEED1Ev>
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	4618      	mov	r0, r3
 80128c4:	3708      	adds	r7, #8
 80128c6:	46bd      	mov	sp, r7
 80128c8:	bd80      	pop	{r7, pc}

080128ca <_ZSt15allocate_sharedIN4tama7ContextESaIS1_EJRSt10shared_ptrINS0_13TextureLoaderEERS3_INS0_5InputEES3_INS0_11SoundPlayerEERS3_INS0_18TimeMonitorCreatorEEEES3_IT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 80128ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128ce:	b08a      	sub	sp, #40	; 0x28
 80128d0:	af04      	add	r7, sp, #16
 80128d2:	60f8      	str	r0, [r7, #12]
 80128d4:	60b9      	str	r1, [r7, #8]
 80128d6:	607a      	str	r2, [r7, #4]
 80128d8:	603b      	str	r3, [r7, #0]
			     std::forward<_Args>(__args)...);
 80128da:	6878      	ldr	r0, [r7, #4]
 80128dc:	f7ff fd88 	bl	80123f0 <_ZSt7forwardIRSt10shared_ptrIN4tama13TextureLoaderEEEOT_RNSt16remove_referenceIS5_E4typeE>
 80128e0:	4606      	mov	r6, r0
 80128e2:	6838      	ldr	r0, [r7, #0]
 80128e4:	f7ff fd8f 	bl	8012406 <_ZSt7forwardIRSt10shared_ptrIN4tama5InputEEEOT_RNSt16remove_referenceIS5_E4typeE>
 80128e8:	4604      	mov	r4, r0
 80128ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80128ec:	f7ff fd96 	bl	801241c <_ZSt7forwardISt10shared_ptrIN4tama11SoundPlayerEEEOT_RNSt16remove_referenceIS4_E4typeE>
 80128f0:	4605      	mov	r5, r0
 80128f2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80128f4:	f7ff fd9d 	bl	8012432 <_ZSt7forwardIRSt10shared_ptrIN4tama18TimeMonitorCreatorEEEOT_RNSt16remove_referenceIS5_E4typeE>
 80128f8:	4603      	mov	r3, r0
 80128fa:	9302      	str	r3, [sp, #8]
 80128fc:	9501      	str	r5, [sp, #4]
 80128fe:	9400      	str	r4, [sp, #0]
 8012900:	4633      	mov	r3, r6
 8012902:	68ba      	ldr	r2, [r7, #8]
 8012904:	4641      	mov	r1, r8
 8012906:	68f8      	ldr	r0, [r7, #12]
 8012908:	f000 f97c 	bl	8012c04 <_ZNSt10shared_ptrIN4tama7ContextEEC1ISaIS1_EJRS_INS0_13TextureLoaderEERS_INS0_5InputEES_INS0_11SoundPlayerEERS_INS0_18TimeMonitorCreatorEEEEESt19_Sp_make_shared_tagRKT_DpOT0_>
    }
 801290c:	68f8      	ldr	r0, [r7, #12]
 801290e:	3718      	adds	r7, #24
 8012910:	46bd      	mov	sp, r7
 8012912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012916 <_ZNKSt19__shared_ptr_accessIN4tama5StageELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 8012916:	b580      	push	{r7, lr}
 8012918:	b082      	sub	sp, #8
 801291a:	af00      	add	r7, sp, #0
 801291c:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 801291e:	6878      	ldr	r0, [r7, #4]
 8012920:	f7f0 fbd4 	bl	80030cc <_ZNKSt12__shared_ptrIN4tama5StageELN9__gnu_cxx12_Lock_policyE0EE3getEv>
 8012924:	4603      	mov	r3, r0
 8012926:	4618      	mov	r0, r3
 8012928:	3708      	adds	r7, #8
 801292a:	46bd      	mov	sp, r7
 801292c:	bd80      	pop	{r7, pc}

0801292e <_ZNKSt19__shared_ptr_accessIN4tama18DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 801292e:	b580      	push	{r7, lr}
 8012930:	b082      	sub	sp, #8
 8012932:	af00      	add	r7, sp, #0
 8012934:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 8012936:	6878      	ldr	r0, [r7, #4]
 8012938:	f000 f98c 	bl	8012c54 <_ZNKSt12__shared_ptrIN4tama18DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE3getEv>
 801293c:	4603      	mov	r3, r0
 801293e:	4618      	mov	r0, r3
 8012940:	3708      	adds	r7, #8
 8012942:	46bd      	mov	sp, r7
 8012944:	bd80      	pop	{r7, pc}

08012946 <_ZNKSt10unique_ptrIN4tama7DisplayESt14default_deleteIS1_EE3getEv>:
      get() const noexcept
 8012946:	b580      	push	{r7, lr}
 8012948:	b082      	sub	sp, #8
 801294a:	af00      	add	r7, sp, #0
 801294c:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	4618      	mov	r0, r3
 8012952:	f000 f98b 	bl	8012c6c <_ZNKSt15__uniq_ptr_implIN4tama7DisplayESt14default_deleteIS1_EE6_M_ptrEv>
 8012956:	4603      	mov	r3, r0
 8012958:	4618      	mov	r0, r3
 801295a:	3708      	adds	r7, #8
 801295c:	46bd      	mov	sp, r7
 801295e:	bd80      	pop	{r7, pc}

08012960 <_ZNSt15__uniq_ptr_implIN4tama16Nokia5510DisplayESt14default_deleteIS1_EEC1EPS1_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8012960:	b580      	push	{r7, lr}
 8012962:	b082      	sub	sp, #8
 8012964:	af00      	add	r7, sp, #0
 8012966:	6078      	str	r0, [r7, #4]
 8012968:	6039      	str	r1, [r7, #0]
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	4618      	mov	r0, r3
 801296e:	f000 f98b 	bl	8012c88 <_ZNSt5tupleIJPN4tama16Nokia5510DisplayESt14default_deleteIS1_EEEC1IS2_S4_Lb1EEEv>
 8012972:	6878      	ldr	r0, [r7, #4]
 8012974:	f7ff fdc9 	bl	801250a <_ZNSt15__uniq_ptr_implIN4tama16Nokia5510DisplayESt14default_deleteIS1_EE6_M_ptrEv>
 8012978:	4602      	mov	r2, r0
 801297a:	683b      	ldr	r3, [r7, #0]
 801297c:	6013      	str	r3, [r2, #0]
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	4618      	mov	r0, r3
 8012982:	3708      	adds	r7, #8
 8012984:	46bd      	mov	sp, r7
 8012986:	bd80      	pop	{r7, pc}

08012988 <_ZSt3getILj0EJPN4tama16Nokia5510DisplayESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 8012988:	b580      	push	{r7, lr}
 801298a:	b082      	sub	sp, #8
 801298c:	af00      	add	r7, sp, #0
 801298e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	4618      	mov	r0, r3
 8012994:	f000 f985 	bl	8012ca2 <_ZSt12__get_helperILj0EPN4tama16Nokia5510DisplayEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>
 8012998:	4603      	mov	r3, r0
 801299a:	4618      	mov	r0, r3
 801299c:	3708      	adds	r7, #8
 801299e:	46bd      	mov	sp, r7
 80129a0:	bd80      	pop	{r7, pc}

080129a2 <_ZNSt15__uniq_ptr_implIN4tama16Nokia5510DisplayESt14default_deleteIS1_EE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 80129a2:	b580      	push	{r7, lr}
 80129a4:	b082      	sub	sp, #8
 80129a6:	af00      	add	r7, sp, #0
 80129a8:	6078      	str	r0, [r7, #4]
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	4618      	mov	r0, r3
 80129ae:	f000 f984 	bl	8012cba <_ZSt3getILj1EJPN4tama16Nokia5510DisplayESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 80129b2:	4603      	mov	r3, r0
 80129b4:	4618      	mov	r0, r3
 80129b6:	3708      	adds	r7, #8
 80129b8:	46bd      	mov	sp, r7
 80129ba:	bd80      	pop	{r7, pc}

080129bc <_ZNKSt10unique_ptrIN4tama16Nokia5510DisplayESt14default_deleteIS1_EE3getEv>:
      get() const noexcept
 80129bc:	b580      	push	{r7, lr}
 80129be:	b082      	sub	sp, #8
 80129c0:	af00      	add	r7, sp, #0
 80129c2:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	4618      	mov	r0, r3
 80129c8:	f000 f983 	bl	8012cd2 <_ZNKSt15__uniq_ptr_implIN4tama16Nokia5510DisplayESt14default_deleteIS1_EE6_M_ptrEv>
 80129cc:	4603      	mov	r3, r0
 80129ce:	4618      	mov	r0, r3
 80129d0:	3708      	adds	r7, #8
 80129d2:	46bd      	mov	sp, r7
 80129d4:	bd80      	pop	{r7, pc}

080129d6 <_ZSt7forwardIRPN4tama7DisplayEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80129d6:	b480      	push	{r7}
 80129d8:	b083      	sub	sp, #12
 80129da:	af00      	add	r7, sp, #0
 80129dc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	4618      	mov	r0, r3
 80129e2:	370c      	adds	r7, #12
 80129e4:	46bd      	mov	sp, r7
 80129e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129ea:	4770      	bx	lr

080129ec <_ZNSt5tupleIJPN4tama7DisplayESt14default_deleteIS1_EEEC1IRS2_S3_INS0_16Nokia5510DisplayEELb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 80129ec:	b5b0      	push	{r4, r5, r7, lr}
 80129ee:	b084      	sub	sp, #16
 80129f0:	af00      	add	r7, sp, #0
 80129f2:	60f8      	str	r0, [r7, #12]
 80129f4:	60b9      	str	r1, [r7, #8]
 80129f6:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 80129f8:	68fc      	ldr	r4, [r7, #12]
 80129fa:	68b8      	ldr	r0, [r7, #8]
 80129fc:	f7ff ffeb 	bl	80129d6 <_ZSt7forwardIRPN4tama7DisplayEEOT_RNSt16remove_referenceIS4_E4typeE>
 8012a00:	4605      	mov	r5, r0
 8012a02:	6878      	ldr	r0, [r7, #4]
 8012a04:	f7ff fdbc 	bl	8012580 <_ZSt7forwardISt14default_deleteIN4tama16Nokia5510DisplayEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8012a08:	4603      	mov	r3, r0
 8012a0a:	461a      	mov	r2, r3
 8012a0c:	4629      	mov	r1, r5
 8012a0e:	4620      	mov	r0, r4
 8012a10:	f000 f96d 	bl	8012cee <_ZNSt11_Tuple_implILj0EJPN4tama7DisplayESt14default_deleteIS1_EEEC1IRS2_JS3_INS0_16Nokia5510DisplayEEEvEEOT_DpOT0_>
 8012a14:	68fb      	ldr	r3, [r7, #12]
 8012a16:	4618      	mov	r0, r3
 8012a18:	3710      	adds	r7, #16
 8012a1a:	46bd      	mov	sp, r7
 8012a1c:	bdb0      	pop	{r4, r5, r7, pc}

08012a1e <_ZN9__gnu_cxx13new_allocatorIN4tama18Stm32TextureLoaderEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8012a1e:	b480      	push	{r7}
 8012a20:	b083      	sub	sp, #12
 8012a22:	af00      	add	r7, sp, #0
 8012a24:	6078      	str	r0, [r7, #4]
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	4618      	mov	r0, r3
 8012a2a:	370c      	adds	r7, #12
 8012a2c:	46bd      	mov	sp, r7
 8012a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a32:	4770      	bx	lr

08012a34 <_ZN9__gnu_cxx13new_allocatorIN4tama18Stm32TextureLoaderEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8012a34:	b480      	push	{r7}
 8012a36:	b083      	sub	sp, #12
 8012a38:	af00      	add	r7, sp, #0
 8012a3a:	6078      	str	r0, [r7, #4]
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	4618      	mov	r0, r3
 8012a40:	370c      	adds	r7, #12
 8012a42:	46bd      	mov	sp, r7
 8012a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a48:	4770      	bx	lr

08012a4a <_ZNSt10shared_ptrIN4tama18Stm32TextureLoaderEEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8012a4a:	b590      	push	{r4, r7, lr}
 8012a4c:	b085      	sub	sp, #20
 8012a4e:	af00      	add	r7, sp, #0
 8012a50:	60f8      	str	r0, [r7, #12]
 8012a52:	7239      	strb	r1, [r7, #8]
 8012a54:	607a      	str	r2, [r7, #4]
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
 8012a56:	68fb      	ldr	r3, [r7, #12]
 8012a58:	687a      	ldr	r2, [r7, #4]
 8012a5a:	4621      	mov	r1, r4
 8012a5c:	4618      	mov	r0, r3
 8012a5e:	f000 f97f 	bl	8012d60 <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>
	{ }
 8012a62:	68fb      	ldr	r3, [r7, #12]
 8012a64:	4618      	mov	r0, r3
 8012a66:	3714      	adds	r7, #20
 8012a68:	46bd      	mov	sp, r7
 8012a6a:	bd90      	pop	{r4, r7, pc}

08012a6c <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8012a6c:	b480      	push	{r7}
 8012a6e:	b083      	sub	sp, #12
 8012a70:	af00      	add	r7, sp, #0
 8012a72:	6078      	str	r0, [r7, #4]
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	4618      	mov	r0, r3
 8012a78:	370c      	adds	r7, #12
 8012a7a:	46bd      	mov	sp, r7
 8012a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a80:	4770      	bx	lr

08012a82 <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8012a82:	b480      	push	{r7}
 8012a84:	b083      	sub	sp, #12
 8012a86:	af00      	add	r7, sp, #0
 8012a88:	6078      	str	r0, [r7, #4]
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	4618      	mov	r0, r3
 8012a8e:	370c      	adds	r7, #12
 8012a90:	46bd      	mov	sp, r7
 8012a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a96:	4770      	bx	lr

08012a98 <_ZNSt10shared_ptrIN4tama27Nokia5110DisplayDataManagerEEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8012a98:	b590      	push	{r4, r7, lr}
 8012a9a:	b085      	sub	sp, #20
 8012a9c:	af00      	add	r7, sp, #0
 8012a9e:	60f8      	str	r0, [r7, #12]
 8012aa0:	7239      	strb	r1, [r7, #8]
 8012aa2:	607a      	str	r2, [r7, #4]
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
 8012aa4:	68fb      	ldr	r3, [r7, #12]
 8012aa6:	687a      	ldr	r2, [r7, #4]
 8012aa8:	4621      	mov	r1, r4
 8012aaa:	4618      	mov	r0, r3
 8012aac:	f000 f9eb 	bl	8012e86 <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>
	{ }
 8012ab0:	68fb      	ldr	r3, [r7, #12]
 8012ab2:	4618      	mov	r0, r3
 8012ab4:	3714      	adds	r7, #20
 8012ab6:	46bd      	mov	sp, r7
 8012ab8:	bd90      	pop	{r4, r7, pc}

08012aba <_ZN9__gnu_cxx13new_allocatorIN4tama23Stm32TimeMonitorCreatorEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8012aba:	b480      	push	{r7}
 8012abc:	b083      	sub	sp, #12
 8012abe:	af00      	add	r7, sp, #0
 8012ac0:	6078      	str	r0, [r7, #4]
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	4618      	mov	r0, r3
 8012ac6:	370c      	adds	r7, #12
 8012ac8:	46bd      	mov	sp, r7
 8012aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ace:	4770      	bx	lr

08012ad0 <_ZN9__gnu_cxx13new_allocatorIN4tama23Stm32TimeMonitorCreatorEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8012ad0:	b480      	push	{r7}
 8012ad2:	b083      	sub	sp, #12
 8012ad4:	af00      	add	r7, sp, #0
 8012ad6:	6078      	str	r0, [r7, #4]
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	4618      	mov	r0, r3
 8012adc:	370c      	adds	r7, #12
 8012ade:	46bd      	mov	sp, r7
 8012ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ae4:	4770      	bx	lr

08012ae6 <_ZNSt10shared_ptrIN4tama23Stm32TimeMonitorCreatorEEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8012ae6:	b590      	push	{r4, r7, lr}
 8012ae8:	b085      	sub	sp, #20
 8012aea:	af00      	add	r7, sp, #0
 8012aec:	60f8      	str	r0, [r7, #12]
 8012aee:	7239      	strb	r1, [r7, #8]
 8012af0:	607a      	str	r2, [r7, #4]
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
 8012af2:	68fb      	ldr	r3, [r7, #12]
 8012af4:	687a      	ldr	r2, [r7, #4]
 8012af6:	4621      	mov	r1, r4
 8012af8:	4618      	mov	r0, r3
 8012afa:	f000 fa57 	bl	8012fac <_ZNSt12__shared_ptrIN4tama23Stm32TimeMonitorCreatorELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>
	{ }
 8012afe:	68fb      	ldr	r3, [r7, #12]
 8012b00:	4618      	mov	r0, r3
 8012b02:	3714      	adds	r7, #20
 8012b04:	46bd      	mov	sp, r7
 8012b06:	bd90      	pop	{r4, r7, pc}

08012b08 <_ZN9__gnu_cxx13new_allocatorIN4tama25Stm32SoundPlayingStrategyEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8012b08:	b480      	push	{r7}
 8012b0a:	b083      	sub	sp, #12
 8012b0c:	af00      	add	r7, sp, #0
 8012b0e:	6078      	str	r0, [r7, #4]
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	4618      	mov	r0, r3
 8012b14:	370c      	adds	r7, #12
 8012b16:	46bd      	mov	sp, r7
 8012b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b1c:	4770      	bx	lr

08012b1e <_ZN9__gnu_cxx13new_allocatorIN4tama25Stm32SoundPlayingStrategyEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8012b1e:	b480      	push	{r7}
 8012b20:	b083      	sub	sp, #12
 8012b22:	af00      	add	r7, sp, #0
 8012b24:	6078      	str	r0, [r7, #4]
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	4618      	mov	r0, r3
 8012b2a:	370c      	adds	r7, #12
 8012b2c:	46bd      	mov	sp, r7
 8012b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b32:	4770      	bx	lr

08012b34 <_ZNSt10shared_ptrIN4tama25Stm32SoundPlayingStrategyEEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8012b34:	b590      	push	{r4, r7, lr}
 8012b36:	b085      	sub	sp, #20
 8012b38:	af00      	add	r7, sp, #0
 8012b3a:	60f8      	str	r0, [r7, #12]
 8012b3c:	7239      	strb	r1, [r7, #8]
 8012b3e:	607a      	str	r2, [r7, #4]
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
 8012b40:	68fb      	ldr	r3, [r7, #12]
 8012b42:	687a      	ldr	r2, [r7, #4]
 8012b44:	4621      	mov	r1, r4
 8012b46:	4618      	mov	r0, r3
 8012b48:	f000 fac3 	bl	80130d2 <_ZNSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>
	{ }
 8012b4c:	68fb      	ldr	r3, [r7, #12]
 8012b4e:	4618      	mov	r0, r3
 8012b50:	3714      	adds	r7, #20
 8012b52:	46bd      	mov	sp, r7
 8012b54:	bd90      	pop	{r4, r7, pc}

08012b56 <_ZN9__gnu_cxx13new_allocatorIN4tama10Stm32InputEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8012b56:	b480      	push	{r7}
 8012b58:	b083      	sub	sp, #12
 8012b5a:	af00      	add	r7, sp, #0
 8012b5c:	6078      	str	r0, [r7, #4]
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	4618      	mov	r0, r3
 8012b62:	370c      	adds	r7, #12
 8012b64:	46bd      	mov	sp, r7
 8012b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b6a:	4770      	bx	lr

08012b6c <_ZN9__gnu_cxx13new_allocatorIN4tama10Stm32InputEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8012b6c:	b480      	push	{r7}
 8012b6e:	b083      	sub	sp, #12
 8012b70:	af00      	add	r7, sp, #0
 8012b72:	6078      	str	r0, [r7, #4]
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	4618      	mov	r0, r3
 8012b78:	370c      	adds	r7, #12
 8012b7a:	46bd      	mov	sp, r7
 8012b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b80:	4770      	bx	lr

08012b82 <_ZNSt10shared_ptrIN4tama10Stm32InputEEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8012b82:	b590      	push	{r4, r7, lr}
 8012b84:	b085      	sub	sp, #20
 8012b86:	af00      	add	r7, sp, #0
 8012b88:	60f8      	str	r0, [r7, #12]
 8012b8a:	7239      	strb	r1, [r7, #8]
 8012b8c:	607a      	str	r2, [r7, #4]
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
 8012b8e:	68fb      	ldr	r3, [r7, #12]
 8012b90:	687a      	ldr	r2, [r7, #4]
 8012b92:	4621      	mov	r1, r4
 8012b94:	4618      	mov	r0, r3
 8012b96:	f000 fb2f 	bl	80131f8 <_ZNSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>
	{ }
 8012b9a:	68fb      	ldr	r3, [r7, #12]
 8012b9c:	4618      	mov	r0, r3
 8012b9e:	3714      	adds	r7, #20
 8012ba0:	46bd      	mov	sp, r7
 8012ba2:	bd90      	pop	{r4, r7, pc}

08012ba4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama11SoundPlayerEEET_St17integral_constantIbLb0EE>:
	__shared_count(_Ptr __p, /* is_array = */ false_type)
 8012ba4:	b580      	push	{r7, lr}
 8012ba6:	b084      	sub	sp, #16
 8012ba8:	af00      	add	r7, sp, #0
 8012baa:	60f8      	str	r0, [r7, #12]
 8012bac:	60b9      	str	r1, [r7, #8]
 8012bae:	713a      	strb	r2, [r7, #4]
	: __shared_count(__p)
 8012bb0:	68b9      	ldr	r1, [r7, #8]
 8012bb2:	68f8      	ldr	r0, [r7, #12]
 8012bb4:	f000 fb96 	bl	80132e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama11SoundPlayerEEET_>
	{ }
 8012bb8:	68fb      	ldr	r3, [r7, #12]
 8012bba:	4618      	mov	r0, r3
 8012bbc:	3710      	adds	r7, #16
 8012bbe:	46bd      	mov	sp, r7
 8012bc0:	bd80      	pop	{r7, pc}

08012bc2 <_ZNSt12__shared_ptrIN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 8012bc2:	b480      	push	{r7}
 8012bc4:	b083      	sub	sp, #12
 8012bc6:	af00      	add	r7, sp, #0
 8012bc8:	6078      	str	r0, [r7, #4]
 8012bca:	6039      	str	r1, [r7, #0]
	{ }
 8012bcc:	bf00      	nop
 8012bce:	370c      	adds	r7, #12
 8012bd0:	46bd      	mov	sp, r7
 8012bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bd6:	4770      	bx	lr

08012bd8 <_ZN9__gnu_cxx13new_allocatorIN4tama7ContextEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8012bd8:	b480      	push	{r7}
 8012bda:	b083      	sub	sp, #12
 8012bdc:	af00      	add	r7, sp, #0
 8012bde:	6078      	str	r0, [r7, #4]
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	4618      	mov	r0, r3
 8012be4:	370c      	adds	r7, #12
 8012be6:	46bd      	mov	sp, r7
 8012be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bec:	4770      	bx	lr

08012bee <_ZN9__gnu_cxx13new_allocatorIN4tama7ContextEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8012bee:	b480      	push	{r7}
 8012bf0:	b083      	sub	sp, #12
 8012bf2:	af00      	add	r7, sp, #0
 8012bf4:	6078      	str	r0, [r7, #4]
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	4618      	mov	r0, r3
 8012bfa:	370c      	adds	r7, #12
 8012bfc:	46bd      	mov	sp, r7
 8012bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c02:	4770      	bx	lr

08012c04 <_ZNSt10shared_ptrIN4tama7ContextEEC1ISaIS1_EJRS_INS0_13TextureLoaderEERS_INS0_5InputEES_INS0_11SoundPlayerEERS_INS0_18TimeMonitorCreatorEEEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8012c04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012c08:	b089      	sub	sp, #36	; 0x24
 8012c0a:	af04      	add	r7, sp, #16
 8012c0c:	60f8      	str	r0, [r7, #12]
 8012c0e:	7239      	strb	r1, [r7, #8]
 8012c10:	607a      	str	r2, [r7, #4]
 8012c12:	603b      	str	r3, [r7, #0]
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
 8012c14:	68fc      	ldr	r4, [r7, #12]
 8012c16:	6838      	ldr	r0, [r7, #0]
 8012c18:	f7ff fbea 	bl	80123f0 <_ZSt7forwardIRSt10shared_ptrIN4tama13TextureLoaderEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8012c1c:	4680      	mov	r8, r0
 8012c1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012c20:	f7ff fbf1 	bl	8012406 <_ZSt7forwardIRSt10shared_ptrIN4tama5InputEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8012c24:	4605      	mov	r5, r0
 8012c26:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8012c28:	f7ff fbf8 	bl	801241c <_ZSt7forwardISt10shared_ptrIN4tama11SoundPlayerEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8012c2c:	4606      	mov	r6, r0
 8012c2e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012c30:	f7ff fbff 	bl	8012432 <_ZSt7forwardIRSt10shared_ptrIN4tama18TimeMonitorCreatorEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8012c34:	4603      	mov	r3, r0
 8012c36:	9302      	str	r3, [sp, #8]
 8012c38:	9601      	str	r6, [sp, #4]
 8012c3a:	9500      	str	r5, [sp, #0]
 8012c3c:	4643      	mov	r3, r8
 8012c3e:	687a      	ldr	r2, [r7, #4]
 8012c40:	4649      	mov	r1, r9
 8012c42:	4620      	mov	r0, r4
 8012c44:	f000 fb83 	bl	801334e <_ZNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJRSt10shared_ptrINS0_13TextureLoaderEERS7_INS0_5InputEES7_INS0_11SoundPlayerEERS7_INS0_18TimeMonitorCreatorEEEEESt19_Sp_make_shared_tagRKT_DpOT0_>
	{ }
 8012c48:	68fb      	ldr	r3, [r7, #12]
 8012c4a:	4618      	mov	r0, r3
 8012c4c:	3714      	adds	r7, #20
 8012c4e:	46bd      	mov	sp, r7
 8012c50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08012c54 <_ZNKSt12__shared_ptrIN4tama18DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 8012c54:	b480      	push	{r7}
 8012c56:	b083      	sub	sp, #12
 8012c58:	af00      	add	r7, sp, #0
 8012c5a:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	681b      	ldr	r3, [r3, #0]
 8012c60:	4618      	mov	r0, r3
 8012c62:	370c      	adds	r7, #12
 8012c64:	46bd      	mov	sp, r7
 8012c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c6a:	4770      	bx	lr

08012c6c <_ZNKSt15__uniq_ptr_implIN4tama7DisplayESt14default_deleteIS1_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8012c6c:	b580      	push	{r7, lr}
 8012c6e:	b082      	sub	sp, #8
 8012c70:	af00      	add	r7, sp, #0
 8012c72:	6078      	str	r0, [r7, #4]
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	4618      	mov	r0, r3
 8012c78:	f000 fbf3 	bl	8013462 <_ZSt3getILj0EJPN4tama7DisplayESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>
 8012c7c:	4603      	mov	r3, r0
 8012c7e:	681b      	ldr	r3, [r3, #0]
 8012c80:	4618      	mov	r0, r3
 8012c82:	3708      	adds	r7, #8
 8012c84:	46bd      	mov	sp, r7
 8012c86:	bd80      	pop	{r7, pc}

08012c88 <_ZNSt5tupleIJPN4tama16Nokia5510DisplayESt14default_deleteIS1_EEEC1IS2_S4_Lb1EEEv>:
      constexpr tuple()
 8012c88:	b580      	push	{r7, lr}
 8012c8a:	b082      	sub	sp, #8
 8012c8c:	af00      	add	r7, sp, #0
 8012c8e:	6078      	str	r0, [r7, #4]
      : _Inherited() { }
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	4618      	mov	r0, r3
 8012c94:	f000 fbf2 	bl	801347c <_ZNSt11_Tuple_implILj0EJPN4tama16Nokia5510DisplayESt14default_deleteIS1_EEEC1Ev>
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	4618      	mov	r0, r3
 8012c9c:	3708      	adds	r7, #8
 8012c9e:	46bd      	mov	sp, r7
 8012ca0:	bd80      	pop	{r7, pc}

08012ca2 <_ZSt12__get_helperILj0EPN4tama16Nokia5510DisplayEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8012ca2:	b580      	push	{r7, lr}
 8012ca4:	b082      	sub	sp, #8
 8012ca6:	af00      	add	r7, sp, #0
 8012ca8:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8012caa:	6878      	ldr	r0, [r7, #4]
 8012cac:	f000 fbf6 	bl	801349c <_ZNSt11_Tuple_implILj0EJPN4tama16Nokia5510DisplayESt14default_deleteIS1_EEE7_M_headERS5_>
 8012cb0:	4603      	mov	r3, r0
 8012cb2:	4618      	mov	r0, r3
 8012cb4:	3708      	adds	r7, #8
 8012cb6:	46bd      	mov	sp, r7
 8012cb8:	bd80      	pop	{r7, pc}

08012cba <_ZSt3getILj1EJPN4tama16Nokia5510DisplayESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 8012cba:	b580      	push	{r7, lr}
 8012cbc:	b082      	sub	sp, #8
 8012cbe:	af00      	add	r7, sp, #0
 8012cc0:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8012cc2:	6878      	ldr	r0, [r7, #4]
 8012cc4:	f000 fbf7 	bl	80134b6 <_ZSt12__get_helperILj1ESt14default_deleteIN4tama16Nokia5510DisplayEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8012cc8:	4603      	mov	r3, r0
 8012cca:	4618      	mov	r0, r3
 8012ccc:	3708      	adds	r7, #8
 8012cce:	46bd      	mov	sp, r7
 8012cd0:	bd80      	pop	{r7, pc}

08012cd2 <_ZNKSt15__uniq_ptr_implIN4tama16Nokia5510DisplayESt14default_deleteIS1_EE6_M_ptrEv>:
 8012cd2:	b580      	push	{r7, lr}
 8012cd4:	b082      	sub	sp, #8
 8012cd6:	af00      	add	r7, sp, #0
 8012cd8:	6078      	str	r0, [r7, #4]
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	4618      	mov	r0, r3
 8012cde:	f000 fbf6 	bl	80134ce <_ZSt3getILj0EJPN4tama16Nokia5510DisplayESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>
 8012ce2:	4603      	mov	r3, r0
 8012ce4:	681b      	ldr	r3, [r3, #0]
 8012ce6:	4618      	mov	r0, r3
 8012ce8:	3708      	adds	r7, #8
 8012cea:	46bd      	mov	sp, r7
 8012cec:	bd80      	pop	{r7, pc}

08012cee <_ZNSt11_Tuple_implILj0EJPN4tama7DisplayESt14default_deleteIS1_EEEC1IRS2_JS3_INS0_16Nokia5510DisplayEEEvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8012cee:	b590      	push	{r4, r7, lr}
 8012cf0:	b085      	sub	sp, #20
 8012cf2:	af00      	add	r7, sp, #0
 8012cf4:	60f8      	str	r0, [r7, #12]
 8012cf6:	60b9      	str	r1, [r7, #8]
 8012cf8:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 8012cfa:	6878      	ldr	r0, [r7, #4]
 8012cfc:	f7ff fc40 	bl	8012580 <_ZSt7forwardISt14default_deleteIN4tama16Nokia5510DisplayEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8012d00:	4603      	mov	r3, r0
 8012d02:	4619      	mov	r1, r3
 8012d04:	68f8      	ldr	r0, [r7, #12]
 8012d06:	f000 fbef 	bl	80134e8 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN4tama7DisplayEEEEC1IS0_INS1_16Nokia5510DisplayEEEEOT_>
 8012d0a:	68fc      	ldr	r4, [r7, #12]
 8012d0c:	68b8      	ldr	r0, [r7, #8]
 8012d0e:	f7ff fe62 	bl	80129d6 <_ZSt7forwardIRPN4tama7DisplayEEOT_RNSt16remove_referenceIS4_E4typeE>
 8012d12:	4603      	mov	r3, r0
 8012d14:	4619      	mov	r1, r3
 8012d16:	4620      	mov	r0, r4
 8012d18:	f000 fbf8 	bl	801350c <_ZNSt10_Head_baseILj0EPN4tama7DisplayELb0EEC1IRS2_EEOT_>
 8012d1c:	68fb      	ldr	r3, [r7, #12]
 8012d1e:	4618      	mov	r0, r3
 8012d20:	3714      	adds	r7, #20
 8012d22:	46bd      	mov	sp, r7
 8012d24:	bd90      	pop	{r4, r7, pc}

08012d26 <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>:
        struct _Deleter
 8012d26:	b580      	push	{r7, lr}
 8012d28:	b082      	sub	sp, #8
 8012d2a:	af00      	add	r7, sp, #0
 8012d2c:	6078      	str	r0, [r7, #4]
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	4618      	mov	r0, r3
 8012d32:	f7ff fc52 	bl	80125da <_ZNSaIN4tama18Stm32TextureLoaderEED1Ev>
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	4618      	mov	r0, r3
 8012d3a:	3708      	adds	r7, #8
 8012d3c:	46bd      	mov	sp, r7
 8012d3e:	bd80      	pop	{r7, pc}

08012d40 <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>:
 8012d40:	b580      	push	{r7, lr}
 8012d42:	b082      	sub	sp, #8
 8012d44:	af00      	add	r7, sp, #0
 8012d46:	6078      	str	r0, [r7, #4]
 8012d48:	6039      	str	r1, [r7, #0]
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	683a      	ldr	r2, [r7, #0]
 8012d4e:	4611      	mov	r1, r2
 8012d50:	4618      	mov	r0, r3
 8012d52:	f000 fbec 	bl	801352e <_ZNSaIN4tama18Stm32TextureLoaderEEC1ERKS1_>
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	4618      	mov	r0, r3
 8012d5a:	3708      	adds	r7, #8
 8012d5c:	46bd      	mov	sp, r7
 8012d5e:	bd80      	pop	{r7, pc}

08012d60 <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8012d60:	b580      	push	{r7, lr}
 8012d62:	b08c      	sub	sp, #48	; 0x30
 8012d64:	af00      	add	r7, sp, #0
 8012d66:	60f8      	str	r0, [r7, #12]
 8012d68:	7239      	strb	r1, [r7, #8]
 8012d6a:	607a      	str	r2, [r7, #4]
	: _M_ptr(), _M_refcount()
 8012d6c:	68fb      	ldr	r3, [r7, #12]
 8012d6e:	2200      	movs	r2, #0
 8012d70:	601a      	str	r2, [r3, #0]
 8012d72:	68fb      	ldr	r3, [r7, #12]
 8012d74:	3304      	adds	r3, #4
 8012d76:	4618      	mov	r0, r3
 8012d78:	f7f1 f8f9 	bl	8003f6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 8012d7c:	f107 0320 	add.w	r3, r7, #32
 8012d80:	6879      	ldr	r1, [r7, #4]
 8012d82:	4618      	mov	r0, r3
 8012d84:	f000 fbd3 	bl	801352e <_ZNSaIN4tama18Stm32TextureLoaderEEC1ERKS1_>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 8012d88:	f107 0318 	add.w	r3, r7, #24
 8012d8c:	f107 0220 	add.w	r2, r7, #32
 8012d90:	4611      	mov	r1, r2
 8012d92:	4618      	mov	r0, r3
 8012d94:	f000 fbd9 	bl	801354a <_ZSt18__allocate_guardedISaIN4tama18Stm32TextureLoaderEEESt15__allocated_ptrIT_ERS4_>
	  auto __ptr = __guard.get();
 8012d98:	f107 0318 	add.w	r3, r7, #24
 8012d9c:	4618      	mov	r0, r3
 8012d9e:	f000 fbfc 	bl	801359a <_ZNSt15__allocated_ptrISaIN4tama18Stm32TextureLoaderEEE3getEv>
 8012da2:	62f8      	str	r0, [r7, #44]	; 0x2c
	  __traits::construct(__del._M_alloc, __ptr,
 8012da4:	f107 0320 	add.w	r3, r7, #32
 8012da8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012daa:	4618      	mov	r0, r3
 8012dac:	f000 fc03 	bl	80135b6 <_ZNSt16allocator_traitsISaIN4tama18Stm32TextureLoaderEEE9constructIS1_JEEEvRS2_PT_DpOT0_>
	  __guard = nullptr;
 8012db0:	f107 0318 	add.w	r3, r7, #24
 8012db4:	2100      	movs	r1, #0
 8012db6:	4618      	mov	r0, r3
 8012db8:	f000 fc0a 	bl	80135d0 <_ZNSt15__allocated_ptrISaIN4tama18Stm32TextureLoaderEEEaSEDn>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 8012dbc:	f107 0220 	add.w	r2, r7, #32
 8012dc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012dc4:	4611      	mov	r1, r2
 8012dc6:	4618      	mov	r0, r3
 8012dc8:	f7ff ffba 	bl	8012d40 <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>
 8012dcc:	f107 0220 	add.w	r2, r7, #32
 8012dd0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012dd4:	4611      	mov	r1, r2
 8012dd6:	4618      	mov	r0, r3
 8012dd8:	f000 fba9 	bl	801352e <_ZNSaIN4tama18Stm32TextureLoaderEEC1ERKS1_>
 8012ddc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012de0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012de4:	f107 0014 	add.w	r0, r7, #20
 8012de8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012dea:	f000 fc26 	bl	801363a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
 8012dee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012df2:	4618      	mov	r0, r3
 8012df4:	f7ff fbf1 	bl	80125da <_ZNSaIN4tama18Stm32TextureLoaderEED1Ev>
 8012df8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012dfc:	4618      	mov	r0, r3
 8012dfe:	f7ff ff92 	bl	8012d26 <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	  _M_refcount._M_swap(__count);
 8012e02:	68fb      	ldr	r3, [r7, #12]
 8012e04:	3304      	adds	r3, #4
 8012e06:	f107 0214 	add.w	r2, r7, #20
 8012e0a:	4611      	mov	r1, r2
 8012e0c:	4618      	mov	r0, r3
 8012e0e:	f7f1 f9b7 	bl	8004180 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  _M_ptr = __ptr;
 8012e12:	68fb      	ldr	r3, [r7, #12]
 8012e14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012e16:	601a      	str	r2, [r3, #0]
	  _M_enable_shared_from_this_with(_M_ptr);
 8012e18:	68fb      	ldr	r3, [r7, #12]
 8012e1a:	681b      	ldr	r3, [r3, #0]
 8012e1c:	4619      	mov	r1, r3
 8012e1e:	68f8      	ldr	r0, [r7, #12]
 8012e20:	f000 fc62 	bl	80136e8 <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 8012e24:	f107 0314 	add.w	r3, r7, #20
 8012e28:	4618      	mov	r0, r3
 8012e2a:	f7f0 f972 	bl	8003112 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 8012e2e:	f107 0318 	add.w	r3, r7, #24
 8012e32:	4618      	mov	r0, r3
 8012e34:	f000 fb9c 	bl	8013570 <_ZNSt15__allocated_ptrISaIN4tama18Stm32TextureLoaderEEED1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 8012e38:	f107 0320 	add.w	r3, r7, #32
 8012e3c:	4618      	mov	r0, r3
 8012e3e:	f7ff ff72 	bl	8012d26 <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	}
 8012e42:	68fb      	ldr	r3, [r7, #12]
 8012e44:	4618      	mov	r0, r3
 8012e46:	3730      	adds	r7, #48	; 0x30
 8012e48:	46bd      	mov	sp, r7
 8012e4a:	bd80      	pop	{r7, pc}

08012e4c <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>:
        struct _Deleter
 8012e4c:	b580      	push	{r7, lr}
 8012e4e:	b082      	sub	sp, #8
 8012e50:	af00      	add	r7, sp, #0
 8012e52:	6078      	str	r0, [r7, #4]
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	4618      	mov	r0, r3
 8012e58:	f7ff fc03 	bl	8012662 <_ZNSaIN4tama27Nokia5110DisplayDataManagerEED1Ev>
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	4618      	mov	r0, r3
 8012e60:	3708      	adds	r7, #8
 8012e62:	46bd      	mov	sp, r7
 8012e64:	bd80      	pop	{r7, pc}

08012e66 <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>:
 8012e66:	b580      	push	{r7, lr}
 8012e68:	b082      	sub	sp, #8
 8012e6a:	af00      	add	r7, sp, #0
 8012e6c:	6078      	str	r0, [r7, #4]
 8012e6e:	6039      	str	r1, [r7, #0]
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	683a      	ldr	r2, [r7, #0]
 8012e74:	4611      	mov	r1, r2
 8012e76:	4618      	mov	r0, r3
 8012e78:	f000 fc41 	bl	80136fe <_ZNSaIN4tama27Nokia5110DisplayDataManagerEEC1ERKS1_>
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	4618      	mov	r0, r3
 8012e80:	3708      	adds	r7, #8
 8012e82:	46bd      	mov	sp, r7
 8012e84:	bd80      	pop	{r7, pc}

08012e86 <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8012e86:	b580      	push	{r7, lr}
 8012e88:	b08c      	sub	sp, #48	; 0x30
 8012e8a:	af00      	add	r7, sp, #0
 8012e8c:	60f8      	str	r0, [r7, #12]
 8012e8e:	7239      	strb	r1, [r7, #8]
 8012e90:	607a      	str	r2, [r7, #4]
	: _M_ptr(), _M_refcount()
 8012e92:	68fb      	ldr	r3, [r7, #12]
 8012e94:	2200      	movs	r2, #0
 8012e96:	601a      	str	r2, [r3, #0]
 8012e98:	68fb      	ldr	r3, [r7, #12]
 8012e9a:	3304      	adds	r3, #4
 8012e9c:	4618      	mov	r0, r3
 8012e9e:	f7f1 f866 	bl	8003f6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 8012ea2:	f107 0320 	add.w	r3, r7, #32
 8012ea6:	6879      	ldr	r1, [r7, #4]
 8012ea8:	4618      	mov	r0, r3
 8012eaa:	f000 fc28 	bl	80136fe <_ZNSaIN4tama27Nokia5110DisplayDataManagerEEC1ERKS1_>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 8012eae:	f107 0318 	add.w	r3, r7, #24
 8012eb2:	f107 0220 	add.w	r2, r7, #32
 8012eb6:	4611      	mov	r1, r2
 8012eb8:	4618      	mov	r0, r3
 8012eba:	f000 fc2e 	bl	801371a <_ZSt18__allocate_guardedISaIN4tama27Nokia5110DisplayDataManagerEEESt15__allocated_ptrIT_ERS4_>
	  auto __ptr = __guard.get();
 8012ebe:	f107 0318 	add.w	r3, r7, #24
 8012ec2:	4618      	mov	r0, r3
 8012ec4:	f000 fc51 	bl	801376a <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEE3getEv>
 8012ec8:	62f8      	str	r0, [r7, #44]	; 0x2c
	  __traits::construct(__del._M_alloc, __ptr,
 8012eca:	f107 0320 	add.w	r3, r7, #32
 8012ece:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012ed0:	4618      	mov	r0, r3
 8012ed2:	f000 fc58 	bl	8013786 <_ZNSt16allocator_traitsISaIN4tama27Nokia5110DisplayDataManagerEEE9constructIS1_JEEEvRS2_PT_DpOT0_>
	  __guard = nullptr;
 8012ed6:	f107 0318 	add.w	r3, r7, #24
 8012eda:	2100      	movs	r1, #0
 8012edc:	4618      	mov	r0, r3
 8012ede:	f000 fc5f 	bl	80137a0 <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEEaSEDn>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 8012ee2:	f107 0220 	add.w	r2, r7, #32
 8012ee6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012eea:	4611      	mov	r1, r2
 8012eec:	4618      	mov	r0, r3
 8012eee:	f7ff ffba 	bl	8012e66 <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>
 8012ef2:	f107 0220 	add.w	r2, r7, #32
 8012ef6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012efa:	4611      	mov	r1, r2
 8012efc:	4618      	mov	r0, r3
 8012efe:	f000 fbfe 	bl	80136fe <_ZNSaIN4tama27Nokia5110DisplayDataManagerEEC1ERKS1_>
 8012f02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012f06:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012f0a:	f107 0014 	add.w	r0, r7, #20
 8012f0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012f10:	f000 fc7b 	bl	801380a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
 8012f14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012f18:	4618      	mov	r0, r3
 8012f1a:	f7ff fba2 	bl	8012662 <_ZNSaIN4tama27Nokia5110DisplayDataManagerEED1Ev>
 8012f1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012f22:	4618      	mov	r0, r3
 8012f24:	f7ff ff92 	bl	8012e4c <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	  _M_refcount._M_swap(__count);
 8012f28:	68fb      	ldr	r3, [r7, #12]
 8012f2a:	3304      	adds	r3, #4
 8012f2c:	f107 0214 	add.w	r2, r7, #20
 8012f30:	4611      	mov	r1, r2
 8012f32:	4618      	mov	r0, r3
 8012f34:	f7f1 f924 	bl	8004180 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  _M_ptr = __ptr;
 8012f38:	68fb      	ldr	r3, [r7, #12]
 8012f3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012f3c:	601a      	str	r2, [r3, #0]
	  _M_enable_shared_from_this_with(_M_ptr);
 8012f3e:	68fb      	ldr	r3, [r7, #12]
 8012f40:	681b      	ldr	r3, [r3, #0]
 8012f42:	4619      	mov	r1, r3
 8012f44:	68f8      	ldr	r0, [r7, #12]
 8012f46:	f000 fcb7 	bl	80138b8 <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 8012f4a:	f107 0314 	add.w	r3, r7, #20
 8012f4e:	4618      	mov	r0, r3
 8012f50:	f7f0 f8df 	bl	8003112 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 8012f54:	f107 0318 	add.w	r3, r7, #24
 8012f58:	4618      	mov	r0, r3
 8012f5a:	f000 fbf1 	bl	8013740 <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEED1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 8012f5e:	f107 0320 	add.w	r3, r7, #32
 8012f62:	4618      	mov	r0, r3
 8012f64:	f7ff ff72 	bl	8012e4c <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	}
 8012f68:	68fb      	ldr	r3, [r7, #12]
 8012f6a:	4618      	mov	r0, r3
 8012f6c:	3730      	adds	r7, #48	; 0x30
 8012f6e:	46bd      	mov	sp, r7
 8012f70:	bd80      	pop	{r7, pc}

08012f72 <_ZNSt12__shared_ptrIN4tama23Stm32TimeMonitorCreatorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>:
        struct _Deleter
 8012f72:	b580      	push	{r7, lr}
 8012f74:	b082      	sub	sp, #8
 8012f76:	af00      	add	r7, sp, #0
 8012f78:	6078      	str	r0, [r7, #4]
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	4618      	mov	r0, r3
 8012f7e:	f7ff fbb4 	bl	80126ea <_ZNSaIN4tama23Stm32TimeMonitorCreatorEED1Ev>
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	4618      	mov	r0, r3
 8012f86:	3708      	adds	r7, #8
 8012f88:	46bd      	mov	sp, r7
 8012f8a:	bd80      	pop	{r7, pc}

08012f8c <_ZNSt12__shared_ptrIN4tama23Stm32TimeMonitorCreatorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>:
 8012f8c:	b580      	push	{r7, lr}
 8012f8e:	b082      	sub	sp, #8
 8012f90:	af00      	add	r7, sp, #0
 8012f92:	6078      	str	r0, [r7, #4]
 8012f94:	6039      	str	r1, [r7, #0]
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	683a      	ldr	r2, [r7, #0]
 8012f9a:	4611      	mov	r1, r2
 8012f9c:	4618      	mov	r0, r3
 8012f9e:	f000 fc96 	bl	80138ce <_ZNSaIN4tama23Stm32TimeMonitorCreatorEEC1ERKS1_>
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	4618      	mov	r0, r3
 8012fa6:	3708      	adds	r7, #8
 8012fa8:	46bd      	mov	sp, r7
 8012faa:	bd80      	pop	{r7, pc}

08012fac <_ZNSt12__shared_ptrIN4tama23Stm32TimeMonitorCreatorELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8012fac:	b580      	push	{r7, lr}
 8012fae:	b08c      	sub	sp, #48	; 0x30
 8012fb0:	af00      	add	r7, sp, #0
 8012fb2:	60f8      	str	r0, [r7, #12]
 8012fb4:	7239      	strb	r1, [r7, #8]
 8012fb6:	607a      	str	r2, [r7, #4]
	: _M_ptr(), _M_refcount()
 8012fb8:	68fb      	ldr	r3, [r7, #12]
 8012fba:	2200      	movs	r2, #0
 8012fbc:	601a      	str	r2, [r3, #0]
 8012fbe:	68fb      	ldr	r3, [r7, #12]
 8012fc0:	3304      	adds	r3, #4
 8012fc2:	4618      	mov	r0, r3
 8012fc4:	f7f0 ffd3 	bl	8003f6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 8012fc8:	f107 0320 	add.w	r3, r7, #32
 8012fcc:	6879      	ldr	r1, [r7, #4]
 8012fce:	4618      	mov	r0, r3
 8012fd0:	f000 fc7d 	bl	80138ce <_ZNSaIN4tama23Stm32TimeMonitorCreatorEEC1ERKS1_>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 8012fd4:	f107 0318 	add.w	r3, r7, #24
 8012fd8:	f107 0220 	add.w	r2, r7, #32
 8012fdc:	4611      	mov	r1, r2
 8012fde:	4618      	mov	r0, r3
 8012fe0:	f000 fc83 	bl	80138ea <_ZSt18__allocate_guardedISaIN4tama23Stm32TimeMonitorCreatorEEESt15__allocated_ptrIT_ERS4_>
	  auto __ptr = __guard.get();
 8012fe4:	f107 0318 	add.w	r3, r7, #24
 8012fe8:	4618      	mov	r0, r3
 8012fea:	f000 fca6 	bl	801393a <_ZNSt15__allocated_ptrISaIN4tama23Stm32TimeMonitorCreatorEEE3getEv>
 8012fee:	62f8      	str	r0, [r7, #44]	; 0x2c
	  __traits::construct(__del._M_alloc, __ptr,
 8012ff0:	f107 0320 	add.w	r3, r7, #32
 8012ff4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012ff6:	4618      	mov	r0, r3
 8012ff8:	f000 fcad 	bl	8013956 <_ZNSt16allocator_traitsISaIN4tama23Stm32TimeMonitorCreatorEEE9constructIS1_JEEEvRS2_PT_DpOT0_>
	  __guard = nullptr;
 8012ffc:	f107 0318 	add.w	r3, r7, #24
 8013000:	2100      	movs	r1, #0
 8013002:	4618      	mov	r0, r3
 8013004:	f000 fcb4 	bl	8013970 <_ZNSt15__allocated_ptrISaIN4tama23Stm32TimeMonitorCreatorEEEaSEDn>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 8013008:	f107 0220 	add.w	r2, r7, #32
 801300c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013010:	4611      	mov	r1, r2
 8013012:	4618      	mov	r0, r3
 8013014:	f7ff ffba 	bl	8012f8c <_ZNSt12__shared_ptrIN4tama23Stm32TimeMonitorCreatorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>
 8013018:	f107 0220 	add.w	r2, r7, #32
 801301c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013020:	4611      	mov	r1, r2
 8013022:	4618      	mov	r0, r3
 8013024:	f000 fc53 	bl	80138ce <_ZNSaIN4tama23Stm32TimeMonitorCreatorEEC1ERKS1_>
 8013028:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801302c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8013030:	f107 0014 	add.w	r0, r7, #20
 8013034:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013036:	f000 fcd0 	bl	80139da <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama23Stm32TimeMonitorCreatorENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
 801303a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801303e:	4618      	mov	r0, r3
 8013040:	f7ff fb53 	bl	80126ea <_ZNSaIN4tama23Stm32TimeMonitorCreatorEED1Ev>
 8013044:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013048:	4618      	mov	r0, r3
 801304a:	f7ff ff92 	bl	8012f72 <_ZNSt12__shared_ptrIN4tama23Stm32TimeMonitorCreatorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	  _M_refcount._M_swap(__count);
 801304e:	68fb      	ldr	r3, [r7, #12]
 8013050:	3304      	adds	r3, #4
 8013052:	f107 0214 	add.w	r2, r7, #20
 8013056:	4611      	mov	r1, r2
 8013058:	4618      	mov	r0, r3
 801305a:	f7f1 f891 	bl	8004180 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  _M_ptr = __ptr;
 801305e:	68fb      	ldr	r3, [r7, #12]
 8013060:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013062:	601a      	str	r2, [r3, #0]
	  _M_enable_shared_from_this_with(_M_ptr);
 8013064:	68fb      	ldr	r3, [r7, #12]
 8013066:	681b      	ldr	r3, [r3, #0]
 8013068:	4619      	mov	r1, r3
 801306a:	68f8      	ldr	r0, [r7, #12]
 801306c:	f000 fd0c 	bl	8013a88 <_ZNSt12__shared_ptrIN4tama23Stm32TimeMonitorCreatorELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 8013070:	f107 0314 	add.w	r3, r7, #20
 8013074:	4618      	mov	r0, r3
 8013076:	f7f0 f84c 	bl	8003112 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 801307a:	f107 0318 	add.w	r3, r7, #24
 801307e:	4618      	mov	r0, r3
 8013080:	f000 fc46 	bl	8013910 <_ZNSt15__allocated_ptrISaIN4tama23Stm32TimeMonitorCreatorEEED1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 8013084:	f107 0320 	add.w	r3, r7, #32
 8013088:	4618      	mov	r0, r3
 801308a:	f7ff ff72 	bl	8012f72 <_ZNSt12__shared_ptrIN4tama23Stm32TimeMonitorCreatorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	}
 801308e:	68fb      	ldr	r3, [r7, #12]
 8013090:	4618      	mov	r0, r3
 8013092:	3730      	adds	r7, #48	; 0x30
 8013094:	46bd      	mov	sp, r7
 8013096:	bd80      	pop	{r7, pc}

08013098 <_ZNSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>:
        struct _Deleter
 8013098:	b580      	push	{r7, lr}
 801309a:	b082      	sub	sp, #8
 801309c:	af00      	add	r7, sp, #0
 801309e:	6078      	str	r0, [r7, #4]
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	4618      	mov	r0, r3
 80130a4:	f7ff fb65 	bl	8012772 <_ZNSaIN4tama25Stm32SoundPlayingStrategyEED1Ev>
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	4618      	mov	r0, r3
 80130ac:	3708      	adds	r7, #8
 80130ae:	46bd      	mov	sp, r7
 80130b0:	bd80      	pop	{r7, pc}

080130b2 <_ZNSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>:
 80130b2:	b580      	push	{r7, lr}
 80130b4:	b082      	sub	sp, #8
 80130b6:	af00      	add	r7, sp, #0
 80130b8:	6078      	str	r0, [r7, #4]
 80130ba:	6039      	str	r1, [r7, #0]
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	683a      	ldr	r2, [r7, #0]
 80130c0:	4611      	mov	r1, r2
 80130c2:	4618      	mov	r0, r3
 80130c4:	f000 fceb 	bl	8013a9e <_ZNSaIN4tama25Stm32SoundPlayingStrategyEEC1ERKS1_>
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	4618      	mov	r0, r3
 80130cc:	3708      	adds	r7, #8
 80130ce:	46bd      	mov	sp, r7
 80130d0:	bd80      	pop	{r7, pc}

080130d2 <_ZNSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 80130d2:	b580      	push	{r7, lr}
 80130d4:	b08c      	sub	sp, #48	; 0x30
 80130d6:	af00      	add	r7, sp, #0
 80130d8:	60f8      	str	r0, [r7, #12]
 80130da:	7239      	strb	r1, [r7, #8]
 80130dc:	607a      	str	r2, [r7, #4]
	: _M_ptr(), _M_refcount()
 80130de:	68fb      	ldr	r3, [r7, #12]
 80130e0:	2200      	movs	r2, #0
 80130e2:	601a      	str	r2, [r3, #0]
 80130e4:	68fb      	ldr	r3, [r7, #12]
 80130e6:	3304      	adds	r3, #4
 80130e8:	4618      	mov	r0, r3
 80130ea:	f7f0 ff40 	bl	8003f6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 80130ee:	f107 0320 	add.w	r3, r7, #32
 80130f2:	6879      	ldr	r1, [r7, #4]
 80130f4:	4618      	mov	r0, r3
 80130f6:	f000 fcd2 	bl	8013a9e <_ZNSaIN4tama25Stm32SoundPlayingStrategyEEC1ERKS1_>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 80130fa:	f107 0318 	add.w	r3, r7, #24
 80130fe:	f107 0220 	add.w	r2, r7, #32
 8013102:	4611      	mov	r1, r2
 8013104:	4618      	mov	r0, r3
 8013106:	f000 fcd8 	bl	8013aba <_ZSt18__allocate_guardedISaIN4tama25Stm32SoundPlayingStrategyEEESt15__allocated_ptrIT_ERS4_>
	  auto __ptr = __guard.get();
 801310a:	f107 0318 	add.w	r3, r7, #24
 801310e:	4618      	mov	r0, r3
 8013110:	f000 fcfb 	bl	8013b0a <_ZNSt15__allocated_ptrISaIN4tama25Stm32SoundPlayingStrategyEEE3getEv>
 8013114:	62f8      	str	r0, [r7, #44]	; 0x2c
	  __traits::construct(__del._M_alloc, __ptr,
 8013116:	f107 0320 	add.w	r3, r7, #32
 801311a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801311c:	4618      	mov	r0, r3
 801311e:	f000 fd02 	bl	8013b26 <_ZNSt16allocator_traitsISaIN4tama25Stm32SoundPlayingStrategyEEE9constructIS1_JEEEvRS2_PT_DpOT0_>
	  __guard = nullptr;
 8013122:	f107 0318 	add.w	r3, r7, #24
 8013126:	2100      	movs	r1, #0
 8013128:	4618      	mov	r0, r3
 801312a:	f000 fd09 	bl	8013b40 <_ZNSt15__allocated_ptrISaIN4tama25Stm32SoundPlayingStrategyEEEaSEDn>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 801312e:	f107 0220 	add.w	r2, r7, #32
 8013132:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013136:	4611      	mov	r1, r2
 8013138:	4618      	mov	r0, r3
 801313a:	f7ff ffba 	bl	80130b2 <_ZNSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>
 801313e:	f107 0220 	add.w	r2, r7, #32
 8013142:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013146:	4611      	mov	r1, r2
 8013148:	4618      	mov	r0, r3
 801314a:	f000 fca8 	bl	8013a9e <_ZNSaIN4tama25Stm32SoundPlayingStrategyEEC1ERKS1_>
 801314e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013152:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8013156:	f107 0014 	add.w	r0, r7, #20
 801315a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801315c:	f000 fd25 	bl	8013baa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
 8013160:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013164:	4618      	mov	r0, r3
 8013166:	f7ff fb04 	bl	8012772 <_ZNSaIN4tama25Stm32SoundPlayingStrategyEED1Ev>
 801316a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801316e:	4618      	mov	r0, r3
 8013170:	f7ff ff92 	bl	8013098 <_ZNSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	  _M_refcount._M_swap(__count);
 8013174:	68fb      	ldr	r3, [r7, #12]
 8013176:	3304      	adds	r3, #4
 8013178:	f107 0214 	add.w	r2, r7, #20
 801317c:	4611      	mov	r1, r2
 801317e:	4618      	mov	r0, r3
 8013180:	f7f0 fffe 	bl	8004180 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  _M_ptr = __ptr;
 8013184:	68fb      	ldr	r3, [r7, #12]
 8013186:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013188:	601a      	str	r2, [r3, #0]
	  _M_enable_shared_from_this_with(_M_ptr);
 801318a:	68fb      	ldr	r3, [r7, #12]
 801318c:	681b      	ldr	r3, [r3, #0]
 801318e:	4619      	mov	r1, r3
 8013190:	68f8      	ldr	r0, [r7, #12]
 8013192:	f000 fd61 	bl	8013c58 <_ZNSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 8013196:	f107 0314 	add.w	r3, r7, #20
 801319a:	4618      	mov	r0, r3
 801319c:	f7ef ffb9 	bl	8003112 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 80131a0:	f107 0318 	add.w	r3, r7, #24
 80131a4:	4618      	mov	r0, r3
 80131a6:	f000 fc9b 	bl	8013ae0 <_ZNSt15__allocated_ptrISaIN4tama25Stm32SoundPlayingStrategyEEED1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 80131aa:	f107 0320 	add.w	r3, r7, #32
 80131ae:	4618      	mov	r0, r3
 80131b0:	f7ff ff72 	bl	8013098 <_ZNSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	}
 80131b4:	68fb      	ldr	r3, [r7, #12]
 80131b6:	4618      	mov	r0, r3
 80131b8:	3730      	adds	r7, #48	; 0x30
 80131ba:	46bd      	mov	sp, r7
 80131bc:	bd80      	pop	{r7, pc}

080131be <_ZNSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>:
        struct _Deleter
 80131be:	b580      	push	{r7, lr}
 80131c0:	b082      	sub	sp, #8
 80131c2:	af00      	add	r7, sp, #0
 80131c4:	6078      	str	r0, [r7, #4]
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	4618      	mov	r0, r3
 80131ca:	f7ff fb16 	bl	80127fa <_ZNSaIN4tama10Stm32InputEED1Ev>
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	4618      	mov	r0, r3
 80131d2:	3708      	adds	r7, #8
 80131d4:	46bd      	mov	sp, r7
 80131d6:	bd80      	pop	{r7, pc}

080131d8 <_ZNSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>:
 80131d8:	b580      	push	{r7, lr}
 80131da:	b082      	sub	sp, #8
 80131dc:	af00      	add	r7, sp, #0
 80131de:	6078      	str	r0, [r7, #4]
 80131e0:	6039      	str	r1, [r7, #0]
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	683a      	ldr	r2, [r7, #0]
 80131e6:	4611      	mov	r1, r2
 80131e8:	4618      	mov	r0, r3
 80131ea:	f000 fd40 	bl	8013c6e <_ZNSaIN4tama10Stm32InputEEC1ERKS1_>
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	4618      	mov	r0, r3
 80131f2:	3708      	adds	r7, #8
 80131f4:	46bd      	mov	sp, r7
 80131f6:	bd80      	pop	{r7, pc}

080131f8 <_ZNSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 80131f8:	b580      	push	{r7, lr}
 80131fa:	b08c      	sub	sp, #48	; 0x30
 80131fc:	af00      	add	r7, sp, #0
 80131fe:	60f8      	str	r0, [r7, #12]
 8013200:	7239      	strb	r1, [r7, #8]
 8013202:	607a      	str	r2, [r7, #4]
	: _M_ptr(), _M_refcount()
 8013204:	68fb      	ldr	r3, [r7, #12]
 8013206:	2200      	movs	r2, #0
 8013208:	601a      	str	r2, [r3, #0]
 801320a:	68fb      	ldr	r3, [r7, #12]
 801320c:	3304      	adds	r3, #4
 801320e:	4618      	mov	r0, r3
 8013210:	f7f0 fead 	bl	8003f6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 8013214:	f107 0320 	add.w	r3, r7, #32
 8013218:	6879      	ldr	r1, [r7, #4]
 801321a:	4618      	mov	r0, r3
 801321c:	f000 fd27 	bl	8013c6e <_ZNSaIN4tama10Stm32InputEEC1ERKS1_>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 8013220:	f107 0318 	add.w	r3, r7, #24
 8013224:	f107 0220 	add.w	r2, r7, #32
 8013228:	4611      	mov	r1, r2
 801322a:	4618      	mov	r0, r3
 801322c:	f000 fd2d 	bl	8013c8a <_ZSt18__allocate_guardedISaIN4tama10Stm32InputEEESt15__allocated_ptrIT_ERS4_>
	  auto __ptr = __guard.get();
 8013230:	f107 0318 	add.w	r3, r7, #24
 8013234:	4618      	mov	r0, r3
 8013236:	f000 fd50 	bl	8013cda <_ZNSt15__allocated_ptrISaIN4tama10Stm32InputEEE3getEv>
 801323a:	62f8      	str	r0, [r7, #44]	; 0x2c
	  __traits::construct(__del._M_alloc, __ptr,
 801323c:	f107 0320 	add.w	r3, r7, #32
 8013240:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013242:	4618      	mov	r0, r3
 8013244:	f000 fd57 	bl	8013cf6 <_ZNSt16allocator_traitsISaIN4tama10Stm32InputEEE9constructIS1_JEEEvRS2_PT_DpOT0_>
	  __guard = nullptr;
 8013248:	f107 0318 	add.w	r3, r7, #24
 801324c:	2100      	movs	r1, #0
 801324e:	4618      	mov	r0, r3
 8013250:	f000 fd5e 	bl	8013d10 <_ZNSt15__allocated_ptrISaIN4tama10Stm32InputEEEaSEDn>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 8013254:	f107 0220 	add.w	r2, r7, #32
 8013258:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801325c:	4611      	mov	r1, r2
 801325e:	4618      	mov	r0, r3
 8013260:	f7ff ffba 	bl	80131d8 <_ZNSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>
 8013264:	f107 0220 	add.w	r2, r7, #32
 8013268:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801326c:	4611      	mov	r1, r2
 801326e:	4618      	mov	r0, r3
 8013270:	f000 fcfd 	bl	8013c6e <_ZNSaIN4tama10Stm32InputEEC1ERKS1_>
 8013274:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013278:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801327c:	f107 0014 	add.w	r0, r7, #20
 8013280:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013282:	f000 fd7a 	bl	8013d7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama10Stm32InputENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
 8013286:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801328a:	4618      	mov	r0, r3
 801328c:	f7ff fab5 	bl	80127fa <_ZNSaIN4tama10Stm32InputEED1Ev>
 8013290:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013294:	4618      	mov	r0, r3
 8013296:	f7ff ff92 	bl	80131be <_ZNSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	  _M_refcount._M_swap(__count);
 801329a:	68fb      	ldr	r3, [r7, #12]
 801329c:	3304      	adds	r3, #4
 801329e:	f107 0214 	add.w	r2, r7, #20
 80132a2:	4611      	mov	r1, r2
 80132a4:	4618      	mov	r0, r3
 80132a6:	f7f0 ff6b 	bl	8004180 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  _M_ptr = __ptr;
 80132aa:	68fb      	ldr	r3, [r7, #12]
 80132ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80132ae:	601a      	str	r2, [r3, #0]
	  _M_enable_shared_from_this_with(_M_ptr);
 80132b0:	68fb      	ldr	r3, [r7, #12]
 80132b2:	681b      	ldr	r3, [r3, #0]
 80132b4:	4619      	mov	r1, r3
 80132b6:	68f8      	ldr	r0, [r7, #12]
 80132b8:	f000 fdb6 	bl	8013e28 <_ZNSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 80132bc:	f107 0314 	add.w	r3, r7, #20
 80132c0:	4618      	mov	r0, r3
 80132c2:	f7ef ff26 	bl	8003112 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 80132c6:	f107 0318 	add.w	r3, r7, #24
 80132ca:	4618      	mov	r0, r3
 80132cc:	f000 fcf0 	bl	8013cb0 <_ZNSt15__allocated_ptrISaIN4tama10Stm32InputEEED1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 80132d0:	f107 0320 	add.w	r3, r7, #32
 80132d4:	4618      	mov	r0, r3
 80132d6:	f7ff ff72 	bl	80131be <_ZNSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	}
 80132da:	68fb      	ldr	r3, [r7, #12]
 80132dc:	4618      	mov	r0, r3
 80132de:	3730      	adds	r7, #48	; 0x30
 80132e0:	46bd      	mov	sp, r7
 80132e2:	bd80      	pop	{r7, pc}

080132e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama11SoundPlayerEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 80132e4:	b590      	push	{r4, r7, lr}
 80132e6:	b083      	sub	sp, #12
 80132e8:	af00      	add	r7, sp, #0
 80132ea:	6078      	str	r0, [r7, #4]
 80132ec:	6039      	str	r1, [r7, #0]
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	2200      	movs	r2, #0
 80132f2:	601a      	str	r2, [r3, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80132f4:	2010      	movs	r0, #16
 80132f6:	f00c fae2 	bl	801f8be <_Znwj>
 80132fa:	4603      	mov	r3, r0
 80132fc:	461c      	mov	r4, r3
 80132fe:	6839      	ldr	r1, [r7, #0]
 8013300:	4620      	mov	r0, r4
 8013302:	f000 fd9d 	bl	8013e40 <_ZNSt15_Sp_counted_ptrIPN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0EEC1ES2_>
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	601c      	str	r4, [r3, #0]
	}
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	4618      	mov	r0, r3
 801330e:	370c      	adds	r7, #12
 8013310:	46bd      	mov	sp, r7
 8013312:	bd90      	pop	{r4, r7, pc}

08013314 <_ZNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>:
        struct _Deleter
 8013314:	b580      	push	{r7, lr}
 8013316:	b082      	sub	sp, #8
 8013318:	af00      	add	r7, sp, #0
 801331a:	6078      	str	r0, [r7, #4]
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	4618      	mov	r0, r3
 8013320:	f7ff fac7 	bl	80128b2 <_ZNSaIN4tama7ContextEED1Ev>
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	4618      	mov	r0, r3
 8013328:	3708      	adds	r7, #8
 801332a:	46bd      	mov	sp, r7
 801332c:	bd80      	pop	{r7, pc}

0801332e <_ZNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>:
 801332e:	b580      	push	{r7, lr}
 8013330:	b082      	sub	sp, #8
 8013332:	af00      	add	r7, sp, #0
 8013334:	6078      	str	r0, [r7, #4]
 8013336:	6039      	str	r1, [r7, #0]
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	683a      	ldr	r2, [r7, #0]
 801333c:	4611      	mov	r1, r2
 801333e:	4618      	mov	r0, r3
 8013340:	f000 fd94 	bl	8013e6c <_ZNSaIN4tama7ContextEEC1ERKS1_>
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	4618      	mov	r0, r3
 8013348:	3708      	adds	r7, #8
 801334a:	46bd      	mov	sp, r7
 801334c:	bd80      	pop	{r7, pc}

0801334e <_ZNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJRSt10shared_ptrINS0_13TextureLoaderEERS7_INS0_5InputEES7_INS0_11SoundPlayerEERS7_INS0_18TimeMonitorCreatorEEEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 801334e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013350:	b08f      	sub	sp, #60	; 0x3c
 8013352:	af02      	add	r7, sp, #8
 8013354:	60f8      	str	r0, [r7, #12]
 8013356:	7239      	strb	r1, [r7, #8]
 8013358:	607a      	str	r2, [r7, #4]
 801335a:	603b      	str	r3, [r7, #0]
	: _M_ptr(), _M_refcount()
 801335c:	68fb      	ldr	r3, [r7, #12]
 801335e:	2200      	movs	r2, #0
 8013360:	601a      	str	r2, [r3, #0]
 8013362:	68fb      	ldr	r3, [r7, #12]
 8013364:	3304      	adds	r3, #4
 8013366:	4618      	mov	r0, r3
 8013368:	f7f0 fe01 	bl	8003f6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 801336c:	f107 0320 	add.w	r3, r7, #32
 8013370:	6879      	ldr	r1, [r7, #4]
 8013372:	4618      	mov	r0, r3
 8013374:	f000 fd7a 	bl	8013e6c <_ZNSaIN4tama7ContextEEC1ERKS1_>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 8013378:	f107 0318 	add.w	r3, r7, #24
 801337c:	f107 0220 	add.w	r2, r7, #32
 8013380:	4611      	mov	r1, r2
 8013382:	4618      	mov	r0, r3
 8013384:	f000 fd80 	bl	8013e88 <_ZSt18__allocate_guardedISaIN4tama7ContextEEESt15__allocated_ptrIT_ERS4_>
	  auto __ptr = __guard.get();
 8013388:	f107 0318 	add.w	r3, r7, #24
 801338c:	4618      	mov	r0, r3
 801338e:	f000 fda3 	bl	8013ed8 <_ZNSt15__allocated_ptrISaIN4tama7ContextEEE3getEv>
 8013392:	62f8      	str	r0, [r7, #44]	; 0x2c
	  __traits::construct(__del._M_alloc, __ptr,
 8013394:	6838      	ldr	r0, [r7, #0]
 8013396:	f7ff f82b 	bl	80123f0 <_ZSt7forwardIRSt10shared_ptrIN4tama13TextureLoaderEEEOT_RNSt16remove_referenceIS5_E4typeE>
 801339a:	4605      	mov	r5, r0
 801339c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801339e:	f7ff f832 	bl	8012406 <_ZSt7forwardIRSt10shared_ptrIN4tama5InputEEEOT_RNSt16remove_referenceIS5_E4typeE>
 80133a2:	4606      	mov	r6, r0
 80133a4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80133a6:	f7ff f839 	bl	801241c <_ZSt7forwardISt10shared_ptrIN4tama11SoundPlayerEEEOT_RNSt16remove_referenceIS4_E4typeE>
 80133aa:	4604      	mov	r4, r0
 80133ac:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80133ae:	f7ff f840 	bl	8012432 <_ZSt7forwardIRSt10shared_ptrIN4tama18TimeMonitorCreatorEEEOT_RNSt16remove_referenceIS5_E4typeE>
 80133b2:	4603      	mov	r3, r0
 80133b4:	f107 0020 	add.w	r0, r7, #32
 80133b8:	9301      	str	r3, [sp, #4]
 80133ba:	9400      	str	r4, [sp, #0]
 80133bc:	4633      	mov	r3, r6
 80133be:	462a      	mov	r2, r5
 80133c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80133c2:	f000 fd97 	bl	8013ef4 <_ZNSt16allocator_traitsISaIN4tama7ContextEEE9constructIS1_JRSt10shared_ptrINS0_13TextureLoaderEERS5_INS0_5InputEES5_INS0_11SoundPlayerEERS5_INS0_18TimeMonitorCreatorEEEEEvRS2_PT_DpOT0_>
	  __guard = nullptr;
 80133c6:	f107 0318 	add.w	r3, r7, #24
 80133ca:	2100      	movs	r1, #0
 80133cc:	4618      	mov	r0, r3
 80133ce:	f000 fdb4 	bl	8013f3a <_ZNSt15__allocated_ptrISaIN4tama7ContextEEEaSEDn>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 80133d2:	f107 0220 	add.w	r2, r7, #32
 80133d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80133da:	4611      	mov	r1, r2
 80133dc:	4618      	mov	r0, r3
 80133de:	f7ff ffa6 	bl	801332e <_ZNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>
 80133e2:	f107 0220 	add.w	r2, r7, #32
 80133e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80133ea:	4611      	mov	r1, r2
 80133ec:	4618      	mov	r0, r3
 80133ee:	f000 fd3d 	bl	8013e6c <_ZNSaIN4tama7ContextEEC1ERKS1_>
 80133f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80133f6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80133fa:	f107 0014 	add.w	r0, r7, #20
 80133fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013400:	f000 fdd0 	bl	8013fa4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama7ContextENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
 8013404:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013408:	4618      	mov	r0, r3
 801340a:	f7ff fa52 	bl	80128b2 <_ZNSaIN4tama7ContextEED1Ev>
 801340e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013412:	4618      	mov	r0, r3
 8013414:	f7ff ff7e 	bl	8013314 <_ZNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	  _M_refcount._M_swap(__count);
 8013418:	68fb      	ldr	r3, [r7, #12]
 801341a:	3304      	adds	r3, #4
 801341c:	f107 0214 	add.w	r2, r7, #20
 8013420:	4611      	mov	r1, r2
 8013422:	4618      	mov	r0, r3
 8013424:	f7f0 feac 	bl	8004180 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  _M_ptr = __ptr;
 8013428:	68fb      	ldr	r3, [r7, #12]
 801342a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801342c:	601a      	str	r2, [r3, #0]
	  _M_enable_shared_from_this_with(_M_ptr);
 801342e:	68fb      	ldr	r3, [r7, #12]
 8013430:	681b      	ldr	r3, [r3, #0]
 8013432:	4619      	mov	r1, r3
 8013434:	68f8      	ldr	r0, [r7, #12]
 8013436:	f000 fe0c 	bl	8014052 <_ZNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 801343a:	f107 0314 	add.w	r3, r7, #20
 801343e:	4618      	mov	r0, r3
 8013440:	f7ef fe67 	bl	8003112 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 8013444:	f107 0318 	add.w	r3, r7, #24
 8013448:	4618      	mov	r0, r3
 801344a:	f000 fd30 	bl	8013eae <_ZNSt15__allocated_ptrISaIN4tama7ContextEEED1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 801344e:	f107 0320 	add.w	r3, r7, #32
 8013452:	4618      	mov	r0, r3
 8013454:	f7ff ff5e 	bl	8013314 <_ZNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	}
 8013458:	68fb      	ldr	r3, [r7, #12]
 801345a:	4618      	mov	r0, r3
 801345c:	3734      	adds	r7, #52	; 0x34
 801345e:	46bd      	mov	sp, r7
 8013460:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013462 <_ZSt3getILj0EJPN4tama7DisplayESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>:
    get(const tuple<_Elements...>& __t) noexcept
 8013462:	b580      	push	{r7, lr}
 8013464:	b082      	sub	sp, #8
 8013466:	af00      	add	r7, sp, #0
 8013468:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	4618      	mov	r0, r3
 801346e:	f000 fdfb 	bl	8014068 <_ZSt12__get_helperILj0EPN4tama7DisplayEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>
 8013472:	4603      	mov	r3, r0
 8013474:	4618      	mov	r0, r3
 8013476:	3708      	adds	r7, #8
 8013478:	46bd      	mov	sp, r7
 801347a:	bd80      	pop	{r7, pc}

0801347c <_ZNSt11_Tuple_implILj0EJPN4tama16Nokia5510DisplayESt14default_deleteIS1_EEEC1Ev>:
      constexpr _Tuple_impl()
 801347c:	b580      	push	{r7, lr}
 801347e:	b082      	sub	sp, #8
 8013480:	af00      	add	r7, sp, #0
 8013482:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8013484:	6878      	ldr	r0, [r7, #4]
 8013486:	f000 fdfb 	bl	8014080 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN4tama16Nokia5510DisplayEEEEC1Ev>
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	4618      	mov	r0, r3
 801348e:	f000 fe03 	bl	8014098 <_ZNSt10_Head_baseILj0EPN4tama16Nokia5510DisplayELb0EEC1Ev>
 8013492:	687b      	ldr	r3, [r7, #4]
 8013494:	4618      	mov	r0, r3
 8013496:	3708      	adds	r7, #8
 8013498:	46bd      	mov	sp, r7
 801349a:	bd80      	pop	{r7, pc}

0801349c <_ZNSt11_Tuple_implILj0EJPN4tama16Nokia5510DisplayESt14default_deleteIS1_EEE7_M_headERS5_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801349c:	b580      	push	{r7, lr}
 801349e:	b082      	sub	sp, #8
 80134a0:	af00      	add	r7, sp, #0
 80134a2:	6078      	str	r0, [r7, #4]
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	4618      	mov	r0, r3
 80134a8:	f000 fe04 	bl	80140b4 <_ZNSt10_Head_baseILj0EPN4tama16Nokia5510DisplayELb0EE7_M_headERS3_>
 80134ac:	4603      	mov	r3, r0
 80134ae:	4618      	mov	r0, r3
 80134b0:	3708      	adds	r7, #8
 80134b2:	46bd      	mov	sp, r7
 80134b4:	bd80      	pop	{r7, pc}

080134b6 <_ZSt12__get_helperILj1ESt14default_deleteIN4tama16Nokia5510DisplayEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80134b6:	b580      	push	{r7, lr}
 80134b8:	b082      	sub	sp, #8
 80134ba:	af00      	add	r7, sp, #0
 80134bc:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80134be:	6878      	ldr	r0, [r7, #4]
 80134c0:	f000 fe03 	bl	80140ca <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN4tama16Nokia5510DisplayEEEE7_M_headERS4_>
 80134c4:	4603      	mov	r3, r0
 80134c6:	4618      	mov	r0, r3
 80134c8:	3708      	adds	r7, #8
 80134ca:	46bd      	mov	sp, r7
 80134cc:	bd80      	pop	{r7, pc}

080134ce <_ZSt3getILj0EJPN4tama16Nokia5510DisplayESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>:
    get(const tuple<_Elements...>& __t) noexcept
 80134ce:	b580      	push	{r7, lr}
 80134d0:	b082      	sub	sp, #8
 80134d2:	af00      	add	r7, sp, #0
 80134d4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	4618      	mov	r0, r3
 80134da:	f000 fe02 	bl	80140e2 <_ZSt12__get_helperILj0EPN4tama16Nokia5510DisplayEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>
 80134de:	4603      	mov	r3, r0
 80134e0:	4618      	mov	r0, r3
 80134e2:	3708      	adds	r7, #8
 80134e4:	46bd      	mov	sp, r7
 80134e6:	bd80      	pop	{r7, pc}

080134e8 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN4tama7DisplayEEEEC1IS0_INS1_16Nokia5510DisplayEEEEOT_>:
        constexpr _Tuple_impl(_UHead&& __head)
 80134e8:	b580      	push	{r7, lr}
 80134ea:	b082      	sub	sp, #8
 80134ec:	af00      	add	r7, sp, #0
 80134ee:	6078      	str	r0, [r7, #4]
 80134f0:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head)) { }
 80134f2:	6838      	ldr	r0, [r7, #0]
 80134f4:	f7ff f844 	bl	8012580 <_ZSt7forwardISt14default_deleteIN4tama16Nokia5510DisplayEEEOT_RNSt16remove_referenceIS4_E4typeE>
 80134f8:	4603      	mov	r3, r0
 80134fa:	4619      	mov	r1, r3
 80134fc:	6878      	ldr	r0, [r7, #4]
 80134fe:	f000 fdfc 	bl	80140fa <_ZNSt10_Head_baseILj1ESt14default_deleteIN4tama7DisplayEELb1EEC1IS0_INS1_16Nokia5510DisplayEEEEOT_>
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	4618      	mov	r0, r3
 8013506:	3708      	adds	r7, #8
 8013508:	46bd      	mov	sp, r7
 801350a:	bd80      	pop	{r7, pc}

0801350c <_ZNSt10_Head_baseILj0EPN4tama7DisplayELb0EEC1IRS2_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 801350c:	b580      	push	{r7, lr}
 801350e:	b082      	sub	sp, #8
 8013510:	af00      	add	r7, sp, #0
 8013512:	6078      	str	r0, [r7, #4]
 8013514:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8013516:	6838      	ldr	r0, [r7, #0]
 8013518:	f7ff fa5d 	bl	80129d6 <_ZSt7forwardIRPN4tama7DisplayEEOT_RNSt16remove_referenceIS4_E4typeE>
 801351c:	4603      	mov	r3, r0
 801351e:	681a      	ldr	r2, [r3, #0]
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	601a      	str	r2, [r3, #0]
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	4618      	mov	r0, r3
 8013528:	3708      	adds	r7, #8
 801352a:	46bd      	mov	sp, r7
 801352c:	bd80      	pop	{r7, pc}

0801352e <_ZNSaIN4tama18Stm32TextureLoaderEEC1ERKS1_>:
      allocator(const allocator& __a) throw()
 801352e:	b580      	push	{r7, lr}
 8013530:	b082      	sub	sp, #8
 8013532:	af00      	add	r7, sp, #0
 8013534:	6078      	str	r0, [r7, #4]
 8013536:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8013538:	6839      	ldr	r1, [r7, #0]
 801353a:	6878      	ldr	r0, [r7, #4]
 801353c:	f000 fdef 	bl	801411e <_ZN9__gnu_cxx13new_allocatorIN4tama18Stm32TextureLoaderEEC1ERKS3_>
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	4618      	mov	r0, r3
 8013544:	3708      	adds	r7, #8
 8013546:	46bd      	mov	sp, r7
 8013548:	bd80      	pop	{r7, pc}

0801354a <_ZSt18__allocate_guardedISaIN4tama18Stm32TextureLoaderEEESt15__allocated_ptrIT_ERS4_>:
    __allocate_guarded(_Alloc& __a)
 801354a:	b580      	push	{r7, lr}
 801354c:	b082      	sub	sp, #8
 801354e:	af00      	add	r7, sp, #0
 8013550:	6078      	str	r0, [r7, #4]
 8013552:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 8013554:	2101      	movs	r1, #1
 8013556:	6838      	ldr	r0, [r7, #0]
 8013558:	f000 fded 	bl	8014136 <_ZNSt16allocator_traitsISaIN4tama18Stm32TextureLoaderEEE8allocateERS2_j>
 801355c:	4603      	mov	r3, r0
 801355e:	461a      	mov	r2, r3
 8013560:	6839      	ldr	r1, [r7, #0]
 8013562:	6878      	ldr	r0, [r7, #4]
 8013564:	f000 fdf6 	bl	8014154 <_ZNSt15__allocated_ptrISaIN4tama18Stm32TextureLoaderEEEC1ERS2_PS1_>
    }
 8013568:	6878      	ldr	r0, [r7, #4]
 801356a:	3708      	adds	r7, #8
 801356c:	46bd      	mov	sp, r7
 801356e:	bd80      	pop	{r7, pc}

08013570 <_ZNSt15__allocated_ptrISaIN4tama18Stm32TextureLoaderEEED1Ev>:
      ~__allocated_ptr()
 8013570:	b580      	push	{r7, lr}
 8013572:	b082      	sub	sp, #8
 8013574:	af00      	add	r7, sp, #0
 8013576:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	685b      	ldr	r3, [r3, #4]
 801357c:	2b00      	cmp	r3, #0
 801357e:	d007      	beq.n	8013590 <_ZNSt15__allocated_ptrISaIN4tama18Stm32TextureLoaderEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	6818      	ldr	r0, [r3, #0]
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	685b      	ldr	r3, [r3, #4]
 8013588:	2201      	movs	r2, #1
 801358a:	4619      	mov	r1, r3
 801358c:	f000 fdf6 	bl	801417c <_ZNSt16allocator_traitsISaIN4tama18Stm32TextureLoaderEEE10deallocateERS2_PS1_j>
      }
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	4618      	mov	r0, r3
 8013594:	3708      	adds	r7, #8
 8013596:	46bd      	mov	sp, r7
 8013598:	bd80      	pop	{r7, pc}

0801359a <_ZNSt15__allocated_ptrISaIN4tama18Stm32TextureLoaderEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 801359a:	b580      	push	{r7, lr}
 801359c:	b082      	sub	sp, #8
 801359e:	af00      	add	r7, sp, #0
 80135a0:	6078      	str	r0, [r7, #4]
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	685b      	ldr	r3, [r3, #4]
 80135a6:	4618      	mov	r0, r3
 80135a8:	f000 fdf7 	bl	801419a <_ZNSt15__allocated_ptrISaIN4tama18Stm32TextureLoaderEEE10_S_raw_ptrEPS1_>
 80135ac:	4603      	mov	r3, r0
 80135ae:	4618      	mov	r0, r3
 80135b0:	3708      	adds	r7, #8
 80135b2:	46bd      	mov	sp, r7
 80135b4:	bd80      	pop	{r7, pc}

080135b6 <_ZNSt16allocator_traitsISaIN4tama18Stm32TextureLoaderEEE9constructIS1_JEEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 80135b6:	b580      	push	{r7, lr}
 80135b8:	b082      	sub	sp, #8
 80135ba:	af00      	add	r7, sp, #0
 80135bc:	6078      	str	r0, [r7, #4]
 80135be:	6039      	str	r1, [r7, #0]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 80135c0:	6839      	ldr	r1, [r7, #0]
 80135c2:	6878      	ldr	r0, [r7, #4]
 80135c4:	f000 fdf4 	bl	80141b0 <_ZN9__gnu_cxx13new_allocatorIN4tama18Stm32TextureLoaderEE9constructIS2_JEEEvPT_DpOT0_>
 80135c8:	bf00      	nop
 80135ca:	3708      	adds	r7, #8
 80135cc:	46bd      	mov	sp, r7
 80135ce:	bd80      	pop	{r7, pc}

080135d0 <_ZNSt15__allocated_ptrISaIN4tama18Stm32TextureLoaderEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 80135d0:	b480      	push	{r7}
 80135d2:	b083      	sub	sp, #12
 80135d4:	af00      	add	r7, sp, #0
 80135d6:	6078      	str	r0, [r7, #4]
 80135d8:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	2200      	movs	r2, #0
 80135de:	605a      	str	r2, [r3, #4]
	return *this;
 80135e0:	687b      	ldr	r3, [r7, #4]
      }
 80135e2:	4618      	mov	r0, r3
 80135e4:	370c      	adds	r7, #12
 80135e6:	46bd      	mov	sp, r7
 80135e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135ec:	4770      	bx	lr

080135ee <_ZSt4moveIRNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 80135ee:	b480      	push	{r7}
 80135f0:	b083      	sub	sp, #12
 80135f2:	af00      	add	r7, sp, #0
 80135f4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	4618      	mov	r0, r3
 80135fa:	370c      	adds	r7, #12
 80135fc:	46bd      	mov	sp, r7
 80135fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013602:	4770      	bx	lr

08013604 <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>:
        struct _Deleter
 8013604:	b580      	push	{r7, lr}
 8013606:	b082      	sub	sp, #8
 8013608:	af00      	add	r7, sp, #0
 801360a:	6078      	str	r0, [r7, #4]
 801360c:	6039      	str	r1, [r7, #0]
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	683a      	ldr	r2, [r7, #0]
 8013612:	4611      	mov	r1, r2
 8013614:	4618      	mov	r0, r3
 8013616:	f7ff ff8a 	bl	801352e <_ZNSaIN4tama18Stm32TextureLoaderEEC1ERKS1_>
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	4618      	mov	r0, r3
 801361e:	3708      	adds	r7, #8
 8013620:	46bd      	mov	sp, r7
 8013622:	bd80      	pop	{r7, pc}

08013624 <_ZSt4moveIRSaIN4tama18Stm32TextureLoaderEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8013624:	b480      	push	{r7}
 8013626:	b083      	sub	sp, #12
 8013628:	af00      	add	r7, sp, #0
 801362a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	4618      	mov	r0, r3
 8013630:	370c      	adds	r7, #12
 8013632:	46bd      	mov	sp, r7
 8013634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013638:	4770      	bx	lr

0801363a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
 801363a:	b5b0      	push	{r4, r5, r7, lr}
 801363c:	b08a      	sub	sp, #40	; 0x28
 801363e:	af00      	add	r7, sp, #0
 8013640:	60f8      	str	r0, [r7, #12]
 8013642:	60b9      	str	r1, [r7, #8]
 8013644:	607a      	str	r2, [r7, #4]
 8013646:	603b      	str	r3, [r7, #0]
 8013648:	68fb      	ldr	r3, [r7, #12]
 801364a:	2200      	movs	r2, #0
 801364c:	601a      	str	r2, [r3, #0]
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 801364e:	f107 031c 	add.w	r3, r7, #28
 8013652:	6839      	ldr	r1, [r7, #0]
 8013654:	4618      	mov	r0, r3
 8013656:	f000 fdc1 	bl	80141dc <_ZNSaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	      auto __guard = std::__allocate_guarded(__a2);
 801365a:	f107 0314 	add.w	r3, r7, #20
 801365e:	f107 021c 	add.w	r2, r7, #28
 8013662:	4611      	mov	r1, r2
 8013664:	4618      	mov	r0, r3
 8013666:	f000 fdd2 	bl	801420e <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>
	      _Sp_cd_type* __mem = __guard.get();
 801366a:	f107 0314 	add.w	r3, r7, #20
 801366e:	4618      	mov	r0, r3
 8013670:	f000 fdf5 	bl	801425e <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>
 8013674:	6278      	str	r0, [r7, #36]	; 0x24
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 8013676:	6878      	ldr	r0, [r7, #4]
 8013678:	f7ff ffb9 	bl	80135ee <_ZSt4moveIRNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 801367c:	4602      	mov	r2, r0
 801367e:	f107 0320 	add.w	r3, r7, #32
 8013682:	4611      	mov	r1, r2
 8013684:	4618      	mov	r0, r3
 8013686:	f7ff ffbd 	bl	8013604 <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 801368a:	f107 0420 	add.w	r4, r7, #32
 801368e:	6838      	ldr	r0, [r7, #0]
 8013690:	f7ff ffc8 	bl	8013624 <_ZSt4moveIRSaIN4tama18Stm32TextureLoaderEEEONSt16remove_referenceIT_E4typeEOS5_>
 8013694:	4605      	mov	r5, r0
 8013696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013698:	4619      	mov	r1, r3
 801369a:	2014      	movs	r0, #20
 801369c:	f7ed fccf 	bl	800103e <_ZnwjPv>
 80136a0:	2800      	cmp	r0, #0
 80136a2:	d004      	beq.n	80136ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x74>
 80136a4:	462b      	mov	r3, r5
 80136a6:	4622      	mov	r2, r4
 80136a8:	68b9      	ldr	r1, [r7, #8]
 80136aa:	f000 fe11 	bl	80142d0 <_ZNSt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>
 80136ae:	f107 0320 	add.w	r3, r7, #32
 80136b2:	4618      	mov	r0, r3
 80136b4:	f7ff fb37 	bl	8012d26 <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	      _M_pi = __mem;
 80136b8:	68fb      	ldr	r3, [r7, #12]
 80136ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80136bc:	601a      	str	r2, [r3, #0]
	      __guard = nullptr;
 80136be:	f107 0314 	add.w	r3, r7, #20
 80136c2:	2100      	movs	r1, #0
 80136c4:	4618      	mov	r0, r3
 80136c6:	f000 fe31 	bl	801432c <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>
	      auto __guard = std::__allocate_guarded(__a2);
 80136ca:	f107 0314 	add.w	r3, r7, #20
 80136ce:	4618      	mov	r0, r3
 80136d0:	f000 fdb0 	bl	8014234 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 80136d4:	f107 031c 	add.w	r3, r7, #28
 80136d8:	4618      	mov	r0, r3
 80136da:	f000 fd8c 	bl	80141f6 <_ZNSaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
	}
 80136de:	68fb      	ldr	r3, [r7, #12]
 80136e0:	4618      	mov	r0, r3
 80136e2:	3728      	adds	r7, #40	; 0x28
 80136e4:	46bd      	mov	sp, r7
 80136e6:	bdb0      	pop	{r4, r5, r7, pc}

080136e8 <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 80136e8:	b480      	push	{r7}
 80136ea:	b083      	sub	sp, #12
 80136ec:	af00      	add	r7, sp, #0
 80136ee:	6078      	str	r0, [r7, #4]
 80136f0:	6039      	str	r1, [r7, #0]
	{ }
 80136f2:	bf00      	nop
 80136f4:	370c      	adds	r7, #12
 80136f6:	46bd      	mov	sp, r7
 80136f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136fc:	4770      	bx	lr

080136fe <_ZNSaIN4tama27Nokia5110DisplayDataManagerEEC1ERKS1_>:
      allocator(const allocator& __a) throw()
 80136fe:	b580      	push	{r7, lr}
 8013700:	b082      	sub	sp, #8
 8013702:	af00      	add	r7, sp, #0
 8013704:	6078      	str	r0, [r7, #4]
 8013706:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8013708:	6839      	ldr	r1, [r7, #0]
 801370a:	6878      	ldr	r0, [r7, #4]
 801370c:	f000 fe3d 	bl	801438a <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEEC1ERKS3_>
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	4618      	mov	r0, r3
 8013714:	3708      	adds	r7, #8
 8013716:	46bd      	mov	sp, r7
 8013718:	bd80      	pop	{r7, pc}

0801371a <_ZSt18__allocate_guardedISaIN4tama27Nokia5110DisplayDataManagerEEESt15__allocated_ptrIT_ERS4_>:
    __allocate_guarded(_Alloc& __a)
 801371a:	b580      	push	{r7, lr}
 801371c:	b082      	sub	sp, #8
 801371e:	af00      	add	r7, sp, #0
 8013720:	6078      	str	r0, [r7, #4]
 8013722:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 8013724:	2101      	movs	r1, #1
 8013726:	6838      	ldr	r0, [r7, #0]
 8013728:	f000 fe3b 	bl	80143a2 <_ZNSt16allocator_traitsISaIN4tama27Nokia5110DisplayDataManagerEEE8allocateERS2_j>
 801372c:	4603      	mov	r3, r0
 801372e:	461a      	mov	r2, r3
 8013730:	6839      	ldr	r1, [r7, #0]
 8013732:	6878      	ldr	r0, [r7, #4]
 8013734:	f000 fe44 	bl	80143c0 <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEEC1ERS2_PS1_>
    }
 8013738:	6878      	ldr	r0, [r7, #4]
 801373a:	3708      	adds	r7, #8
 801373c:	46bd      	mov	sp, r7
 801373e:	bd80      	pop	{r7, pc}

08013740 <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEED1Ev>:
      ~__allocated_ptr()
 8013740:	b580      	push	{r7, lr}
 8013742:	b082      	sub	sp, #8
 8013744:	af00      	add	r7, sp, #0
 8013746:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	685b      	ldr	r3, [r3, #4]
 801374c:	2b00      	cmp	r3, #0
 801374e:	d007      	beq.n	8013760 <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	6818      	ldr	r0, [r3, #0]
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	685b      	ldr	r3, [r3, #4]
 8013758:	2201      	movs	r2, #1
 801375a:	4619      	mov	r1, r3
 801375c:	f000 fe44 	bl	80143e8 <_ZNSt16allocator_traitsISaIN4tama27Nokia5110DisplayDataManagerEEE10deallocateERS2_PS1_j>
      }
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	4618      	mov	r0, r3
 8013764:	3708      	adds	r7, #8
 8013766:	46bd      	mov	sp, r7
 8013768:	bd80      	pop	{r7, pc}

0801376a <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 801376a:	b580      	push	{r7, lr}
 801376c:	b082      	sub	sp, #8
 801376e:	af00      	add	r7, sp, #0
 8013770:	6078      	str	r0, [r7, #4]
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	685b      	ldr	r3, [r3, #4]
 8013776:	4618      	mov	r0, r3
 8013778:	f000 fe45 	bl	8014406 <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEE10_S_raw_ptrEPS1_>
 801377c:	4603      	mov	r3, r0
 801377e:	4618      	mov	r0, r3
 8013780:	3708      	adds	r7, #8
 8013782:	46bd      	mov	sp, r7
 8013784:	bd80      	pop	{r7, pc}

08013786 <_ZNSt16allocator_traitsISaIN4tama27Nokia5110DisplayDataManagerEEE9constructIS1_JEEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8013786:	b580      	push	{r7, lr}
 8013788:	b082      	sub	sp, #8
 801378a:	af00      	add	r7, sp, #0
 801378c:	6078      	str	r0, [r7, #4]
 801378e:	6039      	str	r1, [r7, #0]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8013790:	6839      	ldr	r1, [r7, #0]
 8013792:	6878      	ldr	r0, [r7, #4]
 8013794:	f000 fe7c 	bl	8014490 <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEE9constructIS2_JEEEvPT_DpOT0_>
 8013798:	bf00      	nop
 801379a:	3708      	adds	r7, #8
 801379c:	46bd      	mov	sp, r7
 801379e:	bd80      	pop	{r7, pc}

080137a0 <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 80137a0:	b480      	push	{r7}
 80137a2:	b083      	sub	sp, #12
 80137a4:	af00      	add	r7, sp, #0
 80137a6:	6078      	str	r0, [r7, #4]
 80137a8:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	2200      	movs	r2, #0
 80137ae:	605a      	str	r2, [r3, #4]
	return *this;
 80137b0:	687b      	ldr	r3, [r7, #4]
      }
 80137b2:	4618      	mov	r0, r3
 80137b4:	370c      	adds	r7, #12
 80137b6:	46bd      	mov	sp, r7
 80137b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137bc:	4770      	bx	lr

080137be <_ZSt4moveIRNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 80137be:	b480      	push	{r7}
 80137c0:	b083      	sub	sp, #12
 80137c2:	af00      	add	r7, sp, #0
 80137c4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	4618      	mov	r0, r3
 80137ca:	370c      	adds	r7, #12
 80137cc:	46bd      	mov	sp, r7
 80137ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137d2:	4770      	bx	lr

080137d4 <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>:
        struct _Deleter
 80137d4:	b580      	push	{r7, lr}
 80137d6:	b082      	sub	sp, #8
 80137d8:	af00      	add	r7, sp, #0
 80137da:	6078      	str	r0, [r7, #4]
 80137dc:	6039      	str	r1, [r7, #0]
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	683a      	ldr	r2, [r7, #0]
 80137e2:	4611      	mov	r1, r2
 80137e4:	4618      	mov	r0, r3
 80137e6:	f7ff ff8a 	bl	80136fe <_ZNSaIN4tama27Nokia5110DisplayDataManagerEEC1ERKS1_>
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	4618      	mov	r0, r3
 80137ee:	3708      	adds	r7, #8
 80137f0:	46bd      	mov	sp, r7
 80137f2:	bd80      	pop	{r7, pc}

080137f4 <_ZSt4moveIRSaIN4tama27Nokia5110DisplayDataManagerEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80137f4:	b480      	push	{r7}
 80137f6:	b083      	sub	sp, #12
 80137f8:	af00      	add	r7, sp, #0
 80137fa:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	4618      	mov	r0, r3
 8013800:	370c      	adds	r7, #12
 8013802:	46bd      	mov	sp, r7
 8013804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013808:	4770      	bx	lr

0801380a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
 801380a:	b5b0      	push	{r4, r5, r7, lr}
 801380c:	b08a      	sub	sp, #40	; 0x28
 801380e:	af00      	add	r7, sp, #0
 8013810:	60f8      	str	r0, [r7, #12]
 8013812:	60b9      	str	r1, [r7, #8]
 8013814:	607a      	str	r2, [r7, #4]
 8013816:	603b      	str	r3, [r7, #0]
 8013818:	68fb      	ldr	r3, [r7, #12]
 801381a:	2200      	movs	r2, #0
 801381c:	601a      	str	r2, [r3, #0]
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 801381e:	f107 031c 	add.w	r3, r7, #28
 8013822:	6839      	ldr	r1, [r7, #0]
 8013824:	4618      	mov	r0, r3
 8013826:	f000 fe4f 	bl	80144c8 <_ZNSaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	      auto __guard = std::__allocate_guarded(__a2);
 801382a:	f107 0314 	add.w	r3, r7, #20
 801382e:	f107 021c 	add.w	r2, r7, #28
 8013832:	4611      	mov	r1, r2
 8013834:	4618      	mov	r0, r3
 8013836:	f000 fe60 	bl	80144fa <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>
	      _Sp_cd_type* __mem = __guard.get();
 801383a:	f107 0314 	add.w	r3, r7, #20
 801383e:	4618      	mov	r0, r3
 8013840:	f000 fe83 	bl	801454a <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>
 8013844:	6278      	str	r0, [r7, #36]	; 0x24
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 8013846:	6878      	ldr	r0, [r7, #4]
 8013848:	f7ff ffb9 	bl	80137be <_ZSt4moveIRNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 801384c:	4602      	mov	r2, r0
 801384e:	f107 0320 	add.w	r3, r7, #32
 8013852:	4611      	mov	r1, r2
 8013854:	4618      	mov	r0, r3
 8013856:	f7ff ffbd 	bl	80137d4 <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 801385a:	f107 0420 	add.w	r4, r7, #32
 801385e:	6838      	ldr	r0, [r7, #0]
 8013860:	f7ff ffc8 	bl	80137f4 <_ZSt4moveIRSaIN4tama27Nokia5110DisplayDataManagerEEEONSt16remove_referenceIT_E4typeEOS5_>
 8013864:	4605      	mov	r5, r0
 8013866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013868:	4619      	mov	r1, r3
 801386a:	2014      	movs	r0, #20
 801386c:	f7ed fbe7 	bl	800103e <_ZnwjPv>
 8013870:	2800      	cmp	r0, #0
 8013872:	d004      	beq.n	801387e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x74>
 8013874:	462b      	mov	r3, r5
 8013876:	4622      	mov	r2, r4
 8013878:	68b9      	ldr	r1, [r7, #8]
 801387a:	f000 fe9f 	bl	80145bc <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>
 801387e:	f107 0320 	add.w	r3, r7, #32
 8013882:	4618      	mov	r0, r3
 8013884:	f7ff fae2 	bl	8012e4c <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	      _M_pi = __mem;
 8013888:	68fb      	ldr	r3, [r7, #12]
 801388a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801388c:	601a      	str	r2, [r3, #0]
	      __guard = nullptr;
 801388e:	f107 0314 	add.w	r3, r7, #20
 8013892:	2100      	movs	r1, #0
 8013894:	4618      	mov	r0, r3
 8013896:	f000 febf 	bl	8014618 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>
	      auto __guard = std::__allocate_guarded(__a2);
 801389a:	f107 0314 	add.w	r3, r7, #20
 801389e:	4618      	mov	r0, r3
 80138a0:	f000 fe3e 	bl	8014520 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 80138a4:	f107 031c 	add.w	r3, r7, #28
 80138a8:	4618      	mov	r0, r3
 80138aa:	f000 fe1a 	bl	80144e2 <_ZNSaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
	}
 80138ae:	68fb      	ldr	r3, [r7, #12]
 80138b0:	4618      	mov	r0, r3
 80138b2:	3728      	adds	r7, #40	; 0x28
 80138b4:	46bd      	mov	sp, r7
 80138b6:	bdb0      	pop	{r4, r5, r7, pc}

080138b8 <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 80138b8:	b480      	push	{r7}
 80138ba:	b083      	sub	sp, #12
 80138bc:	af00      	add	r7, sp, #0
 80138be:	6078      	str	r0, [r7, #4]
 80138c0:	6039      	str	r1, [r7, #0]
	{ }
 80138c2:	bf00      	nop
 80138c4:	370c      	adds	r7, #12
 80138c6:	46bd      	mov	sp, r7
 80138c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138cc:	4770      	bx	lr

080138ce <_ZNSaIN4tama23Stm32TimeMonitorCreatorEEC1ERKS1_>:
      allocator(const allocator& __a) throw()
 80138ce:	b580      	push	{r7, lr}
 80138d0:	b082      	sub	sp, #8
 80138d2:	af00      	add	r7, sp, #0
 80138d4:	6078      	str	r0, [r7, #4]
 80138d6:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80138d8:	6839      	ldr	r1, [r7, #0]
 80138da:	6878      	ldr	r0, [r7, #4]
 80138dc:	f000 fecb 	bl	8014676 <_ZN9__gnu_cxx13new_allocatorIN4tama23Stm32TimeMonitorCreatorEEC1ERKS3_>
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	4618      	mov	r0, r3
 80138e4:	3708      	adds	r7, #8
 80138e6:	46bd      	mov	sp, r7
 80138e8:	bd80      	pop	{r7, pc}

080138ea <_ZSt18__allocate_guardedISaIN4tama23Stm32TimeMonitorCreatorEEESt15__allocated_ptrIT_ERS4_>:
    __allocate_guarded(_Alloc& __a)
 80138ea:	b580      	push	{r7, lr}
 80138ec:	b082      	sub	sp, #8
 80138ee:	af00      	add	r7, sp, #0
 80138f0:	6078      	str	r0, [r7, #4]
 80138f2:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 80138f4:	2101      	movs	r1, #1
 80138f6:	6838      	ldr	r0, [r7, #0]
 80138f8:	f000 fec9 	bl	801468e <_ZNSt16allocator_traitsISaIN4tama23Stm32TimeMonitorCreatorEEE8allocateERS2_j>
 80138fc:	4603      	mov	r3, r0
 80138fe:	461a      	mov	r2, r3
 8013900:	6839      	ldr	r1, [r7, #0]
 8013902:	6878      	ldr	r0, [r7, #4]
 8013904:	f000 fed2 	bl	80146ac <_ZNSt15__allocated_ptrISaIN4tama23Stm32TimeMonitorCreatorEEEC1ERS2_PS1_>
    }
 8013908:	6878      	ldr	r0, [r7, #4]
 801390a:	3708      	adds	r7, #8
 801390c:	46bd      	mov	sp, r7
 801390e:	bd80      	pop	{r7, pc}

08013910 <_ZNSt15__allocated_ptrISaIN4tama23Stm32TimeMonitorCreatorEEED1Ev>:
      ~__allocated_ptr()
 8013910:	b580      	push	{r7, lr}
 8013912:	b082      	sub	sp, #8
 8013914:	af00      	add	r7, sp, #0
 8013916:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	685b      	ldr	r3, [r3, #4]
 801391c:	2b00      	cmp	r3, #0
 801391e:	d007      	beq.n	8013930 <_ZNSt15__allocated_ptrISaIN4tama23Stm32TimeMonitorCreatorEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	6818      	ldr	r0, [r3, #0]
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	685b      	ldr	r3, [r3, #4]
 8013928:	2201      	movs	r2, #1
 801392a:	4619      	mov	r1, r3
 801392c:	f000 fed2 	bl	80146d4 <_ZNSt16allocator_traitsISaIN4tama23Stm32TimeMonitorCreatorEEE10deallocateERS2_PS1_j>
      }
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	4618      	mov	r0, r3
 8013934:	3708      	adds	r7, #8
 8013936:	46bd      	mov	sp, r7
 8013938:	bd80      	pop	{r7, pc}

0801393a <_ZNSt15__allocated_ptrISaIN4tama23Stm32TimeMonitorCreatorEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 801393a:	b580      	push	{r7, lr}
 801393c:	b082      	sub	sp, #8
 801393e:	af00      	add	r7, sp, #0
 8013940:	6078      	str	r0, [r7, #4]
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	685b      	ldr	r3, [r3, #4]
 8013946:	4618      	mov	r0, r3
 8013948:	f000 fed3 	bl	80146f2 <_ZNSt15__allocated_ptrISaIN4tama23Stm32TimeMonitorCreatorEEE10_S_raw_ptrEPS1_>
 801394c:	4603      	mov	r3, r0
 801394e:	4618      	mov	r0, r3
 8013950:	3708      	adds	r7, #8
 8013952:	46bd      	mov	sp, r7
 8013954:	bd80      	pop	{r7, pc}

08013956 <_ZNSt16allocator_traitsISaIN4tama23Stm32TimeMonitorCreatorEEE9constructIS1_JEEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8013956:	b580      	push	{r7, lr}
 8013958:	b082      	sub	sp, #8
 801395a:	af00      	add	r7, sp, #0
 801395c:	6078      	str	r0, [r7, #4]
 801395e:	6039      	str	r1, [r7, #0]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8013960:	6839      	ldr	r1, [r7, #0]
 8013962:	6878      	ldr	r0, [r7, #4]
 8013964:	f000 fef2 	bl	801474c <_ZN9__gnu_cxx13new_allocatorIN4tama23Stm32TimeMonitorCreatorEE9constructIS2_JEEEvPT_DpOT0_>
 8013968:	bf00      	nop
 801396a:	3708      	adds	r7, #8
 801396c:	46bd      	mov	sp, r7
 801396e:	bd80      	pop	{r7, pc}

08013970 <_ZNSt15__allocated_ptrISaIN4tama23Stm32TimeMonitorCreatorEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 8013970:	b480      	push	{r7}
 8013972:	b083      	sub	sp, #12
 8013974:	af00      	add	r7, sp, #0
 8013976:	6078      	str	r0, [r7, #4]
 8013978:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	2200      	movs	r2, #0
 801397e:	605a      	str	r2, [r3, #4]
	return *this;
 8013980:	687b      	ldr	r3, [r7, #4]
      }
 8013982:	4618      	mov	r0, r3
 8013984:	370c      	adds	r7, #12
 8013986:	46bd      	mov	sp, r7
 8013988:	f85d 7b04 	ldr.w	r7, [sp], #4
 801398c:	4770      	bx	lr

0801398e <_ZSt4moveIRNSt12__shared_ptrIN4tama23Stm32TimeMonitorCreatorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 801398e:	b480      	push	{r7}
 8013990:	b083      	sub	sp, #12
 8013992:	af00      	add	r7, sp, #0
 8013994:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	4618      	mov	r0, r3
 801399a:	370c      	adds	r7, #12
 801399c:	46bd      	mov	sp, r7
 801399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139a2:	4770      	bx	lr

080139a4 <_ZNSt12__shared_ptrIN4tama23Stm32TimeMonitorCreatorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>:
        struct _Deleter
 80139a4:	b580      	push	{r7, lr}
 80139a6:	b082      	sub	sp, #8
 80139a8:	af00      	add	r7, sp, #0
 80139aa:	6078      	str	r0, [r7, #4]
 80139ac:	6039      	str	r1, [r7, #0]
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	683a      	ldr	r2, [r7, #0]
 80139b2:	4611      	mov	r1, r2
 80139b4:	4618      	mov	r0, r3
 80139b6:	f7ff ff8a 	bl	80138ce <_ZNSaIN4tama23Stm32TimeMonitorCreatorEEC1ERKS1_>
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	4618      	mov	r0, r3
 80139be:	3708      	adds	r7, #8
 80139c0:	46bd      	mov	sp, r7
 80139c2:	bd80      	pop	{r7, pc}

080139c4 <_ZSt4moveIRSaIN4tama23Stm32TimeMonitorCreatorEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80139c4:	b480      	push	{r7}
 80139c6:	b083      	sub	sp, #12
 80139c8:	af00      	add	r7, sp, #0
 80139ca:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	4618      	mov	r0, r3
 80139d0:	370c      	adds	r7, #12
 80139d2:	46bd      	mov	sp, r7
 80139d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139d8:	4770      	bx	lr

080139da <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama23Stm32TimeMonitorCreatorENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
 80139da:	b5b0      	push	{r4, r5, r7, lr}
 80139dc:	b08a      	sub	sp, #40	; 0x28
 80139de:	af00      	add	r7, sp, #0
 80139e0:	60f8      	str	r0, [r7, #12]
 80139e2:	60b9      	str	r1, [r7, #8]
 80139e4:	607a      	str	r2, [r7, #4]
 80139e6:	603b      	str	r3, [r7, #0]
 80139e8:	68fb      	ldr	r3, [r7, #12]
 80139ea:	2200      	movs	r2, #0
 80139ec:	601a      	str	r2, [r3, #0]
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 80139ee:	f107 031c 	add.w	r3, r7, #28
 80139f2:	6839      	ldr	r1, [r7, #0]
 80139f4:	4618      	mov	r0, r3
 80139f6:	f000 febf 	bl	8014778 <_ZNSaISt19_Sp_counted_deleterIPN4tama23Stm32TimeMonitorCreatorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	      auto __guard = std::__allocate_guarded(__a2);
 80139fa:	f107 0314 	add.w	r3, r7, #20
 80139fe:	f107 021c 	add.w	r2, r7, #28
 8013a02:	4611      	mov	r1, r2
 8013a04:	4618      	mov	r0, r3
 8013a06:	f000 fed0 	bl	80147aa <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama23Stm32TimeMonitorCreatorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>
	      _Sp_cd_type* __mem = __guard.get();
 8013a0a:	f107 0314 	add.w	r3, r7, #20
 8013a0e:	4618      	mov	r0, r3
 8013a10:	f000 fef3 	bl	80147fa <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama23Stm32TimeMonitorCreatorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>
 8013a14:	6278      	str	r0, [r7, #36]	; 0x24
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 8013a16:	6878      	ldr	r0, [r7, #4]
 8013a18:	f7ff ffb9 	bl	801398e <_ZSt4moveIRNSt12__shared_ptrIN4tama23Stm32TimeMonitorCreatorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8013a1c:	4602      	mov	r2, r0
 8013a1e:	f107 0320 	add.w	r3, r7, #32
 8013a22:	4611      	mov	r1, r2
 8013a24:	4618      	mov	r0, r3
 8013a26:	f7ff ffbd 	bl	80139a4 <_ZNSt12__shared_ptrIN4tama23Stm32TimeMonitorCreatorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 8013a2a:	f107 0420 	add.w	r4, r7, #32
 8013a2e:	6838      	ldr	r0, [r7, #0]
 8013a30:	f7ff ffc8 	bl	80139c4 <_ZSt4moveIRSaIN4tama23Stm32TimeMonitorCreatorEEEONSt16remove_referenceIT_E4typeEOS5_>
 8013a34:	4605      	mov	r5, r0
 8013a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a38:	4619      	mov	r1, r3
 8013a3a:	2014      	movs	r0, #20
 8013a3c:	f7ed faff 	bl	800103e <_ZnwjPv>
 8013a40:	2800      	cmp	r0, #0
 8013a42:	d004      	beq.n	8013a4e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama23Stm32TimeMonitorCreatorENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x74>
 8013a44:	462b      	mov	r3, r5
 8013a46:	4622      	mov	r2, r4
 8013a48:	68b9      	ldr	r1, [r7, #8]
 8013a4a:	f000 ff0f 	bl	801486c <_ZNSt19_Sp_counted_deleterIPN4tama23Stm32TimeMonitorCreatorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>
 8013a4e:	f107 0320 	add.w	r3, r7, #32
 8013a52:	4618      	mov	r0, r3
 8013a54:	f7ff fa8d 	bl	8012f72 <_ZNSt12__shared_ptrIN4tama23Stm32TimeMonitorCreatorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	      _M_pi = __mem;
 8013a58:	68fb      	ldr	r3, [r7, #12]
 8013a5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013a5c:	601a      	str	r2, [r3, #0]
	      __guard = nullptr;
 8013a5e:	f107 0314 	add.w	r3, r7, #20
 8013a62:	2100      	movs	r1, #0
 8013a64:	4618      	mov	r0, r3
 8013a66:	f000 ff2f 	bl	80148c8 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama23Stm32TimeMonitorCreatorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>
	      auto __guard = std::__allocate_guarded(__a2);
 8013a6a:	f107 0314 	add.w	r3, r7, #20
 8013a6e:	4618      	mov	r0, r3
 8013a70:	f000 feae 	bl	80147d0 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama23Stm32TimeMonitorCreatorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 8013a74:	f107 031c 	add.w	r3, r7, #28
 8013a78:	4618      	mov	r0, r3
 8013a7a:	f000 fe8a 	bl	8014792 <_ZNSaISt19_Sp_counted_deleterIPN4tama23Stm32TimeMonitorCreatorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
	}
 8013a7e:	68fb      	ldr	r3, [r7, #12]
 8013a80:	4618      	mov	r0, r3
 8013a82:	3728      	adds	r7, #40	; 0x28
 8013a84:	46bd      	mov	sp, r7
 8013a86:	bdb0      	pop	{r4, r5, r7, pc}

08013a88 <_ZNSt12__shared_ptrIN4tama23Stm32TimeMonitorCreatorELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 8013a88:	b480      	push	{r7}
 8013a8a:	b083      	sub	sp, #12
 8013a8c:	af00      	add	r7, sp, #0
 8013a8e:	6078      	str	r0, [r7, #4]
 8013a90:	6039      	str	r1, [r7, #0]
	{ }
 8013a92:	bf00      	nop
 8013a94:	370c      	adds	r7, #12
 8013a96:	46bd      	mov	sp, r7
 8013a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a9c:	4770      	bx	lr

08013a9e <_ZNSaIN4tama25Stm32SoundPlayingStrategyEEC1ERKS1_>:
      allocator(const allocator& __a) throw()
 8013a9e:	b580      	push	{r7, lr}
 8013aa0:	b082      	sub	sp, #8
 8013aa2:	af00      	add	r7, sp, #0
 8013aa4:	6078      	str	r0, [r7, #4]
 8013aa6:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8013aa8:	6839      	ldr	r1, [r7, #0]
 8013aaa:	6878      	ldr	r0, [r7, #4]
 8013aac:	f000 ff3b 	bl	8014926 <_ZN9__gnu_cxx13new_allocatorIN4tama25Stm32SoundPlayingStrategyEEC1ERKS3_>
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	4618      	mov	r0, r3
 8013ab4:	3708      	adds	r7, #8
 8013ab6:	46bd      	mov	sp, r7
 8013ab8:	bd80      	pop	{r7, pc}

08013aba <_ZSt18__allocate_guardedISaIN4tama25Stm32SoundPlayingStrategyEEESt15__allocated_ptrIT_ERS4_>:
    __allocate_guarded(_Alloc& __a)
 8013aba:	b580      	push	{r7, lr}
 8013abc:	b082      	sub	sp, #8
 8013abe:	af00      	add	r7, sp, #0
 8013ac0:	6078      	str	r0, [r7, #4]
 8013ac2:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 8013ac4:	2101      	movs	r1, #1
 8013ac6:	6838      	ldr	r0, [r7, #0]
 8013ac8:	f000 ff39 	bl	801493e <_ZNSt16allocator_traitsISaIN4tama25Stm32SoundPlayingStrategyEEE8allocateERS2_j>
 8013acc:	4603      	mov	r3, r0
 8013ace:	461a      	mov	r2, r3
 8013ad0:	6839      	ldr	r1, [r7, #0]
 8013ad2:	6878      	ldr	r0, [r7, #4]
 8013ad4:	f000 ff42 	bl	801495c <_ZNSt15__allocated_ptrISaIN4tama25Stm32SoundPlayingStrategyEEEC1ERS2_PS1_>
    }
 8013ad8:	6878      	ldr	r0, [r7, #4]
 8013ada:	3708      	adds	r7, #8
 8013adc:	46bd      	mov	sp, r7
 8013ade:	bd80      	pop	{r7, pc}

08013ae0 <_ZNSt15__allocated_ptrISaIN4tama25Stm32SoundPlayingStrategyEEED1Ev>:
      ~__allocated_ptr()
 8013ae0:	b580      	push	{r7, lr}
 8013ae2:	b082      	sub	sp, #8
 8013ae4:	af00      	add	r7, sp, #0
 8013ae6:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	685b      	ldr	r3, [r3, #4]
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	d007      	beq.n	8013b00 <_ZNSt15__allocated_ptrISaIN4tama25Stm32SoundPlayingStrategyEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	6818      	ldr	r0, [r3, #0]
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	685b      	ldr	r3, [r3, #4]
 8013af8:	2201      	movs	r2, #1
 8013afa:	4619      	mov	r1, r3
 8013afc:	f000 ff42 	bl	8014984 <_ZNSt16allocator_traitsISaIN4tama25Stm32SoundPlayingStrategyEEE10deallocateERS2_PS1_j>
      }
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	4618      	mov	r0, r3
 8013b04:	3708      	adds	r7, #8
 8013b06:	46bd      	mov	sp, r7
 8013b08:	bd80      	pop	{r7, pc}

08013b0a <_ZNSt15__allocated_ptrISaIN4tama25Stm32SoundPlayingStrategyEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 8013b0a:	b580      	push	{r7, lr}
 8013b0c:	b082      	sub	sp, #8
 8013b0e:	af00      	add	r7, sp, #0
 8013b10:	6078      	str	r0, [r7, #4]
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	685b      	ldr	r3, [r3, #4]
 8013b16:	4618      	mov	r0, r3
 8013b18:	f000 ff43 	bl	80149a2 <_ZNSt15__allocated_ptrISaIN4tama25Stm32SoundPlayingStrategyEEE10_S_raw_ptrEPS1_>
 8013b1c:	4603      	mov	r3, r0
 8013b1e:	4618      	mov	r0, r3
 8013b20:	3708      	adds	r7, #8
 8013b22:	46bd      	mov	sp, r7
 8013b24:	bd80      	pop	{r7, pc}

08013b26 <_ZNSt16allocator_traitsISaIN4tama25Stm32SoundPlayingStrategyEEE9constructIS1_JEEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8013b26:	b580      	push	{r7, lr}
 8013b28:	b082      	sub	sp, #8
 8013b2a:	af00      	add	r7, sp, #0
 8013b2c:	6078      	str	r0, [r7, #4]
 8013b2e:	6039      	str	r1, [r7, #0]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8013b30:	6839      	ldr	r1, [r7, #0]
 8013b32:	6878      	ldr	r0, [r7, #4]
 8013b34:	f000 ff62 	bl	80149fc <_ZN9__gnu_cxx13new_allocatorIN4tama25Stm32SoundPlayingStrategyEE9constructIS2_JEEEvPT_DpOT0_>
 8013b38:	bf00      	nop
 8013b3a:	3708      	adds	r7, #8
 8013b3c:	46bd      	mov	sp, r7
 8013b3e:	bd80      	pop	{r7, pc}

08013b40 <_ZNSt15__allocated_ptrISaIN4tama25Stm32SoundPlayingStrategyEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 8013b40:	b480      	push	{r7}
 8013b42:	b083      	sub	sp, #12
 8013b44:	af00      	add	r7, sp, #0
 8013b46:	6078      	str	r0, [r7, #4]
 8013b48:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	2200      	movs	r2, #0
 8013b4e:	605a      	str	r2, [r3, #4]
	return *this;
 8013b50:	687b      	ldr	r3, [r7, #4]
      }
 8013b52:	4618      	mov	r0, r3
 8013b54:	370c      	adds	r7, #12
 8013b56:	46bd      	mov	sp, r7
 8013b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b5c:	4770      	bx	lr

08013b5e <_ZSt4moveIRNSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 8013b5e:	b480      	push	{r7}
 8013b60:	b083      	sub	sp, #12
 8013b62:	af00      	add	r7, sp, #0
 8013b64:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	4618      	mov	r0, r3
 8013b6a:	370c      	adds	r7, #12
 8013b6c:	46bd      	mov	sp, r7
 8013b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b72:	4770      	bx	lr

08013b74 <_ZNSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>:
        struct _Deleter
 8013b74:	b580      	push	{r7, lr}
 8013b76:	b082      	sub	sp, #8
 8013b78:	af00      	add	r7, sp, #0
 8013b7a:	6078      	str	r0, [r7, #4]
 8013b7c:	6039      	str	r1, [r7, #0]
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	683a      	ldr	r2, [r7, #0]
 8013b82:	4611      	mov	r1, r2
 8013b84:	4618      	mov	r0, r3
 8013b86:	f7ff ff8a 	bl	8013a9e <_ZNSaIN4tama25Stm32SoundPlayingStrategyEEC1ERKS1_>
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	4618      	mov	r0, r3
 8013b8e:	3708      	adds	r7, #8
 8013b90:	46bd      	mov	sp, r7
 8013b92:	bd80      	pop	{r7, pc}

08013b94 <_ZSt4moveIRSaIN4tama25Stm32SoundPlayingStrategyEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8013b94:	b480      	push	{r7}
 8013b96:	b083      	sub	sp, #12
 8013b98:	af00      	add	r7, sp, #0
 8013b9a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	4618      	mov	r0, r3
 8013ba0:	370c      	adds	r7, #12
 8013ba2:	46bd      	mov	sp, r7
 8013ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ba8:	4770      	bx	lr

08013baa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
 8013baa:	b5b0      	push	{r4, r5, r7, lr}
 8013bac:	b08a      	sub	sp, #40	; 0x28
 8013bae:	af00      	add	r7, sp, #0
 8013bb0:	60f8      	str	r0, [r7, #12]
 8013bb2:	60b9      	str	r1, [r7, #8]
 8013bb4:	607a      	str	r2, [r7, #4]
 8013bb6:	603b      	str	r3, [r7, #0]
 8013bb8:	68fb      	ldr	r3, [r7, #12]
 8013bba:	2200      	movs	r2, #0
 8013bbc:	601a      	str	r2, [r3, #0]
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 8013bbe:	f107 031c 	add.w	r3, r7, #28
 8013bc2:	6839      	ldr	r1, [r7, #0]
 8013bc4:	4618      	mov	r0, r3
 8013bc6:	f000 ff2f 	bl	8014a28 <_ZNSaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	      auto __guard = std::__allocate_guarded(__a2);
 8013bca:	f107 0314 	add.w	r3, r7, #20
 8013bce:	f107 021c 	add.w	r2, r7, #28
 8013bd2:	4611      	mov	r1, r2
 8013bd4:	4618      	mov	r0, r3
 8013bd6:	f000 ff40 	bl	8014a5a <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>
	      _Sp_cd_type* __mem = __guard.get();
 8013bda:	f107 0314 	add.w	r3, r7, #20
 8013bde:	4618      	mov	r0, r3
 8013be0:	f000 ff63 	bl	8014aaa <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>
 8013be4:	6278      	str	r0, [r7, #36]	; 0x24
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 8013be6:	6878      	ldr	r0, [r7, #4]
 8013be8:	f7ff ffb9 	bl	8013b5e <_ZSt4moveIRNSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8013bec:	4602      	mov	r2, r0
 8013bee:	f107 0320 	add.w	r3, r7, #32
 8013bf2:	4611      	mov	r1, r2
 8013bf4:	4618      	mov	r0, r3
 8013bf6:	f7ff ffbd 	bl	8013b74 <_ZNSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 8013bfa:	f107 0420 	add.w	r4, r7, #32
 8013bfe:	6838      	ldr	r0, [r7, #0]
 8013c00:	f7ff ffc8 	bl	8013b94 <_ZSt4moveIRSaIN4tama25Stm32SoundPlayingStrategyEEEONSt16remove_referenceIT_E4typeEOS5_>
 8013c04:	4605      	mov	r5, r0
 8013c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c08:	4619      	mov	r1, r3
 8013c0a:	2014      	movs	r0, #20
 8013c0c:	f7ed fa17 	bl	800103e <_ZnwjPv>
 8013c10:	2800      	cmp	r0, #0
 8013c12:	d004      	beq.n	8013c1e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x74>
 8013c14:	462b      	mov	r3, r5
 8013c16:	4622      	mov	r2, r4
 8013c18:	68b9      	ldr	r1, [r7, #8]
 8013c1a:	f000 ff7f 	bl	8014b1c <_ZNSt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>
 8013c1e:	f107 0320 	add.w	r3, r7, #32
 8013c22:	4618      	mov	r0, r3
 8013c24:	f7ff fa38 	bl	8013098 <_ZNSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	      _M_pi = __mem;
 8013c28:	68fb      	ldr	r3, [r7, #12]
 8013c2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013c2c:	601a      	str	r2, [r3, #0]
	      __guard = nullptr;
 8013c2e:	f107 0314 	add.w	r3, r7, #20
 8013c32:	2100      	movs	r1, #0
 8013c34:	4618      	mov	r0, r3
 8013c36:	f000 ff9f 	bl	8014b78 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>
	      auto __guard = std::__allocate_guarded(__a2);
 8013c3a:	f107 0314 	add.w	r3, r7, #20
 8013c3e:	4618      	mov	r0, r3
 8013c40:	f000 ff1e 	bl	8014a80 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 8013c44:	f107 031c 	add.w	r3, r7, #28
 8013c48:	4618      	mov	r0, r3
 8013c4a:	f000 fefa 	bl	8014a42 <_ZNSaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
	}
 8013c4e:	68fb      	ldr	r3, [r7, #12]
 8013c50:	4618      	mov	r0, r3
 8013c52:	3728      	adds	r7, #40	; 0x28
 8013c54:	46bd      	mov	sp, r7
 8013c56:	bdb0      	pop	{r4, r5, r7, pc}

08013c58 <_ZNSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 8013c58:	b480      	push	{r7}
 8013c5a:	b083      	sub	sp, #12
 8013c5c:	af00      	add	r7, sp, #0
 8013c5e:	6078      	str	r0, [r7, #4]
 8013c60:	6039      	str	r1, [r7, #0]
	{ }
 8013c62:	bf00      	nop
 8013c64:	370c      	adds	r7, #12
 8013c66:	46bd      	mov	sp, r7
 8013c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c6c:	4770      	bx	lr

08013c6e <_ZNSaIN4tama10Stm32InputEEC1ERKS1_>:
      allocator(const allocator& __a) throw()
 8013c6e:	b580      	push	{r7, lr}
 8013c70:	b082      	sub	sp, #8
 8013c72:	af00      	add	r7, sp, #0
 8013c74:	6078      	str	r0, [r7, #4]
 8013c76:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8013c78:	6839      	ldr	r1, [r7, #0]
 8013c7a:	6878      	ldr	r0, [r7, #4]
 8013c7c:	f000 ffab 	bl	8014bd6 <_ZN9__gnu_cxx13new_allocatorIN4tama10Stm32InputEEC1ERKS3_>
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	4618      	mov	r0, r3
 8013c84:	3708      	adds	r7, #8
 8013c86:	46bd      	mov	sp, r7
 8013c88:	bd80      	pop	{r7, pc}

08013c8a <_ZSt18__allocate_guardedISaIN4tama10Stm32InputEEESt15__allocated_ptrIT_ERS4_>:
    __allocate_guarded(_Alloc& __a)
 8013c8a:	b580      	push	{r7, lr}
 8013c8c:	b082      	sub	sp, #8
 8013c8e:	af00      	add	r7, sp, #0
 8013c90:	6078      	str	r0, [r7, #4]
 8013c92:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 8013c94:	2101      	movs	r1, #1
 8013c96:	6838      	ldr	r0, [r7, #0]
 8013c98:	f000 ffa9 	bl	8014bee <_ZNSt16allocator_traitsISaIN4tama10Stm32InputEEE8allocateERS2_j>
 8013c9c:	4603      	mov	r3, r0
 8013c9e:	461a      	mov	r2, r3
 8013ca0:	6839      	ldr	r1, [r7, #0]
 8013ca2:	6878      	ldr	r0, [r7, #4]
 8013ca4:	f000 ffb2 	bl	8014c0c <_ZNSt15__allocated_ptrISaIN4tama10Stm32InputEEEC1ERS2_PS1_>
    }
 8013ca8:	6878      	ldr	r0, [r7, #4]
 8013caa:	3708      	adds	r7, #8
 8013cac:	46bd      	mov	sp, r7
 8013cae:	bd80      	pop	{r7, pc}

08013cb0 <_ZNSt15__allocated_ptrISaIN4tama10Stm32InputEEED1Ev>:
      ~__allocated_ptr()
 8013cb0:	b580      	push	{r7, lr}
 8013cb2:	b082      	sub	sp, #8
 8013cb4:	af00      	add	r7, sp, #0
 8013cb6:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	685b      	ldr	r3, [r3, #4]
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	d007      	beq.n	8013cd0 <_ZNSt15__allocated_ptrISaIN4tama10Stm32InputEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	6818      	ldr	r0, [r3, #0]
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	685b      	ldr	r3, [r3, #4]
 8013cc8:	2201      	movs	r2, #1
 8013cca:	4619      	mov	r1, r3
 8013ccc:	f000 ffb2 	bl	8014c34 <_ZNSt16allocator_traitsISaIN4tama10Stm32InputEEE10deallocateERS2_PS1_j>
      }
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	4618      	mov	r0, r3
 8013cd4:	3708      	adds	r7, #8
 8013cd6:	46bd      	mov	sp, r7
 8013cd8:	bd80      	pop	{r7, pc}

08013cda <_ZNSt15__allocated_ptrISaIN4tama10Stm32InputEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 8013cda:	b580      	push	{r7, lr}
 8013cdc:	b082      	sub	sp, #8
 8013cde:	af00      	add	r7, sp, #0
 8013ce0:	6078      	str	r0, [r7, #4]
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	685b      	ldr	r3, [r3, #4]
 8013ce6:	4618      	mov	r0, r3
 8013ce8:	f000 ffb3 	bl	8014c52 <_ZNSt15__allocated_ptrISaIN4tama10Stm32InputEEE10_S_raw_ptrEPS1_>
 8013cec:	4603      	mov	r3, r0
 8013cee:	4618      	mov	r0, r3
 8013cf0:	3708      	adds	r7, #8
 8013cf2:	46bd      	mov	sp, r7
 8013cf4:	bd80      	pop	{r7, pc}

08013cf6 <_ZNSt16allocator_traitsISaIN4tama10Stm32InputEEE9constructIS1_JEEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8013cf6:	b580      	push	{r7, lr}
 8013cf8:	b082      	sub	sp, #8
 8013cfa:	af00      	add	r7, sp, #0
 8013cfc:	6078      	str	r0, [r7, #4]
 8013cfe:	6039      	str	r1, [r7, #0]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8013d00:	6839      	ldr	r1, [r7, #0]
 8013d02:	6878      	ldr	r0, [r7, #4]
 8013d04:	f000 fff0 	bl	8014ce8 <_ZN9__gnu_cxx13new_allocatorIN4tama10Stm32InputEE9constructIS2_JEEEvPT_DpOT0_>
 8013d08:	bf00      	nop
 8013d0a:	3708      	adds	r7, #8
 8013d0c:	46bd      	mov	sp, r7
 8013d0e:	bd80      	pop	{r7, pc}

08013d10 <_ZNSt15__allocated_ptrISaIN4tama10Stm32InputEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 8013d10:	b480      	push	{r7}
 8013d12:	b083      	sub	sp, #12
 8013d14:	af00      	add	r7, sp, #0
 8013d16:	6078      	str	r0, [r7, #4]
 8013d18:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	2200      	movs	r2, #0
 8013d1e:	605a      	str	r2, [r3, #4]
	return *this;
 8013d20:	687b      	ldr	r3, [r7, #4]
      }
 8013d22:	4618      	mov	r0, r3
 8013d24:	370c      	adds	r7, #12
 8013d26:	46bd      	mov	sp, r7
 8013d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d2c:	4770      	bx	lr

08013d2e <_ZSt4moveIRNSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 8013d2e:	b480      	push	{r7}
 8013d30:	b083      	sub	sp, #12
 8013d32:	af00      	add	r7, sp, #0
 8013d34:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	4618      	mov	r0, r3
 8013d3a:	370c      	adds	r7, #12
 8013d3c:	46bd      	mov	sp, r7
 8013d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d42:	4770      	bx	lr

08013d44 <_ZNSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>:
        struct _Deleter
 8013d44:	b580      	push	{r7, lr}
 8013d46:	b082      	sub	sp, #8
 8013d48:	af00      	add	r7, sp, #0
 8013d4a:	6078      	str	r0, [r7, #4]
 8013d4c:	6039      	str	r1, [r7, #0]
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	683a      	ldr	r2, [r7, #0]
 8013d52:	4611      	mov	r1, r2
 8013d54:	4618      	mov	r0, r3
 8013d56:	f7ff ff8a 	bl	8013c6e <_ZNSaIN4tama10Stm32InputEEC1ERKS1_>
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	4618      	mov	r0, r3
 8013d5e:	3708      	adds	r7, #8
 8013d60:	46bd      	mov	sp, r7
 8013d62:	bd80      	pop	{r7, pc}

08013d64 <_ZSt4moveIRSaIN4tama10Stm32InputEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8013d64:	b480      	push	{r7}
 8013d66:	b083      	sub	sp, #12
 8013d68:	af00      	add	r7, sp, #0
 8013d6a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	4618      	mov	r0, r3
 8013d70:	370c      	adds	r7, #12
 8013d72:	46bd      	mov	sp, r7
 8013d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d78:	4770      	bx	lr

08013d7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama10Stm32InputENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
 8013d7a:	b5b0      	push	{r4, r5, r7, lr}
 8013d7c:	b08a      	sub	sp, #40	; 0x28
 8013d7e:	af00      	add	r7, sp, #0
 8013d80:	60f8      	str	r0, [r7, #12]
 8013d82:	60b9      	str	r1, [r7, #8]
 8013d84:	607a      	str	r2, [r7, #4]
 8013d86:	603b      	str	r3, [r7, #0]
 8013d88:	68fb      	ldr	r3, [r7, #12]
 8013d8a:	2200      	movs	r2, #0
 8013d8c:	601a      	str	r2, [r3, #0]
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 8013d8e:	f107 031c 	add.w	r3, r7, #28
 8013d92:	6839      	ldr	r1, [r7, #0]
 8013d94:	4618      	mov	r0, r3
 8013d96:	f000 ffc3 	bl	8014d20 <_ZNSaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	      auto __guard = std::__allocate_guarded(__a2);
 8013d9a:	f107 0314 	add.w	r3, r7, #20
 8013d9e:	f107 021c 	add.w	r2, r7, #28
 8013da2:	4611      	mov	r1, r2
 8013da4:	4618      	mov	r0, r3
 8013da6:	f000 ffd4 	bl	8014d52 <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>
	      _Sp_cd_type* __mem = __guard.get();
 8013daa:	f107 0314 	add.w	r3, r7, #20
 8013dae:	4618      	mov	r0, r3
 8013db0:	f000 fff7 	bl	8014da2 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>
 8013db4:	6278      	str	r0, [r7, #36]	; 0x24
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 8013db6:	6878      	ldr	r0, [r7, #4]
 8013db8:	f7ff ffb9 	bl	8013d2e <_ZSt4moveIRNSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8013dbc:	4602      	mov	r2, r0
 8013dbe:	f107 0320 	add.w	r3, r7, #32
 8013dc2:	4611      	mov	r1, r2
 8013dc4:	4618      	mov	r0, r3
 8013dc6:	f7ff ffbd 	bl	8013d44 <_ZNSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 8013dca:	f107 0420 	add.w	r4, r7, #32
 8013dce:	6838      	ldr	r0, [r7, #0]
 8013dd0:	f7ff ffc8 	bl	8013d64 <_ZSt4moveIRSaIN4tama10Stm32InputEEEONSt16remove_referenceIT_E4typeEOS5_>
 8013dd4:	4605      	mov	r5, r0
 8013dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dd8:	4619      	mov	r1, r3
 8013dda:	2014      	movs	r0, #20
 8013ddc:	f7ed f92f 	bl	800103e <_ZnwjPv>
 8013de0:	2800      	cmp	r0, #0
 8013de2:	d004      	beq.n	8013dee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama10Stm32InputENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x74>
 8013de4:	462b      	mov	r3, r5
 8013de6:	4622      	mov	r2, r4
 8013de8:	68b9      	ldr	r1, [r7, #8]
 8013dea:	f001 f813 	bl	8014e14 <_ZNSt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>
 8013dee:	f107 0320 	add.w	r3, r7, #32
 8013df2:	4618      	mov	r0, r3
 8013df4:	f7ff f9e3 	bl	80131be <_ZNSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	      _M_pi = __mem;
 8013df8:	68fb      	ldr	r3, [r7, #12]
 8013dfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013dfc:	601a      	str	r2, [r3, #0]
	      __guard = nullptr;
 8013dfe:	f107 0314 	add.w	r3, r7, #20
 8013e02:	2100      	movs	r1, #0
 8013e04:	4618      	mov	r0, r3
 8013e06:	f001 f833 	bl	8014e70 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>
	      auto __guard = std::__allocate_guarded(__a2);
 8013e0a:	f107 0314 	add.w	r3, r7, #20
 8013e0e:	4618      	mov	r0, r3
 8013e10:	f000 ffb2 	bl	8014d78 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 8013e14:	f107 031c 	add.w	r3, r7, #28
 8013e18:	4618      	mov	r0, r3
 8013e1a:	f000 ff8e 	bl	8014d3a <_ZNSaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
	}
 8013e1e:	68fb      	ldr	r3, [r7, #12]
 8013e20:	4618      	mov	r0, r3
 8013e22:	3728      	adds	r7, #40	; 0x28
 8013e24:	46bd      	mov	sp, r7
 8013e26:	bdb0      	pop	{r4, r5, r7, pc}

08013e28 <_ZNSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 8013e28:	b480      	push	{r7}
 8013e2a:	b083      	sub	sp, #12
 8013e2c:	af00      	add	r7, sp, #0
 8013e2e:	6078      	str	r0, [r7, #4]
 8013e30:	6039      	str	r1, [r7, #0]
	{ }
 8013e32:	bf00      	nop
 8013e34:	370c      	adds	r7, #12
 8013e36:	46bd      	mov	sp, r7
 8013e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e3c:	4770      	bx	lr
	...

08013e40 <_ZNSt15_Sp_counted_ptrIPN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0EEC1ES2_>:
      _Sp_counted_ptr(_Ptr __p) noexcept
 8013e40:	b580      	push	{r7, lr}
 8013e42:	b082      	sub	sp, #8
 8013e44:	af00      	add	r7, sp, #0
 8013e46:	6078      	str	r0, [r7, #4]
 8013e48:	6039      	str	r1, [r7, #0]
      : _M_ptr(__p) { }
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	4618      	mov	r0, r3
 8013e4e:	f7f0 fc7b 	bl	8004748 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8013e52:	4a05      	ldr	r2, [pc, #20]	; (8013e68 <_ZNSt15_Sp_counted_ptrIPN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0EEC1ES2_+0x28>)
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	601a      	str	r2, [r3, #0]
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	683a      	ldr	r2, [r7, #0]
 8013e5c:	60da      	str	r2, [r3, #12]
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	4618      	mov	r0, r3
 8013e62:	3708      	adds	r7, #8
 8013e64:	46bd      	mov	sp, r7
 8013e66:	bd80      	pop	{r7, pc}
 8013e68:	080248c4 	.word	0x080248c4

08013e6c <_ZNSaIN4tama7ContextEEC1ERKS1_>:
      allocator(const allocator& __a) throw()
 8013e6c:	b580      	push	{r7, lr}
 8013e6e:	b082      	sub	sp, #8
 8013e70:	af00      	add	r7, sp, #0
 8013e72:	6078      	str	r0, [r7, #4]
 8013e74:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8013e76:	6839      	ldr	r1, [r7, #0]
 8013e78:	6878      	ldr	r0, [r7, #4]
 8013e7a:	f001 f828 	bl	8014ece <_ZN9__gnu_cxx13new_allocatorIN4tama7ContextEEC1ERKS3_>
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	4618      	mov	r0, r3
 8013e82:	3708      	adds	r7, #8
 8013e84:	46bd      	mov	sp, r7
 8013e86:	bd80      	pop	{r7, pc}

08013e88 <_ZSt18__allocate_guardedISaIN4tama7ContextEEESt15__allocated_ptrIT_ERS4_>:
    __allocate_guarded(_Alloc& __a)
 8013e88:	b580      	push	{r7, lr}
 8013e8a:	b082      	sub	sp, #8
 8013e8c:	af00      	add	r7, sp, #0
 8013e8e:	6078      	str	r0, [r7, #4]
 8013e90:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 8013e92:	2101      	movs	r1, #1
 8013e94:	6838      	ldr	r0, [r7, #0]
 8013e96:	f001 f826 	bl	8014ee6 <_ZNSt16allocator_traitsISaIN4tama7ContextEEE8allocateERS2_j>
 8013e9a:	4603      	mov	r3, r0
 8013e9c:	461a      	mov	r2, r3
 8013e9e:	6839      	ldr	r1, [r7, #0]
 8013ea0:	6878      	ldr	r0, [r7, #4]
 8013ea2:	f001 f82f 	bl	8014f04 <_ZNSt15__allocated_ptrISaIN4tama7ContextEEEC1ERS2_PS1_>
    }
 8013ea6:	6878      	ldr	r0, [r7, #4]
 8013ea8:	3708      	adds	r7, #8
 8013eaa:	46bd      	mov	sp, r7
 8013eac:	bd80      	pop	{r7, pc}

08013eae <_ZNSt15__allocated_ptrISaIN4tama7ContextEEED1Ev>:
      ~__allocated_ptr()
 8013eae:	b580      	push	{r7, lr}
 8013eb0:	b082      	sub	sp, #8
 8013eb2:	af00      	add	r7, sp, #0
 8013eb4:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8013eb6:	687b      	ldr	r3, [r7, #4]
 8013eb8:	685b      	ldr	r3, [r3, #4]
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	d007      	beq.n	8013ece <_ZNSt15__allocated_ptrISaIN4tama7ContextEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	6818      	ldr	r0, [r3, #0]
 8013ec2:	687b      	ldr	r3, [r7, #4]
 8013ec4:	685b      	ldr	r3, [r3, #4]
 8013ec6:	2201      	movs	r2, #1
 8013ec8:	4619      	mov	r1, r3
 8013eca:	f001 f82f 	bl	8014f2c <_ZNSt16allocator_traitsISaIN4tama7ContextEEE10deallocateERS2_PS1_j>
      }
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	4618      	mov	r0, r3
 8013ed2:	3708      	adds	r7, #8
 8013ed4:	46bd      	mov	sp, r7
 8013ed6:	bd80      	pop	{r7, pc}

08013ed8 <_ZNSt15__allocated_ptrISaIN4tama7ContextEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 8013ed8:	b580      	push	{r7, lr}
 8013eda:	b082      	sub	sp, #8
 8013edc:	af00      	add	r7, sp, #0
 8013ede:	6078      	str	r0, [r7, #4]
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	685b      	ldr	r3, [r3, #4]
 8013ee4:	4618      	mov	r0, r3
 8013ee6:	f001 f830 	bl	8014f4a <_ZNSt15__allocated_ptrISaIN4tama7ContextEEE10_S_raw_ptrEPS1_>
 8013eea:	4603      	mov	r3, r0
 8013eec:	4618      	mov	r0, r3
 8013eee:	3708      	adds	r7, #8
 8013ef0:	46bd      	mov	sp, r7
 8013ef2:	bd80      	pop	{r7, pc}

08013ef4 <_ZNSt16allocator_traitsISaIN4tama7ContextEEE9constructIS1_JRSt10shared_ptrINS0_13TextureLoaderEERS5_INS0_5InputEES5_INS0_11SoundPlayerEERS5_INS0_18TimeMonitorCreatorEEEEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8013ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013ef6:	b087      	sub	sp, #28
 8013ef8:	af02      	add	r7, sp, #8
 8013efa:	60f8      	str	r0, [r7, #12]
 8013efc:	60b9      	str	r1, [r7, #8]
 8013efe:	607a      	str	r2, [r7, #4]
 8013f00:	603b      	str	r3, [r7, #0]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8013f02:	6878      	ldr	r0, [r7, #4]
 8013f04:	f7fe fa74 	bl	80123f0 <_ZSt7forwardIRSt10shared_ptrIN4tama13TextureLoaderEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8013f08:	4605      	mov	r5, r0
 8013f0a:	6838      	ldr	r0, [r7, #0]
 8013f0c:	f7fe fa7b 	bl	8012406 <_ZSt7forwardIRSt10shared_ptrIN4tama5InputEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8013f10:	4606      	mov	r6, r0
 8013f12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013f14:	f7fe fa82 	bl	801241c <_ZSt7forwardISt10shared_ptrIN4tama11SoundPlayerEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8013f18:	4604      	mov	r4, r0
 8013f1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013f1c:	f7fe fa89 	bl	8012432 <_ZSt7forwardIRSt10shared_ptrIN4tama18TimeMonitorCreatorEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8013f20:	4603      	mov	r3, r0
 8013f22:	9301      	str	r3, [sp, #4]
 8013f24:	9400      	str	r4, [sp, #0]
 8013f26:	4633      	mov	r3, r6
 8013f28:	462a      	mov	r2, r5
 8013f2a:	68b9      	ldr	r1, [r7, #8]
 8013f2c:	68f8      	ldr	r0, [r7, #12]
 8013f2e:	f001 f817 	bl	8014f60 <_ZN9__gnu_cxx13new_allocatorIN4tama7ContextEE9constructIS2_JRSt10shared_ptrINS1_13TextureLoaderEERS5_INS1_5InputEES5_INS1_11SoundPlayerEERS5_INS1_18TimeMonitorCreatorEEEEEvPT_DpOT0_>
 8013f32:	bf00      	nop
 8013f34:	3714      	adds	r7, #20
 8013f36:	46bd      	mov	sp, r7
 8013f38:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013f3a <_ZNSt15__allocated_ptrISaIN4tama7ContextEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 8013f3a:	b480      	push	{r7}
 8013f3c:	b083      	sub	sp, #12
 8013f3e:	af00      	add	r7, sp, #0
 8013f40:	6078      	str	r0, [r7, #4]
 8013f42:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	2200      	movs	r2, #0
 8013f48:	605a      	str	r2, [r3, #4]
	return *this;
 8013f4a:	687b      	ldr	r3, [r7, #4]
      }
 8013f4c:	4618      	mov	r0, r3
 8013f4e:	370c      	adds	r7, #12
 8013f50:	46bd      	mov	sp, r7
 8013f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f56:	4770      	bx	lr

08013f58 <_ZSt4moveIRNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 8013f58:	b480      	push	{r7}
 8013f5a:	b083      	sub	sp, #12
 8013f5c:	af00      	add	r7, sp, #0
 8013f5e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	4618      	mov	r0, r3
 8013f64:	370c      	adds	r7, #12
 8013f66:	46bd      	mov	sp, r7
 8013f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f6c:	4770      	bx	lr

08013f6e <_ZNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>:
        struct _Deleter
 8013f6e:	b580      	push	{r7, lr}
 8013f70:	b082      	sub	sp, #8
 8013f72:	af00      	add	r7, sp, #0
 8013f74:	6078      	str	r0, [r7, #4]
 8013f76:	6039      	str	r1, [r7, #0]
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	683a      	ldr	r2, [r7, #0]
 8013f7c:	4611      	mov	r1, r2
 8013f7e:	4618      	mov	r0, r3
 8013f80:	f7ff ff74 	bl	8013e6c <_ZNSaIN4tama7ContextEEC1ERKS1_>
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	4618      	mov	r0, r3
 8013f88:	3708      	adds	r7, #8
 8013f8a:	46bd      	mov	sp, r7
 8013f8c:	bd80      	pop	{r7, pc}

08013f8e <_ZSt4moveIRSaIN4tama7ContextEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8013f8e:	b480      	push	{r7}
 8013f90:	b083      	sub	sp, #12
 8013f92:	af00      	add	r7, sp, #0
 8013f94:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	4618      	mov	r0, r3
 8013f9a:	370c      	adds	r7, #12
 8013f9c:	46bd      	mov	sp, r7
 8013f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fa2:	4770      	bx	lr

08013fa4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama7ContextENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
 8013fa4:	b5b0      	push	{r4, r5, r7, lr}
 8013fa6:	b08a      	sub	sp, #40	; 0x28
 8013fa8:	af00      	add	r7, sp, #0
 8013faa:	60f8      	str	r0, [r7, #12]
 8013fac:	60b9      	str	r1, [r7, #8]
 8013fae:	607a      	str	r2, [r7, #4]
 8013fb0:	603b      	str	r3, [r7, #0]
 8013fb2:	68fb      	ldr	r3, [r7, #12]
 8013fb4:	2200      	movs	r2, #0
 8013fb6:	601a      	str	r2, [r3, #0]
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 8013fb8:	f107 031c 	add.w	r3, r7, #28
 8013fbc:	6839      	ldr	r1, [r7, #0]
 8013fbe:	4618      	mov	r0, r3
 8013fc0:	f001 f82c 	bl	801501c <_ZNSaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	      auto __guard = std::__allocate_guarded(__a2);
 8013fc4:	f107 0314 	add.w	r3, r7, #20
 8013fc8:	f107 021c 	add.w	r2, r7, #28
 8013fcc:	4611      	mov	r1, r2
 8013fce:	4618      	mov	r0, r3
 8013fd0:	f001 f83d 	bl	801504e <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>
	      _Sp_cd_type* __mem = __guard.get();
 8013fd4:	f107 0314 	add.w	r3, r7, #20
 8013fd8:	4618      	mov	r0, r3
 8013fda:	f001 f860 	bl	801509e <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>
 8013fde:	6278      	str	r0, [r7, #36]	; 0x24
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 8013fe0:	6878      	ldr	r0, [r7, #4]
 8013fe2:	f7ff ffb9 	bl	8013f58 <_ZSt4moveIRNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8013fe6:	4602      	mov	r2, r0
 8013fe8:	f107 0320 	add.w	r3, r7, #32
 8013fec:	4611      	mov	r1, r2
 8013fee:	4618      	mov	r0, r3
 8013ff0:	f7ff ffbd 	bl	8013f6e <_ZNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 8013ff4:	f107 0420 	add.w	r4, r7, #32
 8013ff8:	6838      	ldr	r0, [r7, #0]
 8013ffa:	f7ff ffc8 	bl	8013f8e <_ZSt4moveIRSaIN4tama7ContextEEEONSt16remove_referenceIT_E4typeEOS5_>
 8013ffe:	4605      	mov	r5, r0
 8014000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014002:	4619      	mov	r1, r3
 8014004:	2014      	movs	r0, #20
 8014006:	f7ed f81a 	bl	800103e <_ZnwjPv>
 801400a:	2800      	cmp	r0, #0
 801400c:	d004      	beq.n	8014018 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama7ContextENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x74>
 801400e:	462b      	mov	r3, r5
 8014010:	4622      	mov	r2, r4
 8014012:	68b9      	ldr	r1, [r7, #8]
 8014014:	f001 f87c 	bl	8015110 <_ZNSt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>
 8014018:	f107 0320 	add.w	r3, r7, #32
 801401c:	4618      	mov	r0, r3
 801401e:	f7ff f979 	bl	8013314 <_ZNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	      _M_pi = __mem;
 8014022:	68fb      	ldr	r3, [r7, #12]
 8014024:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014026:	601a      	str	r2, [r3, #0]
	      __guard = nullptr;
 8014028:	f107 0314 	add.w	r3, r7, #20
 801402c:	2100      	movs	r1, #0
 801402e:	4618      	mov	r0, r3
 8014030:	f001 f89c 	bl	801516c <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>
	      auto __guard = std::__allocate_guarded(__a2);
 8014034:	f107 0314 	add.w	r3, r7, #20
 8014038:	4618      	mov	r0, r3
 801403a:	f001 f81b 	bl	8015074 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 801403e:	f107 031c 	add.w	r3, r7, #28
 8014042:	4618      	mov	r0, r3
 8014044:	f000 fff7 	bl	8015036 <_ZNSaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
	}
 8014048:	68fb      	ldr	r3, [r7, #12]
 801404a:	4618      	mov	r0, r3
 801404c:	3728      	adds	r7, #40	; 0x28
 801404e:	46bd      	mov	sp, r7
 8014050:	bdb0      	pop	{r4, r5, r7, pc}

08014052 <_ZNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 8014052:	b480      	push	{r7}
 8014054:	b083      	sub	sp, #12
 8014056:	af00      	add	r7, sp, #0
 8014058:	6078      	str	r0, [r7, #4]
 801405a:	6039      	str	r1, [r7, #0]
	{ }
 801405c:	bf00      	nop
 801405e:	370c      	adds	r7, #12
 8014060:	46bd      	mov	sp, r7
 8014062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014066:	4770      	bx	lr

08014068 <_ZSt12__get_helperILj0EPN4tama7DisplayEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8014068:	b580      	push	{r7, lr}
 801406a:	b082      	sub	sp, #8
 801406c:	af00      	add	r7, sp, #0
 801406e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8014070:	6878      	ldr	r0, [r7, #4]
 8014072:	f001 f8aa 	bl	80151ca <_ZNSt11_Tuple_implILj0EJPN4tama7DisplayESt14default_deleteIS1_EEE7_M_headERKS5_>
 8014076:	4603      	mov	r3, r0
 8014078:	4618      	mov	r0, r3
 801407a:	3708      	adds	r7, #8
 801407c:	46bd      	mov	sp, r7
 801407e:	bd80      	pop	{r7, pc}

08014080 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN4tama16Nokia5510DisplayEEEEC1Ev>:
      constexpr _Tuple_impl()
 8014080:	b580      	push	{r7, lr}
 8014082:	b082      	sub	sp, #8
 8014084:	af00      	add	r7, sp, #0
 8014086:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8014088:	6878      	ldr	r0, [r7, #4]
 801408a:	f001 f8ab 	bl	80151e4 <_ZNSt10_Head_baseILj1ESt14default_deleteIN4tama16Nokia5510DisplayEELb1EEC1Ev>
 801408e:	687b      	ldr	r3, [r7, #4]
 8014090:	4618      	mov	r0, r3
 8014092:	3708      	adds	r7, #8
 8014094:	46bd      	mov	sp, r7
 8014096:	bd80      	pop	{r7, pc}

08014098 <_ZNSt10_Head_baseILj0EPN4tama16Nokia5510DisplayELb0EEC1Ev>:
      constexpr _Head_base()
 8014098:	b480      	push	{r7}
 801409a:	b083      	sub	sp, #12
 801409c:	af00      	add	r7, sp, #0
 801409e:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	2200      	movs	r2, #0
 80140a4:	601a      	str	r2, [r3, #0]
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	4618      	mov	r0, r3
 80140aa:	370c      	adds	r7, #12
 80140ac:	46bd      	mov	sp, r7
 80140ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140b2:	4770      	bx	lr

080140b4 <_ZNSt10_Head_baseILj0EPN4tama16Nokia5510DisplayELb0EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80140b4:	b480      	push	{r7}
 80140b6:	b083      	sub	sp, #12
 80140b8:	af00      	add	r7, sp, #0
 80140ba:	6078      	str	r0, [r7, #4]
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	4618      	mov	r0, r3
 80140c0:	370c      	adds	r7, #12
 80140c2:	46bd      	mov	sp, r7
 80140c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140c8:	4770      	bx	lr

080140ca <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN4tama16Nokia5510DisplayEEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80140ca:	b580      	push	{r7, lr}
 80140cc:	b082      	sub	sp, #8
 80140ce:	af00      	add	r7, sp, #0
 80140d0:	6078      	str	r0, [r7, #4]
 80140d2:	6878      	ldr	r0, [r7, #4]
 80140d4:	f001 f891 	bl	80151fa <_ZNSt10_Head_baseILj1ESt14default_deleteIN4tama16Nokia5510DisplayEELb1EE7_M_headERS4_>
 80140d8:	4603      	mov	r3, r0
 80140da:	4618      	mov	r0, r3
 80140dc:	3708      	adds	r7, #8
 80140de:	46bd      	mov	sp, r7
 80140e0:	bd80      	pop	{r7, pc}

080140e2 <_ZSt12__get_helperILj0EPN4tama16Nokia5510DisplayEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80140e2:	b580      	push	{r7, lr}
 80140e4:	b082      	sub	sp, #8
 80140e6:	af00      	add	r7, sp, #0
 80140e8:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80140ea:	6878      	ldr	r0, [r7, #4]
 80140ec:	f001 f890 	bl	8015210 <_ZNSt11_Tuple_implILj0EJPN4tama16Nokia5510DisplayESt14default_deleteIS1_EEE7_M_headERKS5_>
 80140f0:	4603      	mov	r3, r0
 80140f2:	4618      	mov	r0, r3
 80140f4:	3708      	adds	r7, #8
 80140f6:	46bd      	mov	sp, r7
 80140f8:	bd80      	pop	{r7, pc}

080140fa <_ZNSt10_Head_baseILj1ESt14default_deleteIN4tama7DisplayEELb1EEC1IS0_INS1_16Nokia5510DisplayEEEEOT_>:
        constexpr _Head_base(_UHead&& __h)
 80140fa:	b580      	push	{r7, lr}
 80140fc:	b082      	sub	sp, #8
 80140fe:	af00      	add	r7, sp, #0
 8014100:	6078      	str	r0, [r7, #4]
 8014102:	6039      	str	r1, [r7, #0]
	: _Head(std::forward<_UHead>(__h)) { }
 8014104:	6838      	ldr	r0, [r7, #0]
 8014106:	f7fe fa3b 	bl	8012580 <_ZSt7forwardISt14default_deleteIN4tama16Nokia5510DisplayEEEOT_RNSt16remove_referenceIS4_E4typeE>
 801410a:	4603      	mov	r3, r0
 801410c:	4619      	mov	r1, r3
 801410e:	6878      	ldr	r0, [r7, #4]
 8014110:	f001 f88b 	bl	801522a <_ZNSt14default_deleteIN4tama7DisplayEEC1INS0_16Nokia5510DisplayEvEERKS_IT_E>
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	4618      	mov	r0, r3
 8014118:	3708      	adds	r7, #8
 801411a:	46bd      	mov	sp, r7
 801411c:	bd80      	pop	{r7, pc}

0801411e <_ZN9__gnu_cxx13new_allocatorIN4tama18Stm32TextureLoaderEEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 801411e:	b480      	push	{r7}
 8014120:	b083      	sub	sp, #12
 8014122:	af00      	add	r7, sp, #0
 8014124:	6078      	str	r0, [r7, #4]
 8014126:	6039      	str	r1, [r7, #0]
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	4618      	mov	r0, r3
 801412c:	370c      	adds	r7, #12
 801412e:	46bd      	mov	sp, r7
 8014130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014134:	4770      	bx	lr

08014136 <_ZNSt16allocator_traitsISaIN4tama18Stm32TextureLoaderEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8014136:	b580      	push	{r7, lr}
 8014138:	b082      	sub	sp, #8
 801413a:	af00      	add	r7, sp, #0
 801413c:	6078      	str	r0, [r7, #4]
 801413e:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8014140:	2200      	movs	r2, #0
 8014142:	6839      	ldr	r1, [r7, #0]
 8014144:	6878      	ldr	r0, [r7, #4]
 8014146:	f001 f87c 	bl	8015242 <_ZN9__gnu_cxx13new_allocatorIN4tama18Stm32TextureLoaderEE8allocateEjPKv>
 801414a:	4603      	mov	r3, r0
 801414c:	4618      	mov	r0, r3
 801414e:	3708      	adds	r7, #8
 8014150:	46bd      	mov	sp, r7
 8014152:	bd80      	pop	{r7, pc}

08014154 <_ZNSt15__allocated_ptrISaIN4tama18Stm32TextureLoaderEEEC1ERS2_PS1_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8014154:	b580      	push	{r7, lr}
 8014156:	b084      	sub	sp, #16
 8014158:	af00      	add	r7, sp, #0
 801415a:	60f8      	str	r0, [r7, #12]
 801415c:	60b9      	str	r1, [r7, #8]
 801415e:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8014160:	68b8      	ldr	r0, [r7, #8]
 8014162:	f001 f88c 	bl	801527e <_ZSt11__addressofISaIN4tama18Stm32TextureLoaderEEEPT_RS3_>
 8014166:	4602      	mov	r2, r0
 8014168:	68fb      	ldr	r3, [r7, #12]
 801416a:	601a      	str	r2, [r3, #0]
 801416c:	68fb      	ldr	r3, [r7, #12]
 801416e:	687a      	ldr	r2, [r7, #4]
 8014170:	605a      	str	r2, [r3, #4]
      { }
 8014172:	68fb      	ldr	r3, [r7, #12]
 8014174:	4618      	mov	r0, r3
 8014176:	3710      	adds	r7, #16
 8014178:	46bd      	mov	sp, r7
 801417a:	bd80      	pop	{r7, pc}

0801417c <_ZNSt16allocator_traitsISaIN4tama18Stm32TextureLoaderEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 801417c:	b580      	push	{r7, lr}
 801417e:	b084      	sub	sp, #16
 8014180:	af00      	add	r7, sp, #0
 8014182:	60f8      	str	r0, [r7, #12]
 8014184:	60b9      	str	r1, [r7, #8]
 8014186:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8014188:	687a      	ldr	r2, [r7, #4]
 801418a:	68b9      	ldr	r1, [r7, #8]
 801418c:	68f8      	ldr	r0, [r7, #12]
 801418e:	f001 f881 	bl	8015294 <_ZN9__gnu_cxx13new_allocatorIN4tama18Stm32TextureLoaderEE10deallocateEPS2_j>
 8014192:	bf00      	nop
 8014194:	3710      	adds	r7, #16
 8014196:	46bd      	mov	sp, r7
 8014198:	bd80      	pop	{r7, pc}

0801419a <_ZNSt15__allocated_ptrISaIN4tama18Stm32TextureLoaderEEE10_S_raw_ptrEPS1_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 801419a:	b480      	push	{r7}
 801419c:	b083      	sub	sp, #12
 801419e:	af00      	add	r7, sp, #0
 80141a0:	6078      	str	r0, [r7, #4]
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	4618      	mov	r0, r3
 80141a6:	370c      	adds	r7, #12
 80141a8:	46bd      	mov	sp, r7
 80141aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141ae:	4770      	bx	lr

080141b0 <_ZN9__gnu_cxx13new_allocatorIN4tama18Stm32TextureLoaderEE9constructIS2_JEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80141b0:	b580      	push	{r7, lr}
 80141b2:	b082      	sub	sp, #8
 80141b4:	af00      	add	r7, sp, #0
 80141b6:	6078      	str	r0, [r7, #4]
 80141b8:	6039      	str	r1, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80141ba:	683b      	ldr	r3, [r7, #0]
 80141bc:	4619      	mov	r1, r3
 80141be:	2004      	movs	r0, #4
 80141c0:	f7ec ff3d 	bl	800103e <_ZnwjPv>
 80141c4:	4603      	mov	r3, r0
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	d004      	beq.n	80141d4 <_ZN9__gnu_cxx13new_allocatorIN4tama18Stm32TextureLoaderEE9constructIS2_JEEEvPT_DpOT0_+0x24>
 80141ca:	2200      	movs	r2, #0
 80141cc:	601a      	str	r2, [r3, #0]
 80141ce:	4618      	mov	r0, r3
 80141d0:	f7fb fb62 	bl	800f898 <_ZN4tama18Stm32TextureLoaderC1Ev>
 80141d4:	bf00      	nop
 80141d6:	3708      	adds	r7, #8
 80141d8:	46bd      	mov	sp, r7
 80141da:	bd80      	pop	{r7, pc}

080141dc <_ZNSaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) throw() { }
 80141dc:	b580      	push	{r7, lr}
 80141de:	b082      	sub	sp, #8
 80141e0:	af00      	add	r7, sp, #0
 80141e2:	6078      	str	r0, [r7, #4]
 80141e4:	6039      	str	r1, [r7, #0]
 80141e6:	6878      	ldr	r0, [r7, #4]
 80141e8:	f001 f861 	bl	80152ae <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	4618      	mov	r0, r3
 80141f0:	3708      	adds	r7, #8
 80141f2:	46bd      	mov	sp, r7
 80141f4:	bd80      	pop	{r7, pc}

080141f6 <_ZNSaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>:
      ~allocator() throw() { }
 80141f6:	b580      	push	{r7, lr}
 80141f8:	b082      	sub	sp, #8
 80141fa:	af00      	add	r7, sp, #0
 80141fc:	6078      	str	r0, [r7, #4]
 80141fe:	6878      	ldr	r0, [r7, #4]
 8014200:	f001 f860 	bl	80152c4 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	4618      	mov	r0, r3
 8014208:	3708      	adds	r7, #8
 801420a:	46bd      	mov	sp, r7
 801420c:	bd80      	pop	{r7, pc}

0801420e <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>:
    __allocate_guarded(_Alloc& __a)
 801420e:	b580      	push	{r7, lr}
 8014210:	b082      	sub	sp, #8
 8014212:	af00      	add	r7, sp, #0
 8014214:	6078      	str	r0, [r7, #4]
 8014216:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 8014218:	2101      	movs	r1, #1
 801421a:	6838      	ldr	r0, [r7, #0]
 801421c:	f001 f85d 	bl	80152da <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>
 8014220:	4603      	mov	r3, r0
 8014222:	461a      	mov	r2, r3
 8014224:	6839      	ldr	r1, [r7, #0]
 8014226:	6878      	ldr	r0, [r7, #4]
 8014228:	f001 f866 	bl	80152f8 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
    }
 801422c:	6878      	ldr	r0, [r7, #4]
 801422e:	3708      	adds	r7, #8
 8014230:	46bd      	mov	sp, r7
 8014232:	bd80      	pop	{r7, pc}

08014234 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>:
      ~__allocated_ptr()
 8014234:	b580      	push	{r7, lr}
 8014236:	b082      	sub	sp, #8
 8014238:	af00      	add	r7, sp, #0
 801423a:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	685b      	ldr	r3, [r3, #4]
 8014240:	2b00      	cmp	r3, #0
 8014242:	d007      	beq.n	8014254 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	6818      	ldr	r0, [r3, #0]
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	685b      	ldr	r3, [r3, #4]
 801424c:	2201      	movs	r2, #1
 801424e:	4619      	mov	r1, r3
 8014250:	f001 f866 	bl	8015320 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>
      }
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	4618      	mov	r0, r3
 8014258:	3708      	adds	r7, #8
 801425a:	46bd      	mov	sp, r7
 801425c:	bd80      	pop	{r7, pc}

0801425e <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 801425e:	b580      	push	{r7, lr}
 8014260:	b082      	sub	sp, #8
 8014262:	af00      	add	r7, sp, #0
 8014264:	6078      	str	r0, [r7, #4]
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	685b      	ldr	r3, [r3, #4]
 801426a:	4618      	mov	r0, r3
 801426c:	f001 f867 	bl	801533e <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>
 8014270:	4603      	mov	r3, r0
 8014272:	4618      	mov	r0, r3
 8014274:	3708      	adds	r7, #8
 8014276:	46bd      	mov	sp, r7
 8014278:	bd80      	pop	{r7, pc}

0801427a <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, false>
 801427a:	b580      	push	{r7, lr}
 801427c:	b082      	sub	sp, #8
 801427e:	af00      	add	r7, sp, #0
 8014280:	6078      	str	r0, [r7, #4]
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	4618      	mov	r0, r3
 8014286:	f7fe fd4e 	bl	8012d26 <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	4618      	mov	r0, r3
 801428e:	3708      	adds	r7, #8
 8014290:	46bd      	mov	sp, r7
 8014292:	bd80      	pop	{r7, pc}

08014294 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama18Stm32TextureLoaderEELb1EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp
 8014294:	b580      	push	{r7, lr}
 8014296:	b082      	sub	sp, #8
 8014298:	af00      	add	r7, sp, #0
 801429a:	6078      	str	r0, [r7, #4]
 801429c:	6878      	ldr	r0, [r7, #4]
 801429e:	f7fe f99c 	bl	80125da <_ZNSaIN4tama18Stm32TextureLoaderEED1Ev>
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	4618      	mov	r0, r3
 80142a6:	3708      	adds	r7, #8
 80142a8:	46bd      	mov	sp, r7
 80142aa:	bd80      	pop	{r7, pc}

080142ac <_ZNSt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>:
      class _Impl : _Sp_ebo_helper<0, _Deleter>, _Sp_ebo_helper<1, _Alloc>
 80142ac:	b580      	push	{r7, lr}
 80142ae:	b082      	sub	sp, #8
 80142b0:	af00      	add	r7, sp, #0
 80142b2:	6078      	str	r0, [r7, #4]
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	3301      	adds	r3, #1
 80142b8:	4618      	mov	r0, r3
 80142ba:	f7ff ffeb 	bl	8014294 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama18Stm32TextureLoaderEELb1EED1Ev>
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	4618      	mov	r0, r3
 80142c2:	f7ff ffda 	bl	801427a <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>
 80142c6:	687b      	ldr	r3, [r7, #4]
 80142c8:	4618      	mov	r0, r3
 80142ca:	3708      	adds	r7, #8
 80142cc:	46bd      	mov	sp, r7
 80142ce:	bd80      	pop	{r7, pc}

080142d0 <_ZNSt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 80142d0:	b590      	push	{r4, r7, lr}
 80142d2:	b087      	sub	sp, #28
 80142d4:	af00      	add	r7, sp, #0
 80142d6:	60f8      	str	r0, [r7, #12]
 80142d8:	60b9      	str	r1, [r7, #8]
 80142da:	607a      	str	r2, [r7, #4]
 80142dc:	603b      	str	r3, [r7, #0]
      : _M_impl(__p, std::move(__d), __a) { }
 80142de:	68fb      	ldr	r3, [r7, #12]
 80142e0:	4618      	mov	r0, r3
 80142e2:	f7f0 fa31 	bl	8004748 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 80142e6:	4a10      	ldr	r2, [pc, #64]	; (8014328 <_ZNSt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_+0x58>)
 80142e8:	68fb      	ldr	r3, [r7, #12]
 80142ea:	601a      	str	r2, [r3, #0]
 80142ec:	68fb      	ldr	r3, [r7, #12]
 80142ee:	f103 040c 	add.w	r4, r3, #12
 80142f2:	6878      	ldr	r0, [r7, #4]
 80142f4:	f7ff f97b 	bl	80135ee <_ZSt4moveIRNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 80142f8:	4602      	mov	r2, r0
 80142fa:	f107 0314 	add.w	r3, r7, #20
 80142fe:	4611      	mov	r1, r2
 8014300:	4618      	mov	r0, r3
 8014302:	f7ff f97f 	bl	8013604 <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 8014306:	f107 0214 	add.w	r2, r7, #20
 801430a:	683b      	ldr	r3, [r7, #0]
 801430c:	68b9      	ldr	r1, [r7, #8]
 801430e:	4620      	mov	r0, r4
 8014310:	f001 f820 	bl	8015354 <_ZNSt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>
 8014314:	f107 0314 	add.w	r3, r7, #20
 8014318:	4618      	mov	r0, r3
 801431a:	f7fe fd04 	bl	8012d26 <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 801431e:	68fb      	ldr	r3, [r7, #12]
 8014320:	4618      	mov	r0, r3
 8014322:	371c      	adds	r7, #28
 8014324:	46bd      	mov	sp, r7
 8014326:	bd90      	pop	{r4, r7, pc}
 8014328:	080248a8 	.word	0x080248a8

0801432c <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 801432c:	b480      	push	{r7}
 801432e:	b083      	sub	sp, #12
 8014330:	af00      	add	r7, sp, #0
 8014332:	6078      	str	r0, [r7, #4]
 8014334:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	2200      	movs	r2, #0
 801433a:	605a      	str	r2, [r3, #4]
	return *this;
 801433c:	687b      	ldr	r3, [r7, #4]
      }
 801433e:	4618      	mov	r0, r3
 8014340:	370c      	adds	r7, #12
 8014342:	46bd      	mov	sp, r7
 8014344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014348:	4770      	bx	lr

0801434a <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>:
          void operator()(typename _Alloc::value_type* __ptr)
 801434a:	b590      	push	{r4, r7, lr}
 801434c:	b085      	sub	sp, #20
 801434e:	af00      	add	r7, sp, #0
 8014350:	6078      	str	r0, [r7, #4]
 8014352:	6039      	str	r1, [r7, #0]
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 8014354:	6879      	ldr	r1, [r7, #4]
 8014356:	f107 0308 	add.w	r3, r7, #8
 801435a:	683a      	ldr	r2, [r7, #0]
 801435c:	4618      	mov	r0, r3
 801435e:	f7ff fef9 	bl	8014154 <_ZNSt15__allocated_ptrISaIN4tama18Stm32TextureLoaderEEEC1ERS2_PS1_>
	    allocator_traits<_Alloc>::destroy(_M_alloc, __guard.get());
 8014362:	687c      	ldr	r4, [r7, #4]
 8014364:	f107 0308 	add.w	r3, r7, #8
 8014368:	4618      	mov	r0, r3
 801436a:	f7ff f916 	bl	801359a <_ZNSt15__allocated_ptrISaIN4tama18Stm32TextureLoaderEEE3getEv>
 801436e:	4603      	mov	r3, r0
 8014370:	4619      	mov	r1, r3
 8014372:	4620      	mov	r0, r4
 8014374:	f001 f80c 	bl	8015390 <_ZNSt16allocator_traitsISaIN4tama18Stm32TextureLoaderEEE7destroyIS1_EEvRS2_PT_>
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 8014378:	f107 0308 	add.w	r3, r7, #8
 801437c:	4618      	mov	r0, r3
 801437e:	f7ff f8f7 	bl	8013570 <_ZNSt15__allocated_ptrISaIN4tama18Stm32TextureLoaderEEED1Ev>
          }
 8014382:	bf00      	nop
 8014384:	3714      	adds	r7, #20
 8014386:	46bd      	mov	sp, r7
 8014388:	bd90      	pop	{r4, r7, pc}

0801438a <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 801438a:	b480      	push	{r7}
 801438c:	b083      	sub	sp, #12
 801438e:	af00      	add	r7, sp, #0
 8014390:	6078      	str	r0, [r7, #4]
 8014392:	6039      	str	r1, [r7, #0]
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	4618      	mov	r0, r3
 8014398:	370c      	adds	r7, #12
 801439a:	46bd      	mov	sp, r7
 801439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143a0:	4770      	bx	lr

080143a2 <_ZNSt16allocator_traitsISaIN4tama27Nokia5110DisplayDataManagerEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 80143a2:	b580      	push	{r7, lr}
 80143a4:	b082      	sub	sp, #8
 80143a6:	af00      	add	r7, sp, #0
 80143a8:	6078      	str	r0, [r7, #4]
 80143aa:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80143ac:	2200      	movs	r2, #0
 80143ae:	6839      	ldr	r1, [r7, #0]
 80143b0:	6878      	ldr	r0, [r7, #4]
 80143b2:	f000 fffa 	bl	80153aa <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEE8allocateEjPKv>
 80143b6:	4603      	mov	r3, r0
 80143b8:	4618      	mov	r0, r3
 80143ba:	3708      	adds	r7, #8
 80143bc:	46bd      	mov	sp, r7
 80143be:	bd80      	pop	{r7, pc}

080143c0 <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEEC1ERS2_PS1_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 80143c0:	b580      	push	{r7, lr}
 80143c2:	b084      	sub	sp, #16
 80143c4:	af00      	add	r7, sp, #0
 80143c6:	60f8      	str	r0, [r7, #12]
 80143c8:	60b9      	str	r1, [r7, #8]
 80143ca:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 80143cc:	68b8      	ldr	r0, [r7, #8]
 80143ce:	f001 f80d 	bl	80153ec <_ZSt11__addressofISaIN4tama27Nokia5110DisplayDataManagerEEEPT_RS3_>
 80143d2:	4602      	mov	r2, r0
 80143d4:	68fb      	ldr	r3, [r7, #12]
 80143d6:	601a      	str	r2, [r3, #0]
 80143d8:	68fb      	ldr	r3, [r7, #12]
 80143da:	687a      	ldr	r2, [r7, #4]
 80143dc:	605a      	str	r2, [r3, #4]
      { }
 80143de:	68fb      	ldr	r3, [r7, #12]
 80143e0:	4618      	mov	r0, r3
 80143e2:	3710      	adds	r7, #16
 80143e4:	46bd      	mov	sp, r7
 80143e6:	bd80      	pop	{r7, pc}

080143e8 <_ZNSt16allocator_traitsISaIN4tama27Nokia5110DisplayDataManagerEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80143e8:	b580      	push	{r7, lr}
 80143ea:	b084      	sub	sp, #16
 80143ec:	af00      	add	r7, sp, #0
 80143ee:	60f8      	str	r0, [r7, #12]
 80143f0:	60b9      	str	r1, [r7, #8]
 80143f2:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80143f4:	687a      	ldr	r2, [r7, #4]
 80143f6:	68b9      	ldr	r1, [r7, #8]
 80143f8:	68f8      	ldr	r0, [r7, #12]
 80143fa:	f001 f802 	bl	8015402 <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEE10deallocateEPS2_j>
 80143fe:	bf00      	nop
 8014400:	3710      	adds	r7, #16
 8014402:	46bd      	mov	sp, r7
 8014404:	bd80      	pop	{r7, pc}

08014406 <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEE10_S_raw_ptrEPS1_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 8014406:	b480      	push	{r7}
 8014408:	b083      	sub	sp, #12
 801440a:	af00      	add	r7, sp, #0
 801440c:	6078      	str	r0, [r7, #4]
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	4618      	mov	r0, r3
 8014412:	370c      	adds	r7, #12
 8014414:	46bd      	mov	sp, r7
 8014416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801441a:	4770      	bx	lr

0801441c <_ZN4tama18DisplayDataManagerC1Ev>:

#include "../display-data/DisplayData.h"

namespace tama
{
    class DisplayDataManager
 801441c:	b480      	push	{r7}
 801441e:	b083      	sub	sp, #12
 8014420:	af00      	add	r7, sp, #0
 8014422:	6078      	str	r0, [r7, #4]
 8014424:	4a04      	ldr	r2, [pc, #16]	; (8014438 <_ZN4tama18DisplayDataManagerC1Ev+0x1c>)
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	601a      	str	r2, [r3, #0]
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	4618      	mov	r0, r3
 801442e:	370c      	adds	r7, #12
 8014430:	46bd      	mov	sp, r7
 8014432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014436:	4770      	bx	lr
 8014438:	08024918 	.word	0x08024918

0801443c <_ZN4tama27Nokia5110DisplayDataManagerC1Ev>:
#include "../../Core/ui/display/display-data/DisplayData.h"
#include "../../Configuration/display.config.h"

namespace tama
{
    class Nokia5110DisplayDataManager : public DisplayDataManager
 801443c:	b580      	push	{r7, lr}
 801443e:	b082      	sub	sp, #8
 8014440:	af00      	add	r7, sp, #0
 8014442:	6078      	str	r0, [r7, #4]
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	4618      	mov	r0, r3
 8014448:	f7ff ffe8 	bl	801441c <_ZN4tama18DisplayDataManagerC1Ev>
 801444c:	4a0f      	ldr	r2, [pc, #60]	; (801448c <_ZN4tama27Nokia5110DisplayDataManagerC1Ev+0x50>)
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	601a      	str	r2, [r3, #0]
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	2208      	movs	r2, #8
 8014456:	605a      	str	r2, [r3, #4]
    public:
        DisplayData getActiveSceneDisplayData(std::shared_ptr<Texture>) override;

    private:
        unsigned segmentSize = 8;
        unsigned segmentsInHeight = Config_Display_Height / segmentSize; // 6
 8014458:	687b      	ldr	r3, [r7, #4]
 801445a:	685b      	ldr	r3, [r3, #4]
 801445c:	2230      	movs	r2, #48	; 0x30
 801445e:	fbb2 f2f3 	udiv	r2, r2, r3
    class Nokia5110DisplayDataManager : public DisplayDataManager
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	609a      	str	r2, [r3, #8]
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	2254      	movs	r2, #84	; 0x54
 801446a:	60da      	str	r2, [r3, #12]
        unsigned segmentsInWidth = Config_Display_Width;
        unsigned dataSize = segmentsInHeight * segmentsInWidth;
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	689b      	ldr	r3, [r3, #8]
 8014470:	687a      	ldr	r2, [r7, #4]
 8014472:	68d2      	ldr	r2, [r2, #12]
 8014474:	fb02 f203 	mul.w	r2, r2, r3
    class Nokia5110DisplayDataManager : public DisplayDataManager
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	611a      	str	r2, [r3, #16]
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	2201      	movs	r2, #1
 8014480:	615a      	str	r2, [r3, #20]
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	4618      	mov	r0, r3
 8014486:	3708      	adds	r7, #8
 8014488:	46bd      	mov	sp, r7
 801448a:	bd80      	pop	{r7, pc}
 801448c:	08024950 	.word	0x08024950

08014490 <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEE9constructIS2_JEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8014490:	b580      	push	{r7, lr}
 8014492:	b082      	sub	sp, #8
 8014494:	af00      	add	r7, sp, #0
 8014496:	6078      	str	r0, [r7, #4]
 8014498:	6039      	str	r1, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801449a:	683b      	ldr	r3, [r7, #0]
 801449c:	4619      	mov	r1, r3
 801449e:	2018      	movs	r0, #24
 80144a0:	f7ec fdcd 	bl	800103e <_ZnwjPv>
 80144a4:	4601      	mov	r1, r0
 80144a6:	2900      	cmp	r1, #0
 80144a8:	d00a      	beq.n	80144c0 <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEE9constructIS2_JEEEvPT_DpOT0_+0x30>
 80144aa:	460a      	mov	r2, r1
 80144ac:	2300      	movs	r3, #0
 80144ae:	6013      	str	r3, [r2, #0]
 80144b0:	6053      	str	r3, [r2, #4]
 80144b2:	6093      	str	r3, [r2, #8]
 80144b4:	60d3      	str	r3, [r2, #12]
 80144b6:	6113      	str	r3, [r2, #16]
 80144b8:	6153      	str	r3, [r2, #20]
 80144ba:	4608      	mov	r0, r1
 80144bc:	f7ff ffbe 	bl	801443c <_ZN4tama27Nokia5110DisplayDataManagerC1Ev>
 80144c0:	bf00      	nop
 80144c2:	3708      	adds	r7, #8
 80144c4:	46bd      	mov	sp, r7
 80144c6:	bd80      	pop	{r7, pc}

080144c8 <_ZNSaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) throw() { }
 80144c8:	b580      	push	{r7, lr}
 80144ca:	b082      	sub	sp, #8
 80144cc:	af00      	add	r7, sp, #0
 80144ce:	6078      	str	r0, [r7, #4]
 80144d0:	6039      	str	r1, [r7, #0]
 80144d2:	6878      	ldr	r0, [r7, #4]
 80144d4:	f000 ffa2 	bl	801541c <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	4618      	mov	r0, r3
 80144dc:	3708      	adds	r7, #8
 80144de:	46bd      	mov	sp, r7
 80144e0:	bd80      	pop	{r7, pc}

080144e2 <_ZNSaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>:
      ~allocator() throw() { }
 80144e2:	b580      	push	{r7, lr}
 80144e4:	b082      	sub	sp, #8
 80144e6:	af00      	add	r7, sp, #0
 80144e8:	6078      	str	r0, [r7, #4]
 80144ea:	6878      	ldr	r0, [r7, #4]
 80144ec:	f000 ffa1 	bl	8015432 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	4618      	mov	r0, r3
 80144f4:	3708      	adds	r7, #8
 80144f6:	46bd      	mov	sp, r7
 80144f8:	bd80      	pop	{r7, pc}

080144fa <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>:
    __allocate_guarded(_Alloc& __a)
 80144fa:	b580      	push	{r7, lr}
 80144fc:	b082      	sub	sp, #8
 80144fe:	af00      	add	r7, sp, #0
 8014500:	6078      	str	r0, [r7, #4]
 8014502:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 8014504:	2101      	movs	r1, #1
 8014506:	6838      	ldr	r0, [r7, #0]
 8014508:	f000 ff9e 	bl	8015448 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>
 801450c:	4603      	mov	r3, r0
 801450e:	461a      	mov	r2, r3
 8014510:	6839      	ldr	r1, [r7, #0]
 8014512:	6878      	ldr	r0, [r7, #4]
 8014514:	f000 ffa7 	bl	8015466 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
    }
 8014518:	6878      	ldr	r0, [r7, #4]
 801451a:	3708      	adds	r7, #8
 801451c:	46bd      	mov	sp, r7
 801451e:	bd80      	pop	{r7, pc}

08014520 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>:
      ~__allocated_ptr()
 8014520:	b580      	push	{r7, lr}
 8014522:	b082      	sub	sp, #8
 8014524:	af00      	add	r7, sp, #0
 8014526:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	685b      	ldr	r3, [r3, #4]
 801452c:	2b00      	cmp	r3, #0
 801452e:	d007      	beq.n	8014540 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	6818      	ldr	r0, [r3, #0]
 8014534:	687b      	ldr	r3, [r7, #4]
 8014536:	685b      	ldr	r3, [r3, #4]
 8014538:	2201      	movs	r2, #1
 801453a:	4619      	mov	r1, r3
 801453c:	f000 ffa7 	bl	801548e <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>
      }
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	4618      	mov	r0, r3
 8014544:	3708      	adds	r7, #8
 8014546:	46bd      	mov	sp, r7
 8014548:	bd80      	pop	{r7, pc}

0801454a <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 801454a:	b580      	push	{r7, lr}
 801454c:	b082      	sub	sp, #8
 801454e:	af00      	add	r7, sp, #0
 8014550:	6078      	str	r0, [r7, #4]
 8014552:	687b      	ldr	r3, [r7, #4]
 8014554:	685b      	ldr	r3, [r3, #4]
 8014556:	4618      	mov	r0, r3
 8014558:	f000 ffa8 	bl	80154ac <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>
 801455c:	4603      	mov	r3, r0
 801455e:	4618      	mov	r0, r3
 8014560:	3708      	adds	r7, #8
 8014562:	46bd      	mov	sp, r7
 8014564:	bd80      	pop	{r7, pc}

08014566 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, false>
 8014566:	b580      	push	{r7, lr}
 8014568:	b082      	sub	sp, #8
 801456a:	af00      	add	r7, sp, #0
 801456c:	6078      	str	r0, [r7, #4]
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	4618      	mov	r0, r3
 8014572:	f7fe fc6b 	bl	8012e4c <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	4618      	mov	r0, r3
 801457a:	3708      	adds	r7, #8
 801457c:	46bd      	mov	sp, r7
 801457e:	bd80      	pop	{r7, pc}

08014580 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama27Nokia5110DisplayDataManagerEELb1EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp
 8014580:	b580      	push	{r7, lr}
 8014582:	b082      	sub	sp, #8
 8014584:	af00      	add	r7, sp, #0
 8014586:	6078      	str	r0, [r7, #4]
 8014588:	6878      	ldr	r0, [r7, #4]
 801458a:	f7fe f86a 	bl	8012662 <_ZNSaIN4tama27Nokia5110DisplayDataManagerEED1Ev>
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	4618      	mov	r0, r3
 8014592:	3708      	adds	r7, #8
 8014594:	46bd      	mov	sp, r7
 8014596:	bd80      	pop	{r7, pc}

08014598 <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>:
      class _Impl : _Sp_ebo_helper<0, _Deleter>, _Sp_ebo_helper<1, _Alloc>
 8014598:	b580      	push	{r7, lr}
 801459a:	b082      	sub	sp, #8
 801459c:	af00      	add	r7, sp, #0
 801459e:	6078      	str	r0, [r7, #4]
 80145a0:	687b      	ldr	r3, [r7, #4]
 80145a2:	3301      	adds	r3, #1
 80145a4:	4618      	mov	r0, r3
 80145a6:	f7ff ffeb 	bl	8014580 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama27Nokia5110DisplayDataManagerEELb1EED1Ev>
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	4618      	mov	r0, r3
 80145ae:	f7ff ffda 	bl	8014566 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	4618      	mov	r0, r3
 80145b6:	3708      	adds	r7, #8
 80145b8:	46bd      	mov	sp, r7
 80145ba:	bd80      	pop	{r7, pc}

080145bc <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 80145bc:	b590      	push	{r4, r7, lr}
 80145be:	b087      	sub	sp, #28
 80145c0:	af00      	add	r7, sp, #0
 80145c2:	60f8      	str	r0, [r7, #12]
 80145c4:	60b9      	str	r1, [r7, #8]
 80145c6:	607a      	str	r2, [r7, #4]
 80145c8:	603b      	str	r3, [r7, #0]
      : _M_impl(__p, std::move(__d), __a) { }
 80145ca:	68fb      	ldr	r3, [r7, #12]
 80145cc:	4618      	mov	r0, r3
 80145ce:	f7f0 f8bb 	bl	8004748 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 80145d2:	4a10      	ldr	r2, [pc, #64]	; (8014614 <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_+0x58>)
 80145d4:	68fb      	ldr	r3, [r7, #12]
 80145d6:	601a      	str	r2, [r3, #0]
 80145d8:	68fb      	ldr	r3, [r7, #12]
 80145da:	f103 040c 	add.w	r4, r3, #12
 80145de:	6878      	ldr	r0, [r7, #4]
 80145e0:	f7ff f8ed 	bl	80137be <_ZSt4moveIRNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 80145e4:	4602      	mov	r2, r0
 80145e6:	f107 0314 	add.w	r3, r7, #20
 80145ea:	4611      	mov	r1, r2
 80145ec:	4618      	mov	r0, r3
 80145ee:	f7ff f8f1 	bl	80137d4 <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 80145f2:	f107 0214 	add.w	r2, r7, #20
 80145f6:	683b      	ldr	r3, [r7, #0]
 80145f8:	68b9      	ldr	r1, [r7, #8]
 80145fa:	4620      	mov	r0, r4
 80145fc:	f000 ff61 	bl	80154c2 <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>
 8014600:	f107 0314 	add.w	r3, r7, #20
 8014604:	4618      	mov	r0, r3
 8014606:	f7fe fc21 	bl	8012e4c <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 801460a:	68fb      	ldr	r3, [r7, #12]
 801460c:	4618      	mov	r0, r3
 801460e:	371c      	adds	r7, #28
 8014610:	46bd      	mov	sp, r7
 8014612:	bd90      	pop	{r4, r7, pc}
 8014614:	0802488c 	.word	0x0802488c

08014618 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 8014618:	b480      	push	{r7}
 801461a:	b083      	sub	sp, #12
 801461c:	af00      	add	r7, sp, #0
 801461e:	6078      	str	r0, [r7, #4]
 8014620:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 8014622:	687b      	ldr	r3, [r7, #4]
 8014624:	2200      	movs	r2, #0
 8014626:	605a      	str	r2, [r3, #4]
	return *this;
 8014628:	687b      	ldr	r3, [r7, #4]
      }
 801462a:	4618      	mov	r0, r3
 801462c:	370c      	adds	r7, #12
 801462e:	46bd      	mov	sp, r7
 8014630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014634:	4770      	bx	lr

08014636 <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>:
          void operator()(typename _Alloc::value_type* __ptr)
 8014636:	b590      	push	{r4, r7, lr}
 8014638:	b085      	sub	sp, #20
 801463a:	af00      	add	r7, sp, #0
 801463c:	6078      	str	r0, [r7, #4]
 801463e:	6039      	str	r1, [r7, #0]
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 8014640:	6879      	ldr	r1, [r7, #4]
 8014642:	f107 0308 	add.w	r3, r7, #8
 8014646:	683a      	ldr	r2, [r7, #0]
 8014648:	4618      	mov	r0, r3
 801464a:	f7ff feb9 	bl	80143c0 <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEEC1ERS2_PS1_>
	    allocator_traits<_Alloc>::destroy(_M_alloc, __guard.get());
 801464e:	687c      	ldr	r4, [r7, #4]
 8014650:	f107 0308 	add.w	r3, r7, #8
 8014654:	4618      	mov	r0, r3
 8014656:	f7ff f888 	bl	801376a <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEE3getEv>
 801465a:	4603      	mov	r3, r0
 801465c:	4619      	mov	r1, r3
 801465e:	4620      	mov	r0, r4
 8014660:	f000 ff4d 	bl	80154fe <_ZNSt16allocator_traitsISaIN4tama27Nokia5110DisplayDataManagerEEE7destroyIS1_EEvRS2_PT_>
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 8014664:	f107 0308 	add.w	r3, r7, #8
 8014668:	4618      	mov	r0, r3
 801466a:	f7ff f869 	bl	8013740 <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEED1Ev>
          }
 801466e:	bf00      	nop
 8014670:	3714      	adds	r7, #20
 8014672:	46bd      	mov	sp, r7
 8014674:	bd90      	pop	{r4, r7, pc}

08014676 <_ZN9__gnu_cxx13new_allocatorIN4tama23Stm32TimeMonitorCreatorEEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8014676:	b480      	push	{r7}
 8014678:	b083      	sub	sp, #12
 801467a:	af00      	add	r7, sp, #0
 801467c:	6078      	str	r0, [r7, #4]
 801467e:	6039      	str	r1, [r7, #0]
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	4618      	mov	r0, r3
 8014684:	370c      	adds	r7, #12
 8014686:	46bd      	mov	sp, r7
 8014688:	f85d 7b04 	ldr.w	r7, [sp], #4
 801468c:	4770      	bx	lr

0801468e <_ZNSt16allocator_traitsISaIN4tama23Stm32TimeMonitorCreatorEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 801468e:	b580      	push	{r7, lr}
 8014690:	b082      	sub	sp, #8
 8014692:	af00      	add	r7, sp, #0
 8014694:	6078      	str	r0, [r7, #4]
 8014696:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8014698:	2200      	movs	r2, #0
 801469a:	6839      	ldr	r1, [r7, #0]
 801469c:	6878      	ldr	r0, [r7, #4]
 801469e:	f000 ff3b 	bl	8015518 <_ZN9__gnu_cxx13new_allocatorIN4tama23Stm32TimeMonitorCreatorEE8allocateEjPKv>
 80146a2:	4603      	mov	r3, r0
 80146a4:	4618      	mov	r0, r3
 80146a6:	3708      	adds	r7, #8
 80146a8:	46bd      	mov	sp, r7
 80146aa:	bd80      	pop	{r7, pc}

080146ac <_ZNSt15__allocated_ptrISaIN4tama23Stm32TimeMonitorCreatorEEEC1ERS2_PS1_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 80146ac:	b580      	push	{r7, lr}
 80146ae:	b084      	sub	sp, #16
 80146b0:	af00      	add	r7, sp, #0
 80146b2:	60f8      	str	r0, [r7, #12]
 80146b4:	60b9      	str	r1, [r7, #8]
 80146b6:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 80146b8:	68b8      	ldr	r0, [r7, #8]
 80146ba:	f000 ff4b 	bl	8015554 <_ZSt11__addressofISaIN4tama23Stm32TimeMonitorCreatorEEEPT_RS3_>
 80146be:	4602      	mov	r2, r0
 80146c0:	68fb      	ldr	r3, [r7, #12]
 80146c2:	601a      	str	r2, [r3, #0]
 80146c4:	68fb      	ldr	r3, [r7, #12]
 80146c6:	687a      	ldr	r2, [r7, #4]
 80146c8:	605a      	str	r2, [r3, #4]
      { }
 80146ca:	68fb      	ldr	r3, [r7, #12]
 80146cc:	4618      	mov	r0, r3
 80146ce:	3710      	adds	r7, #16
 80146d0:	46bd      	mov	sp, r7
 80146d2:	bd80      	pop	{r7, pc}

080146d4 <_ZNSt16allocator_traitsISaIN4tama23Stm32TimeMonitorCreatorEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80146d4:	b580      	push	{r7, lr}
 80146d6:	b084      	sub	sp, #16
 80146d8:	af00      	add	r7, sp, #0
 80146da:	60f8      	str	r0, [r7, #12]
 80146dc:	60b9      	str	r1, [r7, #8]
 80146de:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80146e0:	687a      	ldr	r2, [r7, #4]
 80146e2:	68b9      	ldr	r1, [r7, #8]
 80146e4:	68f8      	ldr	r0, [r7, #12]
 80146e6:	f000 ff40 	bl	801556a <_ZN9__gnu_cxx13new_allocatorIN4tama23Stm32TimeMonitorCreatorEE10deallocateEPS2_j>
 80146ea:	bf00      	nop
 80146ec:	3710      	adds	r7, #16
 80146ee:	46bd      	mov	sp, r7
 80146f0:	bd80      	pop	{r7, pc}

080146f2 <_ZNSt15__allocated_ptrISaIN4tama23Stm32TimeMonitorCreatorEEE10_S_raw_ptrEPS1_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 80146f2:	b480      	push	{r7}
 80146f4:	b083      	sub	sp, #12
 80146f6:	af00      	add	r7, sp, #0
 80146f8:	6078      	str	r0, [r7, #4]
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	4618      	mov	r0, r3
 80146fe:	370c      	adds	r7, #12
 8014700:	46bd      	mov	sp, r7
 8014702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014706:	4770      	bx	lr

08014708 <_ZN4tama18TimeMonitorCreatorC1Ev>:
#include "../TimeMonitor.h"
#include <memory>

namespace tama
{
    class TimeMonitorCreator
 8014708:	b480      	push	{r7}
 801470a:	b083      	sub	sp, #12
 801470c:	af00      	add	r7, sp, #0
 801470e:	6078      	str	r0, [r7, #4]
 8014710:	4a04      	ldr	r2, [pc, #16]	; (8014724 <_ZN4tama18TimeMonitorCreatorC1Ev+0x1c>)
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	601a      	str	r2, [r3, #0]
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	4618      	mov	r0, r3
 801471a:	370c      	adds	r7, #12
 801471c:	46bd      	mov	sp, r7
 801471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014722:	4770      	bx	lr
 8014724:	080248f0 	.word	0x080248f0

08014728 <_ZN4tama23Stm32TimeMonitorCreatorC1Ev>:
#include "../../Core/time/time-monitor/time-monitor-creator/TimeMonitorCreator.h"
#include "Stm32TimeMonitor.h"

namespace tama
{
    class Stm32TimeMonitorCreator : public TimeMonitorCreator
 8014728:	b580      	push	{r7, lr}
 801472a:	b082      	sub	sp, #8
 801472c:	af00      	add	r7, sp, #0
 801472e:	6078      	str	r0, [r7, #4]
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	4618      	mov	r0, r3
 8014734:	f7ff ffe8 	bl	8014708 <_ZN4tama18TimeMonitorCreatorC1Ev>
 8014738:	4a03      	ldr	r2, [pc, #12]	; (8014748 <_ZN4tama23Stm32TimeMonitorCreatorC1Ev+0x20>)
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	601a      	str	r2, [r3, #0]
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	4618      	mov	r0, r3
 8014742:	3708      	adds	r7, #8
 8014744:	46bd      	mov	sp, r7
 8014746:	bd80      	pop	{r7, pc}
 8014748:	08024994 	.word	0x08024994

0801474c <_ZN9__gnu_cxx13new_allocatorIN4tama23Stm32TimeMonitorCreatorEE9constructIS2_JEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 801474c:	b580      	push	{r7, lr}
 801474e:	b082      	sub	sp, #8
 8014750:	af00      	add	r7, sp, #0
 8014752:	6078      	str	r0, [r7, #4]
 8014754:	6039      	str	r1, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8014756:	683b      	ldr	r3, [r7, #0]
 8014758:	4619      	mov	r1, r3
 801475a:	2004      	movs	r0, #4
 801475c:	f7ec fc6f 	bl	800103e <_ZnwjPv>
 8014760:	4603      	mov	r3, r0
 8014762:	2b00      	cmp	r3, #0
 8014764:	d004      	beq.n	8014770 <_ZN9__gnu_cxx13new_allocatorIN4tama23Stm32TimeMonitorCreatorEE9constructIS2_JEEEvPT_DpOT0_+0x24>
 8014766:	2200      	movs	r2, #0
 8014768:	601a      	str	r2, [r3, #0]
 801476a:	4618      	mov	r0, r3
 801476c:	f7ff ffdc 	bl	8014728 <_ZN4tama23Stm32TimeMonitorCreatorC1Ev>
 8014770:	bf00      	nop
 8014772:	3708      	adds	r7, #8
 8014774:	46bd      	mov	sp, r7
 8014776:	bd80      	pop	{r7, pc}

08014778 <_ZNSaISt19_Sp_counted_deleterIPN4tama23Stm32TimeMonitorCreatorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) throw() { }
 8014778:	b580      	push	{r7, lr}
 801477a:	b082      	sub	sp, #8
 801477c:	af00      	add	r7, sp, #0
 801477e:	6078      	str	r0, [r7, #4]
 8014780:	6039      	str	r1, [r7, #0]
 8014782:	6878      	ldr	r0, [r7, #4]
 8014784:	f000 fefe 	bl	8015584 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama23Stm32TimeMonitorCreatorENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	4618      	mov	r0, r3
 801478c:	3708      	adds	r7, #8
 801478e:	46bd      	mov	sp, r7
 8014790:	bd80      	pop	{r7, pc}

08014792 <_ZNSaISt19_Sp_counted_deleterIPN4tama23Stm32TimeMonitorCreatorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>:
      ~allocator() throw() { }
 8014792:	b580      	push	{r7, lr}
 8014794:	b082      	sub	sp, #8
 8014796:	af00      	add	r7, sp, #0
 8014798:	6078      	str	r0, [r7, #4]
 801479a:	6878      	ldr	r0, [r7, #4]
 801479c:	f000 fefd 	bl	801559a <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama23Stm32TimeMonitorCreatorENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	4618      	mov	r0, r3
 80147a4:	3708      	adds	r7, #8
 80147a6:	46bd      	mov	sp, r7
 80147a8:	bd80      	pop	{r7, pc}

080147aa <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama23Stm32TimeMonitorCreatorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>:
    __allocate_guarded(_Alloc& __a)
 80147aa:	b580      	push	{r7, lr}
 80147ac:	b082      	sub	sp, #8
 80147ae:	af00      	add	r7, sp, #0
 80147b0:	6078      	str	r0, [r7, #4]
 80147b2:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 80147b4:	2101      	movs	r1, #1
 80147b6:	6838      	ldr	r0, [r7, #0]
 80147b8:	f000 fefa 	bl	80155b0 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama23Stm32TimeMonitorCreatorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>
 80147bc:	4603      	mov	r3, r0
 80147be:	461a      	mov	r2, r3
 80147c0:	6839      	ldr	r1, [r7, #0]
 80147c2:	6878      	ldr	r0, [r7, #4]
 80147c4:	f000 ff03 	bl	80155ce <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama23Stm32TimeMonitorCreatorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
    }
 80147c8:	6878      	ldr	r0, [r7, #4]
 80147ca:	3708      	adds	r7, #8
 80147cc:	46bd      	mov	sp, r7
 80147ce:	bd80      	pop	{r7, pc}

080147d0 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama23Stm32TimeMonitorCreatorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>:
      ~__allocated_ptr()
 80147d0:	b580      	push	{r7, lr}
 80147d2:	b082      	sub	sp, #8
 80147d4:	af00      	add	r7, sp, #0
 80147d6:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	685b      	ldr	r3, [r3, #4]
 80147dc:	2b00      	cmp	r3, #0
 80147de:	d007      	beq.n	80147f0 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama23Stm32TimeMonitorCreatorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	6818      	ldr	r0, [r3, #0]
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	685b      	ldr	r3, [r3, #4]
 80147e8:	2201      	movs	r2, #1
 80147ea:	4619      	mov	r1, r3
 80147ec:	f000 ff03 	bl	80155f6 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama23Stm32TimeMonitorCreatorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>
      }
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	4618      	mov	r0, r3
 80147f4:	3708      	adds	r7, #8
 80147f6:	46bd      	mov	sp, r7
 80147f8:	bd80      	pop	{r7, pc}

080147fa <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama23Stm32TimeMonitorCreatorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 80147fa:	b580      	push	{r7, lr}
 80147fc:	b082      	sub	sp, #8
 80147fe:	af00      	add	r7, sp, #0
 8014800:	6078      	str	r0, [r7, #4]
 8014802:	687b      	ldr	r3, [r7, #4]
 8014804:	685b      	ldr	r3, [r3, #4]
 8014806:	4618      	mov	r0, r3
 8014808:	f000 ff04 	bl	8015614 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama23Stm32TimeMonitorCreatorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>
 801480c:	4603      	mov	r3, r0
 801480e:	4618      	mov	r0, r3
 8014810:	3708      	adds	r7, #8
 8014812:	46bd      	mov	sp, r7
 8014814:	bd80      	pop	{r7, pc}

08014816 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama23Stm32TimeMonitorCreatorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, false>
 8014816:	b580      	push	{r7, lr}
 8014818:	b082      	sub	sp, #8
 801481a:	af00      	add	r7, sp, #0
 801481c:	6078      	str	r0, [r7, #4]
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	4618      	mov	r0, r3
 8014822:	f7fe fba6 	bl	8012f72 <_ZNSt12__shared_ptrIN4tama23Stm32TimeMonitorCreatorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	4618      	mov	r0, r3
 801482a:	3708      	adds	r7, #8
 801482c:	46bd      	mov	sp, r7
 801482e:	bd80      	pop	{r7, pc}

08014830 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama23Stm32TimeMonitorCreatorEELb1EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp
 8014830:	b580      	push	{r7, lr}
 8014832:	b082      	sub	sp, #8
 8014834:	af00      	add	r7, sp, #0
 8014836:	6078      	str	r0, [r7, #4]
 8014838:	6878      	ldr	r0, [r7, #4]
 801483a:	f7fd ff56 	bl	80126ea <_ZNSaIN4tama23Stm32TimeMonitorCreatorEED1Ev>
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	4618      	mov	r0, r3
 8014842:	3708      	adds	r7, #8
 8014844:	46bd      	mov	sp, r7
 8014846:	bd80      	pop	{r7, pc}

08014848 <_ZNSt19_Sp_counted_deleterIPN4tama23Stm32TimeMonitorCreatorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>:
      class _Impl : _Sp_ebo_helper<0, _Deleter>, _Sp_ebo_helper<1, _Alloc>
 8014848:	b580      	push	{r7, lr}
 801484a:	b082      	sub	sp, #8
 801484c:	af00      	add	r7, sp, #0
 801484e:	6078      	str	r0, [r7, #4]
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	3301      	adds	r3, #1
 8014854:	4618      	mov	r0, r3
 8014856:	f7ff ffeb 	bl	8014830 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama23Stm32TimeMonitorCreatorEELb1EED1Ev>
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	4618      	mov	r0, r3
 801485e:	f7ff ffda 	bl	8014816 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama23Stm32TimeMonitorCreatorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	4618      	mov	r0, r3
 8014866:	3708      	adds	r7, #8
 8014868:	46bd      	mov	sp, r7
 801486a:	bd80      	pop	{r7, pc}

0801486c <_ZNSt19_Sp_counted_deleterIPN4tama23Stm32TimeMonitorCreatorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 801486c:	b590      	push	{r4, r7, lr}
 801486e:	b087      	sub	sp, #28
 8014870:	af00      	add	r7, sp, #0
 8014872:	60f8      	str	r0, [r7, #12]
 8014874:	60b9      	str	r1, [r7, #8]
 8014876:	607a      	str	r2, [r7, #4]
 8014878:	603b      	str	r3, [r7, #0]
      : _M_impl(__p, std::move(__d), __a) { }
 801487a:	68fb      	ldr	r3, [r7, #12]
 801487c:	4618      	mov	r0, r3
 801487e:	f7ef ff63 	bl	8004748 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8014882:	4a10      	ldr	r2, [pc, #64]	; (80148c4 <_ZNSt19_Sp_counted_deleterIPN4tama23Stm32TimeMonitorCreatorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_+0x58>)
 8014884:	68fb      	ldr	r3, [r7, #12]
 8014886:	601a      	str	r2, [r3, #0]
 8014888:	68fb      	ldr	r3, [r7, #12]
 801488a:	f103 040c 	add.w	r4, r3, #12
 801488e:	6878      	ldr	r0, [r7, #4]
 8014890:	f7ff f87d 	bl	801398e <_ZSt4moveIRNSt12__shared_ptrIN4tama23Stm32TimeMonitorCreatorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8014894:	4602      	mov	r2, r0
 8014896:	f107 0314 	add.w	r3, r7, #20
 801489a:	4611      	mov	r1, r2
 801489c:	4618      	mov	r0, r3
 801489e:	f7ff f881 	bl	80139a4 <_ZNSt12__shared_ptrIN4tama23Stm32TimeMonitorCreatorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 80148a2:	f107 0214 	add.w	r2, r7, #20
 80148a6:	683b      	ldr	r3, [r7, #0]
 80148a8:	68b9      	ldr	r1, [r7, #8]
 80148aa:	4620      	mov	r0, r4
 80148ac:	f000 febd 	bl	801562a <_ZNSt19_Sp_counted_deleterIPN4tama23Stm32TimeMonitorCreatorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>
 80148b0:	f107 0314 	add.w	r3, r7, #20
 80148b4:	4618      	mov	r0, r3
 80148b6:	f7fe fb5c 	bl	8012f72 <_ZNSt12__shared_ptrIN4tama23Stm32TimeMonitorCreatorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 80148ba:	68fb      	ldr	r3, [r7, #12]
 80148bc:	4618      	mov	r0, r3
 80148be:	371c      	adds	r7, #28
 80148c0:	46bd      	mov	sp, r7
 80148c2:	bd90      	pop	{r4, r7, pc}
 80148c4:	08024870 	.word	0x08024870

080148c8 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama23Stm32TimeMonitorCreatorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 80148c8:	b480      	push	{r7}
 80148ca:	b083      	sub	sp, #12
 80148cc:	af00      	add	r7, sp, #0
 80148ce:	6078      	str	r0, [r7, #4]
 80148d0:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	2200      	movs	r2, #0
 80148d6:	605a      	str	r2, [r3, #4]
	return *this;
 80148d8:	687b      	ldr	r3, [r7, #4]
      }
 80148da:	4618      	mov	r0, r3
 80148dc:	370c      	adds	r7, #12
 80148de:	46bd      	mov	sp, r7
 80148e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148e4:	4770      	bx	lr

080148e6 <_ZNSt12__shared_ptrIN4tama23Stm32TimeMonitorCreatorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>:
          void operator()(typename _Alloc::value_type* __ptr)
 80148e6:	b590      	push	{r4, r7, lr}
 80148e8:	b085      	sub	sp, #20
 80148ea:	af00      	add	r7, sp, #0
 80148ec:	6078      	str	r0, [r7, #4]
 80148ee:	6039      	str	r1, [r7, #0]
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 80148f0:	6879      	ldr	r1, [r7, #4]
 80148f2:	f107 0308 	add.w	r3, r7, #8
 80148f6:	683a      	ldr	r2, [r7, #0]
 80148f8:	4618      	mov	r0, r3
 80148fa:	f7ff fed7 	bl	80146ac <_ZNSt15__allocated_ptrISaIN4tama23Stm32TimeMonitorCreatorEEEC1ERS2_PS1_>
	    allocator_traits<_Alloc>::destroy(_M_alloc, __guard.get());
 80148fe:	687c      	ldr	r4, [r7, #4]
 8014900:	f107 0308 	add.w	r3, r7, #8
 8014904:	4618      	mov	r0, r3
 8014906:	f7ff f818 	bl	801393a <_ZNSt15__allocated_ptrISaIN4tama23Stm32TimeMonitorCreatorEEE3getEv>
 801490a:	4603      	mov	r3, r0
 801490c:	4619      	mov	r1, r3
 801490e:	4620      	mov	r0, r4
 8014910:	f000 fea9 	bl	8015666 <_ZNSt16allocator_traitsISaIN4tama23Stm32TimeMonitorCreatorEEE7destroyIS1_EEvRS2_PT_>
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 8014914:	f107 0308 	add.w	r3, r7, #8
 8014918:	4618      	mov	r0, r3
 801491a:	f7fe fff9 	bl	8013910 <_ZNSt15__allocated_ptrISaIN4tama23Stm32TimeMonitorCreatorEEED1Ev>
          }
 801491e:	bf00      	nop
 8014920:	3714      	adds	r7, #20
 8014922:	46bd      	mov	sp, r7
 8014924:	bd90      	pop	{r4, r7, pc}

08014926 <_ZN9__gnu_cxx13new_allocatorIN4tama25Stm32SoundPlayingStrategyEEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8014926:	b480      	push	{r7}
 8014928:	b083      	sub	sp, #12
 801492a:	af00      	add	r7, sp, #0
 801492c:	6078      	str	r0, [r7, #4]
 801492e:	6039      	str	r1, [r7, #0]
 8014930:	687b      	ldr	r3, [r7, #4]
 8014932:	4618      	mov	r0, r3
 8014934:	370c      	adds	r7, #12
 8014936:	46bd      	mov	sp, r7
 8014938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801493c:	4770      	bx	lr

0801493e <_ZNSt16allocator_traitsISaIN4tama25Stm32SoundPlayingStrategyEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 801493e:	b580      	push	{r7, lr}
 8014940:	b082      	sub	sp, #8
 8014942:	af00      	add	r7, sp, #0
 8014944:	6078      	str	r0, [r7, #4]
 8014946:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8014948:	2200      	movs	r2, #0
 801494a:	6839      	ldr	r1, [r7, #0]
 801494c:	6878      	ldr	r0, [r7, #4]
 801494e:	f000 fe97 	bl	8015680 <_ZN9__gnu_cxx13new_allocatorIN4tama25Stm32SoundPlayingStrategyEE8allocateEjPKv>
 8014952:	4603      	mov	r3, r0
 8014954:	4618      	mov	r0, r3
 8014956:	3708      	adds	r7, #8
 8014958:	46bd      	mov	sp, r7
 801495a:	bd80      	pop	{r7, pc}

0801495c <_ZNSt15__allocated_ptrISaIN4tama25Stm32SoundPlayingStrategyEEEC1ERS2_PS1_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 801495c:	b580      	push	{r7, lr}
 801495e:	b084      	sub	sp, #16
 8014960:	af00      	add	r7, sp, #0
 8014962:	60f8      	str	r0, [r7, #12]
 8014964:	60b9      	str	r1, [r7, #8]
 8014966:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8014968:	68b8      	ldr	r0, [r7, #8]
 801496a:	f000 fea7 	bl	80156bc <_ZSt11__addressofISaIN4tama25Stm32SoundPlayingStrategyEEEPT_RS3_>
 801496e:	4602      	mov	r2, r0
 8014970:	68fb      	ldr	r3, [r7, #12]
 8014972:	601a      	str	r2, [r3, #0]
 8014974:	68fb      	ldr	r3, [r7, #12]
 8014976:	687a      	ldr	r2, [r7, #4]
 8014978:	605a      	str	r2, [r3, #4]
      { }
 801497a:	68fb      	ldr	r3, [r7, #12]
 801497c:	4618      	mov	r0, r3
 801497e:	3710      	adds	r7, #16
 8014980:	46bd      	mov	sp, r7
 8014982:	bd80      	pop	{r7, pc}

08014984 <_ZNSt16allocator_traitsISaIN4tama25Stm32SoundPlayingStrategyEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8014984:	b580      	push	{r7, lr}
 8014986:	b084      	sub	sp, #16
 8014988:	af00      	add	r7, sp, #0
 801498a:	60f8      	str	r0, [r7, #12]
 801498c:	60b9      	str	r1, [r7, #8]
 801498e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8014990:	687a      	ldr	r2, [r7, #4]
 8014992:	68b9      	ldr	r1, [r7, #8]
 8014994:	68f8      	ldr	r0, [r7, #12]
 8014996:	f000 fe9c 	bl	80156d2 <_ZN9__gnu_cxx13new_allocatorIN4tama25Stm32SoundPlayingStrategyEE10deallocateEPS2_j>
 801499a:	bf00      	nop
 801499c:	3710      	adds	r7, #16
 801499e:	46bd      	mov	sp, r7
 80149a0:	bd80      	pop	{r7, pc}

080149a2 <_ZNSt15__allocated_ptrISaIN4tama25Stm32SoundPlayingStrategyEEE10_S_raw_ptrEPS1_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 80149a2:	b480      	push	{r7}
 80149a4:	b083      	sub	sp, #12
 80149a6:	af00      	add	r7, sp, #0
 80149a8:	6078      	str	r0, [r7, #4]
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	4618      	mov	r0, r3
 80149ae:	370c      	adds	r7, #12
 80149b0:	46bd      	mov	sp, r7
 80149b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149b6:	4770      	bx	lr

080149b8 <_ZN4tama20SoundPlayingStrategyC1Ev>:

#include "tone/Tone.h"

namespace tama
{
    class SoundPlayingStrategy
 80149b8:	b480      	push	{r7}
 80149ba:	b083      	sub	sp, #12
 80149bc:	af00      	add	r7, sp, #0
 80149be:	6078      	str	r0, [r7, #4]
 80149c0:	4a04      	ldr	r2, [pc, #16]	; (80149d4 <_ZN4tama20SoundPlayingStrategyC1Ev+0x1c>)
 80149c2:	687b      	ldr	r3, [r7, #4]
 80149c4:	601a      	str	r2, [r3, #0]
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	4618      	mov	r0, r3
 80149ca:	370c      	adds	r7, #12
 80149cc:	46bd      	mov	sp, r7
 80149ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149d2:	4770      	bx	lr
 80149d4:	08024908 	.word	0x08024908

080149d8 <_ZN4tama25Stm32SoundPlayingStrategyC1Ev>:
    class Stm32SoundPlayingStrategy : public SoundPlayingStrategy
 80149d8:	b580      	push	{r7, lr}
 80149da:	b082      	sub	sp, #8
 80149dc:	af00      	add	r7, sp, #0
 80149de:	6078      	str	r0, [r7, #4]
 80149e0:	687b      	ldr	r3, [r7, #4]
 80149e2:	4618      	mov	r0, r3
 80149e4:	f7ff ffe8 	bl	80149b8 <_ZN4tama20SoundPlayingStrategyC1Ev>
 80149e8:	4a03      	ldr	r2, [pc, #12]	; (80149f8 <_ZN4tama25Stm32SoundPlayingStrategyC1Ev+0x20>)
 80149ea:	687b      	ldr	r3, [r7, #4]
 80149ec:	601a      	str	r2, [r3, #0]
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	4618      	mov	r0, r3
 80149f2:	3708      	adds	r7, #8
 80149f4:	46bd      	mov	sp, r7
 80149f6:	bd80      	pop	{r7, pc}
 80149f8:	080248e0 	.word	0x080248e0

080149fc <_ZN9__gnu_cxx13new_allocatorIN4tama25Stm32SoundPlayingStrategyEE9constructIS2_JEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80149fc:	b580      	push	{r7, lr}
 80149fe:	b082      	sub	sp, #8
 8014a00:	af00      	add	r7, sp, #0
 8014a02:	6078      	str	r0, [r7, #4]
 8014a04:	6039      	str	r1, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8014a06:	683b      	ldr	r3, [r7, #0]
 8014a08:	4619      	mov	r1, r3
 8014a0a:	2004      	movs	r0, #4
 8014a0c:	f7ec fb17 	bl	800103e <_ZnwjPv>
 8014a10:	4603      	mov	r3, r0
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	d004      	beq.n	8014a20 <_ZN9__gnu_cxx13new_allocatorIN4tama25Stm32SoundPlayingStrategyEE9constructIS2_JEEEvPT_DpOT0_+0x24>
 8014a16:	2200      	movs	r2, #0
 8014a18:	601a      	str	r2, [r3, #0]
 8014a1a:	4618      	mov	r0, r3
 8014a1c:	f7ff ffdc 	bl	80149d8 <_ZN4tama25Stm32SoundPlayingStrategyC1Ev>
 8014a20:	bf00      	nop
 8014a22:	3708      	adds	r7, #8
 8014a24:	46bd      	mov	sp, r7
 8014a26:	bd80      	pop	{r7, pc}

08014a28 <_ZNSaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) throw() { }
 8014a28:	b580      	push	{r7, lr}
 8014a2a:	b082      	sub	sp, #8
 8014a2c:	af00      	add	r7, sp, #0
 8014a2e:	6078      	str	r0, [r7, #4]
 8014a30:	6039      	str	r1, [r7, #0]
 8014a32:	6878      	ldr	r0, [r7, #4]
 8014a34:	f000 fe5a 	bl	80156ec <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	4618      	mov	r0, r3
 8014a3c:	3708      	adds	r7, #8
 8014a3e:	46bd      	mov	sp, r7
 8014a40:	bd80      	pop	{r7, pc}

08014a42 <_ZNSaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>:
      ~allocator() throw() { }
 8014a42:	b580      	push	{r7, lr}
 8014a44:	b082      	sub	sp, #8
 8014a46:	af00      	add	r7, sp, #0
 8014a48:	6078      	str	r0, [r7, #4]
 8014a4a:	6878      	ldr	r0, [r7, #4]
 8014a4c:	f000 fe59 	bl	8015702 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	4618      	mov	r0, r3
 8014a54:	3708      	adds	r7, #8
 8014a56:	46bd      	mov	sp, r7
 8014a58:	bd80      	pop	{r7, pc}

08014a5a <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>:
    __allocate_guarded(_Alloc& __a)
 8014a5a:	b580      	push	{r7, lr}
 8014a5c:	b082      	sub	sp, #8
 8014a5e:	af00      	add	r7, sp, #0
 8014a60:	6078      	str	r0, [r7, #4]
 8014a62:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 8014a64:	2101      	movs	r1, #1
 8014a66:	6838      	ldr	r0, [r7, #0]
 8014a68:	f000 fe56 	bl	8015718 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>
 8014a6c:	4603      	mov	r3, r0
 8014a6e:	461a      	mov	r2, r3
 8014a70:	6839      	ldr	r1, [r7, #0]
 8014a72:	6878      	ldr	r0, [r7, #4]
 8014a74:	f000 fe5f 	bl	8015736 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
    }
 8014a78:	6878      	ldr	r0, [r7, #4]
 8014a7a:	3708      	adds	r7, #8
 8014a7c:	46bd      	mov	sp, r7
 8014a7e:	bd80      	pop	{r7, pc}

08014a80 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>:
      ~__allocated_ptr()
 8014a80:	b580      	push	{r7, lr}
 8014a82:	b082      	sub	sp, #8
 8014a84:	af00      	add	r7, sp, #0
 8014a86:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	685b      	ldr	r3, [r3, #4]
 8014a8c:	2b00      	cmp	r3, #0
 8014a8e:	d007      	beq.n	8014aa0 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	6818      	ldr	r0, [r3, #0]
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	685b      	ldr	r3, [r3, #4]
 8014a98:	2201      	movs	r2, #1
 8014a9a:	4619      	mov	r1, r3
 8014a9c:	f000 fe5f 	bl	801575e <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>
      }
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	4618      	mov	r0, r3
 8014aa4:	3708      	adds	r7, #8
 8014aa6:	46bd      	mov	sp, r7
 8014aa8:	bd80      	pop	{r7, pc}

08014aaa <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 8014aaa:	b580      	push	{r7, lr}
 8014aac:	b082      	sub	sp, #8
 8014aae:	af00      	add	r7, sp, #0
 8014ab0:	6078      	str	r0, [r7, #4]
 8014ab2:	687b      	ldr	r3, [r7, #4]
 8014ab4:	685b      	ldr	r3, [r3, #4]
 8014ab6:	4618      	mov	r0, r3
 8014ab8:	f000 fe60 	bl	801577c <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>
 8014abc:	4603      	mov	r3, r0
 8014abe:	4618      	mov	r0, r3
 8014ac0:	3708      	adds	r7, #8
 8014ac2:	46bd      	mov	sp, r7
 8014ac4:	bd80      	pop	{r7, pc}

08014ac6 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, false>
 8014ac6:	b580      	push	{r7, lr}
 8014ac8:	b082      	sub	sp, #8
 8014aca:	af00      	add	r7, sp, #0
 8014acc:	6078      	str	r0, [r7, #4]
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	4618      	mov	r0, r3
 8014ad2:	f7fe fae1 	bl	8013098 <_ZNSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 8014ad6:	687b      	ldr	r3, [r7, #4]
 8014ad8:	4618      	mov	r0, r3
 8014ada:	3708      	adds	r7, #8
 8014adc:	46bd      	mov	sp, r7
 8014ade:	bd80      	pop	{r7, pc}

08014ae0 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama25Stm32SoundPlayingStrategyEELb1EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp
 8014ae0:	b580      	push	{r7, lr}
 8014ae2:	b082      	sub	sp, #8
 8014ae4:	af00      	add	r7, sp, #0
 8014ae6:	6078      	str	r0, [r7, #4]
 8014ae8:	6878      	ldr	r0, [r7, #4]
 8014aea:	f7fd fe42 	bl	8012772 <_ZNSaIN4tama25Stm32SoundPlayingStrategyEED1Ev>
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	4618      	mov	r0, r3
 8014af2:	3708      	adds	r7, #8
 8014af4:	46bd      	mov	sp, r7
 8014af6:	bd80      	pop	{r7, pc}

08014af8 <_ZNSt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>:
      class _Impl : _Sp_ebo_helper<0, _Deleter>, _Sp_ebo_helper<1, _Alloc>
 8014af8:	b580      	push	{r7, lr}
 8014afa:	b082      	sub	sp, #8
 8014afc:	af00      	add	r7, sp, #0
 8014afe:	6078      	str	r0, [r7, #4]
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	3301      	adds	r3, #1
 8014b04:	4618      	mov	r0, r3
 8014b06:	f7ff ffeb 	bl	8014ae0 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama25Stm32SoundPlayingStrategyEELb1EED1Ev>
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	4618      	mov	r0, r3
 8014b0e:	f7ff ffda 	bl	8014ac6 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>
 8014b12:	687b      	ldr	r3, [r7, #4]
 8014b14:	4618      	mov	r0, r3
 8014b16:	3708      	adds	r7, #8
 8014b18:	46bd      	mov	sp, r7
 8014b1a:	bd80      	pop	{r7, pc}

08014b1c <_ZNSt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 8014b1c:	b590      	push	{r4, r7, lr}
 8014b1e:	b087      	sub	sp, #28
 8014b20:	af00      	add	r7, sp, #0
 8014b22:	60f8      	str	r0, [r7, #12]
 8014b24:	60b9      	str	r1, [r7, #8]
 8014b26:	607a      	str	r2, [r7, #4]
 8014b28:	603b      	str	r3, [r7, #0]
      : _M_impl(__p, std::move(__d), __a) { }
 8014b2a:	68fb      	ldr	r3, [r7, #12]
 8014b2c:	4618      	mov	r0, r3
 8014b2e:	f7ef fe0b 	bl	8004748 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8014b32:	4a10      	ldr	r2, [pc, #64]	; (8014b74 <_ZNSt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_+0x58>)
 8014b34:	68fb      	ldr	r3, [r7, #12]
 8014b36:	601a      	str	r2, [r3, #0]
 8014b38:	68fb      	ldr	r3, [r7, #12]
 8014b3a:	f103 040c 	add.w	r4, r3, #12
 8014b3e:	6878      	ldr	r0, [r7, #4]
 8014b40:	f7ff f80d 	bl	8013b5e <_ZSt4moveIRNSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8014b44:	4602      	mov	r2, r0
 8014b46:	f107 0314 	add.w	r3, r7, #20
 8014b4a:	4611      	mov	r1, r2
 8014b4c:	4618      	mov	r0, r3
 8014b4e:	f7ff f811 	bl	8013b74 <_ZNSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 8014b52:	f107 0214 	add.w	r2, r7, #20
 8014b56:	683b      	ldr	r3, [r7, #0]
 8014b58:	68b9      	ldr	r1, [r7, #8]
 8014b5a:	4620      	mov	r0, r4
 8014b5c:	f000 fe19 	bl	8015792 <_ZNSt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>
 8014b60:	f107 0314 	add.w	r3, r7, #20
 8014b64:	4618      	mov	r0, r3
 8014b66:	f7fe fa97 	bl	8013098 <_ZNSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 8014b6a:	68fb      	ldr	r3, [r7, #12]
 8014b6c:	4618      	mov	r0, r3
 8014b6e:	371c      	adds	r7, #28
 8014b70:	46bd      	mov	sp, r7
 8014b72:	bd90      	pop	{r4, r7, pc}
 8014b74:	08024854 	.word	0x08024854

08014b78 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 8014b78:	b480      	push	{r7}
 8014b7a:	b083      	sub	sp, #12
 8014b7c:	af00      	add	r7, sp, #0
 8014b7e:	6078      	str	r0, [r7, #4]
 8014b80:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	2200      	movs	r2, #0
 8014b86:	605a      	str	r2, [r3, #4]
	return *this;
 8014b88:	687b      	ldr	r3, [r7, #4]
      }
 8014b8a:	4618      	mov	r0, r3
 8014b8c:	370c      	adds	r7, #12
 8014b8e:	46bd      	mov	sp, r7
 8014b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b94:	4770      	bx	lr

08014b96 <_ZNSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>:
          void operator()(typename _Alloc::value_type* __ptr)
 8014b96:	b590      	push	{r4, r7, lr}
 8014b98:	b085      	sub	sp, #20
 8014b9a:	af00      	add	r7, sp, #0
 8014b9c:	6078      	str	r0, [r7, #4]
 8014b9e:	6039      	str	r1, [r7, #0]
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 8014ba0:	6879      	ldr	r1, [r7, #4]
 8014ba2:	f107 0308 	add.w	r3, r7, #8
 8014ba6:	683a      	ldr	r2, [r7, #0]
 8014ba8:	4618      	mov	r0, r3
 8014baa:	f7ff fed7 	bl	801495c <_ZNSt15__allocated_ptrISaIN4tama25Stm32SoundPlayingStrategyEEEC1ERS2_PS1_>
	    allocator_traits<_Alloc>::destroy(_M_alloc, __guard.get());
 8014bae:	687c      	ldr	r4, [r7, #4]
 8014bb0:	f107 0308 	add.w	r3, r7, #8
 8014bb4:	4618      	mov	r0, r3
 8014bb6:	f7fe ffa8 	bl	8013b0a <_ZNSt15__allocated_ptrISaIN4tama25Stm32SoundPlayingStrategyEEE3getEv>
 8014bba:	4603      	mov	r3, r0
 8014bbc:	4619      	mov	r1, r3
 8014bbe:	4620      	mov	r0, r4
 8014bc0:	f000 fe05 	bl	80157ce <_ZNSt16allocator_traitsISaIN4tama25Stm32SoundPlayingStrategyEEE7destroyIS1_EEvRS2_PT_>
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 8014bc4:	f107 0308 	add.w	r3, r7, #8
 8014bc8:	4618      	mov	r0, r3
 8014bca:	f7fe ff89 	bl	8013ae0 <_ZNSt15__allocated_ptrISaIN4tama25Stm32SoundPlayingStrategyEEED1Ev>
          }
 8014bce:	bf00      	nop
 8014bd0:	3714      	adds	r7, #20
 8014bd2:	46bd      	mov	sp, r7
 8014bd4:	bd90      	pop	{r4, r7, pc}

08014bd6 <_ZN9__gnu_cxx13new_allocatorIN4tama10Stm32InputEEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8014bd6:	b480      	push	{r7}
 8014bd8:	b083      	sub	sp, #12
 8014bda:	af00      	add	r7, sp, #0
 8014bdc:	6078      	str	r0, [r7, #4]
 8014bde:	6039      	str	r1, [r7, #0]
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	4618      	mov	r0, r3
 8014be4:	370c      	adds	r7, #12
 8014be6:	46bd      	mov	sp, r7
 8014be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bec:	4770      	bx	lr

08014bee <_ZNSt16allocator_traitsISaIN4tama10Stm32InputEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8014bee:	b580      	push	{r7, lr}
 8014bf0:	b082      	sub	sp, #8
 8014bf2:	af00      	add	r7, sp, #0
 8014bf4:	6078      	str	r0, [r7, #4]
 8014bf6:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8014bf8:	2200      	movs	r2, #0
 8014bfa:	6839      	ldr	r1, [r7, #0]
 8014bfc:	6878      	ldr	r0, [r7, #4]
 8014bfe:	f000 fdf3 	bl	80157e8 <_ZN9__gnu_cxx13new_allocatorIN4tama10Stm32InputEE8allocateEjPKv>
 8014c02:	4603      	mov	r3, r0
 8014c04:	4618      	mov	r0, r3
 8014c06:	3708      	adds	r7, #8
 8014c08:	46bd      	mov	sp, r7
 8014c0a:	bd80      	pop	{r7, pc}

08014c0c <_ZNSt15__allocated_ptrISaIN4tama10Stm32InputEEEC1ERS2_PS1_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8014c0c:	b580      	push	{r7, lr}
 8014c0e:	b084      	sub	sp, #16
 8014c10:	af00      	add	r7, sp, #0
 8014c12:	60f8      	str	r0, [r7, #12]
 8014c14:	60b9      	str	r1, [r7, #8]
 8014c16:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8014c18:	68b8      	ldr	r0, [r7, #8]
 8014c1a:	f000 fe06 	bl	801582a <_ZSt11__addressofISaIN4tama10Stm32InputEEEPT_RS3_>
 8014c1e:	4602      	mov	r2, r0
 8014c20:	68fb      	ldr	r3, [r7, #12]
 8014c22:	601a      	str	r2, [r3, #0]
 8014c24:	68fb      	ldr	r3, [r7, #12]
 8014c26:	687a      	ldr	r2, [r7, #4]
 8014c28:	605a      	str	r2, [r3, #4]
      { }
 8014c2a:	68fb      	ldr	r3, [r7, #12]
 8014c2c:	4618      	mov	r0, r3
 8014c2e:	3710      	adds	r7, #16
 8014c30:	46bd      	mov	sp, r7
 8014c32:	bd80      	pop	{r7, pc}

08014c34 <_ZNSt16allocator_traitsISaIN4tama10Stm32InputEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8014c34:	b580      	push	{r7, lr}
 8014c36:	b084      	sub	sp, #16
 8014c38:	af00      	add	r7, sp, #0
 8014c3a:	60f8      	str	r0, [r7, #12]
 8014c3c:	60b9      	str	r1, [r7, #8]
 8014c3e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8014c40:	687a      	ldr	r2, [r7, #4]
 8014c42:	68b9      	ldr	r1, [r7, #8]
 8014c44:	68f8      	ldr	r0, [r7, #12]
 8014c46:	f000 fdfb 	bl	8015840 <_ZN9__gnu_cxx13new_allocatorIN4tama10Stm32InputEE10deallocateEPS2_j>
 8014c4a:	bf00      	nop
 8014c4c:	3710      	adds	r7, #16
 8014c4e:	46bd      	mov	sp, r7
 8014c50:	bd80      	pop	{r7, pc}

08014c52 <_ZNSt15__allocated_ptrISaIN4tama10Stm32InputEEE10_S_raw_ptrEPS1_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 8014c52:	b480      	push	{r7}
 8014c54:	b083      	sub	sp, #12
 8014c56:	af00      	add	r7, sp, #0
 8014c58:	6078      	str	r0, [r7, #4]
 8014c5a:	687b      	ldr	r3, [r7, #4]
 8014c5c:	4618      	mov	r0, r3
 8014c5e:	370c      	adds	r7, #12
 8014c60:	46bd      	mov	sp, r7
 8014c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c66:	4770      	bx	lr

08014c68 <_ZN4tama5InputC1Ev>:
#include <vector>
#include "../common/observers/OnInput.h"

namespace tama
{
    class Input
 8014c68:	b580      	push	{r7, lr}
 8014c6a:	b082      	sub	sp, #8
 8014c6c:	af00      	add	r7, sp, #0
 8014c6e:	6078      	str	r0, [r7, #4]
 8014c70:	4a06      	ldr	r2, [pc, #24]	; (8014c8c <_ZN4tama5InputC1Ev+0x24>)
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	601a      	str	r2, [r3, #0]
 8014c76:	687b      	ldr	r3, [r7, #4]
 8014c78:	3304      	adds	r3, #4
 8014c7a:	4618      	mov	r0, r3
 8014c7c:	f000 fded 	bl	801585a <_ZNSt6vectorIPN4tama7OnInputESaIS2_EEC1Ev>
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	4618      	mov	r0, r3
 8014c84:	3708      	adds	r7, #8
 8014c86:	46bd      	mov	sp, r7
 8014c88:	bd80      	pop	{r7, pc}
 8014c8a:	bf00      	nop
 8014c8c:	080248fc 	.word	0x080248fc

08014c90 <_ZN4tama5InputD1Ev>:
 8014c90:	b580      	push	{r7, lr}
 8014c92:	b082      	sub	sp, #8
 8014c94:	af00      	add	r7, sp, #0
 8014c96:	6078      	str	r0, [r7, #4]
 8014c98:	4a06      	ldr	r2, [pc, #24]	; (8014cb4 <_ZN4tama5InputD1Ev+0x24>)
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	601a      	str	r2, [r3, #0]
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	3304      	adds	r3, #4
 8014ca2:	4618      	mov	r0, r3
 8014ca4:	f000 fde6 	bl	8015874 <_ZNSt6vectorIPN4tama7OnInputESaIS2_EED1Ev>
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	4618      	mov	r0, r3
 8014cac:	3708      	adds	r7, #8
 8014cae:	46bd      	mov	sp, r7
 8014cb0:	bd80      	pop	{r7, pc}
 8014cb2:	bf00      	nop
 8014cb4:	080248fc 	.word	0x080248fc

08014cb8 <_ZN4tama10Stm32InputC1Ev>:

#include "../../Core/input/Input.h"

namespace tama
{
    class Stm32Input : public Input
 8014cb8:	b580      	push	{r7, lr}
 8014cba:	b082      	sub	sp, #8
 8014cbc:	af00      	add	r7, sp, #0
 8014cbe:	6078      	str	r0, [r7, #4]
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	4618      	mov	r0, r3
 8014cc4:	f7ff ffd0 	bl	8014c68 <_ZN4tama5InputC1Ev>
 8014cc8:	4a06      	ldr	r2, [pc, #24]	; (8014ce4 <_ZN4tama10Stm32InputC1Ev+0x2c>)
 8014cca:	687b      	ldr	r3, [r7, #4]
 8014ccc:	601a      	str	r2, [r3, #0]
 8014cce:	687b      	ldr	r3, [r7, #4]
 8014cd0:	2203      	movs	r2, #3
 8014cd2:	741a      	strb	r2, [r3, #16]
 8014cd4:	687b      	ldr	r3, [r7, #4]
 8014cd6:	2200      	movs	r2, #0
 8014cd8:	615a      	str	r2, [r3, #20]
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	4618      	mov	r0, r3
 8014cde:	3708      	adds	r7, #8
 8014ce0:	46bd      	mov	sp, r7
 8014ce2:	bd80      	pop	{r7, pc}
 8014ce4:	08024944 	.word	0x08024944

08014ce8 <_ZN9__gnu_cxx13new_allocatorIN4tama10Stm32InputEE9constructIS2_JEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8014ce8:	b580      	push	{r7, lr}
 8014cea:	b082      	sub	sp, #8
 8014cec:	af00      	add	r7, sp, #0
 8014cee:	6078      	str	r0, [r7, #4]
 8014cf0:	6039      	str	r1, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8014cf2:	683b      	ldr	r3, [r7, #0]
 8014cf4:	4619      	mov	r1, r3
 8014cf6:	2018      	movs	r0, #24
 8014cf8:	f7ec f9a1 	bl	800103e <_ZnwjPv>
 8014cfc:	4601      	mov	r1, r0
 8014cfe:	2900      	cmp	r1, #0
 8014d00:	d00a      	beq.n	8014d18 <_ZN9__gnu_cxx13new_allocatorIN4tama10Stm32InputEE9constructIS2_JEEEvPT_DpOT0_+0x30>
 8014d02:	460a      	mov	r2, r1
 8014d04:	2300      	movs	r3, #0
 8014d06:	6013      	str	r3, [r2, #0]
 8014d08:	6053      	str	r3, [r2, #4]
 8014d0a:	6093      	str	r3, [r2, #8]
 8014d0c:	60d3      	str	r3, [r2, #12]
 8014d0e:	6113      	str	r3, [r2, #16]
 8014d10:	6153      	str	r3, [r2, #20]
 8014d12:	4608      	mov	r0, r1
 8014d14:	f7ff ffd0 	bl	8014cb8 <_ZN4tama10Stm32InputC1Ev>
 8014d18:	bf00      	nop
 8014d1a:	3708      	adds	r7, #8
 8014d1c:	46bd      	mov	sp, r7
 8014d1e:	bd80      	pop	{r7, pc}

08014d20 <_ZNSaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) throw() { }
 8014d20:	b580      	push	{r7, lr}
 8014d22:	b082      	sub	sp, #8
 8014d24:	af00      	add	r7, sp, #0
 8014d26:	6078      	str	r0, [r7, #4]
 8014d28:	6039      	str	r1, [r7, #0]
 8014d2a:	6878      	ldr	r0, [r7, #4]
 8014d2c:	f000 fdbd 	bl	80158aa <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>
 8014d30:	687b      	ldr	r3, [r7, #4]
 8014d32:	4618      	mov	r0, r3
 8014d34:	3708      	adds	r7, #8
 8014d36:	46bd      	mov	sp, r7
 8014d38:	bd80      	pop	{r7, pc}

08014d3a <_ZNSaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>:
      ~allocator() throw() { }
 8014d3a:	b580      	push	{r7, lr}
 8014d3c:	b082      	sub	sp, #8
 8014d3e:	af00      	add	r7, sp, #0
 8014d40:	6078      	str	r0, [r7, #4]
 8014d42:	6878      	ldr	r0, [r7, #4]
 8014d44:	f000 fdbc 	bl	80158c0 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	4618      	mov	r0, r3
 8014d4c:	3708      	adds	r7, #8
 8014d4e:	46bd      	mov	sp, r7
 8014d50:	bd80      	pop	{r7, pc}

08014d52 <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>:
    __allocate_guarded(_Alloc& __a)
 8014d52:	b580      	push	{r7, lr}
 8014d54:	b082      	sub	sp, #8
 8014d56:	af00      	add	r7, sp, #0
 8014d58:	6078      	str	r0, [r7, #4]
 8014d5a:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 8014d5c:	2101      	movs	r1, #1
 8014d5e:	6838      	ldr	r0, [r7, #0]
 8014d60:	f000 fdb9 	bl	80158d6 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>
 8014d64:	4603      	mov	r3, r0
 8014d66:	461a      	mov	r2, r3
 8014d68:	6839      	ldr	r1, [r7, #0]
 8014d6a:	6878      	ldr	r0, [r7, #4]
 8014d6c:	f000 fdc2 	bl	80158f4 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
    }
 8014d70:	6878      	ldr	r0, [r7, #4]
 8014d72:	3708      	adds	r7, #8
 8014d74:	46bd      	mov	sp, r7
 8014d76:	bd80      	pop	{r7, pc}

08014d78 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>:
      ~__allocated_ptr()
 8014d78:	b580      	push	{r7, lr}
 8014d7a:	b082      	sub	sp, #8
 8014d7c:	af00      	add	r7, sp, #0
 8014d7e:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	685b      	ldr	r3, [r3, #4]
 8014d84:	2b00      	cmp	r3, #0
 8014d86:	d007      	beq.n	8014d98 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	6818      	ldr	r0, [r3, #0]
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	685b      	ldr	r3, [r3, #4]
 8014d90:	2201      	movs	r2, #1
 8014d92:	4619      	mov	r1, r3
 8014d94:	f000 fdc2 	bl	801591c <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>
      }
 8014d98:	687b      	ldr	r3, [r7, #4]
 8014d9a:	4618      	mov	r0, r3
 8014d9c:	3708      	adds	r7, #8
 8014d9e:	46bd      	mov	sp, r7
 8014da0:	bd80      	pop	{r7, pc}

08014da2 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 8014da2:	b580      	push	{r7, lr}
 8014da4:	b082      	sub	sp, #8
 8014da6:	af00      	add	r7, sp, #0
 8014da8:	6078      	str	r0, [r7, #4]
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	685b      	ldr	r3, [r3, #4]
 8014dae:	4618      	mov	r0, r3
 8014db0:	f000 fdc3 	bl	801593a <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>
 8014db4:	4603      	mov	r3, r0
 8014db6:	4618      	mov	r0, r3
 8014db8:	3708      	adds	r7, #8
 8014dba:	46bd      	mov	sp, r7
 8014dbc:	bd80      	pop	{r7, pc}

08014dbe <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, false>
 8014dbe:	b580      	push	{r7, lr}
 8014dc0:	b082      	sub	sp, #8
 8014dc2:	af00      	add	r7, sp, #0
 8014dc4:	6078      	str	r0, [r7, #4]
 8014dc6:	687b      	ldr	r3, [r7, #4]
 8014dc8:	4618      	mov	r0, r3
 8014dca:	f7fe f9f8 	bl	80131be <_ZNSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	4618      	mov	r0, r3
 8014dd2:	3708      	adds	r7, #8
 8014dd4:	46bd      	mov	sp, r7
 8014dd6:	bd80      	pop	{r7, pc}

08014dd8 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama10Stm32InputEELb1EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp
 8014dd8:	b580      	push	{r7, lr}
 8014dda:	b082      	sub	sp, #8
 8014ddc:	af00      	add	r7, sp, #0
 8014dde:	6078      	str	r0, [r7, #4]
 8014de0:	6878      	ldr	r0, [r7, #4]
 8014de2:	f7fd fd0a 	bl	80127fa <_ZNSaIN4tama10Stm32InputEED1Ev>
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	4618      	mov	r0, r3
 8014dea:	3708      	adds	r7, #8
 8014dec:	46bd      	mov	sp, r7
 8014dee:	bd80      	pop	{r7, pc}

08014df0 <_ZNSt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>:
      class _Impl : _Sp_ebo_helper<0, _Deleter>, _Sp_ebo_helper<1, _Alloc>
 8014df0:	b580      	push	{r7, lr}
 8014df2:	b082      	sub	sp, #8
 8014df4:	af00      	add	r7, sp, #0
 8014df6:	6078      	str	r0, [r7, #4]
 8014df8:	687b      	ldr	r3, [r7, #4]
 8014dfa:	3301      	adds	r3, #1
 8014dfc:	4618      	mov	r0, r3
 8014dfe:	f7ff ffeb 	bl	8014dd8 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama10Stm32InputEELb1EED1Ev>
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	4618      	mov	r0, r3
 8014e06:	f7ff ffda 	bl	8014dbe <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	4618      	mov	r0, r3
 8014e0e:	3708      	adds	r7, #8
 8014e10:	46bd      	mov	sp, r7
 8014e12:	bd80      	pop	{r7, pc}

08014e14 <_ZNSt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 8014e14:	b590      	push	{r4, r7, lr}
 8014e16:	b087      	sub	sp, #28
 8014e18:	af00      	add	r7, sp, #0
 8014e1a:	60f8      	str	r0, [r7, #12]
 8014e1c:	60b9      	str	r1, [r7, #8]
 8014e1e:	607a      	str	r2, [r7, #4]
 8014e20:	603b      	str	r3, [r7, #0]
      : _M_impl(__p, std::move(__d), __a) { }
 8014e22:	68fb      	ldr	r3, [r7, #12]
 8014e24:	4618      	mov	r0, r3
 8014e26:	f7ef fc8f 	bl	8004748 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8014e2a:	4a10      	ldr	r2, [pc, #64]	; (8014e6c <_ZNSt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_+0x58>)
 8014e2c:	68fb      	ldr	r3, [r7, #12]
 8014e2e:	601a      	str	r2, [r3, #0]
 8014e30:	68fb      	ldr	r3, [r7, #12]
 8014e32:	f103 040c 	add.w	r4, r3, #12
 8014e36:	6878      	ldr	r0, [r7, #4]
 8014e38:	f7fe ff79 	bl	8013d2e <_ZSt4moveIRNSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8014e3c:	4602      	mov	r2, r0
 8014e3e:	f107 0314 	add.w	r3, r7, #20
 8014e42:	4611      	mov	r1, r2
 8014e44:	4618      	mov	r0, r3
 8014e46:	f7fe ff7d 	bl	8013d44 <_ZNSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 8014e4a:	f107 0214 	add.w	r2, r7, #20
 8014e4e:	683b      	ldr	r3, [r7, #0]
 8014e50:	68b9      	ldr	r1, [r7, #8]
 8014e52:	4620      	mov	r0, r4
 8014e54:	f000 fd7c 	bl	8015950 <_ZNSt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>
 8014e58:	f107 0314 	add.w	r3, r7, #20
 8014e5c:	4618      	mov	r0, r3
 8014e5e:	f7fe f9ae 	bl	80131be <_ZNSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 8014e62:	68fb      	ldr	r3, [r7, #12]
 8014e64:	4618      	mov	r0, r3
 8014e66:	371c      	adds	r7, #28
 8014e68:	46bd      	mov	sp, r7
 8014e6a:	bd90      	pop	{r4, r7, pc}
 8014e6c:	08024838 	.word	0x08024838

08014e70 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 8014e70:	b480      	push	{r7}
 8014e72:	b083      	sub	sp, #12
 8014e74:	af00      	add	r7, sp, #0
 8014e76:	6078      	str	r0, [r7, #4]
 8014e78:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 8014e7a:	687b      	ldr	r3, [r7, #4]
 8014e7c:	2200      	movs	r2, #0
 8014e7e:	605a      	str	r2, [r3, #4]
	return *this;
 8014e80:	687b      	ldr	r3, [r7, #4]
      }
 8014e82:	4618      	mov	r0, r3
 8014e84:	370c      	adds	r7, #12
 8014e86:	46bd      	mov	sp, r7
 8014e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e8c:	4770      	bx	lr

08014e8e <_ZNSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>:
          void operator()(typename _Alloc::value_type* __ptr)
 8014e8e:	b590      	push	{r4, r7, lr}
 8014e90:	b085      	sub	sp, #20
 8014e92:	af00      	add	r7, sp, #0
 8014e94:	6078      	str	r0, [r7, #4]
 8014e96:	6039      	str	r1, [r7, #0]
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 8014e98:	6879      	ldr	r1, [r7, #4]
 8014e9a:	f107 0308 	add.w	r3, r7, #8
 8014e9e:	683a      	ldr	r2, [r7, #0]
 8014ea0:	4618      	mov	r0, r3
 8014ea2:	f7ff feb3 	bl	8014c0c <_ZNSt15__allocated_ptrISaIN4tama10Stm32InputEEEC1ERS2_PS1_>
	    allocator_traits<_Alloc>::destroy(_M_alloc, __guard.get());
 8014ea6:	687c      	ldr	r4, [r7, #4]
 8014ea8:	f107 0308 	add.w	r3, r7, #8
 8014eac:	4618      	mov	r0, r3
 8014eae:	f7fe ff14 	bl	8013cda <_ZNSt15__allocated_ptrISaIN4tama10Stm32InputEEE3getEv>
 8014eb2:	4603      	mov	r3, r0
 8014eb4:	4619      	mov	r1, r3
 8014eb6:	4620      	mov	r0, r4
 8014eb8:	f000 fd68 	bl	801598c <_ZNSt16allocator_traitsISaIN4tama10Stm32InputEEE7destroyIS1_EEvRS2_PT_>
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 8014ebc:	f107 0308 	add.w	r3, r7, #8
 8014ec0:	4618      	mov	r0, r3
 8014ec2:	f7fe fef5 	bl	8013cb0 <_ZNSt15__allocated_ptrISaIN4tama10Stm32InputEEED1Ev>
          }
 8014ec6:	bf00      	nop
 8014ec8:	3714      	adds	r7, #20
 8014eca:	46bd      	mov	sp, r7
 8014ecc:	bd90      	pop	{r4, r7, pc}

08014ece <_ZN9__gnu_cxx13new_allocatorIN4tama7ContextEEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8014ece:	b480      	push	{r7}
 8014ed0:	b083      	sub	sp, #12
 8014ed2:	af00      	add	r7, sp, #0
 8014ed4:	6078      	str	r0, [r7, #4]
 8014ed6:	6039      	str	r1, [r7, #0]
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	4618      	mov	r0, r3
 8014edc:	370c      	adds	r7, #12
 8014ede:	46bd      	mov	sp, r7
 8014ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ee4:	4770      	bx	lr

08014ee6 <_ZNSt16allocator_traitsISaIN4tama7ContextEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8014ee6:	b580      	push	{r7, lr}
 8014ee8:	b082      	sub	sp, #8
 8014eea:	af00      	add	r7, sp, #0
 8014eec:	6078      	str	r0, [r7, #4]
 8014eee:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8014ef0:	2200      	movs	r2, #0
 8014ef2:	6839      	ldr	r1, [r7, #0]
 8014ef4:	6878      	ldr	r0, [r7, #4]
 8014ef6:	f000 fd56 	bl	80159a6 <_ZN9__gnu_cxx13new_allocatorIN4tama7ContextEE8allocateEjPKv>
 8014efa:	4603      	mov	r3, r0
 8014efc:	4618      	mov	r0, r3
 8014efe:	3708      	adds	r7, #8
 8014f00:	46bd      	mov	sp, r7
 8014f02:	bd80      	pop	{r7, pc}

08014f04 <_ZNSt15__allocated_ptrISaIN4tama7ContextEEEC1ERS2_PS1_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8014f04:	b580      	push	{r7, lr}
 8014f06:	b084      	sub	sp, #16
 8014f08:	af00      	add	r7, sp, #0
 8014f0a:	60f8      	str	r0, [r7, #12]
 8014f0c:	60b9      	str	r1, [r7, #8]
 8014f0e:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8014f10:	68b8      	ldr	r0, [r7, #8]
 8014f12:	f000 fd69 	bl	80159e8 <_ZSt11__addressofISaIN4tama7ContextEEEPT_RS3_>
 8014f16:	4602      	mov	r2, r0
 8014f18:	68fb      	ldr	r3, [r7, #12]
 8014f1a:	601a      	str	r2, [r3, #0]
 8014f1c:	68fb      	ldr	r3, [r7, #12]
 8014f1e:	687a      	ldr	r2, [r7, #4]
 8014f20:	605a      	str	r2, [r3, #4]
      { }
 8014f22:	68fb      	ldr	r3, [r7, #12]
 8014f24:	4618      	mov	r0, r3
 8014f26:	3710      	adds	r7, #16
 8014f28:	46bd      	mov	sp, r7
 8014f2a:	bd80      	pop	{r7, pc}

08014f2c <_ZNSt16allocator_traitsISaIN4tama7ContextEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8014f2c:	b580      	push	{r7, lr}
 8014f2e:	b084      	sub	sp, #16
 8014f30:	af00      	add	r7, sp, #0
 8014f32:	60f8      	str	r0, [r7, #12]
 8014f34:	60b9      	str	r1, [r7, #8]
 8014f36:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8014f38:	687a      	ldr	r2, [r7, #4]
 8014f3a:	68b9      	ldr	r1, [r7, #8]
 8014f3c:	68f8      	ldr	r0, [r7, #12]
 8014f3e:	f000 fd5e 	bl	80159fe <_ZN9__gnu_cxx13new_allocatorIN4tama7ContextEE10deallocateEPS2_j>
 8014f42:	bf00      	nop
 8014f44:	3710      	adds	r7, #16
 8014f46:	46bd      	mov	sp, r7
 8014f48:	bd80      	pop	{r7, pc}

08014f4a <_ZNSt15__allocated_ptrISaIN4tama7ContextEEE10_S_raw_ptrEPS1_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 8014f4a:	b480      	push	{r7}
 8014f4c:	b083      	sub	sp, #12
 8014f4e:	af00      	add	r7, sp, #0
 8014f50:	6078      	str	r0, [r7, #4]
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	4618      	mov	r0, r3
 8014f56:	370c      	adds	r7, #12
 8014f58:	46bd      	mov	sp, r7
 8014f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f5e:	4770      	bx	lr

08014f60 <_ZN9__gnu_cxx13new_allocatorIN4tama7ContextEE9constructIS2_JRSt10shared_ptrINS1_13TextureLoaderEERS5_INS1_5InputEES5_INS1_11SoundPlayerEERS5_INS1_18TimeMonitorCreatorEEEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8014f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f64:	b08e      	sub	sp, #56	; 0x38
 8014f66:	af02      	add	r7, sp, #8
 8014f68:	60f8      	str	r0, [r7, #12]
 8014f6a:	60b9      	str	r1, [r7, #8]
 8014f6c:	607a      	str	r2, [r7, #4]
 8014f6e:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8014f70:	6878      	ldr	r0, [r7, #4]
 8014f72:	f7fd fa3d 	bl	80123f0 <_ZSt7forwardIRSt10shared_ptrIN4tama13TextureLoaderEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8014f76:	4602      	mov	r2, r0
 8014f78:	f107 0310 	add.w	r3, r7, #16
 8014f7c:	4611      	mov	r1, r2
 8014f7e:	4618      	mov	r0, r3
 8014f80:	f7ed ff89 	bl	8002e96 <_ZNSt10shared_ptrIN4tama13TextureLoaderEEC1ERKS2_>
 8014f84:	f107 0510 	add.w	r5, r7, #16
 8014f88:	6838      	ldr	r0, [r7, #0]
 8014f8a:	f7fd fa3c 	bl	8012406 <_ZSt7forwardIRSt10shared_ptrIN4tama5InputEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8014f8e:	4602      	mov	r2, r0
 8014f90:	f107 0318 	add.w	r3, r7, #24
 8014f94:	4611      	mov	r1, r2
 8014f96:	4618      	mov	r0, r3
 8014f98:	f7ed ffa3 	bl	8002ee2 <_ZNSt10shared_ptrIN4tama5InputEEC1ERKS2_>
 8014f9c:	f107 0618 	add.w	r6, r7, #24
 8014fa0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8014fa2:	f7fd fa3b 	bl	801241c <_ZSt7forwardISt10shared_ptrIN4tama11SoundPlayerEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8014fa6:	4602      	mov	r2, r0
 8014fa8:	f107 0320 	add.w	r3, r7, #32
 8014fac:	4611      	mov	r1, r2
 8014fae:	4618      	mov	r0, r3
 8014fb0:	f000 fd3d 	bl	8015a2e <_ZNSt10shared_ptrIN4tama11SoundPlayerEEC1EOS2_>
 8014fb4:	f107 0820 	add.w	r8, r7, #32
 8014fb8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8014fba:	f7fd fa3a 	bl	8012432 <_ZSt7forwardIRSt10shared_ptrIN4tama18TimeMonitorCreatorEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8014fbe:	4602      	mov	r2, r0
 8014fc0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014fc4:	4611      	mov	r1, r2
 8014fc6:	4618      	mov	r0, r3
 8014fc8:	f7ed ffd7 	bl	8002f7a <_ZNSt10shared_ptrIN4tama18TimeMonitorCreatorEEC1ERKS2_>
 8014fcc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8014fd0:	68bb      	ldr	r3, [r7, #8]
 8014fd2:	4619      	mov	r1, r3
 8014fd4:	20c0      	movs	r0, #192	; 0xc0
 8014fd6:	f7ec f832 	bl	800103e <_ZnwjPv>
 8014fda:	2800      	cmp	r0, #0
 8014fdc:	d005      	beq.n	8014fea <_ZN9__gnu_cxx13new_allocatorIN4tama7ContextEE9constructIS2_JRSt10shared_ptrINS1_13TextureLoaderEERS5_INS1_5InputEES5_INS1_11SoundPlayerEERS5_INS1_18TimeMonitorCreatorEEEEEvPT_DpOT0_+0x8a>
 8014fde:	9400      	str	r4, [sp, #0]
 8014fe0:	4643      	mov	r3, r8
 8014fe2:	4632      	mov	r2, r6
 8014fe4:	4629      	mov	r1, r5
 8014fe6:	f7ed ffd8 	bl	8002f9a <_ZN4tama7ContextC1ESt10shared_ptrINS_13TextureLoaderEES1_INS_5InputEES1_INS_11SoundPlayerEES1_INS_18TimeMonitorCreatorEE>
 8014fea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014fee:	4618      	mov	r0, r3
 8014ff0:	f7f0 f987 	bl	8005302 <_ZNSt10shared_ptrIN4tama18TimeMonitorCreatorEED1Ev>
 8014ff4:	f107 0320 	add.w	r3, r7, #32
 8014ff8:	4618      	mov	r0, r3
 8014ffa:	f7f0 fc54 	bl	80058a6 <_ZNSt10shared_ptrIN4tama11SoundPlayerEED1Ev>
 8014ffe:	f107 0318 	add.w	r3, r7, #24
 8015002:	4618      	mov	r0, r3
 8015004:	f7ee fe6c 	bl	8003ce0 <_ZNSt10shared_ptrIN4tama5InputEED1Ev>
 8015008:	f107 0310 	add.w	r3, r7, #16
 801500c:	4618      	mov	r0, r3
 801500e:	f7f0 fcad 	bl	800596c <_ZNSt10shared_ptrIN4tama13TextureLoaderEED1Ev>
 8015012:	bf00      	nop
 8015014:	3730      	adds	r7, #48	; 0x30
 8015016:	46bd      	mov	sp, r7
 8015018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801501c <_ZNSaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) throw() { }
 801501c:	b580      	push	{r7, lr}
 801501e:	b082      	sub	sp, #8
 8015020:	af00      	add	r7, sp, #0
 8015022:	6078      	str	r0, [r7, #4]
 8015024:	6039      	str	r1, [r7, #0]
 8015026:	6878      	ldr	r0, [r7, #4]
 8015028:	f000 fd14 	bl	8015a54 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	4618      	mov	r0, r3
 8015030:	3708      	adds	r7, #8
 8015032:	46bd      	mov	sp, r7
 8015034:	bd80      	pop	{r7, pc}

08015036 <_ZNSaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>:
      ~allocator() throw() { }
 8015036:	b580      	push	{r7, lr}
 8015038:	b082      	sub	sp, #8
 801503a:	af00      	add	r7, sp, #0
 801503c:	6078      	str	r0, [r7, #4]
 801503e:	6878      	ldr	r0, [r7, #4]
 8015040:	f000 fd13 	bl	8015a6a <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	4618      	mov	r0, r3
 8015048:	3708      	adds	r7, #8
 801504a:	46bd      	mov	sp, r7
 801504c:	bd80      	pop	{r7, pc}

0801504e <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>:
    __allocate_guarded(_Alloc& __a)
 801504e:	b580      	push	{r7, lr}
 8015050:	b082      	sub	sp, #8
 8015052:	af00      	add	r7, sp, #0
 8015054:	6078      	str	r0, [r7, #4]
 8015056:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 8015058:	2101      	movs	r1, #1
 801505a:	6838      	ldr	r0, [r7, #0]
 801505c:	f000 fd10 	bl	8015a80 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>
 8015060:	4603      	mov	r3, r0
 8015062:	461a      	mov	r2, r3
 8015064:	6839      	ldr	r1, [r7, #0]
 8015066:	6878      	ldr	r0, [r7, #4]
 8015068:	f000 fd19 	bl	8015a9e <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
    }
 801506c:	6878      	ldr	r0, [r7, #4]
 801506e:	3708      	adds	r7, #8
 8015070:	46bd      	mov	sp, r7
 8015072:	bd80      	pop	{r7, pc}

08015074 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>:
      ~__allocated_ptr()
 8015074:	b580      	push	{r7, lr}
 8015076:	b082      	sub	sp, #8
 8015078:	af00      	add	r7, sp, #0
 801507a:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	685b      	ldr	r3, [r3, #4]
 8015080:	2b00      	cmp	r3, #0
 8015082:	d007      	beq.n	8015094 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	6818      	ldr	r0, [r3, #0]
 8015088:	687b      	ldr	r3, [r7, #4]
 801508a:	685b      	ldr	r3, [r3, #4]
 801508c:	2201      	movs	r2, #1
 801508e:	4619      	mov	r1, r3
 8015090:	f000 fd19 	bl	8015ac6 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>
      }
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	4618      	mov	r0, r3
 8015098:	3708      	adds	r7, #8
 801509a:	46bd      	mov	sp, r7
 801509c:	bd80      	pop	{r7, pc}

0801509e <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 801509e:	b580      	push	{r7, lr}
 80150a0:	b082      	sub	sp, #8
 80150a2:	af00      	add	r7, sp, #0
 80150a4:	6078      	str	r0, [r7, #4]
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	685b      	ldr	r3, [r3, #4]
 80150aa:	4618      	mov	r0, r3
 80150ac:	f000 fd1a 	bl	8015ae4 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>
 80150b0:	4603      	mov	r3, r0
 80150b2:	4618      	mov	r0, r3
 80150b4:	3708      	adds	r7, #8
 80150b6:	46bd      	mov	sp, r7
 80150b8:	bd80      	pop	{r7, pc}

080150ba <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, false>
 80150ba:	b580      	push	{r7, lr}
 80150bc:	b082      	sub	sp, #8
 80150be:	af00      	add	r7, sp, #0
 80150c0:	6078      	str	r0, [r7, #4]
 80150c2:	687b      	ldr	r3, [r7, #4]
 80150c4:	4618      	mov	r0, r3
 80150c6:	f7fe f925 	bl	8013314 <_ZNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 80150ca:	687b      	ldr	r3, [r7, #4]
 80150cc:	4618      	mov	r0, r3
 80150ce:	3708      	adds	r7, #8
 80150d0:	46bd      	mov	sp, r7
 80150d2:	bd80      	pop	{r7, pc}

080150d4 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama7ContextEELb1EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp
 80150d4:	b580      	push	{r7, lr}
 80150d6:	b082      	sub	sp, #8
 80150d8:	af00      	add	r7, sp, #0
 80150da:	6078      	str	r0, [r7, #4]
 80150dc:	6878      	ldr	r0, [r7, #4]
 80150de:	f7fd fbe8 	bl	80128b2 <_ZNSaIN4tama7ContextEED1Ev>
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	4618      	mov	r0, r3
 80150e6:	3708      	adds	r7, #8
 80150e8:	46bd      	mov	sp, r7
 80150ea:	bd80      	pop	{r7, pc}

080150ec <_ZNSt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>:
      class _Impl : _Sp_ebo_helper<0, _Deleter>, _Sp_ebo_helper<1, _Alloc>
 80150ec:	b580      	push	{r7, lr}
 80150ee:	b082      	sub	sp, #8
 80150f0:	af00      	add	r7, sp, #0
 80150f2:	6078      	str	r0, [r7, #4]
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	3301      	adds	r3, #1
 80150f8:	4618      	mov	r0, r3
 80150fa:	f7ff ffeb 	bl	80150d4 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama7ContextEELb1EED1Ev>
 80150fe:	687b      	ldr	r3, [r7, #4]
 8015100:	4618      	mov	r0, r3
 8015102:	f7ff ffda 	bl	80150ba <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>
 8015106:	687b      	ldr	r3, [r7, #4]
 8015108:	4618      	mov	r0, r3
 801510a:	3708      	adds	r7, #8
 801510c:	46bd      	mov	sp, r7
 801510e:	bd80      	pop	{r7, pc}

08015110 <_ZNSt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 8015110:	b590      	push	{r4, r7, lr}
 8015112:	b087      	sub	sp, #28
 8015114:	af00      	add	r7, sp, #0
 8015116:	60f8      	str	r0, [r7, #12]
 8015118:	60b9      	str	r1, [r7, #8]
 801511a:	607a      	str	r2, [r7, #4]
 801511c:	603b      	str	r3, [r7, #0]
      : _M_impl(__p, std::move(__d), __a) { }
 801511e:	68fb      	ldr	r3, [r7, #12]
 8015120:	4618      	mov	r0, r3
 8015122:	f7ef fb11 	bl	8004748 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8015126:	4a10      	ldr	r2, [pc, #64]	; (8015168 <_ZNSt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_+0x58>)
 8015128:	68fb      	ldr	r3, [r7, #12]
 801512a:	601a      	str	r2, [r3, #0]
 801512c:	68fb      	ldr	r3, [r7, #12]
 801512e:	f103 040c 	add.w	r4, r3, #12
 8015132:	6878      	ldr	r0, [r7, #4]
 8015134:	f7fe ff10 	bl	8013f58 <_ZSt4moveIRNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8015138:	4602      	mov	r2, r0
 801513a:	f107 0314 	add.w	r3, r7, #20
 801513e:	4611      	mov	r1, r2
 8015140:	4618      	mov	r0, r3
 8015142:	f7fe ff14 	bl	8013f6e <_ZNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 8015146:	f107 0214 	add.w	r2, r7, #20
 801514a:	683b      	ldr	r3, [r7, #0]
 801514c:	68b9      	ldr	r1, [r7, #8]
 801514e:	4620      	mov	r0, r4
 8015150:	f000 fcd3 	bl	8015afa <_ZNSt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>
 8015154:	f107 0314 	add.w	r3, r7, #20
 8015158:	4618      	mov	r0, r3
 801515a:	f7fe f8db 	bl	8013314 <_ZNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 801515e:	68fb      	ldr	r3, [r7, #12]
 8015160:	4618      	mov	r0, r3
 8015162:	371c      	adds	r7, #28
 8015164:	46bd      	mov	sp, r7
 8015166:	bd90      	pop	{r4, r7, pc}
 8015168:	0802481c 	.word	0x0802481c

0801516c <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 801516c:	b480      	push	{r7}
 801516e:	b083      	sub	sp, #12
 8015170:	af00      	add	r7, sp, #0
 8015172:	6078      	str	r0, [r7, #4]
 8015174:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 8015176:	687b      	ldr	r3, [r7, #4]
 8015178:	2200      	movs	r2, #0
 801517a:	605a      	str	r2, [r3, #4]
	return *this;
 801517c:	687b      	ldr	r3, [r7, #4]
      }
 801517e:	4618      	mov	r0, r3
 8015180:	370c      	adds	r7, #12
 8015182:	46bd      	mov	sp, r7
 8015184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015188:	4770      	bx	lr

0801518a <_ZNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>:
          void operator()(typename _Alloc::value_type* __ptr)
 801518a:	b590      	push	{r4, r7, lr}
 801518c:	b085      	sub	sp, #20
 801518e:	af00      	add	r7, sp, #0
 8015190:	6078      	str	r0, [r7, #4]
 8015192:	6039      	str	r1, [r7, #0]
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 8015194:	6879      	ldr	r1, [r7, #4]
 8015196:	f107 0308 	add.w	r3, r7, #8
 801519a:	683a      	ldr	r2, [r7, #0]
 801519c:	4618      	mov	r0, r3
 801519e:	f7ff feb1 	bl	8014f04 <_ZNSt15__allocated_ptrISaIN4tama7ContextEEEC1ERS2_PS1_>
	    allocator_traits<_Alloc>::destroy(_M_alloc, __guard.get());
 80151a2:	687c      	ldr	r4, [r7, #4]
 80151a4:	f107 0308 	add.w	r3, r7, #8
 80151a8:	4618      	mov	r0, r3
 80151aa:	f7fe fe95 	bl	8013ed8 <_ZNSt15__allocated_ptrISaIN4tama7ContextEEE3getEv>
 80151ae:	4603      	mov	r3, r0
 80151b0:	4619      	mov	r1, r3
 80151b2:	4620      	mov	r0, r4
 80151b4:	f000 fcbf 	bl	8015b36 <_ZNSt16allocator_traitsISaIN4tama7ContextEEE7destroyIS1_EEvRS2_PT_>
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 80151b8:	f107 0308 	add.w	r3, r7, #8
 80151bc:	4618      	mov	r0, r3
 80151be:	f7fe fe76 	bl	8013eae <_ZNSt15__allocated_ptrISaIN4tama7ContextEEED1Ev>
          }
 80151c2:	bf00      	nop
 80151c4:	3714      	adds	r7, #20
 80151c6:	46bd      	mov	sp, r7
 80151c8:	bd90      	pop	{r4, r7, pc}

080151ca <_ZNSt11_Tuple_implILj0EJPN4tama7DisplayESt14default_deleteIS1_EEE7_M_headERKS5_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80151ca:	b580      	push	{r7, lr}
 80151cc:	b082      	sub	sp, #8
 80151ce:	af00      	add	r7, sp, #0
 80151d0:	6078      	str	r0, [r7, #4]
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	4618      	mov	r0, r3
 80151d6:	f000 fcbb 	bl	8015b50 <_ZNSt10_Head_baseILj0EPN4tama7DisplayELb0EE7_M_headERKS3_>
 80151da:	4603      	mov	r3, r0
 80151dc:	4618      	mov	r0, r3
 80151de:	3708      	adds	r7, #8
 80151e0:	46bd      	mov	sp, r7
 80151e2:	bd80      	pop	{r7, pc}

080151e4 <_ZNSt10_Head_baseILj1ESt14default_deleteIN4tama16Nokia5510DisplayEELb1EEC1Ev>:
      constexpr _Head_base()
 80151e4:	b480      	push	{r7}
 80151e6:	b083      	sub	sp, #12
 80151e8:	af00      	add	r7, sp, #0
 80151ea:	6078      	str	r0, [r7, #4]
      : _Head() { }
 80151ec:	687b      	ldr	r3, [r7, #4]
 80151ee:	4618      	mov	r0, r3
 80151f0:	370c      	adds	r7, #12
 80151f2:	46bd      	mov	sp, r7
 80151f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151f8:	4770      	bx	lr

080151fa <_ZNSt10_Head_baseILj1ESt14default_deleteIN4tama16Nokia5510DisplayEELb1EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b; }
 80151fa:	b480      	push	{r7}
 80151fc:	b083      	sub	sp, #12
 80151fe:	af00      	add	r7, sp, #0
 8015200:	6078      	str	r0, [r7, #4]
 8015202:	687b      	ldr	r3, [r7, #4]
 8015204:	4618      	mov	r0, r3
 8015206:	370c      	adds	r7, #12
 8015208:	46bd      	mov	sp, r7
 801520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801520e:	4770      	bx	lr

08015210 <_ZNSt11_Tuple_implILj0EJPN4tama16Nokia5510DisplayESt14default_deleteIS1_EEE7_M_headERKS5_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8015210:	b580      	push	{r7, lr}
 8015212:	b082      	sub	sp, #8
 8015214:	af00      	add	r7, sp, #0
 8015216:	6078      	str	r0, [r7, #4]
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	4618      	mov	r0, r3
 801521c:	f000 fca3 	bl	8015b66 <_ZNSt10_Head_baseILj0EPN4tama16Nokia5510DisplayELb0EE7_M_headERKS3_>
 8015220:	4603      	mov	r3, r0
 8015222:	4618      	mov	r0, r3
 8015224:	3708      	adds	r7, #8
 8015226:	46bd      	mov	sp, r7
 8015228:	bd80      	pop	{r7, pc}

0801522a <_ZNSt14default_deleteIN4tama7DisplayEEC1INS0_16Nokia5510DisplayEvEERKS_IT_E>:
        default_delete(const default_delete<_Up>&) noexcept { }
 801522a:	b480      	push	{r7}
 801522c:	b083      	sub	sp, #12
 801522e:	af00      	add	r7, sp, #0
 8015230:	6078      	str	r0, [r7, #4]
 8015232:	6039      	str	r1, [r7, #0]
 8015234:	687b      	ldr	r3, [r7, #4]
 8015236:	4618      	mov	r0, r3
 8015238:	370c      	adds	r7, #12
 801523a:	46bd      	mov	sp, r7
 801523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015240:	4770      	bx	lr

08015242 <_ZN9__gnu_cxx13new_allocatorIN4tama18Stm32TextureLoaderEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8015242:	b580      	push	{r7, lr}
 8015244:	b084      	sub	sp, #16
 8015246:	af00      	add	r7, sp, #0
 8015248:	60f8      	str	r0, [r7, #12]
 801524a:	60b9      	str	r1, [r7, #8]
 801524c:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 801524e:	68f8      	ldr	r0, [r7, #12]
 8015250:	f000 fc94 	bl	8015b7c <_ZNK9__gnu_cxx13new_allocatorIN4tama18Stm32TextureLoaderEE8max_sizeEv>
 8015254:	4602      	mov	r2, r0
 8015256:	68bb      	ldr	r3, [r7, #8]
 8015258:	4293      	cmp	r3, r2
 801525a:	bf8c      	ite	hi
 801525c:	2301      	movhi	r3, #1
 801525e:	2300      	movls	r3, #0
 8015260:	b2db      	uxtb	r3, r3
 8015262:	2b00      	cmp	r3, #0
 8015264:	d001      	beq.n	801526a <_ZN9__gnu_cxx13new_allocatorIN4tama18Stm32TextureLoaderEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8015266:	f00a fb58 	bl	801f91a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801526a:	68bb      	ldr	r3, [r7, #8]
 801526c:	009b      	lsls	r3, r3, #2
 801526e:	4618      	mov	r0, r3
 8015270:	f00a fb25 	bl	801f8be <_Znwj>
 8015274:	4603      	mov	r3, r0
      }
 8015276:	4618      	mov	r0, r3
 8015278:	3710      	adds	r7, #16
 801527a:	46bd      	mov	sp, r7
 801527c:	bd80      	pop	{r7, pc}

0801527e <_ZSt11__addressofISaIN4tama18Stm32TextureLoaderEEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 801527e:	b480      	push	{r7}
 8015280:	b083      	sub	sp, #12
 8015282:	af00      	add	r7, sp, #0
 8015284:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8015286:	687b      	ldr	r3, [r7, #4]
 8015288:	4618      	mov	r0, r3
 801528a:	370c      	adds	r7, #12
 801528c:	46bd      	mov	sp, r7
 801528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015292:	4770      	bx	lr

08015294 <_ZN9__gnu_cxx13new_allocatorIN4tama18Stm32TextureLoaderEE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 8015294:	b580      	push	{r7, lr}
 8015296:	b084      	sub	sp, #16
 8015298:	af00      	add	r7, sp, #0
 801529a:	60f8      	str	r0, [r7, #12]
 801529c:	60b9      	str	r1, [r7, #8]
 801529e:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 80152a0:	68b8      	ldr	r0, [r7, #8]
 80152a2:	f00a fb25 	bl	801f8f0 <_ZdlPv>
      }
 80152a6:	bf00      	nop
 80152a8:	3710      	adds	r7, #16
 80152aa:	46bd      	mov	sp, r7
 80152ac:	bd80      	pop	{r7, pc}

080152ae <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80152ae:	b480      	push	{r7}
 80152b0:	b083      	sub	sp, #12
 80152b2:	af00      	add	r7, sp, #0
 80152b4:	6078      	str	r0, [r7, #4]
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	4618      	mov	r0, r3
 80152ba:	370c      	adds	r7, #12
 80152bc:	46bd      	mov	sp, r7
 80152be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152c2:	4770      	bx	lr

080152c4 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80152c4:	b480      	push	{r7}
 80152c6:	b083      	sub	sp, #12
 80152c8:	af00      	add	r7, sp, #0
 80152ca:	6078      	str	r0, [r7, #4]
 80152cc:	687b      	ldr	r3, [r7, #4]
 80152ce:	4618      	mov	r0, r3
 80152d0:	370c      	adds	r7, #12
 80152d2:	46bd      	mov	sp, r7
 80152d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152d8:	4770      	bx	lr

080152da <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>:
      allocate(allocator_type& __a, size_type __n)
 80152da:	b580      	push	{r7, lr}
 80152dc:	b082      	sub	sp, #8
 80152de:	af00      	add	r7, sp, #0
 80152e0:	6078      	str	r0, [r7, #4]
 80152e2:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80152e4:	2200      	movs	r2, #0
 80152e6:	6839      	ldr	r1, [r7, #0]
 80152e8:	6878      	ldr	r0, [r7, #4]
 80152ea:	f000 fc53 	bl	8015b94 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>
 80152ee:	4603      	mov	r3, r0
 80152f0:	4618      	mov	r0, r3
 80152f2:	3708      	adds	r7, #8
 80152f4:	46bd      	mov	sp, r7
 80152f6:	bd80      	pop	{r7, pc}

080152f8 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 80152f8:	b580      	push	{r7, lr}
 80152fa:	b084      	sub	sp, #16
 80152fc:	af00      	add	r7, sp, #0
 80152fe:	60f8      	str	r0, [r7, #12]
 8015300:	60b9      	str	r1, [r7, #8]
 8015302:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8015304:	68b8      	ldr	r0, [r7, #8]
 8015306:	f000 fc66 	bl	8015bd6 <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>
 801530a:	4602      	mov	r2, r0
 801530c:	68fb      	ldr	r3, [r7, #12]
 801530e:	601a      	str	r2, [r3, #0]
 8015310:	68fb      	ldr	r3, [r7, #12]
 8015312:	687a      	ldr	r2, [r7, #4]
 8015314:	605a      	str	r2, [r3, #4]
      { }
 8015316:	68fb      	ldr	r3, [r7, #12]
 8015318:	4618      	mov	r0, r3
 801531a:	3710      	adds	r7, #16
 801531c:	46bd      	mov	sp, r7
 801531e:	bd80      	pop	{r7, pc}

08015320 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8015320:	b580      	push	{r7, lr}
 8015322:	b084      	sub	sp, #16
 8015324:	af00      	add	r7, sp, #0
 8015326:	60f8      	str	r0, [r7, #12]
 8015328:	60b9      	str	r1, [r7, #8]
 801532a:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 801532c:	687a      	ldr	r2, [r7, #4]
 801532e:	68b9      	ldr	r1, [r7, #8]
 8015330:	68f8      	ldr	r0, [r7, #12]
 8015332:	f000 fc5b 	bl	8015bec <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>
 8015336:	bf00      	nop
 8015338:	3710      	adds	r7, #16
 801533a:	46bd      	mov	sp, r7
 801533c:	bd80      	pop	{r7, pc}

0801533e <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 801533e:	b480      	push	{r7}
 8015340:	b083      	sub	sp, #12
 8015342:	af00      	add	r7, sp, #0
 8015344:	6078      	str	r0, [r7, #4]
 8015346:	687b      	ldr	r3, [r7, #4]
 8015348:	4618      	mov	r0, r3
 801534a:	370c      	adds	r7, #12
 801534c:	46bd      	mov	sp, r7
 801534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015352:	4770      	bx	lr

08015354 <_ZNSt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 8015354:	b590      	push	{r4, r7, lr}
 8015356:	b085      	sub	sp, #20
 8015358:	af00      	add	r7, sp, #0
 801535a:	60f8      	str	r0, [r7, #12]
 801535c:	60b9      	str	r1, [r7, #8]
 801535e:	607a      	str	r2, [r7, #4]
 8015360:	603b      	str	r3, [r7, #0]
	: _M_ptr(__p), _Del_base(std::move(__d)), _Alloc_base(__a)
 8015362:	68fc      	ldr	r4, [r7, #12]
 8015364:	6878      	ldr	r0, [r7, #4]
 8015366:	f7fe f942 	bl	80135ee <_ZSt4moveIRNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 801536a:	4603      	mov	r3, r0
 801536c:	4619      	mov	r1, r3
 801536e:	4620      	mov	r0, r4
 8015370:	f000 fc49 	bl	8015c06 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>
 8015374:	68fb      	ldr	r3, [r7, #12]
 8015376:	3301      	adds	r3, #1
 8015378:	6839      	ldr	r1, [r7, #0]
 801537a:	4618      	mov	r0, r3
 801537c:	f000 fc56 	bl	8015c2c <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama18Stm32TextureLoaderEELb1EEC1ERKS2_>
 8015380:	68fb      	ldr	r3, [r7, #12]
 8015382:	68ba      	ldr	r2, [r7, #8]
 8015384:	605a      	str	r2, [r3, #4]
	{ }
 8015386:	68fb      	ldr	r3, [r7, #12]
 8015388:	4618      	mov	r0, r3
 801538a:	3714      	adds	r7, #20
 801538c:	46bd      	mov	sp, r7
 801538e:	bd90      	pop	{r4, r7, pc}

08015390 <_ZNSt16allocator_traitsISaIN4tama18Stm32TextureLoaderEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 8015390:	b580      	push	{r7, lr}
 8015392:	b082      	sub	sp, #8
 8015394:	af00      	add	r7, sp, #0
 8015396:	6078      	str	r0, [r7, #4]
 8015398:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 801539a:	6839      	ldr	r1, [r7, #0]
 801539c:	6878      	ldr	r0, [r7, #4]
 801539e:	f000 fc53 	bl	8015c48 <_ZN9__gnu_cxx13new_allocatorIN4tama18Stm32TextureLoaderEE7destroyIS2_EEvPT_>
 80153a2:	bf00      	nop
 80153a4:	3708      	adds	r7, #8
 80153a6:	46bd      	mov	sp, r7
 80153a8:	bd80      	pop	{r7, pc}

080153aa <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80153aa:	b580      	push	{r7, lr}
 80153ac:	b084      	sub	sp, #16
 80153ae:	af00      	add	r7, sp, #0
 80153b0:	60f8      	str	r0, [r7, #12]
 80153b2:	60b9      	str	r1, [r7, #8]
 80153b4:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 80153b6:	68f8      	ldr	r0, [r7, #12]
 80153b8:	f000 fc52 	bl	8015c60 <_ZNK9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEE8max_sizeEv>
 80153bc:	4602      	mov	r2, r0
 80153be:	68bb      	ldr	r3, [r7, #8]
 80153c0:	4293      	cmp	r3, r2
 80153c2:	bf8c      	ite	hi
 80153c4:	2301      	movhi	r3, #1
 80153c6:	2300      	movls	r3, #0
 80153c8:	b2db      	uxtb	r3, r3
 80153ca:	2b00      	cmp	r3, #0
 80153cc:	d001      	beq.n	80153d2 <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80153ce:	f00a faa4 	bl	801f91a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80153d2:	68ba      	ldr	r2, [r7, #8]
 80153d4:	4613      	mov	r3, r2
 80153d6:	005b      	lsls	r3, r3, #1
 80153d8:	4413      	add	r3, r2
 80153da:	00db      	lsls	r3, r3, #3
 80153dc:	4618      	mov	r0, r3
 80153de:	f00a fa6e 	bl	801f8be <_Znwj>
 80153e2:	4603      	mov	r3, r0
      }
 80153e4:	4618      	mov	r0, r3
 80153e6:	3710      	adds	r7, #16
 80153e8:	46bd      	mov	sp, r7
 80153ea:	bd80      	pop	{r7, pc}

080153ec <_ZSt11__addressofISaIN4tama27Nokia5110DisplayDataManagerEEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80153ec:	b480      	push	{r7}
 80153ee:	b083      	sub	sp, #12
 80153f0:	af00      	add	r7, sp, #0
 80153f2:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80153f4:	687b      	ldr	r3, [r7, #4]
 80153f6:	4618      	mov	r0, r3
 80153f8:	370c      	adds	r7, #12
 80153fa:	46bd      	mov	sp, r7
 80153fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015400:	4770      	bx	lr

08015402 <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 8015402:	b580      	push	{r7, lr}
 8015404:	b084      	sub	sp, #16
 8015406:	af00      	add	r7, sp, #0
 8015408:	60f8      	str	r0, [r7, #12]
 801540a:	60b9      	str	r1, [r7, #8]
 801540c:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 801540e:	68b8      	ldr	r0, [r7, #8]
 8015410:	f00a fa6e 	bl	801f8f0 <_ZdlPv>
      }
 8015414:	bf00      	nop
 8015416:	3710      	adds	r7, #16
 8015418:	46bd      	mov	sp, r7
 801541a:	bd80      	pop	{r7, pc}

0801541c <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 801541c:	b480      	push	{r7}
 801541e:	b083      	sub	sp, #12
 8015420:	af00      	add	r7, sp, #0
 8015422:	6078      	str	r0, [r7, #4]
 8015424:	687b      	ldr	r3, [r7, #4]
 8015426:	4618      	mov	r0, r3
 8015428:	370c      	adds	r7, #12
 801542a:	46bd      	mov	sp, r7
 801542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015430:	4770      	bx	lr

08015432 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8015432:	b480      	push	{r7}
 8015434:	b083      	sub	sp, #12
 8015436:	af00      	add	r7, sp, #0
 8015438:	6078      	str	r0, [r7, #4]
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	4618      	mov	r0, r3
 801543e:	370c      	adds	r7, #12
 8015440:	46bd      	mov	sp, r7
 8015442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015446:	4770      	bx	lr

08015448 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>:
      allocate(allocator_type& __a, size_type __n)
 8015448:	b580      	push	{r7, lr}
 801544a:	b082      	sub	sp, #8
 801544c:	af00      	add	r7, sp, #0
 801544e:	6078      	str	r0, [r7, #4]
 8015450:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8015452:	2200      	movs	r2, #0
 8015454:	6839      	ldr	r1, [r7, #0]
 8015456:	6878      	ldr	r0, [r7, #4]
 8015458:	f000 fc10 	bl	8015c7c <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>
 801545c:	4603      	mov	r3, r0
 801545e:	4618      	mov	r0, r3
 8015460:	3708      	adds	r7, #8
 8015462:	46bd      	mov	sp, r7
 8015464:	bd80      	pop	{r7, pc}

08015466 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8015466:	b580      	push	{r7, lr}
 8015468:	b084      	sub	sp, #16
 801546a:	af00      	add	r7, sp, #0
 801546c:	60f8      	str	r0, [r7, #12]
 801546e:	60b9      	str	r1, [r7, #8]
 8015470:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8015472:	68b8      	ldr	r0, [r7, #8]
 8015474:	f000 fc23 	bl	8015cbe <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>
 8015478:	4602      	mov	r2, r0
 801547a:	68fb      	ldr	r3, [r7, #12]
 801547c:	601a      	str	r2, [r3, #0]
 801547e:	68fb      	ldr	r3, [r7, #12]
 8015480:	687a      	ldr	r2, [r7, #4]
 8015482:	605a      	str	r2, [r3, #4]
      { }
 8015484:	68fb      	ldr	r3, [r7, #12]
 8015486:	4618      	mov	r0, r3
 8015488:	3710      	adds	r7, #16
 801548a:	46bd      	mov	sp, r7
 801548c:	bd80      	pop	{r7, pc}

0801548e <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 801548e:	b580      	push	{r7, lr}
 8015490:	b084      	sub	sp, #16
 8015492:	af00      	add	r7, sp, #0
 8015494:	60f8      	str	r0, [r7, #12]
 8015496:	60b9      	str	r1, [r7, #8]
 8015498:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 801549a:	687a      	ldr	r2, [r7, #4]
 801549c:	68b9      	ldr	r1, [r7, #8]
 801549e:	68f8      	ldr	r0, [r7, #12]
 80154a0:	f000 fc18 	bl	8015cd4 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>
 80154a4:	bf00      	nop
 80154a6:	3710      	adds	r7, #16
 80154a8:	46bd      	mov	sp, r7
 80154aa:	bd80      	pop	{r7, pc}

080154ac <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 80154ac:	b480      	push	{r7}
 80154ae:	b083      	sub	sp, #12
 80154b0:	af00      	add	r7, sp, #0
 80154b2:	6078      	str	r0, [r7, #4]
 80154b4:	687b      	ldr	r3, [r7, #4]
 80154b6:	4618      	mov	r0, r3
 80154b8:	370c      	adds	r7, #12
 80154ba:	46bd      	mov	sp, r7
 80154bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154c0:	4770      	bx	lr

080154c2 <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 80154c2:	b590      	push	{r4, r7, lr}
 80154c4:	b085      	sub	sp, #20
 80154c6:	af00      	add	r7, sp, #0
 80154c8:	60f8      	str	r0, [r7, #12]
 80154ca:	60b9      	str	r1, [r7, #8]
 80154cc:	607a      	str	r2, [r7, #4]
 80154ce:	603b      	str	r3, [r7, #0]
	: _M_ptr(__p), _Del_base(std::move(__d)), _Alloc_base(__a)
 80154d0:	68fc      	ldr	r4, [r7, #12]
 80154d2:	6878      	ldr	r0, [r7, #4]
 80154d4:	f7fe f973 	bl	80137be <_ZSt4moveIRNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 80154d8:	4603      	mov	r3, r0
 80154da:	4619      	mov	r1, r3
 80154dc:	4620      	mov	r0, r4
 80154de:	f000 fc06 	bl	8015cee <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>
 80154e2:	68fb      	ldr	r3, [r7, #12]
 80154e4:	3301      	adds	r3, #1
 80154e6:	6839      	ldr	r1, [r7, #0]
 80154e8:	4618      	mov	r0, r3
 80154ea:	f000 fc13 	bl	8015d14 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama27Nokia5110DisplayDataManagerEELb1EEC1ERKS2_>
 80154ee:	68fb      	ldr	r3, [r7, #12]
 80154f0:	68ba      	ldr	r2, [r7, #8]
 80154f2:	605a      	str	r2, [r3, #4]
	{ }
 80154f4:	68fb      	ldr	r3, [r7, #12]
 80154f6:	4618      	mov	r0, r3
 80154f8:	3714      	adds	r7, #20
 80154fa:	46bd      	mov	sp, r7
 80154fc:	bd90      	pop	{r4, r7, pc}

080154fe <_ZNSt16allocator_traitsISaIN4tama27Nokia5110DisplayDataManagerEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 80154fe:	b580      	push	{r7, lr}
 8015500:	b082      	sub	sp, #8
 8015502:	af00      	add	r7, sp, #0
 8015504:	6078      	str	r0, [r7, #4]
 8015506:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 8015508:	6839      	ldr	r1, [r7, #0]
 801550a:	6878      	ldr	r0, [r7, #4]
 801550c:	f000 fc10 	bl	8015d30 <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEE7destroyIS2_EEvPT_>
 8015510:	bf00      	nop
 8015512:	3708      	adds	r7, #8
 8015514:	46bd      	mov	sp, r7
 8015516:	bd80      	pop	{r7, pc}

08015518 <_ZN9__gnu_cxx13new_allocatorIN4tama23Stm32TimeMonitorCreatorEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8015518:	b580      	push	{r7, lr}
 801551a:	b084      	sub	sp, #16
 801551c:	af00      	add	r7, sp, #0
 801551e:	60f8      	str	r0, [r7, #12]
 8015520:	60b9      	str	r1, [r7, #8]
 8015522:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8015524:	68f8      	ldr	r0, [r7, #12]
 8015526:	f000 fc0e 	bl	8015d46 <_ZNK9__gnu_cxx13new_allocatorIN4tama23Stm32TimeMonitorCreatorEE8max_sizeEv>
 801552a:	4602      	mov	r2, r0
 801552c:	68bb      	ldr	r3, [r7, #8]
 801552e:	4293      	cmp	r3, r2
 8015530:	bf8c      	ite	hi
 8015532:	2301      	movhi	r3, #1
 8015534:	2300      	movls	r3, #0
 8015536:	b2db      	uxtb	r3, r3
 8015538:	2b00      	cmp	r3, #0
 801553a:	d001      	beq.n	8015540 <_ZN9__gnu_cxx13new_allocatorIN4tama23Stm32TimeMonitorCreatorEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 801553c:	f00a f9ed 	bl	801f91a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8015540:	68bb      	ldr	r3, [r7, #8]
 8015542:	009b      	lsls	r3, r3, #2
 8015544:	4618      	mov	r0, r3
 8015546:	f00a f9ba 	bl	801f8be <_Znwj>
 801554a:	4603      	mov	r3, r0
      }
 801554c:	4618      	mov	r0, r3
 801554e:	3710      	adds	r7, #16
 8015550:	46bd      	mov	sp, r7
 8015552:	bd80      	pop	{r7, pc}

08015554 <_ZSt11__addressofISaIN4tama23Stm32TimeMonitorCreatorEEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8015554:	b480      	push	{r7}
 8015556:	b083      	sub	sp, #12
 8015558:	af00      	add	r7, sp, #0
 801555a:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 801555c:	687b      	ldr	r3, [r7, #4]
 801555e:	4618      	mov	r0, r3
 8015560:	370c      	adds	r7, #12
 8015562:	46bd      	mov	sp, r7
 8015564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015568:	4770      	bx	lr

0801556a <_ZN9__gnu_cxx13new_allocatorIN4tama23Stm32TimeMonitorCreatorEE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 801556a:	b580      	push	{r7, lr}
 801556c:	b084      	sub	sp, #16
 801556e:	af00      	add	r7, sp, #0
 8015570:	60f8      	str	r0, [r7, #12]
 8015572:	60b9      	str	r1, [r7, #8]
 8015574:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8015576:	68b8      	ldr	r0, [r7, #8]
 8015578:	f00a f9ba 	bl	801f8f0 <_ZdlPv>
      }
 801557c:	bf00      	nop
 801557e:	3710      	adds	r7, #16
 8015580:	46bd      	mov	sp, r7
 8015582:	bd80      	pop	{r7, pc}

08015584 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama23Stm32TimeMonitorCreatorENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8015584:	b480      	push	{r7}
 8015586:	b083      	sub	sp, #12
 8015588:	af00      	add	r7, sp, #0
 801558a:	6078      	str	r0, [r7, #4]
 801558c:	687b      	ldr	r3, [r7, #4]
 801558e:	4618      	mov	r0, r3
 8015590:	370c      	adds	r7, #12
 8015592:	46bd      	mov	sp, r7
 8015594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015598:	4770      	bx	lr

0801559a <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama23Stm32TimeMonitorCreatorENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 801559a:	b480      	push	{r7}
 801559c:	b083      	sub	sp, #12
 801559e:	af00      	add	r7, sp, #0
 80155a0:	6078      	str	r0, [r7, #4]
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	4618      	mov	r0, r3
 80155a6:	370c      	adds	r7, #12
 80155a8:	46bd      	mov	sp, r7
 80155aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155ae:	4770      	bx	lr

080155b0 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama23Stm32TimeMonitorCreatorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>:
      allocate(allocator_type& __a, size_type __n)
 80155b0:	b580      	push	{r7, lr}
 80155b2:	b082      	sub	sp, #8
 80155b4:	af00      	add	r7, sp, #0
 80155b6:	6078      	str	r0, [r7, #4]
 80155b8:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80155ba:	2200      	movs	r2, #0
 80155bc:	6839      	ldr	r1, [r7, #0]
 80155be:	6878      	ldr	r0, [r7, #4]
 80155c0:	f000 fbcd 	bl	8015d5e <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama23Stm32TimeMonitorCreatorENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>
 80155c4:	4603      	mov	r3, r0
 80155c6:	4618      	mov	r0, r3
 80155c8:	3708      	adds	r7, #8
 80155ca:	46bd      	mov	sp, r7
 80155cc:	bd80      	pop	{r7, pc}

080155ce <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama23Stm32TimeMonitorCreatorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 80155ce:	b580      	push	{r7, lr}
 80155d0:	b084      	sub	sp, #16
 80155d2:	af00      	add	r7, sp, #0
 80155d4:	60f8      	str	r0, [r7, #12]
 80155d6:	60b9      	str	r1, [r7, #8]
 80155d8:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 80155da:	68b8      	ldr	r0, [r7, #8]
 80155dc:	f000 fbe0 	bl	8015da0 <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama23Stm32TimeMonitorCreatorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>
 80155e0:	4602      	mov	r2, r0
 80155e2:	68fb      	ldr	r3, [r7, #12]
 80155e4:	601a      	str	r2, [r3, #0]
 80155e6:	68fb      	ldr	r3, [r7, #12]
 80155e8:	687a      	ldr	r2, [r7, #4]
 80155ea:	605a      	str	r2, [r3, #4]
      { }
 80155ec:	68fb      	ldr	r3, [r7, #12]
 80155ee:	4618      	mov	r0, r3
 80155f0:	3710      	adds	r7, #16
 80155f2:	46bd      	mov	sp, r7
 80155f4:	bd80      	pop	{r7, pc}

080155f6 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama23Stm32TimeMonitorCreatorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80155f6:	b580      	push	{r7, lr}
 80155f8:	b084      	sub	sp, #16
 80155fa:	af00      	add	r7, sp, #0
 80155fc:	60f8      	str	r0, [r7, #12]
 80155fe:	60b9      	str	r1, [r7, #8]
 8015600:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8015602:	687a      	ldr	r2, [r7, #4]
 8015604:	68b9      	ldr	r1, [r7, #8]
 8015606:	68f8      	ldr	r0, [r7, #12]
 8015608:	f000 fbd5 	bl	8015db6 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama23Stm32TimeMonitorCreatorENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>
 801560c:	bf00      	nop
 801560e:	3710      	adds	r7, #16
 8015610:	46bd      	mov	sp, r7
 8015612:	bd80      	pop	{r7, pc}

08015614 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama23Stm32TimeMonitorCreatorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 8015614:	b480      	push	{r7}
 8015616:	b083      	sub	sp, #12
 8015618:	af00      	add	r7, sp, #0
 801561a:	6078      	str	r0, [r7, #4]
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	4618      	mov	r0, r3
 8015620:	370c      	adds	r7, #12
 8015622:	46bd      	mov	sp, r7
 8015624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015628:	4770      	bx	lr

0801562a <_ZNSt19_Sp_counted_deleterIPN4tama23Stm32TimeMonitorCreatorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 801562a:	b590      	push	{r4, r7, lr}
 801562c:	b085      	sub	sp, #20
 801562e:	af00      	add	r7, sp, #0
 8015630:	60f8      	str	r0, [r7, #12]
 8015632:	60b9      	str	r1, [r7, #8]
 8015634:	607a      	str	r2, [r7, #4]
 8015636:	603b      	str	r3, [r7, #0]
	: _M_ptr(__p), _Del_base(std::move(__d)), _Alloc_base(__a)
 8015638:	68fc      	ldr	r4, [r7, #12]
 801563a:	6878      	ldr	r0, [r7, #4]
 801563c:	f7fe f9a7 	bl	801398e <_ZSt4moveIRNSt12__shared_ptrIN4tama23Stm32TimeMonitorCreatorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8015640:	4603      	mov	r3, r0
 8015642:	4619      	mov	r1, r3
 8015644:	4620      	mov	r0, r4
 8015646:	f000 fbc3 	bl	8015dd0 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama23Stm32TimeMonitorCreatorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>
 801564a:	68fb      	ldr	r3, [r7, #12]
 801564c:	3301      	adds	r3, #1
 801564e:	6839      	ldr	r1, [r7, #0]
 8015650:	4618      	mov	r0, r3
 8015652:	f000 fbd0 	bl	8015df6 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama23Stm32TimeMonitorCreatorEELb1EEC1ERKS2_>
 8015656:	68fb      	ldr	r3, [r7, #12]
 8015658:	68ba      	ldr	r2, [r7, #8]
 801565a:	605a      	str	r2, [r3, #4]
	{ }
 801565c:	68fb      	ldr	r3, [r7, #12]
 801565e:	4618      	mov	r0, r3
 8015660:	3714      	adds	r7, #20
 8015662:	46bd      	mov	sp, r7
 8015664:	bd90      	pop	{r4, r7, pc}

08015666 <_ZNSt16allocator_traitsISaIN4tama23Stm32TimeMonitorCreatorEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 8015666:	b580      	push	{r7, lr}
 8015668:	b082      	sub	sp, #8
 801566a:	af00      	add	r7, sp, #0
 801566c:	6078      	str	r0, [r7, #4]
 801566e:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 8015670:	6839      	ldr	r1, [r7, #0]
 8015672:	6878      	ldr	r0, [r7, #4]
 8015674:	f000 fbcd 	bl	8015e12 <_ZN9__gnu_cxx13new_allocatorIN4tama23Stm32TimeMonitorCreatorEE7destroyIS2_EEvPT_>
 8015678:	bf00      	nop
 801567a:	3708      	adds	r7, #8
 801567c:	46bd      	mov	sp, r7
 801567e:	bd80      	pop	{r7, pc}

08015680 <_ZN9__gnu_cxx13new_allocatorIN4tama25Stm32SoundPlayingStrategyEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8015680:	b580      	push	{r7, lr}
 8015682:	b084      	sub	sp, #16
 8015684:	af00      	add	r7, sp, #0
 8015686:	60f8      	str	r0, [r7, #12]
 8015688:	60b9      	str	r1, [r7, #8]
 801568a:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 801568c:	68f8      	ldr	r0, [r7, #12]
 801568e:	f000 fbcb 	bl	8015e28 <_ZNK9__gnu_cxx13new_allocatorIN4tama25Stm32SoundPlayingStrategyEE8max_sizeEv>
 8015692:	4602      	mov	r2, r0
 8015694:	68bb      	ldr	r3, [r7, #8]
 8015696:	4293      	cmp	r3, r2
 8015698:	bf8c      	ite	hi
 801569a:	2301      	movhi	r3, #1
 801569c:	2300      	movls	r3, #0
 801569e:	b2db      	uxtb	r3, r3
 80156a0:	2b00      	cmp	r3, #0
 80156a2:	d001      	beq.n	80156a8 <_ZN9__gnu_cxx13new_allocatorIN4tama25Stm32SoundPlayingStrategyEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80156a4:	f00a f939 	bl	801f91a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80156a8:	68bb      	ldr	r3, [r7, #8]
 80156aa:	009b      	lsls	r3, r3, #2
 80156ac:	4618      	mov	r0, r3
 80156ae:	f00a f906 	bl	801f8be <_Znwj>
 80156b2:	4603      	mov	r3, r0
      }
 80156b4:	4618      	mov	r0, r3
 80156b6:	3710      	adds	r7, #16
 80156b8:	46bd      	mov	sp, r7
 80156ba:	bd80      	pop	{r7, pc}

080156bc <_ZSt11__addressofISaIN4tama25Stm32SoundPlayingStrategyEEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80156bc:	b480      	push	{r7}
 80156be:	b083      	sub	sp, #12
 80156c0:	af00      	add	r7, sp, #0
 80156c2:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80156c4:	687b      	ldr	r3, [r7, #4]
 80156c6:	4618      	mov	r0, r3
 80156c8:	370c      	adds	r7, #12
 80156ca:	46bd      	mov	sp, r7
 80156cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156d0:	4770      	bx	lr

080156d2 <_ZN9__gnu_cxx13new_allocatorIN4tama25Stm32SoundPlayingStrategyEE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 80156d2:	b580      	push	{r7, lr}
 80156d4:	b084      	sub	sp, #16
 80156d6:	af00      	add	r7, sp, #0
 80156d8:	60f8      	str	r0, [r7, #12]
 80156da:	60b9      	str	r1, [r7, #8]
 80156dc:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 80156de:	68b8      	ldr	r0, [r7, #8]
 80156e0:	f00a f906 	bl	801f8f0 <_ZdlPv>
      }
 80156e4:	bf00      	nop
 80156e6:	3710      	adds	r7, #16
 80156e8:	46bd      	mov	sp, r7
 80156ea:	bd80      	pop	{r7, pc}

080156ec <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80156ec:	b480      	push	{r7}
 80156ee:	b083      	sub	sp, #12
 80156f0:	af00      	add	r7, sp, #0
 80156f2:	6078      	str	r0, [r7, #4]
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	4618      	mov	r0, r3
 80156f8:	370c      	adds	r7, #12
 80156fa:	46bd      	mov	sp, r7
 80156fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015700:	4770      	bx	lr

08015702 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8015702:	b480      	push	{r7}
 8015704:	b083      	sub	sp, #12
 8015706:	af00      	add	r7, sp, #0
 8015708:	6078      	str	r0, [r7, #4]
 801570a:	687b      	ldr	r3, [r7, #4]
 801570c:	4618      	mov	r0, r3
 801570e:	370c      	adds	r7, #12
 8015710:	46bd      	mov	sp, r7
 8015712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015716:	4770      	bx	lr

08015718 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>:
      allocate(allocator_type& __a, size_type __n)
 8015718:	b580      	push	{r7, lr}
 801571a:	b082      	sub	sp, #8
 801571c:	af00      	add	r7, sp, #0
 801571e:	6078      	str	r0, [r7, #4]
 8015720:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8015722:	2200      	movs	r2, #0
 8015724:	6839      	ldr	r1, [r7, #0]
 8015726:	6878      	ldr	r0, [r7, #4]
 8015728:	f000 fb8a 	bl	8015e40 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>
 801572c:	4603      	mov	r3, r0
 801572e:	4618      	mov	r0, r3
 8015730:	3708      	adds	r7, #8
 8015732:	46bd      	mov	sp, r7
 8015734:	bd80      	pop	{r7, pc}

08015736 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8015736:	b580      	push	{r7, lr}
 8015738:	b084      	sub	sp, #16
 801573a:	af00      	add	r7, sp, #0
 801573c:	60f8      	str	r0, [r7, #12]
 801573e:	60b9      	str	r1, [r7, #8]
 8015740:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8015742:	68b8      	ldr	r0, [r7, #8]
 8015744:	f000 fb9d 	bl	8015e82 <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>
 8015748:	4602      	mov	r2, r0
 801574a:	68fb      	ldr	r3, [r7, #12]
 801574c:	601a      	str	r2, [r3, #0]
 801574e:	68fb      	ldr	r3, [r7, #12]
 8015750:	687a      	ldr	r2, [r7, #4]
 8015752:	605a      	str	r2, [r3, #4]
      { }
 8015754:	68fb      	ldr	r3, [r7, #12]
 8015756:	4618      	mov	r0, r3
 8015758:	3710      	adds	r7, #16
 801575a:	46bd      	mov	sp, r7
 801575c:	bd80      	pop	{r7, pc}

0801575e <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 801575e:	b580      	push	{r7, lr}
 8015760:	b084      	sub	sp, #16
 8015762:	af00      	add	r7, sp, #0
 8015764:	60f8      	str	r0, [r7, #12]
 8015766:	60b9      	str	r1, [r7, #8]
 8015768:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 801576a:	687a      	ldr	r2, [r7, #4]
 801576c:	68b9      	ldr	r1, [r7, #8]
 801576e:	68f8      	ldr	r0, [r7, #12]
 8015770:	f000 fb92 	bl	8015e98 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>
 8015774:	bf00      	nop
 8015776:	3710      	adds	r7, #16
 8015778:	46bd      	mov	sp, r7
 801577a:	bd80      	pop	{r7, pc}

0801577c <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 801577c:	b480      	push	{r7}
 801577e:	b083      	sub	sp, #12
 8015780:	af00      	add	r7, sp, #0
 8015782:	6078      	str	r0, [r7, #4]
 8015784:	687b      	ldr	r3, [r7, #4]
 8015786:	4618      	mov	r0, r3
 8015788:	370c      	adds	r7, #12
 801578a:	46bd      	mov	sp, r7
 801578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015790:	4770      	bx	lr

08015792 <_ZNSt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 8015792:	b590      	push	{r4, r7, lr}
 8015794:	b085      	sub	sp, #20
 8015796:	af00      	add	r7, sp, #0
 8015798:	60f8      	str	r0, [r7, #12]
 801579a:	60b9      	str	r1, [r7, #8]
 801579c:	607a      	str	r2, [r7, #4]
 801579e:	603b      	str	r3, [r7, #0]
	: _M_ptr(__p), _Del_base(std::move(__d)), _Alloc_base(__a)
 80157a0:	68fc      	ldr	r4, [r7, #12]
 80157a2:	6878      	ldr	r0, [r7, #4]
 80157a4:	f7fe f9db 	bl	8013b5e <_ZSt4moveIRNSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 80157a8:	4603      	mov	r3, r0
 80157aa:	4619      	mov	r1, r3
 80157ac:	4620      	mov	r0, r4
 80157ae:	f000 fb80 	bl	8015eb2 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>
 80157b2:	68fb      	ldr	r3, [r7, #12]
 80157b4:	3301      	adds	r3, #1
 80157b6:	6839      	ldr	r1, [r7, #0]
 80157b8:	4618      	mov	r0, r3
 80157ba:	f000 fb8d 	bl	8015ed8 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama25Stm32SoundPlayingStrategyEELb1EEC1ERKS2_>
 80157be:	68fb      	ldr	r3, [r7, #12]
 80157c0:	68ba      	ldr	r2, [r7, #8]
 80157c2:	605a      	str	r2, [r3, #4]
	{ }
 80157c4:	68fb      	ldr	r3, [r7, #12]
 80157c6:	4618      	mov	r0, r3
 80157c8:	3714      	adds	r7, #20
 80157ca:	46bd      	mov	sp, r7
 80157cc:	bd90      	pop	{r4, r7, pc}

080157ce <_ZNSt16allocator_traitsISaIN4tama25Stm32SoundPlayingStrategyEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 80157ce:	b580      	push	{r7, lr}
 80157d0:	b082      	sub	sp, #8
 80157d2:	af00      	add	r7, sp, #0
 80157d4:	6078      	str	r0, [r7, #4]
 80157d6:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 80157d8:	6839      	ldr	r1, [r7, #0]
 80157da:	6878      	ldr	r0, [r7, #4]
 80157dc:	f000 fb8a 	bl	8015ef4 <_ZN9__gnu_cxx13new_allocatorIN4tama25Stm32SoundPlayingStrategyEE7destroyIS2_EEvPT_>
 80157e0:	bf00      	nop
 80157e2:	3708      	adds	r7, #8
 80157e4:	46bd      	mov	sp, r7
 80157e6:	bd80      	pop	{r7, pc}

080157e8 <_ZN9__gnu_cxx13new_allocatorIN4tama10Stm32InputEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80157e8:	b580      	push	{r7, lr}
 80157ea:	b084      	sub	sp, #16
 80157ec:	af00      	add	r7, sp, #0
 80157ee:	60f8      	str	r0, [r7, #12]
 80157f0:	60b9      	str	r1, [r7, #8]
 80157f2:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 80157f4:	68f8      	ldr	r0, [r7, #12]
 80157f6:	f000 fb89 	bl	8015f0c <_ZNK9__gnu_cxx13new_allocatorIN4tama10Stm32InputEE8max_sizeEv>
 80157fa:	4602      	mov	r2, r0
 80157fc:	68bb      	ldr	r3, [r7, #8]
 80157fe:	4293      	cmp	r3, r2
 8015800:	bf8c      	ite	hi
 8015802:	2301      	movhi	r3, #1
 8015804:	2300      	movls	r3, #0
 8015806:	b2db      	uxtb	r3, r3
 8015808:	2b00      	cmp	r3, #0
 801580a:	d001      	beq.n	8015810 <_ZN9__gnu_cxx13new_allocatorIN4tama10Stm32InputEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 801580c:	f00a f885 	bl	801f91a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8015810:	68ba      	ldr	r2, [r7, #8]
 8015812:	4613      	mov	r3, r2
 8015814:	005b      	lsls	r3, r3, #1
 8015816:	4413      	add	r3, r2
 8015818:	00db      	lsls	r3, r3, #3
 801581a:	4618      	mov	r0, r3
 801581c:	f00a f84f 	bl	801f8be <_Znwj>
 8015820:	4603      	mov	r3, r0
      }
 8015822:	4618      	mov	r0, r3
 8015824:	3710      	adds	r7, #16
 8015826:	46bd      	mov	sp, r7
 8015828:	bd80      	pop	{r7, pc}

0801582a <_ZSt11__addressofISaIN4tama10Stm32InputEEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 801582a:	b480      	push	{r7}
 801582c:	b083      	sub	sp, #12
 801582e:	af00      	add	r7, sp, #0
 8015830:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8015832:	687b      	ldr	r3, [r7, #4]
 8015834:	4618      	mov	r0, r3
 8015836:	370c      	adds	r7, #12
 8015838:	46bd      	mov	sp, r7
 801583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801583e:	4770      	bx	lr

08015840 <_ZN9__gnu_cxx13new_allocatorIN4tama10Stm32InputEE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 8015840:	b580      	push	{r7, lr}
 8015842:	b084      	sub	sp, #16
 8015844:	af00      	add	r7, sp, #0
 8015846:	60f8      	str	r0, [r7, #12]
 8015848:	60b9      	str	r1, [r7, #8]
 801584a:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 801584c:	68b8      	ldr	r0, [r7, #8]
 801584e:	f00a f84f 	bl	801f8f0 <_ZdlPv>
      }
 8015852:	bf00      	nop
 8015854:	3710      	adds	r7, #16
 8015856:	46bd      	mov	sp, r7
 8015858:	bd80      	pop	{r7, pc}

0801585a <_ZNSt6vectorIPN4tama7OnInputESaIS2_EEC1Ev>:
      vector()
 801585a:	b580      	push	{r7, lr}
 801585c:	b082      	sub	sp, #8
 801585e:	af00      	add	r7, sp, #0
 8015860:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8015862:	687b      	ldr	r3, [r7, #4]
 8015864:	4618      	mov	r0, r3
 8015866:	f000 fb6b 	bl	8015f40 <_ZNSt12_Vector_baseIPN4tama7OnInputESaIS2_EEC1Ev>
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	4618      	mov	r0, r3
 801586e:	3708      	adds	r7, #8
 8015870:	46bd      	mov	sp, r7
 8015872:	bd80      	pop	{r7, pc}

08015874 <_ZNSt6vectorIPN4tama7OnInputESaIS2_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8015874:	b5b0      	push	{r4, r5, r7, lr}
 8015876:	b082      	sub	sp, #8
 8015878:	af00      	add	r7, sp, #0
 801587a:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 801587c:	687b      	ldr	r3, [r7, #4]
 801587e:	681c      	ldr	r4, [r3, #0]
 8015880:	687b      	ldr	r3, [r7, #4]
 8015882:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	4618      	mov	r0, r3
 8015888:	f7ec ff5d 	bl	8002746 <_ZNSt12_Vector_baseIPN4tama7OnInputESaIS2_EE19_M_get_Tp_allocatorEv>
 801588c:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 801588e:	461a      	mov	r2, r3
 8015890:	4629      	mov	r1, r5
 8015892:	4620      	mov	r0, r4
 8015894:	f7ec ff88 	bl	80027a8 <_ZSt8_DestroyIPPN4tama7OnInputES2_EvT_S4_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 8015898:	687b      	ldr	r3, [r7, #4]
 801589a:	4618      	mov	r0, r3
 801589c:	f000 fb5d 	bl	8015f5a <_ZNSt12_Vector_baseIPN4tama7OnInputESaIS2_EED1Ev>
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	4618      	mov	r0, r3
 80158a4:	3708      	adds	r7, #8
 80158a6:	46bd      	mov	sp, r7
 80158a8:	bdb0      	pop	{r4, r5, r7, pc}

080158aa <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80158aa:	b480      	push	{r7}
 80158ac:	b083      	sub	sp, #12
 80158ae:	af00      	add	r7, sp, #0
 80158b0:	6078      	str	r0, [r7, #4]
 80158b2:	687b      	ldr	r3, [r7, #4]
 80158b4:	4618      	mov	r0, r3
 80158b6:	370c      	adds	r7, #12
 80158b8:	46bd      	mov	sp, r7
 80158ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158be:	4770      	bx	lr

080158c0 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80158c0:	b480      	push	{r7}
 80158c2:	b083      	sub	sp, #12
 80158c4:	af00      	add	r7, sp, #0
 80158c6:	6078      	str	r0, [r7, #4]
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	4618      	mov	r0, r3
 80158cc:	370c      	adds	r7, #12
 80158ce:	46bd      	mov	sp, r7
 80158d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158d4:	4770      	bx	lr

080158d6 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>:
      allocate(allocator_type& __a, size_type __n)
 80158d6:	b580      	push	{r7, lr}
 80158d8:	b082      	sub	sp, #8
 80158da:	af00      	add	r7, sp, #0
 80158dc:	6078      	str	r0, [r7, #4]
 80158de:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80158e0:	2200      	movs	r2, #0
 80158e2:	6839      	ldr	r1, [r7, #0]
 80158e4:	6878      	ldr	r0, [r7, #4]
 80158e6:	f000 fb52 	bl	8015f8e <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>
 80158ea:	4603      	mov	r3, r0
 80158ec:	4618      	mov	r0, r3
 80158ee:	3708      	adds	r7, #8
 80158f0:	46bd      	mov	sp, r7
 80158f2:	bd80      	pop	{r7, pc}

080158f4 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 80158f4:	b580      	push	{r7, lr}
 80158f6:	b084      	sub	sp, #16
 80158f8:	af00      	add	r7, sp, #0
 80158fa:	60f8      	str	r0, [r7, #12]
 80158fc:	60b9      	str	r1, [r7, #8]
 80158fe:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8015900:	68b8      	ldr	r0, [r7, #8]
 8015902:	f000 fb65 	bl	8015fd0 <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>
 8015906:	4602      	mov	r2, r0
 8015908:	68fb      	ldr	r3, [r7, #12]
 801590a:	601a      	str	r2, [r3, #0]
 801590c:	68fb      	ldr	r3, [r7, #12]
 801590e:	687a      	ldr	r2, [r7, #4]
 8015910:	605a      	str	r2, [r3, #4]
      { }
 8015912:	68fb      	ldr	r3, [r7, #12]
 8015914:	4618      	mov	r0, r3
 8015916:	3710      	adds	r7, #16
 8015918:	46bd      	mov	sp, r7
 801591a:	bd80      	pop	{r7, pc}

0801591c <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 801591c:	b580      	push	{r7, lr}
 801591e:	b084      	sub	sp, #16
 8015920:	af00      	add	r7, sp, #0
 8015922:	60f8      	str	r0, [r7, #12]
 8015924:	60b9      	str	r1, [r7, #8]
 8015926:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8015928:	687a      	ldr	r2, [r7, #4]
 801592a:	68b9      	ldr	r1, [r7, #8]
 801592c:	68f8      	ldr	r0, [r7, #12]
 801592e:	f000 fb5a 	bl	8015fe6 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>
 8015932:	bf00      	nop
 8015934:	3710      	adds	r7, #16
 8015936:	46bd      	mov	sp, r7
 8015938:	bd80      	pop	{r7, pc}

0801593a <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 801593a:	b480      	push	{r7}
 801593c:	b083      	sub	sp, #12
 801593e:	af00      	add	r7, sp, #0
 8015940:	6078      	str	r0, [r7, #4]
 8015942:	687b      	ldr	r3, [r7, #4]
 8015944:	4618      	mov	r0, r3
 8015946:	370c      	adds	r7, #12
 8015948:	46bd      	mov	sp, r7
 801594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801594e:	4770      	bx	lr

08015950 <_ZNSt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 8015950:	b590      	push	{r4, r7, lr}
 8015952:	b085      	sub	sp, #20
 8015954:	af00      	add	r7, sp, #0
 8015956:	60f8      	str	r0, [r7, #12]
 8015958:	60b9      	str	r1, [r7, #8]
 801595a:	607a      	str	r2, [r7, #4]
 801595c:	603b      	str	r3, [r7, #0]
	: _M_ptr(__p), _Del_base(std::move(__d)), _Alloc_base(__a)
 801595e:	68fc      	ldr	r4, [r7, #12]
 8015960:	6878      	ldr	r0, [r7, #4]
 8015962:	f7fe f9e4 	bl	8013d2e <_ZSt4moveIRNSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8015966:	4603      	mov	r3, r0
 8015968:	4619      	mov	r1, r3
 801596a:	4620      	mov	r0, r4
 801596c:	f000 fb48 	bl	8016000 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>
 8015970:	68fb      	ldr	r3, [r7, #12]
 8015972:	3301      	adds	r3, #1
 8015974:	6839      	ldr	r1, [r7, #0]
 8015976:	4618      	mov	r0, r3
 8015978:	f000 fb55 	bl	8016026 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama10Stm32InputEELb1EEC1ERKS2_>
 801597c:	68fb      	ldr	r3, [r7, #12]
 801597e:	68ba      	ldr	r2, [r7, #8]
 8015980:	605a      	str	r2, [r3, #4]
	{ }
 8015982:	68fb      	ldr	r3, [r7, #12]
 8015984:	4618      	mov	r0, r3
 8015986:	3714      	adds	r7, #20
 8015988:	46bd      	mov	sp, r7
 801598a:	bd90      	pop	{r4, r7, pc}

0801598c <_ZNSt16allocator_traitsISaIN4tama10Stm32InputEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 801598c:	b580      	push	{r7, lr}
 801598e:	b082      	sub	sp, #8
 8015990:	af00      	add	r7, sp, #0
 8015992:	6078      	str	r0, [r7, #4]
 8015994:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 8015996:	6839      	ldr	r1, [r7, #0]
 8015998:	6878      	ldr	r0, [r7, #4]
 801599a:	f000 fb65 	bl	8016068 <_ZN9__gnu_cxx13new_allocatorIN4tama10Stm32InputEE7destroyIS2_EEvPT_>
 801599e:	bf00      	nop
 80159a0:	3708      	adds	r7, #8
 80159a2:	46bd      	mov	sp, r7
 80159a4:	bd80      	pop	{r7, pc}

080159a6 <_ZN9__gnu_cxx13new_allocatorIN4tama7ContextEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80159a6:	b580      	push	{r7, lr}
 80159a8:	b084      	sub	sp, #16
 80159aa:	af00      	add	r7, sp, #0
 80159ac:	60f8      	str	r0, [r7, #12]
 80159ae:	60b9      	str	r1, [r7, #8]
 80159b0:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 80159b2:	68f8      	ldr	r0, [r7, #12]
 80159b4:	f000 fb64 	bl	8016080 <_ZNK9__gnu_cxx13new_allocatorIN4tama7ContextEE8max_sizeEv>
 80159b8:	4602      	mov	r2, r0
 80159ba:	68bb      	ldr	r3, [r7, #8]
 80159bc:	4293      	cmp	r3, r2
 80159be:	bf8c      	ite	hi
 80159c0:	2301      	movhi	r3, #1
 80159c2:	2300      	movls	r3, #0
 80159c4:	b2db      	uxtb	r3, r3
 80159c6:	2b00      	cmp	r3, #0
 80159c8:	d001      	beq.n	80159ce <_ZN9__gnu_cxx13new_allocatorIN4tama7ContextEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80159ca:	f009 ffa6 	bl	801f91a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80159ce:	68ba      	ldr	r2, [r7, #8]
 80159d0:	4613      	mov	r3, r2
 80159d2:	005b      	lsls	r3, r3, #1
 80159d4:	4413      	add	r3, r2
 80159d6:	019b      	lsls	r3, r3, #6
 80159d8:	4618      	mov	r0, r3
 80159da:	f009 ff70 	bl	801f8be <_Znwj>
 80159de:	4603      	mov	r3, r0
      }
 80159e0:	4618      	mov	r0, r3
 80159e2:	3710      	adds	r7, #16
 80159e4:	46bd      	mov	sp, r7
 80159e6:	bd80      	pop	{r7, pc}

080159e8 <_ZSt11__addressofISaIN4tama7ContextEEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80159e8:	b480      	push	{r7}
 80159ea:	b083      	sub	sp, #12
 80159ec:	af00      	add	r7, sp, #0
 80159ee:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80159f0:	687b      	ldr	r3, [r7, #4]
 80159f2:	4618      	mov	r0, r3
 80159f4:	370c      	adds	r7, #12
 80159f6:	46bd      	mov	sp, r7
 80159f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159fc:	4770      	bx	lr

080159fe <_ZN9__gnu_cxx13new_allocatorIN4tama7ContextEE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 80159fe:	b580      	push	{r7, lr}
 8015a00:	b084      	sub	sp, #16
 8015a02:	af00      	add	r7, sp, #0
 8015a04:	60f8      	str	r0, [r7, #12]
 8015a06:	60b9      	str	r1, [r7, #8]
 8015a08:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8015a0a:	68b8      	ldr	r0, [r7, #8]
 8015a0c:	f009 ff70 	bl	801f8f0 <_ZdlPv>
      }
 8015a10:	bf00      	nop
 8015a12:	3710      	adds	r7, #16
 8015a14:	46bd      	mov	sp, r7
 8015a16:	bd80      	pop	{r7, pc}

08015a18 <_ZSt4moveIRSt10shared_ptrIN4tama11SoundPlayerEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8015a18:	b480      	push	{r7}
 8015a1a:	b083      	sub	sp, #12
 8015a1c:	af00      	add	r7, sp, #0
 8015a1e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8015a20:	687b      	ldr	r3, [r7, #4]
 8015a22:	4618      	mov	r0, r3
 8015a24:	370c      	adds	r7, #12
 8015a26:	46bd      	mov	sp, r7
 8015a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a2c:	4770      	bx	lr

08015a2e <_ZNSt10shared_ptrIN4tama11SoundPlayerEEC1EOS2_>:
      shared_ptr(shared_ptr&& __r) noexcept
 8015a2e:	b590      	push	{r4, r7, lr}
 8015a30:	b083      	sub	sp, #12
 8015a32:	af00      	add	r7, sp, #0
 8015a34:	6078      	str	r0, [r7, #4]
 8015a36:	6039      	str	r1, [r7, #0]
      : __shared_ptr<_Tp>(std::move(__r)) { }
 8015a38:	687c      	ldr	r4, [r7, #4]
 8015a3a:	6838      	ldr	r0, [r7, #0]
 8015a3c:	f7ff ffec 	bl	8015a18 <_ZSt4moveIRSt10shared_ptrIN4tama11SoundPlayerEEEONSt16remove_referenceIT_E4typeEOS6_>
 8015a40:	4603      	mov	r3, r0
 8015a42:	4619      	mov	r1, r3
 8015a44:	4620      	mov	r0, r4
 8015a46:	f000 fb29 	bl	801609c <_ZNSt12__shared_ptrIN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0EEC1EOS4_>
 8015a4a:	687b      	ldr	r3, [r7, #4]
 8015a4c:	4618      	mov	r0, r3
 8015a4e:	370c      	adds	r7, #12
 8015a50:	46bd      	mov	sp, r7
 8015a52:	bd90      	pop	{r4, r7, pc}

08015a54 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8015a54:	b480      	push	{r7}
 8015a56:	b083      	sub	sp, #12
 8015a58:	af00      	add	r7, sp, #0
 8015a5a:	6078      	str	r0, [r7, #4]
 8015a5c:	687b      	ldr	r3, [r7, #4]
 8015a5e:	4618      	mov	r0, r3
 8015a60:	370c      	adds	r7, #12
 8015a62:	46bd      	mov	sp, r7
 8015a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a68:	4770      	bx	lr

08015a6a <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8015a6a:	b480      	push	{r7}
 8015a6c:	b083      	sub	sp, #12
 8015a6e:	af00      	add	r7, sp, #0
 8015a70:	6078      	str	r0, [r7, #4]
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	4618      	mov	r0, r3
 8015a76:	370c      	adds	r7, #12
 8015a78:	46bd      	mov	sp, r7
 8015a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a7e:	4770      	bx	lr

08015a80 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>:
      allocate(allocator_type& __a, size_type __n)
 8015a80:	b580      	push	{r7, lr}
 8015a82:	b082      	sub	sp, #8
 8015a84:	af00      	add	r7, sp, #0
 8015a86:	6078      	str	r0, [r7, #4]
 8015a88:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8015a8a:	2200      	movs	r2, #0
 8015a8c:	6839      	ldr	r1, [r7, #0]
 8015a8e:	6878      	ldr	r0, [r7, #4]
 8015a90:	f000 fb22 	bl	80160d8 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>
 8015a94:	4603      	mov	r3, r0
 8015a96:	4618      	mov	r0, r3
 8015a98:	3708      	adds	r7, #8
 8015a9a:	46bd      	mov	sp, r7
 8015a9c:	bd80      	pop	{r7, pc}

08015a9e <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8015a9e:	b580      	push	{r7, lr}
 8015aa0:	b084      	sub	sp, #16
 8015aa2:	af00      	add	r7, sp, #0
 8015aa4:	60f8      	str	r0, [r7, #12]
 8015aa6:	60b9      	str	r1, [r7, #8]
 8015aa8:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8015aaa:	68b8      	ldr	r0, [r7, #8]
 8015aac:	f000 fb35 	bl	801611a <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>
 8015ab0:	4602      	mov	r2, r0
 8015ab2:	68fb      	ldr	r3, [r7, #12]
 8015ab4:	601a      	str	r2, [r3, #0]
 8015ab6:	68fb      	ldr	r3, [r7, #12]
 8015ab8:	687a      	ldr	r2, [r7, #4]
 8015aba:	605a      	str	r2, [r3, #4]
      { }
 8015abc:	68fb      	ldr	r3, [r7, #12]
 8015abe:	4618      	mov	r0, r3
 8015ac0:	3710      	adds	r7, #16
 8015ac2:	46bd      	mov	sp, r7
 8015ac4:	bd80      	pop	{r7, pc}

08015ac6 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8015ac6:	b580      	push	{r7, lr}
 8015ac8:	b084      	sub	sp, #16
 8015aca:	af00      	add	r7, sp, #0
 8015acc:	60f8      	str	r0, [r7, #12]
 8015ace:	60b9      	str	r1, [r7, #8]
 8015ad0:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8015ad2:	687a      	ldr	r2, [r7, #4]
 8015ad4:	68b9      	ldr	r1, [r7, #8]
 8015ad6:	68f8      	ldr	r0, [r7, #12]
 8015ad8:	f000 fb2a 	bl	8016130 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>
 8015adc:	bf00      	nop
 8015ade:	3710      	adds	r7, #16
 8015ae0:	46bd      	mov	sp, r7
 8015ae2:	bd80      	pop	{r7, pc}

08015ae4 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 8015ae4:	b480      	push	{r7}
 8015ae6:	b083      	sub	sp, #12
 8015ae8:	af00      	add	r7, sp, #0
 8015aea:	6078      	str	r0, [r7, #4]
 8015aec:	687b      	ldr	r3, [r7, #4]
 8015aee:	4618      	mov	r0, r3
 8015af0:	370c      	adds	r7, #12
 8015af2:	46bd      	mov	sp, r7
 8015af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015af8:	4770      	bx	lr

08015afa <_ZNSt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 8015afa:	b590      	push	{r4, r7, lr}
 8015afc:	b085      	sub	sp, #20
 8015afe:	af00      	add	r7, sp, #0
 8015b00:	60f8      	str	r0, [r7, #12]
 8015b02:	60b9      	str	r1, [r7, #8]
 8015b04:	607a      	str	r2, [r7, #4]
 8015b06:	603b      	str	r3, [r7, #0]
	: _M_ptr(__p), _Del_base(std::move(__d)), _Alloc_base(__a)
 8015b08:	68fc      	ldr	r4, [r7, #12]
 8015b0a:	6878      	ldr	r0, [r7, #4]
 8015b0c:	f7fe fa24 	bl	8013f58 <_ZSt4moveIRNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8015b10:	4603      	mov	r3, r0
 8015b12:	4619      	mov	r1, r3
 8015b14:	4620      	mov	r0, r4
 8015b16:	f000 fb18 	bl	801614a <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>
 8015b1a:	68fb      	ldr	r3, [r7, #12]
 8015b1c:	3301      	adds	r3, #1
 8015b1e:	6839      	ldr	r1, [r7, #0]
 8015b20:	4618      	mov	r0, r3
 8015b22:	f000 fb25 	bl	8016170 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama7ContextEELb1EEC1ERKS2_>
 8015b26:	68fb      	ldr	r3, [r7, #12]
 8015b28:	68ba      	ldr	r2, [r7, #8]
 8015b2a:	605a      	str	r2, [r3, #4]
	{ }
 8015b2c:	68fb      	ldr	r3, [r7, #12]
 8015b2e:	4618      	mov	r0, r3
 8015b30:	3714      	adds	r7, #20
 8015b32:	46bd      	mov	sp, r7
 8015b34:	bd90      	pop	{r4, r7, pc}

08015b36 <_ZNSt16allocator_traitsISaIN4tama7ContextEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 8015b36:	b580      	push	{r7, lr}
 8015b38:	b082      	sub	sp, #8
 8015b3a:	af00      	add	r7, sp, #0
 8015b3c:	6078      	str	r0, [r7, #4]
 8015b3e:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 8015b40:	6839      	ldr	r1, [r7, #0]
 8015b42:	6878      	ldr	r0, [r7, #4]
 8015b44:	f000 fb8e 	bl	8016264 <_ZN9__gnu_cxx13new_allocatorIN4tama7ContextEE7destroyIS2_EEvPT_>
 8015b48:	bf00      	nop
 8015b4a:	3708      	adds	r7, #8
 8015b4c:	46bd      	mov	sp, r7
 8015b4e:	bd80      	pop	{r7, pc}

08015b50 <_ZNSt10_Head_baseILj0EPN4tama7DisplayELb0EE7_M_headERKS3_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8015b50:	b480      	push	{r7}
 8015b52:	b083      	sub	sp, #12
 8015b54:	af00      	add	r7, sp, #0
 8015b56:	6078      	str	r0, [r7, #4]
 8015b58:	687b      	ldr	r3, [r7, #4]
 8015b5a:	4618      	mov	r0, r3
 8015b5c:	370c      	adds	r7, #12
 8015b5e:	46bd      	mov	sp, r7
 8015b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b64:	4770      	bx	lr

08015b66 <_ZNSt10_Head_baseILj0EPN4tama16Nokia5510DisplayELb0EE7_M_headERKS3_>:
 8015b66:	b480      	push	{r7}
 8015b68:	b083      	sub	sp, #12
 8015b6a:	af00      	add	r7, sp, #0
 8015b6c:	6078      	str	r0, [r7, #4]
 8015b6e:	687b      	ldr	r3, [r7, #4]
 8015b70:	4618      	mov	r0, r3
 8015b72:	370c      	adds	r7, #12
 8015b74:	46bd      	mov	sp, r7
 8015b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b7a:	4770      	bx	lr

08015b7c <_ZNK9__gnu_cxx13new_allocatorIN4tama18Stm32TextureLoaderEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8015b7c:	b480      	push	{r7}
 8015b7e:	b083      	sub	sp, #12
 8015b80:	af00      	add	r7, sp, #0
 8015b82:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8015b84:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8015b88:	4618      	mov	r0, r3
 8015b8a:	370c      	adds	r7, #12
 8015b8c:	46bd      	mov	sp, r7
 8015b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b92:	4770      	bx	lr

08015b94 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8015b94:	b580      	push	{r7, lr}
 8015b96:	b084      	sub	sp, #16
 8015b98:	af00      	add	r7, sp, #0
 8015b9a:	60f8      	str	r0, [r7, #12]
 8015b9c:	60b9      	str	r1, [r7, #8]
 8015b9e:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8015ba0:	68f8      	ldr	r0, [r7, #12]
 8015ba2:	f000 fb6b 	bl	801627c <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>
 8015ba6:	4602      	mov	r2, r0
 8015ba8:	68bb      	ldr	r3, [r7, #8]
 8015baa:	4293      	cmp	r3, r2
 8015bac:	bf8c      	ite	hi
 8015bae:	2301      	movhi	r3, #1
 8015bb0:	2300      	movls	r3, #0
 8015bb2:	b2db      	uxtb	r3, r3
 8015bb4:	2b00      	cmp	r3, #0
 8015bb6:	d001      	beq.n	8015bbc <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8015bb8:	f009 feaf 	bl	801f91a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8015bbc:	68ba      	ldr	r2, [r7, #8]
 8015bbe:	4613      	mov	r3, r2
 8015bc0:	009b      	lsls	r3, r3, #2
 8015bc2:	4413      	add	r3, r2
 8015bc4:	009b      	lsls	r3, r3, #2
 8015bc6:	4618      	mov	r0, r3
 8015bc8:	f009 fe79 	bl	801f8be <_Znwj>
 8015bcc:	4603      	mov	r3, r0
      }
 8015bce:	4618      	mov	r0, r3
 8015bd0:	3710      	adds	r7, #16
 8015bd2:	46bd      	mov	sp, r7
 8015bd4:	bd80      	pop	{r7, pc}

08015bd6 <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8015bd6:	b480      	push	{r7}
 8015bd8:	b083      	sub	sp, #12
 8015bda:	af00      	add	r7, sp, #0
 8015bdc:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	4618      	mov	r0, r3
 8015be2:	370c      	adds	r7, #12
 8015be4:	46bd      	mov	sp, r7
 8015be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bea:	4770      	bx	lr

08015bec <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>:
      deallocate(pointer __p, size_type)
 8015bec:	b580      	push	{r7, lr}
 8015bee:	b084      	sub	sp, #16
 8015bf0:	af00      	add	r7, sp, #0
 8015bf2:	60f8      	str	r0, [r7, #12]
 8015bf4:	60b9      	str	r1, [r7, #8]
 8015bf6:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8015bf8:	68b8      	ldr	r0, [r7, #8]
 8015bfa:	f009 fe79 	bl	801f8f0 <_ZdlPv>
      }
 8015bfe:	bf00      	nop
 8015c00:	3710      	adds	r7, #16
 8015c02:	46bd      	mov	sp, r7
 8015c04:	bd80      	pop	{r7, pc}

08015c06 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _M_tp(std::move(__tp)) { }
 8015c06:	b590      	push	{r4, r7, lr}
 8015c08:	b083      	sub	sp, #12
 8015c0a:	af00      	add	r7, sp, #0
 8015c0c:	6078      	str	r0, [r7, #4]
 8015c0e:	6039      	str	r1, [r7, #0]
 8015c10:	687c      	ldr	r4, [r7, #4]
 8015c12:	6838      	ldr	r0, [r7, #0]
 8015c14:	f7fd fceb 	bl	80135ee <_ZSt4moveIRNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8015c18:	4603      	mov	r3, r0
 8015c1a:	4619      	mov	r1, r3
 8015c1c:	4620      	mov	r0, r4
 8015c1e:	f7fd fcf1 	bl	8013604 <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 8015c22:	687b      	ldr	r3, [r7, #4]
 8015c24:	4618      	mov	r0, r3
 8015c26:	370c      	adds	r7, #12
 8015c28:	46bd      	mov	sp, r7
 8015c2a:	bd90      	pop	{r4, r7, pc}

08015c2c <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama18Stm32TextureLoaderEELb1EEC1ERKS2_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 8015c2c:	b580      	push	{r7, lr}
 8015c2e:	b082      	sub	sp, #8
 8015c30:	af00      	add	r7, sp, #0
 8015c32:	6078      	str	r0, [r7, #4]
 8015c34:	6039      	str	r1, [r7, #0]
 8015c36:	6839      	ldr	r1, [r7, #0]
 8015c38:	6878      	ldr	r0, [r7, #4]
 8015c3a:	f7fd fc78 	bl	801352e <_ZNSaIN4tama18Stm32TextureLoaderEEC1ERKS1_>
 8015c3e:	687b      	ldr	r3, [r7, #4]
 8015c40:	4618      	mov	r0, r3
 8015c42:	3708      	adds	r7, #8
 8015c44:	46bd      	mov	sp, r7
 8015c46:	bd80      	pop	{r7, pc}

08015c48 <_ZN9__gnu_cxx13new_allocatorIN4tama18Stm32TextureLoaderEE7destroyIS2_EEvPT_>:
	destroy(_Up* __p) { __p->~_Up(); }
 8015c48:	b480      	push	{r7}
 8015c4a:	b083      	sub	sp, #12
 8015c4c:	af00      	add	r7, sp, #0
 8015c4e:	6078      	str	r0, [r7, #4]
 8015c50:	6039      	str	r1, [r7, #0]
 8015c52:	bf00      	nop
 8015c54:	370c      	adds	r7, #12
 8015c56:	46bd      	mov	sp, r7
 8015c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c5c:	4770      	bx	lr
	...

08015c60 <_ZNK9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8015c60:	b480      	push	{r7}
 8015c62:	b083      	sub	sp, #12
 8015c64:	af00      	add	r7, sp, #0
 8015c66:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8015c68:	4b03      	ldr	r3, [pc, #12]	; (8015c78 <_ZNK9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEE8max_sizeEv+0x18>)
 8015c6a:	4618      	mov	r0, r3
 8015c6c:	370c      	adds	r7, #12
 8015c6e:	46bd      	mov	sp, r7
 8015c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c74:	4770      	bx	lr
 8015c76:	bf00      	nop
 8015c78:	0aaaaaaa 	.word	0x0aaaaaaa

08015c7c <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8015c7c:	b580      	push	{r7, lr}
 8015c7e:	b084      	sub	sp, #16
 8015c80:	af00      	add	r7, sp, #0
 8015c82:	60f8      	str	r0, [r7, #12]
 8015c84:	60b9      	str	r1, [r7, #8]
 8015c86:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8015c88:	68f8      	ldr	r0, [r7, #12]
 8015c8a:	f000 fb05 	bl	8016298 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>
 8015c8e:	4602      	mov	r2, r0
 8015c90:	68bb      	ldr	r3, [r7, #8]
 8015c92:	4293      	cmp	r3, r2
 8015c94:	bf8c      	ite	hi
 8015c96:	2301      	movhi	r3, #1
 8015c98:	2300      	movls	r3, #0
 8015c9a:	b2db      	uxtb	r3, r3
 8015c9c:	2b00      	cmp	r3, #0
 8015c9e:	d001      	beq.n	8015ca4 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8015ca0:	f009 fe3b 	bl	801f91a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8015ca4:	68ba      	ldr	r2, [r7, #8]
 8015ca6:	4613      	mov	r3, r2
 8015ca8:	009b      	lsls	r3, r3, #2
 8015caa:	4413      	add	r3, r2
 8015cac:	009b      	lsls	r3, r3, #2
 8015cae:	4618      	mov	r0, r3
 8015cb0:	f009 fe05 	bl	801f8be <_Znwj>
 8015cb4:	4603      	mov	r3, r0
      }
 8015cb6:	4618      	mov	r0, r3
 8015cb8:	3710      	adds	r7, #16
 8015cba:	46bd      	mov	sp, r7
 8015cbc:	bd80      	pop	{r7, pc}

08015cbe <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8015cbe:	b480      	push	{r7}
 8015cc0:	b083      	sub	sp, #12
 8015cc2:	af00      	add	r7, sp, #0
 8015cc4:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8015cc6:	687b      	ldr	r3, [r7, #4]
 8015cc8:	4618      	mov	r0, r3
 8015cca:	370c      	adds	r7, #12
 8015ccc:	46bd      	mov	sp, r7
 8015cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cd2:	4770      	bx	lr

08015cd4 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>:
      deallocate(pointer __p, size_type)
 8015cd4:	b580      	push	{r7, lr}
 8015cd6:	b084      	sub	sp, #16
 8015cd8:	af00      	add	r7, sp, #0
 8015cda:	60f8      	str	r0, [r7, #12]
 8015cdc:	60b9      	str	r1, [r7, #8]
 8015cde:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8015ce0:	68b8      	ldr	r0, [r7, #8]
 8015ce2:	f009 fe05 	bl	801f8f0 <_ZdlPv>
      }
 8015ce6:	bf00      	nop
 8015ce8:	3710      	adds	r7, #16
 8015cea:	46bd      	mov	sp, r7
 8015cec:	bd80      	pop	{r7, pc}

08015cee <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _M_tp(std::move(__tp)) { }
 8015cee:	b590      	push	{r4, r7, lr}
 8015cf0:	b083      	sub	sp, #12
 8015cf2:	af00      	add	r7, sp, #0
 8015cf4:	6078      	str	r0, [r7, #4]
 8015cf6:	6039      	str	r1, [r7, #0]
 8015cf8:	687c      	ldr	r4, [r7, #4]
 8015cfa:	6838      	ldr	r0, [r7, #0]
 8015cfc:	f7fd fd5f 	bl	80137be <_ZSt4moveIRNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8015d00:	4603      	mov	r3, r0
 8015d02:	4619      	mov	r1, r3
 8015d04:	4620      	mov	r0, r4
 8015d06:	f7fd fd65 	bl	80137d4 <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	4618      	mov	r0, r3
 8015d0e:	370c      	adds	r7, #12
 8015d10:	46bd      	mov	sp, r7
 8015d12:	bd90      	pop	{r4, r7, pc}

08015d14 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama27Nokia5110DisplayDataManagerEELb1EEC1ERKS2_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 8015d14:	b580      	push	{r7, lr}
 8015d16:	b082      	sub	sp, #8
 8015d18:	af00      	add	r7, sp, #0
 8015d1a:	6078      	str	r0, [r7, #4]
 8015d1c:	6039      	str	r1, [r7, #0]
 8015d1e:	6839      	ldr	r1, [r7, #0]
 8015d20:	6878      	ldr	r0, [r7, #4]
 8015d22:	f7fd fcec 	bl	80136fe <_ZNSaIN4tama27Nokia5110DisplayDataManagerEEC1ERKS1_>
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	4618      	mov	r0, r3
 8015d2a:	3708      	adds	r7, #8
 8015d2c:	46bd      	mov	sp, r7
 8015d2e:	bd80      	pop	{r7, pc}

08015d30 <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEE7destroyIS2_EEvPT_>:
	destroy(_Up* __p) { __p->~_Up(); }
 8015d30:	b480      	push	{r7}
 8015d32:	b083      	sub	sp, #12
 8015d34:	af00      	add	r7, sp, #0
 8015d36:	6078      	str	r0, [r7, #4]
 8015d38:	6039      	str	r1, [r7, #0]
 8015d3a:	bf00      	nop
 8015d3c:	370c      	adds	r7, #12
 8015d3e:	46bd      	mov	sp, r7
 8015d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d44:	4770      	bx	lr

08015d46 <_ZNK9__gnu_cxx13new_allocatorIN4tama23Stm32TimeMonitorCreatorEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8015d46:	b480      	push	{r7}
 8015d48:	b083      	sub	sp, #12
 8015d4a:	af00      	add	r7, sp, #0
 8015d4c:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8015d4e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8015d52:	4618      	mov	r0, r3
 8015d54:	370c      	adds	r7, #12
 8015d56:	46bd      	mov	sp, r7
 8015d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d5c:	4770      	bx	lr

08015d5e <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama23Stm32TimeMonitorCreatorENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8015d5e:	b580      	push	{r7, lr}
 8015d60:	b084      	sub	sp, #16
 8015d62:	af00      	add	r7, sp, #0
 8015d64:	60f8      	str	r0, [r7, #12]
 8015d66:	60b9      	str	r1, [r7, #8]
 8015d68:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8015d6a:	68f8      	ldr	r0, [r7, #12]
 8015d6c:	f000 faa2 	bl	80162b4 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama23Stm32TimeMonitorCreatorENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>
 8015d70:	4602      	mov	r2, r0
 8015d72:	68bb      	ldr	r3, [r7, #8]
 8015d74:	4293      	cmp	r3, r2
 8015d76:	bf8c      	ite	hi
 8015d78:	2301      	movhi	r3, #1
 8015d7a:	2300      	movls	r3, #0
 8015d7c:	b2db      	uxtb	r3, r3
 8015d7e:	2b00      	cmp	r3, #0
 8015d80:	d001      	beq.n	8015d86 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama23Stm32TimeMonitorCreatorENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8015d82:	f009 fdca 	bl	801f91a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8015d86:	68ba      	ldr	r2, [r7, #8]
 8015d88:	4613      	mov	r3, r2
 8015d8a:	009b      	lsls	r3, r3, #2
 8015d8c:	4413      	add	r3, r2
 8015d8e:	009b      	lsls	r3, r3, #2
 8015d90:	4618      	mov	r0, r3
 8015d92:	f009 fd94 	bl	801f8be <_Znwj>
 8015d96:	4603      	mov	r3, r0
      }
 8015d98:	4618      	mov	r0, r3
 8015d9a:	3710      	adds	r7, #16
 8015d9c:	46bd      	mov	sp, r7
 8015d9e:	bd80      	pop	{r7, pc}

08015da0 <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama23Stm32TimeMonitorCreatorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8015da0:	b480      	push	{r7}
 8015da2:	b083      	sub	sp, #12
 8015da4:	af00      	add	r7, sp, #0
 8015da6:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	4618      	mov	r0, r3
 8015dac:	370c      	adds	r7, #12
 8015dae:	46bd      	mov	sp, r7
 8015db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015db4:	4770      	bx	lr

08015db6 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama23Stm32TimeMonitorCreatorENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>:
      deallocate(pointer __p, size_type)
 8015db6:	b580      	push	{r7, lr}
 8015db8:	b084      	sub	sp, #16
 8015dba:	af00      	add	r7, sp, #0
 8015dbc:	60f8      	str	r0, [r7, #12]
 8015dbe:	60b9      	str	r1, [r7, #8]
 8015dc0:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8015dc2:	68b8      	ldr	r0, [r7, #8]
 8015dc4:	f009 fd94 	bl	801f8f0 <_ZdlPv>
      }
 8015dc8:	bf00      	nop
 8015dca:	3710      	adds	r7, #16
 8015dcc:	46bd      	mov	sp, r7
 8015dce:	bd80      	pop	{r7, pc}

08015dd0 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama23Stm32TimeMonitorCreatorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _M_tp(std::move(__tp)) { }
 8015dd0:	b590      	push	{r4, r7, lr}
 8015dd2:	b083      	sub	sp, #12
 8015dd4:	af00      	add	r7, sp, #0
 8015dd6:	6078      	str	r0, [r7, #4]
 8015dd8:	6039      	str	r1, [r7, #0]
 8015dda:	687c      	ldr	r4, [r7, #4]
 8015ddc:	6838      	ldr	r0, [r7, #0]
 8015dde:	f7fd fdd6 	bl	801398e <_ZSt4moveIRNSt12__shared_ptrIN4tama23Stm32TimeMonitorCreatorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8015de2:	4603      	mov	r3, r0
 8015de4:	4619      	mov	r1, r3
 8015de6:	4620      	mov	r0, r4
 8015de8:	f7fd fddc 	bl	80139a4 <_ZNSt12__shared_ptrIN4tama23Stm32TimeMonitorCreatorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 8015dec:	687b      	ldr	r3, [r7, #4]
 8015dee:	4618      	mov	r0, r3
 8015df0:	370c      	adds	r7, #12
 8015df2:	46bd      	mov	sp, r7
 8015df4:	bd90      	pop	{r4, r7, pc}

08015df6 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama23Stm32TimeMonitorCreatorEELb1EEC1ERKS2_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 8015df6:	b580      	push	{r7, lr}
 8015df8:	b082      	sub	sp, #8
 8015dfa:	af00      	add	r7, sp, #0
 8015dfc:	6078      	str	r0, [r7, #4]
 8015dfe:	6039      	str	r1, [r7, #0]
 8015e00:	6839      	ldr	r1, [r7, #0]
 8015e02:	6878      	ldr	r0, [r7, #4]
 8015e04:	f7fd fd63 	bl	80138ce <_ZNSaIN4tama23Stm32TimeMonitorCreatorEEC1ERKS1_>
 8015e08:	687b      	ldr	r3, [r7, #4]
 8015e0a:	4618      	mov	r0, r3
 8015e0c:	3708      	adds	r7, #8
 8015e0e:	46bd      	mov	sp, r7
 8015e10:	bd80      	pop	{r7, pc}

08015e12 <_ZN9__gnu_cxx13new_allocatorIN4tama23Stm32TimeMonitorCreatorEE7destroyIS2_EEvPT_>:
	destroy(_Up* __p) { __p->~_Up(); }
 8015e12:	b480      	push	{r7}
 8015e14:	b083      	sub	sp, #12
 8015e16:	af00      	add	r7, sp, #0
 8015e18:	6078      	str	r0, [r7, #4]
 8015e1a:	6039      	str	r1, [r7, #0]
 8015e1c:	bf00      	nop
 8015e1e:	370c      	adds	r7, #12
 8015e20:	46bd      	mov	sp, r7
 8015e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e26:	4770      	bx	lr

08015e28 <_ZNK9__gnu_cxx13new_allocatorIN4tama25Stm32SoundPlayingStrategyEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8015e28:	b480      	push	{r7}
 8015e2a:	b083      	sub	sp, #12
 8015e2c:	af00      	add	r7, sp, #0
 8015e2e:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8015e30:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8015e34:	4618      	mov	r0, r3
 8015e36:	370c      	adds	r7, #12
 8015e38:	46bd      	mov	sp, r7
 8015e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e3e:	4770      	bx	lr

08015e40 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8015e40:	b580      	push	{r7, lr}
 8015e42:	b084      	sub	sp, #16
 8015e44:	af00      	add	r7, sp, #0
 8015e46:	60f8      	str	r0, [r7, #12]
 8015e48:	60b9      	str	r1, [r7, #8]
 8015e4a:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8015e4c:	68f8      	ldr	r0, [r7, #12]
 8015e4e:	f000 fa3f 	bl	80162d0 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>
 8015e52:	4602      	mov	r2, r0
 8015e54:	68bb      	ldr	r3, [r7, #8]
 8015e56:	4293      	cmp	r3, r2
 8015e58:	bf8c      	ite	hi
 8015e5a:	2301      	movhi	r3, #1
 8015e5c:	2300      	movls	r3, #0
 8015e5e:	b2db      	uxtb	r3, r3
 8015e60:	2b00      	cmp	r3, #0
 8015e62:	d001      	beq.n	8015e68 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8015e64:	f009 fd59 	bl	801f91a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8015e68:	68ba      	ldr	r2, [r7, #8]
 8015e6a:	4613      	mov	r3, r2
 8015e6c:	009b      	lsls	r3, r3, #2
 8015e6e:	4413      	add	r3, r2
 8015e70:	009b      	lsls	r3, r3, #2
 8015e72:	4618      	mov	r0, r3
 8015e74:	f009 fd23 	bl	801f8be <_Znwj>
 8015e78:	4603      	mov	r3, r0
      }
 8015e7a:	4618      	mov	r0, r3
 8015e7c:	3710      	adds	r7, #16
 8015e7e:	46bd      	mov	sp, r7
 8015e80:	bd80      	pop	{r7, pc}

08015e82 <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8015e82:	b480      	push	{r7}
 8015e84:	b083      	sub	sp, #12
 8015e86:	af00      	add	r7, sp, #0
 8015e88:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8015e8a:	687b      	ldr	r3, [r7, #4]
 8015e8c:	4618      	mov	r0, r3
 8015e8e:	370c      	adds	r7, #12
 8015e90:	46bd      	mov	sp, r7
 8015e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e96:	4770      	bx	lr

08015e98 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>:
      deallocate(pointer __p, size_type)
 8015e98:	b580      	push	{r7, lr}
 8015e9a:	b084      	sub	sp, #16
 8015e9c:	af00      	add	r7, sp, #0
 8015e9e:	60f8      	str	r0, [r7, #12]
 8015ea0:	60b9      	str	r1, [r7, #8]
 8015ea2:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8015ea4:	68b8      	ldr	r0, [r7, #8]
 8015ea6:	f009 fd23 	bl	801f8f0 <_ZdlPv>
      }
 8015eaa:	bf00      	nop
 8015eac:	3710      	adds	r7, #16
 8015eae:	46bd      	mov	sp, r7
 8015eb0:	bd80      	pop	{r7, pc}

08015eb2 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _M_tp(std::move(__tp)) { }
 8015eb2:	b590      	push	{r4, r7, lr}
 8015eb4:	b083      	sub	sp, #12
 8015eb6:	af00      	add	r7, sp, #0
 8015eb8:	6078      	str	r0, [r7, #4]
 8015eba:	6039      	str	r1, [r7, #0]
 8015ebc:	687c      	ldr	r4, [r7, #4]
 8015ebe:	6838      	ldr	r0, [r7, #0]
 8015ec0:	f7fd fe4d 	bl	8013b5e <_ZSt4moveIRNSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8015ec4:	4603      	mov	r3, r0
 8015ec6:	4619      	mov	r1, r3
 8015ec8:	4620      	mov	r0, r4
 8015eca:	f7fd fe53 	bl	8013b74 <_ZNSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 8015ece:	687b      	ldr	r3, [r7, #4]
 8015ed0:	4618      	mov	r0, r3
 8015ed2:	370c      	adds	r7, #12
 8015ed4:	46bd      	mov	sp, r7
 8015ed6:	bd90      	pop	{r4, r7, pc}

08015ed8 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama25Stm32SoundPlayingStrategyEELb1EEC1ERKS2_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 8015ed8:	b580      	push	{r7, lr}
 8015eda:	b082      	sub	sp, #8
 8015edc:	af00      	add	r7, sp, #0
 8015ede:	6078      	str	r0, [r7, #4]
 8015ee0:	6039      	str	r1, [r7, #0]
 8015ee2:	6839      	ldr	r1, [r7, #0]
 8015ee4:	6878      	ldr	r0, [r7, #4]
 8015ee6:	f7fd fdda 	bl	8013a9e <_ZNSaIN4tama25Stm32SoundPlayingStrategyEEC1ERKS1_>
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	4618      	mov	r0, r3
 8015eee:	3708      	adds	r7, #8
 8015ef0:	46bd      	mov	sp, r7
 8015ef2:	bd80      	pop	{r7, pc}

08015ef4 <_ZN9__gnu_cxx13new_allocatorIN4tama25Stm32SoundPlayingStrategyEE7destroyIS2_EEvPT_>:
	destroy(_Up* __p) { __p->~_Up(); }
 8015ef4:	b480      	push	{r7}
 8015ef6:	b083      	sub	sp, #12
 8015ef8:	af00      	add	r7, sp, #0
 8015efa:	6078      	str	r0, [r7, #4]
 8015efc:	6039      	str	r1, [r7, #0]
 8015efe:	bf00      	nop
 8015f00:	370c      	adds	r7, #12
 8015f02:	46bd      	mov	sp, r7
 8015f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f08:	4770      	bx	lr
	...

08015f0c <_ZNK9__gnu_cxx13new_allocatorIN4tama10Stm32InputEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8015f0c:	b480      	push	{r7}
 8015f0e:	b083      	sub	sp, #12
 8015f10:	af00      	add	r7, sp, #0
 8015f12:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8015f14:	4b03      	ldr	r3, [pc, #12]	; (8015f24 <_ZNK9__gnu_cxx13new_allocatorIN4tama10Stm32InputEE8max_sizeEv+0x18>)
 8015f16:	4618      	mov	r0, r3
 8015f18:	370c      	adds	r7, #12
 8015f1a:	46bd      	mov	sp, r7
 8015f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f20:	4770      	bx	lr
 8015f22:	bf00      	nop
 8015f24:	0aaaaaaa 	.word	0x0aaaaaaa

08015f28 <_ZNSt12_Vector_baseIPN4tama7OnInputESaIS2_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8015f28:	b580      	push	{r7, lr}
 8015f2a:	b082      	sub	sp, #8
 8015f2c:	af00      	add	r7, sp, #0
 8015f2e:	6078      	str	r0, [r7, #4]
 8015f30:	6878      	ldr	r0, [r7, #4]
 8015f32:	f000 f9f0 	bl	8016316 <_ZNSaIPN4tama7OnInputEED1Ev>
 8015f36:	687b      	ldr	r3, [r7, #4]
 8015f38:	4618      	mov	r0, r3
 8015f3a:	3708      	adds	r7, #8
 8015f3c:	46bd      	mov	sp, r7
 8015f3e:	bd80      	pop	{r7, pc}

08015f40 <_ZNSt12_Vector_baseIPN4tama7OnInputESaIS2_EEC1Ev>:
      _Vector_base()
 8015f40:	b580      	push	{r7, lr}
 8015f42:	b082      	sub	sp, #8
 8015f44:	af00      	add	r7, sp, #0
 8015f46:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 8015f48:	687b      	ldr	r3, [r7, #4]
 8015f4a:	4618      	mov	r0, r3
 8015f4c:	f000 f9ce 	bl	80162ec <_ZNSt12_Vector_baseIPN4tama7OnInputESaIS2_EE12_Vector_implC1Ev>
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	4618      	mov	r0, r3
 8015f54:	3708      	adds	r7, #8
 8015f56:	46bd      	mov	sp, r7
 8015f58:	bd80      	pop	{r7, pc}

08015f5a <_ZNSt12_Vector_baseIPN4tama7OnInputESaIS2_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8015f5a:	b580      	push	{r7, lr}
 8015f5c:	b082      	sub	sp, #8
 8015f5e:	af00      	add	r7, sp, #0
 8015f60:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	6819      	ldr	r1, [r3, #0]
 8015f66:	687b      	ldr	r3, [r7, #4]
 8015f68:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 8015f6a:	461a      	mov	r2, r3
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	681b      	ldr	r3, [r3, #0]
 8015f70:	1ad3      	subs	r3, r2, r3
 8015f72:	109b      	asrs	r3, r3, #2
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8015f74:	461a      	mov	r2, r3
 8015f76:	6878      	ldr	r0, [r7, #4]
 8015f78:	f7ec fc24 	bl	80027c4 <_ZNSt12_Vector_baseIPN4tama7OnInputESaIS2_EE13_M_deallocateEPS2_j>
		      - this->_M_impl._M_start); }
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	4618      	mov	r0, r3
 8015f80:	f7ff ffd2 	bl	8015f28 <_ZNSt12_Vector_baseIPN4tama7OnInputESaIS2_EE12_Vector_implD1Ev>
 8015f84:	687b      	ldr	r3, [r7, #4]
 8015f86:	4618      	mov	r0, r3
 8015f88:	3708      	adds	r7, #8
 8015f8a:	46bd      	mov	sp, r7
 8015f8c:	bd80      	pop	{r7, pc}

08015f8e <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8015f8e:	b580      	push	{r7, lr}
 8015f90:	b084      	sub	sp, #16
 8015f92:	af00      	add	r7, sp, #0
 8015f94:	60f8      	str	r0, [r7, #12]
 8015f96:	60b9      	str	r1, [r7, #8]
 8015f98:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8015f9a:	68f8      	ldr	r0, [r7, #12]
 8015f9c:	f000 f9c8 	bl	8016330 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>
 8015fa0:	4602      	mov	r2, r0
 8015fa2:	68bb      	ldr	r3, [r7, #8]
 8015fa4:	4293      	cmp	r3, r2
 8015fa6:	bf8c      	ite	hi
 8015fa8:	2301      	movhi	r3, #1
 8015faa:	2300      	movls	r3, #0
 8015fac:	b2db      	uxtb	r3, r3
 8015fae:	2b00      	cmp	r3, #0
 8015fb0:	d001      	beq.n	8015fb6 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8015fb2:	f009 fcb2 	bl	801f91a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8015fb6:	68ba      	ldr	r2, [r7, #8]
 8015fb8:	4613      	mov	r3, r2
 8015fba:	009b      	lsls	r3, r3, #2
 8015fbc:	4413      	add	r3, r2
 8015fbe:	009b      	lsls	r3, r3, #2
 8015fc0:	4618      	mov	r0, r3
 8015fc2:	f009 fc7c 	bl	801f8be <_Znwj>
 8015fc6:	4603      	mov	r3, r0
      }
 8015fc8:	4618      	mov	r0, r3
 8015fca:	3710      	adds	r7, #16
 8015fcc:	46bd      	mov	sp, r7
 8015fce:	bd80      	pop	{r7, pc}

08015fd0 <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8015fd0:	b480      	push	{r7}
 8015fd2:	b083      	sub	sp, #12
 8015fd4:	af00      	add	r7, sp, #0
 8015fd6:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8015fd8:	687b      	ldr	r3, [r7, #4]
 8015fda:	4618      	mov	r0, r3
 8015fdc:	370c      	adds	r7, #12
 8015fde:	46bd      	mov	sp, r7
 8015fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fe4:	4770      	bx	lr

08015fe6 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>:
      deallocate(pointer __p, size_type)
 8015fe6:	b580      	push	{r7, lr}
 8015fe8:	b084      	sub	sp, #16
 8015fea:	af00      	add	r7, sp, #0
 8015fec:	60f8      	str	r0, [r7, #12]
 8015fee:	60b9      	str	r1, [r7, #8]
 8015ff0:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8015ff2:	68b8      	ldr	r0, [r7, #8]
 8015ff4:	f009 fc7c 	bl	801f8f0 <_ZdlPv>
      }
 8015ff8:	bf00      	nop
 8015ffa:	3710      	adds	r7, #16
 8015ffc:	46bd      	mov	sp, r7
 8015ffe:	bd80      	pop	{r7, pc}

08016000 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _M_tp(std::move(__tp)) { }
 8016000:	b590      	push	{r4, r7, lr}
 8016002:	b083      	sub	sp, #12
 8016004:	af00      	add	r7, sp, #0
 8016006:	6078      	str	r0, [r7, #4]
 8016008:	6039      	str	r1, [r7, #0]
 801600a:	687c      	ldr	r4, [r7, #4]
 801600c:	6838      	ldr	r0, [r7, #0]
 801600e:	f7fd fe8e 	bl	8013d2e <_ZSt4moveIRNSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8016012:	4603      	mov	r3, r0
 8016014:	4619      	mov	r1, r3
 8016016:	4620      	mov	r0, r4
 8016018:	f7fd fe94 	bl	8013d44 <_ZNSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 801601c:	687b      	ldr	r3, [r7, #4]
 801601e:	4618      	mov	r0, r3
 8016020:	370c      	adds	r7, #12
 8016022:	46bd      	mov	sp, r7
 8016024:	bd90      	pop	{r4, r7, pc}

08016026 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama10Stm32InputEELb1EEC1ERKS2_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 8016026:	b580      	push	{r7, lr}
 8016028:	b082      	sub	sp, #8
 801602a:	af00      	add	r7, sp, #0
 801602c:	6078      	str	r0, [r7, #4]
 801602e:	6039      	str	r1, [r7, #0]
 8016030:	6839      	ldr	r1, [r7, #0]
 8016032:	6878      	ldr	r0, [r7, #4]
 8016034:	f7fd fe1b 	bl	8013c6e <_ZNSaIN4tama10Stm32InputEEC1ERKS1_>
 8016038:	687b      	ldr	r3, [r7, #4]
 801603a:	4618      	mov	r0, r3
 801603c:	3708      	adds	r7, #8
 801603e:	46bd      	mov	sp, r7
 8016040:	bd80      	pop	{r7, pc}
	...

08016044 <_ZN4tama10Stm32InputD1Ev>:
 8016044:	b580      	push	{r7, lr}
 8016046:	b082      	sub	sp, #8
 8016048:	af00      	add	r7, sp, #0
 801604a:	6078      	str	r0, [r7, #4]
 801604c:	4a05      	ldr	r2, [pc, #20]	; (8016064 <_ZN4tama10Stm32InputD1Ev+0x20>)
 801604e:	687b      	ldr	r3, [r7, #4]
 8016050:	601a      	str	r2, [r3, #0]
 8016052:	687b      	ldr	r3, [r7, #4]
 8016054:	4618      	mov	r0, r3
 8016056:	f7fe fe1b 	bl	8014c90 <_ZN4tama5InputD1Ev>
 801605a:	687b      	ldr	r3, [r7, #4]
 801605c:	4618      	mov	r0, r3
 801605e:	3708      	adds	r7, #8
 8016060:	46bd      	mov	sp, r7
 8016062:	bd80      	pop	{r7, pc}
 8016064:	08024944 	.word	0x08024944

08016068 <_ZN9__gnu_cxx13new_allocatorIN4tama10Stm32InputEE7destroyIS2_EEvPT_>:
	destroy(_Up* __p) { __p->~_Up(); }
 8016068:	b580      	push	{r7, lr}
 801606a:	b082      	sub	sp, #8
 801606c:	af00      	add	r7, sp, #0
 801606e:	6078      	str	r0, [r7, #4]
 8016070:	6039      	str	r1, [r7, #0]
 8016072:	6838      	ldr	r0, [r7, #0]
 8016074:	f7ff ffe6 	bl	8016044 <_ZN4tama10Stm32InputD1Ev>
 8016078:	bf00      	nop
 801607a:	3708      	adds	r7, #8
 801607c:	46bd      	mov	sp, r7
 801607e:	bd80      	pop	{r7, pc}

08016080 <_ZNK9__gnu_cxx13new_allocatorIN4tama7ContextEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8016080:	b480      	push	{r7}
 8016082:	b083      	sub	sp, #12
 8016084:	af00      	add	r7, sp, #0
 8016086:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8016088:	4b03      	ldr	r3, [pc, #12]	; (8016098 <_ZNK9__gnu_cxx13new_allocatorIN4tama7ContextEE8max_sizeEv+0x18>)
 801608a:	4618      	mov	r0, r3
 801608c:	370c      	adds	r7, #12
 801608e:	46bd      	mov	sp, r7
 8016090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016094:	4770      	bx	lr
 8016096:	bf00      	nop
 8016098:	01555555 	.word	0x01555555

0801609c <_ZNSt12__shared_ptrIN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0EEC1EOS4_>:
      __shared_ptr(__shared_ptr&& __r) noexcept
 801609c:	b580      	push	{r7, lr}
 801609e:	b082      	sub	sp, #8
 80160a0:	af00      	add	r7, sp, #0
 80160a2:	6078      	str	r0, [r7, #4]
 80160a4:	6039      	str	r1, [r7, #0]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80160a6:	683b      	ldr	r3, [r7, #0]
 80160a8:	681a      	ldr	r2, [r3, #0]
 80160aa:	687b      	ldr	r3, [r7, #4]
 80160ac:	601a      	str	r2, [r3, #0]
 80160ae:	687b      	ldr	r3, [r7, #4]
 80160b0:	3304      	adds	r3, #4
 80160b2:	4618      	mov	r0, r3
 80160b4:	f7ed ff5b 	bl	8003f6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	_M_refcount._M_swap(__r._M_refcount);
 80160b8:	687b      	ldr	r3, [r7, #4]
 80160ba:	1d1a      	adds	r2, r3, #4
 80160bc:	683b      	ldr	r3, [r7, #0]
 80160be:	3304      	adds	r3, #4
 80160c0:	4619      	mov	r1, r3
 80160c2:	4610      	mov	r0, r2
 80160c4:	f7ee f85c 	bl	8004180 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	__r._M_ptr = 0;
 80160c8:	683b      	ldr	r3, [r7, #0]
 80160ca:	2200      	movs	r2, #0
 80160cc:	601a      	str	r2, [r3, #0]
      }
 80160ce:	687b      	ldr	r3, [r7, #4]
 80160d0:	4618      	mov	r0, r3
 80160d2:	3708      	adds	r7, #8
 80160d4:	46bd      	mov	sp, r7
 80160d6:	bd80      	pop	{r7, pc}

080160d8 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80160d8:	b580      	push	{r7, lr}
 80160da:	b084      	sub	sp, #16
 80160dc:	af00      	add	r7, sp, #0
 80160de:	60f8      	str	r0, [r7, #12]
 80160e0:	60b9      	str	r1, [r7, #8]
 80160e2:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 80160e4:	68f8      	ldr	r0, [r7, #12]
 80160e6:	f000 f931 	bl	801634c <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>
 80160ea:	4602      	mov	r2, r0
 80160ec:	68bb      	ldr	r3, [r7, #8]
 80160ee:	4293      	cmp	r3, r2
 80160f0:	bf8c      	ite	hi
 80160f2:	2301      	movhi	r3, #1
 80160f4:	2300      	movls	r3, #0
 80160f6:	b2db      	uxtb	r3, r3
 80160f8:	2b00      	cmp	r3, #0
 80160fa:	d001      	beq.n	8016100 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80160fc:	f009 fc0d 	bl	801f91a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8016100:	68ba      	ldr	r2, [r7, #8]
 8016102:	4613      	mov	r3, r2
 8016104:	009b      	lsls	r3, r3, #2
 8016106:	4413      	add	r3, r2
 8016108:	009b      	lsls	r3, r3, #2
 801610a:	4618      	mov	r0, r3
 801610c:	f009 fbd7 	bl	801f8be <_Znwj>
 8016110:	4603      	mov	r3, r0
      }
 8016112:	4618      	mov	r0, r3
 8016114:	3710      	adds	r7, #16
 8016116:	46bd      	mov	sp, r7
 8016118:	bd80      	pop	{r7, pc}

0801611a <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 801611a:	b480      	push	{r7}
 801611c:	b083      	sub	sp, #12
 801611e:	af00      	add	r7, sp, #0
 8016120:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	4618      	mov	r0, r3
 8016126:	370c      	adds	r7, #12
 8016128:	46bd      	mov	sp, r7
 801612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801612e:	4770      	bx	lr

08016130 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>:
      deallocate(pointer __p, size_type)
 8016130:	b580      	push	{r7, lr}
 8016132:	b084      	sub	sp, #16
 8016134:	af00      	add	r7, sp, #0
 8016136:	60f8      	str	r0, [r7, #12]
 8016138:	60b9      	str	r1, [r7, #8]
 801613a:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 801613c:	68b8      	ldr	r0, [r7, #8]
 801613e:	f009 fbd7 	bl	801f8f0 <_ZdlPv>
      }
 8016142:	bf00      	nop
 8016144:	3710      	adds	r7, #16
 8016146:	46bd      	mov	sp, r7
 8016148:	bd80      	pop	{r7, pc}

0801614a <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _M_tp(std::move(__tp)) { }
 801614a:	b590      	push	{r4, r7, lr}
 801614c:	b083      	sub	sp, #12
 801614e:	af00      	add	r7, sp, #0
 8016150:	6078      	str	r0, [r7, #4]
 8016152:	6039      	str	r1, [r7, #0]
 8016154:	687c      	ldr	r4, [r7, #4]
 8016156:	6838      	ldr	r0, [r7, #0]
 8016158:	f7fd fefe 	bl	8013f58 <_ZSt4moveIRNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 801615c:	4603      	mov	r3, r0
 801615e:	4619      	mov	r1, r3
 8016160:	4620      	mov	r0, r4
 8016162:	f7fd ff04 	bl	8013f6e <_ZNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 8016166:	687b      	ldr	r3, [r7, #4]
 8016168:	4618      	mov	r0, r3
 801616a:	370c      	adds	r7, #12
 801616c:	46bd      	mov	sp, r7
 801616e:	bd90      	pop	{r4, r7, pc}

08016170 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama7ContextEELb1EEC1ERKS2_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 8016170:	b580      	push	{r7, lr}
 8016172:	b082      	sub	sp, #8
 8016174:	af00      	add	r7, sp, #0
 8016176:	6078      	str	r0, [r7, #4]
 8016178:	6039      	str	r1, [r7, #0]
 801617a:	6839      	ldr	r1, [r7, #0]
 801617c:	6878      	ldr	r0, [r7, #4]
 801617e:	f7fd fe75 	bl	8013e6c <_ZNSaIN4tama7ContextEEC1ERKS1_>
 8016182:	687b      	ldr	r3, [r7, #4]
 8016184:	4618      	mov	r0, r3
 8016186:	3708      	adds	r7, #8
 8016188:	46bd      	mov	sp, r7
 801618a:	bd80      	pop	{r7, pc}

0801618c <_ZN4tama7PetDataD1Ev>:
#include "breed/breed.enum.h"
#include "../../pet-db/pet-identifier.h"

namespace tama
{
    class PetData
 801618c:	b580      	push	{r7, lr}
 801618e:	b082      	sub	sp, #8
 8016190:	af00      	add	r7, sp, #0
 8016192:	6078      	str	r0, [r7, #4]
 8016194:	687b      	ldr	r3, [r7, #4]
 8016196:	4618      	mov	r0, r3
 8016198:	f009 fc75 	bl	801fa86 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801619c:	687b      	ldr	r3, [r7, #4]
 801619e:	4618      	mov	r0, r3
 80161a0:	3708      	adds	r7, #8
 80161a2:	46bd      	mov	sp, r7
 80161a4:	bd80      	pop	{r7, pc}

080161a6 <_ZNSt13unordered_mapIN4tama13PetIdentifierENS0_11PetTexturesENS0_5PetDb7hash_fnESt8equal_toIS1_ESaISt4pairIKS1_S2_EEED1Ev>:
    class unordered_map
 80161a6:	b580      	push	{r7, lr}
 80161a8:	b082      	sub	sp, #8
 80161aa:	af00      	add	r7, sp, #0
 80161ac:	6078      	str	r0, [r7, #4]
 80161ae:	687b      	ldr	r3, [r7, #4]
 80161b0:	4618      	mov	r0, r3
 80161b2:	f000 f8f1 	bl	8016398 <_ZNSt10_HashtableIN4tama13PetIdentifierESt4pairIKS1_NS0_11PetTexturesEESaIS5_ENSt8__detail10_Select1stESt8equal_toIS1_ENS0_5PetDb7hash_fnENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb1ELb0ELb1EEEED1Ev>
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	4618      	mov	r0, r3
 80161ba:	3708      	adds	r7, #8
 80161bc:	46bd      	mov	sp, r7
 80161be:	bd80      	pop	{r7, pc}

080161c0 <_ZN4tama5PetDbD1Ev>:

namespace tama
{
    using namespace tama::asset;

    class PetDb
 80161c0:	b580      	push	{r7, lr}
 80161c2:	b082      	sub	sp, #8
 80161c4:	af00      	add	r7, sp, #0
 80161c6:	6078      	str	r0, [r7, #4]
 80161c8:	687b      	ldr	r3, [r7, #4]
 80161ca:	4618      	mov	r0, r3
 80161cc:	f7ff ffeb 	bl	80161a6 <_ZNSt13unordered_mapIN4tama13PetIdentifierENS0_11PetTexturesENS0_5PetDb7hash_fnESt8equal_toIS1_ESaISt4pairIKS1_S2_EEED1Ev>
 80161d0:	687b      	ldr	r3, [r7, #4]
 80161d2:	4618      	mov	r0, r3
 80161d4:	3708      	adds	r7, #8
 80161d6:	46bd      	mov	sp, r7
 80161d8:	bd80      	pop	{r7, pc}

080161da <_ZN4tama9GameStateD1Ev>:
#include "../datetime/Datetime.h"
#include "../../pet-db/PetDb.h"

namespace tama
{
    class GameState
 80161da:	b580      	push	{r7, lr}
 80161dc:	b082      	sub	sp, #8
 80161de:	af00      	add	r7, sp, #0
 80161e0:	6078      	str	r0, [r7, #4]
 80161e2:	687b      	ldr	r3, [r7, #4]
 80161e4:	3354      	adds	r3, #84	; 0x54
 80161e6:	4618      	mov	r0, r3
 80161e8:	f7ff ffea 	bl	80161c0 <_ZN4tama5PetDbD1Ev>
 80161ec:	687b      	ldr	r3, [r7, #4]
 80161ee:	4618      	mov	r0, r3
 80161f0:	f7ff ffcc 	bl	801618c <_ZN4tama7PetDataD1Ev>
 80161f4:	687b      	ldr	r3, [r7, #4]
 80161f6:	4618      	mov	r0, r3
 80161f8:	3708      	adds	r7, #8
 80161fa:	46bd      	mov	sp, r7
 80161fc:	bd80      	pop	{r7, pc}

080161fe <_ZNSt5stackISt10shared_ptrIN4tama5StageEESt5dequeIS3_SaIS3_EEED1Ev>:
    class stack
 80161fe:	b580      	push	{r7, lr}
 8016200:	b082      	sub	sp, #8
 8016202:	af00      	add	r7, sp, #0
 8016204:	6078      	str	r0, [r7, #4]
 8016206:	687b      	ldr	r3, [r7, #4]
 8016208:	4618      	mov	r0, r3
 801620a:	f000 f8d7 	bl	80163bc <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EED1Ev>
 801620e:	687b      	ldr	r3, [r7, #4]
 8016210:	4618      	mov	r0, r3
 8016212:	3708      	adds	r7, #8
 8016214:	46bd      	mov	sp, r7
 8016216:	bd80      	pop	{r7, pc}

08016218 <_ZN4tama7ContextD1Ev>:

namespace tama
{
    class Stage;

    class Context
 8016218:	b580      	push	{r7, lr}
 801621a:	b082      	sub	sp, #8
 801621c:	af00      	add	r7, sp, #0
 801621e:	6078      	str	r0, [r7, #4]
 8016220:	687b      	ldr	r3, [r7, #4]
 8016222:	33b8      	adds	r3, #184	; 0xb8
 8016224:	4618      	mov	r0, r3
 8016226:	f7ef f86c 	bl	8005302 <_ZNSt10shared_ptrIN4tama18TimeMonitorCreatorEED1Ev>
 801622a:	687b      	ldr	r3, [r7, #4]
 801622c:	33b0      	adds	r3, #176	; 0xb0
 801622e:	4618      	mov	r0, r3
 8016230:	f7ef fb39 	bl	80058a6 <_ZNSt10shared_ptrIN4tama11SoundPlayerEED1Ev>
 8016234:	687b      	ldr	r3, [r7, #4]
 8016236:	33a8      	adds	r3, #168	; 0xa8
 8016238:	4618      	mov	r0, r3
 801623a:	f7ed fd51 	bl	8003ce0 <_ZNSt10shared_ptrIN4tama5InputEED1Ev>
 801623e:	687b      	ldr	r3, [r7, #4]
 8016240:	33a0      	adds	r3, #160	; 0xa0
 8016242:	4618      	mov	r0, r3
 8016244:	f7ef fb92 	bl	800596c <_ZNSt10shared_ptrIN4tama13TextureLoaderEED1Ev>
 8016248:	687b      	ldr	r3, [r7, #4]
 801624a:	3378      	adds	r3, #120	; 0x78
 801624c:	4618      	mov	r0, r3
 801624e:	f7ff ffd6 	bl	80161fe <_ZNSt5stackISt10shared_ptrIN4tama5StageEESt5dequeIS3_SaIS3_EEED1Ev>
 8016252:	687b      	ldr	r3, [r7, #4]
 8016254:	4618      	mov	r0, r3
 8016256:	f7ff ffc0 	bl	80161da <_ZN4tama9GameStateD1Ev>
 801625a:	687b      	ldr	r3, [r7, #4]
 801625c:	4618      	mov	r0, r3
 801625e:	3708      	adds	r7, #8
 8016260:	46bd      	mov	sp, r7
 8016262:	bd80      	pop	{r7, pc}

08016264 <_ZN9__gnu_cxx13new_allocatorIN4tama7ContextEE7destroyIS2_EEvPT_>:
	destroy(_Up* __p) { __p->~_Up(); }
 8016264:	b580      	push	{r7, lr}
 8016266:	b082      	sub	sp, #8
 8016268:	af00      	add	r7, sp, #0
 801626a:	6078      	str	r0, [r7, #4]
 801626c:	6039      	str	r1, [r7, #0]
 801626e:	6838      	ldr	r0, [r7, #0]
 8016270:	f7ff ffd2 	bl	8016218 <_ZN4tama7ContextD1Ev>
 8016274:	bf00      	nop
 8016276:	3708      	adds	r7, #8
 8016278:	46bd      	mov	sp, r7
 801627a:	bd80      	pop	{r7, pc}

0801627c <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 801627c:	b480      	push	{r7}
 801627e:	b083      	sub	sp, #12
 8016280:	af00      	add	r7, sp, #0
 8016282:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8016284:	4b03      	ldr	r3, [pc, #12]	; (8016294 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv+0x18>)
 8016286:	4618      	mov	r0, r3
 8016288:	370c      	adds	r7, #12
 801628a:	46bd      	mov	sp, r7
 801628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016290:	4770      	bx	lr
 8016292:	bf00      	nop
 8016294:	0ccccccc 	.word	0x0ccccccc

08016298 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8016298:	b480      	push	{r7}
 801629a:	b083      	sub	sp, #12
 801629c:	af00      	add	r7, sp, #0
 801629e:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 80162a0:	4b03      	ldr	r3, [pc, #12]	; (80162b0 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv+0x18>)
 80162a2:	4618      	mov	r0, r3
 80162a4:	370c      	adds	r7, #12
 80162a6:	46bd      	mov	sp, r7
 80162a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162ac:	4770      	bx	lr
 80162ae:	bf00      	nop
 80162b0:	0ccccccc 	.word	0x0ccccccc

080162b4 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama23Stm32TimeMonitorCreatorENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80162b4:	b480      	push	{r7}
 80162b6:	b083      	sub	sp, #12
 80162b8:	af00      	add	r7, sp, #0
 80162ba:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 80162bc:	4b03      	ldr	r3, [pc, #12]	; (80162cc <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama23Stm32TimeMonitorCreatorENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv+0x18>)
 80162be:	4618      	mov	r0, r3
 80162c0:	370c      	adds	r7, #12
 80162c2:	46bd      	mov	sp, r7
 80162c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162c8:	4770      	bx	lr
 80162ca:	bf00      	nop
 80162cc:	0ccccccc 	.word	0x0ccccccc

080162d0 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80162d0:	b480      	push	{r7}
 80162d2:	b083      	sub	sp, #12
 80162d4:	af00      	add	r7, sp, #0
 80162d6:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 80162d8:	4b03      	ldr	r3, [pc, #12]	; (80162e8 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv+0x18>)
 80162da:	4618      	mov	r0, r3
 80162dc:	370c      	adds	r7, #12
 80162de:	46bd      	mov	sp, r7
 80162e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162e4:	4770      	bx	lr
 80162e6:	bf00      	nop
 80162e8:	0ccccccc 	.word	0x0ccccccc

080162ec <_ZNSt12_Vector_baseIPN4tama7OnInputESaIS2_EE12_Vector_implC1Ev>:
	_Vector_impl()
 80162ec:	b580      	push	{r7, lr}
 80162ee:	b082      	sub	sp, #8
 80162f0:	af00      	add	r7, sp, #0
 80162f2:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 80162f4:	6878      	ldr	r0, [r7, #4]
 80162f6:	f000 f886 	bl	8016406 <_ZNSaIPN4tama7OnInputEEC1Ev>
 80162fa:	687b      	ldr	r3, [r7, #4]
 80162fc:	2200      	movs	r2, #0
 80162fe:	601a      	str	r2, [r3, #0]
 8016300:	687b      	ldr	r3, [r7, #4]
 8016302:	2200      	movs	r2, #0
 8016304:	605a      	str	r2, [r3, #4]
 8016306:	687b      	ldr	r3, [r7, #4]
 8016308:	2200      	movs	r2, #0
 801630a:	609a      	str	r2, [r3, #8]
	{ }
 801630c:	687b      	ldr	r3, [r7, #4]
 801630e:	4618      	mov	r0, r3
 8016310:	3708      	adds	r7, #8
 8016312:	46bd      	mov	sp, r7
 8016314:	bd80      	pop	{r7, pc}

08016316 <_ZNSaIPN4tama7OnInputEED1Ev>:
 8016316:	b580      	push	{r7, lr}
 8016318:	b082      	sub	sp, #8
 801631a:	af00      	add	r7, sp, #0
 801631c:	6078      	str	r0, [r7, #4]
 801631e:	6878      	ldr	r0, [r7, #4]
 8016320:	f000 f87d 	bl	801641e <_ZN9__gnu_cxx13new_allocatorIPN4tama7OnInputEED1Ev>
 8016324:	687b      	ldr	r3, [r7, #4]
 8016326:	4618      	mov	r0, r3
 8016328:	3708      	adds	r7, #8
 801632a:	46bd      	mov	sp, r7
 801632c:	bd80      	pop	{r7, pc}
	...

08016330 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8016330:	b480      	push	{r7}
 8016332:	b083      	sub	sp, #12
 8016334:	af00      	add	r7, sp, #0
 8016336:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8016338:	4b03      	ldr	r3, [pc, #12]	; (8016348 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv+0x18>)
 801633a:	4618      	mov	r0, r3
 801633c:	370c      	adds	r7, #12
 801633e:	46bd      	mov	sp, r7
 8016340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016344:	4770      	bx	lr
 8016346:	bf00      	nop
 8016348:	0ccccccc 	.word	0x0ccccccc

0801634c <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 801634c:	b480      	push	{r7}
 801634e:	b083      	sub	sp, #12
 8016350:	af00      	add	r7, sp, #0
 8016352:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8016354:	4b03      	ldr	r3, [pc, #12]	; (8016364 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv+0x18>)
 8016356:	4618      	mov	r0, r3
 8016358:	370c      	adds	r7, #12
 801635a:	46bd      	mov	sp, r7
 801635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016360:	4770      	bx	lr
 8016362:	bf00      	nop
 8016364:	0ccccccc 	.word	0x0ccccccc

08016368 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKN4tama13PetIdentifierENS3_11PetTexturesEELb1EEEELb1EED1Ev>:
    struct _Hashtable_ebo_helper<_Nm, _Tp, true>
 8016368:	b580      	push	{r7, lr}
 801636a:	b082      	sub	sp, #8
 801636c:	af00      	add	r7, sp, #0
 801636e:	6078      	str	r0, [r7, #4]
 8016370:	6878      	ldr	r0, [r7, #4]
 8016372:	f000 f85f 	bl	8016434 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKN4tama13PetIdentifierENS2_11PetTexturesEELb1EEEED1Ev>
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	4618      	mov	r0, r3
 801637a:	3708      	adds	r7, #8
 801637c:	46bd      	mov	sp, r7
 801637e:	bd80      	pop	{r7, pc}

08016380 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN4tama13PetIdentifierENS3_11PetTexturesEELb1EEEEED1Ev>:
    struct _Hashtable_alloc : private _Hashtable_ebo_helper<0, _NodeAlloc>
 8016380:	b580      	push	{r7, lr}
 8016382:	b082      	sub	sp, #8
 8016384:	af00      	add	r7, sp, #0
 8016386:	6078      	str	r0, [r7, #4]
 8016388:	6878      	ldr	r0, [r7, #4]
 801638a:	f7ff ffed 	bl	8016368 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKN4tama13PetIdentifierENS3_11PetTexturesEELb1EEEELb1EED1Ev>
 801638e:	687b      	ldr	r3, [r7, #4]
 8016390:	4618      	mov	r0, r3
 8016392:	3708      	adds	r7, #8
 8016394:	46bd      	mov	sp, r7
 8016396:	bd80      	pop	{r7, pc}

08016398 <_ZNSt10_HashtableIN4tama13PetIdentifierESt4pairIKS1_NS0_11PetTexturesEESaIS5_ENSt8__detail10_Select1stESt8equal_toIS1_ENS0_5PetDb7hash_fnENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb1ELb0ELb1EEEED1Ev>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8016398:	b580      	push	{r7, lr}
 801639a:	b082      	sub	sp, #8
 801639c:	af00      	add	r7, sp, #0
 801639e:	6078      	str	r0, [r7, #4]
      clear();
 80163a0:	6878      	ldr	r0, [r7, #4]
 80163a2:	f000 f853 	bl	801644c <_ZNSt10_HashtableIN4tama13PetIdentifierESt4pairIKS1_NS0_11PetTexturesEESaIS5_ENSt8__detail10_Select1stESt8equal_toIS1_ENS0_5PetDb7hash_fnENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb1ELb0ELb1EEEE5clearEv>
      _M_deallocate_buckets();
 80163a6:	6878      	ldr	r0, [r7, #4]
 80163a8:	f7ea fffb 	bl	80013a2 <_ZNSt10_HashtableIN4tama13PetIdentifierESt4pairIKS1_NS0_11PetTexturesEESaIS5_ENSt8__detail10_Select1stESt8equal_toIS1_ENS0_5PetDb7hash_fnENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb1ELb0ELb1EEEE21_M_deallocate_bucketsEv>
    }
 80163ac:	6878      	ldr	r0, [r7, #4]
 80163ae:	f7ff ffe7 	bl	8016380 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN4tama13PetIdentifierENS3_11PetTexturesEELb1EEEEED1Ev>
 80163b2:	687b      	ldr	r3, [r7, #4]
 80163b4:	4618      	mov	r0, r3
 80163b6:	3708      	adds	r7, #8
 80163b8:	46bd      	mov	sp, r7
 80163ba:	bd80      	pop	{r7, pc}

080163bc <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EED1Ev>:
      ~deque()
 80163bc:	b580      	push	{r7, lr}
 80163be:	b08a      	sub	sp, #40	; 0x28
 80163c0:	af00      	add	r7, sp, #0
 80163c2:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 80163c4:	f107 0308 	add.w	r3, r7, #8
 80163c8:	6879      	ldr	r1, [r7, #4]
 80163ca:	4618      	mov	r0, r3
 80163cc:	f000 f88c 	bl	80164e8 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE5beginEv>
 80163d0:	f107 0318 	add.w	r3, r7, #24
 80163d4:	6879      	ldr	r1, [r7, #4]
 80163d6:	4618      	mov	r0, r3
 80163d8:	f7ec ff20 	bl	800321c <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE3endEv>
 80163dc:	687b      	ldr	r3, [r7, #4]
 80163de:	4618      	mov	r0, r3
 80163e0:	f7ec ff2b 	bl	800323a <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE19_M_get_Tp_allocatorEv>
 80163e4:	4603      	mov	r3, r0
 80163e6:	f107 0218 	add.w	r2, r7, #24
 80163ea:	f107 0108 	add.w	r1, r7, #8
 80163ee:	6878      	ldr	r0, [r7, #4]
 80163f0:	f000 f889 	bl	8016506 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE15_M_destroy_dataESt15_Deque_iteratorIS3_RS3_PS3_ES9_RKS4_>
 80163f4:	687b      	ldr	r3, [r7, #4]
 80163f6:	4618      	mov	r0, r3
 80163f8:	f000 f854 	bl	80164a4 <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EED1Ev>
 80163fc:	687b      	ldr	r3, [r7, #4]
 80163fe:	4618      	mov	r0, r3
 8016400:	3728      	adds	r7, #40	; 0x28
 8016402:	46bd      	mov	sp, r7
 8016404:	bd80      	pop	{r7, pc}

08016406 <_ZNSaIPN4tama7OnInputEEC1Ev>:
      allocator() throw() { }
 8016406:	b580      	push	{r7, lr}
 8016408:	b082      	sub	sp, #8
 801640a:	af00      	add	r7, sp, #0
 801640c:	6078      	str	r0, [r7, #4]
 801640e:	6878      	ldr	r0, [r7, #4]
 8016410:	f000 f898 	bl	8016544 <_ZN9__gnu_cxx13new_allocatorIPN4tama7OnInputEEC1Ev>
 8016414:	687b      	ldr	r3, [r7, #4]
 8016416:	4618      	mov	r0, r3
 8016418:	3708      	adds	r7, #8
 801641a:	46bd      	mov	sp, r7
 801641c:	bd80      	pop	{r7, pc}

0801641e <_ZN9__gnu_cxx13new_allocatorIPN4tama7OnInputEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 801641e:	b480      	push	{r7}
 8016420:	b083      	sub	sp, #12
 8016422:	af00      	add	r7, sp, #0
 8016424:	6078      	str	r0, [r7, #4]
 8016426:	687b      	ldr	r3, [r7, #4]
 8016428:	4618      	mov	r0, r3
 801642a:	370c      	adds	r7, #12
 801642c:	46bd      	mov	sp, r7
 801642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016432:	4770      	bx	lr

08016434 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKN4tama13PetIdentifierENS2_11PetTexturesEELb1EEEED1Ev>:
      ~allocator() throw() { }
 8016434:	b580      	push	{r7, lr}
 8016436:	b082      	sub	sp, #8
 8016438:	af00      	add	r7, sp, #0
 801643a:	6078      	str	r0, [r7, #4]
 801643c:	6878      	ldr	r0, [r7, #4]
 801643e:	f000 f88c 	bl	801655a <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN4tama13PetIdentifierENS4_11PetTexturesEELb1EEEED1Ev>
 8016442:	687b      	ldr	r3, [r7, #4]
 8016444:	4618      	mov	r0, r3
 8016446:	3708      	adds	r7, #8
 8016448:	46bd      	mov	sp, r7
 801644a:	bd80      	pop	{r7, pc}

0801644c <_ZNSt10_HashtableIN4tama13PetIdentifierESt4pairIKS1_NS0_11PetTexturesEESaIS5_ENSt8__detail10_Select1stESt8equal_toIS1_ENS0_5PetDb7hash_fnENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb1ELb0ELb1EEEE5clearEv>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 801644c:	b580      	push	{r7, lr}
 801644e:	b082      	sub	sp, #8
 8016450:	af00      	add	r7, sp, #0
 8016452:	6078      	str	r0, [r7, #4]
      this->_M_deallocate_nodes(_M_begin());
 8016454:	6878      	ldr	r0, [r7, #4]
 8016456:	f7eb f803 	bl	8001460 <_ZNKSt10_HashtableIN4tama13PetIdentifierESt4pairIKS1_NS0_11PetTexturesEESaIS5_ENSt8__detail10_Select1stESt8equal_toIS1_ENS0_5PetDb7hash_fnENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb1ELb0ELb1EEEE8_M_beginEv>
 801645a:	4603      	mov	r3, r0
 801645c:	4619      	mov	r1, r3
 801645e:	6878      	ldr	r0, [r7, #4]
 8016460:	f000 f886 	bl	8016570 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN4tama13PetIdentifierENS3_11PetTexturesEELb1EEEEE19_M_deallocate_nodesEPS8_>
      __builtin_memset(_M_buckets, 0, _M_bucket_count * sizeof(__bucket_type));
 8016464:	687b      	ldr	r3, [r7, #4]
 8016466:	681a      	ldr	r2, [r3, #0]
 8016468:	687b      	ldr	r3, [r7, #4]
 801646a:	685b      	ldr	r3, [r3, #4]
 801646c:	009b      	lsls	r3, r3, #2
 801646e:	4610      	mov	r0, r2
 8016470:	461a      	mov	r2, r3
 8016472:	2100      	movs	r1, #0
 8016474:	f009 fdfa 	bl	802006c <memset>
      _M_element_count = 0;
 8016478:	687b      	ldr	r3, [r7, #4]
 801647a:	2200      	movs	r2, #0
 801647c:	60da      	str	r2, [r3, #12]
      _M_before_begin._M_nxt = nullptr;
 801647e:	687b      	ldr	r3, [r7, #4]
 8016480:	2200      	movs	r2, #0
 8016482:	609a      	str	r2, [r3, #8]
    }
 8016484:	bf00      	nop
 8016486:	3708      	adds	r7, #8
 8016488:	46bd      	mov	sp, r7
 801648a:	bd80      	pop	{r7, pc}

0801648c <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE11_Deque_implD1Ev>:
      struct _Deque_impl
 801648c:	b580      	push	{r7, lr}
 801648e:	b082      	sub	sp, #8
 8016490:	af00      	add	r7, sp, #0
 8016492:	6078      	str	r0, [r7, #4]
 8016494:	6878      	ldr	r0, [r7, #4]
 8016496:	f7f2 fe1c 	bl	80090d2 <_ZNSaISt10shared_ptrIN4tama5StageEEED1Ev>
 801649a:	687b      	ldr	r3, [r7, #4]
 801649c:	4618      	mov	r0, r3
 801649e:	3708      	adds	r7, #8
 80164a0:	46bd      	mov	sp, r7
 80164a2:	bd80      	pop	{r7, pc}

080164a4 <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 80164a4:	b580      	push	{r7, lr}
 80164a6:	b082      	sub	sp, #8
 80164a8:	af00      	add	r7, sp, #0
 80164aa:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 80164ac:	687b      	ldr	r3, [r7, #4]
 80164ae:	681b      	ldr	r3, [r3, #0]
 80164b0:	2b00      	cmp	r3, #0
 80164b2:	d010      	beq.n	80164d6 <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 80164b4:	687b      	ldr	r3, [r7, #4]
 80164b6:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 80164b8:	687b      	ldr	r3, [r7, #4]
 80164ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 80164bc:	3304      	adds	r3, #4
 80164be:	461a      	mov	r2, r3
 80164c0:	6878      	ldr	r0, [r7, #4]
 80164c2:	f000 f86c 	bl	801659e <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE16_M_destroy_nodesEPPS3_S7_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 80164c6:	687b      	ldr	r3, [r7, #4]
 80164c8:	6819      	ldr	r1, [r3, #0]
 80164ca:	687b      	ldr	r3, [r7, #4]
 80164cc:	685b      	ldr	r3, [r3, #4]
 80164ce:	461a      	mov	r2, r3
 80164d0:	6878      	ldr	r0, [r7, #4]
 80164d2:	f7ec ff84 	bl	80033de <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE17_M_deallocate_mapEPPS3_j>
    }
 80164d6:	687b      	ldr	r3, [r7, #4]
 80164d8:	4618      	mov	r0, r3
 80164da:	f7ff ffd7 	bl	801648c <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE11_Deque_implD1Ev>
 80164de:	687b      	ldr	r3, [r7, #4]
 80164e0:	4618      	mov	r0, r3
 80164e2:	3708      	adds	r7, #8
 80164e4:	46bd      	mov	sp, r7
 80164e6:	bd80      	pop	{r7, pc}

080164e8 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80164e8:	b580      	push	{r7, lr}
 80164ea:	b082      	sub	sp, #8
 80164ec:	af00      	add	r7, sp, #0
 80164ee:	6078      	str	r0, [r7, #4]
 80164f0:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 80164f2:	683b      	ldr	r3, [r7, #0]
 80164f4:	3308      	adds	r3, #8
 80164f6:	4619      	mov	r1, r3
 80164f8:	6878      	ldr	r0, [r7, #4]
 80164fa:	f7ec fea9 	bl	8003250 <_ZNSt15_Deque_iteratorISt10shared_ptrIN4tama5StageEERS3_PS3_EC1ERKS6_>
 80164fe:	6878      	ldr	r0, [r7, #4]
 8016500:	3708      	adds	r7, #8
 8016502:	46bd      	mov	sp, r7
 8016504:	bd80      	pop	{r7, pc}

08016506 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE15_M_destroy_dataESt15_Deque_iteratorIS3_RS3_PS3_ES9_RKS4_>:
      _M_destroy_data(iterator __first, iterator __last,
 8016506:	b580      	push	{r7, lr}
 8016508:	b08c      	sub	sp, #48	; 0x30
 801650a:	af00      	add	r7, sp, #0
 801650c:	60f8      	str	r0, [r7, #12]
 801650e:	60b9      	str	r1, [r7, #8]
 8016510:	607a      	str	r2, [r7, #4]
 8016512:	603b      	str	r3, [r7, #0]
	  _M_destroy_data_aux(__first, __last);
 8016514:	f107 0310 	add.w	r3, r7, #16
 8016518:	68b9      	ldr	r1, [r7, #8]
 801651a:	4618      	mov	r0, r3
 801651c:	f7ec fe98 	bl	8003250 <_ZNSt15_Deque_iteratorISt10shared_ptrIN4tama5StageEERS3_PS3_EC1ERKS6_>
 8016520:	f107 0320 	add.w	r3, r7, #32
 8016524:	6879      	ldr	r1, [r7, #4]
 8016526:	4618      	mov	r0, r3
 8016528:	f7ec fe92 	bl	8003250 <_ZNSt15_Deque_iteratorISt10shared_ptrIN4tama5StageEERS3_PS3_EC1ERKS6_>
 801652c:	f107 0220 	add.w	r2, r7, #32
 8016530:	f107 0310 	add.w	r3, r7, #16
 8016534:	4619      	mov	r1, r3
 8016536:	68f8      	ldr	r0, [r7, #12]
 8016538:	f000 f84b 	bl	80165d2 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE19_M_destroy_data_auxESt15_Deque_iteratorIS3_RS3_PS3_ES9_>
      }
 801653c:	bf00      	nop
 801653e:	3730      	adds	r7, #48	; 0x30
 8016540:	46bd      	mov	sp, r7
 8016542:	bd80      	pop	{r7, pc}

08016544 <_ZN9__gnu_cxx13new_allocatorIPN4tama7OnInputEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8016544:	b480      	push	{r7}
 8016546:	b083      	sub	sp, #12
 8016548:	af00      	add	r7, sp, #0
 801654a:	6078      	str	r0, [r7, #4]
 801654c:	687b      	ldr	r3, [r7, #4]
 801654e:	4618      	mov	r0, r3
 8016550:	370c      	adds	r7, #12
 8016552:	46bd      	mov	sp, r7
 8016554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016558:	4770      	bx	lr

0801655a <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKN4tama13PetIdentifierENS4_11PetTexturesEELb1EEEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 801655a:	b480      	push	{r7}
 801655c:	b083      	sub	sp, #12
 801655e:	af00      	add	r7, sp, #0
 8016560:	6078      	str	r0, [r7, #4]
 8016562:	687b      	ldr	r3, [r7, #4]
 8016564:	4618      	mov	r0, r3
 8016566:	370c      	adds	r7, #12
 8016568:	46bd      	mov	sp, r7
 801656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801656e:	4770      	bx	lr

08016570 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN4tama13PetIdentifierENS3_11PetTexturesEELb1EEEEE19_M_deallocate_nodesEPS8_>:
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_nodes(__node_type* __n)
 8016570:	b580      	push	{r7, lr}
 8016572:	b084      	sub	sp, #16
 8016574:	af00      	add	r7, sp, #0
 8016576:	6078      	str	r0, [r7, #4]
 8016578:	6039      	str	r1, [r7, #0]
      while (__n)
 801657a:	683b      	ldr	r3, [r7, #0]
 801657c:	2b00      	cmp	r3, #0
 801657e:	d00a      	beq.n	8016596 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN4tama13PetIdentifierENS3_11PetTexturesEELb1EEEEE19_M_deallocate_nodesEPS8_+0x26>
	  __node_type* __tmp = __n;
 8016580:	683b      	ldr	r3, [r7, #0]
 8016582:	60fb      	str	r3, [r7, #12]
	  __n = __n->_M_next();
 8016584:	6838      	ldr	r0, [r7, #0]
 8016586:	f7eb f84c 	bl	8001622 <_ZNKSt8__detail10_Hash_nodeISt4pairIKN4tama13PetIdentifierENS2_11PetTexturesEELb1EE7_M_nextEv>
 801658a:	6038      	str	r0, [r7, #0]
	  _M_deallocate_node(__tmp);
 801658c:	68f9      	ldr	r1, [r7, #12]
 801658e:	6878      	ldr	r0, [r7, #4]
 8016590:	f7eb f853 	bl	800163a <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN4tama13PetIdentifierENS3_11PetTexturesEELb1EEEEE18_M_deallocate_nodeEPS8_>
      while (__n)
 8016594:	e7f1      	b.n	801657a <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKN4tama13PetIdentifierENS3_11PetTexturesEELb1EEEEE19_M_deallocate_nodesEPS8_+0xa>
    }
 8016596:	bf00      	nop
 8016598:	3710      	adds	r7, #16
 801659a:	46bd      	mov	sp, r7
 801659c:	bd80      	pop	{r7, pc}

0801659e <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE16_M_destroy_nodesEPPS3_S7_>:
    _Deque_base<_Tp, _Alloc>::
 801659e:	b580      	push	{r7, lr}
 80165a0:	b086      	sub	sp, #24
 80165a2:	af00      	add	r7, sp, #0
 80165a4:	60f8      	str	r0, [r7, #12]
 80165a6:	60b9      	str	r1, [r7, #8]
 80165a8:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 80165aa:	68bb      	ldr	r3, [r7, #8]
 80165ac:	617b      	str	r3, [r7, #20]
 80165ae:	697a      	ldr	r2, [r7, #20]
 80165b0:	687b      	ldr	r3, [r7, #4]
 80165b2:	429a      	cmp	r2, r3
 80165b4:	d209      	bcs.n	80165ca <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE16_M_destroy_nodesEPPS3_S7_+0x2c>
	_M_deallocate_node(*__n);
 80165b6:	697b      	ldr	r3, [r7, #20]
 80165b8:	681b      	ldr	r3, [r3, #0]
 80165ba:	4619      	mov	r1, r3
 80165bc:	68f8      	ldr	r0, [r7, #12]
 80165be:	f7ec ff8b 	bl	80034d8 <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE18_M_deallocate_nodeEPS3_>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 80165c2:	697b      	ldr	r3, [r7, #20]
 80165c4:	3304      	adds	r3, #4
 80165c6:	617b      	str	r3, [r7, #20]
 80165c8:	e7f1      	b.n	80165ae <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE16_M_destroy_nodesEPPS3_S7_+0x10>
    }
 80165ca:	bf00      	nop
 80165cc:	3718      	adds	r7, #24
 80165ce:	46bd      	mov	sp, r7
 80165d0:	bd80      	pop	{r7, pc}

080165d2 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE19_M_destroy_data_auxESt15_Deque_iteratorIS3_RS3_PS3_ES9_>:
     deque<_Tp, _Alloc>::
 80165d2:	b5b0      	push	{r4, r5, r7, lr}
 80165d4:	b086      	sub	sp, #24
 80165d6:	af00      	add	r7, sp, #0
 80165d8:	60f8      	str	r0, [r7, #12]
 80165da:	60b9      	str	r1, [r7, #8]
 80165dc:	607a      	str	r2, [r7, #4]
       for (_Map_pointer __node = __first._M_node + 1;
 80165de:	68bb      	ldr	r3, [r7, #8]
 80165e0:	68db      	ldr	r3, [r3, #12]
 80165e2:	3304      	adds	r3, #4
 80165e4:	617b      	str	r3, [r7, #20]
	    __node < __last._M_node; ++__node)
 80165e6:	687b      	ldr	r3, [r7, #4]
 80165e8:	68db      	ldr	r3, [r3, #12]
 80165ea:	697a      	ldr	r2, [r7, #20]
 80165ec:	429a      	cmp	r2, r3
 80165ee:	d216      	bcs.n	801661e <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE19_M_destroy_data_auxESt15_Deque_iteratorIS3_RS3_PS3_ES9_+0x4c>
	 std::_Destroy(*__node, *__node + _S_buffer_size(),
 80165f0:	697b      	ldr	r3, [r7, #20]
 80165f2:	681d      	ldr	r5, [r3, #0]
 80165f4:	697b      	ldr	r3, [r7, #20]
 80165f6:	681c      	ldr	r4, [r3, #0]
 80165f8:	f000 f846 	bl	8016688 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE14_S_buffer_sizeEv>
 80165fc:	4603      	mov	r3, r0
 80165fe:	00db      	lsls	r3, r3, #3
 8016600:	441c      	add	r4, r3
		       _M_get_Tp_allocator());
 8016602:	68fb      	ldr	r3, [r7, #12]
 8016604:	4618      	mov	r0, r3
 8016606:	f7ec fe18 	bl	800323a <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE19_M_get_Tp_allocatorEv>
 801660a:	4603      	mov	r3, r0
	 std::_Destroy(*__node, *__node + _S_buffer_size(),
 801660c:	461a      	mov	r2, r3
 801660e:	4621      	mov	r1, r4
 8016610:	4628      	mov	r0, r5
 8016612:	f7f2 fcdf 	bl	8008fd4 <_ZSt8_DestroyIPSt10shared_ptrIN4tama5StageEES3_EvT_S5_RSaIT0_E>
       for (_Map_pointer __node = __first._M_node + 1;
 8016616:	697b      	ldr	r3, [r7, #20]
 8016618:	3304      	adds	r3, #4
 801661a:	617b      	str	r3, [r7, #20]
 801661c:	e7e3      	b.n	80165e6 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE19_M_destroy_data_auxESt15_Deque_iteratorIS3_RS3_PS3_ES9_+0x14>
       if (__first._M_node != __last._M_node)
 801661e:	68bb      	ldr	r3, [r7, #8]
 8016620:	68da      	ldr	r2, [r3, #12]
 8016622:	687b      	ldr	r3, [r7, #4]
 8016624:	68db      	ldr	r3, [r3, #12]
 8016626:	429a      	cmp	r2, r3
 8016628:	d01c      	beq.n	8016664 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE19_M_destroy_data_auxESt15_Deque_iteratorIS3_RS3_PS3_ES9_+0x92>
	   std::_Destroy(__first._M_cur, __first._M_last,
 801662a:	68bb      	ldr	r3, [r7, #8]
 801662c:	681c      	ldr	r4, [r3, #0]
 801662e:	68bb      	ldr	r3, [r7, #8]
 8016630:	689d      	ldr	r5, [r3, #8]
			 _M_get_Tp_allocator());
 8016632:	68fb      	ldr	r3, [r7, #12]
 8016634:	4618      	mov	r0, r3
 8016636:	f7ec fe00 	bl	800323a <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE19_M_get_Tp_allocatorEv>
 801663a:	4603      	mov	r3, r0
	   std::_Destroy(__first._M_cur, __first._M_last,
 801663c:	461a      	mov	r2, r3
 801663e:	4629      	mov	r1, r5
 8016640:	4620      	mov	r0, r4
 8016642:	f7f2 fcc7 	bl	8008fd4 <_ZSt8_DestroyIPSt10shared_ptrIN4tama5StageEES3_EvT_S5_RSaIT0_E>
	   std::_Destroy(__last._M_first, __last._M_cur,
 8016646:	687b      	ldr	r3, [r7, #4]
 8016648:	685c      	ldr	r4, [r3, #4]
 801664a:	687b      	ldr	r3, [r7, #4]
 801664c:	681d      	ldr	r5, [r3, #0]
			 _M_get_Tp_allocator());
 801664e:	68fb      	ldr	r3, [r7, #12]
 8016650:	4618      	mov	r0, r3
 8016652:	f7ec fdf2 	bl	800323a <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE19_M_get_Tp_allocatorEv>
 8016656:	4603      	mov	r3, r0
	   std::_Destroy(__last._M_first, __last._M_cur,
 8016658:	461a      	mov	r2, r3
 801665a:	4629      	mov	r1, r5
 801665c:	4620      	mov	r0, r4
 801665e:	f7f2 fcb9 	bl	8008fd4 <_ZSt8_DestroyIPSt10shared_ptrIN4tama5StageEES3_EvT_S5_RSaIT0_E>
     }
 8016662:	e00d      	b.n	8016680 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE19_M_destroy_data_auxESt15_Deque_iteratorIS3_RS3_PS3_ES9_+0xae>
	 std::_Destroy(__first._M_cur, __last._M_cur,
 8016664:	68bb      	ldr	r3, [r7, #8]
 8016666:	681c      	ldr	r4, [r3, #0]
 8016668:	687b      	ldr	r3, [r7, #4]
 801666a:	681d      	ldr	r5, [r3, #0]
		       _M_get_Tp_allocator());
 801666c:	68fb      	ldr	r3, [r7, #12]
 801666e:	4618      	mov	r0, r3
 8016670:	f7ec fde3 	bl	800323a <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE19_M_get_Tp_allocatorEv>
 8016674:	4603      	mov	r3, r0
	 std::_Destroy(__first._M_cur, __last._M_cur,
 8016676:	461a      	mov	r2, r3
 8016678:	4629      	mov	r1, r5
 801667a:	4620      	mov	r0, r4
 801667c:	f7f2 fcaa 	bl	8008fd4 <_ZSt8_DestroyIPSt10shared_ptrIN4tama5StageEES3_EvT_S5_RSaIT0_E>
     }
 8016680:	bf00      	nop
 8016682:	3718      	adds	r7, #24
 8016684:	46bd      	mov	sp, r7
 8016686:	bdb0      	pop	{r4, r5, r7, pc}

08016688 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8016688:	b580      	push	{r7, lr}
 801668a:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 801668c:	2008      	movs	r0, #8
 801668e:	f7ec fad1 	bl	8002c34 <_ZSt16__deque_buf_sizej>
 8016692:	4603      	mov	r3, r0
 8016694:	4618      	mov	r0, r3
 8016696:	bd80      	pop	{r7, pc}

08016698 <_ZNSt15_Sp_counted_ptrIPN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8016698:	b580      	push	{r7, lr}
 801669a:	b082      	sub	sp, #8
 801669c:	af00      	add	r7, sp, #0
 801669e:	6078      	str	r0, [r7, #4]
 80166a0:	4a05      	ldr	r2, [pc, #20]	; (80166b8 <_ZNSt15_Sp_counted_ptrIPN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	601a      	str	r2, [r3, #0]
 80166a6:	687b      	ldr	r3, [r7, #4]
 80166a8:	4618      	mov	r0, r3
 80166aa:	f7ed fbd3 	bl	8003e54 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80166ae:	687b      	ldr	r3, [r7, #4]
 80166b0:	4618      	mov	r0, r3
 80166b2:	3708      	adds	r7, #8
 80166b4:	46bd      	mov	sp, r7
 80166b6:	bd80      	pop	{r7, pc}
 80166b8:	080248c4 	.word	0x080248c4

080166bc <_ZNSt15_Sp_counted_ptrIPN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 80166bc:	b580      	push	{r7, lr}
 80166be:	b082      	sub	sp, #8
 80166c0:	af00      	add	r7, sp, #0
 80166c2:	6078      	str	r0, [r7, #4]
 80166c4:	6878      	ldr	r0, [r7, #4]
 80166c6:	f7ff ffe7 	bl	8016698 <_ZNSt15_Sp_counted_ptrIPN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80166ca:	2110      	movs	r1, #16
 80166cc:	6878      	ldr	r0, [r7, #4]
 80166ce:	f009 f8f4 	bl	801f8ba <_ZdlPvj>
 80166d2:	687b      	ldr	r3, [r7, #4]
 80166d4:	4618      	mov	r0, r3
 80166d6:	3708      	adds	r7, #8
 80166d8:	46bd      	mov	sp, r7
 80166da:	bd80      	pop	{r7, pc}

080166dc <_ZNSt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 80166dc:	b580      	push	{r7, lr}
 80166de:	b082      	sub	sp, #8
 80166e0:	af00      	add	r7, sp, #0
 80166e2:	6078      	str	r0, [r7, #4]
 80166e4:	4a08      	ldr	r2, [pc, #32]	; (8016708 <_ZNSt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev+0x2c>)
 80166e6:	687b      	ldr	r3, [r7, #4]
 80166e8:	601a      	str	r2, [r3, #0]
 80166ea:	687b      	ldr	r3, [r7, #4]
 80166ec:	330c      	adds	r3, #12
 80166ee:	4618      	mov	r0, r3
 80166f0:	f7fe fcfc 	bl	80150ec <_ZNSt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>
 80166f4:	687b      	ldr	r3, [r7, #4]
 80166f6:	4618      	mov	r0, r3
 80166f8:	f7ed fbac 	bl	8003e54 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80166fc:	687b      	ldr	r3, [r7, #4]
 80166fe:	4618      	mov	r0, r3
 8016700:	3708      	adds	r7, #8
 8016702:	46bd      	mov	sp, r7
 8016704:	bd80      	pop	{r7, pc}
 8016706:	bf00      	nop
 8016708:	0802481c 	.word	0x0802481c

0801670c <_ZNSt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
 801670c:	b580      	push	{r7, lr}
 801670e:	b082      	sub	sp, #8
 8016710:	af00      	add	r7, sp, #0
 8016712:	6078      	str	r0, [r7, #4]
 8016714:	6878      	ldr	r0, [r7, #4]
 8016716:	f7ff ffe1 	bl	80166dc <_ZNSt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
 801671a:	2114      	movs	r1, #20
 801671c:	6878      	ldr	r0, [r7, #4]
 801671e:	f009 f8cc 	bl	801f8ba <_ZdlPvj>
 8016722:	687b      	ldr	r3, [r7, #4]
 8016724:	4618      	mov	r0, r3
 8016726:	3708      	adds	r7, #8
 8016728:	46bd      	mov	sp, r7
 801672a:	bd80      	pop	{r7, pc}

0801672c <_ZNSt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      _M_dispose() noexcept
 801672c:	b580      	push	{r7, lr}
 801672e:	b082      	sub	sp, #8
 8016730:	af00      	add	r7, sp, #0
 8016732:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 8016734:	687b      	ldr	r3, [r7, #4]
 8016736:	330c      	adds	r3, #12
 8016738:	4618      	mov	r0, r3
 801673a:	f000 faa7 	bl	8016c8c <_ZNSt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>
 801673e:	4602      	mov	r2, r0
 8016740:	687b      	ldr	r3, [r7, #4]
 8016742:	691b      	ldr	r3, [r3, #16]
 8016744:	4619      	mov	r1, r3
 8016746:	4610      	mov	r0, r2
 8016748:	f7fe fd1f 	bl	801518a <_ZNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>
 801674c:	bf00      	nop
 801674e:	3708      	adds	r7, #8
 8016750:	46bd      	mov	sp, r7
 8016752:	bd80      	pop	{r7, pc}

08016754 <_ZNSt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8016754:	b580      	push	{r7, lr}
 8016756:	b086      	sub	sp, #24
 8016758:	af00      	add	r7, sp, #0
 801675a:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 801675c:	687b      	ldr	r3, [r7, #4]
 801675e:	330c      	adds	r3, #12
 8016760:	4618      	mov	r0, r3
 8016762:	f000 faa0 	bl	8016ca6 <_ZNSt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>
 8016766:	4602      	mov	r2, r0
 8016768:	f107 0314 	add.w	r3, r7, #20
 801676c:	4611      	mov	r1, r2
 801676e:	4618      	mov	r0, r3
 8016770:	f7fe fc54 	bl	801501c <_ZNSaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8016774:	f107 0114 	add.w	r1, r7, #20
 8016778:	f107 030c 	add.w	r3, r7, #12
 801677c:	687a      	ldr	r2, [r7, #4]
 801677e:	4618      	mov	r0, r3
 8016780:	f7ff f98d 	bl	8015a9e <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
	this->~_Sp_counted_deleter();
 8016784:	6878      	ldr	r0, [r7, #4]
 8016786:	f7ff ffa9 	bl	80166dc <_ZNSt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 801678a:	f107 030c 	add.w	r3, r7, #12
 801678e:	4618      	mov	r0, r3
 8016790:	f7fe fc70 	bl	8015074 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	__allocator_type __a(_M_impl._M_alloc());
 8016794:	f107 0314 	add.w	r3, r7, #20
 8016798:	4618      	mov	r0, r3
 801679a:	f7fe fc4c 	bl	8015036 <_ZNSaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
      }
 801679e:	bf00      	nop
 80167a0:	3718      	adds	r7, #24
 80167a2:	46bd      	mov	sp, r7
 80167a4:	bd80      	pop	{r7, pc}

080167a6 <_ZNSt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept
 80167a6:	b480      	push	{r7}
 80167a8:	b083      	sub	sp, #12
 80167aa:	af00      	add	r7, sp, #0
 80167ac:	6078      	str	r0, [r7, #4]
 80167ae:	6039      	str	r1, [r7, #0]
        return nullptr;
 80167b0:	2300      	movs	r3, #0
      }
 80167b2:	4618      	mov	r0, r3
 80167b4:	370c      	adds	r7, #12
 80167b6:	46bd      	mov	sp, r7
 80167b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167bc:	4770      	bx	lr
	...

080167c0 <_ZNSt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 80167c0:	b580      	push	{r7, lr}
 80167c2:	b082      	sub	sp, #8
 80167c4:	af00      	add	r7, sp, #0
 80167c6:	6078      	str	r0, [r7, #4]
 80167c8:	4a08      	ldr	r2, [pc, #32]	; (80167ec <_ZNSt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev+0x2c>)
 80167ca:	687b      	ldr	r3, [r7, #4]
 80167cc:	601a      	str	r2, [r3, #0]
 80167ce:	687b      	ldr	r3, [r7, #4]
 80167d0:	330c      	adds	r3, #12
 80167d2:	4618      	mov	r0, r3
 80167d4:	f7fe fb0c 	bl	8014df0 <_ZNSt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>
 80167d8:	687b      	ldr	r3, [r7, #4]
 80167da:	4618      	mov	r0, r3
 80167dc:	f7ed fb3a 	bl	8003e54 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80167e0:	687b      	ldr	r3, [r7, #4]
 80167e2:	4618      	mov	r0, r3
 80167e4:	3708      	adds	r7, #8
 80167e6:	46bd      	mov	sp, r7
 80167e8:	bd80      	pop	{r7, pc}
 80167ea:	bf00      	nop
 80167ec:	08024838 	.word	0x08024838

080167f0 <_ZNSt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
 80167f0:	b580      	push	{r7, lr}
 80167f2:	b082      	sub	sp, #8
 80167f4:	af00      	add	r7, sp, #0
 80167f6:	6078      	str	r0, [r7, #4]
 80167f8:	6878      	ldr	r0, [r7, #4]
 80167fa:	f7ff ffe1 	bl	80167c0 <_ZNSt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
 80167fe:	2114      	movs	r1, #20
 8016800:	6878      	ldr	r0, [r7, #4]
 8016802:	f009 f85a 	bl	801f8ba <_ZdlPvj>
 8016806:	687b      	ldr	r3, [r7, #4]
 8016808:	4618      	mov	r0, r3
 801680a:	3708      	adds	r7, #8
 801680c:	46bd      	mov	sp, r7
 801680e:	bd80      	pop	{r7, pc}

08016810 <_ZNSt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8016810:	b580      	push	{r7, lr}
 8016812:	b082      	sub	sp, #8
 8016814:	af00      	add	r7, sp, #0
 8016816:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 8016818:	687b      	ldr	r3, [r7, #4]
 801681a:	330c      	adds	r3, #12
 801681c:	4618      	mov	r0, r3
 801681e:	f000 fa50 	bl	8016cc2 <_ZNSt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>
 8016822:	4602      	mov	r2, r0
 8016824:	687b      	ldr	r3, [r7, #4]
 8016826:	691b      	ldr	r3, [r3, #16]
 8016828:	4619      	mov	r1, r3
 801682a:	4610      	mov	r0, r2
 801682c:	f7fe fb2f 	bl	8014e8e <_ZNSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>
 8016830:	bf00      	nop
 8016832:	3708      	adds	r7, #8
 8016834:	46bd      	mov	sp, r7
 8016836:	bd80      	pop	{r7, pc}

08016838 <_ZNSt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8016838:	b580      	push	{r7, lr}
 801683a:	b086      	sub	sp, #24
 801683c:	af00      	add	r7, sp, #0
 801683e:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 8016840:	687b      	ldr	r3, [r7, #4]
 8016842:	330c      	adds	r3, #12
 8016844:	4618      	mov	r0, r3
 8016846:	f000 fa49 	bl	8016cdc <_ZNSt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>
 801684a:	4602      	mov	r2, r0
 801684c:	f107 0314 	add.w	r3, r7, #20
 8016850:	4611      	mov	r1, r2
 8016852:	4618      	mov	r0, r3
 8016854:	f7fe fa64 	bl	8014d20 <_ZNSaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8016858:	f107 0114 	add.w	r1, r7, #20
 801685c:	f107 030c 	add.w	r3, r7, #12
 8016860:	687a      	ldr	r2, [r7, #4]
 8016862:	4618      	mov	r0, r3
 8016864:	f7ff f846 	bl	80158f4 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
	this->~_Sp_counted_deleter();
 8016868:	6878      	ldr	r0, [r7, #4]
 801686a:	f7ff ffa9 	bl	80167c0 <_ZNSt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 801686e:	f107 030c 	add.w	r3, r7, #12
 8016872:	4618      	mov	r0, r3
 8016874:	f7fe fa80 	bl	8014d78 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	__allocator_type __a(_M_impl._M_alloc());
 8016878:	f107 0314 	add.w	r3, r7, #20
 801687c:	4618      	mov	r0, r3
 801687e:	f7fe fa5c 	bl	8014d3a <_ZNSaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
      }
 8016882:	bf00      	nop
 8016884:	3718      	adds	r7, #24
 8016886:	46bd      	mov	sp, r7
 8016888:	bd80      	pop	{r7, pc}

0801688a <_ZNSt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept
 801688a:	b480      	push	{r7}
 801688c:	b083      	sub	sp, #12
 801688e:	af00      	add	r7, sp, #0
 8016890:	6078      	str	r0, [r7, #4]
 8016892:	6039      	str	r1, [r7, #0]
        return nullptr;
 8016894:	2300      	movs	r3, #0
      }
 8016896:	4618      	mov	r0, r3
 8016898:	370c      	adds	r7, #12
 801689a:	46bd      	mov	sp, r7
 801689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168a0:	4770      	bx	lr
	...

080168a4 <_ZNSt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 80168a4:	b580      	push	{r7, lr}
 80168a6:	b082      	sub	sp, #8
 80168a8:	af00      	add	r7, sp, #0
 80168aa:	6078      	str	r0, [r7, #4]
 80168ac:	4a08      	ldr	r2, [pc, #32]	; (80168d0 <_ZNSt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev+0x2c>)
 80168ae:	687b      	ldr	r3, [r7, #4]
 80168b0:	601a      	str	r2, [r3, #0]
 80168b2:	687b      	ldr	r3, [r7, #4]
 80168b4:	330c      	adds	r3, #12
 80168b6:	4618      	mov	r0, r3
 80168b8:	f7fe f91e 	bl	8014af8 <_ZNSt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>
 80168bc:	687b      	ldr	r3, [r7, #4]
 80168be:	4618      	mov	r0, r3
 80168c0:	f7ed fac8 	bl	8003e54 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80168c4:	687b      	ldr	r3, [r7, #4]
 80168c6:	4618      	mov	r0, r3
 80168c8:	3708      	adds	r7, #8
 80168ca:	46bd      	mov	sp, r7
 80168cc:	bd80      	pop	{r7, pc}
 80168ce:	bf00      	nop
 80168d0:	08024854 	.word	0x08024854

080168d4 <_ZNSt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
 80168d4:	b580      	push	{r7, lr}
 80168d6:	b082      	sub	sp, #8
 80168d8:	af00      	add	r7, sp, #0
 80168da:	6078      	str	r0, [r7, #4]
 80168dc:	6878      	ldr	r0, [r7, #4]
 80168de:	f7ff ffe1 	bl	80168a4 <_ZNSt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
 80168e2:	2114      	movs	r1, #20
 80168e4:	6878      	ldr	r0, [r7, #4]
 80168e6:	f008 ffe8 	bl	801f8ba <_ZdlPvj>
 80168ea:	687b      	ldr	r3, [r7, #4]
 80168ec:	4618      	mov	r0, r3
 80168ee:	3708      	adds	r7, #8
 80168f0:	46bd      	mov	sp, r7
 80168f2:	bd80      	pop	{r7, pc}

080168f4 <_ZNSt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      _M_dispose() noexcept
 80168f4:	b580      	push	{r7, lr}
 80168f6:	b082      	sub	sp, #8
 80168f8:	af00      	add	r7, sp, #0
 80168fa:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 80168fc:	687b      	ldr	r3, [r7, #4]
 80168fe:	330c      	adds	r3, #12
 8016900:	4618      	mov	r0, r3
 8016902:	f000 f9f9 	bl	8016cf8 <_ZNSt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>
 8016906:	4602      	mov	r2, r0
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	691b      	ldr	r3, [r3, #16]
 801690c:	4619      	mov	r1, r3
 801690e:	4610      	mov	r0, r2
 8016910:	f7fe f941 	bl	8014b96 <_ZNSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>
 8016914:	bf00      	nop
 8016916:	3708      	adds	r7, #8
 8016918:	46bd      	mov	sp, r7
 801691a:	bd80      	pop	{r7, pc}

0801691c <_ZNSt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      _M_destroy() noexcept
 801691c:	b580      	push	{r7, lr}
 801691e:	b086      	sub	sp, #24
 8016920:	af00      	add	r7, sp, #0
 8016922:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 8016924:	687b      	ldr	r3, [r7, #4]
 8016926:	330c      	adds	r3, #12
 8016928:	4618      	mov	r0, r3
 801692a:	f000 f9f2 	bl	8016d12 <_ZNSt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>
 801692e:	4602      	mov	r2, r0
 8016930:	f107 0314 	add.w	r3, r7, #20
 8016934:	4611      	mov	r1, r2
 8016936:	4618      	mov	r0, r3
 8016938:	f7fe f876 	bl	8014a28 <_ZNSaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 801693c:	f107 0114 	add.w	r1, r7, #20
 8016940:	f107 030c 	add.w	r3, r7, #12
 8016944:	687a      	ldr	r2, [r7, #4]
 8016946:	4618      	mov	r0, r3
 8016948:	f7fe fef5 	bl	8015736 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
	this->~_Sp_counted_deleter();
 801694c:	6878      	ldr	r0, [r7, #4]
 801694e:	f7ff ffa9 	bl	80168a4 <_ZNSt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8016952:	f107 030c 	add.w	r3, r7, #12
 8016956:	4618      	mov	r0, r3
 8016958:	f7fe f892 	bl	8014a80 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	__allocator_type __a(_M_impl._M_alloc());
 801695c:	f107 0314 	add.w	r3, r7, #20
 8016960:	4618      	mov	r0, r3
 8016962:	f7fe f86e 	bl	8014a42 <_ZNSaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
      }
 8016966:	bf00      	nop
 8016968:	3718      	adds	r7, #24
 801696a:	46bd      	mov	sp, r7
 801696c:	bd80      	pop	{r7, pc}

0801696e <_ZNSt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept
 801696e:	b480      	push	{r7}
 8016970:	b083      	sub	sp, #12
 8016972:	af00      	add	r7, sp, #0
 8016974:	6078      	str	r0, [r7, #4]
 8016976:	6039      	str	r1, [r7, #0]
        return nullptr;
 8016978:	2300      	movs	r3, #0
      }
 801697a:	4618      	mov	r0, r3
 801697c:	370c      	adds	r7, #12
 801697e:	46bd      	mov	sp, r7
 8016980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016984:	4770      	bx	lr
	...

08016988 <_ZNSt19_Sp_counted_deleterIPN4tama23Stm32TimeMonitorCreatorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 8016988:	b580      	push	{r7, lr}
 801698a:	b082      	sub	sp, #8
 801698c:	af00      	add	r7, sp, #0
 801698e:	6078      	str	r0, [r7, #4]
 8016990:	4a08      	ldr	r2, [pc, #32]	; (80169b4 <_ZNSt19_Sp_counted_deleterIPN4tama23Stm32TimeMonitorCreatorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev+0x2c>)
 8016992:	687b      	ldr	r3, [r7, #4]
 8016994:	601a      	str	r2, [r3, #0]
 8016996:	687b      	ldr	r3, [r7, #4]
 8016998:	330c      	adds	r3, #12
 801699a:	4618      	mov	r0, r3
 801699c:	f7fd ff54 	bl	8014848 <_ZNSt19_Sp_counted_deleterIPN4tama23Stm32TimeMonitorCreatorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>
 80169a0:	687b      	ldr	r3, [r7, #4]
 80169a2:	4618      	mov	r0, r3
 80169a4:	f7ed fa56 	bl	8003e54 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80169a8:	687b      	ldr	r3, [r7, #4]
 80169aa:	4618      	mov	r0, r3
 80169ac:	3708      	adds	r7, #8
 80169ae:	46bd      	mov	sp, r7
 80169b0:	bd80      	pop	{r7, pc}
 80169b2:	bf00      	nop
 80169b4:	08024870 	.word	0x08024870

080169b8 <_ZNSt19_Sp_counted_deleterIPN4tama23Stm32TimeMonitorCreatorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
 80169b8:	b580      	push	{r7, lr}
 80169ba:	b082      	sub	sp, #8
 80169bc:	af00      	add	r7, sp, #0
 80169be:	6078      	str	r0, [r7, #4]
 80169c0:	6878      	ldr	r0, [r7, #4]
 80169c2:	f7ff ffe1 	bl	8016988 <_ZNSt19_Sp_counted_deleterIPN4tama23Stm32TimeMonitorCreatorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
 80169c6:	2114      	movs	r1, #20
 80169c8:	6878      	ldr	r0, [r7, #4]
 80169ca:	f008 ff76 	bl	801f8ba <_ZdlPvj>
 80169ce:	687b      	ldr	r3, [r7, #4]
 80169d0:	4618      	mov	r0, r3
 80169d2:	3708      	adds	r7, #8
 80169d4:	46bd      	mov	sp, r7
 80169d6:	bd80      	pop	{r7, pc}

080169d8 <_ZNSt19_Sp_counted_deleterIPN4tama23Stm32TimeMonitorCreatorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      _M_dispose() noexcept
 80169d8:	b580      	push	{r7, lr}
 80169da:	b082      	sub	sp, #8
 80169dc:	af00      	add	r7, sp, #0
 80169de:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 80169e0:	687b      	ldr	r3, [r7, #4]
 80169e2:	330c      	adds	r3, #12
 80169e4:	4618      	mov	r0, r3
 80169e6:	f000 f9a2 	bl	8016d2e <_ZNSt19_Sp_counted_deleterIPN4tama23Stm32TimeMonitorCreatorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>
 80169ea:	4602      	mov	r2, r0
 80169ec:	687b      	ldr	r3, [r7, #4]
 80169ee:	691b      	ldr	r3, [r3, #16]
 80169f0:	4619      	mov	r1, r3
 80169f2:	4610      	mov	r0, r2
 80169f4:	f7fd ff77 	bl	80148e6 <_ZNSt12__shared_ptrIN4tama23Stm32TimeMonitorCreatorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>
 80169f8:	bf00      	nop
 80169fa:	3708      	adds	r7, #8
 80169fc:	46bd      	mov	sp, r7
 80169fe:	bd80      	pop	{r7, pc}

08016a00 <_ZNSt19_Sp_counted_deleterIPN4tama23Stm32TimeMonitorCreatorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8016a00:	b580      	push	{r7, lr}
 8016a02:	b086      	sub	sp, #24
 8016a04:	af00      	add	r7, sp, #0
 8016a06:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 8016a08:	687b      	ldr	r3, [r7, #4]
 8016a0a:	330c      	adds	r3, #12
 8016a0c:	4618      	mov	r0, r3
 8016a0e:	f000 f99b 	bl	8016d48 <_ZNSt19_Sp_counted_deleterIPN4tama23Stm32TimeMonitorCreatorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>
 8016a12:	4602      	mov	r2, r0
 8016a14:	f107 0314 	add.w	r3, r7, #20
 8016a18:	4611      	mov	r1, r2
 8016a1a:	4618      	mov	r0, r3
 8016a1c:	f7fd feac 	bl	8014778 <_ZNSaISt19_Sp_counted_deleterIPN4tama23Stm32TimeMonitorCreatorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8016a20:	f107 0114 	add.w	r1, r7, #20
 8016a24:	f107 030c 	add.w	r3, r7, #12
 8016a28:	687a      	ldr	r2, [r7, #4]
 8016a2a:	4618      	mov	r0, r3
 8016a2c:	f7fe fdcf 	bl	80155ce <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama23Stm32TimeMonitorCreatorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
	this->~_Sp_counted_deleter();
 8016a30:	6878      	ldr	r0, [r7, #4]
 8016a32:	f7ff ffa9 	bl	8016988 <_ZNSt19_Sp_counted_deleterIPN4tama23Stm32TimeMonitorCreatorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8016a36:	f107 030c 	add.w	r3, r7, #12
 8016a3a:	4618      	mov	r0, r3
 8016a3c:	f7fd fec8 	bl	80147d0 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama23Stm32TimeMonitorCreatorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	__allocator_type __a(_M_impl._M_alloc());
 8016a40:	f107 0314 	add.w	r3, r7, #20
 8016a44:	4618      	mov	r0, r3
 8016a46:	f7fd fea4 	bl	8014792 <_ZNSaISt19_Sp_counted_deleterIPN4tama23Stm32TimeMonitorCreatorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
      }
 8016a4a:	bf00      	nop
 8016a4c:	3718      	adds	r7, #24
 8016a4e:	46bd      	mov	sp, r7
 8016a50:	bd80      	pop	{r7, pc}

08016a52 <_ZNSt19_Sp_counted_deleterIPN4tama23Stm32TimeMonitorCreatorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept
 8016a52:	b480      	push	{r7}
 8016a54:	b083      	sub	sp, #12
 8016a56:	af00      	add	r7, sp, #0
 8016a58:	6078      	str	r0, [r7, #4]
 8016a5a:	6039      	str	r1, [r7, #0]
        return nullptr;
 8016a5c:	2300      	movs	r3, #0
      }
 8016a5e:	4618      	mov	r0, r3
 8016a60:	370c      	adds	r7, #12
 8016a62:	46bd      	mov	sp, r7
 8016a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a68:	4770      	bx	lr
	...

08016a6c <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 8016a6c:	b580      	push	{r7, lr}
 8016a6e:	b082      	sub	sp, #8
 8016a70:	af00      	add	r7, sp, #0
 8016a72:	6078      	str	r0, [r7, #4]
 8016a74:	4a08      	ldr	r2, [pc, #32]	; (8016a98 <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev+0x2c>)
 8016a76:	687b      	ldr	r3, [r7, #4]
 8016a78:	601a      	str	r2, [r3, #0]
 8016a7a:	687b      	ldr	r3, [r7, #4]
 8016a7c:	330c      	adds	r3, #12
 8016a7e:	4618      	mov	r0, r3
 8016a80:	f7fd fd8a 	bl	8014598 <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>
 8016a84:	687b      	ldr	r3, [r7, #4]
 8016a86:	4618      	mov	r0, r3
 8016a88:	f7ed f9e4 	bl	8003e54 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8016a8c:	687b      	ldr	r3, [r7, #4]
 8016a8e:	4618      	mov	r0, r3
 8016a90:	3708      	adds	r7, #8
 8016a92:	46bd      	mov	sp, r7
 8016a94:	bd80      	pop	{r7, pc}
 8016a96:	bf00      	nop
 8016a98:	0802488c 	.word	0x0802488c

08016a9c <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
 8016a9c:	b580      	push	{r7, lr}
 8016a9e:	b082      	sub	sp, #8
 8016aa0:	af00      	add	r7, sp, #0
 8016aa2:	6078      	str	r0, [r7, #4]
 8016aa4:	6878      	ldr	r0, [r7, #4]
 8016aa6:	f7ff ffe1 	bl	8016a6c <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
 8016aaa:	2114      	movs	r1, #20
 8016aac:	6878      	ldr	r0, [r7, #4]
 8016aae:	f008 ff04 	bl	801f8ba <_ZdlPvj>
 8016ab2:	687b      	ldr	r3, [r7, #4]
 8016ab4:	4618      	mov	r0, r3
 8016ab6:	3708      	adds	r7, #8
 8016ab8:	46bd      	mov	sp, r7
 8016aba:	bd80      	pop	{r7, pc}

08016abc <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8016abc:	b580      	push	{r7, lr}
 8016abe:	b082      	sub	sp, #8
 8016ac0:	af00      	add	r7, sp, #0
 8016ac2:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 8016ac4:	687b      	ldr	r3, [r7, #4]
 8016ac6:	330c      	adds	r3, #12
 8016ac8:	4618      	mov	r0, r3
 8016aca:	f000 f94b 	bl	8016d64 <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>
 8016ace:	4602      	mov	r2, r0
 8016ad0:	687b      	ldr	r3, [r7, #4]
 8016ad2:	691b      	ldr	r3, [r3, #16]
 8016ad4:	4619      	mov	r1, r3
 8016ad6:	4610      	mov	r0, r2
 8016ad8:	f7fd fdad 	bl	8014636 <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>
 8016adc:	bf00      	nop
 8016ade:	3708      	adds	r7, #8
 8016ae0:	46bd      	mov	sp, r7
 8016ae2:	bd80      	pop	{r7, pc}

08016ae4 <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8016ae4:	b580      	push	{r7, lr}
 8016ae6:	b086      	sub	sp, #24
 8016ae8:	af00      	add	r7, sp, #0
 8016aea:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 8016aec:	687b      	ldr	r3, [r7, #4]
 8016aee:	330c      	adds	r3, #12
 8016af0:	4618      	mov	r0, r3
 8016af2:	f000 f944 	bl	8016d7e <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>
 8016af6:	4602      	mov	r2, r0
 8016af8:	f107 0314 	add.w	r3, r7, #20
 8016afc:	4611      	mov	r1, r2
 8016afe:	4618      	mov	r0, r3
 8016b00:	f7fd fce2 	bl	80144c8 <_ZNSaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8016b04:	f107 0114 	add.w	r1, r7, #20
 8016b08:	f107 030c 	add.w	r3, r7, #12
 8016b0c:	687a      	ldr	r2, [r7, #4]
 8016b0e:	4618      	mov	r0, r3
 8016b10:	f7fe fca9 	bl	8015466 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
	this->~_Sp_counted_deleter();
 8016b14:	6878      	ldr	r0, [r7, #4]
 8016b16:	f7ff ffa9 	bl	8016a6c <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8016b1a:	f107 030c 	add.w	r3, r7, #12
 8016b1e:	4618      	mov	r0, r3
 8016b20:	f7fd fcfe 	bl	8014520 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	__allocator_type __a(_M_impl._M_alloc());
 8016b24:	f107 0314 	add.w	r3, r7, #20
 8016b28:	4618      	mov	r0, r3
 8016b2a:	f7fd fcda 	bl	80144e2 <_ZNSaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
      }
 8016b2e:	bf00      	nop
 8016b30:	3718      	adds	r7, #24
 8016b32:	46bd      	mov	sp, r7
 8016b34:	bd80      	pop	{r7, pc}

08016b36 <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept
 8016b36:	b480      	push	{r7}
 8016b38:	b083      	sub	sp, #12
 8016b3a:	af00      	add	r7, sp, #0
 8016b3c:	6078      	str	r0, [r7, #4]
 8016b3e:	6039      	str	r1, [r7, #0]
        return nullptr;
 8016b40:	2300      	movs	r3, #0
      }
 8016b42:	4618      	mov	r0, r3
 8016b44:	370c      	adds	r7, #12
 8016b46:	46bd      	mov	sp, r7
 8016b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b4c:	4770      	bx	lr
	...

08016b50 <_ZNSt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 8016b50:	b580      	push	{r7, lr}
 8016b52:	b082      	sub	sp, #8
 8016b54:	af00      	add	r7, sp, #0
 8016b56:	6078      	str	r0, [r7, #4]
 8016b58:	4a08      	ldr	r2, [pc, #32]	; (8016b7c <_ZNSt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev+0x2c>)
 8016b5a:	687b      	ldr	r3, [r7, #4]
 8016b5c:	601a      	str	r2, [r3, #0]
 8016b5e:	687b      	ldr	r3, [r7, #4]
 8016b60:	330c      	adds	r3, #12
 8016b62:	4618      	mov	r0, r3
 8016b64:	f7fd fba2 	bl	80142ac <_ZNSt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>
 8016b68:	687b      	ldr	r3, [r7, #4]
 8016b6a:	4618      	mov	r0, r3
 8016b6c:	f7ed f972 	bl	8003e54 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8016b70:	687b      	ldr	r3, [r7, #4]
 8016b72:	4618      	mov	r0, r3
 8016b74:	3708      	adds	r7, #8
 8016b76:	46bd      	mov	sp, r7
 8016b78:	bd80      	pop	{r7, pc}
 8016b7a:	bf00      	nop
 8016b7c:	080248a8 	.word	0x080248a8

08016b80 <_ZNSt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
 8016b80:	b580      	push	{r7, lr}
 8016b82:	b082      	sub	sp, #8
 8016b84:	af00      	add	r7, sp, #0
 8016b86:	6078      	str	r0, [r7, #4]
 8016b88:	6878      	ldr	r0, [r7, #4]
 8016b8a:	f7ff ffe1 	bl	8016b50 <_ZNSt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
 8016b8e:	2114      	movs	r1, #20
 8016b90:	6878      	ldr	r0, [r7, #4]
 8016b92:	f008 fe92 	bl	801f8ba <_ZdlPvj>
 8016b96:	687b      	ldr	r3, [r7, #4]
 8016b98:	4618      	mov	r0, r3
 8016b9a:	3708      	adds	r7, #8
 8016b9c:	46bd      	mov	sp, r7
 8016b9e:	bd80      	pop	{r7, pc}

08016ba0 <_ZNSt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8016ba0:	b580      	push	{r7, lr}
 8016ba2:	b082      	sub	sp, #8
 8016ba4:	af00      	add	r7, sp, #0
 8016ba6:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 8016ba8:	687b      	ldr	r3, [r7, #4]
 8016baa:	330c      	adds	r3, #12
 8016bac:	4618      	mov	r0, r3
 8016bae:	f000 f8f4 	bl	8016d9a <_ZNSt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>
 8016bb2:	4602      	mov	r2, r0
 8016bb4:	687b      	ldr	r3, [r7, #4]
 8016bb6:	691b      	ldr	r3, [r3, #16]
 8016bb8:	4619      	mov	r1, r3
 8016bba:	4610      	mov	r0, r2
 8016bbc:	f7fd fbc5 	bl	801434a <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>
 8016bc0:	bf00      	nop
 8016bc2:	3708      	adds	r7, #8
 8016bc4:	46bd      	mov	sp, r7
 8016bc6:	bd80      	pop	{r7, pc}

08016bc8 <_ZNSt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8016bc8:	b580      	push	{r7, lr}
 8016bca:	b086      	sub	sp, #24
 8016bcc:	af00      	add	r7, sp, #0
 8016bce:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 8016bd0:	687b      	ldr	r3, [r7, #4]
 8016bd2:	330c      	adds	r3, #12
 8016bd4:	4618      	mov	r0, r3
 8016bd6:	f000 f8ed 	bl	8016db4 <_ZNSt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>
 8016bda:	4602      	mov	r2, r0
 8016bdc:	f107 0314 	add.w	r3, r7, #20
 8016be0:	4611      	mov	r1, r2
 8016be2:	4618      	mov	r0, r3
 8016be4:	f7fd fafa 	bl	80141dc <_ZNSaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8016be8:	f107 0114 	add.w	r1, r7, #20
 8016bec:	f107 030c 	add.w	r3, r7, #12
 8016bf0:	687a      	ldr	r2, [r7, #4]
 8016bf2:	4618      	mov	r0, r3
 8016bf4:	f7fe fb80 	bl	80152f8 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
	this->~_Sp_counted_deleter();
 8016bf8:	6878      	ldr	r0, [r7, #4]
 8016bfa:	f7ff ffa9 	bl	8016b50 <_ZNSt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8016bfe:	f107 030c 	add.w	r3, r7, #12
 8016c02:	4618      	mov	r0, r3
 8016c04:	f7fd fb16 	bl	8014234 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	__allocator_type __a(_M_impl._M_alloc());
 8016c08:	f107 0314 	add.w	r3, r7, #20
 8016c0c:	4618      	mov	r0, r3
 8016c0e:	f7fd faf2 	bl	80141f6 <_ZNSaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
      }
 8016c12:	bf00      	nop
 8016c14:	3718      	adds	r7, #24
 8016c16:	46bd      	mov	sp, r7
 8016c18:	bd80      	pop	{r7, pc}

08016c1a <_ZNSt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept
 8016c1a:	b480      	push	{r7}
 8016c1c:	b083      	sub	sp, #12
 8016c1e:	af00      	add	r7, sp, #0
 8016c20:	6078      	str	r0, [r7, #4]
 8016c22:	6039      	str	r1, [r7, #0]
        return nullptr;
 8016c24:	2300      	movs	r3, #0
      }
 8016c26:	4618      	mov	r0, r3
 8016c28:	370c      	adds	r7, #12
 8016c2a:	46bd      	mov	sp, r7
 8016c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c30:	4770      	bx	lr

08016c32 <_ZNSt15_Sp_counted_ptrIPN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8016c32:	b590      	push	{r4, r7, lr}
 8016c34:	b083      	sub	sp, #12
 8016c36:	af00      	add	r7, sp, #0
 8016c38:	6078      	str	r0, [r7, #4]
      { delete _M_ptr; }
 8016c3a:	687b      	ldr	r3, [r7, #4]
 8016c3c:	68dc      	ldr	r4, [r3, #12]
 8016c3e:	2c00      	cmp	r4, #0
 8016c40:	d006      	beq.n	8016c50 <_ZNSt15_Sp_counted_ptrIPN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1e>
 8016c42:	4620      	mov	r0, r4
 8016c44:	f7fa fffb 	bl	8011c3e <_ZN4tama11SoundPlayerD1Ev>
 8016c48:	2124      	movs	r1, #36	; 0x24
 8016c4a:	4620      	mov	r0, r4
 8016c4c:	f008 fe35 	bl	801f8ba <_ZdlPvj>
 8016c50:	bf00      	nop
 8016c52:	370c      	adds	r7, #12
 8016c54:	46bd      	mov	sp, r7
 8016c56:	bd90      	pop	{r4, r7, pc}

08016c58 <_ZNSt15_Sp_counted_ptrIPN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8016c58:	b580      	push	{r7, lr}
 8016c5a:	b082      	sub	sp, #8
 8016c5c:	af00      	add	r7, sp, #0
 8016c5e:	6078      	str	r0, [r7, #4]
      { delete this; }
 8016c60:	687b      	ldr	r3, [r7, #4]
 8016c62:	2b00      	cmp	r3, #0
 8016c64:	d002      	beq.n	8016c6c <_ZNSt15_Sp_counted_ptrIPN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x14>
 8016c66:	6878      	ldr	r0, [r7, #4]
 8016c68:	f7ff fd28 	bl	80166bc <_ZNSt15_Sp_counted_ptrIPN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 8016c6c:	bf00      	nop
 8016c6e:	3708      	adds	r7, #8
 8016c70:	46bd      	mov	sp, r7
 8016c72:	bd80      	pop	{r7, pc}

08016c74 <_ZNSt15_Sp_counted_ptrIPN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info&) noexcept
 8016c74:	b480      	push	{r7}
 8016c76:	b083      	sub	sp, #12
 8016c78:	af00      	add	r7, sp, #0
 8016c7a:	6078      	str	r0, [r7, #4]
 8016c7c:	6039      	str	r1, [r7, #0]
      { return nullptr; }
 8016c7e:	2300      	movs	r3, #0
 8016c80:	4618      	mov	r0, r3
 8016c82:	370c      	adds	r7, #12
 8016c84:	46bd      	mov	sp, r7
 8016c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c8a:	4770      	bx	lr

08016c8c <_ZNSt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 8016c8c:	b580      	push	{r7, lr}
 8016c8e:	b082      	sub	sp, #8
 8016c90:	af00      	add	r7, sp, #0
 8016c92:	6078      	str	r0, [r7, #4]
 8016c94:	687b      	ldr	r3, [r7, #4]
 8016c96:	4618      	mov	r0, r3
 8016c98:	f000 f89a 	bl	8016dd0 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>
 8016c9c:	4603      	mov	r3, r0
 8016c9e:	4618      	mov	r0, r3
 8016ca0:	3708      	adds	r7, #8
 8016ca2:	46bd      	mov	sp, r7
 8016ca4:	bd80      	pop	{r7, pc}

08016ca6 <_ZNSt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 8016ca6:	b580      	push	{r7, lr}
 8016ca8:	b082      	sub	sp, #8
 8016caa:	af00      	add	r7, sp, #0
 8016cac:	6078      	str	r0, [r7, #4]
 8016cae:	687b      	ldr	r3, [r7, #4]
 8016cb0:	3301      	adds	r3, #1
 8016cb2:	4618      	mov	r0, r3
 8016cb4:	f000 f897 	bl	8016de6 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama7ContextEELb1EE6_S_getERS3_>
 8016cb8:	4603      	mov	r3, r0
 8016cba:	4618      	mov	r0, r3
 8016cbc:	3708      	adds	r7, #8
 8016cbe:	46bd      	mov	sp, r7
 8016cc0:	bd80      	pop	{r7, pc}

08016cc2 <_ZNSt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 8016cc2:	b580      	push	{r7, lr}
 8016cc4:	b082      	sub	sp, #8
 8016cc6:	af00      	add	r7, sp, #0
 8016cc8:	6078      	str	r0, [r7, #4]
 8016cca:	687b      	ldr	r3, [r7, #4]
 8016ccc:	4618      	mov	r0, r3
 8016cce:	f000 f895 	bl	8016dfc <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>
 8016cd2:	4603      	mov	r3, r0
 8016cd4:	4618      	mov	r0, r3
 8016cd6:	3708      	adds	r7, #8
 8016cd8:	46bd      	mov	sp, r7
 8016cda:	bd80      	pop	{r7, pc}

08016cdc <_ZNSt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 8016cdc:	b580      	push	{r7, lr}
 8016cde:	b082      	sub	sp, #8
 8016ce0:	af00      	add	r7, sp, #0
 8016ce2:	6078      	str	r0, [r7, #4]
 8016ce4:	687b      	ldr	r3, [r7, #4]
 8016ce6:	3301      	adds	r3, #1
 8016ce8:	4618      	mov	r0, r3
 8016cea:	f000 f892 	bl	8016e12 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama10Stm32InputEELb1EE6_S_getERS3_>
 8016cee:	4603      	mov	r3, r0
 8016cf0:	4618      	mov	r0, r3
 8016cf2:	3708      	adds	r7, #8
 8016cf4:	46bd      	mov	sp, r7
 8016cf6:	bd80      	pop	{r7, pc}

08016cf8 <_ZNSt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 8016cf8:	b580      	push	{r7, lr}
 8016cfa:	b082      	sub	sp, #8
 8016cfc:	af00      	add	r7, sp, #0
 8016cfe:	6078      	str	r0, [r7, #4]
 8016d00:	687b      	ldr	r3, [r7, #4]
 8016d02:	4618      	mov	r0, r3
 8016d04:	f000 f890 	bl	8016e28 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>
 8016d08:	4603      	mov	r3, r0
 8016d0a:	4618      	mov	r0, r3
 8016d0c:	3708      	adds	r7, #8
 8016d0e:	46bd      	mov	sp, r7
 8016d10:	bd80      	pop	{r7, pc}

08016d12 <_ZNSt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 8016d12:	b580      	push	{r7, lr}
 8016d14:	b082      	sub	sp, #8
 8016d16:	af00      	add	r7, sp, #0
 8016d18:	6078      	str	r0, [r7, #4]
 8016d1a:	687b      	ldr	r3, [r7, #4]
 8016d1c:	3301      	adds	r3, #1
 8016d1e:	4618      	mov	r0, r3
 8016d20:	f000 f88d 	bl	8016e3e <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama25Stm32SoundPlayingStrategyEELb1EE6_S_getERS3_>
 8016d24:	4603      	mov	r3, r0
 8016d26:	4618      	mov	r0, r3
 8016d28:	3708      	adds	r7, #8
 8016d2a:	46bd      	mov	sp, r7
 8016d2c:	bd80      	pop	{r7, pc}

08016d2e <_ZNSt19_Sp_counted_deleterIPN4tama23Stm32TimeMonitorCreatorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 8016d2e:	b580      	push	{r7, lr}
 8016d30:	b082      	sub	sp, #8
 8016d32:	af00      	add	r7, sp, #0
 8016d34:	6078      	str	r0, [r7, #4]
 8016d36:	687b      	ldr	r3, [r7, #4]
 8016d38:	4618      	mov	r0, r3
 8016d3a:	f000 f88b 	bl	8016e54 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama23Stm32TimeMonitorCreatorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>
 8016d3e:	4603      	mov	r3, r0
 8016d40:	4618      	mov	r0, r3
 8016d42:	3708      	adds	r7, #8
 8016d44:	46bd      	mov	sp, r7
 8016d46:	bd80      	pop	{r7, pc}

08016d48 <_ZNSt19_Sp_counted_deleterIPN4tama23Stm32TimeMonitorCreatorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 8016d48:	b580      	push	{r7, lr}
 8016d4a:	b082      	sub	sp, #8
 8016d4c:	af00      	add	r7, sp, #0
 8016d4e:	6078      	str	r0, [r7, #4]
 8016d50:	687b      	ldr	r3, [r7, #4]
 8016d52:	3301      	adds	r3, #1
 8016d54:	4618      	mov	r0, r3
 8016d56:	f000 f888 	bl	8016e6a <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama23Stm32TimeMonitorCreatorEELb1EE6_S_getERS3_>
 8016d5a:	4603      	mov	r3, r0
 8016d5c:	4618      	mov	r0, r3
 8016d5e:	3708      	adds	r7, #8
 8016d60:	46bd      	mov	sp, r7
 8016d62:	bd80      	pop	{r7, pc}

08016d64 <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 8016d64:	b580      	push	{r7, lr}
 8016d66:	b082      	sub	sp, #8
 8016d68:	af00      	add	r7, sp, #0
 8016d6a:	6078      	str	r0, [r7, #4]
 8016d6c:	687b      	ldr	r3, [r7, #4]
 8016d6e:	4618      	mov	r0, r3
 8016d70:	f000 f886 	bl	8016e80 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>
 8016d74:	4603      	mov	r3, r0
 8016d76:	4618      	mov	r0, r3
 8016d78:	3708      	adds	r7, #8
 8016d7a:	46bd      	mov	sp, r7
 8016d7c:	bd80      	pop	{r7, pc}

08016d7e <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 8016d7e:	b580      	push	{r7, lr}
 8016d80:	b082      	sub	sp, #8
 8016d82:	af00      	add	r7, sp, #0
 8016d84:	6078      	str	r0, [r7, #4]
 8016d86:	687b      	ldr	r3, [r7, #4]
 8016d88:	3301      	adds	r3, #1
 8016d8a:	4618      	mov	r0, r3
 8016d8c:	f000 f883 	bl	8016e96 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama27Nokia5110DisplayDataManagerEELb1EE6_S_getERS3_>
 8016d90:	4603      	mov	r3, r0
 8016d92:	4618      	mov	r0, r3
 8016d94:	3708      	adds	r7, #8
 8016d96:	46bd      	mov	sp, r7
 8016d98:	bd80      	pop	{r7, pc}

08016d9a <_ZNSt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 8016d9a:	b580      	push	{r7, lr}
 8016d9c:	b082      	sub	sp, #8
 8016d9e:	af00      	add	r7, sp, #0
 8016da0:	6078      	str	r0, [r7, #4]
 8016da2:	687b      	ldr	r3, [r7, #4]
 8016da4:	4618      	mov	r0, r3
 8016da6:	f000 f881 	bl	8016eac <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>
 8016daa:	4603      	mov	r3, r0
 8016dac:	4618      	mov	r0, r3
 8016dae:	3708      	adds	r7, #8
 8016db0:	46bd      	mov	sp, r7
 8016db2:	bd80      	pop	{r7, pc}

08016db4 <_ZNSt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 8016db4:	b580      	push	{r7, lr}
 8016db6:	b082      	sub	sp, #8
 8016db8:	af00      	add	r7, sp, #0
 8016dba:	6078      	str	r0, [r7, #4]
 8016dbc:	687b      	ldr	r3, [r7, #4]
 8016dbe:	3301      	adds	r3, #1
 8016dc0:	4618      	mov	r0, r3
 8016dc2:	f000 f87e 	bl	8016ec2 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama18Stm32TextureLoaderEELb1EE6_S_getERS3_>
 8016dc6:	4603      	mov	r3, r0
 8016dc8:	4618      	mov	r0, r3
 8016dca:	3708      	adds	r7, #8
 8016dcc:	46bd      	mov	sp, r7
 8016dce:	bd80      	pop	{r7, pc}

08016dd0 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>:
      _S_get(_Sp_ebo_helper& __eboh)
 8016dd0:	b480      	push	{r7}
 8016dd2:	b083      	sub	sp, #12
 8016dd4:	af00      	add	r7, sp, #0
 8016dd6:	6078      	str	r0, [r7, #4]
      { return __eboh._M_tp; }
 8016dd8:	687b      	ldr	r3, [r7, #4]
 8016dda:	4618      	mov	r0, r3
 8016ddc:	370c      	adds	r7, #12
 8016dde:	46bd      	mov	sp, r7
 8016de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016de4:	4770      	bx	lr

08016de6 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama7ContextEELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 8016de6:	b480      	push	{r7}
 8016de8:	b083      	sub	sp, #12
 8016dea:	af00      	add	r7, sp, #0
 8016dec:	6078      	str	r0, [r7, #4]
 8016dee:	687b      	ldr	r3, [r7, #4]
 8016df0:	4618      	mov	r0, r3
 8016df2:	370c      	adds	r7, #12
 8016df4:	46bd      	mov	sp, r7
 8016df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dfa:	4770      	bx	lr

08016dfc <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>:
      _S_get(_Sp_ebo_helper& __eboh)
 8016dfc:	b480      	push	{r7}
 8016dfe:	b083      	sub	sp, #12
 8016e00:	af00      	add	r7, sp, #0
 8016e02:	6078      	str	r0, [r7, #4]
      { return __eboh._M_tp; }
 8016e04:	687b      	ldr	r3, [r7, #4]
 8016e06:	4618      	mov	r0, r3
 8016e08:	370c      	adds	r7, #12
 8016e0a:	46bd      	mov	sp, r7
 8016e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e10:	4770      	bx	lr

08016e12 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama10Stm32InputEELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 8016e12:	b480      	push	{r7}
 8016e14:	b083      	sub	sp, #12
 8016e16:	af00      	add	r7, sp, #0
 8016e18:	6078      	str	r0, [r7, #4]
 8016e1a:	687b      	ldr	r3, [r7, #4]
 8016e1c:	4618      	mov	r0, r3
 8016e1e:	370c      	adds	r7, #12
 8016e20:	46bd      	mov	sp, r7
 8016e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e26:	4770      	bx	lr

08016e28 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>:
      _S_get(_Sp_ebo_helper& __eboh)
 8016e28:	b480      	push	{r7}
 8016e2a:	b083      	sub	sp, #12
 8016e2c:	af00      	add	r7, sp, #0
 8016e2e:	6078      	str	r0, [r7, #4]
      { return __eboh._M_tp; }
 8016e30:	687b      	ldr	r3, [r7, #4]
 8016e32:	4618      	mov	r0, r3
 8016e34:	370c      	adds	r7, #12
 8016e36:	46bd      	mov	sp, r7
 8016e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e3c:	4770      	bx	lr

08016e3e <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama25Stm32SoundPlayingStrategyEELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 8016e3e:	b480      	push	{r7}
 8016e40:	b083      	sub	sp, #12
 8016e42:	af00      	add	r7, sp, #0
 8016e44:	6078      	str	r0, [r7, #4]
 8016e46:	687b      	ldr	r3, [r7, #4]
 8016e48:	4618      	mov	r0, r3
 8016e4a:	370c      	adds	r7, #12
 8016e4c:	46bd      	mov	sp, r7
 8016e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e52:	4770      	bx	lr

08016e54 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama23Stm32TimeMonitorCreatorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>:
      _S_get(_Sp_ebo_helper& __eboh)
 8016e54:	b480      	push	{r7}
 8016e56:	b083      	sub	sp, #12
 8016e58:	af00      	add	r7, sp, #0
 8016e5a:	6078      	str	r0, [r7, #4]
      { return __eboh._M_tp; }
 8016e5c:	687b      	ldr	r3, [r7, #4]
 8016e5e:	4618      	mov	r0, r3
 8016e60:	370c      	adds	r7, #12
 8016e62:	46bd      	mov	sp, r7
 8016e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e68:	4770      	bx	lr

08016e6a <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama23Stm32TimeMonitorCreatorEELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 8016e6a:	b480      	push	{r7}
 8016e6c:	b083      	sub	sp, #12
 8016e6e:	af00      	add	r7, sp, #0
 8016e70:	6078      	str	r0, [r7, #4]
 8016e72:	687b      	ldr	r3, [r7, #4]
 8016e74:	4618      	mov	r0, r3
 8016e76:	370c      	adds	r7, #12
 8016e78:	46bd      	mov	sp, r7
 8016e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e7e:	4770      	bx	lr

08016e80 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>:
      _S_get(_Sp_ebo_helper& __eboh)
 8016e80:	b480      	push	{r7}
 8016e82:	b083      	sub	sp, #12
 8016e84:	af00      	add	r7, sp, #0
 8016e86:	6078      	str	r0, [r7, #4]
      { return __eboh._M_tp; }
 8016e88:	687b      	ldr	r3, [r7, #4]
 8016e8a:	4618      	mov	r0, r3
 8016e8c:	370c      	adds	r7, #12
 8016e8e:	46bd      	mov	sp, r7
 8016e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e94:	4770      	bx	lr

08016e96 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama27Nokia5110DisplayDataManagerEELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 8016e96:	b480      	push	{r7}
 8016e98:	b083      	sub	sp, #12
 8016e9a:	af00      	add	r7, sp, #0
 8016e9c:	6078      	str	r0, [r7, #4]
 8016e9e:	687b      	ldr	r3, [r7, #4]
 8016ea0:	4618      	mov	r0, r3
 8016ea2:	370c      	adds	r7, #12
 8016ea4:	46bd      	mov	sp, r7
 8016ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016eaa:	4770      	bx	lr

08016eac <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>:
      _S_get(_Sp_ebo_helper& __eboh)
 8016eac:	b480      	push	{r7}
 8016eae:	b083      	sub	sp, #12
 8016eb0:	af00      	add	r7, sp, #0
 8016eb2:	6078      	str	r0, [r7, #4]
      { return __eboh._M_tp; }
 8016eb4:	687b      	ldr	r3, [r7, #4]
 8016eb6:	4618      	mov	r0, r3
 8016eb8:	370c      	adds	r7, #12
 8016eba:	46bd      	mov	sp, r7
 8016ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ec0:	4770      	bx	lr

08016ec2 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama18Stm32TextureLoaderEELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 8016ec2:	b480      	push	{r7}
 8016ec4:	b083      	sub	sp, #12
 8016ec6:	af00      	add	r7, sp, #0
 8016ec8:	6078      	str	r0, [r7, #4]
 8016eca:	687b      	ldr	r3, [r7, #4]
 8016ecc:	4618      	mov	r0, r3
 8016ece:	370c      	adds	r7, #12
 8016ed0:	46bd      	mov	sp, r7
 8016ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ed6:	4770      	bx	lr

08016ed8 <_ZN4tama7DisplayC1Ev>:
#include "PixelColor.h"
#include "display-data/DisplayData.h"

namespace tama
{
    class Display
 8016ed8:	b480      	push	{r7}
 8016eda:	b083      	sub	sp, #12
 8016edc:	af00      	add	r7, sp, #0
 8016ede:	6078      	str	r0, [r7, #4]
 8016ee0:	4a04      	ldr	r2, [pc, #16]	; (8016ef4 <_ZN4tama7DisplayC1Ev+0x1c>)
 8016ee2:	687b      	ldr	r3, [r7, #4]
 8016ee4:	601a      	str	r2, [r3, #0]
 8016ee6:	687b      	ldr	r3, [r7, #4]
 8016ee8:	4618      	mov	r0, r3
 8016eea:	370c      	adds	r7, #12
 8016eec:	46bd      	mov	sp, r7
 8016eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ef2:	4770      	bx	lr
 8016ef4:	08024934 	.word	0x08024934

08016ef8 <_ZN4tama16Nokia5510DisplayC1ERNS_13DisplayConfigE>:
// Created by grzegorz on 3/25/21.
//

#include "Nokia5510Display.h"

tama::Nokia5510Display::Nokia5510Display(DisplayConfig & displayConfig)
 8016ef8:	b5b0      	push	{r4, r5, r7, lr}
 8016efa:	b084      	sub	sp, #16
 8016efc:	af00      	add	r7, sp, #0
 8016efe:	6078      	str	r0, [r7, #4]
 8016f00:	6039      	str	r1, [r7, #0]
 8016f02:	687b      	ldr	r3, [r7, #4]
 8016f04:	4618      	mov	r0, r3
 8016f06:	f7ff ffe7 	bl	8016ed8 <_ZN4tama7DisplayC1Ev>
 8016f0a:	4a32      	ldr	r2, [pc, #200]	; (8016fd4 <_ZN4tama16Nokia5510DisplayC1ERNS_13DisplayConfigE+0xdc>)
 8016f0c:	687b      	ldr	r3, [r7, #4]
 8016f0e:	601a      	str	r2, [r3, #0]
 8016f10:	687b      	ldr	r3, [r7, #4]
 8016f12:	2254      	movs	r2, #84	; 0x54
 8016f14:	629a      	str	r2, [r3, #40]	; 0x28
 8016f16:	687b      	ldr	r3, [r7, #4]
 8016f18:	2230      	movs	r2, #48	; 0x30
 8016f1a:	62da      	str	r2, [r3, #44]	; 0x2c
{
    this->cfg = displayConfig;
 8016f1c:	687b      	ldr	r3, [r7, #4]
 8016f1e:	683a      	ldr	r2, [r7, #0]
 8016f20:	1d1c      	adds	r4, r3, #4
 8016f22:	4615      	mov	r5, r2
 8016f24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016f26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016f28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016f2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016f2c:	682b      	ldr	r3, [r5, #0]
 8016f2e:	6023      	str	r3, [r4, #0]
    HAL_GPIO_WritePin(cfg.reset_port, cfg.reset_pin, GPIO_PIN_RESET);
 8016f30:	687b      	ldr	r3, [r7, #4]
 8016f32:	6898      	ldr	r0, [r3, #8]
 8016f34:	687b      	ldr	r3, [r7, #4]
 8016f36:	899b      	ldrh	r3, [r3, #12]
 8016f38:	2200      	movs	r2, #0
 8016f3a:	4619      	mov	r1, r3
 8016f3c:	f002 fa80 	bl	8019440 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8016f40:	2064      	movs	r0, #100	; 0x64
 8016f42:	f001 ffaf 	bl	8018ea4 <HAL_Delay>
    HAL_GPIO_WritePin(cfg.reset_port, cfg.reset_pin, GPIO_PIN_SET);
 8016f46:	687b      	ldr	r3, [r7, #4]
 8016f48:	6898      	ldr	r0, [r3, #8]
 8016f4a:	687b      	ldr	r3, [r7, #4]
 8016f4c:	899b      	ldrh	r3, [r3, #12]
 8016f4e:	2201      	movs	r2, #1
 8016f50:	4619      	mov	r1, r3
 8016f52:	f002 fa75 	bl	8019440 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(cfg.bl_port, cfg.bl_pin, GPIO_PIN_SET);
 8016f56:	687b      	ldr	r3, [r7, #4]
 8016f58:	6918      	ldr	r0, [r3, #16]
 8016f5a:	687b      	ldr	r3, [r7, #4]
 8016f5c:	8a9b      	ldrh	r3, [r3, #20]
 8016f5e:	2201      	movs	r2, #1
 8016f60:	4619      	mov	r1, r3
 8016f62:	f002 fa6d 	bl	8019440 <HAL_GPIO_WritePin>
    writeCommand(0x21);
 8016f66:	2121      	movs	r1, #33	; 0x21
 8016f68:	6878      	ldr	r0, [r7, #4]
 8016f6a:	f000 f884 	bl	8017076 <_ZN4tama16Nokia5510Display12writeCommandEh>
    writeCommand(0x04);
 8016f6e:	2104      	movs	r1, #4
 8016f70:	6878      	ldr	r0, [r7, #4]
 8016f72:	f000 f880 	bl	8017076 <_ZN4tama16Nokia5510Display12writeCommandEh>
    writeCommand(0x10 | 0x04);
 8016f76:	2114      	movs	r1, #20
 8016f78:	6878      	ldr	r0, [r7, #4]
 8016f7a:	f000 f87c 	bl	8017076 <_ZN4tama16Nokia5510Display12writeCommandEh>
    writeCommand(0x80 | 0x41); //contrast
 8016f7e:	21c1      	movs	r1, #193	; 0xc1
 8016f80:	6878      	ldr	r0, [r7, #4]
 8016f82:	f000 f878 	bl	8017076 <_ZN4tama16Nokia5510Display12writeCommandEh>
    writeCommand(0x20);
 8016f86:	2120      	movs	r1, #32
 8016f88:	6878      	ldr	r0, [r7, #4]
 8016f8a:	f000 f874 	bl	8017076 <_ZN4tama16Nokia5510Display12writeCommandEh>
    writeCommand(0x08 | 0x04);
 8016f8e:	210c      	movs	r1, #12
 8016f90:	6878      	ldr	r0, [r7, #4]
 8016f92:	f000 f870 	bl	8017076 <_ZN4tama16Nokia5510Display12writeCommandEh>
    for (int i = 0; i < 504; i++)
 8016f96:	2300      	movs	r3, #0
 8016f98:	60fb      	str	r3, [r7, #12]
 8016f9a:	68fb      	ldr	r3, [r7, #12]
 8016f9c:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 8016fa0:	da07      	bge.n	8016fb2 <_ZN4tama16Nokia5510DisplayC1ERNS_13DisplayConfigE+0xba>
        displayPixel(0x0);
 8016fa2:	2100      	movs	r1, #0
 8016fa4:	6878      	ldr	r0, [r7, #4]
 8016fa6:	f000 f83d 	bl	8017024 <_ZN4tama16Nokia5510Display12displayPixelEh>
    for (int i = 0; i < 504; i++)
 8016faa:	68fb      	ldr	r3, [r7, #12]
 8016fac:	3301      	adds	r3, #1
 8016fae:	60fb      	str	r3, [r7, #12]
 8016fb0:	e7f3      	b.n	8016f9a <_ZN4tama16Nokia5510DisplayC1ERNS_13DisplayConfigE+0xa2>
    writeCommand(0x20 | 0x00);
 8016fb2:	2120      	movs	r1, #32
 8016fb4:	6878      	ldr	r0, [r7, #4]
 8016fb6:	f000 f85e 	bl	8017076 <_ZN4tama16Nokia5510Display12writeCommandEh>
    writeCommand(0x80 | 0); // Wybˇr kolumny
 8016fba:	2180      	movs	r1, #128	; 0x80
 8016fbc:	6878      	ldr	r0, [r7, #4]
 8016fbe:	f000 f85a 	bl	8017076 <_ZN4tama16Nokia5510Display12writeCommandEh>
    writeCommand(0x40 | 0); // Wybˇr wiersza
 8016fc2:	2140      	movs	r1, #64	; 0x40
 8016fc4:	6878      	ldr	r0, [r7, #4]
 8016fc6:	f000 f856 	bl	8017076 <_ZN4tama16Nokia5510Display12writeCommandEh>
}
 8016fca:	687b      	ldr	r3, [r7, #4]
 8016fcc:	4618      	mov	r0, r3
 8016fce:	3710      	adds	r7, #16
 8016fd0:	46bd      	mov	sp, r7
 8016fd2:	bdb0      	pop	{r4, r5, r7, pc}
 8016fd4:	08024924 	.word	0x08024924

08016fd8 <_ZN4tama16Nokia5510Display11displayDataEv>:

void tama::Nokia5510Display::displayData()
{
 8016fd8:	b480      	push	{r7}
 8016fda:	b083      	sub	sp, #12
 8016fdc:	af00      	add	r7, sp, #0
 8016fde:	6078      	str	r0, [r7, #4]

}
 8016fe0:	bf00      	nop
 8016fe2:	370c      	adds	r7, #12
 8016fe4:	46bd      	mov	sp, r7
 8016fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fea:	4770      	bx	lr

08016fec <_ZN4tama16Nokia5510Display7setDataERNS_11DisplayDataE>:

void tama::Nokia5510Display::setData(DisplayData & pixels)
{
 8016fec:	b580      	push	{r7, lr}
 8016fee:	b084      	sub	sp, #16
 8016ff0:	af00      	add	r7, sp, #0
 8016ff2:	6078      	str	r0, [r7, #4]
 8016ff4:	6039      	str	r1, [r7, #0]


	for (unsigned i = 0; i <504; ++i)
 8016ff6:	2300      	movs	r3, #0
 8016ff8:	60fb      	str	r3, [r7, #12]
 8016ffa:	68fb      	ldr	r3, [r7, #12]
 8016ffc:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 8017000:	d20c      	bcs.n	801701c <_ZN4tama16Nokia5510Display7setDataERNS_11DisplayDataE+0x30>
	{
		displayPixel(((uint8_t *)pixels.data)[i]);
 8017002:	683b      	ldr	r3, [r7, #0]
 8017004:	681a      	ldr	r2, [r3, #0]
 8017006:	68fb      	ldr	r3, [r7, #12]
 8017008:	4413      	add	r3, r2
 801700a:	781b      	ldrb	r3, [r3, #0]
 801700c:	4619      	mov	r1, r3
 801700e:	6878      	ldr	r0, [r7, #4]
 8017010:	f000 f808 	bl	8017024 <_ZN4tama16Nokia5510Display12displayPixelEh>
	for (unsigned i = 0; i <504; ++i)
 8017014:	68fb      	ldr	r3, [r7, #12]
 8017016:	3301      	adds	r3, #1
 8017018:	60fb      	str	r3, [r7, #12]
 801701a:	e7ee      	b.n	8016ffa <_ZN4tama16Nokia5510Display7setDataERNS_11DisplayDataE+0xe>
//
//    HAL_GPIO_WritePin(cfg.dc_port, cfg.dc_pin, GPIO_PIN_SET);
//    HAL_GPIO_WritePin(cfg.ce_port, cfg.ce_pin, GPIO_PIN_RESET);
//    HAL_SPI_Transmit(cfg.spi, ((uint8_t *)pixels.data + 252), 252, 100);
//    HAL_GPIO_WritePin(cfg.ce_port, cfg.ce_pin, GPIO_PIN_SET);
}
 801701c:	bf00      	nop
 801701e:	3710      	adds	r7, #16
 8017020:	46bd      	mov	sp, r7
 8017022:	bd80      	pop	{r7, pc}

08017024 <_ZN4tama16Nokia5510Display12displayPixelEh>:


void tama::Nokia5510Display::displayPixel(uint8_t pixelData)
{
 8017024:	b580      	push	{r7, lr}
 8017026:	b082      	sub	sp, #8
 8017028:	af00      	add	r7, sp, #0
 801702a:	6078      	str	r0, [r7, #4]
 801702c:	460b      	mov	r3, r1
 801702e:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(cfg.dc_port, cfg.dc_pin, GPIO_PIN_SET);
 8017030:	687b      	ldr	r3, [r7, #4]
 8017032:	6998      	ldr	r0, [r3, #24]
 8017034:	687b      	ldr	r3, [r7, #4]
 8017036:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017038:	2201      	movs	r2, #1
 801703a:	4619      	mov	r1, r3
 801703c:	f002 fa00 	bl	8019440 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(cfg.ce_port, cfg.ce_pin, GPIO_PIN_RESET);
 8017040:	687b      	ldr	r3, [r7, #4]
 8017042:	6a18      	ldr	r0, [r3, #32]
 8017044:	687b      	ldr	r3, [r7, #4]
 8017046:	8b9b      	ldrh	r3, [r3, #28]
 8017048:	2200      	movs	r2, #0
 801704a:	4619      	mov	r1, r3
 801704c:	f002 f9f8 	bl	8019440 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(cfg.spi, &pixelData, 1, 100);
 8017050:	687b      	ldr	r3, [r7, #4]
 8017052:	6858      	ldr	r0, [r3, #4]
 8017054:	1cf9      	adds	r1, r7, #3
 8017056:	2364      	movs	r3, #100	; 0x64
 8017058:	2201      	movs	r2, #1
 801705a:	f005 fadb 	bl	801c614 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(cfg.ce_port, cfg.ce_pin, GPIO_PIN_SET);
 801705e:	687b      	ldr	r3, [r7, #4]
 8017060:	6a18      	ldr	r0, [r3, #32]
 8017062:	687b      	ldr	r3, [r7, #4]
 8017064:	8b9b      	ldrh	r3, [r3, #28]
 8017066:	2201      	movs	r2, #1
 8017068:	4619      	mov	r1, r3
 801706a:	f002 f9e9 	bl	8019440 <HAL_GPIO_WritePin>
}
 801706e:	bf00      	nop
 8017070:	3708      	adds	r7, #8
 8017072:	46bd      	mov	sp, r7
 8017074:	bd80      	pop	{r7, pc}

08017076 <_ZN4tama16Nokia5510Display12writeCommandEh>:

void tama::Nokia5510Display::writeCommand(uint8_t cmd)
{
 8017076:	b580      	push	{r7, lr}
 8017078:	b082      	sub	sp, #8
 801707a:	af00      	add	r7, sp, #0
 801707c:	6078      	str	r0, [r7, #4]
 801707e:	460b      	mov	r3, r1
 8017080:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(cfg.dc_port, cfg.dc_pin, GPIO_PIN_RESET);
 8017082:	687b      	ldr	r3, [r7, #4]
 8017084:	6998      	ldr	r0, [r3, #24]
 8017086:	687b      	ldr	r3, [r7, #4]
 8017088:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801708a:	2200      	movs	r2, #0
 801708c:	4619      	mov	r1, r3
 801708e:	f002 f9d7 	bl	8019440 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(cfg.ce_port, cfg.ce_pin, GPIO_PIN_RESET);
 8017092:	687b      	ldr	r3, [r7, #4]
 8017094:	6a18      	ldr	r0, [r3, #32]
 8017096:	687b      	ldr	r3, [r7, #4]
 8017098:	8b9b      	ldrh	r3, [r3, #28]
 801709a:	2200      	movs	r2, #0
 801709c:	4619      	mov	r1, r3
 801709e:	f002 f9cf 	bl	8019440 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(cfg.spi, &cmd, 1, 100);
 80170a2:	687b      	ldr	r3, [r7, #4]
 80170a4:	6858      	ldr	r0, [r3, #4]
 80170a6:	1cf9      	adds	r1, r7, #3
 80170a8:	2364      	movs	r3, #100	; 0x64
 80170aa:	2201      	movs	r2, #1
 80170ac:	f005 fab2 	bl	801c614 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(cfg.ce_port, cfg.ce_pin, GPIO_PIN_SET);
 80170b0:	687b      	ldr	r3, [r7, #4]
 80170b2:	6a18      	ldr	r0, [r3, #32]
 80170b4:	687b      	ldr	r3, [r7, #4]
 80170b6:	8b9b      	ldrh	r3, [r3, #28]
 80170b8:	2201      	movs	r2, #1
 80170ba:	4619      	mov	r1, r3
 80170bc:	f002 f9c0 	bl	8019440 <HAL_GPIO_WritePin>
}
 80170c0:	bf00      	nop
 80170c2:	3708      	adds	r7, #8
 80170c4:	46bd      	mov	sp, r7
 80170c6:	bd80      	pop	{r7, pc}

080170c8 <_ZN4tama10Stm32Input6updateEv>:
#include <gpio.h>
#include "Stm32Input.h"
#include "../../Core/input/button.h"

void tama::Stm32Input::update()
{
 80170c8:	b580      	push	{r7, lr}
 80170ca:	b086      	sub	sp, #24
 80170cc:	af00      	add	r7, sp, #0
 80170ce:	6078      	str	r0, [r7, #4]
    delay++;
 80170d0:	687b      	ldr	r3, [r7, #4]
 80170d2:	695b      	ldr	r3, [r3, #20]
 80170d4:	1c5a      	adds	r2, r3, #1
 80170d6:	687b      	ldr	r3, [r7, #4]
 80170d8:	615a      	str	r2, [r3, #20]
    delay %= 4;
 80170da:	687b      	ldr	r3, [r7, #4]
 80170dc:	695b      	ldr	r3, [r3, #20]
 80170de:	425a      	negs	r2, r3
 80170e0:	f003 0303 	and.w	r3, r3, #3
 80170e4:	f002 0203 	and.w	r2, r2, #3
 80170e8:	bf58      	it	pl
 80170ea:	4253      	negpl	r3, r2
 80170ec:	687a      	ldr	r2, [r7, #4]
 80170ee:	6153      	str	r3, [r2, #20]
    if (HAL_GPIO_ReadPin(BUTTON_C_GPIO_Port, BUTTON_C_Pin) == GPIO_PIN_RESET)
 80170f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80170f4:	4837      	ldr	r0, [pc, #220]	; (80171d4 <_ZN4tama10Stm32Input6updateEv+0x10c>)
 80170f6:	f002 f98b 	bl	8019410 <HAL_GPIO_ReadPin>
 80170fa:	4603      	mov	r3, r0
 80170fc:	2b00      	cmp	r3, #0
 80170fe:	bf0c      	ite	eq
 8017100:	2301      	moveq	r3, #1
 8017102:	2300      	movne	r3, #0
 8017104:	b2db      	uxtb	r3, r3
 8017106:	2b00      	cmp	r3, #0
 8017108:	d002      	beq.n	8017110 <_ZN4tama10Stm32Input6updateEv+0x48>
    {
        button = tama::Button::C;
 801710a:	687b      	ldr	r3, [r7, #4]
 801710c:	2202      	movs	r2, #2
 801710e:	741a      	strb	r2, [r3, #16]
    }
    if (HAL_GPIO_ReadPin(BUTTON_B_GPIO_Port, BUTTON_B_Pin) == GPIO_PIN_RESET)
 8017110:	f44f 7180 	mov.w	r1, #256	; 0x100
 8017114:	482f      	ldr	r0, [pc, #188]	; (80171d4 <_ZN4tama10Stm32Input6updateEv+0x10c>)
 8017116:	f002 f97b 	bl	8019410 <HAL_GPIO_ReadPin>
 801711a:	4603      	mov	r3, r0
 801711c:	2b00      	cmp	r3, #0
 801711e:	bf0c      	ite	eq
 8017120:	2301      	moveq	r3, #1
 8017122:	2300      	movne	r3, #0
 8017124:	b2db      	uxtb	r3, r3
 8017126:	2b00      	cmp	r3, #0
 8017128:	d002      	beq.n	8017130 <_ZN4tama10Stm32Input6updateEv+0x68>
    {
        button = tama::Button::B;
 801712a:	687b      	ldr	r3, [r7, #4]
 801712c:	2201      	movs	r2, #1
 801712e:	741a      	strb	r2, [r3, #16]
    }
    if (HAL_GPIO_ReadPin(BUTTON_A_GPIO_Port, BUTTON_A_Pin) == GPIO_PIN_RESET)
 8017130:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8017134:	4828      	ldr	r0, [pc, #160]	; (80171d8 <_ZN4tama10Stm32Input6updateEv+0x110>)
 8017136:	f002 f96b 	bl	8019410 <HAL_GPIO_ReadPin>
 801713a:	4603      	mov	r3, r0
 801713c:	2b00      	cmp	r3, #0
 801713e:	bf0c      	ite	eq
 8017140:	2301      	moveq	r3, #1
 8017142:	2300      	movne	r3, #0
 8017144:	b2db      	uxtb	r3, r3
 8017146:	2b00      	cmp	r3, #0
 8017148:	d002      	beq.n	8017150 <_ZN4tama10Stm32Input6updateEv+0x88>
    {
        button = tama::Button::A;
 801714a:	687b      	ldr	r3, [r7, #4]
 801714c:	2200      	movs	r2, #0
 801714e:	741a      	strb	r2, [r3, #16]
    }
    // temp
    if (delay % 2 == 0 && button != tama::Button::NONE)
 8017150:	687b      	ldr	r3, [r7, #4]
 8017152:	695b      	ldr	r3, [r3, #20]
 8017154:	f003 0301 	and.w	r3, r3, #1
 8017158:	2b00      	cmp	r3, #0
 801715a:	d137      	bne.n	80171cc <_ZN4tama10Stm32Input6updateEv+0x104>
 801715c:	687b      	ldr	r3, [r7, #4]
 801715e:	7c1b      	ldrb	r3, [r3, #16]
 8017160:	2b03      	cmp	r3, #3
 8017162:	d033      	beq.n	80171cc <_ZN4tama10Stm32Input6updateEv+0x104>
    {
        for (auto listener : listeners)
 8017164:	687b      	ldr	r3, [r7, #4]
 8017166:	3304      	adds	r3, #4
 8017168:	617b      	str	r3, [r7, #20]
 801716a:	6978      	ldr	r0, [r7, #20]
 801716c:	f7eb f8c4 	bl	80022f8 <_ZNSt6vectorIPN4tama7OnInputESaIS2_EE5beginEv>
 8017170:	4603      	mov	r3, r0
 8017172:	60fb      	str	r3, [r7, #12]
 8017174:	6978      	ldr	r0, [r7, #20]
 8017176:	f7eb f93d 	bl	80023f4 <_ZNSt6vectorIPN4tama7OnInputESaIS2_EE3endEv>
 801717a:	4603      	mov	r3, r0
 801717c:	60bb      	str	r3, [r7, #8]
 801717e:	f107 0208 	add.w	r2, r7, #8
 8017182:	f107 030c 	add.w	r3, r7, #12
 8017186:	4611      	mov	r1, r2
 8017188:	4618      	mov	r0, r3
 801718a:	f7eb fb49 	bl	8002820 <_ZN9__gnu_cxxneIPPN4tama7OnInputESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 801718e:	4603      	mov	r3, r0
 8017190:	2b00      	cmp	r3, #0
 8017192:	d018      	beq.n	80171c6 <_ZN4tama10Stm32Input6updateEv+0xfe>
 8017194:	f107 030c 	add.w	r3, r7, #12
 8017198:	4618      	mov	r0, r3
 801719a:	f000 f82f 	bl	80171fc <_ZNK9__gnu_cxx17__normal_iteratorIPPN4tama7OnInputESt6vectorIS3_SaIS3_EEEdeEv>
 801719e:	4603      	mov	r3, r0
 80171a0:	681b      	ldr	r3, [r3, #0]
 80171a2:	613b      	str	r3, [r7, #16]
        {
            if (listener != nullptr)
 80171a4:	693b      	ldr	r3, [r7, #16]
 80171a6:	2b00      	cmp	r3, #0
 80171a8:	d007      	beq.n	80171ba <_ZN4tama10Stm32Input6updateEv+0xf2>
            {
                listener->onInput(button);
 80171aa:	693b      	ldr	r3, [r7, #16]
 80171ac:	681b      	ldr	r3, [r3, #0]
 80171ae:	681b      	ldr	r3, [r3, #0]
 80171b0:	687a      	ldr	r2, [r7, #4]
 80171b2:	7c12      	ldrb	r2, [r2, #16]
 80171b4:	4611      	mov	r1, r2
 80171b6:	6938      	ldr	r0, [r7, #16]
 80171b8:	4798      	blx	r3
        for (auto listener : listeners)
 80171ba:	f107 030c 	add.w	r3, r7, #12
 80171be:	4618      	mov	r0, r3
 80171c0:	f000 f80c 	bl	80171dc <_ZN9__gnu_cxx17__normal_iteratorIPPN4tama7OnInputESt6vectorIS3_SaIS3_EEEppEv>
 80171c4:	e7db      	b.n	801717e <_ZN4tama10Stm32Input6updateEv+0xb6>
            }
        }
        button = tama::Button::NONE;
 80171c6:	687b      	ldr	r3, [r7, #4]
 80171c8:	2203      	movs	r2, #3
 80171ca:	741a      	strb	r2, [r3, #16]
    }
}
 80171cc:	bf00      	nop
 80171ce:	3718      	adds	r7, #24
 80171d0:	46bd      	mov	sp, r7
 80171d2:	bd80      	pop	{r7, pc}
 80171d4:	40020c00 	.word	0x40020c00
 80171d8:	40020400 	.word	0x40020400

080171dc <_ZN9__gnu_cxx17__normal_iteratorIPPN4tama7OnInputESt6vectorIS3_SaIS3_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80171dc:	b480      	push	{r7}
 80171de:	b083      	sub	sp, #12
 80171e0:	af00      	add	r7, sp, #0
 80171e2:	6078      	str	r0, [r7, #4]
	++_M_current;
 80171e4:	687b      	ldr	r3, [r7, #4]
 80171e6:	681b      	ldr	r3, [r3, #0]
 80171e8:	1d1a      	adds	r2, r3, #4
 80171ea:	687b      	ldr	r3, [r7, #4]
 80171ec:	601a      	str	r2, [r3, #0]
	return *this;
 80171ee:	687b      	ldr	r3, [r7, #4]
      }
 80171f0:	4618      	mov	r0, r3
 80171f2:	370c      	adds	r7, #12
 80171f4:	46bd      	mov	sp, r7
 80171f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171fa:	4770      	bx	lr

080171fc <_ZNK9__gnu_cxx17__normal_iteratorIPPN4tama7OnInputESt6vectorIS3_SaIS3_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80171fc:	b480      	push	{r7}
 80171fe:	b083      	sub	sp, #12
 8017200:	af00      	add	r7, sp, #0
 8017202:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8017204:	687b      	ldr	r3, [r7, #4]
 8017206:	681b      	ldr	r3, [r3, #0]
 8017208:	4618      	mov	r0, r3
 801720a:	370c      	adds	r7, #12
 801720c:	46bd      	mov	sp, r7
 801720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017212:	4770      	bx	lr

08017214 <_ZN4tama27Nokia5110DisplayDataManager25getActiveSceneDisplayDataESt10shared_ptrINS_7TextureEE>:
//

#include "Nokia5110DisplayDataManager.h"

tama::DisplayData tama::Nokia5110DisplayDataManager::getActiveSceneDisplayData(std::shared_ptr<Texture> texture)
{
 8017214:	b590      	push	{r4, r7, lr}
 8017216:	b08b      	sub	sp, #44	; 0x2c
 8017218:	af00      	add	r7, sp, #0
 801721a:	60f8      	str	r0, [r7, #12]
 801721c:	60b9      	str	r1, [r7, #8]
 801721e:	607a      	str	r2, [r7, #4]
    uint8_t * data = new uint8_t[dataSize];
 8017220:	68bb      	ldr	r3, [r7, #8]
 8017222:	691b      	ldr	r3, [r3, #16]
 8017224:	4618      	mov	r0, r3
 8017226:	f008 fb46 	bl	801f8b6 <_Znaj>
 801722a:	4603      	mov	r3, r0
 801722c:	61fb      	str	r3, [r7, #28]
    for (unsigned i = 0; i < texture->height; ++i)
 801722e:	2300      	movs	r3, #0
 8017230:	627b      	str	r3, [r7, #36]	; 0x24
 8017232:	6878      	ldr	r0, [r7, #4]
 8017234:	f7ef ff3c 	bl	80070b0 <_ZNKSt19__shared_ptr_accessIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8017238:	4603      	mov	r3, r0
 801723a:	685b      	ldr	r3, [r3, #4]
 801723c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801723e:	429a      	cmp	r2, r3
 8017240:	bf34      	ite	cc
 8017242:	2301      	movcc	r3, #1
 8017244:	2300      	movcs	r3, #0
 8017246:	b2db      	uxtb	r3, r3
 8017248:	2b00      	cmp	r3, #0
 801724a:	d03f      	beq.n	80172cc <_ZN4tama27Nokia5110DisplayDataManager25getActiveSceneDisplayDataESt10shared_ptrINS_7TextureEE+0xb8>
    {
        for (unsigned j = 0; j < texture->width; ++j) //i = 32, j = 60
 801724c:	2300      	movs	r3, #0
 801724e:	623b      	str	r3, [r7, #32]
 8017250:	6878      	ldr	r0, [r7, #4]
 8017252:	f7ef ff2d 	bl	80070b0 <_ZNKSt19__shared_ptr_accessIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8017256:	4603      	mov	r3, r0
 8017258:	681b      	ldr	r3, [r3, #0]
 801725a:	6a3a      	ldr	r2, [r7, #32]
 801725c:	429a      	cmp	r2, r3
 801725e:	bf34      	ite	cc
 8017260:	2301      	movcc	r3, #1
 8017262:	2300      	movcs	r3, #0
 8017264:	b2db      	uxtb	r3, r3
 8017266:	2b00      	cmp	r3, #0
 8017268:	d02c      	beq.n	80172c4 <_ZN4tama27Nokia5110DisplayDataManager25getActiveSceneDisplayDataESt10shared_ptrINS_7TextureEE+0xb0>
        {
            unsigned segmentHeightNumber = i / segmentSize; // 0, 1, .., 7 -> 4
 801726a:	68bb      	ldr	r3, [r7, #8]
 801726c:	685b      	ldr	r3, [r3, #4]
 801726e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017270:	fbb2 f3f3 	udiv	r3, r2, r3
 8017274:	61bb      	str	r3, [r7, #24]
            unsigned bitInSegment = i % segmentSize; // 0 ... 7 -> 0  // 504 = 7 * 48 + 47
 8017276:	68bb      	ldr	r3, [r7, #8]
 8017278:	685a      	ldr	r2, [r3, #4]
 801727a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801727c:	fbb3 f1f2 	udiv	r1, r3, r2
 8017280:	fb02 f201 	mul.w	r2, r2, r1
 8017284:	1a9b      	subs	r3, r3, r2
 8017286:	617b      	str	r3, [r7, #20]
            setPixel(data[segmentHeightNumber * segmentsInWidth + j], bitInSegment, texture->data[i][j]);
 8017288:	68bb      	ldr	r3, [r7, #8]
 801728a:	68db      	ldr	r3, [r3, #12]
 801728c:	69ba      	ldr	r2, [r7, #24]
 801728e:	fb02 f203 	mul.w	r2, r2, r3
 8017292:	6a3b      	ldr	r3, [r7, #32]
 8017294:	4413      	add	r3, r2
 8017296:	69fa      	ldr	r2, [r7, #28]
 8017298:	18d4      	adds	r4, r2, r3
 801729a:	6878      	ldr	r0, [r7, #4]
 801729c:	f7ef ff08 	bl	80070b0 <_ZNKSt19__shared_ptr_accessIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80172a0:	4603      	mov	r3, r0
 80172a2:	689a      	ldr	r2, [r3, #8]
 80172a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172a6:	009b      	lsls	r3, r3, #2
 80172a8:	4413      	add	r3, r2
 80172aa:	681a      	ldr	r2, [r3, #0]
 80172ac:	6a3b      	ldr	r3, [r7, #32]
 80172ae:	4413      	add	r3, r2
 80172b0:	781b      	ldrb	r3, [r3, #0]
 80172b2:	697a      	ldr	r2, [r7, #20]
 80172b4:	4621      	mov	r1, r4
 80172b6:	68b8      	ldr	r0, [r7, #8]
 80172b8:	f000 f817 	bl	80172ea <_ZN4tama27Nokia5110DisplayDataManager8setPixelERhjNS_10PixelColorE>
        for (unsigned j = 0; j < texture->width; ++j) //i = 32, j = 60
 80172bc:	6a3b      	ldr	r3, [r7, #32]
 80172be:	3301      	adds	r3, #1
 80172c0:	623b      	str	r3, [r7, #32]
 80172c2:	e7c5      	b.n	8017250 <_ZN4tama27Nokia5110DisplayDataManager25getActiveSceneDisplayDataESt10shared_ptrINS_7TextureEE+0x3c>
    for (unsigned i = 0; i < texture->height; ++i)
 80172c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172c6:	3301      	adds	r3, #1
 80172c8:	627b      	str	r3, [r7, #36]	; 0x24
 80172ca:	e7b2      	b.n	8017232 <_ZN4tama27Nokia5110DisplayDataManager25getActiveSceneDisplayDataESt10shared_ptrINS_7TextureEE+0x1e>
        }
    }
    return DisplayData{data, dataSize, dataFragmentSize};
 80172cc:	68fb      	ldr	r3, [r7, #12]
 80172ce:	69fa      	ldr	r2, [r7, #28]
 80172d0:	601a      	str	r2, [r3, #0]
 80172d2:	68bb      	ldr	r3, [r7, #8]
 80172d4:	691a      	ldr	r2, [r3, #16]
 80172d6:	68fb      	ldr	r3, [r7, #12]
 80172d8:	605a      	str	r2, [r3, #4]
 80172da:	68bb      	ldr	r3, [r7, #8]
 80172dc:	695a      	ldr	r2, [r3, #20]
 80172de:	68fb      	ldr	r3, [r7, #12]
 80172e0:	609a      	str	r2, [r3, #8]
}
 80172e2:	68f8      	ldr	r0, [r7, #12]
 80172e4:	372c      	adds	r7, #44	; 0x2c
 80172e6:	46bd      	mov	sp, r7
 80172e8:	bd90      	pop	{r4, r7, pc}

080172ea <_ZN4tama27Nokia5110DisplayDataManager8setPixelERhjNS_10PixelColorE>:

void tama::Nokia5110DisplayDataManager::setPixel(uint8_t & pixelSegment, unsigned position, tama::PixelColor color)
{
 80172ea:	b480      	push	{r7}
 80172ec:	b085      	sub	sp, #20
 80172ee:	af00      	add	r7, sp, #0
 80172f0:	60f8      	str	r0, [r7, #12]
 80172f2:	60b9      	str	r1, [r7, #8]
 80172f4:	607a      	str	r2, [r7, #4]
 80172f6:	70fb      	strb	r3, [r7, #3]
    if (color == PixelColor::BLACK)
 80172f8:	78fb      	ldrb	r3, [r7, #3]
 80172fa:	2b01      	cmp	r3, #1
 80172fc:	d10d      	bne.n	801731a <_ZN4tama27Nokia5110DisplayDataManager8setPixelERhjNS_10PixelColorE+0x30>
    {
       pixelSegment |= 1 << position;
 80172fe:	68bb      	ldr	r3, [r7, #8]
 8017300:	781b      	ldrb	r3, [r3, #0]
 8017302:	b25a      	sxtb	r2, r3
 8017304:	2101      	movs	r1, #1
 8017306:	687b      	ldr	r3, [r7, #4]
 8017308:	fa01 f303 	lsl.w	r3, r1, r3
 801730c:	b25b      	sxtb	r3, r3
 801730e:	4313      	orrs	r3, r2
 8017310:	b25b      	sxtb	r3, r3
 8017312:	b2da      	uxtb	r2, r3
 8017314:	68bb      	ldr	r3, [r7, #8]
 8017316:	701a      	strb	r2, [r3, #0]
    } else {
        pixelSegment &= ~(1 << position);
    }
}
 8017318:	e00e      	b.n	8017338 <_ZN4tama27Nokia5110DisplayDataManager8setPixelERhjNS_10PixelColorE+0x4e>
        pixelSegment &= ~(1 << position);
 801731a:	68bb      	ldr	r3, [r7, #8]
 801731c:	781b      	ldrb	r3, [r3, #0]
 801731e:	b25a      	sxtb	r2, r3
 8017320:	2101      	movs	r1, #1
 8017322:	687b      	ldr	r3, [r7, #4]
 8017324:	fa01 f303 	lsl.w	r3, r1, r3
 8017328:	b25b      	sxtb	r3, r3
 801732a:	43db      	mvns	r3, r3
 801732c:	b25b      	sxtb	r3, r3
 801732e:	4013      	ands	r3, r2
 8017330:	b25b      	sxtb	r3, r3
 8017332:	b2da      	uxtb	r2, r3
 8017334:	68bb      	ldr	r3, [r7, #8]
 8017336:	701a      	strb	r2, [r3, #0]
}
 8017338:	bf00      	nop
 801733a:	3714      	adds	r7, #20
 801733c:	46bd      	mov	sp, r7
 801733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017342:	4770      	bx	lr

08017344 <_ZN4tama7Texture7setDataEPPNS_10PixelColorE>:
                    }
                }
            }
        }

        void setData(PixelColor ** d)
 8017344:	b580      	push	{r7, lr}
 8017346:	b082      	sub	sp, #8
 8017348:	af00      	add	r7, sp, #0
 801734a:	6078      	str	r0, [r7, #4]
 801734c:	6039      	str	r1, [r7, #0]
        {
            deleteTextureData();
 801734e:	6878      	ldr	r0, [r7, #4]
 8017350:	f7f7 fd1e 	bl	800ed90 <_ZN4tama7Texture17deleteTextureDataEv>
            this->data = d;
 8017354:	687b      	ldr	r3, [r7, #4]
 8017356:	683a      	ldr	r2, [r7, #0]
 8017358:	609a      	str	r2, [r3, #8]
        }
 801735a:	bf00      	nop
 801735c:	3708      	adds	r7, #8
 801735e:	46bd      	mov	sp, r7
 8017360:	bd80      	pop	{r7, pc}

08017362 <_ZN4tama18Stm32TextureLoader4loadERKNS_12TextureAssetE>:
//

#include "Stm32TextureLoader.h"

std::shared_ptr<tama::Texture> tama::Stm32TextureLoader::load(const TextureAsset & textureAsset)
{
 8017362:	b590      	push	{r4, r7, lr}
 8017364:	b089      	sub	sp, #36	; 0x24
 8017366:	af00      	add	r7, sp, #0
 8017368:	60f8      	str	r0, [r7, #12]
 801736a:	60b9      	str	r1, [r7, #8]
 801736c:	607a      	str	r2, [r7, #4]
    std::shared_ptr<Texture> texture = std::make_shared<Texture>(textureAsset.width, textureAsset.height);
 801736e:	687b      	ldr	r3, [r7, #4]
 8017370:	1d19      	adds	r1, r3, #4
 8017372:	687b      	ldr	r3, [r7, #4]
 8017374:	f103 0208 	add.w	r2, r3, #8
 8017378:	68fb      	ldr	r3, [r7, #12]
 801737a:	4618      	mov	r0, r3
 801737c:	f000 f897 	bl	80174ae <_ZSt11make_sharedIN4tama7TextureEJRKjS3_EESt10shared_ptrIT_EDpOT0_>
    PixelColor ** textureData = createEmptyTextureData(textureAsset.width, textureAsset.height);
 8017380:	687b      	ldr	r3, [r7, #4]
 8017382:	6859      	ldr	r1, [r3, #4]
 8017384:	687b      	ldr	r3, [r7, #4]
 8017386:	689b      	ldr	r3, [r3, #8]
 8017388:	461a      	mov	r2, r3
 801738a:	68b8      	ldr	r0, [r7, #8]
 801738c:	f000 f856 	bl	801743c <_ZN4tama18Stm32TextureLoader22createEmptyTextureDataEjj>
 8017390:	6178      	str	r0, [r7, #20]

    for (unsigned i = 0; i < textureAsset.height; ++i)
 8017392:	2300      	movs	r3, #0
 8017394:	61fb      	str	r3, [r7, #28]
 8017396:	687b      	ldr	r3, [r7, #4]
 8017398:	689b      	ldr	r3, [r3, #8]
 801739a:	69fa      	ldr	r2, [r7, #28]
 801739c:	429a      	cmp	r2, r3
 801739e:	d227      	bcs.n	80173f0 <_ZN4tama18Stm32TextureLoader4loadERKNS_12TextureAssetE+0x8e>
    {
        for (unsigned j = 0; j < textureAsset.width; ++j)
 80173a0:	2300      	movs	r3, #0
 80173a2:	61bb      	str	r3, [r7, #24]
 80173a4:	687b      	ldr	r3, [r7, #4]
 80173a6:	685b      	ldr	r3, [r3, #4]
 80173a8:	69ba      	ldr	r2, [r7, #24]
 80173aa:	429a      	cmp	r2, r3
 80173ac:	d21c      	bcs.n	80173e8 <_ZN4tama18Stm32TextureLoader4loadERKNS_12TextureAssetE+0x86>
        {
            textureData[i][j] = colorFromData(textureAsset.data[i * textureAsset.width + j]);
 80173ae:	687b      	ldr	r3, [r7, #4]
 80173b0:	681a      	ldr	r2, [r3, #0]
 80173b2:	687b      	ldr	r3, [r7, #4]
 80173b4:	685b      	ldr	r3, [r3, #4]
 80173b6:	69f9      	ldr	r1, [r7, #28]
 80173b8:	fb01 f103 	mul.w	r1, r1, r3
 80173bc:	69bb      	ldr	r3, [r7, #24]
 80173be:	440b      	add	r3, r1
 80173c0:	005b      	lsls	r3, r3, #1
 80173c2:	4413      	add	r3, r2
 80173c4:	f9b3 1000 	ldrsh.w	r1, [r3]
 80173c8:	69fb      	ldr	r3, [r7, #28]
 80173ca:	009b      	lsls	r3, r3, #2
 80173cc:	697a      	ldr	r2, [r7, #20]
 80173ce:	4413      	add	r3, r2
 80173d0:	681a      	ldr	r2, [r3, #0]
 80173d2:	69bb      	ldr	r3, [r7, #24]
 80173d4:	18d4      	adds	r4, r2, r3
 80173d6:	68b8      	ldr	r0, [r7, #8]
 80173d8:	f000 f817 	bl	801740a <_ZN4tama18Stm32TextureLoader13colorFromDataEs>
 80173dc:	4603      	mov	r3, r0
 80173de:	7023      	strb	r3, [r4, #0]
        for (unsigned j = 0; j < textureAsset.width; ++j)
 80173e0:	69bb      	ldr	r3, [r7, #24]
 80173e2:	3301      	adds	r3, #1
 80173e4:	61bb      	str	r3, [r7, #24]
 80173e6:	e7dd      	b.n	80173a4 <_ZN4tama18Stm32TextureLoader4loadERKNS_12TextureAssetE+0x42>
    for (unsigned i = 0; i < textureAsset.height; ++i)
 80173e8:	69fb      	ldr	r3, [r7, #28]
 80173ea:	3301      	adds	r3, #1
 80173ec:	61fb      	str	r3, [r7, #28]
 80173ee:	e7d2      	b.n	8017396 <_ZN4tama18Stm32TextureLoader4loadERKNS_12TextureAssetE+0x34>
        }
    }

    texture->setData(textureData);
 80173f0:	68f8      	ldr	r0, [r7, #12]
 80173f2:	f7ef fe5d 	bl	80070b0 <_ZNKSt19__shared_ptr_accessIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80173f6:	4603      	mov	r3, r0
 80173f8:	6979      	ldr	r1, [r7, #20]
 80173fa:	4618      	mov	r0, r3
 80173fc:	f7ff ffa2 	bl	8017344 <_ZN4tama7Texture7setDataEPPNS_10PixelColorE>

    return texture;
 8017400:	bf00      	nop
}
 8017402:	68f8      	ldr	r0, [r7, #12]
 8017404:	3724      	adds	r7, #36	; 0x24
 8017406:	46bd      	mov	sp, r7
 8017408:	bd90      	pop	{r4, r7, pc}

0801740a <_ZN4tama18Stm32TextureLoader13colorFromDataEs>:

tama::PixelColor tama::Stm32TextureLoader::colorFromData(short data)
{
 801740a:	b480      	push	{r7}
 801740c:	b083      	sub	sp, #12
 801740e:	af00      	add	r7, sp, #0
 8017410:	6078      	str	r0, [r7, #4]
 8017412:	460b      	mov	r3, r1
 8017414:	807b      	strh	r3, [r7, #2]
    if (data == 15)
 8017416:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801741a:	2b0f      	cmp	r3, #15
 801741c:	d101      	bne.n	8017422 <_ZN4tama18Stm32TextureLoader13colorFromDataEs+0x18>
    {
        return PixelColor::WHITE;
 801741e:	2300      	movs	r3, #0
 8017420:	e006      	b.n	8017430 <_ZN4tama18Stm32TextureLoader13colorFromDataEs+0x26>
    } else if (data == 0)
 8017422:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8017426:	2b00      	cmp	r3, #0
 8017428:	d101      	bne.n	801742e <_ZN4tama18Stm32TextureLoader13colorFromDataEs+0x24>
    {
        return PixelColor::BLACK;
 801742a:	2301      	movs	r3, #1
 801742c:	e000      	b.n	8017430 <_ZN4tama18Stm32TextureLoader13colorFromDataEs+0x26>
    }
    return PixelColor::TRANSPARENT;
 801742e:	2302      	movs	r3, #2
}
 8017430:	4618      	mov	r0, r3
 8017432:	370c      	adds	r7, #12
 8017434:	46bd      	mov	sp, r7
 8017436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801743a:	4770      	bx	lr

0801743c <_ZN4tama18Stm32TextureLoader22createEmptyTextureDataEjj>:

tama::PixelColor ** tama::Stm32TextureLoader::createEmptyTextureData(unsigned int width, unsigned int height)
{
 801743c:	b590      	push	{r4, r7, lr}
 801743e:	b087      	sub	sp, #28
 8017440:	af00      	add	r7, sp, #0
 8017442:	60f8      	str	r0, [r7, #12]
 8017444:	60b9      	str	r1, [r7, #8]
 8017446:	607a      	str	r2, [r7, #4]
    PixelColor ** textureData = new PixelColor*[height];
 8017448:	687b      	ldr	r3, [r7, #4]
 801744a:	4a12      	ldr	r2, [pc, #72]	; (8017494 <_ZN4tama18Stm32TextureLoader22createEmptyTextureDataEjj+0x58>)
 801744c:	4293      	cmp	r3, r2
 801744e:	d801      	bhi.n	8017454 <_ZN4tama18Stm32TextureLoader22createEmptyTextureDataEjj+0x18>
 8017450:	009b      	lsls	r3, r3, #2
 8017452:	e001      	b.n	8017458 <_ZN4tama18Stm32TextureLoader22createEmptyTextureDataEjj+0x1c>
 8017454:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017458:	4618      	mov	r0, r3
 801745a:	f008 fa2c 	bl	801f8b6 <_Znaj>
 801745e:	4603      	mov	r3, r0
 8017460:	613b      	str	r3, [r7, #16]
    for (unsigned i = 0; i < height; ++i)
 8017462:	2300      	movs	r3, #0
 8017464:	617b      	str	r3, [r7, #20]
 8017466:	697a      	ldr	r2, [r7, #20]
 8017468:	687b      	ldr	r3, [r7, #4]
 801746a:	429a      	cmp	r2, r3
 801746c:	d20d      	bcs.n	801748a <_ZN4tama18Stm32TextureLoader22createEmptyTextureDataEjj+0x4e>
    {
        textureData[i] = new PixelColor[width];
 801746e:	68b9      	ldr	r1, [r7, #8]
 8017470:	697b      	ldr	r3, [r7, #20]
 8017472:	009b      	lsls	r3, r3, #2
 8017474:	693a      	ldr	r2, [r7, #16]
 8017476:	18d4      	adds	r4, r2, r3
 8017478:	4608      	mov	r0, r1
 801747a:	f008 fa1c 	bl	801f8b6 <_Znaj>
 801747e:	4603      	mov	r3, r0
 8017480:	6023      	str	r3, [r4, #0]
    for (unsigned i = 0; i < height; ++i)
 8017482:	697b      	ldr	r3, [r7, #20]
 8017484:	3301      	adds	r3, #1
 8017486:	617b      	str	r3, [r7, #20]
 8017488:	e7ed      	b.n	8017466 <_ZN4tama18Stm32TextureLoader22createEmptyTextureDataEjj+0x2a>
    }
    return textureData;
 801748a:	693b      	ldr	r3, [r7, #16]
}
 801748c:	4618      	mov	r0, r3
 801748e:	371c      	adds	r7, #28
 8017490:	46bd      	mov	sp, r7
 8017492:	bd90      	pop	{r4, r7, pc}
 8017494:	1ffffffe 	.word	0x1ffffffe

08017498 <_ZSt7forwardIRKjEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8017498:	b480      	push	{r7}
 801749a:	b083      	sub	sp, #12
 801749c:	af00      	add	r7, sp, #0
 801749e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80174a0:	687b      	ldr	r3, [r7, #4]
 80174a2:	4618      	mov	r0, r3
 80174a4:	370c      	adds	r7, #12
 80174a6:	46bd      	mov	sp, r7
 80174a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174ac:	4770      	bx	lr

080174ae <_ZSt11make_sharedIN4tama7TextureEJRKjS3_EESt10shared_ptrIT_EDpOT0_>:
    make_shared(_Args&&... __args)
 80174ae:	b590      	push	{r4, r7, lr}
 80174b0:	b087      	sub	sp, #28
 80174b2:	af00      	add	r7, sp, #0
 80174b4:	60f8      	str	r0, [r7, #12]
 80174b6:	60b9      	str	r1, [r7, #8]
 80174b8:	607a      	str	r2, [r7, #4]
				       std::forward<_Args>(__args)...);
 80174ba:	f107 0314 	add.w	r3, r7, #20
 80174be:	4618      	mov	r0, r3
 80174c0:	f7f8 fb3f 	bl	800fb42 <_ZNSaIN4tama7TextureEEC1Ev>
 80174c4:	68b8      	ldr	r0, [r7, #8]
 80174c6:	f7ff ffe7 	bl	8017498 <_ZSt7forwardIRKjEOT_RNSt16remove_referenceIS2_E4typeE>
 80174ca:	4604      	mov	r4, r0
 80174cc:	6878      	ldr	r0, [r7, #4]
 80174ce:	f7ff ffe3 	bl	8017498 <_ZSt7forwardIRKjEOT_RNSt16remove_referenceIS2_E4typeE>
 80174d2:	4603      	mov	r3, r0
 80174d4:	68f8      	ldr	r0, [r7, #12]
 80174d6:	f107 0114 	add.w	r1, r7, #20
 80174da:	4622      	mov	r2, r4
 80174dc:	f000 f809 	bl	80174f2 <_ZSt15allocate_sharedIN4tama7TextureESaIS1_EJRKjS4_EESt10shared_ptrIT_ERKT0_DpOT1_>
 80174e0:	f107 0314 	add.w	r3, r7, #20
 80174e4:	4618      	mov	r0, r3
 80174e6:	f7f8 fb38 	bl	800fb5a <_ZNSaIN4tama7TextureEED1Ev>
    }
 80174ea:	68f8      	ldr	r0, [r7, #12]
 80174ec:	371c      	adds	r7, #28
 80174ee:	46bd      	mov	sp, r7
 80174f0:	bd90      	pop	{r4, r7, pc}

080174f2 <_ZSt15allocate_sharedIN4tama7TextureESaIS1_EJRKjS4_EESt10shared_ptrIT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 80174f2:	b5b0      	push	{r4, r5, r7, lr}
 80174f4:	b088      	sub	sp, #32
 80174f6:	af02      	add	r7, sp, #8
 80174f8:	60f8      	str	r0, [r7, #12]
 80174fa:	60b9      	str	r1, [r7, #8]
 80174fc:	607a      	str	r2, [r7, #4]
 80174fe:	603b      	str	r3, [r7, #0]
			     std::forward<_Args>(__args)...);
 8017500:	6878      	ldr	r0, [r7, #4]
 8017502:	f7ff ffc9 	bl	8017498 <_ZSt7forwardIRKjEOT_RNSt16remove_referenceIS2_E4typeE>
 8017506:	4604      	mov	r4, r0
 8017508:	6838      	ldr	r0, [r7, #0]
 801750a:	f7ff ffc5 	bl	8017498 <_ZSt7forwardIRKjEOT_RNSt16remove_referenceIS2_E4typeE>
 801750e:	4603      	mov	r3, r0
 8017510:	9300      	str	r3, [sp, #0]
 8017512:	4623      	mov	r3, r4
 8017514:	68ba      	ldr	r2, [r7, #8]
 8017516:	4629      	mov	r1, r5
 8017518:	68f8      	ldr	r0, [r7, #12]
 801751a:	f000 f804 	bl	8017526 <_ZNSt10shared_ptrIN4tama7TextureEEC1ISaIS1_EJRKjS6_EEESt19_Sp_make_shared_tagRKT_DpOT0_>
    }
 801751e:	68f8      	ldr	r0, [r7, #12]
 8017520:	3718      	adds	r7, #24
 8017522:	46bd      	mov	sp, r7
 8017524:	bdb0      	pop	{r4, r5, r7, pc}

08017526 <_ZNSt10shared_ptrIN4tama7TextureEEC1ISaIS1_EJRKjS6_EEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8017526:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017528:	b087      	sub	sp, #28
 801752a:	af02      	add	r7, sp, #8
 801752c:	60f8      	str	r0, [r7, #12]
 801752e:	7239      	strb	r1, [r7, #8]
 8017530:	607a      	str	r2, [r7, #4]
 8017532:	603b      	str	r3, [r7, #0]
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
 8017534:	68fc      	ldr	r4, [r7, #12]
 8017536:	6838      	ldr	r0, [r7, #0]
 8017538:	f7ff ffae 	bl	8017498 <_ZSt7forwardIRKjEOT_RNSt16remove_referenceIS2_E4typeE>
 801753c:	4605      	mov	r5, r0
 801753e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017540:	f7ff ffaa 	bl	8017498 <_ZSt7forwardIRKjEOT_RNSt16remove_referenceIS2_E4typeE>
 8017544:	4603      	mov	r3, r0
 8017546:	9300      	str	r3, [sp, #0]
 8017548:	462b      	mov	r3, r5
 801754a:	687a      	ldr	r2, [r7, #4]
 801754c:	4631      	mov	r1, r6
 801754e:	4620      	mov	r0, r4
 8017550:	f000 f805 	bl	801755e <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJRKjS8_EEESt19_Sp_make_shared_tagRKT_DpOT0_>
	{ }
 8017554:	68fb      	ldr	r3, [r7, #12]
 8017556:	4618      	mov	r0, r3
 8017558:	3714      	adds	r7, #20
 801755a:	46bd      	mov	sp, r7
 801755c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801755e <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJRKjS8_EEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 801755e:	b590      	push	{r4, r7, lr}
 8017560:	b08d      	sub	sp, #52	; 0x34
 8017562:	af00      	add	r7, sp, #0
 8017564:	60f8      	str	r0, [r7, #12]
 8017566:	7239      	strb	r1, [r7, #8]
 8017568:	607a      	str	r2, [r7, #4]
 801756a:	603b      	str	r3, [r7, #0]
	: _M_ptr(), _M_refcount()
 801756c:	68fb      	ldr	r3, [r7, #12]
 801756e:	2200      	movs	r2, #0
 8017570:	601a      	str	r2, [r3, #0]
 8017572:	68fb      	ldr	r3, [r7, #12]
 8017574:	3304      	adds	r3, #4
 8017576:	4618      	mov	r0, r3
 8017578:	f7ec fcf9 	bl	8003f6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 801757c:	f107 0320 	add.w	r3, r7, #32
 8017580:	6879      	ldr	r1, [r7, #4]
 8017582:	4618      	mov	r0, r3
 8017584:	f7f8 fdf8 	bl	8010178 <_ZNSaIN4tama7TextureEEC1ERKS1_>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 8017588:	f107 0318 	add.w	r3, r7, #24
 801758c:	f107 0220 	add.w	r2, r7, #32
 8017590:	4611      	mov	r1, r2
 8017592:	4618      	mov	r0, r3
 8017594:	f7f8 fdfe 	bl	8010194 <_ZSt18__allocate_guardedISaIN4tama7TextureEEESt15__allocated_ptrIT_ERS4_>
	  auto __ptr = __guard.get();
 8017598:	f107 0318 	add.w	r3, r7, #24
 801759c:	4618      	mov	r0, r3
 801759e:	f7f8 fe21 	bl	80101e4 <_ZNSt15__allocated_ptrISaIN4tama7TextureEEE3getEv>
 80175a2:	62f8      	str	r0, [r7, #44]	; 0x2c
	  __traits::construct(__del._M_alloc, __ptr,
 80175a4:	6838      	ldr	r0, [r7, #0]
 80175a6:	f7ff ff77 	bl	8017498 <_ZSt7forwardIRKjEOT_RNSt16remove_referenceIS2_E4typeE>
 80175aa:	4604      	mov	r4, r0
 80175ac:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80175ae:	f7ff ff73 	bl	8017498 <_ZSt7forwardIRKjEOT_RNSt16remove_referenceIS2_E4typeE>
 80175b2:	4603      	mov	r3, r0
 80175b4:	f107 0020 	add.w	r0, r7, #32
 80175b8:	4622      	mov	r2, r4
 80175ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80175bc:	f000 f84e 	bl	801765c <_ZNSt16allocator_traitsISaIN4tama7TextureEEE9constructIS1_JRKjS6_EEEvRS2_PT_DpOT0_>
	  __guard = nullptr;
 80175c0:	f107 0318 	add.w	r3, r7, #24
 80175c4:	2100      	movs	r1, #0
 80175c6:	4618      	mov	r0, r3
 80175c8:	f7f8 fe32 	bl	8010230 <_ZNSt15__allocated_ptrISaIN4tama7TextureEEEaSEDn>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 80175cc:	f107 0220 	add.w	r2, r7, #32
 80175d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80175d4:	4611      	mov	r1, r2
 80175d6:	4618      	mov	r0, r3
 80175d8:	f7f8 fc73 	bl	800fec2 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>
 80175dc:	f107 0220 	add.w	r2, r7, #32
 80175e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80175e4:	4611      	mov	r1, r2
 80175e6:	4618      	mov	r0, r3
 80175e8:	f7f8 fdc6 	bl	8010178 <_ZNSaIN4tama7TextureEEC1ERKS1_>
 80175ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80175f0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80175f4:	f107 0014 	add.w	r0, r7, #20
 80175f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80175fa:	f7f8 fe4e 	bl	801029a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama7TextureENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
 80175fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017602:	4618      	mov	r0, r3
 8017604:	f7f8 faa9 	bl	800fb5a <_ZNSaIN4tama7TextureEED1Ev>
 8017608:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801760c:	4618      	mov	r0, r3
 801760e:	f7f8 fc4b 	bl	800fea8 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	  _M_refcount._M_swap(__count);
 8017612:	68fb      	ldr	r3, [r7, #12]
 8017614:	3304      	adds	r3, #4
 8017616:	f107 0214 	add.w	r2, r7, #20
 801761a:	4611      	mov	r1, r2
 801761c:	4618      	mov	r0, r3
 801761e:	f7ec fdaf 	bl	8004180 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  _M_ptr = __ptr;
 8017622:	68fb      	ldr	r3, [r7, #12]
 8017624:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017626:	601a      	str	r2, [r3, #0]
	  _M_enable_shared_from_this_with(_M_ptr);
 8017628:	68fb      	ldr	r3, [r7, #12]
 801762a:	681b      	ldr	r3, [r3, #0]
 801762c:	4619      	mov	r1, r3
 801762e:	68f8      	ldr	r0, [r7, #12]
 8017630:	f7f8 fe8a 	bl	8010348 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 8017634:	f107 0314 	add.w	r3, r7, #20
 8017638:	4618      	mov	r0, r3
 801763a:	f7eb fd6a 	bl	8003112 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 801763e:	f107 0318 	add.w	r3, r7, #24
 8017642:	4618      	mov	r0, r3
 8017644:	f7f8 fdb9 	bl	80101ba <_ZNSt15__allocated_ptrISaIN4tama7TextureEEED1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 8017648:	f107 0320 	add.w	r3, r7, #32
 801764c:	4618      	mov	r0, r3
 801764e:	f7f8 fc2b 	bl	800fea8 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	}
 8017652:	68fb      	ldr	r3, [r7, #12]
 8017654:	4618      	mov	r0, r3
 8017656:	3734      	adds	r7, #52	; 0x34
 8017658:	46bd      	mov	sp, r7
 801765a:	bd90      	pop	{r4, r7, pc}

0801765c <_ZNSt16allocator_traitsISaIN4tama7TextureEEE9constructIS1_JRKjS6_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 801765c:	b590      	push	{r4, r7, lr}
 801765e:	b085      	sub	sp, #20
 8017660:	af00      	add	r7, sp, #0
 8017662:	60f8      	str	r0, [r7, #12]
 8017664:	60b9      	str	r1, [r7, #8]
 8017666:	607a      	str	r2, [r7, #4]
 8017668:	603b      	str	r3, [r7, #0]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 801766a:	6878      	ldr	r0, [r7, #4]
 801766c:	f7ff ff14 	bl	8017498 <_ZSt7forwardIRKjEOT_RNSt16remove_referenceIS2_E4typeE>
 8017670:	4604      	mov	r4, r0
 8017672:	6838      	ldr	r0, [r7, #0]
 8017674:	f7ff ff10 	bl	8017498 <_ZSt7forwardIRKjEOT_RNSt16remove_referenceIS2_E4typeE>
 8017678:	4603      	mov	r3, r0
 801767a:	4622      	mov	r2, r4
 801767c:	68b9      	ldr	r1, [r7, #8]
 801767e:	68f8      	ldr	r0, [r7, #12]
 8017680:	f000 f804 	bl	801768c <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE9constructIS2_JRKjS6_EEEvPT_DpOT0_>
 8017684:	bf00      	nop
 8017686:	3714      	adds	r7, #20
 8017688:	46bd      	mov	sp, r7
 801768a:	bd90      	pop	{r4, r7, pc}

0801768c <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE9constructIS2_JRKjS6_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 801768c:	b5b0      	push	{r4, r5, r7, lr}
 801768e:	b084      	sub	sp, #16
 8017690:	af00      	add	r7, sp, #0
 8017692:	60f8      	str	r0, [r7, #12]
 8017694:	60b9      	str	r1, [r7, #8]
 8017696:	607a      	str	r2, [r7, #4]
 8017698:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801769a:	6878      	ldr	r0, [r7, #4]
 801769c:	f7ff fefc 	bl	8017498 <_ZSt7forwardIRKjEOT_RNSt16remove_referenceIS2_E4typeE>
 80176a0:	4603      	mov	r3, r0
 80176a2:	681c      	ldr	r4, [r3, #0]
 80176a4:	6838      	ldr	r0, [r7, #0]
 80176a6:	f7ff fef7 	bl	8017498 <_ZSt7forwardIRKjEOT_RNSt16remove_referenceIS2_E4typeE>
 80176aa:	4603      	mov	r3, r0
 80176ac:	681d      	ldr	r5, [r3, #0]
 80176ae:	68bb      	ldr	r3, [r7, #8]
 80176b0:	4619      	mov	r1, r3
 80176b2:	200c      	movs	r0, #12
 80176b4:	f7e9 fcc3 	bl	800103e <_ZnwjPv>
 80176b8:	4603      	mov	r3, r0
 80176ba:	2b00      	cmp	r3, #0
 80176bc:	d004      	beq.n	80176c8 <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE9constructIS2_JRKjS6_EEEvPT_DpOT0_+0x3c>
 80176be:	462a      	mov	r2, r5
 80176c0:	4621      	mov	r1, r4
 80176c2:	4618      	mov	r0, r3
 80176c4:	f7f7 faba 	bl	800ec3c <_ZN4tama7TextureC1Ejj>
 80176c8:	bf00      	nop
 80176ca:	3710      	adds	r7, #16
 80176cc:	46bd      	mov	sp, r7
 80176ce:	bdb0      	pop	{r4, r5, r7, pc}

080176d0 <_ZN4tama16Stm32TimeMonitor10startTimerEv>:
//

#include "Stm32TimeMonitor.h"

void tama::Stm32TimeMonitor::startTimer()
{
 80176d0:	b580      	push	{r7, lr}
 80176d2:	b082      	sub	sp, #8
 80176d4:	af00      	add	r7, sp, #0
 80176d6:	6078      	str	r0, [r7, #4]
    timestamp = HAL_GetTick();
 80176d8:	f001 fbd8 	bl	8018e8c <HAL_GetTick>
 80176dc:	4602      	mov	r2, r0
 80176de:	687b      	ldr	r3, [r7, #4]
 80176e0:	605a      	str	r2, [r3, #4]
}
 80176e2:	bf00      	nop
 80176e4:	3708      	adds	r7, #8
 80176e6:	46bd      	mov	sp, r7
 80176e8:	bd80      	pop	{r7, pc}

080176ea <_ZN4tama16Stm32TimeMonitor14getElapsedTimeEv>:

unsigned int tama::Stm32TimeMonitor::getElapsedTime()
{
 80176ea:	b580      	push	{r7, lr}
 80176ec:	b082      	sub	sp, #8
 80176ee:	af00      	add	r7, sp, #0
 80176f0:	6078      	str	r0, [r7, #4]
    return HAL_GetTick() - timestamp;
 80176f2:	f001 fbcb 	bl	8018e8c <HAL_GetTick>
 80176f6:	4602      	mov	r2, r0
 80176f8:	687b      	ldr	r3, [r7, #4]
 80176fa:	685b      	ldr	r3, [r3, #4]
 80176fc:	1ad3      	subs	r3, r2, r3
}
 80176fe:	4618      	mov	r0, r3
 8017700:	3708      	adds	r7, #8
 8017702:	46bd      	mov	sp, r7
 8017704:	bd80      	pop	{r7, pc}

08017706 <_ZNSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_ptr() = default;
 8017706:	b580      	push	{r7, lr}
 8017708:	b082      	sub	sp, #8
 801770a:	af00      	add	r7, sp, #0
 801770c:	6078      	str	r0, [r7, #4]
 801770e:	687b      	ldr	r3, [r7, #4]
 8017710:	3304      	adds	r3, #4
 8017712:	4618      	mov	r0, r3
 8017714:	f7eb fcfd 	bl	8003112 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8017718:	687b      	ldr	r3, [r7, #4]
 801771a:	4618      	mov	r0, r3
 801771c:	3708      	adds	r7, #8
 801771e:	46bd      	mov	sp, r7
 8017720:	bd80      	pop	{r7, pc}

08017722 <_ZNSt10shared_ptrIN4tama16Stm32TimeMonitorEED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 8017722:	b580      	push	{r7, lr}
 8017724:	b082      	sub	sp, #8
 8017726:	af00      	add	r7, sp, #0
 8017728:	6078      	str	r0, [r7, #4]
 801772a:	687b      	ldr	r3, [r7, #4]
 801772c:	4618      	mov	r0, r3
 801772e:	f7ff ffea 	bl	8017706 <_ZNSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8017732:	687b      	ldr	r3, [r7, #4]
 8017734:	4618      	mov	r0, r3
 8017736:	3708      	adds	r7, #8
 8017738:	46bd      	mov	sp, r7
 801773a:	bd80      	pop	{r7, pc}

0801773c <_ZN4tama23Stm32TimeMonitorCreator17createTimeMonitorEv>:
//

#include "Stm32TimeMonitorCreator.h"

std::shared_ptr<tama::TimeMonitor> tama::Stm32TimeMonitorCreator::createTimeMonitor()
{
 801773c:	b580      	push	{r7, lr}
 801773e:	b084      	sub	sp, #16
 8017740:	af00      	add	r7, sp, #0
 8017742:	6078      	str	r0, [r7, #4]
 8017744:	6039      	str	r1, [r7, #0]
    return std::make_shared<Stm32TimeMonitor>();
 8017746:	f107 0308 	add.w	r3, r7, #8
 801774a:	4618      	mov	r0, r3
 801774c:	f000 f810 	bl	8017770 <_ZSt11make_sharedIN4tama16Stm32TimeMonitorEJEESt10shared_ptrIT_EDpOT0_>
 8017750:	f107 0308 	add.w	r3, r7, #8
 8017754:	4619      	mov	r1, r3
 8017756:	6878      	ldr	r0, [r7, #4]
 8017758:	f000 f82e 	bl	80177b8 <_ZNSt10shared_ptrIN4tama11TimeMonitorEEC1INS0_16Stm32TimeMonitorEvEEOS_IT_E>
 801775c:	f107 0308 	add.w	r3, r7, #8
 8017760:	4618      	mov	r0, r3
 8017762:	f7ff ffde 	bl	8017722 <_ZNSt10shared_ptrIN4tama16Stm32TimeMonitorEED1Ev>
 8017766:	bf00      	nop
}
 8017768:	6878      	ldr	r0, [r7, #4]
 801776a:	3710      	adds	r7, #16
 801776c:	46bd      	mov	sp, r7
 801776e:	bd80      	pop	{r7, pc}

08017770 <_ZSt11make_sharedIN4tama16Stm32TimeMonitorEJEESt10shared_ptrIT_EDpOT0_>:
    make_shared(_Args&&... __args)
 8017770:	b580      	push	{r7, lr}
 8017772:	b084      	sub	sp, #16
 8017774:	af00      	add	r7, sp, #0
 8017776:	6078      	str	r0, [r7, #4]
				       std::forward<_Args>(__args)...);
 8017778:	f107 030c 	add.w	r3, r7, #12
 801777c:	4618      	mov	r0, r3
 801777e:	f000 f82e 	bl	80177de <_ZNSaIN4tama16Stm32TimeMonitorEEC1Ev>
 8017782:	687b      	ldr	r3, [r7, #4]
 8017784:	f107 020c 	add.w	r2, r7, #12
 8017788:	4611      	mov	r1, r2
 801778a:	4618      	mov	r0, r3
 801778c:	f000 f83f 	bl	801780e <_ZSt15allocate_sharedIN4tama16Stm32TimeMonitorESaIS1_EJEESt10shared_ptrIT_ERKT0_DpOT1_>
 8017790:	f107 030c 	add.w	r3, r7, #12
 8017794:	4618      	mov	r0, r3
 8017796:	f000 f82e 	bl	80177f6 <_ZNSaIN4tama16Stm32TimeMonitorEED1Ev>
    }
 801779a:	6878      	ldr	r0, [r7, #4]
 801779c:	3710      	adds	r7, #16
 801779e:	46bd      	mov	sp, r7
 80177a0:	bd80      	pop	{r7, pc}

080177a2 <_ZSt4moveIRSt10shared_ptrIN4tama16Stm32TimeMonitorEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 80177a2:	b480      	push	{r7}
 80177a4:	b083      	sub	sp, #12
 80177a6:	af00      	add	r7, sp, #0
 80177a8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80177aa:	687b      	ldr	r3, [r7, #4]
 80177ac:	4618      	mov	r0, r3
 80177ae:	370c      	adds	r7, #12
 80177b0:	46bd      	mov	sp, r7
 80177b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177b6:	4770      	bx	lr

080177b8 <_ZNSt10shared_ptrIN4tama11TimeMonitorEEC1INS0_16Stm32TimeMonitorEvEEOS_IT_E>:
	shared_ptr(shared_ptr<_Yp>&& __r) noexcept
 80177b8:	b590      	push	{r4, r7, lr}
 80177ba:	b083      	sub	sp, #12
 80177bc:	af00      	add	r7, sp, #0
 80177be:	6078      	str	r0, [r7, #4]
 80177c0:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 80177c2:	687c      	ldr	r4, [r7, #4]
 80177c4:	6838      	ldr	r0, [r7, #0]
 80177c6:	f7ff ffec 	bl	80177a2 <_ZSt4moveIRSt10shared_ptrIN4tama16Stm32TimeMonitorEEEONSt16remove_referenceIT_E4typeEOS6_>
 80177ca:	4603      	mov	r3, r0
 80177cc:	4619      	mov	r1, r3
 80177ce:	4620      	mov	r0, r4
 80177d0:	f000 f82b 	bl	801782a <_ZNSt12__shared_ptrIN4tama11TimeMonitorELN9__gnu_cxx12_Lock_policyE0EEC1INS0_16Stm32TimeMonitorEvEEOS_IT_LS3_0EE>
 80177d4:	687b      	ldr	r3, [r7, #4]
 80177d6:	4618      	mov	r0, r3
 80177d8:	370c      	adds	r7, #12
 80177da:	46bd      	mov	sp, r7
 80177dc:	bd90      	pop	{r4, r7, pc}

080177de <_ZNSaIN4tama16Stm32TimeMonitorEEC1Ev>:
      allocator() throw() { }
 80177de:	b580      	push	{r7, lr}
 80177e0:	b082      	sub	sp, #8
 80177e2:	af00      	add	r7, sp, #0
 80177e4:	6078      	str	r0, [r7, #4]
 80177e6:	6878      	ldr	r0, [r7, #4]
 80177e8:	f000 f83d 	bl	8017866 <_ZN9__gnu_cxx13new_allocatorIN4tama16Stm32TimeMonitorEEC1Ev>
 80177ec:	687b      	ldr	r3, [r7, #4]
 80177ee:	4618      	mov	r0, r3
 80177f0:	3708      	adds	r7, #8
 80177f2:	46bd      	mov	sp, r7
 80177f4:	bd80      	pop	{r7, pc}

080177f6 <_ZNSaIN4tama16Stm32TimeMonitorEED1Ev>:
      ~allocator() throw() { }
 80177f6:	b580      	push	{r7, lr}
 80177f8:	b082      	sub	sp, #8
 80177fa:	af00      	add	r7, sp, #0
 80177fc:	6078      	str	r0, [r7, #4]
 80177fe:	6878      	ldr	r0, [r7, #4]
 8017800:	f000 f83c 	bl	801787c <_ZN9__gnu_cxx13new_allocatorIN4tama16Stm32TimeMonitorEED1Ev>
 8017804:	687b      	ldr	r3, [r7, #4]
 8017806:	4618      	mov	r0, r3
 8017808:	3708      	adds	r7, #8
 801780a:	46bd      	mov	sp, r7
 801780c:	bd80      	pop	{r7, pc}

0801780e <_ZSt15allocate_sharedIN4tama16Stm32TimeMonitorESaIS1_EJEESt10shared_ptrIT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 801780e:	b580      	push	{r7, lr}
 8017810:	b084      	sub	sp, #16
 8017812:	af00      	add	r7, sp, #0
 8017814:	6078      	str	r0, [r7, #4]
 8017816:	6039      	str	r1, [r7, #0]
			     std::forward<_Args>(__args)...);
 8017818:	683a      	ldr	r2, [r7, #0]
 801781a:	4619      	mov	r1, r3
 801781c:	6878      	ldr	r0, [r7, #4]
 801781e:	f000 f838 	bl	8017892 <_ZNSt10shared_ptrIN4tama16Stm32TimeMonitorEEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>
    }
 8017822:	6878      	ldr	r0, [r7, #4]
 8017824:	3710      	adds	r7, #16
 8017826:	46bd      	mov	sp, r7
 8017828:	bd80      	pop	{r7, pc}

0801782a <_ZNSt12__shared_ptrIN4tama11TimeMonitorELN9__gnu_cxx12_Lock_policyE0EEC1INS0_16Stm32TimeMonitorEvEEOS_IT_LS3_0EE>:
	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 801782a:	b580      	push	{r7, lr}
 801782c:	b082      	sub	sp, #8
 801782e:	af00      	add	r7, sp, #0
 8017830:	6078      	str	r0, [r7, #4]
 8017832:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount()
 8017834:	683b      	ldr	r3, [r7, #0]
 8017836:	681a      	ldr	r2, [r3, #0]
 8017838:	687b      	ldr	r3, [r7, #4]
 801783a:	601a      	str	r2, [r3, #0]
 801783c:	687b      	ldr	r3, [r7, #4]
 801783e:	3304      	adds	r3, #4
 8017840:	4618      	mov	r0, r3
 8017842:	f7ec fb94 	bl	8003f6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _M_refcount._M_swap(__r._M_refcount);
 8017846:	687b      	ldr	r3, [r7, #4]
 8017848:	1d1a      	adds	r2, r3, #4
 801784a:	683b      	ldr	r3, [r7, #0]
 801784c:	3304      	adds	r3, #4
 801784e:	4619      	mov	r1, r3
 8017850:	4610      	mov	r0, r2
 8017852:	f7ec fc95 	bl	8004180 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  __r._M_ptr = 0;
 8017856:	683b      	ldr	r3, [r7, #0]
 8017858:	2200      	movs	r2, #0
 801785a:	601a      	str	r2, [r3, #0]
	}
 801785c:	687b      	ldr	r3, [r7, #4]
 801785e:	4618      	mov	r0, r3
 8017860:	3708      	adds	r7, #8
 8017862:	46bd      	mov	sp, r7
 8017864:	bd80      	pop	{r7, pc}

08017866 <_ZN9__gnu_cxx13new_allocatorIN4tama16Stm32TimeMonitorEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8017866:	b480      	push	{r7}
 8017868:	b083      	sub	sp, #12
 801786a:	af00      	add	r7, sp, #0
 801786c:	6078      	str	r0, [r7, #4]
 801786e:	687b      	ldr	r3, [r7, #4]
 8017870:	4618      	mov	r0, r3
 8017872:	370c      	adds	r7, #12
 8017874:	46bd      	mov	sp, r7
 8017876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801787a:	4770      	bx	lr

0801787c <_ZN9__gnu_cxx13new_allocatorIN4tama16Stm32TimeMonitorEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 801787c:	b480      	push	{r7}
 801787e:	b083      	sub	sp, #12
 8017880:	af00      	add	r7, sp, #0
 8017882:	6078      	str	r0, [r7, #4]
 8017884:	687b      	ldr	r3, [r7, #4]
 8017886:	4618      	mov	r0, r3
 8017888:	370c      	adds	r7, #12
 801788a:	46bd      	mov	sp, r7
 801788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017890:	4770      	bx	lr

08017892 <_ZNSt10shared_ptrIN4tama16Stm32TimeMonitorEEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8017892:	b590      	push	{r4, r7, lr}
 8017894:	b085      	sub	sp, #20
 8017896:	af00      	add	r7, sp, #0
 8017898:	60f8      	str	r0, [r7, #12]
 801789a:	7239      	strb	r1, [r7, #8]
 801789c:	607a      	str	r2, [r7, #4]
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
 801789e:	68fb      	ldr	r3, [r7, #12]
 80178a0:	687a      	ldr	r2, [r7, #4]
 80178a2:	4621      	mov	r1, r4
 80178a4:	4618      	mov	r0, r3
 80178a6:	f000 f822 	bl	80178ee <_ZNSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>
	{ }
 80178aa:	68fb      	ldr	r3, [r7, #12]
 80178ac:	4618      	mov	r0, r3
 80178ae:	3714      	adds	r7, #20
 80178b0:	46bd      	mov	sp, r7
 80178b2:	bd90      	pop	{r4, r7, pc}

080178b4 <_ZNSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>:
        struct _Deleter
 80178b4:	b580      	push	{r7, lr}
 80178b6:	b082      	sub	sp, #8
 80178b8:	af00      	add	r7, sp, #0
 80178ba:	6078      	str	r0, [r7, #4]
 80178bc:	687b      	ldr	r3, [r7, #4]
 80178be:	4618      	mov	r0, r3
 80178c0:	f7ff ff99 	bl	80177f6 <_ZNSaIN4tama16Stm32TimeMonitorEED1Ev>
 80178c4:	687b      	ldr	r3, [r7, #4]
 80178c6:	4618      	mov	r0, r3
 80178c8:	3708      	adds	r7, #8
 80178ca:	46bd      	mov	sp, r7
 80178cc:	bd80      	pop	{r7, pc}

080178ce <_ZNSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>:
 80178ce:	b580      	push	{r7, lr}
 80178d0:	b082      	sub	sp, #8
 80178d2:	af00      	add	r7, sp, #0
 80178d4:	6078      	str	r0, [r7, #4]
 80178d6:	6039      	str	r1, [r7, #0]
 80178d8:	687b      	ldr	r3, [r7, #4]
 80178da:	683a      	ldr	r2, [r7, #0]
 80178dc:	4611      	mov	r1, r2
 80178de:	4618      	mov	r0, r3
 80178e0:	f000 f87b 	bl	80179da <_ZNSaIN4tama16Stm32TimeMonitorEEC1ERKS1_>
 80178e4:	687b      	ldr	r3, [r7, #4]
 80178e6:	4618      	mov	r0, r3
 80178e8:	3708      	adds	r7, #8
 80178ea:	46bd      	mov	sp, r7
 80178ec:	bd80      	pop	{r7, pc}

080178ee <_ZNSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 80178ee:	b580      	push	{r7, lr}
 80178f0:	b08c      	sub	sp, #48	; 0x30
 80178f2:	af00      	add	r7, sp, #0
 80178f4:	60f8      	str	r0, [r7, #12]
 80178f6:	7239      	strb	r1, [r7, #8]
 80178f8:	607a      	str	r2, [r7, #4]
	: _M_ptr(), _M_refcount()
 80178fa:	68fb      	ldr	r3, [r7, #12]
 80178fc:	2200      	movs	r2, #0
 80178fe:	601a      	str	r2, [r3, #0]
 8017900:	68fb      	ldr	r3, [r7, #12]
 8017902:	3304      	adds	r3, #4
 8017904:	4618      	mov	r0, r3
 8017906:	f7ec fb32 	bl	8003f6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 801790a:	f107 0320 	add.w	r3, r7, #32
 801790e:	6879      	ldr	r1, [r7, #4]
 8017910:	4618      	mov	r0, r3
 8017912:	f000 f862 	bl	80179da <_ZNSaIN4tama16Stm32TimeMonitorEEC1ERKS1_>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 8017916:	f107 0318 	add.w	r3, r7, #24
 801791a:	f107 0220 	add.w	r2, r7, #32
 801791e:	4611      	mov	r1, r2
 8017920:	4618      	mov	r0, r3
 8017922:	f000 f868 	bl	80179f6 <_ZSt18__allocate_guardedISaIN4tama16Stm32TimeMonitorEEESt15__allocated_ptrIT_ERS4_>
	  auto __ptr = __guard.get();
 8017926:	f107 0318 	add.w	r3, r7, #24
 801792a:	4618      	mov	r0, r3
 801792c:	f000 f88b 	bl	8017a46 <_ZNSt15__allocated_ptrISaIN4tama16Stm32TimeMonitorEEE3getEv>
 8017930:	62f8      	str	r0, [r7, #44]	; 0x2c
	  __traits::construct(__del._M_alloc, __ptr,
 8017932:	f107 0320 	add.w	r3, r7, #32
 8017936:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017938:	4618      	mov	r0, r3
 801793a:	f000 f892 	bl	8017a62 <_ZNSt16allocator_traitsISaIN4tama16Stm32TimeMonitorEEE9constructIS1_JEEEvRS2_PT_DpOT0_>
	  __guard = nullptr;
 801793e:	f107 0318 	add.w	r3, r7, #24
 8017942:	2100      	movs	r1, #0
 8017944:	4618      	mov	r0, r3
 8017946:	f000 f899 	bl	8017a7c <_ZNSt15__allocated_ptrISaIN4tama16Stm32TimeMonitorEEEaSEDn>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 801794a:	f107 0220 	add.w	r2, r7, #32
 801794e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017952:	4611      	mov	r1, r2
 8017954:	4618      	mov	r0, r3
 8017956:	f7ff ffba 	bl	80178ce <_ZNSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>
 801795a:	f107 0220 	add.w	r2, r7, #32
 801795e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017962:	4611      	mov	r1, r2
 8017964:	4618      	mov	r0, r3
 8017966:	f000 f838 	bl	80179da <_ZNSaIN4tama16Stm32TimeMonitorEEC1ERKS1_>
 801796a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801796e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8017972:	f107 0014 	add.w	r0, r7, #20
 8017976:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017978:	f000 f8b5 	bl	8017ae6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
 801797c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017980:	4618      	mov	r0, r3
 8017982:	f7ff ff38 	bl	80177f6 <_ZNSaIN4tama16Stm32TimeMonitorEED1Ev>
 8017986:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801798a:	4618      	mov	r0, r3
 801798c:	f7ff ff92 	bl	80178b4 <_ZNSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	  _M_refcount._M_swap(__count);
 8017990:	68fb      	ldr	r3, [r7, #12]
 8017992:	3304      	adds	r3, #4
 8017994:	f107 0214 	add.w	r2, r7, #20
 8017998:	4611      	mov	r1, r2
 801799a:	4618      	mov	r0, r3
 801799c:	f7ec fbf0 	bl	8004180 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  _M_ptr = __ptr;
 80179a0:	68fb      	ldr	r3, [r7, #12]
 80179a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80179a4:	601a      	str	r2, [r3, #0]
	  _M_enable_shared_from_this_with(_M_ptr);
 80179a6:	68fb      	ldr	r3, [r7, #12]
 80179a8:	681b      	ldr	r3, [r3, #0]
 80179aa:	4619      	mov	r1, r3
 80179ac:	68f8      	ldr	r0, [r7, #12]
 80179ae:	f000 f8f1 	bl	8017b94 <_ZNSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 80179b2:	f107 0314 	add.w	r3, r7, #20
 80179b6:	4618      	mov	r0, r3
 80179b8:	f7eb fbab 	bl	8003112 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 80179bc:	f107 0318 	add.w	r3, r7, #24
 80179c0:	4618      	mov	r0, r3
 80179c2:	f000 f82b 	bl	8017a1c <_ZNSt15__allocated_ptrISaIN4tama16Stm32TimeMonitorEEED1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 80179c6:	f107 0320 	add.w	r3, r7, #32
 80179ca:	4618      	mov	r0, r3
 80179cc:	f7ff ff72 	bl	80178b4 <_ZNSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	}
 80179d0:	68fb      	ldr	r3, [r7, #12]
 80179d2:	4618      	mov	r0, r3
 80179d4:	3730      	adds	r7, #48	; 0x30
 80179d6:	46bd      	mov	sp, r7
 80179d8:	bd80      	pop	{r7, pc}

080179da <_ZNSaIN4tama16Stm32TimeMonitorEEC1ERKS1_>:
      allocator(const allocator& __a) throw()
 80179da:	b580      	push	{r7, lr}
 80179dc:	b082      	sub	sp, #8
 80179de:	af00      	add	r7, sp, #0
 80179e0:	6078      	str	r0, [r7, #4]
 80179e2:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80179e4:	6839      	ldr	r1, [r7, #0]
 80179e6:	6878      	ldr	r0, [r7, #4]
 80179e8:	f000 f8df 	bl	8017baa <_ZN9__gnu_cxx13new_allocatorIN4tama16Stm32TimeMonitorEEC1ERKS3_>
 80179ec:	687b      	ldr	r3, [r7, #4]
 80179ee:	4618      	mov	r0, r3
 80179f0:	3708      	adds	r7, #8
 80179f2:	46bd      	mov	sp, r7
 80179f4:	bd80      	pop	{r7, pc}

080179f6 <_ZSt18__allocate_guardedISaIN4tama16Stm32TimeMonitorEEESt15__allocated_ptrIT_ERS4_>:
    __allocate_guarded(_Alloc& __a)
 80179f6:	b580      	push	{r7, lr}
 80179f8:	b082      	sub	sp, #8
 80179fa:	af00      	add	r7, sp, #0
 80179fc:	6078      	str	r0, [r7, #4]
 80179fe:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 8017a00:	2101      	movs	r1, #1
 8017a02:	6838      	ldr	r0, [r7, #0]
 8017a04:	f000 f8dd 	bl	8017bc2 <_ZNSt16allocator_traitsISaIN4tama16Stm32TimeMonitorEEE8allocateERS2_j>
 8017a08:	4603      	mov	r3, r0
 8017a0a:	461a      	mov	r2, r3
 8017a0c:	6839      	ldr	r1, [r7, #0]
 8017a0e:	6878      	ldr	r0, [r7, #4]
 8017a10:	f000 f8e6 	bl	8017be0 <_ZNSt15__allocated_ptrISaIN4tama16Stm32TimeMonitorEEEC1ERS2_PS1_>
    }
 8017a14:	6878      	ldr	r0, [r7, #4]
 8017a16:	3708      	adds	r7, #8
 8017a18:	46bd      	mov	sp, r7
 8017a1a:	bd80      	pop	{r7, pc}

08017a1c <_ZNSt15__allocated_ptrISaIN4tama16Stm32TimeMonitorEEED1Ev>:
      ~__allocated_ptr()
 8017a1c:	b580      	push	{r7, lr}
 8017a1e:	b082      	sub	sp, #8
 8017a20:	af00      	add	r7, sp, #0
 8017a22:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8017a24:	687b      	ldr	r3, [r7, #4]
 8017a26:	685b      	ldr	r3, [r3, #4]
 8017a28:	2b00      	cmp	r3, #0
 8017a2a:	d007      	beq.n	8017a3c <_ZNSt15__allocated_ptrISaIN4tama16Stm32TimeMonitorEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8017a2c:	687b      	ldr	r3, [r7, #4]
 8017a2e:	6818      	ldr	r0, [r3, #0]
 8017a30:	687b      	ldr	r3, [r7, #4]
 8017a32:	685b      	ldr	r3, [r3, #4]
 8017a34:	2201      	movs	r2, #1
 8017a36:	4619      	mov	r1, r3
 8017a38:	f000 f8e6 	bl	8017c08 <_ZNSt16allocator_traitsISaIN4tama16Stm32TimeMonitorEEE10deallocateERS2_PS1_j>
      }
 8017a3c:	687b      	ldr	r3, [r7, #4]
 8017a3e:	4618      	mov	r0, r3
 8017a40:	3708      	adds	r7, #8
 8017a42:	46bd      	mov	sp, r7
 8017a44:	bd80      	pop	{r7, pc}

08017a46 <_ZNSt15__allocated_ptrISaIN4tama16Stm32TimeMonitorEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 8017a46:	b580      	push	{r7, lr}
 8017a48:	b082      	sub	sp, #8
 8017a4a:	af00      	add	r7, sp, #0
 8017a4c:	6078      	str	r0, [r7, #4]
 8017a4e:	687b      	ldr	r3, [r7, #4]
 8017a50:	685b      	ldr	r3, [r3, #4]
 8017a52:	4618      	mov	r0, r3
 8017a54:	f000 f8e7 	bl	8017c26 <_ZNSt15__allocated_ptrISaIN4tama16Stm32TimeMonitorEEE10_S_raw_ptrEPS1_>
 8017a58:	4603      	mov	r3, r0
 8017a5a:	4618      	mov	r0, r3
 8017a5c:	3708      	adds	r7, #8
 8017a5e:	46bd      	mov	sp, r7
 8017a60:	bd80      	pop	{r7, pc}

08017a62 <_ZNSt16allocator_traitsISaIN4tama16Stm32TimeMonitorEEE9constructIS1_JEEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8017a62:	b580      	push	{r7, lr}
 8017a64:	b082      	sub	sp, #8
 8017a66:	af00      	add	r7, sp, #0
 8017a68:	6078      	str	r0, [r7, #4]
 8017a6a:	6039      	str	r1, [r7, #0]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8017a6c:	6839      	ldr	r1, [r7, #0]
 8017a6e:	6878      	ldr	r0, [r7, #4]
 8017a70:	f000 f906 	bl	8017c80 <_ZN9__gnu_cxx13new_allocatorIN4tama16Stm32TimeMonitorEE9constructIS2_JEEEvPT_DpOT0_>
 8017a74:	bf00      	nop
 8017a76:	3708      	adds	r7, #8
 8017a78:	46bd      	mov	sp, r7
 8017a7a:	bd80      	pop	{r7, pc}

08017a7c <_ZNSt15__allocated_ptrISaIN4tama16Stm32TimeMonitorEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 8017a7c:	b480      	push	{r7}
 8017a7e:	b083      	sub	sp, #12
 8017a80:	af00      	add	r7, sp, #0
 8017a82:	6078      	str	r0, [r7, #4]
 8017a84:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 8017a86:	687b      	ldr	r3, [r7, #4]
 8017a88:	2200      	movs	r2, #0
 8017a8a:	605a      	str	r2, [r3, #4]
	return *this;
 8017a8c:	687b      	ldr	r3, [r7, #4]
      }
 8017a8e:	4618      	mov	r0, r3
 8017a90:	370c      	adds	r7, #12
 8017a92:	46bd      	mov	sp, r7
 8017a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a98:	4770      	bx	lr

08017a9a <_ZSt4moveIRNSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 8017a9a:	b480      	push	{r7}
 8017a9c:	b083      	sub	sp, #12
 8017a9e:	af00      	add	r7, sp, #0
 8017aa0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8017aa2:	687b      	ldr	r3, [r7, #4]
 8017aa4:	4618      	mov	r0, r3
 8017aa6:	370c      	adds	r7, #12
 8017aa8:	46bd      	mov	sp, r7
 8017aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017aae:	4770      	bx	lr

08017ab0 <_ZNSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>:
        struct _Deleter
 8017ab0:	b580      	push	{r7, lr}
 8017ab2:	b082      	sub	sp, #8
 8017ab4:	af00      	add	r7, sp, #0
 8017ab6:	6078      	str	r0, [r7, #4]
 8017ab8:	6039      	str	r1, [r7, #0]
 8017aba:	687b      	ldr	r3, [r7, #4]
 8017abc:	683a      	ldr	r2, [r7, #0]
 8017abe:	4611      	mov	r1, r2
 8017ac0:	4618      	mov	r0, r3
 8017ac2:	f7ff ff8a 	bl	80179da <_ZNSaIN4tama16Stm32TimeMonitorEEC1ERKS1_>
 8017ac6:	687b      	ldr	r3, [r7, #4]
 8017ac8:	4618      	mov	r0, r3
 8017aca:	3708      	adds	r7, #8
 8017acc:	46bd      	mov	sp, r7
 8017ace:	bd80      	pop	{r7, pc}

08017ad0 <_ZSt4moveIRSaIN4tama16Stm32TimeMonitorEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8017ad0:	b480      	push	{r7}
 8017ad2:	b083      	sub	sp, #12
 8017ad4:	af00      	add	r7, sp, #0
 8017ad6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8017ad8:	687b      	ldr	r3, [r7, #4]
 8017ada:	4618      	mov	r0, r3
 8017adc:	370c      	adds	r7, #12
 8017ade:	46bd      	mov	sp, r7
 8017ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ae4:	4770      	bx	lr

08017ae6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
 8017ae6:	b5b0      	push	{r4, r5, r7, lr}
 8017ae8:	b08a      	sub	sp, #40	; 0x28
 8017aea:	af00      	add	r7, sp, #0
 8017aec:	60f8      	str	r0, [r7, #12]
 8017aee:	60b9      	str	r1, [r7, #8]
 8017af0:	607a      	str	r2, [r7, #4]
 8017af2:	603b      	str	r3, [r7, #0]
 8017af4:	68fb      	ldr	r3, [r7, #12]
 8017af6:	2200      	movs	r2, #0
 8017af8:	601a      	str	r2, [r3, #0]
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 8017afa:	f107 031c 	add.w	r3, r7, #28
 8017afe:	6839      	ldr	r1, [r7, #0]
 8017b00:	4618      	mov	r0, r3
 8017b02:	f000 f8d5 	bl	8017cb0 <_ZNSaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	      auto __guard = std::__allocate_guarded(__a2);
 8017b06:	f107 0314 	add.w	r3, r7, #20
 8017b0a:	f107 021c 	add.w	r2, r7, #28
 8017b0e:	4611      	mov	r1, r2
 8017b10:	4618      	mov	r0, r3
 8017b12:	f000 f8e6 	bl	8017ce2 <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>
	      _Sp_cd_type* __mem = __guard.get();
 8017b16:	f107 0314 	add.w	r3, r7, #20
 8017b1a:	4618      	mov	r0, r3
 8017b1c:	f000 f909 	bl	8017d32 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>
 8017b20:	6278      	str	r0, [r7, #36]	; 0x24
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 8017b22:	6878      	ldr	r0, [r7, #4]
 8017b24:	f7ff ffb9 	bl	8017a9a <_ZSt4moveIRNSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8017b28:	4602      	mov	r2, r0
 8017b2a:	f107 0320 	add.w	r3, r7, #32
 8017b2e:	4611      	mov	r1, r2
 8017b30:	4618      	mov	r0, r3
 8017b32:	f7ff ffbd 	bl	8017ab0 <_ZNSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 8017b36:	f107 0420 	add.w	r4, r7, #32
 8017b3a:	6838      	ldr	r0, [r7, #0]
 8017b3c:	f7ff ffc8 	bl	8017ad0 <_ZSt4moveIRSaIN4tama16Stm32TimeMonitorEEEONSt16remove_referenceIT_E4typeEOS5_>
 8017b40:	4605      	mov	r5, r0
 8017b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b44:	4619      	mov	r1, r3
 8017b46:	2014      	movs	r0, #20
 8017b48:	f7e9 fa79 	bl	800103e <_ZnwjPv>
 8017b4c:	2800      	cmp	r0, #0
 8017b4e:	d004      	beq.n	8017b5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x74>
 8017b50:	462b      	mov	r3, r5
 8017b52:	4622      	mov	r2, r4
 8017b54:	68b9      	ldr	r1, [r7, #8]
 8017b56:	f000 f925 	bl	8017da4 <_ZNSt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>
 8017b5a:	f107 0320 	add.w	r3, r7, #32
 8017b5e:	4618      	mov	r0, r3
 8017b60:	f7ff fea8 	bl	80178b4 <_ZNSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	      _M_pi = __mem;
 8017b64:	68fb      	ldr	r3, [r7, #12]
 8017b66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017b68:	601a      	str	r2, [r3, #0]
	      __guard = nullptr;
 8017b6a:	f107 0314 	add.w	r3, r7, #20
 8017b6e:	2100      	movs	r1, #0
 8017b70:	4618      	mov	r0, r3
 8017b72:	f000 f945 	bl	8017e00 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>
	      auto __guard = std::__allocate_guarded(__a2);
 8017b76:	f107 0314 	add.w	r3, r7, #20
 8017b7a:	4618      	mov	r0, r3
 8017b7c:	f000 f8c4 	bl	8017d08 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 8017b80:	f107 031c 	add.w	r3, r7, #28
 8017b84:	4618      	mov	r0, r3
 8017b86:	f000 f8a0 	bl	8017cca <_ZNSaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
	}
 8017b8a:	68fb      	ldr	r3, [r7, #12]
 8017b8c:	4618      	mov	r0, r3
 8017b8e:	3728      	adds	r7, #40	; 0x28
 8017b90:	46bd      	mov	sp, r7
 8017b92:	bdb0      	pop	{r4, r5, r7, pc}

08017b94 <_ZNSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 8017b94:	b480      	push	{r7}
 8017b96:	b083      	sub	sp, #12
 8017b98:	af00      	add	r7, sp, #0
 8017b9a:	6078      	str	r0, [r7, #4]
 8017b9c:	6039      	str	r1, [r7, #0]
	{ }
 8017b9e:	bf00      	nop
 8017ba0:	370c      	adds	r7, #12
 8017ba2:	46bd      	mov	sp, r7
 8017ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ba8:	4770      	bx	lr

08017baa <_ZN9__gnu_cxx13new_allocatorIN4tama16Stm32TimeMonitorEEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8017baa:	b480      	push	{r7}
 8017bac:	b083      	sub	sp, #12
 8017bae:	af00      	add	r7, sp, #0
 8017bb0:	6078      	str	r0, [r7, #4]
 8017bb2:	6039      	str	r1, [r7, #0]
 8017bb4:	687b      	ldr	r3, [r7, #4]
 8017bb6:	4618      	mov	r0, r3
 8017bb8:	370c      	adds	r7, #12
 8017bba:	46bd      	mov	sp, r7
 8017bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bc0:	4770      	bx	lr

08017bc2 <_ZNSt16allocator_traitsISaIN4tama16Stm32TimeMonitorEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8017bc2:	b580      	push	{r7, lr}
 8017bc4:	b082      	sub	sp, #8
 8017bc6:	af00      	add	r7, sp, #0
 8017bc8:	6078      	str	r0, [r7, #4]
 8017bca:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8017bcc:	2200      	movs	r2, #0
 8017bce:	6839      	ldr	r1, [r7, #0]
 8017bd0:	6878      	ldr	r0, [r7, #4]
 8017bd2:	f000 f944 	bl	8017e5e <_ZN9__gnu_cxx13new_allocatorIN4tama16Stm32TimeMonitorEE8allocateEjPKv>
 8017bd6:	4603      	mov	r3, r0
 8017bd8:	4618      	mov	r0, r3
 8017bda:	3708      	adds	r7, #8
 8017bdc:	46bd      	mov	sp, r7
 8017bde:	bd80      	pop	{r7, pc}

08017be0 <_ZNSt15__allocated_ptrISaIN4tama16Stm32TimeMonitorEEEC1ERS2_PS1_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8017be0:	b580      	push	{r7, lr}
 8017be2:	b084      	sub	sp, #16
 8017be4:	af00      	add	r7, sp, #0
 8017be6:	60f8      	str	r0, [r7, #12]
 8017be8:	60b9      	str	r1, [r7, #8]
 8017bea:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8017bec:	68b8      	ldr	r0, [r7, #8]
 8017bee:	f000 f954 	bl	8017e9a <_ZSt11__addressofISaIN4tama16Stm32TimeMonitorEEEPT_RS3_>
 8017bf2:	4602      	mov	r2, r0
 8017bf4:	68fb      	ldr	r3, [r7, #12]
 8017bf6:	601a      	str	r2, [r3, #0]
 8017bf8:	68fb      	ldr	r3, [r7, #12]
 8017bfa:	687a      	ldr	r2, [r7, #4]
 8017bfc:	605a      	str	r2, [r3, #4]
      { }
 8017bfe:	68fb      	ldr	r3, [r7, #12]
 8017c00:	4618      	mov	r0, r3
 8017c02:	3710      	adds	r7, #16
 8017c04:	46bd      	mov	sp, r7
 8017c06:	bd80      	pop	{r7, pc}

08017c08 <_ZNSt16allocator_traitsISaIN4tama16Stm32TimeMonitorEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8017c08:	b580      	push	{r7, lr}
 8017c0a:	b084      	sub	sp, #16
 8017c0c:	af00      	add	r7, sp, #0
 8017c0e:	60f8      	str	r0, [r7, #12]
 8017c10:	60b9      	str	r1, [r7, #8]
 8017c12:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8017c14:	687a      	ldr	r2, [r7, #4]
 8017c16:	68b9      	ldr	r1, [r7, #8]
 8017c18:	68f8      	ldr	r0, [r7, #12]
 8017c1a:	f000 f949 	bl	8017eb0 <_ZN9__gnu_cxx13new_allocatorIN4tama16Stm32TimeMonitorEE10deallocateEPS2_j>
 8017c1e:	bf00      	nop
 8017c20:	3710      	adds	r7, #16
 8017c22:	46bd      	mov	sp, r7
 8017c24:	bd80      	pop	{r7, pc}

08017c26 <_ZNSt15__allocated_ptrISaIN4tama16Stm32TimeMonitorEEE10_S_raw_ptrEPS1_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 8017c26:	b480      	push	{r7}
 8017c28:	b083      	sub	sp, #12
 8017c2a:	af00      	add	r7, sp, #0
 8017c2c:	6078      	str	r0, [r7, #4]
 8017c2e:	687b      	ldr	r3, [r7, #4]
 8017c30:	4618      	mov	r0, r3
 8017c32:	370c      	adds	r7, #12
 8017c34:	46bd      	mov	sp, r7
 8017c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c3a:	4770      	bx	lr

08017c3c <_ZN4tama11TimeMonitorC1Ev>:
#ifndef VPET_TIMEMONITOR_H
#define VPET_TIMEMONITOR_H

namespace tama
{
    class TimeMonitor
 8017c3c:	b480      	push	{r7}
 8017c3e:	b083      	sub	sp, #12
 8017c40:	af00      	add	r7, sp, #0
 8017c42:	6078      	str	r0, [r7, #4]
 8017c44:	4a04      	ldr	r2, [pc, #16]	; (8017c58 <_ZN4tama11TimeMonitorC1Ev+0x1c>)
 8017c46:	687b      	ldr	r3, [r7, #4]
 8017c48:	601a      	str	r2, [r3, #0]
 8017c4a:	687b      	ldr	r3, [r7, #4]
 8017c4c:	4618      	mov	r0, r3
 8017c4e:	370c      	adds	r7, #12
 8017c50:	46bd      	mov	sp, r7
 8017c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c56:	4770      	bx	lr
 8017c58:	080249a0 	.word	0x080249a0

08017c5c <_ZN4tama16Stm32TimeMonitorC1Ev>:
#include "../../Core/time/time-monitor/TimeMonitor.h"
#include <stm32f4xx_hal.h>

namespace tama
{
    class Stm32TimeMonitor : public TimeMonitor
 8017c5c:	b580      	push	{r7, lr}
 8017c5e:	b082      	sub	sp, #8
 8017c60:	af00      	add	r7, sp, #0
 8017c62:	6078      	str	r0, [r7, #4]
 8017c64:	687b      	ldr	r3, [r7, #4]
 8017c66:	4618      	mov	r0, r3
 8017c68:	f7ff ffe8 	bl	8017c3c <_ZN4tama11TimeMonitorC1Ev>
 8017c6c:	4a03      	ldr	r2, [pc, #12]	; (8017c7c <_ZN4tama16Stm32TimeMonitorC1Ev+0x20>)
 8017c6e:	687b      	ldr	r3, [r7, #4]
 8017c70:	601a      	str	r2, [r3, #0]
 8017c72:	687b      	ldr	r3, [r7, #4]
 8017c74:	4618      	mov	r0, r3
 8017c76:	3708      	adds	r7, #8
 8017c78:	46bd      	mov	sp, r7
 8017c7a:	bd80      	pop	{r7, pc}
 8017c7c:	08024968 	.word	0x08024968

08017c80 <_ZN9__gnu_cxx13new_allocatorIN4tama16Stm32TimeMonitorEE9constructIS2_JEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8017c80:	b580      	push	{r7, lr}
 8017c82:	b082      	sub	sp, #8
 8017c84:	af00      	add	r7, sp, #0
 8017c86:	6078      	str	r0, [r7, #4]
 8017c88:	6039      	str	r1, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8017c8a:	683b      	ldr	r3, [r7, #0]
 8017c8c:	4619      	mov	r1, r3
 8017c8e:	2008      	movs	r0, #8
 8017c90:	f7e9 f9d5 	bl	800103e <_ZnwjPv>
 8017c94:	4603      	mov	r3, r0
 8017c96:	2b00      	cmp	r3, #0
 8017c98:	d006      	beq.n	8017ca8 <_ZN9__gnu_cxx13new_allocatorIN4tama16Stm32TimeMonitorEE9constructIS2_JEEEvPT_DpOT0_+0x28>
 8017c9a:	2200      	movs	r2, #0
 8017c9c:	601a      	str	r2, [r3, #0]
 8017c9e:	2200      	movs	r2, #0
 8017ca0:	605a      	str	r2, [r3, #4]
 8017ca2:	4618      	mov	r0, r3
 8017ca4:	f7ff ffda 	bl	8017c5c <_ZN4tama16Stm32TimeMonitorC1Ev>
 8017ca8:	bf00      	nop
 8017caa:	3708      	adds	r7, #8
 8017cac:	46bd      	mov	sp, r7
 8017cae:	bd80      	pop	{r7, pc}

08017cb0 <_ZNSaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) throw() { }
 8017cb0:	b580      	push	{r7, lr}
 8017cb2:	b082      	sub	sp, #8
 8017cb4:	af00      	add	r7, sp, #0
 8017cb6:	6078      	str	r0, [r7, #4]
 8017cb8:	6039      	str	r1, [r7, #0]
 8017cba:	6878      	ldr	r0, [r7, #4]
 8017cbc:	f000 f905 	bl	8017eca <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>
 8017cc0:	687b      	ldr	r3, [r7, #4]
 8017cc2:	4618      	mov	r0, r3
 8017cc4:	3708      	adds	r7, #8
 8017cc6:	46bd      	mov	sp, r7
 8017cc8:	bd80      	pop	{r7, pc}

08017cca <_ZNSaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>:
      ~allocator() throw() { }
 8017cca:	b580      	push	{r7, lr}
 8017ccc:	b082      	sub	sp, #8
 8017cce:	af00      	add	r7, sp, #0
 8017cd0:	6078      	str	r0, [r7, #4]
 8017cd2:	6878      	ldr	r0, [r7, #4]
 8017cd4:	f000 f904 	bl	8017ee0 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>
 8017cd8:	687b      	ldr	r3, [r7, #4]
 8017cda:	4618      	mov	r0, r3
 8017cdc:	3708      	adds	r7, #8
 8017cde:	46bd      	mov	sp, r7
 8017ce0:	bd80      	pop	{r7, pc}

08017ce2 <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>:
    __allocate_guarded(_Alloc& __a)
 8017ce2:	b580      	push	{r7, lr}
 8017ce4:	b082      	sub	sp, #8
 8017ce6:	af00      	add	r7, sp, #0
 8017ce8:	6078      	str	r0, [r7, #4]
 8017cea:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 8017cec:	2101      	movs	r1, #1
 8017cee:	6838      	ldr	r0, [r7, #0]
 8017cf0:	f000 f901 	bl	8017ef6 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>
 8017cf4:	4603      	mov	r3, r0
 8017cf6:	461a      	mov	r2, r3
 8017cf8:	6839      	ldr	r1, [r7, #0]
 8017cfa:	6878      	ldr	r0, [r7, #4]
 8017cfc:	f000 f90a 	bl	8017f14 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
    }
 8017d00:	6878      	ldr	r0, [r7, #4]
 8017d02:	3708      	adds	r7, #8
 8017d04:	46bd      	mov	sp, r7
 8017d06:	bd80      	pop	{r7, pc}

08017d08 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>:
      ~__allocated_ptr()
 8017d08:	b580      	push	{r7, lr}
 8017d0a:	b082      	sub	sp, #8
 8017d0c:	af00      	add	r7, sp, #0
 8017d0e:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8017d10:	687b      	ldr	r3, [r7, #4]
 8017d12:	685b      	ldr	r3, [r3, #4]
 8017d14:	2b00      	cmp	r3, #0
 8017d16:	d007      	beq.n	8017d28 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8017d18:	687b      	ldr	r3, [r7, #4]
 8017d1a:	6818      	ldr	r0, [r3, #0]
 8017d1c:	687b      	ldr	r3, [r7, #4]
 8017d1e:	685b      	ldr	r3, [r3, #4]
 8017d20:	2201      	movs	r2, #1
 8017d22:	4619      	mov	r1, r3
 8017d24:	f000 f90a 	bl	8017f3c <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>
      }
 8017d28:	687b      	ldr	r3, [r7, #4]
 8017d2a:	4618      	mov	r0, r3
 8017d2c:	3708      	adds	r7, #8
 8017d2e:	46bd      	mov	sp, r7
 8017d30:	bd80      	pop	{r7, pc}

08017d32 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 8017d32:	b580      	push	{r7, lr}
 8017d34:	b082      	sub	sp, #8
 8017d36:	af00      	add	r7, sp, #0
 8017d38:	6078      	str	r0, [r7, #4]
 8017d3a:	687b      	ldr	r3, [r7, #4]
 8017d3c:	685b      	ldr	r3, [r3, #4]
 8017d3e:	4618      	mov	r0, r3
 8017d40:	f000 f90b 	bl	8017f5a <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>
 8017d44:	4603      	mov	r3, r0
 8017d46:	4618      	mov	r0, r3
 8017d48:	3708      	adds	r7, #8
 8017d4a:	46bd      	mov	sp, r7
 8017d4c:	bd80      	pop	{r7, pc}

08017d4e <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, false>
 8017d4e:	b580      	push	{r7, lr}
 8017d50:	b082      	sub	sp, #8
 8017d52:	af00      	add	r7, sp, #0
 8017d54:	6078      	str	r0, [r7, #4]
 8017d56:	687b      	ldr	r3, [r7, #4]
 8017d58:	4618      	mov	r0, r3
 8017d5a:	f7ff fdab 	bl	80178b4 <_ZNSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 8017d5e:	687b      	ldr	r3, [r7, #4]
 8017d60:	4618      	mov	r0, r3
 8017d62:	3708      	adds	r7, #8
 8017d64:	46bd      	mov	sp, r7
 8017d66:	bd80      	pop	{r7, pc}

08017d68 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama16Stm32TimeMonitorEELb1EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp
 8017d68:	b580      	push	{r7, lr}
 8017d6a:	b082      	sub	sp, #8
 8017d6c:	af00      	add	r7, sp, #0
 8017d6e:	6078      	str	r0, [r7, #4]
 8017d70:	6878      	ldr	r0, [r7, #4]
 8017d72:	f7ff fd40 	bl	80177f6 <_ZNSaIN4tama16Stm32TimeMonitorEED1Ev>
 8017d76:	687b      	ldr	r3, [r7, #4]
 8017d78:	4618      	mov	r0, r3
 8017d7a:	3708      	adds	r7, #8
 8017d7c:	46bd      	mov	sp, r7
 8017d7e:	bd80      	pop	{r7, pc}

08017d80 <_ZNSt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>:
      class _Impl : _Sp_ebo_helper<0, _Deleter>, _Sp_ebo_helper<1, _Alloc>
 8017d80:	b580      	push	{r7, lr}
 8017d82:	b082      	sub	sp, #8
 8017d84:	af00      	add	r7, sp, #0
 8017d86:	6078      	str	r0, [r7, #4]
 8017d88:	687b      	ldr	r3, [r7, #4]
 8017d8a:	3301      	adds	r3, #1
 8017d8c:	4618      	mov	r0, r3
 8017d8e:	f7ff ffeb 	bl	8017d68 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama16Stm32TimeMonitorEELb1EED1Ev>
 8017d92:	687b      	ldr	r3, [r7, #4]
 8017d94:	4618      	mov	r0, r3
 8017d96:	f7ff ffda 	bl	8017d4e <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>
 8017d9a:	687b      	ldr	r3, [r7, #4]
 8017d9c:	4618      	mov	r0, r3
 8017d9e:	3708      	adds	r7, #8
 8017da0:	46bd      	mov	sp, r7
 8017da2:	bd80      	pop	{r7, pc}

08017da4 <_ZNSt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 8017da4:	b590      	push	{r4, r7, lr}
 8017da6:	b087      	sub	sp, #28
 8017da8:	af00      	add	r7, sp, #0
 8017daa:	60f8      	str	r0, [r7, #12]
 8017dac:	60b9      	str	r1, [r7, #8]
 8017dae:	607a      	str	r2, [r7, #4]
 8017db0:	603b      	str	r3, [r7, #0]
      : _M_impl(__p, std::move(__d), __a) { }
 8017db2:	68fb      	ldr	r3, [r7, #12]
 8017db4:	4618      	mov	r0, r3
 8017db6:	f7ec fcc7 	bl	8004748 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8017dba:	4a10      	ldr	r2, [pc, #64]	; (8017dfc <_ZNSt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_+0x58>)
 8017dbc:	68fb      	ldr	r3, [r7, #12]
 8017dbe:	601a      	str	r2, [r3, #0]
 8017dc0:	68fb      	ldr	r3, [r7, #12]
 8017dc2:	f103 040c 	add.w	r4, r3, #12
 8017dc6:	6878      	ldr	r0, [r7, #4]
 8017dc8:	f7ff fe67 	bl	8017a9a <_ZSt4moveIRNSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8017dcc:	4602      	mov	r2, r0
 8017dce:	f107 0314 	add.w	r3, r7, #20
 8017dd2:	4611      	mov	r1, r2
 8017dd4:	4618      	mov	r0, r3
 8017dd6:	f7ff fe6b 	bl	8017ab0 <_ZNSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 8017dda:	f107 0214 	add.w	r2, r7, #20
 8017dde:	683b      	ldr	r3, [r7, #0]
 8017de0:	68b9      	ldr	r1, [r7, #8]
 8017de2:	4620      	mov	r0, r4
 8017de4:	f000 f8c4 	bl	8017f70 <_ZNSt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>
 8017de8:	f107 0314 	add.w	r3, r7, #20
 8017dec:	4618      	mov	r0, r3
 8017dee:	f7ff fd61 	bl	80178b4 <_ZNSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 8017df2:	68fb      	ldr	r3, [r7, #12]
 8017df4:	4618      	mov	r0, r3
 8017df6:	371c      	adds	r7, #28
 8017df8:	46bd      	mov	sp, r7
 8017dfa:	bd90      	pop	{r4, r7, pc}
 8017dfc:	08024978 	.word	0x08024978

08017e00 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 8017e00:	b480      	push	{r7}
 8017e02:	b083      	sub	sp, #12
 8017e04:	af00      	add	r7, sp, #0
 8017e06:	6078      	str	r0, [r7, #4]
 8017e08:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 8017e0a:	687b      	ldr	r3, [r7, #4]
 8017e0c:	2200      	movs	r2, #0
 8017e0e:	605a      	str	r2, [r3, #4]
	return *this;
 8017e10:	687b      	ldr	r3, [r7, #4]
      }
 8017e12:	4618      	mov	r0, r3
 8017e14:	370c      	adds	r7, #12
 8017e16:	46bd      	mov	sp, r7
 8017e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e1c:	4770      	bx	lr

08017e1e <_ZNSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>:
          void operator()(typename _Alloc::value_type* __ptr)
 8017e1e:	b590      	push	{r4, r7, lr}
 8017e20:	b085      	sub	sp, #20
 8017e22:	af00      	add	r7, sp, #0
 8017e24:	6078      	str	r0, [r7, #4]
 8017e26:	6039      	str	r1, [r7, #0]
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 8017e28:	6879      	ldr	r1, [r7, #4]
 8017e2a:	f107 0308 	add.w	r3, r7, #8
 8017e2e:	683a      	ldr	r2, [r7, #0]
 8017e30:	4618      	mov	r0, r3
 8017e32:	f7ff fed5 	bl	8017be0 <_ZNSt15__allocated_ptrISaIN4tama16Stm32TimeMonitorEEEC1ERS2_PS1_>
	    allocator_traits<_Alloc>::destroy(_M_alloc, __guard.get());
 8017e36:	687c      	ldr	r4, [r7, #4]
 8017e38:	f107 0308 	add.w	r3, r7, #8
 8017e3c:	4618      	mov	r0, r3
 8017e3e:	f7ff fe02 	bl	8017a46 <_ZNSt15__allocated_ptrISaIN4tama16Stm32TimeMonitorEEE3getEv>
 8017e42:	4603      	mov	r3, r0
 8017e44:	4619      	mov	r1, r3
 8017e46:	4620      	mov	r0, r4
 8017e48:	f000 f8b0 	bl	8017fac <_ZNSt16allocator_traitsISaIN4tama16Stm32TimeMonitorEEE7destroyIS1_EEvRS2_PT_>
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 8017e4c:	f107 0308 	add.w	r3, r7, #8
 8017e50:	4618      	mov	r0, r3
 8017e52:	f7ff fde3 	bl	8017a1c <_ZNSt15__allocated_ptrISaIN4tama16Stm32TimeMonitorEEED1Ev>
          }
 8017e56:	bf00      	nop
 8017e58:	3714      	adds	r7, #20
 8017e5a:	46bd      	mov	sp, r7
 8017e5c:	bd90      	pop	{r4, r7, pc}

08017e5e <_ZN9__gnu_cxx13new_allocatorIN4tama16Stm32TimeMonitorEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8017e5e:	b580      	push	{r7, lr}
 8017e60:	b084      	sub	sp, #16
 8017e62:	af00      	add	r7, sp, #0
 8017e64:	60f8      	str	r0, [r7, #12]
 8017e66:	60b9      	str	r1, [r7, #8]
 8017e68:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8017e6a:	68f8      	ldr	r0, [r7, #12]
 8017e6c:	f000 f8ab 	bl	8017fc6 <_ZNK9__gnu_cxx13new_allocatorIN4tama16Stm32TimeMonitorEE8max_sizeEv>
 8017e70:	4602      	mov	r2, r0
 8017e72:	68bb      	ldr	r3, [r7, #8]
 8017e74:	4293      	cmp	r3, r2
 8017e76:	bf8c      	ite	hi
 8017e78:	2301      	movhi	r3, #1
 8017e7a:	2300      	movls	r3, #0
 8017e7c:	b2db      	uxtb	r3, r3
 8017e7e:	2b00      	cmp	r3, #0
 8017e80:	d001      	beq.n	8017e86 <_ZN9__gnu_cxx13new_allocatorIN4tama16Stm32TimeMonitorEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8017e82:	f007 fd4a 	bl	801f91a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8017e86:	68bb      	ldr	r3, [r7, #8]
 8017e88:	00db      	lsls	r3, r3, #3
 8017e8a:	4618      	mov	r0, r3
 8017e8c:	f007 fd17 	bl	801f8be <_Znwj>
 8017e90:	4603      	mov	r3, r0
      }
 8017e92:	4618      	mov	r0, r3
 8017e94:	3710      	adds	r7, #16
 8017e96:	46bd      	mov	sp, r7
 8017e98:	bd80      	pop	{r7, pc}

08017e9a <_ZSt11__addressofISaIN4tama16Stm32TimeMonitorEEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8017e9a:	b480      	push	{r7}
 8017e9c:	b083      	sub	sp, #12
 8017e9e:	af00      	add	r7, sp, #0
 8017ea0:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8017ea2:	687b      	ldr	r3, [r7, #4]
 8017ea4:	4618      	mov	r0, r3
 8017ea6:	370c      	adds	r7, #12
 8017ea8:	46bd      	mov	sp, r7
 8017eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017eae:	4770      	bx	lr

08017eb0 <_ZN9__gnu_cxx13new_allocatorIN4tama16Stm32TimeMonitorEE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 8017eb0:	b580      	push	{r7, lr}
 8017eb2:	b084      	sub	sp, #16
 8017eb4:	af00      	add	r7, sp, #0
 8017eb6:	60f8      	str	r0, [r7, #12]
 8017eb8:	60b9      	str	r1, [r7, #8]
 8017eba:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8017ebc:	68b8      	ldr	r0, [r7, #8]
 8017ebe:	f007 fd17 	bl	801f8f0 <_ZdlPv>
      }
 8017ec2:	bf00      	nop
 8017ec4:	3710      	adds	r7, #16
 8017ec6:	46bd      	mov	sp, r7
 8017ec8:	bd80      	pop	{r7, pc}

08017eca <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8017eca:	b480      	push	{r7}
 8017ecc:	b083      	sub	sp, #12
 8017ece:	af00      	add	r7, sp, #0
 8017ed0:	6078      	str	r0, [r7, #4]
 8017ed2:	687b      	ldr	r3, [r7, #4]
 8017ed4:	4618      	mov	r0, r3
 8017ed6:	370c      	adds	r7, #12
 8017ed8:	46bd      	mov	sp, r7
 8017eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ede:	4770      	bx	lr

08017ee0 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8017ee0:	b480      	push	{r7}
 8017ee2:	b083      	sub	sp, #12
 8017ee4:	af00      	add	r7, sp, #0
 8017ee6:	6078      	str	r0, [r7, #4]
 8017ee8:	687b      	ldr	r3, [r7, #4]
 8017eea:	4618      	mov	r0, r3
 8017eec:	370c      	adds	r7, #12
 8017eee:	46bd      	mov	sp, r7
 8017ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ef4:	4770      	bx	lr

08017ef6 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>:
      allocate(allocator_type& __a, size_type __n)
 8017ef6:	b580      	push	{r7, lr}
 8017ef8:	b082      	sub	sp, #8
 8017efa:	af00      	add	r7, sp, #0
 8017efc:	6078      	str	r0, [r7, #4]
 8017efe:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8017f00:	2200      	movs	r2, #0
 8017f02:	6839      	ldr	r1, [r7, #0]
 8017f04:	6878      	ldr	r0, [r7, #4]
 8017f06:	f000 f86a 	bl	8017fde <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>
 8017f0a:	4603      	mov	r3, r0
 8017f0c:	4618      	mov	r0, r3
 8017f0e:	3708      	adds	r7, #8
 8017f10:	46bd      	mov	sp, r7
 8017f12:	bd80      	pop	{r7, pc}

08017f14 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8017f14:	b580      	push	{r7, lr}
 8017f16:	b084      	sub	sp, #16
 8017f18:	af00      	add	r7, sp, #0
 8017f1a:	60f8      	str	r0, [r7, #12]
 8017f1c:	60b9      	str	r1, [r7, #8]
 8017f1e:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8017f20:	68b8      	ldr	r0, [r7, #8]
 8017f22:	f000 f87d 	bl	8018020 <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>
 8017f26:	4602      	mov	r2, r0
 8017f28:	68fb      	ldr	r3, [r7, #12]
 8017f2a:	601a      	str	r2, [r3, #0]
 8017f2c:	68fb      	ldr	r3, [r7, #12]
 8017f2e:	687a      	ldr	r2, [r7, #4]
 8017f30:	605a      	str	r2, [r3, #4]
      { }
 8017f32:	68fb      	ldr	r3, [r7, #12]
 8017f34:	4618      	mov	r0, r3
 8017f36:	3710      	adds	r7, #16
 8017f38:	46bd      	mov	sp, r7
 8017f3a:	bd80      	pop	{r7, pc}

08017f3c <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8017f3c:	b580      	push	{r7, lr}
 8017f3e:	b084      	sub	sp, #16
 8017f40:	af00      	add	r7, sp, #0
 8017f42:	60f8      	str	r0, [r7, #12]
 8017f44:	60b9      	str	r1, [r7, #8]
 8017f46:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8017f48:	687a      	ldr	r2, [r7, #4]
 8017f4a:	68b9      	ldr	r1, [r7, #8]
 8017f4c:	68f8      	ldr	r0, [r7, #12]
 8017f4e:	f000 f872 	bl	8018036 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>
 8017f52:	bf00      	nop
 8017f54:	3710      	adds	r7, #16
 8017f56:	46bd      	mov	sp, r7
 8017f58:	bd80      	pop	{r7, pc}

08017f5a <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 8017f5a:	b480      	push	{r7}
 8017f5c:	b083      	sub	sp, #12
 8017f5e:	af00      	add	r7, sp, #0
 8017f60:	6078      	str	r0, [r7, #4]
 8017f62:	687b      	ldr	r3, [r7, #4]
 8017f64:	4618      	mov	r0, r3
 8017f66:	370c      	adds	r7, #12
 8017f68:	46bd      	mov	sp, r7
 8017f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f6e:	4770      	bx	lr

08017f70 <_ZNSt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 8017f70:	b590      	push	{r4, r7, lr}
 8017f72:	b085      	sub	sp, #20
 8017f74:	af00      	add	r7, sp, #0
 8017f76:	60f8      	str	r0, [r7, #12]
 8017f78:	60b9      	str	r1, [r7, #8]
 8017f7a:	607a      	str	r2, [r7, #4]
 8017f7c:	603b      	str	r3, [r7, #0]
	: _M_ptr(__p), _Del_base(std::move(__d)), _Alloc_base(__a)
 8017f7e:	68fc      	ldr	r4, [r7, #12]
 8017f80:	6878      	ldr	r0, [r7, #4]
 8017f82:	f7ff fd8a 	bl	8017a9a <_ZSt4moveIRNSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8017f86:	4603      	mov	r3, r0
 8017f88:	4619      	mov	r1, r3
 8017f8a:	4620      	mov	r0, r4
 8017f8c:	f000 f860 	bl	8018050 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>
 8017f90:	68fb      	ldr	r3, [r7, #12]
 8017f92:	3301      	adds	r3, #1
 8017f94:	6839      	ldr	r1, [r7, #0]
 8017f96:	4618      	mov	r0, r3
 8017f98:	f000 f86d 	bl	8018076 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama16Stm32TimeMonitorEELb1EEC1ERKS2_>
 8017f9c:	68fb      	ldr	r3, [r7, #12]
 8017f9e:	68ba      	ldr	r2, [r7, #8]
 8017fa0:	605a      	str	r2, [r3, #4]
	{ }
 8017fa2:	68fb      	ldr	r3, [r7, #12]
 8017fa4:	4618      	mov	r0, r3
 8017fa6:	3714      	adds	r7, #20
 8017fa8:	46bd      	mov	sp, r7
 8017faa:	bd90      	pop	{r4, r7, pc}

08017fac <_ZNSt16allocator_traitsISaIN4tama16Stm32TimeMonitorEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 8017fac:	b580      	push	{r7, lr}
 8017fae:	b082      	sub	sp, #8
 8017fb0:	af00      	add	r7, sp, #0
 8017fb2:	6078      	str	r0, [r7, #4]
 8017fb4:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 8017fb6:	6839      	ldr	r1, [r7, #0]
 8017fb8:	6878      	ldr	r0, [r7, #4]
 8017fba:	f000 f86a 	bl	8018092 <_ZN9__gnu_cxx13new_allocatorIN4tama16Stm32TimeMonitorEE7destroyIS2_EEvPT_>
 8017fbe:	bf00      	nop
 8017fc0:	3708      	adds	r7, #8
 8017fc2:	46bd      	mov	sp, r7
 8017fc4:	bd80      	pop	{r7, pc}

08017fc6 <_ZNK9__gnu_cxx13new_allocatorIN4tama16Stm32TimeMonitorEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8017fc6:	b480      	push	{r7}
 8017fc8:	b083      	sub	sp, #12
 8017fca:	af00      	add	r7, sp, #0
 8017fcc:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8017fce:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8017fd2:	4618      	mov	r0, r3
 8017fd4:	370c      	adds	r7, #12
 8017fd6:	46bd      	mov	sp, r7
 8017fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fdc:	4770      	bx	lr

08017fde <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8017fde:	b580      	push	{r7, lr}
 8017fe0:	b084      	sub	sp, #16
 8017fe2:	af00      	add	r7, sp, #0
 8017fe4:	60f8      	str	r0, [r7, #12]
 8017fe6:	60b9      	str	r1, [r7, #8]
 8017fe8:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8017fea:	68f8      	ldr	r0, [r7, #12]
 8017fec:	f000 f85c 	bl	80180a8 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>
 8017ff0:	4602      	mov	r2, r0
 8017ff2:	68bb      	ldr	r3, [r7, #8]
 8017ff4:	4293      	cmp	r3, r2
 8017ff6:	bf8c      	ite	hi
 8017ff8:	2301      	movhi	r3, #1
 8017ffa:	2300      	movls	r3, #0
 8017ffc:	b2db      	uxtb	r3, r3
 8017ffe:	2b00      	cmp	r3, #0
 8018000:	d001      	beq.n	8018006 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8018002:	f007 fc8a 	bl	801f91a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8018006:	68ba      	ldr	r2, [r7, #8]
 8018008:	4613      	mov	r3, r2
 801800a:	009b      	lsls	r3, r3, #2
 801800c:	4413      	add	r3, r2
 801800e:	009b      	lsls	r3, r3, #2
 8018010:	4618      	mov	r0, r3
 8018012:	f007 fc54 	bl	801f8be <_Znwj>
 8018016:	4603      	mov	r3, r0
      }
 8018018:	4618      	mov	r0, r3
 801801a:	3710      	adds	r7, #16
 801801c:	46bd      	mov	sp, r7
 801801e:	bd80      	pop	{r7, pc}

08018020 <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8018020:	b480      	push	{r7}
 8018022:	b083      	sub	sp, #12
 8018024:	af00      	add	r7, sp, #0
 8018026:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8018028:	687b      	ldr	r3, [r7, #4]
 801802a:	4618      	mov	r0, r3
 801802c:	370c      	adds	r7, #12
 801802e:	46bd      	mov	sp, r7
 8018030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018034:	4770      	bx	lr

08018036 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>:
      deallocate(pointer __p, size_type)
 8018036:	b580      	push	{r7, lr}
 8018038:	b084      	sub	sp, #16
 801803a:	af00      	add	r7, sp, #0
 801803c:	60f8      	str	r0, [r7, #12]
 801803e:	60b9      	str	r1, [r7, #8]
 8018040:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8018042:	68b8      	ldr	r0, [r7, #8]
 8018044:	f007 fc54 	bl	801f8f0 <_ZdlPv>
      }
 8018048:	bf00      	nop
 801804a:	3710      	adds	r7, #16
 801804c:	46bd      	mov	sp, r7
 801804e:	bd80      	pop	{r7, pc}

08018050 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _M_tp(std::move(__tp)) { }
 8018050:	b590      	push	{r4, r7, lr}
 8018052:	b083      	sub	sp, #12
 8018054:	af00      	add	r7, sp, #0
 8018056:	6078      	str	r0, [r7, #4]
 8018058:	6039      	str	r1, [r7, #0]
 801805a:	687c      	ldr	r4, [r7, #4]
 801805c:	6838      	ldr	r0, [r7, #0]
 801805e:	f7ff fd1c 	bl	8017a9a <_ZSt4moveIRNSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8018062:	4603      	mov	r3, r0
 8018064:	4619      	mov	r1, r3
 8018066:	4620      	mov	r0, r4
 8018068:	f7ff fd22 	bl	8017ab0 <_ZNSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 801806c:	687b      	ldr	r3, [r7, #4]
 801806e:	4618      	mov	r0, r3
 8018070:	370c      	adds	r7, #12
 8018072:	46bd      	mov	sp, r7
 8018074:	bd90      	pop	{r4, r7, pc}

08018076 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama16Stm32TimeMonitorEELb1EEC1ERKS2_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 8018076:	b580      	push	{r7, lr}
 8018078:	b082      	sub	sp, #8
 801807a:	af00      	add	r7, sp, #0
 801807c:	6078      	str	r0, [r7, #4]
 801807e:	6039      	str	r1, [r7, #0]
 8018080:	6839      	ldr	r1, [r7, #0]
 8018082:	6878      	ldr	r0, [r7, #4]
 8018084:	f7ff fca9 	bl	80179da <_ZNSaIN4tama16Stm32TimeMonitorEEC1ERKS1_>
 8018088:	687b      	ldr	r3, [r7, #4]
 801808a:	4618      	mov	r0, r3
 801808c:	3708      	adds	r7, #8
 801808e:	46bd      	mov	sp, r7
 8018090:	bd80      	pop	{r7, pc}

08018092 <_ZN9__gnu_cxx13new_allocatorIN4tama16Stm32TimeMonitorEE7destroyIS2_EEvPT_>:
	destroy(_Up* __p) { __p->~_Up(); }
 8018092:	b480      	push	{r7}
 8018094:	b083      	sub	sp, #12
 8018096:	af00      	add	r7, sp, #0
 8018098:	6078      	str	r0, [r7, #4]
 801809a:	6039      	str	r1, [r7, #0]
 801809c:	bf00      	nop
 801809e:	370c      	adds	r7, #12
 80180a0:	46bd      	mov	sp, r7
 80180a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180a6:	4770      	bx	lr

080180a8 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80180a8:	b480      	push	{r7}
 80180aa:	b083      	sub	sp, #12
 80180ac:	af00      	add	r7, sp, #0
 80180ae:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 80180b0:	4b03      	ldr	r3, [pc, #12]	; (80180c0 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv+0x18>)
 80180b2:	4618      	mov	r0, r3
 80180b4:	370c      	adds	r7, #12
 80180b6:	46bd      	mov	sp, r7
 80180b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180bc:	4770      	bx	lr
 80180be:	bf00      	nop
 80180c0:	0ccccccc 	.word	0x0ccccccc

080180c4 <_ZNSt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 80180c4:	b580      	push	{r7, lr}
 80180c6:	b082      	sub	sp, #8
 80180c8:	af00      	add	r7, sp, #0
 80180ca:	6078      	str	r0, [r7, #4]
 80180cc:	4a08      	ldr	r2, [pc, #32]	; (80180f0 <_ZNSt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev+0x2c>)
 80180ce:	687b      	ldr	r3, [r7, #4]
 80180d0:	601a      	str	r2, [r3, #0]
 80180d2:	687b      	ldr	r3, [r7, #4]
 80180d4:	330c      	adds	r3, #12
 80180d6:	4618      	mov	r0, r3
 80180d8:	f7ff fe52 	bl	8017d80 <_ZNSt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>
 80180dc:	687b      	ldr	r3, [r7, #4]
 80180de:	4618      	mov	r0, r3
 80180e0:	f7eb feb8 	bl	8003e54 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80180e4:	687b      	ldr	r3, [r7, #4]
 80180e6:	4618      	mov	r0, r3
 80180e8:	3708      	adds	r7, #8
 80180ea:	46bd      	mov	sp, r7
 80180ec:	bd80      	pop	{r7, pc}
 80180ee:	bf00      	nop
 80180f0:	08024978 	.word	0x08024978

080180f4 <_ZNSt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
 80180f4:	b580      	push	{r7, lr}
 80180f6:	b082      	sub	sp, #8
 80180f8:	af00      	add	r7, sp, #0
 80180fa:	6078      	str	r0, [r7, #4]
 80180fc:	6878      	ldr	r0, [r7, #4]
 80180fe:	f7ff ffe1 	bl	80180c4 <_ZNSt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
 8018102:	2114      	movs	r1, #20
 8018104:	6878      	ldr	r0, [r7, #4]
 8018106:	f007 fbd8 	bl	801f8ba <_ZdlPvj>
 801810a:	687b      	ldr	r3, [r7, #4]
 801810c:	4618      	mov	r0, r3
 801810e:	3708      	adds	r7, #8
 8018110:	46bd      	mov	sp, r7
 8018112:	bd80      	pop	{r7, pc}

08018114 <_ZNSt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8018114:	b580      	push	{r7, lr}
 8018116:	b082      	sub	sp, #8
 8018118:	af00      	add	r7, sp, #0
 801811a:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 801811c:	687b      	ldr	r3, [r7, #4]
 801811e:	330c      	adds	r3, #12
 8018120:	4618      	mov	r0, r3
 8018122:	f000 f840 	bl	80181a6 <_ZNSt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>
 8018126:	4602      	mov	r2, r0
 8018128:	687b      	ldr	r3, [r7, #4]
 801812a:	691b      	ldr	r3, [r3, #16]
 801812c:	4619      	mov	r1, r3
 801812e:	4610      	mov	r0, r2
 8018130:	f7ff fe75 	bl	8017e1e <_ZNSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>
 8018134:	bf00      	nop
 8018136:	3708      	adds	r7, #8
 8018138:	46bd      	mov	sp, r7
 801813a:	bd80      	pop	{r7, pc}

0801813c <_ZNSt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      _M_destroy() noexcept
 801813c:	b580      	push	{r7, lr}
 801813e:	b086      	sub	sp, #24
 8018140:	af00      	add	r7, sp, #0
 8018142:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 8018144:	687b      	ldr	r3, [r7, #4]
 8018146:	330c      	adds	r3, #12
 8018148:	4618      	mov	r0, r3
 801814a:	f000 f839 	bl	80181c0 <_ZNSt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>
 801814e:	4602      	mov	r2, r0
 8018150:	f107 0314 	add.w	r3, r7, #20
 8018154:	4611      	mov	r1, r2
 8018156:	4618      	mov	r0, r3
 8018158:	f7ff fdaa 	bl	8017cb0 <_ZNSaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 801815c:	f107 0114 	add.w	r1, r7, #20
 8018160:	f107 030c 	add.w	r3, r7, #12
 8018164:	687a      	ldr	r2, [r7, #4]
 8018166:	4618      	mov	r0, r3
 8018168:	f7ff fed4 	bl	8017f14 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
	this->~_Sp_counted_deleter();
 801816c:	6878      	ldr	r0, [r7, #4]
 801816e:	f7ff ffa9 	bl	80180c4 <_ZNSt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8018172:	f107 030c 	add.w	r3, r7, #12
 8018176:	4618      	mov	r0, r3
 8018178:	f7ff fdc6 	bl	8017d08 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	__allocator_type __a(_M_impl._M_alloc());
 801817c:	f107 0314 	add.w	r3, r7, #20
 8018180:	4618      	mov	r0, r3
 8018182:	f7ff fda2 	bl	8017cca <_ZNSaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
      }
 8018186:	bf00      	nop
 8018188:	3718      	adds	r7, #24
 801818a:	46bd      	mov	sp, r7
 801818c:	bd80      	pop	{r7, pc}

0801818e <_ZNSt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept
 801818e:	b480      	push	{r7}
 8018190:	b083      	sub	sp, #12
 8018192:	af00      	add	r7, sp, #0
 8018194:	6078      	str	r0, [r7, #4]
 8018196:	6039      	str	r1, [r7, #0]
        return nullptr;
 8018198:	2300      	movs	r3, #0
      }
 801819a:	4618      	mov	r0, r3
 801819c:	370c      	adds	r7, #12
 801819e:	46bd      	mov	sp, r7
 80181a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181a4:	4770      	bx	lr

080181a6 <_ZNSt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 80181a6:	b580      	push	{r7, lr}
 80181a8:	b082      	sub	sp, #8
 80181aa:	af00      	add	r7, sp, #0
 80181ac:	6078      	str	r0, [r7, #4]
 80181ae:	687b      	ldr	r3, [r7, #4]
 80181b0:	4618      	mov	r0, r3
 80181b2:	f000 f813 	bl	80181dc <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>
 80181b6:	4603      	mov	r3, r0
 80181b8:	4618      	mov	r0, r3
 80181ba:	3708      	adds	r7, #8
 80181bc:	46bd      	mov	sp, r7
 80181be:	bd80      	pop	{r7, pc}

080181c0 <_ZNSt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 80181c0:	b580      	push	{r7, lr}
 80181c2:	b082      	sub	sp, #8
 80181c4:	af00      	add	r7, sp, #0
 80181c6:	6078      	str	r0, [r7, #4]
 80181c8:	687b      	ldr	r3, [r7, #4]
 80181ca:	3301      	adds	r3, #1
 80181cc:	4618      	mov	r0, r3
 80181ce:	f000 f810 	bl	80181f2 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama16Stm32TimeMonitorEELb1EE6_S_getERS3_>
 80181d2:	4603      	mov	r3, r0
 80181d4:	4618      	mov	r0, r3
 80181d6:	3708      	adds	r7, #8
 80181d8:	46bd      	mov	sp, r7
 80181da:	bd80      	pop	{r7, pc}

080181dc <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>:
      _S_get(_Sp_ebo_helper& __eboh)
 80181dc:	b480      	push	{r7}
 80181de:	b083      	sub	sp, #12
 80181e0:	af00      	add	r7, sp, #0
 80181e2:	6078      	str	r0, [r7, #4]
      { return __eboh._M_tp; }
 80181e4:	687b      	ldr	r3, [r7, #4]
 80181e6:	4618      	mov	r0, r3
 80181e8:	370c      	adds	r7, #12
 80181ea:	46bd      	mov	sp, r7
 80181ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181f0:	4770      	bx	lr

080181f2 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama16Stm32TimeMonitorEELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 80181f2:	b480      	push	{r7}
 80181f4:	b083      	sub	sp, #12
 80181f6:	af00      	add	r7, sp, #0
 80181f8:	6078      	str	r0, [r7, #4]
 80181fa:	687b      	ldr	r3, [r7, #4]
 80181fc:	4618      	mov	r0, r3
 80181fe:	370c      	adds	r7, #12
 8018200:	46bd      	mov	sp, r7
 8018202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018206:	4770      	bx	lr

08018208 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8018208:	b580      	push	{r7, lr}
 801820a:	b08c      	sub	sp, #48	; 0x30
 801820c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801820e:	f107 031c 	add.w	r3, r7, #28
 8018212:	2200      	movs	r2, #0
 8018214:	601a      	str	r2, [r3, #0]
 8018216:	605a      	str	r2, [r3, #4]
 8018218:	609a      	str	r2, [r3, #8]
 801821a:	60da      	str	r2, [r3, #12]
 801821c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 801821e:	2300      	movs	r3, #0
 8018220:	61bb      	str	r3, [r7, #24]
 8018222:	4b85      	ldr	r3, [pc, #532]	; (8018438 <MX_GPIO_Init+0x230>)
 8018224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018226:	4a84      	ldr	r2, [pc, #528]	; (8018438 <MX_GPIO_Init+0x230>)
 8018228:	f043 0310 	orr.w	r3, r3, #16
 801822c:	6313      	str	r3, [r2, #48]	; 0x30
 801822e:	4b82      	ldr	r3, [pc, #520]	; (8018438 <MX_GPIO_Init+0x230>)
 8018230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018232:	f003 0310 	and.w	r3, r3, #16
 8018236:	61bb      	str	r3, [r7, #24]
 8018238:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 801823a:	2300      	movs	r3, #0
 801823c:	617b      	str	r3, [r7, #20]
 801823e:	4b7e      	ldr	r3, [pc, #504]	; (8018438 <MX_GPIO_Init+0x230>)
 8018240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018242:	4a7d      	ldr	r2, [pc, #500]	; (8018438 <MX_GPIO_Init+0x230>)
 8018244:	f043 0304 	orr.w	r3, r3, #4
 8018248:	6313      	str	r3, [r2, #48]	; 0x30
 801824a:	4b7b      	ldr	r3, [pc, #492]	; (8018438 <MX_GPIO_Init+0x230>)
 801824c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801824e:	f003 0304 	and.w	r3, r3, #4
 8018252:	617b      	str	r3, [r7, #20]
 8018254:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8018256:	2300      	movs	r3, #0
 8018258:	613b      	str	r3, [r7, #16]
 801825a:	4b77      	ldr	r3, [pc, #476]	; (8018438 <MX_GPIO_Init+0x230>)
 801825c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801825e:	4a76      	ldr	r2, [pc, #472]	; (8018438 <MX_GPIO_Init+0x230>)
 8018260:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018264:	6313      	str	r3, [r2, #48]	; 0x30
 8018266:	4b74      	ldr	r3, [pc, #464]	; (8018438 <MX_GPIO_Init+0x230>)
 8018268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801826a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801826e:	613b      	str	r3, [r7, #16]
 8018270:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8018272:	2300      	movs	r3, #0
 8018274:	60fb      	str	r3, [r7, #12]
 8018276:	4b70      	ldr	r3, [pc, #448]	; (8018438 <MX_GPIO_Init+0x230>)
 8018278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801827a:	4a6f      	ldr	r2, [pc, #444]	; (8018438 <MX_GPIO_Init+0x230>)
 801827c:	f043 0301 	orr.w	r3, r3, #1
 8018280:	6313      	str	r3, [r2, #48]	; 0x30
 8018282:	4b6d      	ldr	r3, [pc, #436]	; (8018438 <MX_GPIO_Init+0x230>)
 8018284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018286:	f003 0301 	and.w	r3, r3, #1
 801828a:	60fb      	str	r3, [r7, #12]
 801828c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 801828e:	2300      	movs	r3, #0
 8018290:	60bb      	str	r3, [r7, #8]
 8018292:	4b69      	ldr	r3, [pc, #420]	; (8018438 <MX_GPIO_Init+0x230>)
 8018294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018296:	4a68      	ldr	r2, [pc, #416]	; (8018438 <MX_GPIO_Init+0x230>)
 8018298:	f043 0302 	orr.w	r3, r3, #2
 801829c:	6313      	str	r3, [r2, #48]	; 0x30
 801829e:	4b66      	ldr	r3, [pc, #408]	; (8018438 <MX_GPIO_Init+0x230>)
 80182a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80182a2:	f003 0302 	and.w	r3, r3, #2
 80182a6:	60bb      	str	r3, [r7, #8]
 80182a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80182aa:	2300      	movs	r3, #0
 80182ac:	607b      	str	r3, [r7, #4]
 80182ae:	4b62      	ldr	r3, [pc, #392]	; (8018438 <MX_GPIO_Init+0x230>)
 80182b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80182b2:	4a61      	ldr	r2, [pc, #388]	; (8018438 <MX_GPIO_Init+0x230>)
 80182b4:	f043 0308 	orr.w	r3, r3, #8
 80182b8:	6313      	str	r3, [r2, #48]	; 0x30
 80182ba:	4b5f      	ldr	r3, [pc, #380]	; (8018438 <MX_GPIO_Init+0x230>)
 80182bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80182be:	f003 0308 	and.w	r3, r3, #8
 80182c2:	607b      	str	r3, [r7, #4]
 80182c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|RST_Pin|BL_Pin, GPIO_PIN_RESET);
 80182c6:	2200      	movs	r2, #0
 80182c8:	f44f 7122 	mov.w	r1, #648	; 0x288
 80182cc:	485b      	ldr	r0, [pc, #364]	; (801843c <MX_GPIO_Init+0x234>)
 80182ce:	f001 f8b7 	bl	8019440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80182d2:	2201      	movs	r2, #1
 80182d4:	2101      	movs	r1, #1
 80182d6:	485a      	ldr	r0, [pc, #360]	; (8018440 <MX_GPIO_Init+0x238>)
 80182d8:	f001 f8b2 	bl	8019440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 80182dc:	2200      	movs	r2, #0
 80182de:	2120      	movs	r1, #32
 80182e0:	4857      	ldr	r0, [pc, #348]	; (8018440 <MX_GPIO_Init+0x238>)
 80182e2:	f001 f8ad 	bl	8019440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 80182e6:	2200      	movs	r2, #0
 80182e8:	2102      	movs	r1, #2
 80182ea:	4856      	ldr	r0, [pc, #344]	; (8018444 <MX_GPIO_Init+0x23c>)
 80182ec:	f001 f8a8 	bl	8019440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80182f0:	2200      	movs	r2, #0
 80182f2:	f24f 0110 	movw	r1, #61456	; 0xf010
 80182f6:	4854      	ldr	r0, [pc, #336]	; (8018448 <MX_GPIO_Init+0x240>)
 80182f8:	f001 f8a2 	bl	8019440 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 80182fc:	2304      	movs	r3, #4
 80182fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8018300:	2300      	movs	r3, #0
 8018302:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018304:	2300      	movs	r3, #0
 8018306:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8018308:	f107 031c 	add.w	r3, r7, #28
 801830c:	4619      	mov	r1, r3
 801830e:	484b      	ldr	r0, [pc, #300]	; (801843c <MX_GPIO_Init+0x234>)
 8018310:	f000 fefc 	bl	801910c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|RST_Pin|BL_Pin;
 8018314:	f44f 7322 	mov.w	r3, #648	; 0x288
 8018318:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801831a:	2301      	movs	r3, #1
 801831c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801831e:	2300      	movs	r3, #0
 8018320:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8018322:	2300      	movs	r3, #0
 8018324:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8018326:	f107 031c 	add.w	r3, r7, #28
 801832a:	4619      	mov	r1, r3
 801832c:	4843      	ldr	r0, [pc, #268]	; (801843c <MX_GPIO_Init+0x234>)
 801832e:	f000 feed 	bl	801910c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8018332:	2332      	movs	r3, #50	; 0x32
 8018334:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8018336:	4b45      	ldr	r3, [pc, #276]	; (801844c <MX_GPIO_Init+0x244>)
 8018338:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801833a:	2300      	movs	r3, #0
 801833c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 801833e:	f107 031c 	add.w	r3, r7, #28
 8018342:	4619      	mov	r1, r3
 8018344:	483d      	ldr	r0, [pc, #244]	; (801843c <MX_GPIO_Init+0x234>)
 8018346:	f000 fee1 	bl	801910c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|DC_Pin;
 801834a:	2321      	movs	r3, #33	; 0x21
 801834c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801834e:	2301      	movs	r3, #1
 8018350:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018352:	2300      	movs	r3, #0
 8018354:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8018356:	2300      	movs	r3, #0
 8018358:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801835a:	f107 031c 	add.w	r3, r7, #28
 801835e:	4619      	mov	r1, r3
 8018360:	4837      	ldr	r0, [pc, #220]	; (8018440 <MX_GPIO_Init+0x238>)
 8018362:	f000 fed3 	bl	801910c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8018366:	2301      	movs	r3, #1
 8018368:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 801836a:	4b38      	ldr	r3, [pc, #224]	; (801844c <MX_GPIO_Init+0x244>)
 801836c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801836e:	2300      	movs	r3, #0
 8018370:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018372:	f107 031c 	add.w	r3, r7, #28
 8018376:	4619      	mov	r1, r3
 8018378:	4835      	ldr	r0, [pc, #212]	; (8018450 <MX_GPIO_Init+0x248>)
 801837a:	f000 fec7 	bl	801910c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CE_Pin;
 801837e:	2302      	movs	r3, #2
 8018380:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8018382:	2301      	movs	r3, #1
 8018384:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018386:	2300      	movs	r3, #0
 8018388:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801838a:	2300      	movs	r3, #0
 801838c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CE_GPIO_Port, &GPIO_InitStruct);
 801838e:	f107 031c 	add.w	r3, r7, #28
 8018392:	4619      	mov	r1, r3
 8018394:	482b      	ldr	r0, [pc, #172]	; (8018444 <MX_GPIO_Init+0x23c>)
 8018396:	f000 feb9 	bl	801910c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_A_Pin;
 801839a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801839e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80183a0:	2300      	movs	r3, #0
 80183a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80183a4:	2301      	movs	r3, #1
 80183a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUTTON_A_GPIO_Port, &GPIO_InitStruct);
 80183a8:	f107 031c 	add.w	r3, r7, #28
 80183ac:	4619      	mov	r1, r3
 80183ae:	4825      	ldr	r0, [pc, #148]	; (8018444 <MX_GPIO_Init+0x23c>)
 80183b0:	f000 feac 	bl	801910c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_B_Pin;
 80183b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80183b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80183ba:	2300      	movs	r3, #0
 80183bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80183be:	2301      	movs	r3, #1
 80183c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUTTON_B_GPIO_Port, &GPIO_InitStruct);
 80183c2:	f107 031c 	add.w	r3, r7, #28
 80183c6:	4619      	mov	r1, r3
 80183c8:	481f      	ldr	r0, [pc, #124]	; (8018448 <MX_GPIO_Init+0x240>)
 80183ca:	f000 fe9f 	bl	801910c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_C_Pin;
 80183ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80183d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80183d4:	4b1f      	ldr	r3, [pc, #124]	; (8018454 <MX_GPIO_Init+0x24c>)
 80183d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80183d8:	2301      	movs	r3, #1
 80183da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUTTON_C_GPIO_Port, &GPIO_InitStruct);
 80183dc:	f107 031c 	add.w	r3, r7, #28
 80183e0:	4619      	mov	r1, r3
 80183e2:	4819      	ldr	r0, [pc, #100]	; (8018448 <MX_GPIO_Init+0x240>)
 80183e4:	f000 fe92 	bl	801910c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80183e8:	f24f 0310 	movw	r3, #61456	; 0xf010
 80183ec:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80183ee:	2301      	movs	r3, #1
 80183f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80183f2:	2300      	movs	r3, #0
 80183f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80183f6:	2300      	movs	r3, #0
 80183f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80183fa:	f107 031c 	add.w	r3, r7, #28
 80183fe:	4619      	mov	r1, r3
 8018400:	4811      	ldr	r0, [pc, #68]	; (8018448 <MX_GPIO_Init+0x240>)
 8018402:	f000 fe83 	bl	801910c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8018406:	2320      	movs	r3, #32
 8018408:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801840a:	2300      	movs	r3, #0
 801840c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801840e:	2300      	movs	r3, #0
 8018410:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8018412:	f107 031c 	add.w	r3, r7, #28
 8018416:	4619      	mov	r1, r3
 8018418:	480b      	ldr	r0, [pc, #44]	; (8018448 <MX_GPIO_Init+0x240>)
 801841a:	f000 fe77 	bl	801910c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 801841e:	2200      	movs	r2, #0
 8018420:	2100      	movs	r1, #0
 8018422:	2028      	movs	r0, #40	; 0x28
 8018424:	f000 fe3b 	bl	801909e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8018428:	2028      	movs	r0, #40	; 0x28
 801842a:	f000 fe54 	bl	80190d6 <HAL_NVIC_EnableIRQ>

}
 801842e:	bf00      	nop
 8018430:	3730      	adds	r7, #48	; 0x30
 8018432:	46bd      	mov	sp, r7
 8018434:	bd80      	pop	{r7, pc}
 8018436:	bf00      	nop
 8018438:	40023800 	.word	0x40023800
 801843c:	40021000 	.word	0x40021000
 8018440:	40020800 	.word	0x40020800
 8018444:	40020400 	.word	0x40020400
 8018448:	40020c00 	.word	0x40020c00
 801844c:	10120000 	.word	0x10120000
 8018450:	40020000 	.word	0x40020000
 8018454:	10110000 	.word	0x10110000

08018458 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8018458:	b580      	push	{r7, lr}
 801845a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 801845c:	4b12      	ldr	r3, [pc, #72]	; (80184a8 <MX_I2C1_Init+0x50>)
 801845e:	4a13      	ldr	r2, [pc, #76]	; (80184ac <MX_I2C1_Init+0x54>)
 8018460:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8018462:	4b11      	ldr	r3, [pc, #68]	; (80184a8 <MX_I2C1_Init+0x50>)
 8018464:	4a12      	ldr	r2, [pc, #72]	; (80184b0 <MX_I2C1_Init+0x58>)
 8018466:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8018468:	4b0f      	ldr	r3, [pc, #60]	; (80184a8 <MX_I2C1_Init+0x50>)
 801846a:	2200      	movs	r2, #0
 801846c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 801846e:	4b0e      	ldr	r3, [pc, #56]	; (80184a8 <MX_I2C1_Init+0x50>)
 8018470:	2200      	movs	r2, #0
 8018472:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8018474:	4b0c      	ldr	r3, [pc, #48]	; (80184a8 <MX_I2C1_Init+0x50>)
 8018476:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 801847a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 801847c:	4b0a      	ldr	r3, [pc, #40]	; (80184a8 <MX_I2C1_Init+0x50>)
 801847e:	2200      	movs	r2, #0
 8018480:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8018482:	4b09      	ldr	r3, [pc, #36]	; (80184a8 <MX_I2C1_Init+0x50>)
 8018484:	2200      	movs	r2, #0
 8018486:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8018488:	4b07      	ldr	r3, [pc, #28]	; (80184a8 <MX_I2C1_Init+0x50>)
 801848a:	2200      	movs	r2, #0
 801848c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 801848e:	4b06      	ldr	r3, [pc, #24]	; (80184a8 <MX_I2C1_Init+0x50>)
 8018490:	2200      	movs	r2, #0
 8018492:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8018494:	4804      	ldr	r0, [pc, #16]	; (80184a8 <MX_I2C1_Init+0x50>)
 8018496:	f002 fce5 	bl	801ae64 <HAL_I2C_Init>
 801849a:	4603      	mov	r3, r0
 801849c:	2b00      	cmp	r3, #0
 801849e:	d001      	beq.n	80184a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80184a0:	f000 fa36 	bl	8018910 <Error_Handler>
  }

}
 80184a4:	bf00      	nop
 80184a6:	bd80      	pop	{r7, pc}
 80184a8:	2000037c 	.word	0x2000037c
 80184ac:	40005400 	.word	0x40005400
 80184b0:	000186a0 	.word	0x000186a0

080184b4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80184b4:	b580      	push	{r7, lr}
 80184b6:	b08a      	sub	sp, #40	; 0x28
 80184b8:	af00      	add	r7, sp, #0
 80184ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80184bc:	f107 0314 	add.w	r3, r7, #20
 80184c0:	2200      	movs	r2, #0
 80184c2:	601a      	str	r2, [r3, #0]
 80184c4:	605a      	str	r2, [r3, #4]
 80184c6:	609a      	str	r2, [r3, #8]
 80184c8:	60da      	str	r2, [r3, #12]
 80184ca:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80184cc:	687b      	ldr	r3, [r7, #4]
 80184ce:	681b      	ldr	r3, [r3, #0]
 80184d0:	4a19      	ldr	r2, [pc, #100]	; (8018538 <HAL_I2C_MspInit+0x84>)
 80184d2:	4293      	cmp	r3, r2
 80184d4:	d12c      	bne.n	8018530 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80184d6:	2300      	movs	r3, #0
 80184d8:	613b      	str	r3, [r7, #16]
 80184da:	4b18      	ldr	r3, [pc, #96]	; (801853c <HAL_I2C_MspInit+0x88>)
 80184dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80184de:	4a17      	ldr	r2, [pc, #92]	; (801853c <HAL_I2C_MspInit+0x88>)
 80184e0:	f043 0302 	orr.w	r3, r3, #2
 80184e4:	6313      	str	r3, [r2, #48]	; 0x30
 80184e6:	4b15      	ldr	r3, [pc, #84]	; (801853c <HAL_I2C_MspInit+0x88>)
 80184e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80184ea:	f003 0302 	and.w	r3, r3, #2
 80184ee:	613b      	str	r3, [r7, #16]
 80184f0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80184f2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80184f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80184f8:	2312      	movs	r3, #18
 80184fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80184fc:	2301      	movs	r3, #1
 80184fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8018500:	2300      	movs	r3, #0
 8018502:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8018504:	2304      	movs	r3, #4
 8018506:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8018508:	f107 0314 	add.w	r3, r7, #20
 801850c:	4619      	mov	r1, r3
 801850e:	480c      	ldr	r0, [pc, #48]	; (8018540 <HAL_I2C_MspInit+0x8c>)
 8018510:	f000 fdfc 	bl	801910c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8018514:	2300      	movs	r3, #0
 8018516:	60fb      	str	r3, [r7, #12]
 8018518:	4b08      	ldr	r3, [pc, #32]	; (801853c <HAL_I2C_MspInit+0x88>)
 801851a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801851c:	4a07      	ldr	r2, [pc, #28]	; (801853c <HAL_I2C_MspInit+0x88>)
 801851e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8018522:	6413      	str	r3, [r2, #64]	; 0x40
 8018524:	4b05      	ldr	r3, [pc, #20]	; (801853c <HAL_I2C_MspInit+0x88>)
 8018526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018528:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801852c:	60fb      	str	r3, [r7, #12]
 801852e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8018530:	bf00      	nop
 8018532:	3728      	adds	r7, #40	; 0x28
 8018534:	46bd      	mov	sp, r7
 8018536:	bd80      	pop	{r7, pc}
 8018538:	40005400 	.word	0x40005400
 801853c:	40023800 	.word	0x40023800
 8018540:	40020400 	.word	0x40020400

08018544 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
I2S_HandleTypeDef hi2s3;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8018544:	b580      	push	{r7, lr}
 8018546:	af00      	add	r7, sp, #0

  hi2s2.Instance = SPI2;
 8018548:	4b12      	ldr	r3, [pc, #72]	; (8018594 <MX_I2S2_Init+0x50>)
 801854a:	4a13      	ldr	r2, [pc, #76]	; (8018598 <MX_I2S2_Init+0x54>)
 801854c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 801854e:	4b11      	ldr	r3, [pc, #68]	; (8018594 <MX_I2S2_Init+0x50>)
 8018550:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018554:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8018556:	4b0f      	ldr	r3, [pc, #60]	; (8018594 <MX_I2S2_Init+0x50>)
 8018558:	2200      	movs	r2, #0
 801855a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 801855c:	4b0d      	ldr	r3, [pc, #52]	; (8018594 <MX_I2S2_Init+0x50>)
 801855e:	2200      	movs	r2, #0
 8018560:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8018562:	4b0c      	ldr	r3, [pc, #48]	; (8018594 <MX_I2S2_Init+0x50>)
 8018564:	2200      	movs	r2, #0
 8018566:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8018568:	4b0a      	ldr	r3, [pc, #40]	; (8018594 <MX_I2S2_Init+0x50>)
 801856a:	4a0c      	ldr	r2, [pc, #48]	; (801859c <MX_I2S2_Init+0x58>)
 801856c:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 801856e:	4b09      	ldr	r3, [pc, #36]	; (8018594 <MX_I2S2_Init+0x50>)
 8018570:	2200      	movs	r2, #0
 8018572:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8018574:	4b07      	ldr	r3, [pc, #28]	; (8018594 <MX_I2S2_Init+0x50>)
 8018576:	2200      	movs	r2, #0
 8018578:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 801857a:	4b06      	ldr	r3, [pc, #24]	; (8018594 <MX_I2S2_Init+0x50>)
 801857c:	2201      	movs	r2, #1
 801857e:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8018580:	4804      	ldr	r0, [pc, #16]	; (8018594 <MX_I2S2_Init+0x50>)
 8018582:	f002 fda7 	bl	801b0d4 <HAL_I2S_Init>
 8018586:	4603      	mov	r3, r0
 8018588:	2b00      	cmp	r3, #0
 801858a:	d001      	beq.n	8018590 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 801858c:	f000 f9c0 	bl	8018910 <Error_Handler>
  }

}
 8018590:	bf00      	nop
 8018592:	bd80      	pop	{r7, pc}
 8018594:	200003d0 	.word	0x200003d0
 8018598:	40003800 	.word	0x40003800
 801859c:	00017700 	.word	0x00017700

080185a0 <MX_I2S3_Init>:
/* I2S3 init function */
void MX_I2S3_Init(void)
{
 80185a0:	b580      	push	{r7, lr}
 80185a2:	af00      	add	r7, sp, #0

  hi2s3.Instance = SPI3;
 80185a4:	4b13      	ldr	r3, [pc, #76]	; (80185f4 <MX_I2S3_Init+0x54>)
 80185a6:	4a14      	ldr	r2, [pc, #80]	; (80185f8 <MX_I2S3_Init+0x58>)
 80185a8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80185aa:	4b12      	ldr	r3, [pc, #72]	; (80185f4 <MX_I2S3_Init+0x54>)
 80185ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80185b0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80185b2:	4b10      	ldr	r3, [pc, #64]	; (80185f4 <MX_I2S3_Init+0x54>)
 80185b4:	2200      	movs	r2, #0
 80185b6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80185b8:	4b0e      	ldr	r3, [pc, #56]	; (80185f4 <MX_I2S3_Init+0x54>)
 80185ba:	2200      	movs	r2, #0
 80185bc:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80185be:	4b0d      	ldr	r3, [pc, #52]	; (80185f4 <MX_I2S3_Init+0x54>)
 80185c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80185c4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80185c6:	4b0b      	ldr	r3, [pc, #44]	; (80185f4 <MX_I2S3_Init+0x54>)
 80185c8:	4a0c      	ldr	r2, [pc, #48]	; (80185fc <MX_I2S3_Init+0x5c>)
 80185ca:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80185cc:	4b09      	ldr	r3, [pc, #36]	; (80185f4 <MX_I2S3_Init+0x54>)
 80185ce:	2200      	movs	r2, #0
 80185d0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80185d2:	4b08      	ldr	r3, [pc, #32]	; (80185f4 <MX_I2S3_Init+0x54>)
 80185d4:	2200      	movs	r2, #0
 80185d6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80185d8:	4b06      	ldr	r3, [pc, #24]	; (80185f4 <MX_I2S3_Init+0x54>)
 80185da:	2200      	movs	r2, #0
 80185dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80185de:	4805      	ldr	r0, [pc, #20]	; (80185f4 <MX_I2S3_Init+0x54>)
 80185e0:	f002 fd78 	bl	801b0d4 <HAL_I2S_Init>
 80185e4:	4603      	mov	r3, r0
 80185e6:	2b00      	cmp	r3, #0
 80185e8:	d001      	beq.n	80185ee <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80185ea:	f000 f991 	bl	8018910 <Error_Handler>
  }

}
 80185ee:	bf00      	nop
 80185f0:	bd80      	pop	{r7, pc}
 80185f2:	bf00      	nop
 80185f4:	20000418 	.word	0x20000418
 80185f8:	40003c00 	.word	0x40003c00
 80185fc:	00017700 	.word	0x00017700

08018600 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8018600:	b580      	push	{r7, lr}
 8018602:	b08e      	sub	sp, #56	; 0x38
 8018604:	af00      	add	r7, sp, #0
 8018606:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018608:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801860c:	2200      	movs	r2, #0
 801860e:	601a      	str	r2, [r3, #0]
 8018610:	605a      	str	r2, [r3, #4]
 8018612:	609a      	str	r2, [r3, #8]
 8018614:	60da      	str	r2, [r3, #12]
 8018616:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI2)
 8018618:	687b      	ldr	r3, [r7, #4]
 801861a:	681b      	ldr	r3, [r3, #0]
 801861c:	4a59      	ldr	r2, [pc, #356]	; (8018784 <HAL_I2S_MspInit+0x184>)
 801861e:	4293      	cmp	r3, r2
 8018620:	d15b      	bne.n	80186da <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8018622:	2300      	movs	r3, #0
 8018624:	623b      	str	r3, [r7, #32]
 8018626:	4b58      	ldr	r3, [pc, #352]	; (8018788 <HAL_I2S_MspInit+0x188>)
 8018628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801862a:	4a57      	ldr	r2, [pc, #348]	; (8018788 <HAL_I2S_MspInit+0x188>)
 801862c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8018630:	6413      	str	r3, [r2, #64]	; 0x40
 8018632:	4b55      	ldr	r3, [pc, #340]	; (8018788 <HAL_I2S_MspInit+0x188>)
 8018634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018636:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801863a:	623b      	str	r3, [r7, #32]
 801863c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 801863e:	2300      	movs	r3, #0
 8018640:	61fb      	str	r3, [r7, #28]
 8018642:	4b51      	ldr	r3, [pc, #324]	; (8018788 <HAL_I2S_MspInit+0x188>)
 8018644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018646:	4a50      	ldr	r2, [pc, #320]	; (8018788 <HAL_I2S_MspInit+0x188>)
 8018648:	f043 0304 	orr.w	r3, r3, #4
 801864c:	6313      	str	r3, [r2, #48]	; 0x30
 801864e:	4b4e      	ldr	r3, [pc, #312]	; (8018788 <HAL_I2S_MspInit+0x188>)
 8018650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018652:	f003 0304 	and.w	r3, r3, #4
 8018656:	61fb      	str	r3, [r7, #28]
 8018658:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801865a:	2300      	movs	r3, #0
 801865c:	61bb      	str	r3, [r7, #24]
 801865e:	4b4a      	ldr	r3, [pc, #296]	; (8018788 <HAL_I2S_MspInit+0x188>)
 8018660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018662:	4a49      	ldr	r2, [pc, #292]	; (8018788 <HAL_I2S_MspInit+0x188>)
 8018664:	f043 0302 	orr.w	r3, r3, #2
 8018668:	6313      	str	r3, [r2, #48]	; 0x30
 801866a:	4b47      	ldr	r3, [pc, #284]	; (8018788 <HAL_I2S_MspInit+0x188>)
 801866c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801866e:	f003 0302 	and.w	r3, r3, #2
 8018672:	61bb      	str	r3, [r7, #24]
 8018674:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8018676:	2304      	movs	r3, #4
 8018678:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801867a:	2302      	movs	r3, #2
 801867c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801867e:	2300      	movs	r3, #0
 8018680:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8018682:	2300      	movs	r3, #0
 8018684:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8018686:	2306      	movs	r3, #6
 8018688:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801868a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801868e:	4619      	mov	r1, r3
 8018690:	483e      	ldr	r0, [pc, #248]	; (801878c <HAL_I2S_MspInit+0x18c>)
 8018692:	f000 fd3b 	bl	801910c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8018696:	2308      	movs	r3, #8
 8018698:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801869a:	2302      	movs	r3, #2
 801869c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801869e:	2300      	movs	r3, #0
 80186a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80186a2:	2300      	movs	r3, #0
 80186a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80186a6:	2305      	movs	r3, #5
 80186a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80186aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80186ae:	4619      	mov	r1, r3
 80186b0:	4836      	ldr	r0, [pc, #216]	; (801878c <HAL_I2S_MspInit+0x18c>)
 80186b2:	f000 fd2b 	bl	801910c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 80186b6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80186ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80186bc:	2302      	movs	r3, #2
 80186be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80186c0:	2300      	movs	r3, #0
 80186c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80186c4:	2300      	movs	r3, #0
 80186c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80186c8:	2305      	movs	r3, #5
 80186ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80186cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80186d0:	4619      	mov	r1, r3
 80186d2:	482f      	ldr	r0, [pc, #188]	; (8018790 <HAL_I2S_MspInit+0x190>)
 80186d4:	f000 fd1a 	bl	801910c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80186d8:	e04f      	b.n	801877a <HAL_I2S_MspInit+0x17a>
  else if(i2sHandle->Instance==SPI3)
 80186da:	687b      	ldr	r3, [r7, #4]
 80186dc:	681b      	ldr	r3, [r3, #0]
 80186de:	4a2d      	ldr	r2, [pc, #180]	; (8018794 <HAL_I2S_MspInit+0x194>)
 80186e0:	4293      	cmp	r3, r2
 80186e2:	d14a      	bne.n	801877a <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80186e4:	2300      	movs	r3, #0
 80186e6:	617b      	str	r3, [r7, #20]
 80186e8:	4b27      	ldr	r3, [pc, #156]	; (8018788 <HAL_I2S_MspInit+0x188>)
 80186ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80186ec:	4a26      	ldr	r2, [pc, #152]	; (8018788 <HAL_I2S_MspInit+0x188>)
 80186ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80186f2:	6413      	str	r3, [r2, #64]	; 0x40
 80186f4:	4b24      	ldr	r3, [pc, #144]	; (8018788 <HAL_I2S_MspInit+0x188>)
 80186f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80186f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80186fc:	617b      	str	r3, [r7, #20]
 80186fe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8018700:	2300      	movs	r3, #0
 8018702:	613b      	str	r3, [r7, #16]
 8018704:	4b20      	ldr	r3, [pc, #128]	; (8018788 <HAL_I2S_MspInit+0x188>)
 8018706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018708:	4a1f      	ldr	r2, [pc, #124]	; (8018788 <HAL_I2S_MspInit+0x188>)
 801870a:	f043 0301 	orr.w	r3, r3, #1
 801870e:	6313      	str	r3, [r2, #48]	; 0x30
 8018710:	4b1d      	ldr	r3, [pc, #116]	; (8018788 <HAL_I2S_MspInit+0x188>)
 8018712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018714:	f003 0301 	and.w	r3, r3, #1
 8018718:	613b      	str	r3, [r7, #16]
 801871a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 801871c:	2300      	movs	r3, #0
 801871e:	60fb      	str	r3, [r7, #12]
 8018720:	4b19      	ldr	r3, [pc, #100]	; (8018788 <HAL_I2S_MspInit+0x188>)
 8018722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018724:	4a18      	ldr	r2, [pc, #96]	; (8018788 <HAL_I2S_MspInit+0x188>)
 8018726:	f043 0304 	orr.w	r3, r3, #4
 801872a:	6313      	str	r3, [r2, #48]	; 0x30
 801872c:	4b16      	ldr	r3, [pc, #88]	; (8018788 <HAL_I2S_MspInit+0x188>)
 801872e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018730:	f003 0304 	and.w	r3, r3, #4
 8018734:	60fb      	str	r3, [r7, #12]
 8018736:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8018738:	2310      	movs	r3, #16
 801873a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801873c:	2302      	movs	r3, #2
 801873e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018740:	2300      	movs	r3, #0
 8018742:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8018744:	2300      	movs	r3, #0
 8018746:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8018748:	2306      	movs	r3, #6
 801874a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 801874c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8018750:	4619      	mov	r1, r3
 8018752:	4811      	ldr	r0, [pc, #68]	; (8018798 <HAL_I2S_MspInit+0x198>)
 8018754:	f000 fcda 	bl	801910c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8018758:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 801875c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801875e:	2302      	movs	r3, #2
 8018760:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018762:	2300      	movs	r3, #0
 8018764:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8018766:	2300      	movs	r3, #0
 8018768:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 801876a:	2306      	movs	r3, #6
 801876c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801876e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8018772:	4619      	mov	r1, r3
 8018774:	4805      	ldr	r0, [pc, #20]	; (801878c <HAL_I2S_MspInit+0x18c>)
 8018776:	f000 fcc9 	bl	801910c <HAL_GPIO_Init>
}
 801877a:	bf00      	nop
 801877c:	3738      	adds	r7, #56	; 0x38
 801877e:	46bd      	mov	sp, r7
 8018780:	bd80      	pop	{r7, pc}
 8018782:	bf00      	nop
 8018784:	40003800 	.word	0x40003800
 8018788:	40023800 	.word	0x40023800
 801878c:	40020800 	.word	0x40020800
 8018790:	40020400 	.word	0x40020400
 8018794:	40003c00 	.word	0x40003c00
 8018798:	40020000 	.word	0x40020000

0801879c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 801879c:	b580      	push	{r7, lr}
 801879e:	b082      	sub	sp, #8
 80187a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80187a2:	f000 fb0d 	bl	8018dc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80187a6:	f000 f821 	bl	80187ec <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80187aa:	f7ff fd2d 	bl	8018208 <MX_GPIO_Init>
  MX_I2C1_Init();
 80187ae:	f7ff fe53 	bl	8018458 <MX_I2C1_Init>
  MX_I2S2_Init();
 80187b2:	f7ff fec7 	bl	8018544 <MX_I2S2_Init>
  MX_I2S3_Init();
 80187b6:	f7ff fef3 	bl	80185a0 <MX_I2S3_Init>
  MX_SPI1_Init();
 80187ba:	f000 f8b1 	bl	8018920 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80187be:	f006 fdc1 	bl	801f344 <MX_USB_HOST_Init>
  MX_TIM3_Init();
 80187c2:	f000 fa01 	bl	8018bc8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80187c6:	2100      	movs	r1, #0
 80187c8:	4807      	ldr	r0, [pc, #28]	; (80187e8 <main+0x4c>)
 80187ca:	f004 f963 	bl	801ca94 <HAL_TIM_PWM_Start>
   __HAL_TIM_SET_PRESCALER(&htim3, 0);
 80187ce:	4b06      	ldr	r3, [pc, #24]	; (80187e8 <main+0x4c>)
 80187d0:	681b      	ldr	r3, [r3, #0]
 80187d2:	2200      	movs	r2, #0
 80187d4:	629a      	str	r2, [r3, #40]	; 0x28
 //  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 10000);
 //  for (int i =1; i <= 40; i += 1) {
                  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 10);
 80187d6:	4b04      	ldr	r3, [pc, #16]	; (80187e8 <main+0x4c>)
 80187d8:	681b      	ldr	r3, [r3, #0]
 80187da:	220a      	movs	r2, #10
 80187dc:	635a      	str	r2, [r3, #52]	; 0x34
 //                 HAL_Delay(100);
 //  }
  tama::Main tamaMain;
  tamaMain.run();
 80187de:	1d3b      	adds	r3, r7, #4
 80187e0:	4618      	mov	r0, r3
 80187e2:	f7f9 fa84 	bl	8011cee <_ZN4tama4Main3runEv>
 80187e6:	bf00      	nop
 80187e8:	200004b8 	.word	0x200004b8

080187ec <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80187ec:	b580      	push	{r7, lr}
 80187ee:	b09a      	sub	sp, #104	; 0x68
 80187f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80187f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80187f6:	2230      	movs	r2, #48	; 0x30
 80187f8:	2100      	movs	r1, #0
 80187fa:	4618      	mov	r0, r3
 80187fc:	f007 fc36 	bl	802006c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8018800:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8018804:	2200      	movs	r2, #0
 8018806:	601a      	str	r2, [r3, #0]
 8018808:	605a      	str	r2, [r3, #4]
 801880a:	609a      	str	r2, [r3, #8]
 801880c:	60da      	str	r2, [r3, #12]
 801880e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8018810:	f107 030c 	add.w	r3, r7, #12
 8018814:	2200      	movs	r2, #0
 8018816:	601a      	str	r2, [r3, #0]
 8018818:	605a      	str	r2, [r3, #4]
 801881a:	609a      	str	r2, [r3, #8]
 801881c:	60da      	str	r2, [r3, #12]
 801881e:	611a      	str	r2, [r3, #16]
 8018820:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8018822:	2300      	movs	r3, #0
 8018824:	60bb      	str	r3, [r7, #8]
 8018826:	4b38      	ldr	r3, [pc, #224]	; (8018908 <_Z18SystemClock_Configv+0x11c>)
 8018828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801882a:	4a37      	ldr	r2, [pc, #220]	; (8018908 <_Z18SystemClock_Configv+0x11c>)
 801882c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8018830:	6413      	str	r3, [r2, #64]	; 0x40
 8018832:	4b35      	ldr	r3, [pc, #212]	; (8018908 <_Z18SystemClock_Configv+0x11c>)
 8018834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801883a:	60bb      	str	r3, [r7, #8]
 801883c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 801883e:	2300      	movs	r3, #0
 8018840:	607b      	str	r3, [r7, #4]
 8018842:	4b32      	ldr	r3, [pc, #200]	; (801890c <_Z18SystemClock_Configv+0x120>)
 8018844:	681b      	ldr	r3, [r3, #0]
 8018846:	4a31      	ldr	r2, [pc, #196]	; (801890c <_Z18SystemClock_Configv+0x120>)
 8018848:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801884c:	6013      	str	r3, [r2, #0]
 801884e:	4b2f      	ldr	r3, [pc, #188]	; (801890c <_Z18SystemClock_Configv+0x120>)
 8018850:	681b      	ldr	r3, [r3, #0]
 8018852:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8018856:	607b      	str	r3, [r7, #4]
 8018858:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 801885a:	2301      	movs	r3, #1
 801885c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 801885e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8018862:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8018864:	2302      	movs	r3, #2
 8018866:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8018868:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801886c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 801886e:	2304      	movs	r3, #4
 8018870:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8018872:	23c0      	movs	r3, #192	; 0xc0
 8018874:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8018876:	2304      	movs	r3, #4
 8018878:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 8;
 801887a:	2308      	movs	r3, #8
 801887c:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801887e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8018882:	4618      	mov	r0, r3
 8018884:	f003 f8c6 	bl	801ba14 <HAL_RCC_OscConfig>
 8018888:	4603      	mov	r3, r0
 801888a:	2b00      	cmp	r3, #0
 801888c:	bf14      	ite	ne
 801888e:	2301      	movne	r3, #1
 8018890:	2300      	moveq	r3, #0
 8018892:	b2db      	uxtb	r3, r3
 8018894:	2b00      	cmp	r3, #0
 8018896:	d001      	beq.n	801889c <_Z18SystemClock_Configv+0xb0>
  {
    Error_Handler();
 8018898:	f000 f83a 	bl	8018910 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 801889c:	230f      	movs	r3, #15
 801889e:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80188a0:	2302      	movs	r3, #2
 80188a2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80188a4:	2300      	movs	r3, #0
 80188a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80188a8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80188ac:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80188ae:	2300      	movs	r3, #0
 80188b0:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80188b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80188b6:	2103      	movs	r1, #3
 80188b8:	4618      	mov	r0, r3
 80188ba:	f003 fb1b 	bl	801bef4 <HAL_RCC_ClockConfig>
 80188be:	4603      	mov	r3, r0
 80188c0:	2b00      	cmp	r3, #0
 80188c2:	bf14      	ite	ne
 80188c4:	2301      	movne	r3, #1
 80188c6:	2300      	moveq	r3, #0
 80188c8:	b2db      	uxtb	r3, r3
 80188ca:	2b00      	cmp	r3, #0
 80188cc:	d001      	beq.n	80188d2 <_Z18SystemClock_Configv+0xe6>
  {
    Error_Handler();
 80188ce:	f000 f81f 	bl	8018910 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80188d2:	2301      	movs	r3, #1
 80188d4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 80188d6:	23c8      	movs	r3, #200	; 0xc8
 80188d8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 80188da:	2305      	movs	r3, #5
 80188dc:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80188de:	2302      	movs	r3, #2
 80188e0:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80188e2:	f107 030c 	add.w	r3, r7, #12
 80188e6:	4618      	mov	r0, r3
 80188e8:	f003 fce2 	bl	801c2b0 <HAL_RCCEx_PeriphCLKConfig>
 80188ec:	4603      	mov	r3, r0
 80188ee:	2b00      	cmp	r3, #0
 80188f0:	bf14      	ite	ne
 80188f2:	2301      	movne	r3, #1
 80188f4:	2300      	moveq	r3, #0
 80188f6:	b2db      	uxtb	r3, r3
 80188f8:	2b00      	cmp	r3, #0
 80188fa:	d001      	beq.n	8018900 <_Z18SystemClock_Configv+0x114>
  {
    Error_Handler();
 80188fc:	f000 f808 	bl	8018910 <Error_Handler>
  }
}
 8018900:	bf00      	nop
 8018902:	3768      	adds	r7, #104	; 0x68
 8018904:	46bd      	mov	sp, r7
 8018906:	bd80      	pop	{r7, pc}
 8018908:	40023800 	.word	0x40023800
 801890c:	40007000 	.word	0x40007000

08018910 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8018910:	b480      	push	{r7}
 8018912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8018914:	bf00      	nop
 8018916:	46bd      	mov	sp, r7
 8018918:	f85d 7b04 	ldr.w	r7, [sp], #4
 801891c:	4770      	bx	lr
	...

08018920 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8018920:	b580      	push	{r7, lr}
 8018922:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8018924:	4b17      	ldr	r3, [pc, #92]	; (8018984 <MX_SPI1_Init+0x64>)
 8018926:	4a18      	ldr	r2, [pc, #96]	; (8018988 <MX_SPI1_Init+0x68>)
 8018928:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 801892a:	4b16      	ldr	r3, [pc, #88]	; (8018984 <MX_SPI1_Init+0x64>)
 801892c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8018930:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8018932:	4b14      	ldr	r3, [pc, #80]	; (8018984 <MX_SPI1_Init+0x64>)
 8018934:	2200      	movs	r2, #0
 8018936:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8018938:	4b12      	ldr	r3, [pc, #72]	; (8018984 <MX_SPI1_Init+0x64>)
 801893a:	2200      	movs	r2, #0
 801893c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 801893e:	4b11      	ldr	r3, [pc, #68]	; (8018984 <MX_SPI1_Init+0x64>)
 8018940:	2200      	movs	r2, #0
 8018942:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8018944:	4b0f      	ldr	r3, [pc, #60]	; (8018984 <MX_SPI1_Init+0x64>)
 8018946:	2200      	movs	r2, #0
 8018948:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 801894a:	4b0e      	ldr	r3, [pc, #56]	; (8018984 <MX_SPI1_Init+0x64>)
 801894c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018950:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8018952:	4b0c      	ldr	r3, [pc, #48]	; (8018984 <MX_SPI1_Init+0x64>)
 8018954:	2220      	movs	r2, #32
 8018956:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8018958:	4b0a      	ldr	r3, [pc, #40]	; (8018984 <MX_SPI1_Init+0x64>)
 801895a:	2200      	movs	r2, #0
 801895c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 801895e:	4b09      	ldr	r3, [pc, #36]	; (8018984 <MX_SPI1_Init+0x64>)
 8018960:	2200      	movs	r2, #0
 8018962:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8018964:	4b07      	ldr	r3, [pc, #28]	; (8018984 <MX_SPI1_Init+0x64>)
 8018966:	2200      	movs	r2, #0
 8018968:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 801896a:	4b06      	ldr	r3, [pc, #24]	; (8018984 <MX_SPI1_Init+0x64>)
 801896c:	220a      	movs	r2, #10
 801896e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8018970:	4804      	ldr	r0, [pc, #16]	; (8018984 <MX_SPI1_Init+0x64>)
 8018972:	f003 fdeb 	bl	801c54c <HAL_SPI_Init>
 8018976:	4603      	mov	r3, r0
 8018978:	2b00      	cmp	r3, #0
 801897a:	d001      	beq.n	8018980 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 801897c:	f7ff ffc8 	bl	8018910 <Error_Handler>
  }

}
 8018980:	bf00      	nop
 8018982:	bd80      	pop	{r7, pc}
 8018984:	20000460 	.word	0x20000460
 8018988:	40013000 	.word	0x40013000

0801898c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 801898c:	b580      	push	{r7, lr}
 801898e:	b08a      	sub	sp, #40	; 0x28
 8018990:	af00      	add	r7, sp, #0
 8018992:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018994:	f107 0314 	add.w	r3, r7, #20
 8018998:	2200      	movs	r2, #0
 801899a:	601a      	str	r2, [r3, #0]
 801899c:	605a      	str	r2, [r3, #4]
 801899e:	609a      	str	r2, [r3, #8]
 80189a0:	60da      	str	r2, [r3, #12]
 80189a2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80189a4:	687b      	ldr	r3, [r7, #4]
 80189a6:	681b      	ldr	r3, [r3, #0]
 80189a8:	4a19      	ldr	r2, [pc, #100]	; (8018a10 <HAL_SPI_MspInit+0x84>)
 80189aa:	4293      	cmp	r3, r2
 80189ac:	d12b      	bne.n	8018a06 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80189ae:	2300      	movs	r3, #0
 80189b0:	613b      	str	r3, [r7, #16]
 80189b2:	4b18      	ldr	r3, [pc, #96]	; (8018a14 <HAL_SPI_MspInit+0x88>)
 80189b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80189b6:	4a17      	ldr	r2, [pc, #92]	; (8018a14 <HAL_SPI_MspInit+0x88>)
 80189b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80189bc:	6453      	str	r3, [r2, #68]	; 0x44
 80189be:	4b15      	ldr	r3, [pc, #84]	; (8018a14 <HAL_SPI_MspInit+0x88>)
 80189c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80189c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80189c6:	613b      	str	r3, [r7, #16]
 80189c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80189ca:	2300      	movs	r3, #0
 80189cc:	60fb      	str	r3, [r7, #12]
 80189ce:	4b11      	ldr	r3, [pc, #68]	; (8018a14 <HAL_SPI_MspInit+0x88>)
 80189d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80189d2:	4a10      	ldr	r2, [pc, #64]	; (8018a14 <HAL_SPI_MspInit+0x88>)
 80189d4:	f043 0301 	orr.w	r3, r3, #1
 80189d8:	6313      	str	r3, [r2, #48]	; 0x30
 80189da:	4b0e      	ldr	r3, [pc, #56]	; (8018a14 <HAL_SPI_MspInit+0x88>)
 80189dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80189de:	f003 0301 	and.w	r3, r3, #1
 80189e2:	60fb      	str	r3, [r7, #12]
 80189e4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80189e6:	23e0      	movs	r3, #224	; 0xe0
 80189e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80189ea:	2302      	movs	r3, #2
 80189ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80189ee:	2300      	movs	r3, #0
 80189f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80189f2:	2303      	movs	r3, #3
 80189f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80189f6:	2305      	movs	r3, #5
 80189f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80189fa:	f107 0314 	add.w	r3, r7, #20
 80189fe:	4619      	mov	r1, r3
 8018a00:	4805      	ldr	r0, [pc, #20]	; (8018a18 <HAL_SPI_MspInit+0x8c>)
 8018a02:	f000 fb83 	bl	801910c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8018a06:	bf00      	nop
 8018a08:	3728      	adds	r7, #40	; 0x28
 8018a0a:	46bd      	mov	sp, r7
 8018a0c:	bd80      	pop	{r7, pc}
 8018a0e:	bf00      	nop
 8018a10:	40013000 	.word	0x40013000
 8018a14:	40023800 	.word	0x40023800
 8018a18:	40020000 	.word	0x40020000

08018a1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8018a1c:	b580      	push	{r7, lr}
 8018a1e:	b082      	sub	sp, #8
 8018a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8018a22:	2300      	movs	r3, #0
 8018a24:	607b      	str	r3, [r7, #4]
 8018a26:	4b10      	ldr	r3, [pc, #64]	; (8018a68 <HAL_MspInit+0x4c>)
 8018a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018a2a:	4a0f      	ldr	r2, [pc, #60]	; (8018a68 <HAL_MspInit+0x4c>)
 8018a2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8018a30:	6453      	str	r3, [r2, #68]	; 0x44
 8018a32:	4b0d      	ldr	r3, [pc, #52]	; (8018a68 <HAL_MspInit+0x4c>)
 8018a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018a36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8018a3a:	607b      	str	r3, [r7, #4]
 8018a3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8018a3e:	2300      	movs	r3, #0
 8018a40:	603b      	str	r3, [r7, #0]
 8018a42:	4b09      	ldr	r3, [pc, #36]	; (8018a68 <HAL_MspInit+0x4c>)
 8018a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018a46:	4a08      	ldr	r2, [pc, #32]	; (8018a68 <HAL_MspInit+0x4c>)
 8018a48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8018a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8018a4e:	4b06      	ldr	r3, [pc, #24]	; (8018a68 <HAL_MspInit+0x4c>)
 8018a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8018a56:	603b      	str	r3, [r7, #0]
 8018a58:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8018a5a:	2007      	movs	r0, #7
 8018a5c:	f000 fb14 	bl	8019088 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8018a60:	bf00      	nop
 8018a62:	3708      	adds	r7, #8
 8018a64:	46bd      	mov	sp, r7
 8018a66:	bd80      	pop	{r7, pc}
 8018a68:	40023800 	.word	0x40023800

08018a6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8018a6c:	b480      	push	{r7}
 8018a6e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8018a70:	bf00      	nop
 8018a72:	46bd      	mov	sp, r7
 8018a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a78:	4770      	bx	lr

08018a7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8018a7a:	b480      	push	{r7}
 8018a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8018a7e:	e7fe      	b.n	8018a7e <HardFault_Handler+0x4>

08018a80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8018a80:	b480      	push	{r7}
 8018a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8018a84:	e7fe      	b.n	8018a84 <MemManage_Handler+0x4>

08018a86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8018a86:	b480      	push	{r7}
 8018a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8018a8a:	e7fe      	b.n	8018a8a <BusFault_Handler+0x4>

08018a8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8018a8c:	b480      	push	{r7}
 8018a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8018a90:	e7fe      	b.n	8018a90 <UsageFault_Handler+0x4>

08018a92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8018a92:	b480      	push	{r7}
 8018a94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8018a96:	bf00      	nop
 8018a98:	46bd      	mov	sp, r7
 8018a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a9e:	4770      	bx	lr

08018aa0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8018aa0:	b480      	push	{r7}
 8018aa2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8018aa4:	bf00      	nop
 8018aa6:	46bd      	mov	sp, r7
 8018aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018aac:	4770      	bx	lr

08018aae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8018aae:	b480      	push	{r7}
 8018ab0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8018ab2:	bf00      	nop
 8018ab4:	46bd      	mov	sp, r7
 8018ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018aba:	4770      	bx	lr

08018abc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8018abc:	b580      	push	{r7, lr}
 8018abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8018ac0:	f000 f9d0 	bl	8018e64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8018ac4:	bf00      	nop
 8018ac6:	bd80      	pop	{r7, pc}

08018ac8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8018ac8:	b580      	push	{r7, lr}
 8018aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8018acc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8018ad0:	f000 fcd0 	bl	8019474 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8018ad4:	bf00      	nop
 8018ad6:	bd80      	pop	{r7, pc}

08018ad8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8018ad8:	b580      	push	{r7, lr}
 8018ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8018adc:	4802      	ldr	r0, [pc, #8]	; (8018ae8 <OTG_FS_IRQHandler+0x10>)
 8018ade:	f000 ff7b 	bl	80199d8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8018ae2:	bf00      	nop
 8018ae4:	bd80      	pop	{r7, pc}
 8018ae6:	bf00      	nop
 8018ae8:	200008d4 	.word	0x200008d4

08018aec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8018aec:	b480      	push	{r7}
 8018aee:	af00      	add	r7, sp, #0
	return 1;
 8018af0:	2301      	movs	r3, #1
}
 8018af2:	4618      	mov	r0, r3
 8018af4:	46bd      	mov	sp, r7
 8018af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018afa:	4770      	bx	lr

08018afc <_kill>:

int _kill(int pid, int sig)
{
 8018afc:	b580      	push	{r7, lr}
 8018afe:	b082      	sub	sp, #8
 8018b00:	af00      	add	r7, sp, #0
 8018b02:	6078      	str	r0, [r7, #4]
 8018b04:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8018b06:	f007 fa53 	bl	801ffb0 <__errno>
 8018b0a:	4602      	mov	r2, r0
 8018b0c:	2316      	movs	r3, #22
 8018b0e:	6013      	str	r3, [r2, #0]
	return -1;
 8018b10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8018b14:	4618      	mov	r0, r3
 8018b16:	3708      	adds	r7, #8
 8018b18:	46bd      	mov	sp, r7
 8018b1a:	bd80      	pop	{r7, pc}

08018b1c <_exit>:

void _exit (int status)
{
 8018b1c:	b580      	push	{r7, lr}
 8018b1e:	b082      	sub	sp, #8
 8018b20:	af00      	add	r7, sp, #0
 8018b22:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8018b24:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8018b28:	6878      	ldr	r0, [r7, #4]
 8018b2a:	f7ff ffe7 	bl	8018afc <_kill>
	while (1) {}		/* Make sure we hang here */
 8018b2e:	e7fe      	b.n	8018b2e <_exit+0x12>

08018b30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8018b30:	b580      	push	{r7, lr}
 8018b32:	b086      	sub	sp, #24
 8018b34:	af00      	add	r7, sp, #0
 8018b36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8018b38:	4a14      	ldr	r2, [pc, #80]	; (8018b8c <_sbrk+0x5c>)
 8018b3a:	4b15      	ldr	r3, [pc, #84]	; (8018b90 <_sbrk+0x60>)
 8018b3c:	1ad3      	subs	r3, r2, r3
 8018b3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8018b40:	697b      	ldr	r3, [r7, #20]
 8018b42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8018b44:	4b13      	ldr	r3, [pc, #76]	; (8018b94 <_sbrk+0x64>)
 8018b46:	681b      	ldr	r3, [r3, #0]
 8018b48:	2b00      	cmp	r3, #0
 8018b4a:	d102      	bne.n	8018b52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8018b4c:	4b11      	ldr	r3, [pc, #68]	; (8018b94 <_sbrk+0x64>)
 8018b4e:	4a12      	ldr	r2, [pc, #72]	; (8018b98 <_sbrk+0x68>)
 8018b50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8018b52:	4b10      	ldr	r3, [pc, #64]	; (8018b94 <_sbrk+0x64>)
 8018b54:	681a      	ldr	r2, [r3, #0]
 8018b56:	687b      	ldr	r3, [r7, #4]
 8018b58:	4413      	add	r3, r2
 8018b5a:	693a      	ldr	r2, [r7, #16]
 8018b5c:	429a      	cmp	r2, r3
 8018b5e:	d207      	bcs.n	8018b70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8018b60:	f007 fa26 	bl	801ffb0 <__errno>
 8018b64:	4602      	mov	r2, r0
 8018b66:	230c      	movs	r3, #12
 8018b68:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8018b6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018b6e:	e009      	b.n	8018b84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8018b70:	4b08      	ldr	r3, [pc, #32]	; (8018b94 <_sbrk+0x64>)
 8018b72:	681b      	ldr	r3, [r3, #0]
 8018b74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8018b76:	4b07      	ldr	r3, [pc, #28]	; (8018b94 <_sbrk+0x64>)
 8018b78:	681a      	ldr	r2, [r3, #0]
 8018b7a:	687b      	ldr	r3, [r7, #4]
 8018b7c:	4413      	add	r3, r2
 8018b7e:	4a05      	ldr	r2, [pc, #20]	; (8018b94 <_sbrk+0x64>)
 8018b80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8018b82:	68fb      	ldr	r3, [r7, #12]
}
 8018b84:	4618      	mov	r0, r3
 8018b86:	3718      	adds	r7, #24
 8018b88:	46bd      	mov	sp, r7
 8018b8a:	bd80      	pop	{r7, pc}
 8018b8c:	20020000 	.word	0x20020000
 8018b90:	00000400 	.word	0x00000400
 8018b94:	20000364 	.word	0x20000364
 8018b98:	20000ba0 	.word	0x20000ba0

08018b9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8018b9c:	b480      	push	{r7}
 8018b9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8018ba0:	4b08      	ldr	r3, [pc, #32]	; (8018bc4 <SystemInit+0x28>)
 8018ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018ba6:	4a07      	ldr	r2, [pc, #28]	; (8018bc4 <SystemInit+0x28>)
 8018ba8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8018bac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8018bb0:	4b04      	ldr	r3, [pc, #16]	; (8018bc4 <SystemInit+0x28>)
 8018bb2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8018bb6:	609a      	str	r2, [r3, #8]
#endif
}
 8018bb8:	bf00      	nop
 8018bba:	46bd      	mov	sp, r7
 8018bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bc0:	4770      	bx	lr
 8018bc2:	bf00      	nop
 8018bc4:	e000ed00 	.word	0xe000ed00

08018bc8 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8018bc8:	b580      	push	{r7, lr}
 8018bca:	b08e      	sub	sp, #56	; 0x38
 8018bcc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8018bce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8018bd2:	2200      	movs	r2, #0
 8018bd4:	601a      	str	r2, [r3, #0]
 8018bd6:	605a      	str	r2, [r3, #4]
 8018bd8:	609a      	str	r2, [r3, #8]
 8018bda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8018bdc:	f107 0320 	add.w	r3, r7, #32
 8018be0:	2200      	movs	r2, #0
 8018be2:	601a      	str	r2, [r3, #0]
 8018be4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8018be6:	1d3b      	adds	r3, r7, #4
 8018be8:	2200      	movs	r2, #0
 8018bea:	601a      	str	r2, [r3, #0]
 8018bec:	605a      	str	r2, [r3, #4]
 8018bee:	609a      	str	r2, [r3, #8]
 8018bf0:	60da      	str	r2, [r3, #12]
 8018bf2:	611a      	str	r2, [r3, #16]
 8018bf4:	615a      	str	r2, [r3, #20]
 8018bf6:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8018bf8:	4b2c      	ldr	r3, [pc, #176]	; (8018cac <MX_TIM3_Init+0xe4>)
 8018bfa:	4a2d      	ldr	r2, [pc, #180]	; (8018cb0 <MX_TIM3_Init+0xe8>)
 8018bfc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 95;
 8018bfe:	4b2b      	ldr	r3, [pc, #172]	; (8018cac <MX_TIM3_Init+0xe4>)
 8018c00:	225f      	movs	r2, #95	; 0x5f
 8018c02:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8018c04:	4b29      	ldr	r3, [pc, #164]	; (8018cac <MX_TIM3_Init+0xe4>)
 8018c06:	2200      	movs	r2, #0
 8018c08:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 24;
 8018c0a:	4b28      	ldr	r3, [pc, #160]	; (8018cac <MX_TIM3_Init+0xe4>)
 8018c0c:	2218      	movs	r2, #24
 8018c0e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8018c10:	4b26      	ldr	r3, [pc, #152]	; (8018cac <MX_TIM3_Init+0xe4>)
 8018c12:	2200      	movs	r2, #0
 8018c14:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8018c16:	4b25      	ldr	r3, [pc, #148]	; (8018cac <MX_TIM3_Init+0xe4>)
 8018c18:	2280      	movs	r2, #128	; 0x80
 8018c1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8018c1c:	4823      	ldr	r0, [pc, #140]	; (8018cac <MX_TIM3_Init+0xe4>)
 8018c1e:	f003 fed9 	bl	801c9d4 <HAL_TIM_Base_Init>
 8018c22:	4603      	mov	r3, r0
 8018c24:	2b00      	cmp	r3, #0
 8018c26:	d001      	beq.n	8018c2c <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8018c28:	f7ff fe72 	bl	8018910 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8018c2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8018c30:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8018c32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8018c36:	4619      	mov	r1, r3
 8018c38:	481c      	ldr	r0, [pc, #112]	; (8018cac <MX_TIM3_Init+0xe4>)
 8018c3a:	f004 f823 	bl	801cc84 <HAL_TIM_ConfigClockSource>
 8018c3e:	4603      	mov	r3, r0
 8018c40:	2b00      	cmp	r3, #0
 8018c42:	d001      	beq.n	8018c48 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8018c44:	f7ff fe64 	bl	8018910 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8018c48:	4818      	ldr	r0, [pc, #96]	; (8018cac <MX_TIM3_Init+0xe4>)
 8018c4a:	f003 feee 	bl	801ca2a <HAL_TIM_PWM_Init>
 8018c4e:	4603      	mov	r3, r0
 8018c50:	2b00      	cmp	r3, #0
 8018c52:	d001      	beq.n	8018c58 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8018c54:	f7ff fe5c 	bl	8018910 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8018c58:	2300      	movs	r3, #0
 8018c5a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8018c5c:	2300      	movs	r3, #0
 8018c5e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8018c60:	f107 0320 	add.w	r3, r7, #32
 8018c64:	4619      	mov	r1, r3
 8018c66:	4811      	ldr	r0, [pc, #68]	; (8018cac <MX_TIM3_Init+0xe4>)
 8018c68:	f004 fb90 	bl	801d38c <HAL_TIMEx_MasterConfigSynchronization>
 8018c6c:	4603      	mov	r3, r0
 8018c6e:	2b00      	cmp	r3, #0
 8018c70:	d001      	beq.n	8018c76 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8018c72:	f7ff fe4d 	bl	8018910 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8018c76:	2360      	movs	r3, #96	; 0x60
 8018c78:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8018c7a:	2300      	movs	r3, #0
 8018c7c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8018c7e:	2300      	movs	r3, #0
 8018c80:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8018c82:	2300      	movs	r3, #0
 8018c84:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8018c86:	1d3b      	adds	r3, r7, #4
 8018c88:	2200      	movs	r2, #0
 8018c8a:	4619      	mov	r1, r3
 8018c8c:	4807      	ldr	r0, [pc, #28]	; (8018cac <MX_TIM3_Init+0xe4>)
 8018c8e:	f003 ff33 	bl	801caf8 <HAL_TIM_PWM_ConfigChannel>
 8018c92:	4603      	mov	r3, r0
 8018c94:	2b00      	cmp	r3, #0
 8018c96:	d001      	beq.n	8018c9c <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8018c98:	f7ff fe3a 	bl	8018910 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8018c9c:	4803      	ldr	r0, [pc, #12]	; (8018cac <MX_TIM3_Init+0xe4>)
 8018c9e:	f000 f82b 	bl	8018cf8 <HAL_TIM_MspPostInit>

}
 8018ca2:	bf00      	nop
 8018ca4:	3738      	adds	r7, #56	; 0x38
 8018ca6:	46bd      	mov	sp, r7
 8018ca8:	bd80      	pop	{r7, pc}
 8018caa:	bf00      	nop
 8018cac:	200004b8 	.word	0x200004b8
 8018cb0:	40000400 	.word	0x40000400

08018cb4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8018cb4:	b480      	push	{r7}
 8018cb6:	b085      	sub	sp, #20
 8018cb8:	af00      	add	r7, sp, #0
 8018cba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8018cbc:	687b      	ldr	r3, [r7, #4]
 8018cbe:	681b      	ldr	r3, [r3, #0]
 8018cc0:	4a0b      	ldr	r2, [pc, #44]	; (8018cf0 <HAL_TIM_Base_MspInit+0x3c>)
 8018cc2:	4293      	cmp	r3, r2
 8018cc4:	d10d      	bne.n	8018ce2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8018cc6:	2300      	movs	r3, #0
 8018cc8:	60fb      	str	r3, [r7, #12]
 8018cca:	4b0a      	ldr	r3, [pc, #40]	; (8018cf4 <HAL_TIM_Base_MspInit+0x40>)
 8018ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018cce:	4a09      	ldr	r2, [pc, #36]	; (8018cf4 <HAL_TIM_Base_MspInit+0x40>)
 8018cd0:	f043 0302 	orr.w	r3, r3, #2
 8018cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8018cd6:	4b07      	ldr	r3, [pc, #28]	; (8018cf4 <HAL_TIM_Base_MspInit+0x40>)
 8018cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018cda:	f003 0302 	and.w	r3, r3, #2
 8018cde:	60fb      	str	r3, [r7, #12]
 8018ce0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8018ce2:	bf00      	nop
 8018ce4:	3714      	adds	r7, #20
 8018ce6:	46bd      	mov	sp, r7
 8018ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cec:	4770      	bx	lr
 8018cee:	bf00      	nop
 8018cf0:	40000400 	.word	0x40000400
 8018cf4:	40023800 	.word	0x40023800

08018cf8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8018cf8:	b580      	push	{r7, lr}
 8018cfa:	b088      	sub	sp, #32
 8018cfc:	af00      	add	r7, sp, #0
 8018cfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018d00:	f107 030c 	add.w	r3, r7, #12
 8018d04:	2200      	movs	r2, #0
 8018d06:	601a      	str	r2, [r3, #0]
 8018d08:	605a      	str	r2, [r3, #4]
 8018d0a:	609a      	str	r2, [r3, #8]
 8018d0c:	60da      	str	r2, [r3, #12]
 8018d0e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8018d10:	687b      	ldr	r3, [r7, #4]
 8018d12:	681b      	ldr	r3, [r3, #0]
 8018d14:	4a12      	ldr	r2, [pc, #72]	; (8018d60 <HAL_TIM_MspPostInit+0x68>)
 8018d16:	4293      	cmp	r3, r2
 8018d18:	d11d      	bne.n	8018d56 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8018d1a:	2300      	movs	r3, #0
 8018d1c:	60bb      	str	r3, [r7, #8]
 8018d1e:	4b11      	ldr	r3, [pc, #68]	; (8018d64 <HAL_TIM_MspPostInit+0x6c>)
 8018d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018d22:	4a10      	ldr	r2, [pc, #64]	; (8018d64 <HAL_TIM_MspPostInit+0x6c>)
 8018d24:	f043 0304 	orr.w	r3, r3, #4
 8018d28:	6313      	str	r3, [r2, #48]	; 0x30
 8018d2a:	4b0e      	ldr	r3, [pc, #56]	; (8018d64 <HAL_TIM_MspPostInit+0x6c>)
 8018d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018d2e:	f003 0304 	and.w	r3, r3, #4
 8018d32:	60bb      	str	r3, [r7, #8]
 8018d34:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8018d36:	2340      	movs	r3, #64	; 0x40
 8018d38:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018d3a:	2302      	movs	r3, #2
 8018d3c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018d3e:	2300      	movs	r3, #0
 8018d40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8018d42:	2300      	movs	r3, #0
 8018d44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8018d46:	2302      	movs	r3, #2
 8018d48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8018d4a:	f107 030c 	add.w	r3, r7, #12
 8018d4e:	4619      	mov	r1, r3
 8018d50:	4805      	ldr	r0, [pc, #20]	; (8018d68 <HAL_TIM_MspPostInit+0x70>)
 8018d52:	f000 f9db 	bl	801910c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8018d56:	bf00      	nop
 8018d58:	3720      	adds	r7, #32
 8018d5a:	46bd      	mov	sp, r7
 8018d5c:	bd80      	pop	{r7, pc}
 8018d5e:	bf00      	nop
 8018d60:	40000400 	.word	0x40000400
 8018d64:	40023800 	.word	0x40023800
 8018d68:	40020800 	.word	0x40020800

08018d6c <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack    		 /* set stack pointer */
 8018d6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8018da4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8018d70:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8018d72:	e003      	b.n	8018d7c <LoopCopyDataInit>

08018d74 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8018d74:	4b0c      	ldr	r3, [pc, #48]	; (8018da8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8018d76:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8018d78:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8018d7a:	3104      	adds	r1, #4

08018d7c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8018d7c:	480b      	ldr	r0, [pc, #44]	; (8018dac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8018d7e:	4b0c      	ldr	r3, [pc, #48]	; (8018db0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8018d80:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8018d82:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8018d84:	d3f6      	bcc.n	8018d74 <CopyDataInit>
  ldr  r2, =_sbss
 8018d86:	4a0b      	ldr	r2, [pc, #44]	; (8018db4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8018d88:	e002      	b.n	8018d90 <LoopFillZerobss>

08018d8a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8018d8a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8018d8c:	f842 3b04 	str.w	r3, [r2], #4

08018d90 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8018d90:	4b09      	ldr	r3, [pc, #36]	; (8018db8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8018d92:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8018d94:	d3f9      	bcc.n	8018d8a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8018d96:	f7ff ff01 	bl	8018b9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8018d9a:	f007 f90f 	bl	801ffbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8018d9e:	f7ff fcfd 	bl	801879c <main>
  bx  lr    
 8018da2:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack    		 /* set stack pointer */
 8018da4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8018da8:	08024ed0 	.word	0x08024ed0
  ldr  r0, =_sdata
 8018dac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8018db0:	20000348 	.word	0x20000348
  ldr  r2, =_sbss
 8018db4:	20000348 	.word	0x20000348
  ldr  r3, = _ebss
 8018db8:	20000b9c 	.word	0x20000b9c

08018dbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8018dbc:	e7fe      	b.n	8018dbc <ADC_IRQHandler>
	...

08018dc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8018dc0:	b580      	push	{r7, lr}
 8018dc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8018dc4:	4b0e      	ldr	r3, [pc, #56]	; (8018e00 <HAL_Init+0x40>)
 8018dc6:	681b      	ldr	r3, [r3, #0]
 8018dc8:	4a0d      	ldr	r2, [pc, #52]	; (8018e00 <HAL_Init+0x40>)
 8018dca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8018dce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8018dd0:	4b0b      	ldr	r3, [pc, #44]	; (8018e00 <HAL_Init+0x40>)
 8018dd2:	681b      	ldr	r3, [r3, #0]
 8018dd4:	4a0a      	ldr	r2, [pc, #40]	; (8018e00 <HAL_Init+0x40>)
 8018dd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8018dda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8018ddc:	4b08      	ldr	r3, [pc, #32]	; (8018e00 <HAL_Init+0x40>)
 8018dde:	681b      	ldr	r3, [r3, #0]
 8018de0:	4a07      	ldr	r2, [pc, #28]	; (8018e00 <HAL_Init+0x40>)
 8018de2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8018de6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8018de8:	2003      	movs	r0, #3
 8018dea:	f000 f94d 	bl	8019088 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8018dee:	2000      	movs	r0, #0
 8018df0:	f000 f808 	bl	8018e04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8018df4:	f7ff fe12 	bl	8018a1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8018df8:	2300      	movs	r3, #0
}
 8018dfa:	4618      	mov	r0, r3
 8018dfc:	bd80      	pop	{r7, pc}
 8018dfe:	bf00      	nop
 8018e00:	40023c00 	.word	0x40023c00

08018e04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8018e04:	b580      	push	{r7, lr}
 8018e06:	b082      	sub	sp, #8
 8018e08:	af00      	add	r7, sp, #0
 8018e0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8018e0c:	4b12      	ldr	r3, [pc, #72]	; (8018e58 <HAL_InitTick+0x54>)
 8018e0e:	681a      	ldr	r2, [r3, #0]
 8018e10:	4b12      	ldr	r3, [pc, #72]	; (8018e5c <HAL_InitTick+0x58>)
 8018e12:	781b      	ldrb	r3, [r3, #0]
 8018e14:	4619      	mov	r1, r3
 8018e16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8018e1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8018e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8018e22:	4618      	mov	r0, r3
 8018e24:	f000 f965 	bl	80190f2 <HAL_SYSTICK_Config>
 8018e28:	4603      	mov	r3, r0
 8018e2a:	2b00      	cmp	r3, #0
 8018e2c:	d001      	beq.n	8018e32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8018e2e:	2301      	movs	r3, #1
 8018e30:	e00e      	b.n	8018e50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8018e32:	687b      	ldr	r3, [r7, #4]
 8018e34:	2b0f      	cmp	r3, #15
 8018e36:	d80a      	bhi.n	8018e4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8018e38:	2200      	movs	r2, #0
 8018e3a:	6879      	ldr	r1, [r7, #4]
 8018e3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018e40:	f000 f92d 	bl	801909e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8018e44:	4a06      	ldr	r2, [pc, #24]	; (8018e60 <HAL_InitTick+0x5c>)
 8018e46:	687b      	ldr	r3, [r7, #4]
 8018e48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8018e4a:	2300      	movs	r3, #0
 8018e4c:	e000      	b.n	8018e50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8018e4e:	2301      	movs	r3, #1
}
 8018e50:	4618      	mov	r0, r3
 8018e52:	3708      	adds	r7, #8
 8018e54:	46bd      	mov	sp, r7
 8018e56:	bd80      	pop	{r7, pc}
 8018e58:	200002b4 	.word	0x200002b4
 8018e5c:	200002bc 	.word	0x200002bc
 8018e60:	200002b8 	.word	0x200002b8

08018e64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8018e64:	b480      	push	{r7}
 8018e66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8018e68:	4b06      	ldr	r3, [pc, #24]	; (8018e84 <HAL_IncTick+0x20>)
 8018e6a:	781b      	ldrb	r3, [r3, #0]
 8018e6c:	461a      	mov	r2, r3
 8018e6e:	4b06      	ldr	r3, [pc, #24]	; (8018e88 <HAL_IncTick+0x24>)
 8018e70:	681b      	ldr	r3, [r3, #0]
 8018e72:	4413      	add	r3, r2
 8018e74:	4a04      	ldr	r2, [pc, #16]	; (8018e88 <HAL_IncTick+0x24>)
 8018e76:	6013      	str	r3, [r2, #0]
}
 8018e78:	bf00      	nop
 8018e7a:	46bd      	mov	sp, r7
 8018e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e80:	4770      	bx	lr
 8018e82:	bf00      	nop
 8018e84:	200002bc 	.word	0x200002bc
 8018e88:	200004f8 	.word	0x200004f8

08018e8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8018e8c:	b480      	push	{r7}
 8018e8e:	af00      	add	r7, sp, #0
  return uwTick;
 8018e90:	4b03      	ldr	r3, [pc, #12]	; (8018ea0 <HAL_GetTick+0x14>)
 8018e92:	681b      	ldr	r3, [r3, #0]
}
 8018e94:	4618      	mov	r0, r3
 8018e96:	46bd      	mov	sp, r7
 8018e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e9c:	4770      	bx	lr
 8018e9e:	bf00      	nop
 8018ea0:	200004f8 	.word	0x200004f8

08018ea4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8018ea4:	b580      	push	{r7, lr}
 8018ea6:	b084      	sub	sp, #16
 8018ea8:	af00      	add	r7, sp, #0
 8018eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8018eac:	f7ff ffee 	bl	8018e8c <HAL_GetTick>
 8018eb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8018eb2:	687b      	ldr	r3, [r7, #4]
 8018eb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8018eb6:	68fb      	ldr	r3, [r7, #12]
 8018eb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018ebc:	d005      	beq.n	8018eca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8018ebe:	4b09      	ldr	r3, [pc, #36]	; (8018ee4 <HAL_Delay+0x40>)
 8018ec0:	781b      	ldrb	r3, [r3, #0]
 8018ec2:	461a      	mov	r2, r3
 8018ec4:	68fb      	ldr	r3, [r7, #12]
 8018ec6:	4413      	add	r3, r2
 8018ec8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8018eca:	bf00      	nop
 8018ecc:	f7ff ffde 	bl	8018e8c <HAL_GetTick>
 8018ed0:	4602      	mov	r2, r0
 8018ed2:	68bb      	ldr	r3, [r7, #8]
 8018ed4:	1ad3      	subs	r3, r2, r3
 8018ed6:	68fa      	ldr	r2, [r7, #12]
 8018ed8:	429a      	cmp	r2, r3
 8018eda:	d8f7      	bhi.n	8018ecc <HAL_Delay+0x28>
  {
  }
}
 8018edc:	bf00      	nop
 8018ede:	3710      	adds	r7, #16
 8018ee0:	46bd      	mov	sp, r7
 8018ee2:	bd80      	pop	{r7, pc}
 8018ee4:	200002bc 	.word	0x200002bc

08018ee8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8018ee8:	b480      	push	{r7}
 8018eea:	b085      	sub	sp, #20
 8018eec:	af00      	add	r7, sp, #0
 8018eee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8018ef0:	687b      	ldr	r3, [r7, #4]
 8018ef2:	f003 0307 	and.w	r3, r3, #7
 8018ef6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8018ef8:	4b0c      	ldr	r3, [pc, #48]	; (8018f2c <__NVIC_SetPriorityGrouping+0x44>)
 8018efa:	68db      	ldr	r3, [r3, #12]
 8018efc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8018efe:	68ba      	ldr	r2, [r7, #8]
 8018f00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8018f04:	4013      	ands	r3, r2
 8018f06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8018f08:	68fb      	ldr	r3, [r7, #12]
 8018f0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8018f0c:	68bb      	ldr	r3, [r7, #8]
 8018f0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8018f10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8018f14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8018f18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8018f1a:	4a04      	ldr	r2, [pc, #16]	; (8018f2c <__NVIC_SetPriorityGrouping+0x44>)
 8018f1c:	68bb      	ldr	r3, [r7, #8]
 8018f1e:	60d3      	str	r3, [r2, #12]
}
 8018f20:	bf00      	nop
 8018f22:	3714      	adds	r7, #20
 8018f24:	46bd      	mov	sp, r7
 8018f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f2a:	4770      	bx	lr
 8018f2c:	e000ed00 	.word	0xe000ed00

08018f30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8018f30:	b480      	push	{r7}
 8018f32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8018f34:	4b04      	ldr	r3, [pc, #16]	; (8018f48 <__NVIC_GetPriorityGrouping+0x18>)
 8018f36:	68db      	ldr	r3, [r3, #12]
 8018f38:	0a1b      	lsrs	r3, r3, #8
 8018f3a:	f003 0307 	and.w	r3, r3, #7
}
 8018f3e:	4618      	mov	r0, r3
 8018f40:	46bd      	mov	sp, r7
 8018f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f46:	4770      	bx	lr
 8018f48:	e000ed00 	.word	0xe000ed00

08018f4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8018f4c:	b480      	push	{r7}
 8018f4e:	b083      	sub	sp, #12
 8018f50:	af00      	add	r7, sp, #0
 8018f52:	4603      	mov	r3, r0
 8018f54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8018f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018f5a:	2b00      	cmp	r3, #0
 8018f5c:	db0b      	blt.n	8018f76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8018f5e:	79fb      	ldrb	r3, [r7, #7]
 8018f60:	f003 021f 	and.w	r2, r3, #31
 8018f64:	4907      	ldr	r1, [pc, #28]	; (8018f84 <__NVIC_EnableIRQ+0x38>)
 8018f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018f6a:	095b      	lsrs	r3, r3, #5
 8018f6c:	2001      	movs	r0, #1
 8018f6e:	fa00 f202 	lsl.w	r2, r0, r2
 8018f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8018f76:	bf00      	nop
 8018f78:	370c      	adds	r7, #12
 8018f7a:	46bd      	mov	sp, r7
 8018f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f80:	4770      	bx	lr
 8018f82:	bf00      	nop
 8018f84:	e000e100 	.word	0xe000e100

08018f88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8018f88:	b480      	push	{r7}
 8018f8a:	b083      	sub	sp, #12
 8018f8c:	af00      	add	r7, sp, #0
 8018f8e:	4603      	mov	r3, r0
 8018f90:	6039      	str	r1, [r7, #0]
 8018f92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8018f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018f98:	2b00      	cmp	r3, #0
 8018f9a:	db0a      	blt.n	8018fb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8018f9c:	683b      	ldr	r3, [r7, #0]
 8018f9e:	b2da      	uxtb	r2, r3
 8018fa0:	490c      	ldr	r1, [pc, #48]	; (8018fd4 <__NVIC_SetPriority+0x4c>)
 8018fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018fa6:	0112      	lsls	r2, r2, #4
 8018fa8:	b2d2      	uxtb	r2, r2
 8018faa:	440b      	add	r3, r1
 8018fac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8018fb0:	e00a      	b.n	8018fc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8018fb2:	683b      	ldr	r3, [r7, #0]
 8018fb4:	b2da      	uxtb	r2, r3
 8018fb6:	4908      	ldr	r1, [pc, #32]	; (8018fd8 <__NVIC_SetPriority+0x50>)
 8018fb8:	79fb      	ldrb	r3, [r7, #7]
 8018fba:	f003 030f 	and.w	r3, r3, #15
 8018fbe:	3b04      	subs	r3, #4
 8018fc0:	0112      	lsls	r2, r2, #4
 8018fc2:	b2d2      	uxtb	r2, r2
 8018fc4:	440b      	add	r3, r1
 8018fc6:	761a      	strb	r2, [r3, #24]
}
 8018fc8:	bf00      	nop
 8018fca:	370c      	adds	r7, #12
 8018fcc:	46bd      	mov	sp, r7
 8018fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fd2:	4770      	bx	lr
 8018fd4:	e000e100 	.word	0xe000e100
 8018fd8:	e000ed00 	.word	0xe000ed00

08018fdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8018fdc:	b480      	push	{r7}
 8018fde:	b089      	sub	sp, #36	; 0x24
 8018fe0:	af00      	add	r7, sp, #0
 8018fe2:	60f8      	str	r0, [r7, #12]
 8018fe4:	60b9      	str	r1, [r7, #8]
 8018fe6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8018fe8:	68fb      	ldr	r3, [r7, #12]
 8018fea:	f003 0307 	and.w	r3, r3, #7
 8018fee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8018ff0:	69fb      	ldr	r3, [r7, #28]
 8018ff2:	f1c3 0307 	rsb	r3, r3, #7
 8018ff6:	2b04      	cmp	r3, #4
 8018ff8:	bf28      	it	cs
 8018ffa:	2304      	movcs	r3, #4
 8018ffc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8018ffe:	69fb      	ldr	r3, [r7, #28]
 8019000:	3304      	adds	r3, #4
 8019002:	2b06      	cmp	r3, #6
 8019004:	d902      	bls.n	801900c <NVIC_EncodePriority+0x30>
 8019006:	69fb      	ldr	r3, [r7, #28]
 8019008:	3b03      	subs	r3, #3
 801900a:	e000      	b.n	801900e <NVIC_EncodePriority+0x32>
 801900c:	2300      	movs	r3, #0
 801900e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8019010:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019014:	69bb      	ldr	r3, [r7, #24]
 8019016:	fa02 f303 	lsl.w	r3, r2, r3
 801901a:	43da      	mvns	r2, r3
 801901c:	68bb      	ldr	r3, [r7, #8]
 801901e:	401a      	ands	r2, r3
 8019020:	697b      	ldr	r3, [r7, #20]
 8019022:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8019024:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8019028:	697b      	ldr	r3, [r7, #20]
 801902a:	fa01 f303 	lsl.w	r3, r1, r3
 801902e:	43d9      	mvns	r1, r3
 8019030:	687b      	ldr	r3, [r7, #4]
 8019032:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8019034:	4313      	orrs	r3, r2
         );
}
 8019036:	4618      	mov	r0, r3
 8019038:	3724      	adds	r7, #36	; 0x24
 801903a:	46bd      	mov	sp, r7
 801903c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019040:	4770      	bx	lr
	...

08019044 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8019044:	b580      	push	{r7, lr}
 8019046:	b082      	sub	sp, #8
 8019048:	af00      	add	r7, sp, #0
 801904a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 801904c:	687b      	ldr	r3, [r7, #4]
 801904e:	3b01      	subs	r3, #1
 8019050:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8019054:	d301      	bcc.n	801905a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8019056:	2301      	movs	r3, #1
 8019058:	e00f      	b.n	801907a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801905a:	4a0a      	ldr	r2, [pc, #40]	; (8019084 <SysTick_Config+0x40>)
 801905c:	687b      	ldr	r3, [r7, #4]
 801905e:	3b01      	subs	r3, #1
 8019060:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8019062:	210f      	movs	r1, #15
 8019064:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019068:	f7ff ff8e 	bl	8018f88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801906c:	4b05      	ldr	r3, [pc, #20]	; (8019084 <SysTick_Config+0x40>)
 801906e:	2200      	movs	r2, #0
 8019070:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8019072:	4b04      	ldr	r3, [pc, #16]	; (8019084 <SysTick_Config+0x40>)
 8019074:	2207      	movs	r2, #7
 8019076:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8019078:	2300      	movs	r3, #0
}
 801907a:	4618      	mov	r0, r3
 801907c:	3708      	adds	r7, #8
 801907e:	46bd      	mov	sp, r7
 8019080:	bd80      	pop	{r7, pc}
 8019082:	bf00      	nop
 8019084:	e000e010 	.word	0xe000e010

08019088 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8019088:	b580      	push	{r7, lr}
 801908a:	b082      	sub	sp, #8
 801908c:	af00      	add	r7, sp, #0
 801908e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8019090:	6878      	ldr	r0, [r7, #4]
 8019092:	f7ff ff29 	bl	8018ee8 <__NVIC_SetPriorityGrouping>
}
 8019096:	bf00      	nop
 8019098:	3708      	adds	r7, #8
 801909a:	46bd      	mov	sp, r7
 801909c:	bd80      	pop	{r7, pc}

0801909e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 801909e:	b580      	push	{r7, lr}
 80190a0:	b086      	sub	sp, #24
 80190a2:	af00      	add	r7, sp, #0
 80190a4:	4603      	mov	r3, r0
 80190a6:	60b9      	str	r1, [r7, #8]
 80190a8:	607a      	str	r2, [r7, #4]
 80190aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80190ac:	2300      	movs	r3, #0
 80190ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80190b0:	f7ff ff3e 	bl	8018f30 <__NVIC_GetPriorityGrouping>
 80190b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80190b6:	687a      	ldr	r2, [r7, #4]
 80190b8:	68b9      	ldr	r1, [r7, #8]
 80190ba:	6978      	ldr	r0, [r7, #20]
 80190bc:	f7ff ff8e 	bl	8018fdc <NVIC_EncodePriority>
 80190c0:	4602      	mov	r2, r0
 80190c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80190c6:	4611      	mov	r1, r2
 80190c8:	4618      	mov	r0, r3
 80190ca:	f7ff ff5d 	bl	8018f88 <__NVIC_SetPriority>
}
 80190ce:	bf00      	nop
 80190d0:	3718      	adds	r7, #24
 80190d2:	46bd      	mov	sp, r7
 80190d4:	bd80      	pop	{r7, pc}

080190d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80190d6:	b580      	push	{r7, lr}
 80190d8:	b082      	sub	sp, #8
 80190da:	af00      	add	r7, sp, #0
 80190dc:	4603      	mov	r3, r0
 80190de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80190e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80190e4:	4618      	mov	r0, r3
 80190e6:	f7ff ff31 	bl	8018f4c <__NVIC_EnableIRQ>
}
 80190ea:	bf00      	nop
 80190ec:	3708      	adds	r7, #8
 80190ee:	46bd      	mov	sp, r7
 80190f0:	bd80      	pop	{r7, pc}

080190f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80190f2:	b580      	push	{r7, lr}
 80190f4:	b082      	sub	sp, #8
 80190f6:	af00      	add	r7, sp, #0
 80190f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80190fa:	6878      	ldr	r0, [r7, #4]
 80190fc:	f7ff ffa2 	bl	8019044 <SysTick_Config>
 8019100:	4603      	mov	r3, r0
}
 8019102:	4618      	mov	r0, r3
 8019104:	3708      	adds	r7, #8
 8019106:	46bd      	mov	sp, r7
 8019108:	bd80      	pop	{r7, pc}
	...

0801910c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801910c:	b480      	push	{r7}
 801910e:	b089      	sub	sp, #36	; 0x24
 8019110:	af00      	add	r7, sp, #0
 8019112:	6078      	str	r0, [r7, #4]
 8019114:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8019116:	2300      	movs	r3, #0
 8019118:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 801911a:	2300      	movs	r3, #0
 801911c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 801911e:	2300      	movs	r3, #0
 8019120:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8019122:	2300      	movs	r3, #0
 8019124:	61fb      	str	r3, [r7, #28]
 8019126:	e159      	b.n	80193dc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8019128:	2201      	movs	r2, #1
 801912a:	69fb      	ldr	r3, [r7, #28]
 801912c:	fa02 f303 	lsl.w	r3, r2, r3
 8019130:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8019132:	683b      	ldr	r3, [r7, #0]
 8019134:	681b      	ldr	r3, [r3, #0]
 8019136:	697a      	ldr	r2, [r7, #20]
 8019138:	4013      	ands	r3, r2
 801913a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 801913c:	693a      	ldr	r2, [r7, #16]
 801913e:	697b      	ldr	r3, [r7, #20]
 8019140:	429a      	cmp	r2, r3
 8019142:	f040 8148 	bne.w	80193d6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8019146:	683b      	ldr	r3, [r7, #0]
 8019148:	685b      	ldr	r3, [r3, #4]
 801914a:	2b01      	cmp	r3, #1
 801914c:	d00b      	beq.n	8019166 <HAL_GPIO_Init+0x5a>
 801914e:	683b      	ldr	r3, [r7, #0]
 8019150:	685b      	ldr	r3, [r3, #4]
 8019152:	2b02      	cmp	r3, #2
 8019154:	d007      	beq.n	8019166 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8019156:	683b      	ldr	r3, [r7, #0]
 8019158:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 801915a:	2b11      	cmp	r3, #17
 801915c:	d003      	beq.n	8019166 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801915e:	683b      	ldr	r3, [r7, #0]
 8019160:	685b      	ldr	r3, [r3, #4]
 8019162:	2b12      	cmp	r3, #18
 8019164:	d130      	bne.n	80191c8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8019166:	687b      	ldr	r3, [r7, #4]
 8019168:	689b      	ldr	r3, [r3, #8]
 801916a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 801916c:	69fb      	ldr	r3, [r7, #28]
 801916e:	005b      	lsls	r3, r3, #1
 8019170:	2203      	movs	r2, #3
 8019172:	fa02 f303 	lsl.w	r3, r2, r3
 8019176:	43db      	mvns	r3, r3
 8019178:	69ba      	ldr	r2, [r7, #24]
 801917a:	4013      	ands	r3, r2
 801917c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801917e:	683b      	ldr	r3, [r7, #0]
 8019180:	68da      	ldr	r2, [r3, #12]
 8019182:	69fb      	ldr	r3, [r7, #28]
 8019184:	005b      	lsls	r3, r3, #1
 8019186:	fa02 f303 	lsl.w	r3, r2, r3
 801918a:	69ba      	ldr	r2, [r7, #24]
 801918c:	4313      	orrs	r3, r2
 801918e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8019190:	687b      	ldr	r3, [r7, #4]
 8019192:	69ba      	ldr	r2, [r7, #24]
 8019194:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8019196:	687b      	ldr	r3, [r7, #4]
 8019198:	685b      	ldr	r3, [r3, #4]
 801919a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 801919c:	2201      	movs	r2, #1
 801919e:	69fb      	ldr	r3, [r7, #28]
 80191a0:	fa02 f303 	lsl.w	r3, r2, r3
 80191a4:	43db      	mvns	r3, r3
 80191a6:	69ba      	ldr	r2, [r7, #24]
 80191a8:	4013      	ands	r3, r2
 80191aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80191ac:	683b      	ldr	r3, [r7, #0]
 80191ae:	685b      	ldr	r3, [r3, #4]
 80191b0:	091b      	lsrs	r3, r3, #4
 80191b2:	f003 0201 	and.w	r2, r3, #1
 80191b6:	69fb      	ldr	r3, [r7, #28]
 80191b8:	fa02 f303 	lsl.w	r3, r2, r3
 80191bc:	69ba      	ldr	r2, [r7, #24]
 80191be:	4313      	orrs	r3, r2
 80191c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80191c2:	687b      	ldr	r3, [r7, #4]
 80191c4:	69ba      	ldr	r2, [r7, #24]
 80191c6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80191c8:	687b      	ldr	r3, [r7, #4]
 80191ca:	68db      	ldr	r3, [r3, #12]
 80191cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80191ce:	69fb      	ldr	r3, [r7, #28]
 80191d0:	005b      	lsls	r3, r3, #1
 80191d2:	2203      	movs	r2, #3
 80191d4:	fa02 f303 	lsl.w	r3, r2, r3
 80191d8:	43db      	mvns	r3, r3
 80191da:	69ba      	ldr	r2, [r7, #24]
 80191dc:	4013      	ands	r3, r2
 80191de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80191e0:	683b      	ldr	r3, [r7, #0]
 80191e2:	689a      	ldr	r2, [r3, #8]
 80191e4:	69fb      	ldr	r3, [r7, #28]
 80191e6:	005b      	lsls	r3, r3, #1
 80191e8:	fa02 f303 	lsl.w	r3, r2, r3
 80191ec:	69ba      	ldr	r2, [r7, #24]
 80191ee:	4313      	orrs	r3, r2
 80191f0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80191f2:	687b      	ldr	r3, [r7, #4]
 80191f4:	69ba      	ldr	r2, [r7, #24]
 80191f6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80191f8:	683b      	ldr	r3, [r7, #0]
 80191fa:	685b      	ldr	r3, [r3, #4]
 80191fc:	2b02      	cmp	r3, #2
 80191fe:	d003      	beq.n	8019208 <HAL_GPIO_Init+0xfc>
 8019200:	683b      	ldr	r3, [r7, #0]
 8019202:	685b      	ldr	r3, [r3, #4]
 8019204:	2b12      	cmp	r3, #18
 8019206:	d123      	bne.n	8019250 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8019208:	69fb      	ldr	r3, [r7, #28]
 801920a:	08da      	lsrs	r2, r3, #3
 801920c:	687b      	ldr	r3, [r7, #4]
 801920e:	3208      	adds	r2, #8
 8019210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019214:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8019216:	69fb      	ldr	r3, [r7, #28]
 8019218:	f003 0307 	and.w	r3, r3, #7
 801921c:	009b      	lsls	r3, r3, #2
 801921e:	220f      	movs	r2, #15
 8019220:	fa02 f303 	lsl.w	r3, r2, r3
 8019224:	43db      	mvns	r3, r3
 8019226:	69ba      	ldr	r2, [r7, #24]
 8019228:	4013      	ands	r3, r2
 801922a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 801922c:	683b      	ldr	r3, [r7, #0]
 801922e:	691a      	ldr	r2, [r3, #16]
 8019230:	69fb      	ldr	r3, [r7, #28]
 8019232:	f003 0307 	and.w	r3, r3, #7
 8019236:	009b      	lsls	r3, r3, #2
 8019238:	fa02 f303 	lsl.w	r3, r2, r3
 801923c:	69ba      	ldr	r2, [r7, #24]
 801923e:	4313      	orrs	r3, r2
 8019240:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8019242:	69fb      	ldr	r3, [r7, #28]
 8019244:	08da      	lsrs	r2, r3, #3
 8019246:	687b      	ldr	r3, [r7, #4]
 8019248:	3208      	adds	r2, #8
 801924a:	69b9      	ldr	r1, [r7, #24]
 801924c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8019250:	687b      	ldr	r3, [r7, #4]
 8019252:	681b      	ldr	r3, [r3, #0]
 8019254:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8019256:	69fb      	ldr	r3, [r7, #28]
 8019258:	005b      	lsls	r3, r3, #1
 801925a:	2203      	movs	r2, #3
 801925c:	fa02 f303 	lsl.w	r3, r2, r3
 8019260:	43db      	mvns	r3, r3
 8019262:	69ba      	ldr	r2, [r7, #24]
 8019264:	4013      	ands	r3, r2
 8019266:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8019268:	683b      	ldr	r3, [r7, #0]
 801926a:	685b      	ldr	r3, [r3, #4]
 801926c:	f003 0203 	and.w	r2, r3, #3
 8019270:	69fb      	ldr	r3, [r7, #28]
 8019272:	005b      	lsls	r3, r3, #1
 8019274:	fa02 f303 	lsl.w	r3, r2, r3
 8019278:	69ba      	ldr	r2, [r7, #24]
 801927a:	4313      	orrs	r3, r2
 801927c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801927e:	687b      	ldr	r3, [r7, #4]
 8019280:	69ba      	ldr	r2, [r7, #24]
 8019282:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8019284:	683b      	ldr	r3, [r7, #0]
 8019286:	685b      	ldr	r3, [r3, #4]
 8019288:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801928c:	2b00      	cmp	r3, #0
 801928e:	f000 80a2 	beq.w	80193d6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8019292:	2300      	movs	r3, #0
 8019294:	60fb      	str	r3, [r7, #12]
 8019296:	4b56      	ldr	r3, [pc, #344]	; (80193f0 <HAL_GPIO_Init+0x2e4>)
 8019298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801929a:	4a55      	ldr	r2, [pc, #340]	; (80193f0 <HAL_GPIO_Init+0x2e4>)
 801929c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80192a0:	6453      	str	r3, [r2, #68]	; 0x44
 80192a2:	4b53      	ldr	r3, [pc, #332]	; (80193f0 <HAL_GPIO_Init+0x2e4>)
 80192a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80192a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80192aa:	60fb      	str	r3, [r7, #12]
 80192ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80192ae:	4a51      	ldr	r2, [pc, #324]	; (80193f4 <HAL_GPIO_Init+0x2e8>)
 80192b0:	69fb      	ldr	r3, [r7, #28]
 80192b2:	089b      	lsrs	r3, r3, #2
 80192b4:	3302      	adds	r3, #2
 80192b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80192ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80192bc:	69fb      	ldr	r3, [r7, #28]
 80192be:	f003 0303 	and.w	r3, r3, #3
 80192c2:	009b      	lsls	r3, r3, #2
 80192c4:	220f      	movs	r2, #15
 80192c6:	fa02 f303 	lsl.w	r3, r2, r3
 80192ca:	43db      	mvns	r3, r3
 80192cc:	69ba      	ldr	r2, [r7, #24]
 80192ce:	4013      	ands	r3, r2
 80192d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80192d2:	687b      	ldr	r3, [r7, #4]
 80192d4:	4a48      	ldr	r2, [pc, #288]	; (80193f8 <HAL_GPIO_Init+0x2ec>)
 80192d6:	4293      	cmp	r3, r2
 80192d8:	d019      	beq.n	801930e <HAL_GPIO_Init+0x202>
 80192da:	687b      	ldr	r3, [r7, #4]
 80192dc:	4a47      	ldr	r2, [pc, #284]	; (80193fc <HAL_GPIO_Init+0x2f0>)
 80192de:	4293      	cmp	r3, r2
 80192e0:	d013      	beq.n	801930a <HAL_GPIO_Init+0x1fe>
 80192e2:	687b      	ldr	r3, [r7, #4]
 80192e4:	4a46      	ldr	r2, [pc, #280]	; (8019400 <HAL_GPIO_Init+0x2f4>)
 80192e6:	4293      	cmp	r3, r2
 80192e8:	d00d      	beq.n	8019306 <HAL_GPIO_Init+0x1fa>
 80192ea:	687b      	ldr	r3, [r7, #4]
 80192ec:	4a45      	ldr	r2, [pc, #276]	; (8019404 <HAL_GPIO_Init+0x2f8>)
 80192ee:	4293      	cmp	r3, r2
 80192f0:	d007      	beq.n	8019302 <HAL_GPIO_Init+0x1f6>
 80192f2:	687b      	ldr	r3, [r7, #4]
 80192f4:	4a44      	ldr	r2, [pc, #272]	; (8019408 <HAL_GPIO_Init+0x2fc>)
 80192f6:	4293      	cmp	r3, r2
 80192f8:	d101      	bne.n	80192fe <HAL_GPIO_Init+0x1f2>
 80192fa:	2304      	movs	r3, #4
 80192fc:	e008      	b.n	8019310 <HAL_GPIO_Init+0x204>
 80192fe:	2307      	movs	r3, #7
 8019300:	e006      	b.n	8019310 <HAL_GPIO_Init+0x204>
 8019302:	2303      	movs	r3, #3
 8019304:	e004      	b.n	8019310 <HAL_GPIO_Init+0x204>
 8019306:	2302      	movs	r3, #2
 8019308:	e002      	b.n	8019310 <HAL_GPIO_Init+0x204>
 801930a:	2301      	movs	r3, #1
 801930c:	e000      	b.n	8019310 <HAL_GPIO_Init+0x204>
 801930e:	2300      	movs	r3, #0
 8019310:	69fa      	ldr	r2, [r7, #28]
 8019312:	f002 0203 	and.w	r2, r2, #3
 8019316:	0092      	lsls	r2, r2, #2
 8019318:	4093      	lsls	r3, r2
 801931a:	69ba      	ldr	r2, [r7, #24]
 801931c:	4313      	orrs	r3, r2
 801931e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8019320:	4934      	ldr	r1, [pc, #208]	; (80193f4 <HAL_GPIO_Init+0x2e8>)
 8019322:	69fb      	ldr	r3, [r7, #28]
 8019324:	089b      	lsrs	r3, r3, #2
 8019326:	3302      	adds	r3, #2
 8019328:	69ba      	ldr	r2, [r7, #24]
 801932a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 801932e:	4b37      	ldr	r3, [pc, #220]	; (801940c <HAL_GPIO_Init+0x300>)
 8019330:	681b      	ldr	r3, [r3, #0]
 8019332:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8019334:	693b      	ldr	r3, [r7, #16]
 8019336:	43db      	mvns	r3, r3
 8019338:	69ba      	ldr	r2, [r7, #24]
 801933a:	4013      	ands	r3, r2
 801933c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 801933e:	683b      	ldr	r3, [r7, #0]
 8019340:	685b      	ldr	r3, [r3, #4]
 8019342:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8019346:	2b00      	cmp	r3, #0
 8019348:	d003      	beq.n	8019352 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 801934a:	69ba      	ldr	r2, [r7, #24]
 801934c:	693b      	ldr	r3, [r7, #16]
 801934e:	4313      	orrs	r3, r2
 8019350:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8019352:	4a2e      	ldr	r2, [pc, #184]	; (801940c <HAL_GPIO_Init+0x300>)
 8019354:	69bb      	ldr	r3, [r7, #24]
 8019356:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8019358:	4b2c      	ldr	r3, [pc, #176]	; (801940c <HAL_GPIO_Init+0x300>)
 801935a:	685b      	ldr	r3, [r3, #4]
 801935c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801935e:	693b      	ldr	r3, [r7, #16]
 8019360:	43db      	mvns	r3, r3
 8019362:	69ba      	ldr	r2, [r7, #24]
 8019364:	4013      	ands	r3, r2
 8019366:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8019368:	683b      	ldr	r3, [r7, #0]
 801936a:	685b      	ldr	r3, [r3, #4]
 801936c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8019370:	2b00      	cmp	r3, #0
 8019372:	d003      	beq.n	801937c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8019374:	69ba      	ldr	r2, [r7, #24]
 8019376:	693b      	ldr	r3, [r7, #16]
 8019378:	4313      	orrs	r3, r2
 801937a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 801937c:	4a23      	ldr	r2, [pc, #140]	; (801940c <HAL_GPIO_Init+0x300>)
 801937e:	69bb      	ldr	r3, [r7, #24]
 8019380:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8019382:	4b22      	ldr	r3, [pc, #136]	; (801940c <HAL_GPIO_Init+0x300>)
 8019384:	689b      	ldr	r3, [r3, #8]
 8019386:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8019388:	693b      	ldr	r3, [r7, #16]
 801938a:	43db      	mvns	r3, r3
 801938c:	69ba      	ldr	r2, [r7, #24]
 801938e:	4013      	ands	r3, r2
 8019390:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8019392:	683b      	ldr	r3, [r7, #0]
 8019394:	685b      	ldr	r3, [r3, #4]
 8019396:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801939a:	2b00      	cmp	r3, #0
 801939c:	d003      	beq.n	80193a6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 801939e:	69ba      	ldr	r2, [r7, #24]
 80193a0:	693b      	ldr	r3, [r7, #16]
 80193a2:	4313      	orrs	r3, r2
 80193a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80193a6:	4a19      	ldr	r2, [pc, #100]	; (801940c <HAL_GPIO_Init+0x300>)
 80193a8:	69bb      	ldr	r3, [r7, #24]
 80193aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80193ac:	4b17      	ldr	r3, [pc, #92]	; (801940c <HAL_GPIO_Init+0x300>)
 80193ae:	68db      	ldr	r3, [r3, #12]
 80193b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80193b2:	693b      	ldr	r3, [r7, #16]
 80193b4:	43db      	mvns	r3, r3
 80193b6:	69ba      	ldr	r2, [r7, #24]
 80193b8:	4013      	ands	r3, r2
 80193ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80193bc:	683b      	ldr	r3, [r7, #0]
 80193be:	685b      	ldr	r3, [r3, #4]
 80193c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80193c4:	2b00      	cmp	r3, #0
 80193c6:	d003      	beq.n	80193d0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80193c8:	69ba      	ldr	r2, [r7, #24]
 80193ca:	693b      	ldr	r3, [r7, #16]
 80193cc:	4313      	orrs	r3, r2
 80193ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80193d0:	4a0e      	ldr	r2, [pc, #56]	; (801940c <HAL_GPIO_Init+0x300>)
 80193d2:	69bb      	ldr	r3, [r7, #24]
 80193d4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80193d6:	69fb      	ldr	r3, [r7, #28]
 80193d8:	3301      	adds	r3, #1
 80193da:	61fb      	str	r3, [r7, #28]
 80193dc:	69fb      	ldr	r3, [r7, #28]
 80193de:	2b0f      	cmp	r3, #15
 80193e0:	f67f aea2 	bls.w	8019128 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80193e4:	bf00      	nop
 80193e6:	3724      	adds	r7, #36	; 0x24
 80193e8:	46bd      	mov	sp, r7
 80193ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193ee:	4770      	bx	lr
 80193f0:	40023800 	.word	0x40023800
 80193f4:	40013800 	.word	0x40013800
 80193f8:	40020000 	.word	0x40020000
 80193fc:	40020400 	.word	0x40020400
 8019400:	40020800 	.word	0x40020800
 8019404:	40020c00 	.word	0x40020c00
 8019408:	40021000 	.word	0x40021000
 801940c:	40013c00 	.word	0x40013c00

08019410 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8019410:	b480      	push	{r7}
 8019412:	b085      	sub	sp, #20
 8019414:	af00      	add	r7, sp, #0
 8019416:	6078      	str	r0, [r7, #4]
 8019418:	460b      	mov	r3, r1
 801941a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 801941c:	687b      	ldr	r3, [r7, #4]
 801941e:	691a      	ldr	r2, [r3, #16]
 8019420:	887b      	ldrh	r3, [r7, #2]
 8019422:	4013      	ands	r3, r2
 8019424:	2b00      	cmp	r3, #0
 8019426:	d002      	beq.n	801942e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8019428:	2301      	movs	r3, #1
 801942a:	73fb      	strb	r3, [r7, #15]
 801942c:	e001      	b.n	8019432 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 801942e:	2300      	movs	r3, #0
 8019430:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8019432:	7bfb      	ldrb	r3, [r7, #15]
}
 8019434:	4618      	mov	r0, r3
 8019436:	3714      	adds	r7, #20
 8019438:	46bd      	mov	sp, r7
 801943a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801943e:	4770      	bx	lr

08019440 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8019440:	b480      	push	{r7}
 8019442:	b083      	sub	sp, #12
 8019444:	af00      	add	r7, sp, #0
 8019446:	6078      	str	r0, [r7, #4]
 8019448:	460b      	mov	r3, r1
 801944a:	807b      	strh	r3, [r7, #2]
 801944c:	4613      	mov	r3, r2
 801944e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8019450:	787b      	ldrb	r3, [r7, #1]
 8019452:	2b00      	cmp	r3, #0
 8019454:	d003      	beq.n	801945e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8019456:	887a      	ldrh	r2, [r7, #2]
 8019458:	687b      	ldr	r3, [r7, #4]
 801945a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 801945c:	e003      	b.n	8019466 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 801945e:	887b      	ldrh	r3, [r7, #2]
 8019460:	041a      	lsls	r2, r3, #16
 8019462:	687b      	ldr	r3, [r7, #4]
 8019464:	619a      	str	r2, [r3, #24]
}
 8019466:	bf00      	nop
 8019468:	370c      	adds	r7, #12
 801946a:	46bd      	mov	sp, r7
 801946c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019470:	4770      	bx	lr
	...

08019474 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8019474:	b580      	push	{r7, lr}
 8019476:	b082      	sub	sp, #8
 8019478:	af00      	add	r7, sp, #0
 801947a:	4603      	mov	r3, r0
 801947c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 801947e:	4b08      	ldr	r3, [pc, #32]	; (80194a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8019480:	695a      	ldr	r2, [r3, #20]
 8019482:	88fb      	ldrh	r3, [r7, #6]
 8019484:	4013      	ands	r3, r2
 8019486:	2b00      	cmp	r3, #0
 8019488:	d006      	beq.n	8019498 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 801948a:	4a05      	ldr	r2, [pc, #20]	; (80194a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 801948c:	88fb      	ldrh	r3, [r7, #6]
 801948e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8019490:	88fb      	ldrh	r3, [r7, #6]
 8019492:	4618      	mov	r0, r3
 8019494:	f000 f806 	bl	80194a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8019498:	bf00      	nop
 801949a:	3708      	adds	r7, #8
 801949c:	46bd      	mov	sp, r7
 801949e:	bd80      	pop	{r7, pc}
 80194a0:	40013c00 	.word	0x40013c00

080194a4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80194a4:	b480      	push	{r7}
 80194a6:	b083      	sub	sp, #12
 80194a8:	af00      	add	r7, sp, #0
 80194aa:	4603      	mov	r3, r0
 80194ac:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80194ae:	bf00      	nop
 80194b0:	370c      	adds	r7, #12
 80194b2:	46bd      	mov	sp, r7
 80194b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194b8:	4770      	bx	lr

080194ba <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80194ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80194bc:	b08f      	sub	sp, #60	; 0x3c
 80194be:	af0a      	add	r7, sp, #40	; 0x28
 80194c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80194c2:	687b      	ldr	r3, [r7, #4]
 80194c4:	2b00      	cmp	r3, #0
 80194c6:	d101      	bne.n	80194cc <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80194c8:	2301      	movs	r3, #1
 80194ca:	e054      	b.n	8019576 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80194cc:	687b      	ldr	r3, [r7, #4]
 80194ce:	681b      	ldr	r3, [r3, #0]
 80194d0:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80194d2:	687b      	ldr	r3, [r7, #4]
 80194d4:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80194d8:	b2db      	uxtb	r3, r3
 80194da:	2b00      	cmp	r3, #0
 80194dc:	d106      	bne.n	80194ec <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80194de:	687b      	ldr	r3, [r7, #4]
 80194e0:	2200      	movs	r2, #0
 80194e2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80194e6:	6878      	ldr	r0, [r7, #4]
 80194e8:	f005 ff80 	bl	801f3ec <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80194ec:	687b      	ldr	r3, [r7, #4]
 80194ee:	2203      	movs	r2, #3
 80194f0:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80194f4:	68fb      	ldr	r3, [r7, #12]
 80194f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80194f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80194fc:	2b00      	cmp	r3, #0
 80194fe:	d102      	bne.n	8019506 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8019500:	687b      	ldr	r3, [r7, #4]
 8019502:	2200      	movs	r2, #0
 8019504:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8019506:	687b      	ldr	r3, [r7, #4]
 8019508:	681b      	ldr	r3, [r3, #0]
 801950a:	4618      	mov	r0, r3
 801950c:	f004 f81e 	bl	801d54c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8019510:	687b      	ldr	r3, [r7, #4]
 8019512:	681b      	ldr	r3, [r3, #0]
 8019514:	603b      	str	r3, [r7, #0]
 8019516:	687e      	ldr	r6, [r7, #4]
 8019518:	466d      	mov	r5, sp
 801951a:	f106 0410 	add.w	r4, r6, #16
 801951e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019520:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019522:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019524:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019526:	e894 0003 	ldmia.w	r4, {r0, r1}
 801952a:	e885 0003 	stmia.w	r5, {r0, r1}
 801952e:	1d33      	adds	r3, r6, #4
 8019530:	cb0e      	ldmia	r3, {r1, r2, r3}
 8019532:	6838      	ldr	r0, [r7, #0]
 8019534:	f003 ff98 	bl	801d468 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8019538:	687b      	ldr	r3, [r7, #4]
 801953a:	681b      	ldr	r3, [r3, #0]
 801953c:	2101      	movs	r1, #1
 801953e:	4618      	mov	r0, r3
 8019540:	f004 f815 	bl	801d56e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8019544:	687b      	ldr	r3, [r7, #4]
 8019546:	681b      	ldr	r3, [r3, #0]
 8019548:	603b      	str	r3, [r7, #0]
 801954a:	687e      	ldr	r6, [r7, #4]
 801954c:	466d      	mov	r5, sp
 801954e:	f106 0410 	add.w	r4, r6, #16
 8019552:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019554:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019556:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019558:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801955a:	e894 0003 	ldmia.w	r4, {r0, r1}
 801955e:	e885 0003 	stmia.w	r5, {r0, r1}
 8019562:	1d33      	adds	r3, r6, #4
 8019564:	cb0e      	ldmia	r3, {r1, r2, r3}
 8019566:	6838      	ldr	r0, [r7, #0]
 8019568:	f004 f928 	bl	801d7bc <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 801956c:	687b      	ldr	r3, [r7, #4]
 801956e:	2201      	movs	r2, #1
 8019570:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8019574:	2300      	movs	r3, #0
}
 8019576:	4618      	mov	r0, r3
 8019578:	3714      	adds	r7, #20
 801957a:	46bd      	mov	sp, r7
 801957c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801957e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 801957e:	b590      	push	{r4, r7, lr}
 8019580:	b089      	sub	sp, #36	; 0x24
 8019582:	af04      	add	r7, sp, #16
 8019584:	6078      	str	r0, [r7, #4]
 8019586:	4608      	mov	r0, r1
 8019588:	4611      	mov	r1, r2
 801958a:	461a      	mov	r2, r3
 801958c:	4603      	mov	r3, r0
 801958e:	70fb      	strb	r3, [r7, #3]
 8019590:	460b      	mov	r3, r1
 8019592:	70bb      	strb	r3, [r7, #2]
 8019594:	4613      	mov	r3, r2
 8019596:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8019598:	687b      	ldr	r3, [r7, #4]
 801959a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 801959e:	2b01      	cmp	r3, #1
 80195a0:	d101      	bne.n	80195a6 <HAL_HCD_HC_Init+0x28>
 80195a2:	2302      	movs	r3, #2
 80195a4:	e07f      	b.n	80196a6 <HAL_HCD_HC_Init+0x128>
 80195a6:	687b      	ldr	r3, [r7, #4]
 80195a8:	2201      	movs	r2, #1
 80195aa:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80195ae:	78fa      	ldrb	r2, [r7, #3]
 80195b0:	6879      	ldr	r1, [r7, #4]
 80195b2:	4613      	mov	r3, r2
 80195b4:	009b      	lsls	r3, r3, #2
 80195b6:	4413      	add	r3, r2
 80195b8:	00db      	lsls	r3, r3, #3
 80195ba:	440b      	add	r3, r1
 80195bc:	333d      	adds	r3, #61	; 0x3d
 80195be:	2200      	movs	r2, #0
 80195c0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80195c2:	78fa      	ldrb	r2, [r7, #3]
 80195c4:	6879      	ldr	r1, [r7, #4]
 80195c6:	4613      	mov	r3, r2
 80195c8:	009b      	lsls	r3, r3, #2
 80195ca:	4413      	add	r3, r2
 80195cc:	00db      	lsls	r3, r3, #3
 80195ce:	440b      	add	r3, r1
 80195d0:	3338      	adds	r3, #56	; 0x38
 80195d2:	787a      	ldrb	r2, [r7, #1]
 80195d4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80195d6:	78fa      	ldrb	r2, [r7, #3]
 80195d8:	6879      	ldr	r1, [r7, #4]
 80195da:	4613      	mov	r3, r2
 80195dc:	009b      	lsls	r3, r3, #2
 80195de:	4413      	add	r3, r2
 80195e0:	00db      	lsls	r3, r3, #3
 80195e2:	440b      	add	r3, r1
 80195e4:	3340      	adds	r3, #64	; 0x40
 80195e6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80195e8:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80195ea:	78fa      	ldrb	r2, [r7, #3]
 80195ec:	6879      	ldr	r1, [r7, #4]
 80195ee:	4613      	mov	r3, r2
 80195f0:	009b      	lsls	r3, r3, #2
 80195f2:	4413      	add	r3, r2
 80195f4:	00db      	lsls	r3, r3, #3
 80195f6:	440b      	add	r3, r1
 80195f8:	3339      	adds	r3, #57	; 0x39
 80195fa:	78fa      	ldrb	r2, [r7, #3]
 80195fc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80195fe:	78fa      	ldrb	r2, [r7, #3]
 8019600:	6879      	ldr	r1, [r7, #4]
 8019602:	4613      	mov	r3, r2
 8019604:	009b      	lsls	r3, r3, #2
 8019606:	4413      	add	r3, r2
 8019608:	00db      	lsls	r3, r3, #3
 801960a:	440b      	add	r3, r1
 801960c:	333f      	adds	r3, #63	; 0x3f
 801960e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8019612:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8019614:	78fa      	ldrb	r2, [r7, #3]
 8019616:	78bb      	ldrb	r3, [r7, #2]
 8019618:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801961c:	b2d8      	uxtb	r0, r3
 801961e:	6879      	ldr	r1, [r7, #4]
 8019620:	4613      	mov	r3, r2
 8019622:	009b      	lsls	r3, r3, #2
 8019624:	4413      	add	r3, r2
 8019626:	00db      	lsls	r3, r3, #3
 8019628:	440b      	add	r3, r1
 801962a:	333a      	adds	r3, #58	; 0x3a
 801962c:	4602      	mov	r2, r0
 801962e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8019630:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8019634:	2b00      	cmp	r3, #0
 8019636:	da0a      	bge.n	801964e <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8019638:	78fa      	ldrb	r2, [r7, #3]
 801963a:	6879      	ldr	r1, [r7, #4]
 801963c:	4613      	mov	r3, r2
 801963e:	009b      	lsls	r3, r3, #2
 8019640:	4413      	add	r3, r2
 8019642:	00db      	lsls	r3, r3, #3
 8019644:	440b      	add	r3, r1
 8019646:	333b      	adds	r3, #59	; 0x3b
 8019648:	2201      	movs	r2, #1
 801964a:	701a      	strb	r2, [r3, #0]
 801964c:	e009      	b.n	8019662 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 801964e:	78fa      	ldrb	r2, [r7, #3]
 8019650:	6879      	ldr	r1, [r7, #4]
 8019652:	4613      	mov	r3, r2
 8019654:	009b      	lsls	r3, r3, #2
 8019656:	4413      	add	r3, r2
 8019658:	00db      	lsls	r3, r3, #3
 801965a:	440b      	add	r3, r1
 801965c:	333b      	adds	r3, #59	; 0x3b
 801965e:	2200      	movs	r2, #0
 8019660:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8019662:	78fa      	ldrb	r2, [r7, #3]
 8019664:	6879      	ldr	r1, [r7, #4]
 8019666:	4613      	mov	r3, r2
 8019668:	009b      	lsls	r3, r3, #2
 801966a:	4413      	add	r3, r2
 801966c:	00db      	lsls	r3, r3, #3
 801966e:	440b      	add	r3, r1
 8019670:	333c      	adds	r3, #60	; 0x3c
 8019672:	f897 2020 	ldrb.w	r2, [r7, #32]
 8019676:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8019678:	687b      	ldr	r3, [r7, #4]
 801967a:	6818      	ldr	r0, [r3, #0]
 801967c:	787c      	ldrb	r4, [r7, #1]
 801967e:	78ba      	ldrb	r2, [r7, #2]
 8019680:	78f9      	ldrb	r1, [r7, #3]
 8019682:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8019684:	9302      	str	r3, [sp, #8]
 8019686:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801968a:	9301      	str	r3, [sp, #4]
 801968c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8019690:	9300      	str	r3, [sp, #0]
 8019692:	4623      	mov	r3, r4
 8019694:	f004 f9d2 	bl	801da3c <USB_HC_Init>
 8019698:	4603      	mov	r3, r0
 801969a:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 801969c:	687b      	ldr	r3, [r7, #4]
 801969e:	2200      	movs	r2, #0
 80196a0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80196a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80196a6:	4618      	mov	r0, r3
 80196a8:	3714      	adds	r7, #20
 80196aa:	46bd      	mov	sp, r7
 80196ac:	bd90      	pop	{r4, r7, pc}

080196ae <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80196ae:	b580      	push	{r7, lr}
 80196b0:	b084      	sub	sp, #16
 80196b2:	af00      	add	r7, sp, #0
 80196b4:	6078      	str	r0, [r7, #4]
 80196b6:	460b      	mov	r3, r1
 80196b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80196ba:	2300      	movs	r3, #0
 80196bc:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80196be:	687b      	ldr	r3, [r7, #4]
 80196c0:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80196c4:	2b01      	cmp	r3, #1
 80196c6:	d101      	bne.n	80196cc <HAL_HCD_HC_Halt+0x1e>
 80196c8:	2302      	movs	r3, #2
 80196ca:	e00f      	b.n	80196ec <HAL_HCD_HC_Halt+0x3e>
 80196cc:	687b      	ldr	r3, [r7, #4]
 80196ce:	2201      	movs	r2, #1
 80196d0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80196d4:	687b      	ldr	r3, [r7, #4]
 80196d6:	681b      	ldr	r3, [r3, #0]
 80196d8:	78fa      	ldrb	r2, [r7, #3]
 80196da:	4611      	mov	r1, r2
 80196dc:	4618      	mov	r0, r3
 80196de:	f004 fc0e 	bl	801defe <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80196e2:	687b      	ldr	r3, [r7, #4]
 80196e4:	2200      	movs	r2, #0
 80196e6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80196ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80196ec:	4618      	mov	r0, r3
 80196ee:	3710      	adds	r7, #16
 80196f0:	46bd      	mov	sp, r7
 80196f2:	bd80      	pop	{r7, pc}

080196f4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80196f4:	b580      	push	{r7, lr}
 80196f6:	b082      	sub	sp, #8
 80196f8:	af00      	add	r7, sp, #0
 80196fa:	6078      	str	r0, [r7, #4]
 80196fc:	4608      	mov	r0, r1
 80196fe:	4611      	mov	r1, r2
 8019700:	461a      	mov	r2, r3
 8019702:	4603      	mov	r3, r0
 8019704:	70fb      	strb	r3, [r7, #3]
 8019706:	460b      	mov	r3, r1
 8019708:	70bb      	strb	r3, [r7, #2]
 801970a:	4613      	mov	r3, r2
 801970c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 801970e:	78fa      	ldrb	r2, [r7, #3]
 8019710:	6879      	ldr	r1, [r7, #4]
 8019712:	4613      	mov	r3, r2
 8019714:	009b      	lsls	r3, r3, #2
 8019716:	4413      	add	r3, r2
 8019718:	00db      	lsls	r3, r3, #3
 801971a:	440b      	add	r3, r1
 801971c:	333b      	adds	r3, #59	; 0x3b
 801971e:	78ba      	ldrb	r2, [r7, #2]
 8019720:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8019722:	78fa      	ldrb	r2, [r7, #3]
 8019724:	6879      	ldr	r1, [r7, #4]
 8019726:	4613      	mov	r3, r2
 8019728:	009b      	lsls	r3, r3, #2
 801972a:	4413      	add	r3, r2
 801972c:	00db      	lsls	r3, r3, #3
 801972e:	440b      	add	r3, r1
 8019730:	333f      	adds	r3, #63	; 0x3f
 8019732:	787a      	ldrb	r2, [r7, #1]
 8019734:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8019736:	7c3b      	ldrb	r3, [r7, #16]
 8019738:	2b00      	cmp	r3, #0
 801973a:	d114      	bne.n	8019766 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 801973c:	78fa      	ldrb	r2, [r7, #3]
 801973e:	6879      	ldr	r1, [r7, #4]
 8019740:	4613      	mov	r3, r2
 8019742:	009b      	lsls	r3, r3, #2
 8019744:	4413      	add	r3, r2
 8019746:	00db      	lsls	r3, r3, #3
 8019748:	440b      	add	r3, r1
 801974a:	3342      	adds	r3, #66	; 0x42
 801974c:	2203      	movs	r2, #3
 801974e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8019750:	78fa      	ldrb	r2, [r7, #3]
 8019752:	6879      	ldr	r1, [r7, #4]
 8019754:	4613      	mov	r3, r2
 8019756:	009b      	lsls	r3, r3, #2
 8019758:	4413      	add	r3, r2
 801975a:	00db      	lsls	r3, r3, #3
 801975c:	440b      	add	r3, r1
 801975e:	333d      	adds	r3, #61	; 0x3d
 8019760:	7f3a      	ldrb	r2, [r7, #28]
 8019762:	701a      	strb	r2, [r3, #0]
 8019764:	e009      	b.n	801977a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8019766:	78fa      	ldrb	r2, [r7, #3]
 8019768:	6879      	ldr	r1, [r7, #4]
 801976a:	4613      	mov	r3, r2
 801976c:	009b      	lsls	r3, r3, #2
 801976e:	4413      	add	r3, r2
 8019770:	00db      	lsls	r3, r3, #3
 8019772:	440b      	add	r3, r1
 8019774:	3342      	adds	r3, #66	; 0x42
 8019776:	2202      	movs	r2, #2
 8019778:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 801977a:	787b      	ldrb	r3, [r7, #1]
 801977c:	2b03      	cmp	r3, #3
 801977e:	f200 80d6 	bhi.w	801992e <HAL_HCD_HC_SubmitRequest+0x23a>
 8019782:	a201      	add	r2, pc, #4	; (adr r2, 8019788 <HAL_HCD_HC_SubmitRequest+0x94>)
 8019784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019788:	08019799 	.word	0x08019799
 801978c:	08019919 	.word	0x08019919
 8019790:	08019805 	.word	0x08019805
 8019794:	0801988f 	.word	0x0801988f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8019798:	7c3b      	ldrb	r3, [r7, #16]
 801979a:	2b01      	cmp	r3, #1
 801979c:	f040 80c9 	bne.w	8019932 <HAL_HCD_HC_SubmitRequest+0x23e>
 80197a0:	78bb      	ldrb	r3, [r7, #2]
 80197a2:	2b00      	cmp	r3, #0
 80197a4:	f040 80c5 	bne.w	8019932 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 80197a8:	8b3b      	ldrh	r3, [r7, #24]
 80197aa:	2b00      	cmp	r3, #0
 80197ac:	d109      	bne.n	80197c2 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80197ae:	78fa      	ldrb	r2, [r7, #3]
 80197b0:	6879      	ldr	r1, [r7, #4]
 80197b2:	4613      	mov	r3, r2
 80197b4:	009b      	lsls	r3, r3, #2
 80197b6:	4413      	add	r3, r2
 80197b8:	00db      	lsls	r3, r3, #3
 80197ba:	440b      	add	r3, r1
 80197bc:	3351      	adds	r3, #81	; 0x51
 80197be:	2201      	movs	r2, #1
 80197c0:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80197c2:	78fa      	ldrb	r2, [r7, #3]
 80197c4:	6879      	ldr	r1, [r7, #4]
 80197c6:	4613      	mov	r3, r2
 80197c8:	009b      	lsls	r3, r3, #2
 80197ca:	4413      	add	r3, r2
 80197cc:	00db      	lsls	r3, r3, #3
 80197ce:	440b      	add	r3, r1
 80197d0:	3351      	adds	r3, #81	; 0x51
 80197d2:	781b      	ldrb	r3, [r3, #0]
 80197d4:	2b00      	cmp	r3, #0
 80197d6:	d10a      	bne.n	80197ee <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80197d8:	78fa      	ldrb	r2, [r7, #3]
 80197da:	6879      	ldr	r1, [r7, #4]
 80197dc:	4613      	mov	r3, r2
 80197de:	009b      	lsls	r3, r3, #2
 80197e0:	4413      	add	r3, r2
 80197e2:	00db      	lsls	r3, r3, #3
 80197e4:	440b      	add	r3, r1
 80197e6:	3342      	adds	r3, #66	; 0x42
 80197e8:	2200      	movs	r2, #0
 80197ea:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80197ec:	e0a1      	b.n	8019932 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80197ee:	78fa      	ldrb	r2, [r7, #3]
 80197f0:	6879      	ldr	r1, [r7, #4]
 80197f2:	4613      	mov	r3, r2
 80197f4:	009b      	lsls	r3, r3, #2
 80197f6:	4413      	add	r3, r2
 80197f8:	00db      	lsls	r3, r3, #3
 80197fa:	440b      	add	r3, r1
 80197fc:	3342      	adds	r3, #66	; 0x42
 80197fe:	2202      	movs	r2, #2
 8019800:	701a      	strb	r2, [r3, #0]
      break;
 8019802:	e096      	b.n	8019932 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8019804:	78bb      	ldrb	r3, [r7, #2]
 8019806:	2b00      	cmp	r3, #0
 8019808:	d120      	bne.n	801984c <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 801980a:	78fa      	ldrb	r2, [r7, #3]
 801980c:	6879      	ldr	r1, [r7, #4]
 801980e:	4613      	mov	r3, r2
 8019810:	009b      	lsls	r3, r3, #2
 8019812:	4413      	add	r3, r2
 8019814:	00db      	lsls	r3, r3, #3
 8019816:	440b      	add	r3, r1
 8019818:	3351      	adds	r3, #81	; 0x51
 801981a:	781b      	ldrb	r3, [r3, #0]
 801981c:	2b00      	cmp	r3, #0
 801981e:	d10a      	bne.n	8019836 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8019820:	78fa      	ldrb	r2, [r7, #3]
 8019822:	6879      	ldr	r1, [r7, #4]
 8019824:	4613      	mov	r3, r2
 8019826:	009b      	lsls	r3, r3, #2
 8019828:	4413      	add	r3, r2
 801982a:	00db      	lsls	r3, r3, #3
 801982c:	440b      	add	r3, r1
 801982e:	3342      	adds	r3, #66	; 0x42
 8019830:	2200      	movs	r2, #0
 8019832:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8019834:	e07e      	b.n	8019934 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8019836:	78fa      	ldrb	r2, [r7, #3]
 8019838:	6879      	ldr	r1, [r7, #4]
 801983a:	4613      	mov	r3, r2
 801983c:	009b      	lsls	r3, r3, #2
 801983e:	4413      	add	r3, r2
 8019840:	00db      	lsls	r3, r3, #3
 8019842:	440b      	add	r3, r1
 8019844:	3342      	adds	r3, #66	; 0x42
 8019846:	2202      	movs	r2, #2
 8019848:	701a      	strb	r2, [r3, #0]
      break;
 801984a:	e073      	b.n	8019934 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 801984c:	78fa      	ldrb	r2, [r7, #3]
 801984e:	6879      	ldr	r1, [r7, #4]
 8019850:	4613      	mov	r3, r2
 8019852:	009b      	lsls	r3, r3, #2
 8019854:	4413      	add	r3, r2
 8019856:	00db      	lsls	r3, r3, #3
 8019858:	440b      	add	r3, r1
 801985a:	3350      	adds	r3, #80	; 0x50
 801985c:	781b      	ldrb	r3, [r3, #0]
 801985e:	2b00      	cmp	r3, #0
 8019860:	d10a      	bne.n	8019878 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8019862:	78fa      	ldrb	r2, [r7, #3]
 8019864:	6879      	ldr	r1, [r7, #4]
 8019866:	4613      	mov	r3, r2
 8019868:	009b      	lsls	r3, r3, #2
 801986a:	4413      	add	r3, r2
 801986c:	00db      	lsls	r3, r3, #3
 801986e:	440b      	add	r3, r1
 8019870:	3342      	adds	r3, #66	; 0x42
 8019872:	2200      	movs	r2, #0
 8019874:	701a      	strb	r2, [r3, #0]
      break;
 8019876:	e05d      	b.n	8019934 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8019878:	78fa      	ldrb	r2, [r7, #3]
 801987a:	6879      	ldr	r1, [r7, #4]
 801987c:	4613      	mov	r3, r2
 801987e:	009b      	lsls	r3, r3, #2
 8019880:	4413      	add	r3, r2
 8019882:	00db      	lsls	r3, r3, #3
 8019884:	440b      	add	r3, r1
 8019886:	3342      	adds	r3, #66	; 0x42
 8019888:	2202      	movs	r2, #2
 801988a:	701a      	strb	r2, [r3, #0]
      break;
 801988c:	e052      	b.n	8019934 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 801988e:	78bb      	ldrb	r3, [r7, #2]
 8019890:	2b00      	cmp	r3, #0
 8019892:	d120      	bne.n	80198d6 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8019894:	78fa      	ldrb	r2, [r7, #3]
 8019896:	6879      	ldr	r1, [r7, #4]
 8019898:	4613      	mov	r3, r2
 801989a:	009b      	lsls	r3, r3, #2
 801989c:	4413      	add	r3, r2
 801989e:	00db      	lsls	r3, r3, #3
 80198a0:	440b      	add	r3, r1
 80198a2:	3351      	adds	r3, #81	; 0x51
 80198a4:	781b      	ldrb	r3, [r3, #0]
 80198a6:	2b00      	cmp	r3, #0
 80198a8:	d10a      	bne.n	80198c0 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80198aa:	78fa      	ldrb	r2, [r7, #3]
 80198ac:	6879      	ldr	r1, [r7, #4]
 80198ae:	4613      	mov	r3, r2
 80198b0:	009b      	lsls	r3, r3, #2
 80198b2:	4413      	add	r3, r2
 80198b4:	00db      	lsls	r3, r3, #3
 80198b6:	440b      	add	r3, r1
 80198b8:	3342      	adds	r3, #66	; 0x42
 80198ba:	2200      	movs	r2, #0
 80198bc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80198be:	e039      	b.n	8019934 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80198c0:	78fa      	ldrb	r2, [r7, #3]
 80198c2:	6879      	ldr	r1, [r7, #4]
 80198c4:	4613      	mov	r3, r2
 80198c6:	009b      	lsls	r3, r3, #2
 80198c8:	4413      	add	r3, r2
 80198ca:	00db      	lsls	r3, r3, #3
 80198cc:	440b      	add	r3, r1
 80198ce:	3342      	adds	r3, #66	; 0x42
 80198d0:	2202      	movs	r2, #2
 80198d2:	701a      	strb	r2, [r3, #0]
      break;
 80198d4:	e02e      	b.n	8019934 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80198d6:	78fa      	ldrb	r2, [r7, #3]
 80198d8:	6879      	ldr	r1, [r7, #4]
 80198da:	4613      	mov	r3, r2
 80198dc:	009b      	lsls	r3, r3, #2
 80198de:	4413      	add	r3, r2
 80198e0:	00db      	lsls	r3, r3, #3
 80198e2:	440b      	add	r3, r1
 80198e4:	3350      	adds	r3, #80	; 0x50
 80198e6:	781b      	ldrb	r3, [r3, #0]
 80198e8:	2b00      	cmp	r3, #0
 80198ea:	d10a      	bne.n	8019902 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80198ec:	78fa      	ldrb	r2, [r7, #3]
 80198ee:	6879      	ldr	r1, [r7, #4]
 80198f0:	4613      	mov	r3, r2
 80198f2:	009b      	lsls	r3, r3, #2
 80198f4:	4413      	add	r3, r2
 80198f6:	00db      	lsls	r3, r3, #3
 80198f8:	440b      	add	r3, r1
 80198fa:	3342      	adds	r3, #66	; 0x42
 80198fc:	2200      	movs	r2, #0
 80198fe:	701a      	strb	r2, [r3, #0]
      break;
 8019900:	e018      	b.n	8019934 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8019902:	78fa      	ldrb	r2, [r7, #3]
 8019904:	6879      	ldr	r1, [r7, #4]
 8019906:	4613      	mov	r3, r2
 8019908:	009b      	lsls	r3, r3, #2
 801990a:	4413      	add	r3, r2
 801990c:	00db      	lsls	r3, r3, #3
 801990e:	440b      	add	r3, r1
 8019910:	3342      	adds	r3, #66	; 0x42
 8019912:	2202      	movs	r2, #2
 8019914:	701a      	strb	r2, [r3, #0]
      break;
 8019916:	e00d      	b.n	8019934 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8019918:	78fa      	ldrb	r2, [r7, #3]
 801991a:	6879      	ldr	r1, [r7, #4]
 801991c:	4613      	mov	r3, r2
 801991e:	009b      	lsls	r3, r3, #2
 8019920:	4413      	add	r3, r2
 8019922:	00db      	lsls	r3, r3, #3
 8019924:	440b      	add	r3, r1
 8019926:	3342      	adds	r3, #66	; 0x42
 8019928:	2200      	movs	r2, #0
 801992a:	701a      	strb	r2, [r3, #0]
      break;
 801992c:	e002      	b.n	8019934 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 801992e:	bf00      	nop
 8019930:	e000      	b.n	8019934 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8019932:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8019934:	78fa      	ldrb	r2, [r7, #3]
 8019936:	6879      	ldr	r1, [r7, #4]
 8019938:	4613      	mov	r3, r2
 801993a:	009b      	lsls	r3, r3, #2
 801993c:	4413      	add	r3, r2
 801993e:	00db      	lsls	r3, r3, #3
 8019940:	440b      	add	r3, r1
 8019942:	3344      	adds	r3, #68	; 0x44
 8019944:	697a      	ldr	r2, [r7, #20]
 8019946:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8019948:	78fa      	ldrb	r2, [r7, #3]
 801994a:	8b39      	ldrh	r1, [r7, #24]
 801994c:	6878      	ldr	r0, [r7, #4]
 801994e:	4613      	mov	r3, r2
 8019950:	009b      	lsls	r3, r3, #2
 8019952:	4413      	add	r3, r2
 8019954:	00db      	lsls	r3, r3, #3
 8019956:	4403      	add	r3, r0
 8019958:	3348      	adds	r3, #72	; 0x48
 801995a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 801995c:	78fa      	ldrb	r2, [r7, #3]
 801995e:	6879      	ldr	r1, [r7, #4]
 8019960:	4613      	mov	r3, r2
 8019962:	009b      	lsls	r3, r3, #2
 8019964:	4413      	add	r3, r2
 8019966:	00db      	lsls	r3, r3, #3
 8019968:	440b      	add	r3, r1
 801996a:	335c      	adds	r3, #92	; 0x5c
 801996c:	2200      	movs	r2, #0
 801996e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8019970:	78fa      	ldrb	r2, [r7, #3]
 8019972:	6879      	ldr	r1, [r7, #4]
 8019974:	4613      	mov	r3, r2
 8019976:	009b      	lsls	r3, r3, #2
 8019978:	4413      	add	r3, r2
 801997a:	00db      	lsls	r3, r3, #3
 801997c:	440b      	add	r3, r1
 801997e:	334c      	adds	r3, #76	; 0x4c
 8019980:	2200      	movs	r2, #0
 8019982:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8019984:	78fa      	ldrb	r2, [r7, #3]
 8019986:	6879      	ldr	r1, [r7, #4]
 8019988:	4613      	mov	r3, r2
 801998a:	009b      	lsls	r3, r3, #2
 801998c:	4413      	add	r3, r2
 801998e:	00db      	lsls	r3, r3, #3
 8019990:	440b      	add	r3, r1
 8019992:	3339      	adds	r3, #57	; 0x39
 8019994:	78fa      	ldrb	r2, [r7, #3]
 8019996:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8019998:	78fa      	ldrb	r2, [r7, #3]
 801999a:	6879      	ldr	r1, [r7, #4]
 801999c:	4613      	mov	r3, r2
 801999e:	009b      	lsls	r3, r3, #2
 80199a0:	4413      	add	r3, r2
 80199a2:	00db      	lsls	r3, r3, #3
 80199a4:	440b      	add	r3, r1
 80199a6:	335d      	adds	r3, #93	; 0x5d
 80199a8:	2200      	movs	r2, #0
 80199aa:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80199ac:	687b      	ldr	r3, [r7, #4]
 80199ae:	6818      	ldr	r0, [r3, #0]
 80199b0:	78fa      	ldrb	r2, [r7, #3]
 80199b2:	4613      	mov	r3, r2
 80199b4:	009b      	lsls	r3, r3, #2
 80199b6:	4413      	add	r3, r2
 80199b8:	00db      	lsls	r3, r3, #3
 80199ba:	3338      	adds	r3, #56	; 0x38
 80199bc:	687a      	ldr	r2, [r7, #4]
 80199be:	18d1      	adds	r1, r2, r3
 80199c0:	687b      	ldr	r3, [r7, #4]
 80199c2:	691b      	ldr	r3, [r3, #16]
 80199c4:	b2db      	uxtb	r3, r3
 80199c6:	461a      	mov	r2, r3
 80199c8:	f004 f942 	bl	801dc50 <USB_HC_StartXfer>
 80199cc:	4603      	mov	r3, r0
}
 80199ce:	4618      	mov	r0, r3
 80199d0:	3708      	adds	r7, #8
 80199d2:	46bd      	mov	sp, r7
 80199d4:	bd80      	pop	{r7, pc}
 80199d6:	bf00      	nop

080199d8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80199d8:	b580      	push	{r7, lr}
 80199da:	b086      	sub	sp, #24
 80199dc:	af00      	add	r7, sp, #0
 80199de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80199e0:	687b      	ldr	r3, [r7, #4]
 80199e2:	681b      	ldr	r3, [r3, #0]
 80199e4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80199e6:	693b      	ldr	r3, [r7, #16]
 80199e8:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80199ea:	687b      	ldr	r3, [r7, #4]
 80199ec:	681b      	ldr	r3, [r3, #0]
 80199ee:	4618      	mov	r0, r3
 80199f0:	f003 fea1 	bl	801d736 <USB_GetMode>
 80199f4:	4603      	mov	r3, r0
 80199f6:	2b01      	cmp	r3, #1
 80199f8:	f040 80ef 	bne.w	8019bda <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80199fc:	687b      	ldr	r3, [r7, #4]
 80199fe:	681b      	ldr	r3, [r3, #0]
 8019a00:	4618      	mov	r0, r3
 8019a02:	f003 fe85 	bl	801d710 <USB_ReadInterrupts>
 8019a06:	4603      	mov	r3, r0
 8019a08:	2b00      	cmp	r3, #0
 8019a0a:	f000 80e5 	beq.w	8019bd8 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8019a0e:	687b      	ldr	r3, [r7, #4]
 8019a10:	681b      	ldr	r3, [r3, #0]
 8019a12:	4618      	mov	r0, r3
 8019a14:	f003 fe7c 	bl	801d710 <USB_ReadInterrupts>
 8019a18:	4603      	mov	r3, r0
 8019a1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8019a1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8019a22:	d104      	bne.n	8019a2e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8019a24:	687b      	ldr	r3, [r7, #4]
 8019a26:	681b      	ldr	r3, [r3, #0]
 8019a28:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8019a2c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8019a2e:	687b      	ldr	r3, [r7, #4]
 8019a30:	681b      	ldr	r3, [r3, #0]
 8019a32:	4618      	mov	r0, r3
 8019a34:	f003 fe6c 	bl	801d710 <USB_ReadInterrupts>
 8019a38:	4603      	mov	r3, r0
 8019a3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8019a3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8019a42:	d104      	bne.n	8019a4e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8019a44:	687b      	ldr	r3, [r7, #4]
 8019a46:	681b      	ldr	r3, [r3, #0]
 8019a48:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8019a4c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8019a4e:	687b      	ldr	r3, [r7, #4]
 8019a50:	681b      	ldr	r3, [r3, #0]
 8019a52:	4618      	mov	r0, r3
 8019a54:	f003 fe5c 	bl	801d710 <USB_ReadInterrupts>
 8019a58:	4603      	mov	r3, r0
 8019a5a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8019a5e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8019a62:	d104      	bne.n	8019a6e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8019a64:	687b      	ldr	r3, [r7, #4]
 8019a66:	681b      	ldr	r3, [r3, #0]
 8019a68:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8019a6c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8019a6e:	687b      	ldr	r3, [r7, #4]
 8019a70:	681b      	ldr	r3, [r3, #0]
 8019a72:	4618      	mov	r0, r3
 8019a74:	f003 fe4c 	bl	801d710 <USB_ReadInterrupts>
 8019a78:	4603      	mov	r3, r0
 8019a7a:	f003 0302 	and.w	r3, r3, #2
 8019a7e:	2b02      	cmp	r3, #2
 8019a80:	d103      	bne.n	8019a8a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8019a82:	687b      	ldr	r3, [r7, #4]
 8019a84:	681b      	ldr	r3, [r3, #0]
 8019a86:	2202      	movs	r2, #2
 8019a88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8019a8a:	687b      	ldr	r3, [r7, #4]
 8019a8c:	681b      	ldr	r3, [r3, #0]
 8019a8e:	4618      	mov	r0, r3
 8019a90:	f003 fe3e 	bl	801d710 <USB_ReadInterrupts>
 8019a94:	4603      	mov	r3, r0
 8019a96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8019a9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8019a9e:	d115      	bne.n	8019acc <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8019aa0:	687b      	ldr	r3, [r7, #4]
 8019aa2:	681b      	ldr	r3, [r3, #0]
 8019aa4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8019aa8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8019aaa:	68fb      	ldr	r3, [r7, #12]
 8019aac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8019ab0:	681b      	ldr	r3, [r3, #0]
 8019ab2:	f003 0301 	and.w	r3, r3, #1
 8019ab6:	2b00      	cmp	r3, #0
 8019ab8:	d108      	bne.n	8019acc <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8019aba:	6878      	ldr	r0, [r7, #4]
 8019abc:	f005 fd14 	bl	801f4e8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8019ac0:	687b      	ldr	r3, [r7, #4]
 8019ac2:	681b      	ldr	r3, [r3, #0]
 8019ac4:	2101      	movs	r1, #1
 8019ac6:	4618      	mov	r0, r3
 8019ac8:	f003 ff34 	bl	801d934 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8019acc:	687b      	ldr	r3, [r7, #4]
 8019ace:	681b      	ldr	r3, [r3, #0]
 8019ad0:	4618      	mov	r0, r3
 8019ad2:	f003 fe1d 	bl	801d710 <USB_ReadInterrupts>
 8019ad6:	4603      	mov	r3, r0
 8019ad8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8019adc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8019ae0:	d102      	bne.n	8019ae8 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8019ae2:	6878      	ldr	r0, [r7, #4]
 8019ae4:	f001 f94a 	bl	801ad7c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8019ae8:	687b      	ldr	r3, [r7, #4]
 8019aea:	681b      	ldr	r3, [r3, #0]
 8019aec:	4618      	mov	r0, r3
 8019aee:	f003 fe0f 	bl	801d710 <USB_ReadInterrupts>
 8019af2:	4603      	mov	r3, r0
 8019af4:	f003 0308 	and.w	r3, r3, #8
 8019af8:	2b08      	cmp	r3, #8
 8019afa:	d106      	bne.n	8019b0a <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8019afc:	6878      	ldr	r0, [r7, #4]
 8019afe:	f005 fcd7 	bl	801f4b0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8019b02:	687b      	ldr	r3, [r7, #4]
 8019b04:	681b      	ldr	r3, [r3, #0]
 8019b06:	2208      	movs	r2, #8
 8019b08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8019b0a:	687b      	ldr	r3, [r7, #4]
 8019b0c:	681b      	ldr	r3, [r3, #0]
 8019b0e:	4618      	mov	r0, r3
 8019b10:	f003 fdfe 	bl	801d710 <USB_ReadInterrupts>
 8019b14:	4603      	mov	r3, r0
 8019b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8019b1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8019b1e:	d138      	bne.n	8019b92 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8019b20:	687b      	ldr	r3, [r7, #4]
 8019b22:	681b      	ldr	r3, [r3, #0]
 8019b24:	4618      	mov	r0, r3
 8019b26:	f004 f9d9 	bl	801dedc <USB_HC_ReadInterrupt>
 8019b2a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8019b2c:	2300      	movs	r3, #0
 8019b2e:	617b      	str	r3, [r7, #20]
 8019b30:	e025      	b.n	8019b7e <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8019b32:	697b      	ldr	r3, [r7, #20]
 8019b34:	f003 030f 	and.w	r3, r3, #15
 8019b38:	68ba      	ldr	r2, [r7, #8]
 8019b3a:	fa22 f303 	lsr.w	r3, r2, r3
 8019b3e:	f003 0301 	and.w	r3, r3, #1
 8019b42:	2b00      	cmp	r3, #0
 8019b44:	d018      	beq.n	8019b78 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8019b46:	697b      	ldr	r3, [r7, #20]
 8019b48:	015a      	lsls	r2, r3, #5
 8019b4a:	68fb      	ldr	r3, [r7, #12]
 8019b4c:	4413      	add	r3, r2
 8019b4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8019b52:	681b      	ldr	r3, [r3, #0]
 8019b54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8019b58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8019b5c:	d106      	bne.n	8019b6c <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8019b5e:	697b      	ldr	r3, [r7, #20]
 8019b60:	b2db      	uxtb	r3, r3
 8019b62:	4619      	mov	r1, r3
 8019b64:	6878      	ldr	r0, [r7, #4]
 8019b66:	f000 f8b3 	bl	8019cd0 <HCD_HC_IN_IRQHandler>
 8019b6a:	e005      	b.n	8019b78 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8019b6c:	697b      	ldr	r3, [r7, #20]
 8019b6e:	b2db      	uxtb	r3, r3
 8019b70:	4619      	mov	r1, r3
 8019b72:	6878      	ldr	r0, [r7, #4]
 8019b74:	f000 fce1 	bl	801a53a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8019b78:	697b      	ldr	r3, [r7, #20]
 8019b7a:	3301      	adds	r3, #1
 8019b7c:	617b      	str	r3, [r7, #20]
 8019b7e:	687b      	ldr	r3, [r7, #4]
 8019b80:	689b      	ldr	r3, [r3, #8]
 8019b82:	697a      	ldr	r2, [r7, #20]
 8019b84:	429a      	cmp	r2, r3
 8019b86:	d3d4      	bcc.n	8019b32 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8019b88:	687b      	ldr	r3, [r7, #4]
 8019b8a:	681b      	ldr	r3, [r3, #0]
 8019b8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8019b90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8019b92:	687b      	ldr	r3, [r7, #4]
 8019b94:	681b      	ldr	r3, [r3, #0]
 8019b96:	4618      	mov	r0, r3
 8019b98:	f003 fdba 	bl	801d710 <USB_ReadInterrupts>
 8019b9c:	4603      	mov	r3, r0
 8019b9e:	f003 0310 	and.w	r3, r3, #16
 8019ba2:	2b10      	cmp	r3, #16
 8019ba4:	d101      	bne.n	8019baa <HAL_HCD_IRQHandler+0x1d2>
 8019ba6:	2301      	movs	r3, #1
 8019ba8:	e000      	b.n	8019bac <HAL_HCD_IRQHandler+0x1d4>
 8019baa:	2300      	movs	r3, #0
 8019bac:	2b00      	cmp	r3, #0
 8019bae:	d014      	beq.n	8019bda <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8019bb0:	687b      	ldr	r3, [r7, #4]
 8019bb2:	681b      	ldr	r3, [r3, #0]
 8019bb4:	699a      	ldr	r2, [r3, #24]
 8019bb6:	687b      	ldr	r3, [r7, #4]
 8019bb8:	681b      	ldr	r3, [r3, #0]
 8019bba:	f022 0210 	bic.w	r2, r2, #16
 8019bbe:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8019bc0:	6878      	ldr	r0, [r7, #4]
 8019bc2:	f001 f82f 	bl	801ac24 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8019bc6:	687b      	ldr	r3, [r7, #4]
 8019bc8:	681b      	ldr	r3, [r3, #0]
 8019bca:	699a      	ldr	r2, [r3, #24]
 8019bcc:	687b      	ldr	r3, [r7, #4]
 8019bce:	681b      	ldr	r3, [r3, #0]
 8019bd0:	f042 0210 	orr.w	r2, r2, #16
 8019bd4:	619a      	str	r2, [r3, #24]
 8019bd6:	e000      	b.n	8019bda <HAL_HCD_IRQHandler+0x202>
      return;
 8019bd8:	bf00      	nop
    }
  }
}
 8019bda:	3718      	adds	r7, #24
 8019bdc:	46bd      	mov	sp, r7
 8019bde:	bd80      	pop	{r7, pc}

08019be0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8019be0:	b580      	push	{r7, lr}
 8019be2:	b082      	sub	sp, #8
 8019be4:	af00      	add	r7, sp, #0
 8019be6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8019be8:	687b      	ldr	r3, [r7, #4]
 8019bea:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8019bee:	2b01      	cmp	r3, #1
 8019bf0:	d101      	bne.n	8019bf6 <HAL_HCD_Start+0x16>
 8019bf2:	2302      	movs	r3, #2
 8019bf4:	e013      	b.n	8019c1e <HAL_HCD_Start+0x3e>
 8019bf6:	687b      	ldr	r3, [r7, #4]
 8019bf8:	2201      	movs	r2, #1
 8019bfa:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8019bfe:	687b      	ldr	r3, [r7, #4]
 8019c00:	681b      	ldr	r3, [r3, #0]
 8019c02:	4618      	mov	r0, r3
 8019c04:	f003 fc91 	bl	801d52a <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8019c08:	687b      	ldr	r3, [r7, #4]
 8019c0a:	681b      	ldr	r3, [r3, #0]
 8019c0c:	2101      	movs	r1, #1
 8019c0e:	4618      	mov	r0, r3
 8019c10:	f003 feca 	bl	801d9a8 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8019c14:	687b      	ldr	r3, [r7, #4]
 8019c16:	2200      	movs	r2, #0
 8019c18:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8019c1c:	2300      	movs	r3, #0
}
 8019c1e:	4618      	mov	r0, r3
 8019c20:	3708      	adds	r7, #8
 8019c22:	46bd      	mov	sp, r7
 8019c24:	bd80      	pop	{r7, pc}

08019c26 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8019c26:	b580      	push	{r7, lr}
 8019c28:	b082      	sub	sp, #8
 8019c2a:	af00      	add	r7, sp, #0
 8019c2c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8019c2e:	687b      	ldr	r3, [r7, #4]
 8019c30:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8019c34:	2b01      	cmp	r3, #1
 8019c36:	d101      	bne.n	8019c3c <HAL_HCD_Stop+0x16>
 8019c38:	2302      	movs	r3, #2
 8019c3a:	e00d      	b.n	8019c58 <HAL_HCD_Stop+0x32>
 8019c3c:	687b      	ldr	r3, [r7, #4]
 8019c3e:	2201      	movs	r2, #1
 8019c40:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8019c44:	687b      	ldr	r3, [r7, #4]
 8019c46:	681b      	ldr	r3, [r3, #0]
 8019c48:	4618      	mov	r0, r3
 8019c4a:	f004 fa93 	bl	801e174 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8019c4e:	687b      	ldr	r3, [r7, #4]
 8019c50:	2200      	movs	r2, #0
 8019c52:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8019c56:	2300      	movs	r3, #0
}
 8019c58:	4618      	mov	r0, r3
 8019c5a:	3708      	adds	r7, #8
 8019c5c:	46bd      	mov	sp, r7
 8019c5e:	bd80      	pop	{r7, pc}

08019c60 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8019c60:	b480      	push	{r7}
 8019c62:	b083      	sub	sp, #12
 8019c64:	af00      	add	r7, sp, #0
 8019c66:	6078      	str	r0, [r7, #4]
 8019c68:	460b      	mov	r3, r1
 8019c6a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8019c6c:	78fa      	ldrb	r2, [r7, #3]
 8019c6e:	6879      	ldr	r1, [r7, #4]
 8019c70:	4613      	mov	r3, r2
 8019c72:	009b      	lsls	r3, r3, #2
 8019c74:	4413      	add	r3, r2
 8019c76:	00db      	lsls	r3, r3, #3
 8019c78:	440b      	add	r3, r1
 8019c7a:	335c      	adds	r3, #92	; 0x5c
 8019c7c:	781b      	ldrb	r3, [r3, #0]
}
 8019c7e:	4618      	mov	r0, r3
 8019c80:	370c      	adds	r7, #12
 8019c82:	46bd      	mov	sp, r7
 8019c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c88:	4770      	bx	lr

08019c8a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8019c8a:	b480      	push	{r7}
 8019c8c:	b083      	sub	sp, #12
 8019c8e:	af00      	add	r7, sp, #0
 8019c90:	6078      	str	r0, [r7, #4]
 8019c92:	460b      	mov	r3, r1
 8019c94:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8019c96:	78fa      	ldrb	r2, [r7, #3]
 8019c98:	6879      	ldr	r1, [r7, #4]
 8019c9a:	4613      	mov	r3, r2
 8019c9c:	009b      	lsls	r3, r3, #2
 8019c9e:	4413      	add	r3, r2
 8019ca0:	00db      	lsls	r3, r3, #3
 8019ca2:	440b      	add	r3, r1
 8019ca4:	334c      	adds	r3, #76	; 0x4c
 8019ca6:	681b      	ldr	r3, [r3, #0]
}
 8019ca8:	4618      	mov	r0, r3
 8019caa:	370c      	adds	r7, #12
 8019cac:	46bd      	mov	sp, r7
 8019cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cb2:	4770      	bx	lr

08019cb4 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8019cb4:	b580      	push	{r7, lr}
 8019cb6:	b082      	sub	sp, #8
 8019cb8:	af00      	add	r7, sp, #0
 8019cba:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8019cbc:	687b      	ldr	r3, [r7, #4]
 8019cbe:	681b      	ldr	r3, [r3, #0]
 8019cc0:	4618      	mov	r0, r3
 8019cc2:	f003 feaa 	bl	801da1a <USB_GetCurrentFrame>
 8019cc6:	4603      	mov	r3, r0
}
 8019cc8:	4618      	mov	r0, r3
 8019cca:	3708      	adds	r7, #8
 8019ccc:	46bd      	mov	sp, r7
 8019cce:	bd80      	pop	{r7, pc}

08019cd0 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8019cd0:	b580      	push	{r7, lr}
 8019cd2:	b086      	sub	sp, #24
 8019cd4:	af00      	add	r7, sp, #0
 8019cd6:	6078      	str	r0, [r7, #4]
 8019cd8:	460b      	mov	r3, r1
 8019cda:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8019cdc:	687b      	ldr	r3, [r7, #4]
 8019cde:	681b      	ldr	r3, [r3, #0]
 8019ce0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8019ce2:	697b      	ldr	r3, [r7, #20]
 8019ce4:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8019ce6:	78fb      	ldrb	r3, [r7, #3]
 8019ce8:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8019cea:	68fb      	ldr	r3, [r7, #12]
 8019cec:	015a      	lsls	r2, r3, #5
 8019cee:	693b      	ldr	r3, [r7, #16]
 8019cf0:	4413      	add	r3, r2
 8019cf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8019cf6:	689b      	ldr	r3, [r3, #8]
 8019cf8:	f003 0304 	and.w	r3, r3, #4
 8019cfc:	2b04      	cmp	r3, #4
 8019cfe:	d119      	bne.n	8019d34 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8019d00:	68fb      	ldr	r3, [r7, #12]
 8019d02:	015a      	lsls	r2, r3, #5
 8019d04:	693b      	ldr	r3, [r7, #16]
 8019d06:	4413      	add	r3, r2
 8019d08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8019d0c:	461a      	mov	r2, r3
 8019d0e:	2304      	movs	r3, #4
 8019d10:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8019d12:	68fb      	ldr	r3, [r7, #12]
 8019d14:	015a      	lsls	r2, r3, #5
 8019d16:	693b      	ldr	r3, [r7, #16]
 8019d18:	4413      	add	r3, r2
 8019d1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8019d1e:	68db      	ldr	r3, [r3, #12]
 8019d20:	68fa      	ldr	r2, [r7, #12]
 8019d22:	0151      	lsls	r1, r2, #5
 8019d24:	693a      	ldr	r2, [r7, #16]
 8019d26:	440a      	add	r2, r1
 8019d28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8019d2c:	f043 0302 	orr.w	r3, r3, #2
 8019d30:	60d3      	str	r3, [r2, #12]
 8019d32:	e0ce      	b.n	8019ed2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8019d34:	68fb      	ldr	r3, [r7, #12]
 8019d36:	015a      	lsls	r2, r3, #5
 8019d38:	693b      	ldr	r3, [r7, #16]
 8019d3a:	4413      	add	r3, r2
 8019d3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8019d40:	689b      	ldr	r3, [r3, #8]
 8019d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019d46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019d4a:	d12c      	bne.n	8019da6 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8019d4c:	68fb      	ldr	r3, [r7, #12]
 8019d4e:	015a      	lsls	r2, r3, #5
 8019d50:	693b      	ldr	r3, [r7, #16]
 8019d52:	4413      	add	r3, r2
 8019d54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8019d58:	461a      	mov	r2, r3
 8019d5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8019d5e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8019d60:	6879      	ldr	r1, [r7, #4]
 8019d62:	68fa      	ldr	r2, [r7, #12]
 8019d64:	4613      	mov	r3, r2
 8019d66:	009b      	lsls	r3, r3, #2
 8019d68:	4413      	add	r3, r2
 8019d6a:	00db      	lsls	r3, r3, #3
 8019d6c:	440b      	add	r3, r1
 8019d6e:	335d      	adds	r3, #93	; 0x5d
 8019d70:	2207      	movs	r2, #7
 8019d72:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8019d74:	68fb      	ldr	r3, [r7, #12]
 8019d76:	015a      	lsls	r2, r3, #5
 8019d78:	693b      	ldr	r3, [r7, #16]
 8019d7a:	4413      	add	r3, r2
 8019d7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8019d80:	68db      	ldr	r3, [r3, #12]
 8019d82:	68fa      	ldr	r2, [r7, #12]
 8019d84:	0151      	lsls	r1, r2, #5
 8019d86:	693a      	ldr	r2, [r7, #16]
 8019d88:	440a      	add	r2, r1
 8019d8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8019d8e:	f043 0302 	orr.w	r3, r3, #2
 8019d92:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8019d94:	687b      	ldr	r3, [r7, #4]
 8019d96:	681b      	ldr	r3, [r3, #0]
 8019d98:	68fa      	ldr	r2, [r7, #12]
 8019d9a:	b2d2      	uxtb	r2, r2
 8019d9c:	4611      	mov	r1, r2
 8019d9e:	4618      	mov	r0, r3
 8019da0:	f004 f8ad 	bl	801defe <USB_HC_Halt>
 8019da4:	e095      	b.n	8019ed2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8019da6:	68fb      	ldr	r3, [r7, #12]
 8019da8:	015a      	lsls	r2, r3, #5
 8019daa:	693b      	ldr	r3, [r7, #16]
 8019dac:	4413      	add	r3, r2
 8019dae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8019db2:	689b      	ldr	r3, [r3, #8]
 8019db4:	f003 0320 	and.w	r3, r3, #32
 8019db8:	2b20      	cmp	r3, #32
 8019dba:	d109      	bne.n	8019dd0 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8019dbc:	68fb      	ldr	r3, [r7, #12]
 8019dbe:	015a      	lsls	r2, r3, #5
 8019dc0:	693b      	ldr	r3, [r7, #16]
 8019dc2:	4413      	add	r3, r2
 8019dc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8019dc8:	461a      	mov	r2, r3
 8019dca:	2320      	movs	r3, #32
 8019dcc:	6093      	str	r3, [r2, #8]
 8019dce:	e080      	b.n	8019ed2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8019dd0:	68fb      	ldr	r3, [r7, #12]
 8019dd2:	015a      	lsls	r2, r3, #5
 8019dd4:	693b      	ldr	r3, [r7, #16]
 8019dd6:	4413      	add	r3, r2
 8019dd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8019ddc:	689b      	ldr	r3, [r3, #8]
 8019dde:	f003 0308 	and.w	r3, r3, #8
 8019de2:	2b08      	cmp	r3, #8
 8019de4:	d134      	bne.n	8019e50 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8019de6:	68fb      	ldr	r3, [r7, #12]
 8019de8:	015a      	lsls	r2, r3, #5
 8019dea:	693b      	ldr	r3, [r7, #16]
 8019dec:	4413      	add	r3, r2
 8019dee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8019df2:	68db      	ldr	r3, [r3, #12]
 8019df4:	68fa      	ldr	r2, [r7, #12]
 8019df6:	0151      	lsls	r1, r2, #5
 8019df8:	693a      	ldr	r2, [r7, #16]
 8019dfa:	440a      	add	r2, r1
 8019dfc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8019e00:	f043 0302 	orr.w	r3, r3, #2
 8019e04:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8019e06:	6879      	ldr	r1, [r7, #4]
 8019e08:	68fa      	ldr	r2, [r7, #12]
 8019e0a:	4613      	mov	r3, r2
 8019e0c:	009b      	lsls	r3, r3, #2
 8019e0e:	4413      	add	r3, r2
 8019e10:	00db      	lsls	r3, r3, #3
 8019e12:	440b      	add	r3, r1
 8019e14:	335d      	adds	r3, #93	; 0x5d
 8019e16:	2205      	movs	r2, #5
 8019e18:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8019e1a:	68fb      	ldr	r3, [r7, #12]
 8019e1c:	015a      	lsls	r2, r3, #5
 8019e1e:	693b      	ldr	r3, [r7, #16]
 8019e20:	4413      	add	r3, r2
 8019e22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8019e26:	461a      	mov	r2, r3
 8019e28:	2310      	movs	r3, #16
 8019e2a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8019e2c:	68fb      	ldr	r3, [r7, #12]
 8019e2e:	015a      	lsls	r2, r3, #5
 8019e30:	693b      	ldr	r3, [r7, #16]
 8019e32:	4413      	add	r3, r2
 8019e34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8019e38:	461a      	mov	r2, r3
 8019e3a:	2308      	movs	r3, #8
 8019e3c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8019e3e:	687b      	ldr	r3, [r7, #4]
 8019e40:	681b      	ldr	r3, [r3, #0]
 8019e42:	68fa      	ldr	r2, [r7, #12]
 8019e44:	b2d2      	uxtb	r2, r2
 8019e46:	4611      	mov	r1, r2
 8019e48:	4618      	mov	r0, r3
 8019e4a:	f004 f858 	bl	801defe <USB_HC_Halt>
 8019e4e:	e040      	b.n	8019ed2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8019e50:	68fb      	ldr	r3, [r7, #12]
 8019e52:	015a      	lsls	r2, r3, #5
 8019e54:	693b      	ldr	r3, [r7, #16]
 8019e56:	4413      	add	r3, r2
 8019e58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8019e5c:	689b      	ldr	r3, [r3, #8]
 8019e5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8019e62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8019e66:	d134      	bne.n	8019ed2 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8019e68:	68fb      	ldr	r3, [r7, #12]
 8019e6a:	015a      	lsls	r2, r3, #5
 8019e6c:	693b      	ldr	r3, [r7, #16]
 8019e6e:	4413      	add	r3, r2
 8019e70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8019e74:	68db      	ldr	r3, [r3, #12]
 8019e76:	68fa      	ldr	r2, [r7, #12]
 8019e78:	0151      	lsls	r1, r2, #5
 8019e7a:	693a      	ldr	r2, [r7, #16]
 8019e7c:	440a      	add	r2, r1
 8019e7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8019e82:	f043 0302 	orr.w	r3, r3, #2
 8019e86:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8019e88:	687b      	ldr	r3, [r7, #4]
 8019e8a:	681b      	ldr	r3, [r3, #0]
 8019e8c:	68fa      	ldr	r2, [r7, #12]
 8019e8e:	b2d2      	uxtb	r2, r2
 8019e90:	4611      	mov	r1, r2
 8019e92:	4618      	mov	r0, r3
 8019e94:	f004 f833 	bl	801defe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8019e98:	68fb      	ldr	r3, [r7, #12]
 8019e9a:	015a      	lsls	r2, r3, #5
 8019e9c:	693b      	ldr	r3, [r7, #16]
 8019e9e:	4413      	add	r3, r2
 8019ea0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8019ea4:	461a      	mov	r2, r3
 8019ea6:	2310      	movs	r3, #16
 8019ea8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8019eaa:	6879      	ldr	r1, [r7, #4]
 8019eac:	68fa      	ldr	r2, [r7, #12]
 8019eae:	4613      	mov	r3, r2
 8019eb0:	009b      	lsls	r3, r3, #2
 8019eb2:	4413      	add	r3, r2
 8019eb4:	00db      	lsls	r3, r3, #3
 8019eb6:	440b      	add	r3, r1
 8019eb8:	335d      	adds	r3, #93	; 0x5d
 8019eba:	2208      	movs	r2, #8
 8019ebc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8019ebe:	68fb      	ldr	r3, [r7, #12]
 8019ec0:	015a      	lsls	r2, r3, #5
 8019ec2:	693b      	ldr	r3, [r7, #16]
 8019ec4:	4413      	add	r3, r2
 8019ec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8019eca:	461a      	mov	r2, r3
 8019ecc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019ed0:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8019ed2:	68fb      	ldr	r3, [r7, #12]
 8019ed4:	015a      	lsls	r2, r3, #5
 8019ed6:	693b      	ldr	r3, [r7, #16]
 8019ed8:	4413      	add	r3, r2
 8019eda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8019ede:	689b      	ldr	r3, [r3, #8]
 8019ee0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8019ee4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019ee8:	d122      	bne.n	8019f30 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8019eea:	68fb      	ldr	r3, [r7, #12]
 8019eec:	015a      	lsls	r2, r3, #5
 8019eee:	693b      	ldr	r3, [r7, #16]
 8019ef0:	4413      	add	r3, r2
 8019ef2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8019ef6:	68db      	ldr	r3, [r3, #12]
 8019ef8:	68fa      	ldr	r2, [r7, #12]
 8019efa:	0151      	lsls	r1, r2, #5
 8019efc:	693a      	ldr	r2, [r7, #16]
 8019efe:	440a      	add	r2, r1
 8019f00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8019f04:	f043 0302 	orr.w	r3, r3, #2
 8019f08:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8019f0a:	687b      	ldr	r3, [r7, #4]
 8019f0c:	681b      	ldr	r3, [r3, #0]
 8019f0e:	68fa      	ldr	r2, [r7, #12]
 8019f10:	b2d2      	uxtb	r2, r2
 8019f12:	4611      	mov	r1, r2
 8019f14:	4618      	mov	r0, r3
 8019f16:	f003 fff2 	bl	801defe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8019f1a:	68fb      	ldr	r3, [r7, #12]
 8019f1c:	015a      	lsls	r2, r3, #5
 8019f1e:	693b      	ldr	r3, [r7, #16]
 8019f20:	4413      	add	r3, r2
 8019f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8019f26:	461a      	mov	r2, r3
 8019f28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8019f2c:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8019f2e:	e300      	b.n	801a532 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8019f30:	68fb      	ldr	r3, [r7, #12]
 8019f32:	015a      	lsls	r2, r3, #5
 8019f34:	693b      	ldr	r3, [r7, #16]
 8019f36:	4413      	add	r3, r2
 8019f38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8019f3c:	689b      	ldr	r3, [r3, #8]
 8019f3e:	f003 0301 	and.w	r3, r3, #1
 8019f42:	2b01      	cmp	r3, #1
 8019f44:	f040 80fd 	bne.w	801a142 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8019f48:	687b      	ldr	r3, [r7, #4]
 8019f4a:	691b      	ldr	r3, [r3, #16]
 8019f4c:	2b00      	cmp	r3, #0
 8019f4e:	d01b      	beq.n	8019f88 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8019f50:	6879      	ldr	r1, [r7, #4]
 8019f52:	68fa      	ldr	r2, [r7, #12]
 8019f54:	4613      	mov	r3, r2
 8019f56:	009b      	lsls	r3, r3, #2
 8019f58:	4413      	add	r3, r2
 8019f5a:	00db      	lsls	r3, r3, #3
 8019f5c:	440b      	add	r3, r1
 8019f5e:	3348      	adds	r3, #72	; 0x48
 8019f60:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8019f62:	68fb      	ldr	r3, [r7, #12]
 8019f64:	0159      	lsls	r1, r3, #5
 8019f66:	693b      	ldr	r3, [r7, #16]
 8019f68:	440b      	add	r3, r1
 8019f6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8019f6e:	691b      	ldr	r3, [r3, #16]
 8019f70:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8019f74:	1ad1      	subs	r1, r2, r3
 8019f76:	6878      	ldr	r0, [r7, #4]
 8019f78:	68fa      	ldr	r2, [r7, #12]
 8019f7a:	4613      	mov	r3, r2
 8019f7c:	009b      	lsls	r3, r3, #2
 8019f7e:	4413      	add	r3, r2
 8019f80:	00db      	lsls	r3, r3, #3
 8019f82:	4403      	add	r3, r0
 8019f84:	334c      	adds	r3, #76	; 0x4c
 8019f86:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8019f88:	6879      	ldr	r1, [r7, #4]
 8019f8a:	68fa      	ldr	r2, [r7, #12]
 8019f8c:	4613      	mov	r3, r2
 8019f8e:	009b      	lsls	r3, r3, #2
 8019f90:	4413      	add	r3, r2
 8019f92:	00db      	lsls	r3, r3, #3
 8019f94:	440b      	add	r3, r1
 8019f96:	335d      	adds	r3, #93	; 0x5d
 8019f98:	2201      	movs	r2, #1
 8019f9a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8019f9c:	6879      	ldr	r1, [r7, #4]
 8019f9e:	68fa      	ldr	r2, [r7, #12]
 8019fa0:	4613      	mov	r3, r2
 8019fa2:	009b      	lsls	r3, r3, #2
 8019fa4:	4413      	add	r3, r2
 8019fa6:	00db      	lsls	r3, r3, #3
 8019fa8:	440b      	add	r3, r1
 8019faa:	3358      	adds	r3, #88	; 0x58
 8019fac:	2200      	movs	r2, #0
 8019fae:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8019fb0:	68fb      	ldr	r3, [r7, #12]
 8019fb2:	015a      	lsls	r2, r3, #5
 8019fb4:	693b      	ldr	r3, [r7, #16]
 8019fb6:	4413      	add	r3, r2
 8019fb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8019fbc:	461a      	mov	r2, r3
 8019fbe:	2301      	movs	r3, #1
 8019fc0:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8019fc2:	6879      	ldr	r1, [r7, #4]
 8019fc4:	68fa      	ldr	r2, [r7, #12]
 8019fc6:	4613      	mov	r3, r2
 8019fc8:	009b      	lsls	r3, r3, #2
 8019fca:	4413      	add	r3, r2
 8019fcc:	00db      	lsls	r3, r3, #3
 8019fce:	440b      	add	r3, r1
 8019fd0:	333f      	adds	r3, #63	; 0x3f
 8019fd2:	781b      	ldrb	r3, [r3, #0]
 8019fd4:	2b00      	cmp	r3, #0
 8019fd6:	d00a      	beq.n	8019fee <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8019fd8:	6879      	ldr	r1, [r7, #4]
 8019fda:	68fa      	ldr	r2, [r7, #12]
 8019fdc:	4613      	mov	r3, r2
 8019fde:	009b      	lsls	r3, r3, #2
 8019fe0:	4413      	add	r3, r2
 8019fe2:	00db      	lsls	r3, r3, #3
 8019fe4:	440b      	add	r3, r1
 8019fe6:	333f      	adds	r3, #63	; 0x3f
 8019fe8:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8019fea:	2b02      	cmp	r3, #2
 8019fec:	d121      	bne.n	801a032 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8019fee:	68fb      	ldr	r3, [r7, #12]
 8019ff0:	015a      	lsls	r2, r3, #5
 8019ff2:	693b      	ldr	r3, [r7, #16]
 8019ff4:	4413      	add	r3, r2
 8019ff6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8019ffa:	68db      	ldr	r3, [r3, #12]
 8019ffc:	68fa      	ldr	r2, [r7, #12]
 8019ffe:	0151      	lsls	r1, r2, #5
 801a000:	693a      	ldr	r2, [r7, #16]
 801a002:	440a      	add	r2, r1
 801a004:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801a008:	f043 0302 	orr.w	r3, r3, #2
 801a00c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 801a00e:	687b      	ldr	r3, [r7, #4]
 801a010:	681b      	ldr	r3, [r3, #0]
 801a012:	68fa      	ldr	r2, [r7, #12]
 801a014:	b2d2      	uxtb	r2, r2
 801a016:	4611      	mov	r1, r2
 801a018:	4618      	mov	r0, r3
 801a01a:	f003 ff70 	bl	801defe <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 801a01e:	68fb      	ldr	r3, [r7, #12]
 801a020:	015a      	lsls	r2, r3, #5
 801a022:	693b      	ldr	r3, [r7, #16]
 801a024:	4413      	add	r3, r2
 801a026:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801a02a:	461a      	mov	r2, r3
 801a02c:	2310      	movs	r3, #16
 801a02e:	6093      	str	r3, [r2, #8]
 801a030:	e070      	b.n	801a114 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 801a032:	6879      	ldr	r1, [r7, #4]
 801a034:	68fa      	ldr	r2, [r7, #12]
 801a036:	4613      	mov	r3, r2
 801a038:	009b      	lsls	r3, r3, #2
 801a03a:	4413      	add	r3, r2
 801a03c:	00db      	lsls	r3, r3, #3
 801a03e:	440b      	add	r3, r1
 801a040:	333f      	adds	r3, #63	; 0x3f
 801a042:	781b      	ldrb	r3, [r3, #0]
 801a044:	2b03      	cmp	r3, #3
 801a046:	d12a      	bne.n	801a09e <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 801a048:	68fb      	ldr	r3, [r7, #12]
 801a04a:	015a      	lsls	r2, r3, #5
 801a04c:	693b      	ldr	r3, [r7, #16]
 801a04e:	4413      	add	r3, r2
 801a050:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801a054:	681b      	ldr	r3, [r3, #0]
 801a056:	68fa      	ldr	r2, [r7, #12]
 801a058:	0151      	lsls	r1, r2, #5
 801a05a:	693a      	ldr	r2, [r7, #16]
 801a05c:	440a      	add	r2, r1
 801a05e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801a062:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801a066:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 801a068:	6879      	ldr	r1, [r7, #4]
 801a06a:	68fa      	ldr	r2, [r7, #12]
 801a06c:	4613      	mov	r3, r2
 801a06e:	009b      	lsls	r3, r3, #2
 801a070:	4413      	add	r3, r2
 801a072:	00db      	lsls	r3, r3, #3
 801a074:	440b      	add	r3, r1
 801a076:	335c      	adds	r3, #92	; 0x5c
 801a078:	2201      	movs	r2, #1
 801a07a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 801a07c:	68fb      	ldr	r3, [r7, #12]
 801a07e:	b2d8      	uxtb	r0, r3
 801a080:	6879      	ldr	r1, [r7, #4]
 801a082:	68fa      	ldr	r2, [r7, #12]
 801a084:	4613      	mov	r3, r2
 801a086:	009b      	lsls	r3, r3, #2
 801a088:	4413      	add	r3, r2
 801a08a:	00db      	lsls	r3, r3, #3
 801a08c:	440b      	add	r3, r1
 801a08e:	335c      	adds	r3, #92	; 0x5c
 801a090:	781b      	ldrb	r3, [r3, #0]
 801a092:	461a      	mov	r2, r3
 801a094:	4601      	mov	r1, r0
 801a096:	6878      	ldr	r0, [r7, #4]
 801a098:	f005 fa34 	bl	801f504 <HAL_HCD_HC_NotifyURBChange_Callback>
 801a09c:	e03a      	b.n	801a114 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 801a09e:	6879      	ldr	r1, [r7, #4]
 801a0a0:	68fa      	ldr	r2, [r7, #12]
 801a0a2:	4613      	mov	r3, r2
 801a0a4:	009b      	lsls	r3, r3, #2
 801a0a6:	4413      	add	r3, r2
 801a0a8:	00db      	lsls	r3, r3, #3
 801a0aa:	440b      	add	r3, r1
 801a0ac:	333f      	adds	r3, #63	; 0x3f
 801a0ae:	781b      	ldrb	r3, [r3, #0]
 801a0b0:	2b01      	cmp	r3, #1
 801a0b2:	d12f      	bne.n	801a114 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 801a0b4:	6879      	ldr	r1, [r7, #4]
 801a0b6:	68fa      	ldr	r2, [r7, #12]
 801a0b8:	4613      	mov	r3, r2
 801a0ba:	009b      	lsls	r3, r3, #2
 801a0bc:	4413      	add	r3, r2
 801a0be:	00db      	lsls	r3, r3, #3
 801a0c0:	440b      	add	r3, r1
 801a0c2:	335c      	adds	r3, #92	; 0x5c
 801a0c4:	2201      	movs	r2, #1
 801a0c6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 801a0c8:	6879      	ldr	r1, [r7, #4]
 801a0ca:	68fa      	ldr	r2, [r7, #12]
 801a0cc:	4613      	mov	r3, r2
 801a0ce:	009b      	lsls	r3, r3, #2
 801a0d0:	4413      	add	r3, r2
 801a0d2:	00db      	lsls	r3, r3, #3
 801a0d4:	440b      	add	r3, r1
 801a0d6:	3350      	adds	r3, #80	; 0x50
 801a0d8:	781b      	ldrb	r3, [r3, #0]
 801a0da:	f083 0301 	eor.w	r3, r3, #1
 801a0de:	b2d8      	uxtb	r0, r3
 801a0e0:	6879      	ldr	r1, [r7, #4]
 801a0e2:	68fa      	ldr	r2, [r7, #12]
 801a0e4:	4613      	mov	r3, r2
 801a0e6:	009b      	lsls	r3, r3, #2
 801a0e8:	4413      	add	r3, r2
 801a0ea:	00db      	lsls	r3, r3, #3
 801a0ec:	440b      	add	r3, r1
 801a0ee:	3350      	adds	r3, #80	; 0x50
 801a0f0:	4602      	mov	r2, r0
 801a0f2:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 801a0f4:	68fb      	ldr	r3, [r7, #12]
 801a0f6:	b2d8      	uxtb	r0, r3
 801a0f8:	6879      	ldr	r1, [r7, #4]
 801a0fa:	68fa      	ldr	r2, [r7, #12]
 801a0fc:	4613      	mov	r3, r2
 801a0fe:	009b      	lsls	r3, r3, #2
 801a100:	4413      	add	r3, r2
 801a102:	00db      	lsls	r3, r3, #3
 801a104:	440b      	add	r3, r1
 801a106:	335c      	adds	r3, #92	; 0x5c
 801a108:	781b      	ldrb	r3, [r3, #0]
 801a10a:	461a      	mov	r2, r3
 801a10c:	4601      	mov	r1, r0
 801a10e:	6878      	ldr	r0, [r7, #4]
 801a110:	f005 f9f8 	bl	801f504 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 801a114:	6879      	ldr	r1, [r7, #4]
 801a116:	68fa      	ldr	r2, [r7, #12]
 801a118:	4613      	mov	r3, r2
 801a11a:	009b      	lsls	r3, r3, #2
 801a11c:	4413      	add	r3, r2
 801a11e:	00db      	lsls	r3, r3, #3
 801a120:	440b      	add	r3, r1
 801a122:	3350      	adds	r3, #80	; 0x50
 801a124:	781b      	ldrb	r3, [r3, #0]
 801a126:	f083 0301 	eor.w	r3, r3, #1
 801a12a:	b2d8      	uxtb	r0, r3
 801a12c:	6879      	ldr	r1, [r7, #4]
 801a12e:	68fa      	ldr	r2, [r7, #12]
 801a130:	4613      	mov	r3, r2
 801a132:	009b      	lsls	r3, r3, #2
 801a134:	4413      	add	r3, r2
 801a136:	00db      	lsls	r3, r3, #3
 801a138:	440b      	add	r3, r1
 801a13a:	3350      	adds	r3, #80	; 0x50
 801a13c:	4602      	mov	r2, r0
 801a13e:	701a      	strb	r2, [r3, #0]
}
 801a140:	e1f7      	b.n	801a532 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 801a142:	68fb      	ldr	r3, [r7, #12]
 801a144:	015a      	lsls	r2, r3, #5
 801a146:	693b      	ldr	r3, [r7, #16]
 801a148:	4413      	add	r3, r2
 801a14a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801a14e:	689b      	ldr	r3, [r3, #8]
 801a150:	f003 0302 	and.w	r3, r3, #2
 801a154:	2b02      	cmp	r3, #2
 801a156:	f040 811a 	bne.w	801a38e <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 801a15a:	68fb      	ldr	r3, [r7, #12]
 801a15c:	015a      	lsls	r2, r3, #5
 801a15e:	693b      	ldr	r3, [r7, #16]
 801a160:	4413      	add	r3, r2
 801a162:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801a166:	68db      	ldr	r3, [r3, #12]
 801a168:	68fa      	ldr	r2, [r7, #12]
 801a16a:	0151      	lsls	r1, r2, #5
 801a16c:	693a      	ldr	r2, [r7, #16]
 801a16e:	440a      	add	r2, r1
 801a170:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801a174:	f023 0302 	bic.w	r3, r3, #2
 801a178:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 801a17a:	6879      	ldr	r1, [r7, #4]
 801a17c:	68fa      	ldr	r2, [r7, #12]
 801a17e:	4613      	mov	r3, r2
 801a180:	009b      	lsls	r3, r3, #2
 801a182:	4413      	add	r3, r2
 801a184:	00db      	lsls	r3, r3, #3
 801a186:	440b      	add	r3, r1
 801a188:	335d      	adds	r3, #93	; 0x5d
 801a18a:	781b      	ldrb	r3, [r3, #0]
 801a18c:	2b01      	cmp	r3, #1
 801a18e:	d10a      	bne.n	801a1a6 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 801a190:	6879      	ldr	r1, [r7, #4]
 801a192:	68fa      	ldr	r2, [r7, #12]
 801a194:	4613      	mov	r3, r2
 801a196:	009b      	lsls	r3, r3, #2
 801a198:	4413      	add	r3, r2
 801a19a:	00db      	lsls	r3, r3, #3
 801a19c:	440b      	add	r3, r1
 801a19e:	335c      	adds	r3, #92	; 0x5c
 801a1a0:	2201      	movs	r2, #1
 801a1a2:	701a      	strb	r2, [r3, #0]
 801a1a4:	e0d9      	b.n	801a35a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 801a1a6:	6879      	ldr	r1, [r7, #4]
 801a1a8:	68fa      	ldr	r2, [r7, #12]
 801a1aa:	4613      	mov	r3, r2
 801a1ac:	009b      	lsls	r3, r3, #2
 801a1ae:	4413      	add	r3, r2
 801a1b0:	00db      	lsls	r3, r3, #3
 801a1b2:	440b      	add	r3, r1
 801a1b4:	335d      	adds	r3, #93	; 0x5d
 801a1b6:	781b      	ldrb	r3, [r3, #0]
 801a1b8:	2b05      	cmp	r3, #5
 801a1ba:	d10a      	bne.n	801a1d2 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 801a1bc:	6879      	ldr	r1, [r7, #4]
 801a1be:	68fa      	ldr	r2, [r7, #12]
 801a1c0:	4613      	mov	r3, r2
 801a1c2:	009b      	lsls	r3, r3, #2
 801a1c4:	4413      	add	r3, r2
 801a1c6:	00db      	lsls	r3, r3, #3
 801a1c8:	440b      	add	r3, r1
 801a1ca:	335c      	adds	r3, #92	; 0x5c
 801a1cc:	2205      	movs	r2, #5
 801a1ce:	701a      	strb	r2, [r3, #0]
 801a1d0:	e0c3      	b.n	801a35a <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 801a1d2:	6879      	ldr	r1, [r7, #4]
 801a1d4:	68fa      	ldr	r2, [r7, #12]
 801a1d6:	4613      	mov	r3, r2
 801a1d8:	009b      	lsls	r3, r3, #2
 801a1da:	4413      	add	r3, r2
 801a1dc:	00db      	lsls	r3, r3, #3
 801a1de:	440b      	add	r3, r1
 801a1e0:	335d      	adds	r3, #93	; 0x5d
 801a1e2:	781b      	ldrb	r3, [r3, #0]
 801a1e4:	2b06      	cmp	r3, #6
 801a1e6:	d00a      	beq.n	801a1fe <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 801a1e8:	6879      	ldr	r1, [r7, #4]
 801a1ea:	68fa      	ldr	r2, [r7, #12]
 801a1ec:	4613      	mov	r3, r2
 801a1ee:	009b      	lsls	r3, r3, #2
 801a1f0:	4413      	add	r3, r2
 801a1f2:	00db      	lsls	r3, r3, #3
 801a1f4:	440b      	add	r3, r1
 801a1f6:	335d      	adds	r3, #93	; 0x5d
 801a1f8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 801a1fa:	2b08      	cmp	r3, #8
 801a1fc:	d156      	bne.n	801a2ac <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 801a1fe:	6879      	ldr	r1, [r7, #4]
 801a200:	68fa      	ldr	r2, [r7, #12]
 801a202:	4613      	mov	r3, r2
 801a204:	009b      	lsls	r3, r3, #2
 801a206:	4413      	add	r3, r2
 801a208:	00db      	lsls	r3, r3, #3
 801a20a:	440b      	add	r3, r1
 801a20c:	3358      	adds	r3, #88	; 0x58
 801a20e:	681b      	ldr	r3, [r3, #0]
 801a210:	1c59      	adds	r1, r3, #1
 801a212:	6878      	ldr	r0, [r7, #4]
 801a214:	68fa      	ldr	r2, [r7, #12]
 801a216:	4613      	mov	r3, r2
 801a218:	009b      	lsls	r3, r3, #2
 801a21a:	4413      	add	r3, r2
 801a21c:	00db      	lsls	r3, r3, #3
 801a21e:	4403      	add	r3, r0
 801a220:	3358      	adds	r3, #88	; 0x58
 801a222:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 801a224:	6879      	ldr	r1, [r7, #4]
 801a226:	68fa      	ldr	r2, [r7, #12]
 801a228:	4613      	mov	r3, r2
 801a22a:	009b      	lsls	r3, r3, #2
 801a22c:	4413      	add	r3, r2
 801a22e:	00db      	lsls	r3, r3, #3
 801a230:	440b      	add	r3, r1
 801a232:	3358      	adds	r3, #88	; 0x58
 801a234:	681b      	ldr	r3, [r3, #0]
 801a236:	2b03      	cmp	r3, #3
 801a238:	d914      	bls.n	801a264 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 801a23a:	6879      	ldr	r1, [r7, #4]
 801a23c:	68fa      	ldr	r2, [r7, #12]
 801a23e:	4613      	mov	r3, r2
 801a240:	009b      	lsls	r3, r3, #2
 801a242:	4413      	add	r3, r2
 801a244:	00db      	lsls	r3, r3, #3
 801a246:	440b      	add	r3, r1
 801a248:	3358      	adds	r3, #88	; 0x58
 801a24a:	2200      	movs	r2, #0
 801a24c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 801a24e:	6879      	ldr	r1, [r7, #4]
 801a250:	68fa      	ldr	r2, [r7, #12]
 801a252:	4613      	mov	r3, r2
 801a254:	009b      	lsls	r3, r3, #2
 801a256:	4413      	add	r3, r2
 801a258:	00db      	lsls	r3, r3, #3
 801a25a:	440b      	add	r3, r1
 801a25c:	335c      	adds	r3, #92	; 0x5c
 801a25e:	2204      	movs	r2, #4
 801a260:	701a      	strb	r2, [r3, #0]
 801a262:	e009      	b.n	801a278 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 801a264:	6879      	ldr	r1, [r7, #4]
 801a266:	68fa      	ldr	r2, [r7, #12]
 801a268:	4613      	mov	r3, r2
 801a26a:	009b      	lsls	r3, r3, #2
 801a26c:	4413      	add	r3, r2
 801a26e:	00db      	lsls	r3, r3, #3
 801a270:	440b      	add	r3, r1
 801a272:	335c      	adds	r3, #92	; 0x5c
 801a274:	2202      	movs	r2, #2
 801a276:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 801a278:	68fb      	ldr	r3, [r7, #12]
 801a27a:	015a      	lsls	r2, r3, #5
 801a27c:	693b      	ldr	r3, [r7, #16]
 801a27e:	4413      	add	r3, r2
 801a280:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801a284:	681b      	ldr	r3, [r3, #0]
 801a286:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 801a288:	68bb      	ldr	r3, [r7, #8]
 801a28a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801a28e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 801a290:	68bb      	ldr	r3, [r7, #8]
 801a292:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801a296:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 801a298:	68fb      	ldr	r3, [r7, #12]
 801a29a:	015a      	lsls	r2, r3, #5
 801a29c:	693b      	ldr	r3, [r7, #16]
 801a29e:	4413      	add	r3, r2
 801a2a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801a2a4:	461a      	mov	r2, r3
 801a2a6:	68bb      	ldr	r3, [r7, #8]
 801a2a8:	6013      	str	r3, [r2, #0]
 801a2aa:	e056      	b.n	801a35a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 801a2ac:	6879      	ldr	r1, [r7, #4]
 801a2ae:	68fa      	ldr	r2, [r7, #12]
 801a2b0:	4613      	mov	r3, r2
 801a2b2:	009b      	lsls	r3, r3, #2
 801a2b4:	4413      	add	r3, r2
 801a2b6:	00db      	lsls	r3, r3, #3
 801a2b8:	440b      	add	r3, r1
 801a2ba:	335d      	adds	r3, #93	; 0x5d
 801a2bc:	781b      	ldrb	r3, [r3, #0]
 801a2be:	2b03      	cmp	r3, #3
 801a2c0:	d123      	bne.n	801a30a <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 801a2c2:	6879      	ldr	r1, [r7, #4]
 801a2c4:	68fa      	ldr	r2, [r7, #12]
 801a2c6:	4613      	mov	r3, r2
 801a2c8:	009b      	lsls	r3, r3, #2
 801a2ca:	4413      	add	r3, r2
 801a2cc:	00db      	lsls	r3, r3, #3
 801a2ce:	440b      	add	r3, r1
 801a2d0:	335c      	adds	r3, #92	; 0x5c
 801a2d2:	2202      	movs	r2, #2
 801a2d4:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 801a2d6:	68fb      	ldr	r3, [r7, #12]
 801a2d8:	015a      	lsls	r2, r3, #5
 801a2da:	693b      	ldr	r3, [r7, #16]
 801a2dc:	4413      	add	r3, r2
 801a2de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801a2e2:	681b      	ldr	r3, [r3, #0]
 801a2e4:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 801a2e6:	68bb      	ldr	r3, [r7, #8]
 801a2e8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801a2ec:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 801a2ee:	68bb      	ldr	r3, [r7, #8]
 801a2f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801a2f4:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 801a2f6:	68fb      	ldr	r3, [r7, #12]
 801a2f8:	015a      	lsls	r2, r3, #5
 801a2fa:	693b      	ldr	r3, [r7, #16]
 801a2fc:	4413      	add	r3, r2
 801a2fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801a302:	461a      	mov	r2, r3
 801a304:	68bb      	ldr	r3, [r7, #8]
 801a306:	6013      	str	r3, [r2, #0]
 801a308:	e027      	b.n	801a35a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 801a30a:	6879      	ldr	r1, [r7, #4]
 801a30c:	68fa      	ldr	r2, [r7, #12]
 801a30e:	4613      	mov	r3, r2
 801a310:	009b      	lsls	r3, r3, #2
 801a312:	4413      	add	r3, r2
 801a314:	00db      	lsls	r3, r3, #3
 801a316:	440b      	add	r3, r1
 801a318:	335d      	adds	r3, #93	; 0x5d
 801a31a:	781b      	ldrb	r3, [r3, #0]
 801a31c:	2b07      	cmp	r3, #7
 801a31e:	d11c      	bne.n	801a35a <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 801a320:	6879      	ldr	r1, [r7, #4]
 801a322:	68fa      	ldr	r2, [r7, #12]
 801a324:	4613      	mov	r3, r2
 801a326:	009b      	lsls	r3, r3, #2
 801a328:	4413      	add	r3, r2
 801a32a:	00db      	lsls	r3, r3, #3
 801a32c:	440b      	add	r3, r1
 801a32e:	3358      	adds	r3, #88	; 0x58
 801a330:	681b      	ldr	r3, [r3, #0]
 801a332:	1c59      	adds	r1, r3, #1
 801a334:	6878      	ldr	r0, [r7, #4]
 801a336:	68fa      	ldr	r2, [r7, #12]
 801a338:	4613      	mov	r3, r2
 801a33a:	009b      	lsls	r3, r3, #2
 801a33c:	4413      	add	r3, r2
 801a33e:	00db      	lsls	r3, r3, #3
 801a340:	4403      	add	r3, r0
 801a342:	3358      	adds	r3, #88	; 0x58
 801a344:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 801a346:	6879      	ldr	r1, [r7, #4]
 801a348:	68fa      	ldr	r2, [r7, #12]
 801a34a:	4613      	mov	r3, r2
 801a34c:	009b      	lsls	r3, r3, #2
 801a34e:	4413      	add	r3, r2
 801a350:	00db      	lsls	r3, r3, #3
 801a352:	440b      	add	r3, r1
 801a354:	335c      	adds	r3, #92	; 0x5c
 801a356:	2204      	movs	r2, #4
 801a358:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 801a35a:	68fb      	ldr	r3, [r7, #12]
 801a35c:	015a      	lsls	r2, r3, #5
 801a35e:	693b      	ldr	r3, [r7, #16]
 801a360:	4413      	add	r3, r2
 801a362:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801a366:	461a      	mov	r2, r3
 801a368:	2302      	movs	r3, #2
 801a36a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 801a36c:	68fb      	ldr	r3, [r7, #12]
 801a36e:	b2d8      	uxtb	r0, r3
 801a370:	6879      	ldr	r1, [r7, #4]
 801a372:	68fa      	ldr	r2, [r7, #12]
 801a374:	4613      	mov	r3, r2
 801a376:	009b      	lsls	r3, r3, #2
 801a378:	4413      	add	r3, r2
 801a37a:	00db      	lsls	r3, r3, #3
 801a37c:	440b      	add	r3, r1
 801a37e:	335c      	adds	r3, #92	; 0x5c
 801a380:	781b      	ldrb	r3, [r3, #0]
 801a382:	461a      	mov	r2, r3
 801a384:	4601      	mov	r1, r0
 801a386:	6878      	ldr	r0, [r7, #4]
 801a388:	f005 f8bc 	bl	801f504 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 801a38c:	e0d1      	b.n	801a532 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 801a38e:	68fb      	ldr	r3, [r7, #12]
 801a390:	015a      	lsls	r2, r3, #5
 801a392:	693b      	ldr	r3, [r7, #16]
 801a394:	4413      	add	r3, r2
 801a396:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801a39a:	689b      	ldr	r3, [r3, #8]
 801a39c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a3a0:	2b80      	cmp	r3, #128	; 0x80
 801a3a2:	d13e      	bne.n	801a422 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 801a3a4:	68fb      	ldr	r3, [r7, #12]
 801a3a6:	015a      	lsls	r2, r3, #5
 801a3a8:	693b      	ldr	r3, [r7, #16]
 801a3aa:	4413      	add	r3, r2
 801a3ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801a3b0:	68db      	ldr	r3, [r3, #12]
 801a3b2:	68fa      	ldr	r2, [r7, #12]
 801a3b4:	0151      	lsls	r1, r2, #5
 801a3b6:	693a      	ldr	r2, [r7, #16]
 801a3b8:	440a      	add	r2, r1
 801a3ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801a3be:	f043 0302 	orr.w	r3, r3, #2
 801a3c2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 801a3c4:	6879      	ldr	r1, [r7, #4]
 801a3c6:	68fa      	ldr	r2, [r7, #12]
 801a3c8:	4613      	mov	r3, r2
 801a3ca:	009b      	lsls	r3, r3, #2
 801a3cc:	4413      	add	r3, r2
 801a3ce:	00db      	lsls	r3, r3, #3
 801a3d0:	440b      	add	r3, r1
 801a3d2:	3358      	adds	r3, #88	; 0x58
 801a3d4:	681b      	ldr	r3, [r3, #0]
 801a3d6:	1c59      	adds	r1, r3, #1
 801a3d8:	6878      	ldr	r0, [r7, #4]
 801a3da:	68fa      	ldr	r2, [r7, #12]
 801a3dc:	4613      	mov	r3, r2
 801a3de:	009b      	lsls	r3, r3, #2
 801a3e0:	4413      	add	r3, r2
 801a3e2:	00db      	lsls	r3, r3, #3
 801a3e4:	4403      	add	r3, r0
 801a3e6:	3358      	adds	r3, #88	; 0x58
 801a3e8:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 801a3ea:	6879      	ldr	r1, [r7, #4]
 801a3ec:	68fa      	ldr	r2, [r7, #12]
 801a3ee:	4613      	mov	r3, r2
 801a3f0:	009b      	lsls	r3, r3, #2
 801a3f2:	4413      	add	r3, r2
 801a3f4:	00db      	lsls	r3, r3, #3
 801a3f6:	440b      	add	r3, r1
 801a3f8:	335d      	adds	r3, #93	; 0x5d
 801a3fa:	2206      	movs	r2, #6
 801a3fc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 801a3fe:	687b      	ldr	r3, [r7, #4]
 801a400:	681b      	ldr	r3, [r3, #0]
 801a402:	68fa      	ldr	r2, [r7, #12]
 801a404:	b2d2      	uxtb	r2, r2
 801a406:	4611      	mov	r1, r2
 801a408:	4618      	mov	r0, r3
 801a40a:	f003 fd78 	bl	801defe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 801a40e:	68fb      	ldr	r3, [r7, #12]
 801a410:	015a      	lsls	r2, r3, #5
 801a412:	693b      	ldr	r3, [r7, #16]
 801a414:	4413      	add	r3, r2
 801a416:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801a41a:	461a      	mov	r2, r3
 801a41c:	2380      	movs	r3, #128	; 0x80
 801a41e:	6093      	str	r3, [r2, #8]
}
 801a420:	e087      	b.n	801a532 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 801a422:	68fb      	ldr	r3, [r7, #12]
 801a424:	015a      	lsls	r2, r3, #5
 801a426:	693b      	ldr	r3, [r7, #16]
 801a428:	4413      	add	r3, r2
 801a42a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801a42e:	689b      	ldr	r3, [r3, #8]
 801a430:	f003 0310 	and.w	r3, r3, #16
 801a434:	2b10      	cmp	r3, #16
 801a436:	d17c      	bne.n	801a532 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 801a438:	6879      	ldr	r1, [r7, #4]
 801a43a:	68fa      	ldr	r2, [r7, #12]
 801a43c:	4613      	mov	r3, r2
 801a43e:	009b      	lsls	r3, r3, #2
 801a440:	4413      	add	r3, r2
 801a442:	00db      	lsls	r3, r3, #3
 801a444:	440b      	add	r3, r1
 801a446:	333f      	adds	r3, #63	; 0x3f
 801a448:	781b      	ldrb	r3, [r3, #0]
 801a44a:	2b03      	cmp	r3, #3
 801a44c:	d122      	bne.n	801a494 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 801a44e:	6879      	ldr	r1, [r7, #4]
 801a450:	68fa      	ldr	r2, [r7, #12]
 801a452:	4613      	mov	r3, r2
 801a454:	009b      	lsls	r3, r3, #2
 801a456:	4413      	add	r3, r2
 801a458:	00db      	lsls	r3, r3, #3
 801a45a:	440b      	add	r3, r1
 801a45c:	3358      	adds	r3, #88	; 0x58
 801a45e:	2200      	movs	r2, #0
 801a460:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 801a462:	68fb      	ldr	r3, [r7, #12]
 801a464:	015a      	lsls	r2, r3, #5
 801a466:	693b      	ldr	r3, [r7, #16]
 801a468:	4413      	add	r3, r2
 801a46a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801a46e:	68db      	ldr	r3, [r3, #12]
 801a470:	68fa      	ldr	r2, [r7, #12]
 801a472:	0151      	lsls	r1, r2, #5
 801a474:	693a      	ldr	r2, [r7, #16]
 801a476:	440a      	add	r2, r1
 801a478:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801a47c:	f043 0302 	orr.w	r3, r3, #2
 801a480:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 801a482:	687b      	ldr	r3, [r7, #4]
 801a484:	681b      	ldr	r3, [r3, #0]
 801a486:	68fa      	ldr	r2, [r7, #12]
 801a488:	b2d2      	uxtb	r2, r2
 801a48a:	4611      	mov	r1, r2
 801a48c:	4618      	mov	r0, r3
 801a48e:	f003 fd36 	bl	801defe <USB_HC_Halt>
 801a492:	e045      	b.n	801a520 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 801a494:	6879      	ldr	r1, [r7, #4]
 801a496:	68fa      	ldr	r2, [r7, #12]
 801a498:	4613      	mov	r3, r2
 801a49a:	009b      	lsls	r3, r3, #2
 801a49c:	4413      	add	r3, r2
 801a49e:	00db      	lsls	r3, r3, #3
 801a4a0:	440b      	add	r3, r1
 801a4a2:	333f      	adds	r3, #63	; 0x3f
 801a4a4:	781b      	ldrb	r3, [r3, #0]
 801a4a6:	2b00      	cmp	r3, #0
 801a4a8:	d00a      	beq.n	801a4c0 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 801a4aa:	6879      	ldr	r1, [r7, #4]
 801a4ac:	68fa      	ldr	r2, [r7, #12]
 801a4ae:	4613      	mov	r3, r2
 801a4b0:	009b      	lsls	r3, r3, #2
 801a4b2:	4413      	add	r3, r2
 801a4b4:	00db      	lsls	r3, r3, #3
 801a4b6:	440b      	add	r3, r1
 801a4b8:	333f      	adds	r3, #63	; 0x3f
 801a4ba:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 801a4bc:	2b02      	cmp	r3, #2
 801a4be:	d12f      	bne.n	801a520 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 801a4c0:	6879      	ldr	r1, [r7, #4]
 801a4c2:	68fa      	ldr	r2, [r7, #12]
 801a4c4:	4613      	mov	r3, r2
 801a4c6:	009b      	lsls	r3, r3, #2
 801a4c8:	4413      	add	r3, r2
 801a4ca:	00db      	lsls	r3, r3, #3
 801a4cc:	440b      	add	r3, r1
 801a4ce:	3358      	adds	r3, #88	; 0x58
 801a4d0:	2200      	movs	r2, #0
 801a4d2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 801a4d4:	687b      	ldr	r3, [r7, #4]
 801a4d6:	691b      	ldr	r3, [r3, #16]
 801a4d8:	2b00      	cmp	r3, #0
 801a4da:	d121      	bne.n	801a520 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 801a4dc:	6879      	ldr	r1, [r7, #4]
 801a4de:	68fa      	ldr	r2, [r7, #12]
 801a4e0:	4613      	mov	r3, r2
 801a4e2:	009b      	lsls	r3, r3, #2
 801a4e4:	4413      	add	r3, r2
 801a4e6:	00db      	lsls	r3, r3, #3
 801a4e8:	440b      	add	r3, r1
 801a4ea:	335d      	adds	r3, #93	; 0x5d
 801a4ec:	2203      	movs	r2, #3
 801a4ee:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 801a4f0:	68fb      	ldr	r3, [r7, #12]
 801a4f2:	015a      	lsls	r2, r3, #5
 801a4f4:	693b      	ldr	r3, [r7, #16]
 801a4f6:	4413      	add	r3, r2
 801a4f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801a4fc:	68db      	ldr	r3, [r3, #12]
 801a4fe:	68fa      	ldr	r2, [r7, #12]
 801a500:	0151      	lsls	r1, r2, #5
 801a502:	693a      	ldr	r2, [r7, #16]
 801a504:	440a      	add	r2, r1
 801a506:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801a50a:	f043 0302 	orr.w	r3, r3, #2
 801a50e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 801a510:	687b      	ldr	r3, [r7, #4]
 801a512:	681b      	ldr	r3, [r3, #0]
 801a514:	68fa      	ldr	r2, [r7, #12]
 801a516:	b2d2      	uxtb	r2, r2
 801a518:	4611      	mov	r1, r2
 801a51a:	4618      	mov	r0, r3
 801a51c:	f003 fcef 	bl	801defe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 801a520:	68fb      	ldr	r3, [r7, #12]
 801a522:	015a      	lsls	r2, r3, #5
 801a524:	693b      	ldr	r3, [r7, #16]
 801a526:	4413      	add	r3, r2
 801a528:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801a52c:	461a      	mov	r2, r3
 801a52e:	2310      	movs	r3, #16
 801a530:	6093      	str	r3, [r2, #8]
}
 801a532:	bf00      	nop
 801a534:	3718      	adds	r7, #24
 801a536:	46bd      	mov	sp, r7
 801a538:	bd80      	pop	{r7, pc}

0801a53a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 801a53a:	b580      	push	{r7, lr}
 801a53c:	b086      	sub	sp, #24
 801a53e:	af00      	add	r7, sp, #0
 801a540:	6078      	str	r0, [r7, #4]
 801a542:	460b      	mov	r3, r1
 801a544:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 801a546:	687b      	ldr	r3, [r7, #4]
 801a548:	681b      	ldr	r3, [r3, #0]
 801a54a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801a54c:	697b      	ldr	r3, [r7, #20]
 801a54e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 801a550:	78fb      	ldrb	r3, [r7, #3]
 801a552:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 801a554:	68fb      	ldr	r3, [r7, #12]
 801a556:	015a      	lsls	r2, r3, #5
 801a558:	693b      	ldr	r3, [r7, #16]
 801a55a:	4413      	add	r3, r2
 801a55c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801a560:	689b      	ldr	r3, [r3, #8]
 801a562:	f003 0304 	and.w	r3, r3, #4
 801a566:	2b04      	cmp	r3, #4
 801a568:	d119      	bne.n	801a59e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 801a56a:	68fb      	ldr	r3, [r7, #12]
 801a56c:	015a      	lsls	r2, r3, #5
 801a56e:	693b      	ldr	r3, [r7, #16]
 801a570:	4413      	add	r3, r2
 801a572:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801a576:	461a      	mov	r2, r3
 801a578:	2304      	movs	r3, #4
 801a57a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 801a57c:	68fb      	ldr	r3, [r7, #12]
 801a57e:	015a      	lsls	r2, r3, #5
 801a580:	693b      	ldr	r3, [r7, #16]
 801a582:	4413      	add	r3, r2
 801a584:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801a588:	68db      	ldr	r3, [r3, #12]
 801a58a:	68fa      	ldr	r2, [r7, #12]
 801a58c:	0151      	lsls	r1, r2, #5
 801a58e:	693a      	ldr	r2, [r7, #16]
 801a590:	440a      	add	r2, r1
 801a592:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801a596:	f043 0302 	orr.w	r3, r3, #2
 801a59a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 801a59c:	e33e      	b.n	801ac1c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 801a59e:	68fb      	ldr	r3, [r7, #12]
 801a5a0:	015a      	lsls	r2, r3, #5
 801a5a2:	693b      	ldr	r3, [r7, #16]
 801a5a4:	4413      	add	r3, r2
 801a5a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801a5aa:	689b      	ldr	r3, [r3, #8]
 801a5ac:	f003 0320 	and.w	r3, r3, #32
 801a5b0:	2b20      	cmp	r3, #32
 801a5b2:	d141      	bne.n	801a638 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 801a5b4:	68fb      	ldr	r3, [r7, #12]
 801a5b6:	015a      	lsls	r2, r3, #5
 801a5b8:	693b      	ldr	r3, [r7, #16]
 801a5ba:	4413      	add	r3, r2
 801a5bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801a5c0:	461a      	mov	r2, r3
 801a5c2:	2320      	movs	r3, #32
 801a5c4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 801a5c6:	6879      	ldr	r1, [r7, #4]
 801a5c8:	68fa      	ldr	r2, [r7, #12]
 801a5ca:	4613      	mov	r3, r2
 801a5cc:	009b      	lsls	r3, r3, #2
 801a5ce:	4413      	add	r3, r2
 801a5d0:	00db      	lsls	r3, r3, #3
 801a5d2:	440b      	add	r3, r1
 801a5d4:	333d      	adds	r3, #61	; 0x3d
 801a5d6:	781b      	ldrb	r3, [r3, #0]
 801a5d8:	2b01      	cmp	r3, #1
 801a5da:	f040 831f 	bne.w	801ac1c <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 801a5de:	6879      	ldr	r1, [r7, #4]
 801a5e0:	68fa      	ldr	r2, [r7, #12]
 801a5e2:	4613      	mov	r3, r2
 801a5e4:	009b      	lsls	r3, r3, #2
 801a5e6:	4413      	add	r3, r2
 801a5e8:	00db      	lsls	r3, r3, #3
 801a5ea:	440b      	add	r3, r1
 801a5ec:	333d      	adds	r3, #61	; 0x3d
 801a5ee:	2200      	movs	r2, #0
 801a5f0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 801a5f2:	6879      	ldr	r1, [r7, #4]
 801a5f4:	68fa      	ldr	r2, [r7, #12]
 801a5f6:	4613      	mov	r3, r2
 801a5f8:	009b      	lsls	r3, r3, #2
 801a5fa:	4413      	add	r3, r2
 801a5fc:	00db      	lsls	r3, r3, #3
 801a5fe:	440b      	add	r3, r1
 801a600:	335c      	adds	r3, #92	; 0x5c
 801a602:	2202      	movs	r2, #2
 801a604:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 801a606:	68fb      	ldr	r3, [r7, #12]
 801a608:	015a      	lsls	r2, r3, #5
 801a60a:	693b      	ldr	r3, [r7, #16]
 801a60c:	4413      	add	r3, r2
 801a60e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801a612:	68db      	ldr	r3, [r3, #12]
 801a614:	68fa      	ldr	r2, [r7, #12]
 801a616:	0151      	lsls	r1, r2, #5
 801a618:	693a      	ldr	r2, [r7, #16]
 801a61a:	440a      	add	r2, r1
 801a61c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801a620:	f043 0302 	orr.w	r3, r3, #2
 801a624:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 801a626:	687b      	ldr	r3, [r7, #4]
 801a628:	681b      	ldr	r3, [r3, #0]
 801a62a:	68fa      	ldr	r2, [r7, #12]
 801a62c:	b2d2      	uxtb	r2, r2
 801a62e:	4611      	mov	r1, r2
 801a630:	4618      	mov	r0, r3
 801a632:	f003 fc64 	bl	801defe <USB_HC_Halt>
}
 801a636:	e2f1      	b.n	801ac1c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 801a638:	68fb      	ldr	r3, [r7, #12]
 801a63a:	015a      	lsls	r2, r3, #5
 801a63c:	693b      	ldr	r3, [r7, #16]
 801a63e:	4413      	add	r3, r2
 801a640:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801a644:	689b      	ldr	r3, [r3, #8]
 801a646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a64a:	2b40      	cmp	r3, #64	; 0x40
 801a64c:	d13f      	bne.n	801a6ce <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 801a64e:	6879      	ldr	r1, [r7, #4]
 801a650:	68fa      	ldr	r2, [r7, #12]
 801a652:	4613      	mov	r3, r2
 801a654:	009b      	lsls	r3, r3, #2
 801a656:	4413      	add	r3, r2
 801a658:	00db      	lsls	r3, r3, #3
 801a65a:	440b      	add	r3, r1
 801a65c:	335d      	adds	r3, #93	; 0x5d
 801a65e:	2204      	movs	r2, #4
 801a660:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 801a662:	6879      	ldr	r1, [r7, #4]
 801a664:	68fa      	ldr	r2, [r7, #12]
 801a666:	4613      	mov	r3, r2
 801a668:	009b      	lsls	r3, r3, #2
 801a66a:	4413      	add	r3, r2
 801a66c:	00db      	lsls	r3, r3, #3
 801a66e:	440b      	add	r3, r1
 801a670:	333d      	adds	r3, #61	; 0x3d
 801a672:	2201      	movs	r2, #1
 801a674:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 801a676:	6879      	ldr	r1, [r7, #4]
 801a678:	68fa      	ldr	r2, [r7, #12]
 801a67a:	4613      	mov	r3, r2
 801a67c:	009b      	lsls	r3, r3, #2
 801a67e:	4413      	add	r3, r2
 801a680:	00db      	lsls	r3, r3, #3
 801a682:	440b      	add	r3, r1
 801a684:	3358      	adds	r3, #88	; 0x58
 801a686:	2200      	movs	r2, #0
 801a688:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 801a68a:	68fb      	ldr	r3, [r7, #12]
 801a68c:	015a      	lsls	r2, r3, #5
 801a68e:	693b      	ldr	r3, [r7, #16]
 801a690:	4413      	add	r3, r2
 801a692:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801a696:	68db      	ldr	r3, [r3, #12]
 801a698:	68fa      	ldr	r2, [r7, #12]
 801a69a:	0151      	lsls	r1, r2, #5
 801a69c:	693a      	ldr	r2, [r7, #16]
 801a69e:	440a      	add	r2, r1
 801a6a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801a6a4:	f043 0302 	orr.w	r3, r3, #2
 801a6a8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 801a6aa:	687b      	ldr	r3, [r7, #4]
 801a6ac:	681b      	ldr	r3, [r3, #0]
 801a6ae:	68fa      	ldr	r2, [r7, #12]
 801a6b0:	b2d2      	uxtb	r2, r2
 801a6b2:	4611      	mov	r1, r2
 801a6b4:	4618      	mov	r0, r3
 801a6b6:	f003 fc22 	bl	801defe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 801a6ba:	68fb      	ldr	r3, [r7, #12]
 801a6bc:	015a      	lsls	r2, r3, #5
 801a6be:	693b      	ldr	r3, [r7, #16]
 801a6c0:	4413      	add	r3, r2
 801a6c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801a6c6:	461a      	mov	r2, r3
 801a6c8:	2340      	movs	r3, #64	; 0x40
 801a6ca:	6093      	str	r3, [r2, #8]
}
 801a6cc:	e2a6      	b.n	801ac1c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 801a6ce:	68fb      	ldr	r3, [r7, #12]
 801a6d0:	015a      	lsls	r2, r3, #5
 801a6d2:	693b      	ldr	r3, [r7, #16]
 801a6d4:	4413      	add	r3, r2
 801a6d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801a6da:	689b      	ldr	r3, [r3, #8]
 801a6dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801a6e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a6e4:	d122      	bne.n	801a72c <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 801a6e6:	68fb      	ldr	r3, [r7, #12]
 801a6e8:	015a      	lsls	r2, r3, #5
 801a6ea:	693b      	ldr	r3, [r7, #16]
 801a6ec:	4413      	add	r3, r2
 801a6ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801a6f2:	68db      	ldr	r3, [r3, #12]
 801a6f4:	68fa      	ldr	r2, [r7, #12]
 801a6f6:	0151      	lsls	r1, r2, #5
 801a6f8:	693a      	ldr	r2, [r7, #16]
 801a6fa:	440a      	add	r2, r1
 801a6fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801a700:	f043 0302 	orr.w	r3, r3, #2
 801a704:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 801a706:	687b      	ldr	r3, [r7, #4]
 801a708:	681b      	ldr	r3, [r3, #0]
 801a70a:	68fa      	ldr	r2, [r7, #12]
 801a70c:	b2d2      	uxtb	r2, r2
 801a70e:	4611      	mov	r1, r2
 801a710:	4618      	mov	r0, r3
 801a712:	f003 fbf4 	bl	801defe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 801a716:	68fb      	ldr	r3, [r7, #12]
 801a718:	015a      	lsls	r2, r3, #5
 801a71a:	693b      	ldr	r3, [r7, #16]
 801a71c:	4413      	add	r3, r2
 801a71e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801a722:	461a      	mov	r2, r3
 801a724:	f44f 7300 	mov.w	r3, #512	; 0x200
 801a728:	6093      	str	r3, [r2, #8]
}
 801a72a:	e277      	b.n	801ac1c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 801a72c:	68fb      	ldr	r3, [r7, #12]
 801a72e:	015a      	lsls	r2, r3, #5
 801a730:	693b      	ldr	r3, [r7, #16]
 801a732:	4413      	add	r3, r2
 801a734:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801a738:	689b      	ldr	r3, [r3, #8]
 801a73a:	f003 0301 	and.w	r3, r3, #1
 801a73e:	2b01      	cmp	r3, #1
 801a740:	d135      	bne.n	801a7ae <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 801a742:	6879      	ldr	r1, [r7, #4]
 801a744:	68fa      	ldr	r2, [r7, #12]
 801a746:	4613      	mov	r3, r2
 801a748:	009b      	lsls	r3, r3, #2
 801a74a:	4413      	add	r3, r2
 801a74c:	00db      	lsls	r3, r3, #3
 801a74e:	440b      	add	r3, r1
 801a750:	3358      	adds	r3, #88	; 0x58
 801a752:	2200      	movs	r2, #0
 801a754:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 801a756:	68fb      	ldr	r3, [r7, #12]
 801a758:	015a      	lsls	r2, r3, #5
 801a75a:	693b      	ldr	r3, [r7, #16]
 801a75c:	4413      	add	r3, r2
 801a75e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801a762:	68db      	ldr	r3, [r3, #12]
 801a764:	68fa      	ldr	r2, [r7, #12]
 801a766:	0151      	lsls	r1, r2, #5
 801a768:	693a      	ldr	r2, [r7, #16]
 801a76a:	440a      	add	r2, r1
 801a76c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801a770:	f043 0302 	orr.w	r3, r3, #2
 801a774:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 801a776:	687b      	ldr	r3, [r7, #4]
 801a778:	681b      	ldr	r3, [r3, #0]
 801a77a:	68fa      	ldr	r2, [r7, #12]
 801a77c:	b2d2      	uxtb	r2, r2
 801a77e:	4611      	mov	r1, r2
 801a780:	4618      	mov	r0, r3
 801a782:	f003 fbbc 	bl	801defe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 801a786:	68fb      	ldr	r3, [r7, #12]
 801a788:	015a      	lsls	r2, r3, #5
 801a78a:	693b      	ldr	r3, [r7, #16]
 801a78c:	4413      	add	r3, r2
 801a78e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801a792:	461a      	mov	r2, r3
 801a794:	2301      	movs	r3, #1
 801a796:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 801a798:	6879      	ldr	r1, [r7, #4]
 801a79a:	68fa      	ldr	r2, [r7, #12]
 801a79c:	4613      	mov	r3, r2
 801a79e:	009b      	lsls	r3, r3, #2
 801a7a0:	4413      	add	r3, r2
 801a7a2:	00db      	lsls	r3, r3, #3
 801a7a4:	440b      	add	r3, r1
 801a7a6:	335d      	adds	r3, #93	; 0x5d
 801a7a8:	2201      	movs	r2, #1
 801a7aa:	701a      	strb	r2, [r3, #0]
}
 801a7ac:	e236      	b.n	801ac1c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 801a7ae:	68fb      	ldr	r3, [r7, #12]
 801a7b0:	015a      	lsls	r2, r3, #5
 801a7b2:	693b      	ldr	r3, [r7, #16]
 801a7b4:	4413      	add	r3, r2
 801a7b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801a7ba:	689b      	ldr	r3, [r3, #8]
 801a7bc:	f003 0308 	and.w	r3, r3, #8
 801a7c0:	2b08      	cmp	r3, #8
 801a7c2:	d12b      	bne.n	801a81c <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 801a7c4:	68fb      	ldr	r3, [r7, #12]
 801a7c6:	015a      	lsls	r2, r3, #5
 801a7c8:	693b      	ldr	r3, [r7, #16]
 801a7ca:	4413      	add	r3, r2
 801a7cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801a7d0:	461a      	mov	r2, r3
 801a7d2:	2308      	movs	r3, #8
 801a7d4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 801a7d6:	68fb      	ldr	r3, [r7, #12]
 801a7d8:	015a      	lsls	r2, r3, #5
 801a7da:	693b      	ldr	r3, [r7, #16]
 801a7dc:	4413      	add	r3, r2
 801a7de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801a7e2:	68db      	ldr	r3, [r3, #12]
 801a7e4:	68fa      	ldr	r2, [r7, #12]
 801a7e6:	0151      	lsls	r1, r2, #5
 801a7e8:	693a      	ldr	r2, [r7, #16]
 801a7ea:	440a      	add	r2, r1
 801a7ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801a7f0:	f043 0302 	orr.w	r3, r3, #2
 801a7f4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 801a7f6:	687b      	ldr	r3, [r7, #4]
 801a7f8:	681b      	ldr	r3, [r3, #0]
 801a7fa:	68fa      	ldr	r2, [r7, #12]
 801a7fc:	b2d2      	uxtb	r2, r2
 801a7fe:	4611      	mov	r1, r2
 801a800:	4618      	mov	r0, r3
 801a802:	f003 fb7c 	bl	801defe <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 801a806:	6879      	ldr	r1, [r7, #4]
 801a808:	68fa      	ldr	r2, [r7, #12]
 801a80a:	4613      	mov	r3, r2
 801a80c:	009b      	lsls	r3, r3, #2
 801a80e:	4413      	add	r3, r2
 801a810:	00db      	lsls	r3, r3, #3
 801a812:	440b      	add	r3, r1
 801a814:	335d      	adds	r3, #93	; 0x5d
 801a816:	2205      	movs	r2, #5
 801a818:	701a      	strb	r2, [r3, #0]
}
 801a81a:	e1ff      	b.n	801ac1c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 801a81c:	68fb      	ldr	r3, [r7, #12]
 801a81e:	015a      	lsls	r2, r3, #5
 801a820:	693b      	ldr	r3, [r7, #16]
 801a822:	4413      	add	r3, r2
 801a824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801a828:	689b      	ldr	r3, [r3, #8]
 801a82a:	f003 0310 	and.w	r3, r3, #16
 801a82e:	2b10      	cmp	r3, #16
 801a830:	d155      	bne.n	801a8de <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 801a832:	6879      	ldr	r1, [r7, #4]
 801a834:	68fa      	ldr	r2, [r7, #12]
 801a836:	4613      	mov	r3, r2
 801a838:	009b      	lsls	r3, r3, #2
 801a83a:	4413      	add	r3, r2
 801a83c:	00db      	lsls	r3, r3, #3
 801a83e:	440b      	add	r3, r1
 801a840:	3358      	adds	r3, #88	; 0x58
 801a842:	2200      	movs	r2, #0
 801a844:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 801a846:	6879      	ldr	r1, [r7, #4]
 801a848:	68fa      	ldr	r2, [r7, #12]
 801a84a:	4613      	mov	r3, r2
 801a84c:	009b      	lsls	r3, r3, #2
 801a84e:	4413      	add	r3, r2
 801a850:	00db      	lsls	r3, r3, #3
 801a852:	440b      	add	r3, r1
 801a854:	335d      	adds	r3, #93	; 0x5d
 801a856:	2203      	movs	r2, #3
 801a858:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 801a85a:	6879      	ldr	r1, [r7, #4]
 801a85c:	68fa      	ldr	r2, [r7, #12]
 801a85e:	4613      	mov	r3, r2
 801a860:	009b      	lsls	r3, r3, #2
 801a862:	4413      	add	r3, r2
 801a864:	00db      	lsls	r3, r3, #3
 801a866:	440b      	add	r3, r1
 801a868:	333d      	adds	r3, #61	; 0x3d
 801a86a:	781b      	ldrb	r3, [r3, #0]
 801a86c:	2b00      	cmp	r3, #0
 801a86e:	d114      	bne.n	801a89a <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 801a870:	6879      	ldr	r1, [r7, #4]
 801a872:	68fa      	ldr	r2, [r7, #12]
 801a874:	4613      	mov	r3, r2
 801a876:	009b      	lsls	r3, r3, #2
 801a878:	4413      	add	r3, r2
 801a87a:	00db      	lsls	r3, r3, #3
 801a87c:	440b      	add	r3, r1
 801a87e:	333c      	adds	r3, #60	; 0x3c
 801a880:	781b      	ldrb	r3, [r3, #0]
 801a882:	2b00      	cmp	r3, #0
 801a884:	d109      	bne.n	801a89a <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 801a886:	6879      	ldr	r1, [r7, #4]
 801a888:	68fa      	ldr	r2, [r7, #12]
 801a88a:	4613      	mov	r3, r2
 801a88c:	009b      	lsls	r3, r3, #2
 801a88e:	4413      	add	r3, r2
 801a890:	00db      	lsls	r3, r3, #3
 801a892:	440b      	add	r3, r1
 801a894:	333d      	adds	r3, #61	; 0x3d
 801a896:	2201      	movs	r2, #1
 801a898:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 801a89a:	68fb      	ldr	r3, [r7, #12]
 801a89c:	015a      	lsls	r2, r3, #5
 801a89e:	693b      	ldr	r3, [r7, #16]
 801a8a0:	4413      	add	r3, r2
 801a8a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801a8a6:	68db      	ldr	r3, [r3, #12]
 801a8a8:	68fa      	ldr	r2, [r7, #12]
 801a8aa:	0151      	lsls	r1, r2, #5
 801a8ac:	693a      	ldr	r2, [r7, #16]
 801a8ae:	440a      	add	r2, r1
 801a8b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801a8b4:	f043 0302 	orr.w	r3, r3, #2
 801a8b8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 801a8ba:	687b      	ldr	r3, [r7, #4]
 801a8bc:	681b      	ldr	r3, [r3, #0]
 801a8be:	68fa      	ldr	r2, [r7, #12]
 801a8c0:	b2d2      	uxtb	r2, r2
 801a8c2:	4611      	mov	r1, r2
 801a8c4:	4618      	mov	r0, r3
 801a8c6:	f003 fb1a 	bl	801defe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 801a8ca:	68fb      	ldr	r3, [r7, #12]
 801a8cc:	015a      	lsls	r2, r3, #5
 801a8ce:	693b      	ldr	r3, [r7, #16]
 801a8d0:	4413      	add	r3, r2
 801a8d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801a8d6:	461a      	mov	r2, r3
 801a8d8:	2310      	movs	r3, #16
 801a8da:	6093      	str	r3, [r2, #8]
}
 801a8dc:	e19e      	b.n	801ac1c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 801a8de:	68fb      	ldr	r3, [r7, #12]
 801a8e0:	015a      	lsls	r2, r3, #5
 801a8e2:	693b      	ldr	r3, [r7, #16]
 801a8e4:	4413      	add	r3, r2
 801a8e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801a8ea:	689b      	ldr	r3, [r3, #8]
 801a8ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a8f0:	2b80      	cmp	r3, #128	; 0x80
 801a8f2:	d12b      	bne.n	801a94c <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 801a8f4:	68fb      	ldr	r3, [r7, #12]
 801a8f6:	015a      	lsls	r2, r3, #5
 801a8f8:	693b      	ldr	r3, [r7, #16]
 801a8fa:	4413      	add	r3, r2
 801a8fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801a900:	68db      	ldr	r3, [r3, #12]
 801a902:	68fa      	ldr	r2, [r7, #12]
 801a904:	0151      	lsls	r1, r2, #5
 801a906:	693a      	ldr	r2, [r7, #16]
 801a908:	440a      	add	r2, r1
 801a90a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801a90e:	f043 0302 	orr.w	r3, r3, #2
 801a912:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 801a914:	687b      	ldr	r3, [r7, #4]
 801a916:	681b      	ldr	r3, [r3, #0]
 801a918:	68fa      	ldr	r2, [r7, #12]
 801a91a:	b2d2      	uxtb	r2, r2
 801a91c:	4611      	mov	r1, r2
 801a91e:	4618      	mov	r0, r3
 801a920:	f003 faed 	bl	801defe <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 801a924:	6879      	ldr	r1, [r7, #4]
 801a926:	68fa      	ldr	r2, [r7, #12]
 801a928:	4613      	mov	r3, r2
 801a92a:	009b      	lsls	r3, r3, #2
 801a92c:	4413      	add	r3, r2
 801a92e:	00db      	lsls	r3, r3, #3
 801a930:	440b      	add	r3, r1
 801a932:	335d      	adds	r3, #93	; 0x5d
 801a934:	2206      	movs	r2, #6
 801a936:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 801a938:	68fb      	ldr	r3, [r7, #12]
 801a93a:	015a      	lsls	r2, r3, #5
 801a93c:	693b      	ldr	r3, [r7, #16]
 801a93e:	4413      	add	r3, r2
 801a940:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801a944:	461a      	mov	r2, r3
 801a946:	2380      	movs	r3, #128	; 0x80
 801a948:	6093      	str	r3, [r2, #8]
}
 801a94a:	e167      	b.n	801ac1c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 801a94c:	68fb      	ldr	r3, [r7, #12]
 801a94e:	015a      	lsls	r2, r3, #5
 801a950:	693b      	ldr	r3, [r7, #16]
 801a952:	4413      	add	r3, r2
 801a954:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801a958:	689b      	ldr	r3, [r3, #8]
 801a95a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801a95e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801a962:	d135      	bne.n	801a9d0 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 801a964:	68fb      	ldr	r3, [r7, #12]
 801a966:	015a      	lsls	r2, r3, #5
 801a968:	693b      	ldr	r3, [r7, #16]
 801a96a:	4413      	add	r3, r2
 801a96c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801a970:	68db      	ldr	r3, [r3, #12]
 801a972:	68fa      	ldr	r2, [r7, #12]
 801a974:	0151      	lsls	r1, r2, #5
 801a976:	693a      	ldr	r2, [r7, #16]
 801a978:	440a      	add	r2, r1
 801a97a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801a97e:	f043 0302 	orr.w	r3, r3, #2
 801a982:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 801a984:	687b      	ldr	r3, [r7, #4]
 801a986:	681b      	ldr	r3, [r3, #0]
 801a988:	68fa      	ldr	r2, [r7, #12]
 801a98a:	b2d2      	uxtb	r2, r2
 801a98c:	4611      	mov	r1, r2
 801a98e:	4618      	mov	r0, r3
 801a990:	f003 fab5 	bl	801defe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 801a994:	68fb      	ldr	r3, [r7, #12]
 801a996:	015a      	lsls	r2, r3, #5
 801a998:	693b      	ldr	r3, [r7, #16]
 801a99a:	4413      	add	r3, r2
 801a99c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801a9a0:	461a      	mov	r2, r3
 801a9a2:	2310      	movs	r3, #16
 801a9a4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 801a9a6:	68fb      	ldr	r3, [r7, #12]
 801a9a8:	015a      	lsls	r2, r3, #5
 801a9aa:	693b      	ldr	r3, [r7, #16]
 801a9ac:	4413      	add	r3, r2
 801a9ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801a9b2:	461a      	mov	r2, r3
 801a9b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a9b8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 801a9ba:	6879      	ldr	r1, [r7, #4]
 801a9bc:	68fa      	ldr	r2, [r7, #12]
 801a9be:	4613      	mov	r3, r2
 801a9c0:	009b      	lsls	r3, r3, #2
 801a9c2:	4413      	add	r3, r2
 801a9c4:	00db      	lsls	r3, r3, #3
 801a9c6:	440b      	add	r3, r1
 801a9c8:	335d      	adds	r3, #93	; 0x5d
 801a9ca:	2208      	movs	r2, #8
 801a9cc:	701a      	strb	r2, [r3, #0]
}
 801a9ce:	e125      	b.n	801ac1c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 801a9d0:	68fb      	ldr	r3, [r7, #12]
 801a9d2:	015a      	lsls	r2, r3, #5
 801a9d4:	693b      	ldr	r3, [r7, #16]
 801a9d6:	4413      	add	r3, r2
 801a9d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801a9dc:	689b      	ldr	r3, [r3, #8]
 801a9de:	f003 0302 	and.w	r3, r3, #2
 801a9e2:	2b02      	cmp	r3, #2
 801a9e4:	f040 811a 	bne.w	801ac1c <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 801a9e8:	68fb      	ldr	r3, [r7, #12]
 801a9ea:	015a      	lsls	r2, r3, #5
 801a9ec:	693b      	ldr	r3, [r7, #16]
 801a9ee:	4413      	add	r3, r2
 801a9f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801a9f4:	68db      	ldr	r3, [r3, #12]
 801a9f6:	68fa      	ldr	r2, [r7, #12]
 801a9f8:	0151      	lsls	r1, r2, #5
 801a9fa:	693a      	ldr	r2, [r7, #16]
 801a9fc:	440a      	add	r2, r1
 801a9fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801aa02:	f023 0302 	bic.w	r3, r3, #2
 801aa06:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 801aa08:	6879      	ldr	r1, [r7, #4]
 801aa0a:	68fa      	ldr	r2, [r7, #12]
 801aa0c:	4613      	mov	r3, r2
 801aa0e:	009b      	lsls	r3, r3, #2
 801aa10:	4413      	add	r3, r2
 801aa12:	00db      	lsls	r3, r3, #3
 801aa14:	440b      	add	r3, r1
 801aa16:	335d      	adds	r3, #93	; 0x5d
 801aa18:	781b      	ldrb	r3, [r3, #0]
 801aa1a:	2b01      	cmp	r3, #1
 801aa1c:	d137      	bne.n	801aa8e <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 801aa1e:	6879      	ldr	r1, [r7, #4]
 801aa20:	68fa      	ldr	r2, [r7, #12]
 801aa22:	4613      	mov	r3, r2
 801aa24:	009b      	lsls	r3, r3, #2
 801aa26:	4413      	add	r3, r2
 801aa28:	00db      	lsls	r3, r3, #3
 801aa2a:	440b      	add	r3, r1
 801aa2c:	335c      	adds	r3, #92	; 0x5c
 801aa2e:	2201      	movs	r2, #1
 801aa30:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 801aa32:	6879      	ldr	r1, [r7, #4]
 801aa34:	68fa      	ldr	r2, [r7, #12]
 801aa36:	4613      	mov	r3, r2
 801aa38:	009b      	lsls	r3, r3, #2
 801aa3a:	4413      	add	r3, r2
 801aa3c:	00db      	lsls	r3, r3, #3
 801aa3e:	440b      	add	r3, r1
 801aa40:	333f      	adds	r3, #63	; 0x3f
 801aa42:	781b      	ldrb	r3, [r3, #0]
 801aa44:	2b02      	cmp	r3, #2
 801aa46:	d00b      	beq.n	801aa60 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 801aa48:	6879      	ldr	r1, [r7, #4]
 801aa4a:	68fa      	ldr	r2, [r7, #12]
 801aa4c:	4613      	mov	r3, r2
 801aa4e:	009b      	lsls	r3, r3, #2
 801aa50:	4413      	add	r3, r2
 801aa52:	00db      	lsls	r3, r3, #3
 801aa54:	440b      	add	r3, r1
 801aa56:	333f      	adds	r3, #63	; 0x3f
 801aa58:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 801aa5a:	2b03      	cmp	r3, #3
 801aa5c:	f040 80c5 	bne.w	801abea <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 801aa60:	6879      	ldr	r1, [r7, #4]
 801aa62:	68fa      	ldr	r2, [r7, #12]
 801aa64:	4613      	mov	r3, r2
 801aa66:	009b      	lsls	r3, r3, #2
 801aa68:	4413      	add	r3, r2
 801aa6a:	00db      	lsls	r3, r3, #3
 801aa6c:	440b      	add	r3, r1
 801aa6e:	3351      	adds	r3, #81	; 0x51
 801aa70:	781b      	ldrb	r3, [r3, #0]
 801aa72:	f083 0301 	eor.w	r3, r3, #1
 801aa76:	b2d8      	uxtb	r0, r3
 801aa78:	6879      	ldr	r1, [r7, #4]
 801aa7a:	68fa      	ldr	r2, [r7, #12]
 801aa7c:	4613      	mov	r3, r2
 801aa7e:	009b      	lsls	r3, r3, #2
 801aa80:	4413      	add	r3, r2
 801aa82:	00db      	lsls	r3, r3, #3
 801aa84:	440b      	add	r3, r1
 801aa86:	3351      	adds	r3, #81	; 0x51
 801aa88:	4602      	mov	r2, r0
 801aa8a:	701a      	strb	r2, [r3, #0]
 801aa8c:	e0ad      	b.n	801abea <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 801aa8e:	6879      	ldr	r1, [r7, #4]
 801aa90:	68fa      	ldr	r2, [r7, #12]
 801aa92:	4613      	mov	r3, r2
 801aa94:	009b      	lsls	r3, r3, #2
 801aa96:	4413      	add	r3, r2
 801aa98:	00db      	lsls	r3, r3, #3
 801aa9a:	440b      	add	r3, r1
 801aa9c:	335d      	adds	r3, #93	; 0x5d
 801aa9e:	781b      	ldrb	r3, [r3, #0]
 801aaa0:	2b03      	cmp	r3, #3
 801aaa2:	d10a      	bne.n	801aaba <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 801aaa4:	6879      	ldr	r1, [r7, #4]
 801aaa6:	68fa      	ldr	r2, [r7, #12]
 801aaa8:	4613      	mov	r3, r2
 801aaaa:	009b      	lsls	r3, r3, #2
 801aaac:	4413      	add	r3, r2
 801aaae:	00db      	lsls	r3, r3, #3
 801aab0:	440b      	add	r3, r1
 801aab2:	335c      	adds	r3, #92	; 0x5c
 801aab4:	2202      	movs	r2, #2
 801aab6:	701a      	strb	r2, [r3, #0]
 801aab8:	e097      	b.n	801abea <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 801aaba:	6879      	ldr	r1, [r7, #4]
 801aabc:	68fa      	ldr	r2, [r7, #12]
 801aabe:	4613      	mov	r3, r2
 801aac0:	009b      	lsls	r3, r3, #2
 801aac2:	4413      	add	r3, r2
 801aac4:	00db      	lsls	r3, r3, #3
 801aac6:	440b      	add	r3, r1
 801aac8:	335d      	adds	r3, #93	; 0x5d
 801aaca:	781b      	ldrb	r3, [r3, #0]
 801aacc:	2b04      	cmp	r3, #4
 801aace:	d10a      	bne.n	801aae6 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 801aad0:	6879      	ldr	r1, [r7, #4]
 801aad2:	68fa      	ldr	r2, [r7, #12]
 801aad4:	4613      	mov	r3, r2
 801aad6:	009b      	lsls	r3, r3, #2
 801aad8:	4413      	add	r3, r2
 801aada:	00db      	lsls	r3, r3, #3
 801aadc:	440b      	add	r3, r1
 801aade:	335c      	adds	r3, #92	; 0x5c
 801aae0:	2202      	movs	r2, #2
 801aae2:	701a      	strb	r2, [r3, #0]
 801aae4:	e081      	b.n	801abea <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 801aae6:	6879      	ldr	r1, [r7, #4]
 801aae8:	68fa      	ldr	r2, [r7, #12]
 801aaea:	4613      	mov	r3, r2
 801aaec:	009b      	lsls	r3, r3, #2
 801aaee:	4413      	add	r3, r2
 801aaf0:	00db      	lsls	r3, r3, #3
 801aaf2:	440b      	add	r3, r1
 801aaf4:	335d      	adds	r3, #93	; 0x5d
 801aaf6:	781b      	ldrb	r3, [r3, #0]
 801aaf8:	2b05      	cmp	r3, #5
 801aafa:	d10a      	bne.n	801ab12 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 801aafc:	6879      	ldr	r1, [r7, #4]
 801aafe:	68fa      	ldr	r2, [r7, #12]
 801ab00:	4613      	mov	r3, r2
 801ab02:	009b      	lsls	r3, r3, #2
 801ab04:	4413      	add	r3, r2
 801ab06:	00db      	lsls	r3, r3, #3
 801ab08:	440b      	add	r3, r1
 801ab0a:	335c      	adds	r3, #92	; 0x5c
 801ab0c:	2205      	movs	r2, #5
 801ab0e:	701a      	strb	r2, [r3, #0]
 801ab10:	e06b      	b.n	801abea <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 801ab12:	6879      	ldr	r1, [r7, #4]
 801ab14:	68fa      	ldr	r2, [r7, #12]
 801ab16:	4613      	mov	r3, r2
 801ab18:	009b      	lsls	r3, r3, #2
 801ab1a:	4413      	add	r3, r2
 801ab1c:	00db      	lsls	r3, r3, #3
 801ab1e:	440b      	add	r3, r1
 801ab20:	335d      	adds	r3, #93	; 0x5d
 801ab22:	781b      	ldrb	r3, [r3, #0]
 801ab24:	2b06      	cmp	r3, #6
 801ab26:	d00a      	beq.n	801ab3e <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 801ab28:	6879      	ldr	r1, [r7, #4]
 801ab2a:	68fa      	ldr	r2, [r7, #12]
 801ab2c:	4613      	mov	r3, r2
 801ab2e:	009b      	lsls	r3, r3, #2
 801ab30:	4413      	add	r3, r2
 801ab32:	00db      	lsls	r3, r3, #3
 801ab34:	440b      	add	r3, r1
 801ab36:	335d      	adds	r3, #93	; 0x5d
 801ab38:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 801ab3a:	2b08      	cmp	r3, #8
 801ab3c:	d155      	bne.n	801abea <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 801ab3e:	6879      	ldr	r1, [r7, #4]
 801ab40:	68fa      	ldr	r2, [r7, #12]
 801ab42:	4613      	mov	r3, r2
 801ab44:	009b      	lsls	r3, r3, #2
 801ab46:	4413      	add	r3, r2
 801ab48:	00db      	lsls	r3, r3, #3
 801ab4a:	440b      	add	r3, r1
 801ab4c:	3358      	adds	r3, #88	; 0x58
 801ab4e:	681b      	ldr	r3, [r3, #0]
 801ab50:	1c59      	adds	r1, r3, #1
 801ab52:	6878      	ldr	r0, [r7, #4]
 801ab54:	68fa      	ldr	r2, [r7, #12]
 801ab56:	4613      	mov	r3, r2
 801ab58:	009b      	lsls	r3, r3, #2
 801ab5a:	4413      	add	r3, r2
 801ab5c:	00db      	lsls	r3, r3, #3
 801ab5e:	4403      	add	r3, r0
 801ab60:	3358      	adds	r3, #88	; 0x58
 801ab62:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 801ab64:	6879      	ldr	r1, [r7, #4]
 801ab66:	68fa      	ldr	r2, [r7, #12]
 801ab68:	4613      	mov	r3, r2
 801ab6a:	009b      	lsls	r3, r3, #2
 801ab6c:	4413      	add	r3, r2
 801ab6e:	00db      	lsls	r3, r3, #3
 801ab70:	440b      	add	r3, r1
 801ab72:	3358      	adds	r3, #88	; 0x58
 801ab74:	681b      	ldr	r3, [r3, #0]
 801ab76:	2b03      	cmp	r3, #3
 801ab78:	d914      	bls.n	801aba4 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 801ab7a:	6879      	ldr	r1, [r7, #4]
 801ab7c:	68fa      	ldr	r2, [r7, #12]
 801ab7e:	4613      	mov	r3, r2
 801ab80:	009b      	lsls	r3, r3, #2
 801ab82:	4413      	add	r3, r2
 801ab84:	00db      	lsls	r3, r3, #3
 801ab86:	440b      	add	r3, r1
 801ab88:	3358      	adds	r3, #88	; 0x58
 801ab8a:	2200      	movs	r2, #0
 801ab8c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 801ab8e:	6879      	ldr	r1, [r7, #4]
 801ab90:	68fa      	ldr	r2, [r7, #12]
 801ab92:	4613      	mov	r3, r2
 801ab94:	009b      	lsls	r3, r3, #2
 801ab96:	4413      	add	r3, r2
 801ab98:	00db      	lsls	r3, r3, #3
 801ab9a:	440b      	add	r3, r1
 801ab9c:	335c      	adds	r3, #92	; 0x5c
 801ab9e:	2204      	movs	r2, #4
 801aba0:	701a      	strb	r2, [r3, #0]
 801aba2:	e009      	b.n	801abb8 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 801aba4:	6879      	ldr	r1, [r7, #4]
 801aba6:	68fa      	ldr	r2, [r7, #12]
 801aba8:	4613      	mov	r3, r2
 801abaa:	009b      	lsls	r3, r3, #2
 801abac:	4413      	add	r3, r2
 801abae:	00db      	lsls	r3, r3, #3
 801abb0:	440b      	add	r3, r1
 801abb2:	335c      	adds	r3, #92	; 0x5c
 801abb4:	2202      	movs	r2, #2
 801abb6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 801abb8:	68fb      	ldr	r3, [r7, #12]
 801abba:	015a      	lsls	r2, r3, #5
 801abbc:	693b      	ldr	r3, [r7, #16]
 801abbe:	4413      	add	r3, r2
 801abc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801abc4:	681b      	ldr	r3, [r3, #0]
 801abc6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 801abc8:	68bb      	ldr	r3, [r7, #8]
 801abca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801abce:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 801abd0:	68bb      	ldr	r3, [r7, #8]
 801abd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801abd6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 801abd8:	68fb      	ldr	r3, [r7, #12]
 801abda:	015a      	lsls	r2, r3, #5
 801abdc:	693b      	ldr	r3, [r7, #16]
 801abde:	4413      	add	r3, r2
 801abe0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801abe4:	461a      	mov	r2, r3
 801abe6:	68bb      	ldr	r3, [r7, #8]
 801abe8:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 801abea:	68fb      	ldr	r3, [r7, #12]
 801abec:	015a      	lsls	r2, r3, #5
 801abee:	693b      	ldr	r3, [r7, #16]
 801abf0:	4413      	add	r3, r2
 801abf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801abf6:	461a      	mov	r2, r3
 801abf8:	2302      	movs	r3, #2
 801abfa:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 801abfc:	68fb      	ldr	r3, [r7, #12]
 801abfe:	b2d8      	uxtb	r0, r3
 801ac00:	6879      	ldr	r1, [r7, #4]
 801ac02:	68fa      	ldr	r2, [r7, #12]
 801ac04:	4613      	mov	r3, r2
 801ac06:	009b      	lsls	r3, r3, #2
 801ac08:	4413      	add	r3, r2
 801ac0a:	00db      	lsls	r3, r3, #3
 801ac0c:	440b      	add	r3, r1
 801ac0e:	335c      	adds	r3, #92	; 0x5c
 801ac10:	781b      	ldrb	r3, [r3, #0]
 801ac12:	461a      	mov	r2, r3
 801ac14:	4601      	mov	r1, r0
 801ac16:	6878      	ldr	r0, [r7, #4]
 801ac18:	f004 fc74 	bl	801f504 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 801ac1c:	bf00      	nop
 801ac1e:	3718      	adds	r7, #24
 801ac20:	46bd      	mov	sp, r7
 801ac22:	bd80      	pop	{r7, pc}

0801ac24 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 801ac24:	b580      	push	{r7, lr}
 801ac26:	b08a      	sub	sp, #40	; 0x28
 801ac28:	af00      	add	r7, sp, #0
 801ac2a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 801ac2c:	687b      	ldr	r3, [r7, #4]
 801ac2e:	681b      	ldr	r3, [r3, #0]
 801ac30:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ac32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac34:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 801ac36:	687b      	ldr	r3, [r7, #4]
 801ac38:	681b      	ldr	r3, [r3, #0]
 801ac3a:	6a1b      	ldr	r3, [r3, #32]
 801ac3c:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 801ac3e:	69fb      	ldr	r3, [r7, #28]
 801ac40:	f003 030f 	and.w	r3, r3, #15
 801ac44:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 801ac46:	69fb      	ldr	r3, [r7, #28]
 801ac48:	0c5b      	lsrs	r3, r3, #17
 801ac4a:	f003 030f 	and.w	r3, r3, #15
 801ac4e:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 801ac50:	69fb      	ldr	r3, [r7, #28]
 801ac52:	091b      	lsrs	r3, r3, #4
 801ac54:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801ac58:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 801ac5a:	697b      	ldr	r3, [r7, #20]
 801ac5c:	2b02      	cmp	r3, #2
 801ac5e:	d003      	beq.n	801ac68 <HCD_RXQLVL_IRQHandler+0x44>
 801ac60:	2b05      	cmp	r3, #5
 801ac62:	f000 8082 	beq.w	801ad6a <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 801ac66:	e083      	b.n	801ad70 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 801ac68:	693b      	ldr	r3, [r7, #16]
 801ac6a:	2b00      	cmp	r3, #0
 801ac6c:	d07f      	beq.n	801ad6e <HCD_RXQLVL_IRQHandler+0x14a>
 801ac6e:	6879      	ldr	r1, [r7, #4]
 801ac70:	69ba      	ldr	r2, [r7, #24]
 801ac72:	4613      	mov	r3, r2
 801ac74:	009b      	lsls	r3, r3, #2
 801ac76:	4413      	add	r3, r2
 801ac78:	00db      	lsls	r3, r3, #3
 801ac7a:	440b      	add	r3, r1
 801ac7c:	3344      	adds	r3, #68	; 0x44
 801ac7e:	681b      	ldr	r3, [r3, #0]
 801ac80:	2b00      	cmp	r3, #0
 801ac82:	d074      	beq.n	801ad6e <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 801ac84:	687b      	ldr	r3, [r7, #4]
 801ac86:	6818      	ldr	r0, [r3, #0]
 801ac88:	6879      	ldr	r1, [r7, #4]
 801ac8a:	69ba      	ldr	r2, [r7, #24]
 801ac8c:	4613      	mov	r3, r2
 801ac8e:	009b      	lsls	r3, r3, #2
 801ac90:	4413      	add	r3, r2
 801ac92:	00db      	lsls	r3, r3, #3
 801ac94:	440b      	add	r3, r1
 801ac96:	3344      	adds	r3, #68	; 0x44
 801ac98:	681b      	ldr	r3, [r3, #0]
 801ac9a:	693a      	ldr	r2, [r7, #16]
 801ac9c:	b292      	uxth	r2, r2
 801ac9e:	4619      	mov	r1, r3
 801aca0:	f002 fd0d 	bl	801d6be <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 801aca4:	6879      	ldr	r1, [r7, #4]
 801aca6:	69ba      	ldr	r2, [r7, #24]
 801aca8:	4613      	mov	r3, r2
 801acaa:	009b      	lsls	r3, r3, #2
 801acac:	4413      	add	r3, r2
 801acae:	00db      	lsls	r3, r3, #3
 801acb0:	440b      	add	r3, r1
 801acb2:	3344      	adds	r3, #68	; 0x44
 801acb4:	681a      	ldr	r2, [r3, #0]
 801acb6:	693b      	ldr	r3, [r7, #16]
 801acb8:	18d1      	adds	r1, r2, r3
 801acba:	6878      	ldr	r0, [r7, #4]
 801acbc:	69ba      	ldr	r2, [r7, #24]
 801acbe:	4613      	mov	r3, r2
 801acc0:	009b      	lsls	r3, r3, #2
 801acc2:	4413      	add	r3, r2
 801acc4:	00db      	lsls	r3, r3, #3
 801acc6:	4403      	add	r3, r0
 801acc8:	3344      	adds	r3, #68	; 0x44
 801acca:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 801accc:	6879      	ldr	r1, [r7, #4]
 801acce:	69ba      	ldr	r2, [r7, #24]
 801acd0:	4613      	mov	r3, r2
 801acd2:	009b      	lsls	r3, r3, #2
 801acd4:	4413      	add	r3, r2
 801acd6:	00db      	lsls	r3, r3, #3
 801acd8:	440b      	add	r3, r1
 801acda:	334c      	adds	r3, #76	; 0x4c
 801acdc:	681a      	ldr	r2, [r3, #0]
 801acde:	693b      	ldr	r3, [r7, #16]
 801ace0:	18d1      	adds	r1, r2, r3
 801ace2:	6878      	ldr	r0, [r7, #4]
 801ace4:	69ba      	ldr	r2, [r7, #24]
 801ace6:	4613      	mov	r3, r2
 801ace8:	009b      	lsls	r3, r3, #2
 801acea:	4413      	add	r3, r2
 801acec:	00db      	lsls	r3, r3, #3
 801acee:	4403      	add	r3, r0
 801acf0:	334c      	adds	r3, #76	; 0x4c
 801acf2:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 801acf4:	69bb      	ldr	r3, [r7, #24]
 801acf6:	015a      	lsls	r2, r3, #5
 801acf8:	6a3b      	ldr	r3, [r7, #32]
 801acfa:	4413      	add	r3, r2
 801acfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801ad00:	691a      	ldr	r2, [r3, #16]
 801ad02:	4b1d      	ldr	r3, [pc, #116]	; (801ad78 <HCD_RXQLVL_IRQHandler+0x154>)
 801ad04:	4013      	ands	r3, r2
 801ad06:	2b00      	cmp	r3, #0
 801ad08:	d031      	beq.n	801ad6e <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 801ad0a:	69bb      	ldr	r3, [r7, #24]
 801ad0c:	015a      	lsls	r2, r3, #5
 801ad0e:	6a3b      	ldr	r3, [r7, #32]
 801ad10:	4413      	add	r3, r2
 801ad12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801ad16:	681b      	ldr	r3, [r3, #0]
 801ad18:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 801ad1a:	68fb      	ldr	r3, [r7, #12]
 801ad1c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801ad20:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 801ad22:	68fb      	ldr	r3, [r7, #12]
 801ad24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801ad28:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 801ad2a:	69bb      	ldr	r3, [r7, #24]
 801ad2c:	015a      	lsls	r2, r3, #5
 801ad2e:	6a3b      	ldr	r3, [r7, #32]
 801ad30:	4413      	add	r3, r2
 801ad32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801ad36:	461a      	mov	r2, r3
 801ad38:	68fb      	ldr	r3, [r7, #12]
 801ad3a:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 801ad3c:	6879      	ldr	r1, [r7, #4]
 801ad3e:	69ba      	ldr	r2, [r7, #24]
 801ad40:	4613      	mov	r3, r2
 801ad42:	009b      	lsls	r3, r3, #2
 801ad44:	4413      	add	r3, r2
 801ad46:	00db      	lsls	r3, r3, #3
 801ad48:	440b      	add	r3, r1
 801ad4a:	3350      	adds	r3, #80	; 0x50
 801ad4c:	781b      	ldrb	r3, [r3, #0]
 801ad4e:	f083 0301 	eor.w	r3, r3, #1
 801ad52:	b2d8      	uxtb	r0, r3
 801ad54:	6879      	ldr	r1, [r7, #4]
 801ad56:	69ba      	ldr	r2, [r7, #24]
 801ad58:	4613      	mov	r3, r2
 801ad5a:	009b      	lsls	r3, r3, #2
 801ad5c:	4413      	add	r3, r2
 801ad5e:	00db      	lsls	r3, r3, #3
 801ad60:	440b      	add	r3, r1
 801ad62:	3350      	adds	r3, #80	; 0x50
 801ad64:	4602      	mov	r2, r0
 801ad66:	701a      	strb	r2, [r3, #0]
      break;
 801ad68:	e001      	b.n	801ad6e <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 801ad6a:	bf00      	nop
 801ad6c:	e000      	b.n	801ad70 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 801ad6e:	bf00      	nop
  }
}
 801ad70:	bf00      	nop
 801ad72:	3728      	adds	r7, #40	; 0x28
 801ad74:	46bd      	mov	sp, r7
 801ad76:	bd80      	pop	{r7, pc}
 801ad78:	1ff80000 	.word	0x1ff80000

0801ad7c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 801ad7c:	b580      	push	{r7, lr}
 801ad7e:	b086      	sub	sp, #24
 801ad80:	af00      	add	r7, sp, #0
 801ad82:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 801ad84:	687b      	ldr	r3, [r7, #4]
 801ad86:	681b      	ldr	r3, [r3, #0]
 801ad88:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ad8a:	697b      	ldr	r3, [r7, #20]
 801ad8c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 801ad8e:	693b      	ldr	r3, [r7, #16]
 801ad90:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 801ad94:	681b      	ldr	r3, [r3, #0]
 801ad96:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 801ad98:	693b      	ldr	r3, [r7, #16]
 801ad9a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 801ad9e:	681b      	ldr	r3, [r3, #0]
 801ada0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 801ada2:	68bb      	ldr	r3, [r7, #8]
 801ada4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 801ada8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 801adaa:	68fb      	ldr	r3, [r7, #12]
 801adac:	f003 0302 	and.w	r3, r3, #2
 801adb0:	2b02      	cmp	r3, #2
 801adb2:	d10b      	bne.n	801adcc <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 801adb4:	68fb      	ldr	r3, [r7, #12]
 801adb6:	f003 0301 	and.w	r3, r3, #1
 801adba:	2b01      	cmp	r3, #1
 801adbc:	d102      	bne.n	801adc4 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 801adbe:	6878      	ldr	r0, [r7, #4]
 801adc0:	f004 fb84 	bl	801f4cc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 801adc4:	68bb      	ldr	r3, [r7, #8]
 801adc6:	f043 0302 	orr.w	r3, r3, #2
 801adca:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 801adcc:	68fb      	ldr	r3, [r7, #12]
 801adce:	f003 0308 	and.w	r3, r3, #8
 801add2:	2b08      	cmp	r3, #8
 801add4:	d132      	bne.n	801ae3c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 801add6:	68bb      	ldr	r3, [r7, #8]
 801add8:	f043 0308 	orr.w	r3, r3, #8
 801addc:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 801adde:	68fb      	ldr	r3, [r7, #12]
 801ade0:	f003 0304 	and.w	r3, r3, #4
 801ade4:	2b04      	cmp	r3, #4
 801ade6:	d126      	bne.n	801ae36 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 801ade8:	687b      	ldr	r3, [r7, #4]
 801adea:	699b      	ldr	r3, [r3, #24]
 801adec:	2b02      	cmp	r3, #2
 801adee:	d113      	bne.n	801ae18 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 801adf0:	68fb      	ldr	r3, [r7, #12]
 801adf2:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 801adf6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801adfa:	d106      	bne.n	801ae0a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 801adfc:	687b      	ldr	r3, [r7, #4]
 801adfe:	681b      	ldr	r3, [r3, #0]
 801ae00:	2102      	movs	r1, #2
 801ae02:	4618      	mov	r0, r3
 801ae04:	f002 fd96 	bl	801d934 <USB_InitFSLSPClkSel>
 801ae08:	e011      	b.n	801ae2e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 801ae0a:	687b      	ldr	r3, [r7, #4]
 801ae0c:	681b      	ldr	r3, [r3, #0]
 801ae0e:	2101      	movs	r1, #1
 801ae10:	4618      	mov	r0, r3
 801ae12:	f002 fd8f 	bl	801d934 <USB_InitFSLSPClkSel>
 801ae16:	e00a      	b.n	801ae2e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 801ae18:	687b      	ldr	r3, [r7, #4]
 801ae1a:	68db      	ldr	r3, [r3, #12]
 801ae1c:	2b01      	cmp	r3, #1
 801ae1e:	d106      	bne.n	801ae2e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 801ae20:	693b      	ldr	r3, [r7, #16]
 801ae22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801ae26:	461a      	mov	r2, r3
 801ae28:	f64e 2360 	movw	r3, #60000	; 0xea60
 801ae2c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 801ae2e:	6878      	ldr	r0, [r7, #4]
 801ae30:	f004 fb76 	bl	801f520 <HAL_HCD_PortEnabled_Callback>
 801ae34:	e002      	b.n	801ae3c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 801ae36:	6878      	ldr	r0, [r7, #4]
 801ae38:	f004 fb80 	bl	801f53c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 801ae3c:	68fb      	ldr	r3, [r7, #12]
 801ae3e:	f003 0320 	and.w	r3, r3, #32
 801ae42:	2b20      	cmp	r3, #32
 801ae44:	d103      	bne.n	801ae4e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 801ae46:	68bb      	ldr	r3, [r7, #8]
 801ae48:	f043 0320 	orr.w	r3, r3, #32
 801ae4c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 801ae4e:	693b      	ldr	r3, [r7, #16]
 801ae50:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 801ae54:	461a      	mov	r2, r3
 801ae56:	68bb      	ldr	r3, [r7, #8]
 801ae58:	6013      	str	r3, [r2, #0]
}
 801ae5a:	bf00      	nop
 801ae5c:	3718      	adds	r7, #24
 801ae5e:	46bd      	mov	sp, r7
 801ae60:	bd80      	pop	{r7, pc}
	...

0801ae64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 801ae64:	b580      	push	{r7, lr}
 801ae66:	b084      	sub	sp, #16
 801ae68:	af00      	add	r7, sp, #0
 801ae6a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 801ae6c:	687b      	ldr	r3, [r7, #4]
 801ae6e:	2b00      	cmp	r3, #0
 801ae70:	d101      	bne.n	801ae76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 801ae72:	2301      	movs	r3, #1
 801ae74:	e11f      	b.n	801b0b6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 801ae76:	687b      	ldr	r3, [r7, #4]
 801ae78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ae7c:	b2db      	uxtb	r3, r3
 801ae7e:	2b00      	cmp	r3, #0
 801ae80:	d106      	bne.n	801ae90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 801ae82:	687b      	ldr	r3, [r7, #4]
 801ae84:	2200      	movs	r2, #0
 801ae86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 801ae8a:	6878      	ldr	r0, [r7, #4]
 801ae8c:	f7fd fb12 	bl	80184b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 801ae90:	687b      	ldr	r3, [r7, #4]
 801ae92:	2224      	movs	r2, #36	; 0x24
 801ae94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 801ae98:	687b      	ldr	r3, [r7, #4]
 801ae9a:	681b      	ldr	r3, [r3, #0]
 801ae9c:	681a      	ldr	r2, [r3, #0]
 801ae9e:	687b      	ldr	r3, [r7, #4]
 801aea0:	681b      	ldr	r3, [r3, #0]
 801aea2:	f022 0201 	bic.w	r2, r2, #1
 801aea6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 801aea8:	687b      	ldr	r3, [r7, #4]
 801aeaa:	681b      	ldr	r3, [r3, #0]
 801aeac:	681a      	ldr	r2, [r3, #0]
 801aeae:	687b      	ldr	r3, [r7, #4]
 801aeb0:	681b      	ldr	r3, [r3, #0]
 801aeb2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801aeb6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 801aeb8:	687b      	ldr	r3, [r7, #4]
 801aeba:	681b      	ldr	r3, [r3, #0]
 801aebc:	681a      	ldr	r2, [r3, #0]
 801aebe:	687b      	ldr	r3, [r7, #4]
 801aec0:	681b      	ldr	r3, [r3, #0]
 801aec2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801aec6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 801aec8:	f001 f9de 	bl	801c288 <HAL_RCC_GetPCLK1Freq>
 801aecc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 801aece:	687b      	ldr	r3, [r7, #4]
 801aed0:	685b      	ldr	r3, [r3, #4]
 801aed2:	4a7b      	ldr	r2, [pc, #492]	; (801b0c0 <HAL_I2C_Init+0x25c>)
 801aed4:	4293      	cmp	r3, r2
 801aed6:	d807      	bhi.n	801aee8 <HAL_I2C_Init+0x84>
 801aed8:	68fb      	ldr	r3, [r7, #12]
 801aeda:	4a7a      	ldr	r2, [pc, #488]	; (801b0c4 <HAL_I2C_Init+0x260>)
 801aedc:	4293      	cmp	r3, r2
 801aede:	bf94      	ite	ls
 801aee0:	2301      	movls	r3, #1
 801aee2:	2300      	movhi	r3, #0
 801aee4:	b2db      	uxtb	r3, r3
 801aee6:	e006      	b.n	801aef6 <HAL_I2C_Init+0x92>
 801aee8:	68fb      	ldr	r3, [r7, #12]
 801aeea:	4a77      	ldr	r2, [pc, #476]	; (801b0c8 <HAL_I2C_Init+0x264>)
 801aeec:	4293      	cmp	r3, r2
 801aeee:	bf94      	ite	ls
 801aef0:	2301      	movls	r3, #1
 801aef2:	2300      	movhi	r3, #0
 801aef4:	b2db      	uxtb	r3, r3
 801aef6:	2b00      	cmp	r3, #0
 801aef8:	d001      	beq.n	801aefe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 801aefa:	2301      	movs	r3, #1
 801aefc:	e0db      	b.n	801b0b6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 801aefe:	68fb      	ldr	r3, [r7, #12]
 801af00:	4a72      	ldr	r2, [pc, #456]	; (801b0cc <HAL_I2C_Init+0x268>)
 801af02:	fba2 2303 	umull	r2, r3, r2, r3
 801af06:	0c9b      	lsrs	r3, r3, #18
 801af08:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 801af0a:	687b      	ldr	r3, [r7, #4]
 801af0c:	681b      	ldr	r3, [r3, #0]
 801af0e:	685b      	ldr	r3, [r3, #4]
 801af10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 801af14:	687b      	ldr	r3, [r7, #4]
 801af16:	681b      	ldr	r3, [r3, #0]
 801af18:	68ba      	ldr	r2, [r7, #8]
 801af1a:	430a      	orrs	r2, r1
 801af1c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 801af1e:	687b      	ldr	r3, [r7, #4]
 801af20:	681b      	ldr	r3, [r3, #0]
 801af22:	6a1b      	ldr	r3, [r3, #32]
 801af24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 801af28:	687b      	ldr	r3, [r7, #4]
 801af2a:	685b      	ldr	r3, [r3, #4]
 801af2c:	4a64      	ldr	r2, [pc, #400]	; (801b0c0 <HAL_I2C_Init+0x25c>)
 801af2e:	4293      	cmp	r3, r2
 801af30:	d802      	bhi.n	801af38 <HAL_I2C_Init+0xd4>
 801af32:	68bb      	ldr	r3, [r7, #8]
 801af34:	3301      	adds	r3, #1
 801af36:	e009      	b.n	801af4c <HAL_I2C_Init+0xe8>
 801af38:	68bb      	ldr	r3, [r7, #8]
 801af3a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801af3e:	fb02 f303 	mul.w	r3, r2, r3
 801af42:	4a63      	ldr	r2, [pc, #396]	; (801b0d0 <HAL_I2C_Init+0x26c>)
 801af44:	fba2 2303 	umull	r2, r3, r2, r3
 801af48:	099b      	lsrs	r3, r3, #6
 801af4a:	3301      	adds	r3, #1
 801af4c:	687a      	ldr	r2, [r7, #4]
 801af4e:	6812      	ldr	r2, [r2, #0]
 801af50:	430b      	orrs	r3, r1
 801af52:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 801af54:	687b      	ldr	r3, [r7, #4]
 801af56:	681b      	ldr	r3, [r3, #0]
 801af58:	69db      	ldr	r3, [r3, #28]
 801af5a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 801af5e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 801af62:	687b      	ldr	r3, [r7, #4]
 801af64:	685b      	ldr	r3, [r3, #4]
 801af66:	4956      	ldr	r1, [pc, #344]	; (801b0c0 <HAL_I2C_Init+0x25c>)
 801af68:	428b      	cmp	r3, r1
 801af6a:	d80d      	bhi.n	801af88 <HAL_I2C_Init+0x124>
 801af6c:	68fb      	ldr	r3, [r7, #12]
 801af6e:	1e59      	subs	r1, r3, #1
 801af70:	687b      	ldr	r3, [r7, #4]
 801af72:	685b      	ldr	r3, [r3, #4]
 801af74:	005b      	lsls	r3, r3, #1
 801af76:	fbb1 f3f3 	udiv	r3, r1, r3
 801af7a:	3301      	adds	r3, #1
 801af7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801af80:	2b04      	cmp	r3, #4
 801af82:	bf38      	it	cc
 801af84:	2304      	movcc	r3, #4
 801af86:	e04f      	b.n	801b028 <HAL_I2C_Init+0x1c4>
 801af88:	687b      	ldr	r3, [r7, #4]
 801af8a:	689b      	ldr	r3, [r3, #8]
 801af8c:	2b00      	cmp	r3, #0
 801af8e:	d111      	bne.n	801afb4 <HAL_I2C_Init+0x150>
 801af90:	68fb      	ldr	r3, [r7, #12]
 801af92:	1e58      	subs	r0, r3, #1
 801af94:	687b      	ldr	r3, [r7, #4]
 801af96:	6859      	ldr	r1, [r3, #4]
 801af98:	460b      	mov	r3, r1
 801af9a:	005b      	lsls	r3, r3, #1
 801af9c:	440b      	add	r3, r1
 801af9e:	fbb0 f3f3 	udiv	r3, r0, r3
 801afa2:	3301      	adds	r3, #1
 801afa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801afa8:	2b00      	cmp	r3, #0
 801afaa:	bf0c      	ite	eq
 801afac:	2301      	moveq	r3, #1
 801afae:	2300      	movne	r3, #0
 801afb0:	b2db      	uxtb	r3, r3
 801afb2:	e012      	b.n	801afda <HAL_I2C_Init+0x176>
 801afb4:	68fb      	ldr	r3, [r7, #12]
 801afb6:	1e58      	subs	r0, r3, #1
 801afb8:	687b      	ldr	r3, [r7, #4]
 801afba:	6859      	ldr	r1, [r3, #4]
 801afbc:	460b      	mov	r3, r1
 801afbe:	009b      	lsls	r3, r3, #2
 801afc0:	440b      	add	r3, r1
 801afc2:	0099      	lsls	r1, r3, #2
 801afc4:	440b      	add	r3, r1
 801afc6:	fbb0 f3f3 	udiv	r3, r0, r3
 801afca:	3301      	adds	r3, #1
 801afcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801afd0:	2b00      	cmp	r3, #0
 801afd2:	bf0c      	ite	eq
 801afd4:	2301      	moveq	r3, #1
 801afd6:	2300      	movne	r3, #0
 801afd8:	b2db      	uxtb	r3, r3
 801afda:	2b00      	cmp	r3, #0
 801afdc:	d001      	beq.n	801afe2 <HAL_I2C_Init+0x17e>
 801afde:	2301      	movs	r3, #1
 801afe0:	e022      	b.n	801b028 <HAL_I2C_Init+0x1c4>
 801afe2:	687b      	ldr	r3, [r7, #4]
 801afe4:	689b      	ldr	r3, [r3, #8]
 801afe6:	2b00      	cmp	r3, #0
 801afe8:	d10e      	bne.n	801b008 <HAL_I2C_Init+0x1a4>
 801afea:	68fb      	ldr	r3, [r7, #12]
 801afec:	1e58      	subs	r0, r3, #1
 801afee:	687b      	ldr	r3, [r7, #4]
 801aff0:	6859      	ldr	r1, [r3, #4]
 801aff2:	460b      	mov	r3, r1
 801aff4:	005b      	lsls	r3, r3, #1
 801aff6:	440b      	add	r3, r1
 801aff8:	fbb0 f3f3 	udiv	r3, r0, r3
 801affc:	3301      	adds	r3, #1
 801affe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801b002:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801b006:	e00f      	b.n	801b028 <HAL_I2C_Init+0x1c4>
 801b008:	68fb      	ldr	r3, [r7, #12]
 801b00a:	1e58      	subs	r0, r3, #1
 801b00c:	687b      	ldr	r3, [r7, #4]
 801b00e:	6859      	ldr	r1, [r3, #4]
 801b010:	460b      	mov	r3, r1
 801b012:	009b      	lsls	r3, r3, #2
 801b014:	440b      	add	r3, r1
 801b016:	0099      	lsls	r1, r3, #2
 801b018:	440b      	add	r3, r1
 801b01a:	fbb0 f3f3 	udiv	r3, r0, r3
 801b01e:	3301      	adds	r3, #1
 801b020:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801b024:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801b028:	6879      	ldr	r1, [r7, #4]
 801b02a:	6809      	ldr	r1, [r1, #0]
 801b02c:	4313      	orrs	r3, r2
 801b02e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 801b030:	687b      	ldr	r3, [r7, #4]
 801b032:	681b      	ldr	r3, [r3, #0]
 801b034:	681b      	ldr	r3, [r3, #0]
 801b036:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 801b03a:	687b      	ldr	r3, [r7, #4]
 801b03c:	69da      	ldr	r2, [r3, #28]
 801b03e:	687b      	ldr	r3, [r7, #4]
 801b040:	6a1b      	ldr	r3, [r3, #32]
 801b042:	431a      	orrs	r2, r3
 801b044:	687b      	ldr	r3, [r7, #4]
 801b046:	681b      	ldr	r3, [r3, #0]
 801b048:	430a      	orrs	r2, r1
 801b04a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 801b04c:	687b      	ldr	r3, [r7, #4]
 801b04e:	681b      	ldr	r3, [r3, #0]
 801b050:	689b      	ldr	r3, [r3, #8]
 801b052:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 801b056:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 801b05a:	687a      	ldr	r2, [r7, #4]
 801b05c:	6911      	ldr	r1, [r2, #16]
 801b05e:	687a      	ldr	r2, [r7, #4]
 801b060:	68d2      	ldr	r2, [r2, #12]
 801b062:	4311      	orrs	r1, r2
 801b064:	687a      	ldr	r2, [r7, #4]
 801b066:	6812      	ldr	r2, [r2, #0]
 801b068:	430b      	orrs	r3, r1
 801b06a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 801b06c:	687b      	ldr	r3, [r7, #4]
 801b06e:	681b      	ldr	r3, [r3, #0]
 801b070:	68db      	ldr	r3, [r3, #12]
 801b072:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 801b076:	687b      	ldr	r3, [r7, #4]
 801b078:	695a      	ldr	r2, [r3, #20]
 801b07a:	687b      	ldr	r3, [r7, #4]
 801b07c:	699b      	ldr	r3, [r3, #24]
 801b07e:	431a      	orrs	r2, r3
 801b080:	687b      	ldr	r3, [r7, #4]
 801b082:	681b      	ldr	r3, [r3, #0]
 801b084:	430a      	orrs	r2, r1
 801b086:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 801b088:	687b      	ldr	r3, [r7, #4]
 801b08a:	681b      	ldr	r3, [r3, #0]
 801b08c:	681a      	ldr	r2, [r3, #0]
 801b08e:	687b      	ldr	r3, [r7, #4]
 801b090:	681b      	ldr	r3, [r3, #0]
 801b092:	f042 0201 	orr.w	r2, r2, #1
 801b096:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801b098:	687b      	ldr	r3, [r7, #4]
 801b09a:	2200      	movs	r2, #0
 801b09c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 801b09e:	687b      	ldr	r3, [r7, #4]
 801b0a0:	2220      	movs	r2, #32
 801b0a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 801b0a6:	687b      	ldr	r3, [r7, #4]
 801b0a8:	2200      	movs	r2, #0
 801b0aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801b0ac:	687b      	ldr	r3, [r7, #4]
 801b0ae:	2200      	movs	r2, #0
 801b0b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 801b0b4:	2300      	movs	r3, #0
}
 801b0b6:	4618      	mov	r0, r3
 801b0b8:	3710      	adds	r7, #16
 801b0ba:	46bd      	mov	sp, r7
 801b0bc:	bd80      	pop	{r7, pc}
 801b0be:	bf00      	nop
 801b0c0:	000186a0 	.word	0x000186a0
 801b0c4:	001e847f 	.word	0x001e847f
 801b0c8:	003d08ff 	.word	0x003d08ff
 801b0cc:	431bde83 	.word	0x431bde83
 801b0d0:	10624dd3 	.word	0x10624dd3

0801b0d4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 801b0d4:	b580      	push	{r7, lr}
 801b0d6:	b088      	sub	sp, #32
 801b0d8:	af00      	add	r7, sp, #0
 801b0da:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 801b0dc:	687b      	ldr	r3, [r7, #4]
 801b0de:	2b00      	cmp	r3, #0
 801b0e0:	d101      	bne.n	801b0e6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 801b0e2:	2301      	movs	r3, #1
 801b0e4:	e128      	b.n	801b338 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 801b0e6:	687b      	ldr	r3, [r7, #4]
 801b0e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801b0ec:	b2db      	uxtb	r3, r3
 801b0ee:	2b00      	cmp	r3, #0
 801b0f0:	d109      	bne.n	801b106 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 801b0f2:	687b      	ldr	r3, [r7, #4]
 801b0f4:	2200      	movs	r2, #0
 801b0f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 801b0fa:	687b      	ldr	r3, [r7, #4]
 801b0fc:	4a90      	ldr	r2, [pc, #576]	; (801b340 <HAL_I2S_Init+0x26c>)
 801b0fe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 801b100:	6878      	ldr	r0, [r7, #4]
 801b102:	f7fd fa7d 	bl	8018600 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 801b106:	687b      	ldr	r3, [r7, #4]
 801b108:	2202      	movs	r2, #2
 801b10a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 801b10e:	687b      	ldr	r3, [r7, #4]
 801b110:	681b      	ldr	r3, [r3, #0]
 801b112:	69db      	ldr	r3, [r3, #28]
 801b114:	687a      	ldr	r2, [r7, #4]
 801b116:	6812      	ldr	r2, [r2, #0]
 801b118:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 801b11c:	f023 030f 	bic.w	r3, r3, #15
 801b120:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 801b122:	687b      	ldr	r3, [r7, #4]
 801b124:	681b      	ldr	r3, [r3, #0]
 801b126:	2202      	movs	r2, #2
 801b128:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 801b12a:	687b      	ldr	r3, [r7, #4]
 801b12c:	695b      	ldr	r3, [r3, #20]
 801b12e:	2b02      	cmp	r3, #2
 801b130:	d060      	beq.n	801b1f4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 801b132:	687b      	ldr	r3, [r7, #4]
 801b134:	68db      	ldr	r3, [r3, #12]
 801b136:	2b00      	cmp	r3, #0
 801b138:	d102      	bne.n	801b140 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 801b13a:	2310      	movs	r3, #16
 801b13c:	617b      	str	r3, [r7, #20]
 801b13e:	e001      	b.n	801b144 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 801b140:	2320      	movs	r3, #32
 801b142:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 801b144:	687b      	ldr	r3, [r7, #4]
 801b146:	689b      	ldr	r3, [r3, #8]
 801b148:	2b20      	cmp	r3, #32
 801b14a:	d802      	bhi.n	801b152 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 801b14c:	697b      	ldr	r3, [r7, #20]
 801b14e:	005b      	lsls	r3, r3, #1
 801b150:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 801b152:	2001      	movs	r0, #1
 801b154:	f001 f99c 	bl	801c490 <HAL_RCCEx_GetPeriphCLKFreq>
 801b158:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 801b15a:	687b      	ldr	r3, [r7, #4]
 801b15c:	691b      	ldr	r3, [r3, #16]
 801b15e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b162:	d125      	bne.n	801b1b0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 801b164:	687b      	ldr	r3, [r7, #4]
 801b166:	68db      	ldr	r3, [r3, #12]
 801b168:	2b00      	cmp	r3, #0
 801b16a:	d010      	beq.n	801b18e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 801b16c:	697b      	ldr	r3, [r7, #20]
 801b16e:	009b      	lsls	r3, r3, #2
 801b170:	68fa      	ldr	r2, [r7, #12]
 801b172:	fbb2 f2f3 	udiv	r2, r2, r3
 801b176:	4613      	mov	r3, r2
 801b178:	009b      	lsls	r3, r3, #2
 801b17a:	4413      	add	r3, r2
 801b17c:	005b      	lsls	r3, r3, #1
 801b17e:	461a      	mov	r2, r3
 801b180:	687b      	ldr	r3, [r7, #4]
 801b182:	695b      	ldr	r3, [r3, #20]
 801b184:	fbb2 f3f3 	udiv	r3, r2, r3
 801b188:	3305      	adds	r3, #5
 801b18a:	613b      	str	r3, [r7, #16]
 801b18c:	e01f      	b.n	801b1ce <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 801b18e:	697b      	ldr	r3, [r7, #20]
 801b190:	00db      	lsls	r3, r3, #3
 801b192:	68fa      	ldr	r2, [r7, #12]
 801b194:	fbb2 f2f3 	udiv	r2, r2, r3
 801b198:	4613      	mov	r3, r2
 801b19a:	009b      	lsls	r3, r3, #2
 801b19c:	4413      	add	r3, r2
 801b19e:	005b      	lsls	r3, r3, #1
 801b1a0:	461a      	mov	r2, r3
 801b1a2:	687b      	ldr	r3, [r7, #4]
 801b1a4:	695b      	ldr	r3, [r3, #20]
 801b1a6:	fbb2 f3f3 	udiv	r3, r2, r3
 801b1aa:	3305      	adds	r3, #5
 801b1ac:	613b      	str	r3, [r7, #16]
 801b1ae:	e00e      	b.n	801b1ce <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 801b1b0:	68fa      	ldr	r2, [r7, #12]
 801b1b2:	697b      	ldr	r3, [r7, #20]
 801b1b4:	fbb2 f2f3 	udiv	r2, r2, r3
 801b1b8:	4613      	mov	r3, r2
 801b1ba:	009b      	lsls	r3, r3, #2
 801b1bc:	4413      	add	r3, r2
 801b1be:	005b      	lsls	r3, r3, #1
 801b1c0:	461a      	mov	r2, r3
 801b1c2:	687b      	ldr	r3, [r7, #4]
 801b1c4:	695b      	ldr	r3, [r3, #20]
 801b1c6:	fbb2 f3f3 	udiv	r3, r2, r3
 801b1ca:	3305      	adds	r3, #5
 801b1cc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 801b1ce:	693b      	ldr	r3, [r7, #16]
 801b1d0:	4a5c      	ldr	r2, [pc, #368]	; (801b344 <HAL_I2S_Init+0x270>)
 801b1d2:	fba2 2303 	umull	r2, r3, r2, r3
 801b1d6:	08db      	lsrs	r3, r3, #3
 801b1d8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 801b1da:	693b      	ldr	r3, [r7, #16]
 801b1dc:	f003 0301 	and.w	r3, r3, #1
 801b1e0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 801b1e2:	693a      	ldr	r2, [r7, #16]
 801b1e4:	69bb      	ldr	r3, [r7, #24]
 801b1e6:	1ad3      	subs	r3, r2, r3
 801b1e8:	085b      	lsrs	r3, r3, #1
 801b1ea:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 801b1ec:	69bb      	ldr	r3, [r7, #24]
 801b1ee:	021b      	lsls	r3, r3, #8
 801b1f0:	61bb      	str	r3, [r7, #24]
 801b1f2:	e003      	b.n	801b1fc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 801b1f4:	2302      	movs	r3, #2
 801b1f6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 801b1f8:	2300      	movs	r3, #0
 801b1fa:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 801b1fc:	69fb      	ldr	r3, [r7, #28]
 801b1fe:	2b01      	cmp	r3, #1
 801b200:	d902      	bls.n	801b208 <HAL_I2S_Init+0x134>
 801b202:	69fb      	ldr	r3, [r7, #28]
 801b204:	2bff      	cmp	r3, #255	; 0xff
 801b206:	d907      	bls.n	801b218 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 801b208:	687b      	ldr	r3, [r7, #4]
 801b20a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b20c:	f043 0210 	orr.w	r2, r3, #16
 801b210:	687b      	ldr	r3, [r7, #4]
 801b212:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 801b214:	2301      	movs	r3, #1
 801b216:	e08f      	b.n	801b338 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 801b218:	687b      	ldr	r3, [r7, #4]
 801b21a:	691a      	ldr	r2, [r3, #16]
 801b21c:	69bb      	ldr	r3, [r7, #24]
 801b21e:	ea42 0103 	orr.w	r1, r2, r3
 801b222:	687b      	ldr	r3, [r7, #4]
 801b224:	681b      	ldr	r3, [r3, #0]
 801b226:	69fa      	ldr	r2, [r7, #28]
 801b228:	430a      	orrs	r2, r1
 801b22a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 801b22c:	687b      	ldr	r3, [r7, #4]
 801b22e:	681b      	ldr	r3, [r3, #0]
 801b230:	69db      	ldr	r3, [r3, #28]
 801b232:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 801b236:	f023 030f 	bic.w	r3, r3, #15
 801b23a:	687a      	ldr	r2, [r7, #4]
 801b23c:	6851      	ldr	r1, [r2, #4]
 801b23e:	687a      	ldr	r2, [r7, #4]
 801b240:	6892      	ldr	r2, [r2, #8]
 801b242:	4311      	orrs	r1, r2
 801b244:	687a      	ldr	r2, [r7, #4]
 801b246:	68d2      	ldr	r2, [r2, #12]
 801b248:	4311      	orrs	r1, r2
 801b24a:	687a      	ldr	r2, [r7, #4]
 801b24c:	6992      	ldr	r2, [r2, #24]
 801b24e:	430a      	orrs	r2, r1
 801b250:	431a      	orrs	r2, r3
 801b252:	687b      	ldr	r3, [r7, #4]
 801b254:	681b      	ldr	r3, [r3, #0]
 801b256:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801b25a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 801b25c:	687b      	ldr	r3, [r7, #4]
 801b25e:	6a1b      	ldr	r3, [r3, #32]
 801b260:	2b01      	cmp	r3, #1
 801b262:	d161      	bne.n	801b328 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 801b264:	687b      	ldr	r3, [r7, #4]
 801b266:	4a38      	ldr	r2, [pc, #224]	; (801b348 <HAL_I2S_Init+0x274>)
 801b268:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 801b26a:	687b      	ldr	r3, [r7, #4]
 801b26c:	681b      	ldr	r3, [r3, #0]
 801b26e:	4a37      	ldr	r2, [pc, #220]	; (801b34c <HAL_I2S_Init+0x278>)
 801b270:	4293      	cmp	r3, r2
 801b272:	d101      	bne.n	801b278 <HAL_I2S_Init+0x1a4>
 801b274:	4b36      	ldr	r3, [pc, #216]	; (801b350 <HAL_I2S_Init+0x27c>)
 801b276:	e001      	b.n	801b27c <HAL_I2S_Init+0x1a8>
 801b278:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 801b27c:	69db      	ldr	r3, [r3, #28]
 801b27e:	687a      	ldr	r2, [r7, #4]
 801b280:	6812      	ldr	r2, [r2, #0]
 801b282:	4932      	ldr	r1, [pc, #200]	; (801b34c <HAL_I2S_Init+0x278>)
 801b284:	428a      	cmp	r2, r1
 801b286:	d101      	bne.n	801b28c <HAL_I2S_Init+0x1b8>
 801b288:	4a31      	ldr	r2, [pc, #196]	; (801b350 <HAL_I2S_Init+0x27c>)
 801b28a:	e001      	b.n	801b290 <HAL_I2S_Init+0x1bc>
 801b28c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 801b290:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 801b294:	f023 030f 	bic.w	r3, r3, #15
 801b298:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 801b29a:	687b      	ldr	r3, [r7, #4]
 801b29c:	681b      	ldr	r3, [r3, #0]
 801b29e:	4a2b      	ldr	r2, [pc, #172]	; (801b34c <HAL_I2S_Init+0x278>)
 801b2a0:	4293      	cmp	r3, r2
 801b2a2:	d101      	bne.n	801b2a8 <HAL_I2S_Init+0x1d4>
 801b2a4:	4b2a      	ldr	r3, [pc, #168]	; (801b350 <HAL_I2S_Init+0x27c>)
 801b2a6:	e001      	b.n	801b2ac <HAL_I2S_Init+0x1d8>
 801b2a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 801b2ac:	2202      	movs	r2, #2
 801b2ae:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 801b2b0:	687b      	ldr	r3, [r7, #4]
 801b2b2:	681b      	ldr	r3, [r3, #0]
 801b2b4:	4a25      	ldr	r2, [pc, #148]	; (801b34c <HAL_I2S_Init+0x278>)
 801b2b6:	4293      	cmp	r3, r2
 801b2b8:	d101      	bne.n	801b2be <HAL_I2S_Init+0x1ea>
 801b2ba:	4b25      	ldr	r3, [pc, #148]	; (801b350 <HAL_I2S_Init+0x27c>)
 801b2bc:	e001      	b.n	801b2c2 <HAL_I2S_Init+0x1ee>
 801b2be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 801b2c2:	69db      	ldr	r3, [r3, #28]
 801b2c4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 801b2c6:	687b      	ldr	r3, [r7, #4]
 801b2c8:	685b      	ldr	r3, [r3, #4]
 801b2ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b2ce:	d003      	beq.n	801b2d8 <HAL_I2S_Init+0x204>
 801b2d0:	687b      	ldr	r3, [r7, #4]
 801b2d2:	685b      	ldr	r3, [r3, #4]
 801b2d4:	2b00      	cmp	r3, #0
 801b2d6:	d103      	bne.n	801b2e0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 801b2d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 801b2dc:	613b      	str	r3, [r7, #16]
 801b2de:	e001      	b.n	801b2e4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 801b2e0:	2300      	movs	r3, #0
 801b2e2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 801b2e4:	693b      	ldr	r3, [r7, #16]
 801b2e6:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 801b2e8:	687b      	ldr	r3, [r7, #4]
 801b2ea:	689b      	ldr	r3, [r3, #8]
 801b2ec:	b299      	uxth	r1, r3
 801b2ee:	687b      	ldr	r3, [r7, #4]
 801b2f0:	68db      	ldr	r3, [r3, #12]
 801b2f2:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 801b2f4:	687b      	ldr	r3, [r7, #4]
 801b2f6:	699b      	ldr	r3, [r3, #24]
 801b2f8:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 801b2fa:	4303      	orrs	r3, r0
 801b2fc:	b29b      	uxth	r3, r3
 801b2fe:	430b      	orrs	r3, r1
 801b300:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 801b302:	4313      	orrs	r3, r2
 801b304:	b29a      	uxth	r2, r3
 801b306:	897b      	ldrh	r3, [r7, #10]
 801b308:	4313      	orrs	r3, r2
 801b30a:	b29b      	uxth	r3, r3
 801b30c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801b310:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 801b312:	687b      	ldr	r3, [r7, #4]
 801b314:	681b      	ldr	r3, [r3, #0]
 801b316:	4a0d      	ldr	r2, [pc, #52]	; (801b34c <HAL_I2S_Init+0x278>)
 801b318:	4293      	cmp	r3, r2
 801b31a:	d101      	bne.n	801b320 <HAL_I2S_Init+0x24c>
 801b31c:	4b0c      	ldr	r3, [pc, #48]	; (801b350 <HAL_I2S_Init+0x27c>)
 801b31e:	e001      	b.n	801b324 <HAL_I2S_Init+0x250>
 801b320:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 801b324:	897a      	ldrh	r2, [r7, #10]
 801b326:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 801b328:	687b      	ldr	r3, [r7, #4]
 801b32a:	2200      	movs	r2, #0
 801b32c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 801b32e:	687b      	ldr	r3, [r7, #4]
 801b330:	2201      	movs	r2, #1
 801b332:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 801b336:	2300      	movs	r3, #0
}
 801b338:	4618      	mov	r0, r3
 801b33a:	3720      	adds	r7, #32
 801b33c:	46bd      	mov	sp, r7
 801b33e:	bd80      	pop	{r7, pc}
 801b340:	0801b44b 	.word	0x0801b44b
 801b344:	cccccccd 	.word	0xcccccccd
 801b348:	0801b561 	.word	0x0801b561
 801b34c:	40003800 	.word	0x40003800
 801b350:	40003400 	.word	0x40003400

0801b354 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 801b354:	b480      	push	{r7}
 801b356:	b083      	sub	sp, #12
 801b358:	af00      	add	r7, sp, #0
 801b35a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 801b35c:	bf00      	nop
 801b35e:	370c      	adds	r7, #12
 801b360:	46bd      	mov	sp, r7
 801b362:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b366:	4770      	bx	lr

0801b368 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 801b368:	b480      	push	{r7}
 801b36a:	b083      	sub	sp, #12
 801b36c:	af00      	add	r7, sp, #0
 801b36e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 801b370:	bf00      	nop
 801b372:	370c      	adds	r7, #12
 801b374:	46bd      	mov	sp, r7
 801b376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b37a:	4770      	bx	lr

0801b37c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 801b37c:	b480      	push	{r7}
 801b37e:	b083      	sub	sp, #12
 801b380:	af00      	add	r7, sp, #0
 801b382:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 801b384:	bf00      	nop
 801b386:	370c      	adds	r7, #12
 801b388:	46bd      	mov	sp, r7
 801b38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b38e:	4770      	bx	lr

0801b390 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 801b390:	b580      	push	{r7, lr}
 801b392:	b082      	sub	sp, #8
 801b394:	af00      	add	r7, sp, #0
 801b396:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 801b398:	687b      	ldr	r3, [r7, #4]
 801b39a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b39c:	881a      	ldrh	r2, [r3, #0]
 801b39e:	687b      	ldr	r3, [r7, #4]
 801b3a0:	681b      	ldr	r3, [r3, #0]
 801b3a2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 801b3a4:	687b      	ldr	r3, [r7, #4]
 801b3a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b3a8:	1c9a      	adds	r2, r3, #2
 801b3aa:	687b      	ldr	r3, [r7, #4]
 801b3ac:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 801b3ae:	687b      	ldr	r3, [r7, #4]
 801b3b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b3b2:	b29b      	uxth	r3, r3
 801b3b4:	3b01      	subs	r3, #1
 801b3b6:	b29a      	uxth	r2, r3
 801b3b8:	687b      	ldr	r3, [r7, #4]
 801b3ba:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 801b3bc:	687b      	ldr	r3, [r7, #4]
 801b3be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b3c0:	b29b      	uxth	r3, r3
 801b3c2:	2b00      	cmp	r3, #0
 801b3c4:	d10e      	bne.n	801b3e4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 801b3c6:	687b      	ldr	r3, [r7, #4]
 801b3c8:	681b      	ldr	r3, [r3, #0]
 801b3ca:	685a      	ldr	r2, [r3, #4]
 801b3cc:	687b      	ldr	r3, [r7, #4]
 801b3ce:	681b      	ldr	r3, [r3, #0]
 801b3d0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 801b3d4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 801b3d6:	687b      	ldr	r3, [r7, #4]
 801b3d8:	2201      	movs	r2, #1
 801b3da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 801b3de:	6878      	ldr	r0, [r7, #4]
 801b3e0:	f7ff ffb8 	bl	801b354 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 801b3e4:	bf00      	nop
 801b3e6:	3708      	adds	r7, #8
 801b3e8:	46bd      	mov	sp, r7
 801b3ea:	bd80      	pop	{r7, pc}

0801b3ec <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 801b3ec:	b580      	push	{r7, lr}
 801b3ee:	b082      	sub	sp, #8
 801b3f0:	af00      	add	r7, sp, #0
 801b3f2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 801b3f4:	687b      	ldr	r3, [r7, #4]
 801b3f6:	681b      	ldr	r3, [r3, #0]
 801b3f8:	68da      	ldr	r2, [r3, #12]
 801b3fa:	687b      	ldr	r3, [r7, #4]
 801b3fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b3fe:	b292      	uxth	r2, r2
 801b400:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 801b402:	687b      	ldr	r3, [r7, #4]
 801b404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b406:	1c9a      	adds	r2, r3, #2
 801b408:	687b      	ldr	r3, [r7, #4]
 801b40a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 801b40c:	687b      	ldr	r3, [r7, #4]
 801b40e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b410:	b29b      	uxth	r3, r3
 801b412:	3b01      	subs	r3, #1
 801b414:	b29a      	uxth	r2, r3
 801b416:	687b      	ldr	r3, [r7, #4]
 801b418:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 801b41a:	687b      	ldr	r3, [r7, #4]
 801b41c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b41e:	b29b      	uxth	r3, r3
 801b420:	2b00      	cmp	r3, #0
 801b422:	d10e      	bne.n	801b442 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 801b424:	687b      	ldr	r3, [r7, #4]
 801b426:	681b      	ldr	r3, [r3, #0]
 801b428:	685a      	ldr	r2, [r3, #4]
 801b42a:	687b      	ldr	r3, [r7, #4]
 801b42c:	681b      	ldr	r3, [r3, #0]
 801b42e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801b432:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 801b434:	687b      	ldr	r3, [r7, #4]
 801b436:	2201      	movs	r2, #1
 801b438:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 801b43c:	6878      	ldr	r0, [r7, #4]
 801b43e:	f7ff ff93 	bl	801b368 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 801b442:	bf00      	nop
 801b444:	3708      	adds	r7, #8
 801b446:	46bd      	mov	sp, r7
 801b448:	bd80      	pop	{r7, pc}

0801b44a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 801b44a:	b580      	push	{r7, lr}
 801b44c:	b086      	sub	sp, #24
 801b44e:	af00      	add	r7, sp, #0
 801b450:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 801b452:	687b      	ldr	r3, [r7, #4]
 801b454:	681b      	ldr	r3, [r3, #0]
 801b456:	689b      	ldr	r3, [r3, #8]
 801b458:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 801b45a:	687b      	ldr	r3, [r7, #4]
 801b45c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801b460:	b2db      	uxtb	r3, r3
 801b462:	2b04      	cmp	r3, #4
 801b464:	d13a      	bne.n	801b4dc <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 801b466:	697b      	ldr	r3, [r7, #20]
 801b468:	f003 0301 	and.w	r3, r3, #1
 801b46c:	2b01      	cmp	r3, #1
 801b46e:	d109      	bne.n	801b484 <I2S_IRQHandler+0x3a>
 801b470:	687b      	ldr	r3, [r7, #4]
 801b472:	681b      	ldr	r3, [r3, #0]
 801b474:	685b      	ldr	r3, [r3, #4]
 801b476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b47a:	2b40      	cmp	r3, #64	; 0x40
 801b47c:	d102      	bne.n	801b484 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 801b47e:	6878      	ldr	r0, [r7, #4]
 801b480:	f7ff ffb4 	bl	801b3ec <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 801b484:	697b      	ldr	r3, [r7, #20]
 801b486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b48a:	2b40      	cmp	r3, #64	; 0x40
 801b48c:	d126      	bne.n	801b4dc <I2S_IRQHandler+0x92>
 801b48e:	687b      	ldr	r3, [r7, #4]
 801b490:	681b      	ldr	r3, [r3, #0]
 801b492:	685b      	ldr	r3, [r3, #4]
 801b494:	f003 0320 	and.w	r3, r3, #32
 801b498:	2b20      	cmp	r3, #32
 801b49a:	d11f      	bne.n	801b4dc <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 801b49c:	687b      	ldr	r3, [r7, #4]
 801b49e:	681b      	ldr	r3, [r3, #0]
 801b4a0:	685a      	ldr	r2, [r3, #4]
 801b4a2:	687b      	ldr	r3, [r7, #4]
 801b4a4:	681b      	ldr	r3, [r3, #0]
 801b4a6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801b4aa:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 801b4ac:	2300      	movs	r3, #0
 801b4ae:	613b      	str	r3, [r7, #16]
 801b4b0:	687b      	ldr	r3, [r7, #4]
 801b4b2:	681b      	ldr	r3, [r3, #0]
 801b4b4:	68db      	ldr	r3, [r3, #12]
 801b4b6:	613b      	str	r3, [r7, #16]
 801b4b8:	687b      	ldr	r3, [r7, #4]
 801b4ba:	681b      	ldr	r3, [r3, #0]
 801b4bc:	689b      	ldr	r3, [r3, #8]
 801b4be:	613b      	str	r3, [r7, #16]
 801b4c0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 801b4c2:	687b      	ldr	r3, [r7, #4]
 801b4c4:	2201      	movs	r2, #1
 801b4c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 801b4ca:	687b      	ldr	r3, [r7, #4]
 801b4cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b4ce:	f043 0202 	orr.w	r2, r3, #2
 801b4d2:	687b      	ldr	r3, [r7, #4]
 801b4d4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 801b4d6:	6878      	ldr	r0, [r7, #4]
 801b4d8:	f7ff ff50 	bl	801b37c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 801b4dc:	687b      	ldr	r3, [r7, #4]
 801b4de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801b4e2:	b2db      	uxtb	r3, r3
 801b4e4:	2b03      	cmp	r3, #3
 801b4e6:	d136      	bne.n	801b556 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 801b4e8:	697b      	ldr	r3, [r7, #20]
 801b4ea:	f003 0302 	and.w	r3, r3, #2
 801b4ee:	2b02      	cmp	r3, #2
 801b4f0:	d109      	bne.n	801b506 <I2S_IRQHandler+0xbc>
 801b4f2:	687b      	ldr	r3, [r7, #4]
 801b4f4:	681b      	ldr	r3, [r3, #0]
 801b4f6:	685b      	ldr	r3, [r3, #4]
 801b4f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b4fc:	2b80      	cmp	r3, #128	; 0x80
 801b4fe:	d102      	bne.n	801b506 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 801b500:	6878      	ldr	r0, [r7, #4]
 801b502:	f7ff ff45 	bl	801b390 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 801b506:	697b      	ldr	r3, [r7, #20]
 801b508:	f003 0308 	and.w	r3, r3, #8
 801b50c:	2b08      	cmp	r3, #8
 801b50e:	d122      	bne.n	801b556 <I2S_IRQHandler+0x10c>
 801b510:	687b      	ldr	r3, [r7, #4]
 801b512:	681b      	ldr	r3, [r3, #0]
 801b514:	685b      	ldr	r3, [r3, #4]
 801b516:	f003 0320 	and.w	r3, r3, #32
 801b51a:	2b20      	cmp	r3, #32
 801b51c:	d11b      	bne.n	801b556 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 801b51e:	687b      	ldr	r3, [r7, #4]
 801b520:	681b      	ldr	r3, [r3, #0]
 801b522:	685a      	ldr	r2, [r3, #4]
 801b524:	687b      	ldr	r3, [r7, #4]
 801b526:	681b      	ldr	r3, [r3, #0]
 801b528:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 801b52c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 801b52e:	2300      	movs	r3, #0
 801b530:	60fb      	str	r3, [r7, #12]
 801b532:	687b      	ldr	r3, [r7, #4]
 801b534:	681b      	ldr	r3, [r3, #0]
 801b536:	689b      	ldr	r3, [r3, #8]
 801b538:	60fb      	str	r3, [r7, #12]
 801b53a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 801b53c:	687b      	ldr	r3, [r7, #4]
 801b53e:	2201      	movs	r2, #1
 801b540:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 801b544:	687b      	ldr	r3, [r7, #4]
 801b546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b548:	f043 0204 	orr.w	r2, r3, #4
 801b54c:	687b      	ldr	r3, [r7, #4]
 801b54e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 801b550:	6878      	ldr	r0, [r7, #4]
 801b552:	f7ff ff13 	bl	801b37c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 801b556:	bf00      	nop
 801b558:	3718      	adds	r7, #24
 801b55a:	46bd      	mov	sp, r7
 801b55c:	bd80      	pop	{r7, pc}
	...

0801b560 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 801b560:	b580      	push	{r7, lr}
 801b562:	b088      	sub	sp, #32
 801b564:	af00      	add	r7, sp, #0
 801b566:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 801b568:	687b      	ldr	r3, [r7, #4]
 801b56a:	681b      	ldr	r3, [r3, #0]
 801b56c:	689b      	ldr	r3, [r3, #8]
 801b56e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 801b570:	687b      	ldr	r3, [r7, #4]
 801b572:	681b      	ldr	r3, [r3, #0]
 801b574:	4aa2      	ldr	r2, [pc, #648]	; (801b800 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 801b576:	4293      	cmp	r3, r2
 801b578:	d101      	bne.n	801b57e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 801b57a:	4ba2      	ldr	r3, [pc, #648]	; (801b804 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 801b57c:	e001      	b.n	801b582 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 801b57e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 801b582:	689b      	ldr	r3, [r3, #8]
 801b584:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 801b586:	687b      	ldr	r3, [r7, #4]
 801b588:	681b      	ldr	r3, [r3, #0]
 801b58a:	685b      	ldr	r3, [r3, #4]
 801b58c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 801b58e:	687b      	ldr	r3, [r7, #4]
 801b590:	681b      	ldr	r3, [r3, #0]
 801b592:	4a9b      	ldr	r2, [pc, #620]	; (801b800 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 801b594:	4293      	cmp	r3, r2
 801b596:	d101      	bne.n	801b59c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 801b598:	4b9a      	ldr	r3, [pc, #616]	; (801b804 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 801b59a:	e001      	b.n	801b5a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 801b59c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 801b5a0:	685b      	ldr	r3, [r3, #4]
 801b5a2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 801b5a4:	687b      	ldr	r3, [r7, #4]
 801b5a6:	685b      	ldr	r3, [r3, #4]
 801b5a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b5ac:	d004      	beq.n	801b5b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 801b5ae:	687b      	ldr	r3, [r7, #4]
 801b5b0:	685b      	ldr	r3, [r3, #4]
 801b5b2:	2b00      	cmp	r3, #0
 801b5b4:	f040 8099 	bne.w	801b6ea <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 801b5b8:	69fb      	ldr	r3, [r7, #28]
 801b5ba:	f003 0302 	and.w	r3, r3, #2
 801b5be:	2b02      	cmp	r3, #2
 801b5c0:	d107      	bne.n	801b5d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 801b5c2:	697b      	ldr	r3, [r7, #20]
 801b5c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b5c8:	2b00      	cmp	r3, #0
 801b5ca:	d002      	beq.n	801b5d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 801b5cc:	6878      	ldr	r0, [r7, #4]
 801b5ce:	f000 f925 	bl	801b81c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 801b5d2:	69bb      	ldr	r3, [r7, #24]
 801b5d4:	f003 0301 	and.w	r3, r3, #1
 801b5d8:	2b01      	cmp	r3, #1
 801b5da:	d107      	bne.n	801b5ec <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 801b5dc:	693b      	ldr	r3, [r7, #16]
 801b5de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b5e2:	2b00      	cmp	r3, #0
 801b5e4:	d002      	beq.n	801b5ec <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 801b5e6:	6878      	ldr	r0, [r7, #4]
 801b5e8:	f000 f9c8 	bl	801b97c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 801b5ec:	69bb      	ldr	r3, [r7, #24]
 801b5ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b5f2:	2b40      	cmp	r3, #64	; 0x40
 801b5f4:	d13a      	bne.n	801b66c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 801b5f6:	693b      	ldr	r3, [r7, #16]
 801b5f8:	f003 0320 	and.w	r3, r3, #32
 801b5fc:	2b00      	cmp	r3, #0
 801b5fe:	d035      	beq.n	801b66c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 801b600:	687b      	ldr	r3, [r7, #4]
 801b602:	681b      	ldr	r3, [r3, #0]
 801b604:	4a7e      	ldr	r2, [pc, #504]	; (801b800 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 801b606:	4293      	cmp	r3, r2
 801b608:	d101      	bne.n	801b60e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 801b60a:	4b7e      	ldr	r3, [pc, #504]	; (801b804 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 801b60c:	e001      	b.n	801b612 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 801b60e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 801b612:	685a      	ldr	r2, [r3, #4]
 801b614:	687b      	ldr	r3, [r7, #4]
 801b616:	681b      	ldr	r3, [r3, #0]
 801b618:	4979      	ldr	r1, [pc, #484]	; (801b800 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 801b61a:	428b      	cmp	r3, r1
 801b61c:	d101      	bne.n	801b622 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 801b61e:	4b79      	ldr	r3, [pc, #484]	; (801b804 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 801b620:	e001      	b.n	801b626 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 801b622:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 801b626:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801b62a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 801b62c:	687b      	ldr	r3, [r7, #4]
 801b62e:	681b      	ldr	r3, [r3, #0]
 801b630:	685a      	ldr	r2, [r3, #4]
 801b632:	687b      	ldr	r3, [r7, #4]
 801b634:	681b      	ldr	r3, [r3, #0]
 801b636:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 801b63a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 801b63c:	2300      	movs	r3, #0
 801b63e:	60fb      	str	r3, [r7, #12]
 801b640:	687b      	ldr	r3, [r7, #4]
 801b642:	681b      	ldr	r3, [r3, #0]
 801b644:	68db      	ldr	r3, [r3, #12]
 801b646:	60fb      	str	r3, [r7, #12]
 801b648:	687b      	ldr	r3, [r7, #4]
 801b64a:	681b      	ldr	r3, [r3, #0]
 801b64c:	689b      	ldr	r3, [r3, #8]
 801b64e:	60fb      	str	r3, [r7, #12]
 801b650:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 801b652:	687b      	ldr	r3, [r7, #4]
 801b654:	2201      	movs	r2, #1
 801b656:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 801b65a:	687b      	ldr	r3, [r7, #4]
 801b65c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b65e:	f043 0202 	orr.w	r2, r3, #2
 801b662:	687b      	ldr	r3, [r7, #4]
 801b664:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 801b666:	6878      	ldr	r0, [r7, #4]
 801b668:	f7ff fe88 	bl	801b37c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 801b66c:	69fb      	ldr	r3, [r7, #28]
 801b66e:	f003 0308 	and.w	r3, r3, #8
 801b672:	2b08      	cmp	r3, #8
 801b674:	f040 80be 	bne.w	801b7f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 801b678:	697b      	ldr	r3, [r7, #20]
 801b67a:	f003 0320 	and.w	r3, r3, #32
 801b67e:	2b00      	cmp	r3, #0
 801b680:	f000 80b8 	beq.w	801b7f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 801b684:	687b      	ldr	r3, [r7, #4]
 801b686:	681b      	ldr	r3, [r3, #0]
 801b688:	685a      	ldr	r2, [r3, #4]
 801b68a:	687b      	ldr	r3, [r7, #4]
 801b68c:	681b      	ldr	r3, [r3, #0]
 801b68e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 801b692:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 801b694:	687b      	ldr	r3, [r7, #4]
 801b696:	681b      	ldr	r3, [r3, #0]
 801b698:	4a59      	ldr	r2, [pc, #356]	; (801b800 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 801b69a:	4293      	cmp	r3, r2
 801b69c:	d101      	bne.n	801b6a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 801b69e:	4b59      	ldr	r3, [pc, #356]	; (801b804 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 801b6a0:	e001      	b.n	801b6a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 801b6a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 801b6a6:	685a      	ldr	r2, [r3, #4]
 801b6a8:	687b      	ldr	r3, [r7, #4]
 801b6aa:	681b      	ldr	r3, [r3, #0]
 801b6ac:	4954      	ldr	r1, [pc, #336]	; (801b800 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 801b6ae:	428b      	cmp	r3, r1
 801b6b0:	d101      	bne.n	801b6b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 801b6b2:	4b54      	ldr	r3, [pc, #336]	; (801b804 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 801b6b4:	e001      	b.n	801b6ba <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 801b6b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 801b6ba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801b6be:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 801b6c0:	2300      	movs	r3, #0
 801b6c2:	60bb      	str	r3, [r7, #8]
 801b6c4:	687b      	ldr	r3, [r7, #4]
 801b6c6:	681b      	ldr	r3, [r3, #0]
 801b6c8:	689b      	ldr	r3, [r3, #8]
 801b6ca:	60bb      	str	r3, [r7, #8]
 801b6cc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 801b6ce:	687b      	ldr	r3, [r7, #4]
 801b6d0:	2201      	movs	r2, #1
 801b6d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 801b6d6:	687b      	ldr	r3, [r7, #4]
 801b6d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b6da:	f043 0204 	orr.w	r2, r3, #4
 801b6de:	687b      	ldr	r3, [r7, #4]
 801b6e0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 801b6e2:	6878      	ldr	r0, [r7, #4]
 801b6e4:	f7ff fe4a 	bl	801b37c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 801b6e8:	e084      	b.n	801b7f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 801b6ea:	69bb      	ldr	r3, [r7, #24]
 801b6ec:	f003 0302 	and.w	r3, r3, #2
 801b6f0:	2b02      	cmp	r3, #2
 801b6f2:	d107      	bne.n	801b704 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 801b6f4:	693b      	ldr	r3, [r7, #16]
 801b6f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b6fa:	2b00      	cmp	r3, #0
 801b6fc:	d002      	beq.n	801b704 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 801b6fe:	6878      	ldr	r0, [r7, #4]
 801b700:	f000 f8be 	bl	801b880 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 801b704:	69fb      	ldr	r3, [r7, #28]
 801b706:	f003 0301 	and.w	r3, r3, #1
 801b70a:	2b01      	cmp	r3, #1
 801b70c:	d107      	bne.n	801b71e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 801b70e:	697b      	ldr	r3, [r7, #20]
 801b710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b714:	2b00      	cmp	r3, #0
 801b716:	d002      	beq.n	801b71e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 801b718:	6878      	ldr	r0, [r7, #4]
 801b71a:	f000 f8fd 	bl	801b918 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 801b71e:	69fb      	ldr	r3, [r7, #28]
 801b720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b724:	2b40      	cmp	r3, #64	; 0x40
 801b726:	d12f      	bne.n	801b788 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 801b728:	697b      	ldr	r3, [r7, #20]
 801b72a:	f003 0320 	and.w	r3, r3, #32
 801b72e:	2b00      	cmp	r3, #0
 801b730:	d02a      	beq.n	801b788 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 801b732:	687b      	ldr	r3, [r7, #4]
 801b734:	681b      	ldr	r3, [r3, #0]
 801b736:	685a      	ldr	r2, [r3, #4]
 801b738:	687b      	ldr	r3, [r7, #4]
 801b73a:	681b      	ldr	r3, [r3, #0]
 801b73c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801b740:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 801b742:	687b      	ldr	r3, [r7, #4]
 801b744:	681b      	ldr	r3, [r3, #0]
 801b746:	4a2e      	ldr	r2, [pc, #184]	; (801b800 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 801b748:	4293      	cmp	r3, r2
 801b74a:	d101      	bne.n	801b750 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 801b74c:	4b2d      	ldr	r3, [pc, #180]	; (801b804 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 801b74e:	e001      	b.n	801b754 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 801b750:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 801b754:	685a      	ldr	r2, [r3, #4]
 801b756:	687b      	ldr	r3, [r7, #4]
 801b758:	681b      	ldr	r3, [r3, #0]
 801b75a:	4929      	ldr	r1, [pc, #164]	; (801b800 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 801b75c:	428b      	cmp	r3, r1
 801b75e:	d101      	bne.n	801b764 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 801b760:	4b28      	ldr	r3, [pc, #160]	; (801b804 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 801b762:	e001      	b.n	801b768 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 801b764:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 801b768:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 801b76c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 801b76e:	687b      	ldr	r3, [r7, #4]
 801b770:	2201      	movs	r2, #1
 801b772:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 801b776:	687b      	ldr	r3, [r7, #4]
 801b778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b77a:	f043 0202 	orr.w	r2, r3, #2
 801b77e:	687b      	ldr	r3, [r7, #4]
 801b780:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 801b782:	6878      	ldr	r0, [r7, #4]
 801b784:	f7ff fdfa 	bl	801b37c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 801b788:	69bb      	ldr	r3, [r7, #24]
 801b78a:	f003 0308 	and.w	r3, r3, #8
 801b78e:	2b08      	cmp	r3, #8
 801b790:	d131      	bne.n	801b7f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 801b792:	693b      	ldr	r3, [r7, #16]
 801b794:	f003 0320 	and.w	r3, r3, #32
 801b798:	2b00      	cmp	r3, #0
 801b79a:	d02c      	beq.n	801b7f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 801b79c:	687b      	ldr	r3, [r7, #4]
 801b79e:	681b      	ldr	r3, [r3, #0]
 801b7a0:	4a17      	ldr	r2, [pc, #92]	; (801b800 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 801b7a2:	4293      	cmp	r3, r2
 801b7a4:	d101      	bne.n	801b7aa <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 801b7a6:	4b17      	ldr	r3, [pc, #92]	; (801b804 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 801b7a8:	e001      	b.n	801b7ae <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 801b7aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 801b7ae:	685a      	ldr	r2, [r3, #4]
 801b7b0:	687b      	ldr	r3, [r7, #4]
 801b7b2:	681b      	ldr	r3, [r3, #0]
 801b7b4:	4912      	ldr	r1, [pc, #72]	; (801b800 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 801b7b6:	428b      	cmp	r3, r1
 801b7b8:	d101      	bne.n	801b7be <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 801b7ba:	4b12      	ldr	r3, [pc, #72]	; (801b804 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 801b7bc:	e001      	b.n	801b7c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 801b7be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 801b7c2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 801b7c6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 801b7c8:	687b      	ldr	r3, [r7, #4]
 801b7ca:	681b      	ldr	r3, [r3, #0]
 801b7cc:	685a      	ldr	r2, [r3, #4]
 801b7ce:	687b      	ldr	r3, [r7, #4]
 801b7d0:	681b      	ldr	r3, [r3, #0]
 801b7d2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801b7d6:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 801b7d8:	687b      	ldr	r3, [r7, #4]
 801b7da:	2201      	movs	r2, #1
 801b7dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 801b7e0:	687b      	ldr	r3, [r7, #4]
 801b7e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b7e4:	f043 0204 	orr.w	r2, r3, #4
 801b7e8:	687b      	ldr	r3, [r7, #4]
 801b7ea:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 801b7ec:	6878      	ldr	r0, [r7, #4]
 801b7ee:	f7ff fdc5 	bl	801b37c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 801b7f2:	e000      	b.n	801b7f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 801b7f4:	bf00      	nop
}
 801b7f6:	bf00      	nop
 801b7f8:	3720      	adds	r7, #32
 801b7fa:	46bd      	mov	sp, r7
 801b7fc:	bd80      	pop	{r7, pc}
 801b7fe:	bf00      	nop
 801b800:	40003800 	.word	0x40003800
 801b804:	40003400 	.word	0x40003400

0801b808 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 801b808:	b480      	push	{r7}
 801b80a:	b083      	sub	sp, #12
 801b80c:	af00      	add	r7, sp, #0
 801b80e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 801b810:	bf00      	nop
 801b812:	370c      	adds	r7, #12
 801b814:	46bd      	mov	sp, r7
 801b816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b81a:	4770      	bx	lr

0801b81c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 801b81c:	b580      	push	{r7, lr}
 801b81e:	b082      	sub	sp, #8
 801b820:	af00      	add	r7, sp, #0
 801b822:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 801b824:	687b      	ldr	r3, [r7, #4]
 801b826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b828:	1c99      	adds	r1, r3, #2
 801b82a:	687a      	ldr	r2, [r7, #4]
 801b82c:	6251      	str	r1, [r2, #36]	; 0x24
 801b82e:	881a      	ldrh	r2, [r3, #0]
 801b830:	687b      	ldr	r3, [r7, #4]
 801b832:	681b      	ldr	r3, [r3, #0]
 801b834:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 801b836:	687b      	ldr	r3, [r7, #4]
 801b838:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b83a:	b29b      	uxth	r3, r3
 801b83c:	3b01      	subs	r3, #1
 801b83e:	b29a      	uxth	r2, r3
 801b840:	687b      	ldr	r3, [r7, #4]
 801b842:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 801b844:	687b      	ldr	r3, [r7, #4]
 801b846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b848:	b29b      	uxth	r3, r3
 801b84a:	2b00      	cmp	r3, #0
 801b84c:	d113      	bne.n	801b876 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 801b84e:	687b      	ldr	r3, [r7, #4]
 801b850:	681b      	ldr	r3, [r3, #0]
 801b852:	685a      	ldr	r2, [r3, #4]
 801b854:	687b      	ldr	r3, [r7, #4]
 801b856:	681b      	ldr	r3, [r3, #0]
 801b858:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 801b85c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 801b85e:	687b      	ldr	r3, [r7, #4]
 801b860:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b862:	b29b      	uxth	r3, r3
 801b864:	2b00      	cmp	r3, #0
 801b866:	d106      	bne.n	801b876 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 801b868:	687b      	ldr	r3, [r7, #4]
 801b86a:	2201      	movs	r2, #1
 801b86c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 801b870:	6878      	ldr	r0, [r7, #4]
 801b872:	f7ff ffc9 	bl	801b808 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 801b876:	bf00      	nop
 801b878:	3708      	adds	r7, #8
 801b87a:	46bd      	mov	sp, r7
 801b87c:	bd80      	pop	{r7, pc}
	...

0801b880 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 801b880:	b580      	push	{r7, lr}
 801b882:	b082      	sub	sp, #8
 801b884:	af00      	add	r7, sp, #0
 801b886:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 801b888:	687b      	ldr	r3, [r7, #4]
 801b88a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b88c:	1c99      	adds	r1, r3, #2
 801b88e:	687a      	ldr	r2, [r7, #4]
 801b890:	6251      	str	r1, [r2, #36]	; 0x24
 801b892:	8819      	ldrh	r1, [r3, #0]
 801b894:	687b      	ldr	r3, [r7, #4]
 801b896:	681b      	ldr	r3, [r3, #0]
 801b898:	4a1d      	ldr	r2, [pc, #116]	; (801b910 <I2SEx_TxISR_I2SExt+0x90>)
 801b89a:	4293      	cmp	r3, r2
 801b89c:	d101      	bne.n	801b8a2 <I2SEx_TxISR_I2SExt+0x22>
 801b89e:	4b1d      	ldr	r3, [pc, #116]	; (801b914 <I2SEx_TxISR_I2SExt+0x94>)
 801b8a0:	e001      	b.n	801b8a6 <I2SEx_TxISR_I2SExt+0x26>
 801b8a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 801b8a6:	460a      	mov	r2, r1
 801b8a8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 801b8aa:	687b      	ldr	r3, [r7, #4]
 801b8ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b8ae:	b29b      	uxth	r3, r3
 801b8b0:	3b01      	subs	r3, #1
 801b8b2:	b29a      	uxth	r2, r3
 801b8b4:	687b      	ldr	r3, [r7, #4]
 801b8b6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 801b8b8:	687b      	ldr	r3, [r7, #4]
 801b8ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b8bc:	b29b      	uxth	r3, r3
 801b8be:	2b00      	cmp	r3, #0
 801b8c0:	d121      	bne.n	801b906 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 801b8c2:	687b      	ldr	r3, [r7, #4]
 801b8c4:	681b      	ldr	r3, [r3, #0]
 801b8c6:	4a12      	ldr	r2, [pc, #72]	; (801b910 <I2SEx_TxISR_I2SExt+0x90>)
 801b8c8:	4293      	cmp	r3, r2
 801b8ca:	d101      	bne.n	801b8d0 <I2SEx_TxISR_I2SExt+0x50>
 801b8cc:	4b11      	ldr	r3, [pc, #68]	; (801b914 <I2SEx_TxISR_I2SExt+0x94>)
 801b8ce:	e001      	b.n	801b8d4 <I2SEx_TxISR_I2SExt+0x54>
 801b8d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 801b8d4:	685a      	ldr	r2, [r3, #4]
 801b8d6:	687b      	ldr	r3, [r7, #4]
 801b8d8:	681b      	ldr	r3, [r3, #0]
 801b8da:	490d      	ldr	r1, [pc, #52]	; (801b910 <I2SEx_TxISR_I2SExt+0x90>)
 801b8dc:	428b      	cmp	r3, r1
 801b8de:	d101      	bne.n	801b8e4 <I2SEx_TxISR_I2SExt+0x64>
 801b8e0:	4b0c      	ldr	r3, [pc, #48]	; (801b914 <I2SEx_TxISR_I2SExt+0x94>)
 801b8e2:	e001      	b.n	801b8e8 <I2SEx_TxISR_I2SExt+0x68>
 801b8e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 801b8e8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 801b8ec:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 801b8ee:	687b      	ldr	r3, [r7, #4]
 801b8f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b8f2:	b29b      	uxth	r3, r3
 801b8f4:	2b00      	cmp	r3, #0
 801b8f6:	d106      	bne.n	801b906 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 801b8f8:	687b      	ldr	r3, [r7, #4]
 801b8fa:	2201      	movs	r2, #1
 801b8fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 801b900:	6878      	ldr	r0, [r7, #4]
 801b902:	f7ff ff81 	bl	801b808 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 801b906:	bf00      	nop
 801b908:	3708      	adds	r7, #8
 801b90a:	46bd      	mov	sp, r7
 801b90c:	bd80      	pop	{r7, pc}
 801b90e:	bf00      	nop
 801b910:	40003800 	.word	0x40003800
 801b914:	40003400 	.word	0x40003400

0801b918 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 801b918:	b580      	push	{r7, lr}
 801b91a:	b082      	sub	sp, #8
 801b91c:	af00      	add	r7, sp, #0
 801b91e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 801b920:	687b      	ldr	r3, [r7, #4]
 801b922:	681b      	ldr	r3, [r3, #0]
 801b924:	68d8      	ldr	r0, [r3, #12]
 801b926:	687b      	ldr	r3, [r7, #4]
 801b928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b92a:	1c99      	adds	r1, r3, #2
 801b92c:	687a      	ldr	r2, [r7, #4]
 801b92e:	62d1      	str	r1, [r2, #44]	; 0x2c
 801b930:	b282      	uxth	r2, r0
 801b932:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 801b934:	687b      	ldr	r3, [r7, #4]
 801b936:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b938:	b29b      	uxth	r3, r3
 801b93a:	3b01      	subs	r3, #1
 801b93c:	b29a      	uxth	r2, r3
 801b93e:	687b      	ldr	r3, [r7, #4]
 801b940:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 801b942:	687b      	ldr	r3, [r7, #4]
 801b944:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b946:	b29b      	uxth	r3, r3
 801b948:	2b00      	cmp	r3, #0
 801b94a:	d113      	bne.n	801b974 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 801b94c:	687b      	ldr	r3, [r7, #4]
 801b94e:	681b      	ldr	r3, [r3, #0]
 801b950:	685a      	ldr	r2, [r3, #4]
 801b952:	687b      	ldr	r3, [r7, #4]
 801b954:	681b      	ldr	r3, [r3, #0]
 801b956:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801b95a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 801b95c:	687b      	ldr	r3, [r7, #4]
 801b95e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b960:	b29b      	uxth	r3, r3
 801b962:	2b00      	cmp	r3, #0
 801b964:	d106      	bne.n	801b974 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 801b966:	687b      	ldr	r3, [r7, #4]
 801b968:	2201      	movs	r2, #1
 801b96a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 801b96e:	6878      	ldr	r0, [r7, #4]
 801b970:	f7ff ff4a 	bl	801b808 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 801b974:	bf00      	nop
 801b976:	3708      	adds	r7, #8
 801b978:	46bd      	mov	sp, r7
 801b97a:	bd80      	pop	{r7, pc}

0801b97c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 801b97c:	b580      	push	{r7, lr}
 801b97e:	b082      	sub	sp, #8
 801b980:	af00      	add	r7, sp, #0
 801b982:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 801b984:	687b      	ldr	r3, [r7, #4]
 801b986:	681b      	ldr	r3, [r3, #0]
 801b988:	4a20      	ldr	r2, [pc, #128]	; (801ba0c <I2SEx_RxISR_I2SExt+0x90>)
 801b98a:	4293      	cmp	r3, r2
 801b98c:	d101      	bne.n	801b992 <I2SEx_RxISR_I2SExt+0x16>
 801b98e:	4b20      	ldr	r3, [pc, #128]	; (801ba10 <I2SEx_RxISR_I2SExt+0x94>)
 801b990:	e001      	b.n	801b996 <I2SEx_RxISR_I2SExt+0x1a>
 801b992:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 801b996:	68d8      	ldr	r0, [r3, #12]
 801b998:	687b      	ldr	r3, [r7, #4]
 801b99a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b99c:	1c99      	adds	r1, r3, #2
 801b99e:	687a      	ldr	r2, [r7, #4]
 801b9a0:	62d1      	str	r1, [r2, #44]	; 0x2c
 801b9a2:	b282      	uxth	r2, r0
 801b9a4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 801b9a6:	687b      	ldr	r3, [r7, #4]
 801b9a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b9aa:	b29b      	uxth	r3, r3
 801b9ac:	3b01      	subs	r3, #1
 801b9ae:	b29a      	uxth	r2, r3
 801b9b0:	687b      	ldr	r3, [r7, #4]
 801b9b2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 801b9b4:	687b      	ldr	r3, [r7, #4]
 801b9b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b9b8:	b29b      	uxth	r3, r3
 801b9ba:	2b00      	cmp	r3, #0
 801b9bc:	d121      	bne.n	801ba02 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 801b9be:	687b      	ldr	r3, [r7, #4]
 801b9c0:	681b      	ldr	r3, [r3, #0]
 801b9c2:	4a12      	ldr	r2, [pc, #72]	; (801ba0c <I2SEx_RxISR_I2SExt+0x90>)
 801b9c4:	4293      	cmp	r3, r2
 801b9c6:	d101      	bne.n	801b9cc <I2SEx_RxISR_I2SExt+0x50>
 801b9c8:	4b11      	ldr	r3, [pc, #68]	; (801ba10 <I2SEx_RxISR_I2SExt+0x94>)
 801b9ca:	e001      	b.n	801b9d0 <I2SEx_RxISR_I2SExt+0x54>
 801b9cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 801b9d0:	685a      	ldr	r2, [r3, #4]
 801b9d2:	687b      	ldr	r3, [r7, #4]
 801b9d4:	681b      	ldr	r3, [r3, #0]
 801b9d6:	490d      	ldr	r1, [pc, #52]	; (801ba0c <I2SEx_RxISR_I2SExt+0x90>)
 801b9d8:	428b      	cmp	r3, r1
 801b9da:	d101      	bne.n	801b9e0 <I2SEx_RxISR_I2SExt+0x64>
 801b9dc:	4b0c      	ldr	r3, [pc, #48]	; (801ba10 <I2SEx_RxISR_I2SExt+0x94>)
 801b9de:	e001      	b.n	801b9e4 <I2SEx_RxISR_I2SExt+0x68>
 801b9e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 801b9e4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801b9e8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 801b9ea:	687b      	ldr	r3, [r7, #4]
 801b9ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b9ee:	b29b      	uxth	r3, r3
 801b9f0:	2b00      	cmp	r3, #0
 801b9f2:	d106      	bne.n	801ba02 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 801b9f4:	687b      	ldr	r3, [r7, #4]
 801b9f6:	2201      	movs	r2, #1
 801b9f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 801b9fc:	6878      	ldr	r0, [r7, #4]
 801b9fe:	f7ff ff03 	bl	801b808 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 801ba02:	bf00      	nop
 801ba04:	3708      	adds	r7, #8
 801ba06:	46bd      	mov	sp, r7
 801ba08:	bd80      	pop	{r7, pc}
 801ba0a:	bf00      	nop
 801ba0c:	40003800 	.word	0x40003800
 801ba10:	40003400 	.word	0x40003400

0801ba14 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801ba14:	b580      	push	{r7, lr}
 801ba16:	b086      	sub	sp, #24
 801ba18:	af00      	add	r7, sp, #0
 801ba1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801ba1c:	687b      	ldr	r3, [r7, #4]
 801ba1e:	2b00      	cmp	r3, #0
 801ba20:	d101      	bne.n	801ba26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801ba22:	2301      	movs	r3, #1
 801ba24:	e25b      	b.n	801bede <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801ba26:	687b      	ldr	r3, [r7, #4]
 801ba28:	681b      	ldr	r3, [r3, #0]
 801ba2a:	f003 0301 	and.w	r3, r3, #1
 801ba2e:	2b00      	cmp	r3, #0
 801ba30:	d075      	beq.n	801bb1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801ba32:	4ba3      	ldr	r3, [pc, #652]	; (801bcc0 <HAL_RCC_OscConfig+0x2ac>)
 801ba34:	689b      	ldr	r3, [r3, #8]
 801ba36:	f003 030c 	and.w	r3, r3, #12
 801ba3a:	2b04      	cmp	r3, #4
 801ba3c:	d00c      	beq.n	801ba58 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801ba3e:	4ba0      	ldr	r3, [pc, #640]	; (801bcc0 <HAL_RCC_OscConfig+0x2ac>)
 801ba40:	689b      	ldr	r3, [r3, #8]
 801ba42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801ba46:	2b08      	cmp	r3, #8
 801ba48:	d112      	bne.n	801ba70 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801ba4a:	4b9d      	ldr	r3, [pc, #628]	; (801bcc0 <HAL_RCC_OscConfig+0x2ac>)
 801ba4c:	685b      	ldr	r3, [r3, #4]
 801ba4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801ba52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801ba56:	d10b      	bne.n	801ba70 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801ba58:	4b99      	ldr	r3, [pc, #612]	; (801bcc0 <HAL_RCC_OscConfig+0x2ac>)
 801ba5a:	681b      	ldr	r3, [r3, #0]
 801ba5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801ba60:	2b00      	cmp	r3, #0
 801ba62:	d05b      	beq.n	801bb1c <HAL_RCC_OscConfig+0x108>
 801ba64:	687b      	ldr	r3, [r7, #4]
 801ba66:	685b      	ldr	r3, [r3, #4]
 801ba68:	2b00      	cmp	r3, #0
 801ba6a:	d157      	bne.n	801bb1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 801ba6c:	2301      	movs	r3, #1
 801ba6e:	e236      	b.n	801bede <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801ba70:	687b      	ldr	r3, [r7, #4]
 801ba72:	685b      	ldr	r3, [r3, #4]
 801ba74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801ba78:	d106      	bne.n	801ba88 <HAL_RCC_OscConfig+0x74>
 801ba7a:	4b91      	ldr	r3, [pc, #580]	; (801bcc0 <HAL_RCC_OscConfig+0x2ac>)
 801ba7c:	681b      	ldr	r3, [r3, #0]
 801ba7e:	4a90      	ldr	r2, [pc, #576]	; (801bcc0 <HAL_RCC_OscConfig+0x2ac>)
 801ba80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801ba84:	6013      	str	r3, [r2, #0]
 801ba86:	e01d      	b.n	801bac4 <HAL_RCC_OscConfig+0xb0>
 801ba88:	687b      	ldr	r3, [r7, #4]
 801ba8a:	685b      	ldr	r3, [r3, #4]
 801ba8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801ba90:	d10c      	bne.n	801baac <HAL_RCC_OscConfig+0x98>
 801ba92:	4b8b      	ldr	r3, [pc, #556]	; (801bcc0 <HAL_RCC_OscConfig+0x2ac>)
 801ba94:	681b      	ldr	r3, [r3, #0]
 801ba96:	4a8a      	ldr	r2, [pc, #552]	; (801bcc0 <HAL_RCC_OscConfig+0x2ac>)
 801ba98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801ba9c:	6013      	str	r3, [r2, #0]
 801ba9e:	4b88      	ldr	r3, [pc, #544]	; (801bcc0 <HAL_RCC_OscConfig+0x2ac>)
 801baa0:	681b      	ldr	r3, [r3, #0]
 801baa2:	4a87      	ldr	r2, [pc, #540]	; (801bcc0 <HAL_RCC_OscConfig+0x2ac>)
 801baa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801baa8:	6013      	str	r3, [r2, #0]
 801baaa:	e00b      	b.n	801bac4 <HAL_RCC_OscConfig+0xb0>
 801baac:	4b84      	ldr	r3, [pc, #528]	; (801bcc0 <HAL_RCC_OscConfig+0x2ac>)
 801baae:	681b      	ldr	r3, [r3, #0]
 801bab0:	4a83      	ldr	r2, [pc, #524]	; (801bcc0 <HAL_RCC_OscConfig+0x2ac>)
 801bab2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801bab6:	6013      	str	r3, [r2, #0]
 801bab8:	4b81      	ldr	r3, [pc, #516]	; (801bcc0 <HAL_RCC_OscConfig+0x2ac>)
 801baba:	681b      	ldr	r3, [r3, #0]
 801babc:	4a80      	ldr	r2, [pc, #512]	; (801bcc0 <HAL_RCC_OscConfig+0x2ac>)
 801babe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801bac2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 801bac4:	687b      	ldr	r3, [r7, #4]
 801bac6:	685b      	ldr	r3, [r3, #4]
 801bac8:	2b00      	cmp	r3, #0
 801baca:	d013      	beq.n	801baf4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801bacc:	f7fd f9de 	bl	8018e8c <HAL_GetTick>
 801bad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801bad2:	e008      	b.n	801bae6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801bad4:	f7fd f9da 	bl	8018e8c <HAL_GetTick>
 801bad8:	4602      	mov	r2, r0
 801bada:	693b      	ldr	r3, [r7, #16]
 801badc:	1ad3      	subs	r3, r2, r3
 801bade:	2b64      	cmp	r3, #100	; 0x64
 801bae0:	d901      	bls.n	801bae6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 801bae2:	2303      	movs	r3, #3
 801bae4:	e1fb      	b.n	801bede <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801bae6:	4b76      	ldr	r3, [pc, #472]	; (801bcc0 <HAL_RCC_OscConfig+0x2ac>)
 801bae8:	681b      	ldr	r3, [r3, #0]
 801baea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801baee:	2b00      	cmp	r3, #0
 801baf0:	d0f0      	beq.n	801bad4 <HAL_RCC_OscConfig+0xc0>
 801baf2:	e014      	b.n	801bb1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801baf4:	f7fd f9ca 	bl	8018e8c <HAL_GetTick>
 801baf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801bafa:	e008      	b.n	801bb0e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801bafc:	f7fd f9c6 	bl	8018e8c <HAL_GetTick>
 801bb00:	4602      	mov	r2, r0
 801bb02:	693b      	ldr	r3, [r7, #16]
 801bb04:	1ad3      	subs	r3, r2, r3
 801bb06:	2b64      	cmp	r3, #100	; 0x64
 801bb08:	d901      	bls.n	801bb0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801bb0a:	2303      	movs	r3, #3
 801bb0c:	e1e7      	b.n	801bede <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801bb0e:	4b6c      	ldr	r3, [pc, #432]	; (801bcc0 <HAL_RCC_OscConfig+0x2ac>)
 801bb10:	681b      	ldr	r3, [r3, #0]
 801bb12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801bb16:	2b00      	cmp	r3, #0
 801bb18:	d1f0      	bne.n	801bafc <HAL_RCC_OscConfig+0xe8>
 801bb1a:	e000      	b.n	801bb1e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801bb1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801bb1e:	687b      	ldr	r3, [r7, #4]
 801bb20:	681b      	ldr	r3, [r3, #0]
 801bb22:	f003 0302 	and.w	r3, r3, #2
 801bb26:	2b00      	cmp	r3, #0
 801bb28:	d063      	beq.n	801bbf2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801bb2a:	4b65      	ldr	r3, [pc, #404]	; (801bcc0 <HAL_RCC_OscConfig+0x2ac>)
 801bb2c:	689b      	ldr	r3, [r3, #8]
 801bb2e:	f003 030c 	and.w	r3, r3, #12
 801bb32:	2b00      	cmp	r3, #0
 801bb34:	d00b      	beq.n	801bb4e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801bb36:	4b62      	ldr	r3, [pc, #392]	; (801bcc0 <HAL_RCC_OscConfig+0x2ac>)
 801bb38:	689b      	ldr	r3, [r3, #8]
 801bb3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801bb3e:	2b08      	cmp	r3, #8
 801bb40:	d11c      	bne.n	801bb7c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801bb42:	4b5f      	ldr	r3, [pc, #380]	; (801bcc0 <HAL_RCC_OscConfig+0x2ac>)
 801bb44:	685b      	ldr	r3, [r3, #4]
 801bb46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801bb4a:	2b00      	cmp	r3, #0
 801bb4c:	d116      	bne.n	801bb7c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801bb4e:	4b5c      	ldr	r3, [pc, #368]	; (801bcc0 <HAL_RCC_OscConfig+0x2ac>)
 801bb50:	681b      	ldr	r3, [r3, #0]
 801bb52:	f003 0302 	and.w	r3, r3, #2
 801bb56:	2b00      	cmp	r3, #0
 801bb58:	d005      	beq.n	801bb66 <HAL_RCC_OscConfig+0x152>
 801bb5a:	687b      	ldr	r3, [r7, #4]
 801bb5c:	68db      	ldr	r3, [r3, #12]
 801bb5e:	2b01      	cmp	r3, #1
 801bb60:	d001      	beq.n	801bb66 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 801bb62:	2301      	movs	r3, #1
 801bb64:	e1bb      	b.n	801bede <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801bb66:	4b56      	ldr	r3, [pc, #344]	; (801bcc0 <HAL_RCC_OscConfig+0x2ac>)
 801bb68:	681b      	ldr	r3, [r3, #0]
 801bb6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801bb6e:	687b      	ldr	r3, [r7, #4]
 801bb70:	691b      	ldr	r3, [r3, #16]
 801bb72:	00db      	lsls	r3, r3, #3
 801bb74:	4952      	ldr	r1, [pc, #328]	; (801bcc0 <HAL_RCC_OscConfig+0x2ac>)
 801bb76:	4313      	orrs	r3, r2
 801bb78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801bb7a:	e03a      	b.n	801bbf2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 801bb7c:	687b      	ldr	r3, [r7, #4]
 801bb7e:	68db      	ldr	r3, [r3, #12]
 801bb80:	2b00      	cmp	r3, #0
 801bb82:	d020      	beq.n	801bbc6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801bb84:	4b4f      	ldr	r3, [pc, #316]	; (801bcc4 <HAL_RCC_OscConfig+0x2b0>)
 801bb86:	2201      	movs	r2, #1
 801bb88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bb8a:	f7fd f97f 	bl	8018e8c <HAL_GetTick>
 801bb8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801bb90:	e008      	b.n	801bba4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801bb92:	f7fd f97b 	bl	8018e8c <HAL_GetTick>
 801bb96:	4602      	mov	r2, r0
 801bb98:	693b      	ldr	r3, [r7, #16]
 801bb9a:	1ad3      	subs	r3, r2, r3
 801bb9c:	2b02      	cmp	r3, #2
 801bb9e:	d901      	bls.n	801bba4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 801bba0:	2303      	movs	r3, #3
 801bba2:	e19c      	b.n	801bede <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801bba4:	4b46      	ldr	r3, [pc, #280]	; (801bcc0 <HAL_RCC_OscConfig+0x2ac>)
 801bba6:	681b      	ldr	r3, [r3, #0]
 801bba8:	f003 0302 	and.w	r3, r3, #2
 801bbac:	2b00      	cmp	r3, #0
 801bbae:	d0f0      	beq.n	801bb92 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801bbb0:	4b43      	ldr	r3, [pc, #268]	; (801bcc0 <HAL_RCC_OscConfig+0x2ac>)
 801bbb2:	681b      	ldr	r3, [r3, #0]
 801bbb4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801bbb8:	687b      	ldr	r3, [r7, #4]
 801bbba:	691b      	ldr	r3, [r3, #16]
 801bbbc:	00db      	lsls	r3, r3, #3
 801bbbe:	4940      	ldr	r1, [pc, #256]	; (801bcc0 <HAL_RCC_OscConfig+0x2ac>)
 801bbc0:	4313      	orrs	r3, r2
 801bbc2:	600b      	str	r3, [r1, #0]
 801bbc4:	e015      	b.n	801bbf2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801bbc6:	4b3f      	ldr	r3, [pc, #252]	; (801bcc4 <HAL_RCC_OscConfig+0x2b0>)
 801bbc8:	2200      	movs	r2, #0
 801bbca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bbcc:	f7fd f95e 	bl	8018e8c <HAL_GetTick>
 801bbd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801bbd2:	e008      	b.n	801bbe6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801bbd4:	f7fd f95a 	bl	8018e8c <HAL_GetTick>
 801bbd8:	4602      	mov	r2, r0
 801bbda:	693b      	ldr	r3, [r7, #16]
 801bbdc:	1ad3      	subs	r3, r2, r3
 801bbde:	2b02      	cmp	r3, #2
 801bbe0:	d901      	bls.n	801bbe6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 801bbe2:	2303      	movs	r3, #3
 801bbe4:	e17b      	b.n	801bede <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801bbe6:	4b36      	ldr	r3, [pc, #216]	; (801bcc0 <HAL_RCC_OscConfig+0x2ac>)
 801bbe8:	681b      	ldr	r3, [r3, #0]
 801bbea:	f003 0302 	and.w	r3, r3, #2
 801bbee:	2b00      	cmp	r3, #0
 801bbf0:	d1f0      	bne.n	801bbd4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801bbf2:	687b      	ldr	r3, [r7, #4]
 801bbf4:	681b      	ldr	r3, [r3, #0]
 801bbf6:	f003 0308 	and.w	r3, r3, #8
 801bbfa:	2b00      	cmp	r3, #0
 801bbfc:	d030      	beq.n	801bc60 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 801bbfe:	687b      	ldr	r3, [r7, #4]
 801bc00:	695b      	ldr	r3, [r3, #20]
 801bc02:	2b00      	cmp	r3, #0
 801bc04:	d016      	beq.n	801bc34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801bc06:	4b30      	ldr	r3, [pc, #192]	; (801bcc8 <HAL_RCC_OscConfig+0x2b4>)
 801bc08:	2201      	movs	r2, #1
 801bc0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801bc0c:	f7fd f93e 	bl	8018e8c <HAL_GetTick>
 801bc10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801bc12:	e008      	b.n	801bc26 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801bc14:	f7fd f93a 	bl	8018e8c <HAL_GetTick>
 801bc18:	4602      	mov	r2, r0
 801bc1a:	693b      	ldr	r3, [r7, #16]
 801bc1c:	1ad3      	subs	r3, r2, r3
 801bc1e:	2b02      	cmp	r3, #2
 801bc20:	d901      	bls.n	801bc26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 801bc22:	2303      	movs	r3, #3
 801bc24:	e15b      	b.n	801bede <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801bc26:	4b26      	ldr	r3, [pc, #152]	; (801bcc0 <HAL_RCC_OscConfig+0x2ac>)
 801bc28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801bc2a:	f003 0302 	and.w	r3, r3, #2
 801bc2e:	2b00      	cmp	r3, #0
 801bc30:	d0f0      	beq.n	801bc14 <HAL_RCC_OscConfig+0x200>
 801bc32:	e015      	b.n	801bc60 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801bc34:	4b24      	ldr	r3, [pc, #144]	; (801bcc8 <HAL_RCC_OscConfig+0x2b4>)
 801bc36:	2200      	movs	r2, #0
 801bc38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801bc3a:	f7fd f927 	bl	8018e8c <HAL_GetTick>
 801bc3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801bc40:	e008      	b.n	801bc54 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801bc42:	f7fd f923 	bl	8018e8c <HAL_GetTick>
 801bc46:	4602      	mov	r2, r0
 801bc48:	693b      	ldr	r3, [r7, #16]
 801bc4a:	1ad3      	subs	r3, r2, r3
 801bc4c:	2b02      	cmp	r3, #2
 801bc4e:	d901      	bls.n	801bc54 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 801bc50:	2303      	movs	r3, #3
 801bc52:	e144      	b.n	801bede <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801bc54:	4b1a      	ldr	r3, [pc, #104]	; (801bcc0 <HAL_RCC_OscConfig+0x2ac>)
 801bc56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801bc58:	f003 0302 	and.w	r3, r3, #2
 801bc5c:	2b00      	cmp	r3, #0
 801bc5e:	d1f0      	bne.n	801bc42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801bc60:	687b      	ldr	r3, [r7, #4]
 801bc62:	681b      	ldr	r3, [r3, #0]
 801bc64:	f003 0304 	and.w	r3, r3, #4
 801bc68:	2b00      	cmp	r3, #0
 801bc6a:	f000 80a0 	beq.w	801bdae <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 801bc6e:	2300      	movs	r3, #0
 801bc70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801bc72:	4b13      	ldr	r3, [pc, #76]	; (801bcc0 <HAL_RCC_OscConfig+0x2ac>)
 801bc74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bc76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801bc7a:	2b00      	cmp	r3, #0
 801bc7c:	d10f      	bne.n	801bc9e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801bc7e:	2300      	movs	r3, #0
 801bc80:	60bb      	str	r3, [r7, #8]
 801bc82:	4b0f      	ldr	r3, [pc, #60]	; (801bcc0 <HAL_RCC_OscConfig+0x2ac>)
 801bc84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bc86:	4a0e      	ldr	r2, [pc, #56]	; (801bcc0 <HAL_RCC_OscConfig+0x2ac>)
 801bc88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801bc8c:	6413      	str	r3, [r2, #64]	; 0x40
 801bc8e:	4b0c      	ldr	r3, [pc, #48]	; (801bcc0 <HAL_RCC_OscConfig+0x2ac>)
 801bc90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bc92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801bc96:	60bb      	str	r3, [r7, #8]
 801bc98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801bc9a:	2301      	movs	r3, #1
 801bc9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801bc9e:	4b0b      	ldr	r3, [pc, #44]	; (801bccc <HAL_RCC_OscConfig+0x2b8>)
 801bca0:	681b      	ldr	r3, [r3, #0]
 801bca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801bca6:	2b00      	cmp	r3, #0
 801bca8:	d121      	bne.n	801bcee <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801bcaa:	4b08      	ldr	r3, [pc, #32]	; (801bccc <HAL_RCC_OscConfig+0x2b8>)
 801bcac:	681b      	ldr	r3, [r3, #0]
 801bcae:	4a07      	ldr	r2, [pc, #28]	; (801bccc <HAL_RCC_OscConfig+0x2b8>)
 801bcb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801bcb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801bcb6:	f7fd f8e9 	bl	8018e8c <HAL_GetTick>
 801bcba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801bcbc:	e011      	b.n	801bce2 <HAL_RCC_OscConfig+0x2ce>
 801bcbe:	bf00      	nop
 801bcc0:	40023800 	.word	0x40023800
 801bcc4:	42470000 	.word	0x42470000
 801bcc8:	42470e80 	.word	0x42470e80
 801bccc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801bcd0:	f7fd f8dc 	bl	8018e8c <HAL_GetTick>
 801bcd4:	4602      	mov	r2, r0
 801bcd6:	693b      	ldr	r3, [r7, #16]
 801bcd8:	1ad3      	subs	r3, r2, r3
 801bcda:	2b02      	cmp	r3, #2
 801bcdc:	d901      	bls.n	801bce2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 801bcde:	2303      	movs	r3, #3
 801bce0:	e0fd      	b.n	801bede <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801bce2:	4b81      	ldr	r3, [pc, #516]	; (801bee8 <HAL_RCC_OscConfig+0x4d4>)
 801bce4:	681b      	ldr	r3, [r3, #0]
 801bce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801bcea:	2b00      	cmp	r3, #0
 801bcec:	d0f0      	beq.n	801bcd0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801bcee:	687b      	ldr	r3, [r7, #4]
 801bcf0:	689b      	ldr	r3, [r3, #8]
 801bcf2:	2b01      	cmp	r3, #1
 801bcf4:	d106      	bne.n	801bd04 <HAL_RCC_OscConfig+0x2f0>
 801bcf6:	4b7d      	ldr	r3, [pc, #500]	; (801beec <HAL_RCC_OscConfig+0x4d8>)
 801bcf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bcfa:	4a7c      	ldr	r2, [pc, #496]	; (801beec <HAL_RCC_OscConfig+0x4d8>)
 801bcfc:	f043 0301 	orr.w	r3, r3, #1
 801bd00:	6713      	str	r3, [r2, #112]	; 0x70
 801bd02:	e01c      	b.n	801bd3e <HAL_RCC_OscConfig+0x32a>
 801bd04:	687b      	ldr	r3, [r7, #4]
 801bd06:	689b      	ldr	r3, [r3, #8]
 801bd08:	2b05      	cmp	r3, #5
 801bd0a:	d10c      	bne.n	801bd26 <HAL_RCC_OscConfig+0x312>
 801bd0c:	4b77      	ldr	r3, [pc, #476]	; (801beec <HAL_RCC_OscConfig+0x4d8>)
 801bd0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bd10:	4a76      	ldr	r2, [pc, #472]	; (801beec <HAL_RCC_OscConfig+0x4d8>)
 801bd12:	f043 0304 	orr.w	r3, r3, #4
 801bd16:	6713      	str	r3, [r2, #112]	; 0x70
 801bd18:	4b74      	ldr	r3, [pc, #464]	; (801beec <HAL_RCC_OscConfig+0x4d8>)
 801bd1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bd1c:	4a73      	ldr	r2, [pc, #460]	; (801beec <HAL_RCC_OscConfig+0x4d8>)
 801bd1e:	f043 0301 	orr.w	r3, r3, #1
 801bd22:	6713      	str	r3, [r2, #112]	; 0x70
 801bd24:	e00b      	b.n	801bd3e <HAL_RCC_OscConfig+0x32a>
 801bd26:	4b71      	ldr	r3, [pc, #452]	; (801beec <HAL_RCC_OscConfig+0x4d8>)
 801bd28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bd2a:	4a70      	ldr	r2, [pc, #448]	; (801beec <HAL_RCC_OscConfig+0x4d8>)
 801bd2c:	f023 0301 	bic.w	r3, r3, #1
 801bd30:	6713      	str	r3, [r2, #112]	; 0x70
 801bd32:	4b6e      	ldr	r3, [pc, #440]	; (801beec <HAL_RCC_OscConfig+0x4d8>)
 801bd34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bd36:	4a6d      	ldr	r2, [pc, #436]	; (801beec <HAL_RCC_OscConfig+0x4d8>)
 801bd38:	f023 0304 	bic.w	r3, r3, #4
 801bd3c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801bd3e:	687b      	ldr	r3, [r7, #4]
 801bd40:	689b      	ldr	r3, [r3, #8]
 801bd42:	2b00      	cmp	r3, #0
 801bd44:	d015      	beq.n	801bd72 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801bd46:	f7fd f8a1 	bl	8018e8c <HAL_GetTick>
 801bd4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801bd4c:	e00a      	b.n	801bd64 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801bd4e:	f7fd f89d 	bl	8018e8c <HAL_GetTick>
 801bd52:	4602      	mov	r2, r0
 801bd54:	693b      	ldr	r3, [r7, #16]
 801bd56:	1ad3      	subs	r3, r2, r3
 801bd58:	f241 3288 	movw	r2, #5000	; 0x1388
 801bd5c:	4293      	cmp	r3, r2
 801bd5e:	d901      	bls.n	801bd64 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 801bd60:	2303      	movs	r3, #3
 801bd62:	e0bc      	b.n	801bede <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801bd64:	4b61      	ldr	r3, [pc, #388]	; (801beec <HAL_RCC_OscConfig+0x4d8>)
 801bd66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bd68:	f003 0302 	and.w	r3, r3, #2
 801bd6c:	2b00      	cmp	r3, #0
 801bd6e:	d0ee      	beq.n	801bd4e <HAL_RCC_OscConfig+0x33a>
 801bd70:	e014      	b.n	801bd9c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801bd72:	f7fd f88b 	bl	8018e8c <HAL_GetTick>
 801bd76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801bd78:	e00a      	b.n	801bd90 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801bd7a:	f7fd f887 	bl	8018e8c <HAL_GetTick>
 801bd7e:	4602      	mov	r2, r0
 801bd80:	693b      	ldr	r3, [r7, #16]
 801bd82:	1ad3      	subs	r3, r2, r3
 801bd84:	f241 3288 	movw	r2, #5000	; 0x1388
 801bd88:	4293      	cmp	r3, r2
 801bd8a:	d901      	bls.n	801bd90 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 801bd8c:	2303      	movs	r3, #3
 801bd8e:	e0a6      	b.n	801bede <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801bd90:	4b56      	ldr	r3, [pc, #344]	; (801beec <HAL_RCC_OscConfig+0x4d8>)
 801bd92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bd94:	f003 0302 	and.w	r3, r3, #2
 801bd98:	2b00      	cmp	r3, #0
 801bd9a:	d1ee      	bne.n	801bd7a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801bd9c:	7dfb      	ldrb	r3, [r7, #23]
 801bd9e:	2b01      	cmp	r3, #1
 801bda0:	d105      	bne.n	801bdae <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801bda2:	4b52      	ldr	r3, [pc, #328]	; (801beec <HAL_RCC_OscConfig+0x4d8>)
 801bda4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bda6:	4a51      	ldr	r2, [pc, #324]	; (801beec <HAL_RCC_OscConfig+0x4d8>)
 801bda8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801bdac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801bdae:	687b      	ldr	r3, [r7, #4]
 801bdb0:	699b      	ldr	r3, [r3, #24]
 801bdb2:	2b00      	cmp	r3, #0
 801bdb4:	f000 8092 	beq.w	801bedc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 801bdb8:	4b4c      	ldr	r3, [pc, #304]	; (801beec <HAL_RCC_OscConfig+0x4d8>)
 801bdba:	689b      	ldr	r3, [r3, #8]
 801bdbc:	f003 030c 	and.w	r3, r3, #12
 801bdc0:	2b08      	cmp	r3, #8
 801bdc2:	d05c      	beq.n	801be7e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801bdc4:	687b      	ldr	r3, [r7, #4]
 801bdc6:	699b      	ldr	r3, [r3, #24]
 801bdc8:	2b02      	cmp	r3, #2
 801bdca:	d141      	bne.n	801be50 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801bdcc:	4b48      	ldr	r3, [pc, #288]	; (801bef0 <HAL_RCC_OscConfig+0x4dc>)
 801bdce:	2200      	movs	r2, #0
 801bdd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801bdd2:	f7fd f85b 	bl	8018e8c <HAL_GetTick>
 801bdd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801bdd8:	e008      	b.n	801bdec <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801bdda:	f7fd f857 	bl	8018e8c <HAL_GetTick>
 801bdde:	4602      	mov	r2, r0
 801bde0:	693b      	ldr	r3, [r7, #16]
 801bde2:	1ad3      	subs	r3, r2, r3
 801bde4:	2b02      	cmp	r3, #2
 801bde6:	d901      	bls.n	801bdec <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 801bde8:	2303      	movs	r3, #3
 801bdea:	e078      	b.n	801bede <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801bdec:	4b3f      	ldr	r3, [pc, #252]	; (801beec <HAL_RCC_OscConfig+0x4d8>)
 801bdee:	681b      	ldr	r3, [r3, #0]
 801bdf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801bdf4:	2b00      	cmp	r3, #0
 801bdf6:	d1f0      	bne.n	801bdda <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 801bdf8:	687b      	ldr	r3, [r7, #4]
 801bdfa:	69da      	ldr	r2, [r3, #28]
 801bdfc:	687b      	ldr	r3, [r7, #4]
 801bdfe:	6a1b      	ldr	r3, [r3, #32]
 801be00:	431a      	orrs	r2, r3
 801be02:	687b      	ldr	r3, [r7, #4]
 801be04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801be06:	019b      	lsls	r3, r3, #6
 801be08:	431a      	orrs	r2, r3
 801be0a:	687b      	ldr	r3, [r7, #4]
 801be0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801be0e:	085b      	lsrs	r3, r3, #1
 801be10:	3b01      	subs	r3, #1
 801be12:	041b      	lsls	r3, r3, #16
 801be14:	431a      	orrs	r2, r3
 801be16:	687b      	ldr	r3, [r7, #4]
 801be18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801be1a:	061b      	lsls	r3, r3, #24
 801be1c:	4933      	ldr	r1, [pc, #204]	; (801beec <HAL_RCC_OscConfig+0x4d8>)
 801be1e:	4313      	orrs	r3, r2
 801be20:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801be22:	4b33      	ldr	r3, [pc, #204]	; (801bef0 <HAL_RCC_OscConfig+0x4dc>)
 801be24:	2201      	movs	r2, #1
 801be26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801be28:	f7fd f830 	bl	8018e8c <HAL_GetTick>
 801be2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801be2e:	e008      	b.n	801be42 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801be30:	f7fd f82c 	bl	8018e8c <HAL_GetTick>
 801be34:	4602      	mov	r2, r0
 801be36:	693b      	ldr	r3, [r7, #16]
 801be38:	1ad3      	subs	r3, r2, r3
 801be3a:	2b02      	cmp	r3, #2
 801be3c:	d901      	bls.n	801be42 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 801be3e:	2303      	movs	r3, #3
 801be40:	e04d      	b.n	801bede <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801be42:	4b2a      	ldr	r3, [pc, #168]	; (801beec <HAL_RCC_OscConfig+0x4d8>)
 801be44:	681b      	ldr	r3, [r3, #0]
 801be46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801be4a:	2b00      	cmp	r3, #0
 801be4c:	d0f0      	beq.n	801be30 <HAL_RCC_OscConfig+0x41c>
 801be4e:	e045      	b.n	801bedc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801be50:	4b27      	ldr	r3, [pc, #156]	; (801bef0 <HAL_RCC_OscConfig+0x4dc>)
 801be52:	2200      	movs	r2, #0
 801be54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801be56:	f7fd f819 	bl	8018e8c <HAL_GetTick>
 801be5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801be5c:	e008      	b.n	801be70 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801be5e:	f7fd f815 	bl	8018e8c <HAL_GetTick>
 801be62:	4602      	mov	r2, r0
 801be64:	693b      	ldr	r3, [r7, #16]
 801be66:	1ad3      	subs	r3, r2, r3
 801be68:	2b02      	cmp	r3, #2
 801be6a:	d901      	bls.n	801be70 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 801be6c:	2303      	movs	r3, #3
 801be6e:	e036      	b.n	801bede <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801be70:	4b1e      	ldr	r3, [pc, #120]	; (801beec <HAL_RCC_OscConfig+0x4d8>)
 801be72:	681b      	ldr	r3, [r3, #0]
 801be74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801be78:	2b00      	cmp	r3, #0
 801be7a:	d1f0      	bne.n	801be5e <HAL_RCC_OscConfig+0x44a>
 801be7c:	e02e      	b.n	801bedc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801be7e:	687b      	ldr	r3, [r7, #4]
 801be80:	699b      	ldr	r3, [r3, #24]
 801be82:	2b01      	cmp	r3, #1
 801be84:	d101      	bne.n	801be8a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 801be86:	2301      	movs	r3, #1
 801be88:	e029      	b.n	801bede <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 801be8a:	4b18      	ldr	r3, [pc, #96]	; (801beec <HAL_RCC_OscConfig+0x4d8>)
 801be8c:	685b      	ldr	r3, [r3, #4]
 801be8e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801be90:	68fb      	ldr	r3, [r7, #12]
 801be92:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 801be96:	687b      	ldr	r3, [r7, #4]
 801be98:	69db      	ldr	r3, [r3, #28]
 801be9a:	429a      	cmp	r2, r3
 801be9c:	d11c      	bne.n	801bed8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801be9e:	68fb      	ldr	r3, [r7, #12]
 801bea0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801bea4:	687b      	ldr	r3, [r7, #4]
 801bea6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801bea8:	429a      	cmp	r2, r3
 801beaa:	d115      	bne.n	801bed8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 801beac:	68fa      	ldr	r2, [r7, #12]
 801beae:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 801beb2:	4013      	ands	r3, r2
 801beb4:	687a      	ldr	r2, [r7, #4]
 801beb6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801beb8:	4293      	cmp	r3, r2
 801beba:	d10d      	bne.n	801bed8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 801bebc:	68fb      	ldr	r3, [r7, #12]
 801bebe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 801bec2:	687b      	ldr	r3, [r7, #4]
 801bec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 801bec6:	429a      	cmp	r2, r3
 801bec8:	d106      	bne.n	801bed8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 801beca:	68fb      	ldr	r3, [r7, #12]
 801becc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 801bed0:	687b      	ldr	r3, [r7, #4]
 801bed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 801bed4:	429a      	cmp	r2, r3
 801bed6:	d001      	beq.n	801bedc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 801bed8:	2301      	movs	r3, #1
 801beda:	e000      	b.n	801bede <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 801bedc:	2300      	movs	r3, #0
}
 801bede:	4618      	mov	r0, r3
 801bee0:	3718      	adds	r7, #24
 801bee2:	46bd      	mov	sp, r7
 801bee4:	bd80      	pop	{r7, pc}
 801bee6:	bf00      	nop
 801bee8:	40007000 	.word	0x40007000
 801beec:	40023800 	.word	0x40023800
 801bef0:	42470060 	.word	0x42470060

0801bef4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801bef4:	b580      	push	{r7, lr}
 801bef6:	b084      	sub	sp, #16
 801bef8:	af00      	add	r7, sp, #0
 801befa:	6078      	str	r0, [r7, #4]
 801befc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801befe:	687b      	ldr	r3, [r7, #4]
 801bf00:	2b00      	cmp	r3, #0
 801bf02:	d101      	bne.n	801bf08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801bf04:	2301      	movs	r3, #1
 801bf06:	e0cc      	b.n	801c0a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801bf08:	4b68      	ldr	r3, [pc, #416]	; (801c0ac <HAL_RCC_ClockConfig+0x1b8>)
 801bf0a:	681b      	ldr	r3, [r3, #0]
 801bf0c:	f003 030f 	and.w	r3, r3, #15
 801bf10:	683a      	ldr	r2, [r7, #0]
 801bf12:	429a      	cmp	r2, r3
 801bf14:	d90c      	bls.n	801bf30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801bf16:	4b65      	ldr	r3, [pc, #404]	; (801c0ac <HAL_RCC_ClockConfig+0x1b8>)
 801bf18:	683a      	ldr	r2, [r7, #0]
 801bf1a:	b2d2      	uxtb	r2, r2
 801bf1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801bf1e:	4b63      	ldr	r3, [pc, #396]	; (801c0ac <HAL_RCC_ClockConfig+0x1b8>)
 801bf20:	681b      	ldr	r3, [r3, #0]
 801bf22:	f003 030f 	and.w	r3, r3, #15
 801bf26:	683a      	ldr	r2, [r7, #0]
 801bf28:	429a      	cmp	r2, r3
 801bf2a:	d001      	beq.n	801bf30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 801bf2c:	2301      	movs	r3, #1
 801bf2e:	e0b8      	b.n	801c0a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801bf30:	687b      	ldr	r3, [r7, #4]
 801bf32:	681b      	ldr	r3, [r3, #0]
 801bf34:	f003 0302 	and.w	r3, r3, #2
 801bf38:	2b00      	cmp	r3, #0
 801bf3a:	d020      	beq.n	801bf7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801bf3c:	687b      	ldr	r3, [r7, #4]
 801bf3e:	681b      	ldr	r3, [r3, #0]
 801bf40:	f003 0304 	and.w	r3, r3, #4
 801bf44:	2b00      	cmp	r3, #0
 801bf46:	d005      	beq.n	801bf54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801bf48:	4b59      	ldr	r3, [pc, #356]	; (801c0b0 <HAL_RCC_ClockConfig+0x1bc>)
 801bf4a:	689b      	ldr	r3, [r3, #8]
 801bf4c:	4a58      	ldr	r2, [pc, #352]	; (801c0b0 <HAL_RCC_ClockConfig+0x1bc>)
 801bf4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 801bf52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801bf54:	687b      	ldr	r3, [r7, #4]
 801bf56:	681b      	ldr	r3, [r3, #0]
 801bf58:	f003 0308 	and.w	r3, r3, #8
 801bf5c:	2b00      	cmp	r3, #0
 801bf5e:	d005      	beq.n	801bf6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 801bf60:	4b53      	ldr	r3, [pc, #332]	; (801c0b0 <HAL_RCC_ClockConfig+0x1bc>)
 801bf62:	689b      	ldr	r3, [r3, #8]
 801bf64:	4a52      	ldr	r2, [pc, #328]	; (801c0b0 <HAL_RCC_ClockConfig+0x1bc>)
 801bf66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 801bf6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801bf6c:	4b50      	ldr	r3, [pc, #320]	; (801c0b0 <HAL_RCC_ClockConfig+0x1bc>)
 801bf6e:	689b      	ldr	r3, [r3, #8]
 801bf70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801bf74:	687b      	ldr	r3, [r7, #4]
 801bf76:	689b      	ldr	r3, [r3, #8]
 801bf78:	494d      	ldr	r1, [pc, #308]	; (801c0b0 <HAL_RCC_ClockConfig+0x1bc>)
 801bf7a:	4313      	orrs	r3, r2
 801bf7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801bf7e:	687b      	ldr	r3, [r7, #4]
 801bf80:	681b      	ldr	r3, [r3, #0]
 801bf82:	f003 0301 	and.w	r3, r3, #1
 801bf86:	2b00      	cmp	r3, #0
 801bf88:	d044      	beq.n	801c014 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801bf8a:	687b      	ldr	r3, [r7, #4]
 801bf8c:	685b      	ldr	r3, [r3, #4]
 801bf8e:	2b01      	cmp	r3, #1
 801bf90:	d107      	bne.n	801bfa2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801bf92:	4b47      	ldr	r3, [pc, #284]	; (801c0b0 <HAL_RCC_ClockConfig+0x1bc>)
 801bf94:	681b      	ldr	r3, [r3, #0]
 801bf96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801bf9a:	2b00      	cmp	r3, #0
 801bf9c:	d119      	bne.n	801bfd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801bf9e:	2301      	movs	r3, #1
 801bfa0:	e07f      	b.n	801c0a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801bfa2:	687b      	ldr	r3, [r7, #4]
 801bfa4:	685b      	ldr	r3, [r3, #4]
 801bfa6:	2b02      	cmp	r3, #2
 801bfa8:	d003      	beq.n	801bfb2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 801bfaa:	687b      	ldr	r3, [r7, #4]
 801bfac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801bfae:	2b03      	cmp	r3, #3
 801bfb0:	d107      	bne.n	801bfc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801bfb2:	4b3f      	ldr	r3, [pc, #252]	; (801c0b0 <HAL_RCC_ClockConfig+0x1bc>)
 801bfb4:	681b      	ldr	r3, [r3, #0]
 801bfb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801bfba:	2b00      	cmp	r3, #0
 801bfbc:	d109      	bne.n	801bfd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801bfbe:	2301      	movs	r3, #1
 801bfc0:	e06f      	b.n	801c0a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801bfc2:	4b3b      	ldr	r3, [pc, #236]	; (801c0b0 <HAL_RCC_ClockConfig+0x1bc>)
 801bfc4:	681b      	ldr	r3, [r3, #0]
 801bfc6:	f003 0302 	and.w	r3, r3, #2
 801bfca:	2b00      	cmp	r3, #0
 801bfcc:	d101      	bne.n	801bfd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801bfce:	2301      	movs	r3, #1
 801bfd0:	e067      	b.n	801c0a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801bfd2:	4b37      	ldr	r3, [pc, #220]	; (801c0b0 <HAL_RCC_ClockConfig+0x1bc>)
 801bfd4:	689b      	ldr	r3, [r3, #8]
 801bfd6:	f023 0203 	bic.w	r2, r3, #3
 801bfda:	687b      	ldr	r3, [r7, #4]
 801bfdc:	685b      	ldr	r3, [r3, #4]
 801bfde:	4934      	ldr	r1, [pc, #208]	; (801c0b0 <HAL_RCC_ClockConfig+0x1bc>)
 801bfe0:	4313      	orrs	r3, r2
 801bfe2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801bfe4:	f7fc ff52 	bl	8018e8c <HAL_GetTick>
 801bfe8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801bfea:	e00a      	b.n	801c002 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801bfec:	f7fc ff4e 	bl	8018e8c <HAL_GetTick>
 801bff0:	4602      	mov	r2, r0
 801bff2:	68fb      	ldr	r3, [r7, #12]
 801bff4:	1ad3      	subs	r3, r2, r3
 801bff6:	f241 3288 	movw	r2, #5000	; 0x1388
 801bffa:	4293      	cmp	r3, r2
 801bffc:	d901      	bls.n	801c002 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 801bffe:	2303      	movs	r3, #3
 801c000:	e04f      	b.n	801c0a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801c002:	4b2b      	ldr	r3, [pc, #172]	; (801c0b0 <HAL_RCC_ClockConfig+0x1bc>)
 801c004:	689b      	ldr	r3, [r3, #8]
 801c006:	f003 020c 	and.w	r2, r3, #12
 801c00a:	687b      	ldr	r3, [r7, #4]
 801c00c:	685b      	ldr	r3, [r3, #4]
 801c00e:	009b      	lsls	r3, r3, #2
 801c010:	429a      	cmp	r2, r3
 801c012:	d1eb      	bne.n	801bfec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801c014:	4b25      	ldr	r3, [pc, #148]	; (801c0ac <HAL_RCC_ClockConfig+0x1b8>)
 801c016:	681b      	ldr	r3, [r3, #0]
 801c018:	f003 030f 	and.w	r3, r3, #15
 801c01c:	683a      	ldr	r2, [r7, #0]
 801c01e:	429a      	cmp	r2, r3
 801c020:	d20c      	bcs.n	801c03c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801c022:	4b22      	ldr	r3, [pc, #136]	; (801c0ac <HAL_RCC_ClockConfig+0x1b8>)
 801c024:	683a      	ldr	r2, [r7, #0]
 801c026:	b2d2      	uxtb	r2, r2
 801c028:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801c02a:	4b20      	ldr	r3, [pc, #128]	; (801c0ac <HAL_RCC_ClockConfig+0x1b8>)
 801c02c:	681b      	ldr	r3, [r3, #0]
 801c02e:	f003 030f 	and.w	r3, r3, #15
 801c032:	683a      	ldr	r2, [r7, #0]
 801c034:	429a      	cmp	r2, r3
 801c036:	d001      	beq.n	801c03c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 801c038:	2301      	movs	r3, #1
 801c03a:	e032      	b.n	801c0a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801c03c:	687b      	ldr	r3, [r7, #4]
 801c03e:	681b      	ldr	r3, [r3, #0]
 801c040:	f003 0304 	and.w	r3, r3, #4
 801c044:	2b00      	cmp	r3, #0
 801c046:	d008      	beq.n	801c05a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801c048:	4b19      	ldr	r3, [pc, #100]	; (801c0b0 <HAL_RCC_ClockConfig+0x1bc>)
 801c04a:	689b      	ldr	r3, [r3, #8]
 801c04c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 801c050:	687b      	ldr	r3, [r7, #4]
 801c052:	68db      	ldr	r3, [r3, #12]
 801c054:	4916      	ldr	r1, [pc, #88]	; (801c0b0 <HAL_RCC_ClockConfig+0x1bc>)
 801c056:	4313      	orrs	r3, r2
 801c058:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801c05a:	687b      	ldr	r3, [r7, #4]
 801c05c:	681b      	ldr	r3, [r3, #0]
 801c05e:	f003 0308 	and.w	r3, r3, #8
 801c062:	2b00      	cmp	r3, #0
 801c064:	d009      	beq.n	801c07a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801c066:	4b12      	ldr	r3, [pc, #72]	; (801c0b0 <HAL_RCC_ClockConfig+0x1bc>)
 801c068:	689b      	ldr	r3, [r3, #8]
 801c06a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801c06e:	687b      	ldr	r3, [r7, #4]
 801c070:	691b      	ldr	r3, [r3, #16]
 801c072:	00db      	lsls	r3, r3, #3
 801c074:	490e      	ldr	r1, [pc, #56]	; (801c0b0 <HAL_RCC_ClockConfig+0x1bc>)
 801c076:	4313      	orrs	r3, r2
 801c078:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801c07a:	f000 f821 	bl	801c0c0 <HAL_RCC_GetSysClockFreq>
 801c07e:	4601      	mov	r1, r0
 801c080:	4b0b      	ldr	r3, [pc, #44]	; (801c0b0 <HAL_RCC_ClockConfig+0x1bc>)
 801c082:	689b      	ldr	r3, [r3, #8]
 801c084:	091b      	lsrs	r3, r3, #4
 801c086:	f003 030f 	and.w	r3, r3, #15
 801c08a:	4a0a      	ldr	r2, [pc, #40]	; (801c0b4 <HAL_RCC_ClockConfig+0x1c0>)
 801c08c:	5cd3      	ldrb	r3, [r2, r3]
 801c08e:	fa21 f303 	lsr.w	r3, r1, r3
 801c092:	4a09      	ldr	r2, [pc, #36]	; (801c0b8 <HAL_RCC_ClockConfig+0x1c4>)
 801c094:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 801c096:	4b09      	ldr	r3, [pc, #36]	; (801c0bc <HAL_RCC_ClockConfig+0x1c8>)
 801c098:	681b      	ldr	r3, [r3, #0]
 801c09a:	4618      	mov	r0, r3
 801c09c:	f7fc feb2 	bl	8018e04 <HAL_InitTick>

  return HAL_OK;
 801c0a0:	2300      	movs	r3, #0
}
 801c0a2:	4618      	mov	r0, r3
 801c0a4:	3710      	adds	r7, #16
 801c0a6:	46bd      	mov	sp, r7
 801c0a8:	bd80      	pop	{r7, pc}
 801c0aa:	bf00      	nop
 801c0ac:	40023c00 	.word	0x40023c00
 801c0b0:	40023800 	.word	0x40023800
 801c0b4:	080249a8 	.word	0x080249a8
 801c0b8:	200002b4 	.word	0x200002b4
 801c0bc:	200002b8 	.word	0x200002b8

0801c0c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801c0c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c0c2:	b085      	sub	sp, #20
 801c0c4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 801c0c6:	2300      	movs	r3, #0
 801c0c8:	607b      	str	r3, [r7, #4]
 801c0ca:	2300      	movs	r3, #0
 801c0cc:	60fb      	str	r3, [r7, #12]
 801c0ce:	2300      	movs	r3, #0
 801c0d0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 801c0d2:	2300      	movs	r3, #0
 801c0d4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801c0d6:	4b63      	ldr	r3, [pc, #396]	; (801c264 <HAL_RCC_GetSysClockFreq+0x1a4>)
 801c0d8:	689b      	ldr	r3, [r3, #8]
 801c0da:	f003 030c 	and.w	r3, r3, #12
 801c0de:	2b04      	cmp	r3, #4
 801c0e0:	d007      	beq.n	801c0f2 <HAL_RCC_GetSysClockFreq+0x32>
 801c0e2:	2b08      	cmp	r3, #8
 801c0e4:	d008      	beq.n	801c0f8 <HAL_RCC_GetSysClockFreq+0x38>
 801c0e6:	2b00      	cmp	r3, #0
 801c0e8:	f040 80b4 	bne.w	801c254 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 801c0ec:	4b5e      	ldr	r3, [pc, #376]	; (801c268 <HAL_RCC_GetSysClockFreq+0x1a8>)
 801c0ee:	60bb      	str	r3, [r7, #8]
       break;
 801c0f0:	e0b3      	b.n	801c25a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 801c0f2:	4b5e      	ldr	r3, [pc, #376]	; (801c26c <HAL_RCC_GetSysClockFreq+0x1ac>)
 801c0f4:	60bb      	str	r3, [r7, #8]
      break;
 801c0f6:	e0b0      	b.n	801c25a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801c0f8:	4b5a      	ldr	r3, [pc, #360]	; (801c264 <HAL_RCC_GetSysClockFreq+0x1a4>)
 801c0fa:	685b      	ldr	r3, [r3, #4]
 801c0fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801c100:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801c102:	4b58      	ldr	r3, [pc, #352]	; (801c264 <HAL_RCC_GetSysClockFreq+0x1a4>)
 801c104:	685b      	ldr	r3, [r3, #4]
 801c106:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801c10a:	2b00      	cmp	r3, #0
 801c10c:	d04a      	beq.n	801c1a4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801c10e:	4b55      	ldr	r3, [pc, #340]	; (801c264 <HAL_RCC_GetSysClockFreq+0x1a4>)
 801c110:	685b      	ldr	r3, [r3, #4]
 801c112:	099b      	lsrs	r3, r3, #6
 801c114:	f04f 0400 	mov.w	r4, #0
 801c118:	f240 11ff 	movw	r1, #511	; 0x1ff
 801c11c:	f04f 0200 	mov.w	r2, #0
 801c120:	ea03 0501 	and.w	r5, r3, r1
 801c124:	ea04 0602 	and.w	r6, r4, r2
 801c128:	4629      	mov	r1, r5
 801c12a:	4632      	mov	r2, r6
 801c12c:	f04f 0300 	mov.w	r3, #0
 801c130:	f04f 0400 	mov.w	r4, #0
 801c134:	0154      	lsls	r4, r2, #5
 801c136:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 801c13a:	014b      	lsls	r3, r1, #5
 801c13c:	4619      	mov	r1, r3
 801c13e:	4622      	mov	r2, r4
 801c140:	1b49      	subs	r1, r1, r5
 801c142:	eb62 0206 	sbc.w	r2, r2, r6
 801c146:	f04f 0300 	mov.w	r3, #0
 801c14a:	f04f 0400 	mov.w	r4, #0
 801c14e:	0194      	lsls	r4, r2, #6
 801c150:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 801c154:	018b      	lsls	r3, r1, #6
 801c156:	1a5b      	subs	r3, r3, r1
 801c158:	eb64 0402 	sbc.w	r4, r4, r2
 801c15c:	f04f 0100 	mov.w	r1, #0
 801c160:	f04f 0200 	mov.w	r2, #0
 801c164:	00e2      	lsls	r2, r4, #3
 801c166:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 801c16a:	00d9      	lsls	r1, r3, #3
 801c16c:	460b      	mov	r3, r1
 801c16e:	4614      	mov	r4, r2
 801c170:	195b      	adds	r3, r3, r5
 801c172:	eb44 0406 	adc.w	r4, r4, r6
 801c176:	f04f 0100 	mov.w	r1, #0
 801c17a:	f04f 0200 	mov.w	r2, #0
 801c17e:	0262      	lsls	r2, r4, #9
 801c180:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 801c184:	0259      	lsls	r1, r3, #9
 801c186:	460b      	mov	r3, r1
 801c188:	4614      	mov	r4, r2
 801c18a:	4618      	mov	r0, r3
 801c18c:	4621      	mov	r1, r4
 801c18e:	687b      	ldr	r3, [r7, #4]
 801c190:	f04f 0400 	mov.w	r4, #0
 801c194:	461a      	mov	r2, r3
 801c196:	4623      	mov	r3, r4
 801c198:	f7e4 fcf0 	bl	8000b7c <__aeabi_uldivmod>
 801c19c:	4603      	mov	r3, r0
 801c19e:	460c      	mov	r4, r1
 801c1a0:	60fb      	str	r3, [r7, #12]
 801c1a2:	e049      	b.n	801c238 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801c1a4:	4b2f      	ldr	r3, [pc, #188]	; (801c264 <HAL_RCC_GetSysClockFreq+0x1a4>)
 801c1a6:	685b      	ldr	r3, [r3, #4]
 801c1a8:	099b      	lsrs	r3, r3, #6
 801c1aa:	f04f 0400 	mov.w	r4, #0
 801c1ae:	f240 11ff 	movw	r1, #511	; 0x1ff
 801c1b2:	f04f 0200 	mov.w	r2, #0
 801c1b6:	ea03 0501 	and.w	r5, r3, r1
 801c1ba:	ea04 0602 	and.w	r6, r4, r2
 801c1be:	4629      	mov	r1, r5
 801c1c0:	4632      	mov	r2, r6
 801c1c2:	f04f 0300 	mov.w	r3, #0
 801c1c6:	f04f 0400 	mov.w	r4, #0
 801c1ca:	0154      	lsls	r4, r2, #5
 801c1cc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 801c1d0:	014b      	lsls	r3, r1, #5
 801c1d2:	4619      	mov	r1, r3
 801c1d4:	4622      	mov	r2, r4
 801c1d6:	1b49      	subs	r1, r1, r5
 801c1d8:	eb62 0206 	sbc.w	r2, r2, r6
 801c1dc:	f04f 0300 	mov.w	r3, #0
 801c1e0:	f04f 0400 	mov.w	r4, #0
 801c1e4:	0194      	lsls	r4, r2, #6
 801c1e6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 801c1ea:	018b      	lsls	r3, r1, #6
 801c1ec:	1a5b      	subs	r3, r3, r1
 801c1ee:	eb64 0402 	sbc.w	r4, r4, r2
 801c1f2:	f04f 0100 	mov.w	r1, #0
 801c1f6:	f04f 0200 	mov.w	r2, #0
 801c1fa:	00e2      	lsls	r2, r4, #3
 801c1fc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 801c200:	00d9      	lsls	r1, r3, #3
 801c202:	460b      	mov	r3, r1
 801c204:	4614      	mov	r4, r2
 801c206:	195b      	adds	r3, r3, r5
 801c208:	eb44 0406 	adc.w	r4, r4, r6
 801c20c:	f04f 0100 	mov.w	r1, #0
 801c210:	f04f 0200 	mov.w	r2, #0
 801c214:	02a2      	lsls	r2, r4, #10
 801c216:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 801c21a:	0299      	lsls	r1, r3, #10
 801c21c:	460b      	mov	r3, r1
 801c21e:	4614      	mov	r4, r2
 801c220:	4618      	mov	r0, r3
 801c222:	4621      	mov	r1, r4
 801c224:	687b      	ldr	r3, [r7, #4]
 801c226:	f04f 0400 	mov.w	r4, #0
 801c22a:	461a      	mov	r2, r3
 801c22c:	4623      	mov	r3, r4
 801c22e:	f7e4 fca5 	bl	8000b7c <__aeabi_uldivmod>
 801c232:	4603      	mov	r3, r0
 801c234:	460c      	mov	r4, r1
 801c236:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 801c238:	4b0a      	ldr	r3, [pc, #40]	; (801c264 <HAL_RCC_GetSysClockFreq+0x1a4>)
 801c23a:	685b      	ldr	r3, [r3, #4]
 801c23c:	0c1b      	lsrs	r3, r3, #16
 801c23e:	f003 0303 	and.w	r3, r3, #3
 801c242:	3301      	adds	r3, #1
 801c244:	005b      	lsls	r3, r3, #1
 801c246:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 801c248:	68fa      	ldr	r2, [r7, #12]
 801c24a:	683b      	ldr	r3, [r7, #0]
 801c24c:	fbb2 f3f3 	udiv	r3, r2, r3
 801c250:	60bb      	str	r3, [r7, #8]
      break;
 801c252:	e002      	b.n	801c25a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 801c254:	4b04      	ldr	r3, [pc, #16]	; (801c268 <HAL_RCC_GetSysClockFreq+0x1a8>)
 801c256:	60bb      	str	r3, [r7, #8]
      break;
 801c258:	bf00      	nop
    }
  }
  return sysclockfreq;
 801c25a:	68bb      	ldr	r3, [r7, #8]
}
 801c25c:	4618      	mov	r0, r3
 801c25e:	3714      	adds	r7, #20
 801c260:	46bd      	mov	sp, r7
 801c262:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c264:	40023800 	.word	0x40023800
 801c268:	00f42400 	.word	0x00f42400
 801c26c:	007a1200 	.word	0x007a1200

0801c270 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801c270:	b480      	push	{r7}
 801c272:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801c274:	4b03      	ldr	r3, [pc, #12]	; (801c284 <HAL_RCC_GetHCLKFreq+0x14>)
 801c276:	681b      	ldr	r3, [r3, #0]
}
 801c278:	4618      	mov	r0, r3
 801c27a:	46bd      	mov	sp, r7
 801c27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c280:	4770      	bx	lr
 801c282:	bf00      	nop
 801c284:	200002b4 	.word	0x200002b4

0801c288 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801c288:	b580      	push	{r7, lr}
 801c28a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 801c28c:	f7ff fff0 	bl	801c270 <HAL_RCC_GetHCLKFreq>
 801c290:	4601      	mov	r1, r0
 801c292:	4b05      	ldr	r3, [pc, #20]	; (801c2a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 801c294:	689b      	ldr	r3, [r3, #8]
 801c296:	0a9b      	lsrs	r3, r3, #10
 801c298:	f003 0307 	and.w	r3, r3, #7
 801c29c:	4a03      	ldr	r2, [pc, #12]	; (801c2ac <HAL_RCC_GetPCLK1Freq+0x24>)
 801c29e:	5cd3      	ldrb	r3, [r2, r3]
 801c2a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 801c2a4:	4618      	mov	r0, r3
 801c2a6:	bd80      	pop	{r7, pc}
 801c2a8:	40023800 	.word	0x40023800
 801c2ac:	080249b8 	.word	0x080249b8

0801c2b0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801c2b0:	b580      	push	{r7, lr}
 801c2b2:	b086      	sub	sp, #24
 801c2b4:	af00      	add	r7, sp, #0
 801c2b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801c2b8:	2300      	movs	r3, #0
 801c2ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 801c2bc:	2300      	movs	r3, #0
 801c2be:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 801c2c0:	687b      	ldr	r3, [r7, #4]
 801c2c2:	681b      	ldr	r3, [r3, #0]
 801c2c4:	f003 0301 	and.w	r3, r3, #1
 801c2c8:	2b00      	cmp	r3, #0
 801c2ca:	d105      	bne.n	801c2d8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 801c2cc:	687b      	ldr	r3, [r7, #4]
 801c2ce:	681b      	ldr	r3, [r3, #0]
 801c2d0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 801c2d4:	2b00      	cmp	r3, #0
 801c2d6:	d038      	beq.n	801c34a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 801c2d8:	4b68      	ldr	r3, [pc, #416]	; (801c47c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 801c2da:	2200      	movs	r2, #0
 801c2dc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 801c2de:	f7fc fdd5 	bl	8018e8c <HAL_GetTick>
 801c2e2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 801c2e4:	e008      	b.n	801c2f8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 801c2e6:	f7fc fdd1 	bl	8018e8c <HAL_GetTick>
 801c2ea:	4602      	mov	r2, r0
 801c2ec:	697b      	ldr	r3, [r7, #20]
 801c2ee:	1ad3      	subs	r3, r2, r3
 801c2f0:	2b02      	cmp	r3, #2
 801c2f2:	d901      	bls.n	801c2f8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801c2f4:	2303      	movs	r3, #3
 801c2f6:	e0bd      	b.n	801c474 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 801c2f8:	4b61      	ldr	r3, [pc, #388]	; (801c480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801c2fa:	681b      	ldr	r3, [r3, #0]
 801c2fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801c300:	2b00      	cmp	r3, #0
 801c302:	d1f0      	bne.n	801c2e6 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 801c304:	687b      	ldr	r3, [r7, #4]
 801c306:	685a      	ldr	r2, [r3, #4]
 801c308:	687b      	ldr	r3, [r7, #4]
 801c30a:	689b      	ldr	r3, [r3, #8]
 801c30c:	019b      	lsls	r3, r3, #6
 801c30e:	431a      	orrs	r2, r3
 801c310:	687b      	ldr	r3, [r7, #4]
 801c312:	68db      	ldr	r3, [r3, #12]
 801c314:	071b      	lsls	r3, r3, #28
 801c316:	495a      	ldr	r1, [pc, #360]	; (801c480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801c318:	4313      	orrs	r3, r2
 801c31a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 801c31e:	4b57      	ldr	r3, [pc, #348]	; (801c47c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 801c320:	2201      	movs	r2, #1
 801c322:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 801c324:	f7fc fdb2 	bl	8018e8c <HAL_GetTick>
 801c328:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 801c32a:	e008      	b.n	801c33e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 801c32c:	f7fc fdae 	bl	8018e8c <HAL_GetTick>
 801c330:	4602      	mov	r2, r0
 801c332:	697b      	ldr	r3, [r7, #20]
 801c334:	1ad3      	subs	r3, r2, r3
 801c336:	2b02      	cmp	r3, #2
 801c338:	d901      	bls.n	801c33e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801c33a:	2303      	movs	r3, #3
 801c33c:	e09a      	b.n	801c474 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 801c33e:	4b50      	ldr	r3, [pc, #320]	; (801c480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801c340:	681b      	ldr	r3, [r3, #0]
 801c342:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801c346:	2b00      	cmp	r3, #0
 801c348:	d0f0      	beq.n	801c32c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 801c34a:	687b      	ldr	r3, [r7, #4]
 801c34c:	681b      	ldr	r3, [r3, #0]
 801c34e:	f003 0302 	and.w	r3, r3, #2
 801c352:	2b00      	cmp	r3, #0
 801c354:	f000 8083 	beq.w	801c45e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 801c358:	2300      	movs	r3, #0
 801c35a:	60fb      	str	r3, [r7, #12]
 801c35c:	4b48      	ldr	r3, [pc, #288]	; (801c480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801c35e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c360:	4a47      	ldr	r2, [pc, #284]	; (801c480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801c362:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801c366:	6413      	str	r3, [r2, #64]	; 0x40
 801c368:	4b45      	ldr	r3, [pc, #276]	; (801c480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801c36a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c36c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801c370:	60fb      	str	r3, [r7, #12]
 801c372:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 801c374:	4b43      	ldr	r3, [pc, #268]	; (801c484 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 801c376:	681b      	ldr	r3, [r3, #0]
 801c378:	4a42      	ldr	r2, [pc, #264]	; (801c484 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 801c37a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801c37e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 801c380:	f7fc fd84 	bl	8018e8c <HAL_GetTick>
 801c384:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 801c386:	e008      	b.n	801c39a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 801c388:	f7fc fd80 	bl	8018e8c <HAL_GetTick>
 801c38c:	4602      	mov	r2, r0
 801c38e:	697b      	ldr	r3, [r7, #20]
 801c390:	1ad3      	subs	r3, r2, r3
 801c392:	2b02      	cmp	r3, #2
 801c394:	d901      	bls.n	801c39a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 801c396:	2303      	movs	r3, #3
 801c398:	e06c      	b.n	801c474 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 801c39a:	4b3a      	ldr	r3, [pc, #232]	; (801c484 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 801c39c:	681b      	ldr	r3, [r3, #0]
 801c39e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c3a2:	2b00      	cmp	r3, #0
 801c3a4:	d0f0      	beq.n	801c388 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 801c3a6:	4b36      	ldr	r3, [pc, #216]	; (801c480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801c3a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c3aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801c3ae:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 801c3b0:	693b      	ldr	r3, [r7, #16]
 801c3b2:	2b00      	cmp	r3, #0
 801c3b4:	d02f      	beq.n	801c416 <HAL_RCCEx_PeriphCLKConfig+0x166>
 801c3b6:	687b      	ldr	r3, [r7, #4]
 801c3b8:	691b      	ldr	r3, [r3, #16]
 801c3ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801c3be:	693a      	ldr	r2, [r7, #16]
 801c3c0:	429a      	cmp	r2, r3
 801c3c2:	d028      	beq.n	801c416 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801c3c4:	4b2e      	ldr	r3, [pc, #184]	; (801c480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801c3c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c3c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801c3cc:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 801c3ce:	4b2e      	ldr	r3, [pc, #184]	; (801c488 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 801c3d0:	2201      	movs	r2, #1
 801c3d2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 801c3d4:	4b2c      	ldr	r3, [pc, #176]	; (801c488 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 801c3d6:	2200      	movs	r2, #0
 801c3d8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 801c3da:	4a29      	ldr	r2, [pc, #164]	; (801c480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801c3dc:	693b      	ldr	r3, [r7, #16]
 801c3de:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 801c3e0:	4b27      	ldr	r3, [pc, #156]	; (801c480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801c3e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c3e4:	f003 0301 	and.w	r3, r3, #1
 801c3e8:	2b01      	cmp	r3, #1
 801c3ea:	d114      	bne.n	801c416 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 801c3ec:	f7fc fd4e 	bl	8018e8c <HAL_GetTick>
 801c3f0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801c3f2:	e00a      	b.n	801c40a <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801c3f4:	f7fc fd4a 	bl	8018e8c <HAL_GetTick>
 801c3f8:	4602      	mov	r2, r0
 801c3fa:	697b      	ldr	r3, [r7, #20]
 801c3fc:	1ad3      	subs	r3, r2, r3
 801c3fe:	f241 3288 	movw	r2, #5000	; 0x1388
 801c402:	4293      	cmp	r3, r2
 801c404:	d901      	bls.n	801c40a <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 801c406:	2303      	movs	r3, #3
 801c408:	e034      	b.n	801c474 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801c40a:	4b1d      	ldr	r3, [pc, #116]	; (801c480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801c40c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c40e:	f003 0302 	and.w	r3, r3, #2
 801c412:	2b00      	cmp	r3, #0
 801c414:	d0ee      	beq.n	801c3f4 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801c416:	687b      	ldr	r3, [r7, #4]
 801c418:	691b      	ldr	r3, [r3, #16]
 801c41a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801c41e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801c422:	d10d      	bne.n	801c440 <HAL_RCCEx_PeriphCLKConfig+0x190>
 801c424:	4b16      	ldr	r3, [pc, #88]	; (801c480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801c426:	689b      	ldr	r3, [r3, #8]
 801c428:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 801c42c:	687b      	ldr	r3, [r7, #4]
 801c42e:	691b      	ldr	r3, [r3, #16]
 801c430:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801c434:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801c438:	4911      	ldr	r1, [pc, #68]	; (801c480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801c43a:	4313      	orrs	r3, r2
 801c43c:	608b      	str	r3, [r1, #8]
 801c43e:	e005      	b.n	801c44c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 801c440:	4b0f      	ldr	r3, [pc, #60]	; (801c480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801c442:	689b      	ldr	r3, [r3, #8]
 801c444:	4a0e      	ldr	r2, [pc, #56]	; (801c480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801c446:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 801c44a:	6093      	str	r3, [r2, #8]
 801c44c:	4b0c      	ldr	r3, [pc, #48]	; (801c480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801c44e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801c450:	687b      	ldr	r3, [r7, #4]
 801c452:	691b      	ldr	r3, [r3, #16]
 801c454:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801c458:	4909      	ldr	r1, [pc, #36]	; (801c480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801c45a:	4313      	orrs	r3, r2
 801c45c:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 801c45e:	687b      	ldr	r3, [r7, #4]
 801c460:	681b      	ldr	r3, [r3, #0]
 801c462:	f003 0308 	and.w	r3, r3, #8
 801c466:	2b00      	cmp	r3, #0
 801c468:	d003      	beq.n	801c472 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801c46a:	687b      	ldr	r3, [r7, #4]
 801c46c:	7d1a      	ldrb	r2, [r3, #20]
 801c46e:	4b07      	ldr	r3, [pc, #28]	; (801c48c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 801c470:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 801c472:	2300      	movs	r3, #0
}
 801c474:	4618      	mov	r0, r3
 801c476:	3718      	adds	r7, #24
 801c478:	46bd      	mov	sp, r7
 801c47a:	bd80      	pop	{r7, pc}
 801c47c:	42470068 	.word	0x42470068
 801c480:	40023800 	.word	0x40023800
 801c484:	40007000 	.word	0x40007000
 801c488:	42470e40 	.word	0x42470e40
 801c48c:	424711e0 	.word	0x424711e0

0801c490 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 801c490:	b480      	push	{r7}
 801c492:	b087      	sub	sp, #28
 801c494:	af00      	add	r7, sp, #0
 801c496:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 801c498:	2300      	movs	r3, #0
 801c49a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 801c49c:	2300      	movs	r3, #0
 801c49e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 801c4a0:	2300      	movs	r3, #0
 801c4a2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 801c4a4:	2300      	movs	r3, #0
 801c4a6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 801c4a8:	687b      	ldr	r3, [r7, #4]
 801c4aa:	2b01      	cmp	r3, #1
 801c4ac:	d13f      	bne.n	801c52e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 801c4ae:	4b23      	ldr	r3, [pc, #140]	; (801c53c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 801c4b0:	689b      	ldr	r3, [r3, #8]
 801c4b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801c4b6:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 801c4b8:	68fb      	ldr	r3, [r7, #12]
 801c4ba:	2b00      	cmp	r3, #0
 801c4bc:	d004      	beq.n	801c4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 801c4be:	2b01      	cmp	r3, #1
 801c4c0:	d131      	bne.n	801c526 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 801c4c2:	4b1f      	ldr	r3, [pc, #124]	; (801c540 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 801c4c4:	617b      	str	r3, [r7, #20]
          break;
 801c4c6:	e031      	b.n	801c52c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 801c4c8:	4b1c      	ldr	r3, [pc, #112]	; (801c53c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 801c4ca:	685b      	ldr	r3, [r3, #4]
 801c4cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801c4d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801c4d4:	d109      	bne.n	801c4ea <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 801c4d6:	4b19      	ldr	r3, [pc, #100]	; (801c53c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 801c4d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801c4dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801c4e0:	4a18      	ldr	r2, [pc, #96]	; (801c544 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 801c4e2:	fbb2 f3f3 	udiv	r3, r2, r3
 801c4e6:	613b      	str	r3, [r7, #16]
 801c4e8:	e008      	b.n	801c4fc <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 801c4ea:	4b14      	ldr	r3, [pc, #80]	; (801c53c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 801c4ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801c4f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801c4f4:	4a14      	ldr	r2, [pc, #80]	; (801c548 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 801c4f6:	fbb2 f3f3 	udiv	r3, r2, r3
 801c4fa:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 801c4fc:	4b0f      	ldr	r3, [pc, #60]	; (801c53c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 801c4fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801c502:	099b      	lsrs	r3, r3, #6
 801c504:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801c508:	693b      	ldr	r3, [r7, #16]
 801c50a:	fb02 f303 	mul.w	r3, r2, r3
 801c50e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 801c510:	4b0a      	ldr	r3, [pc, #40]	; (801c53c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 801c512:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801c516:	0f1b      	lsrs	r3, r3, #28
 801c518:	f003 0307 	and.w	r3, r3, #7
 801c51c:	68ba      	ldr	r2, [r7, #8]
 801c51e:	fbb2 f3f3 	udiv	r3, r2, r3
 801c522:	617b      	str	r3, [r7, #20]
          break;
 801c524:	e002      	b.n	801c52c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 801c526:	2300      	movs	r3, #0
 801c528:	617b      	str	r3, [r7, #20]
          break;
 801c52a:	bf00      	nop
        }
      }
      break;
 801c52c:	bf00      	nop
    }
  }
  return frequency;
 801c52e:	697b      	ldr	r3, [r7, #20]
}
 801c530:	4618      	mov	r0, r3
 801c532:	371c      	adds	r7, #28
 801c534:	46bd      	mov	sp, r7
 801c536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c53a:	4770      	bx	lr
 801c53c:	40023800 	.word	0x40023800
 801c540:	00bb8000 	.word	0x00bb8000
 801c544:	007a1200 	.word	0x007a1200
 801c548:	00f42400 	.word	0x00f42400

0801c54c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801c54c:	b580      	push	{r7, lr}
 801c54e:	b082      	sub	sp, #8
 801c550:	af00      	add	r7, sp, #0
 801c552:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801c554:	687b      	ldr	r3, [r7, #4]
 801c556:	2b00      	cmp	r3, #0
 801c558:	d101      	bne.n	801c55e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801c55a:	2301      	movs	r3, #1
 801c55c:	e056      	b.n	801c60c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801c55e:	687b      	ldr	r3, [r7, #4]
 801c560:	2200      	movs	r2, #0
 801c562:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801c564:	687b      	ldr	r3, [r7, #4]
 801c566:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801c56a:	b2db      	uxtb	r3, r3
 801c56c:	2b00      	cmp	r3, #0
 801c56e:	d106      	bne.n	801c57e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801c570:	687b      	ldr	r3, [r7, #4]
 801c572:	2200      	movs	r2, #0
 801c574:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801c578:	6878      	ldr	r0, [r7, #4]
 801c57a:	f7fc fa07 	bl	801898c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801c57e:	687b      	ldr	r3, [r7, #4]
 801c580:	2202      	movs	r2, #2
 801c582:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801c586:	687b      	ldr	r3, [r7, #4]
 801c588:	681b      	ldr	r3, [r3, #0]
 801c58a:	681a      	ldr	r2, [r3, #0]
 801c58c:	687b      	ldr	r3, [r7, #4]
 801c58e:	681b      	ldr	r3, [r3, #0]
 801c590:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801c594:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 801c596:	687b      	ldr	r3, [r7, #4]
 801c598:	685a      	ldr	r2, [r3, #4]
 801c59a:	687b      	ldr	r3, [r7, #4]
 801c59c:	689b      	ldr	r3, [r3, #8]
 801c59e:	431a      	orrs	r2, r3
 801c5a0:	687b      	ldr	r3, [r7, #4]
 801c5a2:	68db      	ldr	r3, [r3, #12]
 801c5a4:	431a      	orrs	r2, r3
 801c5a6:	687b      	ldr	r3, [r7, #4]
 801c5a8:	691b      	ldr	r3, [r3, #16]
 801c5aa:	431a      	orrs	r2, r3
 801c5ac:	687b      	ldr	r3, [r7, #4]
 801c5ae:	695b      	ldr	r3, [r3, #20]
 801c5b0:	431a      	orrs	r2, r3
 801c5b2:	687b      	ldr	r3, [r7, #4]
 801c5b4:	699b      	ldr	r3, [r3, #24]
 801c5b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801c5ba:	431a      	orrs	r2, r3
 801c5bc:	687b      	ldr	r3, [r7, #4]
 801c5be:	69db      	ldr	r3, [r3, #28]
 801c5c0:	431a      	orrs	r2, r3
 801c5c2:	687b      	ldr	r3, [r7, #4]
 801c5c4:	6a1b      	ldr	r3, [r3, #32]
 801c5c6:	ea42 0103 	orr.w	r1, r2, r3
 801c5ca:	687b      	ldr	r3, [r7, #4]
 801c5cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801c5ce:	687b      	ldr	r3, [r7, #4]
 801c5d0:	681b      	ldr	r3, [r3, #0]
 801c5d2:	430a      	orrs	r2, r1
 801c5d4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 801c5d6:	687b      	ldr	r3, [r7, #4]
 801c5d8:	699b      	ldr	r3, [r3, #24]
 801c5da:	0c1b      	lsrs	r3, r3, #16
 801c5dc:	f003 0104 	and.w	r1, r3, #4
 801c5e0:	687b      	ldr	r3, [r7, #4]
 801c5e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801c5e4:	687b      	ldr	r3, [r7, #4]
 801c5e6:	681b      	ldr	r3, [r3, #0]
 801c5e8:	430a      	orrs	r2, r1
 801c5ea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801c5ec:	687b      	ldr	r3, [r7, #4]
 801c5ee:	681b      	ldr	r3, [r3, #0]
 801c5f0:	69da      	ldr	r2, [r3, #28]
 801c5f2:	687b      	ldr	r3, [r7, #4]
 801c5f4:	681b      	ldr	r3, [r3, #0]
 801c5f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801c5fa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801c5fc:	687b      	ldr	r3, [r7, #4]
 801c5fe:	2200      	movs	r2, #0
 801c600:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 801c602:	687b      	ldr	r3, [r7, #4]
 801c604:	2201      	movs	r2, #1
 801c606:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 801c60a:	2300      	movs	r3, #0
}
 801c60c:	4618      	mov	r0, r3
 801c60e:	3708      	adds	r7, #8
 801c610:	46bd      	mov	sp, r7
 801c612:	bd80      	pop	{r7, pc}

0801c614 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801c614:	b580      	push	{r7, lr}
 801c616:	b088      	sub	sp, #32
 801c618:	af00      	add	r7, sp, #0
 801c61a:	60f8      	str	r0, [r7, #12]
 801c61c:	60b9      	str	r1, [r7, #8]
 801c61e:	603b      	str	r3, [r7, #0]
 801c620:	4613      	mov	r3, r2
 801c622:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801c624:	2300      	movs	r3, #0
 801c626:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801c628:	68fb      	ldr	r3, [r7, #12]
 801c62a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801c62e:	2b01      	cmp	r3, #1
 801c630:	d101      	bne.n	801c636 <HAL_SPI_Transmit+0x22>
 801c632:	2302      	movs	r3, #2
 801c634:	e11e      	b.n	801c874 <HAL_SPI_Transmit+0x260>
 801c636:	68fb      	ldr	r3, [r7, #12]
 801c638:	2201      	movs	r2, #1
 801c63a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801c63e:	f7fc fc25 	bl	8018e8c <HAL_GetTick>
 801c642:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 801c644:	88fb      	ldrh	r3, [r7, #6]
 801c646:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 801c648:	68fb      	ldr	r3, [r7, #12]
 801c64a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801c64e:	b2db      	uxtb	r3, r3
 801c650:	2b01      	cmp	r3, #1
 801c652:	d002      	beq.n	801c65a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 801c654:	2302      	movs	r3, #2
 801c656:	77fb      	strb	r3, [r7, #31]
    goto error;
 801c658:	e103      	b.n	801c862 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 801c65a:	68bb      	ldr	r3, [r7, #8]
 801c65c:	2b00      	cmp	r3, #0
 801c65e:	d002      	beq.n	801c666 <HAL_SPI_Transmit+0x52>
 801c660:	88fb      	ldrh	r3, [r7, #6]
 801c662:	2b00      	cmp	r3, #0
 801c664:	d102      	bne.n	801c66c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 801c666:	2301      	movs	r3, #1
 801c668:	77fb      	strb	r3, [r7, #31]
    goto error;
 801c66a:	e0fa      	b.n	801c862 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801c66c:	68fb      	ldr	r3, [r7, #12]
 801c66e:	2203      	movs	r2, #3
 801c670:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801c674:	68fb      	ldr	r3, [r7, #12]
 801c676:	2200      	movs	r2, #0
 801c678:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 801c67a:	68fb      	ldr	r3, [r7, #12]
 801c67c:	68ba      	ldr	r2, [r7, #8]
 801c67e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 801c680:	68fb      	ldr	r3, [r7, #12]
 801c682:	88fa      	ldrh	r2, [r7, #6]
 801c684:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 801c686:	68fb      	ldr	r3, [r7, #12]
 801c688:	88fa      	ldrh	r2, [r7, #6]
 801c68a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 801c68c:	68fb      	ldr	r3, [r7, #12]
 801c68e:	2200      	movs	r2, #0
 801c690:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 801c692:	68fb      	ldr	r3, [r7, #12]
 801c694:	2200      	movs	r2, #0
 801c696:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 801c698:	68fb      	ldr	r3, [r7, #12]
 801c69a:	2200      	movs	r2, #0
 801c69c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 801c69e:	68fb      	ldr	r3, [r7, #12]
 801c6a0:	2200      	movs	r2, #0
 801c6a2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 801c6a4:	68fb      	ldr	r3, [r7, #12]
 801c6a6:	2200      	movs	r2, #0
 801c6a8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801c6aa:	68fb      	ldr	r3, [r7, #12]
 801c6ac:	689b      	ldr	r3, [r3, #8]
 801c6ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801c6b2:	d107      	bne.n	801c6c4 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 801c6b4:	68fb      	ldr	r3, [r7, #12]
 801c6b6:	681b      	ldr	r3, [r3, #0]
 801c6b8:	681a      	ldr	r2, [r3, #0]
 801c6ba:	68fb      	ldr	r3, [r7, #12]
 801c6bc:	681b      	ldr	r3, [r3, #0]
 801c6be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801c6c2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801c6c4:	68fb      	ldr	r3, [r7, #12]
 801c6c6:	681b      	ldr	r3, [r3, #0]
 801c6c8:	681b      	ldr	r3, [r3, #0]
 801c6ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c6ce:	2b40      	cmp	r3, #64	; 0x40
 801c6d0:	d007      	beq.n	801c6e2 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801c6d2:	68fb      	ldr	r3, [r7, #12]
 801c6d4:	681b      	ldr	r3, [r3, #0]
 801c6d6:	681a      	ldr	r2, [r3, #0]
 801c6d8:	68fb      	ldr	r3, [r7, #12]
 801c6da:	681b      	ldr	r3, [r3, #0]
 801c6dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801c6e0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 801c6e2:	68fb      	ldr	r3, [r7, #12]
 801c6e4:	68db      	ldr	r3, [r3, #12]
 801c6e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801c6ea:	d14b      	bne.n	801c784 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801c6ec:	68fb      	ldr	r3, [r7, #12]
 801c6ee:	685b      	ldr	r3, [r3, #4]
 801c6f0:	2b00      	cmp	r3, #0
 801c6f2:	d002      	beq.n	801c6fa <HAL_SPI_Transmit+0xe6>
 801c6f4:	8afb      	ldrh	r3, [r7, #22]
 801c6f6:	2b01      	cmp	r3, #1
 801c6f8:	d13e      	bne.n	801c778 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c6fa:	68fb      	ldr	r3, [r7, #12]
 801c6fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c6fe:	881a      	ldrh	r2, [r3, #0]
 801c700:	68fb      	ldr	r3, [r7, #12]
 801c702:	681b      	ldr	r3, [r3, #0]
 801c704:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801c706:	68fb      	ldr	r3, [r7, #12]
 801c708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c70a:	1c9a      	adds	r2, r3, #2
 801c70c:	68fb      	ldr	r3, [r7, #12]
 801c70e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801c710:	68fb      	ldr	r3, [r7, #12]
 801c712:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c714:	b29b      	uxth	r3, r3
 801c716:	3b01      	subs	r3, #1
 801c718:	b29a      	uxth	r2, r3
 801c71a:	68fb      	ldr	r3, [r7, #12]
 801c71c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 801c71e:	e02b      	b.n	801c778 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801c720:	68fb      	ldr	r3, [r7, #12]
 801c722:	681b      	ldr	r3, [r3, #0]
 801c724:	689b      	ldr	r3, [r3, #8]
 801c726:	f003 0302 	and.w	r3, r3, #2
 801c72a:	2b02      	cmp	r3, #2
 801c72c:	d112      	bne.n	801c754 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c72e:	68fb      	ldr	r3, [r7, #12]
 801c730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c732:	881a      	ldrh	r2, [r3, #0]
 801c734:	68fb      	ldr	r3, [r7, #12]
 801c736:	681b      	ldr	r3, [r3, #0]
 801c738:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801c73a:	68fb      	ldr	r3, [r7, #12]
 801c73c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c73e:	1c9a      	adds	r2, r3, #2
 801c740:	68fb      	ldr	r3, [r7, #12]
 801c742:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801c744:	68fb      	ldr	r3, [r7, #12]
 801c746:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c748:	b29b      	uxth	r3, r3
 801c74a:	3b01      	subs	r3, #1
 801c74c:	b29a      	uxth	r2, r3
 801c74e:	68fb      	ldr	r3, [r7, #12]
 801c750:	86da      	strh	r2, [r3, #54]	; 0x36
 801c752:	e011      	b.n	801c778 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801c754:	f7fc fb9a 	bl	8018e8c <HAL_GetTick>
 801c758:	4602      	mov	r2, r0
 801c75a:	69bb      	ldr	r3, [r7, #24]
 801c75c:	1ad3      	subs	r3, r2, r3
 801c75e:	683a      	ldr	r2, [r7, #0]
 801c760:	429a      	cmp	r2, r3
 801c762:	d803      	bhi.n	801c76c <HAL_SPI_Transmit+0x158>
 801c764:	683b      	ldr	r3, [r7, #0]
 801c766:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801c76a:	d102      	bne.n	801c772 <HAL_SPI_Transmit+0x15e>
 801c76c:	683b      	ldr	r3, [r7, #0]
 801c76e:	2b00      	cmp	r3, #0
 801c770:	d102      	bne.n	801c778 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 801c772:	2303      	movs	r3, #3
 801c774:	77fb      	strb	r3, [r7, #31]
          goto error;
 801c776:	e074      	b.n	801c862 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 801c778:	68fb      	ldr	r3, [r7, #12]
 801c77a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c77c:	b29b      	uxth	r3, r3
 801c77e:	2b00      	cmp	r3, #0
 801c780:	d1ce      	bne.n	801c720 <HAL_SPI_Transmit+0x10c>
 801c782:	e04c      	b.n	801c81e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801c784:	68fb      	ldr	r3, [r7, #12]
 801c786:	685b      	ldr	r3, [r3, #4]
 801c788:	2b00      	cmp	r3, #0
 801c78a:	d002      	beq.n	801c792 <HAL_SPI_Transmit+0x17e>
 801c78c:	8afb      	ldrh	r3, [r7, #22]
 801c78e:	2b01      	cmp	r3, #1
 801c790:	d140      	bne.n	801c814 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801c792:	68fb      	ldr	r3, [r7, #12]
 801c794:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801c796:	68fb      	ldr	r3, [r7, #12]
 801c798:	681b      	ldr	r3, [r3, #0]
 801c79a:	330c      	adds	r3, #12
 801c79c:	7812      	ldrb	r2, [r2, #0]
 801c79e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 801c7a0:	68fb      	ldr	r3, [r7, #12]
 801c7a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c7a4:	1c5a      	adds	r2, r3, #1
 801c7a6:	68fb      	ldr	r3, [r7, #12]
 801c7a8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801c7aa:	68fb      	ldr	r3, [r7, #12]
 801c7ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c7ae:	b29b      	uxth	r3, r3
 801c7b0:	3b01      	subs	r3, #1
 801c7b2:	b29a      	uxth	r2, r3
 801c7b4:	68fb      	ldr	r3, [r7, #12]
 801c7b6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 801c7b8:	e02c      	b.n	801c814 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801c7ba:	68fb      	ldr	r3, [r7, #12]
 801c7bc:	681b      	ldr	r3, [r3, #0]
 801c7be:	689b      	ldr	r3, [r3, #8]
 801c7c0:	f003 0302 	and.w	r3, r3, #2
 801c7c4:	2b02      	cmp	r3, #2
 801c7c6:	d113      	bne.n	801c7f0 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801c7c8:	68fb      	ldr	r3, [r7, #12]
 801c7ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801c7cc:	68fb      	ldr	r3, [r7, #12]
 801c7ce:	681b      	ldr	r3, [r3, #0]
 801c7d0:	330c      	adds	r3, #12
 801c7d2:	7812      	ldrb	r2, [r2, #0]
 801c7d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 801c7d6:	68fb      	ldr	r3, [r7, #12]
 801c7d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c7da:	1c5a      	adds	r2, r3, #1
 801c7dc:	68fb      	ldr	r3, [r7, #12]
 801c7de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801c7e0:	68fb      	ldr	r3, [r7, #12]
 801c7e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c7e4:	b29b      	uxth	r3, r3
 801c7e6:	3b01      	subs	r3, #1
 801c7e8:	b29a      	uxth	r2, r3
 801c7ea:	68fb      	ldr	r3, [r7, #12]
 801c7ec:	86da      	strh	r2, [r3, #54]	; 0x36
 801c7ee:	e011      	b.n	801c814 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801c7f0:	f7fc fb4c 	bl	8018e8c <HAL_GetTick>
 801c7f4:	4602      	mov	r2, r0
 801c7f6:	69bb      	ldr	r3, [r7, #24]
 801c7f8:	1ad3      	subs	r3, r2, r3
 801c7fa:	683a      	ldr	r2, [r7, #0]
 801c7fc:	429a      	cmp	r2, r3
 801c7fe:	d803      	bhi.n	801c808 <HAL_SPI_Transmit+0x1f4>
 801c800:	683b      	ldr	r3, [r7, #0]
 801c802:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801c806:	d102      	bne.n	801c80e <HAL_SPI_Transmit+0x1fa>
 801c808:	683b      	ldr	r3, [r7, #0]
 801c80a:	2b00      	cmp	r3, #0
 801c80c:	d102      	bne.n	801c814 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 801c80e:	2303      	movs	r3, #3
 801c810:	77fb      	strb	r3, [r7, #31]
          goto error;
 801c812:	e026      	b.n	801c862 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 801c814:	68fb      	ldr	r3, [r7, #12]
 801c816:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c818:	b29b      	uxth	r3, r3
 801c81a:	2b00      	cmp	r3, #0
 801c81c:	d1cd      	bne.n	801c7ba <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801c81e:	69ba      	ldr	r2, [r7, #24]
 801c820:	6839      	ldr	r1, [r7, #0]
 801c822:	68f8      	ldr	r0, [r7, #12]
 801c824:	f000 f894 	bl	801c950 <SPI_EndRxTxTransaction>
 801c828:	4603      	mov	r3, r0
 801c82a:	2b00      	cmp	r3, #0
 801c82c:	d002      	beq.n	801c834 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801c82e:	68fb      	ldr	r3, [r7, #12]
 801c830:	2220      	movs	r2, #32
 801c832:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801c834:	68fb      	ldr	r3, [r7, #12]
 801c836:	689b      	ldr	r3, [r3, #8]
 801c838:	2b00      	cmp	r3, #0
 801c83a:	d10a      	bne.n	801c852 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801c83c:	2300      	movs	r3, #0
 801c83e:	613b      	str	r3, [r7, #16]
 801c840:	68fb      	ldr	r3, [r7, #12]
 801c842:	681b      	ldr	r3, [r3, #0]
 801c844:	68db      	ldr	r3, [r3, #12]
 801c846:	613b      	str	r3, [r7, #16]
 801c848:	68fb      	ldr	r3, [r7, #12]
 801c84a:	681b      	ldr	r3, [r3, #0]
 801c84c:	689b      	ldr	r3, [r3, #8]
 801c84e:	613b      	str	r3, [r7, #16]
 801c850:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801c852:	68fb      	ldr	r3, [r7, #12]
 801c854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c856:	2b00      	cmp	r3, #0
 801c858:	d002      	beq.n	801c860 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 801c85a:	2301      	movs	r3, #1
 801c85c:	77fb      	strb	r3, [r7, #31]
 801c85e:	e000      	b.n	801c862 <HAL_SPI_Transmit+0x24e>
  }

error:
 801c860:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801c862:	68fb      	ldr	r3, [r7, #12]
 801c864:	2201      	movs	r2, #1
 801c866:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801c86a:	68fb      	ldr	r3, [r7, #12]
 801c86c:	2200      	movs	r2, #0
 801c86e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801c872:	7ffb      	ldrb	r3, [r7, #31]
}
 801c874:	4618      	mov	r0, r3
 801c876:	3720      	adds	r7, #32
 801c878:	46bd      	mov	sp, r7
 801c87a:	bd80      	pop	{r7, pc}

0801c87c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801c87c:	b580      	push	{r7, lr}
 801c87e:	b084      	sub	sp, #16
 801c880:	af00      	add	r7, sp, #0
 801c882:	60f8      	str	r0, [r7, #12]
 801c884:	60b9      	str	r1, [r7, #8]
 801c886:	603b      	str	r3, [r7, #0]
 801c888:	4613      	mov	r3, r2
 801c88a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801c88c:	e04c      	b.n	801c928 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 801c88e:	683b      	ldr	r3, [r7, #0]
 801c890:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801c894:	d048      	beq.n	801c928 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 801c896:	f7fc faf9 	bl	8018e8c <HAL_GetTick>
 801c89a:	4602      	mov	r2, r0
 801c89c:	69bb      	ldr	r3, [r7, #24]
 801c89e:	1ad3      	subs	r3, r2, r3
 801c8a0:	683a      	ldr	r2, [r7, #0]
 801c8a2:	429a      	cmp	r2, r3
 801c8a4:	d902      	bls.n	801c8ac <SPI_WaitFlagStateUntilTimeout+0x30>
 801c8a6:	683b      	ldr	r3, [r7, #0]
 801c8a8:	2b00      	cmp	r3, #0
 801c8aa:	d13d      	bne.n	801c928 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801c8ac:	68fb      	ldr	r3, [r7, #12]
 801c8ae:	681b      	ldr	r3, [r3, #0]
 801c8b0:	685a      	ldr	r2, [r3, #4]
 801c8b2:	68fb      	ldr	r3, [r7, #12]
 801c8b4:	681b      	ldr	r3, [r3, #0]
 801c8b6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801c8ba:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801c8bc:	68fb      	ldr	r3, [r7, #12]
 801c8be:	685b      	ldr	r3, [r3, #4]
 801c8c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801c8c4:	d111      	bne.n	801c8ea <SPI_WaitFlagStateUntilTimeout+0x6e>
 801c8c6:	68fb      	ldr	r3, [r7, #12]
 801c8c8:	689b      	ldr	r3, [r3, #8]
 801c8ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801c8ce:	d004      	beq.n	801c8da <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801c8d0:	68fb      	ldr	r3, [r7, #12]
 801c8d2:	689b      	ldr	r3, [r3, #8]
 801c8d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c8d8:	d107      	bne.n	801c8ea <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801c8da:	68fb      	ldr	r3, [r7, #12]
 801c8dc:	681b      	ldr	r3, [r3, #0]
 801c8de:	681a      	ldr	r2, [r3, #0]
 801c8e0:	68fb      	ldr	r3, [r7, #12]
 801c8e2:	681b      	ldr	r3, [r3, #0]
 801c8e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801c8e8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801c8ea:	68fb      	ldr	r3, [r7, #12]
 801c8ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c8ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801c8f2:	d10f      	bne.n	801c914 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 801c8f4:	68fb      	ldr	r3, [r7, #12]
 801c8f6:	681b      	ldr	r3, [r3, #0]
 801c8f8:	681a      	ldr	r2, [r3, #0]
 801c8fa:	68fb      	ldr	r3, [r7, #12]
 801c8fc:	681b      	ldr	r3, [r3, #0]
 801c8fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801c902:	601a      	str	r2, [r3, #0]
 801c904:	68fb      	ldr	r3, [r7, #12]
 801c906:	681b      	ldr	r3, [r3, #0]
 801c908:	681a      	ldr	r2, [r3, #0]
 801c90a:	68fb      	ldr	r3, [r7, #12]
 801c90c:	681b      	ldr	r3, [r3, #0]
 801c90e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801c912:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801c914:	68fb      	ldr	r3, [r7, #12]
 801c916:	2201      	movs	r2, #1
 801c918:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801c91c:	68fb      	ldr	r3, [r7, #12]
 801c91e:	2200      	movs	r2, #0
 801c920:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 801c924:	2303      	movs	r3, #3
 801c926:	e00f      	b.n	801c948 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801c928:	68fb      	ldr	r3, [r7, #12]
 801c92a:	681b      	ldr	r3, [r3, #0]
 801c92c:	689a      	ldr	r2, [r3, #8]
 801c92e:	68bb      	ldr	r3, [r7, #8]
 801c930:	4013      	ands	r3, r2
 801c932:	68ba      	ldr	r2, [r7, #8]
 801c934:	429a      	cmp	r2, r3
 801c936:	bf0c      	ite	eq
 801c938:	2301      	moveq	r3, #1
 801c93a:	2300      	movne	r3, #0
 801c93c:	b2db      	uxtb	r3, r3
 801c93e:	461a      	mov	r2, r3
 801c940:	79fb      	ldrb	r3, [r7, #7]
 801c942:	429a      	cmp	r2, r3
 801c944:	d1a3      	bne.n	801c88e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 801c946:	2300      	movs	r3, #0
}
 801c948:	4618      	mov	r0, r3
 801c94a:	3710      	adds	r7, #16
 801c94c:	46bd      	mov	sp, r7
 801c94e:	bd80      	pop	{r7, pc}

0801c950 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 801c950:	b580      	push	{r7, lr}
 801c952:	b088      	sub	sp, #32
 801c954:	af02      	add	r7, sp, #8
 801c956:	60f8      	str	r0, [r7, #12]
 801c958:	60b9      	str	r1, [r7, #8]
 801c95a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 801c95c:	4b1b      	ldr	r3, [pc, #108]	; (801c9cc <SPI_EndRxTxTransaction+0x7c>)
 801c95e:	681b      	ldr	r3, [r3, #0]
 801c960:	4a1b      	ldr	r2, [pc, #108]	; (801c9d0 <SPI_EndRxTxTransaction+0x80>)
 801c962:	fba2 2303 	umull	r2, r3, r2, r3
 801c966:	0d5b      	lsrs	r3, r3, #21
 801c968:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801c96c:	fb02 f303 	mul.w	r3, r2, r3
 801c970:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801c972:	68fb      	ldr	r3, [r7, #12]
 801c974:	685b      	ldr	r3, [r3, #4]
 801c976:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801c97a:	d112      	bne.n	801c9a2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801c97c:	687b      	ldr	r3, [r7, #4]
 801c97e:	9300      	str	r3, [sp, #0]
 801c980:	68bb      	ldr	r3, [r7, #8]
 801c982:	2200      	movs	r2, #0
 801c984:	2180      	movs	r1, #128	; 0x80
 801c986:	68f8      	ldr	r0, [r7, #12]
 801c988:	f7ff ff78 	bl	801c87c <SPI_WaitFlagStateUntilTimeout>
 801c98c:	4603      	mov	r3, r0
 801c98e:	2b00      	cmp	r3, #0
 801c990:	d016      	beq.n	801c9c0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801c992:	68fb      	ldr	r3, [r7, #12]
 801c994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c996:	f043 0220 	orr.w	r2, r3, #32
 801c99a:	68fb      	ldr	r3, [r7, #12]
 801c99c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 801c99e:	2303      	movs	r3, #3
 801c9a0:	e00f      	b.n	801c9c2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 801c9a2:	697b      	ldr	r3, [r7, #20]
 801c9a4:	2b00      	cmp	r3, #0
 801c9a6:	d00a      	beq.n	801c9be <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 801c9a8:	697b      	ldr	r3, [r7, #20]
 801c9aa:	3b01      	subs	r3, #1
 801c9ac:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 801c9ae:	68fb      	ldr	r3, [r7, #12]
 801c9b0:	681b      	ldr	r3, [r3, #0]
 801c9b2:	689b      	ldr	r3, [r3, #8]
 801c9b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c9b8:	2b80      	cmp	r3, #128	; 0x80
 801c9ba:	d0f2      	beq.n	801c9a2 <SPI_EndRxTxTransaction+0x52>
 801c9bc:	e000      	b.n	801c9c0 <SPI_EndRxTxTransaction+0x70>
        break;
 801c9be:	bf00      	nop
  }

  return HAL_OK;
 801c9c0:	2300      	movs	r3, #0
}
 801c9c2:	4618      	mov	r0, r3
 801c9c4:	3718      	adds	r7, #24
 801c9c6:	46bd      	mov	sp, r7
 801c9c8:	bd80      	pop	{r7, pc}
 801c9ca:	bf00      	nop
 801c9cc:	200002b4 	.word	0x200002b4
 801c9d0:	165e9f81 	.word	0x165e9f81

0801c9d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801c9d4:	b580      	push	{r7, lr}
 801c9d6:	b082      	sub	sp, #8
 801c9d8:	af00      	add	r7, sp, #0
 801c9da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801c9dc:	687b      	ldr	r3, [r7, #4]
 801c9de:	2b00      	cmp	r3, #0
 801c9e0:	d101      	bne.n	801c9e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801c9e2:	2301      	movs	r3, #1
 801c9e4:	e01d      	b.n	801ca22 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801c9e6:	687b      	ldr	r3, [r7, #4]
 801c9e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801c9ec:	b2db      	uxtb	r3, r3
 801c9ee:	2b00      	cmp	r3, #0
 801c9f0:	d106      	bne.n	801ca00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801c9f2:	687b      	ldr	r3, [r7, #4]
 801c9f4:	2200      	movs	r2, #0
 801c9f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801c9fa:	6878      	ldr	r0, [r7, #4]
 801c9fc:	f7fc f95a 	bl	8018cb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801ca00:	687b      	ldr	r3, [r7, #4]
 801ca02:	2202      	movs	r2, #2
 801ca04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801ca08:	687b      	ldr	r3, [r7, #4]
 801ca0a:	681a      	ldr	r2, [r3, #0]
 801ca0c:	687b      	ldr	r3, [r7, #4]
 801ca0e:	3304      	adds	r3, #4
 801ca10:	4619      	mov	r1, r3
 801ca12:	4610      	mov	r0, r2
 801ca14:	f000 f9ee 	bl	801cdf4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801ca18:	687b      	ldr	r3, [r7, #4]
 801ca1a:	2201      	movs	r2, #1
 801ca1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801ca20:	2300      	movs	r3, #0
}
 801ca22:	4618      	mov	r0, r3
 801ca24:	3708      	adds	r7, #8
 801ca26:	46bd      	mov	sp, r7
 801ca28:	bd80      	pop	{r7, pc}

0801ca2a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801ca2a:	b580      	push	{r7, lr}
 801ca2c:	b082      	sub	sp, #8
 801ca2e:	af00      	add	r7, sp, #0
 801ca30:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801ca32:	687b      	ldr	r3, [r7, #4]
 801ca34:	2b00      	cmp	r3, #0
 801ca36:	d101      	bne.n	801ca3c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801ca38:	2301      	movs	r3, #1
 801ca3a:	e01d      	b.n	801ca78 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801ca3c:	687b      	ldr	r3, [r7, #4]
 801ca3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ca42:	b2db      	uxtb	r3, r3
 801ca44:	2b00      	cmp	r3, #0
 801ca46:	d106      	bne.n	801ca56 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801ca48:	687b      	ldr	r3, [r7, #4]
 801ca4a:	2200      	movs	r2, #0
 801ca4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801ca50:	6878      	ldr	r0, [r7, #4]
 801ca52:	f000 f815 	bl	801ca80 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801ca56:	687b      	ldr	r3, [r7, #4]
 801ca58:	2202      	movs	r2, #2
 801ca5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801ca5e:	687b      	ldr	r3, [r7, #4]
 801ca60:	681a      	ldr	r2, [r3, #0]
 801ca62:	687b      	ldr	r3, [r7, #4]
 801ca64:	3304      	adds	r3, #4
 801ca66:	4619      	mov	r1, r3
 801ca68:	4610      	mov	r0, r2
 801ca6a:	f000 f9c3 	bl	801cdf4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801ca6e:	687b      	ldr	r3, [r7, #4]
 801ca70:	2201      	movs	r2, #1
 801ca72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801ca76:	2300      	movs	r3, #0
}
 801ca78:	4618      	mov	r0, r3
 801ca7a:	3708      	adds	r7, #8
 801ca7c:	46bd      	mov	sp, r7
 801ca7e:	bd80      	pop	{r7, pc}

0801ca80 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 801ca80:	b480      	push	{r7}
 801ca82:	b083      	sub	sp, #12
 801ca84:	af00      	add	r7, sp, #0
 801ca86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 801ca88:	bf00      	nop
 801ca8a:	370c      	adds	r7, #12
 801ca8c:	46bd      	mov	sp, r7
 801ca8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca92:	4770      	bx	lr

0801ca94 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801ca94:	b580      	push	{r7, lr}
 801ca96:	b084      	sub	sp, #16
 801ca98:	af00      	add	r7, sp, #0
 801ca9a:	6078      	str	r0, [r7, #4]
 801ca9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801ca9e:	687b      	ldr	r3, [r7, #4]
 801caa0:	681b      	ldr	r3, [r3, #0]
 801caa2:	2201      	movs	r2, #1
 801caa4:	6839      	ldr	r1, [r7, #0]
 801caa6:	4618      	mov	r0, r3
 801caa8:	f000 fc4a 	bl	801d340 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801caac:	687b      	ldr	r3, [r7, #4]
 801caae:	681b      	ldr	r3, [r3, #0]
 801cab0:	4a10      	ldr	r2, [pc, #64]	; (801caf4 <HAL_TIM_PWM_Start+0x60>)
 801cab2:	4293      	cmp	r3, r2
 801cab4:	d107      	bne.n	801cac6 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801cab6:	687b      	ldr	r3, [r7, #4]
 801cab8:	681b      	ldr	r3, [r3, #0]
 801caba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801cabc:	687b      	ldr	r3, [r7, #4]
 801cabe:	681b      	ldr	r3, [r3, #0]
 801cac0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801cac4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801cac6:	687b      	ldr	r3, [r7, #4]
 801cac8:	681b      	ldr	r3, [r3, #0]
 801caca:	689b      	ldr	r3, [r3, #8]
 801cacc:	f003 0307 	and.w	r3, r3, #7
 801cad0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801cad2:	68fb      	ldr	r3, [r7, #12]
 801cad4:	2b06      	cmp	r3, #6
 801cad6:	d007      	beq.n	801cae8 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 801cad8:	687b      	ldr	r3, [r7, #4]
 801cada:	681b      	ldr	r3, [r3, #0]
 801cadc:	681a      	ldr	r2, [r3, #0]
 801cade:	687b      	ldr	r3, [r7, #4]
 801cae0:	681b      	ldr	r3, [r3, #0]
 801cae2:	f042 0201 	orr.w	r2, r2, #1
 801cae6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801cae8:	2300      	movs	r3, #0
}
 801caea:	4618      	mov	r0, r3
 801caec:	3710      	adds	r7, #16
 801caee:	46bd      	mov	sp, r7
 801caf0:	bd80      	pop	{r7, pc}
 801caf2:	bf00      	nop
 801caf4:	40010000 	.word	0x40010000

0801caf8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801caf8:	b580      	push	{r7, lr}
 801cafa:	b084      	sub	sp, #16
 801cafc:	af00      	add	r7, sp, #0
 801cafe:	60f8      	str	r0, [r7, #12]
 801cb00:	60b9      	str	r1, [r7, #8]
 801cb02:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801cb04:	68fb      	ldr	r3, [r7, #12]
 801cb06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801cb0a:	2b01      	cmp	r3, #1
 801cb0c:	d101      	bne.n	801cb12 <HAL_TIM_PWM_ConfigChannel+0x1a>
 801cb0e:	2302      	movs	r3, #2
 801cb10:	e0b4      	b.n	801cc7c <HAL_TIM_PWM_ConfigChannel+0x184>
 801cb12:	68fb      	ldr	r3, [r7, #12]
 801cb14:	2201      	movs	r2, #1
 801cb16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801cb1a:	68fb      	ldr	r3, [r7, #12]
 801cb1c:	2202      	movs	r2, #2
 801cb1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 801cb22:	687b      	ldr	r3, [r7, #4]
 801cb24:	2b0c      	cmp	r3, #12
 801cb26:	f200 809f 	bhi.w	801cc68 <HAL_TIM_PWM_ConfigChannel+0x170>
 801cb2a:	a201      	add	r2, pc, #4	; (adr r2, 801cb30 <HAL_TIM_PWM_ConfigChannel+0x38>)
 801cb2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cb30:	0801cb65 	.word	0x0801cb65
 801cb34:	0801cc69 	.word	0x0801cc69
 801cb38:	0801cc69 	.word	0x0801cc69
 801cb3c:	0801cc69 	.word	0x0801cc69
 801cb40:	0801cba5 	.word	0x0801cba5
 801cb44:	0801cc69 	.word	0x0801cc69
 801cb48:	0801cc69 	.word	0x0801cc69
 801cb4c:	0801cc69 	.word	0x0801cc69
 801cb50:	0801cbe7 	.word	0x0801cbe7
 801cb54:	0801cc69 	.word	0x0801cc69
 801cb58:	0801cc69 	.word	0x0801cc69
 801cb5c:	0801cc69 	.word	0x0801cc69
 801cb60:	0801cc27 	.word	0x0801cc27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801cb64:	68fb      	ldr	r3, [r7, #12]
 801cb66:	681b      	ldr	r3, [r3, #0]
 801cb68:	68b9      	ldr	r1, [r7, #8]
 801cb6a:	4618      	mov	r0, r3
 801cb6c:	f000 f9c2 	bl	801cef4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801cb70:	68fb      	ldr	r3, [r7, #12]
 801cb72:	681b      	ldr	r3, [r3, #0]
 801cb74:	699a      	ldr	r2, [r3, #24]
 801cb76:	68fb      	ldr	r3, [r7, #12]
 801cb78:	681b      	ldr	r3, [r3, #0]
 801cb7a:	f042 0208 	orr.w	r2, r2, #8
 801cb7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801cb80:	68fb      	ldr	r3, [r7, #12]
 801cb82:	681b      	ldr	r3, [r3, #0]
 801cb84:	699a      	ldr	r2, [r3, #24]
 801cb86:	68fb      	ldr	r3, [r7, #12]
 801cb88:	681b      	ldr	r3, [r3, #0]
 801cb8a:	f022 0204 	bic.w	r2, r2, #4
 801cb8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801cb90:	68fb      	ldr	r3, [r7, #12]
 801cb92:	681b      	ldr	r3, [r3, #0]
 801cb94:	6999      	ldr	r1, [r3, #24]
 801cb96:	68bb      	ldr	r3, [r7, #8]
 801cb98:	691a      	ldr	r2, [r3, #16]
 801cb9a:	68fb      	ldr	r3, [r7, #12]
 801cb9c:	681b      	ldr	r3, [r3, #0]
 801cb9e:	430a      	orrs	r2, r1
 801cba0:	619a      	str	r2, [r3, #24]
      break;
 801cba2:	e062      	b.n	801cc6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801cba4:	68fb      	ldr	r3, [r7, #12]
 801cba6:	681b      	ldr	r3, [r3, #0]
 801cba8:	68b9      	ldr	r1, [r7, #8]
 801cbaa:	4618      	mov	r0, r3
 801cbac:	f000 fa08 	bl	801cfc0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801cbb0:	68fb      	ldr	r3, [r7, #12]
 801cbb2:	681b      	ldr	r3, [r3, #0]
 801cbb4:	699a      	ldr	r2, [r3, #24]
 801cbb6:	68fb      	ldr	r3, [r7, #12]
 801cbb8:	681b      	ldr	r3, [r3, #0]
 801cbba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801cbbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801cbc0:	68fb      	ldr	r3, [r7, #12]
 801cbc2:	681b      	ldr	r3, [r3, #0]
 801cbc4:	699a      	ldr	r2, [r3, #24]
 801cbc6:	68fb      	ldr	r3, [r7, #12]
 801cbc8:	681b      	ldr	r3, [r3, #0]
 801cbca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801cbce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801cbd0:	68fb      	ldr	r3, [r7, #12]
 801cbd2:	681b      	ldr	r3, [r3, #0]
 801cbd4:	6999      	ldr	r1, [r3, #24]
 801cbd6:	68bb      	ldr	r3, [r7, #8]
 801cbd8:	691b      	ldr	r3, [r3, #16]
 801cbda:	021a      	lsls	r2, r3, #8
 801cbdc:	68fb      	ldr	r3, [r7, #12]
 801cbde:	681b      	ldr	r3, [r3, #0]
 801cbe0:	430a      	orrs	r2, r1
 801cbe2:	619a      	str	r2, [r3, #24]
      break;
 801cbe4:	e041      	b.n	801cc6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801cbe6:	68fb      	ldr	r3, [r7, #12]
 801cbe8:	681b      	ldr	r3, [r3, #0]
 801cbea:	68b9      	ldr	r1, [r7, #8]
 801cbec:	4618      	mov	r0, r3
 801cbee:	f000 fa53 	bl	801d098 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801cbf2:	68fb      	ldr	r3, [r7, #12]
 801cbf4:	681b      	ldr	r3, [r3, #0]
 801cbf6:	69da      	ldr	r2, [r3, #28]
 801cbf8:	68fb      	ldr	r3, [r7, #12]
 801cbfa:	681b      	ldr	r3, [r3, #0]
 801cbfc:	f042 0208 	orr.w	r2, r2, #8
 801cc00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801cc02:	68fb      	ldr	r3, [r7, #12]
 801cc04:	681b      	ldr	r3, [r3, #0]
 801cc06:	69da      	ldr	r2, [r3, #28]
 801cc08:	68fb      	ldr	r3, [r7, #12]
 801cc0a:	681b      	ldr	r3, [r3, #0]
 801cc0c:	f022 0204 	bic.w	r2, r2, #4
 801cc10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801cc12:	68fb      	ldr	r3, [r7, #12]
 801cc14:	681b      	ldr	r3, [r3, #0]
 801cc16:	69d9      	ldr	r1, [r3, #28]
 801cc18:	68bb      	ldr	r3, [r7, #8]
 801cc1a:	691a      	ldr	r2, [r3, #16]
 801cc1c:	68fb      	ldr	r3, [r7, #12]
 801cc1e:	681b      	ldr	r3, [r3, #0]
 801cc20:	430a      	orrs	r2, r1
 801cc22:	61da      	str	r2, [r3, #28]
      break;
 801cc24:	e021      	b.n	801cc6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801cc26:	68fb      	ldr	r3, [r7, #12]
 801cc28:	681b      	ldr	r3, [r3, #0]
 801cc2a:	68b9      	ldr	r1, [r7, #8]
 801cc2c:	4618      	mov	r0, r3
 801cc2e:	f000 fa9d 	bl	801d16c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801cc32:	68fb      	ldr	r3, [r7, #12]
 801cc34:	681b      	ldr	r3, [r3, #0]
 801cc36:	69da      	ldr	r2, [r3, #28]
 801cc38:	68fb      	ldr	r3, [r7, #12]
 801cc3a:	681b      	ldr	r3, [r3, #0]
 801cc3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801cc40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801cc42:	68fb      	ldr	r3, [r7, #12]
 801cc44:	681b      	ldr	r3, [r3, #0]
 801cc46:	69da      	ldr	r2, [r3, #28]
 801cc48:	68fb      	ldr	r3, [r7, #12]
 801cc4a:	681b      	ldr	r3, [r3, #0]
 801cc4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801cc50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801cc52:	68fb      	ldr	r3, [r7, #12]
 801cc54:	681b      	ldr	r3, [r3, #0]
 801cc56:	69d9      	ldr	r1, [r3, #28]
 801cc58:	68bb      	ldr	r3, [r7, #8]
 801cc5a:	691b      	ldr	r3, [r3, #16]
 801cc5c:	021a      	lsls	r2, r3, #8
 801cc5e:	68fb      	ldr	r3, [r7, #12]
 801cc60:	681b      	ldr	r3, [r3, #0]
 801cc62:	430a      	orrs	r2, r1
 801cc64:	61da      	str	r2, [r3, #28]
      break;
 801cc66:	e000      	b.n	801cc6a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 801cc68:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 801cc6a:	68fb      	ldr	r3, [r7, #12]
 801cc6c:	2201      	movs	r2, #1
 801cc6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801cc72:	68fb      	ldr	r3, [r7, #12]
 801cc74:	2200      	movs	r2, #0
 801cc76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801cc7a:	2300      	movs	r3, #0
}
 801cc7c:	4618      	mov	r0, r3
 801cc7e:	3710      	adds	r7, #16
 801cc80:	46bd      	mov	sp, r7
 801cc82:	bd80      	pop	{r7, pc}

0801cc84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801cc84:	b580      	push	{r7, lr}
 801cc86:	b084      	sub	sp, #16
 801cc88:	af00      	add	r7, sp, #0
 801cc8a:	6078      	str	r0, [r7, #4]
 801cc8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801cc8e:	687b      	ldr	r3, [r7, #4]
 801cc90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801cc94:	2b01      	cmp	r3, #1
 801cc96:	d101      	bne.n	801cc9c <HAL_TIM_ConfigClockSource+0x18>
 801cc98:	2302      	movs	r3, #2
 801cc9a:	e0a6      	b.n	801cdea <HAL_TIM_ConfigClockSource+0x166>
 801cc9c:	687b      	ldr	r3, [r7, #4]
 801cc9e:	2201      	movs	r2, #1
 801cca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801cca4:	687b      	ldr	r3, [r7, #4]
 801cca6:	2202      	movs	r2, #2
 801cca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801ccac:	687b      	ldr	r3, [r7, #4]
 801ccae:	681b      	ldr	r3, [r3, #0]
 801ccb0:	689b      	ldr	r3, [r3, #8]
 801ccb2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801ccb4:	68fb      	ldr	r3, [r7, #12]
 801ccb6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 801ccba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801ccbc:	68fb      	ldr	r3, [r7, #12]
 801ccbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801ccc2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 801ccc4:	687b      	ldr	r3, [r7, #4]
 801ccc6:	681b      	ldr	r3, [r3, #0]
 801ccc8:	68fa      	ldr	r2, [r7, #12]
 801ccca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801cccc:	683b      	ldr	r3, [r7, #0]
 801ccce:	681b      	ldr	r3, [r3, #0]
 801ccd0:	2b40      	cmp	r3, #64	; 0x40
 801ccd2:	d067      	beq.n	801cda4 <HAL_TIM_ConfigClockSource+0x120>
 801ccd4:	2b40      	cmp	r3, #64	; 0x40
 801ccd6:	d80b      	bhi.n	801ccf0 <HAL_TIM_ConfigClockSource+0x6c>
 801ccd8:	2b10      	cmp	r3, #16
 801ccda:	d073      	beq.n	801cdc4 <HAL_TIM_ConfigClockSource+0x140>
 801ccdc:	2b10      	cmp	r3, #16
 801ccde:	d802      	bhi.n	801cce6 <HAL_TIM_ConfigClockSource+0x62>
 801cce0:	2b00      	cmp	r3, #0
 801cce2:	d06f      	beq.n	801cdc4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 801cce4:	e078      	b.n	801cdd8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 801cce6:	2b20      	cmp	r3, #32
 801cce8:	d06c      	beq.n	801cdc4 <HAL_TIM_ConfigClockSource+0x140>
 801ccea:	2b30      	cmp	r3, #48	; 0x30
 801ccec:	d06a      	beq.n	801cdc4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 801ccee:	e073      	b.n	801cdd8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 801ccf0:	2b70      	cmp	r3, #112	; 0x70
 801ccf2:	d00d      	beq.n	801cd10 <HAL_TIM_ConfigClockSource+0x8c>
 801ccf4:	2b70      	cmp	r3, #112	; 0x70
 801ccf6:	d804      	bhi.n	801cd02 <HAL_TIM_ConfigClockSource+0x7e>
 801ccf8:	2b50      	cmp	r3, #80	; 0x50
 801ccfa:	d033      	beq.n	801cd64 <HAL_TIM_ConfigClockSource+0xe0>
 801ccfc:	2b60      	cmp	r3, #96	; 0x60
 801ccfe:	d041      	beq.n	801cd84 <HAL_TIM_ConfigClockSource+0x100>
      break;
 801cd00:	e06a      	b.n	801cdd8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 801cd02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801cd06:	d066      	beq.n	801cdd6 <HAL_TIM_ConfigClockSource+0x152>
 801cd08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801cd0c:	d017      	beq.n	801cd3e <HAL_TIM_ConfigClockSource+0xba>
      break;
 801cd0e:	e063      	b.n	801cdd8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 801cd10:	687b      	ldr	r3, [r7, #4]
 801cd12:	6818      	ldr	r0, [r3, #0]
 801cd14:	683b      	ldr	r3, [r7, #0]
 801cd16:	6899      	ldr	r1, [r3, #8]
 801cd18:	683b      	ldr	r3, [r7, #0]
 801cd1a:	685a      	ldr	r2, [r3, #4]
 801cd1c:	683b      	ldr	r3, [r7, #0]
 801cd1e:	68db      	ldr	r3, [r3, #12]
 801cd20:	f000 faee 	bl	801d300 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 801cd24:	687b      	ldr	r3, [r7, #4]
 801cd26:	681b      	ldr	r3, [r3, #0]
 801cd28:	689b      	ldr	r3, [r3, #8]
 801cd2a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801cd2c:	68fb      	ldr	r3, [r7, #12]
 801cd2e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 801cd32:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 801cd34:	687b      	ldr	r3, [r7, #4]
 801cd36:	681b      	ldr	r3, [r3, #0]
 801cd38:	68fa      	ldr	r2, [r7, #12]
 801cd3a:	609a      	str	r2, [r3, #8]
      break;
 801cd3c:	e04c      	b.n	801cdd8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 801cd3e:	687b      	ldr	r3, [r7, #4]
 801cd40:	6818      	ldr	r0, [r3, #0]
 801cd42:	683b      	ldr	r3, [r7, #0]
 801cd44:	6899      	ldr	r1, [r3, #8]
 801cd46:	683b      	ldr	r3, [r7, #0]
 801cd48:	685a      	ldr	r2, [r3, #4]
 801cd4a:	683b      	ldr	r3, [r7, #0]
 801cd4c:	68db      	ldr	r3, [r3, #12]
 801cd4e:	f000 fad7 	bl	801d300 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801cd52:	687b      	ldr	r3, [r7, #4]
 801cd54:	681b      	ldr	r3, [r3, #0]
 801cd56:	689a      	ldr	r2, [r3, #8]
 801cd58:	687b      	ldr	r3, [r7, #4]
 801cd5a:	681b      	ldr	r3, [r3, #0]
 801cd5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801cd60:	609a      	str	r2, [r3, #8]
      break;
 801cd62:	e039      	b.n	801cdd8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 801cd64:	687b      	ldr	r3, [r7, #4]
 801cd66:	6818      	ldr	r0, [r3, #0]
 801cd68:	683b      	ldr	r3, [r7, #0]
 801cd6a:	6859      	ldr	r1, [r3, #4]
 801cd6c:	683b      	ldr	r3, [r7, #0]
 801cd6e:	68db      	ldr	r3, [r3, #12]
 801cd70:	461a      	mov	r2, r3
 801cd72:	f000 fa4b 	bl	801d20c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801cd76:	687b      	ldr	r3, [r7, #4]
 801cd78:	681b      	ldr	r3, [r3, #0]
 801cd7a:	2150      	movs	r1, #80	; 0x50
 801cd7c:	4618      	mov	r0, r3
 801cd7e:	f000 faa4 	bl	801d2ca <TIM_ITRx_SetConfig>
      break;
 801cd82:	e029      	b.n	801cdd8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 801cd84:	687b      	ldr	r3, [r7, #4]
 801cd86:	6818      	ldr	r0, [r3, #0]
 801cd88:	683b      	ldr	r3, [r7, #0]
 801cd8a:	6859      	ldr	r1, [r3, #4]
 801cd8c:	683b      	ldr	r3, [r7, #0]
 801cd8e:	68db      	ldr	r3, [r3, #12]
 801cd90:	461a      	mov	r2, r3
 801cd92:	f000 fa6a 	bl	801d26a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801cd96:	687b      	ldr	r3, [r7, #4]
 801cd98:	681b      	ldr	r3, [r3, #0]
 801cd9a:	2160      	movs	r1, #96	; 0x60
 801cd9c:	4618      	mov	r0, r3
 801cd9e:	f000 fa94 	bl	801d2ca <TIM_ITRx_SetConfig>
      break;
 801cda2:	e019      	b.n	801cdd8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 801cda4:	687b      	ldr	r3, [r7, #4]
 801cda6:	6818      	ldr	r0, [r3, #0]
 801cda8:	683b      	ldr	r3, [r7, #0]
 801cdaa:	6859      	ldr	r1, [r3, #4]
 801cdac:	683b      	ldr	r3, [r7, #0]
 801cdae:	68db      	ldr	r3, [r3, #12]
 801cdb0:	461a      	mov	r2, r3
 801cdb2:	f000 fa2b 	bl	801d20c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801cdb6:	687b      	ldr	r3, [r7, #4]
 801cdb8:	681b      	ldr	r3, [r3, #0]
 801cdba:	2140      	movs	r1, #64	; 0x40
 801cdbc:	4618      	mov	r0, r3
 801cdbe:	f000 fa84 	bl	801d2ca <TIM_ITRx_SetConfig>
      break;
 801cdc2:	e009      	b.n	801cdd8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801cdc4:	687b      	ldr	r3, [r7, #4]
 801cdc6:	681a      	ldr	r2, [r3, #0]
 801cdc8:	683b      	ldr	r3, [r7, #0]
 801cdca:	681b      	ldr	r3, [r3, #0]
 801cdcc:	4619      	mov	r1, r3
 801cdce:	4610      	mov	r0, r2
 801cdd0:	f000 fa7b 	bl	801d2ca <TIM_ITRx_SetConfig>
      break;
 801cdd4:	e000      	b.n	801cdd8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 801cdd6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801cdd8:	687b      	ldr	r3, [r7, #4]
 801cdda:	2201      	movs	r2, #1
 801cddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801cde0:	687b      	ldr	r3, [r7, #4]
 801cde2:	2200      	movs	r2, #0
 801cde4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801cde8:	2300      	movs	r3, #0
}
 801cdea:	4618      	mov	r0, r3
 801cdec:	3710      	adds	r7, #16
 801cdee:	46bd      	mov	sp, r7
 801cdf0:	bd80      	pop	{r7, pc}
	...

0801cdf4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 801cdf4:	b480      	push	{r7}
 801cdf6:	b085      	sub	sp, #20
 801cdf8:	af00      	add	r7, sp, #0
 801cdfa:	6078      	str	r0, [r7, #4]
 801cdfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801cdfe:	687b      	ldr	r3, [r7, #4]
 801ce00:	681b      	ldr	r3, [r3, #0]
 801ce02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801ce04:	687b      	ldr	r3, [r7, #4]
 801ce06:	4a34      	ldr	r2, [pc, #208]	; (801ced8 <TIM_Base_SetConfig+0xe4>)
 801ce08:	4293      	cmp	r3, r2
 801ce0a:	d00f      	beq.n	801ce2c <TIM_Base_SetConfig+0x38>
 801ce0c:	687b      	ldr	r3, [r7, #4]
 801ce0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801ce12:	d00b      	beq.n	801ce2c <TIM_Base_SetConfig+0x38>
 801ce14:	687b      	ldr	r3, [r7, #4]
 801ce16:	4a31      	ldr	r2, [pc, #196]	; (801cedc <TIM_Base_SetConfig+0xe8>)
 801ce18:	4293      	cmp	r3, r2
 801ce1a:	d007      	beq.n	801ce2c <TIM_Base_SetConfig+0x38>
 801ce1c:	687b      	ldr	r3, [r7, #4]
 801ce1e:	4a30      	ldr	r2, [pc, #192]	; (801cee0 <TIM_Base_SetConfig+0xec>)
 801ce20:	4293      	cmp	r3, r2
 801ce22:	d003      	beq.n	801ce2c <TIM_Base_SetConfig+0x38>
 801ce24:	687b      	ldr	r3, [r7, #4]
 801ce26:	4a2f      	ldr	r2, [pc, #188]	; (801cee4 <TIM_Base_SetConfig+0xf0>)
 801ce28:	4293      	cmp	r3, r2
 801ce2a:	d108      	bne.n	801ce3e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801ce2c:	68fb      	ldr	r3, [r7, #12]
 801ce2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801ce32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801ce34:	683b      	ldr	r3, [r7, #0]
 801ce36:	685b      	ldr	r3, [r3, #4]
 801ce38:	68fa      	ldr	r2, [r7, #12]
 801ce3a:	4313      	orrs	r3, r2
 801ce3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801ce3e:	687b      	ldr	r3, [r7, #4]
 801ce40:	4a25      	ldr	r2, [pc, #148]	; (801ced8 <TIM_Base_SetConfig+0xe4>)
 801ce42:	4293      	cmp	r3, r2
 801ce44:	d01b      	beq.n	801ce7e <TIM_Base_SetConfig+0x8a>
 801ce46:	687b      	ldr	r3, [r7, #4]
 801ce48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801ce4c:	d017      	beq.n	801ce7e <TIM_Base_SetConfig+0x8a>
 801ce4e:	687b      	ldr	r3, [r7, #4]
 801ce50:	4a22      	ldr	r2, [pc, #136]	; (801cedc <TIM_Base_SetConfig+0xe8>)
 801ce52:	4293      	cmp	r3, r2
 801ce54:	d013      	beq.n	801ce7e <TIM_Base_SetConfig+0x8a>
 801ce56:	687b      	ldr	r3, [r7, #4]
 801ce58:	4a21      	ldr	r2, [pc, #132]	; (801cee0 <TIM_Base_SetConfig+0xec>)
 801ce5a:	4293      	cmp	r3, r2
 801ce5c:	d00f      	beq.n	801ce7e <TIM_Base_SetConfig+0x8a>
 801ce5e:	687b      	ldr	r3, [r7, #4]
 801ce60:	4a20      	ldr	r2, [pc, #128]	; (801cee4 <TIM_Base_SetConfig+0xf0>)
 801ce62:	4293      	cmp	r3, r2
 801ce64:	d00b      	beq.n	801ce7e <TIM_Base_SetConfig+0x8a>
 801ce66:	687b      	ldr	r3, [r7, #4]
 801ce68:	4a1f      	ldr	r2, [pc, #124]	; (801cee8 <TIM_Base_SetConfig+0xf4>)
 801ce6a:	4293      	cmp	r3, r2
 801ce6c:	d007      	beq.n	801ce7e <TIM_Base_SetConfig+0x8a>
 801ce6e:	687b      	ldr	r3, [r7, #4]
 801ce70:	4a1e      	ldr	r2, [pc, #120]	; (801ceec <TIM_Base_SetConfig+0xf8>)
 801ce72:	4293      	cmp	r3, r2
 801ce74:	d003      	beq.n	801ce7e <TIM_Base_SetConfig+0x8a>
 801ce76:	687b      	ldr	r3, [r7, #4]
 801ce78:	4a1d      	ldr	r2, [pc, #116]	; (801cef0 <TIM_Base_SetConfig+0xfc>)
 801ce7a:	4293      	cmp	r3, r2
 801ce7c:	d108      	bne.n	801ce90 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801ce7e:	68fb      	ldr	r3, [r7, #12]
 801ce80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801ce84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801ce86:	683b      	ldr	r3, [r7, #0]
 801ce88:	68db      	ldr	r3, [r3, #12]
 801ce8a:	68fa      	ldr	r2, [r7, #12]
 801ce8c:	4313      	orrs	r3, r2
 801ce8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801ce90:	68fb      	ldr	r3, [r7, #12]
 801ce92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801ce96:	683b      	ldr	r3, [r7, #0]
 801ce98:	695b      	ldr	r3, [r3, #20]
 801ce9a:	4313      	orrs	r3, r2
 801ce9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801ce9e:	687b      	ldr	r3, [r7, #4]
 801cea0:	68fa      	ldr	r2, [r7, #12]
 801cea2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801cea4:	683b      	ldr	r3, [r7, #0]
 801cea6:	689a      	ldr	r2, [r3, #8]
 801cea8:	687b      	ldr	r3, [r7, #4]
 801ceaa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801ceac:	683b      	ldr	r3, [r7, #0]
 801ceae:	681a      	ldr	r2, [r3, #0]
 801ceb0:	687b      	ldr	r3, [r7, #4]
 801ceb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801ceb4:	687b      	ldr	r3, [r7, #4]
 801ceb6:	4a08      	ldr	r2, [pc, #32]	; (801ced8 <TIM_Base_SetConfig+0xe4>)
 801ceb8:	4293      	cmp	r3, r2
 801ceba:	d103      	bne.n	801cec4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801cebc:	683b      	ldr	r3, [r7, #0]
 801cebe:	691a      	ldr	r2, [r3, #16]
 801cec0:	687b      	ldr	r3, [r7, #4]
 801cec2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801cec4:	687b      	ldr	r3, [r7, #4]
 801cec6:	2201      	movs	r2, #1
 801cec8:	615a      	str	r2, [r3, #20]
}
 801ceca:	bf00      	nop
 801cecc:	3714      	adds	r7, #20
 801cece:	46bd      	mov	sp, r7
 801ced0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ced4:	4770      	bx	lr
 801ced6:	bf00      	nop
 801ced8:	40010000 	.word	0x40010000
 801cedc:	40000400 	.word	0x40000400
 801cee0:	40000800 	.word	0x40000800
 801cee4:	40000c00 	.word	0x40000c00
 801cee8:	40014000 	.word	0x40014000
 801ceec:	40014400 	.word	0x40014400
 801cef0:	40014800 	.word	0x40014800

0801cef4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801cef4:	b480      	push	{r7}
 801cef6:	b087      	sub	sp, #28
 801cef8:	af00      	add	r7, sp, #0
 801cefa:	6078      	str	r0, [r7, #4]
 801cefc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801cefe:	687b      	ldr	r3, [r7, #4]
 801cf00:	6a1b      	ldr	r3, [r3, #32]
 801cf02:	f023 0201 	bic.w	r2, r3, #1
 801cf06:	687b      	ldr	r3, [r7, #4]
 801cf08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801cf0a:	687b      	ldr	r3, [r7, #4]
 801cf0c:	6a1b      	ldr	r3, [r3, #32]
 801cf0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801cf10:	687b      	ldr	r3, [r7, #4]
 801cf12:	685b      	ldr	r3, [r3, #4]
 801cf14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801cf16:	687b      	ldr	r3, [r7, #4]
 801cf18:	699b      	ldr	r3, [r3, #24]
 801cf1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801cf1c:	68fb      	ldr	r3, [r7, #12]
 801cf1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801cf22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801cf24:	68fb      	ldr	r3, [r7, #12]
 801cf26:	f023 0303 	bic.w	r3, r3, #3
 801cf2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801cf2c:	683b      	ldr	r3, [r7, #0]
 801cf2e:	681b      	ldr	r3, [r3, #0]
 801cf30:	68fa      	ldr	r2, [r7, #12]
 801cf32:	4313      	orrs	r3, r2
 801cf34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801cf36:	697b      	ldr	r3, [r7, #20]
 801cf38:	f023 0302 	bic.w	r3, r3, #2
 801cf3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801cf3e:	683b      	ldr	r3, [r7, #0]
 801cf40:	689b      	ldr	r3, [r3, #8]
 801cf42:	697a      	ldr	r2, [r7, #20]
 801cf44:	4313      	orrs	r3, r2
 801cf46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801cf48:	687b      	ldr	r3, [r7, #4]
 801cf4a:	4a1c      	ldr	r2, [pc, #112]	; (801cfbc <TIM_OC1_SetConfig+0xc8>)
 801cf4c:	4293      	cmp	r3, r2
 801cf4e:	d10c      	bne.n	801cf6a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801cf50:	697b      	ldr	r3, [r7, #20]
 801cf52:	f023 0308 	bic.w	r3, r3, #8
 801cf56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801cf58:	683b      	ldr	r3, [r7, #0]
 801cf5a:	68db      	ldr	r3, [r3, #12]
 801cf5c:	697a      	ldr	r2, [r7, #20]
 801cf5e:	4313      	orrs	r3, r2
 801cf60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801cf62:	697b      	ldr	r3, [r7, #20]
 801cf64:	f023 0304 	bic.w	r3, r3, #4
 801cf68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801cf6a:	687b      	ldr	r3, [r7, #4]
 801cf6c:	4a13      	ldr	r2, [pc, #76]	; (801cfbc <TIM_OC1_SetConfig+0xc8>)
 801cf6e:	4293      	cmp	r3, r2
 801cf70:	d111      	bne.n	801cf96 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801cf72:	693b      	ldr	r3, [r7, #16]
 801cf74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801cf78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801cf7a:	693b      	ldr	r3, [r7, #16]
 801cf7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801cf80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801cf82:	683b      	ldr	r3, [r7, #0]
 801cf84:	695b      	ldr	r3, [r3, #20]
 801cf86:	693a      	ldr	r2, [r7, #16]
 801cf88:	4313      	orrs	r3, r2
 801cf8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801cf8c:	683b      	ldr	r3, [r7, #0]
 801cf8e:	699b      	ldr	r3, [r3, #24]
 801cf90:	693a      	ldr	r2, [r7, #16]
 801cf92:	4313      	orrs	r3, r2
 801cf94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801cf96:	687b      	ldr	r3, [r7, #4]
 801cf98:	693a      	ldr	r2, [r7, #16]
 801cf9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801cf9c:	687b      	ldr	r3, [r7, #4]
 801cf9e:	68fa      	ldr	r2, [r7, #12]
 801cfa0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801cfa2:	683b      	ldr	r3, [r7, #0]
 801cfa4:	685a      	ldr	r2, [r3, #4]
 801cfa6:	687b      	ldr	r3, [r7, #4]
 801cfa8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801cfaa:	687b      	ldr	r3, [r7, #4]
 801cfac:	697a      	ldr	r2, [r7, #20]
 801cfae:	621a      	str	r2, [r3, #32]
}
 801cfb0:	bf00      	nop
 801cfb2:	371c      	adds	r7, #28
 801cfb4:	46bd      	mov	sp, r7
 801cfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cfba:	4770      	bx	lr
 801cfbc:	40010000 	.word	0x40010000

0801cfc0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801cfc0:	b480      	push	{r7}
 801cfc2:	b087      	sub	sp, #28
 801cfc4:	af00      	add	r7, sp, #0
 801cfc6:	6078      	str	r0, [r7, #4]
 801cfc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801cfca:	687b      	ldr	r3, [r7, #4]
 801cfcc:	6a1b      	ldr	r3, [r3, #32]
 801cfce:	f023 0210 	bic.w	r2, r3, #16
 801cfd2:	687b      	ldr	r3, [r7, #4]
 801cfd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801cfd6:	687b      	ldr	r3, [r7, #4]
 801cfd8:	6a1b      	ldr	r3, [r3, #32]
 801cfda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801cfdc:	687b      	ldr	r3, [r7, #4]
 801cfde:	685b      	ldr	r3, [r3, #4]
 801cfe0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801cfe2:	687b      	ldr	r3, [r7, #4]
 801cfe4:	699b      	ldr	r3, [r3, #24]
 801cfe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801cfe8:	68fb      	ldr	r3, [r7, #12]
 801cfea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801cfee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801cff0:	68fb      	ldr	r3, [r7, #12]
 801cff2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801cff6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801cff8:	683b      	ldr	r3, [r7, #0]
 801cffa:	681b      	ldr	r3, [r3, #0]
 801cffc:	021b      	lsls	r3, r3, #8
 801cffe:	68fa      	ldr	r2, [r7, #12]
 801d000:	4313      	orrs	r3, r2
 801d002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801d004:	697b      	ldr	r3, [r7, #20]
 801d006:	f023 0320 	bic.w	r3, r3, #32
 801d00a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801d00c:	683b      	ldr	r3, [r7, #0]
 801d00e:	689b      	ldr	r3, [r3, #8]
 801d010:	011b      	lsls	r3, r3, #4
 801d012:	697a      	ldr	r2, [r7, #20]
 801d014:	4313      	orrs	r3, r2
 801d016:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801d018:	687b      	ldr	r3, [r7, #4]
 801d01a:	4a1e      	ldr	r2, [pc, #120]	; (801d094 <TIM_OC2_SetConfig+0xd4>)
 801d01c:	4293      	cmp	r3, r2
 801d01e:	d10d      	bne.n	801d03c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801d020:	697b      	ldr	r3, [r7, #20]
 801d022:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801d026:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801d028:	683b      	ldr	r3, [r7, #0]
 801d02a:	68db      	ldr	r3, [r3, #12]
 801d02c:	011b      	lsls	r3, r3, #4
 801d02e:	697a      	ldr	r2, [r7, #20]
 801d030:	4313      	orrs	r3, r2
 801d032:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801d034:	697b      	ldr	r3, [r7, #20]
 801d036:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801d03a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801d03c:	687b      	ldr	r3, [r7, #4]
 801d03e:	4a15      	ldr	r2, [pc, #84]	; (801d094 <TIM_OC2_SetConfig+0xd4>)
 801d040:	4293      	cmp	r3, r2
 801d042:	d113      	bne.n	801d06c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801d044:	693b      	ldr	r3, [r7, #16]
 801d046:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801d04a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801d04c:	693b      	ldr	r3, [r7, #16]
 801d04e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801d052:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801d054:	683b      	ldr	r3, [r7, #0]
 801d056:	695b      	ldr	r3, [r3, #20]
 801d058:	009b      	lsls	r3, r3, #2
 801d05a:	693a      	ldr	r2, [r7, #16]
 801d05c:	4313      	orrs	r3, r2
 801d05e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801d060:	683b      	ldr	r3, [r7, #0]
 801d062:	699b      	ldr	r3, [r3, #24]
 801d064:	009b      	lsls	r3, r3, #2
 801d066:	693a      	ldr	r2, [r7, #16]
 801d068:	4313      	orrs	r3, r2
 801d06a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d06c:	687b      	ldr	r3, [r7, #4]
 801d06e:	693a      	ldr	r2, [r7, #16]
 801d070:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801d072:	687b      	ldr	r3, [r7, #4]
 801d074:	68fa      	ldr	r2, [r7, #12]
 801d076:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801d078:	683b      	ldr	r3, [r7, #0]
 801d07a:	685a      	ldr	r2, [r3, #4]
 801d07c:	687b      	ldr	r3, [r7, #4]
 801d07e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d080:	687b      	ldr	r3, [r7, #4]
 801d082:	697a      	ldr	r2, [r7, #20]
 801d084:	621a      	str	r2, [r3, #32]
}
 801d086:	bf00      	nop
 801d088:	371c      	adds	r7, #28
 801d08a:	46bd      	mov	sp, r7
 801d08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d090:	4770      	bx	lr
 801d092:	bf00      	nop
 801d094:	40010000 	.word	0x40010000

0801d098 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801d098:	b480      	push	{r7}
 801d09a:	b087      	sub	sp, #28
 801d09c:	af00      	add	r7, sp, #0
 801d09e:	6078      	str	r0, [r7, #4]
 801d0a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801d0a2:	687b      	ldr	r3, [r7, #4]
 801d0a4:	6a1b      	ldr	r3, [r3, #32]
 801d0a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801d0aa:	687b      	ldr	r3, [r7, #4]
 801d0ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d0ae:	687b      	ldr	r3, [r7, #4]
 801d0b0:	6a1b      	ldr	r3, [r3, #32]
 801d0b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d0b4:	687b      	ldr	r3, [r7, #4]
 801d0b6:	685b      	ldr	r3, [r3, #4]
 801d0b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801d0ba:	687b      	ldr	r3, [r7, #4]
 801d0bc:	69db      	ldr	r3, [r3, #28]
 801d0be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801d0c0:	68fb      	ldr	r3, [r7, #12]
 801d0c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801d0c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801d0c8:	68fb      	ldr	r3, [r7, #12]
 801d0ca:	f023 0303 	bic.w	r3, r3, #3
 801d0ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801d0d0:	683b      	ldr	r3, [r7, #0]
 801d0d2:	681b      	ldr	r3, [r3, #0]
 801d0d4:	68fa      	ldr	r2, [r7, #12]
 801d0d6:	4313      	orrs	r3, r2
 801d0d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801d0da:	697b      	ldr	r3, [r7, #20]
 801d0dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801d0e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801d0e2:	683b      	ldr	r3, [r7, #0]
 801d0e4:	689b      	ldr	r3, [r3, #8]
 801d0e6:	021b      	lsls	r3, r3, #8
 801d0e8:	697a      	ldr	r2, [r7, #20]
 801d0ea:	4313      	orrs	r3, r2
 801d0ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801d0ee:	687b      	ldr	r3, [r7, #4]
 801d0f0:	4a1d      	ldr	r2, [pc, #116]	; (801d168 <TIM_OC3_SetConfig+0xd0>)
 801d0f2:	4293      	cmp	r3, r2
 801d0f4:	d10d      	bne.n	801d112 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801d0f6:	697b      	ldr	r3, [r7, #20]
 801d0f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801d0fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801d0fe:	683b      	ldr	r3, [r7, #0]
 801d100:	68db      	ldr	r3, [r3, #12]
 801d102:	021b      	lsls	r3, r3, #8
 801d104:	697a      	ldr	r2, [r7, #20]
 801d106:	4313      	orrs	r3, r2
 801d108:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801d10a:	697b      	ldr	r3, [r7, #20]
 801d10c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801d110:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801d112:	687b      	ldr	r3, [r7, #4]
 801d114:	4a14      	ldr	r2, [pc, #80]	; (801d168 <TIM_OC3_SetConfig+0xd0>)
 801d116:	4293      	cmp	r3, r2
 801d118:	d113      	bne.n	801d142 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801d11a:	693b      	ldr	r3, [r7, #16]
 801d11c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801d120:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801d122:	693b      	ldr	r3, [r7, #16]
 801d124:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801d128:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801d12a:	683b      	ldr	r3, [r7, #0]
 801d12c:	695b      	ldr	r3, [r3, #20]
 801d12e:	011b      	lsls	r3, r3, #4
 801d130:	693a      	ldr	r2, [r7, #16]
 801d132:	4313      	orrs	r3, r2
 801d134:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801d136:	683b      	ldr	r3, [r7, #0]
 801d138:	699b      	ldr	r3, [r3, #24]
 801d13a:	011b      	lsls	r3, r3, #4
 801d13c:	693a      	ldr	r2, [r7, #16]
 801d13e:	4313      	orrs	r3, r2
 801d140:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d142:	687b      	ldr	r3, [r7, #4]
 801d144:	693a      	ldr	r2, [r7, #16]
 801d146:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801d148:	687b      	ldr	r3, [r7, #4]
 801d14a:	68fa      	ldr	r2, [r7, #12]
 801d14c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801d14e:	683b      	ldr	r3, [r7, #0]
 801d150:	685a      	ldr	r2, [r3, #4]
 801d152:	687b      	ldr	r3, [r7, #4]
 801d154:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d156:	687b      	ldr	r3, [r7, #4]
 801d158:	697a      	ldr	r2, [r7, #20]
 801d15a:	621a      	str	r2, [r3, #32]
}
 801d15c:	bf00      	nop
 801d15e:	371c      	adds	r7, #28
 801d160:	46bd      	mov	sp, r7
 801d162:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d166:	4770      	bx	lr
 801d168:	40010000 	.word	0x40010000

0801d16c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801d16c:	b480      	push	{r7}
 801d16e:	b087      	sub	sp, #28
 801d170:	af00      	add	r7, sp, #0
 801d172:	6078      	str	r0, [r7, #4]
 801d174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801d176:	687b      	ldr	r3, [r7, #4]
 801d178:	6a1b      	ldr	r3, [r3, #32]
 801d17a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801d17e:	687b      	ldr	r3, [r7, #4]
 801d180:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d182:	687b      	ldr	r3, [r7, #4]
 801d184:	6a1b      	ldr	r3, [r3, #32]
 801d186:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d188:	687b      	ldr	r3, [r7, #4]
 801d18a:	685b      	ldr	r3, [r3, #4]
 801d18c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801d18e:	687b      	ldr	r3, [r7, #4]
 801d190:	69db      	ldr	r3, [r3, #28]
 801d192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801d194:	68fb      	ldr	r3, [r7, #12]
 801d196:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801d19a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801d19c:	68fb      	ldr	r3, [r7, #12]
 801d19e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801d1a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801d1a4:	683b      	ldr	r3, [r7, #0]
 801d1a6:	681b      	ldr	r3, [r3, #0]
 801d1a8:	021b      	lsls	r3, r3, #8
 801d1aa:	68fa      	ldr	r2, [r7, #12]
 801d1ac:	4313      	orrs	r3, r2
 801d1ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801d1b0:	693b      	ldr	r3, [r7, #16]
 801d1b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801d1b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801d1b8:	683b      	ldr	r3, [r7, #0]
 801d1ba:	689b      	ldr	r3, [r3, #8]
 801d1bc:	031b      	lsls	r3, r3, #12
 801d1be:	693a      	ldr	r2, [r7, #16]
 801d1c0:	4313      	orrs	r3, r2
 801d1c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801d1c4:	687b      	ldr	r3, [r7, #4]
 801d1c6:	4a10      	ldr	r2, [pc, #64]	; (801d208 <TIM_OC4_SetConfig+0x9c>)
 801d1c8:	4293      	cmp	r3, r2
 801d1ca:	d109      	bne.n	801d1e0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801d1cc:	697b      	ldr	r3, [r7, #20]
 801d1ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801d1d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801d1d4:	683b      	ldr	r3, [r7, #0]
 801d1d6:	695b      	ldr	r3, [r3, #20]
 801d1d8:	019b      	lsls	r3, r3, #6
 801d1da:	697a      	ldr	r2, [r7, #20]
 801d1dc:	4313      	orrs	r3, r2
 801d1de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d1e0:	687b      	ldr	r3, [r7, #4]
 801d1e2:	697a      	ldr	r2, [r7, #20]
 801d1e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801d1e6:	687b      	ldr	r3, [r7, #4]
 801d1e8:	68fa      	ldr	r2, [r7, #12]
 801d1ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801d1ec:	683b      	ldr	r3, [r7, #0]
 801d1ee:	685a      	ldr	r2, [r3, #4]
 801d1f0:	687b      	ldr	r3, [r7, #4]
 801d1f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d1f4:	687b      	ldr	r3, [r7, #4]
 801d1f6:	693a      	ldr	r2, [r7, #16]
 801d1f8:	621a      	str	r2, [r3, #32]
}
 801d1fa:	bf00      	nop
 801d1fc:	371c      	adds	r7, #28
 801d1fe:	46bd      	mov	sp, r7
 801d200:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d204:	4770      	bx	lr
 801d206:	bf00      	nop
 801d208:	40010000 	.word	0x40010000

0801d20c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801d20c:	b480      	push	{r7}
 801d20e:	b087      	sub	sp, #28
 801d210:	af00      	add	r7, sp, #0
 801d212:	60f8      	str	r0, [r7, #12]
 801d214:	60b9      	str	r1, [r7, #8]
 801d216:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801d218:	68fb      	ldr	r3, [r7, #12]
 801d21a:	6a1b      	ldr	r3, [r3, #32]
 801d21c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801d21e:	68fb      	ldr	r3, [r7, #12]
 801d220:	6a1b      	ldr	r3, [r3, #32]
 801d222:	f023 0201 	bic.w	r2, r3, #1
 801d226:	68fb      	ldr	r3, [r7, #12]
 801d228:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801d22a:	68fb      	ldr	r3, [r7, #12]
 801d22c:	699b      	ldr	r3, [r3, #24]
 801d22e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801d230:	693b      	ldr	r3, [r7, #16]
 801d232:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801d236:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801d238:	687b      	ldr	r3, [r7, #4]
 801d23a:	011b      	lsls	r3, r3, #4
 801d23c:	693a      	ldr	r2, [r7, #16]
 801d23e:	4313      	orrs	r3, r2
 801d240:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801d242:	697b      	ldr	r3, [r7, #20]
 801d244:	f023 030a 	bic.w	r3, r3, #10
 801d248:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801d24a:	697a      	ldr	r2, [r7, #20]
 801d24c:	68bb      	ldr	r3, [r7, #8]
 801d24e:	4313      	orrs	r3, r2
 801d250:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801d252:	68fb      	ldr	r3, [r7, #12]
 801d254:	693a      	ldr	r2, [r7, #16]
 801d256:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801d258:	68fb      	ldr	r3, [r7, #12]
 801d25a:	697a      	ldr	r2, [r7, #20]
 801d25c:	621a      	str	r2, [r3, #32]
}
 801d25e:	bf00      	nop
 801d260:	371c      	adds	r7, #28
 801d262:	46bd      	mov	sp, r7
 801d264:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d268:	4770      	bx	lr

0801d26a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801d26a:	b480      	push	{r7}
 801d26c:	b087      	sub	sp, #28
 801d26e:	af00      	add	r7, sp, #0
 801d270:	60f8      	str	r0, [r7, #12]
 801d272:	60b9      	str	r1, [r7, #8]
 801d274:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801d276:	68fb      	ldr	r3, [r7, #12]
 801d278:	6a1b      	ldr	r3, [r3, #32]
 801d27a:	f023 0210 	bic.w	r2, r3, #16
 801d27e:	68fb      	ldr	r3, [r7, #12]
 801d280:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801d282:	68fb      	ldr	r3, [r7, #12]
 801d284:	699b      	ldr	r3, [r3, #24]
 801d286:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801d288:	68fb      	ldr	r3, [r7, #12]
 801d28a:	6a1b      	ldr	r3, [r3, #32]
 801d28c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801d28e:	697b      	ldr	r3, [r7, #20]
 801d290:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801d294:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801d296:	687b      	ldr	r3, [r7, #4]
 801d298:	031b      	lsls	r3, r3, #12
 801d29a:	697a      	ldr	r2, [r7, #20]
 801d29c:	4313      	orrs	r3, r2
 801d29e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801d2a0:	693b      	ldr	r3, [r7, #16]
 801d2a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801d2a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801d2a8:	68bb      	ldr	r3, [r7, #8]
 801d2aa:	011b      	lsls	r3, r3, #4
 801d2ac:	693a      	ldr	r2, [r7, #16]
 801d2ae:	4313      	orrs	r3, r2
 801d2b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801d2b2:	68fb      	ldr	r3, [r7, #12]
 801d2b4:	697a      	ldr	r2, [r7, #20]
 801d2b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801d2b8:	68fb      	ldr	r3, [r7, #12]
 801d2ba:	693a      	ldr	r2, [r7, #16]
 801d2bc:	621a      	str	r2, [r3, #32]
}
 801d2be:	bf00      	nop
 801d2c0:	371c      	adds	r7, #28
 801d2c2:	46bd      	mov	sp, r7
 801d2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d2c8:	4770      	bx	lr

0801d2ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801d2ca:	b480      	push	{r7}
 801d2cc:	b085      	sub	sp, #20
 801d2ce:	af00      	add	r7, sp, #0
 801d2d0:	6078      	str	r0, [r7, #4]
 801d2d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801d2d4:	687b      	ldr	r3, [r7, #4]
 801d2d6:	689b      	ldr	r3, [r3, #8]
 801d2d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801d2da:	68fb      	ldr	r3, [r7, #12]
 801d2dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801d2e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801d2e2:	683a      	ldr	r2, [r7, #0]
 801d2e4:	68fb      	ldr	r3, [r7, #12]
 801d2e6:	4313      	orrs	r3, r2
 801d2e8:	f043 0307 	orr.w	r3, r3, #7
 801d2ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801d2ee:	687b      	ldr	r3, [r7, #4]
 801d2f0:	68fa      	ldr	r2, [r7, #12]
 801d2f2:	609a      	str	r2, [r3, #8]
}
 801d2f4:	bf00      	nop
 801d2f6:	3714      	adds	r7, #20
 801d2f8:	46bd      	mov	sp, r7
 801d2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d2fe:	4770      	bx	lr

0801d300 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801d300:	b480      	push	{r7}
 801d302:	b087      	sub	sp, #28
 801d304:	af00      	add	r7, sp, #0
 801d306:	60f8      	str	r0, [r7, #12]
 801d308:	60b9      	str	r1, [r7, #8]
 801d30a:	607a      	str	r2, [r7, #4]
 801d30c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801d30e:	68fb      	ldr	r3, [r7, #12]
 801d310:	689b      	ldr	r3, [r3, #8]
 801d312:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801d314:	697b      	ldr	r3, [r7, #20]
 801d316:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801d31a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801d31c:	683b      	ldr	r3, [r7, #0]
 801d31e:	021a      	lsls	r2, r3, #8
 801d320:	687b      	ldr	r3, [r7, #4]
 801d322:	431a      	orrs	r2, r3
 801d324:	68bb      	ldr	r3, [r7, #8]
 801d326:	4313      	orrs	r3, r2
 801d328:	697a      	ldr	r2, [r7, #20]
 801d32a:	4313      	orrs	r3, r2
 801d32c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801d32e:	68fb      	ldr	r3, [r7, #12]
 801d330:	697a      	ldr	r2, [r7, #20]
 801d332:	609a      	str	r2, [r3, #8]
}
 801d334:	bf00      	nop
 801d336:	371c      	adds	r7, #28
 801d338:	46bd      	mov	sp, r7
 801d33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d33e:	4770      	bx	lr

0801d340 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801d340:	b480      	push	{r7}
 801d342:	b087      	sub	sp, #28
 801d344:	af00      	add	r7, sp, #0
 801d346:	60f8      	str	r0, [r7, #12]
 801d348:	60b9      	str	r1, [r7, #8]
 801d34a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801d34c:	68bb      	ldr	r3, [r7, #8]
 801d34e:	f003 031f 	and.w	r3, r3, #31
 801d352:	2201      	movs	r2, #1
 801d354:	fa02 f303 	lsl.w	r3, r2, r3
 801d358:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801d35a:	68fb      	ldr	r3, [r7, #12]
 801d35c:	6a1a      	ldr	r2, [r3, #32]
 801d35e:	697b      	ldr	r3, [r7, #20]
 801d360:	43db      	mvns	r3, r3
 801d362:	401a      	ands	r2, r3
 801d364:	68fb      	ldr	r3, [r7, #12]
 801d366:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801d368:	68fb      	ldr	r3, [r7, #12]
 801d36a:	6a1a      	ldr	r2, [r3, #32]
 801d36c:	68bb      	ldr	r3, [r7, #8]
 801d36e:	f003 031f 	and.w	r3, r3, #31
 801d372:	6879      	ldr	r1, [r7, #4]
 801d374:	fa01 f303 	lsl.w	r3, r1, r3
 801d378:	431a      	orrs	r2, r3
 801d37a:	68fb      	ldr	r3, [r7, #12]
 801d37c:	621a      	str	r2, [r3, #32]
}
 801d37e:	bf00      	nop
 801d380:	371c      	adds	r7, #28
 801d382:	46bd      	mov	sp, r7
 801d384:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d388:	4770      	bx	lr
	...

0801d38c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 801d38c:	b480      	push	{r7}
 801d38e:	b085      	sub	sp, #20
 801d390:	af00      	add	r7, sp, #0
 801d392:	6078      	str	r0, [r7, #4]
 801d394:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801d396:	687b      	ldr	r3, [r7, #4]
 801d398:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801d39c:	2b01      	cmp	r3, #1
 801d39e:	d101      	bne.n	801d3a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801d3a0:	2302      	movs	r3, #2
 801d3a2:	e050      	b.n	801d446 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 801d3a4:	687b      	ldr	r3, [r7, #4]
 801d3a6:	2201      	movs	r2, #1
 801d3a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801d3ac:	687b      	ldr	r3, [r7, #4]
 801d3ae:	2202      	movs	r2, #2
 801d3b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801d3b4:	687b      	ldr	r3, [r7, #4]
 801d3b6:	681b      	ldr	r3, [r3, #0]
 801d3b8:	685b      	ldr	r3, [r3, #4]
 801d3ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801d3bc:	687b      	ldr	r3, [r7, #4]
 801d3be:	681b      	ldr	r3, [r3, #0]
 801d3c0:	689b      	ldr	r3, [r3, #8]
 801d3c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801d3c4:	68fb      	ldr	r3, [r7, #12]
 801d3c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801d3ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801d3cc:	683b      	ldr	r3, [r7, #0]
 801d3ce:	681b      	ldr	r3, [r3, #0]
 801d3d0:	68fa      	ldr	r2, [r7, #12]
 801d3d2:	4313      	orrs	r3, r2
 801d3d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801d3d6:	687b      	ldr	r3, [r7, #4]
 801d3d8:	681b      	ldr	r3, [r3, #0]
 801d3da:	68fa      	ldr	r2, [r7, #12]
 801d3dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801d3de:	687b      	ldr	r3, [r7, #4]
 801d3e0:	681b      	ldr	r3, [r3, #0]
 801d3e2:	4a1c      	ldr	r2, [pc, #112]	; (801d454 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 801d3e4:	4293      	cmp	r3, r2
 801d3e6:	d018      	beq.n	801d41a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801d3e8:	687b      	ldr	r3, [r7, #4]
 801d3ea:	681b      	ldr	r3, [r3, #0]
 801d3ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801d3f0:	d013      	beq.n	801d41a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801d3f2:	687b      	ldr	r3, [r7, #4]
 801d3f4:	681b      	ldr	r3, [r3, #0]
 801d3f6:	4a18      	ldr	r2, [pc, #96]	; (801d458 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 801d3f8:	4293      	cmp	r3, r2
 801d3fa:	d00e      	beq.n	801d41a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801d3fc:	687b      	ldr	r3, [r7, #4]
 801d3fe:	681b      	ldr	r3, [r3, #0]
 801d400:	4a16      	ldr	r2, [pc, #88]	; (801d45c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 801d402:	4293      	cmp	r3, r2
 801d404:	d009      	beq.n	801d41a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801d406:	687b      	ldr	r3, [r7, #4]
 801d408:	681b      	ldr	r3, [r3, #0]
 801d40a:	4a15      	ldr	r2, [pc, #84]	; (801d460 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 801d40c:	4293      	cmp	r3, r2
 801d40e:	d004      	beq.n	801d41a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801d410:	687b      	ldr	r3, [r7, #4]
 801d412:	681b      	ldr	r3, [r3, #0]
 801d414:	4a13      	ldr	r2, [pc, #76]	; (801d464 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 801d416:	4293      	cmp	r3, r2
 801d418:	d10c      	bne.n	801d434 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801d41a:	68bb      	ldr	r3, [r7, #8]
 801d41c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801d420:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801d422:	683b      	ldr	r3, [r7, #0]
 801d424:	685b      	ldr	r3, [r3, #4]
 801d426:	68ba      	ldr	r2, [r7, #8]
 801d428:	4313      	orrs	r3, r2
 801d42a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801d42c:	687b      	ldr	r3, [r7, #4]
 801d42e:	681b      	ldr	r3, [r3, #0]
 801d430:	68ba      	ldr	r2, [r7, #8]
 801d432:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801d434:	687b      	ldr	r3, [r7, #4]
 801d436:	2201      	movs	r2, #1
 801d438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801d43c:	687b      	ldr	r3, [r7, #4]
 801d43e:	2200      	movs	r2, #0
 801d440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801d444:	2300      	movs	r3, #0
}
 801d446:	4618      	mov	r0, r3
 801d448:	3714      	adds	r7, #20
 801d44a:	46bd      	mov	sp, r7
 801d44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d450:	4770      	bx	lr
 801d452:	bf00      	nop
 801d454:	40010000 	.word	0x40010000
 801d458:	40000400 	.word	0x40000400
 801d45c:	40000800 	.word	0x40000800
 801d460:	40000c00 	.word	0x40000c00
 801d464:	40014000 	.word	0x40014000

0801d468 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801d468:	b084      	sub	sp, #16
 801d46a:	b580      	push	{r7, lr}
 801d46c:	b084      	sub	sp, #16
 801d46e:	af00      	add	r7, sp, #0
 801d470:	6078      	str	r0, [r7, #4]
 801d472:	f107 001c 	add.w	r0, r7, #28
 801d476:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801d47a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d47c:	2b01      	cmp	r3, #1
 801d47e:	d122      	bne.n	801d4c6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801d480:	687b      	ldr	r3, [r7, #4]
 801d482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d484:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801d488:	687b      	ldr	r3, [r7, #4]
 801d48a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 801d48c:	687b      	ldr	r3, [r7, #4]
 801d48e:	68db      	ldr	r3, [r3, #12]
 801d490:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 801d494:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801d498:	687a      	ldr	r2, [r7, #4]
 801d49a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 801d49c:	687b      	ldr	r3, [r7, #4]
 801d49e:	68db      	ldr	r3, [r3, #12]
 801d4a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801d4a4:	687b      	ldr	r3, [r7, #4]
 801d4a6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 801d4a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d4aa:	2b01      	cmp	r3, #1
 801d4ac:	d105      	bne.n	801d4ba <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 801d4ae:	687b      	ldr	r3, [r7, #4]
 801d4b0:	68db      	ldr	r3, [r3, #12]
 801d4b2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 801d4b6:	687b      	ldr	r3, [r7, #4]
 801d4b8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 801d4ba:	6878      	ldr	r0, [r7, #4]
 801d4bc:	f000 f94a 	bl	801d754 <USB_CoreReset>
 801d4c0:	4603      	mov	r3, r0
 801d4c2:	73fb      	strb	r3, [r7, #15]
 801d4c4:	e01a      	b.n	801d4fc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801d4c6:	687b      	ldr	r3, [r7, #4]
 801d4c8:	68db      	ldr	r3, [r3, #12]
 801d4ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801d4ce:	687b      	ldr	r3, [r7, #4]
 801d4d0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801d4d2:	6878      	ldr	r0, [r7, #4]
 801d4d4:	f000 f93e 	bl	801d754 <USB_CoreReset>
 801d4d8:	4603      	mov	r3, r0
 801d4da:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 801d4dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d4de:	2b00      	cmp	r3, #0
 801d4e0:	d106      	bne.n	801d4f0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801d4e2:	687b      	ldr	r3, [r7, #4]
 801d4e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d4e6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801d4ea:	687b      	ldr	r3, [r7, #4]
 801d4ec:	639a      	str	r2, [r3, #56]	; 0x38
 801d4ee:	e005      	b.n	801d4fc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801d4f0:	687b      	ldr	r3, [r7, #4]
 801d4f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d4f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801d4f8:	687b      	ldr	r3, [r7, #4]
 801d4fa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 801d4fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d4fe:	2b01      	cmp	r3, #1
 801d500:	d10b      	bne.n	801d51a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 801d502:	687b      	ldr	r3, [r7, #4]
 801d504:	689b      	ldr	r3, [r3, #8]
 801d506:	f043 0206 	orr.w	r2, r3, #6
 801d50a:	687b      	ldr	r3, [r7, #4]
 801d50c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801d50e:	687b      	ldr	r3, [r7, #4]
 801d510:	689b      	ldr	r3, [r3, #8]
 801d512:	f043 0220 	orr.w	r2, r3, #32
 801d516:	687b      	ldr	r3, [r7, #4]
 801d518:	609a      	str	r2, [r3, #8]
  }

  return ret;
 801d51a:	7bfb      	ldrb	r3, [r7, #15]
}
 801d51c:	4618      	mov	r0, r3
 801d51e:	3710      	adds	r7, #16
 801d520:	46bd      	mov	sp, r7
 801d522:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801d526:	b004      	add	sp, #16
 801d528:	4770      	bx	lr

0801d52a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801d52a:	b480      	push	{r7}
 801d52c:	b083      	sub	sp, #12
 801d52e:	af00      	add	r7, sp, #0
 801d530:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 801d532:	687b      	ldr	r3, [r7, #4]
 801d534:	689b      	ldr	r3, [r3, #8]
 801d536:	f043 0201 	orr.w	r2, r3, #1
 801d53a:	687b      	ldr	r3, [r7, #4]
 801d53c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801d53e:	2300      	movs	r3, #0
}
 801d540:	4618      	mov	r0, r3
 801d542:	370c      	adds	r7, #12
 801d544:	46bd      	mov	sp, r7
 801d546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d54a:	4770      	bx	lr

0801d54c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801d54c:	b480      	push	{r7}
 801d54e:	b083      	sub	sp, #12
 801d550:	af00      	add	r7, sp, #0
 801d552:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801d554:	687b      	ldr	r3, [r7, #4]
 801d556:	689b      	ldr	r3, [r3, #8]
 801d558:	f023 0201 	bic.w	r2, r3, #1
 801d55c:	687b      	ldr	r3, [r7, #4]
 801d55e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801d560:	2300      	movs	r3, #0
}
 801d562:	4618      	mov	r0, r3
 801d564:	370c      	adds	r7, #12
 801d566:	46bd      	mov	sp, r7
 801d568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d56c:	4770      	bx	lr

0801d56e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 801d56e:	b580      	push	{r7, lr}
 801d570:	b082      	sub	sp, #8
 801d572:	af00      	add	r7, sp, #0
 801d574:	6078      	str	r0, [r7, #4]
 801d576:	460b      	mov	r3, r1
 801d578:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 801d57a:	687b      	ldr	r3, [r7, #4]
 801d57c:	68db      	ldr	r3, [r3, #12]
 801d57e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 801d582:	687b      	ldr	r3, [r7, #4]
 801d584:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 801d586:	78fb      	ldrb	r3, [r7, #3]
 801d588:	2b01      	cmp	r3, #1
 801d58a:	d106      	bne.n	801d59a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801d58c:	687b      	ldr	r3, [r7, #4]
 801d58e:	68db      	ldr	r3, [r3, #12]
 801d590:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 801d594:	687b      	ldr	r3, [r7, #4]
 801d596:	60da      	str	r2, [r3, #12]
 801d598:	e00b      	b.n	801d5b2 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 801d59a:	78fb      	ldrb	r3, [r7, #3]
 801d59c:	2b00      	cmp	r3, #0
 801d59e:	d106      	bne.n	801d5ae <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 801d5a0:	687b      	ldr	r3, [r7, #4]
 801d5a2:	68db      	ldr	r3, [r3, #12]
 801d5a4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 801d5a8:	687b      	ldr	r3, [r7, #4]
 801d5aa:	60da      	str	r2, [r3, #12]
 801d5ac:	e001      	b.n	801d5b2 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 801d5ae:	2301      	movs	r3, #1
 801d5b0:	e003      	b.n	801d5ba <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 801d5b2:	2032      	movs	r0, #50	; 0x32
 801d5b4:	f7fb fc76 	bl	8018ea4 <HAL_Delay>

  return HAL_OK;
 801d5b8:	2300      	movs	r3, #0
}
 801d5ba:	4618      	mov	r0, r3
 801d5bc:	3708      	adds	r7, #8
 801d5be:	46bd      	mov	sp, r7
 801d5c0:	bd80      	pop	{r7, pc}
	...

0801d5c4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 801d5c4:	b480      	push	{r7}
 801d5c6:	b085      	sub	sp, #20
 801d5c8:	af00      	add	r7, sp, #0
 801d5ca:	6078      	str	r0, [r7, #4]
 801d5cc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 801d5ce:	2300      	movs	r3, #0
 801d5d0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801d5d2:	683b      	ldr	r3, [r7, #0]
 801d5d4:	019b      	lsls	r3, r3, #6
 801d5d6:	f043 0220 	orr.w	r2, r3, #32
 801d5da:	687b      	ldr	r3, [r7, #4]
 801d5dc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801d5de:	68fb      	ldr	r3, [r7, #12]
 801d5e0:	3301      	adds	r3, #1
 801d5e2:	60fb      	str	r3, [r7, #12]
 801d5e4:	68fb      	ldr	r3, [r7, #12]
 801d5e6:	4a09      	ldr	r2, [pc, #36]	; (801d60c <USB_FlushTxFifo+0x48>)
 801d5e8:	4293      	cmp	r3, r2
 801d5ea:	d901      	bls.n	801d5f0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 801d5ec:	2303      	movs	r3, #3
 801d5ee:	e006      	b.n	801d5fe <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801d5f0:	687b      	ldr	r3, [r7, #4]
 801d5f2:	691b      	ldr	r3, [r3, #16]
 801d5f4:	f003 0320 	and.w	r3, r3, #32
 801d5f8:	2b20      	cmp	r3, #32
 801d5fa:	d0f0      	beq.n	801d5de <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 801d5fc:	2300      	movs	r3, #0
}
 801d5fe:	4618      	mov	r0, r3
 801d600:	3714      	adds	r7, #20
 801d602:	46bd      	mov	sp, r7
 801d604:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d608:	4770      	bx	lr
 801d60a:	bf00      	nop
 801d60c:	00030d40 	.word	0x00030d40

0801d610 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 801d610:	b480      	push	{r7}
 801d612:	b085      	sub	sp, #20
 801d614:	af00      	add	r7, sp, #0
 801d616:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 801d618:	2300      	movs	r3, #0
 801d61a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801d61c:	687b      	ldr	r3, [r7, #4]
 801d61e:	2210      	movs	r2, #16
 801d620:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801d622:	68fb      	ldr	r3, [r7, #12]
 801d624:	3301      	adds	r3, #1
 801d626:	60fb      	str	r3, [r7, #12]
 801d628:	68fb      	ldr	r3, [r7, #12]
 801d62a:	4a09      	ldr	r2, [pc, #36]	; (801d650 <USB_FlushRxFifo+0x40>)
 801d62c:	4293      	cmp	r3, r2
 801d62e:	d901      	bls.n	801d634 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 801d630:	2303      	movs	r3, #3
 801d632:	e006      	b.n	801d642 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801d634:	687b      	ldr	r3, [r7, #4]
 801d636:	691b      	ldr	r3, [r3, #16]
 801d638:	f003 0310 	and.w	r3, r3, #16
 801d63c:	2b10      	cmp	r3, #16
 801d63e:	d0f0      	beq.n	801d622 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 801d640:	2300      	movs	r3, #0
}
 801d642:	4618      	mov	r0, r3
 801d644:	3714      	adds	r7, #20
 801d646:	46bd      	mov	sp, r7
 801d648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d64c:	4770      	bx	lr
 801d64e:	bf00      	nop
 801d650:	00030d40 	.word	0x00030d40

0801d654 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 801d654:	b480      	push	{r7}
 801d656:	b089      	sub	sp, #36	; 0x24
 801d658:	af00      	add	r7, sp, #0
 801d65a:	60f8      	str	r0, [r7, #12]
 801d65c:	60b9      	str	r1, [r7, #8]
 801d65e:	4611      	mov	r1, r2
 801d660:	461a      	mov	r2, r3
 801d662:	460b      	mov	r3, r1
 801d664:	71fb      	strb	r3, [r7, #7]
 801d666:	4613      	mov	r3, r2
 801d668:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801d66a:	68fb      	ldr	r3, [r7, #12]
 801d66c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 801d66e:	68bb      	ldr	r3, [r7, #8]
 801d670:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 801d672:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801d676:	2b00      	cmp	r3, #0
 801d678:	d11a      	bne.n	801d6b0 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 801d67a:	88bb      	ldrh	r3, [r7, #4]
 801d67c:	3303      	adds	r3, #3
 801d67e:	089b      	lsrs	r3, r3, #2
 801d680:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 801d682:	2300      	movs	r3, #0
 801d684:	61bb      	str	r3, [r7, #24]
 801d686:	e00f      	b.n	801d6a8 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801d688:	79fb      	ldrb	r3, [r7, #7]
 801d68a:	031a      	lsls	r2, r3, #12
 801d68c:	697b      	ldr	r3, [r7, #20]
 801d68e:	4413      	add	r3, r2
 801d690:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801d694:	461a      	mov	r2, r3
 801d696:	69fb      	ldr	r3, [r7, #28]
 801d698:	681b      	ldr	r3, [r3, #0]
 801d69a:	6013      	str	r3, [r2, #0]
      pSrc++;
 801d69c:	69fb      	ldr	r3, [r7, #28]
 801d69e:	3304      	adds	r3, #4
 801d6a0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 801d6a2:	69bb      	ldr	r3, [r7, #24]
 801d6a4:	3301      	adds	r3, #1
 801d6a6:	61bb      	str	r3, [r7, #24]
 801d6a8:	69ba      	ldr	r2, [r7, #24]
 801d6aa:	693b      	ldr	r3, [r7, #16]
 801d6ac:	429a      	cmp	r2, r3
 801d6ae:	d3eb      	bcc.n	801d688 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801d6b0:	2300      	movs	r3, #0
}
 801d6b2:	4618      	mov	r0, r3
 801d6b4:	3724      	adds	r7, #36	; 0x24
 801d6b6:	46bd      	mov	sp, r7
 801d6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d6bc:	4770      	bx	lr

0801d6be <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 801d6be:	b480      	push	{r7}
 801d6c0:	b089      	sub	sp, #36	; 0x24
 801d6c2:	af00      	add	r7, sp, #0
 801d6c4:	60f8      	str	r0, [r7, #12]
 801d6c6:	60b9      	str	r1, [r7, #8]
 801d6c8:	4613      	mov	r3, r2
 801d6ca:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801d6cc:	68fb      	ldr	r3, [r7, #12]
 801d6ce:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 801d6d0:	68bb      	ldr	r3, [r7, #8]
 801d6d2:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 801d6d4:	88fb      	ldrh	r3, [r7, #6]
 801d6d6:	3303      	adds	r3, #3
 801d6d8:	089b      	lsrs	r3, r3, #2
 801d6da:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 801d6dc:	2300      	movs	r3, #0
 801d6de:	61bb      	str	r3, [r7, #24]
 801d6e0:	e00b      	b.n	801d6fa <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801d6e2:	697b      	ldr	r3, [r7, #20]
 801d6e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801d6e8:	681a      	ldr	r2, [r3, #0]
 801d6ea:	69fb      	ldr	r3, [r7, #28]
 801d6ec:	601a      	str	r2, [r3, #0]
    pDest++;
 801d6ee:	69fb      	ldr	r3, [r7, #28]
 801d6f0:	3304      	adds	r3, #4
 801d6f2:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 801d6f4:	69bb      	ldr	r3, [r7, #24]
 801d6f6:	3301      	adds	r3, #1
 801d6f8:	61bb      	str	r3, [r7, #24]
 801d6fa:	69ba      	ldr	r2, [r7, #24]
 801d6fc:	693b      	ldr	r3, [r7, #16]
 801d6fe:	429a      	cmp	r2, r3
 801d700:	d3ef      	bcc.n	801d6e2 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 801d702:	69fb      	ldr	r3, [r7, #28]
}
 801d704:	4618      	mov	r0, r3
 801d706:	3724      	adds	r7, #36	; 0x24
 801d708:	46bd      	mov	sp, r7
 801d70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d70e:	4770      	bx	lr

0801d710 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 801d710:	b480      	push	{r7}
 801d712:	b085      	sub	sp, #20
 801d714:	af00      	add	r7, sp, #0
 801d716:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 801d718:	687b      	ldr	r3, [r7, #4]
 801d71a:	695b      	ldr	r3, [r3, #20]
 801d71c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801d71e:	687b      	ldr	r3, [r7, #4]
 801d720:	699b      	ldr	r3, [r3, #24]
 801d722:	68fa      	ldr	r2, [r7, #12]
 801d724:	4013      	ands	r3, r2
 801d726:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 801d728:	68fb      	ldr	r3, [r7, #12]
}
 801d72a:	4618      	mov	r0, r3
 801d72c:	3714      	adds	r7, #20
 801d72e:	46bd      	mov	sp, r7
 801d730:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d734:	4770      	bx	lr

0801d736 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 801d736:	b480      	push	{r7}
 801d738:	b083      	sub	sp, #12
 801d73a:	af00      	add	r7, sp, #0
 801d73c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801d73e:	687b      	ldr	r3, [r7, #4]
 801d740:	695b      	ldr	r3, [r3, #20]
 801d742:	f003 0301 	and.w	r3, r3, #1
}
 801d746:	4618      	mov	r0, r3
 801d748:	370c      	adds	r7, #12
 801d74a:	46bd      	mov	sp, r7
 801d74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d750:	4770      	bx	lr
	...

0801d754 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801d754:	b480      	push	{r7}
 801d756:	b085      	sub	sp, #20
 801d758:	af00      	add	r7, sp, #0
 801d75a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 801d75c:	2300      	movs	r3, #0
 801d75e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 801d760:	68fb      	ldr	r3, [r7, #12]
 801d762:	3301      	adds	r3, #1
 801d764:	60fb      	str	r3, [r7, #12]
 801d766:	68fb      	ldr	r3, [r7, #12]
 801d768:	4a13      	ldr	r2, [pc, #76]	; (801d7b8 <USB_CoreReset+0x64>)
 801d76a:	4293      	cmp	r3, r2
 801d76c:	d901      	bls.n	801d772 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801d76e:	2303      	movs	r3, #3
 801d770:	e01b      	b.n	801d7aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801d772:	687b      	ldr	r3, [r7, #4]
 801d774:	691b      	ldr	r3, [r3, #16]
 801d776:	2b00      	cmp	r3, #0
 801d778:	daf2      	bge.n	801d760 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801d77a:	2300      	movs	r3, #0
 801d77c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801d77e:	687b      	ldr	r3, [r7, #4]
 801d780:	691b      	ldr	r3, [r3, #16]
 801d782:	f043 0201 	orr.w	r2, r3, #1
 801d786:	687b      	ldr	r3, [r7, #4]
 801d788:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801d78a:	68fb      	ldr	r3, [r7, #12]
 801d78c:	3301      	adds	r3, #1
 801d78e:	60fb      	str	r3, [r7, #12]
 801d790:	68fb      	ldr	r3, [r7, #12]
 801d792:	4a09      	ldr	r2, [pc, #36]	; (801d7b8 <USB_CoreReset+0x64>)
 801d794:	4293      	cmp	r3, r2
 801d796:	d901      	bls.n	801d79c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 801d798:	2303      	movs	r3, #3
 801d79a:	e006      	b.n	801d7aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801d79c:	687b      	ldr	r3, [r7, #4]
 801d79e:	691b      	ldr	r3, [r3, #16]
 801d7a0:	f003 0301 	and.w	r3, r3, #1
 801d7a4:	2b01      	cmp	r3, #1
 801d7a6:	d0f0      	beq.n	801d78a <USB_CoreReset+0x36>

  return HAL_OK;
 801d7a8:	2300      	movs	r3, #0
}
 801d7aa:	4618      	mov	r0, r3
 801d7ac:	3714      	adds	r7, #20
 801d7ae:	46bd      	mov	sp, r7
 801d7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d7b4:	4770      	bx	lr
 801d7b6:	bf00      	nop
 801d7b8:	00030d40 	.word	0x00030d40

0801d7bc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801d7bc:	b084      	sub	sp, #16
 801d7be:	b580      	push	{r7, lr}
 801d7c0:	b084      	sub	sp, #16
 801d7c2:	af00      	add	r7, sp, #0
 801d7c4:	6078      	str	r0, [r7, #4]
 801d7c6:	f107 001c 	add.w	r0, r7, #28
 801d7ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 801d7ce:	687b      	ldr	r3, [r7, #4]
 801d7d0:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801d7d2:	68bb      	ldr	r3, [r7, #8]
 801d7d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801d7d8:	461a      	mov	r2, r3
 801d7da:	2300      	movs	r3, #0
 801d7dc:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 801d7de:	687b      	ldr	r3, [r7, #4]
 801d7e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d7e2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801d7e6:	687b      	ldr	r3, [r7, #4]
 801d7e8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 801d7ea:	687b      	ldr	r3, [r7, #4]
 801d7ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d7ee:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 801d7f2:	687b      	ldr	r3, [r7, #4]
 801d7f4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 801d7f6:	687b      	ldr	r3, [r7, #4]
 801d7f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d7fa:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 801d7fe:	687b      	ldr	r3, [r7, #4]
 801d800:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 801d802:	687b      	ldr	r3, [r7, #4]
 801d804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d80a:	2b00      	cmp	r3, #0
 801d80c:	d018      	beq.n	801d840 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 801d80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d810:	2b01      	cmp	r3, #1
 801d812:	d10a      	bne.n	801d82a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 801d814:	68bb      	ldr	r3, [r7, #8]
 801d816:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801d81a:	681b      	ldr	r3, [r3, #0]
 801d81c:	68ba      	ldr	r2, [r7, #8]
 801d81e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801d822:	f043 0304 	orr.w	r3, r3, #4
 801d826:	6013      	str	r3, [r2, #0]
 801d828:	e014      	b.n	801d854 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 801d82a:	68bb      	ldr	r3, [r7, #8]
 801d82c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801d830:	681b      	ldr	r3, [r3, #0]
 801d832:	68ba      	ldr	r2, [r7, #8]
 801d834:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801d838:	f023 0304 	bic.w	r3, r3, #4
 801d83c:	6013      	str	r3, [r2, #0]
 801d83e:	e009      	b.n	801d854 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 801d840:	68bb      	ldr	r3, [r7, #8]
 801d842:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801d846:	681b      	ldr	r3, [r3, #0]
 801d848:	68ba      	ldr	r2, [r7, #8]
 801d84a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801d84e:	f023 0304 	bic.w	r3, r3, #4
 801d852:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 801d854:	2110      	movs	r1, #16
 801d856:	6878      	ldr	r0, [r7, #4]
 801d858:	f7ff feb4 	bl	801d5c4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 801d85c:	6878      	ldr	r0, [r7, #4]
 801d85e:	f7ff fed7 	bl	801d610 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 801d862:	2300      	movs	r3, #0
 801d864:	60fb      	str	r3, [r7, #12]
 801d866:	e015      	b.n	801d894 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 801d868:	68fb      	ldr	r3, [r7, #12]
 801d86a:	015a      	lsls	r2, r3, #5
 801d86c:	68bb      	ldr	r3, [r7, #8]
 801d86e:	4413      	add	r3, r2
 801d870:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801d874:	461a      	mov	r2, r3
 801d876:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d87a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 801d87c:	68fb      	ldr	r3, [r7, #12]
 801d87e:	015a      	lsls	r2, r3, #5
 801d880:	68bb      	ldr	r3, [r7, #8]
 801d882:	4413      	add	r3, r2
 801d884:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801d888:	461a      	mov	r2, r3
 801d88a:	2300      	movs	r3, #0
 801d88c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 801d88e:	68fb      	ldr	r3, [r7, #12]
 801d890:	3301      	adds	r3, #1
 801d892:	60fb      	str	r3, [r7, #12]
 801d894:	6a3b      	ldr	r3, [r7, #32]
 801d896:	68fa      	ldr	r2, [r7, #12]
 801d898:	429a      	cmp	r2, r3
 801d89a:	d3e5      	bcc.n	801d868 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 801d89c:	2101      	movs	r1, #1
 801d89e:	6878      	ldr	r0, [r7, #4]
 801d8a0:	f000 f882 	bl	801d9a8 <USB_DriveVbus>

  HAL_Delay(200U);
 801d8a4:	20c8      	movs	r0, #200	; 0xc8
 801d8a6:	f7fb fafd 	bl	8018ea4 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 801d8aa:	687b      	ldr	r3, [r7, #4]
 801d8ac:	2200      	movs	r2, #0
 801d8ae:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 801d8b0:	687b      	ldr	r3, [r7, #4]
 801d8b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801d8b6:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 801d8b8:	687b      	ldr	r3, [r7, #4]
 801d8ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d8bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d8c0:	2b00      	cmp	r3, #0
 801d8c2:	d00b      	beq.n	801d8dc <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 801d8c4:	687b      	ldr	r3, [r7, #4]
 801d8c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 801d8ca:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 801d8cc:	687b      	ldr	r3, [r7, #4]
 801d8ce:	4a14      	ldr	r2, [pc, #80]	; (801d920 <USB_HostInit+0x164>)
 801d8d0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 801d8d2:	687b      	ldr	r3, [r7, #4]
 801d8d4:	4a13      	ldr	r2, [pc, #76]	; (801d924 <USB_HostInit+0x168>)
 801d8d6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 801d8da:	e009      	b.n	801d8f0 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 801d8dc:	687b      	ldr	r3, [r7, #4]
 801d8de:	2280      	movs	r2, #128	; 0x80
 801d8e0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 801d8e2:	687b      	ldr	r3, [r7, #4]
 801d8e4:	4a10      	ldr	r2, [pc, #64]	; (801d928 <USB_HostInit+0x16c>)
 801d8e6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 801d8e8:	687b      	ldr	r3, [r7, #4]
 801d8ea:	4a10      	ldr	r2, [pc, #64]	; (801d92c <USB_HostInit+0x170>)
 801d8ec:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 801d8f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d8f2:	2b00      	cmp	r3, #0
 801d8f4:	d105      	bne.n	801d902 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801d8f6:	687b      	ldr	r3, [r7, #4]
 801d8f8:	699b      	ldr	r3, [r3, #24]
 801d8fa:	f043 0210 	orr.w	r2, r3, #16
 801d8fe:	687b      	ldr	r3, [r7, #4]
 801d900:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 801d902:	687b      	ldr	r3, [r7, #4]
 801d904:	699a      	ldr	r2, [r3, #24]
 801d906:	4b0a      	ldr	r3, [pc, #40]	; (801d930 <USB_HostInit+0x174>)
 801d908:	4313      	orrs	r3, r2
 801d90a:	687a      	ldr	r2, [r7, #4]
 801d90c:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 801d90e:	2300      	movs	r3, #0
}
 801d910:	4618      	mov	r0, r3
 801d912:	3710      	adds	r7, #16
 801d914:	46bd      	mov	sp, r7
 801d916:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801d91a:	b004      	add	sp, #16
 801d91c:	4770      	bx	lr
 801d91e:	bf00      	nop
 801d920:	01000200 	.word	0x01000200
 801d924:	00e00300 	.word	0x00e00300
 801d928:	00600080 	.word	0x00600080
 801d92c:	004000e0 	.word	0x004000e0
 801d930:	a3200008 	.word	0xa3200008

0801d934 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 801d934:	b480      	push	{r7}
 801d936:	b085      	sub	sp, #20
 801d938:	af00      	add	r7, sp, #0
 801d93a:	6078      	str	r0, [r7, #4]
 801d93c:	460b      	mov	r3, r1
 801d93e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801d940:	687b      	ldr	r3, [r7, #4]
 801d942:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 801d944:	68fb      	ldr	r3, [r7, #12]
 801d946:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801d94a:	681b      	ldr	r3, [r3, #0]
 801d94c:	68fa      	ldr	r2, [r7, #12]
 801d94e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801d952:	f023 0303 	bic.w	r3, r3, #3
 801d956:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 801d958:	68fb      	ldr	r3, [r7, #12]
 801d95a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801d95e:	681a      	ldr	r2, [r3, #0]
 801d960:	78fb      	ldrb	r3, [r7, #3]
 801d962:	f003 0303 	and.w	r3, r3, #3
 801d966:	68f9      	ldr	r1, [r7, #12]
 801d968:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801d96c:	4313      	orrs	r3, r2
 801d96e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 801d970:	78fb      	ldrb	r3, [r7, #3]
 801d972:	2b01      	cmp	r3, #1
 801d974:	d107      	bne.n	801d986 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 801d976:	68fb      	ldr	r3, [r7, #12]
 801d978:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801d97c:	461a      	mov	r2, r3
 801d97e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 801d982:	6053      	str	r3, [r2, #4]
 801d984:	e009      	b.n	801d99a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 801d986:	78fb      	ldrb	r3, [r7, #3]
 801d988:	2b02      	cmp	r3, #2
 801d98a:	d106      	bne.n	801d99a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 801d98c:	68fb      	ldr	r3, [r7, #12]
 801d98e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801d992:	461a      	mov	r2, r3
 801d994:	f241 7370 	movw	r3, #6000	; 0x1770
 801d998:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 801d99a:	2300      	movs	r3, #0
}
 801d99c:	4618      	mov	r0, r3
 801d99e:	3714      	adds	r7, #20
 801d9a0:	46bd      	mov	sp, r7
 801d9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d9a6:	4770      	bx	lr

0801d9a8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 801d9a8:	b480      	push	{r7}
 801d9aa:	b085      	sub	sp, #20
 801d9ac:	af00      	add	r7, sp, #0
 801d9ae:	6078      	str	r0, [r7, #4]
 801d9b0:	460b      	mov	r3, r1
 801d9b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801d9b4:	687b      	ldr	r3, [r7, #4]
 801d9b6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 801d9b8:	2300      	movs	r3, #0
 801d9ba:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 801d9bc:	68fb      	ldr	r3, [r7, #12]
 801d9be:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 801d9c2:	681b      	ldr	r3, [r3, #0]
 801d9c4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 801d9c6:	68bb      	ldr	r3, [r7, #8]
 801d9c8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 801d9cc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 801d9ce:	68bb      	ldr	r3, [r7, #8]
 801d9d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801d9d4:	2b00      	cmp	r3, #0
 801d9d6:	d109      	bne.n	801d9ec <USB_DriveVbus+0x44>
 801d9d8:	78fb      	ldrb	r3, [r7, #3]
 801d9da:	2b01      	cmp	r3, #1
 801d9dc:	d106      	bne.n	801d9ec <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 801d9de:	68bb      	ldr	r3, [r7, #8]
 801d9e0:	68fa      	ldr	r2, [r7, #12]
 801d9e2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 801d9e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801d9ea:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 801d9ec:	68bb      	ldr	r3, [r7, #8]
 801d9ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801d9f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801d9f6:	d109      	bne.n	801da0c <USB_DriveVbus+0x64>
 801d9f8:	78fb      	ldrb	r3, [r7, #3]
 801d9fa:	2b00      	cmp	r3, #0
 801d9fc:	d106      	bne.n	801da0c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 801d9fe:	68bb      	ldr	r3, [r7, #8]
 801da00:	68fa      	ldr	r2, [r7, #12]
 801da02:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 801da06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801da0a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 801da0c:	2300      	movs	r3, #0
}
 801da0e:	4618      	mov	r0, r3
 801da10:	3714      	adds	r7, #20
 801da12:	46bd      	mov	sp, r7
 801da14:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da18:	4770      	bx	lr

0801da1a <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 801da1a:	b480      	push	{r7}
 801da1c:	b085      	sub	sp, #20
 801da1e:	af00      	add	r7, sp, #0
 801da20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801da22:	687b      	ldr	r3, [r7, #4]
 801da24:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 801da26:	68fb      	ldr	r3, [r7, #12]
 801da28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801da2c:	689b      	ldr	r3, [r3, #8]
 801da2e:	b29b      	uxth	r3, r3
}
 801da30:	4618      	mov	r0, r3
 801da32:	3714      	adds	r7, #20
 801da34:	46bd      	mov	sp, r7
 801da36:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da3a:	4770      	bx	lr

0801da3c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 801da3c:	b480      	push	{r7}
 801da3e:	b087      	sub	sp, #28
 801da40:	af00      	add	r7, sp, #0
 801da42:	6078      	str	r0, [r7, #4]
 801da44:	4608      	mov	r0, r1
 801da46:	4611      	mov	r1, r2
 801da48:	461a      	mov	r2, r3
 801da4a:	4603      	mov	r3, r0
 801da4c:	70fb      	strb	r3, [r7, #3]
 801da4e:	460b      	mov	r3, r1
 801da50:	70bb      	strb	r3, [r7, #2]
 801da52:	4613      	mov	r3, r2
 801da54:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 801da56:	2300      	movs	r3, #0
 801da58:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801da5a:	687b      	ldr	r3, [r7, #4]
 801da5c:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 801da5e:	78fb      	ldrb	r3, [r7, #3]
 801da60:	015a      	lsls	r2, r3, #5
 801da62:	68bb      	ldr	r3, [r7, #8]
 801da64:	4413      	add	r3, r2
 801da66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801da6a:	461a      	mov	r2, r3
 801da6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801da70:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 801da72:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801da76:	2b03      	cmp	r3, #3
 801da78:	d87e      	bhi.n	801db78 <USB_HC_Init+0x13c>
 801da7a:	a201      	add	r2, pc, #4	; (adr r2, 801da80 <USB_HC_Init+0x44>)
 801da7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801da80:	0801da91 	.word	0x0801da91
 801da84:	0801db3b 	.word	0x0801db3b
 801da88:	0801da91 	.word	0x0801da91
 801da8c:	0801dafd 	.word	0x0801dafd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 801da90:	78fb      	ldrb	r3, [r7, #3]
 801da92:	015a      	lsls	r2, r3, #5
 801da94:	68bb      	ldr	r3, [r7, #8]
 801da96:	4413      	add	r3, r2
 801da98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801da9c:	461a      	mov	r2, r3
 801da9e:	f240 439d 	movw	r3, #1181	; 0x49d
 801daa2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 801daa4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 801daa8:	2b00      	cmp	r3, #0
 801daaa:	da10      	bge.n	801dace <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 801daac:	78fb      	ldrb	r3, [r7, #3]
 801daae:	015a      	lsls	r2, r3, #5
 801dab0:	68bb      	ldr	r3, [r7, #8]
 801dab2:	4413      	add	r3, r2
 801dab4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801dab8:	68db      	ldr	r3, [r3, #12]
 801daba:	78fa      	ldrb	r2, [r7, #3]
 801dabc:	0151      	lsls	r1, r2, #5
 801dabe:	68ba      	ldr	r2, [r7, #8]
 801dac0:	440a      	add	r2, r1
 801dac2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801dac6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801daca:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 801dacc:	e057      	b.n	801db7e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 801dace:	687b      	ldr	r3, [r7, #4]
 801dad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801dad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801dad6:	2b00      	cmp	r3, #0
 801dad8:	d051      	beq.n	801db7e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 801dada:	78fb      	ldrb	r3, [r7, #3]
 801dadc:	015a      	lsls	r2, r3, #5
 801dade:	68bb      	ldr	r3, [r7, #8]
 801dae0:	4413      	add	r3, r2
 801dae2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801dae6:	68db      	ldr	r3, [r3, #12]
 801dae8:	78fa      	ldrb	r2, [r7, #3]
 801daea:	0151      	lsls	r1, r2, #5
 801daec:	68ba      	ldr	r2, [r7, #8]
 801daee:	440a      	add	r2, r1
 801daf0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801daf4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 801daf8:	60d3      	str	r3, [r2, #12]
      break;
 801dafa:	e040      	b.n	801db7e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 801dafc:	78fb      	ldrb	r3, [r7, #3]
 801dafe:	015a      	lsls	r2, r3, #5
 801db00:	68bb      	ldr	r3, [r7, #8]
 801db02:	4413      	add	r3, r2
 801db04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801db08:	461a      	mov	r2, r3
 801db0a:	f240 639d 	movw	r3, #1693	; 0x69d
 801db0e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 801db10:	f997 3002 	ldrsb.w	r3, [r7, #2]
 801db14:	2b00      	cmp	r3, #0
 801db16:	da34      	bge.n	801db82 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 801db18:	78fb      	ldrb	r3, [r7, #3]
 801db1a:	015a      	lsls	r2, r3, #5
 801db1c:	68bb      	ldr	r3, [r7, #8]
 801db1e:	4413      	add	r3, r2
 801db20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801db24:	68db      	ldr	r3, [r3, #12]
 801db26:	78fa      	ldrb	r2, [r7, #3]
 801db28:	0151      	lsls	r1, r2, #5
 801db2a:	68ba      	ldr	r2, [r7, #8]
 801db2c:	440a      	add	r2, r1
 801db2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801db32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801db36:	60d3      	str	r3, [r2, #12]
      }

      break;
 801db38:	e023      	b.n	801db82 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 801db3a:	78fb      	ldrb	r3, [r7, #3]
 801db3c:	015a      	lsls	r2, r3, #5
 801db3e:	68bb      	ldr	r3, [r7, #8]
 801db40:	4413      	add	r3, r2
 801db42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801db46:	461a      	mov	r2, r3
 801db48:	f240 2325 	movw	r3, #549	; 0x225
 801db4c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 801db4e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 801db52:	2b00      	cmp	r3, #0
 801db54:	da17      	bge.n	801db86 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 801db56:	78fb      	ldrb	r3, [r7, #3]
 801db58:	015a      	lsls	r2, r3, #5
 801db5a:	68bb      	ldr	r3, [r7, #8]
 801db5c:	4413      	add	r3, r2
 801db5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801db62:	68db      	ldr	r3, [r3, #12]
 801db64:	78fa      	ldrb	r2, [r7, #3]
 801db66:	0151      	lsls	r1, r2, #5
 801db68:	68ba      	ldr	r2, [r7, #8]
 801db6a:	440a      	add	r2, r1
 801db6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801db70:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 801db74:	60d3      	str	r3, [r2, #12]
      }
      break;
 801db76:	e006      	b.n	801db86 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 801db78:	2301      	movs	r3, #1
 801db7a:	75fb      	strb	r3, [r7, #23]
      break;
 801db7c:	e004      	b.n	801db88 <USB_HC_Init+0x14c>
      break;
 801db7e:	bf00      	nop
 801db80:	e002      	b.n	801db88 <USB_HC_Init+0x14c>
      break;
 801db82:	bf00      	nop
 801db84:	e000      	b.n	801db88 <USB_HC_Init+0x14c>
      break;
 801db86:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 801db88:	68bb      	ldr	r3, [r7, #8]
 801db8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801db8e:	699a      	ldr	r2, [r3, #24]
 801db90:	78fb      	ldrb	r3, [r7, #3]
 801db92:	f003 030f 	and.w	r3, r3, #15
 801db96:	2101      	movs	r1, #1
 801db98:	fa01 f303 	lsl.w	r3, r1, r3
 801db9c:	68b9      	ldr	r1, [r7, #8]
 801db9e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801dba2:	4313      	orrs	r3, r2
 801dba4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 801dba6:	687b      	ldr	r3, [r7, #4]
 801dba8:	699b      	ldr	r3, [r3, #24]
 801dbaa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 801dbae:	687b      	ldr	r3, [r7, #4]
 801dbb0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 801dbb2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 801dbb6:	2b00      	cmp	r3, #0
 801dbb8:	da03      	bge.n	801dbc2 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 801dbba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801dbbe:	613b      	str	r3, [r7, #16]
 801dbc0:	e001      	b.n	801dbc6 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 801dbc2:	2300      	movs	r3, #0
 801dbc4:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 801dbc6:	f897 3020 	ldrb.w	r3, [r7, #32]
 801dbca:	2b02      	cmp	r3, #2
 801dbcc:	d103      	bne.n	801dbd6 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 801dbce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801dbd2:	60fb      	str	r3, [r7, #12]
 801dbd4:	e001      	b.n	801dbda <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 801dbd6:	2300      	movs	r3, #0
 801dbd8:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 801dbda:	787b      	ldrb	r3, [r7, #1]
 801dbdc:	059b      	lsls	r3, r3, #22
 801dbde:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 801dbe2:	78bb      	ldrb	r3, [r7, #2]
 801dbe4:	02db      	lsls	r3, r3, #11
 801dbe6:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 801dbea:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 801dbec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801dbf0:	049b      	lsls	r3, r3, #18
 801dbf2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 801dbf6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 801dbf8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801dbfa:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 801dbfe:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 801dc00:	693b      	ldr	r3, [r7, #16]
 801dc02:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 801dc04:	78fb      	ldrb	r3, [r7, #3]
 801dc06:	0159      	lsls	r1, r3, #5
 801dc08:	68bb      	ldr	r3, [r7, #8]
 801dc0a:	440b      	add	r3, r1
 801dc0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801dc10:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 801dc12:	68fb      	ldr	r3, [r7, #12]
 801dc14:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 801dc16:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 801dc18:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801dc1c:	2b03      	cmp	r3, #3
 801dc1e:	d10f      	bne.n	801dc40 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 801dc20:	78fb      	ldrb	r3, [r7, #3]
 801dc22:	015a      	lsls	r2, r3, #5
 801dc24:	68bb      	ldr	r3, [r7, #8]
 801dc26:	4413      	add	r3, r2
 801dc28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801dc2c:	681b      	ldr	r3, [r3, #0]
 801dc2e:	78fa      	ldrb	r2, [r7, #3]
 801dc30:	0151      	lsls	r1, r2, #5
 801dc32:	68ba      	ldr	r2, [r7, #8]
 801dc34:	440a      	add	r2, r1
 801dc36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801dc3a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801dc3e:	6013      	str	r3, [r2, #0]
  }

  return ret;
 801dc40:	7dfb      	ldrb	r3, [r7, #23]
}
 801dc42:	4618      	mov	r0, r3
 801dc44:	371c      	adds	r7, #28
 801dc46:	46bd      	mov	sp, r7
 801dc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc4c:	4770      	bx	lr
 801dc4e:	bf00      	nop

0801dc50 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 801dc50:	b580      	push	{r7, lr}
 801dc52:	b08c      	sub	sp, #48	; 0x30
 801dc54:	af02      	add	r7, sp, #8
 801dc56:	60f8      	str	r0, [r7, #12]
 801dc58:	60b9      	str	r1, [r7, #8]
 801dc5a:	4613      	mov	r3, r2
 801dc5c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801dc5e:	68fb      	ldr	r3, [r7, #12]
 801dc60:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 801dc62:	68bb      	ldr	r3, [r7, #8]
 801dc64:	785b      	ldrb	r3, [r3, #1]
 801dc66:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 801dc68:	f44f 7380 	mov.w	r3, #256	; 0x100
 801dc6c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 801dc6e:	68fb      	ldr	r3, [r7, #12]
 801dc70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801dc72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801dc76:	2b00      	cmp	r3, #0
 801dc78:	d028      	beq.n	801dccc <USB_HC_StartXfer+0x7c>
 801dc7a:	68bb      	ldr	r3, [r7, #8]
 801dc7c:	791b      	ldrb	r3, [r3, #4]
 801dc7e:	2b00      	cmp	r3, #0
 801dc80:	d124      	bne.n	801dccc <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 801dc82:	79fb      	ldrb	r3, [r7, #7]
 801dc84:	2b00      	cmp	r3, #0
 801dc86:	d10b      	bne.n	801dca0 <USB_HC_StartXfer+0x50>
 801dc88:	68bb      	ldr	r3, [r7, #8]
 801dc8a:	795b      	ldrb	r3, [r3, #5]
 801dc8c:	2b01      	cmp	r3, #1
 801dc8e:	d107      	bne.n	801dca0 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 801dc90:	68bb      	ldr	r3, [r7, #8]
 801dc92:	785b      	ldrb	r3, [r3, #1]
 801dc94:	4619      	mov	r1, r3
 801dc96:	68f8      	ldr	r0, [r7, #12]
 801dc98:	f000 fa30 	bl	801e0fc <USB_DoPing>
      return HAL_OK;
 801dc9c:	2300      	movs	r3, #0
 801dc9e:	e114      	b.n	801deca <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 801dca0:	79fb      	ldrb	r3, [r7, #7]
 801dca2:	2b01      	cmp	r3, #1
 801dca4:	d112      	bne.n	801dccc <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 801dca6:	69fb      	ldr	r3, [r7, #28]
 801dca8:	015a      	lsls	r2, r3, #5
 801dcaa:	6a3b      	ldr	r3, [r7, #32]
 801dcac:	4413      	add	r3, r2
 801dcae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801dcb2:	68db      	ldr	r3, [r3, #12]
 801dcb4:	69fa      	ldr	r2, [r7, #28]
 801dcb6:	0151      	lsls	r1, r2, #5
 801dcb8:	6a3a      	ldr	r2, [r7, #32]
 801dcba:	440a      	add	r2, r1
 801dcbc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801dcc0:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 801dcc4:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 801dcc6:	68bb      	ldr	r3, [r7, #8]
 801dcc8:	2200      	movs	r2, #0
 801dcca:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 801dccc:	68bb      	ldr	r3, [r7, #8]
 801dcce:	691b      	ldr	r3, [r3, #16]
 801dcd0:	2b00      	cmp	r3, #0
 801dcd2:	d018      	beq.n	801dd06 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 801dcd4:	68bb      	ldr	r3, [r7, #8]
 801dcd6:	691b      	ldr	r3, [r3, #16]
 801dcd8:	68ba      	ldr	r2, [r7, #8]
 801dcda:	8912      	ldrh	r2, [r2, #8]
 801dcdc:	4413      	add	r3, r2
 801dcde:	3b01      	subs	r3, #1
 801dce0:	68ba      	ldr	r2, [r7, #8]
 801dce2:	8912      	ldrh	r2, [r2, #8]
 801dce4:	fbb3 f3f2 	udiv	r3, r3, r2
 801dce8:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 801dcea:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801dcec:	8b7b      	ldrh	r3, [r7, #26]
 801dcee:	429a      	cmp	r2, r3
 801dcf0:	d90b      	bls.n	801dd0a <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 801dcf2:	8b7b      	ldrh	r3, [r7, #26]
 801dcf4:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 801dcf6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801dcf8:	68ba      	ldr	r2, [r7, #8]
 801dcfa:	8912      	ldrh	r2, [r2, #8]
 801dcfc:	fb02 f203 	mul.w	r2, r2, r3
 801dd00:	68bb      	ldr	r3, [r7, #8]
 801dd02:	611a      	str	r2, [r3, #16]
 801dd04:	e001      	b.n	801dd0a <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 801dd06:	2301      	movs	r3, #1
 801dd08:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 801dd0a:	68bb      	ldr	r3, [r7, #8]
 801dd0c:	78db      	ldrb	r3, [r3, #3]
 801dd0e:	2b00      	cmp	r3, #0
 801dd10:	d006      	beq.n	801dd20 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 801dd12:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801dd14:	68ba      	ldr	r2, [r7, #8]
 801dd16:	8912      	ldrh	r2, [r2, #8]
 801dd18:	fb02 f203 	mul.w	r2, r2, r3
 801dd1c:	68bb      	ldr	r3, [r7, #8]
 801dd1e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 801dd20:	68bb      	ldr	r3, [r7, #8]
 801dd22:	691b      	ldr	r3, [r3, #16]
 801dd24:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 801dd28:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801dd2a:	04d9      	lsls	r1, r3, #19
 801dd2c:	4b69      	ldr	r3, [pc, #420]	; (801ded4 <USB_HC_StartXfer+0x284>)
 801dd2e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 801dd30:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 801dd32:	68bb      	ldr	r3, [r7, #8]
 801dd34:	7a9b      	ldrb	r3, [r3, #10]
 801dd36:	075b      	lsls	r3, r3, #29
 801dd38:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 801dd3c:	69f9      	ldr	r1, [r7, #28]
 801dd3e:	0148      	lsls	r0, r1, #5
 801dd40:	6a39      	ldr	r1, [r7, #32]
 801dd42:	4401      	add	r1, r0
 801dd44:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 801dd48:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 801dd4a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 801dd4c:	79fb      	ldrb	r3, [r7, #7]
 801dd4e:	2b00      	cmp	r3, #0
 801dd50:	d009      	beq.n	801dd66 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 801dd52:	68bb      	ldr	r3, [r7, #8]
 801dd54:	68d9      	ldr	r1, [r3, #12]
 801dd56:	69fb      	ldr	r3, [r7, #28]
 801dd58:	015a      	lsls	r2, r3, #5
 801dd5a:	6a3b      	ldr	r3, [r7, #32]
 801dd5c:	4413      	add	r3, r2
 801dd5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801dd62:	460a      	mov	r2, r1
 801dd64:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 801dd66:	6a3b      	ldr	r3, [r7, #32]
 801dd68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801dd6c:	689b      	ldr	r3, [r3, #8]
 801dd6e:	f003 0301 	and.w	r3, r3, #1
 801dd72:	2b00      	cmp	r3, #0
 801dd74:	bf0c      	ite	eq
 801dd76:	2301      	moveq	r3, #1
 801dd78:	2300      	movne	r3, #0
 801dd7a:	b2db      	uxtb	r3, r3
 801dd7c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 801dd7e:	69fb      	ldr	r3, [r7, #28]
 801dd80:	015a      	lsls	r2, r3, #5
 801dd82:	6a3b      	ldr	r3, [r7, #32]
 801dd84:	4413      	add	r3, r2
 801dd86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801dd8a:	681b      	ldr	r3, [r3, #0]
 801dd8c:	69fa      	ldr	r2, [r7, #28]
 801dd8e:	0151      	lsls	r1, r2, #5
 801dd90:	6a3a      	ldr	r2, [r7, #32]
 801dd92:	440a      	add	r2, r1
 801dd94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801dd98:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801dd9c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 801dd9e:	69fb      	ldr	r3, [r7, #28]
 801dda0:	015a      	lsls	r2, r3, #5
 801dda2:	6a3b      	ldr	r3, [r7, #32]
 801dda4:	4413      	add	r3, r2
 801dda6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801ddaa:	681a      	ldr	r2, [r3, #0]
 801ddac:	7e7b      	ldrb	r3, [r7, #25]
 801ddae:	075b      	lsls	r3, r3, #29
 801ddb0:	69f9      	ldr	r1, [r7, #28]
 801ddb2:	0148      	lsls	r0, r1, #5
 801ddb4:	6a39      	ldr	r1, [r7, #32]
 801ddb6:	4401      	add	r1, r0
 801ddb8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 801ddbc:	4313      	orrs	r3, r2
 801ddbe:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 801ddc0:	69fb      	ldr	r3, [r7, #28]
 801ddc2:	015a      	lsls	r2, r3, #5
 801ddc4:	6a3b      	ldr	r3, [r7, #32]
 801ddc6:	4413      	add	r3, r2
 801ddc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801ddcc:	681b      	ldr	r3, [r3, #0]
 801ddce:	4a42      	ldr	r2, [pc, #264]	; (801ded8 <USB_HC_StartXfer+0x288>)
 801ddd0:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 801ddd2:	4b41      	ldr	r3, [pc, #260]	; (801ded8 <USB_HC_StartXfer+0x288>)
 801ddd4:	681b      	ldr	r3, [r3, #0]
 801ddd6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801ddda:	4a3f      	ldr	r2, [pc, #252]	; (801ded8 <USB_HC_StartXfer+0x288>)
 801dddc:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 801ddde:	68bb      	ldr	r3, [r7, #8]
 801dde0:	78db      	ldrb	r3, [r3, #3]
 801dde2:	2b00      	cmp	r3, #0
 801dde4:	d006      	beq.n	801ddf4 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 801dde6:	4b3c      	ldr	r3, [pc, #240]	; (801ded8 <USB_HC_StartXfer+0x288>)
 801dde8:	681b      	ldr	r3, [r3, #0]
 801ddea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801ddee:	4a3a      	ldr	r2, [pc, #232]	; (801ded8 <USB_HC_StartXfer+0x288>)
 801ddf0:	6013      	str	r3, [r2, #0]
 801ddf2:	e005      	b.n	801de00 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 801ddf4:	4b38      	ldr	r3, [pc, #224]	; (801ded8 <USB_HC_StartXfer+0x288>)
 801ddf6:	681b      	ldr	r3, [r3, #0]
 801ddf8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801ddfc:	4a36      	ldr	r2, [pc, #216]	; (801ded8 <USB_HC_StartXfer+0x288>)
 801ddfe:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 801de00:	4b35      	ldr	r3, [pc, #212]	; (801ded8 <USB_HC_StartXfer+0x288>)
 801de02:	681b      	ldr	r3, [r3, #0]
 801de04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801de08:	4a33      	ldr	r2, [pc, #204]	; (801ded8 <USB_HC_StartXfer+0x288>)
 801de0a:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 801de0c:	69fb      	ldr	r3, [r7, #28]
 801de0e:	015a      	lsls	r2, r3, #5
 801de10:	6a3b      	ldr	r3, [r7, #32]
 801de12:	4413      	add	r3, r2
 801de14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801de18:	461a      	mov	r2, r3
 801de1a:	4b2f      	ldr	r3, [pc, #188]	; (801ded8 <USB_HC_StartXfer+0x288>)
 801de1c:	681b      	ldr	r3, [r3, #0]
 801de1e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 801de20:	79fb      	ldrb	r3, [r7, #7]
 801de22:	2b00      	cmp	r3, #0
 801de24:	d001      	beq.n	801de2a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 801de26:	2300      	movs	r3, #0
 801de28:	e04f      	b.n	801deca <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 801de2a:	68bb      	ldr	r3, [r7, #8]
 801de2c:	78db      	ldrb	r3, [r3, #3]
 801de2e:	2b00      	cmp	r3, #0
 801de30:	d14a      	bne.n	801dec8 <USB_HC_StartXfer+0x278>
 801de32:	68bb      	ldr	r3, [r7, #8]
 801de34:	691b      	ldr	r3, [r3, #16]
 801de36:	2b00      	cmp	r3, #0
 801de38:	d046      	beq.n	801dec8 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 801de3a:	68bb      	ldr	r3, [r7, #8]
 801de3c:	79db      	ldrb	r3, [r3, #7]
 801de3e:	2b03      	cmp	r3, #3
 801de40:	d830      	bhi.n	801dea4 <USB_HC_StartXfer+0x254>
 801de42:	a201      	add	r2, pc, #4	; (adr r2, 801de48 <USB_HC_StartXfer+0x1f8>)
 801de44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801de48:	0801de59 	.word	0x0801de59
 801de4c:	0801de7d 	.word	0x0801de7d
 801de50:	0801de59 	.word	0x0801de59
 801de54:	0801de7d 	.word	0x0801de7d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 801de58:	68bb      	ldr	r3, [r7, #8]
 801de5a:	691b      	ldr	r3, [r3, #16]
 801de5c:	3303      	adds	r3, #3
 801de5e:	089b      	lsrs	r3, r3, #2
 801de60:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 801de62:	8afa      	ldrh	r2, [r7, #22]
 801de64:	68fb      	ldr	r3, [r7, #12]
 801de66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801de68:	b29b      	uxth	r3, r3
 801de6a:	429a      	cmp	r2, r3
 801de6c:	d91c      	bls.n	801dea8 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 801de6e:	68fb      	ldr	r3, [r7, #12]
 801de70:	699b      	ldr	r3, [r3, #24]
 801de72:	f043 0220 	orr.w	r2, r3, #32
 801de76:	68fb      	ldr	r3, [r7, #12]
 801de78:	619a      	str	r2, [r3, #24]
        }
        break;
 801de7a:	e015      	b.n	801dea8 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 801de7c:	68bb      	ldr	r3, [r7, #8]
 801de7e:	691b      	ldr	r3, [r3, #16]
 801de80:	3303      	adds	r3, #3
 801de82:	089b      	lsrs	r3, r3, #2
 801de84:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 801de86:	8afa      	ldrh	r2, [r7, #22]
 801de88:	6a3b      	ldr	r3, [r7, #32]
 801de8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801de8e:	691b      	ldr	r3, [r3, #16]
 801de90:	b29b      	uxth	r3, r3
 801de92:	429a      	cmp	r2, r3
 801de94:	d90a      	bls.n	801deac <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 801de96:	68fb      	ldr	r3, [r7, #12]
 801de98:	699b      	ldr	r3, [r3, #24]
 801de9a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 801de9e:	68fb      	ldr	r3, [r7, #12]
 801dea0:	619a      	str	r2, [r3, #24]
        }
        break;
 801dea2:	e003      	b.n	801deac <USB_HC_StartXfer+0x25c>

      default:
        break;
 801dea4:	bf00      	nop
 801dea6:	e002      	b.n	801deae <USB_HC_StartXfer+0x25e>
        break;
 801dea8:	bf00      	nop
 801deaa:	e000      	b.n	801deae <USB_HC_StartXfer+0x25e>
        break;
 801deac:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 801deae:	68bb      	ldr	r3, [r7, #8]
 801deb0:	68d9      	ldr	r1, [r3, #12]
 801deb2:	68bb      	ldr	r3, [r7, #8]
 801deb4:	785a      	ldrb	r2, [r3, #1]
 801deb6:	68bb      	ldr	r3, [r7, #8]
 801deb8:	691b      	ldr	r3, [r3, #16]
 801deba:	b298      	uxth	r0, r3
 801debc:	2300      	movs	r3, #0
 801debe:	9300      	str	r3, [sp, #0]
 801dec0:	4603      	mov	r3, r0
 801dec2:	68f8      	ldr	r0, [r7, #12]
 801dec4:	f7ff fbc6 	bl	801d654 <USB_WritePacket>
  }

  return HAL_OK;
 801dec8:	2300      	movs	r3, #0
}
 801deca:	4618      	mov	r0, r3
 801decc:	3728      	adds	r7, #40	; 0x28
 801dece:	46bd      	mov	sp, r7
 801ded0:	bd80      	pop	{r7, pc}
 801ded2:	bf00      	nop
 801ded4:	1ff80000 	.word	0x1ff80000
 801ded8:	20000368 	.word	0x20000368

0801dedc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801dedc:	b480      	push	{r7}
 801dede:	b085      	sub	sp, #20
 801dee0:	af00      	add	r7, sp, #0
 801dee2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801dee4:	687b      	ldr	r3, [r7, #4]
 801dee6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 801dee8:	68fb      	ldr	r3, [r7, #12]
 801deea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801deee:	695b      	ldr	r3, [r3, #20]
 801def0:	b29b      	uxth	r3, r3
}
 801def2:	4618      	mov	r0, r3
 801def4:	3714      	adds	r7, #20
 801def6:	46bd      	mov	sp, r7
 801def8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801defc:	4770      	bx	lr

0801defe <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 801defe:	b480      	push	{r7}
 801df00:	b087      	sub	sp, #28
 801df02:	af00      	add	r7, sp, #0
 801df04:	6078      	str	r0, [r7, #4]
 801df06:	460b      	mov	r3, r1
 801df08:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801df0a:	687b      	ldr	r3, [r7, #4]
 801df0c:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 801df0e:	78fb      	ldrb	r3, [r7, #3]
 801df10:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 801df12:	2300      	movs	r3, #0
 801df14:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 801df16:	68fb      	ldr	r3, [r7, #12]
 801df18:	015a      	lsls	r2, r3, #5
 801df1a:	693b      	ldr	r3, [r7, #16]
 801df1c:	4413      	add	r3, r2
 801df1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801df22:	681b      	ldr	r3, [r3, #0]
 801df24:	0c9b      	lsrs	r3, r3, #18
 801df26:	f003 0303 	and.w	r3, r3, #3
 801df2a:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 801df2c:	68bb      	ldr	r3, [r7, #8]
 801df2e:	2b00      	cmp	r3, #0
 801df30:	d002      	beq.n	801df38 <USB_HC_Halt+0x3a>
 801df32:	68bb      	ldr	r3, [r7, #8]
 801df34:	2b02      	cmp	r3, #2
 801df36:	d16c      	bne.n	801e012 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 801df38:	68fb      	ldr	r3, [r7, #12]
 801df3a:	015a      	lsls	r2, r3, #5
 801df3c:	693b      	ldr	r3, [r7, #16]
 801df3e:	4413      	add	r3, r2
 801df40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801df44:	681b      	ldr	r3, [r3, #0]
 801df46:	68fa      	ldr	r2, [r7, #12]
 801df48:	0151      	lsls	r1, r2, #5
 801df4a:	693a      	ldr	r2, [r7, #16]
 801df4c:	440a      	add	r2, r1
 801df4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801df52:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801df56:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 801df58:	687b      	ldr	r3, [r7, #4]
 801df5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801df5c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801df60:	2b00      	cmp	r3, #0
 801df62:	d143      	bne.n	801dfec <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 801df64:	68fb      	ldr	r3, [r7, #12]
 801df66:	015a      	lsls	r2, r3, #5
 801df68:	693b      	ldr	r3, [r7, #16]
 801df6a:	4413      	add	r3, r2
 801df6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801df70:	681b      	ldr	r3, [r3, #0]
 801df72:	68fa      	ldr	r2, [r7, #12]
 801df74:	0151      	lsls	r1, r2, #5
 801df76:	693a      	ldr	r2, [r7, #16]
 801df78:	440a      	add	r2, r1
 801df7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801df7e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801df82:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 801df84:	68fb      	ldr	r3, [r7, #12]
 801df86:	015a      	lsls	r2, r3, #5
 801df88:	693b      	ldr	r3, [r7, #16]
 801df8a:	4413      	add	r3, r2
 801df8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801df90:	681b      	ldr	r3, [r3, #0]
 801df92:	68fa      	ldr	r2, [r7, #12]
 801df94:	0151      	lsls	r1, r2, #5
 801df96:	693a      	ldr	r2, [r7, #16]
 801df98:	440a      	add	r2, r1
 801df9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801df9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801dfa2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 801dfa4:	68fb      	ldr	r3, [r7, #12]
 801dfa6:	015a      	lsls	r2, r3, #5
 801dfa8:	693b      	ldr	r3, [r7, #16]
 801dfaa:	4413      	add	r3, r2
 801dfac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801dfb0:	681b      	ldr	r3, [r3, #0]
 801dfb2:	68fa      	ldr	r2, [r7, #12]
 801dfb4:	0151      	lsls	r1, r2, #5
 801dfb6:	693a      	ldr	r2, [r7, #16]
 801dfb8:	440a      	add	r2, r1
 801dfba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801dfbe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801dfc2:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 801dfc4:	697b      	ldr	r3, [r7, #20]
 801dfc6:	3301      	adds	r3, #1
 801dfc8:	617b      	str	r3, [r7, #20]
 801dfca:	697b      	ldr	r3, [r7, #20]
 801dfcc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801dfd0:	d81d      	bhi.n	801e00e <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 801dfd2:	68fb      	ldr	r3, [r7, #12]
 801dfd4:	015a      	lsls	r2, r3, #5
 801dfd6:	693b      	ldr	r3, [r7, #16]
 801dfd8:	4413      	add	r3, r2
 801dfda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801dfde:	681b      	ldr	r3, [r3, #0]
 801dfe0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801dfe4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801dfe8:	d0ec      	beq.n	801dfc4 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 801dfea:	e080      	b.n	801e0ee <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 801dfec:	68fb      	ldr	r3, [r7, #12]
 801dfee:	015a      	lsls	r2, r3, #5
 801dff0:	693b      	ldr	r3, [r7, #16]
 801dff2:	4413      	add	r3, r2
 801dff4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801dff8:	681b      	ldr	r3, [r3, #0]
 801dffa:	68fa      	ldr	r2, [r7, #12]
 801dffc:	0151      	lsls	r1, r2, #5
 801dffe:	693a      	ldr	r2, [r7, #16]
 801e000:	440a      	add	r2, r1
 801e002:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801e006:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801e00a:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 801e00c:	e06f      	b.n	801e0ee <USB_HC_Halt+0x1f0>
          break;
 801e00e:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 801e010:	e06d      	b.n	801e0ee <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 801e012:	68fb      	ldr	r3, [r7, #12]
 801e014:	015a      	lsls	r2, r3, #5
 801e016:	693b      	ldr	r3, [r7, #16]
 801e018:	4413      	add	r3, r2
 801e01a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801e01e:	681b      	ldr	r3, [r3, #0]
 801e020:	68fa      	ldr	r2, [r7, #12]
 801e022:	0151      	lsls	r1, r2, #5
 801e024:	693a      	ldr	r2, [r7, #16]
 801e026:	440a      	add	r2, r1
 801e028:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801e02c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801e030:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 801e032:	693b      	ldr	r3, [r7, #16]
 801e034:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801e038:	691b      	ldr	r3, [r3, #16]
 801e03a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801e03e:	2b00      	cmp	r3, #0
 801e040:	d143      	bne.n	801e0ca <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 801e042:	68fb      	ldr	r3, [r7, #12]
 801e044:	015a      	lsls	r2, r3, #5
 801e046:	693b      	ldr	r3, [r7, #16]
 801e048:	4413      	add	r3, r2
 801e04a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801e04e:	681b      	ldr	r3, [r3, #0]
 801e050:	68fa      	ldr	r2, [r7, #12]
 801e052:	0151      	lsls	r1, r2, #5
 801e054:	693a      	ldr	r2, [r7, #16]
 801e056:	440a      	add	r2, r1
 801e058:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801e05c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801e060:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 801e062:	68fb      	ldr	r3, [r7, #12]
 801e064:	015a      	lsls	r2, r3, #5
 801e066:	693b      	ldr	r3, [r7, #16]
 801e068:	4413      	add	r3, r2
 801e06a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801e06e:	681b      	ldr	r3, [r3, #0]
 801e070:	68fa      	ldr	r2, [r7, #12]
 801e072:	0151      	lsls	r1, r2, #5
 801e074:	693a      	ldr	r2, [r7, #16]
 801e076:	440a      	add	r2, r1
 801e078:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801e07c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801e080:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 801e082:	68fb      	ldr	r3, [r7, #12]
 801e084:	015a      	lsls	r2, r3, #5
 801e086:	693b      	ldr	r3, [r7, #16]
 801e088:	4413      	add	r3, r2
 801e08a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801e08e:	681b      	ldr	r3, [r3, #0]
 801e090:	68fa      	ldr	r2, [r7, #12]
 801e092:	0151      	lsls	r1, r2, #5
 801e094:	693a      	ldr	r2, [r7, #16]
 801e096:	440a      	add	r2, r1
 801e098:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801e09c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801e0a0:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 801e0a2:	697b      	ldr	r3, [r7, #20]
 801e0a4:	3301      	adds	r3, #1
 801e0a6:	617b      	str	r3, [r7, #20]
 801e0a8:	697b      	ldr	r3, [r7, #20]
 801e0aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801e0ae:	d81d      	bhi.n	801e0ec <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 801e0b0:	68fb      	ldr	r3, [r7, #12]
 801e0b2:	015a      	lsls	r2, r3, #5
 801e0b4:	693b      	ldr	r3, [r7, #16]
 801e0b6:	4413      	add	r3, r2
 801e0b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801e0bc:	681b      	ldr	r3, [r3, #0]
 801e0be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801e0c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801e0c6:	d0ec      	beq.n	801e0a2 <USB_HC_Halt+0x1a4>
 801e0c8:	e011      	b.n	801e0ee <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 801e0ca:	68fb      	ldr	r3, [r7, #12]
 801e0cc:	015a      	lsls	r2, r3, #5
 801e0ce:	693b      	ldr	r3, [r7, #16]
 801e0d0:	4413      	add	r3, r2
 801e0d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801e0d6:	681b      	ldr	r3, [r3, #0]
 801e0d8:	68fa      	ldr	r2, [r7, #12]
 801e0da:	0151      	lsls	r1, r2, #5
 801e0dc:	693a      	ldr	r2, [r7, #16]
 801e0de:	440a      	add	r2, r1
 801e0e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801e0e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801e0e8:	6013      	str	r3, [r2, #0]
 801e0ea:	e000      	b.n	801e0ee <USB_HC_Halt+0x1f0>
          break;
 801e0ec:	bf00      	nop
    }
  }

  return HAL_OK;
 801e0ee:	2300      	movs	r3, #0
}
 801e0f0:	4618      	mov	r0, r3
 801e0f2:	371c      	adds	r7, #28
 801e0f4:	46bd      	mov	sp, r7
 801e0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e0fa:	4770      	bx	lr

0801e0fc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 801e0fc:	b480      	push	{r7}
 801e0fe:	b087      	sub	sp, #28
 801e100:	af00      	add	r7, sp, #0
 801e102:	6078      	str	r0, [r7, #4]
 801e104:	460b      	mov	r3, r1
 801e106:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801e108:	687b      	ldr	r3, [r7, #4]
 801e10a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 801e10c:	78fb      	ldrb	r3, [r7, #3]
 801e10e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 801e110:	2301      	movs	r3, #1
 801e112:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 801e114:	68fb      	ldr	r3, [r7, #12]
 801e116:	04da      	lsls	r2, r3, #19
 801e118:	4b15      	ldr	r3, [pc, #84]	; (801e170 <USB_DoPing+0x74>)
 801e11a:	4013      	ands	r3, r2
 801e11c:	693a      	ldr	r2, [r7, #16]
 801e11e:	0151      	lsls	r1, r2, #5
 801e120:	697a      	ldr	r2, [r7, #20]
 801e122:	440a      	add	r2, r1
 801e124:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801e128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801e12c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 801e12e:	693b      	ldr	r3, [r7, #16]
 801e130:	015a      	lsls	r2, r3, #5
 801e132:	697b      	ldr	r3, [r7, #20]
 801e134:	4413      	add	r3, r2
 801e136:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801e13a:	681b      	ldr	r3, [r3, #0]
 801e13c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 801e13e:	68bb      	ldr	r3, [r7, #8]
 801e140:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801e144:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 801e146:	68bb      	ldr	r3, [r7, #8]
 801e148:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801e14c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 801e14e:	693b      	ldr	r3, [r7, #16]
 801e150:	015a      	lsls	r2, r3, #5
 801e152:	697b      	ldr	r3, [r7, #20]
 801e154:	4413      	add	r3, r2
 801e156:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801e15a:	461a      	mov	r2, r3
 801e15c:	68bb      	ldr	r3, [r7, #8]
 801e15e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 801e160:	2300      	movs	r3, #0
}
 801e162:	4618      	mov	r0, r3
 801e164:	371c      	adds	r7, #28
 801e166:	46bd      	mov	sp, r7
 801e168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e16c:	4770      	bx	lr
 801e16e:	bf00      	nop
 801e170:	1ff80000 	.word	0x1ff80000

0801e174 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 801e174:	b580      	push	{r7, lr}
 801e176:	b086      	sub	sp, #24
 801e178:	af00      	add	r7, sp, #0
 801e17a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801e17c:	687b      	ldr	r3, [r7, #4]
 801e17e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 801e180:	2300      	movs	r3, #0
 801e182:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 801e184:	6878      	ldr	r0, [r7, #4]
 801e186:	f7ff f9e1 	bl	801d54c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 801e18a:	2110      	movs	r1, #16
 801e18c:	6878      	ldr	r0, [r7, #4]
 801e18e:	f7ff fa19 	bl	801d5c4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 801e192:	6878      	ldr	r0, [r7, #4]
 801e194:	f7ff fa3c 	bl	801d610 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 801e198:	2300      	movs	r3, #0
 801e19a:	613b      	str	r3, [r7, #16]
 801e19c:	e01f      	b.n	801e1de <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 801e19e:	693b      	ldr	r3, [r7, #16]
 801e1a0:	015a      	lsls	r2, r3, #5
 801e1a2:	68fb      	ldr	r3, [r7, #12]
 801e1a4:	4413      	add	r3, r2
 801e1a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801e1aa:	681b      	ldr	r3, [r3, #0]
 801e1ac:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 801e1ae:	68bb      	ldr	r3, [r7, #8]
 801e1b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801e1b4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 801e1b6:	68bb      	ldr	r3, [r7, #8]
 801e1b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801e1bc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 801e1be:	68bb      	ldr	r3, [r7, #8]
 801e1c0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801e1c4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 801e1c6:	693b      	ldr	r3, [r7, #16]
 801e1c8:	015a      	lsls	r2, r3, #5
 801e1ca:	68fb      	ldr	r3, [r7, #12]
 801e1cc:	4413      	add	r3, r2
 801e1ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801e1d2:	461a      	mov	r2, r3
 801e1d4:	68bb      	ldr	r3, [r7, #8]
 801e1d6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 801e1d8:	693b      	ldr	r3, [r7, #16]
 801e1da:	3301      	adds	r3, #1
 801e1dc:	613b      	str	r3, [r7, #16]
 801e1de:	693b      	ldr	r3, [r7, #16]
 801e1e0:	2b0f      	cmp	r3, #15
 801e1e2:	d9dc      	bls.n	801e19e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 801e1e4:	2300      	movs	r3, #0
 801e1e6:	613b      	str	r3, [r7, #16]
 801e1e8:	e034      	b.n	801e254 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 801e1ea:	693b      	ldr	r3, [r7, #16]
 801e1ec:	015a      	lsls	r2, r3, #5
 801e1ee:	68fb      	ldr	r3, [r7, #12]
 801e1f0:	4413      	add	r3, r2
 801e1f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801e1f6:	681b      	ldr	r3, [r3, #0]
 801e1f8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 801e1fa:	68bb      	ldr	r3, [r7, #8]
 801e1fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801e200:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 801e202:	68bb      	ldr	r3, [r7, #8]
 801e204:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801e208:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 801e20a:	68bb      	ldr	r3, [r7, #8]
 801e20c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801e210:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 801e212:	693b      	ldr	r3, [r7, #16]
 801e214:	015a      	lsls	r2, r3, #5
 801e216:	68fb      	ldr	r3, [r7, #12]
 801e218:	4413      	add	r3, r2
 801e21a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801e21e:	461a      	mov	r2, r3
 801e220:	68bb      	ldr	r3, [r7, #8]
 801e222:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 801e224:	697b      	ldr	r3, [r7, #20]
 801e226:	3301      	adds	r3, #1
 801e228:	617b      	str	r3, [r7, #20]
 801e22a:	697b      	ldr	r3, [r7, #20]
 801e22c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801e230:	d80c      	bhi.n	801e24c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 801e232:	693b      	ldr	r3, [r7, #16]
 801e234:	015a      	lsls	r2, r3, #5
 801e236:	68fb      	ldr	r3, [r7, #12]
 801e238:	4413      	add	r3, r2
 801e23a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801e23e:	681b      	ldr	r3, [r3, #0]
 801e240:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801e244:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801e248:	d0ec      	beq.n	801e224 <USB_StopHost+0xb0>
 801e24a:	e000      	b.n	801e24e <USB_StopHost+0xda>
        break;
 801e24c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 801e24e:	693b      	ldr	r3, [r7, #16]
 801e250:	3301      	adds	r3, #1
 801e252:	613b      	str	r3, [r7, #16]
 801e254:	693b      	ldr	r3, [r7, #16]
 801e256:	2b0f      	cmp	r3, #15
 801e258:	d9c7      	bls.n	801e1ea <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 801e25a:	68fb      	ldr	r3, [r7, #12]
 801e25c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801e260:	461a      	mov	r2, r3
 801e262:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e266:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 801e268:	687b      	ldr	r3, [r7, #4]
 801e26a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801e26e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 801e270:	6878      	ldr	r0, [r7, #4]
 801e272:	f7ff f95a 	bl	801d52a <USB_EnableGlobalInt>

  return HAL_OK;
 801e276:	2300      	movs	r3, #0
}
 801e278:	4618      	mov	r0, r3
 801e27a:	3718      	adds	r7, #24
 801e27c:	46bd      	mov	sp, r7
 801e27e:	bd80      	pop	{r7, pc}

0801e280 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 801e280:	b590      	push	{r4, r7, lr}
 801e282:	b089      	sub	sp, #36	; 0x24
 801e284:	af04      	add	r7, sp, #16
 801e286:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 801e288:	2301      	movs	r3, #1
 801e28a:	2202      	movs	r2, #2
 801e28c:	2102      	movs	r1, #2
 801e28e:	6878      	ldr	r0, [r7, #4]
 801e290:	f000 fc68 	bl	801eb64 <USBH_FindInterface>
 801e294:	4603      	mov	r3, r0
 801e296:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 801e298:	7bfb      	ldrb	r3, [r7, #15]
 801e29a:	2bff      	cmp	r3, #255	; 0xff
 801e29c:	d002      	beq.n	801e2a4 <USBH_CDC_InterfaceInit+0x24>
 801e29e:	7bfb      	ldrb	r3, [r7, #15]
 801e2a0:	2b01      	cmp	r3, #1
 801e2a2:	d901      	bls.n	801e2a8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 801e2a4:	2302      	movs	r3, #2
 801e2a6:	e13d      	b.n	801e524 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 801e2a8:	7bfb      	ldrb	r3, [r7, #15]
 801e2aa:	4619      	mov	r1, r3
 801e2ac:	6878      	ldr	r0, [r7, #4]
 801e2ae:	f000 fc3d 	bl	801eb2c <USBH_SelectInterface>
 801e2b2:	4603      	mov	r3, r0
 801e2b4:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 801e2b6:	7bbb      	ldrb	r3, [r7, #14]
 801e2b8:	2b00      	cmp	r3, #0
 801e2ba:	d001      	beq.n	801e2c0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 801e2bc:	2302      	movs	r3, #2
 801e2be:	e131      	b.n	801e524 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 801e2c0:	687b      	ldr	r3, [r7, #4]
 801e2c2:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 801e2c6:	2050      	movs	r0, #80	; 0x50
 801e2c8:	f001 fe9c 	bl	8020004 <malloc>
 801e2cc:	4603      	mov	r3, r0
 801e2ce:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 801e2d0:	687b      	ldr	r3, [r7, #4]
 801e2d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801e2d6:	69db      	ldr	r3, [r3, #28]
 801e2d8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 801e2da:	68bb      	ldr	r3, [r7, #8]
 801e2dc:	2b00      	cmp	r3, #0
 801e2de:	d101      	bne.n	801e2e4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 801e2e0:	2302      	movs	r3, #2
 801e2e2:	e11f      	b.n	801e524 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 801e2e4:	2250      	movs	r2, #80	; 0x50
 801e2e6:	2100      	movs	r1, #0
 801e2e8:	68b8      	ldr	r0, [r7, #8]
 801e2ea:	f001 febf 	bl	802006c <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 801e2ee:	7bfb      	ldrb	r3, [r7, #15]
 801e2f0:	687a      	ldr	r2, [r7, #4]
 801e2f2:	211a      	movs	r1, #26
 801e2f4:	fb01 f303 	mul.w	r3, r1, r3
 801e2f8:	4413      	add	r3, r2
 801e2fa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 801e2fe:	781b      	ldrb	r3, [r3, #0]
 801e300:	b25b      	sxtb	r3, r3
 801e302:	2b00      	cmp	r3, #0
 801e304:	da15      	bge.n	801e332 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 801e306:	7bfb      	ldrb	r3, [r7, #15]
 801e308:	687a      	ldr	r2, [r7, #4]
 801e30a:	211a      	movs	r1, #26
 801e30c:	fb01 f303 	mul.w	r3, r1, r3
 801e310:	4413      	add	r3, r2
 801e312:	f203 334e 	addw	r3, r3, #846	; 0x34e
 801e316:	781a      	ldrb	r2, [r3, #0]
 801e318:	68bb      	ldr	r3, [r7, #8]
 801e31a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 801e31c:	7bfb      	ldrb	r3, [r7, #15]
 801e31e:	687a      	ldr	r2, [r7, #4]
 801e320:	211a      	movs	r1, #26
 801e322:	fb01 f303 	mul.w	r3, r1, r3
 801e326:	4413      	add	r3, r2
 801e328:	f503 7354 	add.w	r3, r3, #848	; 0x350
 801e32c:	881a      	ldrh	r2, [r3, #0]
 801e32e:	68bb      	ldr	r3, [r7, #8]
 801e330:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 801e332:	68bb      	ldr	r3, [r7, #8]
 801e334:	785b      	ldrb	r3, [r3, #1]
 801e336:	4619      	mov	r1, r3
 801e338:	6878      	ldr	r0, [r7, #4]
 801e33a:	f000 ffa0 	bl	801f27e <USBH_AllocPipe>
 801e33e:	4603      	mov	r3, r0
 801e340:	461a      	mov	r2, r3
 801e342:	68bb      	ldr	r3, [r7, #8]
 801e344:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 801e346:	68bb      	ldr	r3, [r7, #8]
 801e348:	7819      	ldrb	r1, [r3, #0]
 801e34a:	68bb      	ldr	r3, [r7, #8]
 801e34c:	7858      	ldrb	r0, [r3, #1]
 801e34e:	687b      	ldr	r3, [r7, #4]
 801e350:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 801e354:	687b      	ldr	r3, [r7, #4]
 801e356:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 801e35a:	68ba      	ldr	r2, [r7, #8]
 801e35c:	8952      	ldrh	r2, [r2, #10]
 801e35e:	9202      	str	r2, [sp, #8]
 801e360:	2203      	movs	r2, #3
 801e362:	9201      	str	r2, [sp, #4]
 801e364:	9300      	str	r3, [sp, #0]
 801e366:	4623      	mov	r3, r4
 801e368:	4602      	mov	r2, r0
 801e36a:	6878      	ldr	r0, [r7, #4]
 801e36c:	f000 ff58 	bl	801f220 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 801e370:	68bb      	ldr	r3, [r7, #8]
 801e372:	781b      	ldrb	r3, [r3, #0]
 801e374:	2200      	movs	r2, #0
 801e376:	4619      	mov	r1, r3
 801e378:	6878      	ldr	r0, [r7, #4]
 801e37a:	f001 fa1b 	bl	801f7b4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 801e37e:	2300      	movs	r3, #0
 801e380:	2200      	movs	r2, #0
 801e382:	210a      	movs	r1, #10
 801e384:	6878      	ldr	r0, [r7, #4]
 801e386:	f000 fbed 	bl	801eb64 <USBH_FindInterface>
 801e38a:	4603      	mov	r3, r0
 801e38c:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 801e38e:	7bfb      	ldrb	r3, [r7, #15]
 801e390:	2bff      	cmp	r3, #255	; 0xff
 801e392:	d002      	beq.n	801e39a <USBH_CDC_InterfaceInit+0x11a>
 801e394:	7bfb      	ldrb	r3, [r7, #15]
 801e396:	2b01      	cmp	r3, #1
 801e398:	d901      	bls.n	801e39e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 801e39a:	2302      	movs	r3, #2
 801e39c:	e0c2      	b.n	801e524 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 801e39e:	7bfb      	ldrb	r3, [r7, #15]
 801e3a0:	687a      	ldr	r2, [r7, #4]
 801e3a2:	211a      	movs	r1, #26
 801e3a4:	fb01 f303 	mul.w	r3, r1, r3
 801e3a8:	4413      	add	r3, r2
 801e3aa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 801e3ae:	781b      	ldrb	r3, [r3, #0]
 801e3b0:	b25b      	sxtb	r3, r3
 801e3b2:	2b00      	cmp	r3, #0
 801e3b4:	da16      	bge.n	801e3e4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 801e3b6:	7bfb      	ldrb	r3, [r7, #15]
 801e3b8:	687a      	ldr	r2, [r7, #4]
 801e3ba:	211a      	movs	r1, #26
 801e3bc:	fb01 f303 	mul.w	r3, r1, r3
 801e3c0:	4413      	add	r3, r2
 801e3c2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 801e3c6:	781a      	ldrb	r2, [r3, #0]
 801e3c8:	68bb      	ldr	r3, [r7, #8]
 801e3ca:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 801e3cc:	7bfb      	ldrb	r3, [r7, #15]
 801e3ce:	687a      	ldr	r2, [r7, #4]
 801e3d0:	211a      	movs	r1, #26
 801e3d2:	fb01 f303 	mul.w	r3, r1, r3
 801e3d6:	4413      	add	r3, r2
 801e3d8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 801e3dc:	881a      	ldrh	r2, [r3, #0]
 801e3de:	68bb      	ldr	r3, [r7, #8]
 801e3e0:	835a      	strh	r2, [r3, #26]
 801e3e2:	e015      	b.n	801e410 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 801e3e4:	7bfb      	ldrb	r3, [r7, #15]
 801e3e6:	687a      	ldr	r2, [r7, #4]
 801e3e8:	211a      	movs	r1, #26
 801e3ea:	fb01 f303 	mul.w	r3, r1, r3
 801e3ee:	4413      	add	r3, r2
 801e3f0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 801e3f4:	781a      	ldrb	r2, [r3, #0]
 801e3f6:	68bb      	ldr	r3, [r7, #8]
 801e3f8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 801e3fa:	7bfb      	ldrb	r3, [r7, #15]
 801e3fc:	687a      	ldr	r2, [r7, #4]
 801e3fe:	211a      	movs	r1, #26
 801e400:	fb01 f303 	mul.w	r3, r1, r3
 801e404:	4413      	add	r3, r2
 801e406:	f503 7354 	add.w	r3, r3, #848	; 0x350
 801e40a:	881a      	ldrh	r2, [r3, #0]
 801e40c:	68bb      	ldr	r3, [r7, #8]
 801e40e:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 801e410:	7bfb      	ldrb	r3, [r7, #15]
 801e412:	687a      	ldr	r2, [r7, #4]
 801e414:	211a      	movs	r1, #26
 801e416:	fb01 f303 	mul.w	r3, r1, r3
 801e41a:	4413      	add	r3, r2
 801e41c:	f203 3356 	addw	r3, r3, #854	; 0x356
 801e420:	781b      	ldrb	r3, [r3, #0]
 801e422:	b25b      	sxtb	r3, r3
 801e424:	2b00      	cmp	r3, #0
 801e426:	da16      	bge.n	801e456 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 801e428:	7bfb      	ldrb	r3, [r7, #15]
 801e42a:	687a      	ldr	r2, [r7, #4]
 801e42c:	211a      	movs	r1, #26
 801e42e:	fb01 f303 	mul.w	r3, r1, r3
 801e432:	4413      	add	r3, r2
 801e434:	f203 3356 	addw	r3, r3, #854	; 0x356
 801e438:	781a      	ldrb	r2, [r3, #0]
 801e43a:	68bb      	ldr	r3, [r7, #8]
 801e43c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 801e43e:	7bfb      	ldrb	r3, [r7, #15]
 801e440:	687a      	ldr	r2, [r7, #4]
 801e442:	211a      	movs	r1, #26
 801e444:	fb01 f303 	mul.w	r3, r1, r3
 801e448:	4413      	add	r3, r2
 801e44a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 801e44e:	881a      	ldrh	r2, [r3, #0]
 801e450:	68bb      	ldr	r3, [r7, #8]
 801e452:	835a      	strh	r2, [r3, #26]
 801e454:	e015      	b.n	801e482 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 801e456:	7bfb      	ldrb	r3, [r7, #15]
 801e458:	687a      	ldr	r2, [r7, #4]
 801e45a:	211a      	movs	r1, #26
 801e45c:	fb01 f303 	mul.w	r3, r1, r3
 801e460:	4413      	add	r3, r2
 801e462:	f203 3356 	addw	r3, r3, #854	; 0x356
 801e466:	781a      	ldrb	r2, [r3, #0]
 801e468:	68bb      	ldr	r3, [r7, #8]
 801e46a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 801e46c:	7bfb      	ldrb	r3, [r7, #15]
 801e46e:	687a      	ldr	r2, [r7, #4]
 801e470:	211a      	movs	r1, #26
 801e472:	fb01 f303 	mul.w	r3, r1, r3
 801e476:	4413      	add	r3, r2
 801e478:	f503 7356 	add.w	r3, r3, #856	; 0x358
 801e47c:	881a      	ldrh	r2, [r3, #0]
 801e47e:	68bb      	ldr	r3, [r7, #8]
 801e480:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 801e482:	68bb      	ldr	r3, [r7, #8]
 801e484:	7b9b      	ldrb	r3, [r3, #14]
 801e486:	4619      	mov	r1, r3
 801e488:	6878      	ldr	r0, [r7, #4]
 801e48a:	f000 fef8 	bl	801f27e <USBH_AllocPipe>
 801e48e:	4603      	mov	r3, r0
 801e490:	461a      	mov	r2, r3
 801e492:	68bb      	ldr	r3, [r7, #8]
 801e494:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 801e496:	68bb      	ldr	r3, [r7, #8]
 801e498:	7bdb      	ldrb	r3, [r3, #15]
 801e49a:	4619      	mov	r1, r3
 801e49c:	6878      	ldr	r0, [r7, #4]
 801e49e:	f000 feee 	bl	801f27e <USBH_AllocPipe>
 801e4a2:	4603      	mov	r3, r0
 801e4a4:	461a      	mov	r2, r3
 801e4a6:	68bb      	ldr	r3, [r7, #8]
 801e4a8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 801e4aa:	68bb      	ldr	r3, [r7, #8]
 801e4ac:	7b59      	ldrb	r1, [r3, #13]
 801e4ae:	68bb      	ldr	r3, [r7, #8]
 801e4b0:	7b98      	ldrb	r0, [r3, #14]
 801e4b2:	687b      	ldr	r3, [r7, #4]
 801e4b4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 801e4b8:	687b      	ldr	r3, [r7, #4]
 801e4ba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 801e4be:	68ba      	ldr	r2, [r7, #8]
 801e4c0:	8b12      	ldrh	r2, [r2, #24]
 801e4c2:	9202      	str	r2, [sp, #8]
 801e4c4:	2202      	movs	r2, #2
 801e4c6:	9201      	str	r2, [sp, #4]
 801e4c8:	9300      	str	r3, [sp, #0]
 801e4ca:	4623      	mov	r3, r4
 801e4cc:	4602      	mov	r2, r0
 801e4ce:	6878      	ldr	r0, [r7, #4]
 801e4d0:	f000 fea6 	bl	801f220 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 801e4d4:	68bb      	ldr	r3, [r7, #8]
 801e4d6:	7b19      	ldrb	r1, [r3, #12]
 801e4d8:	68bb      	ldr	r3, [r7, #8]
 801e4da:	7bd8      	ldrb	r0, [r3, #15]
 801e4dc:	687b      	ldr	r3, [r7, #4]
 801e4de:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 801e4e2:	687b      	ldr	r3, [r7, #4]
 801e4e4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 801e4e8:	68ba      	ldr	r2, [r7, #8]
 801e4ea:	8b52      	ldrh	r2, [r2, #26]
 801e4ec:	9202      	str	r2, [sp, #8]
 801e4ee:	2202      	movs	r2, #2
 801e4f0:	9201      	str	r2, [sp, #4]
 801e4f2:	9300      	str	r3, [sp, #0]
 801e4f4:	4623      	mov	r3, r4
 801e4f6:	4602      	mov	r2, r0
 801e4f8:	6878      	ldr	r0, [r7, #4]
 801e4fa:	f000 fe91 	bl	801f220 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 801e4fe:	68bb      	ldr	r3, [r7, #8]
 801e500:	2200      	movs	r2, #0
 801e502:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 801e506:	68bb      	ldr	r3, [r7, #8]
 801e508:	7b5b      	ldrb	r3, [r3, #13]
 801e50a:	2200      	movs	r2, #0
 801e50c:	4619      	mov	r1, r3
 801e50e:	6878      	ldr	r0, [r7, #4]
 801e510:	f001 f950 	bl	801f7b4 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 801e514:	68bb      	ldr	r3, [r7, #8]
 801e516:	7b1b      	ldrb	r3, [r3, #12]
 801e518:	2200      	movs	r2, #0
 801e51a:	4619      	mov	r1, r3
 801e51c:	6878      	ldr	r0, [r7, #4]
 801e51e:	f001 f949 	bl	801f7b4 <USBH_LL_SetToggle>

  return USBH_OK;
 801e522:	2300      	movs	r3, #0
}
 801e524:	4618      	mov	r0, r3
 801e526:	3714      	adds	r7, #20
 801e528:	46bd      	mov	sp, r7
 801e52a:	bd90      	pop	{r4, r7, pc}

0801e52c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 801e52c:	b580      	push	{r7, lr}
 801e52e:	b084      	sub	sp, #16
 801e530:	af00      	add	r7, sp, #0
 801e532:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 801e534:	687b      	ldr	r3, [r7, #4]
 801e536:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801e53a:	69db      	ldr	r3, [r3, #28]
 801e53c:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 801e53e:	68fb      	ldr	r3, [r7, #12]
 801e540:	781b      	ldrb	r3, [r3, #0]
 801e542:	2b00      	cmp	r3, #0
 801e544:	d00e      	beq.n	801e564 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 801e546:	68fb      	ldr	r3, [r7, #12]
 801e548:	781b      	ldrb	r3, [r3, #0]
 801e54a:	4619      	mov	r1, r3
 801e54c:	6878      	ldr	r0, [r7, #4]
 801e54e:	f000 fe86 	bl	801f25e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 801e552:	68fb      	ldr	r3, [r7, #12]
 801e554:	781b      	ldrb	r3, [r3, #0]
 801e556:	4619      	mov	r1, r3
 801e558:	6878      	ldr	r0, [r7, #4]
 801e55a:	f000 feb1 	bl	801f2c0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 801e55e:	68fb      	ldr	r3, [r7, #12]
 801e560:	2200      	movs	r2, #0
 801e562:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 801e564:	68fb      	ldr	r3, [r7, #12]
 801e566:	7b1b      	ldrb	r3, [r3, #12]
 801e568:	2b00      	cmp	r3, #0
 801e56a:	d00e      	beq.n	801e58a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 801e56c:	68fb      	ldr	r3, [r7, #12]
 801e56e:	7b1b      	ldrb	r3, [r3, #12]
 801e570:	4619      	mov	r1, r3
 801e572:	6878      	ldr	r0, [r7, #4]
 801e574:	f000 fe73 	bl	801f25e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 801e578:	68fb      	ldr	r3, [r7, #12]
 801e57a:	7b1b      	ldrb	r3, [r3, #12]
 801e57c:	4619      	mov	r1, r3
 801e57e:	6878      	ldr	r0, [r7, #4]
 801e580:	f000 fe9e 	bl	801f2c0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 801e584:	68fb      	ldr	r3, [r7, #12]
 801e586:	2200      	movs	r2, #0
 801e588:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 801e58a:	68fb      	ldr	r3, [r7, #12]
 801e58c:	7b5b      	ldrb	r3, [r3, #13]
 801e58e:	2b00      	cmp	r3, #0
 801e590:	d00e      	beq.n	801e5b0 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 801e592:	68fb      	ldr	r3, [r7, #12]
 801e594:	7b5b      	ldrb	r3, [r3, #13]
 801e596:	4619      	mov	r1, r3
 801e598:	6878      	ldr	r0, [r7, #4]
 801e59a:	f000 fe60 	bl	801f25e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 801e59e:	68fb      	ldr	r3, [r7, #12]
 801e5a0:	7b5b      	ldrb	r3, [r3, #13]
 801e5a2:	4619      	mov	r1, r3
 801e5a4:	6878      	ldr	r0, [r7, #4]
 801e5a6:	f000 fe8b 	bl	801f2c0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 801e5aa:	68fb      	ldr	r3, [r7, #12]
 801e5ac:	2200      	movs	r2, #0
 801e5ae:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 801e5b0:	687b      	ldr	r3, [r7, #4]
 801e5b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801e5b6:	69db      	ldr	r3, [r3, #28]
 801e5b8:	2b00      	cmp	r3, #0
 801e5ba:	d00b      	beq.n	801e5d4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 801e5bc:	687b      	ldr	r3, [r7, #4]
 801e5be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801e5c2:	69db      	ldr	r3, [r3, #28]
 801e5c4:	4618      	mov	r0, r3
 801e5c6:	f001 fd25 	bl	8020014 <free>
    phost->pActiveClass->pData = 0U;
 801e5ca:	687b      	ldr	r3, [r7, #4]
 801e5cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801e5d0:	2200      	movs	r2, #0
 801e5d2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 801e5d4:	2300      	movs	r3, #0
}
 801e5d6:	4618      	mov	r0, r3
 801e5d8:	3710      	adds	r7, #16
 801e5da:	46bd      	mov	sp, r7
 801e5dc:	bd80      	pop	{r7, pc}

0801e5de <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 801e5de:	b580      	push	{r7, lr}
 801e5e0:	b084      	sub	sp, #16
 801e5e2:	af00      	add	r7, sp, #0
 801e5e4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 801e5e6:	687b      	ldr	r3, [r7, #4]
 801e5e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801e5ec:	69db      	ldr	r3, [r3, #28]
 801e5ee:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 801e5f0:	68fb      	ldr	r3, [r7, #12]
 801e5f2:	3340      	adds	r3, #64	; 0x40
 801e5f4:	4619      	mov	r1, r3
 801e5f6:	6878      	ldr	r0, [r7, #4]
 801e5f8:	f000 f8b1 	bl	801e75e <GetLineCoding>
 801e5fc:	4603      	mov	r3, r0
 801e5fe:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 801e600:	7afb      	ldrb	r3, [r7, #11]
 801e602:	2b00      	cmp	r3, #0
 801e604:	d105      	bne.n	801e612 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 801e606:	687b      	ldr	r3, [r7, #4]
 801e608:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 801e60c:	2102      	movs	r1, #2
 801e60e:	6878      	ldr	r0, [r7, #4]
 801e610:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 801e612:	7afb      	ldrb	r3, [r7, #11]
}
 801e614:	4618      	mov	r0, r3
 801e616:	3710      	adds	r7, #16
 801e618:	46bd      	mov	sp, r7
 801e61a:	bd80      	pop	{r7, pc}

0801e61c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 801e61c:	b580      	push	{r7, lr}
 801e61e:	b084      	sub	sp, #16
 801e620:	af00      	add	r7, sp, #0
 801e622:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 801e624:	2301      	movs	r3, #1
 801e626:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 801e628:	2300      	movs	r3, #0
 801e62a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 801e62c:	687b      	ldr	r3, [r7, #4]
 801e62e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801e632:	69db      	ldr	r3, [r3, #28]
 801e634:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 801e636:	68bb      	ldr	r3, [r7, #8]
 801e638:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 801e63c:	2b04      	cmp	r3, #4
 801e63e:	d877      	bhi.n	801e730 <USBH_CDC_Process+0x114>
 801e640:	a201      	add	r2, pc, #4	; (adr r2, 801e648 <USBH_CDC_Process+0x2c>)
 801e642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e646:	bf00      	nop
 801e648:	0801e65d 	.word	0x0801e65d
 801e64c:	0801e663 	.word	0x0801e663
 801e650:	0801e693 	.word	0x0801e693
 801e654:	0801e707 	.word	0x0801e707
 801e658:	0801e715 	.word	0x0801e715
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 801e65c:	2300      	movs	r3, #0
 801e65e:	73fb      	strb	r3, [r7, #15]
      break;
 801e660:	e06d      	b.n	801e73e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 801e662:	68bb      	ldr	r3, [r7, #8]
 801e664:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801e666:	4619      	mov	r1, r3
 801e668:	6878      	ldr	r0, [r7, #4]
 801e66a:	f000 f897 	bl	801e79c <SetLineCoding>
 801e66e:	4603      	mov	r3, r0
 801e670:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 801e672:	7bbb      	ldrb	r3, [r7, #14]
 801e674:	2b00      	cmp	r3, #0
 801e676:	d104      	bne.n	801e682 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 801e678:	68bb      	ldr	r3, [r7, #8]
 801e67a:	2202      	movs	r2, #2
 801e67c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 801e680:	e058      	b.n	801e734 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 801e682:	7bbb      	ldrb	r3, [r7, #14]
 801e684:	2b01      	cmp	r3, #1
 801e686:	d055      	beq.n	801e734 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 801e688:	68bb      	ldr	r3, [r7, #8]
 801e68a:	2204      	movs	r2, #4
 801e68c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 801e690:	e050      	b.n	801e734 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 801e692:	68bb      	ldr	r3, [r7, #8]
 801e694:	3340      	adds	r3, #64	; 0x40
 801e696:	4619      	mov	r1, r3
 801e698:	6878      	ldr	r0, [r7, #4]
 801e69a:	f000 f860 	bl	801e75e <GetLineCoding>
 801e69e:	4603      	mov	r3, r0
 801e6a0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 801e6a2:	7bbb      	ldrb	r3, [r7, #14]
 801e6a4:	2b00      	cmp	r3, #0
 801e6a6:	d126      	bne.n	801e6f6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 801e6a8:	68bb      	ldr	r3, [r7, #8]
 801e6aa:	2200      	movs	r2, #0
 801e6ac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 801e6b0:	68bb      	ldr	r3, [r7, #8]
 801e6b2:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 801e6b6:	68bb      	ldr	r3, [r7, #8]
 801e6b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801e6ba:	791b      	ldrb	r3, [r3, #4]
 801e6bc:	429a      	cmp	r2, r3
 801e6be:	d13b      	bne.n	801e738 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 801e6c0:	68bb      	ldr	r3, [r7, #8]
 801e6c2:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 801e6c6:	68bb      	ldr	r3, [r7, #8]
 801e6c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801e6ca:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 801e6cc:	429a      	cmp	r2, r3
 801e6ce:	d133      	bne.n	801e738 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 801e6d0:	68bb      	ldr	r3, [r7, #8]
 801e6d2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 801e6d6:	68bb      	ldr	r3, [r7, #8]
 801e6d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801e6da:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 801e6dc:	429a      	cmp	r2, r3
 801e6de:	d12b      	bne.n	801e738 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 801e6e0:	68bb      	ldr	r3, [r7, #8]
 801e6e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801e6e4:	68bb      	ldr	r3, [r7, #8]
 801e6e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801e6e8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 801e6ea:	429a      	cmp	r2, r3
 801e6ec:	d124      	bne.n	801e738 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 801e6ee:	6878      	ldr	r0, [r7, #4]
 801e6f0:	f000 f95a 	bl	801e9a8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 801e6f4:	e020      	b.n	801e738 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 801e6f6:	7bbb      	ldrb	r3, [r7, #14]
 801e6f8:	2b01      	cmp	r3, #1
 801e6fa:	d01d      	beq.n	801e738 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 801e6fc:	68bb      	ldr	r3, [r7, #8]
 801e6fe:	2204      	movs	r2, #4
 801e700:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 801e704:	e018      	b.n	801e738 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 801e706:	6878      	ldr	r0, [r7, #4]
 801e708:	f000 f867 	bl	801e7da <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 801e70c:	6878      	ldr	r0, [r7, #4]
 801e70e:	f000 f8dc 	bl	801e8ca <CDC_ProcessReception>
      break;
 801e712:	e014      	b.n	801e73e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 801e714:	2100      	movs	r1, #0
 801e716:	6878      	ldr	r0, [r7, #4]
 801e718:	f000 fb0a 	bl	801ed30 <USBH_ClrFeature>
 801e71c:	4603      	mov	r3, r0
 801e71e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 801e720:	7bbb      	ldrb	r3, [r7, #14]
 801e722:	2b00      	cmp	r3, #0
 801e724:	d10a      	bne.n	801e73c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 801e726:	68bb      	ldr	r3, [r7, #8]
 801e728:	2200      	movs	r2, #0
 801e72a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 801e72e:	e005      	b.n	801e73c <USBH_CDC_Process+0x120>

    default:
      break;
 801e730:	bf00      	nop
 801e732:	e004      	b.n	801e73e <USBH_CDC_Process+0x122>
      break;
 801e734:	bf00      	nop
 801e736:	e002      	b.n	801e73e <USBH_CDC_Process+0x122>
      break;
 801e738:	bf00      	nop
 801e73a:	e000      	b.n	801e73e <USBH_CDC_Process+0x122>
      break;
 801e73c:	bf00      	nop

  }

  return status;
 801e73e:	7bfb      	ldrb	r3, [r7, #15]
}
 801e740:	4618      	mov	r0, r3
 801e742:	3710      	adds	r7, #16
 801e744:	46bd      	mov	sp, r7
 801e746:	bd80      	pop	{r7, pc}

0801e748 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 801e748:	b480      	push	{r7}
 801e74a:	b083      	sub	sp, #12
 801e74c:	af00      	add	r7, sp, #0
 801e74e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 801e750:	2300      	movs	r3, #0
}
 801e752:	4618      	mov	r0, r3
 801e754:	370c      	adds	r7, #12
 801e756:	46bd      	mov	sp, r7
 801e758:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e75c:	4770      	bx	lr

0801e75e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 801e75e:	b580      	push	{r7, lr}
 801e760:	b082      	sub	sp, #8
 801e762:	af00      	add	r7, sp, #0
 801e764:	6078      	str	r0, [r7, #4]
 801e766:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 801e768:	687b      	ldr	r3, [r7, #4]
 801e76a:	22a1      	movs	r2, #161	; 0xa1
 801e76c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 801e76e:	687b      	ldr	r3, [r7, #4]
 801e770:	2221      	movs	r2, #33	; 0x21
 801e772:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 801e774:	687b      	ldr	r3, [r7, #4]
 801e776:	2200      	movs	r2, #0
 801e778:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 801e77a:	687b      	ldr	r3, [r7, #4]
 801e77c:	2200      	movs	r2, #0
 801e77e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 801e780:	687b      	ldr	r3, [r7, #4]
 801e782:	2207      	movs	r2, #7
 801e784:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 801e786:	683b      	ldr	r3, [r7, #0]
 801e788:	2207      	movs	r2, #7
 801e78a:	4619      	mov	r1, r3
 801e78c:	6878      	ldr	r0, [r7, #4]
 801e78e:	f000 faf3 	bl	801ed78 <USBH_CtlReq>
 801e792:	4603      	mov	r3, r0
}
 801e794:	4618      	mov	r0, r3
 801e796:	3708      	adds	r7, #8
 801e798:	46bd      	mov	sp, r7
 801e79a:	bd80      	pop	{r7, pc}

0801e79c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 801e79c:	b580      	push	{r7, lr}
 801e79e:	b082      	sub	sp, #8
 801e7a0:	af00      	add	r7, sp, #0
 801e7a2:	6078      	str	r0, [r7, #4]
 801e7a4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 801e7a6:	687b      	ldr	r3, [r7, #4]
 801e7a8:	2221      	movs	r2, #33	; 0x21
 801e7aa:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 801e7ac:	687b      	ldr	r3, [r7, #4]
 801e7ae:	2220      	movs	r2, #32
 801e7b0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 801e7b2:	687b      	ldr	r3, [r7, #4]
 801e7b4:	2200      	movs	r2, #0
 801e7b6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 801e7b8:	687b      	ldr	r3, [r7, #4]
 801e7ba:	2200      	movs	r2, #0
 801e7bc:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 801e7be:	687b      	ldr	r3, [r7, #4]
 801e7c0:	2207      	movs	r2, #7
 801e7c2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 801e7c4:	683b      	ldr	r3, [r7, #0]
 801e7c6:	2207      	movs	r2, #7
 801e7c8:	4619      	mov	r1, r3
 801e7ca:	6878      	ldr	r0, [r7, #4]
 801e7cc:	f000 fad4 	bl	801ed78 <USBH_CtlReq>
 801e7d0:	4603      	mov	r3, r0
}
 801e7d2:	4618      	mov	r0, r3
 801e7d4:	3708      	adds	r7, #8
 801e7d6:	46bd      	mov	sp, r7
 801e7d8:	bd80      	pop	{r7, pc}

0801e7da <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 801e7da:	b580      	push	{r7, lr}
 801e7dc:	b086      	sub	sp, #24
 801e7de:	af02      	add	r7, sp, #8
 801e7e0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 801e7e2:	687b      	ldr	r3, [r7, #4]
 801e7e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801e7e8:	69db      	ldr	r3, [r3, #28]
 801e7ea:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 801e7ec:	2300      	movs	r3, #0
 801e7ee:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 801e7f0:	68fb      	ldr	r3, [r7, #12]
 801e7f2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 801e7f6:	2b01      	cmp	r3, #1
 801e7f8:	d002      	beq.n	801e800 <CDC_ProcessTransmission+0x26>
 801e7fa:	2b02      	cmp	r3, #2
 801e7fc:	d025      	beq.n	801e84a <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 801e7fe:	e060      	b.n	801e8c2 <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 801e800:	68fb      	ldr	r3, [r7, #12]
 801e802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e804:	68fa      	ldr	r2, [r7, #12]
 801e806:	8b12      	ldrh	r2, [r2, #24]
 801e808:	4293      	cmp	r3, r2
 801e80a:	d90c      	bls.n	801e826 <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 801e80c:	68fb      	ldr	r3, [r7, #12]
 801e80e:	69d9      	ldr	r1, [r3, #28]
 801e810:	68fb      	ldr	r3, [r7, #12]
 801e812:	8b1a      	ldrh	r2, [r3, #24]
 801e814:	68fb      	ldr	r3, [r7, #12]
 801e816:	7b58      	ldrb	r0, [r3, #13]
 801e818:	2301      	movs	r3, #1
 801e81a:	9300      	str	r3, [sp, #0]
 801e81c:	4603      	mov	r3, r0
 801e81e:	6878      	ldr	r0, [r7, #4]
 801e820:	f000 fcbb 	bl	801f19a <USBH_BulkSendData>
 801e824:	e00c      	b.n	801e840 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 801e826:	68fb      	ldr	r3, [r7, #12]
 801e828:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 801e82a:	68fb      	ldr	r3, [r7, #12]
 801e82c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 801e82e:	b29a      	uxth	r2, r3
 801e830:	68fb      	ldr	r3, [r7, #12]
 801e832:	7b58      	ldrb	r0, [r3, #13]
 801e834:	2301      	movs	r3, #1
 801e836:	9300      	str	r3, [sp, #0]
 801e838:	4603      	mov	r3, r0
 801e83a:	6878      	ldr	r0, [r7, #4]
 801e83c:	f000 fcad 	bl	801f19a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 801e840:	68fb      	ldr	r3, [r7, #12]
 801e842:	2202      	movs	r2, #2
 801e844:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 801e848:	e03b      	b.n	801e8c2 <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 801e84a:	68fb      	ldr	r3, [r7, #12]
 801e84c:	7b5b      	ldrb	r3, [r3, #13]
 801e84e:	4619      	mov	r1, r3
 801e850:	6878      	ldr	r0, [r7, #4]
 801e852:	f000 ff85 	bl	801f760 <USBH_LL_GetURBState>
 801e856:	4603      	mov	r3, r0
 801e858:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 801e85a:	7afb      	ldrb	r3, [r7, #11]
 801e85c:	2b01      	cmp	r3, #1
 801e85e:	d128      	bne.n	801e8b2 <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 801e860:	68fb      	ldr	r3, [r7, #12]
 801e862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e864:	68fa      	ldr	r2, [r7, #12]
 801e866:	8b12      	ldrh	r2, [r2, #24]
 801e868:	4293      	cmp	r3, r2
 801e86a:	d90e      	bls.n	801e88a <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 801e86c:	68fb      	ldr	r3, [r7, #12]
 801e86e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e870:	68fa      	ldr	r2, [r7, #12]
 801e872:	8b12      	ldrh	r2, [r2, #24]
 801e874:	1a9a      	subs	r2, r3, r2
 801e876:	68fb      	ldr	r3, [r7, #12]
 801e878:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 801e87a:	68fb      	ldr	r3, [r7, #12]
 801e87c:	69db      	ldr	r3, [r3, #28]
 801e87e:	68fa      	ldr	r2, [r7, #12]
 801e880:	8b12      	ldrh	r2, [r2, #24]
 801e882:	441a      	add	r2, r3
 801e884:	68fb      	ldr	r3, [r7, #12]
 801e886:	61da      	str	r2, [r3, #28]
 801e888:	e002      	b.n	801e890 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 801e88a:	68fb      	ldr	r3, [r7, #12]
 801e88c:	2200      	movs	r2, #0
 801e88e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 801e890:	68fb      	ldr	r3, [r7, #12]
 801e892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e894:	2b00      	cmp	r3, #0
 801e896:	d004      	beq.n	801e8a2 <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 801e898:	68fb      	ldr	r3, [r7, #12]
 801e89a:	2201      	movs	r2, #1
 801e89c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 801e8a0:	e00e      	b.n	801e8c0 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 801e8a2:	68fb      	ldr	r3, [r7, #12]
 801e8a4:	2200      	movs	r2, #0
 801e8a6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 801e8aa:	6878      	ldr	r0, [r7, #4]
 801e8ac:	f000 f868 	bl	801e980 <USBH_CDC_TransmitCallback>
      break;
 801e8b0:	e006      	b.n	801e8c0 <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 801e8b2:	7afb      	ldrb	r3, [r7, #11]
 801e8b4:	2b02      	cmp	r3, #2
 801e8b6:	d103      	bne.n	801e8c0 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 801e8b8:	68fb      	ldr	r3, [r7, #12]
 801e8ba:	2201      	movs	r2, #1
 801e8bc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 801e8c0:	bf00      	nop
  }
}
 801e8c2:	bf00      	nop
 801e8c4:	3710      	adds	r7, #16
 801e8c6:	46bd      	mov	sp, r7
 801e8c8:	bd80      	pop	{r7, pc}

0801e8ca <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 801e8ca:	b580      	push	{r7, lr}
 801e8cc:	b086      	sub	sp, #24
 801e8ce:	af00      	add	r7, sp, #0
 801e8d0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 801e8d2:	687b      	ldr	r3, [r7, #4]
 801e8d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801e8d8:	69db      	ldr	r3, [r3, #28]
 801e8da:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 801e8dc:	2300      	movs	r3, #0
 801e8de:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 801e8e0:	697b      	ldr	r3, [r7, #20]
 801e8e2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 801e8e6:	2b03      	cmp	r3, #3
 801e8e8:	d002      	beq.n	801e8f0 <CDC_ProcessReception+0x26>
 801e8ea:	2b04      	cmp	r3, #4
 801e8ec:	d00e      	beq.n	801e90c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 801e8ee:	e043      	b.n	801e978 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 801e8f0:	697b      	ldr	r3, [r7, #20]
 801e8f2:	6a19      	ldr	r1, [r3, #32]
 801e8f4:	697b      	ldr	r3, [r7, #20]
 801e8f6:	8b5a      	ldrh	r2, [r3, #26]
 801e8f8:	697b      	ldr	r3, [r7, #20]
 801e8fa:	7b1b      	ldrb	r3, [r3, #12]
 801e8fc:	6878      	ldr	r0, [r7, #4]
 801e8fe:	f000 fc71 	bl	801f1e4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 801e902:	697b      	ldr	r3, [r7, #20]
 801e904:	2204      	movs	r2, #4
 801e906:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 801e90a:	e035      	b.n	801e978 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 801e90c:	697b      	ldr	r3, [r7, #20]
 801e90e:	7b1b      	ldrb	r3, [r3, #12]
 801e910:	4619      	mov	r1, r3
 801e912:	6878      	ldr	r0, [r7, #4]
 801e914:	f000 ff24 	bl	801f760 <USBH_LL_GetURBState>
 801e918:	4603      	mov	r3, r0
 801e91a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 801e91c:	7cfb      	ldrb	r3, [r7, #19]
 801e91e:	2b01      	cmp	r3, #1
 801e920:	d129      	bne.n	801e976 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 801e922:	697b      	ldr	r3, [r7, #20]
 801e924:	7b1b      	ldrb	r3, [r3, #12]
 801e926:	4619      	mov	r1, r3
 801e928:	6878      	ldr	r0, [r7, #4]
 801e92a:	f000 fe87 	bl	801f63c <USBH_LL_GetLastXferSize>
 801e92e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 801e930:	697b      	ldr	r3, [r7, #20]
 801e932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e934:	68fa      	ldr	r2, [r7, #12]
 801e936:	429a      	cmp	r2, r3
 801e938:	d016      	beq.n	801e968 <CDC_ProcessReception+0x9e>
 801e93a:	697b      	ldr	r3, [r7, #20]
 801e93c:	8b5b      	ldrh	r3, [r3, #26]
 801e93e:	461a      	mov	r2, r3
 801e940:	68fb      	ldr	r3, [r7, #12]
 801e942:	4293      	cmp	r3, r2
 801e944:	d910      	bls.n	801e968 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 801e946:	697b      	ldr	r3, [r7, #20]
 801e948:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801e94a:	68fb      	ldr	r3, [r7, #12]
 801e94c:	1ad2      	subs	r2, r2, r3
 801e94e:	697b      	ldr	r3, [r7, #20]
 801e950:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 801e952:	697b      	ldr	r3, [r7, #20]
 801e954:	6a1a      	ldr	r2, [r3, #32]
 801e956:	68fb      	ldr	r3, [r7, #12]
 801e958:	441a      	add	r2, r3
 801e95a:	697b      	ldr	r3, [r7, #20]
 801e95c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 801e95e:	697b      	ldr	r3, [r7, #20]
 801e960:	2203      	movs	r2, #3
 801e962:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 801e966:	e006      	b.n	801e976 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 801e968:	697b      	ldr	r3, [r7, #20]
 801e96a:	2200      	movs	r2, #0
 801e96c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 801e970:	6878      	ldr	r0, [r7, #4]
 801e972:	f000 f80f 	bl	801e994 <USBH_CDC_ReceiveCallback>
      break;
 801e976:	bf00      	nop
  }
}
 801e978:	bf00      	nop
 801e97a:	3718      	adds	r7, #24
 801e97c:	46bd      	mov	sp, r7
 801e97e:	bd80      	pop	{r7, pc}

0801e980 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 801e980:	b480      	push	{r7}
 801e982:	b083      	sub	sp, #12
 801e984:	af00      	add	r7, sp, #0
 801e986:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 801e988:	bf00      	nop
 801e98a:	370c      	adds	r7, #12
 801e98c:	46bd      	mov	sp, r7
 801e98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e992:	4770      	bx	lr

0801e994 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 801e994:	b480      	push	{r7}
 801e996:	b083      	sub	sp, #12
 801e998:	af00      	add	r7, sp, #0
 801e99a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 801e99c:	bf00      	nop
 801e99e:	370c      	adds	r7, #12
 801e9a0:	46bd      	mov	sp, r7
 801e9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e9a6:	4770      	bx	lr

0801e9a8 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 801e9a8:	b480      	push	{r7}
 801e9aa:	b083      	sub	sp, #12
 801e9ac:	af00      	add	r7, sp, #0
 801e9ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 801e9b0:	bf00      	nop
 801e9b2:	370c      	adds	r7, #12
 801e9b4:	46bd      	mov	sp, r7
 801e9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e9ba:	4770      	bx	lr

0801e9bc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 801e9bc:	b580      	push	{r7, lr}
 801e9be:	b084      	sub	sp, #16
 801e9c0:	af00      	add	r7, sp, #0
 801e9c2:	60f8      	str	r0, [r7, #12]
 801e9c4:	60b9      	str	r1, [r7, #8]
 801e9c6:	4613      	mov	r3, r2
 801e9c8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 801e9ca:	68fb      	ldr	r3, [r7, #12]
 801e9cc:	2b00      	cmp	r3, #0
 801e9ce:	d101      	bne.n	801e9d4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 801e9d0:	2302      	movs	r3, #2
 801e9d2:	e029      	b.n	801ea28 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 801e9d4:	68fb      	ldr	r3, [r7, #12]
 801e9d6:	79fa      	ldrb	r2, [r7, #7]
 801e9d8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 801e9dc:	68fb      	ldr	r3, [r7, #12]
 801e9de:	2200      	movs	r2, #0
 801e9e0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 801e9e4:	68fb      	ldr	r3, [r7, #12]
 801e9e6:	2200      	movs	r2, #0
 801e9e8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 801e9ec:	68f8      	ldr	r0, [r7, #12]
 801e9ee:	f000 f81f 	bl	801ea30 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 801e9f2:	68fb      	ldr	r3, [r7, #12]
 801e9f4:	2200      	movs	r2, #0
 801e9f6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 801e9fa:	68fb      	ldr	r3, [r7, #12]
 801e9fc:	2200      	movs	r2, #0
 801e9fe:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 801ea02:	68fb      	ldr	r3, [r7, #12]
 801ea04:	2200      	movs	r2, #0
 801ea06:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 801ea0a:	68fb      	ldr	r3, [r7, #12]
 801ea0c:	2200      	movs	r2, #0
 801ea0e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 801ea12:	68bb      	ldr	r3, [r7, #8]
 801ea14:	2b00      	cmp	r3, #0
 801ea16:	d003      	beq.n	801ea20 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 801ea18:	68fb      	ldr	r3, [r7, #12]
 801ea1a:	68ba      	ldr	r2, [r7, #8]
 801ea1c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 801ea20:	68f8      	ldr	r0, [r7, #12]
 801ea22:	f000 fd99 	bl	801f558 <USBH_LL_Init>

  return USBH_OK;
 801ea26:	2300      	movs	r3, #0
}
 801ea28:	4618      	mov	r0, r3
 801ea2a:	3710      	adds	r7, #16
 801ea2c:	46bd      	mov	sp, r7
 801ea2e:	bd80      	pop	{r7, pc}

0801ea30 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 801ea30:	b480      	push	{r7}
 801ea32:	b085      	sub	sp, #20
 801ea34:	af00      	add	r7, sp, #0
 801ea36:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 801ea38:	2300      	movs	r3, #0
 801ea3a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 801ea3c:	2300      	movs	r3, #0
 801ea3e:	60fb      	str	r3, [r7, #12]
 801ea40:	e009      	b.n	801ea56 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 801ea42:	687a      	ldr	r2, [r7, #4]
 801ea44:	68fb      	ldr	r3, [r7, #12]
 801ea46:	33e0      	adds	r3, #224	; 0xe0
 801ea48:	009b      	lsls	r3, r3, #2
 801ea4a:	4413      	add	r3, r2
 801ea4c:	2200      	movs	r2, #0
 801ea4e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 801ea50:	68fb      	ldr	r3, [r7, #12]
 801ea52:	3301      	adds	r3, #1
 801ea54:	60fb      	str	r3, [r7, #12]
 801ea56:	68fb      	ldr	r3, [r7, #12]
 801ea58:	2b0e      	cmp	r3, #14
 801ea5a:	d9f2      	bls.n	801ea42 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 801ea5c:	2300      	movs	r3, #0
 801ea5e:	60fb      	str	r3, [r7, #12]
 801ea60:	e009      	b.n	801ea76 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 801ea62:	687a      	ldr	r2, [r7, #4]
 801ea64:	68fb      	ldr	r3, [r7, #12]
 801ea66:	4413      	add	r3, r2
 801ea68:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 801ea6c:	2200      	movs	r2, #0
 801ea6e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 801ea70:	68fb      	ldr	r3, [r7, #12]
 801ea72:	3301      	adds	r3, #1
 801ea74:	60fb      	str	r3, [r7, #12]
 801ea76:	68fb      	ldr	r3, [r7, #12]
 801ea78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ea7c:	d3f1      	bcc.n	801ea62 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 801ea7e:	687b      	ldr	r3, [r7, #4]
 801ea80:	2200      	movs	r2, #0
 801ea82:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 801ea84:	687b      	ldr	r3, [r7, #4]
 801ea86:	2200      	movs	r2, #0
 801ea88:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 801ea8a:	687b      	ldr	r3, [r7, #4]
 801ea8c:	2201      	movs	r2, #1
 801ea8e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 801ea90:	687b      	ldr	r3, [r7, #4]
 801ea92:	2200      	movs	r2, #0
 801ea94:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 801ea98:	687b      	ldr	r3, [r7, #4]
 801ea9a:	2201      	movs	r2, #1
 801ea9c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 801ea9e:	687b      	ldr	r3, [r7, #4]
 801eaa0:	2240      	movs	r2, #64	; 0x40
 801eaa2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 801eaa4:	687b      	ldr	r3, [r7, #4]
 801eaa6:	2200      	movs	r2, #0
 801eaa8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 801eaaa:	687b      	ldr	r3, [r7, #4]
 801eaac:	2200      	movs	r2, #0
 801eaae:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 801eab2:	687b      	ldr	r3, [r7, #4]
 801eab4:	2201      	movs	r2, #1
 801eab6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 801eaba:	687b      	ldr	r3, [r7, #4]
 801eabc:	2200      	movs	r2, #0
 801eabe:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 801eac2:	687b      	ldr	r3, [r7, #4]
 801eac4:	2200      	movs	r2, #0
 801eac6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 801eaca:	2300      	movs	r3, #0
}
 801eacc:	4618      	mov	r0, r3
 801eace:	3714      	adds	r7, #20
 801ead0:	46bd      	mov	sp, r7
 801ead2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ead6:	4770      	bx	lr

0801ead8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 801ead8:	b480      	push	{r7}
 801eada:	b085      	sub	sp, #20
 801eadc:	af00      	add	r7, sp, #0
 801eade:	6078      	str	r0, [r7, #4]
 801eae0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 801eae2:	2300      	movs	r3, #0
 801eae4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 801eae6:	683b      	ldr	r3, [r7, #0]
 801eae8:	2b00      	cmp	r3, #0
 801eaea:	d016      	beq.n	801eb1a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 801eaec:	687b      	ldr	r3, [r7, #4]
 801eaee:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 801eaf2:	2b00      	cmp	r3, #0
 801eaf4:	d10e      	bne.n	801eb14 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 801eaf6:	687b      	ldr	r3, [r7, #4]
 801eaf8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 801eafc:	1c59      	adds	r1, r3, #1
 801eafe:	687a      	ldr	r2, [r7, #4]
 801eb00:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 801eb04:	687a      	ldr	r2, [r7, #4]
 801eb06:	33de      	adds	r3, #222	; 0xde
 801eb08:	6839      	ldr	r1, [r7, #0]
 801eb0a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 801eb0e:	2300      	movs	r3, #0
 801eb10:	73fb      	strb	r3, [r7, #15]
 801eb12:	e004      	b.n	801eb1e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 801eb14:	2302      	movs	r3, #2
 801eb16:	73fb      	strb	r3, [r7, #15]
 801eb18:	e001      	b.n	801eb1e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 801eb1a:	2302      	movs	r3, #2
 801eb1c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 801eb1e:	7bfb      	ldrb	r3, [r7, #15]
}
 801eb20:	4618      	mov	r0, r3
 801eb22:	3714      	adds	r7, #20
 801eb24:	46bd      	mov	sp, r7
 801eb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eb2a:	4770      	bx	lr

0801eb2c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 801eb2c:	b480      	push	{r7}
 801eb2e:	b085      	sub	sp, #20
 801eb30:	af00      	add	r7, sp, #0
 801eb32:	6078      	str	r0, [r7, #4]
 801eb34:	460b      	mov	r3, r1
 801eb36:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 801eb38:	2300      	movs	r3, #0
 801eb3a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 801eb3c:	687b      	ldr	r3, [r7, #4]
 801eb3e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 801eb42:	78fa      	ldrb	r2, [r7, #3]
 801eb44:	429a      	cmp	r2, r3
 801eb46:	d204      	bcs.n	801eb52 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 801eb48:	687b      	ldr	r3, [r7, #4]
 801eb4a:	78fa      	ldrb	r2, [r7, #3]
 801eb4c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 801eb50:	e001      	b.n	801eb56 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 801eb52:	2302      	movs	r3, #2
 801eb54:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 801eb56:	7bfb      	ldrb	r3, [r7, #15]
}
 801eb58:	4618      	mov	r0, r3
 801eb5a:	3714      	adds	r7, #20
 801eb5c:	46bd      	mov	sp, r7
 801eb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eb62:	4770      	bx	lr

0801eb64 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 801eb64:	b480      	push	{r7}
 801eb66:	b087      	sub	sp, #28
 801eb68:	af00      	add	r7, sp, #0
 801eb6a:	6078      	str	r0, [r7, #4]
 801eb6c:	4608      	mov	r0, r1
 801eb6e:	4611      	mov	r1, r2
 801eb70:	461a      	mov	r2, r3
 801eb72:	4603      	mov	r3, r0
 801eb74:	70fb      	strb	r3, [r7, #3]
 801eb76:	460b      	mov	r3, r1
 801eb78:	70bb      	strb	r3, [r7, #2]
 801eb7a:	4613      	mov	r3, r2
 801eb7c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 801eb7e:	2300      	movs	r3, #0
 801eb80:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 801eb82:	2300      	movs	r3, #0
 801eb84:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 801eb86:	687b      	ldr	r3, [r7, #4]
 801eb88:	f503 734e 	add.w	r3, r3, #824	; 0x338
 801eb8c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 801eb8e:	e025      	b.n	801ebdc <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 801eb90:	7dfb      	ldrb	r3, [r7, #23]
 801eb92:	221a      	movs	r2, #26
 801eb94:	fb02 f303 	mul.w	r3, r2, r3
 801eb98:	3308      	adds	r3, #8
 801eb9a:	68fa      	ldr	r2, [r7, #12]
 801eb9c:	4413      	add	r3, r2
 801eb9e:	3302      	adds	r3, #2
 801eba0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 801eba2:	693b      	ldr	r3, [r7, #16]
 801eba4:	795b      	ldrb	r3, [r3, #5]
 801eba6:	78fa      	ldrb	r2, [r7, #3]
 801eba8:	429a      	cmp	r2, r3
 801ebaa:	d002      	beq.n	801ebb2 <USBH_FindInterface+0x4e>
 801ebac:	78fb      	ldrb	r3, [r7, #3]
 801ebae:	2bff      	cmp	r3, #255	; 0xff
 801ebb0:	d111      	bne.n	801ebd6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 801ebb2:	693b      	ldr	r3, [r7, #16]
 801ebb4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 801ebb6:	78ba      	ldrb	r2, [r7, #2]
 801ebb8:	429a      	cmp	r2, r3
 801ebba:	d002      	beq.n	801ebc2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 801ebbc:	78bb      	ldrb	r3, [r7, #2]
 801ebbe:	2bff      	cmp	r3, #255	; 0xff
 801ebc0:	d109      	bne.n	801ebd6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 801ebc2:	693b      	ldr	r3, [r7, #16]
 801ebc4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 801ebc6:	787a      	ldrb	r2, [r7, #1]
 801ebc8:	429a      	cmp	r2, r3
 801ebca:	d002      	beq.n	801ebd2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 801ebcc:	787b      	ldrb	r3, [r7, #1]
 801ebce:	2bff      	cmp	r3, #255	; 0xff
 801ebd0:	d101      	bne.n	801ebd6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 801ebd2:	7dfb      	ldrb	r3, [r7, #23]
 801ebd4:	e006      	b.n	801ebe4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 801ebd6:	7dfb      	ldrb	r3, [r7, #23]
 801ebd8:	3301      	adds	r3, #1
 801ebda:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 801ebdc:	7dfb      	ldrb	r3, [r7, #23]
 801ebde:	2b01      	cmp	r3, #1
 801ebe0:	d9d6      	bls.n	801eb90 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 801ebe2:	23ff      	movs	r3, #255	; 0xff
}
 801ebe4:	4618      	mov	r0, r3
 801ebe6:	371c      	adds	r7, #28
 801ebe8:	46bd      	mov	sp, r7
 801ebea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ebee:	4770      	bx	lr

0801ebf0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 801ebf0:	b580      	push	{r7, lr}
 801ebf2:	b082      	sub	sp, #8
 801ebf4:	af00      	add	r7, sp, #0
 801ebf6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 801ebf8:	6878      	ldr	r0, [r7, #4]
 801ebfa:	f000 fce9 	bl	801f5d0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 801ebfe:	2101      	movs	r1, #1
 801ec00:	6878      	ldr	r0, [r7, #4]
 801ec02:	f000 fdc0 	bl	801f786 <USBH_LL_DriverVBUS>

  return USBH_OK;
 801ec06:	2300      	movs	r3, #0
}
 801ec08:	4618      	mov	r0, r3
 801ec0a:	3708      	adds	r7, #8
 801ec0c:	46bd      	mov	sp, r7
 801ec0e:	bd80      	pop	{r7, pc}

0801ec10 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 801ec10:	b480      	push	{r7}
 801ec12:	b083      	sub	sp, #12
 801ec14:	af00      	add	r7, sp, #0
 801ec16:	6078      	str	r0, [r7, #4]
 801ec18:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 801ec1a:	687b      	ldr	r3, [r7, #4]
 801ec1c:	683a      	ldr	r2, [r7, #0]
 801ec1e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 801ec22:	bf00      	nop
 801ec24:	370c      	adds	r7, #12
 801ec26:	46bd      	mov	sp, r7
 801ec28:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ec2c:	4770      	bx	lr

0801ec2e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 801ec2e:	b580      	push	{r7, lr}
 801ec30:	b082      	sub	sp, #8
 801ec32:	af00      	add	r7, sp, #0
 801ec34:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 801ec36:	687b      	ldr	r3, [r7, #4]
 801ec38:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801ec3c:	1c5a      	adds	r2, r3, #1
 801ec3e:	687b      	ldr	r3, [r7, #4]
 801ec40:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 801ec44:	6878      	ldr	r0, [r7, #4]
 801ec46:	f000 f804 	bl	801ec52 <USBH_HandleSof>
}
 801ec4a:	bf00      	nop
 801ec4c:	3708      	adds	r7, #8
 801ec4e:	46bd      	mov	sp, r7
 801ec50:	bd80      	pop	{r7, pc}

0801ec52 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 801ec52:	b580      	push	{r7, lr}
 801ec54:	b082      	sub	sp, #8
 801ec56:	af00      	add	r7, sp, #0
 801ec58:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 801ec5a:	687b      	ldr	r3, [r7, #4]
 801ec5c:	781b      	ldrb	r3, [r3, #0]
 801ec5e:	b2db      	uxtb	r3, r3
 801ec60:	2b0b      	cmp	r3, #11
 801ec62:	d10a      	bne.n	801ec7a <USBH_HandleSof+0x28>
 801ec64:	687b      	ldr	r3, [r7, #4]
 801ec66:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801ec6a:	2b00      	cmp	r3, #0
 801ec6c:	d005      	beq.n	801ec7a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 801ec6e:	687b      	ldr	r3, [r7, #4]
 801ec70:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801ec74:	699b      	ldr	r3, [r3, #24]
 801ec76:	6878      	ldr	r0, [r7, #4]
 801ec78:	4798      	blx	r3
  }
}
 801ec7a:	bf00      	nop
 801ec7c:	3708      	adds	r7, #8
 801ec7e:	46bd      	mov	sp, r7
 801ec80:	bd80      	pop	{r7, pc}

0801ec82 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 801ec82:	b480      	push	{r7}
 801ec84:	b083      	sub	sp, #12
 801ec86:	af00      	add	r7, sp, #0
 801ec88:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 801ec8a:	687b      	ldr	r3, [r7, #4]
 801ec8c:	2201      	movs	r2, #1
 801ec8e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 801ec92:	bf00      	nop
}
 801ec94:	370c      	adds	r7, #12
 801ec96:	46bd      	mov	sp, r7
 801ec98:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ec9c:	4770      	bx	lr

0801ec9e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 801ec9e:	b480      	push	{r7}
 801eca0:	b083      	sub	sp, #12
 801eca2:	af00      	add	r7, sp, #0
 801eca4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 801eca6:	687b      	ldr	r3, [r7, #4]
 801eca8:	2200      	movs	r2, #0
 801ecaa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 801ecae:	bf00      	nop
}
 801ecb0:	370c      	adds	r7, #12
 801ecb2:	46bd      	mov	sp, r7
 801ecb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ecb8:	4770      	bx	lr

0801ecba <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 801ecba:	b480      	push	{r7}
 801ecbc:	b083      	sub	sp, #12
 801ecbe:	af00      	add	r7, sp, #0
 801ecc0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 801ecc2:	687b      	ldr	r3, [r7, #4]
 801ecc4:	2201      	movs	r2, #1
 801ecc6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 801ecca:	687b      	ldr	r3, [r7, #4]
 801eccc:	2200      	movs	r2, #0
 801ecce:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 801ecd2:	687b      	ldr	r3, [r7, #4]
 801ecd4:	2200      	movs	r2, #0
 801ecd6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 801ecda:	2300      	movs	r3, #0
}
 801ecdc:	4618      	mov	r0, r3
 801ecde:	370c      	adds	r7, #12
 801ece0:	46bd      	mov	sp, r7
 801ece2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ece6:	4770      	bx	lr

0801ece8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 801ece8:	b580      	push	{r7, lr}
 801ecea:	b082      	sub	sp, #8
 801ecec:	af00      	add	r7, sp, #0
 801ecee:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 801ecf0:	687b      	ldr	r3, [r7, #4]
 801ecf2:	2201      	movs	r2, #1
 801ecf4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 801ecf8:	687b      	ldr	r3, [r7, #4]
 801ecfa:	2200      	movs	r2, #0
 801ecfc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 801ed00:	687b      	ldr	r3, [r7, #4]
 801ed02:	2200      	movs	r2, #0
 801ed04:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 801ed08:	6878      	ldr	r0, [r7, #4]
 801ed0a:	f000 fc7c 	bl	801f606 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 801ed0e:	687b      	ldr	r3, [r7, #4]
 801ed10:	791b      	ldrb	r3, [r3, #4]
 801ed12:	4619      	mov	r1, r3
 801ed14:	6878      	ldr	r0, [r7, #4]
 801ed16:	f000 fad3 	bl	801f2c0 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 801ed1a:	687b      	ldr	r3, [r7, #4]
 801ed1c:	795b      	ldrb	r3, [r3, #5]
 801ed1e:	4619      	mov	r1, r3
 801ed20:	6878      	ldr	r0, [r7, #4]
 801ed22:	f000 facd 	bl	801f2c0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 801ed26:	2300      	movs	r3, #0
}
 801ed28:	4618      	mov	r0, r3
 801ed2a:	3708      	adds	r7, #8
 801ed2c:	46bd      	mov	sp, r7
 801ed2e:	bd80      	pop	{r7, pc}

0801ed30 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 801ed30:	b580      	push	{r7, lr}
 801ed32:	b082      	sub	sp, #8
 801ed34:	af00      	add	r7, sp, #0
 801ed36:	6078      	str	r0, [r7, #4]
 801ed38:	460b      	mov	r3, r1
 801ed3a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 801ed3c:	687b      	ldr	r3, [r7, #4]
 801ed3e:	789b      	ldrb	r3, [r3, #2]
 801ed40:	2b01      	cmp	r3, #1
 801ed42:	d10f      	bne.n	801ed64 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 801ed44:	687b      	ldr	r3, [r7, #4]
 801ed46:	2202      	movs	r2, #2
 801ed48:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 801ed4a:	687b      	ldr	r3, [r7, #4]
 801ed4c:	2201      	movs	r2, #1
 801ed4e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 801ed50:	687b      	ldr	r3, [r7, #4]
 801ed52:	2200      	movs	r2, #0
 801ed54:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 801ed56:	78fb      	ldrb	r3, [r7, #3]
 801ed58:	b29a      	uxth	r2, r3
 801ed5a:	687b      	ldr	r3, [r7, #4]
 801ed5c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 801ed5e:	687b      	ldr	r3, [r7, #4]
 801ed60:	2200      	movs	r2, #0
 801ed62:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 801ed64:	2200      	movs	r2, #0
 801ed66:	2100      	movs	r1, #0
 801ed68:	6878      	ldr	r0, [r7, #4]
 801ed6a:	f000 f805 	bl	801ed78 <USBH_CtlReq>
 801ed6e:	4603      	mov	r3, r0
}
 801ed70:	4618      	mov	r0, r3
 801ed72:	3708      	adds	r7, #8
 801ed74:	46bd      	mov	sp, r7
 801ed76:	bd80      	pop	{r7, pc}

0801ed78 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 801ed78:	b580      	push	{r7, lr}
 801ed7a:	b086      	sub	sp, #24
 801ed7c:	af00      	add	r7, sp, #0
 801ed7e:	60f8      	str	r0, [r7, #12]
 801ed80:	60b9      	str	r1, [r7, #8]
 801ed82:	4613      	mov	r3, r2
 801ed84:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 801ed86:	2301      	movs	r3, #1
 801ed88:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 801ed8a:	68fb      	ldr	r3, [r7, #12]
 801ed8c:	789b      	ldrb	r3, [r3, #2]
 801ed8e:	2b01      	cmp	r3, #1
 801ed90:	d002      	beq.n	801ed98 <USBH_CtlReq+0x20>
 801ed92:	2b02      	cmp	r3, #2
 801ed94:	d00f      	beq.n	801edb6 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 801ed96:	e027      	b.n	801ede8 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 801ed98:	68fb      	ldr	r3, [r7, #12]
 801ed9a:	68ba      	ldr	r2, [r7, #8]
 801ed9c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 801ed9e:	68fb      	ldr	r3, [r7, #12]
 801eda0:	88fa      	ldrh	r2, [r7, #6]
 801eda2:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 801eda4:	68fb      	ldr	r3, [r7, #12]
 801eda6:	2201      	movs	r2, #1
 801eda8:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 801edaa:	68fb      	ldr	r3, [r7, #12]
 801edac:	2202      	movs	r2, #2
 801edae:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 801edb0:	2301      	movs	r3, #1
 801edb2:	75fb      	strb	r3, [r7, #23]
      break;
 801edb4:	e018      	b.n	801ede8 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 801edb6:	68f8      	ldr	r0, [r7, #12]
 801edb8:	f000 f81c 	bl	801edf4 <USBH_HandleControl>
 801edbc:	4603      	mov	r3, r0
 801edbe:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 801edc0:	7dfb      	ldrb	r3, [r7, #23]
 801edc2:	2b00      	cmp	r3, #0
 801edc4:	d002      	beq.n	801edcc <USBH_CtlReq+0x54>
 801edc6:	7dfb      	ldrb	r3, [r7, #23]
 801edc8:	2b03      	cmp	r3, #3
 801edca:	d106      	bne.n	801edda <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 801edcc:	68fb      	ldr	r3, [r7, #12]
 801edce:	2201      	movs	r2, #1
 801edd0:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 801edd2:	68fb      	ldr	r3, [r7, #12]
 801edd4:	2200      	movs	r2, #0
 801edd6:	761a      	strb	r2, [r3, #24]
      break;
 801edd8:	e005      	b.n	801ede6 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 801edda:	7dfb      	ldrb	r3, [r7, #23]
 801eddc:	2b02      	cmp	r3, #2
 801edde:	d102      	bne.n	801ede6 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 801ede0:	68fb      	ldr	r3, [r7, #12]
 801ede2:	2201      	movs	r2, #1
 801ede4:	709a      	strb	r2, [r3, #2]
      break;
 801ede6:	bf00      	nop
  }
  return status;
 801ede8:	7dfb      	ldrb	r3, [r7, #23]
}
 801edea:	4618      	mov	r0, r3
 801edec:	3718      	adds	r7, #24
 801edee:	46bd      	mov	sp, r7
 801edf0:	bd80      	pop	{r7, pc}
	...

0801edf4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 801edf4:	b580      	push	{r7, lr}
 801edf6:	b086      	sub	sp, #24
 801edf8:	af02      	add	r7, sp, #8
 801edfa:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 801edfc:	2301      	movs	r3, #1
 801edfe:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 801ee00:	2300      	movs	r3, #0
 801ee02:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 801ee04:	687b      	ldr	r3, [r7, #4]
 801ee06:	7e1b      	ldrb	r3, [r3, #24]
 801ee08:	3b01      	subs	r3, #1
 801ee0a:	2b0a      	cmp	r3, #10
 801ee0c:	f200 8158 	bhi.w	801f0c0 <USBH_HandleControl+0x2cc>
 801ee10:	a201      	add	r2, pc, #4	; (adr r2, 801ee18 <USBH_HandleControl+0x24>)
 801ee12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ee16:	bf00      	nop
 801ee18:	0801ee45 	.word	0x0801ee45
 801ee1c:	0801ee5f 	.word	0x0801ee5f
 801ee20:	0801eec9 	.word	0x0801eec9
 801ee24:	0801eeef 	.word	0x0801eeef
 801ee28:	0801ef27 	.word	0x0801ef27
 801ee2c:	0801ef53 	.word	0x0801ef53
 801ee30:	0801efa5 	.word	0x0801efa5
 801ee34:	0801efc7 	.word	0x0801efc7
 801ee38:	0801f003 	.word	0x0801f003
 801ee3c:	0801f02b 	.word	0x0801f02b
 801ee40:	0801f069 	.word	0x0801f069
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 801ee44:	687b      	ldr	r3, [r7, #4]
 801ee46:	f103 0110 	add.w	r1, r3, #16
 801ee4a:	687b      	ldr	r3, [r7, #4]
 801ee4c:	795b      	ldrb	r3, [r3, #5]
 801ee4e:	461a      	mov	r2, r3
 801ee50:	6878      	ldr	r0, [r7, #4]
 801ee52:	f000 f945 	bl	801f0e0 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 801ee56:	687b      	ldr	r3, [r7, #4]
 801ee58:	2202      	movs	r2, #2
 801ee5a:	761a      	strb	r2, [r3, #24]
      break;
 801ee5c:	e13b      	b.n	801f0d6 <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 801ee5e:	687b      	ldr	r3, [r7, #4]
 801ee60:	795b      	ldrb	r3, [r3, #5]
 801ee62:	4619      	mov	r1, r3
 801ee64:	6878      	ldr	r0, [r7, #4]
 801ee66:	f000 fc7b 	bl	801f760 <USBH_LL_GetURBState>
 801ee6a:	4603      	mov	r3, r0
 801ee6c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 801ee6e:	7bbb      	ldrb	r3, [r7, #14]
 801ee70:	2b01      	cmp	r3, #1
 801ee72:	d11e      	bne.n	801eeb2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 801ee74:	687b      	ldr	r3, [r7, #4]
 801ee76:	7c1b      	ldrb	r3, [r3, #16]
 801ee78:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801ee7c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 801ee7e:	687b      	ldr	r3, [r7, #4]
 801ee80:	8adb      	ldrh	r3, [r3, #22]
 801ee82:	2b00      	cmp	r3, #0
 801ee84:	d00a      	beq.n	801ee9c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 801ee86:	7b7b      	ldrb	r3, [r7, #13]
 801ee88:	2b80      	cmp	r3, #128	; 0x80
 801ee8a:	d103      	bne.n	801ee94 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 801ee8c:	687b      	ldr	r3, [r7, #4]
 801ee8e:	2203      	movs	r2, #3
 801ee90:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 801ee92:	e117      	b.n	801f0c4 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 801ee94:	687b      	ldr	r3, [r7, #4]
 801ee96:	2205      	movs	r2, #5
 801ee98:	761a      	strb	r2, [r3, #24]
      break;
 801ee9a:	e113      	b.n	801f0c4 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 801ee9c:	7b7b      	ldrb	r3, [r7, #13]
 801ee9e:	2b80      	cmp	r3, #128	; 0x80
 801eea0:	d103      	bne.n	801eeaa <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 801eea2:	687b      	ldr	r3, [r7, #4]
 801eea4:	2209      	movs	r2, #9
 801eea6:	761a      	strb	r2, [r3, #24]
      break;
 801eea8:	e10c      	b.n	801f0c4 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 801eeaa:	687b      	ldr	r3, [r7, #4]
 801eeac:	2207      	movs	r2, #7
 801eeae:	761a      	strb	r2, [r3, #24]
      break;
 801eeb0:	e108      	b.n	801f0c4 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 801eeb2:	7bbb      	ldrb	r3, [r7, #14]
 801eeb4:	2b04      	cmp	r3, #4
 801eeb6:	d003      	beq.n	801eec0 <USBH_HandleControl+0xcc>
 801eeb8:	7bbb      	ldrb	r3, [r7, #14]
 801eeba:	2b02      	cmp	r3, #2
 801eebc:	f040 8102 	bne.w	801f0c4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 801eec0:	687b      	ldr	r3, [r7, #4]
 801eec2:	220b      	movs	r2, #11
 801eec4:	761a      	strb	r2, [r3, #24]
      break;
 801eec6:	e0fd      	b.n	801f0c4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 801eec8:	687b      	ldr	r3, [r7, #4]
 801eeca:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801eece:	b29a      	uxth	r2, r3
 801eed0:	687b      	ldr	r3, [r7, #4]
 801eed2:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 801eed4:	687b      	ldr	r3, [r7, #4]
 801eed6:	6899      	ldr	r1, [r3, #8]
 801eed8:	687b      	ldr	r3, [r7, #4]
 801eeda:	899a      	ldrh	r2, [r3, #12]
 801eedc:	687b      	ldr	r3, [r7, #4]
 801eede:	791b      	ldrb	r3, [r3, #4]
 801eee0:	6878      	ldr	r0, [r7, #4]
 801eee2:	f000 f93c 	bl	801f15e <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 801eee6:	687b      	ldr	r3, [r7, #4]
 801eee8:	2204      	movs	r2, #4
 801eeea:	761a      	strb	r2, [r3, #24]
      break;
 801eeec:	e0f3      	b.n	801f0d6 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 801eeee:	687b      	ldr	r3, [r7, #4]
 801eef0:	791b      	ldrb	r3, [r3, #4]
 801eef2:	4619      	mov	r1, r3
 801eef4:	6878      	ldr	r0, [r7, #4]
 801eef6:	f000 fc33 	bl	801f760 <USBH_LL_GetURBState>
 801eefa:	4603      	mov	r3, r0
 801eefc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 801eefe:	7bbb      	ldrb	r3, [r7, #14]
 801ef00:	2b01      	cmp	r3, #1
 801ef02:	d102      	bne.n	801ef0a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 801ef04:	687b      	ldr	r3, [r7, #4]
 801ef06:	2209      	movs	r2, #9
 801ef08:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 801ef0a:	7bbb      	ldrb	r3, [r7, #14]
 801ef0c:	2b05      	cmp	r3, #5
 801ef0e:	d102      	bne.n	801ef16 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 801ef10:	2303      	movs	r3, #3
 801ef12:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 801ef14:	e0d8      	b.n	801f0c8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 801ef16:	7bbb      	ldrb	r3, [r7, #14]
 801ef18:	2b04      	cmp	r3, #4
 801ef1a:	f040 80d5 	bne.w	801f0c8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 801ef1e:	687b      	ldr	r3, [r7, #4]
 801ef20:	220b      	movs	r2, #11
 801ef22:	761a      	strb	r2, [r3, #24]
      break;
 801ef24:	e0d0      	b.n	801f0c8 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 801ef26:	687b      	ldr	r3, [r7, #4]
 801ef28:	6899      	ldr	r1, [r3, #8]
 801ef2a:	687b      	ldr	r3, [r7, #4]
 801ef2c:	899a      	ldrh	r2, [r3, #12]
 801ef2e:	687b      	ldr	r3, [r7, #4]
 801ef30:	7958      	ldrb	r0, [r3, #5]
 801ef32:	2301      	movs	r3, #1
 801ef34:	9300      	str	r3, [sp, #0]
 801ef36:	4603      	mov	r3, r0
 801ef38:	6878      	ldr	r0, [r7, #4]
 801ef3a:	f000 f8eb 	bl	801f114 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 801ef3e:	687b      	ldr	r3, [r7, #4]
 801ef40:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801ef44:	b29a      	uxth	r2, r3
 801ef46:	687b      	ldr	r3, [r7, #4]
 801ef48:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 801ef4a:	687b      	ldr	r3, [r7, #4]
 801ef4c:	2206      	movs	r2, #6
 801ef4e:	761a      	strb	r2, [r3, #24]
      break;
 801ef50:	e0c1      	b.n	801f0d6 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 801ef52:	687b      	ldr	r3, [r7, #4]
 801ef54:	795b      	ldrb	r3, [r3, #5]
 801ef56:	4619      	mov	r1, r3
 801ef58:	6878      	ldr	r0, [r7, #4]
 801ef5a:	f000 fc01 	bl	801f760 <USBH_LL_GetURBState>
 801ef5e:	4603      	mov	r3, r0
 801ef60:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 801ef62:	7bbb      	ldrb	r3, [r7, #14]
 801ef64:	2b01      	cmp	r3, #1
 801ef66:	d103      	bne.n	801ef70 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 801ef68:	687b      	ldr	r3, [r7, #4]
 801ef6a:	2207      	movs	r2, #7
 801ef6c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 801ef6e:	e0ad      	b.n	801f0cc <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 801ef70:	7bbb      	ldrb	r3, [r7, #14]
 801ef72:	2b05      	cmp	r3, #5
 801ef74:	d105      	bne.n	801ef82 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 801ef76:	687b      	ldr	r3, [r7, #4]
 801ef78:	220c      	movs	r2, #12
 801ef7a:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 801ef7c:	2303      	movs	r3, #3
 801ef7e:	73fb      	strb	r3, [r7, #15]
      break;
 801ef80:	e0a4      	b.n	801f0cc <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 801ef82:	7bbb      	ldrb	r3, [r7, #14]
 801ef84:	2b02      	cmp	r3, #2
 801ef86:	d103      	bne.n	801ef90 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 801ef88:	687b      	ldr	r3, [r7, #4]
 801ef8a:	2205      	movs	r2, #5
 801ef8c:	761a      	strb	r2, [r3, #24]
      break;
 801ef8e:	e09d      	b.n	801f0cc <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 801ef90:	7bbb      	ldrb	r3, [r7, #14]
 801ef92:	2b04      	cmp	r3, #4
 801ef94:	f040 809a 	bne.w	801f0cc <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 801ef98:	687b      	ldr	r3, [r7, #4]
 801ef9a:	220b      	movs	r2, #11
 801ef9c:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 801ef9e:	2302      	movs	r3, #2
 801efa0:	73fb      	strb	r3, [r7, #15]
      break;
 801efa2:	e093      	b.n	801f0cc <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 801efa4:	687b      	ldr	r3, [r7, #4]
 801efa6:	791b      	ldrb	r3, [r3, #4]
 801efa8:	2200      	movs	r2, #0
 801efaa:	2100      	movs	r1, #0
 801efac:	6878      	ldr	r0, [r7, #4]
 801efae:	f000 f8d6 	bl	801f15e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 801efb2:	687b      	ldr	r3, [r7, #4]
 801efb4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801efb8:	b29a      	uxth	r2, r3
 801efba:	687b      	ldr	r3, [r7, #4]
 801efbc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 801efbe:	687b      	ldr	r3, [r7, #4]
 801efc0:	2208      	movs	r2, #8
 801efc2:	761a      	strb	r2, [r3, #24]

      break;
 801efc4:	e087      	b.n	801f0d6 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 801efc6:	687b      	ldr	r3, [r7, #4]
 801efc8:	791b      	ldrb	r3, [r3, #4]
 801efca:	4619      	mov	r1, r3
 801efcc:	6878      	ldr	r0, [r7, #4]
 801efce:	f000 fbc7 	bl	801f760 <USBH_LL_GetURBState>
 801efd2:	4603      	mov	r3, r0
 801efd4:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 801efd6:	7bbb      	ldrb	r3, [r7, #14]
 801efd8:	2b01      	cmp	r3, #1
 801efda:	d105      	bne.n	801efe8 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 801efdc:	687b      	ldr	r3, [r7, #4]
 801efde:	220d      	movs	r2, #13
 801efe0:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 801efe2:	2300      	movs	r3, #0
 801efe4:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 801efe6:	e073      	b.n	801f0d0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 801efe8:	7bbb      	ldrb	r3, [r7, #14]
 801efea:	2b04      	cmp	r3, #4
 801efec:	d103      	bne.n	801eff6 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 801efee:	687b      	ldr	r3, [r7, #4]
 801eff0:	220b      	movs	r2, #11
 801eff2:	761a      	strb	r2, [r3, #24]
      break;
 801eff4:	e06c      	b.n	801f0d0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 801eff6:	7bbb      	ldrb	r3, [r7, #14]
 801eff8:	2b05      	cmp	r3, #5
 801effa:	d169      	bne.n	801f0d0 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 801effc:	2303      	movs	r3, #3
 801effe:	73fb      	strb	r3, [r7, #15]
      break;
 801f000:	e066      	b.n	801f0d0 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 801f002:	687b      	ldr	r3, [r7, #4]
 801f004:	795a      	ldrb	r2, [r3, #5]
 801f006:	2301      	movs	r3, #1
 801f008:	9300      	str	r3, [sp, #0]
 801f00a:	4613      	mov	r3, r2
 801f00c:	2200      	movs	r2, #0
 801f00e:	2100      	movs	r1, #0
 801f010:	6878      	ldr	r0, [r7, #4]
 801f012:	f000 f87f 	bl	801f114 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 801f016:	687b      	ldr	r3, [r7, #4]
 801f018:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801f01c:	b29a      	uxth	r2, r3
 801f01e:	687b      	ldr	r3, [r7, #4]
 801f020:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 801f022:	687b      	ldr	r3, [r7, #4]
 801f024:	220a      	movs	r2, #10
 801f026:	761a      	strb	r2, [r3, #24]
      break;
 801f028:	e055      	b.n	801f0d6 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 801f02a:	687b      	ldr	r3, [r7, #4]
 801f02c:	795b      	ldrb	r3, [r3, #5]
 801f02e:	4619      	mov	r1, r3
 801f030:	6878      	ldr	r0, [r7, #4]
 801f032:	f000 fb95 	bl	801f760 <USBH_LL_GetURBState>
 801f036:	4603      	mov	r3, r0
 801f038:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 801f03a:	7bbb      	ldrb	r3, [r7, #14]
 801f03c:	2b01      	cmp	r3, #1
 801f03e:	d105      	bne.n	801f04c <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 801f040:	2300      	movs	r3, #0
 801f042:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 801f044:	687b      	ldr	r3, [r7, #4]
 801f046:	220d      	movs	r2, #13
 801f048:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 801f04a:	e043      	b.n	801f0d4 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 801f04c:	7bbb      	ldrb	r3, [r7, #14]
 801f04e:	2b02      	cmp	r3, #2
 801f050:	d103      	bne.n	801f05a <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 801f052:	687b      	ldr	r3, [r7, #4]
 801f054:	2209      	movs	r2, #9
 801f056:	761a      	strb	r2, [r3, #24]
      break;
 801f058:	e03c      	b.n	801f0d4 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 801f05a:	7bbb      	ldrb	r3, [r7, #14]
 801f05c:	2b04      	cmp	r3, #4
 801f05e:	d139      	bne.n	801f0d4 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 801f060:	687b      	ldr	r3, [r7, #4]
 801f062:	220b      	movs	r2, #11
 801f064:	761a      	strb	r2, [r3, #24]
      break;
 801f066:	e035      	b.n	801f0d4 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 801f068:	687b      	ldr	r3, [r7, #4]
 801f06a:	7e5b      	ldrb	r3, [r3, #25]
 801f06c:	3301      	adds	r3, #1
 801f06e:	b2da      	uxtb	r2, r3
 801f070:	687b      	ldr	r3, [r7, #4]
 801f072:	765a      	strb	r2, [r3, #25]
 801f074:	687b      	ldr	r3, [r7, #4]
 801f076:	7e5b      	ldrb	r3, [r3, #25]
 801f078:	2b02      	cmp	r3, #2
 801f07a:	d806      	bhi.n	801f08a <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 801f07c:	687b      	ldr	r3, [r7, #4]
 801f07e:	2201      	movs	r2, #1
 801f080:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 801f082:	687b      	ldr	r3, [r7, #4]
 801f084:	2201      	movs	r2, #1
 801f086:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 801f088:	e025      	b.n	801f0d6 <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 801f08a:	687b      	ldr	r3, [r7, #4]
 801f08c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 801f090:	2106      	movs	r1, #6
 801f092:	6878      	ldr	r0, [r7, #4]
 801f094:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 801f096:	687b      	ldr	r3, [r7, #4]
 801f098:	2200      	movs	r2, #0
 801f09a:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 801f09c:	687b      	ldr	r3, [r7, #4]
 801f09e:	795b      	ldrb	r3, [r3, #5]
 801f0a0:	4619      	mov	r1, r3
 801f0a2:	6878      	ldr	r0, [r7, #4]
 801f0a4:	f000 f90c 	bl	801f2c0 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 801f0a8:	687b      	ldr	r3, [r7, #4]
 801f0aa:	791b      	ldrb	r3, [r3, #4]
 801f0ac:	4619      	mov	r1, r3
 801f0ae:	6878      	ldr	r0, [r7, #4]
 801f0b0:	f000 f906 	bl	801f2c0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 801f0b4:	687b      	ldr	r3, [r7, #4]
 801f0b6:	2200      	movs	r2, #0
 801f0b8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 801f0ba:	2302      	movs	r3, #2
 801f0bc:	73fb      	strb	r3, [r7, #15]
      break;
 801f0be:	e00a      	b.n	801f0d6 <USBH_HandleControl+0x2e2>

    default:
      break;
 801f0c0:	bf00      	nop
 801f0c2:	e008      	b.n	801f0d6 <USBH_HandleControl+0x2e2>
      break;
 801f0c4:	bf00      	nop
 801f0c6:	e006      	b.n	801f0d6 <USBH_HandleControl+0x2e2>
      break;
 801f0c8:	bf00      	nop
 801f0ca:	e004      	b.n	801f0d6 <USBH_HandleControl+0x2e2>
      break;
 801f0cc:	bf00      	nop
 801f0ce:	e002      	b.n	801f0d6 <USBH_HandleControl+0x2e2>
      break;
 801f0d0:	bf00      	nop
 801f0d2:	e000      	b.n	801f0d6 <USBH_HandleControl+0x2e2>
      break;
 801f0d4:	bf00      	nop
  }

  return status;
 801f0d6:	7bfb      	ldrb	r3, [r7, #15]
}
 801f0d8:	4618      	mov	r0, r3
 801f0da:	3710      	adds	r7, #16
 801f0dc:	46bd      	mov	sp, r7
 801f0de:	bd80      	pop	{r7, pc}

0801f0e0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 801f0e0:	b580      	push	{r7, lr}
 801f0e2:	b088      	sub	sp, #32
 801f0e4:	af04      	add	r7, sp, #16
 801f0e6:	60f8      	str	r0, [r7, #12]
 801f0e8:	60b9      	str	r1, [r7, #8]
 801f0ea:	4613      	mov	r3, r2
 801f0ec:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 801f0ee:	79f9      	ldrb	r1, [r7, #7]
 801f0f0:	2300      	movs	r3, #0
 801f0f2:	9303      	str	r3, [sp, #12]
 801f0f4:	2308      	movs	r3, #8
 801f0f6:	9302      	str	r3, [sp, #8]
 801f0f8:	68bb      	ldr	r3, [r7, #8]
 801f0fa:	9301      	str	r3, [sp, #4]
 801f0fc:	2300      	movs	r3, #0
 801f0fe:	9300      	str	r3, [sp, #0]
 801f100:	2300      	movs	r3, #0
 801f102:	2200      	movs	r2, #0
 801f104:	68f8      	ldr	r0, [r7, #12]
 801f106:	f000 fafa 	bl	801f6fe <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 801f10a:	2300      	movs	r3, #0
}
 801f10c:	4618      	mov	r0, r3
 801f10e:	3710      	adds	r7, #16
 801f110:	46bd      	mov	sp, r7
 801f112:	bd80      	pop	{r7, pc}

0801f114 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 801f114:	b580      	push	{r7, lr}
 801f116:	b088      	sub	sp, #32
 801f118:	af04      	add	r7, sp, #16
 801f11a:	60f8      	str	r0, [r7, #12]
 801f11c:	60b9      	str	r1, [r7, #8]
 801f11e:	4611      	mov	r1, r2
 801f120:	461a      	mov	r2, r3
 801f122:	460b      	mov	r3, r1
 801f124:	80fb      	strh	r3, [r7, #6]
 801f126:	4613      	mov	r3, r2
 801f128:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 801f12a:	68fb      	ldr	r3, [r7, #12]
 801f12c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 801f130:	2b00      	cmp	r3, #0
 801f132:	d001      	beq.n	801f138 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 801f134:	2300      	movs	r3, #0
 801f136:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 801f138:	7979      	ldrb	r1, [r7, #5]
 801f13a:	7e3b      	ldrb	r3, [r7, #24]
 801f13c:	9303      	str	r3, [sp, #12]
 801f13e:	88fb      	ldrh	r3, [r7, #6]
 801f140:	9302      	str	r3, [sp, #8]
 801f142:	68bb      	ldr	r3, [r7, #8]
 801f144:	9301      	str	r3, [sp, #4]
 801f146:	2301      	movs	r3, #1
 801f148:	9300      	str	r3, [sp, #0]
 801f14a:	2300      	movs	r3, #0
 801f14c:	2200      	movs	r2, #0
 801f14e:	68f8      	ldr	r0, [r7, #12]
 801f150:	f000 fad5 	bl	801f6fe <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 801f154:	2300      	movs	r3, #0
}
 801f156:	4618      	mov	r0, r3
 801f158:	3710      	adds	r7, #16
 801f15a:	46bd      	mov	sp, r7
 801f15c:	bd80      	pop	{r7, pc}

0801f15e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 801f15e:	b580      	push	{r7, lr}
 801f160:	b088      	sub	sp, #32
 801f162:	af04      	add	r7, sp, #16
 801f164:	60f8      	str	r0, [r7, #12]
 801f166:	60b9      	str	r1, [r7, #8]
 801f168:	4611      	mov	r1, r2
 801f16a:	461a      	mov	r2, r3
 801f16c:	460b      	mov	r3, r1
 801f16e:	80fb      	strh	r3, [r7, #6]
 801f170:	4613      	mov	r3, r2
 801f172:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 801f174:	7979      	ldrb	r1, [r7, #5]
 801f176:	2300      	movs	r3, #0
 801f178:	9303      	str	r3, [sp, #12]
 801f17a:	88fb      	ldrh	r3, [r7, #6]
 801f17c:	9302      	str	r3, [sp, #8]
 801f17e:	68bb      	ldr	r3, [r7, #8]
 801f180:	9301      	str	r3, [sp, #4]
 801f182:	2301      	movs	r3, #1
 801f184:	9300      	str	r3, [sp, #0]
 801f186:	2300      	movs	r3, #0
 801f188:	2201      	movs	r2, #1
 801f18a:	68f8      	ldr	r0, [r7, #12]
 801f18c:	f000 fab7 	bl	801f6fe <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 801f190:	2300      	movs	r3, #0

}
 801f192:	4618      	mov	r0, r3
 801f194:	3710      	adds	r7, #16
 801f196:	46bd      	mov	sp, r7
 801f198:	bd80      	pop	{r7, pc}

0801f19a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 801f19a:	b580      	push	{r7, lr}
 801f19c:	b088      	sub	sp, #32
 801f19e:	af04      	add	r7, sp, #16
 801f1a0:	60f8      	str	r0, [r7, #12]
 801f1a2:	60b9      	str	r1, [r7, #8]
 801f1a4:	4611      	mov	r1, r2
 801f1a6:	461a      	mov	r2, r3
 801f1a8:	460b      	mov	r3, r1
 801f1aa:	80fb      	strh	r3, [r7, #6]
 801f1ac:	4613      	mov	r3, r2
 801f1ae:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 801f1b0:	68fb      	ldr	r3, [r7, #12]
 801f1b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 801f1b6:	2b00      	cmp	r3, #0
 801f1b8:	d001      	beq.n	801f1be <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 801f1ba:	2300      	movs	r3, #0
 801f1bc:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 801f1be:	7979      	ldrb	r1, [r7, #5]
 801f1c0:	7e3b      	ldrb	r3, [r7, #24]
 801f1c2:	9303      	str	r3, [sp, #12]
 801f1c4:	88fb      	ldrh	r3, [r7, #6]
 801f1c6:	9302      	str	r3, [sp, #8]
 801f1c8:	68bb      	ldr	r3, [r7, #8]
 801f1ca:	9301      	str	r3, [sp, #4]
 801f1cc:	2301      	movs	r3, #1
 801f1ce:	9300      	str	r3, [sp, #0]
 801f1d0:	2302      	movs	r3, #2
 801f1d2:	2200      	movs	r2, #0
 801f1d4:	68f8      	ldr	r0, [r7, #12]
 801f1d6:	f000 fa92 	bl	801f6fe <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 801f1da:	2300      	movs	r3, #0
}
 801f1dc:	4618      	mov	r0, r3
 801f1de:	3710      	adds	r7, #16
 801f1e0:	46bd      	mov	sp, r7
 801f1e2:	bd80      	pop	{r7, pc}

0801f1e4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 801f1e4:	b580      	push	{r7, lr}
 801f1e6:	b088      	sub	sp, #32
 801f1e8:	af04      	add	r7, sp, #16
 801f1ea:	60f8      	str	r0, [r7, #12]
 801f1ec:	60b9      	str	r1, [r7, #8]
 801f1ee:	4611      	mov	r1, r2
 801f1f0:	461a      	mov	r2, r3
 801f1f2:	460b      	mov	r3, r1
 801f1f4:	80fb      	strh	r3, [r7, #6]
 801f1f6:	4613      	mov	r3, r2
 801f1f8:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 801f1fa:	7979      	ldrb	r1, [r7, #5]
 801f1fc:	2300      	movs	r3, #0
 801f1fe:	9303      	str	r3, [sp, #12]
 801f200:	88fb      	ldrh	r3, [r7, #6]
 801f202:	9302      	str	r3, [sp, #8]
 801f204:	68bb      	ldr	r3, [r7, #8]
 801f206:	9301      	str	r3, [sp, #4]
 801f208:	2301      	movs	r3, #1
 801f20a:	9300      	str	r3, [sp, #0]
 801f20c:	2302      	movs	r3, #2
 801f20e:	2201      	movs	r2, #1
 801f210:	68f8      	ldr	r0, [r7, #12]
 801f212:	f000 fa74 	bl	801f6fe <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 801f216:	2300      	movs	r3, #0
}
 801f218:	4618      	mov	r0, r3
 801f21a:	3710      	adds	r7, #16
 801f21c:	46bd      	mov	sp, r7
 801f21e:	bd80      	pop	{r7, pc}

0801f220 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801f220:	b580      	push	{r7, lr}
 801f222:	b086      	sub	sp, #24
 801f224:	af04      	add	r7, sp, #16
 801f226:	6078      	str	r0, [r7, #4]
 801f228:	4608      	mov	r0, r1
 801f22a:	4611      	mov	r1, r2
 801f22c:	461a      	mov	r2, r3
 801f22e:	4603      	mov	r3, r0
 801f230:	70fb      	strb	r3, [r7, #3]
 801f232:	460b      	mov	r3, r1
 801f234:	70bb      	strb	r3, [r7, #2]
 801f236:	4613      	mov	r3, r2
 801f238:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 801f23a:	7878      	ldrb	r0, [r7, #1]
 801f23c:	78ba      	ldrb	r2, [r7, #2]
 801f23e:	78f9      	ldrb	r1, [r7, #3]
 801f240:	8b3b      	ldrh	r3, [r7, #24]
 801f242:	9302      	str	r3, [sp, #8]
 801f244:	7d3b      	ldrb	r3, [r7, #20]
 801f246:	9301      	str	r3, [sp, #4]
 801f248:	7c3b      	ldrb	r3, [r7, #16]
 801f24a:	9300      	str	r3, [sp, #0]
 801f24c:	4603      	mov	r3, r0
 801f24e:	6878      	ldr	r0, [r7, #4]
 801f250:	f000 fa07 	bl	801f662 <USBH_LL_OpenPipe>

  return USBH_OK;
 801f254:	2300      	movs	r3, #0
}
 801f256:	4618      	mov	r0, r3
 801f258:	3708      	adds	r7, #8
 801f25a:	46bd      	mov	sp, r7
 801f25c:	bd80      	pop	{r7, pc}

0801f25e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 801f25e:	b580      	push	{r7, lr}
 801f260:	b082      	sub	sp, #8
 801f262:	af00      	add	r7, sp, #0
 801f264:	6078      	str	r0, [r7, #4]
 801f266:	460b      	mov	r3, r1
 801f268:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 801f26a:	78fb      	ldrb	r3, [r7, #3]
 801f26c:	4619      	mov	r1, r3
 801f26e:	6878      	ldr	r0, [r7, #4]
 801f270:	f000 fa26 	bl	801f6c0 <USBH_LL_ClosePipe>

  return USBH_OK;
 801f274:	2300      	movs	r3, #0
}
 801f276:	4618      	mov	r0, r3
 801f278:	3708      	adds	r7, #8
 801f27a:	46bd      	mov	sp, r7
 801f27c:	bd80      	pop	{r7, pc}

0801f27e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 801f27e:	b580      	push	{r7, lr}
 801f280:	b084      	sub	sp, #16
 801f282:	af00      	add	r7, sp, #0
 801f284:	6078      	str	r0, [r7, #4]
 801f286:	460b      	mov	r3, r1
 801f288:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 801f28a:	6878      	ldr	r0, [r7, #4]
 801f28c:	f000 f836 	bl	801f2fc <USBH_GetFreePipe>
 801f290:	4603      	mov	r3, r0
 801f292:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 801f294:	89fb      	ldrh	r3, [r7, #14]
 801f296:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801f29a:	4293      	cmp	r3, r2
 801f29c:	d00a      	beq.n	801f2b4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 801f29e:	78fa      	ldrb	r2, [r7, #3]
 801f2a0:	89fb      	ldrh	r3, [r7, #14]
 801f2a2:	f003 030f 	and.w	r3, r3, #15
 801f2a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801f2aa:	6879      	ldr	r1, [r7, #4]
 801f2ac:	33e0      	adds	r3, #224	; 0xe0
 801f2ae:	009b      	lsls	r3, r3, #2
 801f2b0:	440b      	add	r3, r1
 801f2b2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 801f2b4:	89fb      	ldrh	r3, [r7, #14]
 801f2b6:	b2db      	uxtb	r3, r3
}
 801f2b8:	4618      	mov	r0, r3
 801f2ba:	3710      	adds	r7, #16
 801f2bc:	46bd      	mov	sp, r7
 801f2be:	bd80      	pop	{r7, pc}

0801f2c0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 801f2c0:	b480      	push	{r7}
 801f2c2:	b083      	sub	sp, #12
 801f2c4:	af00      	add	r7, sp, #0
 801f2c6:	6078      	str	r0, [r7, #4]
 801f2c8:	460b      	mov	r3, r1
 801f2ca:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 801f2cc:	78fb      	ldrb	r3, [r7, #3]
 801f2ce:	2b0a      	cmp	r3, #10
 801f2d0:	d80d      	bhi.n	801f2ee <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 801f2d2:	78fb      	ldrb	r3, [r7, #3]
 801f2d4:	687a      	ldr	r2, [r7, #4]
 801f2d6:	33e0      	adds	r3, #224	; 0xe0
 801f2d8:	009b      	lsls	r3, r3, #2
 801f2da:	4413      	add	r3, r2
 801f2dc:	685a      	ldr	r2, [r3, #4]
 801f2de:	78fb      	ldrb	r3, [r7, #3]
 801f2e0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 801f2e4:	6879      	ldr	r1, [r7, #4]
 801f2e6:	33e0      	adds	r3, #224	; 0xe0
 801f2e8:	009b      	lsls	r3, r3, #2
 801f2ea:	440b      	add	r3, r1
 801f2ec:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 801f2ee:	2300      	movs	r3, #0
}
 801f2f0:	4618      	mov	r0, r3
 801f2f2:	370c      	adds	r7, #12
 801f2f4:	46bd      	mov	sp, r7
 801f2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f2fa:	4770      	bx	lr

0801f2fc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 801f2fc:	b480      	push	{r7}
 801f2fe:	b085      	sub	sp, #20
 801f300:	af00      	add	r7, sp, #0
 801f302:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 801f304:	2300      	movs	r3, #0
 801f306:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 801f308:	2300      	movs	r3, #0
 801f30a:	73fb      	strb	r3, [r7, #15]
 801f30c:	e00f      	b.n	801f32e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 801f30e:	7bfb      	ldrb	r3, [r7, #15]
 801f310:	687a      	ldr	r2, [r7, #4]
 801f312:	33e0      	adds	r3, #224	; 0xe0
 801f314:	009b      	lsls	r3, r3, #2
 801f316:	4413      	add	r3, r2
 801f318:	685b      	ldr	r3, [r3, #4]
 801f31a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801f31e:	2b00      	cmp	r3, #0
 801f320:	d102      	bne.n	801f328 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 801f322:	7bfb      	ldrb	r3, [r7, #15]
 801f324:	b29b      	uxth	r3, r3
 801f326:	e007      	b.n	801f338 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 801f328:	7bfb      	ldrb	r3, [r7, #15]
 801f32a:	3301      	adds	r3, #1
 801f32c:	73fb      	strb	r3, [r7, #15]
 801f32e:	7bfb      	ldrb	r3, [r7, #15]
 801f330:	2b0a      	cmp	r3, #10
 801f332:	d9ec      	bls.n	801f30e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 801f334:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 801f338:	4618      	mov	r0, r3
 801f33a:	3714      	adds	r7, #20
 801f33c:	46bd      	mov	sp, r7
 801f33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f342:	4770      	bx	lr

0801f344 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 801f344:	b580      	push	{r7, lr}
 801f346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 801f348:	2201      	movs	r2, #1
 801f34a:	490e      	ldr	r1, [pc, #56]	; (801f384 <MX_USB_HOST_Init+0x40>)
 801f34c:	480e      	ldr	r0, [pc, #56]	; (801f388 <MX_USB_HOST_Init+0x44>)
 801f34e:	f7ff fb35 	bl	801e9bc <USBH_Init>
 801f352:	4603      	mov	r3, r0
 801f354:	2b00      	cmp	r3, #0
 801f356:	d001      	beq.n	801f35c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 801f358:	f7f9 fada 	bl	8018910 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 801f35c:	490b      	ldr	r1, [pc, #44]	; (801f38c <MX_USB_HOST_Init+0x48>)
 801f35e:	480a      	ldr	r0, [pc, #40]	; (801f388 <MX_USB_HOST_Init+0x44>)
 801f360:	f7ff fbba 	bl	801ead8 <USBH_RegisterClass>
 801f364:	4603      	mov	r3, r0
 801f366:	2b00      	cmp	r3, #0
 801f368:	d001      	beq.n	801f36e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 801f36a:	f7f9 fad1 	bl	8018910 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 801f36e:	4806      	ldr	r0, [pc, #24]	; (801f388 <MX_USB_HOST_Init+0x44>)
 801f370:	f7ff fc3e 	bl	801ebf0 <USBH_Start>
 801f374:	4603      	mov	r3, r0
 801f376:	2b00      	cmp	r3, #0
 801f378:	d001      	beq.n	801f37e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 801f37a:	f7f9 fac9 	bl	8018910 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 801f37e:	bf00      	nop
 801f380:	bd80      	pop	{r7, pc}
 801f382:	bf00      	nop
 801f384:	0801f391 	.word	0x0801f391
 801f388:	200004fc 	.word	0x200004fc
 801f38c:	200002c0 	.word	0x200002c0

0801f390 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 801f390:	b480      	push	{r7}
 801f392:	b083      	sub	sp, #12
 801f394:	af00      	add	r7, sp, #0
 801f396:	6078      	str	r0, [r7, #4]
 801f398:	460b      	mov	r3, r1
 801f39a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 801f39c:	78fb      	ldrb	r3, [r7, #3]
 801f39e:	3b01      	subs	r3, #1
 801f3a0:	2b04      	cmp	r3, #4
 801f3a2:	d819      	bhi.n	801f3d8 <USBH_UserProcess+0x48>
 801f3a4:	a201      	add	r2, pc, #4	; (adr r2, 801f3ac <USBH_UserProcess+0x1c>)
 801f3a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f3aa:	bf00      	nop
 801f3ac:	0801f3d9 	.word	0x0801f3d9
 801f3b0:	0801f3c9 	.word	0x0801f3c9
 801f3b4:	0801f3d9 	.word	0x0801f3d9
 801f3b8:	0801f3d1 	.word	0x0801f3d1
 801f3bc:	0801f3c1 	.word	0x0801f3c1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 801f3c0:	4b09      	ldr	r3, [pc, #36]	; (801f3e8 <USBH_UserProcess+0x58>)
 801f3c2:	2203      	movs	r2, #3
 801f3c4:	701a      	strb	r2, [r3, #0]
  break;
 801f3c6:	e008      	b.n	801f3da <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 801f3c8:	4b07      	ldr	r3, [pc, #28]	; (801f3e8 <USBH_UserProcess+0x58>)
 801f3ca:	2202      	movs	r2, #2
 801f3cc:	701a      	strb	r2, [r3, #0]
  break;
 801f3ce:	e004      	b.n	801f3da <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 801f3d0:	4b05      	ldr	r3, [pc, #20]	; (801f3e8 <USBH_UserProcess+0x58>)
 801f3d2:	2201      	movs	r2, #1
 801f3d4:	701a      	strb	r2, [r3, #0]
  break;
 801f3d6:	e000      	b.n	801f3da <USBH_UserProcess+0x4a>

  default:
  break;
 801f3d8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 801f3da:	bf00      	nop
 801f3dc:	370c      	adds	r7, #12
 801f3de:	46bd      	mov	sp, r7
 801f3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f3e4:	4770      	bx	lr
 801f3e6:	bf00      	nop
 801f3e8:	2000036c 	.word	0x2000036c

0801f3ec <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 801f3ec:	b580      	push	{r7, lr}
 801f3ee:	b08a      	sub	sp, #40	; 0x28
 801f3f0:	af00      	add	r7, sp, #0
 801f3f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801f3f4:	f107 0314 	add.w	r3, r7, #20
 801f3f8:	2200      	movs	r2, #0
 801f3fa:	601a      	str	r2, [r3, #0]
 801f3fc:	605a      	str	r2, [r3, #4]
 801f3fe:	609a      	str	r2, [r3, #8]
 801f400:	60da      	str	r2, [r3, #12]
 801f402:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 801f404:	687b      	ldr	r3, [r7, #4]
 801f406:	681b      	ldr	r3, [r3, #0]
 801f408:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801f40c:	d147      	bne.n	801f49e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801f40e:	2300      	movs	r3, #0
 801f410:	613b      	str	r3, [r7, #16]
 801f412:	4b25      	ldr	r3, [pc, #148]	; (801f4a8 <HAL_HCD_MspInit+0xbc>)
 801f414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f416:	4a24      	ldr	r2, [pc, #144]	; (801f4a8 <HAL_HCD_MspInit+0xbc>)
 801f418:	f043 0301 	orr.w	r3, r3, #1
 801f41c:	6313      	str	r3, [r2, #48]	; 0x30
 801f41e:	4b22      	ldr	r3, [pc, #136]	; (801f4a8 <HAL_HCD_MspInit+0xbc>)
 801f420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f422:	f003 0301 	and.w	r3, r3, #1
 801f426:	613b      	str	r3, [r7, #16]
 801f428:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 801f42a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801f42e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801f430:	2300      	movs	r3, #0
 801f432:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801f434:	2300      	movs	r3, #0
 801f436:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 801f438:	f107 0314 	add.w	r3, r7, #20
 801f43c:	4619      	mov	r1, r3
 801f43e:	481b      	ldr	r0, [pc, #108]	; (801f4ac <HAL_HCD_MspInit+0xc0>)
 801f440:	f7f9 fe64 	bl	801910c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 801f444:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 801f448:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801f44a:	2302      	movs	r3, #2
 801f44c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801f44e:	2300      	movs	r3, #0
 801f450:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801f452:	2303      	movs	r3, #3
 801f454:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801f456:	230a      	movs	r3, #10
 801f458:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801f45a:	f107 0314 	add.w	r3, r7, #20
 801f45e:	4619      	mov	r1, r3
 801f460:	4812      	ldr	r0, [pc, #72]	; (801f4ac <HAL_HCD_MspInit+0xc0>)
 801f462:	f7f9 fe53 	bl	801910c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801f466:	4b10      	ldr	r3, [pc, #64]	; (801f4a8 <HAL_HCD_MspInit+0xbc>)
 801f468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f46a:	4a0f      	ldr	r2, [pc, #60]	; (801f4a8 <HAL_HCD_MspInit+0xbc>)
 801f46c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f470:	6353      	str	r3, [r2, #52]	; 0x34
 801f472:	2300      	movs	r3, #0
 801f474:	60fb      	str	r3, [r7, #12]
 801f476:	4b0c      	ldr	r3, [pc, #48]	; (801f4a8 <HAL_HCD_MspInit+0xbc>)
 801f478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f47a:	4a0b      	ldr	r2, [pc, #44]	; (801f4a8 <HAL_HCD_MspInit+0xbc>)
 801f47c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801f480:	6453      	str	r3, [r2, #68]	; 0x44
 801f482:	4b09      	ldr	r3, [pc, #36]	; (801f4a8 <HAL_HCD_MspInit+0xbc>)
 801f484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f486:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801f48a:	60fb      	str	r3, [r7, #12]
 801f48c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801f48e:	2200      	movs	r2, #0
 801f490:	2100      	movs	r1, #0
 801f492:	2043      	movs	r0, #67	; 0x43
 801f494:	f7f9 fe03 	bl	801909e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801f498:	2043      	movs	r0, #67	; 0x43
 801f49a:	f7f9 fe1c 	bl	80190d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801f49e:	bf00      	nop
 801f4a0:	3728      	adds	r7, #40	; 0x28
 801f4a2:	46bd      	mov	sp, r7
 801f4a4:	bd80      	pop	{r7, pc}
 801f4a6:	bf00      	nop
 801f4a8:	40023800 	.word	0x40023800
 801f4ac:	40020000 	.word	0x40020000

0801f4b0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 801f4b0:	b580      	push	{r7, lr}
 801f4b2:	b082      	sub	sp, #8
 801f4b4:	af00      	add	r7, sp, #0
 801f4b6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 801f4b8:	687b      	ldr	r3, [r7, #4]
 801f4ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801f4be:	4618      	mov	r0, r3
 801f4c0:	f7ff fbb5 	bl	801ec2e <USBH_LL_IncTimer>
}
 801f4c4:	bf00      	nop
 801f4c6:	3708      	adds	r7, #8
 801f4c8:	46bd      	mov	sp, r7
 801f4ca:	bd80      	pop	{r7, pc}

0801f4cc <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 801f4cc:	b580      	push	{r7, lr}
 801f4ce:	b082      	sub	sp, #8
 801f4d0:	af00      	add	r7, sp, #0
 801f4d2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 801f4d4:	687b      	ldr	r3, [r7, #4]
 801f4d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801f4da:	4618      	mov	r0, r3
 801f4dc:	f7ff fbed 	bl	801ecba <USBH_LL_Connect>
}
 801f4e0:	bf00      	nop
 801f4e2:	3708      	adds	r7, #8
 801f4e4:	46bd      	mov	sp, r7
 801f4e6:	bd80      	pop	{r7, pc}

0801f4e8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 801f4e8:	b580      	push	{r7, lr}
 801f4ea:	b082      	sub	sp, #8
 801f4ec:	af00      	add	r7, sp, #0
 801f4ee:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 801f4f0:	687b      	ldr	r3, [r7, #4]
 801f4f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801f4f6:	4618      	mov	r0, r3
 801f4f8:	f7ff fbf6 	bl	801ece8 <USBH_LL_Disconnect>
}
 801f4fc:	bf00      	nop
 801f4fe:	3708      	adds	r7, #8
 801f500:	46bd      	mov	sp, r7
 801f502:	bd80      	pop	{r7, pc}

0801f504 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 801f504:	b480      	push	{r7}
 801f506:	b083      	sub	sp, #12
 801f508:	af00      	add	r7, sp, #0
 801f50a:	6078      	str	r0, [r7, #4]
 801f50c:	460b      	mov	r3, r1
 801f50e:	70fb      	strb	r3, [r7, #3]
 801f510:	4613      	mov	r3, r2
 801f512:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 801f514:	bf00      	nop
 801f516:	370c      	adds	r7, #12
 801f518:	46bd      	mov	sp, r7
 801f51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f51e:	4770      	bx	lr

0801f520 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801f520:	b580      	push	{r7, lr}
 801f522:	b082      	sub	sp, #8
 801f524:	af00      	add	r7, sp, #0
 801f526:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 801f528:	687b      	ldr	r3, [r7, #4]
 801f52a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801f52e:	4618      	mov	r0, r3
 801f530:	f7ff fba7 	bl	801ec82 <USBH_LL_PortEnabled>
}
 801f534:	bf00      	nop
 801f536:	3708      	adds	r7, #8
 801f538:	46bd      	mov	sp, r7
 801f53a:	bd80      	pop	{r7, pc}

0801f53c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801f53c:	b580      	push	{r7, lr}
 801f53e:	b082      	sub	sp, #8
 801f540:	af00      	add	r7, sp, #0
 801f542:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 801f544:	687b      	ldr	r3, [r7, #4]
 801f546:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801f54a:	4618      	mov	r0, r3
 801f54c:	f7ff fba7 	bl	801ec9e <USBH_LL_PortDisabled>
}
 801f550:	bf00      	nop
 801f552:	3708      	adds	r7, #8
 801f554:	46bd      	mov	sp, r7
 801f556:	bd80      	pop	{r7, pc}

0801f558 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 801f558:	b580      	push	{r7, lr}
 801f55a:	b082      	sub	sp, #8
 801f55c:	af00      	add	r7, sp, #0
 801f55e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 801f560:	687b      	ldr	r3, [r7, #4]
 801f562:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 801f566:	2b01      	cmp	r3, #1
 801f568:	d12a      	bne.n	801f5c0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 801f56a:	4a18      	ldr	r2, [pc, #96]	; (801f5cc <USBH_LL_Init+0x74>)
 801f56c:	687b      	ldr	r3, [r7, #4]
 801f56e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 801f572:	687b      	ldr	r3, [r7, #4]
 801f574:	4a15      	ldr	r2, [pc, #84]	; (801f5cc <USBH_LL_Init+0x74>)
 801f576:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801f57a:	4b14      	ldr	r3, [pc, #80]	; (801f5cc <USBH_LL_Init+0x74>)
 801f57c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801f580:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 801f582:	4b12      	ldr	r3, [pc, #72]	; (801f5cc <USBH_LL_Init+0x74>)
 801f584:	2208      	movs	r2, #8
 801f586:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 801f588:	4b10      	ldr	r3, [pc, #64]	; (801f5cc <USBH_LL_Init+0x74>)
 801f58a:	2201      	movs	r2, #1
 801f58c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801f58e:	4b0f      	ldr	r3, [pc, #60]	; (801f5cc <USBH_LL_Init+0x74>)
 801f590:	2200      	movs	r2, #0
 801f592:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 801f594:	4b0d      	ldr	r3, [pc, #52]	; (801f5cc <USBH_LL_Init+0x74>)
 801f596:	2202      	movs	r2, #2
 801f598:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801f59a:	4b0c      	ldr	r3, [pc, #48]	; (801f5cc <USBH_LL_Init+0x74>)
 801f59c:	2200      	movs	r2, #0
 801f59e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 801f5a0:	480a      	ldr	r0, [pc, #40]	; (801f5cc <USBH_LL_Init+0x74>)
 801f5a2:	f7f9 ff8a 	bl	80194ba <HAL_HCD_Init>
 801f5a6:	4603      	mov	r3, r0
 801f5a8:	2b00      	cmp	r3, #0
 801f5aa:	d001      	beq.n	801f5b0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 801f5ac:	f7f9 f9b0 	bl	8018910 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 801f5b0:	4806      	ldr	r0, [pc, #24]	; (801f5cc <USBH_LL_Init+0x74>)
 801f5b2:	f7fa fb7f 	bl	8019cb4 <HAL_HCD_GetCurrentFrame>
 801f5b6:	4603      	mov	r3, r0
 801f5b8:	4619      	mov	r1, r3
 801f5ba:	6878      	ldr	r0, [r7, #4]
 801f5bc:	f7ff fb28 	bl	801ec10 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 801f5c0:	2300      	movs	r3, #0
}
 801f5c2:	4618      	mov	r0, r3
 801f5c4:	3708      	adds	r7, #8
 801f5c6:	46bd      	mov	sp, r7
 801f5c8:	bd80      	pop	{r7, pc}
 801f5ca:	bf00      	nop
 801f5cc:	200008d4 	.word	0x200008d4

0801f5d0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 801f5d0:	b580      	push	{r7, lr}
 801f5d2:	b084      	sub	sp, #16
 801f5d4:	af00      	add	r7, sp, #0
 801f5d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801f5d8:	2300      	movs	r3, #0
 801f5da:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801f5dc:	2300      	movs	r3, #0
 801f5de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 801f5e0:	687b      	ldr	r3, [r7, #4]
 801f5e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801f5e6:	4618      	mov	r0, r3
 801f5e8:	f7fa fafa 	bl	8019be0 <HAL_HCD_Start>
 801f5ec:	4603      	mov	r3, r0
 801f5ee:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801f5f0:	7bfb      	ldrb	r3, [r7, #15]
 801f5f2:	4618      	mov	r0, r3
 801f5f4:	f000 f912 	bl	801f81c <USBH_Get_USB_Status>
 801f5f8:	4603      	mov	r3, r0
 801f5fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801f5fc:	7bbb      	ldrb	r3, [r7, #14]
}
 801f5fe:	4618      	mov	r0, r3
 801f600:	3710      	adds	r7, #16
 801f602:	46bd      	mov	sp, r7
 801f604:	bd80      	pop	{r7, pc}

0801f606 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 801f606:	b580      	push	{r7, lr}
 801f608:	b084      	sub	sp, #16
 801f60a:	af00      	add	r7, sp, #0
 801f60c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801f60e:	2300      	movs	r3, #0
 801f610:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801f612:	2300      	movs	r3, #0
 801f614:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 801f616:	687b      	ldr	r3, [r7, #4]
 801f618:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801f61c:	4618      	mov	r0, r3
 801f61e:	f7fa fb02 	bl	8019c26 <HAL_HCD_Stop>
 801f622:	4603      	mov	r3, r0
 801f624:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801f626:	7bfb      	ldrb	r3, [r7, #15]
 801f628:	4618      	mov	r0, r3
 801f62a:	f000 f8f7 	bl	801f81c <USBH_Get_USB_Status>
 801f62e:	4603      	mov	r3, r0
 801f630:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801f632:	7bbb      	ldrb	r3, [r7, #14]
}
 801f634:	4618      	mov	r0, r3
 801f636:	3710      	adds	r7, #16
 801f638:	46bd      	mov	sp, r7
 801f63a:	bd80      	pop	{r7, pc}

0801f63c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801f63c:	b580      	push	{r7, lr}
 801f63e:	b082      	sub	sp, #8
 801f640:	af00      	add	r7, sp, #0
 801f642:	6078      	str	r0, [r7, #4]
 801f644:	460b      	mov	r3, r1
 801f646:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 801f648:	687b      	ldr	r3, [r7, #4]
 801f64a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801f64e:	78fa      	ldrb	r2, [r7, #3]
 801f650:	4611      	mov	r1, r2
 801f652:	4618      	mov	r0, r3
 801f654:	f7fa fb19 	bl	8019c8a <HAL_HCD_HC_GetXferCount>
 801f658:	4603      	mov	r3, r0
}
 801f65a:	4618      	mov	r0, r3
 801f65c:	3708      	adds	r7, #8
 801f65e:	46bd      	mov	sp, r7
 801f660:	bd80      	pop	{r7, pc}

0801f662 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801f662:	b590      	push	{r4, r7, lr}
 801f664:	b089      	sub	sp, #36	; 0x24
 801f666:	af04      	add	r7, sp, #16
 801f668:	6078      	str	r0, [r7, #4]
 801f66a:	4608      	mov	r0, r1
 801f66c:	4611      	mov	r1, r2
 801f66e:	461a      	mov	r2, r3
 801f670:	4603      	mov	r3, r0
 801f672:	70fb      	strb	r3, [r7, #3]
 801f674:	460b      	mov	r3, r1
 801f676:	70bb      	strb	r3, [r7, #2]
 801f678:	4613      	mov	r3, r2
 801f67a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801f67c:	2300      	movs	r3, #0
 801f67e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801f680:	2300      	movs	r3, #0
 801f682:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 801f684:	687b      	ldr	r3, [r7, #4]
 801f686:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 801f68a:	787c      	ldrb	r4, [r7, #1]
 801f68c:	78ba      	ldrb	r2, [r7, #2]
 801f68e:	78f9      	ldrb	r1, [r7, #3]
 801f690:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801f692:	9302      	str	r3, [sp, #8]
 801f694:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801f698:	9301      	str	r3, [sp, #4]
 801f69a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801f69e:	9300      	str	r3, [sp, #0]
 801f6a0:	4623      	mov	r3, r4
 801f6a2:	f7f9 ff6c 	bl	801957e <HAL_HCD_HC_Init>
 801f6a6:	4603      	mov	r3, r0
 801f6a8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801f6aa:	7bfb      	ldrb	r3, [r7, #15]
 801f6ac:	4618      	mov	r0, r3
 801f6ae:	f000 f8b5 	bl	801f81c <USBH_Get_USB_Status>
 801f6b2:	4603      	mov	r3, r0
 801f6b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801f6b6:	7bbb      	ldrb	r3, [r7, #14]
}
 801f6b8:	4618      	mov	r0, r3
 801f6ba:	3714      	adds	r7, #20
 801f6bc:	46bd      	mov	sp, r7
 801f6be:	bd90      	pop	{r4, r7, pc}

0801f6c0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801f6c0:	b580      	push	{r7, lr}
 801f6c2:	b084      	sub	sp, #16
 801f6c4:	af00      	add	r7, sp, #0
 801f6c6:	6078      	str	r0, [r7, #4]
 801f6c8:	460b      	mov	r3, r1
 801f6ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801f6cc:	2300      	movs	r3, #0
 801f6ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801f6d0:	2300      	movs	r3, #0
 801f6d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 801f6d4:	687b      	ldr	r3, [r7, #4]
 801f6d6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801f6da:	78fa      	ldrb	r2, [r7, #3]
 801f6dc:	4611      	mov	r1, r2
 801f6de:	4618      	mov	r0, r3
 801f6e0:	f7f9 ffe5 	bl	80196ae <HAL_HCD_HC_Halt>
 801f6e4:	4603      	mov	r3, r0
 801f6e6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801f6e8:	7bfb      	ldrb	r3, [r7, #15]
 801f6ea:	4618      	mov	r0, r3
 801f6ec:	f000 f896 	bl	801f81c <USBH_Get_USB_Status>
 801f6f0:	4603      	mov	r3, r0
 801f6f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801f6f4:	7bbb      	ldrb	r3, [r7, #14]
}
 801f6f6:	4618      	mov	r0, r3
 801f6f8:	3710      	adds	r7, #16
 801f6fa:	46bd      	mov	sp, r7
 801f6fc:	bd80      	pop	{r7, pc}

0801f6fe <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 801f6fe:	b590      	push	{r4, r7, lr}
 801f700:	b089      	sub	sp, #36	; 0x24
 801f702:	af04      	add	r7, sp, #16
 801f704:	6078      	str	r0, [r7, #4]
 801f706:	4608      	mov	r0, r1
 801f708:	4611      	mov	r1, r2
 801f70a:	461a      	mov	r2, r3
 801f70c:	4603      	mov	r3, r0
 801f70e:	70fb      	strb	r3, [r7, #3]
 801f710:	460b      	mov	r3, r1
 801f712:	70bb      	strb	r3, [r7, #2]
 801f714:	4613      	mov	r3, r2
 801f716:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801f718:	2300      	movs	r3, #0
 801f71a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801f71c:	2300      	movs	r3, #0
 801f71e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 801f720:	687b      	ldr	r3, [r7, #4]
 801f722:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 801f726:	787c      	ldrb	r4, [r7, #1]
 801f728:	78ba      	ldrb	r2, [r7, #2]
 801f72a:	78f9      	ldrb	r1, [r7, #3]
 801f72c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801f730:	9303      	str	r3, [sp, #12]
 801f732:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801f734:	9302      	str	r3, [sp, #8]
 801f736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f738:	9301      	str	r3, [sp, #4]
 801f73a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801f73e:	9300      	str	r3, [sp, #0]
 801f740:	4623      	mov	r3, r4
 801f742:	f7f9 ffd7 	bl	80196f4 <HAL_HCD_HC_SubmitRequest>
 801f746:	4603      	mov	r3, r0
 801f748:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801f74a:	7bfb      	ldrb	r3, [r7, #15]
 801f74c:	4618      	mov	r0, r3
 801f74e:	f000 f865 	bl	801f81c <USBH_Get_USB_Status>
 801f752:	4603      	mov	r3, r0
 801f754:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801f756:	7bbb      	ldrb	r3, [r7, #14]
}
 801f758:	4618      	mov	r0, r3
 801f75a:	3714      	adds	r7, #20
 801f75c:	46bd      	mov	sp, r7
 801f75e:	bd90      	pop	{r4, r7, pc}

0801f760 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801f760:	b580      	push	{r7, lr}
 801f762:	b082      	sub	sp, #8
 801f764:	af00      	add	r7, sp, #0
 801f766:	6078      	str	r0, [r7, #4]
 801f768:	460b      	mov	r3, r1
 801f76a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 801f76c:	687b      	ldr	r3, [r7, #4]
 801f76e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801f772:	78fa      	ldrb	r2, [r7, #3]
 801f774:	4611      	mov	r1, r2
 801f776:	4618      	mov	r0, r3
 801f778:	f7fa fa72 	bl	8019c60 <HAL_HCD_HC_GetURBState>
 801f77c:	4603      	mov	r3, r0
}
 801f77e:	4618      	mov	r0, r3
 801f780:	3708      	adds	r7, #8
 801f782:	46bd      	mov	sp, r7
 801f784:	bd80      	pop	{r7, pc}

0801f786 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801f786:	b580      	push	{r7, lr}
 801f788:	b082      	sub	sp, #8
 801f78a:	af00      	add	r7, sp, #0
 801f78c:	6078      	str	r0, [r7, #4]
 801f78e:	460b      	mov	r3, r1
 801f790:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 801f792:	687b      	ldr	r3, [r7, #4]
 801f794:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 801f798:	2b01      	cmp	r3, #1
 801f79a:	d103      	bne.n	801f7a4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 801f79c:	78fb      	ldrb	r3, [r7, #3]
 801f79e:	4618      	mov	r0, r3
 801f7a0:	f000 f868 	bl	801f874 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 801f7a4:	20c8      	movs	r0, #200	; 0xc8
 801f7a6:	f7f9 fb7d 	bl	8018ea4 <HAL_Delay>
  return USBH_OK;
 801f7aa:	2300      	movs	r3, #0
}
 801f7ac:	4618      	mov	r0, r3
 801f7ae:	3708      	adds	r7, #8
 801f7b0:	46bd      	mov	sp, r7
 801f7b2:	bd80      	pop	{r7, pc}

0801f7b4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 801f7b4:	b480      	push	{r7}
 801f7b6:	b085      	sub	sp, #20
 801f7b8:	af00      	add	r7, sp, #0
 801f7ba:	6078      	str	r0, [r7, #4]
 801f7bc:	460b      	mov	r3, r1
 801f7be:	70fb      	strb	r3, [r7, #3]
 801f7c0:	4613      	mov	r3, r2
 801f7c2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 801f7c4:	687b      	ldr	r3, [r7, #4]
 801f7c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801f7ca:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 801f7cc:	78fa      	ldrb	r2, [r7, #3]
 801f7ce:	68f9      	ldr	r1, [r7, #12]
 801f7d0:	4613      	mov	r3, r2
 801f7d2:	009b      	lsls	r3, r3, #2
 801f7d4:	4413      	add	r3, r2
 801f7d6:	00db      	lsls	r3, r3, #3
 801f7d8:	440b      	add	r3, r1
 801f7da:	333b      	adds	r3, #59	; 0x3b
 801f7dc:	781b      	ldrb	r3, [r3, #0]
 801f7de:	2b00      	cmp	r3, #0
 801f7e0:	d00a      	beq.n	801f7f8 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 801f7e2:	78fa      	ldrb	r2, [r7, #3]
 801f7e4:	68f9      	ldr	r1, [r7, #12]
 801f7e6:	4613      	mov	r3, r2
 801f7e8:	009b      	lsls	r3, r3, #2
 801f7ea:	4413      	add	r3, r2
 801f7ec:	00db      	lsls	r3, r3, #3
 801f7ee:	440b      	add	r3, r1
 801f7f0:	3350      	adds	r3, #80	; 0x50
 801f7f2:	78ba      	ldrb	r2, [r7, #2]
 801f7f4:	701a      	strb	r2, [r3, #0]
 801f7f6:	e009      	b.n	801f80c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 801f7f8:	78fa      	ldrb	r2, [r7, #3]
 801f7fa:	68f9      	ldr	r1, [r7, #12]
 801f7fc:	4613      	mov	r3, r2
 801f7fe:	009b      	lsls	r3, r3, #2
 801f800:	4413      	add	r3, r2
 801f802:	00db      	lsls	r3, r3, #3
 801f804:	440b      	add	r3, r1
 801f806:	3351      	adds	r3, #81	; 0x51
 801f808:	78ba      	ldrb	r2, [r7, #2]
 801f80a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 801f80c:	2300      	movs	r3, #0
}
 801f80e:	4618      	mov	r0, r3
 801f810:	3714      	adds	r7, #20
 801f812:	46bd      	mov	sp, r7
 801f814:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f818:	4770      	bx	lr
	...

0801f81c <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801f81c:	b480      	push	{r7}
 801f81e:	b085      	sub	sp, #20
 801f820:	af00      	add	r7, sp, #0
 801f822:	4603      	mov	r3, r0
 801f824:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801f826:	2300      	movs	r3, #0
 801f828:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801f82a:	79fb      	ldrb	r3, [r7, #7]
 801f82c:	2b03      	cmp	r3, #3
 801f82e:	d817      	bhi.n	801f860 <USBH_Get_USB_Status+0x44>
 801f830:	a201      	add	r2, pc, #4	; (adr r2, 801f838 <USBH_Get_USB_Status+0x1c>)
 801f832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f836:	bf00      	nop
 801f838:	0801f849 	.word	0x0801f849
 801f83c:	0801f84f 	.word	0x0801f84f
 801f840:	0801f855 	.word	0x0801f855
 801f844:	0801f85b 	.word	0x0801f85b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 801f848:	2300      	movs	r3, #0
 801f84a:	73fb      	strb	r3, [r7, #15]
    break;
 801f84c:	e00b      	b.n	801f866 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801f84e:	2302      	movs	r3, #2
 801f850:	73fb      	strb	r3, [r7, #15]
    break;
 801f852:	e008      	b.n	801f866 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 801f854:	2301      	movs	r3, #1
 801f856:	73fb      	strb	r3, [r7, #15]
    break;
 801f858:	e005      	b.n	801f866 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801f85a:	2302      	movs	r3, #2
 801f85c:	73fb      	strb	r3, [r7, #15]
    break;
 801f85e:	e002      	b.n	801f866 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 801f860:	2302      	movs	r3, #2
 801f862:	73fb      	strb	r3, [r7, #15]
    break;
 801f864:	bf00      	nop
  }
  return usb_status;
 801f866:	7bfb      	ldrb	r3, [r7, #15]
}
 801f868:	4618      	mov	r0, r3
 801f86a:	3714      	adds	r7, #20
 801f86c:	46bd      	mov	sp, r7
 801f86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f872:	4770      	bx	lr

0801f874 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 801f874:	b580      	push	{r7, lr}
 801f876:	b084      	sub	sp, #16
 801f878:	af00      	add	r7, sp, #0
 801f87a:	4603      	mov	r3, r0
 801f87c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 801f87e:	79fb      	ldrb	r3, [r7, #7]
 801f880:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 801f882:	79fb      	ldrb	r3, [r7, #7]
 801f884:	2b00      	cmp	r3, #0
 801f886:	d102      	bne.n	801f88e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 801f888:	2301      	movs	r3, #1
 801f88a:	73fb      	strb	r3, [r7, #15]
 801f88c:	e001      	b.n	801f892 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 801f88e:	2300      	movs	r3, #0
 801f890:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 801f892:	7bfb      	ldrb	r3, [r7, #15]
 801f894:	461a      	mov	r2, r3
 801f896:	2101      	movs	r1, #1
 801f898:	4803      	ldr	r0, [pc, #12]	; (801f8a8 <MX_DriverVbusFS+0x34>)
 801f89a:	f7f9 fdd1 	bl	8019440 <HAL_GPIO_WritePin>
}
 801f89e:	bf00      	nop
 801f8a0:	3710      	adds	r7, #16
 801f8a2:	46bd      	mov	sp, r7
 801f8a4:	bd80      	pop	{r7, pc}
 801f8a6:	bf00      	nop
 801f8a8:	40020800 	.word	0x40020800

0801f8ac <_ZdaPv>:
 801f8ac:	f000 b820 	b.w	801f8f0 <_ZdlPv>

0801f8b0 <__cxa_pure_virtual>:
 801f8b0:	b508      	push	{r3, lr}
 801f8b2:	f000 f82b 	bl	801f90c <_ZSt9terminatev>

0801f8b6 <_Znaj>:
 801f8b6:	f000 b802 	b.w	801f8be <_Znwj>

0801f8ba <_ZdlPvj>:
 801f8ba:	f000 b819 	b.w	801f8f0 <_ZdlPv>

0801f8be <_Znwj>:
 801f8be:	b510      	push	{r4, lr}
 801f8c0:	2800      	cmp	r0, #0
 801f8c2:	bf14      	ite	ne
 801f8c4:	4604      	movne	r4, r0
 801f8c6:	2401      	moveq	r4, #1
 801f8c8:	4620      	mov	r0, r4
 801f8ca:	f000 fb9b 	bl	8020004 <malloc>
 801f8ce:	b930      	cbnz	r0, 801f8de <_Znwj+0x20>
 801f8d0:	f000 f806 	bl	801f8e0 <_ZSt15get_new_handlerv>
 801f8d4:	b908      	cbnz	r0, 801f8da <_Znwj+0x1c>
 801f8d6:	f000 fb63 	bl	801ffa0 <abort>
 801f8da:	4780      	blx	r0
 801f8dc:	e7f4      	b.n	801f8c8 <_Znwj+0xa>
 801f8de:	bd10      	pop	{r4, pc}

0801f8e0 <_ZSt15get_new_handlerv>:
 801f8e0:	4b02      	ldr	r3, [pc, #8]	; (801f8ec <_ZSt15get_new_handlerv+0xc>)
 801f8e2:	6818      	ldr	r0, [r3, #0]
 801f8e4:	f3bf 8f5b 	dmb	ish
 801f8e8:	4770      	bx	lr
 801f8ea:	bf00      	nop
 801f8ec:	20000370 	.word	0x20000370

0801f8f0 <_ZdlPv>:
 801f8f0:	f000 bb90 	b.w	8020014 <free>

0801f8f4 <_ZN10__cxxabiv111__terminateEPFvvE>:
 801f8f4:	b508      	push	{r3, lr}
 801f8f6:	4780      	blx	r0
 801f8f8:	f000 fb52 	bl	801ffa0 <abort>

0801f8fc <_ZSt13get_terminatev>:
 801f8fc:	4b02      	ldr	r3, [pc, #8]	; (801f908 <_ZSt13get_terminatev+0xc>)
 801f8fe:	6818      	ldr	r0, [r3, #0]
 801f900:	f3bf 8f5b 	dmb	ish
 801f904:	4770      	bx	lr
 801f906:	bf00      	nop
 801f908:	200002e0 	.word	0x200002e0

0801f90c <_ZSt9terminatev>:
 801f90c:	b508      	push	{r3, lr}
 801f90e:	f7ff fff5 	bl	801f8fc <_ZSt13get_terminatev>
 801f912:	f7ff ffef 	bl	801f8f4 <_ZN10__cxxabiv111__terminateEPFvvE>

0801f916 <_ZNSaIcEC1Ev>:
 801f916:	4770      	bx	lr

0801f918 <_ZNSaIcED1Ev>:
 801f918:	4770      	bx	lr

0801f91a <_ZSt17__throw_bad_allocv>:
 801f91a:	b508      	push	{r3, lr}
 801f91c:	f000 fb40 	bl	801ffa0 <abort>

0801f920 <_ZSt19__throw_logic_errorPKc>:
 801f920:	b508      	push	{r3, lr}
 801f922:	f000 fb3d 	bl	801ffa0 <abort>

0801f926 <_ZSt20__throw_length_errorPKc>:
 801f926:	b508      	push	{r3, lr}
 801f928:	f000 fb3a 	bl	801ffa0 <abort>

0801f92c <_ZSt20__throw_out_of_rangePKc>:
 801f92c:	b508      	push	{r3, lr}
 801f92e:	f000 fb37 	bl	801ffa0 <abort>

0801f932 <_ZSt24__throw_out_of_range_fmtPKcz>:
 801f932:	b40f      	push	{r0, r1, r2, r3}
 801f934:	b580      	push	{r7, lr}
 801f936:	b082      	sub	sp, #8
 801f938:	af00      	add	r7, sp, #0
 801f93a:	f107 0410 	add.w	r4, r7, #16
 801f93e:	f854 5b04 	ldr.w	r5, [r4], #4
 801f942:	4628      	mov	r0, r5
 801f944:	f7e0 fc9c 	bl	8000280 <strlen>
 801f948:	f200 230e 	addw	r3, r0, #526	; 0x20e
 801f94c:	f023 0307 	bic.w	r3, r3, #7
 801f950:	ebad 0d03 	sub.w	sp, sp, r3
 801f954:	f500 7100 	add.w	r1, r0, #512	; 0x200
 801f958:	4623      	mov	r3, r4
 801f95a:	462a      	mov	r2, r5
 801f95c:	4668      	mov	r0, sp
 801f95e:	607c      	str	r4, [r7, #4]
 801f960:	f000 f9d8 	bl	801fd14 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 801f964:	f000 fb1c 	bl	801ffa0 <abort>

0801f968 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 801f968:	b10a      	cbz	r2, 801f96e <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 801f96a:	f000 bb5b 	b.w	8020024 <memcpy>
 801f96e:	4770      	bx	lr

0801f970 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 801f970:	6001      	str	r1, [r0, #0]
 801f972:	4770      	bx	lr

0801f974 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 801f974:	6800      	ldr	r0, [r0, #0]
 801f976:	4770      	bx	lr

0801f978 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 801f978:	3008      	adds	r0, #8
 801f97a:	4770      	bx	lr

0801f97c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 801f97c:	6081      	str	r1, [r0, #8]
 801f97e:	4770      	bx	lr

0801f980 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 801f980:	6803      	ldr	r3, [r0, #0]
 801f982:	6041      	str	r1, [r0, #4]
 801f984:	2200      	movs	r2, #0
 801f986:	545a      	strb	r2, [r3, r1]
 801f988:	4770      	bx	lr
	...

0801f98c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 801f98c:	b508      	push	{r3, lr}
 801f98e:	680b      	ldr	r3, [r1, #0]
 801f990:	2b00      	cmp	r3, #0
 801f992:	da02      	bge.n	801f99a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0xe>
 801f994:	4809      	ldr	r0, [pc, #36]	; (801f9bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x30>)
 801f996:	f7ff ffc6 	bl	801f926 <_ZSt20__throw_length_errorPKc>
 801f99a:	4293      	cmp	r3, r2
 801f99c:	d908      	bls.n	801f9b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 801f99e:	0052      	lsls	r2, r2, #1
 801f9a0:	4293      	cmp	r3, r2
 801f9a2:	d205      	bcs.n	801f9b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 801f9a4:	2a00      	cmp	r2, #0
 801f9a6:	bfb6      	itet	lt
 801f9a8:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 801f9ac:	600a      	strge	r2, [r1, #0]
 801f9ae:	600b      	strlt	r3, [r1, #0]
 801f9b0:	6808      	ldr	r0, [r1, #0]
 801f9b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801f9b6:	3001      	adds	r0, #1
 801f9b8:	f7ff bf81 	b.w	801f8be <_Znwj>
 801f9bc:	080249ea 	.word	0x080249ea

0801f9c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 801f9c0:	4603      	mov	r3, r0
 801f9c2:	f853 0b08 	ldr.w	r0, [r3], #8
 801f9c6:	4298      	cmp	r0, r3
 801f9c8:	d001      	beq.n	801f9ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 801f9ca:	f7ff bf91 	b.w	801f8f0 <_ZdlPv>
 801f9ce:	4770      	bx	lr

0801f9d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 801f9d0:	2a01      	cmp	r2, #1
 801f9d2:	b510      	push	{r4, lr}
 801f9d4:	d102      	bne.n	801f9dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 801f9d6:	780a      	ldrb	r2, [r1, #0]
 801f9d8:	7002      	strb	r2, [r0, #0]
 801f9da:	bd10      	pop	{r4, pc}
 801f9dc:	f7ff ffc4 	bl	801f968 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 801f9e0:	e7fb      	b.n	801f9da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

0801f9e2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 801f9e2:	b508      	push	{r3, lr}
 801f9e4:	1a52      	subs	r2, r2, r1
 801f9e6:	f7ff fff3 	bl	801f9d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801f9ea:	bd08      	pop	{r3, pc}

0801f9ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 801f9ec:	b508      	push	{r3, lr}
 801f9ee:	1a52      	subs	r2, r2, r1
 801f9f0:	f7ff ffee 	bl	801f9d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801f9f4:	bd08      	pop	{r3, pc}

0801f9f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 801f9f6:	4288      	cmp	r0, r1
 801f9f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f9fa:	4604      	mov	r4, r0
 801f9fc:	460e      	mov	r6, r1
 801f9fe:	d01f      	beq.n	801fa40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x4a>
 801fa00:	6802      	ldr	r2, [r0, #0]
 801fa02:	684d      	ldr	r5, [r1, #4]
 801fa04:	f100 0308 	add.w	r3, r0, #8
 801fa08:	429a      	cmp	r2, r3
 801fa0a:	bf14      	ite	ne
 801fa0c:	6882      	ldrne	r2, [r0, #8]
 801fa0e:	220f      	moveq	r2, #15
 801fa10:	42aa      	cmp	r2, r5
 801fa12:	d20b      	bcs.n	801fa2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x36>
 801fa14:	a902      	add	r1, sp, #8
 801fa16:	f841 5d04 	str.w	r5, [r1, #-4]!
 801fa1a:	f7ff ffb7 	bl	801f98c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 801fa1e:	4607      	mov	r7, r0
 801fa20:	4620      	mov	r0, r4
 801fa22:	f7ff ffcd 	bl	801f9c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 801fa26:	9b01      	ldr	r3, [sp, #4]
 801fa28:	6027      	str	r7, [r4, #0]
 801fa2a:	60a3      	str	r3, [r4, #8]
 801fa2c:	b125      	cbz	r5, 801fa38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x42>
 801fa2e:	462a      	mov	r2, r5
 801fa30:	6831      	ldr	r1, [r6, #0]
 801fa32:	6820      	ldr	r0, [r4, #0]
 801fa34:	f7ff ffcc 	bl	801f9d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801fa38:	6823      	ldr	r3, [r4, #0]
 801fa3a:	6065      	str	r5, [r4, #4]
 801fa3c:	2200      	movs	r2, #0
 801fa3e:	555a      	strb	r2, [r3, r5]
 801fa40:	b003      	add	sp, #12
 801fa42:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801fa44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 801fa44:	f100 0208 	add.w	r2, r0, #8
 801fa48:	6002      	str	r2, [r0, #0]
 801fa4a:	2200      	movs	r2, #0
 801fa4c:	6042      	str	r2, [r0, #4]
 801fa4e:	7202      	strb	r2, [r0, #8]
 801fa50:	4770      	bx	lr

0801fa52 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 801fa52:	b570      	push	{r4, r5, r6, lr}
 801fa54:	4604      	mov	r4, r0
 801fa56:	460e      	mov	r6, r1
 801fa58:	3008      	adds	r0, #8
 801fa5a:	6020      	str	r0, [r4, #0]
 801fa5c:	f856 3b08 	ldr.w	r3, [r6], #8
 801fa60:	429e      	cmp	r6, r3
 801fa62:	460d      	mov	r5, r1
 801fa64:	d10b      	bne.n	801fa7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x2c>
 801fa66:	2210      	movs	r2, #16
 801fa68:	4631      	mov	r1, r6
 801fa6a:	f7ff ff7d 	bl	801f968 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 801fa6e:	686b      	ldr	r3, [r5, #4]
 801fa70:	6063      	str	r3, [r4, #4]
 801fa72:	2300      	movs	r3, #0
 801fa74:	602e      	str	r6, [r5, #0]
 801fa76:	606b      	str	r3, [r5, #4]
 801fa78:	722b      	strb	r3, [r5, #8]
 801fa7a:	4620      	mov	r0, r4
 801fa7c:	bd70      	pop	{r4, r5, r6, pc}
 801fa7e:	6023      	str	r3, [r4, #0]
 801fa80:	688b      	ldr	r3, [r1, #8]
 801fa82:	60a3      	str	r3, [r4, #8]
 801fa84:	e7f3      	b.n	801fa6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x1c>

0801fa86 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 801fa86:	b510      	push	{r4, lr}
 801fa88:	4604      	mov	r4, r0
 801fa8a:	f7ff ff99 	bl	801f9c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 801fa8e:	4620      	mov	r0, r4
 801fa90:	bd10      	pop	{r4, pc}

0801fa92 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>:
 801fa92:	b510      	push	{r4, lr}
 801fa94:	4604      	mov	r4, r0
 801fa96:	f7ff ffae 	bl	801f9f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 801fa9a:	4620      	mov	r0, r4
 801fa9c:	bd10      	pop	{r4, pc}

0801fa9e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5beginEv>:
 801fa9e:	6800      	ldr	r0, [r0, #0]
 801faa0:	4770      	bx	lr

0801faa2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE3endEv>:
 801faa2:	e9d0 2000 	ldrd	r2, r0, [r0]
 801faa6:	4410      	add	r0, r2
 801faa8:	4770      	bx	lr

0801faaa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 801faaa:	6840      	ldr	r0, [r0, #4]
 801faac:	4770      	bx	lr

0801faae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 801faae:	6800      	ldr	r0, [r0, #0]
 801fab0:	4408      	add	r0, r1
 801fab2:	4770      	bx	lr

0801fab4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 801fab4:	6001      	str	r1, [r0, #0]
 801fab6:	4770      	bx	lr

0801fab8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 801fab8:	b510      	push	{r4, lr}
 801faba:	f100 0208 	add.w	r2, r0, #8
 801fabe:	6002      	str	r2, [r0, #0]
 801fac0:	e9d1 1200 	ldrd	r1, r2, [r1]
 801fac4:	4604      	mov	r4, r0
 801fac6:	f04f 0300 	mov.w	r3, #0
 801faca:	440a      	add	r2, r1
 801facc:	f7eb fee0 	bl	800b890 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 801fad0:	4620      	mov	r0, r4
 801fad2:	bd10      	pop	{r4, pc}

0801fad4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 801fad4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801fad6:	4604      	mov	r4, r0
 801fad8:	4616      	mov	r6, r2
 801fada:	460d      	mov	r5, r1
 801fadc:	b919      	cbnz	r1, 801fae6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 801fade:	b112      	cbz	r2, 801fae6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 801fae0:	480d      	ldr	r0, [pc, #52]	; (801fb18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 801fae2:	f7ff ff1d 	bl	801f920 <_ZSt19__throw_logic_errorPKc>
 801fae6:	1b73      	subs	r3, r6, r5
 801fae8:	2b0f      	cmp	r3, #15
 801faea:	9301      	str	r3, [sp, #4]
 801faec:	d907      	bls.n	801fafe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 801faee:	2200      	movs	r2, #0
 801faf0:	a901      	add	r1, sp, #4
 801faf2:	4620      	mov	r0, r4
 801faf4:	f7ff ff4a 	bl	801f98c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 801faf8:	9b01      	ldr	r3, [sp, #4]
 801fafa:	6020      	str	r0, [r4, #0]
 801fafc:	60a3      	str	r3, [r4, #8]
 801fafe:	4632      	mov	r2, r6
 801fb00:	4629      	mov	r1, r5
 801fb02:	6820      	ldr	r0, [r4, #0]
 801fb04:	f7ff ff72 	bl	801f9ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 801fb08:	9b01      	ldr	r3, [sp, #4]
 801fb0a:	6822      	ldr	r2, [r4, #0]
 801fb0c:	6063      	str	r3, [r4, #4]
 801fb0e:	2100      	movs	r1, #0
 801fb10:	54d1      	strb	r1, [r2, r3]
 801fb12:	b002      	add	sp, #8
 801fb14:	bd70      	pop	{r4, r5, r6, pc}
 801fb16:	bf00      	nop
 801fb18:	080249c0 	.word	0x080249c0

0801fb1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 801fb1c:	b538      	push	{r3, r4, r5, lr}
 801fb1e:	f100 0308 	add.w	r3, r0, #8
 801fb22:	4604      	mov	r4, r0
 801fb24:	6003      	str	r3, [r0, #0]
 801fb26:	460d      	mov	r5, r1
 801fb28:	b159      	cbz	r1, 801fb42 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 801fb2a:	4608      	mov	r0, r1
 801fb2c:	f7e0 fba8 	bl	8000280 <strlen>
 801fb30:	182a      	adds	r2, r5, r0
 801fb32:	4620      	mov	r0, r4
 801fb34:	f04f 0300 	mov.w	r3, #0
 801fb38:	4629      	mov	r1, r5
 801fb3a:	f7ff ffcb 	bl	801fad4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 801fb3e:	4620      	mov	r0, r4
 801fb40:	bd38      	pop	{r3, r4, r5, pc}
 801fb42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801fb46:	e7f4      	b.n	801fb32 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

0801fb48 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj>:
 801fb48:	290c      	cmp	r1, #12
 801fb4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fb4c:	4605      	mov	r5, r0
 801fb4e:	d819      	bhi.n	801fb84 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x3c>
 801fb50:	4b1c      	ldr	r3, [pc, #112]	; (801fbc4 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x7c>)
 801fb52:	5c5c      	ldrb	r4, [r3, r1]
 801fb54:	4620      	mov	r0, r4
 801fb56:	f7e0 fced 	bl	8000534 <__aeabi_i2d>
 801fb5a:	4606      	mov	r6, r0
 801fb5c:	6828      	ldr	r0, [r5, #0]
 801fb5e:	460f      	mov	r7, r1
 801fb60:	f7e0 fcfa 	bl	8000558 <__aeabi_f2d>
 801fb64:	4602      	mov	r2, r0
 801fb66:	460b      	mov	r3, r1
 801fb68:	4630      	mov	r0, r6
 801fb6a:	4639      	mov	r1, r7
 801fb6c:	f7e0 fd4c 	bl	8000608 <__aeabi_dmul>
 801fb70:	ec41 0b10 	vmov	d0, r0, r1
 801fb74:	f000 f910 	bl	801fd98 <ceil>
 801fb78:	ec51 0b10 	vmov	r0, r1, d0
 801fb7c:	f7e0 ffde 	bl	8000b3c <__aeabi_d2uiz>
 801fb80:	6068      	str	r0, [r5, #4]
 801fb82:	e018      	b.n	801fbb6 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x6e>
 801fb84:	4a10      	ldr	r2, [pc, #64]	; (801fbc8 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x80>)
 801fb86:	3101      	adds	r1, #1
 801fb88:	23f9      	movs	r3, #249	; 0xf9
 801fb8a:	2b00      	cmp	r3, #0
 801fb8c:	dd0c      	ble.n	801fba8 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x60>
 801fb8e:	1058      	asrs	r0, r3, #1
 801fb90:	eb02 0480 	add.w	r4, r2, r0, lsl #2
 801fb94:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801fb98:	42b1      	cmp	r1, r6
 801fb9a:	d903      	bls.n	801fba4 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x5c>
 801fb9c:	1a1b      	subs	r3, r3, r0
 801fb9e:	1d22      	adds	r2, r4, #4
 801fba0:	3b01      	subs	r3, #1
 801fba2:	e7f2      	b.n	801fb8a <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x42>
 801fba4:	4603      	mov	r3, r0
 801fba6:	e7f0      	b.n	801fb8a <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x42>
 801fba8:	4b08      	ldr	r3, [pc, #32]	; (801fbcc <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x84>)
 801fbaa:	6814      	ldr	r4, [r2, #0]
 801fbac:	429a      	cmp	r2, r3
 801fbae:	d104      	bne.n	801fbba <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x72>
 801fbb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801fbb4:	606b      	str	r3, [r5, #4]
 801fbb6:	4620      	mov	r0, r4
 801fbb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fbba:	4620      	mov	r0, r4
 801fbbc:	f7e0 fcaa 	bl	8000514 <__aeabi_ui2d>
 801fbc0:	e7cb      	b.n	801fb5a <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x12>
 801fbc2:	bf00      	nop
 801fbc4:	08024e08 	.word	0x08024e08
 801fbc8:	08024a1c 	.word	0x08024a1c
 801fbcc:	08024e00 	.word	0x08024e00

0801fbd0 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj>:
 801fbd0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801fbd4:	4692      	mov	sl, r2
 801fbd6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801fbd8:	eb03 0802 	add.w	r8, r3, r2
 801fbdc:	684b      	ldr	r3, [r1, #4]
 801fbde:	4598      	cmp	r8, r3
 801fbe0:	4604      	mov	r4, r0
 801fbe2:	460d      	mov	r5, r1
 801fbe4:	d341      	bcc.n	801fc6a <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj+0x9a>
 801fbe6:	6808      	ldr	r0, [r1, #0]
 801fbe8:	f7e0 fcb6 	bl	8000558 <__aeabi_f2d>
 801fbec:	4606      	mov	r6, r0
 801fbee:	460f      	mov	r7, r1
 801fbf0:	4640      	mov	r0, r8
 801fbf2:	f7e0 fc8f 	bl	8000514 <__aeabi_ui2d>
 801fbf6:	4632      	mov	r2, r6
 801fbf8:	463b      	mov	r3, r7
 801fbfa:	f7e0 fe2f 	bl	800085c <__aeabi_ddiv>
 801fbfe:	4680      	mov	r8, r0
 801fc00:	4650      	mov	r0, sl
 801fc02:	4689      	mov	r9, r1
 801fc04:	f7e0 fc86 	bl	8000514 <__aeabi_ui2d>
 801fc08:	4642      	mov	r2, r8
 801fc0a:	464b      	mov	r3, r9
 801fc0c:	e9cd 0100 	strd	r0, r1, [sp]
 801fc10:	f7e0 ff76 	bl	8000b00 <__aeabi_dcmple>
 801fc14:	b1d0      	cbz	r0, 801fc4c <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj+0x7c>
 801fc16:	ec49 8b10 	vmov	d0, r8, r9
 801fc1a:	f000 f93d 	bl	801fe98 <floor>
 801fc1e:	4b15      	ldr	r3, [pc, #84]	; (801fc74 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj+0xa4>)
 801fc20:	2200      	movs	r2, #0
 801fc22:	ec51 0b10 	vmov	r0, r1, d0
 801fc26:	f7e0 fb39 	bl	800029c <__adddf3>
 801fc2a:	f7e0 ff87 	bl	8000b3c <__aeabi_d2uiz>
 801fc2e:	ea4f 014a 	mov.w	r1, sl, lsl #1
 801fc32:	4281      	cmp	r1, r0
 801fc34:	bf38      	it	cc
 801fc36:	4601      	movcc	r1, r0
 801fc38:	4628      	mov	r0, r5
 801fc3a:	f7ff ff85 	bl	801fb48 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj>
 801fc3e:	2301      	movs	r3, #1
 801fc40:	7023      	strb	r3, [r4, #0]
 801fc42:	6060      	str	r0, [r4, #4]
 801fc44:	4620      	mov	r0, r4
 801fc46:	b002      	add	sp, #8
 801fc48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fc4c:	e9dd 2300 	ldrd	r2, r3, [sp]
 801fc50:	4630      	mov	r0, r6
 801fc52:	4639      	mov	r1, r7
 801fc54:	f7e0 fcd8 	bl	8000608 <__aeabi_dmul>
 801fc58:	ec41 0b10 	vmov	d0, r0, r1
 801fc5c:	f000 f91c 	bl	801fe98 <floor>
 801fc60:	ec51 0b10 	vmov	r0, r1, d0
 801fc64:	f7e0 ff6a 	bl	8000b3c <__aeabi_d2uiz>
 801fc68:	6068      	str	r0, [r5, #4]
 801fc6a:	2300      	movs	r3, #0
 801fc6c:	7023      	strb	r3, [r4, #0]
 801fc6e:	6063      	str	r3, [r4, #4]
 801fc70:	e7e8      	b.n	801fc44 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj+0x74>
 801fc72:	bf00      	nop
 801fc74:	3ff00000 	.word	0x3ff00000

0801fc78 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 801fc78:	b580      	push	{r7, lr}
 801fc7a:	b09c      	sub	sp, #112	; 0x70
 801fc7c:	af00      	add	r7, sp, #0
 801fc7e:	1a0e      	subs	r6, r1, r0
 801fc80:	4680      	mov	r8, r0
 801fc82:	2269      	movs	r2, #105	; 0x69
 801fc84:	490e      	ldr	r1, [pc, #56]	; (801fcc0 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 801fc86:	1d38      	adds	r0, r7, #4
 801fc88:	f000 f9cc 	bl	8020024 <memcpy>
 801fc8c:	f106 0377 	add.w	r3, r6, #119	; 0x77
 801fc90:	f023 0307 	bic.w	r3, r3, #7
 801fc94:	ebad 0d03 	sub.w	sp, sp, r3
 801fc98:	466c      	mov	r4, sp
 801fc9a:	2268      	movs	r2, #104	; 0x68
 801fc9c:	1d39      	adds	r1, r7, #4
 801fc9e:	1c75      	adds	r5, r6, #1
 801fca0:	4620      	mov	r0, r4
 801fca2:	f000 f9bf 	bl	8020024 <memcpy>
 801fca6:	4425      	add	r5, r4
 801fca8:	4632      	mov	r2, r6
 801fcaa:	4641      	mov	r1, r8
 801fcac:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801fcb0:	f000 f9b8 	bl	8020024 <memcpy>
 801fcb4:	2300      	movs	r3, #0
 801fcb6:	f885 3067 	strb.w	r3, [r5, #103]	; 0x67
 801fcba:	4620      	mov	r0, r4
 801fcbc:	f7ff fe30 	bl	801f920 <_ZSt19__throw_logic_errorPKc>
 801fcc0:	08024e20 	.word	0x08024e20

0801fcc4 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 801fcc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fcc6:	af00      	add	r7, sp, #0
 801fcc8:	b086      	sub	sp, #24
 801fcca:	466d      	mov	r5, sp
 801fccc:	f105 040c 	add.w	r4, r5, #12
 801fcd0:	f8df e03c 	ldr.w	lr, [pc, #60]	; 801fd10 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 801fcd4:	4623      	mov	r3, r4
 801fcd6:	f04f 0c0a 	mov.w	ip, #10
 801fcda:	fbb2 f6fc 	udiv	r6, r2, ip
 801fcde:	fb0c 2216 	mls	r2, ip, r6, r2
 801fce2:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801fce6:	f803 2d01 	strb.w	r2, [r3, #-1]!
 801fcea:	4632      	mov	r2, r6
 801fcec:	2e00      	cmp	r6, #0
 801fcee:	d1f4      	bne.n	801fcda <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x16>
 801fcf0:	1ae4      	subs	r4, r4, r3
 801fcf2:	428c      	cmp	r4, r1
 801fcf4:	d808      	bhi.n	801fd08 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 801fcf6:	f1c4 010c 	rsb	r1, r4, #12
 801fcfa:	4622      	mov	r2, r4
 801fcfc:	4429      	add	r1, r5
 801fcfe:	f000 f991 	bl	8020024 <memcpy>
 801fd02:	4620      	mov	r0, r4
 801fd04:	46bd      	mov	sp, r7
 801fd06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fd08:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801fd0c:	e7f9      	b.n	801fd02 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x3e>
 801fd0e:	bf00      	nop
 801fd10:	08024e15 	.word	0x08024e15

0801fd14 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 801fd14:	3901      	subs	r1, #1
 801fd16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fd1a:	4606      	mov	r6, r0
 801fd1c:	4615      	mov	r5, r2
 801fd1e:	1847      	adds	r7, r0, r1
 801fd20:	4604      	mov	r4, r0
 801fd22:	782a      	ldrb	r2, [r5, #0]
 801fd24:	b392      	cbz	r2, 801fd8c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x78>
 801fd26:	42bc      	cmp	r4, r7
 801fd28:	d22c      	bcs.n	801fd84 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x70>
 801fd2a:	2a25      	cmp	r2, #37	; 0x25
 801fd2c:	d107      	bne.n	801fd3e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 801fd2e:	786a      	ldrb	r2, [r5, #1]
 801fd30:	2a73      	cmp	r2, #115	; 0x73
 801fd32:	d009      	beq.n	801fd48 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x34>
 801fd34:	2a7a      	cmp	r2, #122	; 0x7a
 801fd36:	d012      	beq.n	801fd5e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4a>
 801fd38:	2a25      	cmp	r2, #37	; 0x25
 801fd3a:	d100      	bne.n	801fd3e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 801fd3c:	3501      	adds	r5, #1
 801fd3e:	782a      	ldrb	r2, [r5, #0]
 801fd40:	7022      	strb	r2, [r4, #0]
 801fd42:	3501      	adds	r5, #1
 801fd44:	3401      	adds	r4, #1
 801fd46:	e7ec      	b.n	801fd22 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 801fd48:	1d19      	adds	r1, r3, #4
 801fd4a:	681b      	ldr	r3, [r3, #0]
 801fd4c:	3b01      	subs	r3, #1
 801fd4e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 801fd52:	b1a2      	cbz	r2, 801fd7e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6a>
 801fd54:	42bc      	cmp	r4, r7
 801fd56:	d015      	beq.n	801fd84 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x70>
 801fd58:	f804 2b01 	strb.w	r2, [r4], #1
 801fd5c:	e7f7      	b.n	801fd4e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3a>
 801fd5e:	78aa      	ldrb	r2, [r5, #2]
 801fd60:	2a75      	cmp	r2, #117	; 0x75
 801fd62:	d1ec      	bne.n	801fd3e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 801fd64:	681a      	ldr	r2, [r3, #0]
 801fd66:	1b39      	subs	r1, r7, r4
 801fd68:	4620      	mov	r0, r4
 801fd6a:	f103 0804 	add.w	r8, r3, #4
 801fd6e:	f7ff ffa9 	bl	801fcc4 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 801fd72:	2800      	cmp	r0, #0
 801fd74:	dd06      	ble.n	801fd84 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x70>
 801fd76:	4404      	add	r4, r0
 801fd78:	3503      	adds	r5, #3
 801fd7a:	4643      	mov	r3, r8
 801fd7c:	e7d1      	b.n	801fd22 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 801fd7e:	3502      	adds	r5, #2
 801fd80:	460b      	mov	r3, r1
 801fd82:	e7ce      	b.n	801fd22 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 801fd84:	4621      	mov	r1, r4
 801fd86:	4630      	mov	r0, r6
 801fd88:	f7ff ff76 	bl	801fc78 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 801fd8c:	7022      	strb	r2, [r4, #0]
 801fd8e:	1ba0      	subs	r0, r4, r6
 801fd90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fd94:	0000      	movs	r0, r0
	...

0801fd98 <ceil>:
 801fd98:	ec51 0b10 	vmov	r0, r1, d0
 801fd9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fda0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801fda4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801fda8:	2e13      	cmp	r6, #19
 801fdaa:	460c      	mov	r4, r1
 801fdac:	ee10 5a10 	vmov	r5, s0
 801fdb0:	4680      	mov	r8, r0
 801fdb2:	dc30      	bgt.n	801fe16 <ceil+0x7e>
 801fdb4:	2e00      	cmp	r6, #0
 801fdb6:	da12      	bge.n	801fdde <ceil+0x46>
 801fdb8:	a333      	add	r3, pc, #204	; (adr r3, 801fe88 <ceil+0xf0>)
 801fdba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fdbe:	f7e0 fa6d 	bl	800029c <__adddf3>
 801fdc2:	2200      	movs	r2, #0
 801fdc4:	2300      	movs	r3, #0
 801fdc6:	f7e0 feaf 	bl	8000b28 <__aeabi_dcmpgt>
 801fdca:	b128      	cbz	r0, 801fdd8 <ceil+0x40>
 801fdcc:	2c00      	cmp	r4, #0
 801fdce:	db55      	blt.n	801fe7c <ceil+0xe4>
 801fdd0:	432c      	orrs	r4, r5
 801fdd2:	d057      	beq.n	801fe84 <ceil+0xec>
 801fdd4:	4c2e      	ldr	r4, [pc, #184]	; (801fe90 <ceil+0xf8>)
 801fdd6:	2500      	movs	r5, #0
 801fdd8:	4621      	mov	r1, r4
 801fdda:	4628      	mov	r0, r5
 801fddc:	e025      	b.n	801fe2a <ceil+0x92>
 801fdde:	4f2d      	ldr	r7, [pc, #180]	; (801fe94 <ceil+0xfc>)
 801fde0:	4137      	asrs	r7, r6
 801fde2:	ea01 0307 	and.w	r3, r1, r7
 801fde6:	4303      	orrs	r3, r0
 801fde8:	d01f      	beq.n	801fe2a <ceil+0x92>
 801fdea:	a327      	add	r3, pc, #156	; (adr r3, 801fe88 <ceil+0xf0>)
 801fdec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fdf0:	f7e0 fa54 	bl	800029c <__adddf3>
 801fdf4:	2200      	movs	r2, #0
 801fdf6:	2300      	movs	r3, #0
 801fdf8:	f7e0 fe96 	bl	8000b28 <__aeabi_dcmpgt>
 801fdfc:	2800      	cmp	r0, #0
 801fdfe:	d0eb      	beq.n	801fdd8 <ceil+0x40>
 801fe00:	2c00      	cmp	r4, #0
 801fe02:	bfc2      	ittt	gt
 801fe04:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 801fe08:	fa43 f606 	asrgt.w	r6, r3, r6
 801fe0c:	19a4      	addgt	r4, r4, r6
 801fe0e:	ea24 0407 	bic.w	r4, r4, r7
 801fe12:	2500      	movs	r5, #0
 801fe14:	e7e0      	b.n	801fdd8 <ceil+0x40>
 801fe16:	2e33      	cmp	r6, #51	; 0x33
 801fe18:	dd0b      	ble.n	801fe32 <ceil+0x9a>
 801fe1a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801fe1e:	d104      	bne.n	801fe2a <ceil+0x92>
 801fe20:	ee10 2a10 	vmov	r2, s0
 801fe24:	460b      	mov	r3, r1
 801fe26:	f7e0 fa39 	bl	800029c <__adddf3>
 801fe2a:	ec41 0b10 	vmov	d0, r0, r1
 801fe2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fe32:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801fe36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801fe3a:	fa23 f707 	lsr.w	r7, r3, r7
 801fe3e:	4207      	tst	r7, r0
 801fe40:	d0f3      	beq.n	801fe2a <ceil+0x92>
 801fe42:	a311      	add	r3, pc, #68	; (adr r3, 801fe88 <ceil+0xf0>)
 801fe44:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fe48:	f7e0 fa28 	bl	800029c <__adddf3>
 801fe4c:	2200      	movs	r2, #0
 801fe4e:	2300      	movs	r3, #0
 801fe50:	f7e0 fe6a 	bl	8000b28 <__aeabi_dcmpgt>
 801fe54:	2800      	cmp	r0, #0
 801fe56:	d0bf      	beq.n	801fdd8 <ceil+0x40>
 801fe58:	2c00      	cmp	r4, #0
 801fe5a:	dd02      	ble.n	801fe62 <ceil+0xca>
 801fe5c:	2e14      	cmp	r6, #20
 801fe5e:	d103      	bne.n	801fe68 <ceil+0xd0>
 801fe60:	3401      	adds	r4, #1
 801fe62:	ea25 0507 	bic.w	r5, r5, r7
 801fe66:	e7b7      	b.n	801fdd8 <ceil+0x40>
 801fe68:	2301      	movs	r3, #1
 801fe6a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801fe6e:	fa03 f606 	lsl.w	r6, r3, r6
 801fe72:	4435      	add	r5, r6
 801fe74:	4545      	cmp	r5, r8
 801fe76:	bf38      	it	cc
 801fe78:	18e4      	addcc	r4, r4, r3
 801fe7a:	e7f2      	b.n	801fe62 <ceil+0xca>
 801fe7c:	2500      	movs	r5, #0
 801fe7e:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801fe82:	e7a9      	b.n	801fdd8 <ceil+0x40>
 801fe84:	4625      	mov	r5, r4
 801fe86:	e7a7      	b.n	801fdd8 <ceil+0x40>
 801fe88:	8800759c 	.word	0x8800759c
 801fe8c:	7e37e43c 	.word	0x7e37e43c
 801fe90:	3ff00000 	.word	0x3ff00000
 801fe94:	000fffff 	.word	0x000fffff

0801fe98 <floor>:
 801fe98:	ec51 0b10 	vmov	r0, r1, d0
 801fe9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fea0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801fea4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801fea8:	2e13      	cmp	r6, #19
 801feaa:	460c      	mov	r4, r1
 801feac:	ee10 5a10 	vmov	r5, s0
 801feb0:	4680      	mov	r8, r0
 801feb2:	dc34      	bgt.n	801ff1e <floor+0x86>
 801feb4:	2e00      	cmp	r6, #0
 801feb6:	da16      	bge.n	801fee6 <floor+0x4e>
 801feb8:	a335      	add	r3, pc, #212	; (adr r3, 801ff90 <floor+0xf8>)
 801feba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801febe:	f7e0 f9ed 	bl	800029c <__adddf3>
 801fec2:	2200      	movs	r2, #0
 801fec4:	2300      	movs	r3, #0
 801fec6:	f7e0 fe2f 	bl	8000b28 <__aeabi_dcmpgt>
 801feca:	b148      	cbz	r0, 801fee0 <floor+0x48>
 801fecc:	2c00      	cmp	r4, #0
 801fece:	da59      	bge.n	801ff84 <floor+0xec>
 801fed0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801fed4:	4a30      	ldr	r2, [pc, #192]	; (801ff98 <floor+0x100>)
 801fed6:	432b      	orrs	r3, r5
 801fed8:	2500      	movs	r5, #0
 801feda:	42ab      	cmp	r3, r5
 801fedc:	bf18      	it	ne
 801fede:	4614      	movne	r4, r2
 801fee0:	4621      	mov	r1, r4
 801fee2:	4628      	mov	r0, r5
 801fee4:	e025      	b.n	801ff32 <floor+0x9a>
 801fee6:	4f2d      	ldr	r7, [pc, #180]	; (801ff9c <floor+0x104>)
 801fee8:	4137      	asrs	r7, r6
 801feea:	ea01 0307 	and.w	r3, r1, r7
 801feee:	4303      	orrs	r3, r0
 801fef0:	d01f      	beq.n	801ff32 <floor+0x9a>
 801fef2:	a327      	add	r3, pc, #156	; (adr r3, 801ff90 <floor+0xf8>)
 801fef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fef8:	f7e0 f9d0 	bl	800029c <__adddf3>
 801fefc:	2200      	movs	r2, #0
 801fefe:	2300      	movs	r3, #0
 801ff00:	f7e0 fe12 	bl	8000b28 <__aeabi_dcmpgt>
 801ff04:	2800      	cmp	r0, #0
 801ff06:	d0eb      	beq.n	801fee0 <floor+0x48>
 801ff08:	2c00      	cmp	r4, #0
 801ff0a:	bfbe      	ittt	lt
 801ff0c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801ff10:	fa43 f606 	asrlt.w	r6, r3, r6
 801ff14:	19a4      	addlt	r4, r4, r6
 801ff16:	ea24 0407 	bic.w	r4, r4, r7
 801ff1a:	2500      	movs	r5, #0
 801ff1c:	e7e0      	b.n	801fee0 <floor+0x48>
 801ff1e:	2e33      	cmp	r6, #51	; 0x33
 801ff20:	dd0b      	ble.n	801ff3a <floor+0xa2>
 801ff22:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801ff26:	d104      	bne.n	801ff32 <floor+0x9a>
 801ff28:	ee10 2a10 	vmov	r2, s0
 801ff2c:	460b      	mov	r3, r1
 801ff2e:	f7e0 f9b5 	bl	800029c <__adddf3>
 801ff32:	ec41 0b10 	vmov	d0, r0, r1
 801ff36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ff3a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801ff3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ff42:	fa23 f707 	lsr.w	r7, r3, r7
 801ff46:	4207      	tst	r7, r0
 801ff48:	d0f3      	beq.n	801ff32 <floor+0x9a>
 801ff4a:	a311      	add	r3, pc, #68	; (adr r3, 801ff90 <floor+0xf8>)
 801ff4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ff50:	f7e0 f9a4 	bl	800029c <__adddf3>
 801ff54:	2200      	movs	r2, #0
 801ff56:	2300      	movs	r3, #0
 801ff58:	f7e0 fde6 	bl	8000b28 <__aeabi_dcmpgt>
 801ff5c:	2800      	cmp	r0, #0
 801ff5e:	d0bf      	beq.n	801fee0 <floor+0x48>
 801ff60:	2c00      	cmp	r4, #0
 801ff62:	da02      	bge.n	801ff6a <floor+0xd2>
 801ff64:	2e14      	cmp	r6, #20
 801ff66:	d103      	bne.n	801ff70 <floor+0xd8>
 801ff68:	3401      	adds	r4, #1
 801ff6a:	ea25 0507 	bic.w	r5, r5, r7
 801ff6e:	e7b7      	b.n	801fee0 <floor+0x48>
 801ff70:	2301      	movs	r3, #1
 801ff72:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801ff76:	fa03 f606 	lsl.w	r6, r3, r6
 801ff7a:	4435      	add	r5, r6
 801ff7c:	4545      	cmp	r5, r8
 801ff7e:	bf38      	it	cc
 801ff80:	18e4      	addcc	r4, r4, r3
 801ff82:	e7f2      	b.n	801ff6a <floor+0xd2>
 801ff84:	2500      	movs	r5, #0
 801ff86:	462c      	mov	r4, r5
 801ff88:	e7aa      	b.n	801fee0 <floor+0x48>
 801ff8a:	bf00      	nop
 801ff8c:	f3af 8000 	nop.w
 801ff90:	8800759c 	.word	0x8800759c
 801ff94:	7e37e43c 	.word	0x7e37e43c
 801ff98:	bff00000 	.word	0xbff00000
 801ff9c:	000fffff 	.word	0x000fffff

0801ffa0 <abort>:
 801ffa0:	b508      	push	{r3, lr}
 801ffa2:	2006      	movs	r0, #6
 801ffa4:	f000 f94a 	bl	802023c <raise>
 801ffa8:	2001      	movs	r0, #1
 801ffaa:	f7f8 fdb7 	bl	8018b1c <_exit>
	...

0801ffb0 <__errno>:
 801ffb0:	4b01      	ldr	r3, [pc, #4]	; (801ffb8 <__errno+0x8>)
 801ffb2:	6818      	ldr	r0, [r3, #0]
 801ffb4:	4770      	bx	lr
 801ffb6:	bf00      	nop
 801ffb8:	200002e4 	.word	0x200002e4

0801ffbc <__libc_init_array>:
 801ffbc:	b570      	push	{r4, r5, r6, lr}
 801ffbe:	4e0d      	ldr	r6, [pc, #52]	; (801fff4 <__libc_init_array+0x38>)
 801ffc0:	4c0d      	ldr	r4, [pc, #52]	; (801fff8 <__libc_init_array+0x3c>)
 801ffc2:	1ba4      	subs	r4, r4, r6
 801ffc4:	10a4      	asrs	r4, r4, #2
 801ffc6:	2500      	movs	r5, #0
 801ffc8:	42a5      	cmp	r5, r4
 801ffca:	d109      	bne.n	801ffe0 <__libc_init_array+0x24>
 801ffcc:	4e0b      	ldr	r6, [pc, #44]	; (801fffc <__libc_init_array+0x40>)
 801ffce:	4c0c      	ldr	r4, [pc, #48]	; (8020000 <__libc_init_array+0x44>)
 801ffd0:	f000 fc94 	bl	80208fc <_init>
 801ffd4:	1ba4      	subs	r4, r4, r6
 801ffd6:	10a4      	asrs	r4, r4, #2
 801ffd8:	2500      	movs	r5, #0
 801ffda:	42a5      	cmp	r5, r4
 801ffdc:	d105      	bne.n	801ffea <__libc_init_array+0x2e>
 801ffde:	bd70      	pop	{r4, r5, r6, pc}
 801ffe0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801ffe4:	4798      	blx	r3
 801ffe6:	3501      	adds	r5, #1
 801ffe8:	e7ee      	b.n	801ffc8 <__libc_init_array+0xc>
 801ffea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801ffee:	4798      	blx	r3
 801fff0:	3501      	adds	r5, #1
 801fff2:	e7f2      	b.n	801ffda <__libc_init_array+0x1e>
 801fff4:	08024ec4 	.word	0x08024ec4
 801fff8:	08024ec4 	.word	0x08024ec4
 801fffc:	08024ec4 	.word	0x08024ec4
 8020000:	08024ecc 	.word	0x08024ecc

08020004 <malloc>:
 8020004:	4b02      	ldr	r3, [pc, #8]	; (8020010 <malloc+0xc>)
 8020006:	4601      	mov	r1, r0
 8020008:	6818      	ldr	r0, [r3, #0]
 802000a:	f000 b885 	b.w	8020118 <_malloc_r>
 802000e:	bf00      	nop
 8020010:	200002e4 	.word	0x200002e4

08020014 <free>:
 8020014:	4b02      	ldr	r3, [pc, #8]	; (8020020 <free+0xc>)
 8020016:	4601      	mov	r1, r0
 8020018:	6818      	ldr	r0, [r3, #0]
 802001a:	f000 b82f 	b.w	802007c <_free_r>
 802001e:	bf00      	nop
 8020020:	200002e4 	.word	0x200002e4

08020024 <memcpy>:
 8020024:	b510      	push	{r4, lr}
 8020026:	1e43      	subs	r3, r0, #1
 8020028:	440a      	add	r2, r1
 802002a:	4291      	cmp	r1, r2
 802002c:	d100      	bne.n	8020030 <memcpy+0xc>
 802002e:	bd10      	pop	{r4, pc}
 8020030:	f811 4b01 	ldrb.w	r4, [r1], #1
 8020034:	f803 4f01 	strb.w	r4, [r3, #1]!
 8020038:	e7f7      	b.n	802002a <memcpy+0x6>

0802003a <memmove>:
 802003a:	4288      	cmp	r0, r1
 802003c:	b510      	push	{r4, lr}
 802003e:	eb01 0302 	add.w	r3, r1, r2
 8020042:	d807      	bhi.n	8020054 <memmove+0x1a>
 8020044:	1e42      	subs	r2, r0, #1
 8020046:	4299      	cmp	r1, r3
 8020048:	d00a      	beq.n	8020060 <memmove+0x26>
 802004a:	f811 4b01 	ldrb.w	r4, [r1], #1
 802004e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8020052:	e7f8      	b.n	8020046 <memmove+0xc>
 8020054:	4283      	cmp	r3, r0
 8020056:	d9f5      	bls.n	8020044 <memmove+0xa>
 8020058:	1881      	adds	r1, r0, r2
 802005a:	1ad2      	subs	r2, r2, r3
 802005c:	42d3      	cmn	r3, r2
 802005e:	d100      	bne.n	8020062 <memmove+0x28>
 8020060:	bd10      	pop	{r4, pc}
 8020062:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8020066:	f801 4d01 	strb.w	r4, [r1, #-1]!
 802006a:	e7f7      	b.n	802005c <memmove+0x22>

0802006c <memset>:
 802006c:	4402      	add	r2, r0
 802006e:	4603      	mov	r3, r0
 8020070:	4293      	cmp	r3, r2
 8020072:	d100      	bne.n	8020076 <memset+0xa>
 8020074:	4770      	bx	lr
 8020076:	f803 1b01 	strb.w	r1, [r3], #1
 802007a:	e7f9      	b.n	8020070 <memset+0x4>

0802007c <_free_r>:
 802007c:	b538      	push	{r3, r4, r5, lr}
 802007e:	4605      	mov	r5, r0
 8020080:	2900      	cmp	r1, #0
 8020082:	d045      	beq.n	8020110 <_free_r+0x94>
 8020084:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020088:	1f0c      	subs	r4, r1, #4
 802008a:	2b00      	cmp	r3, #0
 802008c:	bfb8      	it	lt
 802008e:	18e4      	addlt	r4, r4, r3
 8020090:	f000 f92a 	bl	80202e8 <__malloc_lock>
 8020094:	4a1f      	ldr	r2, [pc, #124]	; (8020114 <_free_r+0x98>)
 8020096:	6813      	ldr	r3, [r2, #0]
 8020098:	4610      	mov	r0, r2
 802009a:	b933      	cbnz	r3, 80200aa <_free_r+0x2e>
 802009c:	6063      	str	r3, [r4, #4]
 802009e:	6014      	str	r4, [r2, #0]
 80200a0:	4628      	mov	r0, r5
 80200a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80200a6:	f000 b920 	b.w	80202ea <__malloc_unlock>
 80200aa:	42a3      	cmp	r3, r4
 80200ac:	d90c      	bls.n	80200c8 <_free_r+0x4c>
 80200ae:	6821      	ldr	r1, [r4, #0]
 80200b0:	1862      	adds	r2, r4, r1
 80200b2:	4293      	cmp	r3, r2
 80200b4:	bf04      	itt	eq
 80200b6:	681a      	ldreq	r2, [r3, #0]
 80200b8:	685b      	ldreq	r3, [r3, #4]
 80200ba:	6063      	str	r3, [r4, #4]
 80200bc:	bf04      	itt	eq
 80200be:	1852      	addeq	r2, r2, r1
 80200c0:	6022      	streq	r2, [r4, #0]
 80200c2:	6004      	str	r4, [r0, #0]
 80200c4:	e7ec      	b.n	80200a0 <_free_r+0x24>
 80200c6:	4613      	mov	r3, r2
 80200c8:	685a      	ldr	r2, [r3, #4]
 80200ca:	b10a      	cbz	r2, 80200d0 <_free_r+0x54>
 80200cc:	42a2      	cmp	r2, r4
 80200ce:	d9fa      	bls.n	80200c6 <_free_r+0x4a>
 80200d0:	6819      	ldr	r1, [r3, #0]
 80200d2:	1858      	adds	r0, r3, r1
 80200d4:	42a0      	cmp	r0, r4
 80200d6:	d10b      	bne.n	80200f0 <_free_r+0x74>
 80200d8:	6820      	ldr	r0, [r4, #0]
 80200da:	4401      	add	r1, r0
 80200dc:	1858      	adds	r0, r3, r1
 80200de:	4282      	cmp	r2, r0
 80200e0:	6019      	str	r1, [r3, #0]
 80200e2:	d1dd      	bne.n	80200a0 <_free_r+0x24>
 80200e4:	6810      	ldr	r0, [r2, #0]
 80200e6:	6852      	ldr	r2, [r2, #4]
 80200e8:	605a      	str	r2, [r3, #4]
 80200ea:	4401      	add	r1, r0
 80200ec:	6019      	str	r1, [r3, #0]
 80200ee:	e7d7      	b.n	80200a0 <_free_r+0x24>
 80200f0:	d902      	bls.n	80200f8 <_free_r+0x7c>
 80200f2:	230c      	movs	r3, #12
 80200f4:	602b      	str	r3, [r5, #0]
 80200f6:	e7d3      	b.n	80200a0 <_free_r+0x24>
 80200f8:	6820      	ldr	r0, [r4, #0]
 80200fa:	1821      	adds	r1, r4, r0
 80200fc:	428a      	cmp	r2, r1
 80200fe:	bf04      	itt	eq
 8020100:	6811      	ldreq	r1, [r2, #0]
 8020102:	6852      	ldreq	r2, [r2, #4]
 8020104:	6062      	str	r2, [r4, #4]
 8020106:	bf04      	itt	eq
 8020108:	1809      	addeq	r1, r1, r0
 802010a:	6021      	streq	r1, [r4, #0]
 802010c:	605c      	str	r4, [r3, #4]
 802010e:	e7c7      	b.n	80200a0 <_free_r+0x24>
 8020110:	bd38      	pop	{r3, r4, r5, pc}
 8020112:	bf00      	nop
 8020114:	20000374 	.word	0x20000374

08020118 <_malloc_r>:
 8020118:	b570      	push	{r4, r5, r6, lr}
 802011a:	1ccd      	adds	r5, r1, #3
 802011c:	f025 0503 	bic.w	r5, r5, #3
 8020120:	3508      	adds	r5, #8
 8020122:	2d0c      	cmp	r5, #12
 8020124:	bf38      	it	cc
 8020126:	250c      	movcc	r5, #12
 8020128:	2d00      	cmp	r5, #0
 802012a:	4606      	mov	r6, r0
 802012c:	db01      	blt.n	8020132 <_malloc_r+0x1a>
 802012e:	42a9      	cmp	r1, r5
 8020130:	d903      	bls.n	802013a <_malloc_r+0x22>
 8020132:	230c      	movs	r3, #12
 8020134:	6033      	str	r3, [r6, #0]
 8020136:	2000      	movs	r0, #0
 8020138:	bd70      	pop	{r4, r5, r6, pc}
 802013a:	f000 f8d5 	bl	80202e8 <__malloc_lock>
 802013e:	4a21      	ldr	r2, [pc, #132]	; (80201c4 <_malloc_r+0xac>)
 8020140:	6814      	ldr	r4, [r2, #0]
 8020142:	4621      	mov	r1, r4
 8020144:	b991      	cbnz	r1, 802016c <_malloc_r+0x54>
 8020146:	4c20      	ldr	r4, [pc, #128]	; (80201c8 <_malloc_r+0xb0>)
 8020148:	6823      	ldr	r3, [r4, #0]
 802014a:	b91b      	cbnz	r3, 8020154 <_malloc_r+0x3c>
 802014c:	4630      	mov	r0, r6
 802014e:	f000 f83d 	bl	80201cc <_sbrk_r>
 8020152:	6020      	str	r0, [r4, #0]
 8020154:	4629      	mov	r1, r5
 8020156:	4630      	mov	r0, r6
 8020158:	f000 f838 	bl	80201cc <_sbrk_r>
 802015c:	1c43      	adds	r3, r0, #1
 802015e:	d124      	bne.n	80201aa <_malloc_r+0x92>
 8020160:	230c      	movs	r3, #12
 8020162:	6033      	str	r3, [r6, #0]
 8020164:	4630      	mov	r0, r6
 8020166:	f000 f8c0 	bl	80202ea <__malloc_unlock>
 802016a:	e7e4      	b.n	8020136 <_malloc_r+0x1e>
 802016c:	680b      	ldr	r3, [r1, #0]
 802016e:	1b5b      	subs	r3, r3, r5
 8020170:	d418      	bmi.n	80201a4 <_malloc_r+0x8c>
 8020172:	2b0b      	cmp	r3, #11
 8020174:	d90f      	bls.n	8020196 <_malloc_r+0x7e>
 8020176:	600b      	str	r3, [r1, #0]
 8020178:	50cd      	str	r5, [r1, r3]
 802017a:	18cc      	adds	r4, r1, r3
 802017c:	4630      	mov	r0, r6
 802017e:	f000 f8b4 	bl	80202ea <__malloc_unlock>
 8020182:	f104 000b 	add.w	r0, r4, #11
 8020186:	1d23      	adds	r3, r4, #4
 8020188:	f020 0007 	bic.w	r0, r0, #7
 802018c:	1ac3      	subs	r3, r0, r3
 802018e:	d0d3      	beq.n	8020138 <_malloc_r+0x20>
 8020190:	425a      	negs	r2, r3
 8020192:	50e2      	str	r2, [r4, r3]
 8020194:	e7d0      	b.n	8020138 <_malloc_r+0x20>
 8020196:	428c      	cmp	r4, r1
 8020198:	684b      	ldr	r3, [r1, #4]
 802019a:	bf16      	itet	ne
 802019c:	6063      	strne	r3, [r4, #4]
 802019e:	6013      	streq	r3, [r2, #0]
 80201a0:	460c      	movne	r4, r1
 80201a2:	e7eb      	b.n	802017c <_malloc_r+0x64>
 80201a4:	460c      	mov	r4, r1
 80201a6:	6849      	ldr	r1, [r1, #4]
 80201a8:	e7cc      	b.n	8020144 <_malloc_r+0x2c>
 80201aa:	1cc4      	adds	r4, r0, #3
 80201ac:	f024 0403 	bic.w	r4, r4, #3
 80201b0:	42a0      	cmp	r0, r4
 80201b2:	d005      	beq.n	80201c0 <_malloc_r+0xa8>
 80201b4:	1a21      	subs	r1, r4, r0
 80201b6:	4630      	mov	r0, r6
 80201b8:	f000 f808 	bl	80201cc <_sbrk_r>
 80201bc:	3001      	adds	r0, #1
 80201be:	d0cf      	beq.n	8020160 <_malloc_r+0x48>
 80201c0:	6025      	str	r5, [r4, #0]
 80201c2:	e7db      	b.n	802017c <_malloc_r+0x64>
 80201c4:	20000374 	.word	0x20000374
 80201c8:	20000378 	.word	0x20000378

080201cc <_sbrk_r>:
 80201cc:	b538      	push	{r3, r4, r5, lr}
 80201ce:	4c06      	ldr	r4, [pc, #24]	; (80201e8 <_sbrk_r+0x1c>)
 80201d0:	2300      	movs	r3, #0
 80201d2:	4605      	mov	r5, r0
 80201d4:	4608      	mov	r0, r1
 80201d6:	6023      	str	r3, [r4, #0]
 80201d8:	f7f8 fcaa 	bl	8018b30 <_sbrk>
 80201dc:	1c43      	adds	r3, r0, #1
 80201de:	d102      	bne.n	80201e6 <_sbrk_r+0x1a>
 80201e0:	6823      	ldr	r3, [r4, #0]
 80201e2:	b103      	cbz	r3, 80201e6 <_sbrk_r+0x1a>
 80201e4:	602b      	str	r3, [r5, #0]
 80201e6:	bd38      	pop	{r3, r4, r5, pc}
 80201e8:	20000b98 	.word	0x20000b98

080201ec <_raise_r>:
 80201ec:	291f      	cmp	r1, #31
 80201ee:	b538      	push	{r3, r4, r5, lr}
 80201f0:	4604      	mov	r4, r0
 80201f2:	460d      	mov	r5, r1
 80201f4:	d904      	bls.n	8020200 <_raise_r+0x14>
 80201f6:	2316      	movs	r3, #22
 80201f8:	6003      	str	r3, [r0, #0]
 80201fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80201fe:	bd38      	pop	{r3, r4, r5, pc}
 8020200:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8020202:	b112      	cbz	r2, 802020a <_raise_r+0x1e>
 8020204:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8020208:	b94b      	cbnz	r3, 802021e <_raise_r+0x32>
 802020a:	4620      	mov	r0, r4
 802020c:	f000 f830 	bl	8020270 <_getpid_r>
 8020210:	462a      	mov	r2, r5
 8020212:	4601      	mov	r1, r0
 8020214:	4620      	mov	r0, r4
 8020216:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802021a:	f000 b817 	b.w	802024c <_kill_r>
 802021e:	2b01      	cmp	r3, #1
 8020220:	d00a      	beq.n	8020238 <_raise_r+0x4c>
 8020222:	1c59      	adds	r1, r3, #1
 8020224:	d103      	bne.n	802022e <_raise_r+0x42>
 8020226:	2316      	movs	r3, #22
 8020228:	6003      	str	r3, [r0, #0]
 802022a:	2001      	movs	r0, #1
 802022c:	e7e7      	b.n	80201fe <_raise_r+0x12>
 802022e:	2400      	movs	r4, #0
 8020230:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8020234:	4628      	mov	r0, r5
 8020236:	4798      	blx	r3
 8020238:	2000      	movs	r0, #0
 802023a:	e7e0      	b.n	80201fe <_raise_r+0x12>

0802023c <raise>:
 802023c:	4b02      	ldr	r3, [pc, #8]	; (8020248 <raise+0xc>)
 802023e:	4601      	mov	r1, r0
 8020240:	6818      	ldr	r0, [r3, #0]
 8020242:	f7ff bfd3 	b.w	80201ec <_raise_r>
 8020246:	bf00      	nop
 8020248:	200002e4 	.word	0x200002e4

0802024c <_kill_r>:
 802024c:	b538      	push	{r3, r4, r5, lr}
 802024e:	4c07      	ldr	r4, [pc, #28]	; (802026c <_kill_r+0x20>)
 8020250:	2300      	movs	r3, #0
 8020252:	4605      	mov	r5, r0
 8020254:	4608      	mov	r0, r1
 8020256:	4611      	mov	r1, r2
 8020258:	6023      	str	r3, [r4, #0]
 802025a:	f7f8 fc4f 	bl	8018afc <_kill>
 802025e:	1c43      	adds	r3, r0, #1
 8020260:	d102      	bne.n	8020268 <_kill_r+0x1c>
 8020262:	6823      	ldr	r3, [r4, #0]
 8020264:	b103      	cbz	r3, 8020268 <_kill_r+0x1c>
 8020266:	602b      	str	r3, [r5, #0]
 8020268:	bd38      	pop	{r3, r4, r5, pc}
 802026a:	bf00      	nop
 802026c:	20000b98 	.word	0x20000b98

08020270 <_getpid_r>:
 8020270:	f7f8 bc3c 	b.w	8018aec <_getpid>

08020274 <_vsniprintf_r>:
 8020274:	b530      	push	{r4, r5, lr}
 8020276:	1e14      	subs	r4, r2, #0
 8020278:	4605      	mov	r5, r0
 802027a:	b09b      	sub	sp, #108	; 0x6c
 802027c:	4618      	mov	r0, r3
 802027e:	da05      	bge.n	802028c <_vsniprintf_r+0x18>
 8020280:	238b      	movs	r3, #139	; 0x8b
 8020282:	602b      	str	r3, [r5, #0]
 8020284:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020288:	b01b      	add	sp, #108	; 0x6c
 802028a:	bd30      	pop	{r4, r5, pc}
 802028c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8020290:	f8ad 300c 	strh.w	r3, [sp, #12]
 8020294:	bf14      	ite	ne
 8020296:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 802029a:	4623      	moveq	r3, r4
 802029c:	9302      	str	r3, [sp, #8]
 802029e:	9305      	str	r3, [sp, #20]
 80202a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80202a4:	9100      	str	r1, [sp, #0]
 80202a6:	9104      	str	r1, [sp, #16]
 80202a8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80202ac:	4602      	mov	r2, r0
 80202ae:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80202b0:	4669      	mov	r1, sp
 80202b2:	4628      	mov	r0, r5
 80202b4:	f000 f874 	bl	80203a0 <_svfiprintf_r>
 80202b8:	1c43      	adds	r3, r0, #1
 80202ba:	bfbc      	itt	lt
 80202bc:	238b      	movlt	r3, #139	; 0x8b
 80202be:	602b      	strlt	r3, [r5, #0]
 80202c0:	2c00      	cmp	r4, #0
 80202c2:	d0e1      	beq.n	8020288 <_vsniprintf_r+0x14>
 80202c4:	9b00      	ldr	r3, [sp, #0]
 80202c6:	2200      	movs	r2, #0
 80202c8:	701a      	strb	r2, [r3, #0]
 80202ca:	e7dd      	b.n	8020288 <_vsniprintf_r+0x14>

080202cc <vsniprintf>:
 80202cc:	b507      	push	{r0, r1, r2, lr}
 80202ce:	9300      	str	r3, [sp, #0]
 80202d0:	4613      	mov	r3, r2
 80202d2:	460a      	mov	r2, r1
 80202d4:	4601      	mov	r1, r0
 80202d6:	4803      	ldr	r0, [pc, #12]	; (80202e4 <vsniprintf+0x18>)
 80202d8:	6800      	ldr	r0, [r0, #0]
 80202da:	f7ff ffcb 	bl	8020274 <_vsniprintf_r>
 80202de:	b003      	add	sp, #12
 80202e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80202e4:	200002e4 	.word	0x200002e4

080202e8 <__malloc_lock>:
 80202e8:	4770      	bx	lr

080202ea <__malloc_unlock>:
 80202ea:	4770      	bx	lr

080202ec <__ssputs_r>:
 80202ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80202f0:	688e      	ldr	r6, [r1, #8]
 80202f2:	429e      	cmp	r6, r3
 80202f4:	4682      	mov	sl, r0
 80202f6:	460c      	mov	r4, r1
 80202f8:	4690      	mov	r8, r2
 80202fa:	4699      	mov	r9, r3
 80202fc:	d837      	bhi.n	802036e <__ssputs_r+0x82>
 80202fe:	898a      	ldrh	r2, [r1, #12]
 8020300:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8020304:	d031      	beq.n	802036a <__ssputs_r+0x7e>
 8020306:	6825      	ldr	r5, [r4, #0]
 8020308:	6909      	ldr	r1, [r1, #16]
 802030a:	1a6f      	subs	r7, r5, r1
 802030c:	6965      	ldr	r5, [r4, #20]
 802030e:	2302      	movs	r3, #2
 8020310:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020314:	fb95 f5f3 	sdiv	r5, r5, r3
 8020318:	f109 0301 	add.w	r3, r9, #1
 802031c:	443b      	add	r3, r7
 802031e:	429d      	cmp	r5, r3
 8020320:	bf38      	it	cc
 8020322:	461d      	movcc	r5, r3
 8020324:	0553      	lsls	r3, r2, #21
 8020326:	d530      	bpl.n	802038a <__ssputs_r+0x9e>
 8020328:	4629      	mov	r1, r5
 802032a:	f7ff fef5 	bl	8020118 <_malloc_r>
 802032e:	4606      	mov	r6, r0
 8020330:	b950      	cbnz	r0, 8020348 <__ssputs_r+0x5c>
 8020332:	230c      	movs	r3, #12
 8020334:	f8ca 3000 	str.w	r3, [sl]
 8020338:	89a3      	ldrh	r3, [r4, #12]
 802033a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802033e:	81a3      	strh	r3, [r4, #12]
 8020340:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020348:	463a      	mov	r2, r7
 802034a:	6921      	ldr	r1, [r4, #16]
 802034c:	f7ff fe6a 	bl	8020024 <memcpy>
 8020350:	89a3      	ldrh	r3, [r4, #12]
 8020352:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8020356:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802035a:	81a3      	strh	r3, [r4, #12]
 802035c:	6126      	str	r6, [r4, #16]
 802035e:	6165      	str	r5, [r4, #20]
 8020360:	443e      	add	r6, r7
 8020362:	1bed      	subs	r5, r5, r7
 8020364:	6026      	str	r6, [r4, #0]
 8020366:	60a5      	str	r5, [r4, #8]
 8020368:	464e      	mov	r6, r9
 802036a:	454e      	cmp	r6, r9
 802036c:	d900      	bls.n	8020370 <__ssputs_r+0x84>
 802036e:	464e      	mov	r6, r9
 8020370:	4632      	mov	r2, r6
 8020372:	4641      	mov	r1, r8
 8020374:	6820      	ldr	r0, [r4, #0]
 8020376:	f7ff fe60 	bl	802003a <memmove>
 802037a:	68a3      	ldr	r3, [r4, #8]
 802037c:	1b9b      	subs	r3, r3, r6
 802037e:	60a3      	str	r3, [r4, #8]
 8020380:	6823      	ldr	r3, [r4, #0]
 8020382:	441e      	add	r6, r3
 8020384:	6026      	str	r6, [r4, #0]
 8020386:	2000      	movs	r0, #0
 8020388:	e7dc      	b.n	8020344 <__ssputs_r+0x58>
 802038a:	462a      	mov	r2, r5
 802038c:	f000 fa88 	bl	80208a0 <_realloc_r>
 8020390:	4606      	mov	r6, r0
 8020392:	2800      	cmp	r0, #0
 8020394:	d1e2      	bne.n	802035c <__ssputs_r+0x70>
 8020396:	6921      	ldr	r1, [r4, #16]
 8020398:	4650      	mov	r0, sl
 802039a:	f7ff fe6f 	bl	802007c <_free_r>
 802039e:	e7c8      	b.n	8020332 <__ssputs_r+0x46>

080203a0 <_svfiprintf_r>:
 80203a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80203a4:	461d      	mov	r5, r3
 80203a6:	898b      	ldrh	r3, [r1, #12]
 80203a8:	061f      	lsls	r7, r3, #24
 80203aa:	b09d      	sub	sp, #116	; 0x74
 80203ac:	4680      	mov	r8, r0
 80203ae:	460c      	mov	r4, r1
 80203b0:	4616      	mov	r6, r2
 80203b2:	d50f      	bpl.n	80203d4 <_svfiprintf_r+0x34>
 80203b4:	690b      	ldr	r3, [r1, #16]
 80203b6:	b96b      	cbnz	r3, 80203d4 <_svfiprintf_r+0x34>
 80203b8:	2140      	movs	r1, #64	; 0x40
 80203ba:	f7ff fead 	bl	8020118 <_malloc_r>
 80203be:	6020      	str	r0, [r4, #0]
 80203c0:	6120      	str	r0, [r4, #16]
 80203c2:	b928      	cbnz	r0, 80203d0 <_svfiprintf_r+0x30>
 80203c4:	230c      	movs	r3, #12
 80203c6:	f8c8 3000 	str.w	r3, [r8]
 80203ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80203ce:	e0c8      	b.n	8020562 <_svfiprintf_r+0x1c2>
 80203d0:	2340      	movs	r3, #64	; 0x40
 80203d2:	6163      	str	r3, [r4, #20]
 80203d4:	2300      	movs	r3, #0
 80203d6:	9309      	str	r3, [sp, #36]	; 0x24
 80203d8:	2320      	movs	r3, #32
 80203da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80203de:	2330      	movs	r3, #48	; 0x30
 80203e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80203e4:	9503      	str	r5, [sp, #12]
 80203e6:	f04f 0b01 	mov.w	fp, #1
 80203ea:	4637      	mov	r7, r6
 80203ec:	463d      	mov	r5, r7
 80203ee:	f815 3b01 	ldrb.w	r3, [r5], #1
 80203f2:	b10b      	cbz	r3, 80203f8 <_svfiprintf_r+0x58>
 80203f4:	2b25      	cmp	r3, #37	; 0x25
 80203f6:	d13e      	bne.n	8020476 <_svfiprintf_r+0xd6>
 80203f8:	ebb7 0a06 	subs.w	sl, r7, r6
 80203fc:	d00b      	beq.n	8020416 <_svfiprintf_r+0x76>
 80203fe:	4653      	mov	r3, sl
 8020400:	4632      	mov	r2, r6
 8020402:	4621      	mov	r1, r4
 8020404:	4640      	mov	r0, r8
 8020406:	f7ff ff71 	bl	80202ec <__ssputs_r>
 802040a:	3001      	adds	r0, #1
 802040c:	f000 80a4 	beq.w	8020558 <_svfiprintf_r+0x1b8>
 8020410:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020412:	4453      	add	r3, sl
 8020414:	9309      	str	r3, [sp, #36]	; 0x24
 8020416:	783b      	ldrb	r3, [r7, #0]
 8020418:	2b00      	cmp	r3, #0
 802041a:	f000 809d 	beq.w	8020558 <_svfiprintf_r+0x1b8>
 802041e:	2300      	movs	r3, #0
 8020420:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8020424:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8020428:	9304      	str	r3, [sp, #16]
 802042a:	9307      	str	r3, [sp, #28]
 802042c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8020430:	931a      	str	r3, [sp, #104]	; 0x68
 8020432:	462f      	mov	r7, r5
 8020434:	2205      	movs	r2, #5
 8020436:	f817 1b01 	ldrb.w	r1, [r7], #1
 802043a:	4850      	ldr	r0, [pc, #320]	; (802057c <_svfiprintf_r+0x1dc>)
 802043c:	f7df fed0 	bl	80001e0 <memchr>
 8020440:	9b04      	ldr	r3, [sp, #16]
 8020442:	b9d0      	cbnz	r0, 802047a <_svfiprintf_r+0xda>
 8020444:	06d9      	lsls	r1, r3, #27
 8020446:	bf44      	itt	mi
 8020448:	2220      	movmi	r2, #32
 802044a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 802044e:	071a      	lsls	r2, r3, #28
 8020450:	bf44      	itt	mi
 8020452:	222b      	movmi	r2, #43	; 0x2b
 8020454:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8020458:	782a      	ldrb	r2, [r5, #0]
 802045a:	2a2a      	cmp	r2, #42	; 0x2a
 802045c:	d015      	beq.n	802048a <_svfiprintf_r+0xea>
 802045e:	9a07      	ldr	r2, [sp, #28]
 8020460:	462f      	mov	r7, r5
 8020462:	2000      	movs	r0, #0
 8020464:	250a      	movs	r5, #10
 8020466:	4639      	mov	r1, r7
 8020468:	f811 3b01 	ldrb.w	r3, [r1], #1
 802046c:	3b30      	subs	r3, #48	; 0x30
 802046e:	2b09      	cmp	r3, #9
 8020470:	d94d      	bls.n	802050e <_svfiprintf_r+0x16e>
 8020472:	b1b8      	cbz	r0, 80204a4 <_svfiprintf_r+0x104>
 8020474:	e00f      	b.n	8020496 <_svfiprintf_r+0xf6>
 8020476:	462f      	mov	r7, r5
 8020478:	e7b8      	b.n	80203ec <_svfiprintf_r+0x4c>
 802047a:	4a40      	ldr	r2, [pc, #256]	; (802057c <_svfiprintf_r+0x1dc>)
 802047c:	1a80      	subs	r0, r0, r2
 802047e:	fa0b f000 	lsl.w	r0, fp, r0
 8020482:	4318      	orrs	r0, r3
 8020484:	9004      	str	r0, [sp, #16]
 8020486:	463d      	mov	r5, r7
 8020488:	e7d3      	b.n	8020432 <_svfiprintf_r+0x92>
 802048a:	9a03      	ldr	r2, [sp, #12]
 802048c:	1d11      	adds	r1, r2, #4
 802048e:	6812      	ldr	r2, [r2, #0]
 8020490:	9103      	str	r1, [sp, #12]
 8020492:	2a00      	cmp	r2, #0
 8020494:	db01      	blt.n	802049a <_svfiprintf_r+0xfa>
 8020496:	9207      	str	r2, [sp, #28]
 8020498:	e004      	b.n	80204a4 <_svfiprintf_r+0x104>
 802049a:	4252      	negs	r2, r2
 802049c:	f043 0302 	orr.w	r3, r3, #2
 80204a0:	9207      	str	r2, [sp, #28]
 80204a2:	9304      	str	r3, [sp, #16]
 80204a4:	783b      	ldrb	r3, [r7, #0]
 80204a6:	2b2e      	cmp	r3, #46	; 0x2e
 80204a8:	d10c      	bne.n	80204c4 <_svfiprintf_r+0x124>
 80204aa:	787b      	ldrb	r3, [r7, #1]
 80204ac:	2b2a      	cmp	r3, #42	; 0x2a
 80204ae:	d133      	bne.n	8020518 <_svfiprintf_r+0x178>
 80204b0:	9b03      	ldr	r3, [sp, #12]
 80204b2:	1d1a      	adds	r2, r3, #4
 80204b4:	681b      	ldr	r3, [r3, #0]
 80204b6:	9203      	str	r2, [sp, #12]
 80204b8:	2b00      	cmp	r3, #0
 80204ba:	bfb8      	it	lt
 80204bc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80204c0:	3702      	adds	r7, #2
 80204c2:	9305      	str	r3, [sp, #20]
 80204c4:	4d2e      	ldr	r5, [pc, #184]	; (8020580 <_svfiprintf_r+0x1e0>)
 80204c6:	7839      	ldrb	r1, [r7, #0]
 80204c8:	2203      	movs	r2, #3
 80204ca:	4628      	mov	r0, r5
 80204cc:	f7df fe88 	bl	80001e0 <memchr>
 80204d0:	b138      	cbz	r0, 80204e2 <_svfiprintf_r+0x142>
 80204d2:	2340      	movs	r3, #64	; 0x40
 80204d4:	1b40      	subs	r0, r0, r5
 80204d6:	fa03 f000 	lsl.w	r0, r3, r0
 80204da:	9b04      	ldr	r3, [sp, #16]
 80204dc:	4303      	orrs	r3, r0
 80204de:	3701      	adds	r7, #1
 80204e0:	9304      	str	r3, [sp, #16]
 80204e2:	7839      	ldrb	r1, [r7, #0]
 80204e4:	4827      	ldr	r0, [pc, #156]	; (8020584 <_svfiprintf_r+0x1e4>)
 80204e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80204ea:	2206      	movs	r2, #6
 80204ec:	1c7e      	adds	r6, r7, #1
 80204ee:	f7df fe77 	bl	80001e0 <memchr>
 80204f2:	2800      	cmp	r0, #0
 80204f4:	d038      	beq.n	8020568 <_svfiprintf_r+0x1c8>
 80204f6:	4b24      	ldr	r3, [pc, #144]	; (8020588 <_svfiprintf_r+0x1e8>)
 80204f8:	bb13      	cbnz	r3, 8020540 <_svfiprintf_r+0x1a0>
 80204fa:	9b03      	ldr	r3, [sp, #12]
 80204fc:	3307      	adds	r3, #7
 80204fe:	f023 0307 	bic.w	r3, r3, #7
 8020502:	3308      	adds	r3, #8
 8020504:	9303      	str	r3, [sp, #12]
 8020506:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020508:	444b      	add	r3, r9
 802050a:	9309      	str	r3, [sp, #36]	; 0x24
 802050c:	e76d      	b.n	80203ea <_svfiprintf_r+0x4a>
 802050e:	fb05 3202 	mla	r2, r5, r2, r3
 8020512:	2001      	movs	r0, #1
 8020514:	460f      	mov	r7, r1
 8020516:	e7a6      	b.n	8020466 <_svfiprintf_r+0xc6>
 8020518:	2300      	movs	r3, #0
 802051a:	3701      	adds	r7, #1
 802051c:	9305      	str	r3, [sp, #20]
 802051e:	4619      	mov	r1, r3
 8020520:	250a      	movs	r5, #10
 8020522:	4638      	mov	r0, r7
 8020524:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020528:	3a30      	subs	r2, #48	; 0x30
 802052a:	2a09      	cmp	r2, #9
 802052c:	d903      	bls.n	8020536 <_svfiprintf_r+0x196>
 802052e:	2b00      	cmp	r3, #0
 8020530:	d0c8      	beq.n	80204c4 <_svfiprintf_r+0x124>
 8020532:	9105      	str	r1, [sp, #20]
 8020534:	e7c6      	b.n	80204c4 <_svfiprintf_r+0x124>
 8020536:	fb05 2101 	mla	r1, r5, r1, r2
 802053a:	2301      	movs	r3, #1
 802053c:	4607      	mov	r7, r0
 802053e:	e7f0      	b.n	8020522 <_svfiprintf_r+0x182>
 8020540:	ab03      	add	r3, sp, #12
 8020542:	9300      	str	r3, [sp, #0]
 8020544:	4622      	mov	r2, r4
 8020546:	4b11      	ldr	r3, [pc, #68]	; (802058c <_svfiprintf_r+0x1ec>)
 8020548:	a904      	add	r1, sp, #16
 802054a:	4640      	mov	r0, r8
 802054c:	f3af 8000 	nop.w
 8020550:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8020554:	4681      	mov	r9, r0
 8020556:	d1d6      	bne.n	8020506 <_svfiprintf_r+0x166>
 8020558:	89a3      	ldrh	r3, [r4, #12]
 802055a:	065b      	lsls	r3, r3, #25
 802055c:	f53f af35 	bmi.w	80203ca <_svfiprintf_r+0x2a>
 8020560:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020562:	b01d      	add	sp, #116	; 0x74
 8020564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020568:	ab03      	add	r3, sp, #12
 802056a:	9300      	str	r3, [sp, #0]
 802056c:	4622      	mov	r2, r4
 802056e:	4b07      	ldr	r3, [pc, #28]	; (802058c <_svfiprintf_r+0x1ec>)
 8020570:	a904      	add	r1, sp, #16
 8020572:	4640      	mov	r0, r8
 8020574:	f000 f882 	bl	802067c <_printf_i>
 8020578:	e7ea      	b.n	8020550 <_svfiprintf_r+0x1b0>
 802057a:	bf00      	nop
 802057c:	08024e89 	.word	0x08024e89
 8020580:	08024e8f 	.word	0x08024e8f
 8020584:	08024e93 	.word	0x08024e93
 8020588:	00000000 	.word	0x00000000
 802058c:	080202ed 	.word	0x080202ed

08020590 <_printf_common>:
 8020590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020594:	4691      	mov	r9, r2
 8020596:	461f      	mov	r7, r3
 8020598:	688a      	ldr	r2, [r1, #8]
 802059a:	690b      	ldr	r3, [r1, #16]
 802059c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80205a0:	4293      	cmp	r3, r2
 80205a2:	bfb8      	it	lt
 80205a4:	4613      	movlt	r3, r2
 80205a6:	f8c9 3000 	str.w	r3, [r9]
 80205aa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80205ae:	4606      	mov	r6, r0
 80205b0:	460c      	mov	r4, r1
 80205b2:	b112      	cbz	r2, 80205ba <_printf_common+0x2a>
 80205b4:	3301      	adds	r3, #1
 80205b6:	f8c9 3000 	str.w	r3, [r9]
 80205ba:	6823      	ldr	r3, [r4, #0]
 80205bc:	0699      	lsls	r1, r3, #26
 80205be:	bf42      	ittt	mi
 80205c0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80205c4:	3302      	addmi	r3, #2
 80205c6:	f8c9 3000 	strmi.w	r3, [r9]
 80205ca:	6825      	ldr	r5, [r4, #0]
 80205cc:	f015 0506 	ands.w	r5, r5, #6
 80205d0:	d107      	bne.n	80205e2 <_printf_common+0x52>
 80205d2:	f104 0a19 	add.w	sl, r4, #25
 80205d6:	68e3      	ldr	r3, [r4, #12]
 80205d8:	f8d9 2000 	ldr.w	r2, [r9]
 80205dc:	1a9b      	subs	r3, r3, r2
 80205de:	42ab      	cmp	r3, r5
 80205e0:	dc28      	bgt.n	8020634 <_printf_common+0xa4>
 80205e2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80205e6:	6822      	ldr	r2, [r4, #0]
 80205e8:	3300      	adds	r3, #0
 80205ea:	bf18      	it	ne
 80205ec:	2301      	movne	r3, #1
 80205ee:	0692      	lsls	r2, r2, #26
 80205f0:	d42d      	bmi.n	802064e <_printf_common+0xbe>
 80205f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80205f6:	4639      	mov	r1, r7
 80205f8:	4630      	mov	r0, r6
 80205fa:	47c0      	blx	r8
 80205fc:	3001      	adds	r0, #1
 80205fe:	d020      	beq.n	8020642 <_printf_common+0xb2>
 8020600:	6823      	ldr	r3, [r4, #0]
 8020602:	68e5      	ldr	r5, [r4, #12]
 8020604:	f8d9 2000 	ldr.w	r2, [r9]
 8020608:	f003 0306 	and.w	r3, r3, #6
 802060c:	2b04      	cmp	r3, #4
 802060e:	bf08      	it	eq
 8020610:	1aad      	subeq	r5, r5, r2
 8020612:	68a3      	ldr	r3, [r4, #8]
 8020614:	6922      	ldr	r2, [r4, #16]
 8020616:	bf0c      	ite	eq
 8020618:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802061c:	2500      	movne	r5, #0
 802061e:	4293      	cmp	r3, r2
 8020620:	bfc4      	itt	gt
 8020622:	1a9b      	subgt	r3, r3, r2
 8020624:	18ed      	addgt	r5, r5, r3
 8020626:	f04f 0900 	mov.w	r9, #0
 802062a:	341a      	adds	r4, #26
 802062c:	454d      	cmp	r5, r9
 802062e:	d11a      	bne.n	8020666 <_printf_common+0xd6>
 8020630:	2000      	movs	r0, #0
 8020632:	e008      	b.n	8020646 <_printf_common+0xb6>
 8020634:	2301      	movs	r3, #1
 8020636:	4652      	mov	r2, sl
 8020638:	4639      	mov	r1, r7
 802063a:	4630      	mov	r0, r6
 802063c:	47c0      	blx	r8
 802063e:	3001      	adds	r0, #1
 8020640:	d103      	bne.n	802064a <_printf_common+0xba>
 8020642:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802064a:	3501      	adds	r5, #1
 802064c:	e7c3      	b.n	80205d6 <_printf_common+0x46>
 802064e:	18e1      	adds	r1, r4, r3
 8020650:	1c5a      	adds	r2, r3, #1
 8020652:	2030      	movs	r0, #48	; 0x30
 8020654:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8020658:	4422      	add	r2, r4
 802065a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802065e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8020662:	3302      	adds	r3, #2
 8020664:	e7c5      	b.n	80205f2 <_printf_common+0x62>
 8020666:	2301      	movs	r3, #1
 8020668:	4622      	mov	r2, r4
 802066a:	4639      	mov	r1, r7
 802066c:	4630      	mov	r0, r6
 802066e:	47c0      	blx	r8
 8020670:	3001      	adds	r0, #1
 8020672:	d0e6      	beq.n	8020642 <_printf_common+0xb2>
 8020674:	f109 0901 	add.w	r9, r9, #1
 8020678:	e7d8      	b.n	802062c <_printf_common+0x9c>
	...

0802067c <_printf_i>:
 802067c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020680:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8020684:	460c      	mov	r4, r1
 8020686:	7e09      	ldrb	r1, [r1, #24]
 8020688:	b085      	sub	sp, #20
 802068a:	296e      	cmp	r1, #110	; 0x6e
 802068c:	4617      	mov	r7, r2
 802068e:	4606      	mov	r6, r0
 8020690:	4698      	mov	r8, r3
 8020692:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020694:	f000 80b3 	beq.w	80207fe <_printf_i+0x182>
 8020698:	d822      	bhi.n	80206e0 <_printf_i+0x64>
 802069a:	2963      	cmp	r1, #99	; 0x63
 802069c:	d036      	beq.n	802070c <_printf_i+0x90>
 802069e:	d80a      	bhi.n	80206b6 <_printf_i+0x3a>
 80206a0:	2900      	cmp	r1, #0
 80206a2:	f000 80b9 	beq.w	8020818 <_printf_i+0x19c>
 80206a6:	2958      	cmp	r1, #88	; 0x58
 80206a8:	f000 8083 	beq.w	80207b2 <_printf_i+0x136>
 80206ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80206b0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80206b4:	e032      	b.n	802071c <_printf_i+0xa0>
 80206b6:	2964      	cmp	r1, #100	; 0x64
 80206b8:	d001      	beq.n	80206be <_printf_i+0x42>
 80206ba:	2969      	cmp	r1, #105	; 0x69
 80206bc:	d1f6      	bne.n	80206ac <_printf_i+0x30>
 80206be:	6820      	ldr	r0, [r4, #0]
 80206c0:	6813      	ldr	r3, [r2, #0]
 80206c2:	0605      	lsls	r5, r0, #24
 80206c4:	f103 0104 	add.w	r1, r3, #4
 80206c8:	d52a      	bpl.n	8020720 <_printf_i+0xa4>
 80206ca:	681b      	ldr	r3, [r3, #0]
 80206cc:	6011      	str	r1, [r2, #0]
 80206ce:	2b00      	cmp	r3, #0
 80206d0:	da03      	bge.n	80206da <_printf_i+0x5e>
 80206d2:	222d      	movs	r2, #45	; 0x2d
 80206d4:	425b      	negs	r3, r3
 80206d6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80206da:	486f      	ldr	r0, [pc, #444]	; (8020898 <_printf_i+0x21c>)
 80206dc:	220a      	movs	r2, #10
 80206de:	e039      	b.n	8020754 <_printf_i+0xd8>
 80206e0:	2973      	cmp	r1, #115	; 0x73
 80206e2:	f000 809d 	beq.w	8020820 <_printf_i+0x1a4>
 80206e6:	d808      	bhi.n	80206fa <_printf_i+0x7e>
 80206e8:	296f      	cmp	r1, #111	; 0x6f
 80206ea:	d020      	beq.n	802072e <_printf_i+0xb2>
 80206ec:	2970      	cmp	r1, #112	; 0x70
 80206ee:	d1dd      	bne.n	80206ac <_printf_i+0x30>
 80206f0:	6823      	ldr	r3, [r4, #0]
 80206f2:	f043 0320 	orr.w	r3, r3, #32
 80206f6:	6023      	str	r3, [r4, #0]
 80206f8:	e003      	b.n	8020702 <_printf_i+0x86>
 80206fa:	2975      	cmp	r1, #117	; 0x75
 80206fc:	d017      	beq.n	802072e <_printf_i+0xb2>
 80206fe:	2978      	cmp	r1, #120	; 0x78
 8020700:	d1d4      	bne.n	80206ac <_printf_i+0x30>
 8020702:	2378      	movs	r3, #120	; 0x78
 8020704:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8020708:	4864      	ldr	r0, [pc, #400]	; (802089c <_printf_i+0x220>)
 802070a:	e055      	b.n	80207b8 <_printf_i+0x13c>
 802070c:	6813      	ldr	r3, [r2, #0]
 802070e:	1d19      	adds	r1, r3, #4
 8020710:	681b      	ldr	r3, [r3, #0]
 8020712:	6011      	str	r1, [r2, #0]
 8020714:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8020718:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802071c:	2301      	movs	r3, #1
 802071e:	e08c      	b.n	802083a <_printf_i+0x1be>
 8020720:	681b      	ldr	r3, [r3, #0]
 8020722:	6011      	str	r1, [r2, #0]
 8020724:	f010 0f40 	tst.w	r0, #64	; 0x40
 8020728:	bf18      	it	ne
 802072a:	b21b      	sxthne	r3, r3
 802072c:	e7cf      	b.n	80206ce <_printf_i+0x52>
 802072e:	6813      	ldr	r3, [r2, #0]
 8020730:	6825      	ldr	r5, [r4, #0]
 8020732:	1d18      	adds	r0, r3, #4
 8020734:	6010      	str	r0, [r2, #0]
 8020736:	0628      	lsls	r0, r5, #24
 8020738:	d501      	bpl.n	802073e <_printf_i+0xc2>
 802073a:	681b      	ldr	r3, [r3, #0]
 802073c:	e002      	b.n	8020744 <_printf_i+0xc8>
 802073e:	0668      	lsls	r0, r5, #25
 8020740:	d5fb      	bpl.n	802073a <_printf_i+0xbe>
 8020742:	881b      	ldrh	r3, [r3, #0]
 8020744:	4854      	ldr	r0, [pc, #336]	; (8020898 <_printf_i+0x21c>)
 8020746:	296f      	cmp	r1, #111	; 0x6f
 8020748:	bf14      	ite	ne
 802074a:	220a      	movne	r2, #10
 802074c:	2208      	moveq	r2, #8
 802074e:	2100      	movs	r1, #0
 8020750:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8020754:	6865      	ldr	r5, [r4, #4]
 8020756:	60a5      	str	r5, [r4, #8]
 8020758:	2d00      	cmp	r5, #0
 802075a:	f2c0 8095 	blt.w	8020888 <_printf_i+0x20c>
 802075e:	6821      	ldr	r1, [r4, #0]
 8020760:	f021 0104 	bic.w	r1, r1, #4
 8020764:	6021      	str	r1, [r4, #0]
 8020766:	2b00      	cmp	r3, #0
 8020768:	d13d      	bne.n	80207e6 <_printf_i+0x16a>
 802076a:	2d00      	cmp	r5, #0
 802076c:	f040 808e 	bne.w	802088c <_printf_i+0x210>
 8020770:	4665      	mov	r5, ip
 8020772:	2a08      	cmp	r2, #8
 8020774:	d10b      	bne.n	802078e <_printf_i+0x112>
 8020776:	6823      	ldr	r3, [r4, #0]
 8020778:	07db      	lsls	r3, r3, #31
 802077a:	d508      	bpl.n	802078e <_printf_i+0x112>
 802077c:	6923      	ldr	r3, [r4, #16]
 802077e:	6862      	ldr	r2, [r4, #4]
 8020780:	429a      	cmp	r2, r3
 8020782:	bfde      	ittt	le
 8020784:	2330      	movle	r3, #48	; 0x30
 8020786:	f805 3c01 	strble.w	r3, [r5, #-1]
 802078a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 802078e:	ebac 0305 	sub.w	r3, ip, r5
 8020792:	6123      	str	r3, [r4, #16]
 8020794:	f8cd 8000 	str.w	r8, [sp]
 8020798:	463b      	mov	r3, r7
 802079a:	aa03      	add	r2, sp, #12
 802079c:	4621      	mov	r1, r4
 802079e:	4630      	mov	r0, r6
 80207a0:	f7ff fef6 	bl	8020590 <_printf_common>
 80207a4:	3001      	adds	r0, #1
 80207a6:	d14d      	bne.n	8020844 <_printf_i+0x1c8>
 80207a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80207ac:	b005      	add	sp, #20
 80207ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80207b2:	4839      	ldr	r0, [pc, #228]	; (8020898 <_printf_i+0x21c>)
 80207b4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80207b8:	6813      	ldr	r3, [r2, #0]
 80207ba:	6821      	ldr	r1, [r4, #0]
 80207bc:	1d1d      	adds	r5, r3, #4
 80207be:	681b      	ldr	r3, [r3, #0]
 80207c0:	6015      	str	r5, [r2, #0]
 80207c2:	060a      	lsls	r2, r1, #24
 80207c4:	d50b      	bpl.n	80207de <_printf_i+0x162>
 80207c6:	07ca      	lsls	r2, r1, #31
 80207c8:	bf44      	itt	mi
 80207ca:	f041 0120 	orrmi.w	r1, r1, #32
 80207ce:	6021      	strmi	r1, [r4, #0]
 80207d0:	b91b      	cbnz	r3, 80207da <_printf_i+0x15e>
 80207d2:	6822      	ldr	r2, [r4, #0]
 80207d4:	f022 0220 	bic.w	r2, r2, #32
 80207d8:	6022      	str	r2, [r4, #0]
 80207da:	2210      	movs	r2, #16
 80207dc:	e7b7      	b.n	802074e <_printf_i+0xd2>
 80207de:	064d      	lsls	r5, r1, #25
 80207e0:	bf48      	it	mi
 80207e2:	b29b      	uxthmi	r3, r3
 80207e4:	e7ef      	b.n	80207c6 <_printf_i+0x14a>
 80207e6:	4665      	mov	r5, ip
 80207e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80207ec:	fb02 3311 	mls	r3, r2, r1, r3
 80207f0:	5cc3      	ldrb	r3, [r0, r3]
 80207f2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80207f6:	460b      	mov	r3, r1
 80207f8:	2900      	cmp	r1, #0
 80207fa:	d1f5      	bne.n	80207e8 <_printf_i+0x16c>
 80207fc:	e7b9      	b.n	8020772 <_printf_i+0xf6>
 80207fe:	6813      	ldr	r3, [r2, #0]
 8020800:	6825      	ldr	r5, [r4, #0]
 8020802:	6961      	ldr	r1, [r4, #20]
 8020804:	1d18      	adds	r0, r3, #4
 8020806:	6010      	str	r0, [r2, #0]
 8020808:	0628      	lsls	r0, r5, #24
 802080a:	681b      	ldr	r3, [r3, #0]
 802080c:	d501      	bpl.n	8020812 <_printf_i+0x196>
 802080e:	6019      	str	r1, [r3, #0]
 8020810:	e002      	b.n	8020818 <_printf_i+0x19c>
 8020812:	066a      	lsls	r2, r5, #25
 8020814:	d5fb      	bpl.n	802080e <_printf_i+0x192>
 8020816:	8019      	strh	r1, [r3, #0]
 8020818:	2300      	movs	r3, #0
 802081a:	6123      	str	r3, [r4, #16]
 802081c:	4665      	mov	r5, ip
 802081e:	e7b9      	b.n	8020794 <_printf_i+0x118>
 8020820:	6813      	ldr	r3, [r2, #0]
 8020822:	1d19      	adds	r1, r3, #4
 8020824:	6011      	str	r1, [r2, #0]
 8020826:	681d      	ldr	r5, [r3, #0]
 8020828:	6862      	ldr	r2, [r4, #4]
 802082a:	2100      	movs	r1, #0
 802082c:	4628      	mov	r0, r5
 802082e:	f7df fcd7 	bl	80001e0 <memchr>
 8020832:	b108      	cbz	r0, 8020838 <_printf_i+0x1bc>
 8020834:	1b40      	subs	r0, r0, r5
 8020836:	6060      	str	r0, [r4, #4]
 8020838:	6863      	ldr	r3, [r4, #4]
 802083a:	6123      	str	r3, [r4, #16]
 802083c:	2300      	movs	r3, #0
 802083e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8020842:	e7a7      	b.n	8020794 <_printf_i+0x118>
 8020844:	6923      	ldr	r3, [r4, #16]
 8020846:	462a      	mov	r2, r5
 8020848:	4639      	mov	r1, r7
 802084a:	4630      	mov	r0, r6
 802084c:	47c0      	blx	r8
 802084e:	3001      	adds	r0, #1
 8020850:	d0aa      	beq.n	80207a8 <_printf_i+0x12c>
 8020852:	6823      	ldr	r3, [r4, #0]
 8020854:	079b      	lsls	r3, r3, #30
 8020856:	d413      	bmi.n	8020880 <_printf_i+0x204>
 8020858:	68e0      	ldr	r0, [r4, #12]
 802085a:	9b03      	ldr	r3, [sp, #12]
 802085c:	4298      	cmp	r0, r3
 802085e:	bfb8      	it	lt
 8020860:	4618      	movlt	r0, r3
 8020862:	e7a3      	b.n	80207ac <_printf_i+0x130>
 8020864:	2301      	movs	r3, #1
 8020866:	464a      	mov	r2, r9
 8020868:	4639      	mov	r1, r7
 802086a:	4630      	mov	r0, r6
 802086c:	47c0      	blx	r8
 802086e:	3001      	adds	r0, #1
 8020870:	d09a      	beq.n	80207a8 <_printf_i+0x12c>
 8020872:	3501      	adds	r5, #1
 8020874:	68e3      	ldr	r3, [r4, #12]
 8020876:	9a03      	ldr	r2, [sp, #12]
 8020878:	1a9b      	subs	r3, r3, r2
 802087a:	42ab      	cmp	r3, r5
 802087c:	dcf2      	bgt.n	8020864 <_printf_i+0x1e8>
 802087e:	e7eb      	b.n	8020858 <_printf_i+0x1dc>
 8020880:	2500      	movs	r5, #0
 8020882:	f104 0919 	add.w	r9, r4, #25
 8020886:	e7f5      	b.n	8020874 <_printf_i+0x1f8>
 8020888:	2b00      	cmp	r3, #0
 802088a:	d1ac      	bne.n	80207e6 <_printf_i+0x16a>
 802088c:	7803      	ldrb	r3, [r0, #0]
 802088e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8020892:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8020896:	e76c      	b.n	8020772 <_printf_i+0xf6>
 8020898:	08024e9a 	.word	0x08024e9a
 802089c:	08024eab 	.word	0x08024eab

080208a0 <_realloc_r>:
 80208a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80208a2:	4607      	mov	r7, r0
 80208a4:	4614      	mov	r4, r2
 80208a6:	460e      	mov	r6, r1
 80208a8:	b921      	cbnz	r1, 80208b4 <_realloc_r+0x14>
 80208aa:	4611      	mov	r1, r2
 80208ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80208b0:	f7ff bc32 	b.w	8020118 <_malloc_r>
 80208b4:	b922      	cbnz	r2, 80208c0 <_realloc_r+0x20>
 80208b6:	f7ff fbe1 	bl	802007c <_free_r>
 80208ba:	4625      	mov	r5, r4
 80208bc:	4628      	mov	r0, r5
 80208be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80208c0:	f000 f814 	bl	80208ec <_malloc_usable_size_r>
 80208c4:	42a0      	cmp	r0, r4
 80208c6:	d20f      	bcs.n	80208e8 <_realloc_r+0x48>
 80208c8:	4621      	mov	r1, r4
 80208ca:	4638      	mov	r0, r7
 80208cc:	f7ff fc24 	bl	8020118 <_malloc_r>
 80208d0:	4605      	mov	r5, r0
 80208d2:	2800      	cmp	r0, #0
 80208d4:	d0f2      	beq.n	80208bc <_realloc_r+0x1c>
 80208d6:	4631      	mov	r1, r6
 80208d8:	4622      	mov	r2, r4
 80208da:	f7ff fba3 	bl	8020024 <memcpy>
 80208de:	4631      	mov	r1, r6
 80208e0:	4638      	mov	r0, r7
 80208e2:	f7ff fbcb 	bl	802007c <_free_r>
 80208e6:	e7e9      	b.n	80208bc <_realloc_r+0x1c>
 80208e8:	4635      	mov	r5, r6
 80208ea:	e7e7      	b.n	80208bc <_realloc_r+0x1c>

080208ec <_malloc_usable_size_r>:
 80208ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80208f0:	1f18      	subs	r0, r3, #4
 80208f2:	2b00      	cmp	r3, #0
 80208f4:	bfbc      	itt	lt
 80208f6:	580b      	ldrlt	r3, [r1, r0]
 80208f8:	18c0      	addlt	r0, r0, r3
 80208fa:	4770      	bx	lr

080208fc <_init>:
 80208fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80208fe:	bf00      	nop
 8020900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020902:	bc08      	pop	{r3}
 8020904:	469e      	mov	lr, r3
 8020906:	4770      	bx	lr

08020908 <_fini>:
 8020908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802090a:	bf00      	nop
 802090c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802090e:	bc08      	pop	{r3}
 8020910:	469e      	mov	lr, r3
 8020912:	4770      	bx	lr
