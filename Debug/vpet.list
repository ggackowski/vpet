
vpet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001616c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f6c  08016304  08016304  00026304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017270  08017270  000301ec  2**0
                  CONTENTS
  4 .ARM          00000008  08017270  08017270  00027270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017278  08017278  000301ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08017278  08017278  00027278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017280  08017280  00027280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08017284  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000854  200001ec  08017470  000301ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a40  08017470  00030a40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   000a5d04  00000000  00000000  0003021c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000c906  00000000  00000000  000d5f20  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00005820  00000000  00000000  000e2828  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00005550  00000000  00000000  000e8048  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002567d  00000000  00000000  000ed598  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0003525a  00000000  00000000  00112c15  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fc96b  00000000  00000000  00147e6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  002447da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00019200  00000000  00000000  00244858  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200001ec 	.word	0x200001ec
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080162ec 	.word	0x080162ec

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200001f0 	.word	0x200001f0
 80001d4:	080162ec 	.word	0x080162ec

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <_ZN4tama5Vec2dplES0_>:
//

#include "Vec2d.h"

tama::Vec2d tama::Vec2d::operator+(tama::Vec2d delta)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af00      	add	r7, sp, #0
 80004de:	60f8      	str	r0, [r7, #12]
 80004e0:	60b9      	str	r1, [r7, #8]
 80004e2:	4639      	mov	r1, r7
 80004e4:	e881 000c 	stmia.w	r1, {r2, r3}
    return Vec2d(this->x + delta.x, this->y + delta.y);
 80004e8:	68bb      	ldr	r3, [r7, #8]
 80004ea:	681a      	ldr	r2, [r3, #0]
 80004ec:	683b      	ldr	r3, [r7, #0]
 80004ee:	18d1      	adds	r1, r2, r3
 80004f0:	68bb      	ldr	r3, [r7, #8]
 80004f2:	685a      	ldr	r2, [r3, #4]
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	4413      	add	r3, r2
 80004f8:	461a      	mov	r2, r3
 80004fa:	68f8      	ldr	r0, [r7, #12]
 80004fc:	f000 f804 	bl	8000508 <_ZN4tama5Vec2dC1Eii>
}
 8000500:	68f8      	ldr	r0, [r7, #12]
 8000502:	3710      	adds	r7, #16
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}

08000508 <_ZN4tama5Vec2dC1Eii>:

tama::Vec2d::Vec2d(int i, int j)
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	60f8      	str	r0, [r7, #12]
 8000510:	60b9      	str	r1, [r7, #8]
 8000512:	607a      	str	r2, [r7, #4]
{
    x = i;
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	68ba      	ldr	r2, [r7, #8]
 8000518:	601a      	str	r2, [r3, #0]
    y = j;
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	687a      	ldr	r2, [r7, #4]
 800051e:	605a      	str	r2, [r3, #4]
}
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	4618      	mov	r0, r3
 8000524:	3714      	adds	r7, #20
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr

0800052e <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800052e:	b480      	push	{r7}
 8000530:	b083      	sub	sp, #12
 8000532:	af00      	add	r7, sp, #0
 8000534:	6078      	str	r0, [r7, #4]
 8000536:	6039      	str	r1, [r7, #0]
 8000538:	683b      	ldr	r3, [r7, #0]
 800053a:	4618      	mov	r0, r3
 800053c:	370c      	adds	r7, #12
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr

08000546 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>:
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 8000546:	b480      	push	{r7}
 8000548:	b083      	sub	sp, #12
 800054a:	af00      	add	r7, sp, #0
 800054c:	6078      	str	r0, [r7, #4]
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	685b      	ldr	r3, [r3, #4]
 8000552:	1c5a      	adds	r2, r3, #1
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	605a      	str	r2, [r3, #4]
 8000558:	bf00      	nop
 800055a:	370c      	adds	r7, #12
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr

08000564 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
      if (--_M_use_count == 0)
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	685b      	ldr	r3, [r3, #4]
 8000570:	1e5a      	subs	r2, r3, #1
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	685b      	ldr	r3, [r3, #4]
 800057a:	2b00      	cmp	r3, #0
 800057c:	bf0c      	ite	eq
 800057e:	2301      	moveq	r3, #1
 8000580:	2300      	movne	r3, #0
 8000582:	b2db      	uxtb	r3, r3
 8000584:	2b00      	cmp	r3, #0
 8000586:	d019      	beq.n	80005bc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
        {
          _M_dispose();
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	3308      	adds	r3, #8
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	6878      	ldr	r0, [r7, #4]
 8000592:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	689b      	ldr	r3, [r3, #8]
 8000598:	1e5a      	subs	r2, r3, #1
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	609a      	str	r2, [r3, #8]
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	689b      	ldr	r3, [r3, #8]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	bf0c      	ite	eq
 80005a6:	2301      	moveq	r3, #1
 80005a8:	2300      	movne	r3, #0
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d005      	beq.n	80005bc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
            _M_destroy();
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	330c      	adds	r3, #12
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	6878      	ldr	r0, [r7, #4]
 80005ba:	4798      	blx	r3
        }
    }
 80005bc:	bf00      	nop
 80005be:	3708      	adds	r7, #8
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <_ZN4tama5Input11addListenerESt10shared_ptrINS_7OnInputEE>:
//

#include "Input.h"

void tama::Input::addListener(std::shared_ptr<tama::OnInput> listener)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	6039      	str	r1, [r7, #0]
    listeners.push_back(listener);
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	3304      	adds	r3, #4
 80005d2:	6839      	ldr	r1, [r7, #0]
 80005d4:	4618      	mov	r0, r3
 80005d6:	f000 f804 	bl	80005e2 <_ZNSt6vectorISt10shared_ptrIN4tama7OnInputEESaIS3_EE9push_backERKS3_>
}
 80005da:	bf00      	nop
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}

080005e2 <_ZNSt6vectorISt10shared_ptrIN4tama7OnInputEESaIS3_EE9push_backERKS3_>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
 80005e2:	b580      	push	{r7, lr}
 80005e4:	b082      	sub	sp, #8
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	6078      	str	r0, [r7, #4]
 80005ea:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	685a      	ldr	r2, [r3, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	689b      	ldr	r3, [r3, #8]
 80005f4:	429a      	cmp	r2, r3
 80005f6:	d00d      	beq.n	8000614 <_ZNSt6vectorISt10shared_ptrIN4tama7OnInputEESaIS3_EE9push_backERKS3_+0x32>
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 80005f8:	6878      	ldr	r0, [r7, #4]
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	685b      	ldr	r3, [r3, #4]
 80005fe:	683a      	ldr	r2, [r7, #0]
 8000600:	4619      	mov	r1, r3
 8000602:	f000 f81f 	bl	8000644 <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama7OnInputEEEE9constructIS3_JRKS3_EEEvRS4_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	685b      	ldr	r3, [r3, #4]
 800060a:	f103 0208 	add.w	r2, r3, #8
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	605a      	str	r2, [r3, #4]
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 8000612:	e008      	b.n	8000626 <_ZNSt6vectorISt10shared_ptrIN4tama7OnInputEESaIS3_EE9push_backERKS3_+0x44>
	  _M_realloc_insert(end(), __x);
 8000614:	6878      	ldr	r0, [r7, #4]
 8000616:	f000 f828 	bl	800066a <_ZNSt6vectorISt10shared_ptrIN4tama7OnInputEESaIS3_EE3endEv>
 800061a:	4603      	mov	r3, r0
 800061c:	683a      	ldr	r2, [r7, #0]
 800061e:	4619      	mov	r1, r3
 8000620:	6878      	ldr	r0, [r7, #4]
 8000622:	f000 f833 	bl	800068c <_ZNSt6vectorISt10shared_ptrIN4tama7OnInputEESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_>
      }
 8000626:	bf00      	nop
 8000628:	3708      	adds	r7, #8
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}

0800062e <_ZSt7forwardIRKSt10shared_ptrIN4tama7OnInputEEEOT_RNSt16remove_referenceIS6_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800062e:	b480      	push	{r7}
 8000630:	b083      	sub	sp, #12
 8000632:	af00      	add	r7, sp, #0
 8000634:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	4618      	mov	r0, r3
 800063a:	370c      	adds	r7, #12
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr

08000644 <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama7OnInputEEEE9constructIS3_JRKS3_EEEvRS4_PT_DpOT0_>:
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	60f8      	str	r0, [r7, #12]
 800064c:	60b9      	str	r1, [r7, #8]
 800064e:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8000650:	6878      	ldr	r0, [r7, #4]
 8000652:	f7ff ffec 	bl	800062e <_ZSt7forwardIRKSt10shared_ptrIN4tama7OnInputEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8000656:	4603      	mov	r3, r0
 8000658:	461a      	mov	r2, r3
 800065a:	68b9      	ldr	r1, [r7, #8]
 800065c:	68f8      	ldr	r0, [r7, #12]
 800065e:	f000 f8d5 	bl	800080c <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama7OnInputEEE9constructIS4_JRKS4_EEEvPT_DpOT0_>
 8000662:	bf00      	nop
 8000664:	3710      	adds	r7, #16
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}

0800066a <_ZNSt6vectorISt10shared_ptrIN4tama7OnInputEESaIS3_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800066a:	b580      	push	{r7, lr}
 800066c:	b084      	sub	sp, #16
 800066e:	af00      	add	r7, sp, #0
 8000670:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	1d1a      	adds	r2, r3, #4
 8000676:	f107 030c 	add.w	r3, r7, #12
 800067a:	4611      	mov	r1, r2
 800067c:	4618      	mov	r0, r3
 800067e:	f000 f8df 	bl	8000840 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama7OnInputEESt6vectorIS4_SaIS4_EEEC1ERKS5_>
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	4618      	mov	r0, r3
 8000686:	3710      	adds	r7, #16
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}

0800068c <_ZNSt6vectorISt10shared_ptrIN4tama7OnInputEESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 800068c:	b5b0      	push	{r4, r5, r7, lr}
 800068e:	b08a      	sub	sp, #40	; 0x28
 8000690:	af00      	add	r7, sp, #0
 8000692:	60f8      	str	r0, [r7, #12]
 8000694:	60b9      	str	r1, [r7, #8]
 8000696:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 8000698:	4a41      	ldr	r2, [pc, #260]	; (80007a0 <_ZNSt6vectorISt10shared_ptrIN4tama7OnInputEESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x114>)
 800069a:	2101      	movs	r1, #1
 800069c:	68f8      	ldr	r0, [r7, #12]
 800069e:	f000 f8df 	bl	8000860 <_ZNKSt6vectorISt10shared_ptrIN4tama7OnInputEESaIS3_EE12_M_check_lenEjPKc>
 80006a2:	6278      	str	r0, [r7, #36]	; 0x24
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      const size_type __elems_before = __position - begin();
 80006a4:	68f8      	ldr	r0, [r7, #12]
 80006a6:	f000 f923 	bl	80008f0 <_ZNSt6vectorISt10shared_ptrIN4tama7OnInputEESaIS3_EE5beginEv>
 80006aa:	4603      	mov	r3, r0
 80006ac:	617b      	str	r3, [r7, #20]
 80006ae:	f107 0214 	add.w	r2, r7, #20
 80006b2:	f107 0308 	add.w	r3, r7, #8
 80006b6:	4611      	mov	r1, r2
 80006b8:	4618      	mov	r0, r3
 80006ba:	f000 f929 	bl	8000910 <_ZN9__gnu_cxxmiIPSt10shared_ptrIN4tama7OnInputEESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_>
 80006be:	4603      	mov	r3, r0
 80006c0:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80006c6:	4618      	mov	r0, r3
 80006c8:	f000 f938 	bl	800093c <_ZNSt12_Vector_baseISt10shared_ptrIN4tama7OnInputEESaIS3_EE11_M_allocateEj>
 80006cc:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 80006ce:	69fb      	ldr	r3, [r7, #28]
 80006d0:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 80006d2:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 80006d4:	6a3b      	ldr	r3, [r7, #32]
 80006d6:	00db      	lsls	r3, r3, #3
	  _Alloc_traits::construct(this->_M_impl,
 80006d8:	69fa      	ldr	r2, [r7, #28]
 80006da:	18d5      	adds	r5, r2, r3
 80006dc:	6878      	ldr	r0, [r7, #4]
 80006de:	f7ff ffa6 	bl	800062e <_ZSt7forwardIRKSt10shared_ptrIN4tama7OnInputEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80006e2:	4603      	mov	r3, r0
 80006e4:	461a      	mov	r2, r3
 80006e6:	4629      	mov	r1, r5
 80006e8:	4620      	mov	r0, r4
 80006ea:	f7ff ffab 	bl	8000644 <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama7OnInputEEEE9constructIS3_JRKS3_EEEvRS4_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 80006ee:	2300      	movs	r3, #0
 80006f0:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (this->_M_impl._M_start, __position.base(),
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	681c      	ldr	r4, [r3, #0]
 80006f6:	f107 0308 	add.w	r3, r7, #8
 80006fa:	4618      	mov	r0, r3
 80006fc:	f000 f932 	bl	8000964 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama7OnInputEESt6vectorIS4_SaIS4_EEE4baseEv>
 8000700:	4603      	mov	r3, r0
 8000702:	681d      	ldr	r5, [r3, #0]
	     __new_start, _M_get_Tp_allocator());
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	4618      	mov	r0, r3
 8000708:	f000 f937 	bl	800097a <_ZNSt12_Vector_baseISt10shared_ptrIN4tama7OnInputEESaIS3_EE19_M_get_Tp_allocatorEv>
 800070c:	4603      	mov	r3, r0
	  __new_finish
 800070e:	69fa      	ldr	r2, [r7, #28]
 8000710:	4629      	mov	r1, r5
 8000712:	4620      	mov	r0, r4
 8000714:	f000 f93c 	bl	8000990 <_ZSt34__uninitialized_move_if_noexcept_aIPSt10shared_ptrIN4tama7OnInputEES4_SaIS3_EET0_T_S7_S6_RT1_>
 8000718:	61b8      	str	r0, [r7, #24]

	  ++__new_finish;
 800071a:	69bb      	ldr	r3, [r7, #24]
 800071c:	3308      	adds	r3, #8
 800071e:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (__position.base(), this->_M_impl._M_finish,
 8000720:	f107 0308 	add.w	r3, r7, #8
 8000724:	4618      	mov	r0, r3
 8000726:	f000 f91d 	bl	8000964 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama7OnInputEESt6vectorIS4_SaIS4_EEE4baseEv>
 800072a:	4603      	mov	r3, r0
 800072c:	681c      	ldr	r4, [r3, #0]
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	685d      	ldr	r5, [r3, #4]
	     __new_finish, _M_get_Tp_allocator());
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	4618      	mov	r0, r3
 8000736:	f000 f920 	bl	800097a <_ZNSt12_Vector_baseISt10shared_ptrIN4tama7OnInputEESaIS3_EE19_M_get_Tp_allocatorEv>
 800073a:	4603      	mov	r3, r0
	  __new_finish
 800073c:	69ba      	ldr	r2, [r7, #24]
 800073e:	4629      	mov	r1, r5
 8000740:	4620      	mov	r0, r4
 8000742:	f000 f925 	bl	8000990 <_ZSt34__uninitialized_move_if_noexcept_aIPSt10shared_ptrIN4tama7OnInputEES4_SaIS3_EET0_T_S7_S6_RT1_>
 8000746:	61b8      	str	r0, [r7, #24]
	  else
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	681c      	ldr	r4, [r3, #0]
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	685d      	ldr	r5, [r3, #4]
		    _M_get_Tp_allocator());
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	4618      	mov	r0, r3
 8000754:	f000 f911 	bl	800097a <_ZNSt12_Vector_baseISt10shared_ptrIN4tama7OnInputEESaIS3_EE19_M_get_Tp_allocatorEv>
 8000758:	4603      	mov	r3, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800075a:	461a      	mov	r2, r3
 800075c:	4629      	mov	r1, r5
 800075e:	4620      	mov	r0, r4
 8000760:	f000 f92f 	bl	80009c2 <_ZSt8_DestroyIPSt10shared_ptrIN4tama7OnInputEES3_EvT_S5_RSaIT0_E>
      _M_deallocate(this->_M_impl._M_start,
 8000764:	68f8      	ldr	r0, [r7, #12]
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	6819      	ldr	r1, [r3, #0]
		    this->_M_impl._M_end_of_storage
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	689b      	ldr	r3, [r3, #8]
		    - this->_M_impl._M_start);
 800076e:	461a      	mov	r2, r3
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	1ad3      	subs	r3, r2, r3
 8000776:	10db      	asrs	r3, r3, #3
      _M_deallocate(this->_M_impl._M_start,
 8000778:	461a      	mov	r2, r3
 800077a:	f000 f930 	bl	80009de <_ZNSt12_Vector_baseISt10shared_ptrIN4tama7OnInputEESaIS3_EE13_M_deallocateEPS3_j>
      this->_M_impl._M_start = __new_start;
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	69fa      	ldr	r2, [r7, #28]
 8000782:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	69ba      	ldr	r2, [r7, #24]
 8000788:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800078a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800078c:	00db      	lsls	r3, r3, #3
 800078e:	69fa      	ldr	r2, [r7, #28]
 8000790:	441a      	add	r2, r3
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	609a      	str	r2, [r3, #8]
    }
 8000796:	bf00      	nop
 8000798:	3728      	adds	r7, #40	; 0x28
 800079a:	46bd      	mov	sp, r7
 800079c:	bdb0      	pop	{r4, r5, r7, pc}
 800079e:	bf00      	nop
 80007a0:	08016304 	.word	0x08016304

080007a4 <_ZNSt12__shared_ptrIN4tama7OnInputELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	6039      	str	r1, [r7, #0]
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	681a      	ldr	r2, [r3, #0]
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	1d1a      	adds	r2, r3, #4
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	3304      	adds	r3, #4
 80007be:	4619      	mov	r1, r3
 80007c0:	4610      	mov	r0, r2
 80007c2:	f000 f91f 	bl	8000a04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	4618      	mov	r0, r3
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <_ZNSt12__shared_ptrIN4tama7OnInputELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	3304      	adds	r3, #4
 80007dc:	4618      	mov	r0, r3
 80007de:	f000 f928 	bl	8000a32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	4618      	mov	r0, r3
 80007e6:	3708      	adds	r7, #8
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}

080007ec <_ZNSt10shared_ptrIN4tama7OnInputEEC1ERKS2_>:
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	6039      	str	r1, [r7, #0]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	683a      	ldr	r2, [r7, #0]
 80007fa:	4611      	mov	r1, r2
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff ffd1 	bl	80007a4 <_ZNSt12__shared_ptrIN4tama7OnInputELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	4618      	mov	r0, r3
 8000806:	3708      	adds	r7, #8
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}

0800080c <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama7OnInputEEE9constructIS4_JRKS4_EEEvPT_DpOT0_>:
      { return size_t(-1) / sizeof(_Tp); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 800080c:	b590      	push	{r4, r7, lr}
 800080e:	b085      	sub	sp, #20
 8000810:	af00      	add	r7, sp, #0
 8000812:	60f8      	str	r0, [r7, #12]
 8000814:	60b9      	str	r1, [r7, #8]
 8000816:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8000818:	6878      	ldr	r0, [r7, #4]
 800081a:	f7ff ff08 	bl	800062e <_ZSt7forwardIRKSt10shared_ptrIN4tama7OnInputEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800081e:	4604      	mov	r4, r0
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	4619      	mov	r1, r3
 8000824:	2008      	movs	r0, #8
 8000826:	f7ff fe82 	bl	800052e <_ZnwjPv>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d003      	beq.n	8000838 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama7OnInputEEE9constructIS4_JRKS4_EEEvPT_DpOT0_+0x2c>
 8000830:	4621      	mov	r1, r4
 8000832:	4618      	mov	r0, r3
 8000834:	f7ff ffda 	bl	80007ec <_ZNSt10shared_ptrIN4tama7OnInputEEC1ERKS2_>
 8000838:	bf00      	nop
 800083a:	3714      	adds	r7, #20
 800083c:	46bd      	mov	sp, r7
 800083e:	bd90      	pop	{r4, r7, pc}

08000840 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama7OnInputEESt6vectorIS4_SaIS4_EEEC1ERKS5_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
 8000848:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	681a      	ldr	r2, [r3, #0]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	4618      	mov	r0, r3
 8000856:	370c      	adds	r7, #12
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr

08000860 <_ZNKSt6vectorISt10shared_ptrIN4tama7OnInputEESaIS3_EE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 8000860:	b590      	push	{r4, r7, lr}
 8000862:	b087      	sub	sp, #28
 8000864:	af00      	add	r7, sp, #0
 8000866:	60f8      	str	r0, [r7, #12]
 8000868:	60b9      	str	r1, [r7, #8]
 800086a:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 800086c:	68f8      	ldr	r0, [r7, #12]
 800086e:	f000 f8f2 	bl	8000a56 <_ZNKSt6vectorISt10shared_ptrIN4tama7OnInputEESaIS3_EE8max_sizeEv>
 8000872:	4604      	mov	r4, r0
 8000874:	68f8      	ldr	r0, [r7, #12]
 8000876:	f000 f8ff 	bl	8000a78 <_ZNKSt6vectorISt10shared_ptrIN4tama7OnInputEESaIS3_EE4sizeEv>
 800087a:	4603      	mov	r3, r0
 800087c:	1ae2      	subs	r2, r4, r3
 800087e:	68bb      	ldr	r3, [r7, #8]
 8000880:	429a      	cmp	r2, r3
 8000882:	bf34      	ite	cc
 8000884:	2301      	movcc	r3, #1
 8000886:	2300      	movcs	r3, #0
 8000888:	b2db      	uxtb	r3, r3
 800088a:	2b00      	cmp	r3, #0
 800088c:	d003      	beq.n	8000896 <_ZNKSt6vectorISt10shared_ptrIN4tama7OnInputEESaIS3_EE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	4618      	mov	r0, r3
 8000892:	f015 fbc7 	bl	8016024 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + std::max(size(), __n);
 8000896:	68f8      	ldr	r0, [r7, #12]
 8000898:	f000 f8ee 	bl	8000a78 <_ZNKSt6vectorISt10shared_ptrIN4tama7OnInputEESaIS3_EE4sizeEv>
 800089c:	4604      	mov	r4, r0
 800089e:	68f8      	ldr	r0, [r7, #12]
 80008a0:	f000 f8ea 	bl	8000a78 <_ZNKSt6vectorISt10shared_ptrIN4tama7OnInputEESaIS3_EE4sizeEv>
 80008a4:	4603      	mov	r3, r0
 80008a6:	613b      	str	r3, [r7, #16]
 80008a8:	f107 0208 	add.w	r2, r7, #8
 80008ac:	f107 0310 	add.w	r3, r7, #16
 80008b0:	4611      	mov	r1, r2
 80008b2:	4618      	mov	r0, r3
 80008b4:	f000 f8f1 	bl	8000a9a <_ZSt3maxIjERKT_S2_S2_>
 80008b8:	4603      	mov	r3, r0
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4423      	add	r3, r4
 80008be:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80008c0:	68f8      	ldr	r0, [r7, #12]
 80008c2:	f000 f8d9 	bl	8000a78 <_ZNKSt6vectorISt10shared_ptrIN4tama7OnInputEESaIS3_EE4sizeEv>
 80008c6:	4602      	mov	r2, r0
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d306      	bcc.n	80008dc <_ZNKSt6vectorISt10shared_ptrIN4tama7OnInputEESaIS3_EE12_M_check_lenEjPKc+0x7c>
 80008ce:	68f8      	ldr	r0, [r7, #12]
 80008d0:	f000 f8c1 	bl	8000a56 <_ZNKSt6vectorISt10shared_ptrIN4tama7OnInputEESaIS3_EE8max_sizeEv>
 80008d4:	4602      	mov	r2, r0
 80008d6:	697b      	ldr	r3, [r7, #20]
 80008d8:	4293      	cmp	r3, r2
 80008da:	d904      	bls.n	80008e6 <_ZNKSt6vectorISt10shared_ptrIN4tama7OnInputEESaIS3_EE12_M_check_lenEjPKc+0x86>
 80008dc:	68f8      	ldr	r0, [r7, #12]
 80008de:	f000 f8ba 	bl	8000a56 <_ZNKSt6vectorISt10shared_ptrIN4tama7OnInputEESaIS3_EE8max_sizeEv>
 80008e2:	4603      	mov	r3, r0
 80008e4:	e000      	b.n	80008e8 <_ZNKSt6vectorISt10shared_ptrIN4tama7OnInputEESaIS3_EE12_M_check_lenEjPKc+0x88>
 80008e6:	697b      	ldr	r3, [r7, #20]
      }
 80008e8:	4618      	mov	r0, r3
 80008ea:	371c      	adds	r7, #28
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd90      	pop	{r4, r7, pc}

080008f0 <_ZNSt6vectorISt10shared_ptrIN4tama7OnInputEESaIS3_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80008f8:	687a      	ldr	r2, [r7, #4]
 80008fa:	f107 030c 	add.w	r3, r7, #12
 80008fe:	4611      	mov	r1, r2
 8000900:	4618      	mov	r0, r3
 8000902:	f7ff ff9d 	bl	8000840 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama7OnInputEESt6vectorIS4_SaIS4_EEEC1ERKS5_>
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	4618      	mov	r0, r3
 800090a:	3710      	adds	r7, #16
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}

08000910 <_ZN9__gnu_cxxmiIPSt10shared_ptrIN4tama7OnInputEESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8000910:	b590      	push	{r4, r7, lr}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
 8000918:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 800091a:	6878      	ldr	r0, [r7, #4]
 800091c:	f000 f822 	bl	8000964 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama7OnInputEESt6vectorIS4_SaIS4_EEE4baseEv>
 8000920:	4603      	mov	r3, r0
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	461c      	mov	r4, r3
 8000926:	6838      	ldr	r0, [r7, #0]
 8000928:	f000 f81c 	bl	8000964 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama7OnInputEESt6vectorIS4_SaIS4_EEE4baseEv>
 800092c:	4603      	mov	r3, r0
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	1ae3      	subs	r3, r4, r3
 8000932:	10db      	asrs	r3, r3, #3
 8000934:	4618      	mov	r0, r3
 8000936:	370c      	adds	r7, #12
 8000938:	46bd      	mov	sp, r7
 800093a:	bd90      	pop	{r4, r7, pc}

0800093c <_ZNSt12_Vector_baseISt10shared_ptrIN4tama7OnInputEESaIS3_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d006      	beq.n	800095a <_ZNSt12_Vector_baseISt10shared_ptrIN4tama7OnInputEESaIS3_EE11_M_allocateEj+0x1e>
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	6839      	ldr	r1, [r7, #0]
 8000950:	4618      	mov	r0, r3
 8000952:	f000 f8b6 	bl	8000ac2 <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama7OnInputEEEE8allocateERS4_j>
 8000956:	4603      	mov	r3, r0
 8000958:	e000      	b.n	800095c <_ZNSt12_Vector_baseISt10shared_ptrIN4tama7OnInputEESaIS3_EE11_M_allocateEj+0x20>
 800095a:	2300      	movs	r3, #0
      }
 800095c:	4618      	mov	r0, r3
 800095e:	3708      	adds	r7, #8
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}

08000964 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama7OnInputEESt6vectorIS4_SaIS4_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	4618      	mov	r0, r3
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr

0800097a <_ZNSt12_Vector_baseISt10shared_ptrIN4tama7OnInputEESaIS3_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800097a:	b480      	push	{r7}
 800097c:	b083      	sub	sp, #12
 800097e:	af00      	add	r7, sp, #0
 8000980:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4618      	mov	r0, r3
 8000986:	370c      	adds	r7, #12
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr

08000990 <_ZSt34__uninitialized_move_if_noexcept_aIPSt10shared_ptrIN4tama7OnInputEES4_SaIS3_EET0_T_S7_S6_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8000990:	b590      	push	{r4, r7, lr}
 8000992:	b085      	sub	sp, #20
 8000994:	af00      	add	r7, sp, #0
 8000996:	60f8      	str	r0, [r7, #12]
 8000998:	60b9      	str	r1, [r7, #8]
 800099a:	607a      	str	r2, [r7, #4]
 800099c:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 800099e:	68f8      	ldr	r0, [r7, #12]
 80009a0:	f000 f89e 	bl	8000ae0 <_ZSt32__make_move_if_noexcept_iteratorISt10shared_ptrIN4tama7OnInputEESt13move_iteratorIPS3_EET0_PT_>
 80009a4:	4604      	mov	r4, r0
 80009a6:	68b8      	ldr	r0, [r7, #8]
 80009a8:	f000 f89a 	bl	8000ae0 <_ZSt32__make_move_if_noexcept_iteratorISt10shared_ptrIN4tama7OnInputEESt13move_iteratorIPS3_EET0_PT_>
 80009ac:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	687a      	ldr	r2, [r7, #4]
 80009b2:	4620      	mov	r0, r4
 80009b4:	f000 f8a3 	bl	8000afe <_ZSt22__uninitialized_copy_aISt13move_iteratorIPSt10shared_ptrIN4tama7OnInputEEES5_S4_ET0_T_S8_S7_RSaIT1_E>
 80009b8:	4603      	mov	r3, r0
    }
 80009ba:	4618      	mov	r0, r3
 80009bc:	3714      	adds	r7, #20
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd90      	pop	{r4, r7, pc}

080009c2 <_ZSt8_DestroyIPSt10shared_ptrIN4tama7OnInputEES3_EvT_S5_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80009c2:	b580      	push	{r7, lr}
 80009c4:	b084      	sub	sp, #16
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	60f8      	str	r0, [r7, #12]
 80009ca:	60b9      	str	r1, [r7, #8]
 80009cc:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 80009ce:	68b9      	ldr	r1, [r7, #8]
 80009d0:	68f8      	ldr	r0, [r7, #12]
 80009d2:	f000 f8b2 	bl	8000b3a <_ZSt8_DestroyIPSt10shared_ptrIN4tama7OnInputEEEvT_S5_>
    }
 80009d6:	bf00      	nop
 80009d8:	3710      	adds	r7, #16
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}

080009de <_ZNSt12_Vector_baseISt10shared_ptrIN4tama7OnInputEESaIS3_EE13_M_deallocateEPS3_j>:
      _M_deallocate(pointer __p, size_t __n)
 80009de:	b580      	push	{r7, lr}
 80009e0:	b084      	sub	sp, #16
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	60f8      	str	r0, [r7, #12]
 80009e6:	60b9      	str	r1, [r7, #8]
 80009e8:	607a      	str	r2, [r7, #4]
	if (__p)
 80009ea:	68bb      	ldr	r3, [r7, #8]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d005      	beq.n	80009fc <_ZNSt12_Vector_baseISt10shared_ptrIN4tama7OnInputEESaIS3_EE13_M_deallocateEPS3_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	687a      	ldr	r2, [r7, #4]
 80009f4:	68b9      	ldr	r1, [r7, #8]
 80009f6:	4618      	mov	r0, r3
 80009f8:	f000 f8ac 	bl	8000b54 <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama7OnInputEEEE10deallocateERS4_PS3_j>
      }
 80009fc:	bf00      	nop
 80009fe:	3710      	adds	r7, #16
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      __shared_count(const __shared_count& __r) noexcept
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
 8000a0c:	6039      	str	r1, [r7, #0]
      : _M_pi(__r._M_pi)
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	601a      	str	r2, [r3, #0]
	if (_M_pi != 0)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d004      	beq.n	8000a28 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0x24>
	  _M_pi->_M_add_ref_copy();
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4618      	mov	r0, r3
 8000a24:	f7ff fd8f 	bl	8000546 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>
      }
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 8000a32:	b580      	push	{r7, lr}
 8000a34:	b082      	sub	sp, #8
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]
	if (_M_pi != nullptr)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d004      	beq.n	8000a4c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1a>
	  _M_pi->_M_release();
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4618      	mov	r0, r3
 8000a48:	f7ff fd8c 	bl	8000564 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <_ZNKSt6vectorISt10shared_ptrIN4tama7OnInputEESaIS3_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b082      	sub	sp, #8
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4618      	mov	r0, r3
 8000a62:	f000 f892 	bl	8000b8a <_ZNKSt12_Vector_baseISt10shared_ptrIN4tama7OnInputEESaIS3_EE19_M_get_Tp_allocatorEv>
 8000a66:	4603      	mov	r3, r0
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f000 f882 	bl	8000b72 <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama7OnInputEEEE8max_sizeERKS4_>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	4618      	mov	r0, r3
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <_ZNKSt6vectorISt10shared_ptrIN4tama7OnInputEESaIS3_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	461a      	mov	r2, r3
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	1ad3      	subs	r3, r2, r3
 8000a8c:	10db      	asrs	r3, r3, #3
 8000a8e:	4618      	mov	r0, r3
 8000a90:	370c      	adds	r7, #12
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr

08000a9a <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8000a9a:	b480      	push	{r7}
 8000a9c:	b083      	sub	sp, #12
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	6078      	str	r0, [r7, #4]
 8000aa2:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	429a      	cmp	r2, r3
 8000aae:	d201      	bcs.n	8000ab4 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	e000      	b.n	8000ab6 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8000ab4:	687b      	ldr	r3, [r7, #4]
    }
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr

08000ac2 <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama7OnInputEEEE8allocateERS4_j>:
      allocate(allocator_type& __a, size_type __n)
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	b082      	sub	sp, #8
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	6078      	str	r0, [r7, #4]
 8000aca:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8000acc:	2200      	movs	r2, #0
 8000ace:	6839      	ldr	r1, [r7, #0]
 8000ad0:	6878      	ldr	r0, [r7, #4]
 8000ad2:	f000 f865 	bl	8000ba0 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama7OnInputEEE8allocateEjPKv>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3708      	adds	r7, #8
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <_ZSt32__make_move_if_noexcept_iteratorISt10shared_ptrIN4tama7OnInputEESt13move_iteratorIPS3_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8000ae8:	f107 030c 	add.w	r3, r7, #12
 8000aec:	6879      	ldr	r1, [r7, #4]
 8000aee:	4618      	mov	r0, r3
 8000af0:	f000 f874 	bl	8000bdc <_ZNSt13move_iteratorIPSt10shared_ptrIN4tama7OnInputEEEC1ES4_>
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	4618      	mov	r0, r3
 8000af8:	3710      	adds	r7, #16
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <_ZSt22__uninitialized_copy_aISt13move_iteratorIPSt10shared_ptrIN4tama7OnInputEEES5_S4_ET0_T_S8_S7_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b084      	sub	sp, #16
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	60f8      	str	r0, [r7, #12]
 8000b06:	60b9      	str	r1, [r7, #8]
 8000b08:	607a      	str	r2, [r7, #4]
 8000b0a:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8000b0c:	687a      	ldr	r2, [r7, #4]
 8000b0e:	68b9      	ldr	r1, [r7, #8]
 8000b10:	68f8      	ldr	r0, [r7, #12]
 8000b12:	f000 f872 	bl	8000bfa <_ZSt18uninitialized_copyISt13move_iteratorIPSt10shared_ptrIN4tama7OnInputEEES5_ET0_T_S8_S7_>
 8000b16:	4603      	mov	r3, r0
 8000b18:	4618      	mov	r0, r3
 8000b1a:	3710      	adds	r7, #16
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}

08000b20 <_ZNSt10shared_ptrIN4tama7OnInputEED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f7ff fe50 	bl	80007d0 <_ZNSt12__shared_ptrIN4tama7OnInputELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	4618      	mov	r0, r3
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <_ZSt8_DestroyIPSt10shared_ptrIN4tama7OnInputEEEvT_S5_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b082      	sub	sp, #8
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	6078      	str	r0, [r7, #4]
 8000b42:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8000b44:	6839      	ldr	r1, [r7, #0]
 8000b46:	6878      	ldr	r0, [r7, #4]
 8000b48:	f000 f874 	bl	8000c34 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrIN4tama7OnInputEEEEvT_S7_>
    }
 8000b4c:	bf00      	nop
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama7OnInputEEEE10deallocateERS4_PS3_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	60f8      	str	r0, [r7, #12]
 8000b5c:	60b9      	str	r1, [r7, #8]
 8000b5e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8000b60:	687a      	ldr	r2, [r7, #4]
 8000b62:	68b9      	ldr	r1, [r7, #8]
 8000b64:	68f8      	ldr	r0, [r7, #12]
 8000b66:	f000 f87d 	bl	8000c64 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama7OnInputEEE10deallocateEPS4_j>
 8000b6a:	bf00      	nop
 8000b6c:	3710      	adds	r7, #16
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama7OnInputEEEE8max_sizeERKS4_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 8000b72:	b580      	push	{r7, lr}
 8000b74:	b082      	sub	sp, #8
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8000b7a:	6878      	ldr	r0, [r7, #4]
 8000b7c:	f000 f87f 	bl	8000c7e <_ZNK9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama7OnInputEEE8max_sizeEv>
 8000b80:	4603      	mov	r3, r0
 8000b82:	4618      	mov	r0, r3
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <_ZNKSt12_Vector_baseISt10shared_ptrIN4tama7OnInputEESaIS3_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8000b8a:	b480      	push	{r7}
 8000b8c:	b083      	sub	sp, #12
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4618      	mov	r0, r3
 8000b96:	370c      	adds	r7, #12
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr

08000ba0 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama7OnInputEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	60f8      	str	r0, [r7, #12]
 8000ba8:	60b9      	str	r1, [r7, #8]
 8000baa:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8000bac:	68f8      	ldr	r0, [r7, #12]
 8000bae:	f000 f866 	bl	8000c7e <_ZNK9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama7OnInputEEE8max_sizeEv>
 8000bb2:	4602      	mov	r2, r0
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	bf8c      	ite	hi
 8000bba:	2301      	movhi	r3, #1
 8000bbc:	2300      	movls	r3, #0
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama7OnInputEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8000bc4:	f015 fa2b 	bl	801601e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	00db      	lsls	r3, r3, #3
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f015 f9fa 	bl	8015fc6 <_Znwj>
 8000bd2:	4603      	mov	r3, r0
      }
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3710      	adds	r7, #16
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <_ZNSt13move_iteratorIPSt10shared_ptrIN4tama7OnInputEEEC1ES4_>:
      move_iterator(iterator_type __i)
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	683a      	ldr	r2, [r7, #0]
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	4618      	mov	r0, r3
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr

08000bfa <_ZSt18uninitialized_copyISt13move_iteratorIPSt10shared_ptrIN4tama7OnInputEEES5_ET0_T_S8_S7_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b086      	sub	sp, #24
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	60f8      	str	r0, [r7, #12]
 8000c02:	60b9      	str	r1, [r7, #8]
 8000c04:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8000c06:	2301      	movs	r3, #1
 8000c08:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8000c0a:	687a      	ldr	r2, [r7, #4]
 8000c0c:	68b9      	ldr	r1, [r7, #8]
 8000c0e:	68f8      	ldr	r0, [r7, #12]
 8000c10:	f000 f841 	bl	8000c96 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPSt10shared_ptrIN4tama7OnInputEEES7_EET0_T_SA_S9_>
 8000c14:	4603      	mov	r3, r0
    }
 8000c16:	4618      	mov	r0, r3
 8000c18:	3718      	adds	r7, #24
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}

08000c1e <_ZSt11__addressofISt10shared_ptrIN4tama7OnInputEEEPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8000c1e:	b480      	push	{r7}
 8000c20:	b083      	sub	sp, #12
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4618      	mov	r0, r3
 8000c2a:	370c      	adds	r7, #12
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrIN4tama7OnInputEEEEvT_S7_>:
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8000c3e:	687a      	ldr	r2, [r7, #4]
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d00a      	beq.n	8000c5c <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrIN4tama7OnInputEEEEvT_S7_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f7ff ffe9 	bl	8000c1e <_ZSt11__addressofISt10shared_ptrIN4tama7OnInputEEEPT_RS4_>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f000 f850 	bl	8000cf4 <_ZSt8_DestroyISt10shared_ptrIN4tama7OnInputEEEvPT_>
	  for (; __first != __last; ++__first)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	3308      	adds	r3, #8
 8000c58:	607b      	str	r3, [r7, #4]
 8000c5a:	e7f0      	b.n	8000c3e <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrIN4tama7OnInputEEEEvT_S7_+0xa>
	}
 8000c5c:	bf00      	nop
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama7OnInputEEE10deallocateEPS4_j>:
      deallocate(pointer __p, size_type)
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	60f8      	str	r0, [r7, #12]
 8000c6c:	60b9      	str	r1, [r7, #8]
 8000c6e:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8000c70:	68b8      	ldr	r0, [r7, #8]
 8000c72:	f015 f9c1 	bl	8015ff8 <_ZdlPv>
      }
 8000c76:	bf00      	nop
 8000c78:	3710      	adds	r7, #16
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <_ZNK9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama7OnInputEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8000c7e:	b480      	push	{r7}
 8000c80:	b083      	sub	sp, #12
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8000c86:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr

08000c96 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPSt10shared_ptrIN4tama7OnInputEEES7_EET0_T_SA_S9_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8000c96:	b590      	push	{r4, r7, lr}
 8000c98:	b087      	sub	sp, #28
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	60f8      	str	r0, [r7, #12]
 8000c9e:	60b9      	str	r1, [r7, #8]
 8000ca0:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 8000ca6:	f107 0208 	add.w	r2, r7, #8
 8000caa:	f107 030c 	add.w	r3, r7, #12
 8000cae:	4611      	mov	r1, r2
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f000 f82a 	bl	8000d0a <_ZStneIPSt10shared_ptrIN4tama7OnInputEEEbRKSt13move_iteratorIT_ES9_>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d016      	beq.n	8000cea <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPSt10shared_ptrIN4tama7OnInputEEES7_EET0_T_SA_S9_+0x54>
		std::_Construct(std::__addressof(*__cur), *__first);
 8000cbc:	6978      	ldr	r0, [r7, #20]
 8000cbe:	f7ff ffae 	bl	8000c1e <_ZSt11__addressofISt10shared_ptrIN4tama7OnInputEEEPT_RS4_>
 8000cc2:	4604      	mov	r4, r0
 8000cc4:	f107 030c 	add.w	r3, r7, #12
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f000 f840 	bl	8000d4e <_ZNKSt13move_iteratorIPSt10shared_ptrIN4tama7OnInputEEEdeEv>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4620      	mov	r0, r4
 8000cd4:	f000 f852 	bl	8000d7c <_ZSt10_ConstructISt10shared_ptrIN4tama7OnInputEEJS3_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 8000cd8:	f107 030c 	add.w	r3, r7, #12
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f000 f825 	bl	8000d2c <_ZNSt13move_iteratorIPSt10shared_ptrIN4tama7OnInputEEEppEv>
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	3308      	adds	r3, #8
 8000ce6:	617b      	str	r3, [r7, #20]
 8000ce8:	e7dd      	b.n	8000ca6 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPSt10shared_ptrIN4tama7OnInputEEES7_EET0_T_SA_S9_+0x10>
	      return __cur;
 8000cea:	697b      	ldr	r3, [r7, #20]
	}
 8000cec:	4618      	mov	r0, r3
 8000cee:	371c      	adds	r7, #28
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd90      	pop	{r4, r7, pc}

08000cf4 <_ZSt8_DestroyISt10shared_ptrIN4tama7OnInputEEEvPT_>:
    _Destroy(_Tp* __pointer)
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f7ff ff0f 	bl	8000b20 <_ZNSt10shared_ptrIN4tama7OnInputEED1Ev>
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <_ZStneIPSt10shared_ptrIN4tama7OnInputEEEbRKSt13move_iteratorIT_ES9_>:
    operator!=(const move_iterator<_Iterator>& __x,
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b082      	sub	sp, #8
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
 8000d12:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 8000d14:	6839      	ldr	r1, [r7, #0]
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f000 f849 	bl	8000dae <_ZSteqIPSt10shared_ptrIN4tama7OnInputEEEbRKSt13move_iteratorIT_ES9_>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	f083 0301 	eor.w	r3, r3, #1
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	4618      	mov	r0, r3
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <_ZNSt13move_iteratorIPSt10shared_ptrIN4tama7OnInputEEEppEv>:
      operator++()
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
	++_M_current;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f103 0208 	add.w	r2, r3, #8
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	601a      	str	r2, [r3, #0]
	return *this;
 8000d40:	687b      	ldr	r3, [r7, #4]
      }
 8000d42:	4618      	mov	r0, r3
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr

08000d4e <_ZNKSt13move_iteratorIPSt10shared_ptrIN4tama7OnInputEEEdeEv>:
      operator*() const
 8000d4e:	b480      	push	{r7}
 8000d50:	b083      	sub	sp, #12
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	370c      	adds	r7, #12
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr

08000d66 <_ZSt7forwardISt10shared_ptrIN4tama7OnInputEEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8000d66:	b480      	push	{r7}
 8000d68:	b083      	sub	sp, #12
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4618      	mov	r0, r3
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <_ZSt10_ConstructISt10shared_ptrIN4tama7OnInputEEJS3_EEvPT_DpOT0_>:
    _Construct(_T1* __p, _Args&&... __args)
 8000d7c:	b590      	push	{r4, r7, lr}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
 8000d86:	6838      	ldr	r0, [r7, #0]
 8000d88:	f7ff ffed 	bl	8000d66 <_ZSt7forwardISt10shared_ptrIN4tama7OnInputEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8000d8c:	4604      	mov	r4, r0
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4619      	mov	r1, r3
 8000d92:	2008      	movs	r0, #8
 8000d94:	f7ff fbcb 	bl	800052e <_ZnwjPv>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d003      	beq.n	8000da6 <_ZSt10_ConstructISt10shared_ptrIN4tama7OnInputEEJS3_EEvPT_DpOT0_+0x2a>
 8000d9e:	4621      	mov	r1, r4
 8000da0:	4618      	mov	r0, r3
 8000da2:	f000 f825 	bl	8000df0 <_ZNSt10shared_ptrIN4tama7OnInputEEC1EOS2_>
 8000da6:	bf00      	nop
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd90      	pop	{r4, r7, pc}

08000dae <_ZSteqIPSt10shared_ptrIN4tama7OnInputEEEbRKSt13move_iteratorIT_ES9_>:
    operator==(const move_iterator<_Iterator>& __x,
 8000dae:	b590      	push	{r4, r7, lr}
 8000db0:	b083      	sub	sp, #12
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
 8000db6:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	f000 f82c 	bl	8000e16 <_ZNKSt13move_iteratorIPSt10shared_ptrIN4tama7OnInputEEE4baseEv>
 8000dbe:	4604      	mov	r4, r0
 8000dc0:	6838      	ldr	r0, [r7, #0]
 8000dc2:	f000 f828 	bl	8000e16 <_ZNKSt13move_iteratorIPSt10shared_ptrIN4tama7OnInputEEE4baseEv>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	429c      	cmp	r4, r3
 8000dca:	bf0c      	ite	eq
 8000dcc:	2301      	moveq	r3, #1
 8000dce:	2300      	movne	r3, #0
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	370c      	adds	r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd90      	pop	{r4, r7, pc}

08000dda <_ZSt4moveIRSt10shared_ptrIN4tama7OnInputEEEONSt16remove_referenceIT_E4typeEOS6_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8000dda:	b480      	push	{r7}
 8000ddc:	b083      	sub	sp, #12
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4618      	mov	r0, r3
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr

08000df0 <_ZNSt10shared_ptrIN4tama7OnInputEEC1EOS2_>:
      /**
       *  @brief  Move-constructs a %shared_ptr instance from @a __r.
       *  @param  __r  A %shared_ptr rvalue.
       *  @post   *this contains the old value of @a __r, @a __r is empty.
       */
      shared_ptr(shared_ptr&& __r) noexcept
 8000df0:	b590      	push	{r4, r7, lr}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	6039      	str	r1, [r7, #0]
      : __shared_ptr<_Tp>(std::move(__r)) { }
 8000dfa:	687c      	ldr	r4, [r7, #4]
 8000dfc:	6838      	ldr	r0, [r7, #0]
 8000dfe:	f7ff ffec 	bl	8000dda <_ZSt4moveIRSt10shared_ptrIN4tama7OnInputEEEONSt16remove_referenceIT_E4typeEOS6_>
 8000e02:	4603      	mov	r3, r0
 8000e04:	4619      	mov	r1, r3
 8000e06:	4620      	mov	r0, r4
 8000e08:	f000 f811 	bl	8000e2e <_ZNSt12__shared_ptrIN4tama7OnInputELN9__gnu_cxx12_Lock_policyE0EEC1EOS4_>
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	4618      	mov	r0, r3
 8000e10:	370c      	adds	r7, #12
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd90      	pop	{r4, r7, pc}

08000e16 <_ZNKSt13move_iteratorIPSt10shared_ptrIN4tama7OnInputEEE4baseEv>:
      base() const
 8000e16:	b480      	push	{r7}
 8000e18:	b083      	sub	sp, #12
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4618      	mov	r0, r3
 8000e24:	370c      	adds	r7, #12
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr

08000e2e <_ZNSt12__shared_ptrIN4tama7OnInputELN9__gnu_cxx12_Lock_policyE0EEC1EOS4_>:
      template<typename _Yp, typename = _Compatible<_Yp>>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b082      	sub	sp, #8
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
 8000e36:	6039      	str	r1, [r7, #0]
      : _M_ptr(__r._M_ptr), _M_refcount()
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	3304      	adds	r3, #4
 8000e44:	4618      	mov	r0, r3
 8000e46:	f000 f810 	bl	8000e6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
      {
	_M_refcount._M_swap(__r._M_refcount);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	1d1a      	adds	r2, r3, #4
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	3304      	adds	r3, #4
 8000e52:	4619      	mov	r1, r3
 8000e54:	4610      	mov	r0, r2
 8000e56:	f000 f816 	bl	8000e86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	__r._M_ptr = 0;
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
      }
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	4618      	mov	r0, r3
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_count() noexcept : _M_pi(0)
 8000e6a:	b480      	push	{r7}
 8000e6c:	b083      	sub	sp, #12
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
      { }
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr

08000e86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>:
      _M_swap(__shared_count& __r) noexcept
 8000e86:	b480      	push	{r7}
 8000e88:	b085      	sub	sp, #20
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
 8000e8e:	6039      	str	r1, [r7, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	60fb      	str	r3, [r7, #12]
	__r._M_pi = _M_pi;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	601a      	str	r2, [r3, #0]
	_M_pi = __tmp;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	68fa      	ldr	r2, [r7, #12]
 8000ea2:	601a      	str	r2, [r3, #0]
      }
 8000ea4:	bf00      	nop
 8000ea6:	3714      	adds	r7, #20
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr

08000eb0 <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ebe:	d205      	bcs.n	8000ecc <_ZSt16__deque_buf_sizej+0x1c>
 8000ec0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eca:	e000      	b.n	8000ece <_ZSt16__deque_buf_sizej+0x1e>
 8000ecc:	2301      	movs	r3, #1
 8000ece:	4618      	mov	r0, r3
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr

08000eda <_ZN4tama7Context12openNewStageESt10shared_ptrINS_5StageEE>:


#include <utility>

void tama::Context::openNewStage(std::shared_ptr<Stage> stage)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b082      	sub	sp, #8
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
 8000ee2:	6039      	str	r1, [r7, #0]
    stages.push(stage);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6839      	ldr	r1, [r7, #0]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f000 f8fa 	bl	80010e2 <_ZNSt5stackISt10shared_ptrIN4tama5StageEESt5dequeIS3_SaIS3_EEE4pushERKS3_>
}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <_ZN4tama7Context11switchStageESt10shared_ptrINS_5StageEE>:
{
    stages.pop();
}

void tama::Context::switchStage(std::shared_ptr<Stage> stage)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b082      	sub	sp, #8
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
 8000efe:	6039      	str	r1, [r7, #0]
    if (stages.size() > 0)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	4618      	mov	r0, r3
 8000f04:	f000 f907 	bl	8001116 <_ZNKSt5stackISt10shared_ptrIN4tama5StageEESt5dequeIS3_SaIS3_EEE4sizeEv>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	bf14      	ite	ne
 8000f0e:	2301      	movne	r3, #1
 8000f10:	2300      	moveq	r3, #0
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d003      	beq.n	8000f20 <_ZN4tama7Context11switchStageESt10shared_ptrINS_5StageEE+0x2a>
    {
        stages.pop();
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f000 f8ef 	bl	80010fe <_ZNSt5stackISt10shared_ptrIN4tama5StageEESt5dequeIS3_SaIS3_EEE3popEv>
    }
    stages.push(stage);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6839      	ldr	r1, [r7, #0]
 8000f24:	4618      	mov	r0, r3
 8000f26:	f000 f8dc 	bl	80010e2 <_ZNSt5stackISt10shared_ptrIN4tama5StageEESt5dequeIS3_SaIS3_EEE4pushERKS3_>
}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <_ZNSt12__shared_ptrIN4tama5StageELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b082      	sub	sp, #8
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
 8000f3a:	6039      	str	r1, [r7, #0]
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	1d1a      	adds	r2, r3, #4
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	3304      	adds	r3, #4
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4610      	mov	r0, r2
 8000f50:	f7ff fd58 	bl	8000a04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	4618      	mov	r0, r3
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <_ZNSt12__shared_ptrIN4tama5StageELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_ptr() = default;
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b082      	sub	sp, #8
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	3304      	adds	r3, #4
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff fd61 	bl	8000a32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	4618      	mov	r0, r3
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <_ZNSt10shared_ptrIN4tama5StageEEC1ERKS2_>:
      shared_ptr(const shared_ptr&) noexcept = default;
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b082      	sub	sp, #8
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
 8000f82:	6039      	str	r1, [r7, #0]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	683a      	ldr	r2, [r7, #0]
 8000f88:	4611      	mov	r1, r2
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff ffd1 	bl	8000f32 <_ZNSt12__shared_ptrIN4tama5StageELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4618      	mov	r0, r3
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <_ZNSt10shared_ptrIN4tama5StageEED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b082      	sub	sp, #8
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff ffda 	bl	8000f5e <_ZNSt12__shared_ptrIN4tama5StageELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4618      	mov	r0, r3
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <_ZN4tama7Context14getActiveStageEv>:

std::shared_ptr<tama::Stage> tama::Context::getActiveStage()
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]
    return stages.top(); // @todo return null object if no stage created
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f000 f8b5 	bl	8001130 <_ZNSt5stackISt10shared_ptrIN4tama5StageEESt5dequeIS3_SaIS3_EEE3topEv>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	4619      	mov	r1, r3
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f7ff ffd5 	bl	8000f7a <_ZNSt10shared_ptrIN4tama5StageEEC1ERKS2_>
}
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <_ZNSt12__shared_ptrIN4tama13TextureLoaderELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	1d1a      	adds	r2, r3, #4
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	3304      	adds	r3, #4
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4610      	mov	r0, r2
 8000ff6:	f7ff fd05 	bl	8000a04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <_ZNSt10shared_ptrIN4tama13TextureLoaderEEC1ERKS2_>:
      shared_ptr(const shared_ptr&) noexcept = default;
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	683a      	ldr	r2, [r7, #0]
 8001012:	4611      	mov	r1, r2
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff ffdf 	bl	8000fd8 <_ZNSt12__shared_ptrIN4tama13TextureLoaderELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4618      	mov	r0, r3
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <_ZNSt12__shared_ptrIN4tama5InputELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	1d1a      	adds	r2, r3, #4
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	3304      	adds	r3, #4
 800103e:	4619      	mov	r1, r3
 8001040:	4610      	mov	r0, r2
 8001042:	f7ff fcdf 	bl	8000a04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4618      	mov	r0, r3
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <_ZNSt10shared_ptrIN4tama5InputEEC1ERKS2_>:
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6039      	str	r1, [r7, #0]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	683a      	ldr	r2, [r7, #0]
 800105e:	4611      	mov	r1, r2
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff ffdf 	bl	8001024 <_ZNSt12__shared_ptrIN4tama5InputELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4618      	mov	r0, r3
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <_ZN4tama7ContextC1ESt10shared_ptrINS_13TextureLoaderEES1_INS_5InputEE>:

tama::Context::Context(std::shared_ptr<TextureLoader> textureLoader, std::shared_ptr<Input> input)
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
: textureLoader(textureLoader), input(input)
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	4618      	mov	r0, r3
 8001080:	f000 f863 	bl	800114a <_ZNSt5stackISt10shared_ptrIN4tama5StageEESt5dequeIS3_SaIS3_EEEC1IS6_vEEv>
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	3328      	adds	r3, #40	; 0x28
 8001088:	68b9      	ldr	r1, [r7, #8]
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff ffba 	bl	8001004 <_ZNSt10shared_ptrIN4tama13TextureLoaderEEC1ERKS2_>
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	3330      	adds	r3, #48	; 0x30
 8001094:	6879      	ldr	r1, [r7, #4]
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff ffda 	bl	8001050 <_ZNSt10shared_ptrIN4tama5InputEEC1ERKS2_>
{
}
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	4618      	mov	r0, r3
 80010a0:	3710      	adds	r7, #16
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <_ZN4tama7Context16getTextureLoaderEv>:

std::shared_ptr<tama::TextureLoader> tama::Context::getTextureLoader()
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b082      	sub	sp, #8
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
 80010ae:	6039      	str	r1, [r7, #0]
    return textureLoader;
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	3328      	adds	r3, #40	; 0x28
 80010b4:	4619      	mov	r1, r3
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f7ff ffa4 	bl	8001004 <_ZNSt10shared_ptrIN4tama13TextureLoaderEEC1ERKS2_>
}
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <_ZN4tama7Context8getInputEv>:

std::shared_ptr<tama::Input> tama::Context::getInput()
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
    return input;
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	3330      	adds	r3, #48	; 0x30
 80010d2:	4619      	mov	r1, r3
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f7ff ffbb 	bl	8001050 <_ZNSt10shared_ptrIN4tama5InputEEC1ERKS2_>
}
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <_ZNSt5stackISt10shared_ptrIN4tama5StageEESt5dequeIS3_SaIS3_EEE4pushERKS3_>:
       *  element at the top of the %stack and assigns the given data
       *  to it.  The time complexity of the operation depends on the
       *  underlying sequence.
       */
      void
      push(const value_type& __x)
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b082      	sub	sp, #8
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
 80010ea:	6039      	str	r1, [r7, #0]
      { c.push_back(__x); }
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6839      	ldr	r1, [r7, #0]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f000 f837 	bl	8001164 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE9push_backERKS3_>
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <_ZNSt5stackISt10shared_ptrIN4tama5StageEESt5dequeIS3_SaIS3_EEE3popEv>:
       *  Note that no data is returned, and if the first element's
       *  data is needed, it should be retrieved before pop() is
       *  called.
       */
      void
      pop()
 80010fe:	b580      	push	{r7, lr}
 8001100:	b082      	sub	sp, #8
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	c.pop_back();
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4618      	mov	r0, r3
 800110a:	f000 f84d 	bl	80011a8 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE8pop_backEv>
      }
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <_ZNKSt5stackISt10shared_ptrIN4tama5StageEESt5dequeIS3_SaIS3_EEE4sizeEv>:
      size() const
 8001116:	b580      	push	{r7, lr}
 8001118:	b082      	sub	sp, #8
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
      { return c.size(); }
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4618      	mov	r0, r3
 8001122:	f000 f860 	bl	80011e6 <_ZNKSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE4sizeEv>
 8001126:	4603      	mov	r3, r0
 8001128:	4618      	mov	r0, r3
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <_ZNSt5stackISt10shared_ptrIN4tama5StageEESt5dequeIS3_SaIS3_EEE3topEv>:
      top()
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
	return c.back();
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	4618      	mov	r0, r3
 800113c:	f000 f865 	bl	800120a <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE4backEv>
 8001140:	4603      	mov	r3, r0
      }
 8001142:	4618      	mov	r0, r3
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <_ZNSt5stackISt10shared_ptrIN4tama5StageEESt5dequeIS3_SaIS3_EEEC1IS6_vEEv>:
	stack()
 800114a:	b580      	push	{r7, lr}
 800114c:	b082      	sub	sp, #8
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
	: c() { }
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4618      	mov	r0, r3
 8001156:	f000 f871 	bl	800123c <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EEC1Ev>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4618      	mov	r0, r3
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE9push_backERKS3_>:
       *  element at the end of the %deque and assigns the given data
       *  to it.  Due to the nature of a %deque this operation can be
       *  done in constant time.
       */
      void
      push_back(const value_type& __x)
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish._M_cur
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6a1b      	ldr	r3, [r3, #32]
 8001176:	3b08      	subs	r3, #8
	if (this->_M_impl._M_finish._M_cur
 8001178:	429a      	cmp	r2, r3
 800117a:	d00d      	beq.n	8001198 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE9push_backERKS3_+0x34>
	  {
	    _Alloc_traits::construct(this->_M_impl,
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	699b      	ldr	r3, [r3, #24]
 8001182:	683a      	ldr	r2, [r7, #0]
 8001184:	4619      	mov	r1, r3
 8001186:	f000 f8a7 	bl	80012d8 <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama5StageEEEE9constructIS3_JRKS3_EEEvRS4_PT_DpOT0_>
				     this->_M_impl._M_finish._M_cur, __x);
	    ++this->_M_impl._M_finish._M_cur;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	699b      	ldr	r3, [r3, #24]
 800118e:	f103 0208 	add.w	r2, r3, #8
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	619a      	str	r2, [r3, #24]
	  }
	else
	  _M_push_back_aux(__x);
      }
 8001196:	e003      	b.n	80011a0 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE9push_backERKS3_+0x3c>
	  _M_push_back_aux(__x);
 8001198:	6839      	ldr	r1, [r7, #0]
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f000 f8af 	bl	80012fe <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE16_M_push_back_auxIJRKS3_EEEvDpOT_>
      }
 80011a0:	bf00      	nop
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE8pop_backEv>:
       *
       *  Note that no data is returned, and if the last element's data is
       *  needed, it should be retrieved before pop_back() is called.
       */
      void
      pop_back() _GLIBCXX_NOEXCEPT
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_finish._M_cur
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_first)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	69db      	ldr	r3, [r3, #28]
	if (this->_M_impl._M_finish._M_cur
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d00d      	beq.n	80011d8 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE8pop_backEv+0x30>
	  {
	    --this->_M_impl._M_finish._M_cur;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	f1a3 0208 	sub.w	r2, r3, #8
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	619a      	str	r2, [r3, #24]
	    _Alloc_traits::destroy(this->_M_impl,
 80011c8:	687a      	ldr	r2, [r7, #4]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	699b      	ldr	r3, [r3, #24]
 80011ce:	4619      	mov	r1, r3
 80011d0:	4610      	mov	r0, r2
 80011d2:	f000 f8c4 	bl	800135e <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama5StageEEEE7destroyIS3_EEvRS4_PT_>
				   this->_M_impl._M_finish._M_cur);
	  }
	else
	  _M_pop_back_aux();
      }
 80011d6:	e002      	b.n	80011de <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE8pop_backEv+0x36>
	  _M_pop_back_aux();
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f000 f8cd 	bl	8001378 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE15_M_pop_back_auxEv>
      }
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <_ZNKSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b082      	sub	sp, #8
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f103 0218 	add.w	r2, r3, #24
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3308      	adds	r3, #8
 80011f8:	4619      	mov	r1, r3
 80011fa:	4610      	mov	r0, r2
 80011fc:	f000 f8e6 	bl	80013cc <_ZStmiISt10shared_ptrIN4tama5StageEERS3_PS3_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKSA_SD_>
 8001200:	4603      	mov	r3, r0
 8001202:	4618      	mov	r0, r3
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 800120a:	b580      	push	{r7, lr}
 800120c:	b086      	sub	sp, #24
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
	iterator __tmp = end();
 8001212:	f107 0308 	add.w	r3, r7, #8
 8001216:	6879      	ldr	r1, [r7, #4]
 8001218:	4618      	mov	r0, r3
 800121a:	f000 f81c 	bl	8001256 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE3endEv>
	--__tmp;
 800121e:	f107 0308 	add.w	r3, r7, #8
 8001222:	4618      	mov	r0, r3
 8001224:	f000 f8f9 	bl	800141a <_ZNSt15_Deque_iteratorISt10shared_ptrIN4tama5StageEERS3_PS3_EmmEv>
	return *__tmp;
 8001228:	f107 0308 	add.w	r3, r7, #8
 800122c:	4618      	mov	r0, r3
 800122e:	f000 f914 	bl	800145a <_ZNKSt15_Deque_iteratorISt10shared_ptrIN4tama5StageEERS3_PS3_EdeEv>
 8001232:	4603      	mov	r3, r0
      }
 8001234:	4618      	mov	r0, r3
 8001236:	3718      	adds	r7, #24
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EEC1Ev>:
      deque() : _Base() { }
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	4618      	mov	r0, r3
 8001248:	f000 f913 	bl	8001472 <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EEC1Ev>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4618      	mov	r0, r3
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8001256:	b580      	push	{r7, lr}
 8001258:	b082      	sub	sp, #8
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
 800125e:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	3318      	adds	r3, #24
 8001264:	4619      	mov	r1, r3
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f000 f80f 	bl	800128a <_ZNSt15_Deque_iteratorISt10shared_ptrIN4tama5StageEERS3_PS3_EC1ERKS6_>
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	4618      	mov	r0, r3
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr

0800128a <_ZNSt15_Deque_iteratorISt10shared_ptrIN4tama5StageEERS3_PS3_EC1ERKS6_>:
      _Deque_iterator(const iterator& __x) _GLIBCXX_NOEXCEPT
 800128a:	b480      	push	{r7}
 800128c:	b083      	sub	sp, #12
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
 8001292:	6039      	str	r1, [r7, #0]
      : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	681a      	ldr	r2, [r3, #0]
	_M_last(__x._M_last), _M_node(__x._M_node) { }
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	601a      	str	r2, [r3, #0]
      : _M_cur(__x._M_cur), _M_first(__x._M_first),
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685a      	ldr	r2, [r3, #4]
	_M_last(__x._M_last), _M_node(__x._M_node) { }
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	605a      	str	r2, [r3, #4]
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	689a      	ldr	r2, [r3, #8]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	68da      	ldr	r2, [r3, #12]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	60da      	str	r2, [r3, #12]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	4618      	mov	r0, r3
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr

080012c2 <_ZSt7forwardIRKSt10shared_ptrIN4tama5StageEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80012c2:	b480      	push	{r7}
 80012c4:	b083      	sub	sp, #12
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4618      	mov	r0, r3
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama5StageEEEE9constructIS3_JRKS3_EEEvRS4_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f7ff ffec 	bl	80012c2 <_ZSt7forwardIRKSt10shared_ptrIN4tama5StageEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80012ea:	4603      	mov	r3, r0
 80012ec:	461a      	mov	r2, r3
 80012ee:	68b9      	ldr	r1, [r7, #8]
 80012f0:	68f8      	ldr	r0, [r7, #12]
 80012f2:	f000 f8eb 	bl	80014cc <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama5StageEEE9constructIS4_JRKS4_EEEvPT_DpOT0_>
 80012f6:	bf00      	nop
 80012f8:	3710      	adds	r7, #16
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE16_M_push_back_auxIJRKS3_EEEvDpOT_>:
  // Called only if _M_impl._M_finish._M_cur == _M_impl._M_finish._M_last - 1.
  template<typename _Tp, typename _Alloc>
#if __cplusplus >= 201103L
    template<typename... _Args>
      void
      deque<_Tp, _Alloc>::
 80012fe:	b5b0      	push	{r4, r5, r7, lr}
 8001300:	b082      	sub	sp, #8
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
 8001306:	6039      	str	r1, [r7, #0]
      void
      deque<_Tp, _Alloc>::
      _M_push_back_aux(const value_type& __t)
#endif
      {
	_M_reserve_map_at_back();
 8001308:	2101      	movs	r1, #1
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f000 f8f8 	bl	8001500 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 8001310:	687a      	ldr	r2, [r7, #4]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001316:	1d1c      	adds	r4, r3, #4
 8001318:	4610      	mov	r0, r2
 800131a:	f000 f90d 	bl	8001538 <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE16_M_allocate_nodeEv>
 800131e:	4603      	mov	r3, r0
 8001320:	6023      	str	r3, [r4, #0]
	__try
	  {
#if __cplusplus >= 201103L
	    _Alloc_traits::construct(this->_M_impl,
 8001322:	687c      	ldr	r4, [r7, #4]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	699d      	ldr	r5, [r3, #24]
 8001328:	6838      	ldr	r0, [r7, #0]
 800132a:	f7ff ffca 	bl	80012c2 <_ZSt7forwardIRKSt10shared_ptrIN4tama5StageEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800132e:	4603      	mov	r3, r0
 8001330:	461a      	mov	r2, r3
 8001332:	4629      	mov	r1, r5
 8001334:	4620      	mov	r0, r4
 8001336:	f7ff ffcf 	bl	80012d8 <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama5StageEEEE9constructIS3_JRKS3_EEEvRS4_PT_DpOT0_>
	                             this->_M_impl._M_finish._M_cur,
			             std::forward<_Args>(__args)...);
#else
	    this->_M_impl.construct(this->_M_impl._M_finish._M_cur, __t);
#endif
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	f103 0218 	add.w	r2, r3, #24
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001344:	3304      	adds	r3, #4
 8001346:	4619      	mov	r1, r3
 8001348:	4610      	mov	r0, r2
 800134a:	f000 f907 	bl	800155c <_ZNSt15_Deque_iteratorISt10shared_ptrIN4tama5StageEERS3_PS3_E11_M_set_nodeEPS5_>
						+ 1);
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	69da      	ldr	r2, [r3, #28]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	619a      	str	r2, [r3, #24]
	__catch(...)
	  {
	    _M_deallocate_node(*(this->_M_impl._M_finish._M_node + 1));
	    __throw_exception_again;
	  }
      }
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bdb0      	pop	{r4, r5, r7, pc}

0800135e <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama5StageEEEE7destroyIS3_EEvRS4_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 800135e:	b580      	push	{r7, lr}
 8001360:	b082      	sub	sp, #8
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
 8001366:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 8001368:	6839      	ldr	r1, [r7, #0]
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f000 f922 	bl	80015b4 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama5StageEEE7destroyIS4_EEvPT_>
 8001370:	bf00      	nop
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE15_M_pop_back_auxEv>:
	  }
      }

  // Called only if _M_impl._M_finish._M_cur == _M_impl._M_finish._M_first.
  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
    _M_pop_back_aux()
    {
      _M_deallocate_node(this->_M_impl._M_finish._M_first);
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	69db      	ldr	r3, [r3, #28]
 8001386:	4619      	mov	r1, r3
 8001388:	4610      	mov	r0, r2
 800138a:	f000 f900 	bl	800158e <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE18_M_deallocate_nodeEPS3_>
      this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node - 1);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	f103 0218 	add.w	r2, r3, #24
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001398:	3b04      	subs	r3, #4
 800139a:	4619      	mov	r1, r3
 800139c:	4610      	mov	r0, r2
 800139e:	f000 f8dd 	bl	800155c <_ZNSt15_Deque_iteratorISt10shared_ptrIN4tama5StageEERS3_PS3_E11_M_set_nodeEPS5_>
      this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_last - 1;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6a1b      	ldr	r3, [r3, #32]
 80013a6:	f1a3 0208 	sub.w	r2, r3, #8
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	619a      	str	r2, [r3, #24]
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff ff5f 	bl	8001274 <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE19_M_get_Tp_allocatorEv>
 80013b6:	4602      	mov	r2, r0
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	4619      	mov	r1, r3
 80013be:	4610      	mov	r0, r2
 80013c0:	f7ff ffcd 	bl	800135e <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama5StageEEEE7destroyIS3_EEvRS4_PT_>
			     this->_M_impl._M_finish._M_cur);
    }
 80013c4:	bf00      	nop
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <_ZStmiISt10shared_ptrIN4tama5StageEERS3_PS3_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKSA_SD_>:
    operator-(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
	(_Deque_iterator<_Tp, _Ref, _Ptr>::_S_buffer_size())
 80013d6:	f000 f8f9 	bl	80015cc <_ZNSt15_Deque_iteratorISt10shared_ptrIN4tama5StageEERS3_PS3_E14_S_buffer_sizeEv>
 80013da:	4603      	mov	r3, r0
 80013dc:	461a      	mov	r2, r3
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	68db      	ldr	r3, [r3, #12]
 80013e2:	4619      	mov	r1, r3
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	1acb      	subs	r3, r1, r3
 80013ea:	109b      	asrs	r3, r3, #2
 80013ec:	3b01      	subs	r3, #1
 80013ee:	fb03 f302 	mul.w	r3, r3, r2
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	6812      	ldr	r2, [r2, #0]
 80013f6:	4611      	mov	r1, r2
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	6852      	ldr	r2, [r2, #4]
 80013fc:	1a8a      	subs	r2, r1, r2
 80013fe:	10d2      	asrs	r2, r2, #3
 8001400:	4413      	add	r3, r2
	+ (__y._M_last - __y._M_cur);
 8001402:	683a      	ldr	r2, [r7, #0]
 8001404:	6892      	ldr	r2, [r2, #8]
 8001406:	4611      	mov	r1, r2
 8001408:	683a      	ldr	r2, [r7, #0]
 800140a:	6812      	ldr	r2, [r2, #0]
 800140c:	1a8a      	subs	r2, r1, r2
 800140e:	10d2      	asrs	r2, r2, #3
 8001410:	4413      	add	r3, r2
    }
 8001412:	4618      	mov	r0, r3
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <_ZNSt15_Deque_iteratorISt10shared_ptrIN4tama5StageEERS3_PS3_EmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 800141a:	b580      	push	{r7, lr}
 800141c:	b082      	sub	sp, #8
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
	if (_M_cur == _M_first)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	429a      	cmp	r2, r3
 800142c:	d10a      	bne.n	8001444 <_ZNSt15_Deque_iteratorISt10shared_ptrIN4tama5StageEERS3_PS3_EmmEv+0x2a>
	    _M_set_node(_M_node - 1);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	68db      	ldr	r3, [r3, #12]
 8001432:	3b04      	subs	r3, #4
 8001434:	4619      	mov	r1, r3
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f000 f890 	bl	800155c <_ZNSt15_Deque_iteratorISt10shared_ptrIN4tama5StageEERS3_PS3_E11_M_set_nodeEPS5_>
	    _M_cur = _M_last;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	689a      	ldr	r2, [r3, #8]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	601a      	str	r2, [r3, #0]
	--_M_cur;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f1a3 0208 	sub.w	r2, r3, #8
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	601a      	str	r2, [r3, #0]
	return *this;
 8001450:	687b      	ldr	r3, [r7, #4]
      }
 8001452:	4618      	mov	r0, r3
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <_ZNKSt15_Deque_iteratorISt10shared_ptrIN4tama5StageEERS3_PS3_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800145a:	b480      	push	{r7}
 800145c:	b083      	sub	sp, #12
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4618      	mov	r0, r3
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr

08001472 <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EEC1Ev>:
      _Deque_base()
 8001472:	b580      	push	{r7, lr}
 8001474:	b082      	sub	sp, #8
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
      : _M_impl()
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4618      	mov	r0, r3
 800147e:	f000 f8ad 	bl	80015dc <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8001482:	2100      	movs	r1, #0
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f000 f8c5 	bl	8001614 <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE17_M_initialize_mapEj>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4618      	mov	r0, r3
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE17_M_deallocate_mapEPPS3_j>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 8001494:	b580      	push	{r7, lr}
 8001496:	b086      	sub	sp, #24
 8001498:	af00      	add	r7, sp, #0
 800149a:	60f8      	str	r0, [r7, #12]
 800149c:	60b9      	str	r1, [r7, #8]
 800149e:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80014a0:	f107 0314 	add.w	r3, r7, #20
 80014a4:	68f9      	ldr	r1, [r7, #12]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f000 f917 	bl	80016da <_ZNKSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 80014ac:	f107 0314 	add.w	r3, r7, #20
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	68b9      	ldr	r1, [r7, #8]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f000 f92d 	bl	8001714 <_ZNSt16allocator_traitsISaIPSt10shared_ptrIN4tama5StageEEEE10deallocateERS5_PS4_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80014ba:	f107 0314 	add.w	r3, r7, #20
 80014be:	4618      	mov	r0, r3
 80014c0:	f000 f91c 	bl	80016fc <_ZNSaIPSt10shared_ptrIN4tama5StageEEED1Ev>
      }
 80014c4:	bf00      	nop
 80014c6:	3718      	adds	r7, #24
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama5StageEEE9constructIS4_JRKS4_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80014cc:	b590      	push	{r4, r7, lr}
 80014ce:	b085      	sub	sp, #20
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	60b9      	str	r1, [r7, #8]
 80014d6:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f7ff fef2 	bl	80012c2 <_ZSt7forwardIRKSt10shared_ptrIN4tama5StageEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80014de:	4604      	mov	r4, r0
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	4619      	mov	r1, r3
 80014e4:	2008      	movs	r0, #8
 80014e6:	f7ff f822 	bl	800052e <_ZnwjPv>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d003      	beq.n	80014f8 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama5StageEEE9constructIS4_JRKS4_EEEvPT_DpOT0_+0x2c>
 80014f0:	4621      	mov	r1, r4
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff fd41 	bl	8000f7a <_ZNSt10shared_ptrIN4tama5StageEEC1ERKS2_>
 80014f8:	bf00      	nop
 80014fa:	3714      	adds	r7, #20
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd90      	pop	{r4, r7, pc}

08001500 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE22_M_reserve_map_at_backEj>:
       *  Makes sure the _M_map has space for new nodes.  Does not
       *  actually add the nodes.  Can invalidate _M_map pointers.
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	6039      	str	r1, [r7, #0]
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	1c5a      	adds	r2, r3, #1
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 8001512:	6879      	ldr	r1, [r7, #4]
 8001514:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8001516:	4608      	mov	r0, r1
 8001518:	6879      	ldr	r1, [r7, #4]
 800151a:	6809      	ldr	r1, [r1, #0]
 800151c:	1a41      	subs	r1, r0, r1
 800151e:	1089      	asrs	r1, r1, #2
 8001520:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8001522:	429a      	cmp	r2, r3
 8001524:	d904      	bls.n	8001530 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE22_M_reserve_map_at_backEj+0x30>
	  _M_reallocate_map(__nodes_to_add, false);
 8001526:	2200      	movs	r2, #0
 8001528:	6839      	ldr	r1, [r7, #0]
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f000 f901 	bl	8001732 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE17_M_reallocate_mapEjb>
      }
 8001530:	bf00      	nop
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE16_M_allocate_nodeEv>:
      _M_allocate_node()
 8001538:	b590      	push	{r4, r7, lr}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 8001540:	687c      	ldr	r4, [r7, #4]
 8001542:	2008      	movs	r0, #8
 8001544:	f7ff fcb4 	bl	8000eb0 <_ZSt16__deque_buf_sizej>
 8001548:	4603      	mov	r3, r0
 800154a:	4619      	mov	r1, r3
 800154c:	4620      	mov	r0, r4
 800154e:	f000 f98b 	bl	8001868 <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama5StageEEEE8allocateERS4_j>
 8001552:	4603      	mov	r3, r0
      }
 8001554:	4618      	mov	r0, r3
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	bd90      	pop	{r4, r7, pc}

0800155c <_ZNSt15_Deque_iteratorISt10shared_ptrIN4tama5StageEERS3_PS3_E11_M_set_nodeEPS5_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 800155c:	b590      	push	{r4, r7, lr}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	683a      	ldr	r2, [r7, #0]
 800156a:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	685c      	ldr	r4, [r3, #4]
 8001578:	f000 f828 	bl	80015cc <_ZNSt15_Deque_iteratorISt10shared_ptrIN4tama5StageEERS3_PS3_E14_S_buffer_sizeEv>
 800157c:	4603      	mov	r3, r0
 800157e:	00db      	lsls	r3, r3, #3
 8001580:	18e2      	adds	r2, r4, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	609a      	str	r2, [r3, #8]
      }
 8001586:	bf00      	nop
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	bd90      	pop	{r4, r7, pc}

0800158e <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE18_M_deallocate_nodeEPS3_>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 800158e:	b590      	push	{r4, r7, lr}
 8001590:	b083      	sub	sp, #12
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
 8001596:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 8001598:	687c      	ldr	r4, [r7, #4]
 800159a:	2008      	movs	r0, #8
 800159c:	f7ff fc88 	bl	8000eb0 <_ZSt16__deque_buf_sizej>
 80015a0:	4603      	mov	r3, r0
 80015a2:	461a      	mov	r2, r3
 80015a4:	6839      	ldr	r1, [r7, #0]
 80015a6:	4620      	mov	r0, r4
 80015a8:	f000 f96d 	bl	8001886 <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama5StageEEEE10deallocateERS4_PS3_j>
      }
 80015ac:	bf00      	nop
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd90      	pop	{r4, r7, pc}

080015b4 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama5StageEEE7destroyIS4_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p) { __p->~_Up(); }
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
 80015be:	6838      	ldr	r0, [r7, #0]
 80015c0:	f7ff fceb 	bl	8000f9a <_ZNSt10shared_ptrIN4tama5StageEED1Ev>
 80015c4:	bf00      	nop
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <_ZNSt15_Deque_iteratorISt10shared_ptrIN4tama5StageEERS3_PS3_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 80015d0:	2008      	movs	r0, #8
 80015d2:	f7ff fc6d 	bl	8000eb0 <_ZSt16__deque_buf_sizej>
 80015d6:	4603      	mov	r3, r0
 80015d8:	4618      	mov	r0, r3
 80015da:	bd80      	pop	{r7, pc}

080015dc <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE11_Deque_implC1Ev>:
	_Deque_impl()
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
	  _M_start(), _M_finish()
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f000 f95d 	bl	80018a4 <_ZNSaISt10shared_ptrIN4tama5StageEEEC1Ev>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2200      	movs	r2, #0
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	3308      	adds	r3, #8
 80015fa:	4618      	mov	r0, r3
 80015fc:	f000 f95e 	bl	80018bc <_ZNSt15_Deque_iteratorISt10shared_ptrIN4tama5StageEERS3_PS3_EC1Ev>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	3318      	adds	r3, #24
 8001604:	4618      	mov	r0, r3
 8001606:	f000 f959 	bl	80018bc <_ZNSt15_Deque_iteratorISt10shared_ptrIN4tama5StageEERS3_PS3_EC1Ev>
	{ }
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4618      	mov	r0, r3
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8001614:	b590      	push	{r4, r7, lr}
 8001616:	b089      	sub	sp, #36	; 0x24
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements/ __deque_buf_size(sizeof(_Tp))
 800161e:	2008      	movs	r0, #8
 8001620:	f7ff fc46 	bl	8000eb0 <_ZSt16__deque_buf_sizej>
 8001624:	4602      	mov	r2, r0
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	fbb3 f3f2 	udiv	r3, r3, r2
 800162c:	3301      	adds	r3, #1
 800162e:	61fb      	str	r3, [r7, #28]
					   size_t(__num_nodes + 2));
 8001630:	2308      	movs	r3, #8
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	3302      	adds	r3, #2
 8001638:	613b      	str	r3, [r7, #16]
 800163a:	f107 0210 	add.w	r2, r7, #16
 800163e:	f107 030c 	add.w	r3, r7, #12
 8001642:	4611      	mov	r1, r2
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff fa28 	bl	8000a9a <_ZSt3maxIjERKT_S2_S2_>
 800164a:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	4619      	mov	r1, r3
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f000 f946 	bl	80018ea <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE15_M_allocate_mapEj>
 800165e:	4602      	mov	r2, r0
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6859      	ldr	r1, [r3, #4]
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	1acb      	subs	r3, r1, r3
 8001670:	085b      	lsrs	r3, r3, #1
 8001672:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 8001674:	4413      	add	r3, r2
 8001676:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	4413      	add	r3, r2
 8001680:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 8001682:	697a      	ldr	r2, [r7, #20]
 8001684:	69b9      	ldr	r1, [r7, #24]
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f000 f94b 	bl	8001922 <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE15_M_create_nodesEPPS3_S7_>
      this->_M_impl._M_start._M_set_node(__nstart);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3308      	adds	r3, #8
 8001690:	69b9      	ldr	r1, [r7, #24]
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff ff62 	bl	800155c <_ZNSt15_Deque_iteratorISt10shared_ptrIN4tama5StageEERS3_PS3_E11_M_set_nodeEPS5_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f103 0218 	add.w	r2, r3, #24
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	3b04      	subs	r3, #4
 80016a2:	4619      	mov	r1, r3
 80016a4:	4610      	mov	r0, r2
 80016a6:	f7ff ff59 	bl	800155c <_ZNSt15_Deque_iteratorISt10shared_ptrIN4tama5StageEERS3_PS3_E11_M_set_nodeEPS5_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	68da      	ldr	r2, [r3, #12]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 80016b6:	2008      	movs	r0, #8
 80016b8:	f7ff fbfa 	bl	8000eb0 <_ZSt16__deque_buf_sizej>
 80016bc:	4602      	mov	r2, r0
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80016c4:	fb02 f201 	mul.w	r2, r2, r1
 80016c8:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 80016ca:	00db      	lsls	r3, r3, #3
 80016cc:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	619a      	str	r2, [r3, #24]
    }
 80016d2:	bf00      	nop
 80016d4:	3724      	adds	r7, #36	; 0x24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd90      	pop	{r4, r7, pc}

080016da <_ZNKSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 80016da:	b580      	push	{r7, lr}
 80016dc:	b082      	sub	sp, #8
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
 80016e2:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 80016e4:	6838      	ldr	r0, [r7, #0]
 80016e6:	f000 f936 	bl	8001956 <_ZNKSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE19_M_get_Tp_allocatorEv>
 80016ea:	4603      	mov	r3, r0
 80016ec:	4619      	mov	r1, r3
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f000 f93c 	bl	800196c <_ZNSaIPSt10shared_ptrIN4tama5StageEEEC1IS2_EERKSaIT_E>
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <_ZNSaIPSt10shared_ptrIN4tama5StageEEED1Ev>:
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
	allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f000 f93e 	bl	8001986 <_ZN9__gnu_cxx13new_allocatorIPSt10shared_ptrIN4tama5StageEEED1Ev>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4618      	mov	r0, r3
 800170e:	3708      	adds	r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <_ZNSt16allocator_traitsISaIPSt10shared_ptrIN4tama5StageEEEE10deallocateERS5_PS4_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	60b9      	str	r1, [r7, #8]
 800171e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	68b9      	ldr	r1, [r7, #8]
 8001724:	68f8      	ldr	r0, [r7, #12]
 8001726:	f000 f939 	bl	800199c <_ZN9__gnu_cxx13new_allocatorIPSt10shared_ptrIN4tama5StageEEE10deallocateEPS5_j>
 800172a:	bf00      	nop
 800172c:	3710      	adds	r7, #16
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE17_M_reallocate_mapEjb>:
        }
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 8001732:	b590      	push	{r4, r7, lr}
 8001734:	b08b      	sub	sp, #44	; 0x2c
 8001736:	af00      	add	r7, sp, #0
 8001738:	60f8      	str	r0, [r7, #12]
 800173a:	60b9      	str	r1, [r7, #8]
 800173c:	4613      	mov	r3, r2
 800173e:	71fb      	strb	r3, [r7, #7]
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001744:	461a      	mov	r2, r3
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	695b      	ldr	r3, [r3, #20]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	109b      	asrs	r3, r3, #2
 800174e:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 8001750:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	6a3a      	ldr	r2, [r7, #32]
 8001756:	4413      	add	r3, r2
 8001758:	61fb      	str	r3, [r7, #28]

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	685a      	ldr	r2, [r3, #4]
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	429a      	cmp	r2, r3
 8001764:	d92d      	bls.n	80017c2 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE17_M_reallocate_mapEjb+0x90>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	1acb      	subs	r3, r1, r3
 8001772:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8001774:	0099      	lsls	r1, r3, #2
	                 + (__add_at_front ? __nodes_to_add : 0);
 8001776:	79fb      	ldrb	r3, [r7, #7]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d002      	beq.n	8001782 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE17_M_reallocate_mapEjb+0x50>
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	e000      	b.n	8001784 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE17_M_reallocate_mapEjb+0x52>
 8001782:	2300      	movs	r3, #0
 8001784:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8001786:	4413      	add	r3, r2
 8001788:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	695b      	ldr	r3, [r3, #20]
 800178e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001790:	429a      	cmp	r2, r3
 8001792:	d209      	bcs.n	80017a8 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE17_M_reallocate_mapEjb+0x76>
	    std::copy(this->_M_impl._M_start._M_node,
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 800179c:	3304      	adds	r3, #4
 800179e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017a0:	4619      	mov	r1, r3
 80017a2:	f000 f908 	bl	80019b6 <_ZSt4copyIPPSt10shared_ptrIN4tama5StageEES5_ET0_T_S7_S6_>
 80017a6:	e048      	b.n	800183a <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE17_M_reallocate_mapEjb+0x108>
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 80017b0:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 80017b2:	6a3b      	ldr	r3, [r7, #32]
 80017b4:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 80017b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017b8:	4413      	add	r3, r2
 80017ba:	461a      	mov	r2, r3
 80017bc:	f000 f913 	bl	80019e6 <_ZSt13copy_backwardIPPSt10shared_ptrIN4tama5StageEES5_ET0_T_S7_S6_>
 80017c0:	e03b      	b.n	800183a <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE17_M_reallocate_mapEjb+0x108>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	685c      	ldr	r4, [r3, #4]
	                             + std::max(this->_M_impl._M_map_size,
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	3304      	adds	r3, #4
 80017ca:	f107 0208 	add.w	r2, r7, #8
 80017ce:	4611      	mov	r1, r2
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff f962 	bl	8000a9a <_ZSt3maxIjERKT_S2_S2_>
 80017d6:	4603      	mov	r3, r0
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 80017dc:	3302      	adds	r3, #2
 80017de:	61bb      	str	r3, [r7, #24]
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	69b9      	ldr	r1, [r7, #24]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f000 f880 	bl	80018ea <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE15_M_allocate_mapEj>
 80017ea:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	085b      	lsrs	r3, r3, #1
 80017f4:	009a      	lsls	r2, r3, #2
	                 + (__add_at_front ? __nodes_to_add : 0);
 80017f6:	79fb      	ldrb	r3, [r7, #7]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d002      	beq.n	8001802 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE17_M_reallocate_mapEjb+0xd0>
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	e000      	b.n	8001804 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE17_M_reallocate_mapEjb+0xd2>
 8001802:	2300      	movs	r3, #0
 8001804:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8001806:	697a      	ldr	r2, [r7, #20]
 8001808:	4413      	add	r3, r2
 800180a:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8001814:	3304      	adds	r3, #4
 8001816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001818:	4619      	mov	r1, r3
 800181a:	f000 f8cc 	bl	80019b6 <_ZSt4copyIPPSt10shared_ptrIN4tama5StageEES5_ET0_T_S7_S6_>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 800181e:	68f8      	ldr	r0, [r7, #12]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	6819      	ldr	r1, [r3, #0]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	461a      	mov	r2, r3
 800182a:	f7ff fe33 	bl	8001494 <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE17_M_deallocate_mapEPPS3_j>

	  this->_M_impl._M_map = __new_map;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	697a      	ldr	r2, [r7, #20]
 8001832:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	605a      	str	r2, [r3, #4]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	3308      	adds	r3, #8
 800183e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff fe8b 	bl	800155c <_ZNSt15_Deque_iteratorISt10shared_ptrIN4tama5StageEERS3_PS3_E11_M_set_nodeEPS5_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	f103 0018 	add.w	r0, r3, #24
 800184c:	6a3b      	ldr	r3, [r7, #32]
 800184e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001852:	3b01      	subs	r3, #1
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001858:	4413      	add	r3, r2
 800185a:	4619      	mov	r1, r3
 800185c:	f7ff fe7e 	bl	800155c <_ZNSt15_Deque_iteratorISt10shared_ptrIN4tama5StageEERS3_PS3_E11_M_set_nodeEPS5_>
    }
 8001860:	bf00      	nop
 8001862:	372c      	adds	r7, #44	; 0x2c
 8001864:	46bd      	mov	sp, r7
 8001866:	bd90      	pop	{r4, r7, pc}

08001868 <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama5StageEEEE8allocateERS4_j>:
      allocate(allocator_type& __a, size_type __n)
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8001872:	2200      	movs	r2, #0
 8001874:	6839      	ldr	r1, [r7, #0]
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f000 f8cd 	bl	8001a16 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama5StageEEE8allocateEjPKv>
 800187c:	4603      	mov	r3, r0
 800187e:	4618      	mov	r0, r3
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama5StageEEEE10deallocateERS4_PS3_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8001886:	b580      	push	{r7, lr}
 8001888:	b084      	sub	sp, #16
 800188a:	af00      	add	r7, sp, #0
 800188c:	60f8      	str	r0, [r7, #12]
 800188e:	60b9      	str	r1, [r7, #8]
 8001890:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	68b9      	ldr	r1, [r7, #8]
 8001896:	68f8      	ldr	r0, [r7, #12]
 8001898:	f000 f8db 	bl	8001a52 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama5StageEEE10deallocateEPS4_j>
 800189c:	bf00      	nop
 800189e:	3710      	adds	r7, #16
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <_ZNSaISt10shared_ptrIN4tama5StageEEEC1Ev>:
      allocator() throw() { }
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f000 f8dd 	bl	8001a6c <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama5StageEEEC1Ev>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4618      	mov	r0, r3
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <_ZNSt15_Deque_iteratorISt10shared_ptrIN4tama5StageEERS3_PS3_EC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	605a      	str	r2, [r3, #4]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2200      	movs	r2, #0
 80018d4:	609a      	str	r2, [r3, #8]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	60da      	str	r2, [r3, #12]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4618      	mov	r0, r3
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr

080018ea <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 80018ea:	b590      	push	{r4, r7, lr}
 80018ec:	b085      	sub	sp, #20
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
 80018f2:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80018f4:	f107 030c 	add.w	r3, r7, #12
 80018f8:	6879      	ldr	r1, [r7, #4]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7ff feed 	bl	80016da <_ZNKSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8001900:	f107 030c 	add.w	r3, r7, #12
 8001904:	6839      	ldr	r1, [r7, #0]
 8001906:	4618      	mov	r0, r3
 8001908:	f000 f8bb 	bl	8001a82 <_ZNSt16allocator_traitsISaIPSt10shared_ptrIN4tama5StageEEEE8allocateERS5_j>
 800190c:	4604      	mov	r4, r0
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 800190e:	f107 030c 	add.w	r3, r7, #12
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff fef2 	bl	80016fc <_ZNSaIPSt10shared_ptrIN4tama5StageEEED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8001918:	4623      	mov	r3, r4
      }
 800191a:	4618      	mov	r0, r3
 800191c:	3714      	adds	r7, #20
 800191e:	46bd      	mov	sp, r7
 8001920:	bd90      	pop	{r4, r7, pc}

08001922 <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE15_M_create_nodesEPPS3_S7_>:
    _Deque_base<_Tp, _Alloc>::
 8001922:	b580      	push	{r7, lr}
 8001924:	b086      	sub	sp, #24
 8001926:	af00      	add	r7, sp, #0
 8001928:	60f8      	str	r0, [r7, #12]
 800192a:	60b9      	str	r1, [r7, #8]
 800192c:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	617b      	str	r3, [r7, #20]
 8001932:	697a      	ldr	r2, [r7, #20]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	429a      	cmp	r2, r3
 8001938:	d209      	bcs.n	800194e <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE15_M_create_nodesEPPS3_S7_+0x2c>
	    *__cur = this->_M_allocate_node();
 800193a:	68f8      	ldr	r0, [r7, #12]
 800193c:	f7ff fdfc 	bl	8001538 <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE16_M_allocate_nodeEv>
 8001940:	4602      	mov	r2, r0
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	3304      	adds	r3, #4
 800194a:	617b      	str	r3, [r7, #20]
 800194c:	e7f1      	b.n	8001932 <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE15_M_create_nodesEPPS3_S7_+0x10>
    }
 800194e:	bf00      	nop
 8001950:	3718      	adds	r7, #24
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <_ZNKSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8001956:	b480      	push	{r7}
 8001958:	b083      	sub	sp, #12
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4618      	mov	r0, r3
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <_ZNSaIPSt10shared_ptrIN4tama5StageEEEC1IS2_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) throw() { }
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	6039      	str	r1, [r7, #0]
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f000 f892 	bl	8001aa0 <_ZN9__gnu_cxx13new_allocatorIPSt10shared_ptrIN4tama5StageEEEC1Ev>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	4618      	mov	r0, r3
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}

08001986 <_ZN9__gnu_cxx13new_allocatorIPSt10shared_ptrIN4tama5StageEEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001986:	b480      	push	{r7}
 8001988:	b083      	sub	sp, #12
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4618      	mov	r0, r3
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <_ZN9__gnu_cxx13new_allocatorIPSt10shared_ptrIN4tama5StageEEE10deallocateEPS5_j>:
      deallocate(pointer __p, size_type)
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	60b9      	str	r1, [r7, #8]
 80019a6:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 80019a8:	68b8      	ldr	r0, [r7, #8]
 80019aa:	f014 fb25 	bl	8015ff8 <_ZdlPv>
      }
 80019ae:	bf00      	nop
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <_ZSt4copyIPPSt10shared_ptrIN4tama5StageEES5_ET0_T_S7_S6_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 80019b6:	b590      	push	{r4, r7, lr}
 80019b8:	b085      	sub	sp, #20
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	60f8      	str	r0, [r7, #12]
 80019be:	60b9      	str	r1, [r7, #8]
 80019c0:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
	      (std::__miter_base(__first), std::__miter_base(__last),
 80019c2:	68f8      	ldr	r0, [r7, #12]
 80019c4:	f000 f877 	bl	8001ab6 <_ZSt12__miter_baseIPPSt10shared_ptrIN4tama5StageEEET_S6_>
 80019c8:	4604      	mov	r4, r0
 80019ca:	68b8      	ldr	r0, [r7, #8]
 80019cc:	f000 f873 	bl	8001ab6 <_ZSt12__miter_baseIPPSt10shared_ptrIN4tama5StageEEET_S6_>
 80019d0:	4603      	mov	r3, r0
	       __result));
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	4619      	mov	r1, r3
 80019d6:	4620      	mov	r0, r4
 80019d8:	f000 f878 	bl	8001acc <_ZSt14__copy_move_a2ILb0EPPSt10shared_ptrIN4tama5StageEES5_ET1_T0_S7_S6_>
 80019dc:	4603      	mov	r3, r0
    }
 80019de:	4618      	mov	r0, r3
 80019e0:	3714      	adds	r7, #20
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd90      	pop	{r4, r7, pc}

080019e6 <_ZSt13copy_backwardIPPSt10shared_ptrIN4tama5StageEES5_ET0_T_S7_S6_>:
   *  Result may not be in the range (first,last].  Use copy instead.  Note
   *  that the start of the output range may overlap [first,last).
  */
  template<typename _BI1, typename _BI2>
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 80019e6:	b590      	push	{r4, r7, lr}
 80019e8:	b085      	sub	sp, #20
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	60f8      	str	r0, [r7, #12]
 80019ee:	60b9      	str	r1, [r7, #8]
 80019f0:	607a      	str	r2, [r7, #4]
	    typename iterator_traits<_BI1>::value_type,
	    typename iterator_traits<_BI2>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      return (std::__copy_move_backward_a2<__is_move_iterator<_BI1>::__value>
	      (std::__miter_base(__first), std::__miter_base(__last),
 80019f2:	68f8      	ldr	r0, [r7, #12]
 80019f4:	f000 f85f 	bl	8001ab6 <_ZSt12__miter_baseIPPSt10shared_ptrIN4tama5StageEEET_S6_>
 80019f8:	4604      	mov	r4, r0
 80019fa:	68b8      	ldr	r0, [r7, #8]
 80019fc:	f000 f85b 	bl	8001ab6 <_ZSt12__miter_baseIPPSt10shared_ptrIN4tama5StageEEET_S6_>
 8001a00:	4603      	mov	r3, r0
	       __result));
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	4619      	mov	r1, r3
 8001a06:	4620      	mov	r0, r4
 8001a08:	f000 f87c 	bl	8001b04 <_ZSt23__copy_move_backward_a2ILb0EPPSt10shared_ptrIN4tama5StageEES5_ET1_T0_S7_S6_>
 8001a0c:	4603      	mov	r3, r0
    }
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3714      	adds	r7, #20
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd90      	pop	{r4, r7, pc}

08001a16 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama5StageEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b084      	sub	sp, #16
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	60f8      	str	r0, [r7, #12]
 8001a1e:	60b9      	str	r1, [r7, #8]
 8001a20:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8001a22:	68f8      	ldr	r0, [r7, #12]
 8001a24:	f000 f88a 	bl	8001b3c <_ZNK9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama5StageEEE8max_sizeEv>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	bf8c      	ite	hi
 8001a30:	2301      	movhi	r3, #1
 8001a32:	2300      	movls	r3, #0
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama5StageEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8001a3a:	f014 faf0 	bl	801601e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	00db      	lsls	r3, r3, #3
 8001a42:	4618      	mov	r0, r3
 8001a44:	f014 fabf 	bl	8015fc6 <_Znwj>
 8001a48:	4603      	mov	r3, r0
      }
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama5StageEEE10deallocateEPS4_j>:
      deallocate(pointer __p, size_type)
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b084      	sub	sp, #16
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	60f8      	str	r0, [r7, #12]
 8001a5a:	60b9      	str	r1, [r7, #8]
 8001a5c:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8001a5e:	68b8      	ldr	r0, [r7, #8]
 8001a60:	f014 faca 	bl	8015ff8 <_ZdlPv>
      }
 8001a64:	bf00      	nop
 8001a66:	3710      	adds	r7, #16
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama5StageEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	4618      	mov	r0, r3
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr

08001a82 <_ZNSt16allocator_traitsISaIPSt10shared_ptrIN4tama5StageEEEE8allocateERS5_j>:
      allocate(allocator_type& __a, size_type __n)
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b082      	sub	sp, #8
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
 8001a8a:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	6839      	ldr	r1, [r7, #0]
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f000 f85f 	bl	8001b54 <_ZN9__gnu_cxx13new_allocatorIPSt10shared_ptrIN4tama5StageEEE8allocateEjPKv>
 8001a96:	4603      	mov	r3, r0
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <_ZN9__gnu_cxx13new_allocatorIPSt10shared_ptrIN4tama5StageEEEC1Ev>:
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <_ZSt12__miter_baseIPPSt10shared_ptrIN4tama5StageEEET_S6_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 8001ab6:	b480      	push	{r7}
 8001ab8:	b083      	sub	sp, #12
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
    { return __it; }
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <_ZSt14__copy_move_a2ILb0EPPSt10shared_ptrIN4tama5StageEES5_ET1_T0_S7_S6_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8001acc:	b5b0      	push	{r4, r5, r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	60b9      	str	r1, [r7, #8]
 8001ad6:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 8001ad8:	68f8      	ldr	r0, [r7, #12]
 8001ada:	f000 f859 	bl	8001b90 <_ZSt12__niter_baseIPPSt10shared_ptrIN4tama5StageEEET_S6_>
 8001ade:	4604      	mov	r4, r0
 8001ae0:	68b8      	ldr	r0, [r7, #8]
 8001ae2:	f000 f855 	bl	8001b90 <_ZSt12__niter_baseIPPSt10shared_ptrIN4tama5StageEEET_S6_>
 8001ae6:	4605      	mov	r5, r0
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f000 f851 	bl	8001b90 <_ZSt12__niter_baseIPPSt10shared_ptrIN4tama5StageEEET_S6_>
 8001aee:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 8001af0:	461a      	mov	r2, r3
 8001af2:	4629      	mov	r1, r5
 8001af4:	4620      	mov	r0, r4
 8001af6:	f000 f856 	bl	8001ba6 <_ZSt13__copy_move_aILb0EPPSt10shared_ptrIN4tama5StageEES5_ET1_T0_S7_S6_>
 8001afa:	4603      	mov	r3, r0
    }
 8001afc:	4618      	mov	r0, r3
 8001afe:	3710      	adds	r7, #16
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bdb0      	pop	{r4, r5, r7, pc}

08001b04 <_ZSt23__copy_move_backward_a2ILb0EPPSt10shared_ptrIN4tama5StageEES5_ET1_T0_S7_S6_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8001b04:	b5b0      	push	{r4, r5, r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]
		  (std::__niter_base(__first), std::__niter_base(__last),
 8001b10:	68f8      	ldr	r0, [r7, #12]
 8001b12:	f000 f83d 	bl	8001b90 <_ZSt12__niter_baseIPPSt10shared_ptrIN4tama5StageEEET_S6_>
 8001b16:	4604      	mov	r4, r0
 8001b18:	68b8      	ldr	r0, [r7, #8]
 8001b1a:	f000 f839 	bl	8001b90 <_ZSt12__niter_baseIPPSt10shared_ptrIN4tama5StageEEET_S6_>
 8001b1e:	4605      	mov	r5, r0
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f000 f835 	bl	8001b90 <_ZSt12__niter_baseIPPSt10shared_ptrIN4tama5StageEEET_S6_>
 8001b26:	4603      	mov	r3, r0
		   std::__niter_base(__result)));
 8001b28:	461a      	mov	r2, r3
 8001b2a:	4629      	mov	r1, r5
 8001b2c:	4620      	mov	r0, r4
 8001b2e:	f000 f84c 	bl	8001bca <_ZSt22__copy_move_backward_aILb0EPPSt10shared_ptrIN4tama5StageEES5_ET1_T0_S7_S6_>
 8001b32:	4603      	mov	r3, r0
    }
 8001b34:	4618      	mov	r0, r3
 8001b36:	3710      	adds	r7, #16
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bdb0      	pop	{r4, r5, r7, pc}

08001b3c <_ZNK9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama5StageEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8001b44:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8001b48:	4618      	mov	r0, r3
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <_ZN9__gnu_cxx13new_allocatorIPSt10shared_ptrIN4tama5StageEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8001b60:	68f8      	ldr	r0, [r7, #12]
 8001b62:	f000 f844 	bl	8001bee <_ZNK9__gnu_cxx13new_allocatorIPSt10shared_ptrIN4tama5StageEEE8max_sizeEv>
 8001b66:	4602      	mov	r2, r0
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	bf8c      	ite	hi
 8001b6e:	2301      	movhi	r3, #1
 8001b70:	2300      	movls	r3, #0
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <_ZN9__gnu_cxx13new_allocatorIPSt10shared_ptrIN4tama5StageEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8001b78:	f014 fa51 	bl	801601e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	4618      	mov	r0, r3
 8001b82:	f014 fa20 	bl	8015fc6 <_Znwj>
 8001b86:	4603      	mov	r3, r0
      }
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3710      	adds	r7, #16
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <_ZSt12__niter_baseIPPSt10shared_ptrIN4tama5StageEEET_S6_>:
    __niter_base(_Iterator __it)
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
    { return __it; }
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <_ZSt13__copy_move_aILb0EPPSt10shared_ptrIN4tama5StageEES5_ET1_T0_S7_S6_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b086      	sub	sp, #24
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	60f8      	str	r0, [r7, #12]
 8001bae:	60b9      	str	r1, [r7, #8]
 8001bb0:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	68b9      	ldr	r1, [r7, #8]
 8001bba:	68f8      	ldr	r0, [r7, #12]
 8001bbc:	f000 f823 	bl	8001c06 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPSt10shared_ptrIN4tama5StageEEEEPT_PKS8_SB_S9_>
 8001bc0:	4603      	mov	r3, r0
    }
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3718      	adds	r7, #24
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <_ZSt22__copy_move_backward_aILb0EPPSt10shared_ptrIN4tama5StageEES5_ET1_T0_S7_S6_>:
    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b086      	sub	sp, #24
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	60f8      	str	r0, [r7, #12]
 8001bd2:	60b9      	str	r1, [r7, #8]
 8001bd4:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueType1)
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	75fb      	strb	r3, [r7, #23]
								 __result);
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	68b9      	ldr	r1, [r7, #8]
 8001bde:	68f8      	ldr	r0, [r7, #12]
 8001be0:	f000 f82e 	bl	8001c40 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPSt10shared_ptrIN4tama5StageEEEEPT_PKS8_SB_S9_>
 8001be4:	4603      	mov	r3, r0
    }
 8001be6:	4618      	mov	r0, r3
 8001be8:	3718      	adds	r7, #24
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <_ZNK9__gnu_cxx13new_allocatorIPSt10shared_ptrIN4tama5StageEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8001bee:	b480      	push	{r7}
 8001bf0:	b083      	sub	sp, #12
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8001bf6:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPSt10shared_ptrIN4tama5StageEEEEPT_PKS8_SB_S9_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b086      	sub	sp, #24
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	60f8      	str	r0, [r7, #12]
 8001c0e:	60b9      	str	r1, [r7, #8]
 8001c10:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8001c12:	68ba      	ldr	r2, [r7, #8]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	109b      	asrs	r3, r3, #2
 8001c1a:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d006      	beq.n	8001c30 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPSt10shared_ptrIN4tama5StageEEEEPT_PKS8_SB_S9_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	461a      	mov	r2, r3
 8001c28:	68f9      	ldr	r1, [r7, #12]
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f014 fa3e 	bl	80160ac <memmove>
	  return __result + _Num;
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	4413      	add	r3, r2
	}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3718      	adds	r7, #24
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPSt10shared_ptrIN4tama5StageEEEEPT_PKS8_SB_S9_>:
        __copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8001c4c:	68ba      	ldr	r2, [r7, #8]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	109b      	asrs	r3, r3, #2
 8001c54:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d00a      	beq.n	8001c72 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPSt10shared_ptrIN4tama5StageEEEEPT_PKS8_SB_S9_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	425b      	negs	r3, r3
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	18d0      	adds	r0, r2, r3
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	68f9      	ldr	r1, [r7, #12]
 8001c6e:	f014 fa1d 	bl	80160ac <memmove>
	  return __result - _Num;
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	425b      	negs	r3, r3
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	4413      	add	r3, r2
	}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3718      	adds	r7, #24
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	1d1a      	adds	r2, r3, #4
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	3304      	adds	r3, #4
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4610      	mov	r0, r2
 8001ca2:	f7fe feaf 	bl	8000a04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_ptr() = default;
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	3304      	adds	r3, #4
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7fe feb8 	bl	8000a32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3708      	adds	r7, #8
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <_ZNSt10shared_ptrIN4tama5SceneEEC1ERKS2_>:
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	683a      	ldr	r2, [r7, #0]
 8001cda:	4611      	mov	r1, r2
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff ffd1 	bl	8001c84 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3708      	adds	r7, #8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <_ZNSt10shared_ptrIN4tama5SceneEED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7ff ffda 	bl	8001cb0 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <_ZN4tama5Stage8getSceneEv>:
//

#include "Stage.h"

std::shared_ptr<tama::Scene> tama::Stage::getScene()
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b082      	sub	sp, #8
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
 8001d0e:	6039      	str	r1, [r7, #0]
    return scene;
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	3304      	adds	r3, #4
 8001d14:	4619      	mov	r1, r3
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f7ff ffd8 	bl	8001ccc <_ZNSt10shared_ptrIN4tama5SceneEEC1ERKS2_>
}
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <_ZN4tama7OnInputC1Ev>:

#include "../../input/button.h"

namespace tama
{
    class OnInput
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	4a04      	ldr	r2, [pc, #16]	; (8001d40 <_ZN4tama7OnInputC1Ev+0x1c>)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4618      	mov	r0, r3
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	080163d4 	.word	0x080163d4

08001d44 <_ZNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	1d1a      	adds	r2, r3, #4
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	3304      	adds	r3, #4
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4610      	mov	r0, r2
 8001d62:	f7fe fe4f 	bl	8000a04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3708      	adds	r7, #8
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <_ZNSt10shared_ptrIN4tama7ContextEEC1ERKS2_>:
      shared_ptr(const shared_ptr&) noexcept = default;
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	6039      	str	r1, [r7, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	683a      	ldr	r2, [r7, #0]
 8001d7e:	4611      	mov	r1, r2
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff ffdf 	bl	8001d44 <_ZNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3708      	adds	r7, #8
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <_ZN4tama5StageC1ERKSt10shared_ptrINS_7ContextEE>:

tama::Stage::Stage(const std::shared_ptr<Context> &context) : context(context)
 8001d90:	b590      	push	{r4, r7, lr}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff ffc1 	bl	8001d24 <_ZN4tama7OnInputC1Ev>
 8001da2:	4a12      	ldr	r2, [pc, #72]	; (8001dec <_ZN4tama5StageC1ERKSt10shared_ptrINS_7ContextEE+0x5c>)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	3304      	adds	r3, #4
 8001dac:	4618      	mov	r0, r3
 8001dae:	f000 f830 	bl	8001e12 <_ZNSt10shared_ptrIN4tama5SceneEEC1Ev>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	330c      	adds	r3, #12
 8001db6:	6839      	ldr	r1, [r7, #0]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff ffd9 	bl	8001d70 <_ZNSt10shared_ptrIN4tama7ContextEEC1ERKS2_>
{
    scene = std::make_shared<Scene>();
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	1d1c      	adds	r4, r3, #4
 8001dc2:	f107 0308 	add.w	r3, r7, #8
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f000 f830 	bl	8001e2c <_ZSt11make_sharedIN4tama5SceneEJEESt10shared_ptrIT_EDpOT0_>
 8001dcc:	f107 0308 	add.w	r3, r7, #8
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4620      	mov	r0, r4
 8001dd4:	f000 f84e 	bl	8001e74 <_ZNSt10shared_ptrIN4tama5SceneEEaSEOS2_>
 8001dd8:	f107 0308 	add.w	r3, r7, #8
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff ff85 	bl	8001cec <_ZNSt10shared_ptrIN4tama5SceneEED1Ev>
}
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4618      	mov	r0, r3
 8001de6:	3714      	adds	r7, #20
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd90      	pop	{r4, r7, pc}
 8001dec:	080163c0 	.word	0x080163c0

08001df0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
      { delete this; }
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d005      	beq.n	8001e0a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x1a>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	3304      	adds	r3, #4
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	4798      	blx	r3
 8001e0a:	bf00      	nop
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <_ZNSt10shared_ptrIN4tama5SceneEEC1Ev>:
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b082      	sub	sp, #8
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f000 f85d 	bl	8001edc <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4618      	mov	r0, r3
 8001e26:	3708      	adds	r7, #8
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <_ZSt11make_sharedIN4tama5SceneEJEESt10shared_ptrIT_EDpOT0_>:
   *  @throw  std::bad_alloc, or an exception thrown from the
   *          constructor of @a _Tp.
   */
  template<typename _Tp, typename... _Args>
    inline shared_ptr<_Tp>
    make_shared(_Args&&... __args)
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
    {
      typedef typename std::remove_const<_Tp>::type _Tp_nc;
      return std::allocate_shared<_Tp>(std::allocator<_Tp_nc>(),
				       std::forward<_Args>(__args)...);
 8001e34:	f107 030c 	add.w	r3, r7, #12
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f000 f860 	bl	8001efe <_ZNSaIN4tama5SceneEEC1Ev>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f107 020c 	add.w	r2, r7, #12
 8001e44:	4611      	mov	r1, r2
 8001e46:	4618      	mov	r0, r3
 8001e48:	f000 f871 	bl	8001f2e <_ZSt15allocate_sharedIN4tama5SceneESaIS1_EJEESt10shared_ptrIT_ERKT0_DpOT1_>
 8001e4c:	f107 030c 	add.w	r3, r7, #12
 8001e50:	4618      	mov	r0, r3
 8001e52:	f000 f860 	bl	8001f16 <_ZNSaIN4tama5SceneEED1Ev>
    }
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <_ZSt4moveIRSt10shared_ptrIN4tama5SceneEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8001e5e:	b480      	push	{r7}
 8001e60:	b083      	sub	sp, #12
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <_ZNSt10shared_ptrIN4tama5SceneEEaSEOS2_>:
      operator=(shared_ptr&& __r) noexcept
 8001e74:	b590      	push	{r4, r7, lr}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
 8001e7e:	687c      	ldr	r4, [r7, #4]
 8001e80:	6838      	ldr	r0, [r7, #0]
 8001e82:	f7ff ffec 	bl	8001e5e <_ZSt4moveIRSt10shared_ptrIN4tama5SceneEEEONSt16remove_referenceIT_E4typeEOS6_>
 8001e86:	4603      	mov	r3, r0
 8001e88:	4619      	mov	r1, r3
 8001e8a:	4620      	mov	r0, r4
 8001e8c:	f000 f868 	bl	8001f60 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_>
	return *this;
 8001e90:	687b      	ldr	r3, [r7, #4]
      }
 8001e92:	4618      	mov	r0, r3
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd90      	pop	{r4, r7, pc}
	...

08001e9c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_base() noexcept
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
      { }
 8001ea4:	4a04      	ldr	r2, [pc, #16]	; (8001eb8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1c>)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	601a      	str	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4618      	mov	r0, r3
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr
 8001eb8:	080163e0 	.word	0x080163e0

08001ebc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_base() noexcept
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
      { }
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f7ff ffe9 	bl	8001e9c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8001eca:	210c      	movs	r1, #12
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f014 f878 	bl	8015fc2 <_ZdlPvj>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3708      	adds	r7, #8
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_ptr() noexcept
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
      : _M_ptr(0), _M_refcount()
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	601a      	str	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	3304      	adds	r3, #4
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7fe ffbb 	bl	8000e6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
      { }
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <_ZNSaIN4tama5SceneEEC1Ev>:
      allocator() throw() { }
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b082      	sub	sp, #8
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 f849 	bl	8001f9e <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEEC1Ev>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <_ZNSaIN4tama5SceneEED1Ev>:
      ~allocator() throw() { }
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b082      	sub	sp, #8
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 f848 	bl	8001fb4 <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEED1Ev>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4618      	mov	r0, r3
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <_ZSt15allocate_sharedIN4tama5SceneESaIS1_EJEESt10shared_ptrIT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b084      	sub	sp, #16
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
 8001f36:	6039      	str	r1, [r7, #0]
			     std::forward<_Args>(__args)...);
 8001f38:	683a      	ldr	r2, [r7, #0]
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f000 f844 	bl	8001fca <_ZNSt10shared_ptrIN4tama5SceneEEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>
    }
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	3710      	adds	r7, #16
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <_ZSt4moveIRSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 8001f4a:	b480      	push	{r7}
 8001f4c:	b083      	sub	sp, #12
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4618      	mov	r0, r3
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_>:
	  return *this;
	}
#endif

      __shared_ptr&
      operator=(__shared_ptr&& __r) noexcept
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
      {
	__shared_ptr(std::move(__r)).swap(*this);
 8001f6a:	6838      	ldr	r0, [r7, #0]
 8001f6c:	f7ff ffed 	bl	8001f4a <_ZSt4moveIRSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS8_>
 8001f70:	4602      	mov	r2, r0
 8001f72:	f107 0308 	add.w	r3, r7, #8
 8001f76:	4611      	mov	r1, r2
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f000 f837 	bl	8001fec <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EEC1EOS4_>
 8001f7e:	f107 0308 	add.w	r3, r7, #8
 8001f82:	6879      	ldr	r1, [r7, #4]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f000 f84f 	bl	8002028 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE4swapERS4_>
 8001f8a:	f107 0308 	add.w	r3, r7, #8
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7ff fe8e 	bl	8001cb0 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EED1Ev>
	return *this;
 8001f94:	687b      	ldr	r3, [r7, #4]
      }
 8001f96:	4618      	mov	r0, r3
 8001f98:	3710      	adds	r7, #16
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001f9e:	b480      	push	{r7}
 8001fa0:	b083      	sub	sp, #12
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr

08001fca <_ZNSt10shared_ptrIN4tama5SceneEEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8001fca:	b590      	push	{r4, r7, lr}
 8001fcc:	b085      	sub	sp, #20
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	60f8      	str	r0, [r7, #12]
 8001fd2:	7239      	strb	r1, [r7, #8]
 8001fd4:	607a      	str	r2, [r7, #4]
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	4621      	mov	r1, r4
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f000 f857 	bl	8002090 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>
	{ }
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3714      	adds	r7, #20
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd90      	pop	{r4, r7, pc}

08001fec <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EEC1EOS4_>:
      __shared_ptr(__shared_ptr&& __r) noexcept
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
      : _M_ptr(__r._M_ptr), _M_refcount()
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	601a      	str	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	3304      	adds	r3, #4
 8002002:	4618      	mov	r0, r3
 8002004:	f7fe ff31 	bl	8000e6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	_M_refcount._M_swap(__r._M_refcount);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	1d1a      	adds	r2, r3, #4
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	3304      	adds	r3, #4
 8002010:	4619      	mov	r1, r3
 8002012:	4610      	mov	r0, r2
 8002014:	f7fe ff37 	bl	8000e86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	__r._M_ptr = 0;
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	2200      	movs	r2, #0
 800201c:	601a      	str	r2, [r3, #0]
      }
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4618      	mov	r0, r3
 8002022:	3708      	adds	r7, #8
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}

08002028 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE4swapERS4_>:
      long
      use_count() const noexcept
      { return _M_refcount._M_get_use_count(); }

      void
      swap(__shared_ptr<_Tp, _Lp>& __other) noexcept
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
      {
	std::swap(_M_ptr, __other._M_ptr);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	4611      	mov	r1, r2
 8002038:	4618      	mov	r0, r3
 800203a:	f000 f8aa 	bl	8002192 <_ZSt4swapIPN4tama5SceneEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS7_ESt18is_move_assignableIS7_EEE5valueEvE4typeERS7_SH_>
	_M_refcount._M_swap(__other._M_refcount);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	1d1a      	adds	r2, r3, #4
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	3304      	adds	r3, #4
 8002046:	4619      	mov	r1, r3
 8002048:	4610      	mov	r0, r2
 800204a:	f7fe ff1c 	bl	8000e86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
      }
 800204e:	bf00      	nop
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>:
	  _M_ptr = static_cast<_Tp*>(__p);
	  _M_enable_shared_from_this_with(_M_ptr);
	}
#else
      template<typename _Alloc>
        struct _Deleter
 8002056:	b580      	push	{r7, lr}
 8002058:	b082      	sub	sp, #8
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff ff58 	bl	8001f16 <_ZNSaIN4tama5SceneEED1Ev>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4618      	mov	r0, r3
 800206a:	3708      	adds	r7, #8
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>:
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	4611      	mov	r1, r2
 8002080:	4618      	mov	r0, r3
 8002082:	f000 f8a5 	bl	80021d0 <_ZNSaIN4tama5SceneEEC1ERKS1_>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4618      	mov	r0, r3
 800208a:	3708      	adds	r7, #8
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
          }
          _Alloc _M_alloc;
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8002090:	b580      	push	{r7, lr}
 8002092:	b08c      	sub	sp, #48	; 0x30
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	7239      	strb	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2200      	movs	r2, #0
 80020a0:	601a      	str	r2, [r3, #0]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	3304      	adds	r3, #4
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7fe fedf 	bl	8000e6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 80020ac:	f107 0320 	add.w	r3, r7, #32
 80020b0:	6879      	ldr	r1, [r7, #4]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f000 f88c 	bl	80021d0 <_ZNSaIN4tama5SceneEEC1ERKS1_>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 80020b8:	f107 0318 	add.w	r3, r7, #24
 80020bc:	f107 0220 	add.w	r2, r7, #32
 80020c0:	4611      	mov	r1, r2
 80020c2:	4618      	mov	r0, r3
 80020c4:	f000 f892 	bl	80021ec <_ZSt18__allocate_guardedISaIN4tama5SceneEEESt15__allocated_ptrIT_ERS4_>
	  auto __ptr = __guard.get();
 80020c8:	f107 0318 	add.w	r3, r7, #24
 80020cc:	4618      	mov	r0, r3
 80020ce:	f000 f8b5 	bl	800223c <_ZNSt15__allocated_ptrISaIN4tama5SceneEEE3getEv>
 80020d2:	62f8      	str	r0, [r7, #44]	; 0x2c
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
 80020d4:	f107 0320 	add.w	r3, r7, #32
 80020d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80020da:	4618      	mov	r0, r3
 80020dc:	f000 f8bc 	bl	8002258 <_ZNSt16allocator_traitsISaIN4tama5SceneEEE9constructIS1_JEEEvRS2_PT_DpOT0_>
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
 80020e0:	f107 0318 	add.w	r3, r7, #24
 80020e4:	2100      	movs	r1, #0
 80020e6:	4618      	mov	r0, r3
 80020e8:	f000 f8c3 	bl	8002272 <_ZNSt15__allocated_ptrISaIN4tama5SceneEEEaSEDn>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 80020ec:	f107 0220 	add.w	r2, r7, #32
 80020f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020f4:	4611      	mov	r1, r2
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7ff ffba 	bl	8002070 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>
 80020fc:	f107 0220 	add.w	r2, r7, #32
 8002100:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002104:	4611      	mov	r1, r2
 8002106:	4618      	mov	r0, r3
 8002108:	f000 f862 	bl	80021d0 <_ZNSaIN4tama5SceneEEC1ERKS1_>
 800210c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002110:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002114:	f107 0014 	add.w	r0, r7, #20
 8002118:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800211a:	f000 f8df 	bl	80022dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama5SceneENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
 800211e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002122:	4618      	mov	r0, r3
 8002124:	f7ff fef7 	bl	8001f16 <_ZNSaIN4tama5SceneEED1Ev>
 8002128:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800212c:	4618      	mov	r0, r3
 800212e:	f7ff ff92 	bl	8002056 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	  _M_refcount._M_swap(__count);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	3304      	adds	r3, #4
 8002136:	f107 0214 	add.w	r2, r7, #20
 800213a:	4611      	mov	r1, r2
 800213c:	4618      	mov	r0, r3
 800213e:	f7fe fea2 	bl	8000e86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  _M_ptr = __ptr;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002146:	601a      	str	r2, [r3, #0]
	  _M_enable_shared_from_this_with(_M_ptr);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4619      	mov	r1, r3
 800214e:	68f8      	ldr	r0, [r7, #12]
 8002150:	f000 f91b 	bl	800238a <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 8002154:	f107 0314 	add.w	r3, r7, #20
 8002158:	4618      	mov	r0, r3
 800215a:	f7fe fc6a 	bl	8000a32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 800215e:	f107 0318 	add.w	r3, r7, #24
 8002162:	4618      	mov	r0, r3
 8002164:	f000 f855 	bl	8002212 <_ZNSt15__allocated_ptrISaIN4tama5SceneEEED1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 8002168:	f107 0320 	add.w	r3, r7, #32
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff ff72 	bl	8002056 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	}
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	4618      	mov	r0, r3
 8002176:	3730      	adds	r7, #48	; 0x30
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <_ZSt4moveIRPN4tama5SceneEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4618      	mov	r0, r3
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr

08002192 <_ZSt4swapIPN4tama5SceneEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS7_ESt18is_move_assignableIS7_EEE5valueEvE4typeERS7_SH_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
 8002192:	b580      	push	{r7, lr}
 8002194:	b084      	sub	sp, #16
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
 800219a:	6039      	str	r1, [r7, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f7ff ffed 	bl	800217c <_ZSt4moveIRPN4tama5SceneEEONSt16remove_referenceIT_E4typeEOS5_>
 80021a2:	4603      	mov	r3, r0
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 80021a8:	6838      	ldr	r0, [r7, #0]
 80021aa:	f7ff ffe7 	bl	800217c <_ZSt4moveIRPN4tama5SceneEEONSt16remove_referenceIT_E4typeEOS5_>
 80021ae:	4603      	mov	r3, r0
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80021b6:	f107 030c 	add.w	r3, r7, #12
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7ff ffde 	bl	800217c <_ZSt4moveIRPN4tama5SceneEEONSt16remove_referenceIT_E4typeEOS5_>
 80021c0:	4603      	mov	r3, r0
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	601a      	str	r2, [r3, #0]
    }
 80021c8:	bf00      	nop
 80021ca:	3710      	adds	r7, #16
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <_ZNSaIN4tama5SceneEEC1ERKS1_>:
      allocator(const allocator& __a) throw()
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80021da:	6839      	ldr	r1, [r7, #0]
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f000 f8df 	bl	80023a0 <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEEC1ERKS3_>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4618      	mov	r0, r3
 80021e6:	3708      	adds	r7, #8
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <_ZSt18__allocate_guardedISaIN4tama5SceneEEESt15__allocated_ptrIT_ERS4_>:
    };

  /// Allocate space for a single object using __a
  template<typename _Alloc>
    __allocated_ptr<_Alloc>
    __allocate_guarded(_Alloc& __a)
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
    {
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 80021f6:	2101      	movs	r1, #1
 80021f8:	6838      	ldr	r0, [r7, #0]
 80021fa:	f000 f8dd 	bl	80023b8 <_ZNSt16allocator_traitsISaIN4tama5SceneEEE8allocateERS2_j>
 80021fe:	4603      	mov	r3, r0
 8002200:	461a      	mov	r2, r3
 8002202:	6839      	ldr	r1, [r7, #0]
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f000 f8e6 	bl	80023d6 <_ZNSt15__allocated_ptrISaIN4tama5SceneEEEC1ERS2_PS1_>
    }
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <_ZNSt15__allocated_ptrISaIN4tama5SceneEEED1Ev>:
      ~__allocated_ptr()
 8002212:	b580      	push	{r7, lr}
 8002214:	b082      	sub	sp, #8
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d007      	beq.n	8002232 <_ZNSt15__allocated_ptrISaIN4tama5SceneEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6818      	ldr	r0, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	4619      	mov	r1, r3
 800222e:	f000 f8e6 	bl	80023fe <_ZNSt16allocator_traitsISaIN4tama5SceneEEE10deallocateERS2_PS1_j>
      }
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4618      	mov	r0, r3
 8002236:	3708      	adds	r7, #8
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <_ZNSt15__allocated_ptrISaIN4tama5SceneEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	4618      	mov	r0, r3
 800224a:	f000 f8e7 	bl	800241c <_ZNSt15__allocated_ptrISaIN4tama5SceneEEE10_S_raw_ptrEPS1_>
 800224e:	4603      	mov	r3, r0
 8002250:	4618      	mov	r0, r3
 8002252:	3708      	adds	r7, #8
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <_ZNSt16allocator_traitsISaIN4tama5SceneEEE9constructIS1_JEEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8002262:	6839      	ldr	r1, [r7, #0]
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f000 f8e4 	bl	8002432 <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEE9constructIS2_JEEEvPT_DpOT0_>
 800226a:	bf00      	nop
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <_ZNSt15__allocated_ptrISaIN4tama5SceneEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 8002272:	b480      	push	{r7}
 8002274:	b083      	sub	sp, #12
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
 800227a:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	605a      	str	r2, [r3, #4]
	return *this;
 8002282:	687b      	ldr	r3, [r7, #4]
      }
 8002284:	4618      	mov	r0, r3
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <_ZSt4moveIRNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	4618      	mov	r0, r3
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr

080022a6 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>:
        struct _Deleter
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b082      	sub	sp, #8
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
 80022ae:	6039      	str	r1, [r7, #0]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	683a      	ldr	r2, [r7, #0]
 80022b4:	4611      	mov	r1, r2
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7ff ff8a 	bl	80021d0 <_ZNSaIN4tama5SceneEEC1ERKS1_>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	4618      	mov	r0, r3
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <_ZSt4moveIRSaIN4tama5SceneEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80022c6:	b480      	push	{r7}
 80022c8:	b083      	sub	sp, #12
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4618      	mov	r0, r3
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama5SceneENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
 80022dc:	b5b0      	push	{r4, r5, r7, lr}
 80022de:	b08a      	sub	sp, #40	; 0x28
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
 80022e8:	603b      	str	r3, [r7, #0]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 80022f0:	f107 031c 	add.w	r3, r7, #28
 80022f4:	6839      	ldr	r1, [r7, #0]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f000 f8af 	bl	800245a <_ZNSaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	      auto __guard = std::__allocate_guarded(__a2);
 80022fc:	f107 0314 	add.w	r3, r7, #20
 8002300:	f107 021c 	add.w	r2, r7, #28
 8002304:	4611      	mov	r1, r2
 8002306:	4618      	mov	r0, r3
 8002308:	f000 f8c0 	bl	800248c <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>
	      _Sp_cd_type* __mem = __guard.get();
 800230c:	f107 0314 	add.w	r3, r7, #20
 8002310:	4618      	mov	r0, r3
 8002312:	f000 f8e3 	bl	80024dc <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>
 8002316:	6278      	str	r0, [r7, #36]	; 0x24
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f7ff ffb9 	bl	8002290 <_ZSt4moveIRNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800231e:	4602      	mov	r2, r0
 8002320:	f107 0320 	add.w	r3, r7, #32
 8002324:	4611      	mov	r1, r2
 8002326:	4618      	mov	r0, r3
 8002328:	f7ff ffbd 	bl	80022a6 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 800232c:	f107 0420 	add.w	r4, r7, #32
 8002330:	6838      	ldr	r0, [r7, #0]
 8002332:	f7ff ffc8 	bl	80022c6 <_ZSt4moveIRSaIN4tama5SceneEEEONSt16remove_referenceIT_E4typeEOS5_>
 8002336:	4605      	mov	r5, r0
 8002338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233a:	4619      	mov	r1, r3
 800233c:	2014      	movs	r0, #20
 800233e:	f7fe f8f6 	bl	800052e <_ZnwjPv>
 8002342:	2800      	cmp	r0, #0
 8002344:	d004      	beq.n	8002350 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama5SceneENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x74>
 8002346:	462b      	mov	r3, r5
 8002348:	4622      	mov	r2, r4
 800234a:	68b9      	ldr	r1, [r7, #8]
 800234c:	f000 f900 	bl	8002550 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>
 8002350:	f107 0320 	add.w	r3, r7, #32
 8002354:	4618      	mov	r0, r3
 8002356:	f7ff fe7e 	bl	8002056 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	      _M_pi = __mem;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800235e:	601a      	str	r2, [r3, #0]
	      __guard = nullptr;
 8002360:	f107 0314 	add.w	r3, r7, #20
 8002364:	2100      	movs	r1, #0
 8002366:	4618      	mov	r0, r3
 8002368:	f000 f920 	bl	80025ac <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>
	      auto __guard = std::__allocate_guarded(__a2);
 800236c:	f107 0314 	add.w	r3, r7, #20
 8002370:	4618      	mov	r0, r3
 8002372:	f000 f89e 	bl	80024b2 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 8002376:	f107 031c 	add.w	r3, r7, #28
 800237a:	4618      	mov	r0, r3
 800237c:	f000 f87a 	bl	8002474 <_ZNSaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
	}
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	4618      	mov	r0, r3
 8002384:	3728      	adds	r7, #40	; 0x28
 8002386:	46bd      	mov	sp, r7
 8002388:	bdb0      	pop	{r4, r5, r7, pc}

0800238a <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	    __base->_M_weak_assign(const_cast<_Yp2*>(__p), _M_refcount);
	}

      template<typename _Yp, typename _Yp2 = typename remove_cv<_Yp>::type>
	typename enable_if<!__has_esft_base<_Yp2>::value>::type
	_M_enable_shared_from_this_with(_Yp*) noexcept
 800238a:	b480      	push	{r7}
 800238c:	b083      	sub	sp, #12
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
 8002392:	6039      	str	r1, [r7, #0]
	{ }
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4618      	mov	r0, r3
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <_ZNSt16allocator_traitsISaIN4tama5SceneEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80023c2:	2200      	movs	r2, #0
 80023c4:	6839      	ldr	r1, [r7, #0]
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f000 f91f 	bl	800260a <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEE8allocateEjPKv>
 80023cc:	4603      	mov	r3, r0
 80023ce:	4618      	mov	r0, r3
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <_ZNSt15__allocated_ptrISaIN4tama5SceneEEEC1ERS2_PS1_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b084      	sub	sp, #16
 80023da:	af00      	add	r7, sp, #0
 80023dc:	60f8      	str	r0, [r7, #12]
 80023de:	60b9      	str	r1, [r7, #8]
 80023e0:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 80023e2:	68b8      	ldr	r0, [r7, #8]
 80023e4:	f000 f92f 	bl	8002646 <_ZSt11__addressofISaIN4tama5SceneEEEPT_RS3_>
 80023e8:	4602      	mov	r2, r0
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	601a      	str	r2, [r3, #0]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	605a      	str	r2, [r3, #4]
      { }
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	4618      	mov	r0, r3
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <_ZNSt16allocator_traitsISaIN4tama5SceneEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80023fe:	b580      	push	{r7, lr}
 8002400:	b084      	sub	sp, #16
 8002402:	af00      	add	r7, sp, #0
 8002404:	60f8      	str	r0, [r7, #12]
 8002406:	60b9      	str	r1, [r7, #8]
 8002408:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	68b9      	ldr	r1, [r7, #8]
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f000 f924 	bl	800265c <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEE10deallocateEPS2_j>
 8002414:	bf00      	nop
 8002416:	3710      	adds	r7, #16
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <_ZNSt15__allocated_ptrISaIN4tama5SceneEEE10_S_raw_ptrEPS1_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	4618      	mov	r0, r3
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr

08002432 <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEE9constructIS2_JEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8002432:	b580      	push	{r7, lr}
 8002434:	b082      	sub	sp, #8
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
 800243a:	6039      	str	r1, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	4619      	mov	r1, r3
 8002440:	2020      	movs	r0, #32
 8002442:	f7fe f874 	bl	800052e <_ZnwjPv>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d002      	beq.n	8002452 <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEE9constructIS2_JEEEvPT_DpOT0_+0x20>
 800244c:	4618      	mov	r0, r3
 800244e:	f003 ffff 	bl	8006450 <_ZN4tama5SceneC1Ev>
 8002452:	bf00      	nop
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <_ZNSaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) throw() { }
 800245a:	b580      	push	{r7, lr}
 800245c:	b082      	sub	sp, #8
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
 8002462:	6039      	str	r1, [r7, #0]
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f000 f906 	bl	8002676 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4618      	mov	r0, r3
 800246e:	3708      	adds	r7, #8
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}

08002474 <_ZNSaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>:
      ~allocator() throw() { }
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f000 f905 	bl	800268c <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4618      	mov	r0, r3
 8002486:	3708      	adds	r7, #8
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>:
    __allocate_guarded(_Alloc& __a)
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 8002496:	2101      	movs	r1, #1
 8002498:	6838      	ldr	r0, [r7, #0]
 800249a:	f000 f902 	bl	80026a2 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>
 800249e:	4603      	mov	r3, r0
 80024a0:	461a      	mov	r2, r3
 80024a2:	6839      	ldr	r1, [r7, #0]
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f000 f90b 	bl	80026c0 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
    }
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>:
      ~__allocated_ptr()
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b082      	sub	sp, #8
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d007      	beq.n	80024d2 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6818      	ldr	r0, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	4619      	mov	r1, r3
 80024ce:	f000 f90b 	bl	80026e8 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>
      }
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4618      	mov	r0, r3
 80024d6:	3708      	adds	r7, #8
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f000 f90c 	bl	8002706 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>
 80024ee:	4603      	mov	r3, r0
 80024f0:	4618      	mov	r0, r3
 80024f2:	3708      	adds	r7, #8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, false>
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4618      	mov	r0, r3
 8002504:	f7ff fda7 	bl	8002056 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4618      	mov	r0, r3
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama5SceneEELb1EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp
 8002512:	b580      	push	{r7, lr}
 8002514:	b082      	sub	sp, #8
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f7ff fcfb 	bl	8001f16 <_ZNSaIN4tama5SceneEED1Ev>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4618      	mov	r0, r3
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>:
      class _Impl : _Sp_ebo_helper<0, _Deleter>, _Sp_ebo_helper<1, _Alloc>
 800252a:	b580      	push	{r7, lr}
 800252c:	b082      	sub	sp, #8
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	3301      	adds	r3, #1
 8002536:	4618      	mov	r0, r3
 8002538:	f7ff ffeb 	bl	8002512 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama5SceneEELb1EED1Ev>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	4618      	mov	r0, r3
 8002540:	f7ff ffda 	bl	80024f8 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4618      	mov	r0, r3
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
	...

08002550 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 8002550:	b590      	push	{r4, r7, lr}
 8002552:	b087      	sub	sp, #28
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	607a      	str	r2, [r7, #4]
 800255c:	603b      	str	r3, [r7, #0]
      : _M_impl(__p, std::move(__d), __a) { }
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	4618      	mov	r0, r3
 8002562:	f000 f8db 	bl	800271c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8002566:	4a10      	ldr	r2, [pc, #64]	; (80025a8 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_+0x58>)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	601a      	str	r2, [r3, #0]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f103 040c 	add.w	r4, r3, #12
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f7ff fe8c 	bl	8002290 <_ZSt4moveIRNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8002578:	4602      	mov	r2, r0
 800257a:	f107 0314 	add.w	r3, r7, #20
 800257e:	4611      	mov	r1, r2
 8002580:	4618      	mov	r0, r3
 8002582:	f7ff fe90 	bl	80022a6 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 8002586:	f107 0214 	add.w	r2, r7, #20
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	68b9      	ldr	r1, [r7, #8]
 800258e:	4620      	mov	r0, r4
 8002590:	f000 f8da 	bl	8002748 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>
 8002594:	f107 0314 	add.w	r3, r7, #20
 8002598:	4618      	mov	r0, r3
 800259a:	f7ff fd5c 	bl	8002056 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	4618      	mov	r0, r3
 80025a2:	371c      	adds	r7, #28
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd90      	pop	{r4, r7, pc}
 80025a8:	080163a4 	.word	0x080163a4

080025ac <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	605a      	str	r2, [r3, #4]
	return *this;
 80025bc:	687b      	ldr	r3, [r7, #4]
      }
 80025be:	4618      	mov	r0, r3
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr

080025ca <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>:
          void operator()(typename _Alloc::value_type* __ptr)
 80025ca:	b590      	push	{r4, r7, lr}
 80025cc:	b085      	sub	sp, #20
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
 80025d2:	6039      	str	r1, [r7, #0]
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 80025d4:	6879      	ldr	r1, [r7, #4]
 80025d6:	f107 0308 	add.w	r3, r7, #8
 80025da:	683a      	ldr	r2, [r7, #0]
 80025dc:	4618      	mov	r0, r3
 80025de:	f7ff fefa 	bl	80023d6 <_ZNSt15__allocated_ptrISaIN4tama5SceneEEEC1ERS2_PS1_>
	    allocator_traits<_Alloc>::destroy(_M_alloc, __guard.get());
 80025e2:	687c      	ldr	r4, [r7, #4]
 80025e4:	f107 0308 	add.w	r3, r7, #8
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7ff fe27 	bl	800223c <_ZNSt15__allocated_ptrISaIN4tama5SceneEEE3getEv>
 80025ee:	4603      	mov	r3, r0
 80025f0:	4619      	mov	r1, r3
 80025f2:	4620      	mov	r0, r4
 80025f4:	f000 f8c6 	bl	8002784 <_ZNSt16allocator_traitsISaIN4tama5SceneEEE7destroyIS1_EEvRS2_PT_>
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 80025f8:	f107 0308 	add.w	r3, r7, #8
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7ff fe08 	bl	8002212 <_ZNSt15__allocated_ptrISaIN4tama5SceneEEED1Ev>
          }
 8002602:	bf00      	nop
 8002604:	3714      	adds	r7, #20
 8002606:	46bd      	mov	sp, r7
 8002608:	bd90      	pop	{r4, r7, pc}

0800260a <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800260a:	b580      	push	{r7, lr}
 800260c:	b084      	sub	sp, #16
 800260e:	af00      	add	r7, sp, #0
 8002610:	60f8      	str	r0, [r7, #12]
 8002612:	60b9      	str	r1, [r7, #8]
 8002614:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8002616:	68f8      	ldr	r0, [r7, #12]
 8002618:	f000 f8c1 	bl	800279e <_ZNK9__gnu_cxx13new_allocatorIN4tama5SceneEE8max_sizeEv>
 800261c:	4602      	mov	r2, r0
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	4293      	cmp	r3, r2
 8002622:	bf8c      	ite	hi
 8002624:	2301      	movhi	r3, #1
 8002626:	2300      	movls	r3, #0
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800262e:	f013 fcf6 	bl	801601e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	015b      	lsls	r3, r3, #5
 8002636:	4618      	mov	r0, r3
 8002638:	f013 fcc5 	bl	8015fc6 <_Znwj>
 800263c:	4603      	mov	r3, r0
      }
 800263e:	4618      	mov	r0, r3
 8002640:	3710      	adds	r7, #16
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <_ZSt11__addressofISaIN4tama5SceneEEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8002646:	b480      	push	{r7}
 8002648:	b083      	sub	sp, #12
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4618      	mov	r0, r3
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8002668:	68b8      	ldr	r0, [r7, #8]
 800266a:	f013 fcc5 	bl	8015ff8 <_ZdlPv>
      }
 800266e:	bf00      	nop
 8002670:	3710      	adds	r7, #16
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002676:	b480      	push	{r7}
 8002678:	b083      	sub	sp, #12
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4618      	mov	r0, r3
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4618      	mov	r0, r3
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr

080026a2 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>:
      allocate(allocator_type& __a, size_type __n)
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b082      	sub	sp, #8
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
 80026aa:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80026ac:	2200      	movs	r2, #0
 80026ae:	6839      	ldr	r1, [r7, #0]
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f000 f880 	bl	80027b6 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>
 80026b6:	4603      	mov	r3, r0
 80026b8:	4618      	mov	r0, r3
 80026ba:	3708      	adds	r7, #8
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 80026cc:	68b8      	ldr	r0, [r7, #8]
 80026ce:	f000 f893 	bl	80027f8 <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>
 80026d2:	4602      	mov	r2, r0
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	601a      	str	r2, [r3, #0]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	605a      	str	r2, [r3, #4]
      { }
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	4618      	mov	r0, r3
 80026e2:	3710      	adds	r7, #16
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	68b9      	ldr	r1, [r7, #8]
 80026f8:	68f8      	ldr	r0, [r7, #12]
 80026fa:	f000 f888 	bl	800280e <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>
 80026fe:	bf00      	nop
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 8002706:	b480      	push	{r7}
 8002708:	b083      	sub	sp, #12
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4618      	mov	r0, r3
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      _Sp_counted_base() noexcept
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
      : _M_use_count(1), _M_weak_count(1) { }
 8002724:	4a07      	ldr	r2, [pc, #28]	; (8002744 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev+0x28>)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	601a      	str	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2201      	movs	r2, #1
 800272e:	605a      	str	r2, [r3, #4]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	609a      	str	r2, [r3, #8]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4618      	mov	r0, r3
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr
 8002744:	080163e0 	.word	0x080163e0

08002748 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 8002748:	b590      	push	{r4, r7, lr}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
 8002754:	603b      	str	r3, [r7, #0]
	: _M_ptr(__p), _Del_base(std::move(__d)), _Alloc_base(__a)
 8002756:	68fc      	ldr	r4, [r7, #12]
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f7ff fd99 	bl	8002290 <_ZSt4moveIRNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800275e:	4603      	mov	r3, r0
 8002760:	4619      	mov	r1, r3
 8002762:	4620      	mov	r0, r4
 8002764:	f000 f860 	bl	8002828 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	3301      	adds	r3, #1
 800276c:	6839      	ldr	r1, [r7, #0]
 800276e:	4618      	mov	r0, r3
 8002770:	f000 f86d 	bl	800284e <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama5SceneEELb1EEC1ERKS2_>
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	68ba      	ldr	r2, [r7, #8]
 8002778:	605a      	str	r2, [r3, #4]
	{ }
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	4618      	mov	r0, r3
 800277e:	3714      	adds	r7, #20
 8002780:	46bd      	mov	sp, r7
 8002782:	bd90      	pop	{r4, r7, pc}

08002784 <_ZNSt16allocator_traitsISaIN4tama5SceneEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 800278e:	6839      	ldr	r1, [r7, #0]
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f000 f89d 	bl	80028d0 <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEE7destroyIS2_EEvPT_>
 8002796:	bf00      	nop
 8002798:	3708      	adds	r7, #8
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <_ZNK9__gnu_cxx13new_allocatorIN4tama5SceneEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800279e:	b480      	push	{r7}
 80027a0:	b083      	sub	sp, #12
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 80027a6:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
 80027aa:	4618      	mov	r0, r3
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr

080027b6 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b084      	sub	sp, #16
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	60f8      	str	r0, [r7, #12]
 80027be:	60b9      	str	r1, [r7, #8]
 80027c0:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 80027c2:	68f8      	ldr	r0, [r7, #12]
 80027c4:	f000 f890 	bl	80028e8 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>
 80027c8:	4602      	mov	r2, r0
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	4293      	cmp	r3, r2
 80027ce:	bf8c      	ite	hi
 80027d0:	2301      	movhi	r3, #1
 80027d2:	2300      	movls	r3, #0
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80027da:	f013 fc20 	bl	801601e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80027de:	68ba      	ldr	r2, [r7, #8]
 80027e0:	4613      	mov	r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	4413      	add	r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	4618      	mov	r0, r3
 80027ea:	f013 fbec 	bl	8015fc6 <_Znwj>
 80027ee:	4603      	mov	r3, r0
      }
 80027f0:	4618      	mov	r0, r3
 80027f2:	3710      	adds	r7, #16
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4618      	mov	r0, r3
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr

0800280e <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>:
      deallocate(pointer __p, size_type)
 800280e:	b580      	push	{r7, lr}
 8002810:	b084      	sub	sp, #16
 8002812:	af00      	add	r7, sp, #0
 8002814:	60f8      	str	r0, [r7, #12]
 8002816:	60b9      	str	r1, [r7, #8]
 8002818:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800281a:	68b8      	ldr	r0, [r7, #8]
 800281c:	f013 fbec 	bl	8015ff8 <_ZdlPv>
      }
 8002820:	bf00      	nop
 8002822:	3710      	adds	r7, #16
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _M_tp(std::move(__tp)) { }
 8002828:	b590      	push	{r4, r7, lr}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
 8002832:	687c      	ldr	r4, [r7, #4]
 8002834:	6838      	ldr	r0, [r7, #0]
 8002836:	f7ff fd2b 	bl	8002290 <_ZSt4moveIRNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800283a:	4603      	mov	r3, r0
 800283c:	4619      	mov	r1, r3
 800283e:	4620      	mov	r0, r4
 8002840:	f7ff fd31 	bl	80022a6 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4618      	mov	r0, r3
 8002848:	370c      	adds	r7, #12
 800284a:	46bd      	mov	sp, r7
 800284c:	bd90      	pop	{r4, r7, pc}

0800284e <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama5SceneEELb1EEC1ERKS2_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 800284e:	b580      	push	{r7, lr}
 8002850:	b082      	sub	sp, #8
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
 8002856:	6039      	str	r1, [r7, #0]
 8002858:	6839      	ldr	r1, [r7, #0]
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f7ff fcb8 	bl	80021d0 <_ZNSaIN4tama5SceneEEC1ERKS1_>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	4618      	mov	r0, r3
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_ptr() = default;
 800286a:	b580      	push	{r7, lr}
 800286c:	b082      	sub	sp, #8
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	3304      	adds	r3, #4
 8002876:	4618      	mov	r0, r3
 8002878:	f7fe f8db 	bl	8000a32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4618      	mov	r0, r3
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <_ZNSt10shared_ptrIN4tama14ChangeObserverEED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 8002886:	b580      	push	{r7, lr}
 8002888:	b082      	sub	sp, #8
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4618      	mov	r0, r3
 8002892:	f7ff ffea 	bl	800286a <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4618      	mov	r0, r3
 800289a:	3708      	adds	r7, #8
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <_ZN4tama5SceneD1Ev>:
#include "../drawable/Drawable.h"
#include "../../../../Configuration/display.config.h"

namespace tama
{
    class Scene : public ChangeObserver
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	4a08      	ldr	r2, [pc, #32]	; (80028cc <_ZN4tama5SceneD1Ev+0x2c>)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	601a      	str	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	330c      	adds	r3, #12
 80028b2:	4618      	mov	r0, r3
 80028b4:	f000 f826 	bl	8002904 <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EED1Ev>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	3304      	adds	r3, #4
 80028bc:	4618      	mov	r0, r3
 80028be:	f7ff ffe2 	bl	8002886 <_ZNSt10shared_ptrIN4tama14ChangeObserverEED1Ev>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4618      	mov	r0, r3
 80028c6:	3708      	adds	r7, #8
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	080170cc 	.word	0x080170cc

080028d0 <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEE7destroyIS2_EEvPT_>:
	destroy(_Up* __p) { __p->~_Up(); }
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
 80028da:	6838      	ldr	r0, [r7, #0]
 80028dc:	f7ff ffe0 	bl	80028a0 <_ZN4tama5SceneD1Ev>
 80028e0:	bf00      	nop
 80028e2:	3708      	adds	r7, #8
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 80028f0:	4b03      	ldr	r3, [pc, #12]	; (8002900 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv+0x18>)
 80028f2:	4618      	mov	r0, r3
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	0ccccccc 	.word	0x0ccccccc

08002904 <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8002904:	b5b0      	push	{r4, r5, r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681c      	ldr	r4, [r3, #0]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4618      	mov	r0, r3
 8002918:	f000 f835 	bl	8002986 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE19_M_get_Tp_allocatorEv>
 800291c:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800291e:	461a      	mov	r2, r3
 8002920:	4629      	mov	r1, r5
 8002922:	4620      	mov	r0, r4
 8002924:	f000 f83a 	bl	800299c <_ZSt8_DestroyIPSt10shared_ptrIN4tama8DrawableEES3_EvT_S5_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4618      	mov	r0, r3
 800292c:	f000 f811 	bl	8002952 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EED1Ev>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	4618      	mov	r0, r3
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bdb0      	pop	{r4, r5, r7, pc}

0800293a <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 800293a:	b580      	push	{r7, lr}
 800293c:	b082      	sub	sp, #8
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f000 f838 	bl	80029b8 <_ZNSaISt10shared_ptrIN4tama8DrawableEEED1Ev>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4618      	mov	r0, r3
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8002952:	b580      	push	{r7, lr}
 8002954:	b082      	sub	sp, #8
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6819      	ldr	r1, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 8002962:	461a      	mov	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	10db      	asrs	r3, r3, #3
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 800296c:	461a      	mov	r2, r3
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 f82e 	bl	80029d0 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE13_M_deallocateEPS3_j>
		      - this->_M_impl._M_start); }
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4618      	mov	r0, r3
 8002978:	f7ff ffdf 	bl	800293a <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE12_Vector_implD1Ev>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4618      	mov	r0, r3
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8002986:	b480      	push	{r7}
 8002988:	b083      	sub	sp, #12
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4618      	mov	r0, r3
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <_ZSt8_DestroyIPSt10shared_ptrIN4tama8DrawableEES3_EvT_S5_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 80029a8:	68b9      	ldr	r1, [r7, #8]
 80029aa:	68f8      	ldr	r0, [r7, #12]
 80029ac:	f000 f823 	bl	80029f6 <_ZSt8_DestroyIPSt10shared_ptrIN4tama8DrawableEEEvT_S5_>
    }
 80029b0:	bf00      	nop
 80029b2:	3710      	adds	r7, #16
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <_ZNSaISt10shared_ptrIN4tama8DrawableEEED1Ev>:
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f000 f825 	bl	8002a10 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEED1Ev>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4618      	mov	r0, r3
 80029ca:	3708      	adds	r7, #8
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE13_M_deallocateEPS3_j>:
      _M_deallocate(pointer __p, size_t __n)
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]
	if (__p)
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d005      	beq.n	80029ee <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE13_M_deallocateEPS3_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	68b9      	ldr	r1, [r7, #8]
 80029e8:	4618      	mov	r0, r3
 80029ea:	f000 f81c 	bl	8002a26 <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama8DrawableEEEE10deallocateERS4_PS3_j>
      }
 80029ee:	bf00      	nop
 80029f0:	3710      	adds	r7, #16
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <_ZSt8_DestroyIPSt10shared_ptrIN4tama8DrawableEEEvT_S5_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b082      	sub	sp, #8
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
 80029fe:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8002a00:	6839      	ldr	r1, [r7, #0]
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f000 f829 	bl	8002a5a <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrIN4tama8DrawableEEEEvT_S7_>
    }
 8002a08:	bf00      	nop
 8002a0a:	3708      	adds	r7, #8
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr

08002a26 <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama8DrawableEEEE10deallocateERS4_PS3_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002a26:	b580      	push	{r7, lr}
 8002a28:	b084      	sub	sp, #16
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	60f8      	str	r0, [r7, #12]
 8002a2e:	60b9      	str	r1, [r7, #8]
 8002a30:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	68b9      	ldr	r1, [r7, #8]
 8002a36:	68f8      	ldr	r0, [r7, #12]
 8002a38:	f000 f827 	bl	8002a8a <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEE10deallocateEPS4_j>
 8002a3c:	bf00      	nop
 8002a3e:	3710      	adds	r7, #16
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <_ZSt11__addressofISt10shared_ptrIN4tama8DrawableEEEPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr

08002a5a <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrIN4tama8DrawableEEEEvT_S7_>:
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b082      	sub	sp, #8
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
 8002a62:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d00a      	beq.n	8002a82 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrIN4tama8DrawableEEEEvT_S7_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f7ff ffe9 	bl	8002a44 <_ZSt11__addressofISt10shared_ptrIN4tama8DrawableEEEPT_RS4_>
 8002a72:	4603      	mov	r3, r0
 8002a74:	4618      	mov	r0, r3
 8002a76:	f000 f830 	bl	8002ada <_ZSt8_DestroyISt10shared_ptrIN4tama8DrawableEEEvPT_>
	  for (; __first != __last; ++__first)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	3308      	adds	r3, #8
 8002a7e:	607b      	str	r3, [r7, #4]
 8002a80:	e7f0      	b.n	8002a64 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrIN4tama8DrawableEEEEvT_S7_+0xa>
	}
 8002a82:	bf00      	nop
 8002a84:	3708      	adds	r7, #8
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEE10deallocateEPS4_j>:
      deallocate(pointer __p, size_type)
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b084      	sub	sp, #16
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	60f8      	str	r0, [r7, #12]
 8002a92:	60b9      	str	r1, [r7, #8]
 8002a94:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8002a96:	68b8      	ldr	r0, [r7, #8]
 8002a98:	f013 faae 	bl	8015ff8 <_ZdlPv>
      }
 8002a9c:	bf00      	nop
 8002a9e:	3710      	adds	r7, #16
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <_ZNSt12__shared_ptrIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	3304      	adds	r3, #4
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7fd ffbe 	bl	8000a32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3708      	adds	r7, #8
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <_ZNSt10shared_ptrIN4tama8DrawableEED1Ev>:
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7ff ffea 	bl	8002aa4 <_ZNSt12__shared_ptrIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3708      	adds	r7, #8
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}

08002ada <_ZSt8_DestroyISt10shared_ptrIN4tama8DrawableEEEvPT_>:
    _Destroy(_Tp* __pointer)
 8002ada:	b580      	push	{r7, lr}
 8002adc:	b082      	sub	sp, #8
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f7ff ffec 	bl	8002ac0 <_ZNSt10shared_ptrIN4tama8DrawableEED1Ev>
 8002ae8:	bf00      	nop
 8002aea:	3708      	adds	r7, #8
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	4a08      	ldr	r2, [pc, #32]	; (8002b1c <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev+0x2c>)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	601a      	str	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	330c      	adds	r3, #12
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7ff fd11 	bl	800252a <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7ff f9c6 	bl	8001e9c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4618      	mov	r0, r3
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	080163a4 	.word	0x080163a4

08002b20 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f7ff ffe1 	bl	8002af0 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
 8002b2e:	2114      	movs	r1, #20
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f013 fa46 	bl	8015fc2 <_ZdlPvj>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3708      	adds	r7, #8
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	330c      	adds	r3, #12
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f000 f840 	bl	8002bd2 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>
 8002b52:	4602      	mov	r2, r0
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	4619      	mov	r1, r3
 8002b5a:	4610      	mov	r0, r2
 8002b5c:	f7ff fd35 	bl	80025ca <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>
 8002b60:	bf00      	nop
 8002b62:	3708      	adds	r7, #8
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b086      	sub	sp, #24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	330c      	adds	r3, #12
 8002b74:	4618      	mov	r0, r3
 8002b76:	f000 f839 	bl	8002bec <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	f107 0314 	add.w	r3, r7, #20
 8002b80:	4611      	mov	r1, r2
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7ff fc69 	bl	800245a <_ZNSaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8002b88:	f107 0114 	add.w	r1, r7, #20
 8002b8c:	f107 030c 	add.w	r3, r7, #12
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7ff fd94 	bl	80026c0 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
	this->~_Sp_counted_deleter();
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f7ff ffa9 	bl	8002af0 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8002b9e:	f107 030c 	add.w	r3, r7, #12
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7ff fc85 	bl	80024b2 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	__allocator_type __a(_M_impl._M_alloc());
 8002ba8:	f107 0314 	add.w	r3, r7, #20
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff fc61 	bl	8002474 <_ZNSaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
      }
 8002bb2:	bf00      	nop
 8002bb4:	3718      	adds	r7, #24
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept
 8002bba:	b480      	push	{r7}
 8002bbc:	b083      	sub	sp, #12
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
 8002bc2:	6039      	str	r1, [r7, #0]
        return nullptr;
 8002bc4:	2300      	movs	r3, #0
      }
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr

08002bd2 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	b082      	sub	sp, #8
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f000 f813 	bl	8002c08 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>
 8002be2:	4603      	mov	r3, r0
 8002be4:	4618      	mov	r0, r3
 8002be6:	3708      	adds	r7, #8
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f000 f810 	bl	8002c1e <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama5SceneEELb1EE6_S_getERS3_>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	4618      	mov	r0, r3
 8002c02:	3708      	adds	r7, #8
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>:
      _S_get(_Sp_ebo_helper& __eboh)
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
      { return __eboh._M_tp; }
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	4618      	mov	r0, r3
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr

08002c1e <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama5SceneEELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 8002c1e:	b480      	push	{r7}
 8002c20:	b083      	sub	sp, #12
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <_ZN4tama11SoundPlayer6updateEv>:
    melody = std::move(tones);
    time->startTimer();
}

void tama::SoundPlayer::update()
{
 8002c34:	b5b0      	push	{r4, r5, r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
    if (!playingNow)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c42:	f083 0301 	eor.w	r3, r3, #1
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d168      	bne.n	8002d1e <_ZN4tama11SoundPlayer6updateEv+0xea>
    {
        return;
    }
    if (time->getElapsedTime() > melody[currentTone].duration)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f000 f8cd 	bl	8002dee <_ZNKSt19__shared_ptr_accessIN4tama11TimeMonitorELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8002c54:	4602      	mov	r2, r0
 8002c56:	6813      	ldr	r3, [r2, #0]
 8002c58:	3304      	adds	r3, #4
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4610      	mov	r0, r2
 8002c5e:	4798      	blx	r3
 8002c60:	4604      	mov	r4, r0
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f103 0210 	add.w	r2, r3, #16
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	69db      	ldr	r3, [r3, #28]
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	4610      	mov	r0, r2
 8002c70:	f000 f8c9 	bl	8002e06 <_ZNSt6vectorIN4tama4ToneESaIS1_EEixEj>
 8002c74:	4603      	mov	r3, r0
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	429c      	cmp	r4, r3
 8002c7a:	bf8c      	ite	hi
 8002c7c:	2301      	movhi	r3, #1
 8002c7e:	2300      	movls	r3, #0
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d034      	beq.n	8002cf0 <_ZN4tama11SoundPlayer6updateEv+0xbc>
    {
    	int w = melody.size();
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	3310      	adds	r3, #16
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f000 f8cb 	bl	8002e26 <_ZNKSt6vectorIN4tama4ToneESaIS1_EE4sizeEv>
 8002c90:	4603      	mov	r3, r0
 8002c92:	60fb      	str	r3, [r7, #12]
        if (melody.size() == currentTone + 1)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	3310      	adds	r3, #16
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f000 f8c4 	bl	8002e26 <_ZNKSt6vectorIN4tama4ToneESaIS1_EE4sizeEv>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	69db      	ldr	r3, [r3, #28]
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	bf0c      	ite	eq
 8002caa:	2301      	moveq	r3, #1
 8002cac:	2300      	movne	r3, #0
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d00f      	beq.n	8002cd4 <_ZN4tama11SoundPlayer6updateEv+0xa0>
        {
            playingNow = false;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 2020 	strb.w	r2, [r3, #32]
            player->stop();
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	3308      	adds	r3, #8
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f000 f8c1 	bl	8002e48 <_ZNKSt19__shared_ptr_accessIN4tama20SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	6813      	ldr	r3, [r2, #0]
 8002cca:	3304      	adds	r3, #4
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4610      	mov	r0, r2
 8002cd0:	4798      	blx	r3
            return;
 8002cd2:	e025      	b.n	8002d20 <_ZN4tama11SoundPlayer6updateEv+0xec>
        } else {
            currentTone++;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	69db      	ldr	r3, [r3, #28]
 8002cd8:	1c5a      	adds	r2, r3, #1
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	61da      	str	r2, [r3, #28]
            time->startTimer();
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f000 f884 	bl	8002dee <_ZNKSt19__shared_ptr_accessIN4tama11TimeMonitorELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	6813      	ldr	r3, [r2, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4610      	mov	r0, r2
 8002cee:	4798      	blx	r3
        }
    }
    player->play(melody[currentTone]);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	3308      	adds	r3, #8
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f000 f8a7 	bl	8002e48 <_ZNKSt19__shared_ptr_accessIN4tama20SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8002cfa:	4605      	mov	r5, r0
 8002cfc:	682b      	ldr	r3, [r5, #0]
 8002cfe:	681c      	ldr	r4, [r3, #0]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f103 0210 	add.w	r2, r3, #16
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	69db      	ldr	r3, [r3, #28]
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	4610      	mov	r0, r2
 8002d0e:	f000 f87a 	bl	8002e06 <_ZNSt6vectorIN4tama4ToneESaIS1_EEixEj>
 8002d12:	4603      	mov	r3, r0
 8002d14:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002d18:	4628      	mov	r0, r5
 8002d1a:	47a0      	blx	r4
 8002d1c:	e000      	b.n	8002d20 <_ZN4tama11SoundPlayer6updateEv+0xec>
        return;
 8002d1e:	bf00      	nop
}
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bdb0      	pop	{r4, r5, r7, pc}

08002d26 <_ZNSt12__shared_ptrIN4tama20SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EEaSERKS4_>:
    class __shared_ptr
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b082      	sub	sp, #8
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
 8002d2e:	6039      	str	r1, [r7, #0]
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	601a      	str	r2, [r3, #0]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	1d1a      	adds	r2, r3, #4
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	3304      	adds	r3, #4
 8002d40:	4619      	mov	r1, r3
 8002d42:	4610      	mov	r0, r2
 8002d44:	f000 f88c 	bl	8002e60 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3708      	adds	r7, #8
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <_ZNSt10shared_ptrIN4tama20SoundPlayingStrategyEEaSERKS2_>:
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b082      	sub	sp, #8
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
 8002d5a:	6039      	str	r1, [r7, #0]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	4611      	mov	r1, r2
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7ff ffdf 	bl	8002d26 <_ZNSt12__shared_ptrIN4tama20SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EEaSERKS4_>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3708      	adds	r7, #8
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <_ZN4tama11SoundPlayer18setPlayingStrategyESt10shared_ptrINS_20SoundPlayingStrategyEE>:

void tama::SoundPlayer::setPlayingStrategy(std::shared_ptr<SoundPlayingStrategy> player)
{
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b082      	sub	sp, #8
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
 8002d7a:	6039      	str	r1, [r7, #0]
    this->player = player;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	3308      	adds	r3, #8
 8002d80:	6839      	ldr	r1, [r7, #0]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7ff ffe5 	bl	8002d52 <_ZNSt10shared_ptrIN4tama20SoundPlayingStrategyEEaSERKS2_>
}
 8002d88:	bf00      	nop
 8002d8a:	3708      	adds	r7, #8
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <_ZSt4moveIRSt10shared_ptrIN4tama11TimeMonitorEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr

08002da6 <_ZN4tama11SoundPlayerC1ESt10shared_ptrINS_11TimeMonitorEE>:

tama::SoundPlayer::SoundPlayer(std::shared_ptr<TimeMonitor> time) : time(std::move(time))
 8002da6:	b590      	push	{r4, r7, lr}
 8002da8:	b083      	sub	sp, #12
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
 8002dae:	6039      	str	r1, [r7, #0]
 8002db0:	687c      	ldr	r4, [r7, #4]
 8002db2:	6838      	ldr	r0, [r7, #0]
 8002db4:	f7ff ffec 	bl	8002d90 <_ZSt4moveIRSt10shared_ptrIN4tama11TimeMonitorEEEONSt16remove_referenceIT_E4typeEOS6_>
 8002db8:	4603      	mov	r3, r0
 8002dba:	4619      	mov	r1, r3
 8002dbc:	4620      	mov	r0, r4
 8002dbe:	f000 f873 	bl	8002ea8 <_ZNSt10shared_ptrIN4tama11TimeMonitorEEC1EOS2_>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	3308      	adds	r3, #8
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f000 f881 	bl	8002ece <_ZNSt10shared_ptrIN4tama20SoundPlayingStrategyEEC1Ev>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	3310      	adds	r3, #16
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f000 f889 	bl	8002ee8 <_ZNSt6vectorIN4tama4ToneESaIS1_EEC1Ev>
{
    this->playingNow = false;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 2020 	strb.w	r2, [r3, #32]
    this->currentTone = 0;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	61da      	str	r2, [r3, #28]
}
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4618      	mov	r0, r3
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd90      	pop	{r4, r7, pc}

08002dee <_ZNKSt19__shared_ptr_accessIN4tama11TimeMonitorELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b082      	sub	sp, #8
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
	return _M_get();
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 f89e 	bl	8002f38 <_ZNKSt19__shared_ptr_accessIN4tama11TimeMonitorELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 8002dfc:	4603      	mov	r3, r0
      }
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <_ZNSt6vectorIN4tama4ToneESaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8002e06:	b480      	push	{r7}
 8002e08:	b083      	sub	sp, #12
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
 8002e0e:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	4413      	add	r3, r2
      }
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	370c      	adds	r7, #12
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr

08002e26 <_ZNKSt6vectorIN4tama4ToneESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8002e26:	b480      	push	{r7}
 8002e28:	b083      	sub	sp, #12
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	461a      	mov	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	10db      	asrs	r3, r3, #3
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <_ZNKSt19__shared_ptr_accessIN4tama20SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
	return _M_get();
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f000 f87d 	bl	8002f50 <_ZNKSt19__shared_ptr_accessIN4tama20SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 8002e56:	4603      	mov	r3, r0
      }
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3708      	adds	r7, #8
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>:
      operator=(const __shared_count& __r) noexcept
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	60fb      	str	r3, [r7, #12]
	if (__tmp != _M_pi)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d011      	beq.n	8002e9e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x3e>
	    if (__tmp != 0)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d002      	beq.n	8002e86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x26>
	      __tmp->_M_add_ref_copy();
 8002e80:	68f8      	ldr	r0, [r7, #12]
 8002e82:	f7fd fb60 	bl	8000546 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>
	    if (_M_pi != 0)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d004      	beq.n	8002e98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x38>
	      _M_pi->_M_release();
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7fd fb66 	bl	8000564 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	68fa      	ldr	r2, [r7, #12]
 8002e9c:	601a      	str	r2, [r3, #0]
	return *this;
 8002e9e:	687b      	ldr	r3, [r7, #4]
      }
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3710      	adds	r7, #16
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <_ZNSt10shared_ptrIN4tama11TimeMonitorEEC1EOS2_>:
      shared_ptr(shared_ptr&& __r) noexcept
 8002ea8:	b590      	push	{r4, r7, lr}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
      : __shared_ptr<_Tp>(std::move(__r)) { }
 8002eb2:	687c      	ldr	r4, [r7, #4]
 8002eb4:	6838      	ldr	r0, [r7, #0]
 8002eb6:	f7ff ff6b 	bl	8002d90 <_ZSt4moveIRSt10shared_ptrIN4tama11TimeMonitorEEEONSt16remove_referenceIT_E4typeEOS6_>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	4620      	mov	r0, r4
 8002ec0:	f000 f852 	bl	8002f68 <_ZNSt12__shared_ptrIN4tama11TimeMonitorELN9__gnu_cxx12_Lock_policyE0EEC1EOS4_>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	370c      	adds	r7, #12
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd90      	pop	{r4, r7, pc}

08002ece <_ZNSt10shared_ptrIN4tama20SoundPlayingStrategyEEC1Ev>:
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b082      	sub	sp, #8
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f000 f863 	bl	8002fa4 <_ZNSt12__shared_ptrIN4tama20SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3708      	adds	r7, #8
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <_ZNSt6vectorIN4tama4ToneESaIS1_EEC1Ev>:
      vector()
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f000 f873 	bl	8002fde <_ZNSt12_Vector_baseIN4tama4ToneESaIS1_EEC1Ev>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4618      	mov	r0, r3
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <_ZNSt6vectorIN4tama4ToneESaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8002f02:	b5b0      	push	{r4, r5, r7, lr}
 8002f04:	b082      	sub	sp, #8
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681c      	ldr	r4, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f000 f889 	bl	800302c <_ZNSt12_Vector_baseIN4tama4ToneESaIS1_EE19_M_get_Tp_allocatorEv>
 8002f1a:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	4629      	mov	r1, r5
 8002f20:	4620      	mov	r0, r4
 8002f22:	f000 f88e 	bl	8003042 <_ZSt8_DestroyIPN4tama4ToneES1_EvT_S3_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f000 f865 	bl	8002ff8 <_ZNSt12_Vector_baseIN4tama4ToneESaIS1_EED1Ev>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4618      	mov	r0, r3
 8002f32:	3708      	adds	r7, #8
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bdb0      	pop	{r4, r5, r7, pc}

08002f38 <_ZNKSt19__shared_ptr_accessIN4tama11TimeMonitorELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f000 f898 	bl	8003076 <_ZNKSt12__shared_ptrIN4tama11TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE3getEv>
 8002f46:	4603      	mov	r3, r0
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3708      	adds	r7, #8
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <_ZNKSt19__shared_ptr_accessIN4tama20SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f000 f898 	bl	800308e <_ZNKSt12__shared_ptrIN4tama20SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE3getEv>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	4618      	mov	r0, r3
 8002f62:	3708      	adds	r7, #8
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <_ZNSt12__shared_ptrIN4tama11TimeMonitorELN9__gnu_cxx12_Lock_policyE0EEC1EOS4_>:
      __shared_ptr(__shared_ptr&& __r) noexcept
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
      : _M_ptr(__r._M_ptr), _M_refcount()
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	601a      	str	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	3304      	adds	r3, #4
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7fd ff73 	bl	8000e6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	_M_refcount._M_swap(__r._M_refcount);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	1d1a      	adds	r2, r3, #4
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	3304      	adds	r3, #4
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	4610      	mov	r0, r2
 8002f90:	f7fd ff79 	bl	8000e86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	__r._M_ptr = 0;
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	2200      	movs	r2, #0
 8002f98:	601a      	str	r2, [r3, #0]
      }
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3708      	adds	r7, #8
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <_ZNSt12__shared_ptrIN4tama20SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_ptr() noexcept
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
      : _M_ptr(0), _M_refcount()
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	601a      	str	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	3304      	adds	r3, #4
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7fd ff57 	bl	8000e6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
      { }
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3708      	adds	r7, #8
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <_ZNSt12_Vector_baseIN4tama4ToneESaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	b082      	sub	sp, #8
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 f845 	bl	800305e <_ZNSaIN4tama4ToneEED1Ev>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3708      	adds	r7, #8
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <_ZNSt12_Vector_baseIN4tama4ToneESaIS1_EEC1Ev>:
      _Vector_base()
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b082      	sub	sp, #8
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f000 f85c 	bl	80030a6 <_ZNSt12_Vector_baseIN4tama4ToneESaIS1_EE12_Vector_implC1Ev>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3708      	adds	r7, #8
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <_ZNSt12_Vector_baseIN4tama4ToneESaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6819      	ldr	r1, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 8003008:	461a      	mov	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	10db      	asrs	r3, r3, #3
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8003012:	461a      	mov	r2, r3
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f000 f85b 	bl	80030d0 <_ZNSt12_Vector_baseIN4tama4ToneESaIS1_EE13_M_deallocateEPS1_j>
		      - this->_M_impl._M_start); }
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4618      	mov	r0, r3
 800301e:	f7ff ffd2 	bl	8002fc6 <_ZNSt12_Vector_baseIN4tama4ToneESaIS1_EE12_Vector_implD1Ev>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4618      	mov	r0, r3
 8003026:	3708      	adds	r7, #8
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <_ZNSt12_Vector_baseIN4tama4ToneESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4618      	mov	r0, r3
 8003038:	370c      	adds	r7, #12
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr

08003042 <_ZSt8_DestroyIPN4tama4ToneES1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8003042:	b580      	push	{r7, lr}
 8003044:	b084      	sub	sp, #16
 8003046:	af00      	add	r7, sp, #0
 8003048:	60f8      	str	r0, [r7, #12]
 800304a:	60b9      	str	r1, [r7, #8]
 800304c:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800304e:	68b9      	ldr	r1, [r7, #8]
 8003050:	68f8      	ldr	r0, [r7, #12]
 8003052:	f000 f850 	bl	80030f6 <_ZSt8_DestroyIPN4tama4ToneEEvT_S3_>
    }
 8003056:	bf00      	nop
 8003058:	3710      	adds	r7, #16
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <_ZNSaIN4tama4ToneEED1Ev>:
 800305e:	b580      	push	{r7, lr}
 8003060:	b082      	sub	sp, #8
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 f85d 	bl	8003126 <_ZN9__gnu_cxx13new_allocatorIN4tama4ToneEED1Ev>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4618      	mov	r0, r3
 8003070:	3708      	adds	r7, #8
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <_ZNKSt12__shared_ptrIN4tama11TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 8003076:	b480      	push	{r7}
 8003078:	b083      	sub	sp, #12
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4618      	mov	r0, r3
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr

0800308e <_ZNKSt12__shared_ptrIN4tama20SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 800308e:	b480      	push	{r7}
 8003090:	b083      	sub	sp, #12
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4618      	mov	r0, r3
 800309c:	370c      	adds	r7, #12
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr

080030a6 <_ZNSt12_Vector_baseIN4tama4ToneESaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl()
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b082      	sub	sp, #8
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 f844 	bl	800313c <_ZNSaIN4tama4ToneEEC1Ev>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	601a      	str	r2, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	605a      	str	r2, [r3, #4]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	609a      	str	r2, [r3, #8]
	{ }
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4618      	mov	r0, r3
 80030ca:	3708      	adds	r7, #8
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <_ZNSt12_Vector_baseIN4tama4ToneESaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	607a      	str	r2, [r7, #4]
	if (__p)
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d005      	beq.n	80030ee <_ZNSt12_Vector_baseIN4tama4ToneESaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	68b9      	ldr	r1, [r7, #8]
 80030e8:	4618      	mov	r0, r3
 80030ea:	f000 f833 	bl	8003154 <_ZNSt16allocator_traitsISaIN4tama4ToneEEE10deallocateERS2_PS1_j>
      }
 80030ee:	bf00      	nop
 80030f0:	3710      	adds	r7, #16
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <_ZSt8_DestroyIPN4tama4ToneEEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b082      	sub	sp, #8
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
 80030fe:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8003100:	6839      	ldr	r1, [r7, #0]
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f000 f835 	bl	8003172 <_ZNSt12_Destroy_auxILb1EE9__destroyIPN4tama4ToneEEEvT_S5_>
    }
 8003108:	bf00      	nop
 800310a:	3708      	adds	r7, #8
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <_ZNKSt12_Vector_baseIN4tama4ToneESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4618      	mov	r0, r3
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr

08003126 <_ZN9__gnu_cxx13new_allocatorIN4tama4ToneEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003126:	b480      	push	{r7}
 8003128:	b083      	sub	sp, #12
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4618      	mov	r0, r3
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <_ZNSaIN4tama4ToneEEC1Ev>:
      allocator() throw() { }
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f000 f81f 	bl	8003188 <_ZN9__gnu_cxx13new_allocatorIN4tama4ToneEEC1Ev>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4618      	mov	r0, r3
 800314e:	3708      	adds	r7, #8
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <_ZNSt16allocator_traitsISaIN4tama4ToneEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	68b9      	ldr	r1, [r7, #8]
 8003164:	68f8      	ldr	r0, [r7, #12]
 8003166:	f000 f81a 	bl	800319e <_ZN9__gnu_cxx13new_allocatorIN4tama4ToneEE10deallocateEPS2_j>
 800316a:	bf00      	nop
 800316c:	3710      	adds	r7, #16
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <_ZNSt12_Destroy_auxILb1EE9__destroyIPN4tama4ToneEEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8003172:	b480      	push	{r7}
 8003174:	b083      	sub	sp, #12
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
 800317a:	6039      	str	r1, [r7, #0]
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <_ZN9__gnu_cxx13new_allocatorIN4tama4ToneEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4618      	mov	r0, r3
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr

0800319e <_ZN9__gnu_cxx13new_allocatorIN4tama4ToneEE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 800319e:	b580      	push	{r7, lr}
 80031a0:	b084      	sub	sp, #16
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	60f8      	str	r0, [r7, #12]
 80031a6:	60b9      	str	r1, [r7, #8]
 80031a8:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 80031aa:	68b8      	ldr	r0, [r7, #8]
 80031ac:	f012 ff24 	bl	8015ff8 <_ZdlPv>
      }
 80031b0:	bf00      	nop
 80031b2:	3710      	adds	r7, #16
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <_ZNSt12__shared_ptrIN4tama14InitialLoadingELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_ptr() = default;
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	3304      	adds	r3, #4
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7fd fc34 	bl	8000a32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4618      	mov	r0, r3
 80031ce:	3708      	adds	r7, #8
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <_ZNSt10shared_ptrIN4tama14InitialLoadingEED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4618      	mov	r0, r3
 80031e0:	f7ff ffea 	bl	80031b8 <_ZNSt12__shared_ptrIN4tama14InitialLoadingELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4618      	mov	r0, r3
 80031e8:	3708      	adds	r7, #8
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <_ZN4tama14InitialLoading7onInputENS_6ButtonE>:

#include "InitialLoading.h"
#include "../../assets/egg.texture.h"

void tama::InitialLoading::onInput(tama::Button button)
{
 80031ee:	b5b0      	push	{r4, r5, r7, lr}
 80031f0:	b08c      	sub	sp, #48	; 0x30
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
 80031f6:	460b      	mov	r3, r1
 80031f8:	70fb      	strb	r3, [r7, #3]
    i++;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	69db      	ldr	r3, [r3, #28]
 80031fe:	1c5a      	adds	r2, r3, #1
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	61da      	str	r2, [r3, #28]
    if (button == Button::C)
 8003204:	78fb      	ldrb	r3, [r7, #3]
 8003206:	2b02      	cmp	r3, #2
 8003208:	d116      	bne.n	8003238 <_ZN4tama14InitialLoading7onInputENS_6ButtonE+0x4a>
    {
        egg->move(Vec2d(1, 0));
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	3314      	adds	r3, #20
 800320e:	4618      	mov	r0, r3
 8003210:	f000 f9c4 	bl	800359c <_ZNKSt19__shared_ptr_accessIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8003214:	4605      	mov	r5, r0
 8003216:	682b      	ldr	r3, [r5, #0]
 8003218:	3310      	adds	r3, #16
 800321a:	681c      	ldr	r4, [r3, #0]
 800321c:	f107 030c 	add.w	r3, r7, #12
 8003220:	2200      	movs	r2, #0
 8003222:	2101      	movs	r1, #1
 8003224:	4618      	mov	r0, r3
 8003226:	f7fd f96f 	bl	8000508 <_ZN4tama5Vec2dC1Eii>
 800322a:	f107 030c 	add.w	r3, r7, #12
 800322e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003232:	4628      	mov	r0, r5
 8003234:	47a0      	blx	r4
 8003236:	e019      	b.n	800326c <_ZN4tama14InitialLoading7onInputENS_6ButtonE+0x7e>
    } else if (button == Button::B) {
 8003238:	78fb      	ldrb	r3, [r7, #3]
 800323a:	2b01      	cmp	r3, #1
 800323c:	d116      	bne.n	800326c <_ZN4tama14InitialLoading7onInputENS_6ButtonE+0x7e>
        egg->move(Vec2d(-1, 0));
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	3314      	adds	r3, #20
 8003242:	4618      	mov	r0, r3
 8003244:	f000 f9aa 	bl	800359c <_ZNKSt19__shared_ptr_accessIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8003248:	4605      	mov	r5, r0
 800324a:	682b      	ldr	r3, [r5, #0]
 800324c:	3310      	adds	r3, #16
 800324e:	681c      	ldr	r4, [r3, #0]
 8003250:	f107 0314 	add.w	r3, r7, #20
 8003254:	2200      	movs	r2, #0
 8003256:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800325a:	4618      	mov	r0, r3
 800325c:	f7fd f954 	bl	8000508 <_ZN4tama5Vec2dC1Eii>
 8003260:	f107 0314 	add.w	r3, r7, #20
 8003264:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003268:	4628      	mov	r0, r5
 800326a:	47a0      	blx	r4
    }

    if (i == 10)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	69db      	ldr	r3, [r3, #28]
 8003270:	2b0a      	cmp	r3, #10
 8003272:	d126      	bne.n	80032c2 <_ZN4tama14InitialLoading7onInputENS_6ButtonE+0xd4>
    {
        context->switchStage(std::make_shared<InitialLoading>(context));
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	330c      	adds	r3, #12
 8003278:	4618      	mov	r0, r3
 800327a:	f000 f99b 	bl	80035b4 <_ZNKSt19__shared_ptr_accessIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800327e:	4604      	mov	r4, r0
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f103 020c 	add.w	r2, r3, #12
 8003286:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800328a:	4611      	mov	r1, r2
 800328c:	4618      	mov	r0, r3
 800328e:	f000 f9a8 	bl	80035e2 <_ZSt11make_sharedIN4tama14InitialLoadingEJRSt10shared_ptrINS0_7ContextEEEES2_IT_EDpOT0_>
 8003292:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003296:	f107 031c 	add.w	r3, r7, #28
 800329a:	4611      	mov	r1, r2
 800329c:	4618      	mov	r0, r3
 800329e:	f000 f9c8 	bl	8003632 <_ZNSt10shared_ptrIN4tama5StageEEC1INS0_14InitialLoadingEvEEOS_IT_E>
 80032a2:	f107 031c 	add.w	r3, r7, #28
 80032a6:	4619      	mov	r1, r3
 80032a8:	4620      	mov	r0, r4
 80032aa:	f7fd fe24 	bl	8000ef6 <_ZN4tama7Context11switchStageESt10shared_ptrINS_5StageEE>
 80032ae:	f107 031c 	add.w	r3, r7, #28
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7fd fe71 	bl	8000f9a <_ZNSt10shared_ptrIN4tama5StageEED1Ev>
 80032b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032bc:	4618      	mov	r0, r3
 80032be:	f7ff ff89 	bl	80031d4 <_ZNSt10shared_ptrIN4tama14InitialLoadingEED1Ev>
    }

    int a = 5;
 80032c2:	2305      	movs	r3, #5
 80032c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    a = 3;
 80032c6:	2303      	movs	r3, #3
 80032c8:	62fb      	str	r3, [r7, #44]	; 0x2c
}
 80032ca:	bf00      	nop
 80032cc:	3730      	adds	r7, #48	; 0x30
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bdb0      	pop	{r4, r5, r7, pc}

080032d2 <_ZN4tama14InitialLoading6onInitEv>:

void tama::InitialLoading::onInit()
{
 80032d2:	b480      	push	{r7}
 80032d4:	b085      	sub	sp, #20
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]

    int b = 4;
 80032da:	2304      	movs	r3, #4
 80032dc:	60fb      	str	r3, [r7, #12]
    int c = 3;
 80032de:	2303      	movs	r3, #3
 80032e0:	60bb      	str	r3, [r7, #8]
}
 80032e2:	bf00      	nop
 80032e4:	3714      	adds	r7, #20
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr

080032ee <_ZN4tama14InitialLoading7onFrameEv>:

void tama::InitialLoading::onFrame()
{
 80032ee:	b480      	push	{r7}
 80032f0:	b085      	sub	sp, #20
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
    int w = 3;
 80032f6:	2303      	movs	r3, #3
 80032f8:	60fb      	str	r3, [r7, #12]
    w = 1;
 80032fa:	2301      	movs	r3, #1
 80032fc:	60fb      	str	r3, [r7, #12]
}
 80032fe:	bf00      	nop
 8003300:	3714      	adds	r7, #20
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr

0800330a <_ZNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
 800330a:	b580      	push	{r7, lr}
 800330c:	b082      	sub	sp, #8
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	3304      	adds	r3, #4
 8003316:	4618      	mov	r0, r3
 8003318:	f7fd fb8b 	bl	8000a32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	4618      	mov	r0, r3
 8003320:	3708      	adds	r7, #8
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}

08003326 <_ZNSt10shared_ptrIN4tama7ContextEED1Ev>:
 8003326:	b580      	push	{r7, lr}
 8003328:	b082      	sub	sp, #8
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4618      	mov	r0, r3
 8003332:	f7ff ffea 	bl	800330a <_ZNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4618      	mov	r0, r3
 800333a:	3708      	adds	r7, #8
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <_ZN4tama5StageD1Ev>:

namespace tama
{
    class Context;

    class Stage : public OnInput
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	4a08      	ldr	r2, [pc, #32]	; (800336c <_ZN4tama5StageD1Ev+0x2c>)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	601a      	str	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	330c      	adds	r3, #12
 8003352:	4618      	mov	r0, r3
 8003354:	f7ff ffe7 	bl	8003326 <_ZNSt10shared_ptrIN4tama7ContextEED1Ev>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	3304      	adds	r3, #4
 800335c:	4618      	mov	r0, r3
 800335e:	f7fe fcc5 	bl	8001cec <_ZNSt10shared_ptrIN4tama5SceneEED1Ev>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4618      	mov	r0, r3
 8003366:	3708      	adds	r7, #8
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	080163c0 	.word	0x080163c0

08003370 <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	3304      	adds	r3, #4
 800337c:	4618      	mov	r0, r3
 800337e:	f7fd fb58 	bl	8000a32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4618      	mov	r0, r3
 8003386:	3708      	adds	r7, #8
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <_ZNSt10shared_ptrIN4tama6SpriteEED1Ev>:
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4618      	mov	r0, r3
 8003398:	f7ff ffea 	bl	8003370 <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4618      	mov	r0, r3
 80033a0:	3708      	adds	r7, #8
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <_ZNSt12__shared_ptrIN4tama5InputELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
 80033a6:	b580      	push	{r7, lr}
 80033a8:	b082      	sub	sp, #8
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	3304      	adds	r3, #4
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7fd fb3d 	bl	8000a32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4618      	mov	r0, r3
 80033bc:	3708      	adds	r7, #8
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <_ZNSt10shared_ptrIN4tama5InputEED1Ev>:
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b082      	sub	sp, #8
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7ff ffea 	bl	80033a6 <_ZNSt12__shared_ptrIN4tama5InputELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4618      	mov	r0, r3
 80033d6:	3708      	adds	r7, #8
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <_ZNSt12__shared_ptrIN4tama13TextureLoaderELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	3304      	adds	r3, #4
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7fd fb22 	bl	8000a32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4618      	mov	r0, r3
 80033f2:	3708      	adds	r7, #8
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <_ZNSt10shared_ptrIN4tama13TextureLoaderEED1Ev>:
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4618      	mov	r0, r3
 8003404:	f7ff ffea 	bl	80033dc <_ZNSt12__shared_ptrIN4tama13TextureLoaderELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4618      	mov	r0, r3
 800340c:	3708      	adds	r7, #8
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}

08003412 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
 8003412:	b580      	push	{r7, lr}
 8003414:	b082      	sub	sp, #8
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	3304      	adds	r3, #4
 800341e:	4618      	mov	r0, r3
 8003420:	f7fd fb07 	bl	8000a32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4618      	mov	r0, r3
 8003428:	3708      	adds	r7, #8
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <_ZNSt10shared_ptrIN4tama7TextureEED1Ev>:
 800342e:	b580      	push	{r7, lr}
 8003430:	b082      	sub	sp, #8
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4618      	mov	r0, r3
 800343a:	f7ff ffea 	bl	8003412 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4618      	mov	r0, r3
 8003442:	3708      	adds	r7, #8
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <_ZN4tama14InitialLoadingC1ERKSt10shared_ptrINS_7ContextEE>:

tama::InitialLoading::InitialLoading(const std::shared_ptr<Context> &context) : Stage(context)
 8003448:	b590      	push	{r4, r7, lr}
 800344a:	b093      	sub	sp, #76	; 0x4c
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6839      	ldr	r1, [r7, #0]
 8003456:	4618      	mov	r0, r3
 8003458:	f7fe fc9a 	bl	8001d90 <_ZN4tama5StageC1ERKSt10shared_ptrINS_7ContextEE>
 800345c:	4a4d      	ldr	r2, [pc, #308]	; (8003594 <_ZN4tama14InitialLoadingC1ERKSt10shared_ptrINS_7ContextEE+0x14c>)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	601a      	str	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	3314      	adds	r3, #20
 8003466:	4618      	mov	r0, r3
 8003468:	f000 f8f6 	bl	8003658 <_ZNSt10shared_ptrIN4tama6SpriteEEC1Ev>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	61da      	str	r2, [r3, #28]
{
    context->getInput()->addListener(std::make_shared<InitialLoading>(*this));
 8003472:	6838      	ldr	r0, [r7, #0]
 8003474:	f000 f89e 	bl	80035b4 <_ZNKSt19__shared_ptr_accessIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8003478:	4602      	mov	r2, r0
 800347a:	f107 0308 	add.w	r3, r7, #8
 800347e:	4611      	mov	r1, r2
 8003480:	4618      	mov	r0, r3
 8003482:	f7fd fe1f 	bl	80010c4 <_ZN4tama7Context8getInputEv>
 8003486:	f107 0308 	add.w	r3, r7, #8
 800348a:	4618      	mov	r0, r3
 800348c:	f000 f8f1 	bl	8003672 <_ZNKSt19__shared_ptr_accessIN4tama5InputELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8003490:	4604      	mov	r4, r0
 8003492:	f107 0318 	add.w	r3, r7, #24
 8003496:	6879      	ldr	r1, [r7, #4]
 8003498:	4618      	mov	r0, r3
 800349a:	f000 f901 	bl	80036a0 <_ZSt11make_sharedIN4tama14InitialLoadingEJRS1_EESt10shared_ptrIT_EDpOT0_>
 800349e:	f107 0218 	add.w	r2, r7, #24
 80034a2:	f107 0310 	add.w	r3, r7, #16
 80034a6:	4611      	mov	r1, r2
 80034a8:	4618      	mov	r0, r3
 80034aa:	f000 f916 	bl	80036da <_ZNSt10shared_ptrIN4tama7OnInputEEC1INS0_14InitialLoadingEvEEOS_IT_E>
 80034ae:	f107 0310 	add.w	r3, r7, #16
 80034b2:	4619      	mov	r1, r3
 80034b4:	4620      	mov	r0, r4
 80034b6:	f7fd f885 	bl	80005c4 <_ZN4tama5Input11addListenerESt10shared_ptrINS_7OnInputEE>
 80034ba:	f107 0310 	add.w	r3, r7, #16
 80034be:	4618      	mov	r0, r3
 80034c0:	f7fd fb2e 	bl	8000b20 <_ZNSt10shared_ptrIN4tama7OnInputEED1Ev>
 80034c4:	f107 0318 	add.w	r3, r7, #24
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7ff fe83 	bl	80031d4 <_ZNSt10shared_ptrIN4tama14InitialLoadingEED1Ev>
 80034ce:	f107 0308 	add.w	r3, r7, #8
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7ff ff75 	bl	80033c2 <_ZNSt10shared_ptrIN4tama5InputEED1Ev>
    egg = std::make_shared<Sprite>(context->getTextureLoader()->load(tama::asset::egg1), Vec2d(10, 37));
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f103 0414 	add.w	r4, r3, #20
 80034de:	6838      	ldr	r0, [r7, #0]
 80034e0:	f000 f868 	bl	80035b4 <_ZNKSt19__shared_ptr_accessIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80034e4:	4602      	mov	r2, r0
 80034e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80034ea:	4611      	mov	r1, r2
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7fd fdda 	bl	80010a6 <_ZN4tama7Context16getTextureLoaderEv>
 80034f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80034f6:	4618      	mov	r0, r3
 80034f8:	f000 f902 	bl	8003700 <_ZNKSt19__shared_ptr_accessIN4tama13TextureLoaderELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80034fc:	4601      	mov	r1, r0
 80034fe:	680b      	ldr	r3, [r1, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8003506:	4a24      	ldr	r2, [pc, #144]	; (8003598 <_ZN4tama14InitialLoadingC1ERKSt10shared_ptrINS_7ContextEE+0x150>)
 8003508:	4798      	blx	r3
 800350a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800350e:	2225      	movs	r2, #37	; 0x25
 8003510:	210a      	movs	r1, #10
 8003512:	4618      	mov	r0, r3
 8003514:	f7fc fff8 	bl	8000508 <_ZN4tama5Vec2dC1Eii>
 8003518:	f107 0320 	add.w	r3, r7, #32
 800351c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003520:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003524:	4618      	mov	r0, r3
 8003526:	f000 f90d 	bl	8003744 <_ZSt11make_sharedIN4tama6SpriteEJSt10shared_ptrINS0_7TextureEENS0_5Vec2dEEES2_IT_EDpOT0_>
 800352a:	f107 0320 	add.w	r3, r7, #32
 800352e:	4619      	mov	r1, r3
 8003530:	4620      	mov	r0, r4
 8003532:	f000 f934 	bl	800379e <_ZNSt10shared_ptrIN4tama6SpriteEEaSEOS2_>
 8003536:	f107 0320 	add.w	r3, r7, #32
 800353a:	4618      	mov	r0, r3
 800353c:	f7ff ff26 	bl	800338c <_ZNSt10shared_ptrIN4tama6SpriteEED1Ev>
 8003540:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003544:	4618      	mov	r0, r3
 8003546:	f7ff ff72 	bl	800342e <_ZNSt10shared_ptrIN4tama7TextureEED1Ev>
 800354a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800354e:	4618      	mov	r0, r3
 8003550:	f7ff ff52 	bl	80033f8 <_ZNSt10shared_ptrIN4tama13TextureLoaderEED1Ev>
    scene->addDrawable(egg);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	3304      	adds	r3, #4
 8003558:	4618      	mov	r0, r3
 800355a:	f000 f933 	bl	80037c4 <_ZNKSt19__shared_ptr_accessIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800355e:	4604      	mov	r4, r0
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f103 0214 	add.w	r2, r3, #20
 8003566:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800356a:	4611      	mov	r1, r2
 800356c:	4618      	mov	r0, r3
 800356e:	f000 f935 	bl	80037dc <_ZNSt10shared_ptrIN4tama8DrawableEEC1INS0_6SpriteEvEERKS_IT_E>
 8003572:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003576:	4619      	mov	r1, r3
 8003578:	4620      	mov	r0, r4
 800357a:	f002 ff9f 	bl	80064bc <_ZN4tama5Scene11addDrawableESt10shared_ptrINS_8DrawableEE>
 800357e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003582:	4618      	mov	r0, r3
 8003584:	f7ff fa9c 	bl	8002ac0 <_ZNSt10shared_ptrIN4tama8DrawableEED1Ev>
}
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4618      	mov	r0, r3
 800358c:	374c      	adds	r7, #76	; 0x4c
 800358e:	46bd      	mov	sp, r7
 8003590:	bd90      	pop	{r4, r7, pc}
 8003592:	bf00      	nop
 8003594:	0801659c 	.word	0x0801659c
 8003598:	20000000 	.word	0x20000000

0800359c <_ZNKSt19__shared_ptr_accessIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
	return _M_get();
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f000 f929 	bl	80037fc <_ZNKSt19__shared_ptr_accessIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 80035aa:	4603      	mov	r3, r0
      }
 80035ac:	4618      	mov	r0, r3
 80035ae:	3708      	adds	r7, #8
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <_ZNKSt19__shared_ptr_accessIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
	return _M_get();
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f000 f929 	bl	8003814 <_ZNKSt19__shared_ptr_accessIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 80035c2:	4603      	mov	r3, r0
      }
 80035c4:	4618      	mov	r0, r3
 80035c6:	3708      	adds	r7, #8
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <_ZSt7forwardIRSt10shared_ptrIN4tama7ContextEEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4618      	mov	r0, r3
 80035d8:	370c      	adds	r7, #12
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr

080035e2 <_ZSt11make_sharedIN4tama14InitialLoadingEJRSt10shared_ptrINS0_7ContextEEEES2_IT_EDpOT0_>:
    make_shared(_Args&&... __args)
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b084      	sub	sp, #16
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
 80035ea:	6039      	str	r1, [r7, #0]
				       std::forward<_Args>(__args)...);
 80035ec:	f107 030c 	add.w	r3, r7, #12
 80035f0:	4618      	mov	r0, r3
 80035f2:	f000 f91b 	bl	800382c <_ZNSaIN4tama14InitialLoadingEEC1Ev>
 80035f6:	6838      	ldr	r0, [r7, #0]
 80035f8:	f7ff ffe8 	bl	80035cc <_ZSt7forwardIRSt10shared_ptrIN4tama7ContextEEEOT_RNSt16remove_referenceIS5_E4typeE>
 80035fc:	4602      	mov	r2, r0
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f107 010c 	add.w	r1, r7, #12
 8003604:	4618      	mov	r0, r3
 8003606:	f000 f929 	bl	800385c <_ZSt15allocate_sharedIN4tama14InitialLoadingESaIS1_EJRSt10shared_ptrINS0_7ContextEEEES3_IT_ERKT0_DpOT1_>
 800360a:	f107 030c 	add.w	r3, r7, #12
 800360e:	4618      	mov	r0, r3
 8003610:	f000 f918 	bl	8003844 <_ZNSaIN4tama14InitialLoadingEED1Ev>
    }
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	3710      	adds	r7, #16
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <_ZSt4moveIRSt10shared_ptrIN4tama14InitialLoadingEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4618      	mov	r0, r3
 8003628:	370c      	adds	r7, #12
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr

08003632 <_ZNSt10shared_ptrIN4tama5StageEEC1INS0_14InitialLoadingEvEEOS_IT_E>:
	shared_ptr(shared_ptr<_Yp>&& __r) noexcept
 8003632:	b590      	push	{r4, r7, lr}
 8003634:	b083      	sub	sp, #12
 8003636:	af00      	add	r7, sp, #0
 8003638:	6078      	str	r0, [r7, #4]
 800363a:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 800363c:	687c      	ldr	r4, [r7, #4]
 800363e:	6838      	ldr	r0, [r7, #0]
 8003640:	f7ff ffec 	bl	800361c <_ZSt4moveIRSt10shared_ptrIN4tama14InitialLoadingEEEONSt16remove_referenceIT_E4typeEOS6_>
 8003644:	4603      	mov	r3, r0
 8003646:	4619      	mov	r1, r3
 8003648:	4620      	mov	r0, r4
 800364a:	f000 f91a 	bl	8003882 <_ZNSt12__shared_ptrIN4tama5StageELN9__gnu_cxx12_Lock_policyE0EEC1INS0_14InitialLoadingEvEEOS_IT_LS3_0EE>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4618      	mov	r0, r3
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	bd90      	pop	{r4, r7, pc}

08003658 <_ZNSt10shared_ptrIN4tama6SpriteEEC1Ev>:
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4618      	mov	r0, r3
 8003664:	f000 f92b 	bl	80038be <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4618      	mov	r0, r3
 800366c:	3708      	adds	r7, #8
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}

08003672 <_ZNKSt19__shared_ptr_accessIN4tama5InputELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 8003672:	b580      	push	{r7, lr}
 8003674:	b082      	sub	sp, #8
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
	return _M_get();
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 f930 	bl	80038e0 <_ZNKSt19__shared_ptr_accessIN4tama5InputELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 8003680:	4603      	mov	r3, r0
      }
 8003682:	4618      	mov	r0, r3
 8003684:	3708      	adds	r7, #8
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}

0800368a <_ZSt7forwardIRN4tama14InitialLoadingEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800368a:	b480      	push	{r7}
 800368c:	b083      	sub	sp, #12
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4618      	mov	r0, r3
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <_ZSt11make_sharedIN4tama14InitialLoadingEJRS1_EESt10shared_ptrIT_EDpOT0_>:
    make_shared(_Args&&... __args)
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
				       std::forward<_Args>(__args)...);
 80036aa:	f107 030c 	add.w	r3, r7, #12
 80036ae:	4618      	mov	r0, r3
 80036b0:	f000 f8bc 	bl	800382c <_ZNSaIN4tama14InitialLoadingEEC1Ev>
 80036b4:	6838      	ldr	r0, [r7, #0]
 80036b6:	f7ff ffe8 	bl	800368a <_ZSt7forwardIRN4tama14InitialLoadingEEOT_RNSt16remove_referenceIS3_E4typeE>
 80036ba:	4602      	mov	r2, r0
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f107 010c 	add.w	r1, r7, #12
 80036c2:	4618      	mov	r0, r3
 80036c4:	f000 f918 	bl	80038f8 <_ZSt15allocate_sharedIN4tama14InitialLoadingESaIS1_EJRS1_EESt10shared_ptrIT_ERKT0_DpOT1_>
 80036c8:	f107 030c 	add.w	r3, r7, #12
 80036cc:	4618      	mov	r0, r3
 80036ce:	f000 f8b9 	bl	8003844 <_ZNSaIN4tama14InitialLoadingEED1Ev>
    }
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	3710      	adds	r7, #16
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <_ZNSt10shared_ptrIN4tama7OnInputEEC1INS0_14InitialLoadingEvEEOS_IT_E>:
	shared_ptr(shared_ptr<_Yp>&& __r) noexcept
 80036da:	b590      	push	{r4, r7, lr}
 80036dc:	b083      	sub	sp, #12
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
 80036e2:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 80036e4:	687c      	ldr	r4, [r7, #4]
 80036e6:	6838      	ldr	r0, [r7, #0]
 80036e8:	f7ff ff98 	bl	800361c <_ZSt4moveIRSt10shared_ptrIN4tama14InitialLoadingEEEONSt16remove_referenceIT_E4typeEOS6_>
 80036ec:	4603      	mov	r3, r0
 80036ee:	4619      	mov	r1, r3
 80036f0:	4620      	mov	r0, r4
 80036f2:	f000 f914 	bl	800391e <_ZNSt12__shared_ptrIN4tama7OnInputELN9__gnu_cxx12_Lock_policyE0EEC1INS0_14InitialLoadingEvEEOS_IT_LS3_0EE>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4618      	mov	r0, r3
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd90      	pop	{r4, r7, pc}

08003700 <_ZNKSt19__shared_ptr_accessIN4tama13TextureLoaderELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
	return _M_get();
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f000 f926 	bl	800395a <_ZNKSt19__shared_ptr_accessIN4tama13TextureLoaderELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 800370e:	4603      	mov	r3, r0
      }
 8003710:	4618      	mov	r0, r3
 8003712:	3708      	adds	r7, #8
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <_ZSt7forwardISt10shared_ptrIN4tama7TextureEEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4618      	mov	r0, r3
 8003724:	370c      	adds	r7, #12
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr

0800372e <_ZSt7forwardIN4tama5Vec2dEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800372e:	b480      	push	{r7}
 8003730:	b083      	sub	sp, #12
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4618      	mov	r0, r3
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <_ZSt11make_sharedIN4tama6SpriteEJSt10shared_ptrINS0_7TextureEENS0_5Vec2dEEES2_IT_EDpOT0_>:
    make_shared(_Args&&... __args)
 8003744:	b590      	push	{r4, r7, lr}
 8003746:	b087      	sub	sp, #28
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
				       std::forward<_Args>(__args)...);
 8003750:	f107 0314 	add.w	r3, r7, #20
 8003754:	4618      	mov	r0, r3
 8003756:	f000 f90c 	bl	8003972 <_ZNSaIN4tama6SpriteEEC1Ev>
 800375a:	68b8      	ldr	r0, [r7, #8]
 800375c:	f7ff ffdc 	bl	8003718 <_ZSt7forwardISt10shared_ptrIN4tama7TextureEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8003760:	4604      	mov	r4, r0
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f7ff ffe3 	bl	800372e <_ZSt7forwardIN4tama5Vec2dEEOT_RNSt16remove_referenceIS2_E4typeE>
 8003768:	4603      	mov	r3, r0
 800376a:	68f8      	ldr	r0, [r7, #12]
 800376c:	f107 0114 	add.w	r1, r7, #20
 8003770:	4622      	mov	r2, r4
 8003772:	f000 f916 	bl	80039a2 <_ZSt15allocate_sharedIN4tama6SpriteESaIS1_EJSt10shared_ptrINS0_7TextureEENS0_5Vec2dEEES3_IT_ERKT0_DpOT1_>
 8003776:	f107 0314 	add.w	r3, r7, #20
 800377a:	4618      	mov	r0, r3
 800377c:	f000 f905 	bl	800398a <_ZNSaIN4tama6SpriteEED1Ev>
    }
 8003780:	68f8      	ldr	r0, [r7, #12]
 8003782:	371c      	adds	r7, #28
 8003784:	46bd      	mov	sp, r7
 8003786:	bd90      	pop	{r4, r7, pc}

08003788 <_ZSt4moveIRSt10shared_ptrIN4tama6SpriteEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4618      	mov	r0, r3
 8003794:	370c      	adds	r7, #12
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr

0800379e <_ZNSt10shared_ptrIN4tama6SpriteEEaSEOS2_>:
      operator=(shared_ptr&& __r) noexcept
 800379e:	b590      	push	{r4, r7, lr}
 80037a0:	b083      	sub	sp, #12
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
 80037a6:	6039      	str	r1, [r7, #0]
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
 80037a8:	687c      	ldr	r4, [r7, #4]
 80037aa:	6838      	ldr	r0, [r7, #0]
 80037ac:	f7ff ffec 	bl	8003788 <_ZSt4moveIRSt10shared_ptrIN4tama6SpriteEEEONSt16remove_referenceIT_E4typeEOS6_>
 80037b0:	4603      	mov	r3, r0
 80037b2:	4619      	mov	r1, r3
 80037b4:	4620      	mov	r0, r4
 80037b6:	f000 f919 	bl	80039ec <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_>
	return *this;
 80037ba:	687b      	ldr	r3, [r7, #4]
      }
 80037bc:	4618      	mov	r0, r3
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd90      	pop	{r4, r7, pc}

080037c4 <_ZNKSt19__shared_ptr_accessIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
	return _M_get();
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f000 f92c 	bl	8003a2a <_ZNKSt19__shared_ptr_accessIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 80037d2:	4603      	mov	r3, r0
      }
 80037d4:	4618      	mov	r0, r3
 80037d6:	3708      	adds	r7, #8
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <_ZNSt10shared_ptrIN4tama8DrawableEEC1INS0_6SpriteEvEERKS_IT_E>:
	shared_ptr(const shared_ptr<_Yp>& __r) noexcept
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
        : __shared_ptr<_Tp>(__r) { }
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	683a      	ldr	r2, [r7, #0]
 80037ea:	4611      	mov	r1, r2
 80037ec:	4618      	mov	r0, r3
 80037ee:	f000 f928 	bl	8003a42 <_ZNSt12__shared_ptrIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0EEC1INS0_6SpriteEvEERKS_IT_LS3_0EE>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4618      	mov	r0, r3
 80037f6:	3708      	adds	r7, #8
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <_ZNKSt19__shared_ptr_accessIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f000 f932 	bl	8003a6e <_ZNKSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE3getEv>
 800380a:	4603      	mov	r3, r0
 800380c:	4618      	mov	r0, r3
 800380e:	3708      	adds	r7, #8
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <_ZNKSt19__shared_ptr_accessIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f000 f932 	bl	8003a86 <_ZNKSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE3getEv>
 8003822:	4603      	mov	r3, r0
 8003824:	4618      	mov	r0, r3
 8003826:	3708      	adds	r7, #8
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <_ZNSaIN4tama14InitialLoadingEEC1Ev>:
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f000 f932 	bl	8003a9e <_ZN9__gnu_cxx13new_allocatorIN4tama14InitialLoadingEEC1Ev>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4618      	mov	r0, r3
 800383e:	3708      	adds	r7, #8
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <_ZNSaIN4tama14InitialLoadingEED1Ev>:
      ~allocator() throw() { }
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f000 f931 	bl	8003ab4 <_ZN9__gnu_cxx13new_allocatorIN4tama14InitialLoadingEED1Ev>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4618      	mov	r0, r3
 8003856:	3708      	adds	r7, #8
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <_ZSt15allocate_sharedIN4tama14InitialLoadingESaIS1_EJRSt10shared_ptrINS0_7ContextEEEES3_IT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 800385c:	b590      	push	{r4, r7, lr}
 800385e:	b087      	sub	sp, #28
 8003860:	af00      	add	r7, sp, #0
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	607a      	str	r2, [r7, #4]
			     std::forward<_Args>(__args)...);
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f7ff feaf 	bl	80035cc <_ZSt7forwardIRSt10shared_ptrIN4tama7ContextEEEOT_RNSt16remove_referenceIS5_E4typeE>
 800386e:	4603      	mov	r3, r0
 8003870:	68ba      	ldr	r2, [r7, #8]
 8003872:	4621      	mov	r1, r4
 8003874:	68f8      	ldr	r0, [r7, #12]
 8003876:	f000 f928 	bl	8003aca <_ZNSt10shared_ptrIN4tama14InitialLoadingEEC1ISaIS1_EJRS_INS0_7ContextEEEEESt19_Sp_make_shared_tagRKT_DpOT0_>
    }
 800387a:	68f8      	ldr	r0, [r7, #12]
 800387c:	371c      	adds	r7, #28
 800387e:	46bd      	mov	sp, r7
 8003880:	bd90      	pop	{r4, r7, pc}

08003882 <_ZNSt12__shared_ptrIN4tama5StageELN9__gnu_cxx12_Lock_policyE0EEC1INS0_14InitialLoadingEvEEOS_IT_LS3_0EE>:
	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 8003882:	b580      	push	{r7, lr}
 8003884:	b082      	sub	sp, #8
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
 800388a:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount()
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	601a      	str	r2, [r3, #0]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	3304      	adds	r3, #4
 8003898:	4618      	mov	r0, r3
 800389a:	f7fd fae6 	bl	8000e6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _M_refcount._M_swap(__r._M_refcount);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	1d1a      	adds	r2, r3, #4
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	3304      	adds	r3, #4
 80038a6:	4619      	mov	r1, r3
 80038a8:	4610      	mov	r0, r2
 80038aa:	f7fd faec 	bl	8000e86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  __r._M_ptr = 0;
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	2200      	movs	r2, #0
 80038b2:	601a      	str	r2, [r3, #0]
	}
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4618      	mov	r0, r3
 80038b8:	3708      	adds	r7, #8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}

080038be <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_ptr() noexcept
 80038be:	b580      	push	{r7, lr}
 80038c0:	b082      	sub	sp, #8
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
      : _M_ptr(0), _M_refcount()
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	601a      	str	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	3304      	adds	r3, #4
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7fd faca 	bl	8000e6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
      { }
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4618      	mov	r0, r3
 80038da:	3708      	adds	r7, #8
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <_ZNKSt19__shared_ptr_accessIN4tama5InputELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f000 f904 	bl	8003af6 <_ZNKSt12__shared_ptrIN4tama5InputELN9__gnu_cxx12_Lock_policyE0EE3getEv>
 80038ee:	4603      	mov	r3, r0
 80038f0:	4618      	mov	r0, r3
 80038f2:	3708      	adds	r7, #8
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <_ZSt15allocate_sharedIN4tama14InitialLoadingESaIS1_EJRS1_EESt10shared_ptrIT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 80038f8:	b590      	push	{r4, r7, lr}
 80038fa:	b087      	sub	sp, #28
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	607a      	str	r2, [r7, #4]
			     std::forward<_Args>(__args)...);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f7ff fec0 	bl	800368a <_ZSt7forwardIRN4tama14InitialLoadingEEOT_RNSt16remove_referenceIS3_E4typeE>
 800390a:	4603      	mov	r3, r0
 800390c:	68ba      	ldr	r2, [r7, #8]
 800390e:	4621      	mov	r1, r4
 8003910:	68f8      	ldr	r0, [r7, #12]
 8003912:	f000 f8fc 	bl	8003b0e <_ZNSt10shared_ptrIN4tama14InitialLoadingEEC1ISaIS1_EJRS1_EEESt19_Sp_make_shared_tagRKT_DpOT0_>
    }
 8003916:	68f8      	ldr	r0, [r7, #12]
 8003918:	371c      	adds	r7, #28
 800391a:	46bd      	mov	sp, r7
 800391c:	bd90      	pop	{r4, r7, pc}

0800391e <_ZNSt12__shared_ptrIN4tama7OnInputELN9__gnu_cxx12_Lock_policyE0EEC1INS0_14InitialLoadingEvEEOS_IT_LS3_0EE>:
	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 800391e:	b580      	push	{r7, lr}
 8003920:	b082      	sub	sp, #8
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
 8003926:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount()
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	601a      	str	r2, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	3304      	adds	r3, #4
 8003934:	4618      	mov	r0, r3
 8003936:	f7fd fa98 	bl	8000e6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _M_refcount._M_swap(__r._M_refcount);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	1d1a      	adds	r2, r3, #4
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	3304      	adds	r3, #4
 8003942:	4619      	mov	r1, r3
 8003944:	4610      	mov	r0, r2
 8003946:	f7fd fa9e 	bl	8000e86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  __r._M_ptr = 0;
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	2200      	movs	r2, #0
 800394e:	601a      	str	r2, [r3, #0]
	}
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4618      	mov	r0, r3
 8003954:	3708      	adds	r7, #8
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}

0800395a <_ZNKSt19__shared_ptr_accessIN4tama13TextureLoaderELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 800395a:	b580      	push	{r7, lr}
 800395c:	b082      	sub	sp, #8
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 f8e9 	bl	8003b3a <_ZNKSt12__shared_ptrIN4tama13TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE3getEv>
 8003968:	4603      	mov	r3, r0
 800396a:	4618      	mov	r0, r3
 800396c:	3708      	adds	r7, #8
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}

08003972 <_ZNSaIN4tama6SpriteEEC1Ev>:
      allocator() throw() { }
 8003972:	b580      	push	{r7, lr}
 8003974:	b082      	sub	sp, #8
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 f8e9 	bl	8003b52 <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEEC1Ev>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4618      	mov	r0, r3
 8003984:	3708      	adds	r7, #8
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}

0800398a <_ZNSaIN4tama6SpriteEED1Ev>:
      ~allocator() throw() { }
 800398a:	b580      	push	{r7, lr}
 800398c:	b082      	sub	sp, #8
 800398e:	af00      	add	r7, sp, #0
 8003990:	6078      	str	r0, [r7, #4]
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 f8e8 	bl	8003b68 <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEED1Ev>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4618      	mov	r0, r3
 800399c:	3708      	adds	r7, #8
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}

080039a2 <_ZSt15allocate_sharedIN4tama6SpriteESaIS1_EJSt10shared_ptrINS0_7TextureEENS0_5Vec2dEEES3_IT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 80039a2:	b5b0      	push	{r4, r5, r7, lr}
 80039a4:	b088      	sub	sp, #32
 80039a6:	af02      	add	r7, sp, #8
 80039a8:	60f8      	str	r0, [r7, #12]
 80039aa:	60b9      	str	r1, [r7, #8]
 80039ac:	607a      	str	r2, [r7, #4]
 80039ae:	603b      	str	r3, [r7, #0]
			     std::forward<_Args>(__args)...);
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f7ff feb1 	bl	8003718 <_ZSt7forwardISt10shared_ptrIN4tama7TextureEEEOT_RNSt16remove_referenceIS4_E4typeE>
 80039b6:	4604      	mov	r4, r0
 80039b8:	6838      	ldr	r0, [r7, #0]
 80039ba:	f7ff feb8 	bl	800372e <_ZSt7forwardIN4tama5Vec2dEEOT_RNSt16remove_referenceIS2_E4typeE>
 80039be:	4603      	mov	r3, r0
 80039c0:	9300      	str	r3, [sp, #0]
 80039c2:	4623      	mov	r3, r4
 80039c4:	68ba      	ldr	r2, [r7, #8]
 80039c6:	4629      	mov	r1, r5
 80039c8:	68f8      	ldr	r0, [r7, #12]
 80039ca:	f000 f8d8 	bl	8003b7e <_ZNSt10shared_ptrIN4tama6SpriteEEC1ISaIS1_EJS_INS0_7TextureEENS0_5Vec2dEEEESt19_Sp_make_shared_tagRKT_DpOT0_>
    }
 80039ce:	68f8      	ldr	r0, [r7, #12]
 80039d0:	3718      	adds	r7, #24
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bdb0      	pop	{r4, r5, r7, pc}

080039d6 <_ZSt4moveIRSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 80039d6:	b480      	push	{r7}
 80039d8:	b083      	sub	sp, #12
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4618      	mov	r0, r3
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_>:
      operator=(__shared_ptr&& __r) noexcept
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
	__shared_ptr(std::move(__r)).swap(*this);
 80039f6:	6838      	ldr	r0, [r7, #0]
 80039f8:	f7ff ffed 	bl	80039d6 <_ZSt4moveIRSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS8_>
 80039fc:	4602      	mov	r2, r0
 80039fe:	f107 0308 	add.w	r3, r7, #8
 8003a02:	4611      	mov	r1, r2
 8003a04:	4618      	mov	r0, r3
 8003a06:	f000 f8d6 	bl	8003bb6 <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EEC1EOS4_>
 8003a0a:	f107 0308 	add.w	r3, r7, #8
 8003a0e:	6879      	ldr	r1, [r7, #4]
 8003a10:	4618      	mov	r0, r3
 8003a12:	f000 f8ee 	bl	8003bf2 <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE4swapERS4_>
 8003a16:	f107 0308 	add.w	r3, r7, #8
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7ff fca8 	bl	8003370 <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EED1Ev>
	return *this;
 8003a20:	687b      	ldr	r3, [r7, #4]
      }
 8003a22:	4618      	mov	r0, r3
 8003a24:	3710      	adds	r7, #16
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}

08003a2a <_ZNKSt19__shared_ptr_accessIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b082      	sub	sp, #8
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f000 f8f4 	bl	8003c20 <_ZNKSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE3getEv>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3708      	adds	r7, #8
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}

08003a42 <_ZNSt12__shared_ptrIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0EEC1INS0_6SpriteEvEERKS_IT_LS3_0EE>:
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
 8003a42:	b580      	push	{r7, lr}
 8003a44:	b082      	sub	sp, #8
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
 8003a4a:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	601a      	str	r2, [r3, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	1d1a      	adds	r2, r3, #4
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	3304      	adds	r3, #4
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	4610      	mov	r0, r2
 8003a60:	f7fc ffd0 	bl	8000a04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	{ }
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4618      	mov	r0, r3
 8003a68:	3708      	adds	r7, #8
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <_ZNKSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 8003a6e:	b480      	push	{r7}
 8003a70:	b083      	sub	sp, #12
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	370c      	adds	r7, #12
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr

08003a86 <_ZNKSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 8003a86:	b480      	push	{r7}
 8003a88:	b083      	sub	sp, #12
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4618      	mov	r0, r3
 8003a94:	370c      	adds	r7, #12
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr

08003a9e <_ZN9__gnu_cxx13new_allocatorIN4tama14InitialLoadingEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003a9e:	b480      	push	{r7}
 8003aa0:	b083      	sub	sp, #12
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <_ZN9__gnu_cxx13new_allocatorIN4tama14InitialLoadingEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	370c      	adds	r7, #12
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr

08003aca <_ZNSt10shared_ptrIN4tama14InitialLoadingEEC1ISaIS1_EJRS_INS0_7ContextEEEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8003aca:	b5b0      	push	{r4, r5, r7, lr}
 8003acc:	b084      	sub	sp, #16
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	60f8      	str	r0, [r7, #12]
 8003ad2:	7239      	strb	r1, [r7, #8]
 8003ad4:	607a      	str	r2, [r7, #4]
 8003ad6:	603b      	str	r3, [r7, #0]
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
 8003ad8:	68fc      	ldr	r4, [r7, #12]
 8003ada:	6838      	ldr	r0, [r7, #0]
 8003adc:	f7ff fd76 	bl	80035cc <_ZSt7forwardIRSt10shared_ptrIN4tama7ContextEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	4629      	mov	r1, r5
 8003ae6:	4620      	mov	r0, r4
 8003ae8:	f000 f8c3 	bl	8003c72 <_ZNSt12__shared_ptrIN4tama14InitialLoadingELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJRSt10shared_ptrINS0_7ContextEEEEESt19_Sp_make_shared_tagRKT_DpOT0_>
	{ }
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	4618      	mov	r0, r3
 8003af0:	3710      	adds	r7, #16
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bdb0      	pop	{r4, r5, r7, pc}

08003af6 <_ZNKSt12__shared_ptrIN4tama5InputELN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 8003af6:	b480      	push	{r7}
 8003af8:	b083      	sub	sp, #12
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4618      	mov	r0, r3
 8003b04:	370c      	adds	r7, #12
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr

08003b0e <_ZNSt10shared_ptrIN4tama14InitialLoadingEEC1ISaIS1_EJRS1_EEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8003b0e:	b5b0      	push	{r4, r5, r7, lr}
 8003b10:	b084      	sub	sp, #16
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	60f8      	str	r0, [r7, #12]
 8003b16:	7239      	strb	r1, [r7, #8]
 8003b18:	607a      	str	r2, [r7, #4]
 8003b1a:	603b      	str	r3, [r7, #0]
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
 8003b1c:	68fc      	ldr	r4, [r7, #12]
 8003b1e:	6838      	ldr	r0, [r7, #0]
 8003b20:	f7ff fdb3 	bl	800368a <_ZSt7forwardIRN4tama14InitialLoadingEEOT_RNSt16remove_referenceIS3_E4typeE>
 8003b24:	4603      	mov	r3, r0
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	4629      	mov	r1, r5
 8003b2a:	4620      	mov	r0, r4
 8003b2c:	f000 f91c 	bl	8003d68 <_ZNSt12__shared_ptrIN4tama14InitialLoadingELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJRS1_EEESt19_Sp_make_shared_tagRKT_DpOT0_>
	{ }
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	4618      	mov	r0, r3
 8003b34:	3710      	adds	r7, #16
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bdb0      	pop	{r4, r5, r7, pc}

08003b3a <_ZNKSt12__shared_ptrIN4tama13TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 8003b3a:	b480      	push	{r7}
 8003b3c:	b083      	sub	sp, #12
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4618      	mov	r0, r3
 8003b48:	370c      	adds	r7, #12
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr

08003b52 <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003b52:	b480      	push	{r7}
 8003b54:	b083      	sub	sp, #12
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4618      	mov	r0, r3
 8003b74:	370c      	adds	r7, #12
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr

08003b7e <_ZNSt10shared_ptrIN4tama6SpriteEEC1ISaIS1_EJS_INS0_7TextureEENS0_5Vec2dEEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8003b7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b80:	b087      	sub	sp, #28
 8003b82:	af02      	add	r7, sp, #8
 8003b84:	60f8      	str	r0, [r7, #12]
 8003b86:	7239      	strb	r1, [r7, #8]
 8003b88:	607a      	str	r2, [r7, #4]
 8003b8a:	603b      	str	r3, [r7, #0]
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
 8003b8c:	68fc      	ldr	r4, [r7, #12]
 8003b8e:	6838      	ldr	r0, [r7, #0]
 8003b90:	f7ff fdc2 	bl	8003718 <_ZSt7forwardISt10shared_ptrIN4tama7TextureEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8003b94:	4605      	mov	r5, r0
 8003b96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b98:	f7ff fdc9 	bl	800372e <_ZSt7forwardIN4tama5Vec2dEEOT_RNSt16remove_referenceIS2_E4typeE>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	9300      	str	r3, [sp, #0]
 8003ba0:	462b      	mov	r3, r5
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	4631      	mov	r1, r6
 8003ba6:	4620      	mov	r0, r4
 8003ba8:	f000 f976 	bl	8003e98 <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJSt10shared_ptrINS0_7TextureEENS0_5Vec2dEEEESt19_Sp_make_shared_tagRKT_DpOT0_>
	{ }
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3714      	adds	r7, #20
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003bb6 <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EEC1EOS4_>:
      __shared_ptr(__shared_ptr&& __r) noexcept
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b082      	sub	sp, #8
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
 8003bbe:	6039      	str	r1, [r7, #0]
      : _M_ptr(__r._M_ptr), _M_refcount()
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	601a      	str	r2, [r3, #0]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	3304      	adds	r3, #4
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f7fd f94c 	bl	8000e6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	_M_refcount._M_swap(__r._M_refcount);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	1d1a      	adds	r2, r3, #4
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	3304      	adds	r3, #4
 8003bda:	4619      	mov	r1, r3
 8003bdc:	4610      	mov	r0, r2
 8003bde:	f7fd f952 	bl	8000e86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	__r._M_ptr = 0;
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	2200      	movs	r2, #0
 8003be6:	601a      	str	r2, [r3, #0]
      }
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4618      	mov	r0, r3
 8003bec:	3708      	adds	r7, #8
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}

08003bf2 <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE4swapERS4_>:
      swap(__shared_ptr<_Tp, _Lp>& __other) noexcept
 8003bf2:	b580      	push	{r7, lr}
 8003bf4:	b082      	sub	sp, #8
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
 8003bfa:	6039      	str	r1, [r7, #0]
	std::swap(_M_ptr, __other._M_ptr);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	683a      	ldr	r2, [r7, #0]
 8003c00:	4611      	mov	r1, r2
 8003c02:	4618      	mov	r0, r3
 8003c04:	f000 f9d2 	bl	8003fac <_ZSt4swapIPN4tama6SpriteEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS7_ESt18is_move_assignableIS7_EEE5valueEvE4typeERS7_SH_>
	_M_refcount._M_swap(__other._M_refcount);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	1d1a      	adds	r2, r3, #4
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	3304      	adds	r3, #4
 8003c10:	4619      	mov	r1, r3
 8003c12:	4610      	mov	r0, r2
 8003c14:	f7fd f937 	bl	8000e86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
      }
 8003c18:	bf00      	nop
 8003c1a:	3708      	adds	r7, #8
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <_ZNKSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <_ZNSt12__shared_ptrIN4tama14InitialLoadingELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>:
        struct _Deleter
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4618      	mov	r0, r3
 8003c44:	f7ff fdfe 	bl	8003844 <_ZNSaIN4tama14InitialLoadingEED1Ev>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3708      	adds	r7, #8
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}

08003c52 <_ZNSt12__shared_ptrIN4tama14InitialLoadingELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>:
 8003c52:	b580      	push	{r7, lr}
 8003c54:	b082      	sub	sp, #8
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
 8003c5a:	6039      	str	r1, [r7, #0]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	683a      	ldr	r2, [r7, #0]
 8003c60:	4611      	mov	r1, r2
 8003c62:	4618      	mov	r0, r3
 8003c64:	f000 f9c1 	bl	8003fea <_ZNSaIN4tama14InitialLoadingEEC1ERKS1_>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3708      	adds	r7, #8
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <_ZNSt12__shared_ptrIN4tama14InitialLoadingELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJRSt10shared_ptrINS0_7ContextEEEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b08c      	sub	sp, #48	; 0x30
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	60f8      	str	r0, [r7, #12]
 8003c7a:	7239      	strb	r1, [r7, #8]
 8003c7c:	607a      	str	r2, [r7, #4]
 8003c7e:	603b      	str	r3, [r7, #0]
	: _M_ptr(), _M_refcount()
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	601a      	str	r2, [r3, #0]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	3304      	adds	r3, #4
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f7fd f8ed 	bl	8000e6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 8003c90:	f107 0320 	add.w	r3, r7, #32
 8003c94:	6879      	ldr	r1, [r7, #4]
 8003c96:	4618      	mov	r0, r3
 8003c98:	f000 f9a7 	bl	8003fea <_ZNSaIN4tama14InitialLoadingEEC1ERKS1_>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 8003c9c:	f107 0318 	add.w	r3, r7, #24
 8003ca0:	f107 0220 	add.w	r2, r7, #32
 8003ca4:	4611      	mov	r1, r2
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f000 f9ad 	bl	8004006 <_ZSt18__allocate_guardedISaIN4tama14InitialLoadingEEESt15__allocated_ptrIT_ERS4_>
	  auto __ptr = __guard.get();
 8003cac:	f107 0318 	add.w	r3, r7, #24
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f000 f9d0 	bl	8004056 <_ZNSt15__allocated_ptrISaIN4tama14InitialLoadingEEE3getEv>
 8003cb6:	62f8      	str	r0, [r7, #44]	; 0x2c
	  __traits::construct(__del._M_alloc, __ptr,
 8003cb8:	6838      	ldr	r0, [r7, #0]
 8003cba:	f7ff fc87 	bl	80035cc <_ZSt7forwardIRSt10shared_ptrIN4tama7ContextEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	f107 0320 	add.w	r3, r7, #32
 8003cc4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f000 f9d3 	bl	8004072 <_ZNSt16allocator_traitsISaIN4tama14InitialLoadingEEE9constructIS1_JRSt10shared_ptrINS0_7ContextEEEEEvRS2_PT_DpOT0_>
	  __guard = nullptr;
 8003ccc:	f107 0318 	add.w	r3, r7, #24
 8003cd0:	2100      	movs	r1, #0
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f000 f9e0 	bl	8004098 <_ZNSt15__allocated_ptrISaIN4tama14InitialLoadingEEEaSEDn>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 8003cd8:	f107 0220 	add.w	r2, r7, #32
 8003cdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ce0:	4611      	mov	r1, r2
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7ff ffb5 	bl	8003c52 <_ZNSt12__shared_ptrIN4tama14InitialLoadingELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>
 8003ce8:	f107 0220 	add.w	r2, r7, #32
 8003cec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003cf0:	4611      	mov	r1, r2
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f000 f979 	bl	8003fea <_ZNSaIN4tama14InitialLoadingEEC1ERKS1_>
 8003cf8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003cfc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003d00:	f107 0014 	add.w	r0, r7, #20
 8003d04:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d06:	f000 f9fc 	bl	8004102 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama14InitialLoadingENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
 8003d0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f7ff fd98 	bl	8003844 <_ZNSaIN4tama14InitialLoadingEED1Ev>
 8003d14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f7ff ff8d 	bl	8003c38 <_ZNSt12__shared_ptrIN4tama14InitialLoadingELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	  _M_refcount._M_swap(__count);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	3304      	adds	r3, #4
 8003d22:	f107 0214 	add.w	r2, r7, #20
 8003d26:	4611      	mov	r1, r2
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f7fd f8ac 	bl	8000e86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  _M_ptr = __ptr;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d32:	601a      	str	r2, [r3, #0]
	  _M_enable_shared_from_this_with(_M_ptr);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4619      	mov	r1, r3
 8003d3a:	68f8      	ldr	r0, [r7, #12]
 8003d3c:	f000 fa38 	bl	80041b0 <_ZNSt12__shared_ptrIN4tama14InitialLoadingELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 8003d40:	f107 0314 	add.w	r3, r7, #20
 8003d44:	4618      	mov	r0, r3
 8003d46:	f7fc fe74 	bl	8000a32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 8003d4a:	f107 0318 	add.w	r3, r7, #24
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f000 f96c 	bl	800402c <_ZNSt15__allocated_ptrISaIN4tama14InitialLoadingEEED1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 8003d54:	f107 0320 	add.w	r3, r7, #32
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f7ff ff6d 	bl	8003c38 <_ZNSt12__shared_ptrIN4tama14InitialLoadingELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	}
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	4618      	mov	r0, r3
 8003d62:	3730      	adds	r7, #48	; 0x30
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <_ZNSt12__shared_ptrIN4tama14InitialLoadingELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJRS1_EEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b08c      	sub	sp, #48	; 0x30
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	7239      	strb	r1, [r7, #8]
 8003d72:	607a      	str	r2, [r7, #4]
 8003d74:	603b      	str	r3, [r7, #0]
	: _M_ptr(), _M_refcount()
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	601a      	str	r2, [r3, #0]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	3304      	adds	r3, #4
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7fd f872 	bl	8000e6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 8003d86:	f107 0320 	add.w	r3, r7, #32
 8003d8a:	6879      	ldr	r1, [r7, #4]
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f000 f92c 	bl	8003fea <_ZNSaIN4tama14InitialLoadingEEC1ERKS1_>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 8003d92:	f107 0318 	add.w	r3, r7, #24
 8003d96:	f107 0220 	add.w	r2, r7, #32
 8003d9a:	4611      	mov	r1, r2
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f000 f932 	bl	8004006 <_ZSt18__allocate_guardedISaIN4tama14InitialLoadingEEESt15__allocated_ptrIT_ERS4_>
	  auto __ptr = __guard.get();
 8003da2:	f107 0318 	add.w	r3, r7, #24
 8003da6:	4618      	mov	r0, r3
 8003da8:	f000 f955 	bl	8004056 <_ZNSt15__allocated_ptrISaIN4tama14InitialLoadingEEE3getEv>
 8003dac:	62f8      	str	r0, [r7, #44]	; 0x2c
	  __traits::construct(__del._M_alloc, __ptr,
 8003dae:	6838      	ldr	r0, [r7, #0]
 8003db0:	f7ff fc6b 	bl	800368a <_ZSt7forwardIRN4tama14InitialLoadingEEOT_RNSt16remove_referenceIS3_E4typeE>
 8003db4:	4602      	mov	r2, r0
 8003db6:	f107 0320 	add.w	r3, r7, #32
 8003dba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f000 fa02 	bl	80041c6 <_ZNSt16allocator_traitsISaIN4tama14InitialLoadingEEE9constructIS1_JRS1_EEEvRS2_PT_DpOT0_>
	  __guard = nullptr;
 8003dc2:	f107 0318 	add.w	r3, r7, #24
 8003dc6:	2100      	movs	r1, #0
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f000 f965 	bl	8004098 <_ZNSt15__allocated_ptrISaIN4tama14InitialLoadingEEEaSEDn>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 8003dce:	f107 0220 	add.w	r2, r7, #32
 8003dd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003dd6:	4611      	mov	r1, r2
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f7ff ff3a 	bl	8003c52 <_ZNSt12__shared_ptrIN4tama14InitialLoadingELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>
 8003dde:	f107 0220 	add.w	r2, r7, #32
 8003de2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003de6:	4611      	mov	r1, r2
 8003de8:	4618      	mov	r0, r3
 8003dea:	f000 f8fe 	bl	8003fea <_ZNSaIN4tama14InitialLoadingEEC1ERKS1_>
 8003dee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003df2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003df6:	f107 0014 	add.w	r0, r7, #20
 8003dfa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003dfc:	f000 f981 	bl	8004102 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama14InitialLoadingENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
 8003e00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7ff fd1d 	bl	8003844 <_ZNSaIN4tama14InitialLoadingEED1Ev>
 8003e0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7ff ff12 	bl	8003c38 <_ZNSt12__shared_ptrIN4tama14InitialLoadingELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	  _M_refcount._M_swap(__count);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	3304      	adds	r3, #4
 8003e18:	f107 0214 	add.w	r2, r7, #20
 8003e1c:	4611      	mov	r1, r2
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f7fd f831 	bl	8000e86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  _M_ptr = __ptr;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e28:	601a      	str	r2, [r3, #0]
	  _M_enable_shared_from_this_with(_M_ptr);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4619      	mov	r1, r3
 8003e30:	68f8      	ldr	r0, [r7, #12]
 8003e32:	f000 f9bd 	bl	80041b0 <_ZNSt12__shared_ptrIN4tama14InitialLoadingELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 8003e36:	f107 0314 	add.w	r3, r7, #20
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7fc fdf9 	bl	8000a32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 8003e40:	f107 0318 	add.w	r3, r7, #24
 8003e44:	4618      	mov	r0, r3
 8003e46:	f000 f8f1 	bl	800402c <_ZNSt15__allocated_ptrISaIN4tama14InitialLoadingEEED1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 8003e4a:	f107 0320 	add.w	r3, r7, #32
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f7ff fef2 	bl	8003c38 <_ZNSt12__shared_ptrIN4tama14InitialLoadingELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	}
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	4618      	mov	r0, r3
 8003e58:	3730      	adds	r7, #48	; 0x30
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}

08003e5e <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>:
        struct _Deleter
 8003e5e:	b580      	push	{r7, lr}
 8003e60:	b082      	sub	sp, #8
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7ff fd8e 	bl	800398a <_ZNSaIN4tama6SpriteEED1Ev>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4618      	mov	r0, r3
 8003e72:	3708      	adds	r7, #8
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>:
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	683a      	ldr	r2, [r7, #0]
 8003e86:	4611      	mov	r1, r2
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f000 f9af 	bl	80041ec <_ZNSaIN4tama6SpriteEEC1ERKS1_>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4618      	mov	r0, r3
 8003e92:	3708      	adds	r7, #8
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJSt10shared_ptrINS0_7TextureEENS0_5Vec2dEEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8003e98:	b590      	push	{r4, r7, lr}
 8003e9a:	b08d      	sub	sp, #52	; 0x34
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	7239      	strb	r1, [r7, #8]
 8003ea2:	607a      	str	r2, [r7, #4]
 8003ea4:	603b      	str	r3, [r7, #0]
	: _M_ptr(), _M_refcount()
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	601a      	str	r2, [r3, #0]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	3304      	adds	r3, #4
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f7fc ffda 	bl	8000e6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 8003eb6:	f107 0320 	add.w	r3, r7, #32
 8003eba:	6879      	ldr	r1, [r7, #4]
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f000 f995 	bl	80041ec <_ZNSaIN4tama6SpriteEEC1ERKS1_>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 8003ec2:	f107 0318 	add.w	r3, r7, #24
 8003ec6:	f107 0220 	add.w	r2, r7, #32
 8003eca:	4611      	mov	r1, r2
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f000 f99b 	bl	8004208 <_ZSt18__allocate_guardedISaIN4tama6SpriteEEESt15__allocated_ptrIT_ERS4_>
	  auto __ptr = __guard.get();
 8003ed2:	f107 0318 	add.w	r3, r7, #24
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f000 f9be 	bl	8004258 <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEE3getEv>
 8003edc:	62f8      	str	r0, [r7, #44]	; 0x2c
	  __traits::construct(__del._M_alloc, __ptr,
 8003ede:	6838      	ldr	r0, [r7, #0]
 8003ee0:	f7ff fc1a 	bl	8003718 <_ZSt7forwardISt10shared_ptrIN4tama7TextureEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8003ee4:	4604      	mov	r4, r0
 8003ee6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003ee8:	f7ff fc21 	bl	800372e <_ZSt7forwardIN4tama5Vec2dEEOT_RNSt16remove_referenceIS2_E4typeE>
 8003eec:	4603      	mov	r3, r0
 8003eee:	f107 0020 	add.w	r0, r7, #32
 8003ef2:	4622      	mov	r2, r4
 8003ef4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ef6:	f000 f9bd 	bl	8004274 <_ZNSt16allocator_traitsISaIN4tama6SpriteEEE9constructIS1_JSt10shared_ptrINS0_7TextureEENS0_5Vec2dEEEEvRS2_PT_DpOT0_>
	  __guard = nullptr;
 8003efa:	f107 0318 	add.w	r3, r7, #24
 8003efe:	2100      	movs	r1, #0
 8003f00:	4618      	mov	r0, r3
 8003f02:	f000 f9cf 	bl	80042a4 <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEEaSEDn>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 8003f06:	f107 0220 	add.w	r2, r7, #32
 8003f0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f0e:	4611      	mov	r1, r2
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7ff ffb1 	bl	8003e78 <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>
 8003f16:	f107 0220 	add.w	r2, r7, #32
 8003f1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f1e:	4611      	mov	r1, r2
 8003f20:	4618      	mov	r0, r3
 8003f22:	f000 f963 	bl	80041ec <_ZNSaIN4tama6SpriteEEC1ERKS1_>
 8003f26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f2a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003f2e:	f107 0014 	add.w	r0, r7, #20
 8003f32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f34:	f000 f9eb 	bl	800430e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama6SpriteENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
 8003f38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f7ff fd24 	bl	800398a <_ZNSaIN4tama6SpriteEED1Ev>
 8003f42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f46:	4618      	mov	r0, r3
 8003f48:	f7ff ff89 	bl	8003e5e <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	  _M_refcount._M_swap(__count);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	3304      	adds	r3, #4
 8003f50:	f107 0214 	add.w	r2, r7, #20
 8003f54:	4611      	mov	r1, r2
 8003f56:	4618      	mov	r0, r3
 8003f58:	f7fc ff95 	bl	8000e86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  _M_ptr = __ptr;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f60:	601a      	str	r2, [r3, #0]
	  _M_enable_shared_from_this_with(_M_ptr);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4619      	mov	r1, r3
 8003f68:	68f8      	ldr	r0, [r7, #12]
 8003f6a:	f000 fa27 	bl	80043bc <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 8003f6e:	f107 0314 	add.w	r3, r7, #20
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7fc fd5d 	bl	8000a32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 8003f78:	f107 0318 	add.w	r3, r7, #24
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f000 f956 	bl	800422e <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEED1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 8003f82:	f107 0320 	add.w	r3, r7, #32
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7ff ff69 	bl	8003e5e <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	}
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3734      	adds	r7, #52	; 0x34
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd90      	pop	{r4, r7, pc}

08003f96 <_ZSt4moveIRPN4tama6SpriteEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8003f96:	b480      	push	{r7}
 8003f98:	b083      	sub	sp, #12
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <_ZSt4swapIPN4tama6SpriteEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS7_ESt18is_move_assignableIS7_EEE5valueEvE4typeERS7_SH_>:
    swap(_Tp& __a, _Tp& __b)
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f7ff ffed 	bl	8003f96 <_ZSt4moveIRPN4tama6SpriteEEONSt16remove_referenceIT_E4typeEOS5_>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8003fc2:	6838      	ldr	r0, [r7, #0]
 8003fc4:	f7ff ffe7 	bl	8003f96 <_ZSt4moveIRPN4tama6SpriteEEONSt16remove_referenceIT_E4typeEOS5_>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8003fd0:	f107 030c 	add.w	r3, r7, #12
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f7ff ffde 	bl	8003f96 <_ZSt4moveIRPN4tama6SpriteEEONSt16remove_referenceIT_E4typeEOS5_>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	601a      	str	r2, [r3, #0]
    }
 8003fe2:	bf00      	nop
 8003fe4:	3710      	adds	r7, #16
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}

08003fea <_ZNSaIN4tama14InitialLoadingEEC1ERKS1_>:
      allocator(const allocator& __a) throw()
 8003fea:	b580      	push	{r7, lr}
 8003fec:	b082      	sub	sp, #8
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
 8003ff2:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8003ff4:	6839      	ldr	r1, [r7, #0]
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 f9eb 	bl	80043d2 <_ZN9__gnu_cxx13new_allocatorIN4tama14InitialLoadingEEC1ERKS3_>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4618      	mov	r0, r3
 8004000:	3708      	adds	r7, #8
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}

08004006 <_ZSt18__allocate_guardedISaIN4tama14InitialLoadingEEESt15__allocated_ptrIT_ERS4_>:
    __allocate_guarded(_Alloc& __a)
 8004006:	b580      	push	{r7, lr}
 8004008:	b082      	sub	sp, #8
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
 800400e:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 8004010:	2101      	movs	r1, #1
 8004012:	6838      	ldr	r0, [r7, #0]
 8004014:	f000 f9e9 	bl	80043ea <_ZNSt16allocator_traitsISaIN4tama14InitialLoadingEEE8allocateERS2_j>
 8004018:	4603      	mov	r3, r0
 800401a:	461a      	mov	r2, r3
 800401c:	6839      	ldr	r1, [r7, #0]
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 f9f2 	bl	8004408 <_ZNSt15__allocated_ptrISaIN4tama14InitialLoadingEEEC1ERS2_PS1_>
    }
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	3708      	adds	r7, #8
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <_ZNSt15__allocated_ptrISaIN4tama14InitialLoadingEEED1Ev>:
      ~__allocated_ptr()
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d007      	beq.n	800404c <_ZNSt15__allocated_ptrISaIN4tama14InitialLoadingEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6818      	ldr	r0, [r3, #0]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	2201      	movs	r2, #1
 8004046:	4619      	mov	r1, r3
 8004048:	f000 f9f2 	bl	8004430 <_ZNSt16allocator_traitsISaIN4tama14InitialLoadingEEE10deallocateERS2_PS1_j>
      }
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	4618      	mov	r0, r3
 8004050:	3708      	adds	r7, #8
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}

08004056 <_ZNSt15__allocated_ptrISaIN4tama14InitialLoadingEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 8004056:	b580      	push	{r7, lr}
 8004058:	b082      	sub	sp, #8
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	4618      	mov	r0, r3
 8004064:	f000 f9f3 	bl	800444e <_ZNSt15__allocated_ptrISaIN4tama14InitialLoadingEEE10_S_raw_ptrEPS1_>
 8004068:	4603      	mov	r3, r0
 800406a:	4618      	mov	r0, r3
 800406c:	3708      	adds	r7, #8
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}

08004072 <_ZNSt16allocator_traitsISaIN4tama14InitialLoadingEEE9constructIS1_JRSt10shared_ptrINS0_7ContextEEEEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8004072:	b580      	push	{r7, lr}
 8004074:	b084      	sub	sp, #16
 8004076:	af00      	add	r7, sp, #0
 8004078:	60f8      	str	r0, [r7, #12]
 800407a:	60b9      	str	r1, [r7, #8]
 800407c:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f7ff faa4 	bl	80035cc <_ZSt7forwardIRSt10shared_ptrIN4tama7ContextEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8004084:	4603      	mov	r3, r0
 8004086:	461a      	mov	r2, r3
 8004088:	68b9      	ldr	r1, [r7, #8]
 800408a:	68f8      	ldr	r0, [r7, #12]
 800408c:	f000 f9ea 	bl	8004464 <_ZN9__gnu_cxx13new_allocatorIN4tama14InitialLoadingEE9constructIS2_JRSt10shared_ptrINS1_7ContextEEEEEvPT_DpOT0_>
 8004090:	bf00      	nop
 8004092:	3710      	adds	r7, #16
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <_ZNSt15__allocated_ptrISaIN4tama14InitialLoadingEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	605a      	str	r2, [r3, #4]
	return *this;
 80040a8:	687b      	ldr	r3, [r7, #4]
      }
 80040aa:	4618      	mov	r0, r3
 80040ac:	370c      	adds	r7, #12
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr

080040b6 <_ZSt4moveIRNSt12__shared_ptrIN4tama14InitialLoadingELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 80040b6:	b480      	push	{r7}
 80040b8:	b083      	sub	sp, #12
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4618      	mov	r0, r3
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <_ZNSt12__shared_ptrIN4tama14InitialLoadingELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>:
        struct _Deleter
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	683a      	ldr	r2, [r7, #0]
 80040da:	4611      	mov	r1, r2
 80040dc:	4618      	mov	r0, r3
 80040de:	f7ff ff84 	bl	8003fea <_ZNSaIN4tama14InitialLoadingEEC1ERKS1_>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4618      	mov	r0, r3
 80040e6:	3708      	adds	r7, #8
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <_ZSt4moveIRSaIN4tama14InitialLoadingEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4618      	mov	r0, r3
 80040f8:	370c      	adds	r7, #12
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr

08004102 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama14InitialLoadingENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
 8004102:	b5b0      	push	{r4, r5, r7, lr}
 8004104:	b08a      	sub	sp, #40	; 0x28
 8004106:	af00      	add	r7, sp, #0
 8004108:	60f8      	str	r0, [r7, #12]
 800410a:	60b9      	str	r1, [r7, #8]
 800410c:	607a      	str	r2, [r7, #4]
 800410e:	603b      	str	r3, [r7, #0]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2200      	movs	r2, #0
 8004114:	601a      	str	r2, [r3, #0]
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 8004116:	f107 031c 	add.w	r3, r7, #28
 800411a:	6839      	ldr	r1, [r7, #0]
 800411c:	4618      	mov	r0, r3
 800411e:	f000 f9bb 	bl	8004498 <_ZNSaISt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	      auto __guard = std::__allocate_guarded(__a2);
 8004122:	f107 0314 	add.w	r3, r7, #20
 8004126:	f107 021c 	add.w	r2, r7, #28
 800412a:	4611      	mov	r1, r2
 800412c:	4618      	mov	r0, r3
 800412e:	f000 f9cc 	bl	80044ca <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>
	      _Sp_cd_type* __mem = __guard.get();
 8004132:	f107 0314 	add.w	r3, r7, #20
 8004136:	4618      	mov	r0, r3
 8004138:	f000 f9ef 	bl	800451a <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>
 800413c:	6278      	str	r0, [r7, #36]	; 0x24
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f7ff ffb9 	bl	80040b6 <_ZSt4moveIRNSt12__shared_ptrIN4tama14InitialLoadingELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8004144:	4602      	mov	r2, r0
 8004146:	f107 0320 	add.w	r3, r7, #32
 800414a:	4611      	mov	r1, r2
 800414c:	4618      	mov	r0, r3
 800414e:	f7ff ffbd 	bl	80040cc <_ZNSt12__shared_ptrIN4tama14InitialLoadingELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 8004152:	f107 0420 	add.w	r4, r7, #32
 8004156:	6838      	ldr	r0, [r7, #0]
 8004158:	f7ff ffc8 	bl	80040ec <_ZSt4moveIRSaIN4tama14InitialLoadingEEEONSt16remove_referenceIT_E4typeEOS5_>
 800415c:	4605      	mov	r5, r0
 800415e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004160:	4619      	mov	r1, r3
 8004162:	2014      	movs	r0, #20
 8004164:	f7fc f9e3 	bl	800052e <_ZnwjPv>
 8004168:	2800      	cmp	r0, #0
 800416a:	d004      	beq.n	8004176 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama14InitialLoadingENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x74>
 800416c:	462b      	mov	r3, r5
 800416e:	4622      	mov	r2, r4
 8004170:	68b9      	ldr	r1, [r7, #8]
 8004172:	f000 fa0b 	bl	800458c <_ZNSt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>
 8004176:	f107 0320 	add.w	r3, r7, #32
 800417a:	4618      	mov	r0, r3
 800417c:	f7ff fd5c 	bl	8003c38 <_ZNSt12__shared_ptrIN4tama14InitialLoadingELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	      _M_pi = __mem;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004184:	601a      	str	r2, [r3, #0]
	      __guard = nullptr;
 8004186:	f107 0314 	add.w	r3, r7, #20
 800418a:	2100      	movs	r1, #0
 800418c:	4618      	mov	r0, r3
 800418e:	f000 fa2b 	bl	80045e8 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>
	      auto __guard = std::__allocate_guarded(__a2);
 8004192:	f107 0314 	add.w	r3, r7, #20
 8004196:	4618      	mov	r0, r3
 8004198:	f000 f9aa 	bl	80044f0 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 800419c:	f107 031c 	add.w	r3, r7, #28
 80041a0:	4618      	mov	r0, r3
 80041a2:	f000 f986 	bl	80044b2 <_ZNSaISt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
	}
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	4618      	mov	r0, r3
 80041aa:	3728      	adds	r7, #40	; 0x28
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bdb0      	pop	{r4, r5, r7, pc}

080041b0 <_ZNSt12__shared_ptrIN4tama14InitialLoadingELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
	{ }
 80041ba:	bf00      	nop
 80041bc:	370c      	adds	r7, #12
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr

080041c6 <_ZNSt16allocator_traitsISaIN4tama14InitialLoadingEEE9constructIS1_JRS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 80041c6:	b580      	push	{r7, lr}
 80041c8:	b084      	sub	sp, #16
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	60f8      	str	r0, [r7, #12]
 80041ce:	60b9      	str	r1, [r7, #8]
 80041d0:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f7ff fa59 	bl	800368a <_ZSt7forwardIRN4tama14InitialLoadingEEOT_RNSt16remove_referenceIS3_E4typeE>
 80041d8:	4603      	mov	r3, r0
 80041da:	461a      	mov	r2, r3
 80041dc:	68b9      	ldr	r1, [r7, #8]
 80041de:	68f8      	ldr	r0, [r7, #12]
 80041e0:	f000 fab2 	bl	8004748 <_ZN9__gnu_cxx13new_allocatorIN4tama14InitialLoadingEE9constructIS2_JRS2_EEEvPT_DpOT0_>
 80041e4:	bf00      	nop
 80041e6:	3710      	adds	r7, #16
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}

080041ec <_ZNSaIN4tama6SpriteEEC1ERKS1_>:
      allocator(const allocator& __a) throw()
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b082      	sub	sp, #8
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80041f6:	6839      	ldr	r1, [r7, #0]
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f000 fabf 	bl	800477c <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEEC1ERKS3_>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4618      	mov	r0, r3
 8004202:	3708      	adds	r7, #8
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <_ZSt18__allocate_guardedISaIN4tama6SpriteEEESt15__allocated_ptrIT_ERS4_>:
    __allocate_guarded(_Alloc& __a)
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 8004212:	2101      	movs	r1, #1
 8004214:	6838      	ldr	r0, [r7, #0]
 8004216:	f000 fabd 	bl	8004794 <_ZNSt16allocator_traitsISaIN4tama6SpriteEEE8allocateERS2_j>
 800421a:	4603      	mov	r3, r0
 800421c:	461a      	mov	r2, r3
 800421e:	6839      	ldr	r1, [r7, #0]
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f000 fac6 	bl	80047b2 <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEEC1ERS2_PS1_>
    }
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	3708      	adds	r7, #8
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}

0800422e <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEED1Ev>:
      ~__allocated_ptr()
 800422e:	b580      	push	{r7, lr}
 8004230:	b082      	sub	sp, #8
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d007      	beq.n	800424e <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6818      	ldr	r0, [r3, #0]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	4619      	mov	r1, r3
 800424a:	f000 fac6 	bl	80047da <_ZNSt16allocator_traitsISaIN4tama6SpriteEEE10deallocateERS2_PS1_j>
      }
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4618      	mov	r0, r3
 8004252:	3708      	adds	r7, #8
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	4618      	mov	r0, r3
 8004266:	f000 fac7 	bl	80047f8 <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEE10_S_raw_ptrEPS1_>
 800426a:	4603      	mov	r3, r0
 800426c:	4618      	mov	r0, r3
 800426e:	3708      	adds	r7, #8
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <_ZNSt16allocator_traitsISaIN4tama6SpriteEEE9constructIS1_JSt10shared_ptrINS0_7TextureEENS0_5Vec2dEEEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8004274:	b590      	push	{r4, r7, lr}
 8004276:	b085      	sub	sp, #20
 8004278:	af00      	add	r7, sp, #0
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	60b9      	str	r1, [r7, #8]
 800427e:	607a      	str	r2, [r7, #4]
 8004280:	603b      	str	r3, [r7, #0]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f7ff fa48 	bl	8003718 <_ZSt7forwardISt10shared_ptrIN4tama7TextureEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004288:	4604      	mov	r4, r0
 800428a:	6838      	ldr	r0, [r7, #0]
 800428c:	f7ff fa4f 	bl	800372e <_ZSt7forwardIN4tama5Vec2dEEOT_RNSt16remove_referenceIS2_E4typeE>
 8004290:	4603      	mov	r3, r0
 8004292:	4622      	mov	r2, r4
 8004294:	68b9      	ldr	r1, [r7, #8]
 8004296:	68f8      	ldr	r0, [r7, #12]
 8004298:	f000 fab9 	bl	800480e <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEE9constructIS2_JSt10shared_ptrINS1_7TextureEENS1_5Vec2dEEEEvPT_DpOT0_>
 800429c:	bf00      	nop
 800429e:	3714      	adds	r7, #20
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd90      	pop	{r4, r7, pc}

080042a4 <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	605a      	str	r2, [r3, #4]
	return *this;
 80042b4:	687b      	ldr	r3, [r7, #4]
      }
 80042b6:	4618      	mov	r0, r3
 80042b8:	370c      	adds	r7, #12
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr

080042c2 <_ZSt4moveIRNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 80042c2:	b480      	push	{r7}
 80042c4:	b083      	sub	sp, #12
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4618      	mov	r0, r3
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>:
        struct _Deleter
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	683a      	ldr	r2, [r7, #0]
 80042e6:	4611      	mov	r1, r2
 80042e8:	4618      	mov	r0, r3
 80042ea:	f7ff ff7f 	bl	80041ec <_ZNSaIN4tama6SpriteEEC1ERKS1_>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4618      	mov	r0, r3
 80042f2:	3708      	adds	r7, #8
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <_ZSt4moveIRSaIN4tama6SpriteEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4618      	mov	r0, r3
 8004304:	370c      	adds	r7, #12
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr

0800430e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama6SpriteENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
 800430e:	b5b0      	push	{r4, r5, r7, lr}
 8004310:	b08a      	sub	sp, #40	; 0x28
 8004312:	af00      	add	r7, sp, #0
 8004314:	60f8      	str	r0, [r7, #12]
 8004316:	60b9      	str	r1, [r7, #8]
 8004318:	607a      	str	r2, [r7, #4]
 800431a:	603b      	str	r3, [r7, #0]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	601a      	str	r2, [r3, #0]
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 8004322:	f107 031c 	add.w	r3, r7, #28
 8004326:	6839      	ldr	r1, [r7, #0]
 8004328:	4618      	mov	r0, r3
 800432a:	f000 fa90 	bl	800484e <_ZNSaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	      auto __guard = std::__allocate_guarded(__a2);
 800432e:	f107 0314 	add.w	r3, r7, #20
 8004332:	f107 021c 	add.w	r2, r7, #28
 8004336:	4611      	mov	r1, r2
 8004338:	4618      	mov	r0, r3
 800433a:	f000 faa1 	bl	8004880 <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>
	      _Sp_cd_type* __mem = __guard.get();
 800433e:	f107 0314 	add.w	r3, r7, #20
 8004342:	4618      	mov	r0, r3
 8004344:	f000 fac4 	bl	80048d0 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>
 8004348:	6278      	str	r0, [r7, #36]	; 0x24
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f7ff ffb9 	bl	80042c2 <_ZSt4moveIRNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8004350:	4602      	mov	r2, r0
 8004352:	f107 0320 	add.w	r3, r7, #32
 8004356:	4611      	mov	r1, r2
 8004358:	4618      	mov	r0, r3
 800435a:	f7ff ffbd 	bl	80042d8 <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 800435e:	f107 0420 	add.w	r4, r7, #32
 8004362:	6838      	ldr	r0, [r7, #0]
 8004364:	f7ff ffc8 	bl	80042f8 <_ZSt4moveIRSaIN4tama6SpriteEEEONSt16remove_referenceIT_E4typeEOS5_>
 8004368:	4605      	mov	r5, r0
 800436a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436c:	4619      	mov	r1, r3
 800436e:	2014      	movs	r0, #20
 8004370:	f7fc f8dd 	bl	800052e <_ZnwjPv>
 8004374:	2800      	cmp	r0, #0
 8004376:	d004      	beq.n	8004382 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama6SpriteENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x74>
 8004378:	462b      	mov	r3, r5
 800437a:	4622      	mov	r2, r4
 800437c:	68b9      	ldr	r1, [r7, #8]
 800437e:	f000 fae1 	bl	8004944 <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>
 8004382:	f107 0320 	add.w	r3, r7, #32
 8004386:	4618      	mov	r0, r3
 8004388:	f7ff fd69 	bl	8003e5e <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	      _M_pi = __mem;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004390:	601a      	str	r2, [r3, #0]
	      __guard = nullptr;
 8004392:	f107 0314 	add.w	r3, r7, #20
 8004396:	2100      	movs	r1, #0
 8004398:	4618      	mov	r0, r3
 800439a:	f000 fb01 	bl	80049a0 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>
	      auto __guard = std::__allocate_guarded(__a2);
 800439e:	f107 0314 	add.w	r3, r7, #20
 80043a2:	4618      	mov	r0, r3
 80043a4:	f000 fa7f 	bl	80048a6 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 80043a8:	f107 031c 	add.w	r3, r7, #28
 80043ac:	4618      	mov	r0, r3
 80043ae:	f000 fa5b 	bl	8004868 <_ZNSaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
	}
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	4618      	mov	r0, r3
 80043b6:	3728      	adds	r7, #40	; 0x28
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bdb0      	pop	{r4, r5, r7, pc}

080043bc <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
	{ }
 80043c6:	bf00      	nop
 80043c8:	370c      	adds	r7, #12
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr

080043d2 <_ZN9__gnu_cxx13new_allocatorIN4tama14InitialLoadingEEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 80043d2:	b480      	push	{r7}
 80043d4:	b083      	sub	sp, #12
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
 80043da:	6039      	str	r1, [r7, #0]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4618      	mov	r0, r3
 80043e0:	370c      	adds	r7, #12
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr

080043ea <_ZNSt16allocator_traitsISaIN4tama14InitialLoadingEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 80043ea:	b580      	push	{r7, lr}
 80043ec:	b082      	sub	sp, #8
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
 80043f2:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80043f4:	2200      	movs	r2, #0
 80043f6:	6839      	ldr	r1, [r7, #0]
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f000 fb00 	bl	80049fe <_ZN9__gnu_cxx13new_allocatorIN4tama14InitialLoadingEE8allocateEjPKv>
 80043fe:	4603      	mov	r3, r0
 8004400:	4618      	mov	r0, r3
 8004402:	3708      	adds	r7, #8
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <_ZNSt15__allocated_ptrISaIN4tama14InitialLoadingEEEC1ERS2_PS1_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8004414:	68b8      	ldr	r0, [r7, #8]
 8004416:	f000 fb10 	bl	8004a3a <_ZSt11__addressofISaIN4tama14InitialLoadingEEEPT_RS3_>
 800441a:	4602      	mov	r2, r0
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	601a      	str	r2, [r3, #0]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	605a      	str	r2, [r3, #4]
      { }
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	4618      	mov	r0, r3
 800442a:	3710      	adds	r7, #16
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <_ZNSt16allocator_traitsISaIN4tama14InitialLoadingEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	68b9      	ldr	r1, [r7, #8]
 8004440:	68f8      	ldr	r0, [r7, #12]
 8004442:	f000 fb05 	bl	8004a50 <_ZN9__gnu_cxx13new_allocatorIN4tama14InitialLoadingEE10deallocateEPS2_j>
 8004446:	bf00      	nop
 8004448:	3710      	adds	r7, #16
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}

0800444e <_ZNSt15__allocated_ptrISaIN4tama14InitialLoadingEEE10_S_raw_ptrEPS1_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 800444e:	b480      	push	{r7}
 8004450:	b083      	sub	sp, #12
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4618      	mov	r0, r3
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <_ZN9__gnu_cxx13new_allocatorIN4tama14InitialLoadingEE9constructIS2_JRSt10shared_ptrINS1_7ContextEEEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8004464:	b590      	push	{r4, r7, lr}
 8004466:	b085      	sub	sp, #20
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f7ff f8ab 	bl	80035cc <_ZSt7forwardIRSt10shared_ptrIN4tama7ContextEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8004476:	4604      	mov	r4, r0
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	4619      	mov	r1, r3
 800447c:	2020      	movs	r0, #32
 800447e:	f7fc f856 	bl	800052e <_ZnwjPv>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d003      	beq.n	8004490 <_ZN9__gnu_cxx13new_allocatorIN4tama14InitialLoadingEE9constructIS2_JRSt10shared_ptrINS1_7ContextEEEEEvPT_DpOT0_+0x2c>
 8004488:	4621      	mov	r1, r4
 800448a:	4618      	mov	r0, r3
 800448c:	f7fe ffdc 	bl	8003448 <_ZN4tama14InitialLoadingC1ERKSt10shared_ptrINS_7ContextEE>
 8004490:	bf00      	nop
 8004492:	3714      	adds	r7, #20
 8004494:	46bd      	mov	sp, r7
 8004496:	bd90      	pop	{r4, r7, pc}

08004498 <_ZNSaISt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) throw() { }
 8004498:	b580      	push	{r7, lr}
 800449a:	b082      	sub	sp, #8
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 fae1 	bl	8004a6a <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	4618      	mov	r0, r3
 80044ac:	3708      	adds	r7, #8
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}

080044b2 <_ZNSaISt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>:
      ~allocator() throw() { }
 80044b2:	b580      	push	{r7, lr}
 80044b4:	b082      	sub	sp, #8
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 fae0 	bl	8004a80 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4618      	mov	r0, r3
 80044c4:	3708      	adds	r7, #8
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>:
    __allocate_guarded(_Alloc& __a)
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b082      	sub	sp, #8
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
 80044d2:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 80044d4:	2101      	movs	r1, #1
 80044d6:	6838      	ldr	r0, [r7, #0]
 80044d8:	f000 fadd 	bl	8004a96 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>
 80044dc:	4603      	mov	r3, r0
 80044de:	461a      	mov	r2, r3
 80044e0:	6839      	ldr	r1, [r7, #0]
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 fae6 	bl	8004ab4 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
    }
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	3708      	adds	r7, #8
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>:
      ~__allocated_ptr()
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b082      	sub	sp, #8
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d007      	beq.n	8004510 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6818      	ldr	r0, [r3, #0]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	2201      	movs	r2, #1
 800450a:	4619      	mov	r1, r3
 800450c:	f000 fae6 	bl	8004adc <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>
      }
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4618      	mov	r0, r3
 8004514:	3708      	adds	r7, #8
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}

0800451a <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 800451a:	b580      	push	{r7, lr}
 800451c:	b082      	sub	sp, #8
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	4618      	mov	r0, r3
 8004528:	f000 fae7 	bl	8004afa <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>
 800452c:	4603      	mov	r3, r0
 800452e:	4618      	mov	r0, r3
 8004530:	3708      	adds	r7, #8
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}

08004536 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama14InitialLoadingELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, false>
 8004536:	b580      	push	{r7, lr}
 8004538:	b082      	sub	sp, #8
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4618      	mov	r0, r3
 8004542:	f7ff fb79 	bl	8003c38 <_ZNSt12__shared_ptrIN4tama14InitialLoadingELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4618      	mov	r0, r3
 800454a:	3708      	adds	r7, #8
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama14InitialLoadingEELb1EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp
 8004550:	b580      	push	{r7, lr}
 8004552:	b082      	sub	sp, #8
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f7ff f973 	bl	8003844 <_ZNSaIN4tama14InitialLoadingEED1Ev>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4618      	mov	r0, r3
 8004562:	3708      	adds	r7, #8
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <_ZNSt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>:
      class _Impl : _Sp_ebo_helper<0, _Deleter>, _Sp_ebo_helper<1, _Alloc>
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	3301      	adds	r3, #1
 8004574:	4618      	mov	r0, r3
 8004576:	f7ff ffeb 	bl	8004550 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama14InitialLoadingEELb1EED1Ev>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4618      	mov	r0, r3
 800457e:	f7ff ffda 	bl	8004536 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama14InitialLoadingELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4618      	mov	r0, r3
 8004586:	3708      	adds	r7, #8
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <_ZNSt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 800458c:	b590      	push	{r4, r7, lr}
 800458e:	b087      	sub	sp, #28
 8004590:	af00      	add	r7, sp, #0
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	607a      	str	r2, [r7, #4]
 8004598:	603b      	str	r3, [r7, #0]
      : _M_impl(__p, std::move(__d), __a) { }
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	4618      	mov	r0, r3
 800459e:	f7fe f8bd 	bl	800271c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 80045a2:	4a10      	ldr	r2, [pc, #64]	; (80045e4 <_ZNSt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_+0x58>)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	601a      	str	r2, [r3, #0]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f103 040c 	add.w	r4, r3, #12
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f7ff fd81 	bl	80040b6 <_ZSt4moveIRNSt12__shared_ptrIN4tama14InitialLoadingELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 80045b4:	4602      	mov	r2, r0
 80045b6:	f107 0314 	add.w	r3, r7, #20
 80045ba:	4611      	mov	r1, r2
 80045bc:	4618      	mov	r0, r3
 80045be:	f7ff fd85 	bl	80040cc <_ZNSt12__shared_ptrIN4tama14InitialLoadingELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 80045c2:	f107 0214 	add.w	r2, r7, #20
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	68b9      	ldr	r1, [r7, #8]
 80045ca:	4620      	mov	r0, r4
 80045cc:	f000 faa0 	bl	8004b10 <_ZNSt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>
 80045d0:	f107 0314 	add.w	r3, r7, #20
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7ff fb2f 	bl	8003c38 <_ZNSt12__shared_ptrIN4tama14InitialLoadingELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	4618      	mov	r0, r3
 80045de:	371c      	adds	r7, #28
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd90      	pop	{r4, r7, pc}
 80045e4:	08016580 	.word	0x08016580

080045e8 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	605a      	str	r2, [r3, #4]
	return *this;
 80045f8:	687b      	ldr	r3, [r7, #4]
      }
 80045fa:	4618      	mov	r0, r3
 80045fc:	370c      	adds	r7, #12
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr

08004606 <_ZNSt12__shared_ptrIN4tama14InitialLoadingELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>:
          void operator()(typename _Alloc::value_type* __ptr)
 8004606:	b590      	push	{r4, r7, lr}
 8004608:	b085      	sub	sp, #20
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
 800460e:	6039      	str	r1, [r7, #0]
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 8004610:	6879      	ldr	r1, [r7, #4]
 8004612:	f107 0308 	add.w	r3, r7, #8
 8004616:	683a      	ldr	r2, [r7, #0]
 8004618:	4618      	mov	r0, r3
 800461a:	f7ff fef5 	bl	8004408 <_ZNSt15__allocated_ptrISaIN4tama14InitialLoadingEEEC1ERS2_PS1_>
	    allocator_traits<_Alloc>::destroy(_M_alloc, __guard.get());
 800461e:	687c      	ldr	r4, [r7, #4]
 8004620:	f107 0308 	add.w	r3, r7, #8
 8004624:	4618      	mov	r0, r3
 8004626:	f7ff fd16 	bl	8004056 <_ZNSt15__allocated_ptrISaIN4tama14InitialLoadingEEE3getEv>
 800462a:	4603      	mov	r3, r0
 800462c:	4619      	mov	r1, r3
 800462e:	4620      	mov	r0, r4
 8004630:	f000 fa8c 	bl	8004b4c <_ZNSt16allocator_traitsISaIN4tama14InitialLoadingEEE7destroyIS1_EEvRS2_PT_>
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 8004634:	f107 0308 	add.w	r3, r7, #8
 8004638:	4618      	mov	r0, r3
 800463a:	f7ff fcf7 	bl	800402c <_ZNSt15__allocated_ptrISaIN4tama14InitialLoadingEEED1Ev>
          }
 800463e:	bf00      	nop
 8004640:	3714      	adds	r7, #20
 8004642:	46bd      	mov	sp, r7
 8004644:	bd90      	pop	{r4, r7, pc}
	...

08004648 <_ZN4tama7OnInputC1ERKS0_>:

#include "../../input/button.h"

namespace tama
{
    class OnInput
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
 8004652:	4a05      	ldr	r2, [pc, #20]	; (8004668 <_ZN4tama7OnInputC1ERKS0_+0x20>)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	601a      	str	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4618      	mov	r0, r3
 800465c:	370c      	adds	r7, #12
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop
 8004668:	080163d4 	.word	0x080163d4

0800466c <_ZN4tama5StageC1ERKS0_>:
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	683a      	ldr	r2, [r7, #0]
 800467a:	4611      	mov	r1, r2
 800467c:	4618      	mov	r0, r3
 800467e:	f7ff ffe3 	bl	8004648 <_ZN4tama7OnInputC1ERKS0_>
 8004682:	4a0c      	ldr	r2, [pc, #48]	; (80046b4 <_ZN4tama5StageC1ERKS0_+0x48>)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	601a      	str	r2, [r3, #0]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	1d1a      	adds	r2, r3, #4
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	3304      	adds	r3, #4
 8004690:	4619      	mov	r1, r3
 8004692:	4610      	mov	r0, r2
 8004694:	f7fd fb1a 	bl	8001ccc <_ZNSt10shared_ptrIN4tama5SceneEEC1ERKS2_>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f103 020c 	add.w	r2, r3, #12
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	330c      	adds	r3, #12
 80046a2:	4619      	mov	r1, r3
 80046a4:	4610      	mov	r0, r2
 80046a6:	f7fd fb63 	bl	8001d70 <_ZNSt10shared_ptrIN4tama7ContextEEC1ERKS2_>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4618      	mov	r0, r3
 80046ae:	3708      	adds	r7, #8
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	080163c0 	.word	0x080163c0

080046b8 <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	601a      	str	r2, [r3, #0]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	1d1a      	adds	r2, r3, #4
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	3304      	adds	r3, #4
 80046d2:	4619      	mov	r1, r3
 80046d4:	4610      	mov	r0, r2
 80046d6:	f7fc f995 	bl	8000a04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4618      	mov	r0, r3
 80046de:	3708      	adds	r7, #8
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <_ZNSt10shared_ptrIN4tama6SpriteEEC1ERKS2_>:
      shared_ptr(const shared_ptr&) noexcept = default;
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b082      	sub	sp, #8
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	683a      	ldr	r2, [r7, #0]
 80046f2:	4611      	mov	r1, r2
 80046f4:	4618      	mov	r0, r3
 80046f6:	f7ff ffdf 	bl	80046b8 <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4618      	mov	r0, r3
 80046fe:	3708      	adds	r7, #8
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <_ZN4tama14InitialLoadingC1ERKS0_>:
#include "../../runtime/stage/Stage.h"
#include "../../ui/display/drawable/sprite/Sprite.h"

namespace tama
{
    class InitialLoading : public Stage
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	683a      	ldr	r2, [r7, #0]
 8004712:	4611      	mov	r1, r2
 8004714:	4618      	mov	r0, r3
 8004716:	f7ff ffa9 	bl	800466c <_ZN4tama5StageC1ERKS0_>
 800471a:	4a0a      	ldr	r2, [pc, #40]	; (8004744 <_ZN4tama14InitialLoadingC1ERKS0_+0x40>)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	601a      	str	r2, [r3, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f103 0214 	add.w	r2, r3, #20
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	3314      	adds	r3, #20
 800472a:	4619      	mov	r1, r3
 800472c:	4610      	mov	r0, r2
 800472e:	f7ff ffd9 	bl	80046e4 <_ZNSt10shared_ptrIN4tama6SpriteEEC1ERKS2_>
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	69da      	ldr	r2, [r3, #28]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	61da      	str	r2, [r3, #28]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4618      	mov	r0, r3
 800473e:	3708      	adds	r7, #8
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}
 8004744:	0801659c 	.word	0x0801659c

08004748 <_ZN9__gnu_cxx13new_allocatorIN4tama14InitialLoadingEE9constructIS2_JRS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8004748:	b590      	push	{r4, r7, lr}
 800474a:	b085      	sub	sp, #20
 800474c:	af00      	add	r7, sp, #0
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	60b9      	str	r1, [r7, #8]
 8004752:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f7fe ff98 	bl	800368a <_ZSt7forwardIRN4tama14InitialLoadingEEOT_RNSt16remove_referenceIS3_E4typeE>
 800475a:	4604      	mov	r4, r0
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	4619      	mov	r1, r3
 8004760:	2020      	movs	r0, #32
 8004762:	f7fb fee4 	bl	800052e <_ZnwjPv>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d003      	beq.n	8004774 <_ZN9__gnu_cxx13new_allocatorIN4tama14InitialLoadingEE9constructIS2_JRS2_EEEvPT_DpOT0_+0x2c>
 800476c:	4621      	mov	r1, r4
 800476e:	4618      	mov	r0, r3
 8004770:	f7ff ffc8 	bl	8004704 <_ZN4tama14InitialLoadingC1ERKS0_>
 8004774:	bf00      	nop
 8004776:	3714      	adds	r7, #20
 8004778:	46bd      	mov	sp, r7
 800477a:	bd90      	pop	{r4, r7, pc}

0800477c <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4618      	mov	r0, r3
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <_ZNSt16allocator_traitsISaIN4tama6SpriteEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800479e:	2200      	movs	r2, #0
 80047a0:	6839      	ldr	r1, [r7, #0]
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 f9df 	bl	8004b66 <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEE8allocateEjPKv>
 80047a8:	4603      	mov	r3, r0
 80047aa:	4618      	mov	r0, r3
 80047ac:	3708      	adds	r7, #8
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}

080047b2 <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEEC1ERS2_PS1_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 80047b2:	b580      	push	{r7, lr}
 80047b4:	b084      	sub	sp, #16
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	60f8      	str	r0, [r7, #12]
 80047ba:	60b9      	str	r1, [r7, #8]
 80047bc:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 80047be:	68b8      	ldr	r0, [r7, #8]
 80047c0:	f000 f9ef 	bl	8004ba2 <_ZSt11__addressofISaIN4tama6SpriteEEEPT_RS3_>
 80047c4:	4602      	mov	r2, r0
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	601a      	str	r2, [r3, #0]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	605a      	str	r2, [r3, #4]
      { }
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	4618      	mov	r0, r3
 80047d4:	3710      	adds	r7, #16
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}

080047da <_ZNSt16allocator_traitsISaIN4tama6SpriteEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80047da:	b580      	push	{r7, lr}
 80047dc:	b084      	sub	sp, #16
 80047de:	af00      	add	r7, sp, #0
 80047e0:	60f8      	str	r0, [r7, #12]
 80047e2:	60b9      	str	r1, [r7, #8]
 80047e4:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	68b9      	ldr	r1, [r7, #8]
 80047ea:	68f8      	ldr	r0, [r7, #12]
 80047ec:	f000 f9e4 	bl	8004bb8 <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEE10deallocateEPS2_j>
 80047f0:	bf00      	nop
 80047f2:	3710      	adds	r7, #16
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}

080047f8 <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEE10_S_raw_ptrEPS1_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	4618      	mov	r0, r3
 8004804:	370c      	adds	r7, #12
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr

0800480e <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEE9constructIS2_JSt10shared_ptrINS1_7TextureEENS1_5Vec2dEEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800480e:	b5b0      	push	{r4, r5, r7, lr}
 8004810:	b084      	sub	sp, #16
 8004812:	af00      	add	r7, sp, #0
 8004814:	60f8      	str	r0, [r7, #12]
 8004816:	60b9      	str	r1, [r7, #8]
 8004818:	607a      	str	r2, [r7, #4]
 800481a:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f7fe ff7b 	bl	8003718 <_ZSt7forwardISt10shared_ptrIN4tama7TextureEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004822:	4604      	mov	r4, r0
 8004824:	6838      	ldr	r0, [r7, #0]
 8004826:	f7fe ff82 	bl	800372e <_ZSt7forwardIN4tama5Vec2dEEOT_RNSt16remove_referenceIS2_E4typeE>
 800482a:	4605      	mov	r5, r0
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	4619      	mov	r1, r3
 8004830:	2020      	movs	r0, #32
 8004832:	f7fb fe7c 	bl	800052e <_ZnwjPv>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d004      	beq.n	8004846 <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEE9constructIS2_JSt10shared_ptrINS1_7TextureEENS1_5Vec2dEEEEvPT_DpOT0_+0x38>
 800483c:	462a      	mov	r2, r5
 800483e:	4621      	mov	r1, r4
 8004840:	4618      	mov	r0, r3
 8004842:	f000 fdf3 	bl	800542c <_ZN4tama6SpriteC1ERKSt10shared_ptrINS_7TextureEERKNS_5Vec2dE>
 8004846:	bf00      	nop
 8004848:	3710      	adds	r7, #16
 800484a:	46bd      	mov	sp, r7
 800484c:	bdb0      	pop	{r4, r5, r7, pc}

0800484e <_ZNSaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) throw() { }
 800484e:	b580      	push	{r7, lr}
 8004850:	b082      	sub	sp, #8
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
 8004856:	6039      	str	r1, [r7, #0]
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f000 f9ba 	bl	8004bd2 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4618      	mov	r0, r3
 8004862:	3708      	adds	r7, #8
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}

08004868 <_ZNSaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>:
      ~allocator() throw() { }
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f000 f9b9 	bl	8004be8 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4618      	mov	r0, r3
 800487a:	3708      	adds	r7, #8
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>:
    __allocate_guarded(_Alloc& __a)
 8004880:	b580      	push	{r7, lr}
 8004882:	b082      	sub	sp, #8
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 800488a:	2101      	movs	r1, #1
 800488c:	6838      	ldr	r0, [r7, #0]
 800488e:	f000 f9b6 	bl	8004bfe <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>
 8004892:	4603      	mov	r3, r0
 8004894:	461a      	mov	r2, r3
 8004896:	6839      	ldr	r1, [r7, #0]
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f000 f9bf 	bl	8004c1c <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
    }
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	3708      	adds	r7, #8
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}

080048a6 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>:
      ~__allocated_ptr()
 80048a6:	b580      	push	{r7, lr}
 80048a8:	b082      	sub	sp, #8
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d007      	beq.n	80048c6 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6818      	ldr	r0, [r3, #0]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	4619      	mov	r1, r3
 80048c2:	f000 f9bf 	bl	8004c44 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>
      }
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4618      	mov	r0, r3
 80048ca:	3708      	adds	r7, #8
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b082      	sub	sp, #8
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	4618      	mov	r0, r3
 80048de:	f000 f9c0 	bl	8004c62 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>
 80048e2:	4603      	mov	r3, r0
 80048e4:	4618      	mov	r0, r3
 80048e6:	3708      	adds	r7, #8
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, false>
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b082      	sub	sp, #8
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4618      	mov	r0, r3
 80048f8:	f7ff fab1 	bl	8003e5e <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4618      	mov	r0, r3
 8004900:	3708      	adds	r7, #8
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}

08004906 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama6SpriteEELb1EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp
 8004906:	b580      	push	{r7, lr}
 8004908:	b082      	sub	sp, #8
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f7ff f83b 	bl	800398a <_ZNSaIN4tama6SpriteEED1Ev>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4618      	mov	r0, r3
 8004918:	3708      	adds	r7, #8
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}

0800491e <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>:
      class _Impl : _Sp_ebo_helper<0, _Deleter>, _Sp_ebo_helper<1, _Alloc>
 800491e:	b580      	push	{r7, lr}
 8004920:	b082      	sub	sp, #8
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	3301      	adds	r3, #1
 800492a:	4618      	mov	r0, r3
 800492c:	f7ff ffeb 	bl	8004906 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama6SpriteEELb1EED1Ev>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4618      	mov	r0, r3
 8004934:	f7ff ffda 	bl	80048ec <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4618      	mov	r0, r3
 800493c:	3708      	adds	r7, #8
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
	...

08004944 <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 8004944:	b590      	push	{r4, r7, lr}
 8004946:	b087      	sub	sp, #28
 8004948:	af00      	add	r7, sp, #0
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	607a      	str	r2, [r7, #4]
 8004950:	603b      	str	r3, [r7, #0]
      : _M_impl(__p, std::move(__d), __a) { }
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	4618      	mov	r0, r3
 8004956:	f7fd fee1 	bl	800271c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800495a:	4a10      	ldr	r2, [pc, #64]	; (800499c <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_+0x58>)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	601a      	str	r2, [r3, #0]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f103 040c 	add.w	r4, r3, #12
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f7ff fcab 	bl	80042c2 <_ZSt4moveIRNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800496c:	4602      	mov	r2, r0
 800496e:	f107 0314 	add.w	r3, r7, #20
 8004972:	4611      	mov	r1, r2
 8004974:	4618      	mov	r0, r3
 8004976:	f7ff fcaf 	bl	80042d8 <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 800497a:	f107 0214 	add.w	r2, r7, #20
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	68b9      	ldr	r1, [r7, #8]
 8004982:	4620      	mov	r0, r4
 8004984:	f000 f978 	bl	8004c78 <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>
 8004988:	f107 0314 	add.w	r3, r7, #20
 800498c:	4618      	mov	r0, r3
 800498e:	f7ff fa66 	bl	8003e5e <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	4618      	mov	r0, r3
 8004996:	371c      	adds	r7, #28
 8004998:	46bd      	mov	sp, r7
 800499a:	bd90      	pop	{r4, r7, pc}
 800499c:	08016564 	.word	0x08016564

080049a0 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	605a      	str	r2, [r3, #4]
	return *this;
 80049b0:	687b      	ldr	r3, [r7, #4]
      }
 80049b2:	4618      	mov	r0, r3
 80049b4:	370c      	adds	r7, #12
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr

080049be <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>:
          void operator()(typename _Alloc::value_type* __ptr)
 80049be:	b590      	push	{r4, r7, lr}
 80049c0:	b085      	sub	sp, #20
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
 80049c6:	6039      	str	r1, [r7, #0]
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 80049c8:	6879      	ldr	r1, [r7, #4]
 80049ca:	f107 0308 	add.w	r3, r7, #8
 80049ce:	683a      	ldr	r2, [r7, #0]
 80049d0:	4618      	mov	r0, r3
 80049d2:	f7ff feee 	bl	80047b2 <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEEC1ERS2_PS1_>
	    allocator_traits<_Alloc>::destroy(_M_alloc, __guard.get());
 80049d6:	687c      	ldr	r4, [r7, #4]
 80049d8:	f107 0308 	add.w	r3, r7, #8
 80049dc:	4618      	mov	r0, r3
 80049de:	f7ff fc3b 	bl	8004258 <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEE3getEv>
 80049e2:	4603      	mov	r3, r0
 80049e4:	4619      	mov	r1, r3
 80049e6:	4620      	mov	r0, r4
 80049e8:	f000 f964 	bl	8004cb4 <_ZNSt16allocator_traitsISaIN4tama6SpriteEEE7destroyIS1_EEvRS2_PT_>
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 80049ec:	f107 0308 	add.w	r3, r7, #8
 80049f0:	4618      	mov	r0, r3
 80049f2:	f7ff fc1c 	bl	800422e <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEED1Ev>
          }
 80049f6:	bf00      	nop
 80049f8:	3714      	adds	r7, #20
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd90      	pop	{r4, r7, pc}

080049fe <_ZN9__gnu_cxx13new_allocatorIN4tama14InitialLoadingEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80049fe:	b580      	push	{r7, lr}
 8004a00:	b084      	sub	sp, #16
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	60f8      	str	r0, [r7, #12]
 8004a06:	60b9      	str	r1, [r7, #8]
 8004a08:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8004a0a:	68f8      	ldr	r0, [r7, #12]
 8004a0c:	f000 f95f 	bl	8004cce <_ZNK9__gnu_cxx13new_allocatorIN4tama14InitialLoadingEE8max_sizeEv>
 8004a10:	4602      	mov	r2, r0
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	4293      	cmp	r3, r2
 8004a16:	bf8c      	ite	hi
 8004a18:	2301      	movhi	r3, #1
 8004a1a:	2300      	movls	r3, #0
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d001      	beq.n	8004a26 <_ZN9__gnu_cxx13new_allocatorIN4tama14InitialLoadingEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8004a22:	f011 fafc 	bl	801601e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	015b      	lsls	r3, r3, #5
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f011 facb 	bl	8015fc6 <_Znwj>
 8004a30:	4603      	mov	r3, r0
      }
 8004a32:	4618      	mov	r0, r3
 8004a34:	3710      	adds	r7, #16
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}

08004a3a <_ZSt11__addressofISaIN4tama14InitialLoadingEEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8004a3a:	b480      	push	{r7}
 8004a3c:	b083      	sub	sp, #12
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4618      	mov	r0, r3
 8004a46:	370c      	adds	r7, #12
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <_ZN9__gnu_cxx13new_allocatorIN4tama14InitialLoadingEE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	60b9      	str	r1, [r7, #8]
 8004a5a:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8004a5c:	68b8      	ldr	r0, [r7, #8]
 8004a5e:	f011 facb 	bl	8015ff8 <_ZdlPv>
      }
 8004a62:	bf00      	nop
 8004a64:	3710      	adds	r7, #16
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}

08004a6a <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8004a6a:	b480      	push	{r7}
 8004a6c:	b083      	sub	sp, #12
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4618      	mov	r0, r3
 8004a76:	370c      	adds	r7, #12
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	370c      	adds	r7, #12
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr

08004a96 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>:
      allocate(allocator_type& __a, size_type __n)
 8004a96:	b580      	push	{r7, lr}
 8004a98:	b082      	sub	sp, #8
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
 8004a9e:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	6839      	ldr	r1, [r7, #0]
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f000 f91e 	bl	8004ce6 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	4618      	mov	r0, r3
 8004aae:	3708      	adds	r7, #8
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8004ac0:	68b8      	ldr	r0, [r7, #8]
 8004ac2:	f000 f931 	bl	8004d28 <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	601a      	str	r2, [r3, #0]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	605a      	str	r2, [r3, #4]
      { }
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3710      	adds	r7, #16
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}

08004adc <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	68b9      	ldr	r1, [r7, #8]
 8004aec:	68f8      	ldr	r0, [r7, #12]
 8004aee:	f000 f926 	bl	8004d3e <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>
 8004af2:	bf00      	nop
 8004af4:	3710      	adds	r7, #16
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}

08004afa <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 8004afa:	b480      	push	{r7}
 8004afc:	b083      	sub	sp, #12
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4618      	mov	r0, r3
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <_ZNSt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 8004b10:	b590      	push	{r4, r7, lr}
 8004b12:	b085      	sub	sp, #20
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	607a      	str	r2, [r7, #4]
 8004b1c:	603b      	str	r3, [r7, #0]
	: _M_ptr(__p), _Del_base(std::move(__d)), _Alloc_base(__a)
 8004b1e:	68fc      	ldr	r4, [r7, #12]
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f7ff fac8 	bl	80040b6 <_ZSt4moveIRNSt12__shared_ptrIN4tama14InitialLoadingELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8004b26:	4603      	mov	r3, r0
 8004b28:	4619      	mov	r1, r3
 8004b2a:	4620      	mov	r0, r4
 8004b2c:	f000 f914 	bl	8004d58 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama14InitialLoadingELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	3301      	adds	r3, #1
 8004b34:	6839      	ldr	r1, [r7, #0]
 8004b36:	4618      	mov	r0, r3
 8004b38:	f000 f921 	bl	8004d7e <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama14InitialLoadingEELb1EEC1ERKS2_>
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	68ba      	ldr	r2, [r7, #8]
 8004b40:	605a      	str	r2, [r3, #4]
	{ }
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	4618      	mov	r0, r3
 8004b46:	3714      	adds	r7, #20
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd90      	pop	{r4, r7, pc}

08004b4c <_ZNSt16allocator_traitsISaIN4tama14InitialLoadingEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 8004b56:	6839      	ldr	r1, [r7, #0]
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f000 f937 	bl	8004dcc <_ZN9__gnu_cxx13new_allocatorIN4tama14InitialLoadingEE7destroyIS2_EEvPT_>
 8004b5e:	bf00      	nop
 8004b60:	3708      	adds	r7, #8
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}

08004b66 <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8004b66:	b580      	push	{r7, lr}
 8004b68:	b084      	sub	sp, #16
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	60f8      	str	r0, [r7, #12]
 8004b6e:	60b9      	str	r1, [r7, #8]
 8004b70:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8004b72:	68f8      	ldr	r0, [r7, #12]
 8004b74:	f000 f936 	bl	8004de4 <_ZNK9__gnu_cxx13new_allocatorIN4tama6SpriteEE8max_sizeEv>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	bf8c      	ite	hi
 8004b80:	2301      	movhi	r3, #1
 8004b82:	2300      	movls	r3, #0
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d001      	beq.n	8004b8e <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8004b8a:	f011 fa48 	bl	801601e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	015b      	lsls	r3, r3, #5
 8004b92:	4618      	mov	r0, r3
 8004b94:	f011 fa17 	bl	8015fc6 <_Znwj>
 8004b98:	4603      	mov	r3, r0
      }
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3710      	adds	r7, #16
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}

08004ba2 <_ZSt11__addressofISaIN4tama6SpriteEEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8004ba2:	b480      	push	{r7}
 8004ba4:	b083      	sub	sp, #12
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4618      	mov	r0, r3
 8004bae:	370c      	adds	r7, #12
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr

08004bb8 <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	60b9      	str	r1, [r7, #8]
 8004bc2:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8004bc4:	68b8      	ldr	r0, [r7, #8]
 8004bc6:	f011 fa17 	bl	8015ff8 <_ZdlPv>
      }
 8004bca:	bf00      	nop
 8004bcc:	3710      	adds	r7, #16
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}

08004bd2 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8004bd2:	b480      	push	{r7}
 8004bd4:	b083      	sub	sp, #12
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4618      	mov	r0, r3
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	370c      	adds	r7, #12
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr

08004bfe <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>:
      allocate(allocator_type& __a, size_type __n)
 8004bfe:	b580      	push	{r7, lr}
 8004c00:	b082      	sub	sp, #8
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
 8004c06:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8004c08:	2200      	movs	r2, #0
 8004c0a:	6839      	ldr	r1, [r7, #0]
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f000 f8f5 	bl	8004dfc <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>
 8004c12:	4603      	mov	r3, r0
 8004c14:	4618      	mov	r0, r3
 8004c16:	3708      	adds	r7, #8
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8004c28:	68b8      	ldr	r0, [r7, #8]
 8004c2a:	f000 f908 	bl	8004e3e <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	601a      	str	r2, [r3, #0]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	605a      	str	r2, [r3, #4]
      { }
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3710      	adds	r7, #16
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b084      	sub	sp, #16
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	68b9      	ldr	r1, [r7, #8]
 8004c54:	68f8      	ldr	r0, [r7, #12]
 8004c56:	f000 f8fd 	bl	8004e54 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>
 8004c5a:	bf00      	nop
 8004c5c:	3710      	adds	r7, #16
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}

08004c62 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 8004c62:	b480      	push	{r7}
 8004c64:	b083      	sub	sp, #12
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	370c      	adds	r7, #12
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr

08004c78 <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 8004c78:	b590      	push	{r4, r7, lr}
 8004c7a:	b085      	sub	sp, #20
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	607a      	str	r2, [r7, #4]
 8004c84:	603b      	str	r3, [r7, #0]
	: _M_ptr(__p), _Del_base(std::move(__d)), _Alloc_base(__a)
 8004c86:	68fc      	ldr	r4, [r7, #12]
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f7ff fb1a 	bl	80042c2 <_ZSt4moveIRNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	4619      	mov	r1, r3
 8004c92:	4620      	mov	r0, r4
 8004c94:	f000 f8eb 	bl	8004e6e <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	6839      	ldr	r1, [r7, #0]
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f000 f8f8 	bl	8004e94 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama6SpriteEELb1EEC1ERKS2_>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	68ba      	ldr	r2, [r7, #8]
 8004ca8:	605a      	str	r2, [r3, #4]
	{ }
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	4618      	mov	r0, r3
 8004cae:	3714      	adds	r7, #20
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd90      	pop	{r4, r7, pc}

08004cb4 <_ZNSt16allocator_traitsISaIN4tama6SpriteEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b082      	sub	sp, #8
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 8004cbe:	6839      	ldr	r1, [r7, #0]
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f000 f90d 	bl	8004ee0 <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEE7destroyIS2_EEvPT_>
 8004cc6:	bf00      	nop
 8004cc8:	3708      	adds	r7, #8
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}

08004cce <_ZNK9__gnu_cxx13new_allocatorIN4tama14InitialLoadingEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8004cce:	b480      	push	{r7}
 8004cd0:	b083      	sub	sp, #12
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8004cd6:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
 8004cda:	4618      	mov	r0, r3
 8004cdc:	370c      	adds	r7, #12
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr

08004ce6 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8004ce6:	b580      	push	{r7, lr}
 8004ce8:	b084      	sub	sp, #16
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	60f8      	str	r0, [r7, #12]
 8004cee:	60b9      	str	r1, [r7, #8]
 8004cf0:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8004cf2:	68f8      	ldr	r0, [r7, #12]
 8004cf4:	f000 f900 	bl	8004ef8 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	bf8c      	ite	hi
 8004d00:	2301      	movhi	r3, #1
 8004d02:	2300      	movls	r3, #0
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d001      	beq.n	8004d0e <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8004d0a:	f011 f988 	bl	801601e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8004d0e:	68ba      	ldr	r2, [r7, #8]
 8004d10:	4613      	mov	r3, r2
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	4413      	add	r3, r2
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f011 f954 	bl	8015fc6 <_Znwj>
 8004d1e:	4603      	mov	r3, r0
      }
 8004d20:	4618      	mov	r0, r3
 8004d22:	3710      	adds	r7, #16
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4618      	mov	r0, r3
 8004d34:	370c      	adds	r7, #12
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr

08004d3e <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>:
      deallocate(pointer __p, size_type)
 8004d3e:	b580      	push	{r7, lr}
 8004d40:	b084      	sub	sp, #16
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	60f8      	str	r0, [r7, #12]
 8004d46:	60b9      	str	r1, [r7, #8]
 8004d48:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8004d4a:	68b8      	ldr	r0, [r7, #8]
 8004d4c:	f011 f954 	bl	8015ff8 <_ZdlPv>
      }
 8004d50:	bf00      	nop
 8004d52:	3710      	adds	r7, #16
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama14InitialLoadingELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _M_tp(std::move(__tp)) { }
 8004d58:	b590      	push	{r4, r7, lr}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	6039      	str	r1, [r7, #0]
 8004d62:	687c      	ldr	r4, [r7, #4]
 8004d64:	6838      	ldr	r0, [r7, #0]
 8004d66:	f7ff f9a6 	bl	80040b6 <_ZSt4moveIRNSt12__shared_ptrIN4tama14InitialLoadingELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	4620      	mov	r0, r4
 8004d70:	f7ff f9ac 	bl	80040cc <_ZNSt12__shared_ptrIN4tama14InitialLoadingELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	4618      	mov	r0, r3
 8004d78:	370c      	adds	r7, #12
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd90      	pop	{r4, r7, pc}

08004d7e <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama14InitialLoadingEELb1EEC1ERKS2_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 8004d7e:	b580      	push	{r7, lr}
 8004d80:	b082      	sub	sp, #8
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
 8004d86:	6039      	str	r1, [r7, #0]
 8004d88:	6839      	ldr	r1, [r7, #0]
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f7ff f92d 	bl	8003fea <_ZNSaIN4tama14InitialLoadingEEC1ERKS1_>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4618      	mov	r0, r3
 8004d94:	3708      	adds	r7, #8
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
	...

08004d9c <_ZN4tama14InitialLoadingD1Ev>:
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	4a08      	ldr	r2, [pc, #32]	; (8004dc8 <_ZN4tama14InitialLoadingD1Ev+0x2c>)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	601a      	str	r2, [r3, #0]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	3314      	adds	r3, #20
 8004dae:	4618      	mov	r0, r3
 8004db0:	f7fe faec 	bl	800338c <_ZNSt10shared_ptrIN4tama6SpriteEED1Ev>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4618      	mov	r0, r3
 8004db8:	f7fe fac2 	bl	8003340 <_ZN4tama5StageD1Ev>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3708      	adds	r7, #8
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	0801659c 	.word	0x0801659c

08004dcc <_ZN9__gnu_cxx13new_allocatorIN4tama14InitialLoadingEE7destroyIS2_EEvPT_>:
	destroy(_Up* __p) { __p->~_Up(); }
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b082      	sub	sp, #8
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
 8004dd6:	6838      	ldr	r0, [r7, #0]
 8004dd8:	f7ff ffe0 	bl	8004d9c <_ZN4tama14InitialLoadingD1Ev>
 8004ddc:	bf00      	nop
 8004dde:	3708      	adds	r7, #8
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <_ZNK9__gnu_cxx13new_allocatorIN4tama6SpriteEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8004dec:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
 8004df0:	4618      	mov	r0, r3
 8004df2:	370c      	adds	r7, #12
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr

08004dfc <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8004e08:	68f8      	ldr	r0, [r7, #12]
 8004e0a:	f000 f883 	bl	8004f14 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	4293      	cmp	r3, r2
 8004e14:	bf8c      	ite	hi
 8004e16:	2301      	movhi	r3, #1
 8004e18:	2300      	movls	r3, #0
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d001      	beq.n	8004e24 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8004e20:	f011 f8fd 	bl	801601e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8004e24:	68ba      	ldr	r2, [r7, #8]
 8004e26:	4613      	mov	r3, r2
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	4413      	add	r3, r2
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f011 f8c9 	bl	8015fc6 <_Znwj>
 8004e34:	4603      	mov	r3, r0
      }
 8004e36:	4618      	mov	r0, r3
 8004e38:	3710      	adds	r7, #16
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}

08004e3e <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8004e3e:	b480      	push	{r7}
 8004e40:	b083      	sub	sp, #12
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4618      	mov	r0, r3
 8004e4a:	370c      	adds	r7, #12
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr

08004e54 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>:
      deallocate(pointer __p, size_type)
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	60b9      	str	r1, [r7, #8]
 8004e5e:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8004e60:	68b8      	ldr	r0, [r7, #8]
 8004e62:	f011 f8c9 	bl	8015ff8 <_ZdlPv>
      }
 8004e66:	bf00      	nop
 8004e68:	3710      	adds	r7, #16
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}

08004e6e <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _M_tp(std::move(__tp)) { }
 8004e6e:	b590      	push	{r4, r7, lr}
 8004e70:	b083      	sub	sp, #12
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	6078      	str	r0, [r7, #4]
 8004e76:	6039      	str	r1, [r7, #0]
 8004e78:	687c      	ldr	r4, [r7, #4]
 8004e7a:	6838      	ldr	r0, [r7, #0]
 8004e7c:	f7ff fa21 	bl	80042c2 <_ZSt4moveIRNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8004e80:	4603      	mov	r3, r0
 8004e82:	4619      	mov	r1, r3
 8004e84:	4620      	mov	r0, r4
 8004e86:	f7ff fa27 	bl	80042d8 <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	370c      	adds	r7, #12
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd90      	pop	{r4, r7, pc}

08004e94 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama6SpriteEELb1EEC1ERKS2_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
 8004e9e:	6839      	ldr	r1, [r7, #0]
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f7ff f9a3 	bl	80041ec <_ZNSaIN4tama6SpriteEEC1ERKS1_>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3708      	adds	r7, #8
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <_ZN4tama6SpriteD1Ev>:
#include <memory>
#include "../Drawable.h"

namespace tama
{
    class Sprite : public Drawable
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b082      	sub	sp, #8
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	4a08      	ldr	r2, [pc, #32]	; (8004edc <_ZN4tama6SpriteD1Ev+0x2c>)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	601a      	str	r2, [r3, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	3318      	adds	r3, #24
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f7fd fcdf 	bl	8002886 <_ZNSt10shared_ptrIN4tama14ChangeObserverEED1Ev>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	3304      	adds	r3, #4
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f7fe faae 	bl	800342e <_ZNSt10shared_ptrIN4tama7TextureEED1Ev>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3708      	adds	r7, #8
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	080165b0 	.word	0x080165b0

08004ee0 <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEE7destroyIS2_EEvPT_>:
	destroy(_Up* __p) { __p->~_Up(); }
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b082      	sub	sp, #8
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
 8004eea:	6838      	ldr	r0, [r7, #0]
 8004eec:	f7ff ffe0 	bl	8004eb0 <_ZN4tama6SpriteD1Ev>
 8004ef0:	bf00      	nop
 8004ef2:	3708      	adds	r7, #8
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}

08004ef8 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8004ef8:	b480      	push	{r7}
 8004efa:	b083      	sub	sp, #12
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8004f00:	4b03      	ldr	r3, [pc, #12]	; (8004f10 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv+0x18>)
 8004f02:	4618      	mov	r0, r3
 8004f04:	370c      	adds	r7, #12
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop
 8004f10:	0ccccccc 	.word	0x0ccccccc

08004f14 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8004f1c:	4b03      	ldr	r3, [pc, #12]	; (8004f2c <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv+0x18>)
 8004f1e:	4618      	mov	r0, r3
 8004f20:	370c      	adds	r7, #12
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr
 8004f2a:	bf00      	nop
 8004f2c:	0ccccccc 	.word	0x0ccccccc

08004f30 <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b082      	sub	sp, #8
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	4a08      	ldr	r2, [pc, #32]	; (8004f5c <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev+0x2c>)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	601a      	str	r2, [r3, #0]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	330c      	adds	r3, #12
 8004f42:	4618      	mov	r0, r3
 8004f44:	f7ff fceb 	bl	800491e <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f7fc ffa6 	bl	8001e9c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	4618      	mov	r0, r3
 8004f54:	3708      	adds	r7, #8
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	08016564 	.word	0x08016564

08004f60 <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f7ff ffe1 	bl	8004f30 <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
 8004f6e:	2114      	movs	r1, #20
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f011 f826 	bl	8015fc2 <_ZdlPvj>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3708      	adds	r7, #8
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b082      	sub	sp, #8
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	330c      	adds	r3, #12
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f000 f8b2 	bl	80050f6 <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>
 8004f92:	4602      	mov	r2, r0
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	691b      	ldr	r3, [r3, #16]
 8004f98:	4619      	mov	r1, r3
 8004f9a:	4610      	mov	r0, r2
 8004f9c:	f7ff fd0f 	bl	80049be <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>
 8004fa0:	bf00      	nop
 8004fa2:	3708      	adds	r7, #8
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b086      	sub	sp, #24
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	330c      	adds	r3, #12
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f000 f8ab 	bl	8005110 <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	f107 0314 	add.w	r3, r7, #20
 8004fc0:	4611      	mov	r1, r2
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f7ff fc43 	bl	800484e <_ZNSaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8004fc8:	f107 0114 	add.w	r1, r7, #20
 8004fcc:	f107 030c 	add.w	r3, r7, #12
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f7ff fe22 	bl	8004c1c <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
	this->~_Sp_counted_deleter();
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f7ff ffa9 	bl	8004f30 <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8004fde:	f107 030c 	add.w	r3, r7, #12
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f7ff fc5f 	bl	80048a6 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	__allocator_type __a(_M_impl._M_alloc());
 8004fe8:	f107 0314 	add.w	r3, r7, #20
 8004fec:	4618      	mov	r0, r3
 8004fee:	f7ff fc3b 	bl	8004868 <_ZNSaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
      }
 8004ff2:	bf00      	nop
 8004ff4:	3718      	adds	r7, #24
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}

08004ffa <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept
 8004ffa:	b480      	push	{r7}
 8004ffc:	b083      	sub	sp, #12
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
 8005002:	6039      	str	r1, [r7, #0]
        return nullptr;
 8005004:	2300      	movs	r3, #0
      }
 8005006:	4618      	mov	r0, r3
 8005008:	370c      	adds	r7, #12
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr
	...

08005014 <_ZNSt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 8005014:	b580      	push	{r7, lr}
 8005016:	b082      	sub	sp, #8
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	4a08      	ldr	r2, [pc, #32]	; (8005040 <_ZNSt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev+0x2c>)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	601a      	str	r2, [r3, #0]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	330c      	adds	r3, #12
 8005026:	4618      	mov	r0, r3
 8005028:	f7ff fa9e 	bl	8004568 <_ZNSt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4618      	mov	r0, r3
 8005030:	f7fc ff34 	bl	8001e9c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4618      	mov	r0, r3
 8005038:	3708      	adds	r7, #8
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	08016580 	.word	0x08016580

08005044 <_ZNSt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
 8005044:	b580      	push	{r7, lr}
 8005046:	b082      	sub	sp, #8
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f7ff ffe1 	bl	8005014 <_ZNSt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
 8005052:	2114      	movs	r1, #20
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f010 ffb4 	bl	8015fc2 <_ZdlPvj>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4618      	mov	r0, r3
 800505e:	3708      	adds	r7, #8
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <_ZNSt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8005064:	b580      	push	{r7, lr}
 8005066:	b082      	sub	sp, #8
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	330c      	adds	r3, #12
 8005070:	4618      	mov	r0, r3
 8005072:	f000 f85b 	bl	800512c <_ZNSt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>
 8005076:	4602      	mov	r2, r0
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	4619      	mov	r1, r3
 800507e:	4610      	mov	r0, r2
 8005080:	f7ff fac1 	bl	8004606 <_ZNSt12__shared_ptrIN4tama14InitialLoadingELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>
 8005084:	bf00      	nop
 8005086:	3708      	adds	r7, #8
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}

0800508c <_ZNSt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      _M_destroy() noexcept
 800508c:	b580      	push	{r7, lr}
 800508e:	b086      	sub	sp, #24
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	330c      	adds	r3, #12
 8005098:	4618      	mov	r0, r3
 800509a:	f000 f854 	bl	8005146 <_ZNSt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>
 800509e:	4602      	mov	r2, r0
 80050a0:	f107 0314 	add.w	r3, r7, #20
 80050a4:	4611      	mov	r1, r2
 80050a6:	4618      	mov	r0, r3
 80050a8:	f7ff f9f6 	bl	8004498 <_ZNSaISt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 80050ac:	f107 0114 	add.w	r1, r7, #20
 80050b0:	f107 030c 	add.w	r3, r7, #12
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	4618      	mov	r0, r3
 80050b8:	f7ff fcfc 	bl	8004ab4 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
	this->~_Sp_counted_deleter();
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f7ff ffa9 	bl	8005014 <_ZNSt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 80050c2:	f107 030c 	add.w	r3, r7, #12
 80050c6:	4618      	mov	r0, r3
 80050c8:	f7ff fa12 	bl	80044f0 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	__allocator_type __a(_M_impl._M_alloc());
 80050cc:	f107 0314 	add.w	r3, r7, #20
 80050d0:	4618      	mov	r0, r3
 80050d2:	f7ff f9ee 	bl	80044b2 <_ZNSaISt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
      }
 80050d6:	bf00      	nop
 80050d8:	3718      	adds	r7, #24
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}

080050de <_ZNSt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept
 80050de:	b480      	push	{r7}
 80050e0:	b083      	sub	sp, #12
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
 80050e6:	6039      	str	r1, [r7, #0]
        return nullptr;
 80050e8:	2300      	movs	r3, #0
      }
 80050ea:	4618      	mov	r0, r3
 80050ec:	370c      	adds	r7, #12
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr

080050f6 <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 80050f6:	b580      	push	{r7, lr}
 80050f8:	b082      	sub	sp, #8
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4618      	mov	r0, r3
 8005102:	f000 f82e 	bl	8005162 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>
 8005106:	4603      	mov	r3, r0
 8005108:	4618      	mov	r0, r3
 800510a:	3708      	adds	r7, #8
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}

08005110 <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 8005110:	b580      	push	{r7, lr}
 8005112:	b082      	sub	sp, #8
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	3301      	adds	r3, #1
 800511c:	4618      	mov	r0, r3
 800511e:	f000 f82b 	bl	8005178 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama6SpriteEELb1EE6_S_getERS3_>
 8005122:	4603      	mov	r3, r0
 8005124:	4618      	mov	r0, r3
 8005126:	3708      	adds	r7, #8
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <_ZNSt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 800512c:	b580      	push	{r7, lr}
 800512e:	b082      	sub	sp, #8
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	4618      	mov	r0, r3
 8005138:	f000 f829 	bl	800518e <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama14InitialLoadingELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>
 800513c:	4603      	mov	r3, r0
 800513e:	4618      	mov	r0, r3
 8005140:	3708      	adds	r7, #8
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}

08005146 <_ZNSt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 8005146:	b580      	push	{r7, lr}
 8005148:	b082      	sub	sp, #8
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	3301      	adds	r3, #1
 8005152:	4618      	mov	r0, r3
 8005154:	f000 f826 	bl	80051a4 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama14InitialLoadingEELb1EE6_S_getERS3_>
 8005158:	4603      	mov	r3, r0
 800515a:	4618      	mov	r0, r3
 800515c:	3708      	adds	r7, #8
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}

08005162 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>:
      _S_get(_Sp_ebo_helper& __eboh)
 8005162:	b480      	push	{r7}
 8005164:	b083      	sub	sp, #12
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
      { return __eboh._M_tp; }
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4618      	mov	r0, r3
 800516e:	370c      	adds	r7, #12
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama6SpriteEELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	4618      	mov	r0, r3
 8005184:	370c      	adds	r7, #12
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr

0800518e <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama14InitialLoadingELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>:
      _S_get(_Sp_ebo_helper& __eboh)
 800518e:	b480      	push	{r7}
 8005190:	b083      	sub	sp, #12
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
      { return __eboh._M_tp; }
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4618      	mov	r0, r3
 800519a:	370c      	adds	r7, #12
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr

080051a4 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama14InitialLoadingEELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	4618      	mov	r0, r3
 80051b0:	370c      	adds	r7, #12
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr

080051ba <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EEaSERKS4_>:
    class __shared_ptr
 80051ba:	b580      	push	{r7, lr}
 80051bc:	b082      	sub	sp, #8
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
 80051c2:	6039      	str	r1, [r7, #0]
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	601a      	str	r2, [r3, #0]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	1d1a      	adds	r2, r3, #4
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	3304      	adds	r3, #4
 80051d4:	4619      	mov	r1, r3
 80051d6:	4610      	mov	r0, r2
 80051d8:	f7fd fe42 	bl	8002e60 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4618      	mov	r0, r3
 80051e0:	3708      	adds	r7, #8
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}

080051e6 <_ZNSt10shared_ptrIN4tama7TextureEEaSERKS2_>:
    class shared_ptr : public __shared_ptr<_Tp>
 80051e6:	b580      	push	{r7, lr}
 80051e8:	b082      	sub	sp, #8
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]
 80051ee:	6039      	str	r1, [r7, #0]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	683a      	ldr	r2, [r7, #0]
 80051f4:	4611      	mov	r1, r2
 80051f6:	4618      	mov	r0, r3
 80051f8:	f7ff ffdf 	bl	80051ba <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EEaSERKS4_>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4618      	mov	r0, r3
 8005200:	3708      	adds	r7, #8
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}

08005206 <_ZN4tama6Sprite10setTextureESt10shared_ptrINS_7TextureEE>:
//

#include "Sprite.h"

void tama::Sprite::setTexture(std::shared_ptr<tama::Texture> texture)
{
 8005206:	b580      	push	{r7, lr}
 8005208:	b082      	sub	sp, #8
 800520a:	af00      	add	r7, sp, #0
 800520c:	6078      	str	r0, [r7, #4]
 800520e:	6039      	str	r1, [r7, #0]
    this->texture = texture;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	3304      	adds	r3, #4
 8005214:	6839      	ldr	r1, [r7, #0]
 8005216:	4618      	mov	r0, r3
 8005218:	f7ff ffe5 	bl	80051e6 <_ZNSt10shared_ptrIN4tama7TextureEEaSERKS2_>
}
 800521c:	bf00      	nop
 800521e:	3708      	adds	r7, #8
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}

08005224 <_ZN4tama6Sprite11setPositionENS_5Vec2dE>:

void tama::Sprite::setPosition(tama::Vec2d position)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b084      	sub	sp, #16
 8005228:	af00      	add	r7, sp, #0
 800522a:	60f8      	str	r0, [r7, #12]
 800522c:	1d3b      	adds	r3, r7, #4
 800522e:	e883 0006 	stmia.w	r3, {r1, r2}
    this->position = position;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	330c      	adds	r3, #12
 8005236:	1d3a      	adds	r2, r7, #4
 8005238:	e892 0003 	ldmia.w	r2, {r0, r1}
 800523c:	e883 0003 	stmia.w	r3, {r0, r1}
    notifyObserver();
 8005240:	68f8      	ldr	r0, [r7, #12]
 8005242:	f000 f8c8 	bl	80053d6 <_ZN4tama6Sprite14notifyObserverEv>
}
 8005246:	bf00      	nop
 8005248:	3710      	adds	r7, #16
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}

0800524e <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 800524e:	b580      	push	{r7, lr}
 8005250:	b082      	sub	sp, #8
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
 8005256:	6039      	str	r1, [r7, #0]
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	601a      	str	r2, [r3, #0]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	1d1a      	adds	r2, r3, #4
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	3304      	adds	r3, #4
 8005268:	4619      	mov	r1, r3
 800526a:	4610      	mov	r0, r2
 800526c:	f7fb fbca 	bl	8000a04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4618      	mov	r0, r3
 8005274:	3708      	adds	r7, #8
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}

0800527a <_ZNSt10shared_ptrIN4tama7TextureEEC1ERKS2_>:
      shared_ptr(const shared_ptr&) noexcept = default;
 800527a:	b580      	push	{r7, lr}
 800527c:	b082      	sub	sp, #8
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
 8005282:	6039      	str	r1, [r7, #0]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	683a      	ldr	r2, [r7, #0]
 8005288:	4611      	mov	r1, r2
 800528a:	4618      	mov	r0, r3
 800528c:	f7ff ffdf 	bl	800524e <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4618      	mov	r0, r3
 8005294:	3708      	adds	r7, #8
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}

0800529a <_ZN4tama6Sprite10getTextureEv>:

std::shared_ptr<tama::Texture> tama::Sprite::getTexture()
{
 800529a:	b580      	push	{r7, lr}
 800529c:	b082      	sub	sp, #8
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
 80052a2:	6039      	str	r1, [r7, #0]
    return texture;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	3304      	adds	r3, #4
 80052a8:	4619      	mov	r1, r3
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f7ff ffe5 	bl	800527a <_ZNSt10shared_ptrIN4tama7TextureEEC1ERKS2_>
}
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	3708      	adds	r7, #8
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <_ZN4tama6Sprite11getPositionEv>:

tama::Vec2d tama::Sprite::getPosition()
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
    return position;
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	330c      	adds	r3, #12
 80052c8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80052cc:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	370c      	adds	r7, #12
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr

080052dc <_ZN4tama6Sprite4moveENS_5Vec2dE>:

void tama::Sprite::move(tama::Vec2d delta)
{
 80052dc:	b590      	push	{r4, r7, lr}
 80052de:	b087      	sub	sp, #28
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6178      	str	r0, [r7, #20]
 80052e4:	f107 030c 	add.w	r3, r7, #12
 80052e8:	e883 0006 	stmia.w	r3, {r1, r2}
    position = position + delta;
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	f103 010c 	add.w	r1, r3, #12
 80052f2:	697c      	ldr	r4, [r7, #20]
 80052f4:	4638      	mov	r0, r7
 80052f6:	f107 030c 	add.w	r3, r7, #12
 80052fa:	cb0c      	ldmia	r3, {r2, r3}
 80052fc:	f7fb f8ec 	bl	80004d8 <_ZN4tama5Vec2dplES0_>
 8005300:	f104 030c 	add.w	r3, r4, #12
 8005304:	463a      	mov	r2, r7
 8005306:	e892 0003 	ldmia.w	r2, {r0, r1}
 800530a:	e883 0003 	stmia.w	r3, {r0, r1}
    notifyObserver();
 800530e:	6978      	ldr	r0, [r7, #20]
 8005310:	f000 f861 	bl	80053d6 <_ZN4tama6Sprite14notifyObserverEv>
}
 8005314:	bf00      	nop
 8005316:	371c      	adds	r7, #28
 8005318:	46bd      	mov	sp, r7
 800531a:	bd90      	pop	{r4, r7, pc}

0800531c <_ZN4tama6Sprite4hideEv>:

void tama::Sprite::hide()
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b082      	sub	sp, #8
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
    visible = false;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	751a      	strb	r2, [r3, #20]
    notifyObserver();
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 f853 	bl	80053d6 <_ZN4tama6Sprite14notifyObserverEv>
}
 8005330:	bf00      	nop
 8005332:	3708      	adds	r7, #8
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}

08005338 <_ZN4tama6Sprite4showEv>:

void tama::Sprite::show()
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b082      	sub	sp, #8
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
    visible = true;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	751a      	strb	r2, [r3, #20]
    notifyObserver();
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 f845 	bl	80053d6 <_ZN4tama6Sprite14notifyObserverEv>
}
 800534c:	bf00      	nop
 800534e:	3708      	adds	r7, #8
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEaSERKS4_>:
    class __shared_ptr
 8005354:	b580      	push	{r7, lr}
 8005356:	b082      	sub	sp, #8
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	601a      	str	r2, [r3, #0]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	1d1a      	adds	r2, r3, #4
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	3304      	adds	r3, #4
 800536e:	4619      	mov	r1, r3
 8005370:	4610      	mov	r0, r2
 8005372:	f7fd fd75 	bl	8002e60 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4618      	mov	r0, r3
 800537a:	3708      	adds	r7, #8
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEaSERKS2_>:
    class shared_ptr : public __shared_ptr<_Tp>
 8005380:	b580      	push	{r7, lr}
 8005382:	b082      	sub	sp, #8
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	683a      	ldr	r2, [r7, #0]
 800538e:	4611      	mov	r1, r2
 8005390:	4618      	mov	r0, r3
 8005392:	f7ff ffdf 	bl	8005354 <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEaSERKS4_>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4618      	mov	r0, r3
 800539a:	3708      	adds	r7, #8
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <_ZN4tama6Sprite17setChangeObserverESt10shared_ptrINS_14ChangeObserverEE>:

void tama::Sprite::setChangeObserver(std::shared_ptr<tama::ChangeObserver> observer)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b082      	sub	sp, #8
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
    this->observer = observer;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	3318      	adds	r3, #24
 80053ae:	6839      	ldr	r1, [r7, #0]
 80053b0:	4618      	mov	r0, r3
 80053b2:	f7ff ffe5 	bl	8005380 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEaSERKS2_>
}
 80053b6:	bf00      	nop
 80053b8:	3708      	adds	r7, #8
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}

080053be <_ZN4tama6Sprite9isVisibleEv>:

bool tama::Sprite::isVisible()
{
 80053be:	b480      	push	{r7}
 80053c0:	b083      	sub	sp, #12
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]
    return visible;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	7d1b      	ldrb	r3, [r3, #20]
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	370c      	adds	r7, #12
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr

080053d6 <_ZN4tama6Sprite14notifyObserverEv>:

void tama::Sprite::notifyObserver()
{
 80053d6:	b580      	push	{r7, lr}
 80053d8:	b082      	sub	sp, #8
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
    if (observer != nullptr)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	3318      	adds	r3, #24
 80053e2:	2100      	movs	r1, #0
 80053e4:	4618      	mov	r0, r3
 80053e6:	f000 f85f 	bl	80054a8 <_ZStneIN4tama14ChangeObserverEEbRKSt10shared_ptrIT_EDn>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d009      	beq.n	8005404 <_ZN4tama6Sprite14notifyObserverEv+0x2e>
    {
        observer->onChange();
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	3318      	adds	r3, #24
 80053f4:	4618      	mov	r0, r3
 80053f6:	f000 f865 	bl	80054c4 <_ZNKSt19__shared_ptr_accessIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80053fa:	4602      	mov	r2, r0
 80053fc:	6813      	ldr	r3, [r2, #0]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4610      	mov	r0, r2
 8005402:	4798      	blx	r3
    }
}
 8005404:	bf00      	nop
 8005406:	3708      	adds	r7, #8
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <_ZN4tama8DrawableC1Ev>:
#include "../../../common/observers/ChangeObserver.h"
#include "texture.h"

namespace tama
{
    class Drawable
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	4a04      	ldr	r2, [pc, #16]	; (8005428 <_ZN4tama8DrawableC1Ev+0x1c>)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	601a      	str	r2, [r3, #0]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4618      	mov	r0, r3
 800541e:	370c      	adds	r7, #12
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr
 8005428:	080165dc 	.word	0x080165dc

0800542c <_ZN4tama6SpriteC1ERKSt10shared_ptrINS_7TextureEERKNS_5Vec2dE>:

tama::Sprite::Sprite(const std::shared_ptr<Texture> &texture, const tama::Vec2d &position) : texture(texture),
 800542c:	b590      	push	{r4, r7, lr}
 800542e:	b087      	sub	sp, #28
 8005430:	af00      	add	r7, sp, #0
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	607a      	str	r2, [r7, #4]
                                                                                             position(position)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	4618      	mov	r0, r3
 800543c:	f7ff ffe6 	bl	800540c <_ZN4tama8DrawableC1Ev>
 8005440:	4a18      	ldr	r2, [pc, #96]	; (80054a4 <_ZN4tama6SpriteC1ERKSt10shared_ptrINS_7TextureEERKNS_5Vec2dE+0x78>)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	601a      	str	r2, [r3, #0]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	3304      	adds	r3, #4
 800544a:	68b9      	ldr	r1, [r7, #8]
 800544c:	4618      	mov	r0, r3
 800544e:	f7ff ff14 	bl	800527a <_ZNSt10shared_ptrIN4tama7TextureEEC1ERKS2_>
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	330c      	adds	r3, #12
 8005458:	e892 0003 	ldmia.w	r2, {r0, r1}
 800545c:	e883 0003 	stmia.w	r3, {r0, r1}
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	3318      	adds	r3, #24
 8005464:	4618      	mov	r0, r3
 8005466:	f000 f839 	bl	80054dc <_ZNSt10shared_ptrIN4tama14ChangeObserverEEC1Ev>
{
    observer = nullptr;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f103 0418 	add.w	r4, r3, #24
 8005470:	f107 0310 	add.w	r3, r7, #16
 8005474:	2100      	movs	r1, #0
 8005476:	4618      	mov	r0, r3
 8005478:	f000 f83d 	bl	80054f6 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEC1EDn>
 800547c:	f107 0310 	add.w	r3, r7, #16
 8005480:	4619      	mov	r1, r3
 8005482:	4620      	mov	r0, r4
 8005484:	f000 f84f 	bl	8005526 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEaSEOS2_>
 8005488:	f107 0310 	add.w	r3, r7, #16
 800548c:	4618      	mov	r0, r3
 800548e:	f7fd f9fa 	bl	8002886 <_ZNSt10shared_ptrIN4tama14ChangeObserverEED1Ev>
    visible = true;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2201      	movs	r2, #1
 8005496:	751a      	strb	r2, [r3, #20]
}
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	4618      	mov	r0, r3
 800549c:	371c      	adds	r7, #28
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd90      	pop	{r4, r7, pc}
 80054a2:	bf00      	nop
 80054a4:	080165b0 	.word	0x080165b0

080054a8 <_ZStneIN4tama14ChangeObserverEEbRKSt10shared_ptrIT_EDn>:
    operator!=(const shared_ptr<_Tp>& __a, nullptr_t) noexcept
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
    { return (bool)__a; }
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4618      	mov	r0, r3
 80054b6:	f000 f849 	bl	800554c <_ZNKSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEcvbEv>
 80054ba:	4603      	mov	r3, r0
 80054bc:	4618      	mov	r0, r3
 80054be:	3708      	adds	r7, #8
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <_ZNKSt19__shared_ptr_accessIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b082      	sub	sp, #8
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
	return _M_get();
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f000 f84e 	bl	800556e <_ZNKSt19__shared_ptr_accessIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 80054d2:	4603      	mov	r3, r0
      }
 80054d4:	4618      	mov	r0, r3
 80054d6:	3708      	adds	r7, #8
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}

080054dc <_ZNSt10shared_ptrIN4tama14ChangeObserverEEC1Ev>:
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }
 80054dc:	b580      	push	{r7, lr}
 80054de:	b082      	sub	sp, #8
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	4618      	mov	r0, r3
 80054e8:	f000 f84d 	bl	8005586 <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	4618      	mov	r0, r3
 80054f0:	3708      	adds	r7, #8
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}

080054f6 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEC1EDn>:
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }
 80054f6:	b580      	push	{r7, lr}
 80054f8:	b082      	sub	sp, #8
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]
 80054fe:	6039      	str	r1, [r7, #0]
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f7ff ffeb 	bl	80054dc <_ZNSt10shared_ptrIN4tama14ChangeObserverEEC1Ev>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4618      	mov	r0, r3
 800550a:	3708      	adds	r7, #8
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <_ZSt4moveIRSt10shared_ptrIN4tama14ChangeObserverEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4618      	mov	r0, r3
 800551c:	370c      	adds	r7, #12
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr

08005526 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEaSEOS2_>:
      operator=(shared_ptr&& __r) noexcept
 8005526:	b590      	push	{r4, r7, lr}
 8005528:	b083      	sub	sp, #12
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
 800552e:	6039      	str	r1, [r7, #0]
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
 8005530:	687c      	ldr	r4, [r7, #4]
 8005532:	6838      	ldr	r0, [r7, #0]
 8005534:	f7ff ffec 	bl	8005510 <_ZSt4moveIRSt10shared_ptrIN4tama14ChangeObserverEEEONSt16remove_referenceIT_E4typeEOS6_>
 8005538:	4603      	mov	r3, r0
 800553a:	4619      	mov	r1, r3
 800553c:	4620      	mov	r0, r4
 800553e:	f000 f83e 	bl	80055be <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_>
	return *this;
 8005542:	687b      	ldr	r3, [r7, #4]
      }
 8005544:	4618      	mov	r0, r3
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	bd90      	pop	{r4, r7, pc}

0800554c <_ZNKSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEcvbEv>:
      explicit operator bool() const // never throws
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
      { return _M_ptr == 0 ? false : true; }
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2b00      	cmp	r3, #0
 800555a:	bf14      	ite	ne
 800555c:	2301      	movne	r3, #1
 800555e:	2300      	moveq	r3, #0
 8005560:	b2db      	uxtb	r3, r3
 8005562:	4618      	mov	r0, r3
 8005564:	370c      	adds	r7, #12
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr

0800556e <_ZNKSt19__shared_ptr_accessIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 800556e:	b580      	push	{r7, lr}
 8005570:	b082      	sub	sp, #8
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 f840 	bl	80055fc <_ZNKSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EE3getEv>
 800557c:	4603      	mov	r3, r0
 800557e:	4618      	mov	r0, r3
 8005580:	3708      	adds	r7, #8
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}

08005586 <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_ptr() noexcept
 8005586:	b580      	push	{r7, lr}
 8005588:	b082      	sub	sp, #8
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
      : _M_ptr(0), _M_refcount()
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	601a      	str	r2, [r3, #0]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	3304      	adds	r3, #4
 8005598:	4618      	mov	r0, r3
 800559a:	f7fb fc66 	bl	8000e6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
      { }
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4618      	mov	r0, r3
 80055a2:	3708      	adds	r7, #8
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <_ZSt4moveIRSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	4618      	mov	r0, r3
 80055b4:	370c      	adds	r7, #12
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr

080055be <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_>:
      operator=(__shared_ptr&& __r) noexcept
 80055be:	b580      	push	{r7, lr}
 80055c0:	b084      	sub	sp, #16
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	6078      	str	r0, [r7, #4]
 80055c6:	6039      	str	r1, [r7, #0]
	__shared_ptr(std::move(__r)).swap(*this);
 80055c8:	6838      	ldr	r0, [r7, #0]
 80055ca:	f7ff ffed 	bl	80055a8 <_ZSt4moveIRSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS8_>
 80055ce:	4602      	mov	r2, r0
 80055d0:	f107 0308 	add.w	r3, r7, #8
 80055d4:	4611      	mov	r1, r2
 80055d6:	4618      	mov	r0, r3
 80055d8:	f000 f81c 	bl	8005614 <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEC1EOS4_>
 80055dc:	f107 0308 	add.w	r3, r7, #8
 80055e0:	6879      	ldr	r1, [r7, #4]
 80055e2:	4618      	mov	r0, r3
 80055e4:	f000 f834 	bl	8005650 <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EE4swapERS4_>
 80055e8:	f107 0308 	add.w	r3, r7, #8
 80055ec:	4618      	mov	r0, r3
 80055ee:	f7fd f93c 	bl	800286a <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EED1Ev>
	return *this;
 80055f2:	687b      	ldr	r3, [r7, #4]
      }
 80055f4:	4618      	mov	r0, r3
 80055f6:	3710      	adds	r7, #16
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <_ZNKSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4618      	mov	r0, r3
 800560a:	370c      	adds	r7, #12
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEC1EOS4_>:
      __shared_ptr(__shared_ptr&& __r) noexcept
 8005614:	b580      	push	{r7, lr}
 8005616:	b082      	sub	sp, #8
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]
      : _M_ptr(__r._M_ptr), _M_refcount()
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	601a      	str	r2, [r3, #0]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	3304      	adds	r3, #4
 800562a:	4618      	mov	r0, r3
 800562c:	f7fb fc1d 	bl	8000e6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	_M_refcount._M_swap(__r._M_refcount);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	1d1a      	adds	r2, r3, #4
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	3304      	adds	r3, #4
 8005638:	4619      	mov	r1, r3
 800563a:	4610      	mov	r0, r2
 800563c:	f7fb fc23 	bl	8000e86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	__r._M_ptr = 0;
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	2200      	movs	r2, #0
 8005644:	601a      	str	r2, [r3, #0]
      }
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4618      	mov	r0, r3
 800564a:	3708      	adds	r7, #8
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EE4swapERS4_>:
      swap(__shared_ptr<_Tp, _Lp>& __other) noexcept
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6039      	str	r1, [r7, #0]
	std::swap(_M_ptr, __other._M_ptr);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	683a      	ldr	r2, [r7, #0]
 800565e:	4611      	mov	r1, r2
 8005660:	4618      	mov	r0, r3
 8005662:	f000 f817 	bl	8005694 <_ZSt4swapIPN4tama14ChangeObserverEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS7_ESt18is_move_assignableIS7_EEE5valueEvE4typeERS7_SH_>
	_M_refcount._M_swap(__other._M_refcount);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	1d1a      	adds	r2, r3, #4
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	3304      	adds	r3, #4
 800566e:	4619      	mov	r1, r3
 8005670:	4610      	mov	r0, r2
 8005672:	f7fb fc08 	bl	8000e86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
      }
 8005676:	bf00      	nop
 8005678:	3708      	adds	r7, #8
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}

0800567e <_ZSt4moveIRPN4tama14ChangeObserverEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800567e:	b480      	push	{r7}
 8005680:	b083      	sub	sp, #12
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4618      	mov	r0, r3
 800568a:	370c      	adds	r7, #12
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr

08005694 <_ZSt4swapIPN4tama14ChangeObserverEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS7_ESt18is_move_assignableIS7_EEE5valueEvE4typeERS7_SH_>:
    swap(_Tp& __a, _Tp& __b)
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f7ff ffed 	bl	800567e <_ZSt4moveIRPN4tama14ChangeObserverEEONSt16remove_referenceIT_E4typeEOS5_>
 80056a4:	4603      	mov	r3, r0
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 80056aa:	6838      	ldr	r0, [r7, #0]
 80056ac:	f7ff ffe7 	bl	800567e <_ZSt4moveIRPN4tama14ChangeObserverEEONSt16remove_referenceIT_E4typeEOS5_>
 80056b0:	4603      	mov	r3, r0
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80056b8:	f107 030c 	add.w	r3, r7, #12
 80056bc:	4618      	mov	r0, r3
 80056be:	f7ff ffde 	bl	800567e <_ZSt4moveIRPN4tama14ChangeObserverEEONSt16remove_referenceIT_E4typeEOS5_>
 80056c2:	4603      	mov	r3, r0
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	601a      	str	r2, [r3, #0]
    }
 80056ca:	bf00      	nop
 80056cc:	3710      	adds	r7, #16
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
	...

080056d4 <_ZN4tama7TextureC1Ejj>:
    {
        unsigned width;
        unsigned height;
        PixelColor ** data;

        Texture(unsigned int width, unsigned int height) : width(width), height(height)
 80056d4:	b590      	push	{r4, r7, lr}
 80056d6:	b087      	sub	sp, #28
 80056d8:	af00      	add	r7, sp, #0
 80056da:	60f8      	str	r0, [r7, #12]
 80056dc:	60b9      	str	r1, [r7, #8]
 80056de:	607a      	str	r2, [r7, #4]
 80056e0:	4a22      	ldr	r2, [pc, #136]	; (800576c <_ZN4tama7TextureC1Ejj+0x98>)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	601a      	str	r2, [r3, #0]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	68ba      	ldr	r2, [r7, #8]
 80056ea:	605a      	str	r2, [r3, #4]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	609a      	str	r2, [r3, #8]
        {
            data = new PixelColor*[height];
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a1e      	ldr	r2, [pc, #120]	; (8005770 <_ZN4tama7TextureC1Ejj+0x9c>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d801      	bhi.n	80056fe <_ZN4tama7TextureC1Ejj+0x2a>
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	e001      	b.n	8005702 <_ZN4tama7TextureC1Ejj+0x2e>
 80056fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005702:	4618      	mov	r0, r3
 8005704:	f010 fc5b 	bl	8015fbe <_Znaj>
 8005708:	4603      	mov	r3, r0
 800570a:	461a      	mov	r2, r3
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	60da      	str	r2, [r3, #12]
            for (unsigned i = 0; i < height; ++i)
 8005710:	2300      	movs	r3, #0
 8005712:	617b      	str	r3, [r7, #20]
 8005714:	697a      	ldr	r2, [r7, #20]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	429a      	cmp	r2, r3
 800571a:	d222      	bcs.n	8005762 <_ZN4tama7TextureC1Ejj+0x8e>
            {
                data[i] = new PixelColor[width];
 800571c:	68b9      	ldr	r1, [r7, #8]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	68da      	ldr	r2, [r3, #12]
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	18d4      	adds	r4, r2, r3
 8005728:	4608      	mov	r0, r1
 800572a:	f010 fc48 	bl	8015fbe <_Znaj>
 800572e:	4603      	mov	r3, r0
 8005730:	6023      	str	r3, [r4, #0]
                for (unsigned j = 0; j < width; ++j)
 8005732:	2300      	movs	r3, #0
 8005734:	613b      	str	r3, [r7, #16]
 8005736:	693a      	ldr	r2, [r7, #16]
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	429a      	cmp	r2, r3
 800573c:	d20d      	bcs.n	800575a <_ZN4tama7TextureC1Ejj+0x86>
                {
                    data[i][j] = PixelColor::WHITE;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	68da      	ldr	r2, [r3, #12]
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	4413      	add	r3, r2
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	4413      	add	r3, r2
 800574e:	2200      	movs	r2, #0
 8005750:	701a      	strb	r2, [r3, #0]
                for (unsigned j = 0; j < width; ++j)
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	3301      	adds	r3, #1
 8005756:	613b      	str	r3, [r7, #16]
 8005758:	e7ed      	b.n	8005736 <_ZN4tama7TextureC1Ejj+0x62>
            for (unsigned i = 0; i < height; ++i)
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	3301      	adds	r3, #1
 800575e:	617b      	str	r3, [r7, #20]
 8005760:	e7d8      	b.n	8005714 <_ZN4tama7TextureC1Ejj+0x40>
                }
            }
        }
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	4618      	mov	r0, r3
 8005766:	371c      	adds	r7, #28
 8005768:	46bd      	mov	sp, r7
 800576a:	bd90      	pop	{r4, r7, pc}
 800576c:	080170bc 	.word	0x080170bc
 8005770:	1ffffffe 	.word	0x1ffffffe

08005774 <_ZN4tama7Texture8insertAtENS_5Vec2dESt10shared_ptrIS0_E>:

        Texture(unsigned int width, unsigned int height, PixelColor **data) : width(width), height(height), data(data)
        {}

        void insertAt(Vec2d position, std::shared_ptr<Texture> texture)
 8005774:	b580      	push	{r7, lr}
 8005776:	b08a      	sub	sp, #40	; 0x28
 8005778:	af02      	add	r7, sp, #8
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	1d38      	adds	r0, r7, #4
 800577e:	e880 0006 	stmia.w	r0, {r1, r2}
 8005782:	603b      	str	r3, [r7, #0]
        {
            for (unsigned i = 0; i < texture->height; ++i)
 8005784:	2300      	movs	r3, #0
 8005786:	61fb      	str	r3, [r7, #28]
 8005788:	6838      	ldr	r0, [r7, #0]
 800578a:	f000 f8bb 	bl	8005904 <_ZNKSt19__shared_ptr_accessIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800578e:	4603      	mov	r3, r0
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	69fa      	ldr	r2, [r7, #28]
 8005794:	429a      	cmp	r2, r3
 8005796:	bf34      	ite	cc
 8005798:	2301      	movcc	r3, #1
 800579a:	2300      	movcs	r3, #0
 800579c:	b2db      	uxtb	r3, r3
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d042      	beq.n	8005828 <_ZN4tama7Texture8insertAtENS_5Vec2dESt10shared_ptrIS0_E+0xb4>
            {
                for (unsigned j = 0; j < texture->width; ++j)
 80057a2:	2300      	movs	r3, #0
 80057a4:	61bb      	str	r3, [r7, #24]
 80057a6:	6838      	ldr	r0, [r7, #0]
 80057a8:	f000 f8ac 	bl	8005904 <_ZNKSt19__shared_ptr_accessIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80057ac:	4603      	mov	r3, r0
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	69ba      	ldr	r2, [r7, #24]
 80057b2:	429a      	cmp	r2, r3
 80057b4:	bf34      	ite	cc
 80057b6:	2301      	movcc	r3, #1
 80057b8:	2300      	movcs	r3, #0
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d02f      	beq.n	8005820 <_ZN4tama7Texture8insertAtENS_5Vec2dESt10shared_ptrIS0_E+0xac>
                {
                    unsigned newY = i + position.y;
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	461a      	mov	r2, r3
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	4413      	add	r3, r2
 80057c8:	617b      	str	r3, [r7, #20]
                    unsigned newX = j + position.x;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	461a      	mov	r2, r3
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	4413      	add	r3, r2
 80057d2:	613b      	str	r3, [r7, #16]
                    if (shouldDrawPixel(texture, i, j, newY, newX))
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	9301      	str	r3, [sp, #4]
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	9300      	str	r3, [sp, #0]
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	69fa      	ldr	r2, [r7, #28]
 80057e0:	6839      	ldr	r1, [r7, #0]
 80057e2:	68f8      	ldr	r0, [r7, #12]
 80057e4:	f000 f824 	bl	8005830 <_ZNK4tama7Texture15shouldDrawPixelERKSt10shared_ptrIS0_Ejjjj>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d014      	beq.n	8005818 <_ZN4tama7Texture8insertAtENS_5Vec2dESt10shared_ptrIS0_E+0xa4>
                    {
                        this->data[newY][newX] = texture->data[i][j];
 80057ee:	6838      	ldr	r0, [r7, #0]
 80057f0:	f000 f888 	bl	8005904 <_ZNKSt19__shared_ptr_accessIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80057f4:	4603      	mov	r3, r0
 80057f6:	68da      	ldr	r2, [r3, #12]
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	4413      	add	r3, r2
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	441a      	add	r2, r3
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	68d9      	ldr	r1, [r3, #12]
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	440b      	add	r3, r1
 800580e:	6819      	ldr	r1, [r3, #0]
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	440b      	add	r3, r1
 8005814:	7812      	ldrb	r2, [r2, #0]
 8005816:	701a      	strb	r2, [r3, #0]
                for (unsigned j = 0; j < texture->width; ++j)
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	3301      	adds	r3, #1
 800581c:	61bb      	str	r3, [r7, #24]
 800581e:	e7c2      	b.n	80057a6 <_ZN4tama7Texture8insertAtENS_5Vec2dESt10shared_ptrIS0_E+0x32>
            for (unsigned i = 0; i < texture->height; ++i)
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	3301      	adds	r3, #1
 8005824:	61fb      	str	r3, [r7, #28]
 8005826:	e7af      	b.n	8005788 <_ZN4tama7Texture8insertAtENS_5Vec2dESt10shared_ptrIS0_E+0x14>
                    }
                }
            }
        }
 8005828:	bf00      	nop
 800582a:	3720      	adds	r7, #32
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}

08005830 <_ZNK4tama7Texture15shouldDrawPixelERKSt10shared_ptrIS0_Ejjjj>:

        bool shouldDrawPixel(const std::shared_ptr<Texture> &texture, unsigned int i, unsigned int j, unsigned int newY,
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	60f8      	str	r0, [r7, #12]
 8005838:	60b9      	str	r1, [r7, #8]
 800583a:	607a      	str	r2, [r7, #4]
 800583c:	603b      	str	r3, [r7, #0]
                             unsigned int newX) const
        { return newX < width && newY < height && texture->data[i][j] != PixelColor::TRANSPARENT; }
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	69fa      	ldr	r2, [r7, #28]
 8005844:	429a      	cmp	r2, r3
 8005846:	d214      	bcs.n	8005872 <_ZNK4tama7Texture15shouldDrawPixelERKSt10shared_ptrIS0_Ejjjj+0x42>
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	69ba      	ldr	r2, [r7, #24]
 800584e:	429a      	cmp	r2, r3
 8005850:	d20f      	bcs.n	8005872 <_ZNK4tama7Texture15shouldDrawPixelERKSt10shared_ptrIS0_Ejjjj+0x42>
 8005852:	68b8      	ldr	r0, [r7, #8]
 8005854:	f000 f856 	bl	8005904 <_ZNKSt19__shared_ptr_accessIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8005858:	4603      	mov	r3, r0
 800585a:	68da      	ldr	r2, [r3, #12]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	4413      	add	r3, r2
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	4413      	add	r3, r2
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	2b02      	cmp	r3, #2
 800586c:	d001      	beq.n	8005872 <_ZNK4tama7Texture15shouldDrawPixelERKSt10shared_ptrIS0_Ejjjj+0x42>
 800586e:	2301      	movs	r3, #1
 8005870:	e000      	b.n	8005874 <_ZNK4tama7Texture15shouldDrawPixelERKSt10shared_ptrIS0_Ejjjj+0x44>
 8005872:	2300      	movs	r3, #0
 8005874:	4618      	mov	r0, r3
 8005876:	3710      	adds	r7, #16
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}

0800587c <_ZN4tama7TextureD1Ev>:

        virtual ~Texture()
 800587c:	b580      	push	{r7, lr}
 800587e:	b084      	sub	sp, #16
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
        {
 8005884:	4a16      	ldr	r2, [pc, #88]	; (80058e0 <_ZN4tama7TextureD1Ev+0x64>)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	601a      	str	r2, [r3, #0]
            for (unsigned i = 0; i < height; ++i)
 800588a:	2300      	movs	r3, #0
 800588c:	60fb      	str	r3, [r7, #12]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	68fa      	ldr	r2, [r7, #12]
 8005894:	429a      	cmp	r2, r3
 8005896:	d214      	bcs.n	80058c2 <_ZN4tama7TextureD1Ev+0x46>
            {
                delete[] data[i];
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	68da      	ldr	r2, [r3, #12]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	4413      	add	r3, r2
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d008      	beq.n	80058ba <_ZN4tama7TextureD1Ev+0x3e>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	68da      	ldr	r2, [r3, #12]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	4413      	add	r3, r2
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4618      	mov	r0, r3
 80058b6:	f010 fb7d 	bl	8015fb4 <_ZdaPv>
            for (unsigned i = 0; i < height; ++i)
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	3301      	adds	r3, #1
 80058be:	60fb      	str	r3, [r7, #12]
 80058c0:	e7e5      	b.n	800588e <_ZN4tama7TextureD1Ev+0x12>
            }
            delete[] data;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d004      	beq.n	80058d4 <_ZN4tama7TextureD1Ev+0x58>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	4618      	mov	r0, r3
 80058d0:	f010 fb70 	bl	8015fb4 <_ZdaPv>
        }
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4618      	mov	r0, r3
 80058d8:	3710      	adds	r7, #16
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	bf00      	nop
 80058e0:	080170bc 	.word	0x080170bc

080058e4 <_ZN4tama7TextureD0Ev>:
        virtual ~Texture()
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b082      	sub	sp, #8
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
        }
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f7ff ffc5 	bl	800587c <_ZN4tama7TextureD1Ev>
 80058f2:	2110      	movs	r1, #16
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f010 fb64 	bl	8015fc2 <_ZdlPvj>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4618      	mov	r0, r3
 80058fe:	3708      	adds	r7, #8
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <_ZNKSt19__shared_ptr_accessIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 8005904:	b580      	push	{r7, lr}
 8005906:	b082      	sub	sp, #8
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
	return _M_get();
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f000 f827 	bl	8005960 <_ZNKSt19__shared_ptr_accessIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 8005912:	4603      	mov	r3, r0
      }
 8005914:	4618      	mov	r0, r3
 8005916:	3708      	adds	r7, #8
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <_ZN4tama13TextureLoaderC1Ev>:
#include "../../../../assets/texture-asset.h"
#include <memory>

namespace tama
{
    class TextureLoader
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	4a04      	ldr	r2, [pc, #16]	; (8005938 <_ZN4tama13TextureLoaderC1Ev+0x1c>)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	601a      	str	r2, [r3, #0]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4618      	mov	r0, r3
 800592e:	370c      	adds	r7, #12
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr
 8005938:	080170b0 	.word	0x080170b0

0800593c <_ZN4tama18Stm32TextureLoaderC1Ev>:
#include "../../Core/ui/display/drawable/texture-loader/TextureLoader.h"
#include "../nokia5110-display-data-manager/Nokia5110DisplayDataManager.h"

namespace tama
{
    class Stm32TextureLoader : public TextureLoader
 800593c:	b580      	push	{r7, lr}
 800593e:	b082      	sub	sp, #8
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4618      	mov	r0, r3
 8005948:	f7ff ffe8 	bl	800591c <_ZN4tama13TextureLoaderC1Ev>
 800594c:	4a03      	ldr	r2, [pc, #12]	; (800595c <_ZN4tama18Stm32TextureLoaderC1Ev+0x20>)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	601a      	str	r2, [r3, #0]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4618      	mov	r0, r3
 8005956:	3708      	adds	r7, #8
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}
 800595c:	08017244 	.word	0x08017244

08005960 <_ZNKSt19__shared_ptr_accessIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 8005960:	b580      	push	{r7, lr}
 8005962:	b082      	sub	sp, #8
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f000 f81d 	bl	80059a8 <_ZNKSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE3getEv>
 800596e:	4603      	mov	r3, r0
 8005970:	4618      	mov	r0, r3
 8005972:	3708      	adds	r7, #8
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}

08005978 <_ZNSaIN4tama7TextureEEC1Ev>:
      allocator() throw() { }
 8005978:	b580      	push	{r7, lr}
 800597a:	b082      	sub	sp, #8
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f000 f81d 	bl	80059c0 <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEEC1Ev>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4618      	mov	r0, r3
 800598a:	3708      	adds	r7, #8
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}

08005990 <_ZNSaIN4tama7TextureEED1Ev>:
      ~allocator() throw() { }
 8005990:	b580      	push	{r7, lr}
 8005992:	b082      	sub	sp, #8
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f000 f81c 	bl	80059d6 <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEED1Ev>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4618      	mov	r0, r3
 80059a2:	3708      	adds	r7, #8
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <_ZNKSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4618      	mov	r0, r3
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4618      	mov	r0, r3
 80059cc:	370c      	adds	r7, #12
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr

080059d6 <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80059d6:	b480      	push	{r7}
 80059d8:	b083      	sub	sp, #12
 80059da:	af00      	add	r7, sp, #0
 80059dc:	6078      	str	r0, [r7, #4]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4618      	mov	r0, r3
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr

080059ec <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>:
        struct _Deleter
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b082      	sub	sp, #8
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4618      	mov	r0, r3
 80059f8:	f7ff ffca 	bl	8005990 <_ZNSaIN4tama7TextureEED1Ev>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4618      	mov	r0, r3
 8005a00:	3708      	adds	r7, #8
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}

08005a06 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>:
 8005a06:	b580      	push	{r7, lr}
 8005a08:	b082      	sub	sp, #8
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]
 8005a0e:	6039      	str	r1, [r7, #0]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	683a      	ldr	r2, [r7, #0]
 8005a14:	4611      	mov	r1, r2
 8005a16:	4618      	mov	r0, r3
 8005a18:	f000 f805 	bl	8005a26 <_ZNSaIN4tama7TextureEEC1ERKS1_>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3708      	adds	r7, #8
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}

08005a26 <_ZNSaIN4tama7TextureEEC1ERKS1_>:
      allocator(const allocator& __a) throw()
 8005a26:	b580      	push	{r7, lr}
 8005a28:	b082      	sub	sp, #8
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6078      	str	r0, [r7, #4]
 8005a2e:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8005a30:	6839      	ldr	r1, [r7, #0]
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 f8d2 	bl	8005bdc <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEEC1ERKS3_>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3708      	adds	r7, #8
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}

08005a42 <_ZSt18__allocate_guardedISaIN4tama7TextureEEESt15__allocated_ptrIT_ERS4_>:
    __allocate_guarded(_Alloc& __a)
 8005a42:	b580      	push	{r7, lr}
 8005a44:	b082      	sub	sp, #8
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
 8005a4a:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 8005a4c:	2101      	movs	r1, #1
 8005a4e:	6838      	ldr	r0, [r7, #0]
 8005a50:	f000 f8d0 	bl	8005bf4 <_ZNSt16allocator_traitsISaIN4tama7TextureEEE8allocateERS2_j>
 8005a54:	4603      	mov	r3, r0
 8005a56:	461a      	mov	r2, r3
 8005a58:	6839      	ldr	r1, [r7, #0]
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f000 f8d9 	bl	8005c12 <_ZNSt15__allocated_ptrISaIN4tama7TextureEEEC1ERS2_PS1_>
    }
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	3708      	adds	r7, #8
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <_ZNSt15__allocated_ptrISaIN4tama7TextureEEED1Ev>:
      ~__allocated_ptr()
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b082      	sub	sp, #8
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d007      	beq.n	8005a88 <_ZNSt15__allocated_ptrISaIN4tama7TextureEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6818      	ldr	r0, [r3, #0]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	2201      	movs	r2, #1
 8005a82:	4619      	mov	r1, r3
 8005a84:	f000 f8d9 	bl	8005c3a <_ZNSt16allocator_traitsISaIN4tama7TextureEEE10deallocateERS2_PS1_j>
      }
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3708      	adds	r7, #8
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}

08005a92 <_ZNSt15__allocated_ptrISaIN4tama7TextureEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 8005a92:	b580      	push	{r7, lr}
 8005a94:	b082      	sub	sp, #8
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	6078      	str	r0, [r7, #4]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f000 f8da 	bl	8005c58 <_ZNSt15__allocated_ptrISaIN4tama7TextureEEE10_S_raw_ptrEPS1_>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3708      	adds	r7, #8
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}

08005aae <_ZNSt15__allocated_ptrISaIN4tama7TextureEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 8005aae:	b480      	push	{r7}
 8005ab0:	b083      	sub	sp, #12
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
 8005ab6:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	605a      	str	r2, [r3, #4]
	return *this;
 8005abe:	687b      	ldr	r3, [r7, #4]
      }
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	370c      	adds	r7, #12
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <_ZSt4moveIRNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 8005acc:	b480      	push	{r7}
 8005ace:	b083      	sub	sp, #12
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	370c      	adds	r7, #12
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr

08005ae2 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>:
 8005ae2:	b580      	push	{r7, lr}
 8005ae4:	b082      	sub	sp, #8
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
 8005aea:	6039      	str	r1, [r7, #0]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	683a      	ldr	r2, [r7, #0]
 8005af0:	4611      	mov	r1, r2
 8005af2:	4618      	mov	r0, r3
 8005af4:	f7ff ff97 	bl	8005a26 <_ZNSaIN4tama7TextureEEC1ERKS1_>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4618      	mov	r0, r3
 8005afc:	3708      	adds	r7, #8
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}

08005b02 <_ZSt4moveIRSaIN4tama7TextureEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8005b02:	b480      	push	{r7}
 8005b04:	b083      	sub	sp, #12
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	370c      	adds	r7, #12
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama7TextureENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
 8005b18:	b5b0      	push	{r4, r5, r7, lr}
 8005b1a:	b08a      	sub	sp, #40	; 0x28
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	60b9      	str	r1, [r7, #8]
 8005b22:	607a      	str	r2, [r7, #4]
 8005b24:	603b      	str	r3, [r7, #0]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	601a      	str	r2, [r3, #0]
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 8005b2c:	f107 031c 	add.w	r3, r7, #28
 8005b30:	6839      	ldr	r1, [r7, #0]
 8005b32:	4618      	mov	r0, r3
 8005b34:	f000 f89b 	bl	8005c6e <_ZNSaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	      auto __guard = std::__allocate_guarded(__a2);
 8005b38:	f107 0314 	add.w	r3, r7, #20
 8005b3c:	f107 021c 	add.w	r2, r7, #28
 8005b40:	4611      	mov	r1, r2
 8005b42:	4618      	mov	r0, r3
 8005b44:	f000 f8ac 	bl	8005ca0 <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>
	      _Sp_cd_type* __mem = __guard.get();
 8005b48:	f107 0314 	add.w	r3, r7, #20
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f000 f8cf 	bl	8005cf0 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>
 8005b52:	6278      	str	r0, [r7, #36]	; 0x24
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f7ff ffb9 	bl	8005acc <_ZSt4moveIRNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	f107 0320 	add.w	r3, r7, #32
 8005b60:	4611      	mov	r1, r2
 8005b62:	4618      	mov	r0, r3
 8005b64:	f7ff ffbd 	bl	8005ae2 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 8005b68:	f107 0420 	add.w	r4, r7, #32
 8005b6c:	6838      	ldr	r0, [r7, #0]
 8005b6e:	f7ff ffc8 	bl	8005b02 <_ZSt4moveIRSaIN4tama7TextureEEEONSt16remove_referenceIT_E4typeEOS5_>
 8005b72:	4605      	mov	r5, r0
 8005b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b76:	4619      	mov	r1, r3
 8005b78:	2014      	movs	r0, #20
 8005b7a:	f7fa fcd8 	bl	800052e <_ZnwjPv>
 8005b7e:	2800      	cmp	r0, #0
 8005b80:	d004      	beq.n	8005b8c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama7TextureENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x74>
 8005b82:	462b      	mov	r3, r5
 8005b84:	4622      	mov	r2, r4
 8005b86:	68b9      	ldr	r1, [r7, #8]
 8005b88:	f000 f8ec 	bl	8005d64 <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>
 8005b8c:	f107 0320 	add.w	r3, r7, #32
 8005b90:	4618      	mov	r0, r3
 8005b92:	f7ff ff2b 	bl	80059ec <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	      _M_pi = __mem;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b9a:	601a      	str	r2, [r3, #0]
	      __guard = nullptr;
 8005b9c:	f107 0314 	add.w	r3, r7, #20
 8005ba0:	2100      	movs	r1, #0
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f000 f90c 	bl	8005dc0 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>
	      auto __guard = std::__allocate_guarded(__a2);
 8005ba8:	f107 0314 	add.w	r3, r7, #20
 8005bac:	4618      	mov	r0, r3
 8005bae:	f000 f88a 	bl	8005cc6 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 8005bb2:	f107 031c 	add.w	r3, r7, #28
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f000 f866 	bl	8005c88 <_ZNSaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
	}
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3728      	adds	r7, #40	; 0x28
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bdb0      	pop	{r4, r5, r7, pc}

08005bc6 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 8005bc6:	b480      	push	{r7}
 8005bc8:	b083      	sub	sp, #12
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
 8005bce:	6039      	str	r1, [r7, #0]
	{ }
 8005bd0:	bf00      	nop
 8005bd2:	370c      	adds	r7, #12
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4618      	mov	r0, r3
 8005bea:	370c      	adds	r7, #12
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr

08005bf4 <_ZNSt16allocator_traitsISaIN4tama7TextureEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b082      	sub	sp, #8
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8005bfe:	2200      	movs	r2, #0
 8005c00:	6839      	ldr	r1, [r7, #0]
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 f90b 	bl	8005e1e <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE8allocateEjPKv>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3708      	adds	r7, #8
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}

08005c12 <_ZNSt15__allocated_ptrISaIN4tama7TextureEEEC1ERS2_PS1_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8005c12:	b580      	push	{r7, lr}
 8005c14:	b084      	sub	sp, #16
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	60f8      	str	r0, [r7, #12]
 8005c1a:	60b9      	str	r1, [r7, #8]
 8005c1c:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8005c1e:	68b8      	ldr	r0, [r7, #8]
 8005c20:	f000 f91b 	bl	8005e5a <_ZSt11__addressofISaIN4tama7TextureEEEPT_RS3_>
 8005c24:	4602      	mov	r2, r0
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	601a      	str	r2, [r3, #0]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	605a      	str	r2, [r3, #4]
      { }
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	4618      	mov	r0, r3
 8005c34:	3710      	adds	r7, #16
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}

08005c3a <_ZNSt16allocator_traitsISaIN4tama7TextureEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8005c3a:	b580      	push	{r7, lr}
 8005c3c:	b084      	sub	sp, #16
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	60f8      	str	r0, [r7, #12]
 8005c42:	60b9      	str	r1, [r7, #8]
 8005c44:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	68b9      	ldr	r1, [r7, #8]
 8005c4a:	68f8      	ldr	r0, [r7, #12]
 8005c4c:	f000 f910 	bl	8005e70 <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE10deallocateEPS2_j>
 8005c50:	bf00      	nop
 8005c52:	3710      	adds	r7, #16
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <_ZNSt15__allocated_ptrISaIN4tama7TextureEEE10_S_raw_ptrEPS1_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	4618      	mov	r0, r3
 8005c64:	370c      	adds	r7, #12
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr

08005c6e <_ZNSaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) throw() { }
 8005c6e:	b580      	push	{r7, lr}
 8005c70:	b082      	sub	sp, #8
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	6078      	str	r0, [r7, #4]
 8005c76:	6039      	str	r1, [r7, #0]
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f000 f906 	bl	8005e8a <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4618      	mov	r0, r3
 8005c82:	3708      	adds	r7, #8
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <_ZNSaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>:
      ~allocator() throw() { }
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b082      	sub	sp, #8
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f000 f905 	bl	8005ea0 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3708      	adds	r7, #8
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}

08005ca0 <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>:
    __allocate_guarded(_Alloc& __a)
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b082      	sub	sp, #8
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 8005caa:	2101      	movs	r1, #1
 8005cac:	6838      	ldr	r0, [r7, #0]
 8005cae:	f000 f902 	bl	8005eb6 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	6839      	ldr	r1, [r7, #0]
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f000 f90b 	bl	8005ed4 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
    }
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	3708      	adds	r7, #8
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}

08005cc6 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>:
      ~__allocated_ptr()
 8005cc6:	b580      	push	{r7, lr}
 8005cc8:	b082      	sub	sp, #8
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d007      	beq.n	8005ce6 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6818      	ldr	r0, [r3, #0]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	4619      	mov	r1, r3
 8005ce2:	f000 f90b 	bl	8005efc <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>
      }
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3708      	adds	r7, #8
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}

08005cf0 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b082      	sub	sp, #8
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f000 f90c 	bl	8005f1a <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>
 8005d02:	4603      	mov	r3, r0
 8005d04:	4618      	mov	r0, r3
 8005d06:	3708      	adds	r7, #8
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, false>
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4618      	mov	r0, r3
 8005d18:	f7ff fe68 	bl	80059ec <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3708      	adds	r7, #8
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}

08005d26 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama7TextureEELb1EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp
 8005d26:	b580      	push	{r7, lr}
 8005d28:	b082      	sub	sp, #8
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	6078      	str	r0, [r7, #4]
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f7ff fe2e 	bl	8005990 <_ZNSaIN4tama7TextureEED1Ev>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	4618      	mov	r0, r3
 8005d38:	3708      	adds	r7, #8
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}

08005d3e <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>:
      class _Impl : _Sp_ebo_helper<0, _Deleter>, _Sp_ebo_helper<1, _Alloc>
 8005d3e:	b580      	push	{r7, lr}
 8005d40:	b082      	sub	sp, #8
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6078      	str	r0, [r7, #4]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	3301      	adds	r3, #1
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f7ff ffeb 	bl	8005d26 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama7TextureEELb1EED1Ev>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	4618      	mov	r0, r3
 8005d54:	f7ff ffda 	bl	8005d0c <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3708      	adds	r7, #8
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
	...

08005d64 <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 8005d64:	b590      	push	{r4, r7, lr}
 8005d66:	b087      	sub	sp, #28
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	60f8      	str	r0, [r7, #12]
 8005d6c:	60b9      	str	r1, [r7, #8]
 8005d6e:	607a      	str	r2, [r7, #4]
 8005d70:	603b      	str	r3, [r7, #0]
      : _M_impl(__p, std::move(__d), __a) { }
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	4618      	mov	r0, r3
 8005d76:	f7fc fcd1 	bl	800271c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8005d7a:	4a10      	ldr	r2, [pc, #64]	; (8005dbc <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_+0x58>)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	601a      	str	r2, [r3, #0]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f103 040c 	add.w	r4, r3, #12
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f7ff fea0 	bl	8005acc <_ZSt4moveIRNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	f107 0314 	add.w	r3, r7, #20
 8005d92:	4611      	mov	r1, r2
 8005d94:	4618      	mov	r0, r3
 8005d96:	f7ff fea4 	bl	8005ae2 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 8005d9a:	f107 0214 	add.w	r2, r7, #20
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	68b9      	ldr	r1, [r7, #8]
 8005da2:	4620      	mov	r0, r4
 8005da4:	f000 f8c4 	bl	8005f30 <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>
 8005da8:	f107 0314 	add.w	r3, r7, #20
 8005dac:	4618      	mov	r0, r3
 8005dae:	f7ff fe1d 	bl	80059ec <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	4618      	mov	r0, r3
 8005db6:	371c      	adds	r7, #28
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd90      	pop	{r4, r7, pc}
 8005dbc:	08017094 	.word	0x08017094

08005dc0 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	605a      	str	r2, [r3, #4]
	return *this;
 8005dd0:	687b      	ldr	r3, [r7, #4]
      }
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	370c      	adds	r7, #12
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr

08005dde <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>:
          void operator()(typename _Alloc::value_type* __ptr)
 8005dde:	b590      	push	{r4, r7, lr}
 8005de0:	b085      	sub	sp, #20
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
 8005de6:	6039      	str	r1, [r7, #0]
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 8005de8:	6879      	ldr	r1, [r7, #4]
 8005dea:	f107 0308 	add.w	r3, r7, #8
 8005dee:	683a      	ldr	r2, [r7, #0]
 8005df0:	4618      	mov	r0, r3
 8005df2:	f7ff ff0e 	bl	8005c12 <_ZNSt15__allocated_ptrISaIN4tama7TextureEEEC1ERS2_PS1_>
	    allocator_traits<_Alloc>::destroy(_M_alloc, __guard.get());
 8005df6:	687c      	ldr	r4, [r7, #4]
 8005df8:	f107 0308 	add.w	r3, r7, #8
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f7ff fe48 	bl	8005a92 <_ZNSt15__allocated_ptrISaIN4tama7TextureEEE3getEv>
 8005e02:	4603      	mov	r3, r0
 8005e04:	4619      	mov	r1, r3
 8005e06:	4620      	mov	r0, r4
 8005e08:	f000 f8b0 	bl	8005f6c <_ZNSt16allocator_traitsISaIN4tama7TextureEEE7destroyIS1_EEvRS2_PT_>
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 8005e0c:	f107 0308 	add.w	r3, r7, #8
 8005e10:	4618      	mov	r0, r3
 8005e12:	f7ff fe29 	bl	8005a68 <_ZNSt15__allocated_ptrISaIN4tama7TextureEEED1Ev>
          }
 8005e16:	bf00      	nop
 8005e18:	3714      	adds	r7, #20
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd90      	pop	{r4, r7, pc}

08005e1e <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8005e1e:	b580      	push	{r7, lr}
 8005e20:	b084      	sub	sp, #16
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	60f8      	str	r0, [r7, #12]
 8005e26:	60b9      	str	r1, [r7, #8]
 8005e28:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8005e2a:	68f8      	ldr	r0, [r7, #12]
 8005e2c:	f000 f8ab 	bl	8005f86 <_ZNK9__gnu_cxx13new_allocatorIN4tama7TextureEE8max_sizeEv>
 8005e30:	4602      	mov	r2, r0
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	4293      	cmp	r3, r2
 8005e36:	bf8c      	ite	hi
 8005e38:	2301      	movhi	r3, #1
 8005e3a:	2300      	movls	r3, #0
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d001      	beq.n	8005e46 <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8005e42:	f010 f8ec 	bl	801601e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	011b      	lsls	r3, r3, #4
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f010 f8bb 	bl	8015fc6 <_Znwj>
 8005e50:	4603      	mov	r3, r0
      }
 8005e52:	4618      	mov	r0, r3
 8005e54:	3710      	adds	r7, #16
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}

08005e5a <_ZSt11__addressofISaIN4tama7TextureEEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8005e5a:	b480      	push	{r7}
 8005e5c:	b083      	sub	sp, #12
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	4618      	mov	r0, r3
 8005e66:	370c      	adds	r7, #12
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr

08005e70 <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	60f8      	str	r0, [r7, #12]
 8005e78:	60b9      	str	r1, [r7, #8]
 8005e7a:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8005e7c:	68b8      	ldr	r0, [r7, #8]
 8005e7e:	f010 f8bb 	bl	8015ff8 <_ZdlPv>
      }
 8005e82:	bf00      	nop
 8005e84:	3710      	adds	r7, #16
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}

08005e8a <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8005e8a:	b480      	push	{r7}
 8005e8c:	b083      	sub	sp, #12
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4618      	mov	r0, r3
 8005e96:	370c      	adds	r7, #12
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	4618      	mov	r0, r3
 8005eac:	370c      	adds	r7, #12
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr

08005eb6 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>:
      allocate(allocator_type& __a, size_type __n)
 8005eb6:	b580      	push	{r7, lr}
 8005eb8:	b082      	sub	sp, #8
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]
 8005ebe:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	6839      	ldr	r1, [r7, #0]
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f000 f86a 	bl	8005f9e <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3708      	adds	r7, #8
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}

08005ed4 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b084      	sub	sp, #16
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	60f8      	str	r0, [r7, #12]
 8005edc:	60b9      	str	r1, [r7, #8]
 8005ede:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8005ee0:	68b8      	ldr	r0, [r7, #8]
 8005ee2:	f000 f87d 	bl	8005fe0 <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	601a      	str	r2, [r3, #0]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	605a      	str	r2, [r3, #4]
      { }
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3710      	adds	r7, #16
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}

08005efc <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b084      	sub	sp, #16
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	60f8      	str	r0, [r7, #12]
 8005f04:	60b9      	str	r1, [r7, #8]
 8005f06:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	68b9      	ldr	r1, [r7, #8]
 8005f0c:	68f8      	ldr	r0, [r7, #12]
 8005f0e:	f000 f872 	bl	8005ff6 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>
 8005f12:	bf00      	nop
 8005f14:	3710      	adds	r7, #16
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}

08005f1a <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 8005f1a:	b480      	push	{r7}
 8005f1c:	b083      	sub	sp, #12
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	4618      	mov	r0, r3
 8005f26:	370c      	adds	r7, #12
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 8005f30:	b590      	push	{r4, r7, lr}
 8005f32:	b085      	sub	sp, #20
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	60f8      	str	r0, [r7, #12]
 8005f38:	60b9      	str	r1, [r7, #8]
 8005f3a:	607a      	str	r2, [r7, #4]
 8005f3c:	603b      	str	r3, [r7, #0]
	: _M_ptr(__p), _Del_base(std::move(__d)), _Alloc_base(__a)
 8005f3e:	68fc      	ldr	r4, [r7, #12]
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f7ff fdc3 	bl	8005acc <_ZSt4moveIRNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8005f46:	4603      	mov	r3, r0
 8005f48:	4619      	mov	r1, r3
 8005f4a:	4620      	mov	r0, r4
 8005f4c:	f000 f860 	bl	8006010 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	3301      	adds	r3, #1
 8005f54:	6839      	ldr	r1, [r7, #0]
 8005f56:	4618      	mov	r0, r3
 8005f58:	f000 f86d 	bl	8006036 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama7TextureEELb1EEC1ERKS2_>
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	68ba      	ldr	r2, [r7, #8]
 8005f60:	605a      	str	r2, [r3, #4]
	{ }
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	4618      	mov	r0, r3
 8005f66:	3714      	adds	r7, #20
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd90      	pop	{r4, r7, pc}

08005f6c <_ZNSt16allocator_traitsISaIN4tama7TextureEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b082      	sub	sp, #8
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 8005f76:	6839      	ldr	r1, [r7, #0]
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f000 f86a 	bl	8006052 <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE7destroyIS2_EEvPT_>
 8005f7e:	bf00      	nop
 8005f80:	3708      	adds	r7, #8
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}

08005f86 <_ZNK9__gnu_cxx13new_allocatorIN4tama7TextureEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8005f86:	b480      	push	{r7}
 8005f88:	b083      	sub	sp, #12
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8005f8e:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8005f92:	4618      	mov	r0, r3
 8005f94:	370c      	adds	r7, #12
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr

08005f9e <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8005f9e:	b580      	push	{r7, lr}
 8005fa0:	b084      	sub	sp, #16
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	60f8      	str	r0, [r7, #12]
 8005fa6:	60b9      	str	r1, [r7, #8]
 8005fa8:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8005faa:	68f8      	ldr	r0, [r7, #12]
 8005fac:	f000 f860 	bl	8006070 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	bf8c      	ite	hi
 8005fb8:	2301      	movhi	r3, #1
 8005fba:	2300      	movls	r3, #0
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d001      	beq.n	8005fc6 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8005fc2:	f010 f82c 	bl	801601e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8005fc6:	68ba      	ldr	r2, [r7, #8]
 8005fc8:	4613      	mov	r3, r2
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	4413      	add	r3, r2
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f00f fff8 	bl	8015fc6 <_Znwj>
 8005fd6:	4603      	mov	r3, r0
      }
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3710      	adds	r7, #16
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8005fe0:	b480      	push	{r7}
 8005fe2:	b083      	sub	sp, #12
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	4618      	mov	r0, r3
 8005fec:	370c      	adds	r7, #12
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr

08005ff6 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>:
      deallocate(pointer __p, size_type)
 8005ff6:	b580      	push	{r7, lr}
 8005ff8:	b084      	sub	sp, #16
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	60f8      	str	r0, [r7, #12]
 8005ffe:	60b9      	str	r1, [r7, #8]
 8006000:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8006002:	68b8      	ldr	r0, [r7, #8]
 8006004:	f00f fff8 	bl	8015ff8 <_ZdlPv>
      }
 8006008:	bf00      	nop
 800600a:	3710      	adds	r7, #16
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _M_tp(std::move(__tp)) { }
 8006010:	b590      	push	{r4, r7, lr}
 8006012:	b083      	sub	sp, #12
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	6039      	str	r1, [r7, #0]
 800601a:	687c      	ldr	r4, [r7, #4]
 800601c:	6838      	ldr	r0, [r7, #0]
 800601e:	f7ff fd55 	bl	8005acc <_ZSt4moveIRNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8006022:	4603      	mov	r3, r0
 8006024:	4619      	mov	r1, r3
 8006026:	4620      	mov	r0, r4
 8006028:	f7ff fd5b 	bl	8005ae2 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	4618      	mov	r0, r3
 8006030:	370c      	adds	r7, #12
 8006032:	46bd      	mov	sp, r7
 8006034:	bd90      	pop	{r4, r7, pc}

08006036 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama7TextureEELb1EEC1ERKS2_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 8006036:	b580      	push	{r7, lr}
 8006038:	b082      	sub	sp, #8
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
 800603e:	6039      	str	r1, [r7, #0]
 8006040:	6839      	ldr	r1, [r7, #0]
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f7ff fcef 	bl	8005a26 <_ZNSaIN4tama7TextureEEC1ERKS1_>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	4618      	mov	r0, r3
 800604c:	3708      	adds	r7, #8
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}

08006052 <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE7destroyIS2_EEvPT_>:
	destroy(_Up* __p) { __p->~_Up(); }
 8006052:	b580      	push	{r7, lr}
 8006054:	b082      	sub	sp, #8
 8006056:	af00      	add	r7, sp, #0
 8006058:	6078      	str	r0, [r7, #4]
 800605a:	6039      	str	r1, [r7, #0]
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	6838      	ldr	r0, [r7, #0]
 8006064:	4798      	blx	r3
 8006066:	bf00      	nop
 8006068:	3708      	adds	r7, #8
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
	...

08006070 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8006070:	b480      	push	{r7}
 8006072:	b083      	sub	sp, #12
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8006078:	4b03      	ldr	r3, [pc, #12]	; (8006088 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv+0x18>)
 800607a:	4618      	mov	r0, r3
 800607c:	370c      	adds	r7, #12
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr
 8006086:	bf00      	nop
 8006088:	0ccccccc 	.word	0x0ccccccc

0800608c <_Z41__static_initialization_and_destruction_0ii>:
void tama::Text::recalculateDimensions()
{
    dimensions.x = (size + 1) * text.size();
    dimensions.y = (size + 1) * (std::count(text.begin(), text.end(), '\n') + 2) ;

}
 800608c:	b480      	push	{r7}
 800608e:	b083      	sub	sp, #12
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2b01      	cmp	r3, #1
 800609a:	f040 80de 	bne.w	800625a <_Z41__static_initialization_and_destruction_0ii+0x1ce>
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80060a4:	4293      	cmp	r3, r2
 80060a6:	f040 80d8 	bne.w	800625a <_Z41__static_initialization_and_destruction_0ii+0x1ce>
                const short X_data[] = {0x00,0x05,0x05,0x05,0x05,0x05,0x00,0x05,0x00,0x05,0x05,0x05,0x00,0x05,0x05,0x05,0x00,0x05,0x00,0x05,0x05,0x05,0x05,0x05,0x00,0x05,0x05,0x05,0x05,0x05,0x00,0x05,0x00,0x05,0x05,0x05,0x00,0x05,0x05,0x05,0x00,0x05,0x00,0x05,0x05,0x05,0x05,0x05,0x00};
                const short Y_data[] = {0x00,0x05,0x05,0x05,0x05,0x05,0x00,0x05,0x00,0x05,0x05,0x05,0x00,0x05,0x05,0x05,0x00,0x05,0x00,0x05,0x05,0x05,0x05,0x05,0x00,0x05,0x05,0x05,0x05,0x05,0x05,0x00,0x05,0x05,0x05,0x05,0x05,0x05,0x00,0x05,0x05,0x05,0x05,0x05,0x05,0x00,0x05,0x05,0x05};
                const short Z_data[] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x05,0x05,0x05,0x05,0x00,0x05,0x05,0x05,0x05,0x05,0x00,0x05,0x05,0x05,0x05,0x05,0x00,0x05,0x05,0x05,0x05,0x05,0x00,0x05,0x05,0x05,0x05,0x05,0x00,0x05,0x05,0x05,0x05,0x05,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
                const short SPC_data[] = {0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05};

                const TextureAsset J {const_cast<short *>(J_data), width, height};
 80060aa:	4b6f      	ldr	r3, [pc, #444]	; (8006268 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a6f      	ldr	r2, [pc, #444]	; (800626c <_Z41__static_initialization_and_destruction_0ii+0x1e0>)
 80060b0:	6053      	str	r3, [r2, #4]
 80060b2:	4b6f      	ldr	r3, [pc, #444]	; (8006270 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a6d      	ldr	r2, [pc, #436]	; (800626c <_Z41__static_initialization_and_destruction_0ii+0x1e0>)
 80060b8:	6093      	str	r3, [r2, #8]
                const TextureAsset U {const_cast<short *>(U_data), width, height};
 80060ba:	4b6b      	ldr	r3, [pc, #428]	; (8006268 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a6d      	ldr	r2, [pc, #436]	; (8006274 <_Z41__static_initialization_and_destruction_0ii+0x1e8>)
 80060c0:	6053      	str	r3, [r2, #4]
 80060c2:	4b6b      	ldr	r3, [pc, #428]	; (8006270 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a6b      	ldr	r2, [pc, #428]	; (8006274 <_Z41__static_initialization_and_destruction_0ii+0x1e8>)
 80060c8:	6093      	str	r3, [r2, #8]
                const TextureAsset D {const_cast<short *>(D_data), width, height};
 80060ca:	4b67      	ldr	r3, [pc, #412]	; (8006268 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a6a      	ldr	r2, [pc, #424]	; (8006278 <_Z41__static_initialization_and_destruction_0ii+0x1ec>)
 80060d0:	6053      	str	r3, [r2, #4]
 80060d2:	4b67      	ldr	r3, [pc, #412]	; (8006270 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a68      	ldr	r2, [pc, #416]	; (8006278 <_Z41__static_initialization_and_destruction_0ii+0x1ec>)
 80060d8:	6093      	str	r3, [r2, #8]
                const TextureAsset S {const_cast<short *>(S_data), width, height};
 80060da:	4b63      	ldr	r3, [pc, #396]	; (8006268 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a67      	ldr	r2, [pc, #412]	; (800627c <_Z41__static_initialization_and_destruction_0ii+0x1f0>)
 80060e0:	6053      	str	r3, [r2, #4]
 80060e2:	4b63      	ldr	r3, [pc, #396]	; (8006270 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a65      	ldr	r2, [pc, #404]	; (800627c <_Z41__static_initialization_and_destruction_0ii+0x1f0>)
 80060e8:	6093      	str	r3, [r2, #8]
                const TextureAsset T {const_cast<short *>(T_data), width, height};
 80060ea:	4b5f      	ldr	r3, [pc, #380]	; (8006268 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a64      	ldr	r2, [pc, #400]	; (8006280 <_Z41__static_initialization_and_destruction_0ii+0x1f4>)
 80060f0:	6053      	str	r3, [r2, #4]
 80060f2:	4b5f      	ldr	r3, [pc, #380]	; (8006270 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a62      	ldr	r2, [pc, #392]	; (8006280 <_Z41__static_initialization_and_destruction_0ii+0x1f4>)
 80060f8:	6093      	str	r3, [r2, #8]
                const TextureAsset I {const_cast<short *>(I_data), width, height};
 80060fa:	4b5b      	ldr	r3, [pc, #364]	; (8006268 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a61      	ldr	r2, [pc, #388]	; (8006284 <_Z41__static_initialization_and_destruction_0ii+0x1f8>)
 8006100:	6053      	str	r3, [r2, #4]
 8006102:	4b5b      	ldr	r3, [pc, #364]	; (8006270 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a5f      	ldr	r2, [pc, #380]	; (8006284 <_Z41__static_initialization_and_destruction_0ii+0x1f8>)
 8006108:	6093      	str	r3, [r2, #8]
                const TextureAsset A {const_cast<short *>(A_data), width, height};
 800610a:	4b57      	ldr	r3, [pc, #348]	; (8006268 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a5e      	ldr	r2, [pc, #376]	; (8006288 <_Z41__static_initialization_and_destruction_0ii+0x1fc>)
 8006110:	6053      	str	r3, [r2, #4]
 8006112:	4b57      	ldr	r3, [pc, #348]	; (8006270 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a5c      	ldr	r2, [pc, #368]	; (8006288 <_Z41__static_initialization_and_destruction_0ii+0x1fc>)
 8006118:	6093      	str	r3, [r2, #8]
                const TextureAsset B {const_cast<short *>(B_data), width, height};
 800611a:	4b53      	ldr	r3, [pc, #332]	; (8006268 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a5b      	ldr	r2, [pc, #364]	; (800628c <_Z41__static_initialization_and_destruction_0ii+0x200>)
 8006120:	6053      	str	r3, [r2, #4]
 8006122:	4b53      	ldr	r3, [pc, #332]	; (8006270 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a59      	ldr	r2, [pc, #356]	; (800628c <_Z41__static_initialization_and_destruction_0ii+0x200>)
 8006128:	6093      	str	r3, [r2, #8]
                const TextureAsset C {const_cast<short *>(C_data), width, height};
 800612a:	4b4f      	ldr	r3, [pc, #316]	; (8006268 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a58      	ldr	r2, [pc, #352]	; (8006290 <_Z41__static_initialization_and_destruction_0ii+0x204>)
 8006130:	6053      	str	r3, [r2, #4]
 8006132:	4b4f      	ldr	r3, [pc, #316]	; (8006270 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a56      	ldr	r2, [pc, #344]	; (8006290 <_Z41__static_initialization_and_destruction_0ii+0x204>)
 8006138:	6093      	str	r3, [r2, #8]
                const TextureAsset E {const_cast<short *>(E_data), width, height};
 800613a:	4b4b      	ldr	r3, [pc, #300]	; (8006268 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a55      	ldr	r2, [pc, #340]	; (8006294 <_Z41__static_initialization_and_destruction_0ii+0x208>)
 8006140:	6053      	str	r3, [r2, #4]
 8006142:	4b4b      	ldr	r3, [pc, #300]	; (8006270 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a53      	ldr	r2, [pc, #332]	; (8006294 <_Z41__static_initialization_and_destruction_0ii+0x208>)
 8006148:	6093      	str	r3, [r2, #8]
                const TextureAsset F {const_cast<short *>(F_data), width, height};
 800614a:	4b47      	ldr	r3, [pc, #284]	; (8006268 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a52      	ldr	r2, [pc, #328]	; (8006298 <_Z41__static_initialization_and_destruction_0ii+0x20c>)
 8006150:	6053      	str	r3, [r2, #4]
 8006152:	4b47      	ldr	r3, [pc, #284]	; (8006270 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a50      	ldr	r2, [pc, #320]	; (8006298 <_Z41__static_initialization_and_destruction_0ii+0x20c>)
 8006158:	6093      	str	r3, [r2, #8]
                const TextureAsset G {const_cast<short *>(G_data), width, height};
 800615a:	4b43      	ldr	r3, [pc, #268]	; (8006268 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a4f      	ldr	r2, [pc, #316]	; (800629c <_Z41__static_initialization_and_destruction_0ii+0x210>)
 8006160:	6053      	str	r3, [r2, #4]
 8006162:	4b43      	ldr	r3, [pc, #268]	; (8006270 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a4d      	ldr	r2, [pc, #308]	; (800629c <_Z41__static_initialization_and_destruction_0ii+0x210>)
 8006168:	6093      	str	r3, [r2, #8]
                const TextureAsset H {const_cast<short *>(H_data), width, height};
 800616a:	4b3f      	ldr	r3, [pc, #252]	; (8006268 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a4c      	ldr	r2, [pc, #304]	; (80062a0 <_Z41__static_initialization_and_destruction_0ii+0x214>)
 8006170:	6053      	str	r3, [r2, #4]
 8006172:	4b3f      	ldr	r3, [pc, #252]	; (8006270 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a4a      	ldr	r2, [pc, #296]	; (80062a0 <_Z41__static_initialization_and_destruction_0ii+0x214>)
 8006178:	6093      	str	r3, [r2, #8]
                const TextureAsset K {const_cast<short *>(K_data), width, height};
 800617a:	4b3b      	ldr	r3, [pc, #236]	; (8006268 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a49      	ldr	r2, [pc, #292]	; (80062a4 <_Z41__static_initialization_and_destruction_0ii+0x218>)
 8006180:	6053      	str	r3, [r2, #4]
 8006182:	4b3b      	ldr	r3, [pc, #236]	; (8006270 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a47      	ldr	r2, [pc, #284]	; (80062a4 <_Z41__static_initialization_and_destruction_0ii+0x218>)
 8006188:	6093      	str	r3, [r2, #8]
                const TextureAsset L {const_cast<short *>(L_data), width, height};
 800618a:	4b37      	ldr	r3, [pc, #220]	; (8006268 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a46      	ldr	r2, [pc, #280]	; (80062a8 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 8006190:	6053      	str	r3, [r2, #4]
 8006192:	4b37      	ldr	r3, [pc, #220]	; (8006270 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a44      	ldr	r2, [pc, #272]	; (80062a8 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 8006198:	6093      	str	r3, [r2, #8]
                const TextureAsset M {const_cast<short *>(M_data), width, height};
 800619a:	4b33      	ldr	r3, [pc, #204]	; (8006268 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a43      	ldr	r2, [pc, #268]	; (80062ac <_Z41__static_initialization_and_destruction_0ii+0x220>)
 80061a0:	6053      	str	r3, [r2, #4]
 80061a2:	4b33      	ldr	r3, [pc, #204]	; (8006270 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a41      	ldr	r2, [pc, #260]	; (80062ac <_Z41__static_initialization_and_destruction_0ii+0x220>)
 80061a8:	6093      	str	r3, [r2, #8]
                const TextureAsset N {const_cast<short *>(N_data), width, height};
 80061aa:	4b2f      	ldr	r3, [pc, #188]	; (8006268 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a40      	ldr	r2, [pc, #256]	; (80062b0 <_Z41__static_initialization_and_destruction_0ii+0x224>)
 80061b0:	6053      	str	r3, [r2, #4]
 80061b2:	4b2f      	ldr	r3, [pc, #188]	; (8006270 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a3e      	ldr	r2, [pc, #248]	; (80062b0 <_Z41__static_initialization_and_destruction_0ii+0x224>)
 80061b8:	6093      	str	r3, [r2, #8]
                const TextureAsset O {const_cast<short *>(O_data), width, height};
 80061ba:	4b2b      	ldr	r3, [pc, #172]	; (8006268 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a3d      	ldr	r2, [pc, #244]	; (80062b4 <_Z41__static_initialization_and_destruction_0ii+0x228>)
 80061c0:	6053      	str	r3, [r2, #4]
 80061c2:	4b2b      	ldr	r3, [pc, #172]	; (8006270 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a3b      	ldr	r2, [pc, #236]	; (80062b4 <_Z41__static_initialization_and_destruction_0ii+0x228>)
 80061c8:	6093      	str	r3, [r2, #8]
                const TextureAsset P {const_cast<short *>(P_data), width, height};
 80061ca:	4b27      	ldr	r3, [pc, #156]	; (8006268 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a3a      	ldr	r2, [pc, #232]	; (80062b8 <_Z41__static_initialization_and_destruction_0ii+0x22c>)
 80061d0:	6053      	str	r3, [r2, #4]
 80061d2:	4b27      	ldr	r3, [pc, #156]	; (8006270 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a38      	ldr	r2, [pc, #224]	; (80062b8 <_Z41__static_initialization_and_destruction_0ii+0x22c>)
 80061d8:	6093      	str	r3, [r2, #8]
                const TextureAsset Q {const_cast<short *>(Q_data), width, height};
 80061da:	4b23      	ldr	r3, [pc, #140]	; (8006268 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a37      	ldr	r2, [pc, #220]	; (80062bc <_Z41__static_initialization_and_destruction_0ii+0x230>)
 80061e0:	6053      	str	r3, [r2, #4]
 80061e2:	4b23      	ldr	r3, [pc, #140]	; (8006270 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a35      	ldr	r2, [pc, #212]	; (80062bc <_Z41__static_initialization_and_destruction_0ii+0x230>)
 80061e8:	6093      	str	r3, [r2, #8]
                const TextureAsset R {const_cast<short *>(R_data), width, height};
 80061ea:	4b1f      	ldr	r3, [pc, #124]	; (8006268 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a34      	ldr	r2, [pc, #208]	; (80062c0 <_Z41__static_initialization_and_destruction_0ii+0x234>)
 80061f0:	6053      	str	r3, [r2, #4]
 80061f2:	4b1f      	ldr	r3, [pc, #124]	; (8006270 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a32      	ldr	r2, [pc, #200]	; (80062c0 <_Z41__static_initialization_and_destruction_0ii+0x234>)
 80061f8:	6093      	str	r3, [r2, #8]
                const TextureAsset W {const_cast<short *>(W_data), width, height};
 80061fa:	4b1b      	ldr	r3, [pc, #108]	; (8006268 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a31      	ldr	r2, [pc, #196]	; (80062c4 <_Z41__static_initialization_and_destruction_0ii+0x238>)
 8006200:	6053      	str	r3, [r2, #4]
 8006202:	4b1b      	ldr	r3, [pc, #108]	; (8006270 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a2f      	ldr	r2, [pc, #188]	; (80062c4 <_Z41__static_initialization_and_destruction_0ii+0x238>)
 8006208:	6093      	str	r3, [r2, #8]
                const TextureAsset V {const_cast<short *>(V_data), width, height};
 800620a:	4b17      	ldr	r3, [pc, #92]	; (8006268 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a2e      	ldr	r2, [pc, #184]	; (80062c8 <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 8006210:	6053      	str	r3, [r2, #4]
 8006212:	4b17      	ldr	r3, [pc, #92]	; (8006270 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a2c      	ldr	r2, [pc, #176]	; (80062c8 <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 8006218:	6093      	str	r3, [r2, #8]
                const TextureAsset X {const_cast<short *>(X_data), width, height};
 800621a:	4b13      	ldr	r3, [pc, #76]	; (8006268 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a2b      	ldr	r2, [pc, #172]	; (80062cc <_Z41__static_initialization_and_destruction_0ii+0x240>)
 8006220:	6053      	str	r3, [r2, #4]
 8006222:	4b13      	ldr	r3, [pc, #76]	; (8006270 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a29      	ldr	r2, [pc, #164]	; (80062cc <_Z41__static_initialization_and_destruction_0ii+0x240>)
 8006228:	6093      	str	r3, [r2, #8]
                const TextureAsset Y {const_cast<short *>(Y_data), width, height};
 800622a:	4b0f      	ldr	r3, [pc, #60]	; (8006268 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a28      	ldr	r2, [pc, #160]	; (80062d0 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8006230:	6053      	str	r3, [r2, #4]
 8006232:	4b0f      	ldr	r3, [pc, #60]	; (8006270 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a26      	ldr	r2, [pc, #152]	; (80062d0 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8006238:	6093      	str	r3, [r2, #8]
                const TextureAsset Z {const_cast<short *>(Z_data), width, height};
 800623a:	4b0b      	ldr	r3, [pc, #44]	; (8006268 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a25      	ldr	r2, [pc, #148]	; (80062d4 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 8006240:	6053      	str	r3, [r2, #4]
 8006242:	4b0b      	ldr	r3, [pc, #44]	; (8006270 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a23      	ldr	r2, [pc, #140]	; (80062d4 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 8006248:	6093      	str	r3, [r2, #8]
                const TextureAsset SPC {const_cast<short *>(SPC_data), width, height};
 800624a:	4b07      	ldr	r3, [pc, #28]	; (8006268 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a22      	ldr	r2, [pc, #136]	; (80062d8 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 8006250:	6053      	str	r3, [r2, #4]
 8006252:	4b07      	ldr	r3, [pc, #28]	; (8006270 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a20      	ldr	r2, [pc, #128]	; (80062d8 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 8006258:	6093      	str	r3, [r2, #8]
 800625a:	bf00      	nop
 800625c:	370c      	adds	r7, #12
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr
 8006266:	bf00      	nop
 8006268:	2000000c 	.word	0x2000000c
 800626c:	20000014 	.word	0x20000014
 8006270:	20000010 	.word	0x20000010
 8006274:	20000020 	.word	0x20000020
 8006278:	2000002c 	.word	0x2000002c
 800627c:	20000038 	.word	0x20000038
 8006280:	20000044 	.word	0x20000044
 8006284:	20000050 	.word	0x20000050
 8006288:	2000005c 	.word	0x2000005c
 800628c:	20000068 	.word	0x20000068
 8006290:	20000074 	.word	0x20000074
 8006294:	20000080 	.word	0x20000080
 8006298:	2000008c 	.word	0x2000008c
 800629c:	20000098 	.word	0x20000098
 80062a0:	200000a4 	.word	0x200000a4
 80062a4:	200000b0 	.word	0x200000b0
 80062a8:	200000bc 	.word	0x200000bc
 80062ac:	200000c8 	.word	0x200000c8
 80062b0:	200000d4 	.word	0x200000d4
 80062b4:	200000e0 	.word	0x200000e0
 80062b8:	200000ec 	.word	0x200000ec
 80062bc:	200000f8 	.word	0x200000f8
 80062c0:	20000104 	.word	0x20000104
 80062c4:	20000110 	.word	0x20000110
 80062c8:	2000011c 	.word	0x2000011c
 80062cc:	20000128 	.word	0x20000128
 80062d0:	20000134 	.word	0x20000134
 80062d4:	20000140 	.word	0x20000140
 80062d8:	2000014c 	.word	0x2000014c

080062dc <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 80062dc:	b580      	push	{r7, lr}
 80062de:	b082      	sub	sp, #8
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	4a08      	ldr	r2, [pc, #32]	; (8006308 <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev+0x2c>)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	601a      	str	r2, [r3, #0]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	330c      	adds	r3, #12
 80062ee:	4618      	mov	r0, r3
 80062f0:	f7ff fd25 	bl	8005d3e <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	4618      	mov	r0, r3
 80062f8:	f7fb fdd0 	bl	8001e9c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	4618      	mov	r0, r3
 8006300:	3708      	adds	r7, #8
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
 8006306:	bf00      	nop
 8006308:	08017094 	.word	0x08017094

0800630c <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
 800630c:	b580      	push	{r7, lr}
 800630e:	b082      	sub	sp, #8
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f7ff ffe1 	bl	80062dc <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
 800631a:	2114      	movs	r1, #20
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f00f fe50 	bl	8015fc2 <_ZdlPvj>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	4618      	mov	r0, r3
 8006326:	3708      	adds	r7, #8
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}

0800632c <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      _M_dispose() noexcept
 800632c:	b580      	push	{r7, lr}
 800632e:	b082      	sub	sp, #8
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	330c      	adds	r3, #12
 8006338:	4618      	mov	r0, r3
 800633a:	f000 f840 	bl	80063be <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>
 800633e:	4602      	mov	r2, r0
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	691b      	ldr	r3, [r3, #16]
 8006344:	4619      	mov	r1, r3
 8006346:	4610      	mov	r0, r2
 8006348:	f7ff fd49 	bl	8005dde <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>
 800634c:	bf00      	nop
 800634e:	3708      	adds	r7, #8
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8006354:	b580      	push	{r7, lr}
 8006356:	b086      	sub	sp, #24
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	330c      	adds	r3, #12
 8006360:	4618      	mov	r0, r3
 8006362:	f000 f839 	bl	80063d8 <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>
 8006366:	4602      	mov	r2, r0
 8006368:	f107 0314 	add.w	r3, r7, #20
 800636c:	4611      	mov	r1, r2
 800636e:	4618      	mov	r0, r3
 8006370:	f7ff fc7d 	bl	8005c6e <_ZNSaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8006374:	f107 0114 	add.w	r1, r7, #20
 8006378:	f107 030c 	add.w	r3, r7, #12
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	4618      	mov	r0, r3
 8006380:	f7ff fda8 	bl	8005ed4 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
	this->~_Sp_counted_deleter();
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f7ff ffa9 	bl	80062dc <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 800638a:	f107 030c 	add.w	r3, r7, #12
 800638e:	4618      	mov	r0, r3
 8006390:	f7ff fc99 	bl	8005cc6 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	__allocator_type __a(_M_impl._M_alloc());
 8006394:	f107 0314 	add.w	r3, r7, #20
 8006398:	4618      	mov	r0, r3
 800639a:	f7ff fc75 	bl	8005c88 <_ZNSaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
      }
 800639e:	bf00      	nop
 80063a0:	3718      	adds	r7, #24
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}

080063a6 <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept
 80063a6:	b480      	push	{r7}
 80063a8:	b083      	sub	sp, #12
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
 80063ae:	6039      	str	r1, [r7, #0]
        return nullptr;
 80063b0:	2300      	movs	r3, #0
      }
 80063b2:	4618      	mov	r0, r3
 80063b4:	370c      	adds	r7, #12
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr

080063be <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 80063be:	b580      	push	{r7, lr}
 80063c0:	b082      	sub	sp, #8
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	6078      	str	r0, [r7, #4]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	4618      	mov	r0, r3
 80063ca:	f000 f813 	bl	80063f4 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>
 80063ce:	4603      	mov	r3, r0
 80063d0:	4618      	mov	r0, r3
 80063d2:	3708      	adds	r7, #8
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 80063d8:	b580      	push	{r7, lr}
 80063da:	b082      	sub	sp, #8
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	3301      	adds	r3, #1
 80063e4:	4618      	mov	r0, r3
 80063e6:	f000 f810 	bl	800640a <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama7TextureEELb1EE6_S_getERS3_>
 80063ea:	4603      	mov	r3, r0
 80063ec:	4618      	mov	r0, r3
 80063ee:	3708      	adds	r7, #8
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>:
      _S_get(_Sp_ebo_helper& __eboh)
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
      { return __eboh._M_tp; }
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	4618      	mov	r0, r3
 8006400:	370c      	adds	r7, #12
 8006402:	46bd      	mov	sp, r7
 8006404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006408:	4770      	bx	lr

0800640a <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama7TextureEELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 800640a:	b480      	push	{r7}
 800640c:	b083      	sub	sp, #12
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4618      	mov	r0, r3
 8006416:	370c      	adds	r7, #12
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <_GLOBAL__sub_I__ZN4tama5asset4font8standard5widthE>:
 8006420:	b580      	push	{r7, lr}
 8006422:	af00      	add	r7, sp, #0
 8006424:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006428:	2001      	movs	r0, #1
 800642a:	f7ff fe2f 	bl	800608c <_Z41__static_initialization_and_destruction_0ii>
 800642e:	bd80      	pop	{r7, pc}

08006430 <_ZN4tama14ChangeObserverC1Ev>:
#ifndef VPET_CHANGEOBSERVER_H
#define VPET_CHANGEOBSERVER_H

namespace tama
{
    class ChangeObserver
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	4a04      	ldr	r2, [pc, #16]	; (800644c <_ZN4tama14ChangeObserverC1Ev+0x1c>)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	601a      	str	r2, [r3, #0]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4618      	mov	r0, r3
 8006442:	370c      	adds	r7, #12
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr
 800644c:	080170d8 	.word	0x080170d8

08006450 <_ZN4tama5SceneC1Ev>:
// Created by grzegorz on 3/28/21.
//

#include "Scene.h"

tama::Scene::Scene()
 8006450:	b590      	push	{r4, r7, lr}
 8006452:	b085      	sub	sp, #20
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4618      	mov	r0, r3
 800645c:	f7ff ffe8 	bl	8006430 <_ZN4tama14ChangeObserverC1Ev>
 8006460:	4a15      	ldr	r2, [pc, #84]	; (80064b8 <_ZN4tama5SceneC1Ev+0x68>)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	601a      	str	r2, [r3, #0]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	3304      	adds	r3, #4
 800646a:	4618      	mov	r0, r3
 800646c:	f7ff f836 	bl	80054dc <_ZNSt10shared_ptrIN4tama14ChangeObserverEEC1Ev>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	330c      	adds	r3, #12
 8006474:	4618      	mov	r0, r3
 8006476:	f000 f900 	bl	800667a <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EEC1Ev>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2254      	movs	r2, #84	; 0x54
 800647e:	619a      	str	r2, [r3, #24]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2230      	movs	r2, #48	; 0x30
 8006484:	61da      	str	r2, [r3, #28]
{
    observer = nullptr;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	1d1c      	adds	r4, r3, #4
 800648a:	f107 0308 	add.w	r3, r7, #8
 800648e:	2100      	movs	r1, #0
 8006490:	4618      	mov	r0, r3
 8006492:	f7ff f830 	bl	80054f6 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEC1EDn>
 8006496:	f107 0308 	add.w	r3, r7, #8
 800649a:	4619      	mov	r1, r3
 800649c:	4620      	mov	r0, r4
 800649e:	f7ff f842 	bl	8005526 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEaSEOS2_>
 80064a2:	f107 0308 	add.w	r3, r7, #8
 80064a6:	4618      	mov	r0, r3
 80064a8:	f7fc f9ed 	bl	8002886 <_ZNSt10shared_ptrIN4tama14ChangeObserverEED1Ev>
}
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	4618      	mov	r0, r3
 80064b0:	3714      	adds	r7, #20
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd90      	pop	{r4, r7, pc}
 80064b6:	bf00      	nop
 80064b8:	080170cc 	.word	0x080170cc

080064bc <_ZN4tama5Scene11addDrawableESt10shared_ptrINS_8DrawableEE>:
{
    this->observer = observer;
}

void tama::Scene::addDrawable(std::shared_ptr<Drawable> drawable)
{
 80064bc:	b5b0      	push	{r4, r5, r7, lr}
 80064be:	b086      	sub	sp, #24
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	6039      	str	r1, [r7, #0]
    this->drawables.push_back(drawable);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	330c      	adds	r3, #12
 80064ca:	6839      	ldr	r1, [r7, #0]
 80064cc:	4618      	mov	r0, r3
 80064ce:	f000 f8e1 	bl	8006694 <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE9push_backERKS3_>
    drawable->setChangeObserver(std::make_shared<Scene>(*this));
 80064d2:	6838      	ldr	r0, [r7, #0]
 80064d4:	f000 f904 	bl	80066e0 <_ZNKSt19__shared_ptr_accessIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80064d8:	4605      	mov	r5, r0
 80064da:	682b      	ldr	r3, [r5, #0]
 80064dc:	331c      	adds	r3, #28
 80064de:	681c      	ldr	r4, [r3, #0]
 80064e0:	f107 0310 	add.w	r3, r7, #16
 80064e4:	6879      	ldr	r1, [r7, #4]
 80064e6:	4618      	mov	r0, r3
 80064e8:	f000 f911 	bl	800670e <_ZSt11make_sharedIN4tama5SceneEJRS1_EESt10shared_ptrIT_EDpOT0_>
 80064ec:	f107 0210 	add.w	r2, r7, #16
 80064f0:	f107 0308 	add.w	r3, r7, #8
 80064f4:	4611      	mov	r1, r2
 80064f6:	4618      	mov	r0, r3
 80064f8:	f000 f926 	bl	8006748 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEC1INS0_5SceneEvEEOS_IT_E>
 80064fc:	f107 0308 	add.w	r3, r7, #8
 8006500:	4619      	mov	r1, r3
 8006502:	4628      	mov	r0, r5
 8006504:	47a0      	blx	r4
 8006506:	f107 0308 	add.w	r3, r7, #8
 800650a:	4618      	mov	r0, r3
 800650c:	f7fc f9bb 	bl	8002886 <_ZNSt10shared_ptrIN4tama14ChangeObserverEED1Ev>
 8006510:	f107 0310 	add.w	r3, r7, #16
 8006514:	4618      	mov	r0, r3
 8006516:	f7fb fbe9 	bl	8001cec <_ZNSt10shared_ptrIN4tama5SceneEED1Ev>
}
 800651a:	bf00      	nop
 800651c:	3718      	adds	r7, #24
 800651e:	46bd      	mov	sp, r7
 8006520:	bdb0      	pop	{r4, r5, r7, pc}

08006522 <_ZNSt12__shared_ptrIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8006522:	b580      	push	{r7, lr}
 8006524:	b082      	sub	sp, #8
 8006526:	af00      	add	r7, sp, #0
 8006528:	6078      	str	r0, [r7, #4]
 800652a:	6039      	str	r1, [r7, #0]
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	601a      	str	r2, [r3, #0]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	1d1a      	adds	r2, r3, #4
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	3304      	adds	r3, #4
 800653c:	4619      	mov	r1, r3
 800653e:	4610      	mov	r0, r2
 8006540:	f7fa fa60 	bl	8000a04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	4618      	mov	r0, r3
 8006548:	3708      	adds	r7, #8
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}

0800654e <_ZNSt10shared_ptrIN4tama8DrawableEEC1ERKS2_>:
      shared_ptr(const shared_ptr&) noexcept = default;
 800654e:	b580      	push	{r7, lr}
 8006550:	b082      	sub	sp, #8
 8006552:	af00      	add	r7, sp, #0
 8006554:	6078      	str	r0, [r7, #4]
 8006556:	6039      	str	r1, [r7, #0]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	683a      	ldr	r2, [r7, #0]
 800655c:	4611      	mov	r1, r2
 800655e:	4618      	mov	r0, r3
 8006560:	f7ff ffdf 	bl	8006522 <_ZNSt12__shared_ptrIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	4618      	mov	r0, r3
 8006568:	3708      	adds	r7, #8
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}

0800656e <_ZN4tama5Scene12getSceneDataEv>:
{

}

std::shared_ptr<tama::Texture> tama::Scene::getSceneData()
{
 800656e:	b590      	push	{r4, r7, lr}
 8006570:	b08d      	sub	sp, #52	; 0x34
 8006572:	af00      	add	r7, sp, #0
 8006574:	6078      	str	r0, [r7, #4]
 8006576:	6039      	str	r1, [r7, #0]
    std::shared_ptr<tama::Texture> texture = std::make_shared<tama::Texture>(width, height);
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	f103 0118 	add.w	r1, r3, #24
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	f103 021c 	add.w	r2, r3, #28
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	4618      	mov	r0, r3
 8006588:	f000 f8fc 	bl	8006784 <_ZSt11make_sharedIN4tama7TextureEJRjS2_EESt10shared_ptrIT_EDpOT0_>

    for (auto drawable : drawables)
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	330c      	adds	r3, #12
 8006590:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006592:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006594:	f000 f918 	bl	80067c8 <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE5beginEv>
 8006598:	4603      	mov	r3, r0
 800659a:	613b      	str	r3, [r7, #16]
 800659c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800659e:	f000 f923 	bl	80067e8 <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE3endEv>
 80065a2:	4603      	mov	r3, r0
 80065a4:	60fb      	str	r3, [r7, #12]
 80065a6:	f107 020c 	add.w	r2, r7, #12
 80065aa:	f107 0310 	add.w	r3, r7, #16
 80065ae:	4611      	mov	r1, r2
 80065b0:	4618      	mov	r0, r3
 80065b2:	f000 f92a 	bl	800680a <_ZN9__gnu_cxxneIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEEbRKNS_17__normal_iteratorIT_T0_EESE_>
 80065b6:	4603      	mov	r3, r0
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d04f      	beq.n	800665c <_ZN4tama5Scene12getSceneDataEv+0xee>
 80065bc:	f107 0310 	add.w	r3, r7, #16
 80065c0:	4618      	mov	r0, r3
 80065c2:	f000 f94b 	bl	800685c <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEdeEv>
 80065c6:	4602      	mov	r2, r0
 80065c8:	f107 0314 	add.w	r3, r7, #20
 80065cc:	4611      	mov	r1, r2
 80065ce:	4618      	mov	r0, r3
 80065d0:	f7ff ffbd 	bl	800654e <_ZNSt10shared_ptrIN4tama8DrawableEEC1ERKS2_>
    {
        if (drawable->isVisible())
 80065d4:	f107 0314 	add.w	r3, r7, #20
 80065d8:	4618      	mov	r0, r3
 80065da:	f000 f881 	bl	80066e0 <_ZNKSt19__shared_ptr_accessIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80065de:	4602      	mov	r2, r0
 80065e0:	6813      	ldr	r3, [r2, #0]
 80065e2:	3320      	adds	r3, #32
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4610      	mov	r0, r2
 80065e8:	4798      	blx	r3
 80065ea:	4603      	mov	r3, r0
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d02a      	beq.n	8006646 <_ZN4tama5Scene12getSceneDataEv+0xd8>
        {
            texture->insertAt(drawable->getPosition(), drawable->getTexture());
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f7ff f987 	bl	8005904 <_ZNKSt19__shared_ptr_accessIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80065f6:	4604      	mov	r4, r0
 80065f8:	f107 0314 	add.w	r3, r7, #20
 80065fc:	4618      	mov	r0, r3
 80065fe:	f000 f86f 	bl	80066e0 <_ZNKSt19__shared_ptr_accessIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8006602:	4602      	mov	r2, r0
 8006604:	6813      	ldr	r3, [r2, #0]
 8006606:	330c      	adds	r3, #12
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f107 001c 	add.w	r0, r7, #28
 800660e:	4611      	mov	r1, r2
 8006610:	4798      	blx	r3
 8006612:	f107 0314 	add.w	r3, r7, #20
 8006616:	4618      	mov	r0, r3
 8006618:	f000 f862 	bl	80066e0 <_ZNKSt19__shared_ptr_accessIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800661c:	4602      	mov	r2, r0
 800661e:	6813      	ldr	r3, [r2, #0]
 8006620:	3308      	adds	r3, #8
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006628:	4611      	mov	r1, r2
 800662a:	4798      	blx	r3
 800662c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006630:	f107 021c 	add.w	r2, r7, #28
 8006634:	ca06      	ldmia	r2, {r1, r2}
 8006636:	4620      	mov	r0, r4
 8006638:	f7ff f89c 	bl	8005774 <_ZN4tama7Texture8insertAtENS_5Vec2dESt10shared_ptrIS0_E>
 800663c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006640:	4618      	mov	r0, r3
 8006642:	f7fc fef4 	bl	800342e <_ZNSt10shared_ptrIN4tama7TextureEED1Ev>
    for (auto drawable : drawables)
 8006646:	f107 0314 	add.w	r3, r7, #20
 800664a:	4618      	mov	r0, r3
 800664c:	f7fc fa38 	bl	8002ac0 <_ZNSt10shared_ptrIN4tama8DrawableEED1Ev>
 8006650:	f107 0310 	add.w	r3, r7, #16
 8006654:	4618      	mov	r0, r3
 8006656:	f000 f8f0 	bl	800683a <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEppEv>
 800665a:	e7a4      	b.n	80065a6 <_ZN4tama5Scene12getSceneDataEv+0x38>
        }
    }
    return texture;
 800665c:	bf00      	nop
}
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	3734      	adds	r7, #52	; 0x34
 8006662:	46bd      	mov	sp, r7
 8006664:	bd90      	pop	{r4, r7, pc}

08006666 <_ZN4tama5Scene8onChangeEv>:

void tama::Scene::onChange()
{
 8006666:	b480      	push	{r7}
 8006668:	b083      	sub	sp, #12
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]

}
 800666e:	bf00      	nop
 8006670:	370c      	adds	r7, #12
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr

0800667a <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EEC1Ev>:
      vector()
 800667a:	b580      	push	{r7, lr}
 800667c:	b082      	sub	sp, #8
 800667e:	af00      	add	r7, sp, #0
 8006680:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4618      	mov	r0, r3
 8006686:	f000 f8f5 	bl	8006874 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EEC1Ev>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	4618      	mov	r0, r3
 800668e:	3708      	adds	r7, #8
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}

08006694 <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE9push_backERKS3_>:
      push_back(const value_type& __x)
 8006694:	b580      	push	{r7, lr}
 8006696:	b082      	sub	sp, #8
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	685a      	ldr	r2, [r3, #4]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d00d      	beq.n	80066c6 <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE9push_backERKS3_+0x32>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	683a      	ldr	r2, [r7, #0]
 80066b2:	4619      	mov	r1, r3
 80066b4:	f000 f8f6 	bl	80068a4 <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama8DrawableEEEE9constructIS3_JRKS3_EEEvRS4_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	f103 0208 	add.w	r2, r3, #8
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	605a      	str	r2, [r3, #4]
      }
 80066c4:	e008      	b.n	80066d8 <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE9push_backERKS3_+0x44>
	  _M_realloc_insert(end(), __x);
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f000 f88e 	bl	80067e8 <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE3endEv>
 80066cc:	4603      	mov	r3, r0
 80066ce:	683a      	ldr	r2, [r7, #0]
 80066d0:	4619      	mov	r1, r3
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 f8fa 	bl	80068cc <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_>
      }
 80066d8:	bf00      	nop
 80066da:	3708      	adds	r7, #8
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <_ZNKSt19__shared_ptr_accessIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b082      	sub	sp, #8
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
	return _M_get();
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f000 f97b 	bl	80069e4 <_ZNKSt19__shared_ptr_accessIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 80066ee:	4603      	mov	r3, r0
      }
 80066f0:	4618      	mov	r0, r3
 80066f2:	3708      	adds	r7, #8
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}

080066f8 <_ZSt7forwardIRN4tama5SceneEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80066f8:	b480      	push	{r7}
 80066fa:	b083      	sub	sp, #12
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	4618      	mov	r0, r3
 8006704:	370c      	adds	r7, #12
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr

0800670e <_ZSt11make_sharedIN4tama5SceneEJRS1_EESt10shared_ptrIT_EDpOT0_>:
    make_shared(_Args&&... __args)
 800670e:	b580      	push	{r7, lr}
 8006710:	b084      	sub	sp, #16
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
 8006716:	6039      	str	r1, [r7, #0]
				       std::forward<_Args>(__args)...);
 8006718:	f107 030c 	add.w	r3, r7, #12
 800671c:	4618      	mov	r0, r3
 800671e:	f7fb fbee 	bl	8001efe <_ZNSaIN4tama5SceneEEC1Ev>
 8006722:	6838      	ldr	r0, [r7, #0]
 8006724:	f7ff ffe8 	bl	80066f8 <_ZSt7forwardIRN4tama5SceneEEOT_RNSt16remove_referenceIS3_E4typeE>
 8006728:	4602      	mov	r2, r0
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f107 010c 	add.w	r1, r7, #12
 8006730:	4618      	mov	r0, r3
 8006732:	f000 f963 	bl	80069fc <_ZSt15allocate_sharedIN4tama5SceneESaIS1_EJRS1_EESt10shared_ptrIT_ERKT0_DpOT1_>
 8006736:	f107 030c 	add.w	r3, r7, #12
 800673a:	4618      	mov	r0, r3
 800673c:	f7fb fbeb 	bl	8001f16 <_ZNSaIN4tama5SceneEED1Ev>
    }
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	3710      	adds	r7, #16
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}

08006748 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEC1INS0_5SceneEvEEOS_IT_E>:
	shared_ptr(shared_ptr<_Yp>&& __r) noexcept
 8006748:	b590      	push	{r4, r7, lr}
 800674a:	b083      	sub	sp, #12
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 8006752:	687c      	ldr	r4, [r7, #4]
 8006754:	6838      	ldr	r0, [r7, #0]
 8006756:	f7fb fb82 	bl	8001e5e <_ZSt4moveIRSt10shared_ptrIN4tama5SceneEEEONSt16remove_referenceIT_E4typeEOS6_>
 800675a:	4603      	mov	r3, r0
 800675c:	4619      	mov	r1, r3
 800675e:	4620      	mov	r0, r4
 8006760:	f000 f95f 	bl	8006a22 <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEC1INS0_5SceneEvEEOS_IT_LS3_0EE>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	4618      	mov	r0, r3
 8006768:	370c      	adds	r7, #12
 800676a:	46bd      	mov	sp, r7
 800676c:	bd90      	pop	{r4, r7, pc}

0800676e <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800676e:	b480      	push	{r7}
 8006770:	b083      	sub	sp, #12
 8006772:	af00      	add	r7, sp, #0
 8006774:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	4618      	mov	r0, r3
 800677a:	370c      	adds	r7, #12
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr

08006784 <_ZSt11make_sharedIN4tama7TextureEJRjS2_EESt10shared_ptrIT_EDpOT0_>:
    make_shared(_Args&&... __args)
 8006784:	b590      	push	{r4, r7, lr}
 8006786:	b087      	sub	sp, #28
 8006788:	af00      	add	r7, sp, #0
 800678a:	60f8      	str	r0, [r7, #12]
 800678c:	60b9      	str	r1, [r7, #8]
 800678e:	607a      	str	r2, [r7, #4]
				       std::forward<_Args>(__args)...);
 8006790:	f107 0314 	add.w	r3, r7, #20
 8006794:	4618      	mov	r0, r3
 8006796:	f7ff f8ef 	bl	8005978 <_ZNSaIN4tama7TextureEEC1Ev>
 800679a:	68b8      	ldr	r0, [r7, #8]
 800679c:	f7ff ffe7 	bl	800676e <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 80067a0:	4604      	mov	r4, r0
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f7ff ffe3 	bl	800676e <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 80067a8:	4603      	mov	r3, r0
 80067aa:	68f8      	ldr	r0, [r7, #12]
 80067ac:	f107 0114 	add.w	r1, r7, #20
 80067b0:	4622      	mov	r2, r4
 80067b2:	f000 f954 	bl	8006a5e <_ZSt15allocate_sharedIN4tama7TextureESaIS1_EJRjS3_EESt10shared_ptrIT_ERKT0_DpOT1_>
 80067b6:	f107 0314 	add.w	r3, r7, #20
 80067ba:	4618      	mov	r0, r3
 80067bc:	f7ff f8e8 	bl	8005990 <_ZNSaIN4tama7TextureEED1Ev>
    }
 80067c0:	68f8      	ldr	r0, [r7, #12]
 80067c2:	371c      	adds	r7, #28
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd90      	pop	{r4, r7, pc}

080067c8 <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b084      	sub	sp, #16
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	f107 030c 	add.w	r3, r7, #12
 80067d6:	4611      	mov	r1, r2
 80067d8:	4618      	mov	r0, r3
 80067da:	f000 f95a 	bl	8006a92 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEC1ERKS5_>
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	4618      	mov	r0, r3
 80067e2:	3710      	adds	r7, #16
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	1d1a      	adds	r2, r3, #4
 80067f4:	f107 030c 	add.w	r3, r7, #12
 80067f8:	4611      	mov	r1, r2
 80067fa:	4618      	mov	r0, r3
 80067fc:	f000 f949 	bl	8006a92 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEC1ERKS5_>
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	4618      	mov	r0, r3
 8006804:	3710      	adds	r7, #16
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}

0800680a <_ZN9__gnu_cxxneIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEEbRKNS_17__normal_iteratorIT_T0_EESE_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 800680a:	b590      	push	{r4, r7, lr}
 800680c:	b083      	sub	sp, #12
 800680e:	af00      	add	r7, sp, #0
 8006810:	6078      	str	r0, [r7, #4]
 8006812:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f000 f94c 	bl	8006ab2 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEE4baseEv>
 800681a:	4603      	mov	r3, r0
 800681c:	681c      	ldr	r4, [r3, #0]
 800681e:	6838      	ldr	r0, [r7, #0]
 8006820:	f000 f947 	bl	8006ab2 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEE4baseEv>
 8006824:	4603      	mov	r3, r0
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	429c      	cmp	r4, r3
 800682a:	bf14      	ite	ne
 800682c:	2301      	movne	r3, #1
 800682e:	2300      	moveq	r3, #0
 8006830:	b2db      	uxtb	r3, r3
 8006832:	4618      	mov	r0, r3
 8006834:	370c      	adds	r7, #12
 8006836:	46bd      	mov	sp, r7
 8006838:	bd90      	pop	{r4, r7, pc}

0800683a <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800683a:	b480      	push	{r7}
 800683c:	b083      	sub	sp, #12
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
	++_M_current;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f103 0208 	add.w	r2, r3, #8
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	601a      	str	r2, [r3, #0]
	return *this;
 800684e:	687b      	ldr	r3, [r7, #4]
      }
 8006850:	4618      	mov	r0, r3
 8006852:	370c      	adds	r7, #12
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr

0800685c <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800685c:	b480      	push	{r7}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4618      	mov	r0, r3
 800686a:	370c      	adds	r7, #12
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EEC1Ev>:
      _Vector_base()
 8006874:	b580      	push	{r7, lr}
 8006876:	b082      	sub	sp, #8
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	4618      	mov	r0, r3
 8006880:	f000 f922 	bl	8006ac8 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE12_Vector_implC1Ev>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	4618      	mov	r0, r3
 8006888:	3708      	adds	r7, #8
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}

0800688e <_ZSt7forwardIRKSt10shared_ptrIN4tama8DrawableEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800688e:	b480      	push	{r7}
 8006890:	b083      	sub	sp, #12
 8006892:	af00      	add	r7, sp, #0
 8006894:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	4618      	mov	r0, r3
 800689a:	370c      	adds	r7, #12
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr

080068a4 <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama8DrawableEEEE9constructIS3_JRKS3_EEEvRS4_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b084      	sub	sp, #16
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	60f8      	str	r0, [r7, #12]
 80068ac:	60b9      	str	r1, [r7, #8]
 80068ae:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f7ff ffec 	bl	800688e <_ZSt7forwardIRKSt10shared_ptrIN4tama8DrawableEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80068b6:	4603      	mov	r3, r0
 80068b8:	461a      	mov	r2, r3
 80068ba:	68b9      	ldr	r1, [r7, #8]
 80068bc:	68f8      	ldr	r0, [r7, #12]
 80068be:	f000 f918 	bl	8006af2 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEE9constructIS4_JRKS4_EEEvPT_DpOT0_>
 80068c2:	bf00      	nop
 80068c4:	3710      	adds	r7, #16
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
	...

080068cc <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_>:
      vector<_Tp, _Alloc>::
 80068cc:	b5b0      	push	{r4, r5, r7, lr}
 80068ce:	b08a      	sub	sp, #40	; 0x28
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	60f8      	str	r0, [r7, #12]
 80068d4:	60b9      	str	r1, [r7, #8]
 80068d6:	607a      	str	r2, [r7, #4]
      const size_type __len =
 80068d8:	4a41      	ldr	r2, [pc, #260]	; (80069e0 <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x114>)
 80068da:	2101      	movs	r1, #1
 80068dc:	68f8      	ldr	r0, [r7, #12]
 80068de:	f000 f922 	bl	8006b26 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE12_M_check_lenEjPKc>
 80068e2:	6278      	str	r0, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 80068e4:	68f8      	ldr	r0, [r7, #12]
 80068e6:	f7ff ff6f 	bl	80067c8 <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE5beginEv>
 80068ea:	4603      	mov	r3, r0
 80068ec:	617b      	str	r3, [r7, #20]
 80068ee:	f107 0214 	add.w	r2, r7, #20
 80068f2:	f107 0308 	add.w	r3, r7, #8
 80068f6:	4611      	mov	r1, r2
 80068f8:	4618      	mov	r0, r3
 80068fa:	f000 f95c 	bl	8006bb6 <_ZN9__gnu_cxxmiIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_>
 80068fe:	4603      	mov	r3, r0
 8006900:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006906:	4618      	mov	r0, r3
 8006908:	f000 f96b 	bl	8006be2 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE11_M_allocateEj>
 800690c:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800690e:	69fb      	ldr	r3, [r7, #28]
 8006910:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8006912:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8006914:	6a3b      	ldr	r3, [r7, #32]
 8006916:	00db      	lsls	r3, r3, #3
	  _Alloc_traits::construct(this->_M_impl,
 8006918:	69fa      	ldr	r2, [r7, #28]
 800691a:	18d5      	adds	r5, r2, r3
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f7ff ffb6 	bl	800688e <_ZSt7forwardIRKSt10shared_ptrIN4tama8DrawableEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8006922:	4603      	mov	r3, r0
 8006924:	461a      	mov	r2, r3
 8006926:	4629      	mov	r1, r5
 8006928:	4620      	mov	r0, r4
 800692a:	f7ff ffbb 	bl	80068a4 <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama8DrawableEEEE9constructIS3_JRKS3_EEEvRS4_PT_DpOT0_>
	  __new_finish = pointer();
 800692e:	2300      	movs	r3, #0
 8006930:	61bb      	str	r3, [r7, #24]
	    (this->_M_impl._M_start, __position.base(),
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681c      	ldr	r4, [r3, #0]
 8006936:	f107 0308 	add.w	r3, r7, #8
 800693a:	4618      	mov	r0, r3
 800693c:	f000 f8b9 	bl	8006ab2 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEE4baseEv>
 8006940:	4603      	mov	r3, r0
 8006942:	681d      	ldr	r5, [r3, #0]
	     __new_start, _M_get_Tp_allocator());
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	4618      	mov	r0, r3
 8006948:	f7fc f81d 	bl	8002986 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE19_M_get_Tp_allocatorEv>
 800694c:	4603      	mov	r3, r0
	  __new_finish
 800694e:	69fa      	ldr	r2, [r7, #28]
 8006950:	4629      	mov	r1, r5
 8006952:	4620      	mov	r0, r4
 8006954:	f000 f959 	bl	8006c0a <_ZSt34__uninitialized_move_if_noexcept_aIPSt10shared_ptrIN4tama8DrawableEES4_SaIS3_EET0_T_S7_S6_RT1_>
 8006958:	61b8      	str	r0, [r7, #24]
	  ++__new_finish;
 800695a:	69bb      	ldr	r3, [r7, #24]
 800695c:	3308      	adds	r3, #8
 800695e:	61bb      	str	r3, [r7, #24]
	    (__position.base(), this->_M_impl._M_finish,
 8006960:	f107 0308 	add.w	r3, r7, #8
 8006964:	4618      	mov	r0, r3
 8006966:	f000 f8a4 	bl	8006ab2 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEE4baseEv>
 800696a:	4603      	mov	r3, r0
 800696c:	681c      	ldr	r4, [r3, #0]
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	685d      	ldr	r5, [r3, #4]
	     __new_finish, _M_get_Tp_allocator());
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	4618      	mov	r0, r3
 8006976:	f7fc f806 	bl	8002986 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE19_M_get_Tp_allocatorEv>
 800697a:	4603      	mov	r3, r0
	  __new_finish
 800697c:	69ba      	ldr	r2, [r7, #24]
 800697e:	4629      	mov	r1, r5
 8006980:	4620      	mov	r0, r4
 8006982:	f000 f942 	bl	8006c0a <_ZSt34__uninitialized_move_if_noexcept_aIPSt10shared_ptrIN4tama8DrawableEES4_SaIS3_EET0_T_S7_S6_RT1_>
 8006986:	61b8      	str	r0, [r7, #24]
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681c      	ldr	r4, [r3, #0]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	685d      	ldr	r5, [r3, #4]
		    _M_get_Tp_allocator());
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	4618      	mov	r0, r3
 8006994:	f7fb fff7 	bl	8002986 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE19_M_get_Tp_allocatorEv>
 8006998:	4603      	mov	r3, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800699a:	461a      	mov	r2, r3
 800699c:	4629      	mov	r1, r5
 800699e:	4620      	mov	r0, r4
 80069a0:	f7fb fffc 	bl	800299c <_ZSt8_DestroyIPSt10shared_ptrIN4tama8DrawableEES3_EvT_S5_RSaIT0_E>
      _M_deallocate(this->_M_impl._M_start,
 80069a4:	68f8      	ldr	r0, [r7, #12]
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	6819      	ldr	r1, [r3, #0]
		    this->_M_impl._M_end_of_storage
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	689b      	ldr	r3, [r3, #8]
		    - this->_M_impl._M_start);
 80069ae:	461a      	mov	r2, r3
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	1ad3      	subs	r3, r2, r3
 80069b6:	10db      	asrs	r3, r3, #3
      _M_deallocate(this->_M_impl._M_start,
 80069b8:	461a      	mov	r2, r3
 80069ba:	f7fc f809 	bl	80029d0 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE13_M_deallocateEPS3_j>
      this->_M_impl._M_start = __new_start;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	69fa      	ldr	r2, [r7, #28]
 80069c2:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	69ba      	ldr	r2, [r7, #24]
 80069c8:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80069ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069cc:	00db      	lsls	r3, r3, #3
 80069ce:	69fa      	ldr	r2, [r7, #28]
 80069d0:	441a      	add	r2, r3
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	609a      	str	r2, [r3, #8]
    }
 80069d6:	bf00      	nop
 80069d8:	3728      	adds	r7, #40	; 0x28
 80069da:	46bd      	mov	sp, r7
 80069dc:	bdb0      	pop	{r4, r5, r7, pc}
 80069de:	bf00      	nop
 80069e0:	08016320 	.word	0x08016320

080069e4 <_ZNKSt19__shared_ptr_accessIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b082      	sub	sp, #8
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f000 f925 	bl	8006c3c <_ZNKSt12__shared_ptrIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0EE3getEv>
 80069f2:	4603      	mov	r3, r0
 80069f4:	4618      	mov	r0, r3
 80069f6:	3708      	adds	r7, #8
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <_ZSt15allocate_sharedIN4tama5SceneESaIS1_EJRS1_EESt10shared_ptrIT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 80069fc:	b590      	push	{r4, r7, lr}
 80069fe:	b087      	sub	sp, #28
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	60f8      	str	r0, [r7, #12]
 8006a04:	60b9      	str	r1, [r7, #8]
 8006a06:	607a      	str	r2, [r7, #4]
			     std::forward<_Args>(__args)...);
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f7ff fe75 	bl	80066f8 <_ZSt7forwardIRN4tama5SceneEEOT_RNSt16remove_referenceIS3_E4typeE>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	68ba      	ldr	r2, [r7, #8]
 8006a12:	4621      	mov	r1, r4
 8006a14:	68f8      	ldr	r0, [r7, #12]
 8006a16:	f000 f91d 	bl	8006c54 <_ZNSt10shared_ptrIN4tama5SceneEEC1ISaIS1_EJRS1_EEESt19_Sp_make_shared_tagRKT_DpOT0_>
    }
 8006a1a:	68f8      	ldr	r0, [r7, #12]
 8006a1c:	371c      	adds	r7, #28
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd90      	pop	{r4, r7, pc}

08006a22 <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEC1INS0_5SceneEvEEOS_IT_LS3_0EE>:
	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 8006a22:	b580      	push	{r7, lr}
 8006a24:	b082      	sub	sp, #8
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
 8006a2a:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount()
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	601a      	str	r2, [r3, #0]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	3304      	adds	r3, #4
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f7fa fa16 	bl	8000e6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _M_refcount._M_swap(__r._M_refcount);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	1d1a      	adds	r2, r3, #4
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	3304      	adds	r3, #4
 8006a46:	4619      	mov	r1, r3
 8006a48:	4610      	mov	r0, r2
 8006a4a:	f7fa fa1c 	bl	8000e86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  __r._M_ptr = 0;
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	2200      	movs	r2, #0
 8006a52:	601a      	str	r2, [r3, #0]
	}
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	4618      	mov	r0, r3
 8006a58:	3708      	adds	r7, #8
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}

08006a5e <_ZSt15allocate_sharedIN4tama7TextureESaIS1_EJRjS3_EESt10shared_ptrIT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 8006a5e:	b5b0      	push	{r4, r5, r7, lr}
 8006a60:	b088      	sub	sp, #32
 8006a62:	af02      	add	r7, sp, #8
 8006a64:	60f8      	str	r0, [r7, #12]
 8006a66:	60b9      	str	r1, [r7, #8]
 8006a68:	607a      	str	r2, [r7, #4]
 8006a6a:	603b      	str	r3, [r7, #0]
			     std::forward<_Args>(__args)...);
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f7ff fe7e 	bl	800676e <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 8006a72:	4604      	mov	r4, r0
 8006a74:	6838      	ldr	r0, [r7, #0]
 8006a76:	f7ff fe7a 	bl	800676e <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	9300      	str	r3, [sp, #0]
 8006a7e:	4623      	mov	r3, r4
 8006a80:	68ba      	ldr	r2, [r7, #8]
 8006a82:	4629      	mov	r1, r5
 8006a84:	68f8      	ldr	r0, [r7, #12]
 8006a86:	f000 f8fb 	bl	8006c80 <_ZNSt10shared_ptrIN4tama7TextureEEC1ISaIS1_EJRjS5_EEESt19_Sp_make_shared_tagRKT_DpOT0_>
    }
 8006a8a:	68f8      	ldr	r0, [r7, #12]
 8006a8c:	3718      	adds	r7, #24
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bdb0      	pop	{r4, r5, r7, pc}

08006a92 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEC1ERKS5_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8006a92:	b480      	push	{r7}
 8006a94:	b083      	sub	sp, #12
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	6078      	str	r0, [r7, #4]
 8006a9a:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	601a      	str	r2, [r3, #0]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	370c      	adds	r7, #12
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr

08006ab2 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8006ab2:	b480      	push	{r7}
 8006ab4:	b083      	sub	sp, #12
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	4618      	mov	r0, r3
 8006abe:	370c      	adds	r7, #12
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr

08006ac8 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE12_Vector_implC1Ev>:
	_Vector_impl()
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b082      	sub	sp, #8
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f000 f8f1 	bl	8006cb8 <_ZNSaISt10shared_ptrIN4tama8DrawableEEEC1Ev>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	601a      	str	r2, [r3, #0]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	605a      	str	r2, [r3, #4]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	609a      	str	r2, [r3, #8]
	{ }
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	4618      	mov	r0, r3
 8006aec:	3708      	adds	r7, #8
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}

08006af2 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEE9constructIS4_JRKS4_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8006af2:	b590      	push	{r4, r7, lr}
 8006af4:	b085      	sub	sp, #20
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	60f8      	str	r0, [r7, #12]
 8006afa:	60b9      	str	r1, [r7, #8]
 8006afc:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f7ff fec5 	bl	800688e <_ZSt7forwardIRKSt10shared_ptrIN4tama8DrawableEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8006b04:	4604      	mov	r4, r0
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	4619      	mov	r1, r3
 8006b0a:	2008      	movs	r0, #8
 8006b0c:	f7f9 fd0f 	bl	800052e <_ZnwjPv>
 8006b10:	4603      	mov	r3, r0
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d003      	beq.n	8006b1e <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEE9constructIS4_JRKS4_EEEvPT_DpOT0_+0x2c>
 8006b16:	4621      	mov	r1, r4
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f7ff fd18 	bl	800654e <_ZNSt10shared_ptrIN4tama8DrawableEEC1ERKS2_>
 8006b1e:	bf00      	nop
 8006b20:	3714      	adds	r7, #20
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd90      	pop	{r4, r7, pc}

08006b26 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8006b26:	b590      	push	{r4, r7, lr}
 8006b28:	b087      	sub	sp, #28
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	60f8      	str	r0, [r7, #12]
 8006b2e:	60b9      	str	r1, [r7, #8]
 8006b30:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8006b32:	68f8      	ldr	r0, [r7, #12]
 8006b34:	f000 f8cc 	bl	8006cd0 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE8max_sizeEv>
 8006b38:	4604      	mov	r4, r0
 8006b3a:	68f8      	ldr	r0, [r7, #12]
 8006b3c:	f000 f8d9 	bl	8006cf2 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE4sizeEv>
 8006b40:	4603      	mov	r3, r0
 8006b42:	1ae2      	subs	r2, r4, r3
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	429a      	cmp	r2, r3
 8006b48:	bf34      	ite	cc
 8006b4a:	2301      	movcc	r3, #1
 8006b4c:	2300      	movcs	r3, #0
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d003      	beq.n	8006b5c <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	4618      	mov	r0, r3
 8006b58:	f00f fa64 	bl	8016024 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + std::max(size(), __n);
 8006b5c:	68f8      	ldr	r0, [r7, #12]
 8006b5e:	f000 f8c8 	bl	8006cf2 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE4sizeEv>
 8006b62:	4604      	mov	r4, r0
 8006b64:	68f8      	ldr	r0, [r7, #12]
 8006b66:	f000 f8c4 	bl	8006cf2 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE4sizeEv>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	613b      	str	r3, [r7, #16]
 8006b6e:	f107 0208 	add.w	r2, r7, #8
 8006b72:	f107 0310 	add.w	r3, r7, #16
 8006b76:	4611      	mov	r1, r2
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f7f9 ff8e 	bl	8000a9a <_ZSt3maxIjERKT_S2_S2_>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4423      	add	r3, r4
 8006b84:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8006b86:	68f8      	ldr	r0, [r7, #12]
 8006b88:	f000 f8b3 	bl	8006cf2 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE4sizeEv>
 8006b8c:	4602      	mov	r2, r0
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d306      	bcc.n	8006ba2 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE12_M_check_lenEjPKc+0x7c>
 8006b94:	68f8      	ldr	r0, [r7, #12]
 8006b96:	f000 f89b 	bl	8006cd0 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE8max_sizeEv>
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d904      	bls.n	8006bac <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE12_M_check_lenEjPKc+0x86>
 8006ba2:	68f8      	ldr	r0, [r7, #12]
 8006ba4:	f000 f894 	bl	8006cd0 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE8max_sizeEv>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	e000      	b.n	8006bae <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE12_M_check_lenEjPKc+0x88>
 8006bac:	697b      	ldr	r3, [r7, #20]
      }
 8006bae:	4618      	mov	r0, r3
 8006bb0:	371c      	adds	r7, #28
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd90      	pop	{r4, r7, pc}

08006bb6 <_ZN9__gnu_cxxmiIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8006bb6:	b590      	push	{r4, r7, lr}
 8006bb8:	b083      	sub	sp, #12
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
 8006bbe:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f7ff ff76 	bl	8006ab2 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEE4baseEv>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	461c      	mov	r4, r3
 8006bcc:	6838      	ldr	r0, [r7, #0]
 8006bce:	f7ff ff70 	bl	8006ab2 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEE4baseEv>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	1ae3      	subs	r3, r4, r3
 8006bd8:	10db      	asrs	r3, r3, #3
 8006bda:	4618      	mov	r0, r3
 8006bdc:	370c      	adds	r7, #12
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd90      	pop	{r4, r7, pc}

08006be2 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8006be2:	b580      	push	{r7, lr}
 8006be4:	b082      	sub	sp, #8
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
 8006bea:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d006      	beq.n	8006c00 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE11_M_allocateEj+0x1e>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6839      	ldr	r1, [r7, #0]
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f000 f88c 	bl	8006d14 <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama8DrawableEEEE8allocateERS4_j>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	e000      	b.n	8006c02 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE11_M_allocateEj+0x20>
 8006c00:	2300      	movs	r3, #0
      }
 8006c02:	4618      	mov	r0, r3
 8006c04:	3708      	adds	r7, #8
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}

08006c0a <_ZSt34__uninitialized_move_if_noexcept_aIPSt10shared_ptrIN4tama8DrawableEES4_SaIS3_EET0_T_S7_S6_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8006c0a:	b590      	push	{r4, r7, lr}
 8006c0c:	b085      	sub	sp, #20
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	60f8      	str	r0, [r7, #12]
 8006c12:	60b9      	str	r1, [r7, #8]
 8006c14:	607a      	str	r2, [r7, #4]
 8006c16:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8006c18:	68f8      	ldr	r0, [r7, #12]
 8006c1a:	f000 f88a 	bl	8006d32 <_ZSt32__make_move_if_noexcept_iteratorISt10shared_ptrIN4tama8DrawableEESt13move_iteratorIPS3_EET0_PT_>
 8006c1e:	4604      	mov	r4, r0
 8006c20:	68b8      	ldr	r0, [r7, #8]
 8006c22:	f000 f886 	bl	8006d32 <_ZSt32__make_move_if_noexcept_iteratorISt10shared_ptrIN4tama8DrawableEESt13move_iteratorIPS3_EET0_PT_>
 8006c26:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	687a      	ldr	r2, [r7, #4]
 8006c2c:	4620      	mov	r0, r4
 8006c2e:	f000 f88f 	bl	8006d50 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEES5_S4_ET0_T_S8_S7_RSaIT1_E>
 8006c32:	4603      	mov	r3, r0
    }
 8006c34:	4618      	mov	r0, r3
 8006c36:	3714      	adds	r7, #20
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd90      	pop	{r4, r7, pc}

08006c3c <_ZNKSt12__shared_ptrIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 8006c3c:	b480      	push	{r7}
 8006c3e:	b083      	sub	sp, #12
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4618      	mov	r0, r3
 8006c4a:	370c      	adds	r7, #12
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr

08006c54 <_ZNSt10shared_ptrIN4tama5SceneEEC1ISaIS1_EJRS1_EEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8006c54:	b5b0      	push	{r4, r5, r7, lr}
 8006c56:	b084      	sub	sp, #16
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	60f8      	str	r0, [r7, #12]
 8006c5c:	7239      	strb	r1, [r7, #8]
 8006c5e:	607a      	str	r2, [r7, #4]
 8006c60:	603b      	str	r3, [r7, #0]
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
 8006c62:	68fc      	ldr	r4, [r7, #12]
 8006c64:	6838      	ldr	r0, [r7, #0]
 8006c66:	f7ff fd47 	bl	80066f8 <_ZSt7forwardIRN4tama5SceneEEOT_RNSt16remove_referenceIS3_E4typeE>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	4629      	mov	r1, r5
 8006c70:	4620      	mov	r0, r4
 8006c72:	f000 f87e 	bl	8006d72 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJRS1_EEESt19_Sp_make_shared_tagRKT_DpOT0_>
	{ }
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3710      	adds	r7, #16
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bdb0      	pop	{r4, r5, r7, pc}

08006c80 <_ZNSt10shared_ptrIN4tama7TextureEEC1ISaIS1_EJRjS5_EEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8006c80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c82:	b087      	sub	sp, #28
 8006c84:	af02      	add	r7, sp, #8
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	7239      	strb	r1, [r7, #8]
 8006c8a:	607a      	str	r2, [r7, #4]
 8006c8c:	603b      	str	r3, [r7, #0]
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
 8006c8e:	68fc      	ldr	r4, [r7, #12]
 8006c90:	6838      	ldr	r0, [r7, #0]
 8006c92:	f7ff fd6c 	bl	800676e <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 8006c96:	4605      	mov	r5, r0
 8006c98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c9a:	f7ff fd68 	bl	800676e <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	9300      	str	r3, [sp, #0]
 8006ca2:	462b      	mov	r3, r5
 8006ca4:	687a      	ldr	r2, [r7, #4]
 8006ca6:	4631      	mov	r1, r6
 8006ca8:	4620      	mov	r0, r4
 8006caa:	f000 f8dd 	bl	8006e68 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJRjS7_EEESt19_Sp_make_shared_tagRKT_DpOT0_>
	{ }
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3714      	adds	r7, #20
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006cb8 <_ZNSaISt10shared_ptrIN4tama8DrawableEEEC1Ev>:
      allocator() throw() { }
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b082      	sub	sp, #8
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f000 f950 	bl	8006f66 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEEC1Ev>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3708      	adds	r7, #8
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}

08006cd0 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b082      	sub	sp, #8
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f000 f95a 	bl	8006f94 <_ZNKSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE19_M_get_Tp_allocatorEv>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f000 f94a 	bl	8006f7c <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama8DrawableEEEE8max_sizeERKS4_>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	4618      	mov	r0, r3
 8006cec:	3708      	adds	r7, #8
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}

08006cf2 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8006cf2:	b480      	push	{r7}
 8006cf4:	b083      	sub	sp, #12
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	461a      	mov	r2, r3
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	1ad3      	subs	r3, r2, r3
 8006d06:	10db      	asrs	r3, r3, #3
 8006d08:	4618      	mov	r0, r3
 8006d0a:	370c      	adds	r7, #12
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama8DrawableEEEE8allocateERS4_j>:
      allocate(allocator_type& __a, size_type __n)
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b082      	sub	sp, #8
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8006d1e:	2200      	movs	r2, #0
 8006d20:	6839      	ldr	r1, [r7, #0]
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f000 f941 	bl	8006faa <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEE8allocateEjPKv>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3708      	adds	r7, #8
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}

08006d32 <_ZSt32__make_move_if_noexcept_iteratorISt10shared_ptrIN4tama8DrawableEESt13move_iteratorIPS3_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 8006d32:	b580      	push	{r7, lr}
 8006d34:	b084      	sub	sp, #16
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8006d3a:	f107 030c 	add.w	r3, r7, #12
 8006d3e:	6879      	ldr	r1, [r7, #4]
 8006d40:	4618      	mov	r0, r3
 8006d42:	f000 f950 	bl	8006fe6 <_ZNSt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEEC1ES4_>
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3710      	adds	r7, #16
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}

08006d50 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEES5_S4_ET0_T_S8_S7_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b084      	sub	sp, #16
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	60f8      	str	r0, [r7, #12]
 8006d58:	60b9      	str	r1, [r7, #8]
 8006d5a:	607a      	str	r2, [r7, #4]
 8006d5c:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8006d5e:	687a      	ldr	r2, [r7, #4]
 8006d60:	68b9      	ldr	r1, [r7, #8]
 8006d62:	68f8      	ldr	r0, [r7, #12]
 8006d64:	f000 f94e 	bl	8007004 <_ZSt18uninitialized_copyISt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEES5_ET0_T_S8_S7_>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3710      	adds	r7, #16
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}

08006d72 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJRS1_EEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8006d72:	b580      	push	{r7, lr}
 8006d74:	b08c      	sub	sp, #48	; 0x30
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	60f8      	str	r0, [r7, #12]
 8006d7a:	7239      	strb	r1, [r7, #8]
 8006d7c:	607a      	str	r2, [r7, #4]
 8006d7e:	603b      	str	r3, [r7, #0]
	: _M_ptr(), _M_refcount()
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2200      	movs	r2, #0
 8006d84:	601a      	str	r2, [r3, #0]
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	3304      	adds	r3, #4
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f7fa f86d 	bl	8000e6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 8006d90:	f107 0320 	add.w	r3, r7, #32
 8006d94:	6879      	ldr	r1, [r7, #4]
 8006d96:	4618      	mov	r0, r3
 8006d98:	f7fb fa1a 	bl	80021d0 <_ZNSaIN4tama5SceneEEC1ERKS1_>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 8006d9c:	f107 0318 	add.w	r3, r7, #24
 8006da0:	f107 0220 	add.w	r2, r7, #32
 8006da4:	4611      	mov	r1, r2
 8006da6:	4618      	mov	r0, r3
 8006da8:	f7fb fa20 	bl	80021ec <_ZSt18__allocate_guardedISaIN4tama5SceneEEESt15__allocated_ptrIT_ERS4_>
	  auto __ptr = __guard.get();
 8006dac:	f107 0318 	add.w	r3, r7, #24
 8006db0:	4618      	mov	r0, r3
 8006db2:	f7fb fa43 	bl	800223c <_ZNSt15__allocated_ptrISaIN4tama5SceneEEE3getEv>
 8006db6:	62f8      	str	r0, [r7, #44]	; 0x2c
	  __traits::construct(__del._M_alloc, __ptr,
 8006db8:	6838      	ldr	r0, [r7, #0]
 8006dba:	f7ff fc9d 	bl	80066f8 <_ZSt7forwardIRN4tama5SceneEEOT_RNSt16remove_referenceIS3_E4typeE>
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	f107 0320 	add.w	r3, r7, #32
 8006dc4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f000 f92e 	bl	8007028 <_ZNSt16allocator_traitsISaIN4tama5SceneEEE9constructIS1_JRS1_EEEvRS2_PT_DpOT0_>
	  __guard = nullptr;
 8006dcc:	f107 0318 	add.w	r3, r7, #24
 8006dd0:	2100      	movs	r1, #0
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f7fb fa4d 	bl	8002272 <_ZNSt15__allocated_ptrISaIN4tama5SceneEEEaSEDn>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 8006dd8:	f107 0220 	add.w	r2, r7, #32
 8006ddc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006de0:	4611      	mov	r1, r2
 8006de2:	4618      	mov	r0, r3
 8006de4:	f7fb f944 	bl	8002070 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>
 8006de8:	f107 0220 	add.w	r2, r7, #32
 8006dec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006df0:	4611      	mov	r1, r2
 8006df2:	4618      	mov	r0, r3
 8006df4:	f7fb f9ec 	bl	80021d0 <_ZNSaIN4tama5SceneEEC1ERKS1_>
 8006df8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006dfc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8006e00:	f107 0014 	add.w	r0, r7, #20
 8006e04:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e06:	f7fb fa69 	bl	80022dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama5SceneENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
 8006e0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f7fb f881 	bl	8001f16 <_ZNSaIN4tama5SceneEED1Ev>
 8006e14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f7fb f91c 	bl	8002056 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	  _M_refcount._M_swap(__count);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	3304      	adds	r3, #4
 8006e22:	f107 0214 	add.w	r2, r7, #20
 8006e26:	4611      	mov	r1, r2
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f7fa f82c 	bl	8000e86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  _M_ptr = __ptr;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e32:	601a      	str	r2, [r3, #0]
	  _M_enable_shared_from_this_with(_M_ptr);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4619      	mov	r1, r3
 8006e3a:	68f8      	ldr	r0, [r7, #12]
 8006e3c:	f7fb faa5 	bl	800238a <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 8006e40:	f107 0314 	add.w	r3, r7, #20
 8006e44:	4618      	mov	r0, r3
 8006e46:	f7f9 fdf4 	bl	8000a32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 8006e4a:	f107 0318 	add.w	r3, r7, #24
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f7fb f9df 	bl	8002212 <_ZNSt15__allocated_ptrISaIN4tama5SceneEEED1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 8006e54:	f107 0320 	add.w	r3, r7, #32
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f7fb f8fc 	bl	8002056 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	}
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	4618      	mov	r0, r3
 8006e62:	3730      	adds	r7, #48	; 0x30
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}

08006e68 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJRjS7_EEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8006e68:	b590      	push	{r4, r7, lr}
 8006e6a:	b08d      	sub	sp, #52	; 0x34
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	60f8      	str	r0, [r7, #12]
 8006e70:	7239      	strb	r1, [r7, #8]
 8006e72:	607a      	str	r2, [r7, #4]
 8006e74:	603b      	str	r3, [r7, #0]
	: _M_ptr(), _M_refcount()
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	601a      	str	r2, [r3, #0]
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	3304      	adds	r3, #4
 8006e80:	4618      	mov	r0, r3
 8006e82:	f7f9 fff2 	bl	8000e6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 8006e86:	f107 0320 	add.w	r3, r7, #32
 8006e8a:	6879      	ldr	r1, [r7, #4]
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f7fe fdca 	bl	8005a26 <_ZNSaIN4tama7TextureEEC1ERKS1_>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 8006e92:	f107 0318 	add.w	r3, r7, #24
 8006e96:	f107 0220 	add.w	r2, r7, #32
 8006e9a:	4611      	mov	r1, r2
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f7fe fdd0 	bl	8005a42 <_ZSt18__allocate_guardedISaIN4tama7TextureEEESt15__allocated_ptrIT_ERS4_>
	  auto __ptr = __guard.get();
 8006ea2:	f107 0318 	add.w	r3, r7, #24
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f7fe fdf3 	bl	8005a92 <_ZNSt15__allocated_ptrISaIN4tama7TextureEEE3getEv>
 8006eac:	62f8      	str	r0, [r7, #44]	; 0x2c
	  __traits::construct(__del._M_alloc, __ptr,
 8006eae:	6838      	ldr	r0, [r7, #0]
 8006eb0:	f7ff fc5d 	bl	800676e <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 8006eb4:	4604      	mov	r4, r0
 8006eb6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8006eb8:	f7ff fc59 	bl	800676e <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	f107 0020 	add.w	r0, r7, #32
 8006ec2:	4622      	mov	r2, r4
 8006ec4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ec6:	f000 f8c2 	bl	800704e <_ZNSt16allocator_traitsISaIN4tama7TextureEEE9constructIS1_JRjS5_EEEvRS2_PT_DpOT0_>
	  __guard = nullptr;
 8006eca:	f107 0318 	add.w	r3, r7, #24
 8006ece:	2100      	movs	r1, #0
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f7fe fdec 	bl	8005aae <_ZNSt15__allocated_ptrISaIN4tama7TextureEEEaSEDn>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 8006ed6:	f107 0220 	add.w	r2, r7, #32
 8006eda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ede:	4611      	mov	r1, r2
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f7fe fd90 	bl	8005a06 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>
 8006ee6:	f107 0220 	add.w	r2, r7, #32
 8006eea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006eee:	4611      	mov	r1, r2
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f7fe fd98 	bl	8005a26 <_ZNSaIN4tama7TextureEEC1ERKS1_>
 8006ef6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006efa:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8006efe:	f107 0014 	add.w	r0, r7, #20
 8006f02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f04:	f7fe fe08 	bl	8005b18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama7TextureENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
 8006f08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f7fe fd3f 	bl	8005990 <_ZNSaIN4tama7TextureEED1Ev>
 8006f12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f16:	4618      	mov	r0, r3
 8006f18:	f7fe fd68 	bl	80059ec <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	  _M_refcount._M_swap(__count);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	3304      	adds	r3, #4
 8006f20:	f107 0214 	add.w	r2, r7, #20
 8006f24:	4611      	mov	r1, r2
 8006f26:	4618      	mov	r0, r3
 8006f28:	f7f9 ffad 	bl	8000e86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  _M_ptr = __ptr;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f30:	601a      	str	r2, [r3, #0]
	  _M_enable_shared_from_this_with(_M_ptr);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4619      	mov	r1, r3
 8006f38:	68f8      	ldr	r0, [r7, #12]
 8006f3a:	f7fe fe44 	bl	8005bc6 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 8006f3e:	f107 0314 	add.w	r3, r7, #20
 8006f42:	4618      	mov	r0, r3
 8006f44:	f7f9 fd75 	bl	8000a32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 8006f48:	f107 0318 	add.w	r3, r7, #24
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f7fe fd8b 	bl	8005a68 <_ZNSt15__allocated_ptrISaIN4tama7TextureEEED1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 8006f52:	f107 0320 	add.w	r3, r7, #32
 8006f56:	4618      	mov	r0, r3
 8006f58:	f7fe fd48 	bl	80059ec <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	}
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3734      	adds	r7, #52	; 0x34
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd90      	pop	{r4, r7, pc}

08006f66 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8006f66:	b480      	push	{r7}
 8006f68:	b083      	sub	sp, #12
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	6078      	str	r0, [r7, #4]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	4618      	mov	r0, r3
 8006f72:	370c      	adds	r7, #12
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr

08006f7c <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama8DrawableEEEE8max_sizeERKS4_>:
      max_size(const allocator_type& __a) noexcept
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b082      	sub	sp, #8
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f000 f87a 	bl	800707e <_ZNK9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEE8max_sizeEv>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3708      	adds	r7, #8
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <_ZNKSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8006f94:	b480      	push	{r7}
 8006f96:	b083      	sub	sp, #12
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	370c      	adds	r7, #12
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr

08006faa <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8006faa:	b580      	push	{r7, lr}
 8006fac:	b084      	sub	sp, #16
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	60f8      	str	r0, [r7, #12]
 8006fb2:	60b9      	str	r1, [r7, #8]
 8006fb4:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8006fb6:	68f8      	ldr	r0, [r7, #12]
 8006fb8:	f000 f861 	bl	800707e <_ZNK9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEE8max_sizeEv>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	bf8c      	ite	hi
 8006fc4:	2301      	movhi	r3, #1
 8006fc6:	2300      	movls	r3, #0
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d001      	beq.n	8006fd2 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8006fce:	f00f f826 	bl	801601e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	00db      	lsls	r3, r3, #3
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f00e fff5 	bl	8015fc6 <_Znwj>
 8006fdc:	4603      	mov	r3, r0
      }
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3710      	adds	r7, #16
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}

08006fe6 <_ZNSt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEEC1ES4_>:
      move_iterator(iterator_type __i)
 8006fe6:	b480      	push	{r7}
 8006fe8:	b083      	sub	sp, #12
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
 8006fee:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	683a      	ldr	r2, [r7, #0]
 8006ff4:	601a      	str	r2, [r3, #0]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	370c      	adds	r7, #12
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr

08007004 <_ZSt18uninitialized_copyISt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEES5_ET0_T_S8_S7_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8007004:	b580      	push	{r7, lr}
 8007006:	b086      	sub	sp, #24
 8007008:	af00      	add	r7, sp, #0
 800700a:	60f8      	str	r0, [r7, #12]
 800700c:	60b9      	str	r1, [r7, #8]
 800700e:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8007010:	2301      	movs	r3, #1
 8007012:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8007014:	687a      	ldr	r2, [r7, #4]
 8007016:	68b9      	ldr	r1, [r7, #8]
 8007018:	68f8      	ldr	r0, [r7, #12]
 800701a:	f000 f83c 	bl	8007096 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEES7_EET0_T_SA_S9_>
 800701e:	4603      	mov	r3, r0
    }
 8007020:	4618      	mov	r0, r3
 8007022:	3718      	adds	r7, #24
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <_ZNSt16allocator_traitsISaIN4tama5SceneEEE9constructIS1_JRS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8007028:	b580      	push	{r7, lr}
 800702a:	b084      	sub	sp, #16
 800702c:	af00      	add	r7, sp, #0
 800702e:	60f8      	str	r0, [r7, #12]
 8007030:	60b9      	str	r1, [r7, #8]
 8007032:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f7ff fb5f 	bl	80066f8 <_ZSt7forwardIRN4tama5SceneEEOT_RNSt16remove_referenceIS3_E4typeE>
 800703a:	4603      	mov	r3, r0
 800703c:	461a      	mov	r2, r3
 800703e:	68b9      	ldr	r1, [r7, #8]
 8007040:	68f8      	ldr	r0, [r7, #12]
 8007042:	f000 f8bd 	bl	80071c0 <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEE9constructIS2_JRS2_EEEvPT_DpOT0_>
 8007046:	bf00      	nop
 8007048:	3710      	adds	r7, #16
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}

0800704e <_ZNSt16allocator_traitsISaIN4tama7TextureEEE9constructIS1_JRjS5_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 800704e:	b590      	push	{r4, r7, lr}
 8007050:	b085      	sub	sp, #20
 8007052:	af00      	add	r7, sp, #0
 8007054:	60f8      	str	r0, [r7, #12]
 8007056:	60b9      	str	r1, [r7, #8]
 8007058:	607a      	str	r2, [r7, #4]
 800705a:	603b      	str	r3, [r7, #0]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f7ff fb86 	bl	800676e <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 8007062:	4604      	mov	r4, r0
 8007064:	6838      	ldr	r0, [r7, #0]
 8007066:	f7ff fb82 	bl	800676e <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 800706a:	4603      	mov	r3, r0
 800706c:	4622      	mov	r2, r4
 800706e:	68b9      	ldr	r1, [r7, #8]
 8007070:	68f8      	ldr	r0, [r7, #12]
 8007072:	f000 f8bf 	bl	80071f4 <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE9constructIS2_JRjS5_EEEvPT_DpOT0_>
 8007076:	bf00      	nop
 8007078:	3714      	adds	r7, #20
 800707a:	46bd      	mov	sp, r7
 800707c:	bd90      	pop	{r4, r7, pc}

0800707e <_ZNK9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800707e:	b480      	push	{r7}
 8007080:	b083      	sub	sp, #12
 8007082:	af00      	add	r7, sp, #0
 8007084:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8007086:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800708a:	4618      	mov	r0, r3
 800708c:	370c      	adds	r7, #12
 800708e:	46bd      	mov	sp, r7
 8007090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007094:	4770      	bx	lr

08007096 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEES7_EET0_T_SA_S9_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8007096:	b590      	push	{r4, r7, lr}
 8007098:	b087      	sub	sp, #28
 800709a:	af00      	add	r7, sp, #0
 800709c:	60f8      	str	r0, [r7, #12]
 800709e:	60b9      	str	r1, [r7, #8]
 80070a0:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 80070a6:	f107 0208 	add.w	r2, r7, #8
 80070aa:	f107 030c 	add.w	r3, r7, #12
 80070ae:	4611      	mov	r1, r2
 80070b0:	4618      	mov	r0, r3
 80070b2:	f000 f8c1 	bl	8007238 <_ZStneIPSt10shared_ptrIN4tama8DrawableEEEbRKSt13move_iteratorIT_ES9_>
 80070b6:	4603      	mov	r3, r0
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d016      	beq.n	80070ea <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEES7_EET0_T_SA_S9_+0x54>
		std::_Construct(std::__addressof(*__cur), *__first);
 80070bc:	6978      	ldr	r0, [r7, #20]
 80070be:	f7fb fcc1 	bl	8002a44 <_ZSt11__addressofISt10shared_ptrIN4tama8DrawableEEEPT_RS4_>
 80070c2:	4604      	mov	r4, r0
 80070c4:	f107 030c 	add.w	r3, r7, #12
 80070c8:	4618      	mov	r0, r3
 80070ca:	f000 f8d7 	bl	800727c <_ZNKSt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEEdeEv>
 80070ce:	4603      	mov	r3, r0
 80070d0:	4619      	mov	r1, r3
 80070d2:	4620      	mov	r0, r4
 80070d4:	f000 f8e9 	bl	80072aa <_ZSt10_ConstructISt10shared_ptrIN4tama8DrawableEEJS3_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 80070d8:	f107 030c 	add.w	r3, r7, #12
 80070dc:	4618      	mov	r0, r3
 80070de:	f000 f8bc 	bl	800725a <_ZNSt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEEppEv>
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	3308      	adds	r3, #8
 80070e6:	617b      	str	r3, [r7, #20]
 80070e8:	e7dd      	b.n	80070a6 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEES7_EET0_T_SA_S9_+0x10>
	      return __cur;
 80070ea:	697b      	ldr	r3, [r7, #20]
	}
 80070ec:	4618      	mov	r0, r3
 80070ee:	371c      	adds	r7, #28
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd90      	pop	{r4, r7, pc}

080070f4 <_ZN4tama14ChangeObserverC1ERKS0_>:
 80070f4:	b480      	push	{r7}
 80070f6:	b083      	sub	sp, #12
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	6039      	str	r1, [r7, #0]
 80070fe:	4a05      	ldr	r2, [pc, #20]	; (8007114 <_ZN4tama14ChangeObserverC1ERKS0_+0x20>)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	601a      	str	r2, [r3, #0]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	4618      	mov	r0, r3
 8007108:	370c      	adds	r7, #12
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr
 8007112:	bf00      	nop
 8007114:	080170d8 	.word	0x080170d8

08007118 <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8007118:	b580      	push	{r7, lr}
 800711a:	b082      	sub	sp, #8
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	601a      	str	r2, [r3, #0]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	1d1a      	adds	r2, r3, #4
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	3304      	adds	r3, #4
 8007132:	4619      	mov	r1, r3
 8007134:	4610      	mov	r0, r2
 8007136:	f7f9 fc65 	bl	8000a04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	4618      	mov	r0, r3
 800713e:	3708      	adds	r7, #8
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}

08007144 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEC1ERKS2_>:
      shared_ptr(const shared_ptr&) noexcept = default;
 8007144:	b580      	push	{r7, lr}
 8007146:	b082      	sub	sp, #8
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	6039      	str	r1, [r7, #0]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	683a      	ldr	r2, [r7, #0]
 8007152:	4611      	mov	r1, r2
 8007154:	4618      	mov	r0, r3
 8007156:	f7ff ffdf 	bl	8007118 <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	4618      	mov	r0, r3
 800715e:	3708      	adds	r7, #8
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}

08007164 <_ZN4tama5SceneC1ERKS0_>:
#include "../drawable/Drawable.h"
#include "../../../../Configuration/display.config.h"

namespace tama
{
    class Scene : public ChangeObserver
 8007164:	b580      	push	{r7, lr}
 8007166:	b082      	sub	sp, #8
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	6039      	str	r1, [r7, #0]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	683a      	ldr	r2, [r7, #0]
 8007172:	4611      	mov	r1, r2
 8007174:	4618      	mov	r0, r3
 8007176:	f7ff ffbd 	bl	80070f4 <_ZN4tama14ChangeObserverC1ERKS0_>
 800717a:	4a10      	ldr	r2, [pc, #64]	; (80071bc <_ZN4tama5SceneC1ERKS0_+0x58>)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	601a      	str	r2, [r3, #0]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	1d1a      	adds	r2, r3, #4
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	3304      	adds	r3, #4
 8007188:	4619      	mov	r1, r3
 800718a:	4610      	mov	r0, r2
 800718c:	f7ff ffda 	bl	8007144 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEC1ERKS2_>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f103 020c 	add.w	r2, r3, #12
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	330c      	adds	r3, #12
 800719a:	4619      	mov	r1, r3
 800719c:	4610      	mov	r0, r2
 800719e:	f000 f89d 	bl	80072dc <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EEC1ERKS5_>
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	699a      	ldr	r2, [r3, #24]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	619a      	str	r2, [r3, #24]
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	69da      	ldr	r2, [r3, #28]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	61da      	str	r2, [r3, #28]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	4618      	mov	r0, r3
 80071b6:	3708      	adds	r7, #8
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}
 80071bc:	080170cc 	.word	0x080170cc

080071c0 <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEE9constructIS2_JRS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80071c0:	b590      	push	{r4, r7, lr}
 80071c2:	b085      	sub	sp, #20
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	60f8      	str	r0, [r7, #12]
 80071c8:	60b9      	str	r1, [r7, #8]
 80071ca:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f7ff fa93 	bl	80066f8 <_ZSt7forwardIRN4tama5SceneEEOT_RNSt16remove_referenceIS3_E4typeE>
 80071d2:	4604      	mov	r4, r0
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	4619      	mov	r1, r3
 80071d8:	2020      	movs	r0, #32
 80071da:	f7f9 f9a8 	bl	800052e <_ZnwjPv>
 80071de:	4603      	mov	r3, r0
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d003      	beq.n	80071ec <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEE9constructIS2_JRS2_EEEvPT_DpOT0_+0x2c>
 80071e4:	4621      	mov	r1, r4
 80071e6:	4618      	mov	r0, r3
 80071e8:	f7ff ffbc 	bl	8007164 <_ZN4tama5SceneC1ERKS0_>
 80071ec:	bf00      	nop
 80071ee:	3714      	adds	r7, #20
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd90      	pop	{r4, r7, pc}

080071f4 <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE9constructIS2_JRjS5_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80071f4:	b5b0      	push	{r4, r5, r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	60f8      	str	r0, [r7, #12]
 80071fc:	60b9      	str	r1, [r7, #8]
 80071fe:	607a      	str	r2, [r7, #4]
 8007200:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f7ff fab3 	bl	800676e <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 8007208:	4603      	mov	r3, r0
 800720a:	681c      	ldr	r4, [r3, #0]
 800720c:	6838      	ldr	r0, [r7, #0]
 800720e:	f7ff faae 	bl	800676e <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 8007212:	4603      	mov	r3, r0
 8007214:	681d      	ldr	r5, [r3, #0]
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	4619      	mov	r1, r3
 800721a:	2010      	movs	r0, #16
 800721c:	f7f9 f987 	bl	800052e <_ZnwjPv>
 8007220:	4603      	mov	r3, r0
 8007222:	2b00      	cmp	r3, #0
 8007224:	d004      	beq.n	8007230 <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE9constructIS2_JRjS5_EEEvPT_DpOT0_+0x3c>
 8007226:	462a      	mov	r2, r5
 8007228:	4621      	mov	r1, r4
 800722a:	4618      	mov	r0, r3
 800722c:	f7fe fa52 	bl	80056d4 <_ZN4tama7TextureC1Ejj>
 8007230:	bf00      	nop
 8007232:	3710      	adds	r7, #16
 8007234:	46bd      	mov	sp, r7
 8007236:	bdb0      	pop	{r4, r5, r7, pc}

08007238 <_ZStneIPSt10shared_ptrIN4tama8DrawableEEEbRKSt13move_iteratorIT_ES9_>:
    operator!=(const move_iterator<_Iterator>& __x,
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 8007242:	6839      	ldr	r1, [r7, #0]
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f000 f886 	bl	8007356 <_ZSteqIPSt10shared_ptrIN4tama8DrawableEEEbRKSt13move_iteratorIT_ES9_>
 800724a:	4603      	mov	r3, r0
 800724c:	f083 0301 	eor.w	r3, r3, #1
 8007250:	b2db      	uxtb	r3, r3
 8007252:	4618      	mov	r0, r3
 8007254:	3708      	adds	r7, #8
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}

0800725a <_ZNSt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEEppEv>:
      operator++()
 800725a:	b480      	push	{r7}
 800725c:	b083      	sub	sp, #12
 800725e:	af00      	add	r7, sp, #0
 8007260:	6078      	str	r0, [r7, #4]
	++_M_current;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f103 0208 	add.w	r2, r3, #8
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	601a      	str	r2, [r3, #0]
	return *this;
 800726e:	687b      	ldr	r3, [r7, #4]
      }
 8007270:	4618      	mov	r0, r3
 8007272:	370c      	adds	r7, #12
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr

0800727c <_ZNKSt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEEdeEv>:
      operator*() const
 800727c:	b480      	push	{r7}
 800727e:	b083      	sub	sp, #12
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4618      	mov	r0, r3
 800728a:	370c      	adds	r7, #12
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr

08007294 <_ZSt7forwardISt10shared_ptrIN4tama8DrawableEEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8007294:	b480      	push	{r7}
 8007296:	b083      	sub	sp, #12
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	4618      	mov	r0, r3
 80072a0:	370c      	adds	r7, #12
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr

080072aa <_ZSt10_ConstructISt10shared_ptrIN4tama8DrawableEEJS3_EEvPT_DpOT0_>:
    _Construct(_T1* __p, _Args&&... __args)
 80072aa:	b590      	push	{r4, r7, lr}
 80072ac:	b083      	sub	sp, #12
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	6078      	str	r0, [r7, #4]
 80072b2:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
 80072b4:	6838      	ldr	r0, [r7, #0]
 80072b6:	f7ff ffed 	bl	8007294 <_ZSt7forwardISt10shared_ptrIN4tama8DrawableEEEOT_RNSt16remove_referenceIS4_E4typeE>
 80072ba:	4604      	mov	r4, r0
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	4619      	mov	r1, r3
 80072c0:	2008      	movs	r0, #8
 80072c2:	f7f9 f934 	bl	800052e <_ZnwjPv>
 80072c6:	4603      	mov	r3, r0
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d003      	beq.n	80072d4 <_ZSt10_ConstructISt10shared_ptrIN4tama8DrawableEEJS3_EEvPT_DpOT0_+0x2a>
 80072cc:	4621      	mov	r1, r4
 80072ce:	4618      	mov	r0, r3
 80072d0:	f000 f862 	bl	8007398 <_ZNSt10shared_ptrIN4tama8DrawableEEC1EOS2_>
 80072d4:	bf00      	nop
 80072d6:	370c      	adds	r7, #12
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd90      	pop	{r4, r7, pc}

080072dc <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EEC1ERKS5_>:
      vector(const vector& __x)
 80072dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072de:	b085      	sub	sp, #20
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
 80072e4:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 80072e6:	687c      	ldr	r4, [r7, #4]
 80072e8:	6838      	ldr	r0, [r7, #0]
 80072ea:	f7ff fd02 	bl	8006cf2 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE4sizeEv>
 80072ee:	4605      	mov	r5, r0
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	4618      	mov	r0, r3
 80072f4:	f7ff fe4e 	bl	8006f94 <_ZNKSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE19_M_get_Tp_allocatorEv>
 80072f8:	4602      	mov	r2, r0
 80072fa:	f107 030c 	add.w	r3, r7, #12
 80072fe:	4611      	mov	r1, r2
 8007300:	4618      	mov	r0, r3
 8007302:	f000 f85c 	bl	80073be <_ZN9__gnu_cxx14__alloc_traitsISaISt10shared_ptrIN4tama8DrawableEEEE17_S_select_on_copyERKS5_>
 8007306:	f107 030c 	add.w	r3, r7, #12
 800730a:	461a      	mov	r2, r3
 800730c:	4629      	mov	r1, r5
 800730e:	4620      	mov	r0, r4
 8007310:	f000 f863 	bl	80073da <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EEC1EjRKS4_>
 8007314:	f107 030c 	add.w	r3, r7, #12
 8007318:	4618      	mov	r0, r3
 800731a:	f7fb fb4d 	bl	80029b8 <_ZNSaISt10shared_ptrIN4tama8DrawableEEED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 800731e:	6838      	ldr	r0, [r7, #0]
 8007320:	f000 f86f 	bl	8007402 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE5beginEv>
 8007324:	4605      	mov	r5, r0
 8007326:	6838      	ldr	r0, [r7, #0]
 8007328:	f000 f87f 	bl	800742a <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE3endEv>
 800732c:	4606      	mov	r6, r0
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	4618      	mov	r0, r3
 8007336:	f7fb fb26 	bl	8002986 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE19_M_get_Tp_allocatorEv>
 800733a:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 800733c:	4622      	mov	r2, r4
 800733e:	4631      	mov	r1, r6
 8007340:	4628      	mov	r0, r5
 8007342:	f000 f886 	bl	8007452 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS5_SaIS5_EEEEPS5_S5_ET0_T_SE_SD_RSaIT1_E>
 8007346:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	605a      	str	r2, [r3, #4]
      }
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	4618      	mov	r0, r3
 8007350:	3714      	adds	r7, #20
 8007352:	46bd      	mov	sp, r7
 8007354:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007356 <_ZSteqIPSt10shared_ptrIN4tama8DrawableEEEbRKSt13move_iteratorIT_ES9_>:
    operator==(const move_iterator<_Iterator>& __x,
 8007356:	b590      	push	{r4, r7, lr}
 8007358:	b083      	sub	sp, #12
 800735a:	af00      	add	r7, sp, #0
 800735c:	6078      	str	r0, [r7, #4]
 800735e:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 f887 	bl	8007474 <_ZNKSt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEE4baseEv>
 8007366:	4604      	mov	r4, r0
 8007368:	6838      	ldr	r0, [r7, #0]
 800736a:	f000 f883 	bl	8007474 <_ZNKSt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEE4baseEv>
 800736e:	4603      	mov	r3, r0
 8007370:	429c      	cmp	r4, r3
 8007372:	bf0c      	ite	eq
 8007374:	2301      	moveq	r3, #1
 8007376:	2300      	movne	r3, #0
 8007378:	b2db      	uxtb	r3, r3
 800737a:	4618      	mov	r0, r3
 800737c:	370c      	adds	r7, #12
 800737e:	46bd      	mov	sp, r7
 8007380:	bd90      	pop	{r4, r7, pc}

08007382 <_ZSt4moveIRSt10shared_ptrIN4tama8DrawableEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8007382:	b480      	push	{r7}
 8007384:	b083      	sub	sp, #12
 8007386:	af00      	add	r7, sp, #0
 8007388:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	4618      	mov	r0, r3
 800738e:	370c      	adds	r7, #12
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr

08007398 <_ZNSt10shared_ptrIN4tama8DrawableEEC1EOS2_>:
      shared_ptr(shared_ptr&& __r) noexcept
 8007398:	b590      	push	{r4, r7, lr}
 800739a:	b083      	sub	sp, #12
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]
      : __shared_ptr<_Tp>(std::move(__r)) { }
 80073a2:	687c      	ldr	r4, [r7, #4]
 80073a4:	6838      	ldr	r0, [r7, #0]
 80073a6:	f7ff ffec 	bl	8007382 <_ZSt4moveIRSt10shared_ptrIN4tama8DrawableEEEONSt16remove_referenceIT_E4typeEOS6_>
 80073aa:	4603      	mov	r3, r0
 80073ac:	4619      	mov	r1, r3
 80073ae:	4620      	mov	r0, r4
 80073b0:	f000 f86c 	bl	800748c <_ZNSt12__shared_ptrIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0EEC1EOS4_>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	4618      	mov	r0, r3
 80073b8:	370c      	adds	r7, #12
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd90      	pop	{r4, r7, pc}

080073be <_ZN9__gnu_cxx14__alloc_traitsISaISt10shared_ptrIN4tama8DrawableEEEE17_S_select_on_copyERKS5_>:
    template<typename _Ptr>
      static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type
      destroy(_Alloc& __a, _Ptr __p)
      { _Base_type::destroy(__a, std::addressof(*__p)); }

    static _Alloc _S_select_on_copy(const _Alloc& __a)
 80073be:	b580      	push	{r7, lr}
 80073c0:	b082      	sub	sp, #8
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	6078      	str	r0, [r7, #4]
 80073c6:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6839      	ldr	r1, [r7, #0]
 80073cc:	4618      	mov	r0, r3
 80073ce:	f000 f87b 	bl	80074c8 <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama8DrawableEEEE37select_on_container_copy_constructionERKS4_>
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	3708      	adds	r7, #8
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}

080073da <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EEC1EjRKS4_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 80073da:	b580      	push	{r7, lr}
 80073dc:	b084      	sub	sp, #16
 80073de:	af00      	add	r7, sp, #0
 80073e0:	60f8      	str	r0, [r7, #12]
 80073e2:	60b9      	str	r1, [r7, #8]
 80073e4:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	6879      	ldr	r1, [r7, #4]
 80073ea:	4618      	mov	r0, r3
 80073ec:	f000 f887 	bl	80074fe <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE12_Vector_implC1ERKS4_>
      { _M_create_storage(__n); }
 80073f0:	68b9      	ldr	r1, [r7, #8]
 80073f2:	68f8      	ldr	r0, [r7, #12]
 80073f4:	f000 f89a 	bl	800752c <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE17_M_create_storageEj>
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	4618      	mov	r0, r3
 80073fc:	3710      	adds	r7, #16
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}

08007402 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8007402:	b580      	push	{r7, lr}
 8007404:	b084      	sub	sp, #16
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	60fb      	str	r3, [r7, #12]
 8007410:	f107 020c 	add.w	r2, r7, #12
 8007414:	f107 0308 	add.w	r3, r7, #8
 8007418:	4611      	mov	r1, r2
 800741a:	4618      	mov	r0, r3
 800741c:	f000 f8a1 	bl	8007562 <_ZN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEC1ERKS6_>
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	4618      	mov	r0, r3
 8007424:	3710      	adds	r7, #16
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}

0800742a <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 800742a:	b580      	push	{r7, lr}
 800742c:	b084      	sub	sp, #16
 800742e:	af00      	add	r7, sp, #0
 8007430:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	60fb      	str	r3, [r7, #12]
 8007438:	f107 020c 	add.w	r2, r7, #12
 800743c:	f107 0308 	add.w	r3, r7, #8
 8007440:	4611      	mov	r1, r2
 8007442:	4618      	mov	r0, r3
 8007444:	f000 f88d 	bl	8007562 <_ZN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEC1ERKS6_>
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	4618      	mov	r0, r3
 800744c:	3710      	adds	r7, #16
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}

08007452 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS5_SaIS5_EEEEPS5_S5_ET0_T_SE_SD_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8007452:	b580      	push	{r7, lr}
 8007454:	b084      	sub	sp, #16
 8007456:	af00      	add	r7, sp, #0
 8007458:	60f8      	str	r0, [r7, #12]
 800745a:	60b9      	str	r1, [r7, #8]
 800745c:	607a      	str	r2, [r7, #4]
 800745e:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8007460:	687a      	ldr	r2, [r7, #4]
 8007462:	68b9      	ldr	r1, [r7, #8]
 8007464:	68f8      	ldr	r0, [r7, #12]
 8007466:	f000 f88c 	bl	8007582 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS5_SaIS5_EEEEPS5_ET0_T_SE_SD_>
 800746a:	4603      	mov	r3, r0
 800746c:	4618      	mov	r0, r3
 800746e:	3710      	adds	r7, #16
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}

08007474 <_ZNKSt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEE4baseEv>:
      base() const
 8007474:	b480      	push	{r7}
 8007476:	b083      	sub	sp, #12
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4618      	mov	r0, r3
 8007482:	370c      	adds	r7, #12
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr

0800748c <_ZNSt12__shared_ptrIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0EEC1EOS4_>:
      __shared_ptr(__shared_ptr&& __r) noexcept
 800748c:	b580      	push	{r7, lr}
 800748e:	b082      	sub	sp, #8
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	6039      	str	r1, [r7, #0]
      : _M_ptr(__r._M_ptr), _M_refcount()
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	601a      	str	r2, [r3, #0]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	3304      	adds	r3, #4
 80074a2:	4618      	mov	r0, r3
 80074a4:	f7f9 fce1 	bl	8000e6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	_M_refcount._M_swap(__r._M_refcount);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	1d1a      	adds	r2, r3, #4
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	3304      	adds	r3, #4
 80074b0:	4619      	mov	r1, r3
 80074b2:	4610      	mov	r0, r2
 80074b4:	f7f9 fce7 	bl	8000e86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	__r._M_ptr = 0;
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	2200      	movs	r2, #0
 80074bc:	601a      	str	r2, [r3, #0]
      }
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	4618      	mov	r0, r3
 80074c2:	3708      	adds	r7, #8
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama8DrawableEEEE37select_on_container_copy_constructionERKS4_>:
       *  @brief  Obtain an allocator to use when copying a container.
       *  @param  __rhs  An allocator.
       *  @return @c __rhs
      */
      static allocator_type
      select_on_container_copy_construction(const allocator_type& __rhs)
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b082      	sub	sp, #8
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 80074d2:	6839      	ldr	r1, [r7, #0]
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f000 f804 	bl	80074e2 <_ZNSaISt10shared_ptrIN4tama8DrawableEEEC1ERKS3_>
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	3708      	adds	r7, #8
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}

080074e2 <_ZNSaISt10shared_ptrIN4tama8DrawableEEEC1ERKS3_>:
      allocator(const allocator& __a) throw()
 80074e2:	b580      	push	{r7, lr}
 80074e4:	b082      	sub	sp, #8
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]
 80074ea:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80074ec:	6839      	ldr	r1, [r7, #0]
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 f859 	bl	80075a6 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEEC1ERKS5_>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	4618      	mov	r0, r3
 80074f8:	3708      	adds	r7, #8
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}

080074fe <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE12_Vector_implC1ERKS4_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 80074fe:	b580      	push	{r7, lr}
 8007500:	b082      	sub	sp, #8
 8007502:	af00      	add	r7, sp, #0
 8007504:	6078      	str	r0, [r7, #4]
 8007506:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
 8007508:	6839      	ldr	r1, [r7, #0]
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f7ff ffe9 	bl	80074e2 <_ZNSaISt10shared_ptrIN4tama8DrawableEEEC1ERKS3_>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2200      	movs	r2, #0
 8007514:	601a      	str	r2, [r3, #0]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2200      	movs	r2, #0
 800751a:	605a      	str	r2, [r3, #4]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2200      	movs	r2, #0
 8007520:	609a      	str	r2, [r3, #8]
	{ }
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	4618      	mov	r0, r3
 8007526:	3708      	adds	r7, #8
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}

0800752c <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 800752c:	b580      	push	{r7, lr}
 800752e:	b082      	sub	sp, #8
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8007536:	6839      	ldr	r1, [r7, #0]
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f7ff fb52 	bl	8006be2 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE11_M_allocateEj>
 800753e:	4602      	mov	r2, r0
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681a      	ldr	r2, [r3, #0]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681a      	ldr	r2, [r3, #0]
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	00db      	lsls	r3, r3, #3
 8007554:	441a      	add	r2, r3
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	609a      	str	r2, [r3, #8]
      }
 800755a:	bf00      	nop
 800755c:	3708      	adds	r7, #8
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}

08007562 <_ZN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEC1ERKS6_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8007562:	b480      	push	{r7}
 8007564:	b083      	sub	sp, #12
 8007566:	af00      	add	r7, sp, #0
 8007568:	6078      	str	r0, [r7, #4]
 800756a:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	681a      	ldr	r2, [r3, #0]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	601a      	str	r2, [r3, #0]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	4618      	mov	r0, r3
 8007578:	370c      	adds	r7, #12
 800757a:	46bd      	mov	sp, r7
 800757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007580:	4770      	bx	lr

08007582 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS5_SaIS5_EEEEPS5_ET0_T_SE_SD_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8007582:	b580      	push	{r7, lr}
 8007584:	b086      	sub	sp, #24
 8007586:	af00      	add	r7, sp, #0
 8007588:	60f8      	str	r0, [r7, #12]
 800758a:	60b9      	str	r1, [r7, #8]
 800758c:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800758e:	2301      	movs	r3, #1
 8007590:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8007592:	687a      	ldr	r2, [r7, #4]
 8007594:	68b9      	ldr	r1, [r7, #8]
 8007596:	68f8      	ldr	r0, [r7, #12]
 8007598:	f000 f811 	bl	80075be <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS7_SaIS7_EEEEPS7_EET0_T_SG_SF_>
 800759c:	4603      	mov	r3, r0
    }
 800759e:	4618      	mov	r0, r3
 80075a0:	3718      	adds	r7, #24
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}

080075a6 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEEC1ERKS5_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 80075a6:	b480      	push	{r7}
 80075a8:	b083      	sub	sp, #12
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
 80075ae:	6039      	str	r1, [r7, #0]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	4618      	mov	r0, r3
 80075b4:	370c      	adds	r7, #12
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr

080075be <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS7_SaIS7_EEEEPS7_EET0_T_SG_SF_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80075be:	b590      	push	{r4, r7, lr}
 80075c0:	b087      	sub	sp, #28
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	60f8      	str	r0, [r7, #12]
 80075c6:	60b9      	str	r1, [r7, #8]
 80075c8:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 80075ce:	f107 0208 	add.w	r2, r7, #8
 80075d2:	f107 030c 	add.w	r3, r7, #12
 80075d6:	4611      	mov	r1, r2
 80075d8:	4618      	mov	r0, r3
 80075da:	f000 f81f 	bl	800761c <_ZN9__gnu_cxxneIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEEbRKNS_17__normal_iteratorIT_T0_EESF_>
 80075de:	4603      	mov	r3, r0
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d016      	beq.n	8007612 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS7_SaIS7_EEEEPS7_EET0_T_SG_SF_+0x54>
		std::_Construct(std::__addressof(*__cur), *__first);
 80075e4:	6978      	ldr	r0, [r7, #20]
 80075e6:	f7fb fa2d 	bl	8002a44 <_ZSt11__addressofISt10shared_ptrIN4tama8DrawableEEEPT_RS4_>
 80075ea:	4604      	mov	r4, r0
 80075ec:	f107 030c 	add.w	r3, r7, #12
 80075f0:	4618      	mov	r0, r3
 80075f2:	f000 f83c 	bl	800766e <_ZNK9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEdeEv>
 80075f6:	4603      	mov	r3, r0
 80075f8:	4619      	mov	r1, r3
 80075fa:	4620      	mov	r0, r4
 80075fc:	f000 f843 	bl	8007686 <_ZSt10_ConstructISt10shared_ptrIN4tama8DrawableEEJRKS3_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 8007600:	f107 030c 	add.w	r3, r7, #12
 8007604:	4618      	mov	r0, r3
 8007606:	f000 f821 	bl	800764c <_ZN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEppEv>
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	3308      	adds	r3, #8
 800760e:	617b      	str	r3, [r7, #20]
 8007610:	e7dd      	b.n	80075ce <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS7_SaIS7_EEEEPS7_EET0_T_SG_SF_+0x10>
	      return __cur;
 8007612:	697b      	ldr	r3, [r7, #20]
	}
 8007614:	4618      	mov	r0, r3
 8007616:	371c      	adds	r7, #28
 8007618:	46bd      	mov	sp, r7
 800761a:	bd90      	pop	{r4, r7, pc}

0800761c <_ZN9__gnu_cxxneIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEEbRKNS_17__normal_iteratorIT_T0_EESF_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 800761c:	b590      	push	{r4, r7, lr}
 800761e:	b083      	sub	sp, #12
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f000 f846 	bl	80076b8 <_ZNK9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEE4baseEv>
 800762c:	4603      	mov	r3, r0
 800762e:	681c      	ldr	r4, [r3, #0]
 8007630:	6838      	ldr	r0, [r7, #0]
 8007632:	f000 f841 	bl	80076b8 <_ZNK9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEE4baseEv>
 8007636:	4603      	mov	r3, r0
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	429c      	cmp	r4, r3
 800763c:	bf14      	ite	ne
 800763e:	2301      	movne	r3, #1
 8007640:	2300      	moveq	r3, #0
 8007642:	b2db      	uxtb	r3, r3
 8007644:	4618      	mov	r0, r3
 8007646:	370c      	adds	r7, #12
 8007648:	46bd      	mov	sp, r7
 800764a:	bd90      	pop	{r4, r7, pc}

0800764c <_ZN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800764c:	b480      	push	{r7}
 800764e:	b083      	sub	sp, #12
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
	++_M_current;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f103 0208 	add.w	r2, r3, #8
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	601a      	str	r2, [r3, #0]
	return *this;
 8007660:	687b      	ldr	r3, [r7, #4]
      }
 8007662:	4618      	mov	r0, r3
 8007664:	370c      	adds	r7, #12
 8007666:	46bd      	mov	sp, r7
 8007668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766c:	4770      	bx	lr

0800766e <_ZNK9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800766e:	b480      	push	{r7}
 8007670:	b083      	sub	sp, #12
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4618      	mov	r0, r3
 800767c:	370c      	adds	r7, #12
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr

08007686 <_ZSt10_ConstructISt10shared_ptrIN4tama8DrawableEEJRKS3_EEvPT_DpOT0_>:
    _Construct(_T1* __p, _Args&&... __args)
 8007686:	b590      	push	{r4, r7, lr}
 8007688:	b083      	sub	sp, #12
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
 800768e:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
 8007690:	6838      	ldr	r0, [r7, #0]
 8007692:	f7ff f8fc 	bl	800688e <_ZSt7forwardIRKSt10shared_ptrIN4tama8DrawableEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8007696:	4604      	mov	r4, r0
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	4619      	mov	r1, r3
 800769c:	2008      	movs	r0, #8
 800769e:	f7f8 ff46 	bl	800052e <_ZnwjPv>
 80076a2:	4603      	mov	r3, r0
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d003      	beq.n	80076b0 <_ZSt10_ConstructISt10shared_ptrIN4tama8DrawableEEJRKS3_EEvPT_DpOT0_+0x2a>
 80076a8:	4621      	mov	r1, r4
 80076aa:	4618      	mov	r0, r3
 80076ac:	f7fe ff4f 	bl	800654e <_ZNSt10shared_ptrIN4tama8DrawableEEC1ERKS2_>
 80076b0:	bf00      	nop
 80076b2:	370c      	adds	r7, #12
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd90      	pop	{r4, r7, pc}

080076b8 <_ZNK9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80076b8:	b480      	push	{r7}
 80076ba:	b083      	sub	sp, #12
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	4618      	mov	r0, r3
 80076c4:	370c      	adds	r7, #12
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr

080076ce <_ZN4tama11DisplayDataD1Ev>:
    public:
        void * data;
        unsigned size;
        unsigned elementSize;

        ~DisplayData() {
 80076ce:	b580      	push	{r7, lr}
 80076d0:	b082      	sub	sp, #8
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	6078      	str	r0, [r7, #4]
            delete[] ((short *)data);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d004      	beq.n	80076e8 <_ZN4tama11DisplayDataD1Ev+0x1a>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4618      	mov	r0, r3
 80076e4:	f00e fc66 	bl	8015fb4 <_ZdaPv>
        }
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	4618      	mov	r0, r3
 80076ec:	3708      	adds	r7, #8
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}
	...

080076f4 <_ZN4tama25Stm32SoundPlayingStrategy4playENS_4ToneE>:
namespace tama
{
    class Stm32SoundPlayingStrategy : public SoundPlayingStrategy
    {
    public:
        void play(Tone tone) override
 80076f4:	b480      	push	{r7}
 80076f6:	b085      	sub	sp, #20
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	60f8      	str	r0, [r7, #12]
 80076fc:	1d3b      	adds	r3, r7, #4
 80076fe:	e883 0006 	stmia.w	r3, {r1, r2}
        {
            if (tone.value == 0)
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d104      	bne.n	8007712 <_ZN4tama25Stm32SoundPlayingStrategy4playENS_4ToneE+0x1e>
            {
                __HAL_TIM_SET_PRESCALER(&htim3, 0);
 8007708:	4b0a      	ldr	r3, [pc, #40]	; (8007734 <_ZN4tama25Stm32SoundPlayingStrategy4playENS_4ToneE+0x40>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	2200      	movs	r2, #0
 800770e:	629a      	str	r2, [r3, #40]	; 0x28
            else
            {
                __HAL_TIM_SET_PRESCALER(&htim3, 175 - 5 * (tone.value - 1));
            }

        }
 8007710:	e009      	b.n	8007726 <_ZN4tama25Stm32SoundPlayingStrategy4playENS_4ToneE+0x32>
                __HAL_TIM_SET_PRESCALER(&htim3, 175 - 5 * (tone.value - 1));
 8007712:	68ba      	ldr	r2, [r7, #8]
 8007714:	4613      	mov	r3, r2
 8007716:	079b      	lsls	r3, r3, #30
 8007718:	1a9b      	subs	r3, r3, r2
 800771a:	009b      	lsls	r3, r3, #2
 800771c:	1a9a      	subs	r2, r3, r2
 800771e:	4b05      	ldr	r3, [pc, #20]	; (8007734 <_ZN4tama25Stm32SoundPlayingStrategy4playENS_4ToneE+0x40>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	32b4      	adds	r2, #180	; 0xb4
 8007724:	629a      	str	r2, [r3, #40]	; 0x28
        }
 8007726:	bf00      	nop
 8007728:	3714      	adds	r7, #20
 800772a:	46bd      	mov	sp, r7
 800772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007730:	4770      	bx	lr
 8007732:	bf00      	nop
 8007734:	2000035c 	.word	0x2000035c

08007738 <_ZN4tama25Stm32SoundPlayingStrategy4stopEv>:

        void stop() override
 8007738:	b480      	push	{r7}
 800773a:	b083      	sub	sp, #12
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
        {
            __HAL_TIM_SET_PRESCALER(&htim3, 0);
 8007740:	4b04      	ldr	r3, [pc, #16]	; (8007754 <_ZN4tama25Stm32SoundPlayingStrategy4stopEv+0x1c>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	2200      	movs	r2, #0
 8007746:	629a      	str	r2, [r3, #40]	; 0x28
        }
 8007748:	bf00      	nop
 800774a:	370c      	adds	r7, #12
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr
 8007754:	2000035c 	.word	0x2000035c

08007758 <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_ptr() = default;
 8007758:	b580      	push	{r7, lr}
 800775a:	b082      	sub	sp, #8
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	3304      	adds	r3, #4
 8007764:	4618      	mov	r0, r3
 8007766:	f7f9 f964 	bl	8000a32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	4618      	mov	r0, r3
 800776e:	3708      	adds	r7, #8
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}

08007774 <_ZNSt10shared_ptrIN4tama16Nokia5510DisplayEED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 8007774:	b580      	push	{r7, lr}
 8007776:	b082      	sub	sp, #8
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	4618      	mov	r0, r3
 8007780:	f7ff ffea 	bl	8007758 <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	4618      	mov	r0, r3
 8007788:	3708      	adds	r7, #8
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}

0800778e <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
 800778e:	b580      	push	{r7, lr}
 8007790:	b082      	sub	sp, #8
 8007792:	af00      	add	r7, sp, #0
 8007794:	6078      	str	r0, [r7, #4]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	3304      	adds	r3, #4
 800779a:	4618      	mov	r0, r3
 800779c:	f7f9 f949 	bl	8000a32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	4618      	mov	r0, r3
 80077a4:	3708      	adds	r7, #8
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}

080077aa <_ZNSt10shared_ptrIN4tama18Stm32TextureLoaderEED1Ev>:
 80077aa:	b580      	push	{r7, lr}
 80077ac:	b082      	sub	sp, #8
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	6078      	str	r0, [r7, #4]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	4618      	mov	r0, r3
 80077b6:	f7ff ffea 	bl	800778e <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	4618      	mov	r0, r3
 80077be:	3708      	adds	r7, #8
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}

080077c4 <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b082      	sub	sp, #8
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	3304      	adds	r3, #4
 80077d0:	4618      	mov	r0, r3
 80077d2:	f7f9 f92e 	bl	8000a32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	4618      	mov	r0, r3
 80077da:	3708      	adds	r7, #8
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}

080077e0 <_ZNSt10shared_ptrIN4tama27Nokia5110DisplayDataManagerEED1Ev>:
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b082      	sub	sp, #8
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	4618      	mov	r0, r3
 80077ec:	f7ff ffea 	bl	80077c4 <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	4618      	mov	r0, r3
 80077f4:	3708      	adds	r7, #8
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}

080077fa <_ZNSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
 80077fa:	b580      	push	{r7, lr}
 80077fc:	b082      	sub	sp, #8
 80077fe:	af00      	add	r7, sp, #0
 8007800:	6078      	str	r0, [r7, #4]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	3304      	adds	r3, #4
 8007806:	4618      	mov	r0, r3
 8007808:	f7f9 f913 	bl	8000a32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	4618      	mov	r0, r3
 8007810:	3708      	adds	r7, #8
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}

08007816 <_ZNSt10shared_ptrIN4tama16Stm32TimeMonitorEED1Ev>:
 8007816:	b580      	push	{r7, lr}
 8007818:	b082      	sub	sp, #8
 800781a:	af00      	add	r7, sp, #0
 800781c:	6078      	str	r0, [r7, #4]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	4618      	mov	r0, r3
 8007822:	f7ff ffea 	bl	80077fa <_ZNSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	4618      	mov	r0, r3
 800782a:	3708      	adds	r7, #8
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}

08007830 <_ZNSt12__shared_ptrIN4tama11TimeMonitorELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
 8007830:	b580      	push	{r7, lr}
 8007832:	b082      	sub	sp, #8
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	3304      	adds	r3, #4
 800783c:	4618      	mov	r0, r3
 800783e:	f7f9 f8f8 	bl	8000a32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	4618      	mov	r0, r3
 8007846:	3708      	adds	r7, #8
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}

0800784c <_ZNSt10shared_ptrIN4tama11TimeMonitorEED1Ev>:
 800784c:	b580      	push	{r7, lr}
 800784e:	b082      	sub	sp, #8
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	4618      	mov	r0, r3
 8007858:	f7ff ffea 	bl	8007830 <_ZNSt12__shared_ptrIN4tama11TimeMonitorELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	4618      	mov	r0, r3
 8007860:	3708      	adds	r7, #8
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}

08007866 <_ZNSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
 8007866:	b580      	push	{r7, lr}
 8007868:	b082      	sub	sp, #8
 800786a:	af00      	add	r7, sp, #0
 800786c:	6078      	str	r0, [r7, #4]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	3304      	adds	r3, #4
 8007872:	4618      	mov	r0, r3
 8007874:	f7f9 f8dd 	bl	8000a32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	4618      	mov	r0, r3
 800787c:	3708      	adds	r7, #8
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}

08007882 <_ZNSt10shared_ptrIN4tama25Stm32SoundPlayingStrategyEED1Ev>:
 8007882:	b580      	push	{r7, lr}
 8007884:	b082      	sub	sp, #8
 8007886:	af00      	add	r7, sp, #0
 8007888:	6078      	str	r0, [r7, #4]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	4618      	mov	r0, r3
 800788e:	f7ff ffea 	bl	8007866 <_ZNSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	4618      	mov	r0, r3
 8007896:	3708      	adds	r7, #8
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}

0800789c <_ZNSt12__shared_ptrIN4tama20SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
 800789c:	b580      	push	{r7, lr}
 800789e:	b082      	sub	sp, #8
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	3304      	adds	r3, #4
 80078a8:	4618      	mov	r0, r3
 80078aa:	f7f9 f8c2 	bl	8000a32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	4618      	mov	r0, r3
 80078b2:	3708      	adds	r7, #8
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}

080078b8 <_ZNSt10shared_ptrIN4tama20SoundPlayingStrategyEED1Ev>:
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b082      	sub	sp, #8
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	4618      	mov	r0, r3
 80078c4:	f7ff ffea 	bl	800789c <_ZNSt12__shared_ptrIN4tama20SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	4618      	mov	r0, r3
 80078cc:	3708      	adds	r7, #8
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}

080078d2 <_ZNSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
 80078d2:	b580      	push	{r7, lr}
 80078d4:	b082      	sub	sp, #8
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	6078      	str	r0, [r7, #4]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	3304      	adds	r3, #4
 80078de:	4618      	mov	r0, r3
 80078e0:	f7f9 f8a7 	bl	8000a32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	4618      	mov	r0, r3
 80078e8:	3708      	adds	r7, #8
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}

080078ee <_ZNSt10shared_ptrIN4tama10Stm32InputEED1Ev>:
 80078ee:	b580      	push	{r7, lr}
 80078f0:	b082      	sub	sp, #8
 80078f2:	af00      	add	r7, sp, #0
 80078f4:	6078      	str	r0, [r7, #4]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	4618      	mov	r0, r3
 80078fa:	f7ff ffea 	bl	80078d2 <_ZNSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	4618      	mov	r0, r3
 8007902:	3708      	adds	r7, #8
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}

08007908 <_ZNSt12__shared_ptrIN4tama20SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8007908:	b580      	push	{r7, lr}
 800790a:	b082      	sub	sp, #8
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	6039      	str	r1, [r7, #0]
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	681a      	ldr	r2, [r3, #0]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	601a      	str	r2, [r3, #0]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	1d1a      	adds	r2, r3, #4
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	3304      	adds	r3, #4
 8007922:	4619      	mov	r1, r3
 8007924:	4610      	mov	r0, r2
 8007926:	f7f9 f86d 	bl	8000a04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	4618      	mov	r0, r3
 800792e:	3708      	adds	r7, #8
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}

08007934 <_ZNSt10shared_ptrIN4tama20SoundPlayingStrategyEEC1ERKS2_>:
      shared_ptr(const shared_ptr&) noexcept = default;
 8007934:	b580      	push	{r7, lr}
 8007936:	b082      	sub	sp, #8
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
 800793c:	6039      	str	r1, [r7, #0]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	683a      	ldr	r2, [r7, #0]
 8007942:	4611      	mov	r1, r2
 8007944:	4618      	mov	r0, r3
 8007946:	f7ff ffdf 	bl	8007908 <_ZNSt12__shared_ptrIN4tama20SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	4618      	mov	r0, r3
 800794e:	3708      	adds	r7, #8
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}

08007954 <_ZN4tama4Main3runEv>:
#include "../Core/input/Input.h"
#include "../STM32F411Disco-drivers/input/Stm32Input.h"


[[noreturn]] void tama::Main::run()
{
 8007954:	b5b0      	push	{r4, r5, r7, lr}
 8007956:	b0f0      	sub	sp, #448	; 0x1c0
 8007958:	af00      	add	r7, sp, #0
 800795a:	1d3b      	adds	r3, r7, #4
 800795c:	6018      	str	r0, [r3, #0]
    unsigned fps = 5;
 800795e:	2305      	movs	r3, #5
 8007960:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
    unsigned frameMillis = 1000 / fps;
 8007964:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007968:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800796c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007970:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8

    DisplayConfig displayConfig = getDefaultNokia5110DisplayConfig();
 8007974:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8007978:	1d3b      	adds	r3, r7, #4
 800797a:	6819      	ldr	r1, [r3, #0]
 800797c:	4610      	mov	r0, r2
 800797e:	f000 faf3 	bl	8007f68 <_ZN4tama4Main32getDefaultNokia5110DisplayConfigEv>
    std::shared_ptr<Display> display = std::make_shared<Nokia5510Display>(displayConfig);
 8007982:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8007986:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800798a:	4611      	mov	r1, r2
 800798c:	4618      	mov	r0, r3
 800798e:	f000 fb26 	bl	8007fde <_ZSt11make_sharedIN4tama16Nokia5510DisplayEJRNS0_13DisplayConfigEEESt10shared_ptrIT_EDpOT0_>
 8007992:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8007996:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800799a:	4611      	mov	r1, r2
 800799c:	4618      	mov	r0, r3
 800799e:	f000 fb46 	bl	800802e <_ZNSt10shared_ptrIN4tama7DisplayEEC1INS0_16Nokia5510DisplayEvEEOS_IT_E>
 80079a2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80079a6:	4618      	mov	r0, r3
 80079a8:	f7ff fee4 	bl	8007774 <_ZNSt10shared_ptrIN4tama16Nokia5510DisplayEED1Ev>
    std::shared_ptr<TextureLoader> textureLoader = std::make_shared<Stm32TextureLoader>();
 80079ac:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80079b0:	4618      	mov	r0, r3
 80079b2:	f000 fb4f 	bl	8008054 <_ZSt11make_sharedIN4tama18Stm32TextureLoaderEJEESt10shared_ptrIT_EDpOT0_>
 80079b6:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80079ba:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80079be:	4611      	mov	r1, r2
 80079c0:	4618      	mov	r0, r3
 80079c2:	f000 fb6b 	bl	800809c <_ZNSt10shared_ptrIN4tama13TextureLoaderEEC1INS0_18Stm32TextureLoaderEvEEOS_IT_E>
 80079c6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80079ca:	4618      	mov	r0, r3
 80079cc:	f7ff feed 	bl	80077aa <_ZNSt10shared_ptrIN4tama18Stm32TextureLoaderEED1Ev>
    std::shared_ptr<DisplayDataManager> dataConverter = std::make_shared<Nokia5110DisplayDataManager>();
 80079d0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80079d4:	4618      	mov	r0, r3
 80079d6:	f000 fb74 	bl	80080c2 <_ZSt11make_sharedIN4tama27Nokia5110DisplayDataManagerEJEESt10shared_ptrIT_EDpOT0_>
 80079da:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80079de:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80079e2:	4611      	mov	r1, r2
 80079e4:	4618      	mov	r0, r3
 80079e6:	f000 fb90 	bl	800810a <_ZNSt10shared_ptrIN4tama18DisplayDataManagerEEC1INS0_27Nokia5110DisplayDataManagerEvEEOS_IT_E>
 80079ea:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80079ee:	4618      	mov	r0, r3
 80079f0:	f7ff fef6 	bl	80077e0 <_ZNSt10shared_ptrIN4tama27Nokia5110DisplayDataManagerEED1Ev>
    std::shared_ptr<TimeMonitor> soundTimeMonitor = std::make_shared<Stm32TimeMonitor>();
 80079f4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80079f8:	4618      	mov	r0, r3
 80079fa:	f000 fb99 	bl	8008130 <_ZSt11make_sharedIN4tama16Stm32TimeMonitorEJEESt10shared_ptrIT_EDpOT0_>
 80079fe:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8007a02:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007a06:	4611      	mov	r1, r2
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f000 fbb5 	bl	8008178 <_ZNSt10shared_ptrIN4tama11TimeMonitorEEC1INS0_16Stm32TimeMonitorEvEEOS_IT_E>
 8007a0e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8007a12:	4618      	mov	r0, r3
 8007a14:	f7ff feff 	bl	8007816 <_ZNSt10shared_ptrIN4tama16Stm32TimeMonitorEED1Ev>
    std::shared_ptr<TimeMonitor> refreshTimeMonitor = std::make_shared<Stm32TimeMonitor>();
 8007a18:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	f000 fb87 	bl	8008130 <_ZSt11make_sharedIN4tama16Stm32TimeMonitorEJEESt10shared_ptrIT_EDpOT0_>
 8007a22:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8007a26:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8007a2a:	4611      	mov	r1, r2
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f000 fba3 	bl	8008178 <_ZNSt10shared_ptrIN4tama11TimeMonitorEEC1INS0_16Stm32TimeMonitorEvEEOS_IT_E>
 8007a32:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8007a36:	4618      	mov	r0, r3
 8007a38:	f7ff feed 	bl	8007816 <_ZNSt10shared_ptrIN4tama16Stm32TimeMonitorEED1Ev>
    std::shared_ptr<SoundPlayingStrategy> playingStrategy = std::make_shared<Stm32SoundPlayingStrategy>();
 8007a3c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8007a40:	4618      	mov	r0, r3
 8007a42:	f000 fbac 	bl	800819e <_ZSt11make_sharedIN4tama25Stm32SoundPlayingStrategyEJEESt10shared_ptrIT_EDpOT0_>
 8007a46:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8007a4a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007a4e:	4611      	mov	r1, r2
 8007a50:	4618      	mov	r0, r3
 8007a52:	f000 fbc8 	bl	80081e6 <_ZNSt10shared_ptrIN4tama20SoundPlayingStrategyEEC1INS0_25Stm32SoundPlayingStrategyEvEEOS_IT_E>
 8007a56:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f7ff ff11 	bl	8007882 <_ZNSt10shared_ptrIN4tama25Stm32SoundPlayingStrategyEED1Ev>
    std::shared_ptr<SoundPlayer> soundPlayer = std::make_shared<SoundPlayer>(soundTimeMonitor);
 8007a60:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007a64:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8007a68:	4611      	mov	r1, r2
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f000 fbd9 	bl	8008222 <_ZSt11make_sharedIN4tama11SoundPlayerEJRSt10shared_ptrINS0_11TimeMonitorEEEES2_IT_EDpOT0_>
    std::shared_ptr<Input> input = std::make_shared<Stm32Input>();
 8007a70:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8007a74:	4618      	mov	r0, r3
 8007a76:	f000 fbf1 	bl	800825c <_ZSt11make_sharedIN4tama10Stm32InputEJEESt10shared_ptrIT_EDpOT0_>
 8007a7a:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8007a7e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007a82:	4611      	mov	r1, r2
 8007a84:	4618      	mov	r0, r3
 8007a86:	f000 fc0d 	bl	80082a4 <_ZNSt10shared_ptrIN4tama5InputEEC1INS0_10Stm32InputEvEEOS_IT_E>
 8007a8a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f7ff ff2d 	bl	80078ee <_ZNSt10shared_ptrIN4tama10Stm32InputEED1Ev>
    soundPlayer->setPlayingStrategy(playingStrategy);
 8007a94:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007a98:	4618      	mov	r0, r3
 8007a9a:	f000 fc16 	bl	80082ca <_ZNKSt19__shared_ptr_accessIN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8007a9e:	4604      	mov	r4, r0
 8007aa0:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8007aa4:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8007aa8:	4611      	mov	r1, r2
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f7ff ff42 	bl	8007934 <_ZNSt10shared_ptrIN4tama20SoundPlayingStrategyEEC1ERKS2_>
 8007ab0:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8007ab4:	4619      	mov	r1, r3
 8007ab6:	4620      	mov	r0, r4
 8007ab8:	f7fb f95b 	bl	8002d72 <_ZN4tama11SoundPlayer18setPlayingStrategyESt10shared_ptrINS_20SoundPlayingStrategyEE>
 8007abc:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	f7ff fef9 	bl	80078b8 <_ZNSt10shared_ptrIN4tama20SoundPlayingStrategyEED1Ev>
    std::vector<Tone> music;
 8007ac6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007aca:	4618      	mov	r0, r3
 8007acc:	f7fb fa0c 	bl	8002ee8 <_ZNSt6vectorIN4tama4ToneESaIS1_EEC1Ev>
    music.push_back({400, 10});
 8007ad0:	4acb      	ldr	r2, [pc, #812]	; (8007e00 <_ZN4tama4Main3runEv+0x4ac>)
 8007ad2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8007ad6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007ada:	e883 0003 	stmia.w	r3, {r0, r1}
 8007ade:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8007ae2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007ae6:	4611      	mov	r1, r2
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f000 fc05 	bl	80082f8 <_ZNSt6vectorIN4tama4ToneESaIS1_EE9push_backEOS1_>
    music.push_back({400, 5});
 8007aee:	4ac5      	ldr	r2, [pc, #788]	; (8007e04 <_ZN4tama4Main3runEv+0x4b0>)
 8007af0:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8007af4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007af8:	e883 0003 	stmia.w	r3, {r0, r1}
 8007afc:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8007b00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007b04:	4611      	mov	r1, r2
 8007b06:	4618      	mov	r0, r3
 8007b08:	f000 fbf6 	bl	80082f8 <_ZNSt6vectorIN4tama4ToneESaIS1_EE9push_backEOS1_>
    music.push_back({400, 10});
 8007b0c:	4abc      	ldr	r2, [pc, #752]	; (8007e00 <_ZN4tama4Main3runEv+0x4ac>)
 8007b0e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8007b12:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007b16:	e883 0003 	stmia.w	r3, {r0, r1}
 8007b1a:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 8007b1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007b22:	4611      	mov	r1, r2
 8007b24:	4618      	mov	r0, r3
 8007b26:	f000 fbe7 	bl	80082f8 <_ZNSt6vectorIN4tama4ToneESaIS1_EE9push_backEOS1_>
    music.push_back({400, 5});
 8007b2a:	4ab6      	ldr	r2, [pc, #728]	; (8007e04 <_ZN4tama4Main3runEv+0x4b0>)
 8007b2c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8007b30:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007b34:	e883 0003 	stmia.w	r3, {r0, r1}
 8007b38:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8007b3c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007b40:	4611      	mov	r1, r2
 8007b42:	4618      	mov	r0, r3
 8007b44:	f000 fbd8 	bl	80082f8 <_ZNSt6vectorIN4tama4ToneESaIS1_EE9push_backEOS1_>
    music.push_back({300, 10});
 8007b48:	4aaf      	ldr	r2, [pc, #700]	; (8007e08 <_ZN4tama4Main3runEv+0x4b4>)
 8007b4a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8007b4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007b52:	e883 0003 	stmia.w	r3, {r0, r1}
 8007b56:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8007b5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007b5e:	4611      	mov	r1, r2
 8007b60:	4618      	mov	r0, r3
 8007b62:	f000 fbc9 	bl	80082f8 <_ZNSt6vectorIN4tama4ToneESaIS1_EE9push_backEOS1_>
    music.push_back({200, 14});
 8007b66:	4aa9      	ldr	r2, [pc, #676]	; (8007e0c <_ZN4tama4Main3runEv+0x4b8>)
 8007b68:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8007b6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007b70:	e883 0003 	stmia.w	r3, {r0, r1}
 8007b74:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8007b78:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007b7c:	4611      	mov	r1, r2
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f000 fbba 	bl	80082f8 <_ZNSt6vectorIN4tama4ToneESaIS1_EE9push_backEOS1_>
    music.push_back({200, 10});
 8007b84:	4aa2      	ldr	r2, [pc, #648]	; (8007e10 <_ZN4tama4Main3runEv+0x4bc>)
 8007b86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007b8e:	e883 0003 	stmia.w	r3, {r0, r1}
 8007b92:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8007b96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007b9a:	4611      	mov	r1, r2
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f000 fbab 	bl	80082f8 <_ZNSt6vectorIN4tama4ToneESaIS1_EE9push_backEOS1_>
    music.push_back({200, 7});
 8007ba2:	4a9c      	ldr	r2, [pc, #624]	; (8007e14 <_ZN4tama4Main3runEv+0x4c0>)
 8007ba4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007ba8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007bac:	e883 0003 	stmia.w	r3, {r0, r1}
 8007bb0:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8007bb4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007bb8:	4611      	mov	r1, r2
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f000 fb9c 	bl	80082f8 <_ZNSt6vectorIN4tama4ToneESaIS1_EE9push_backEOS1_>
    music.push_back({200, 5});
 8007bc0:	4a95      	ldr	r2, [pc, #596]	; (8007e18 <_ZN4tama4Main3runEv+0x4c4>)
 8007bc2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007bc6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007bca:	e883 0003 	stmia.w	r3, {r0, r1}
 8007bce:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8007bd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007bd6:	4611      	mov	r1, r2
 8007bd8:	4618      	mov	r0, r3
 8007bda:	f000 fb8d 	bl	80082f8 <_ZNSt6vectorIN4tama4ToneESaIS1_EE9push_backEOS1_>
    music.push_back({400, 7});
 8007bde:	4a8f      	ldr	r2, [pc, #572]	; (8007e1c <_ZN4tama4Main3runEv+0x4c8>)
 8007be0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007be4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007be8:	e883 0003 	stmia.w	r3, {r0, r1}
 8007bec:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8007bf0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007bf4:	4611      	mov	r1, r2
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f000 fb7e 	bl	80082f8 <_ZNSt6vectorIN4tama4ToneESaIS1_EE9push_backEOS1_>
    music.push_back({200, 0});
 8007bfc:	23c8      	movs	r3, #200	; 0xc8
 8007bfe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007c02:	2300      	movs	r3, #0
 8007c04:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007c08:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8007c0c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007c10:	4611      	mov	r1, r2
 8007c12:	4618      	mov	r0, r3
 8007c14:	f000 fb70 	bl	80082f8 <_ZNSt6vectorIN4tama4ToneESaIS1_EE9push_backEOS1_>
    music.push_back({400, 10});
 8007c18:	4a79      	ldr	r2, [pc, #484]	; (8007e00 <_ZN4tama4Main3runEv+0x4ac>)
 8007c1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007c22:	e883 0003 	stmia.w	r3, {r0, r1}
 8007c26:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007c2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007c2e:	4611      	mov	r1, r2
 8007c30:	4618      	mov	r0, r3
 8007c32:	f000 fb61 	bl	80082f8 <_ZNSt6vectorIN4tama4ToneESaIS1_EE9push_backEOS1_>
    music.push_back({400, 5});
 8007c36:	4a73      	ldr	r2, [pc, #460]	; (8007e04 <_ZN4tama4Main3runEv+0x4b0>)
 8007c38:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007c3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007c40:	e883 0003 	stmia.w	r3, {r0, r1}
 8007c44:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007c48:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007c4c:	4611      	mov	r1, r2
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f000 fb52 	bl	80082f8 <_ZNSt6vectorIN4tama4ToneESaIS1_EE9push_backEOS1_>
    music.push_back({400, 10});
 8007c54:	4a6a      	ldr	r2, [pc, #424]	; (8007e00 <_ZN4tama4Main3runEv+0x4ac>)
 8007c56:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007c5a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007c5e:	e883 0003 	stmia.w	r3, {r0, r1}
 8007c62:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8007c66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007c6a:	4611      	mov	r1, r2
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f000 fb43 	bl	80082f8 <_ZNSt6vectorIN4tama4ToneESaIS1_EE9push_backEOS1_>
    music.push_back({400, 5});
 8007c72:	4a64      	ldr	r2, [pc, #400]	; (8007e04 <_ZN4tama4Main3runEv+0x4b0>)
 8007c74:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007c78:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007c7c:	e883 0003 	stmia.w	r3, {r0, r1}
 8007c80:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8007c84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007c88:	4611      	mov	r1, r2
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f000 fb34 	bl	80082f8 <_ZNSt6vectorIN4tama4ToneESaIS1_EE9push_backEOS1_>
    music.push_back({300, 10});
 8007c90:	4a5d      	ldr	r2, [pc, #372]	; (8007e08 <_ZN4tama4Main3runEv+0x4b4>)
 8007c92:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8007c96:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007c9a:	e883 0003 	stmia.w	r3, {r0, r1}
 8007c9e:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8007ca2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007ca6:	4611      	mov	r1, r2
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f000 fb25 	bl	80082f8 <_ZNSt6vectorIN4tama4ToneESaIS1_EE9push_backEOS1_>
    music.push_back({200, 14});
 8007cae:	4a57      	ldr	r2, [pc, #348]	; (8007e0c <_ZN4tama4Main3runEv+0x4b8>)
 8007cb0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8007cb4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007cb8:	e883 0003 	stmia.w	r3, {r0, r1}
 8007cbc:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8007cc0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007cc4:	4611      	mov	r1, r2
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f000 fb16 	bl	80082f8 <_ZNSt6vectorIN4tama4ToneESaIS1_EE9push_backEOS1_>
    music.push_back({200, 10});
 8007ccc:	4a50      	ldr	r2, [pc, #320]	; (8007e10 <_ZN4tama4Main3runEv+0x4bc>)
 8007cce:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8007cd2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007cd6:	e883 0003 	stmia.w	r3, {r0, r1}
 8007cda:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8007cde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007ce2:	4611      	mov	r1, r2
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f000 fb07 	bl	80082f8 <_ZNSt6vectorIN4tama4ToneESaIS1_EE9push_backEOS1_>
    music.push_back({200, 7});
 8007cea:	4a4a      	ldr	r2, [pc, #296]	; (8007e14 <_ZN4tama4Main3runEv+0x4c0>)
 8007cec:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8007cf0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007cf4:	e883 0003 	stmia.w	r3, {r0, r1}
 8007cf8:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8007cfc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007d00:	4611      	mov	r1, r2
 8007d02:	4618      	mov	r0, r3
 8007d04:	f000 faf8 	bl	80082f8 <_ZNSt6vectorIN4tama4ToneESaIS1_EE9push_backEOS1_>
    music.push_back({200, 5});
 8007d08:	4a43      	ldr	r2, [pc, #268]	; (8007e18 <_ZN4tama4Main3runEv+0x4c4>)
 8007d0a:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8007d0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007d12:	e883 0003 	stmia.w	r3, {r0, r1}
 8007d16:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8007d1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007d1e:	4611      	mov	r1, r2
 8007d20:	4618      	mov	r0, r3
 8007d22:	f000 fae9 	bl	80082f8 <_ZNSt6vectorIN4tama4ToneESaIS1_EE9push_backEOS1_>
    music.push_back({400, 7});
 8007d26:	4a3d      	ldr	r2, [pc, #244]	; (8007e1c <_ZN4tama4Main3runEv+0x4c8>)
 8007d28:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8007d2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007d30:	e883 0003 	stmia.w	r3, {r0, r1}
 8007d34:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 8007d38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007d3c:	4611      	mov	r1, r2
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f000 fada 	bl	80082f8 <_ZNSt6vectorIN4tama4ToneESaIS1_EE9push_backEOS1_>

    std::shared_ptr<Context> context = std::make_shared<Context>(textureLoader, input);
 8007d44:	f107 0320 	add.w	r3, r7, #32
 8007d48:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8007d4c:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8007d50:	4618      	mov	r0, r3
 8007d52:	f000 faf8 	bl	8008346 <_ZSt11make_sharedIN4tama7ContextEJRSt10shared_ptrINS0_13TextureLoaderEERS2_INS0_5InputEEEES2_IT_EDpOT0_>
    std::shared_ptr<Stage> loadingStage = std::make_shared<InitialLoading>(context);
 8007d56:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8007d5a:	f107 0220 	add.w	r2, r7, #32
 8007d5e:	4611      	mov	r1, r2
 8007d60:	4618      	mov	r0, r3
 8007d62:	f7fb fc3e 	bl	80035e2 <_ZSt11make_sharedIN4tama14InitialLoadingEJRSt10shared_ptrINS0_7ContextEEEES2_IT_EDpOT0_>
 8007d66:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8007d6a:	f107 0318 	add.w	r3, r7, #24
 8007d6e:	4611      	mov	r1, r2
 8007d70:	4618      	mov	r0, r3
 8007d72:	f7fb fc5e 	bl	8003632 <_ZNSt10shared_ptrIN4tama5StageEEC1INS0_14InitialLoadingEvEEOS_IT_E>
 8007d76:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f7fb fa2a 	bl	80031d4 <_ZNSt10shared_ptrIN4tama14InitialLoadingEED1Ev>
    context->openNewStage(loadingStage);
 8007d80:	f107 0320 	add.w	r3, r7, #32
 8007d84:	4618      	mov	r0, r3
 8007d86:	f7fb fc15 	bl	80035b4 <_ZNKSt19__shared_ptr_accessIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8007d8a:	4604      	mov	r4, r0
 8007d8c:	f107 0218 	add.w	r2, r7, #24
 8007d90:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8007d94:	4611      	mov	r1, r2
 8007d96:	4618      	mov	r0, r3
 8007d98:	f7f9 f8ef 	bl	8000f7a <_ZNSt10shared_ptrIN4tama5StageEEC1ERKS2_>
 8007d9c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8007da0:	4619      	mov	r1, r3
 8007da2:	4620      	mov	r0, r4
 8007da4:	f7f9 f899 	bl	8000eda <_ZN4tama7Context12openNewStageESt10shared_ptrINS_5StageEE>
 8007da8:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8007dac:	4618      	mov	r0, r3
 8007dae:	f7f9 f8f4 	bl	8000f9a <_ZNSt10shared_ptrIN4tama5StageEED1Ev>
    context->getActiveStage()->onInit();
 8007db2:	f107 0320 	add.w	r3, r7, #32
 8007db6:	4618      	mov	r0, r3
 8007db8:	f7fb fbfc 	bl	80035b4 <_ZNKSt19__shared_ptr_accessIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8007dbc:	4602      	mov	r2, r0
 8007dbe:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8007dc2:	4611      	mov	r1, r2
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f7f9 f8f5 	bl	8000fb4 <_ZN4tama7Context14getActiveStageEv>
 8007dca:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f000 fadb 	bl	800838a <_ZNKSt19__shared_ptr_accessIN4tama5StageELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8007dd4:	4602      	mov	r2, r0
 8007dd6:	6813      	ldr	r3, [r2, #0]
 8007dd8:	3304      	adds	r3, #4
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4610      	mov	r0, r2
 8007dde:	4798      	blx	r3
 8007de0:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8007de4:	4618      	mov	r0, r3
 8007de6:	f7f9 f8d8 	bl	8000f9a <_ZNSt10shared_ptrIN4tama5StageEED1Ev>

    refreshTimeMonitor->startTimer();
 8007dea:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8007dee:	4618      	mov	r0, r3
 8007df0:	f7fa fffd 	bl	8002dee <_ZNKSt19__shared_ptr_accessIN4tama11TimeMonitorELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8007df4:	4602      	mov	r2, r0
 8007df6:	6813      	ldr	r3, [r2, #0]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4610      	mov	r0, r2
 8007dfc:	4798      	blx	r3
 8007dfe:	e00f      	b.n	8007e20 <_ZN4tama4Main3runEv+0x4cc>
 8007e00:	0801633c 	.word	0x0801633c
 8007e04:	08016344 	.word	0x08016344
 8007e08:	0801634c 	.word	0x0801634c
 8007e0c:	08016354 	.word	0x08016354
 8007e10:	0801635c 	.word	0x0801635c
 8007e14:	08016364 	.word	0x08016364
 8007e18:	0801636c 	.word	0x0801636c
 8007e1c:	08016374 	.word	0x08016374
    while (true)
    {
        input->update();
 8007e20:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007e24:	4618      	mov	r0, r3
 8007e26:	f7fb fc24 	bl	8003672 <_ZNKSt19__shared_ptr_accessIN4tama5InputELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8007e2a:	4602      	mov	r2, r0
 8007e2c:	6813      	ldr	r3, [r2, #0]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4610      	mov	r0, r2
 8007e32:	4798      	blx	r3
        soundPlayer->update();
 8007e34:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f000 fa46 	bl	80082ca <_ZNKSt19__shared_ptr_accessIN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	4618      	mov	r0, r3
 8007e42:	f7fa fef7 	bl	8002c34 <_ZN4tama11SoundPlayer6updateEv>
        if (refreshTimeMonitor->getElapsedTime() > frameMillis)
 8007e46:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f7fa ffcf 	bl	8002dee <_ZNKSt19__shared_ptr_accessIN4tama11TimeMonitorELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8007e50:	4602      	mov	r2, r0
 8007e52:	6813      	ldr	r3, [r2, #0]
 8007e54:	3304      	adds	r3, #4
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4610      	mov	r0, r2
 8007e5a:	4798      	blx	r3
 8007e5c:	4602      	mov	r2, r0
 8007e5e:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8007e62:	4293      	cmp	r3, r2
 8007e64:	bf34      	ite	cc
 8007e66:	2301      	movcc	r3, #1
 8007e68:	2300      	movcs	r3, #0
 8007e6a:	b2db      	uxtb	r3, r3
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d0d7      	beq.n	8007e20 <_ZN4tama4Main3runEv+0x4cc>
        {
            refreshTimeMonitor->startTimer();
 8007e70:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8007e74:	4618      	mov	r0, r3
 8007e76:	f7fa ffba 	bl	8002dee <_ZNKSt19__shared_ptr_accessIN4tama11TimeMonitorELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8007e7a:	4602      	mov	r2, r0
 8007e7c:	6813      	ldr	r3, [r2, #0]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4610      	mov	r0, r2
 8007e82:	4798      	blx	r3
            context->getActiveStage()->onFrame();
 8007e84:	f107 0320 	add.w	r3, r7, #32
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f7fb fb93 	bl	80035b4 <_ZNKSt19__shared_ptr_accessIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8007e8e:	4602      	mov	r2, r0
 8007e90:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8007e94:	4611      	mov	r1, r2
 8007e96:	4618      	mov	r0, r3
 8007e98:	f7f9 f88c 	bl	8000fb4 <_ZN4tama7Context14getActiveStageEv>
 8007e9c:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f000 fa72 	bl	800838a <_ZNKSt19__shared_ptr_accessIN4tama5StageELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8007ea6:	4602      	mov	r2, r0
 8007ea8:	6813      	ldr	r3, [r2, #0]
 8007eaa:	3308      	adds	r3, #8
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4610      	mov	r0, r2
 8007eb0:	4798      	blx	r3
 8007eb2:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f7f9 f86f 	bl	8000f9a <_ZNSt10shared_ptrIN4tama5StageEED1Ev>
            auto sceneData = dataConverter->getActiveSceneDisplayData(context->getActiveStage()->getScene()->getSceneData());
 8007ebc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f000 fa6e 	bl	80083a2 <_ZNKSt19__shared_ptr_accessIN4tama18DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8007ec6:	4605      	mov	r5, r0
 8007ec8:	682b      	ldr	r3, [r5, #0]
 8007eca:	681c      	ldr	r4, [r3, #0]
 8007ecc:	f107 0320 	add.w	r3, r7, #32
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f7fb fb6f 	bl	80035b4 <_ZNKSt19__shared_ptr_accessIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8007ed6:	4602      	mov	r2, r0
 8007ed8:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8007edc:	4611      	mov	r1, r2
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f7f9 f868 	bl	8000fb4 <_ZN4tama7Context14getActiveStageEv>
 8007ee4:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f000 fa4e 	bl	800838a <_ZNKSt19__shared_ptr_accessIN4tama5StageELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8007eee:	4602      	mov	r2, r0
 8007ef0:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8007ef4:	4611      	mov	r1, r2
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f7f9 ff05 	bl	8001d06 <_ZN4tama5Stage8getSceneEv>
 8007efc:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8007f00:	4618      	mov	r0, r3
 8007f02:	f7fb fc5f 	bl	80037c4 <_ZNKSt19__shared_ptr_accessIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8007f06:	4602      	mov	r2, r0
 8007f08:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007f0c:	4611      	mov	r1, r2
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f7fe fb2d 	bl	800656e <_ZN4tama5Scene12getSceneDataEv>
 8007f14:	f107 030c 	add.w	r3, r7, #12
 8007f18:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8007f1c:	4629      	mov	r1, r5
 8007f1e:	4618      	mov	r0, r3
 8007f20:	47a0      	blx	r4
 8007f22:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007f26:	4618      	mov	r0, r3
 8007f28:	f7fb fa81 	bl	800342e <_ZNSt10shared_ptrIN4tama7TextureEED1Ev>
 8007f2c:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8007f30:	4618      	mov	r0, r3
 8007f32:	f7f9 fedb 	bl	8001cec <_ZNSt10shared_ptrIN4tama5SceneEED1Ev>
 8007f36:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f7f9 f82d 	bl	8000f9a <_ZNSt10shared_ptrIN4tama5StageEED1Ev>
            display->setData(sceneData);
 8007f40:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007f44:	4618      	mov	r0, r3
 8007f46:	f000 fa38 	bl	80083ba <_ZNKSt19__shared_ptr_accessIN4tama7DisplayELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8007f4a:	4602      	mov	r2, r0
 8007f4c:	6813      	ldr	r3, [r2, #0]
 8007f4e:	3304      	adds	r3, #4
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f107 010c 	add.w	r1, r7, #12
 8007f56:	4610      	mov	r0, r2
 8007f58:	4798      	blx	r3
            auto sceneData = dataConverter->getActiveSceneDisplayData(context->getActiveStage()->getScene()->getSceneData());
 8007f5a:	f107 030c 	add.w	r3, r7, #12
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f7ff fbb5 	bl	80076ce <_ZN4tama11DisplayDataD1Ev>
        }
    }
 8007f64:	e75c      	b.n	8007e20 <_ZN4tama4Main3runEv+0x4cc>
 8007f66:	bf00      	nop

08007f68 <_ZN4tama4Main32getDefaultNokia5110DisplayConfigEv>:
}

tama::DisplayConfig tama::Main::getDefaultNokia5110DisplayConfig()
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b083      	sub	sp, #12
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	6039      	str	r1, [r7, #0]
    DisplayConfig cfg;
    cfg.spi = &hspi1;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	4a10      	ldr	r2, [pc, #64]	; (8007fb8 <_ZN4tama4Main32getDefaultNokia5110DisplayConfigEv+0x50>)
 8007f76:	601a      	str	r2, [r3, #0]
    cfg.reset_port = RST_GPIO_Port;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	4a10      	ldr	r2, [pc, #64]	; (8007fbc <_ZN4tama4Main32getDefaultNokia5110DisplayConfigEv+0x54>)
 8007f7c:	605a      	str	r2, [r3, #4]
    cfg.reset_pin = RST_Pin;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2280      	movs	r2, #128	; 0x80
 8007f82:	811a      	strh	r2, [r3, #8]
    cfg.bl_port = BL_GPIO_Port;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	4a0d      	ldr	r2, [pc, #52]	; (8007fbc <_ZN4tama4Main32getDefaultNokia5110DisplayConfigEv+0x54>)
 8007f88:	60da      	str	r2, [r3, #12]
    cfg.bl_pin = BL_Pin;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f90:	821a      	strh	r2, [r3, #16]
    cfg.dc_port = DC_GPIO_Port;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	4a0a      	ldr	r2, [pc, #40]	; (8007fc0 <_ZN4tama4Main32getDefaultNokia5110DisplayConfigEv+0x58>)
 8007f96:	615a      	str	r2, [r3, #20]
    cfg.dc_pin = DC_Pin;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2220      	movs	r2, #32
 8007f9c:	841a      	strh	r2, [r3, #32]
    cfg.ce_port = CE_GPIO_Port;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	4a08      	ldr	r2, [pc, #32]	; (8007fc4 <_ZN4tama4Main32getDefaultNokia5110DisplayConfigEv+0x5c>)
 8007fa2:	61da      	str	r2, [r3, #28]
    cfg.ce_pin = CE_Pin;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2202      	movs	r2, #2
 8007fa8:	831a      	strh	r2, [r3, #24]
    return cfg;
 8007faa:	bf00      	nop
}
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	370c      	adds	r7, #12
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr
 8007fb8:	20000304 	.word	0x20000304
 8007fbc:	40021000 	.word	0x40021000
 8007fc0:	40020800 	.word	0x40020800
 8007fc4:	40020400 	.word	0x40020400

08007fc8 <_ZSt7forwardIRN4tama13DisplayConfigEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8007fc8:	b480      	push	{r7}
 8007fca:	b083      	sub	sp, #12
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	370c      	adds	r7, #12
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fdc:	4770      	bx	lr

08007fde <_ZSt11make_sharedIN4tama16Nokia5510DisplayEJRNS0_13DisplayConfigEEESt10shared_ptrIT_EDpOT0_>:
    make_shared(_Args&&... __args)
 8007fde:	b580      	push	{r7, lr}
 8007fe0:	b084      	sub	sp, #16
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	6078      	str	r0, [r7, #4]
 8007fe6:	6039      	str	r1, [r7, #0]
				       std::forward<_Args>(__args)...);
 8007fe8:	f107 030c 	add.w	r3, r7, #12
 8007fec:	4618      	mov	r0, r3
 8007fee:	f000 f9f0 	bl	80083d2 <_ZNSaIN4tama16Nokia5510DisplayEEC1Ev>
 8007ff2:	6838      	ldr	r0, [r7, #0]
 8007ff4:	f7ff ffe8 	bl	8007fc8 <_ZSt7forwardIRN4tama13DisplayConfigEEOT_RNSt16remove_referenceIS3_E4typeE>
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f107 010c 	add.w	r1, r7, #12
 8008000:	4618      	mov	r0, r3
 8008002:	f000 f9fe 	bl	8008402 <_ZSt15allocate_sharedIN4tama16Nokia5510DisplayESaIS1_EJRNS0_13DisplayConfigEEESt10shared_ptrIT_ERKT0_DpOT1_>
 8008006:	f107 030c 	add.w	r3, r7, #12
 800800a:	4618      	mov	r0, r3
 800800c:	f000 f9ed 	bl	80083ea <_ZNSaIN4tama16Nokia5510DisplayEED1Ev>
    }
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	3710      	adds	r7, #16
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}

08008018 <_ZSt4moveIRSt10shared_ptrIN4tama16Nokia5510DisplayEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8008018:	b480      	push	{r7}
 800801a:	b083      	sub	sp, #12
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	4618      	mov	r0, r3
 8008024:	370c      	adds	r7, #12
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr

0800802e <_ZNSt10shared_ptrIN4tama7DisplayEEC1INS0_16Nokia5510DisplayEvEEOS_IT_E>:
	shared_ptr(shared_ptr<_Yp>&& __r) noexcept
 800802e:	b590      	push	{r4, r7, lr}
 8008030:	b083      	sub	sp, #12
 8008032:	af00      	add	r7, sp, #0
 8008034:	6078      	str	r0, [r7, #4]
 8008036:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 8008038:	687c      	ldr	r4, [r7, #4]
 800803a:	6838      	ldr	r0, [r7, #0]
 800803c:	f7ff ffec 	bl	8008018 <_ZSt4moveIRSt10shared_ptrIN4tama16Nokia5510DisplayEEEONSt16remove_referenceIT_E4typeEOS6_>
 8008040:	4603      	mov	r3, r0
 8008042:	4619      	mov	r1, r3
 8008044:	4620      	mov	r0, r4
 8008046:	f000 f9ef 	bl	8008428 <_ZNSt12__shared_ptrIN4tama7DisplayELN9__gnu_cxx12_Lock_policyE0EEC1INS0_16Nokia5510DisplayEvEEOS_IT_LS3_0EE>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	4618      	mov	r0, r3
 800804e:	370c      	adds	r7, #12
 8008050:	46bd      	mov	sp, r7
 8008052:	bd90      	pop	{r4, r7, pc}

08008054 <_ZSt11make_sharedIN4tama18Stm32TextureLoaderEJEESt10shared_ptrIT_EDpOT0_>:
    make_shared(_Args&&... __args)
 8008054:	b580      	push	{r7, lr}
 8008056:	b084      	sub	sp, #16
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
				       std::forward<_Args>(__args)...);
 800805c:	f107 030c 	add.w	r3, r7, #12
 8008060:	4618      	mov	r0, r3
 8008062:	f000 f9ff 	bl	8008464 <_ZNSaIN4tama18Stm32TextureLoaderEEC1Ev>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f107 020c 	add.w	r2, r7, #12
 800806c:	4611      	mov	r1, r2
 800806e:	4618      	mov	r0, r3
 8008070:	f000 fa10 	bl	8008494 <_ZSt15allocate_sharedIN4tama18Stm32TextureLoaderESaIS1_EJEESt10shared_ptrIT_ERKT0_DpOT1_>
 8008074:	f107 030c 	add.w	r3, r7, #12
 8008078:	4618      	mov	r0, r3
 800807a:	f000 f9ff 	bl	800847c <_ZNSaIN4tama18Stm32TextureLoaderEED1Ev>
    }
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	3710      	adds	r7, #16
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}

08008086 <_ZSt4moveIRSt10shared_ptrIN4tama18Stm32TextureLoaderEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8008086:	b480      	push	{r7}
 8008088:	b083      	sub	sp, #12
 800808a:	af00      	add	r7, sp, #0
 800808c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	4618      	mov	r0, r3
 8008092:	370c      	adds	r7, #12
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr

0800809c <_ZNSt10shared_ptrIN4tama13TextureLoaderEEC1INS0_18Stm32TextureLoaderEvEEOS_IT_E>:
	shared_ptr(shared_ptr<_Yp>&& __r) noexcept
 800809c:	b590      	push	{r4, r7, lr}
 800809e:	b083      	sub	sp, #12
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 80080a6:	687c      	ldr	r4, [r7, #4]
 80080a8:	6838      	ldr	r0, [r7, #0]
 80080aa:	f7ff ffec 	bl	8008086 <_ZSt4moveIRSt10shared_ptrIN4tama18Stm32TextureLoaderEEEONSt16remove_referenceIT_E4typeEOS6_>
 80080ae:	4603      	mov	r3, r0
 80080b0:	4619      	mov	r1, r3
 80080b2:	4620      	mov	r0, r4
 80080b4:	f000 f9fc 	bl	80084b0 <_ZNSt12__shared_ptrIN4tama13TextureLoaderELN9__gnu_cxx12_Lock_policyE0EEC1INS0_18Stm32TextureLoaderEvEEOS_IT_LS3_0EE>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	4618      	mov	r0, r3
 80080bc:	370c      	adds	r7, #12
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd90      	pop	{r4, r7, pc}

080080c2 <_ZSt11make_sharedIN4tama27Nokia5110DisplayDataManagerEJEESt10shared_ptrIT_EDpOT0_>:
    make_shared(_Args&&... __args)
 80080c2:	b580      	push	{r7, lr}
 80080c4:	b084      	sub	sp, #16
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	6078      	str	r0, [r7, #4]
				       std::forward<_Args>(__args)...);
 80080ca:	f107 030c 	add.w	r3, r7, #12
 80080ce:	4618      	mov	r0, r3
 80080d0:	f000 fa0c 	bl	80084ec <_ZNSaIN4tama27Nokia5110DisplayDataManagerEEC1Ev>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f107 020c 	add.w	r2, r7, #12
 80080da:	4611      	mov	r1, r2
 80080dc:	4618      	mov	r0, r3
 80080de:	f000 fa1d 	bl	800851c <_ZSt15allocate_sharedIN4tama27Nokia5110DisplayDataManagerESaIS1_EJEESt10shared_ptrIT_ERKT0_DpOT1_>
 80080e2:	f107 030c 	add.w	r3, r7, #12
 80080e6:	4618      	mov	r0, r3
 80080e8:	f000 fa0c 	bl	8008504 <_ZNSaIN4tama27Nokia5110DisplayDataManagerEED1Ev>
    }
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	3710      	adds	r7, #16
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}

080080f4 <_ZSt4moveIRSt10shared_ptrIN4tama27Nokia5110DisplayDataManagerEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 80080f4:	b480      	push	{r7}
 80080f6:	b083      	sub	sp, #12
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	4618      	mov	r0, r3
 8008100:	370c      	adds	r7, #12
 8008102:	46bd      	mov	sp, r7
 8008104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008108:	4770      	bx	lr

0800810a <_ZNSt10shared_ptrIN4tama18DisplayDataManagerEEC1INS0_27Nokia5110DisplayDataManagerEvEEOS_IT_E>:
	shared_ptr(shared_ptr<_Yp>&& __r) noexcept
 800810a:	b590      	push	{r4, r7, lr}
 800810c:	b083      	sub	sp, #12
 800810e:	af00      	add	r7, sp, #0
 8008110:	6078      	str	r0, [r7, #4]
 8008112:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 8008114:	687c      	ldr	r4, [r7, #4]
 8008116:	6838      	ldr	r0, [r7, #0]
 8008118:	f7ff ffec 	bl	80080f4 <_ZSt4moveIRSt10shared_ptrIN4tama27Nokia5110DisplayDataManagerEEEONSt16remove_referenceIT_E4typeEOS6_>
 800811c:	4603      	mov	r3, r0
 800811e:	4619      	mov	r1, r3
 8008120:	4620      	mov	r0, r4
 8008122:	f000 fa09 	bl	8008538 <_ZNSt12__shared_ptrIN4tama18DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EEC1INS0_27Nokia5110DisplayDataManagerEvEEOS_IT_LS3_0EE>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	4618      	mov	r0, r3
 800812a:	370c      	adds	r7, #12
 800812c:	46bd      	mov	sp, r7
 800812e:	bd90      	pop	{r4, r7, pc}

08008130 <_ZSt11make_sharedIN4tama16Stm32TimeMonitorEJEESt10shared_ptrIT_EDpOT0_>:
    make_shared(_Args&&... __args)
 8008130:	b580      	push	{r7, lr}
 8008132:	b084      	sub	sp, #16
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
				       std::forward<_Args>(__args)...);
 8008138:	f107 030c 	add.w	r3, r7, #12
 800813c:	4618      	mov	r0, r3
 800813e:	f000 fa19 	bl	8008574 <_ZNSaIN4tama16Stm32TimeMonitorEEC1Ev>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f107 020c 	add.w	r2, r7, #12
 8008148:	4611      	mov	r1, r2
 800814a:	4618      	mov	r0, r3
 800814c:	f000 fa2a 	bl	80085a4 <_ZSt15allocate_sharedIN4tama16Stm32TimeMonitorESaIS1_EJEESt10shared_ptrIT_ERKT0_DpOT1_>
 8008150:	f107 030c 	add.w	r3, r7, #12
 8008154:	4618      	mov	r0, r3
 8008156:	f000 fa19 	bl	800858c <_ZNSaIN4tama16Stm32TimeMonitorEED1Ev>
    }
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	3710      	adds	r7, #16
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}

08008162 <_ZSt4moveIRSt10shared_ptrIN4tama16Stm32TimeMonitorEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8008162:	b480      	push	{r7}
 8008164:	b083      	sub	sp, #12
 8008166:	af00      	add	r7, sp, #0
 8008168:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	4618      	mov	r0, r3
 800816e:	370c      	adds	r7, #12
 8008170:	46bd      	mov	sp, r7
 8008172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008176:	4770      	bx	lr

08008178 <_ZNSt10shared_ptrIN4tama11TimeMonitorEEC1INS0_16Stm32TimeMonitorEvEEOS_IT_E>:
	shared_ptr(shared_ptr<_Yp>&& __r) noexcept
 8008178:	b590      	push	{r4, r7, lr}
 800817a:	b083      	sub	sp, #12
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 8008182:	687c      	ldr	r4, [r7, #4]
 8008184:	6838      	ldr	r0, [r7, #0]
 8008186:	f7ff ffec 	bl	8008162 <_ZSt4moveIRSt10shared_ptrIN4tama16Stm32TimeMonitorEEEONSt16remove_referenceIT_E4typeEOS6_>
 800818a:	4603      	mov	r3, r0
 800818c:	4619      	mov	r1, r3
 800818e:	4620      	mov	r0, r4
 8008190:	f000 fa16 	bl	80085c0 <_ZNSt12__shared_ptrIN4tama11TimeMonitorELN9__gnu_cxx12_Lock_policyE0EEC1INS0_16Stm32TimeMonitorEvEEOS_IT_LS3_0EE>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	4618      	mov	r0, r3
 8008198:	370c      	adds	r7, #12
 800819a:	46bd      	mov	sp, r7
 800819c:	bd90      	pop	{r4, r7, pc}

0800819e <_ZSt11make_sharedIN4tama25Stm32SoundPlayingStrategyEJEESt10shared_ptrIT_EDpOT0_>:
    make_shared(_Args&&... __args)
 800819e:	b580      	push	{r7, lr}
 80081a0:	b084      	sub	sp, #16
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	6078      	str	r0, [r7, #4]
				       std::forward<_Args>(__args)...);
 80081a6:	f107 030c 	add.w	r3, r7, #12
 80081aa:	4618      	mov	r0, r3
 80081ac:	f000 fa26 	bl	80085fc <_ZNSaIN4tama25Stm32SoundPlayingStrategyEEC1Ev>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f107 020c 	add.w	r2, r7, #12
 80081b6:	4611      	mov	r1, r2
 80081b8:	4618      	mov	r0, r3
 80081ba:	f000 fa37 	bl	800862c <_ZSt15allocate_sharedIN4tama25Stm32SoundPlayingStrategyESaIS1_EJEESt10shared_ptrIT_ERKT0_DpOT1_>
 80081be:	f107 030c 	add.w	r3, r7, #12
 80081c2:	4618      	mov	r0, r3
 80081c4:	f000 fa26 	bl	8008614 <_ZNSaIN4tama25Stm32SoundPlayingStrategyEED1Ev>
    }
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	3710      	adds	r7, #16
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <_ZSt4moveIRSt10shared_ptrIN4tama25Stm32SoundPlayingStrategyEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 80081d0:	b480      	push	{r7}
 80081d2:	b083      	sub	sp, #12
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	4618      	mov	r0, r3
 80081dc:	370c      	adds	r7, #12
 80081de:	46bd      	mov	sp, r7
 80081e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e4:	4770      	bx	lr

080081e6 <_ZNSt10shared_ptrIN4tama20SoundPlayingStrategyEEC1INS0_25Stm32SoundPlayingStrategyEvEEOS_IT_E>:
	shared_ptr(shared_ptr<_Yp>&& __r) noexcept
 80081e6:	b590      	push	{r4, r7, lr}
 80081e8:	b083      	sub	sp, #12
 80081ea:	af00      	add	r7, sp, #0
 80081ec:	6078      	str	r0, [r7, #4]
 80081ee:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 80081f0:	687c      	ldr	r4, [r7, #4]
 80081f2:	6838      	ldr	r0, [r7, #0]
 80081f4:	f7ff ffec 	bl	80081d0 <_ZSt4moveIRSt10shared_ptrIN4tama25Stm32SoundPlayingStrategyEEEONSt16remove_referenceIT_E4typeEOS6_>
 80081f8:	4603      	mov	r3, r0
 80081fa:	4619      	mov	r1, r3
 80081fc:	4620      	mov	r0, r4
 80081fe:	f000 fa23 	bl	8008648 <_ZNSt12__shared_ptrIN4tama20SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EEC1INS0_25Stm32SoundPlayingStrategyEvEEOS_IT_LS3_0EE>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	4618      	mov	r0, r3
 8008206:	370c      	adds	r7, #12
 8008208:	46bd      	mov	sp, r7
 800820a:	bd90      	pop	{r4, r7, pc}

0800820c <_ZSt7forwardIRSt10shared_ptrIN4tama11TimeMonitorEEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800820c:	b480      	push	{r7}
 800820e:	b083      	sub	sp, #12
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	4618      	mov	r0, r3
 8008218:	370c      	adds	r7, #12
 800821a:	46bd      	mov	sp, r7
 800821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008220:	4770      	bx	lr

08008222 <_ZSt11make_sharedIN4tama11SoundPlayerEJRSt10shared_ptrINS0_11TimeMonitorEEEES2_IT_EDpOT0_>:
    make_shared(_Args&&... __args)
 8008222:	b580      	push	{r7, lr}
 8008224:	b084      	sub	sp, #16
 8008226:	af00      	add	r7, sp, #0
 8008228:	6078      	str	r0, [r7, #4]
 800822a:	6039      	str	r1, [r7, #0]
				       std::forward<_Args>(__args)...);
 800822c:	f107 030c 	add.w	r3, r7, #12
 8008230:	4618      	mov	r0, r3
 8008232:	f000 fa27 	bl	8008684 <_ZNSaIN4tama11SoundPlayerEEC1Ev>
 8008236:	6838      	ldr	r0, [r7, #0]
 8008238:	f7ff ffe8 	bl	800820c <_ZSt7forwardIRSt10shared_ptrIN4tama11TimeMonitorEEEOT_RNSt16remove_referenceIS5_E4typeE>
 800823c:	4602      	mov	r2, r0
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f107 010c 	add.w	r1, r7, #12
 8008244:	4618      	mov	r0, r3
 8008246:	f000 fa35 	bl	80086b4 <_ZSt15allocate_sharedIN4tama11SoundPlayerESaIS1_EJRSt10shared_ptrINS0_11TimeMonitorEEEES3_IT_ERKT0_DpOT1_>
 800824a:	f107 030c 	add.w	r3, r7, #12
 800824e:	4618      	mov	r0, r3
 8008250:	f000 fa24 	bl	800869c <_ZNSaIN4tama11SoundPlayerEED1Ev>
    }
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	3710      	adds	r7, #16
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}

0800825c <_ZSt11make_sharedIN4tama10Stm32InputEJEESt10shared_ptrIT_EDpOT0_>:
    make_shared(_Args&&... __args)
 800825c:	b580      	push	{r7, lr}
 800825e:	b084      	sub	sp, #16
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
				       std::forward<_Args>(__args)...);
 8008264:	f107 030c 	add.w	r3, r7, #12
 8008268:	4618      	mov	r0, r3
 800826a:	f000 fa36 	bl	80086da <_ZNSaIN4tama10Stm32InputEEC1Ev>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f107 020c 	add.w	r2, r7, #12
 8008274:	4611      	mov	r1, r2
 8008276:	4618      	mov	r0, r3
 8008278:	f000 fa47 	bl	800870a <_ZSt15allocate_sharedIN4tama10Stm32InputESaIS1_EJEESt10shared_ptrIT_ERKT0_DpOT1_>
 800827c:	f107 030c 	add.w	r3, r7, #12
 8008280:	4618      	mov	r0, r3
 8008282:	f000 fa36 	bl	80086f2 <_ZNSaIN4tama10Stm32InputEED1Ev>
    }
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	3710      	adds	r7, #16
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}

0800828e <_ZSt4moveIRSt10shared_ptrIN4tama10Stm32InputEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 800828e:	b480      	push	{r7}
 8008290:	b083      	sub	sp, #12
 8008292:	af00      	add	r7, sp, #0
 8008294:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	4618      	mov	r0, r3
 800829a:	370c      	adds	r7, #12
 800829c:	46bd      	mov	sp, r7
 800829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a2:	4770      	bx	lr

080082a4 <_ZNSt10shared_ptrIN4tama5InputEEC1INS0_10Stm32InputEvEEOS_IT_E>:
	shared_ptr(shared_ptr<_Yp>&& __r) noexcept
 80082a4:	b590      	push	{r4, r7, lr}
 80082a6:	b083      	sub	sp, #12
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
 80082ac:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 80082ae:	687c      	ldr	r4, [r7, #4]
 80082b0:	6838      	ldr	r0, [r7, #0]
 80082b2:	f7ff ffec 	bl	800828e <_ZSt4moveIRSt10shared_ptrIN4tama10Stm32InputEEEONSt16remove_referenceIT_E4typeEOS6_>
 80082b6:	4603      	mov	r3, r0
 80082b8:	4619      	mov	r1, r3
 80082ba:	4620      	mov	r0, r4
 80082bc:	f000 fa33 	bl	8008726 <_ZNSt12__shared_ptrIN4tama5InputELN9__gnu_cxx12_Lock_policyE0EEC1INS0_10Stm32InputEvEEOS_IT_LS3_0EE>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	4618      	mov	r0, r3
 80082c4:	370c      	adds	r7, #12
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd90      	pop	{r4, r7, pc}

080082ca <_ZNKSt19__shared_ptr_accessIN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 80082ca:	b580      	push	{r7, lr}
 80082cc:	b082      	sub	sp, #8
 80082ce:	af00      	add	r7, sp, #0
 80082d0:	6078      	str	r0, [r7, #4]
	return _M_get();
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f000 fa45 	bl	8008762 <_ZNKSt19__shared_ptr_accessIN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 80082d8:	4603      	mov	r3, r0
      }
 80082da:	4618      	mov	r0, r3
 80082dc:	3708      	adds	r7, #8
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}

080082e2 <_ZSt4moveIRN4tama4ToneEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80082e2:	b480      	push	{r7}
 80082e4:	b083      	sub	sp, #12
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	4618      	mov	r0, r3
 80082ee:	370c      	adds	r7, #12
 80082f0:	46bd      	mov	sp, r7
 80082f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f6:	4770      	bx	lr

080082f8 <_ZNSt6vectorIN4tama4ToneESaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b082      	sub	sp, #8
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8008302:	6838      	ldr	r0, [r7, #0]
 8008304:	f7ff ffed 	bl	80082e2 <_ZSt4moveIRN4tama4ToneEEONSt16remove_referenceIT_E4typeEOS4_>
 8008308:	4603      	mov	r3, r0
 800830a:	4619      	mov	r1, r3
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f000 fa3f 	bl	8008790 <_ZNSt6vectorIN4tama4ToneESaIS1_EE12emplace_backIJS1_EEEvDpOT_>
 8008312:	bf00      	nop
 8008314:	3708      	adds	r7, #8
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}

0800831a <_ZSt7forwardIRSt10shared_ptrIN4tama13TextureLoaderEEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800831a:	b480      	push	{r7}
 800831c:	b083      	sub	sp, #12
 800831e:	af00      	add	r7, sp, #0
 8008320:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	4618      	mov	r0, r3
 8008326:	370c      	adds	r7, #12
 8008328:	46bd      	mov	sp, r7
 800832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832e:	4770      	bx	lr

08008330 <_ZSt7forwardIRSt10shared_ptrIN4tama5InputEEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008330:	b480      	push	{r7}
 8008332:	b083      	sub	sp, #12
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	4618      	mov	r0, r3
 800833c:	370c      	adds	r7, #12
 800833e:	46bd      	mov	sp, r7
 8008340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008344:	4770      	bx	lr

08008346 <_ZSt11make_sharedIN4tama7ContextEJRSt10shared_ptrINS0_13TextureLoaderEERS2_INS0_5InputEEEES2_IT_EDpOT0_>:
    make_shared(_Args&&... __args)
 8008346:	b590      	push	{r4, r7, lr}
 8008348:	b087      	sub	sp, #28
 800834a:	af00      	add	r7, sp, #0
 800834c:	60f8      	str	r0, [r7, #12]
 800834e:	60b9      	str	r1, [r7, #8]
 8008350:	607a      	str	r2, [r7, #4]
				       std::forward<_Args>(__args)...);
 8008352:	f107 0314 	add.w	r3, r7, #20
 8008356:	4618      	mov	r0, r3
 8008358:	f000 fa49 	bl	80087ee <_ZNSaIN4tama7ContextEEC1Ev>
 800835c:	68b8      	ldr	r0, [r7, #8]
 800835e:	f7ff ffdc 	bl	800831a <_ZSt7forwardIRSt10shared_ptrIN4tama13TextureLoaderEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8008362:	4604      	mov	r4, r0
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f7ff ffe3 	bl	8008330 <_ZSt7forwardIRSt10shared_ptrIN4tama5InputEEEOT_RNSt16remove_referenceIS5_E4typeE>
 800836a:	4603      	mov	r3, r0
 800836c:	68f8      	ldr	r0, [r7, #12]
 800836e:	f107 0114 	add.w	r1, r7, #20
 8008372:	4622      	mov	r2, r4
 8008374:	f000 fa53 	bl	800881e <_ZSt15allocate_sharedIN4tama7ContextESaIS1_EJRSt10shared_ptrINS0_13TextureLoaderEERS3_INS0_5InputEEEES3_IT_ERKT0_DpOT1_>
 8008378:	f107 0314 	add.w	r3, r7, #20
 800837c:	4618      	mov	r0, r3
 800837e:	f000 fa42 	bl	8008806 <_ZNSaIN4tama7ContextEED1Ev>
    }
 8008382:	68f8      	ldr	r0, [r7, #12]
 8008384:	371c      	adds	r7, #28
 8008386:	46bd      	mov	sp, r7
 8008388:	bd90      	pop	{r4, r7, pc}

0800838a <_ZNKSt19__shared_ptr_accessIN4tama5StageELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 800838a:	b580      	push	{r7, lr}
 800838c:	b082      	sub	sp, #8
 800838e:	af00      	add	r7, sp, #0
 8008390:	6078      	str	r0, [r7, #4]
	return _M_get();
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f000 fa5d 	bl	8008852 <_ZNKSt19__shared_ptr_accessIN4tama5StageELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 8008398:	4603      	mov	r3, r0
      }
 800839a:	4618      	mov	r0, r3
 800839c:	3708      	adds	r7, #8
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}

080083a2 <_ZNKSt19__shared_ptr_accessIN4tama18DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 80083a2:	b580      	push	{r7, lr}
 80083a4:	b082      	sub	sp, #8
 80083a6:	af00      	add	r7, sp, #0
 80083a8:	6078      	str	r0, [r7, #4]
	return _M_get();
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f000 fa5d 	bl	800886a <_ZNKSt19__shared_ptr_accessIN4tama18DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 80083b0:	4603      	mov	r3, r0
      }
 80083b2:	4618      	mov	r0, r3
 80083b4:	3708      	adds	r7, #8
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}

080083ba <_ZNKSt19__shared_ptr_accessIN4tama7DisplayELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 80083ba:	b580      	push	{r7, lr}
 80083bc:	b082      	sub	sp, #8
 80083be:	af00      	add	r7, sp, #0
 80083c0:	6078      	str	r0, [r7, #4]
	return _M_get();
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f000 fa5d 	bl	8008882 <_ZNKSt19__shared_ptr_accessIN4tama7DisplayELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 80083c8:	4603      	mov	r3, r0
      }
 80083ca:	4618      	mov	r0, r3
 80083cc:	3708      	adds	r7, #8
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}

080083d2 <_ZNSaIN4tama16Nokia5510DisplayEEC1Ev>:
      allocator() throw() { }
 80083d2:	b580      	push	{r7, lr}
 80083d4:	b082      	sub	sp, #8
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	6078      	str	r0, [r7, #4]
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f000 fa5d 	bl	800889a <_ZN9__gnu_cxx13new_allocatorIN4tama16Nokia5510DisplayEEC1Ev>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	4618      	mov	r0, r3
 80083e4:	3708      	adds	r7, #8
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}

080083ea <_ZNSaIN4tama16Nokia5510DisplayEED1Ev>:
      ~allocator() throw() { }
 80083ea:	b580      	push	{r7, lr}
 80083ec:	b082      	sub	sp, #8
 80083ee:	af00      	add	r7, sp, #0
 80083f0:	6078      	str	r0, [r7, #4]
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f000 fa5c 	bl	80088b0 <_ZN9__gnu_cxx13new_allocatorIN4tama16Nokia5510DisplayEED1Ev>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	4618      	mov	r0, r3
 80083fc:	3708      	adds	r7, #8
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}

08008402 <_ZSt15allocate_sharedIN4tama16Nokia5510DisplayESaIS1_EJRNS0_13DisplayConfigEEESt10shared_ptrIT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 8008402:	b590      	push	{r4, r7, lr}
 8008404:	b087      	sub	sp, #28
 8008406:	af00      	add	r7, sp, #0
 8008408:	60f8      	str	r0, [r7, #12]
 800840a:	60b9      	str	r1, [r7, #8]
 800840c:	607a      	str	r2, [r7, #4]
			     std::forward<_Args>(__args)...);
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f7ff fdda 	bl	8007fc8 <_ZSt7forwardIRN4tama13DisplayConfigEEOT_RNSt16remove_referenceIS3_E4typeE>
 8008414:	4603      	mov	r3, r0
 8008416:	68ba      	ldr	r2, [r7, #8]
 8008418:	4621      	mov	r1, r4
 800841a:	68f8      	ldr	r0, [r7, #12]
 800841c:	f000 fa53 	bl	80088c6 <_ZNSt10shared_ptrIN4tama16Nokia5510DisplayEEC1ISaIS1_EJRNS0_13DisplayConfigEEEESt19_Sp_make_shared_tagRKT_DpOT0_>
    }
 8008420:	68f8      	ldr	r0, [r7, #12]
 8008422:	371c      	adds	r7, #28
 8008424:	46bd      	mov	sp, r7
 8008426:	bd90      	pop	{r4, r7, pc}

08008428 <_ZNSt12__shared_ptrIN4tama7DisplayELN9__gnu_cxx12_Lock_policyE0EEC1INS0_16Nokia5510DisplayEvEEOS_IT_LS3_0EE>:
	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 8008428:	b580      	push	{r7, lr}
 800842a:	b082      	sub	sp, #8
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
 8008430:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount()
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	681a      	ldr	r2, [r3, #0]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	601a      	str	r2, [r3, #0]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	3304      	adds	r3, #4
 800843e:	4618      	mov	r0, r3
 8008440:	f7f8 fd13 	bl	8000e6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _M_refcount._M_swap(__r._M_refcount);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	1d1a      	adds	r2, r3, #4
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	3304      	adds	r3, #4
 800844c:	4619      	mov	r1, r3
 800844e:	4610      	mov	r0, r2
 8008450:	f7f8 fd19 	bl	8000e86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  __r._M_ptr = 0;
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	2200      	movs	r2, #0
 8008458:	601a      	str	r2, [r3, #0]
	}
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	4618      	mov	r0, r3
 800845e:	3708      	adds	r7, #8
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}

08008464 <_ZNSaIN4tama18Stm32TextureLoaderEEC1Ev>:
      allocator() throw() { }
 8008464:	b580      	push	{r7, lr}
 8008466:	b082      	sub	sp, #8
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f000 fa40 	bl	80088f2 <_ZN9__gnu_cxx13new_allocatorIN4tama18Stm32TextureLoaderEEC1Ev>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	4618      	mov	r0, r3
 8008476:	3708      	adds	r7, #8
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}

0800847c <_ZNSaIN4tama18Stm32TextureLoaderEED1Ev>:
      ~allocator() throw() { }
 800847c:	b580      	push	{r7, lr}
 800847e:	b082      	sub	sp, #8
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f000 fa3f 	bl	8008908 <_ZN9__gnu_cxx13new_allocatorIN4tama18Stm32TextureLoaderEED1Ev>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	4618      	mov	r0, r3
 800848e:	3708      	adds	r7, #8
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}

08008494 <_ZSt15allocate_sharedIN4tama18Stm32TextureLoaderESaIS1_EJEESt10shared_ptrIT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 8008494:	b580      	push	{r7, lr}
 8008496:	b084      	sub	sp, #16
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
 800849c:	6039      	str	r1, [r7, #0]
			     std::forward<_Args>(__args)...);
 800849e:	683a      	ldr	r2, [r7, #0]
 80084a0:	4619      	mov	r1, r3
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f000 fa3b 	bl	800891e <_ZNSt10shared_ptrIN4tama18Stm32TextureLoaderEEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>
    }
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	3710      	adds	r7, #16
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}

080084b0 <_ZNSt12__shared_ptrIN4tama13TextureLoaderELN9__gnu_cxx12_Lock_policyE0EEC1INS0_18Stm32TextureLoaderEvEEOS_IT_LS3_0EE>:
	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b082      	sub	sp, #8
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount()
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	681a      	ldr	r2, [r3, #0]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	601a      	str	r2, [r3, #0]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	3304      	adds	r3, #4
 80084c6:	4618      	mov	r0, r3
 80084c8:	f7f8 fccf 	bl	8000e6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _M_refcount._M_swap(__r._M_refcount);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	1d1a      	adds	r2, r3, #4
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	3304      	adds	r3, #4
 80084d4:	4619      	mov	r1, r3
 80084d6:	4610      	mov	r0, r2
 80084d8:	f7f8 fcd5 	bl	8000e86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  __r._M_ptr = 0;
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	2200      	movs	r2, #0
 80084e0:	601a      	str	r2, [r3, #0]
	}
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	4618      	mov	r0, r3
 80084e6:	3708      	adds	r7, #8
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}

080084ec <_ZNSaIN4tama27Nokia5110DisplayDataManagerEEC1Ev>:
      allocator() throw() { }
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b082      	sub	sp, #8
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f000 fa23 	bl	8008940 <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEEC1Ev>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	4618      	mov	r0, r3
 80084fe:	3708      	adds	r7, #8
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}

08008504 <_ZNSaIN4tama27Nokia5110DisplayDataManagerEED1Ev>:
      ~allocator() throw() { }
 8008504:	b580      	push	{r7, lr}
 8008506:	b082      	sub	sp, #8
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f000 fa22 	bl	8008956 <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEED1Ev>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	4618      	mov	r0, r3
 8008516:	3708      	adds	r7, #8
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}

0800851c <_ZSt15allocate_sharedIN4tama27Nokia5110DisplayDataManagerESaIS1_EJEESt10shared_ptrIT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 800851c:	b580      	push	{r7, lr}
 800851e:	b084      	sub	sp, #16
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
 8008524:	6039      	str	r1, [r7, #0]
			     std::forward<_Args>(__args)...);
 8008526:	683a      	ldr	r2, [r7, #0]
 8008528:	4619      	mov	r1, r3
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f000 fa1e 	bl	800896c <_ZNSt10shared_ptrIN4tama27Nokia5110DisplayDataManagerEEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>
    }
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	3710      	adds	r7, #16
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}

08008538 <_ZNSt12__shared_ptrIN4tama18DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EEC1INS0_27Nokia5110DisplayDataManagerEvEEOS_IT_LS3_0EE>:
	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 8008538:	b580      	push	{r7, lr}
 800853a:	b082      	sub	sp, #8
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount()
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	681a      	ldr	r2, [r3, #0]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	601a      	str	r2, [r3, #0]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	3304      	adds	r3, #4
 800854e:	4618      	mov	r0, r3
 8008550:	f7f8 fc8b 	bl	8000e6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _M_refcount._M_swap(__r._M_refcount);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	1d1a      	adds	r2, r3, #4
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	3304      	adds	r3, #4
 800855c:	4619      	mov	r1, r3
 800855e:	4610      	mov	r0, r2
 8008560:	f7f8 fc91 	bl	8000e86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  __r._M_ptr = 0;
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	2200      	movs	r2, #0
 8008568:	601a      	str	r2, [r3, #0]
	}
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	4618      	mov	r0, r3
 800856e:	3708      	adds	r7, #8
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}

08008574 <_ZNSaIN4tama16Stm32TimeMonitorEEC1Ev>:
      allocator() throw() { }
 8008574:	b580      	push	{r7, lr}
 8008576:	b082      	sub	sp, #8
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f000 fa06 	bl	800898e <_ZN9__gnu_cxx13new_allocatorIN4tama16Stm32TimeMonitorEEC1Ev>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	4618      	mov	r0, r3
 8008586:	3708      	adds	r7, #8
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}

0800858c <_ZNSaIN4tama16Stm32TimeMonitorEED1Ev>:
      ~allocator() throw() { }
 800858c:	b580      	push	{r7, lr}
 800858e:	b082      	sub	sp, #8
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f000 fa05 	bl	80089a4 <_ZN9__gnu_cxx13new_allocatorIN4tama16Stm32TimeMonitorEED1Ev>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	4618      	mov	r0, r3
 800859e:	3708      	adds	r7, #8
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}

080085a4 <_ZSt15allocate_sharedIN4tama16Stm32TimeMonitorESaIS1_EJEESt10shared_ptrIT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b084      	sub	sp, #16
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	6039      	str	r1, [r7, #0]
			     std::forward<_Args>(__args)...);
 80085ae:	683a      	ldr	r2, [r7, #0]
 80085b0:	4619      	mov	r1, r3
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f000 fa01 	bl	80089ba <_ZNSt10shared_ptrIN4tama16Stm32TimeMonitorEEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>
    }
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	3710      	adds	r7, #16
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}

080085c0 <_ZNSt12__shared_ptrIN4tama11TimeMonitorELN9__gnu_cxx12_Lock_policyE0EEC1INS0_16Stm32TimeMonitorEvEEOS_IT_LS3_0EE>:
	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b082      	sub	sp, #8
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount()
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	681a      	ldr	r2, [r3, #0]
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	601a      	str	r2, [r3, #0]
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	3304      	adds	r3, #4
 80085d6:	4618      	mov	r0, r3
 80085d8:	f7f8 fc47 	bl	8000e6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _M_refcount._M_swap(__r._M_refcount);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	1d1a      	adds	r2, r3, #4
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	3304      	adds	r3, #4
 80085e4:	4619      	mov	r1, r3
 80085e6:	4610      	mov	r0, r2
 80085e8:	f7f8 fc4d 	bl	8000e86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  __r._M_ptr = 0;
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	2200      	movs	r2, #0
 80085f0:	601a      	str	r2, [r3, #0]
	}
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	4618      	mov	r0, r3
 80085f6:	3708      	adds	r7, #8
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}

080085fc <_ZNSaIN4tama25Stm32SoundPlayingStrategyEEC1Ev>:
      allocator() throw() { }
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b082      	sub	sp, #8
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f000 f9e9 	bl	80089dc <_ZN9__gnu_cxx13new_allocatorIN4tama25Stm32SoundPlayingStrategyEEC1Ev>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	4618      	mov	r0, r3
 800860e:	3708      	adds	r7, #8
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}

08008614 <_ZNSaIN4tama25Stm32SoundPlayingStrategyEED1Ev>:
      ~allocator() throw() { }
 8008614:	b580      	push	{r7, lr}
 8008616:	b082      	sub	sp, #8
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f000 f9e8 	bl	80089f2 <_ZN9__gnu_cxx13new_allocatorIN4tama25Stm32SoundPlayingStrategyEED1Ev>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	4618      	mov	r0, r3
 8008626:	3708      	adds	r7, #8
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}

0800862c <_ZSt15allocate_sharedIN4tama25Stm32SoundPlayingStrategyESaIS1_EJEESt10shared_ptrIT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 800862c:	b580      	push	{r7, lr}
 800862e:	b084      	sub	sp, #16
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
 8008634:	6039      	str	r1, [r7, #0]
			     std::forward<_Args>(__args)...);
 8008636:	683a      	ldr	r2, [r7, #0]
 8008638:	4619      	mov	r1, r3
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f000 f9e4 	bl	8008a08 <_ZNSt10shared_ptrIN4tama25Stm32SoundPlayingStrategyEEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>
    }
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	3710      	adds	r7, #16
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}

08008648 <_ZNSt12__shared_ptrIN4tama20SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EEC1INS0_25Stm32SoundPlayingStrategyEvEEOS_IT_LS3_0EE>:
	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 8008648:	b580      	push	{r7, lr}
 800864a:	b082      	sub	sp, #8
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
 8008650:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount()
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	681a      	ldr	r2, [r3, #0]
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	601a      	str	r2, [r3, #0]
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	3304      	adds	r3, #4
 800865e:	4618      	mov	r0, r3
 8008660:	f7f8 fc03 	bl	8000e6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _M_refcount._M_swap(__r._M_refcount);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	1d1a      	adds	r2, r3, #4
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	3304      	adds	r3, #4
 800866c:	4619      	mov	r1, r3
 800866e:	4610      	mov	r0, r2
 8008670:	f7f8 fc09 	bl	8000e86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  __r._M_ptr = 0;
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	2200      	movs	r2, #0
 8008678:	601a      	str	r2, [r3, #0]
	}
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	4618      	mov	r0, r3
 800867e:	3708      	adds	r7, #8
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}

08008684 <_ZNSaIN4tama11SoundPlayerEEC1Ev>:
      allocator() throw() { }
 8008684:	b580      	push	{r7, lr}
 8008686:	b082      	sub	sp, #8
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f000 f9cc 	bl	8008a2a <_ZN9__gnu_cxx13new_allocatorIN4tama11SoundPlayerEEC1Ev>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	4618      	mov	r0, r3
 8008696:	3708      	adds	r7, #8
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}

0800869c <_ZNSaIN4tama11SoundPlayerEED1Ev>:
      ~allocator() throw() { }
 800869c:	b580      	push	{r7, lr}
 800869e:	b082      	sub	sp, #8
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f000 f9cb 	bl	8008a40 <_ZN9__gnu_cxx13new_allocatorIN4tama11SoundPlayerEED1Ev>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	4618      	mov	r0, r3
 80086ae:	3708      	adds	r7, #8
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}

080086b4 <_ZSt15allocate_sharedIN4tama11SoundPlayerESaIS1_EJRSt10shared_ptrINS0_11TimeMonitorEEEES3_IT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 80086b4:	b590      	push	{r4, r7, lr}
 80086b6:	b087      	sub	sp, #28
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	60f8      	str	r0, [r7, #12]
 80086bc:	60b9      	str	r1, [r7, #8]
 80086be:	607a      	str	r2, [r7, #4]
			     std::forward<_Args>(__args)...);
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f7ff fda3 	bl	800820c <_ZSt7forwardIRSt10shared_ptrIN4tama11TimeMonitorEEEOT_RNSt16remove_referenceIS5_E4typeE>
 80086c6:	4603      	mov	r3, r0
 80086c8:	68ba      	ldr	r2, [r7, #8]
 80086ca:	4621      	mov	r1, r4
 80086cc:	68f8      	ldr	r0, [r7, #12]
 80086ce:	f000 f9c2 	bl	8008a56 <_ZNSt10shared_ptrIN4tama11SoundPlayerEEC1ISaIS1_EJRS_INS0_11TimeMonitorEEEEESt19_Sp_make_shared_tagRKT_DpOT0_>
    }
 80086d2:	68f8      	ldr	r0, [r7, #12]
 80086d4:	371c      	adds	r7, #28
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd90      	pop	{r4, r7, pc}

080086da <_ZNSaIN4tama10Stm32InputEEC1Ev>:
      allocator() throw() { }
 80086da:	b580      	push	{r7, lr}
 80086dc:	b082      	sub	sp, #8
 80086de:	af00      	add	r7, sp, #0
 80086e0:	6078      	str	r0, [r7, #4]
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f000 f9cd 	bl	8008a82 <_ZN9__gnu_cxx13new_allocatorIN4tama10Stm32InputEEC1Ev>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	4618      	mov	r0, r3
 80086ec:	3708      	adds	r7, #8
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}

080086f2 <_ZNSaIN4tama10Stm32InputEED1Ev>:
      ~allocator() throw() { }
 80086f2:	b580      	push	{r7, lr}
 80086f4:	b082      	sub	sp, #8
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	6078      	str	r0, [r7, #4]
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f000 f9cc 	bl	8008a98 <_ZN9__gnu_cxx13new_allocatorIN4tama10Stm32InputEED1Ev>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	4618      	mov	r0, r3
 8008704:	3708      	adds	r7, #8
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}

0800870a <_ZSt15allocate_sharedIN4tama10Stm32InputESaIS1_EJEESt10shared_ptrIT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 800870a:	b580      	push	{r7, lr}
 800870c:	b084      	sub	sp, #16
 800870e:	af00      	add	r7, sp, #0
 8008710:	6078      	str	r0, [r7, #4]
 8008712:	6039      	str	r1, [r7, #0]
			     std::forward<_Args>(__args)...);
 8008714:	683a      	ldr	r2, [r7, #0]
 8008716:	4619      	mov	r1, r3
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f000 f9c8 	bl	8008aae <_ZNSt10shared_ptrIN4tama10Stm32InputEEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>
    }
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	3710      	adds	r7, #16
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}

08008726 <_ZNSt12__shared_ptrIN4tama5InputELN9__gnu_cxx12_Lock_policyE0EEC1INS0_10Stm32InputEvEEOS_IT_LS3_0EE>:
	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 8008726:	b580      	push	{r7, lr}
 8008728:	b082      	sub	sp, #8
 800872a:	af00      	add	r7, sp, #0
 800872c:	6078      	str	r0, [r7, #4]
 800872e:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount()
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	681a      	ldr	r2, [r3, #0]
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	601a      	str	r2, [r3, #0]
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	3304      	adds	r3, #4
 800873c:	4618      	mov	r0, r3
 800873e:	f7f8 fb94 	bl	8000e6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _M_refcount._M_swap(__r._M_refcount);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	1d1a      	adds	r2, r3, #4
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	3304      	adds	r3, #4
 800874a:	4619      	mov	r1, r3
 800874c:	4610      	mov	r0, r2
 800874e:	f7f8 fb9a 	bl	8000e86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  __r._M_ptr = 0;
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	2200      	movs	r2, #0
 8008756:	601a      	str	r2, [r3, #0]
	}
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	4618      	mov	r0, r3
 800875c:	3708      	adds	r7, #8
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}

08008762 <_ZNKSt19__shared_ptr_accessIN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 8008762:	b580      	push	{r7, lr}
 8008764:	b082      	sub	sp, #8
 8008766:	af00      	add	r7, sp, #0
 8008768:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f000 f9b0 	bl	8008ad0 <_ZNKSt12__shared_ptrIN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0EE3getEv>
 8008770:	4603      	mov	r3, r0
 8008772:	4618      	mov	r0, r3
 8008774:	3708      	adds	r7, #8
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}

0800877a <_ZSt7forwardIN4tama4ToneEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800877a:	b480      	push	{r7}
 800877c:	b083      	sub	sp, #12
 800877e:	af00      	add	r7, sp, #0
 8008780:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	4618      	mov	r0, r3
 8008786:	370c      	adds	r7, #12
 8008788:	46bd      	mov	sp, r7
 800878a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878e:	4770      	bx	lr

08008790 <_ZNSt6vectorIN4tama4ToneESaIS1_EE12emplace_backIJS1_EEEvDpOT_>:
      vector<_Tp, _Alloc>::
 8008790:	b5b0      	push	{r4, r5, r7, lr}
 8008792:	b082      	sub	sp, #8
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	685a      	ldr	r2, [r3, #4]
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	689b      	ldr	r3, [r3, #8]
 80087a2:	429a      	cmp	r2, r3
 80087a4:	d012      	beq.n	80087cc <_ZNSt6vectorIN4tama4ToneESaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x3c>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 80087a6:	687c      	ldr	r4, [r7, #4]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	685d      	ldr	r5, [r3, #4]
 80087ac:	6838      	ldr	r0, [r7, #0]
 80087ae:	f7ff ffe4 	bl	800877a <_ZSt7forwardIN4tama4ToneEEOT_RNSt16remove_referenceIS2_E4typeE>
 80087b2:	4603      	mov	r3, r0
 80087b4:	461a      	mov	r2, r3
 80087b6:	4629      	mov	r1, r5
 80087b8:	4620      	mov	r0, r4
 80087ba:	f000 f995 	bl	8008ae8 <_ZNSt16allocator_traitsISaIN4tama4ToneEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	685b      	ldr	r3, [r3, #4]
 80087c2:	f103 0208 	add.w	r2, r3, #8
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	605a      	str	r2, [r3, #4]
      }
 80087ca:	e00c      	b.n	80087e6 <_ZNSt6vectorIN4tama4ToneESaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x56>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f000 f99e 	bl	8008b0e <_ZNSt6vectorIN4tama4ToneESaIS1_EE3endEv>
 80087d2:	4604      	mov	r4, r0
 80087d4:	6838      	ldr	r0, [r7, #0]
 80087d6:	f7ff ffd0 	bl	800877a <_ZSt7forwardIN4tama4ToneEEOT_RNSt16remove_referenceIS2_E4typeE>
 80087da:	4603      	mov	r3, r0
 80087dc:	461a      	mov	r2, r3
 80087de:	4621      	mov	r1, r4
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f000 f9a5 	bl	8008b30 <_ZNSt6vectorIN4tama4ToneESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 80087e6:	bf00      	nop
 80087e8:	3708      	adds	r7, #8
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bdb0      	pop	{r4, r5, r7, pc}

080087ee <_ZNSaIN4tama7ContextEEC1Ev>:
      allocator() throw() { }
 80087ee:	b580      	push	{r7, lr}
 80087f0:	b082      	sub	sp, #8
 80087f2:	af00      	add	r7, sp, #0
 80087f4:	6078      	str	r0, [r7, #4]
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f000 fa26 	bl	8008c48 <_ZN9__gnu_cxx13new_allocatorIN4tama7ContextEEC1Ev>
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	4618      	mov	r0, r3
 8008800:	3708      	adds	r7, #8
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}

08008806 <_ZNSaIN4tama7ContextEED1Ev>:
      ~allocator() throw() { }
 8008806:	b580      	push	{r7, lr}
 8008808:	b082      	sub	sp, #8
 800880a:	af00      	add	r7, sp, #0
 800880c:	6078      	str	r0, [r7, #4]
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f000 fa25 	bl	8008c5e <_ZN9__gnu_cxx13new_allocatorIN4tama7ContextEED1Ev>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	4618      	mov	r0, r3
 8008818:	3708      	adds	r7, #8
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}

0800881e <_ZSt15allocate_sharedIN4tama7ContextESaIS1_EJRSt10shared_ptrINS0_13TextureLoaderEERS3_INS0_5InputEEEES3_IT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 800881e:	b5b0      	push	{r4, r5, r7, lr}
 8008820:	b088      	sub	sp, #32
 8008822:	af02      	add	r7, sp, #8
 8008824:	60f8      	str	r0, [r7, #12]
 8008826:	60b9      	str	r1, [r7, #8]
 8008828:	607a      	str	r2, [r7, #4]
 800882a:	603b      	str	r3, [r7, #0]
			     std::forward<_Args>(__args)...);
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f7ff fd74 	bl	800831a <_ZSt7forwardIRSt10shared_ptrIN4tama13TextureLoaderEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8008832:	4604      	mov	r4, r0
 8008834:	6838      	ldr	r0, [r7, #0]
 8008836:	f7ff fd7b 	bl	8008330 <_ZSt7forwardIRSt10shared_ptrIN4tama5InputEEEOT_RNSt16remove_referenceIS5_E4typeE>
 800883a:	4603      	mov	r3, r0
 800883c:	9300      	str	r3, [sp, #0]
 800883e:	4623      	mov	r3, r4
 8008840:	68ba      	ldr	r2, [r7, #8]
 8008842:	4629      	mov	r1, r5
 8008844:	68f8      	ldr	r0, [r7, #12]
 8008846:	f000 fa15 	bl	8008c74 <_ZNSt10shared_ptrIN4tama7ContextEEC1ISaIS1_EJRS_INS0_13TextureLoaderEERS_INS0_5InputEEEEESt19_Sp_make_shared_tagRKT_DpOT0_>
    }
 800884a:	68f8      	ldr	r0, [r7, #12]
 800884c:	3718      	adds	r7, #24
 800884e:	46bd      	mov	sp, r7
 8008850:	bdb0      	pop	{r4, r5, r7, pc}

08008852 <_ZNKSt19__shared_ptr_accessIN4tama5StageELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 8008852:	b580      	push	{r7, lr}
 8008854:	b082      	sub	sp, #8
 8008856:	af00      	add	r7, sp, #0
 8008858:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f000 fa26 	bl	8008cac <_ZNKSt12__shared_ptrIN4tama5StageELN9__gnu_cxx12_Lock_policyE0EE3getEv>
 8008860:	4603      	mov	r3, r0
 8008862:	4618      	mov	r0, r3
 8008864:	3708      	adds	r7, #8
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}

0800886a <_ZNKSt19__shared_ptr_accessIN4tama18DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 800886a:	b580      	push	{r7, lr}
 800886c:	b082      	sub	sp, #8
 800886e:	af00      	add	r7, sp, #0
 8008870:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f000 fa26 	bl	8008cc4 <_ZNKSt12__shared_ptrIN4tama18DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE3getEv>
 8008878:	4603      	mov	r3, r0
 800887a:	4618      	mov	r0, r3
 800887c:	3708      	adds	r7, #8
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}

08008882 <_ZNKSt19__shared_ptr_accessIN4tama7DisplayELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 8008882:	b580      	push	{r7, lr}
 8008884:	b082      	sub	sp, #8
 8008886:	af00      	add	r7, sp, #0
 8008888:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f000 fa26 	bl	8008cdc <_ZNKSt12__shared_ptrIN4tama7DisplayELN9__gnu_cxx12_Lock_policyE0EE3getEv>
 8008890:	4603      	mov	r3, r0
 8008892:	4618      	mov	r0, r3
 8008894:	3708      	adds	r7, #8
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}

0800889a <_ZN9__gnu_cxx13new_allocatorIN4tama16Nokia5510DisplayEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800889a:	b480      	push	{r7}
 800889c:	b083      	sub	sp, #12
 800889e:	af00      	add	r7, sp, #0
 80088a0:	6078      	str	r0, [r7, #4]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	4618      	mov	r0, r3
 80088a6:	370c      	adds	r7, #12
 80088a8:	46bd      	mov	sp, r7
 80088aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ae:	4770      	bx	lr

080088b0 <_ZN9__gnu_cxx13new_allocatorIN4tama16Nokia5510DisplayEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80088b0:	b480      	push	{r7}
 80088b2:	b083      	sub	sp, #12
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	4618      	mov	r0, r3
 80088bc:	370c      	adds	r7, #12
 80088be:	46bd      	mov	sp, r7
 80088c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c4:	4770      	bx	lr

080088c6 <_ZNSt10shared_ptrIN4tama16Nokia5510DisplayEEC1ISaIS1_EJRNS0_13DisplayConfigEEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 80088c6:	b5b0      	push	{r4, r5, r7, lr}
 80088c8:	b084      	sub	sp, #16
 80088ca:	af00      	add	r7, sp, #0
 80088cc:	60f8      	str	r0, [r7, #12]
 80088ce:	7239      	strb	r1, [r7, #8]
 80088d0:	607a      	str	r2, [r7, #4]
 80088d2:	603b      	str	r3, [r7, #0]
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
 80088d4:	68fc      	ldr	r4, [r7, #12]
 80088d6:	6838      	ldr	r0, [r7, #0]
 80088d8:	f7ff fb76 	bl	8007fc8 <_ZSt7forwardIRN4tama13DisplayConfigEEOT_RNSt16remove_referenceIS3_E4typeE>
 80088dc:	4603      	mov	r3, r0
 80088de:	687a      	ldr	r2, [r7, #4]
 80088e0:	4629      	mov	r1, r5
 80088e2:	4620      	mov	r0, r4
 80088e4:	f000 fa23 	bl	8008d2e <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJRNS0_13DisplayConfigEEEESt19_Sp_make_shared_tagRKT_DpOT0_>
	{ }
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	4618      	mov	r0, r3
 80088ec:	3710      	adds	r7, #16
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bdb0      	pop	{r4, r5, r7, pc}

080088f2 <_ZN9__gnu_cxx13new_allocatorIN4tama18Stm32TextureLoaderEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80088f2:	b480      	push	{r7}
 80088f4:	b083      	sub	sp, #12
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	6078      	str	r0, [r7, #4]
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	4618      	mov	r0, r3
 80088fe:	370c      	adds	r7, #12
 8008900:	46bd      	mov	sp, r7
 8008902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008906:	4770      	bx	lr

08008908 <_ZN9__gnu_cxx13new_allocatorIN4tama18Stm32TextureLoaderEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8008908:	b480      	push	{r7}
 800890a:	b083      	sub	sp, #12
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	4618      	mov	r0, r3
 8008914:	370c      	adds	r7, #12
 8008916:	46bd      	mov	sp, r7
 8008918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891c:	4770      	bx	lr

0800891e <_ZNSt10shared_ptrIN4tama18Stm32TextureLoaderEEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 800891e:	b590      	push	{r4, r7, lr}
 8008920:	b085      	sub	sp, #20
 8008922:	af00      	add	r7, sp, #0
 8008924:	60f8      	str	r0, [r7, #12]
 8008926:	7239      	strb	r1, [r7, #8]
 8008928:	607a      	str	r2, [r7, #4]
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	687a      	ldr	r2, [r7, #4]
 800892e:	4621      	mov	r1, r4
 8008930:	4618      	mov	r0, r3
 8008932:	f000 fa94 	bl	8008e5e <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>
	{ }
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	4618      	mov	r0, r3
 800893a:	3714      	adds	r7, #20
 800893c:	46bd      	mov	sp, r7
 800893e:	bd90      	pop	{r4, r7, pc}

08008940 <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8008940:	b480      	push	{r7}
 8008942:	b083      	sub	sp, #12
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	4618      	mov	r0, r3
 800894c:	370c      	adds	r7, #12
 800894e:	46bd      	mov	sp, r7
 8008950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008954:	4770      	bx	lr

08008956 <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8008956:	b480      	push	{r7}
 8008958:	b083      	sub	sp, #12
 800895a:	af00      	add	r7, sp, #0
 800895c:	6078      	str	r0, [r7, #4]
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	4618      	mov	r0, r3
 8008962:	370c      	adds	r7, #12
 8008964:	46bd      	mov	sp, r7
 8008966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896a:	4770      	bx	lr

0800896c <_ZNSt10shared_ptrIN4tama27Nokia5110DisplayDataManagerEEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 800896c:	b590      	push	{r4, r7, lr}
 800896e:	b085      	sub	sp, #20
 8008970:	af00      	add	r7, sp, #0
 8008972:	60f8      	str	r0, [r7, #12]
 8008974:	7239      	strb	r1, [r7, #8]
 8008976:	607a      	str	r2, [r7, #4]
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	687a      	ldr	r2, [r7, #4]
 800897c:	4621      	mov	r1, r4
 800897e:	4618      	mov	r0, r3
 8008980:	f000 fb00 	bl	8008f84 <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>
	{ }
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	4618      	mov	r0, r3
 8008988:	3714      	adds	r7, #20
 800898a:	46bd      	mov	sp, r7
 800898c:	bd90      	pop	{r4, r7, pc}

0800898e <_ZN9__gnu_cxx13new_allocatorIN4tama16Stm32TimeMonitorEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800898e:	b480      	push	{r7}
 8008990:	b083      	sub	sp, #12
 8008992:	af00      	add	r7, sp, #0
 8008994:	6078      	str	r0, [r7, #4]
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	4618      	mov	r0, r3
 800899a:	370c      	adds	r7, #12
 800899c:	46bd      	mov	sp, r7
 800899e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a2:	4770      	bx	lr

080089a4 <_ZN9__gnu_cxx13new_allocatorIN4tama16Stm32TimeMonitorEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80089a4:	b480      	push	{r7}
 80089a6:	b083      	sub	sp, #12
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	4618      	mov	r0, r3
 80089b0:	370c      	adds	r7, #12
 80089b2:	46bd      	mov	sp, r7
 80089b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b8:	4770      	bx	lr

080089ba <_ZNSt10shared_ptrIN4tama16Stm32TimeMonitorEEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 80089ba:	b590      	push	{r4, r7, lr}
 80089bc:	b085      	sub	sp, #20
 80089be:	af00      	add	r7, sp, #0
 80089c0:	60f8      	str	r0, [r7, #12]
 80089c2:	7239      	strb	r1, [r7, #8]
 80089c4:	607a      	str	r2, [r7, #4]
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	687a      	ldr	r2, [r7, #4]
 80089ca:	4621      	mov	r1, r4
 80089cc:	4618      	mov	r0, r3
 80089ce:	f000 fb6c 	bl	80090aa <_ZNSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>
	{ }
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	4618      	mov	r0, r3
 80089d6:	3714      	adds	r7, #20
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd90      	pop	{r4, r7, pc}

080089dc <_ZN9__gnu_cxx13new_allocatorIN4tama25Stm32SoundPlayingStrategyEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80089dc:	b480      	push	{r7}
 80089de:	b083      	sub	sp, #12
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	4618      	mov	r0, r3
 80089e8:	370c      	adds	r7, #12
 80089ea:	46bd      	mov	sp, r7
 80089ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f0:	4770      	bx	lr

080089f2 <_ZN9__gnu_cxx13new_allocatorIN4tama25Stm32SoundPlayingStrategyEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80089f2:	b480      	push	{r7}
 80089f4:	b083      	sub	sp, #12
 80089f6:	af00      	add	r7, sp, #0
 80089f8:	6078      	str	r0, [r7, #4]
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	4618      	mov	r0, r3
 80089fe:	370c      	adds	r7, #12
 8008a00:	46bd      	mov	sp, r7
 8008a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a06:	4770      	bx	lr

08008a08 <_ZNSt10shared_ptrIN4tama25Stm32SoundPlayingStrategyEEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8008a08:	b590      	push	{r4, r7, lr}
 8008a0a:	b085      	sub	sp, #20
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	60f8      	str	r0, [r7, #12]
 8008a10:	7239      	strb	r1, [r7, #8]
 8008a12:	607a      	str	r2, [r7, #4]
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	687a      	ldr	r2, [r7, #4]
 8008a18:	4621      	mov	r1, r4
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f000 fbd8 	bl	80091d0 <_ZNSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>
	{ }
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	4618      	mov	r0, r3
 8008a24:	3714      	adds	r7, #20
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd90      	pop	{r4, r7, pc}

08008a2a <_ZN9__gnu_cxx13new_allocatorIN4tama11SoundPlayerEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8008a2a:	b480      	push	{r7}
 8008a2c:	b083      	sub	sp, #12
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	6078      	str	r0, [r7, #4]
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	4618      	mov	r0, r3
 8008a36:	370c      	adds	r7, #12
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3e:	4770      	bx	lr

08008a40 <_ZN9__gnu_cxx13new_allocatorIN4tama11SoundPlayerEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8008a40:	b480      	push	{r7}
 8008a42:	b083      	sub	sp, #12
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	370c      	adds	r7, #12
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a54:	4770      	bx	lr

08008a56 <_ZNSt10shared_ptrIN4tama11SoundPlayerEEC1ISaIS1_EJRS_INS0_11TimeMonitorEEEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8008a56:	b5b0      	push	{r4, r5, r7, lr}
 8008a58:	b084      	sub	sp, #16
 8008a5a:	af00      	add	r7, sp, #0
 8008a5c:	60f8      	str	r0, [r7, #12]
 8008a5e:	7239      	strb	r1, [r7, #8]
 8008a60:	607a      	str	r2, [r7, #4]
 8008a62:	603b      	str	r3, [r7, #0]
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
 8008a64:	68fc      	ldr	r4, [r7, #12]
 8008a66:	6838      	ldr	r0, [r7, #0]
 8008a68:	f7ff fbd0 	bl	800820c <_ZSt7forwardIRSt10shared_ptrIN4tama11TimeMonitorEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	687a      	ldr	r2, [r7, #4]
 8008a70:	4629      	mov	r1, r5
 8008a72:	4620      	mov	r0, r4
 8008a74:	f000 fc3f 	bl	80092f6 <_ZNSt12__shared_ptrIN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJRSt10shared_ptrINS0_11TimeMonitorEEEEESt19_Sp_make_shared_tagRKT_DpOT0_>
	{ }
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3710      	adds	r7, #16
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bdb0      	pop	{r4, r5, r7, pc}

08008a82 <_ZN9__gnu_cxx13new_allocatorIN4tama10Stm32InputEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8008a82:	b480      	push	{r7}
 8008a84:	b083      	sub	sp, #12
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	6078      	str	r0, [r7, #4]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	370c      	adds	r7, #12
 8008a90:	46bd      	mov	sp, r7
 8008a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a96:	4770      	bx	lr

08008a98 <_ZN9__gnu_cxx13new_allocatorIN4tama10Stm32InputEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8008a98:	b480      	push	{r7}
 8008a9a:	b083      	sub	sp, #12
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	370c      	adds	r7, #12
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aac:	4770      	bx	lr

08008aae <_ZNSt10shared_ptrIN4tama10Stm32InputEEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8008aae:	b590      	push	{r4, r7, lr}
 8008ab0:	b085      	sub	sp, #20
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	60f8      	str	r0, [r7, #12]
 8008ab6:	7239      	strb	r1, [r7, #8]
 8008ab8:	607a      	str	r2, [r7, #4]
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	687a      	ldr	r2, [r7, #4]
 8008abe:	4621      	mov	r1, r4
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	f000 fcb0 	bl	8009426 <_ZNSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>
	{ }
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3714      	adds	r7, #20
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd90      	pop	{r4, r7, pc}

08008ad0 <_ZNKSt12__shared_ptrIN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 8008ad0:	b480      	push	{r7}
 8008ad2:	b083      	sub	sp, #12
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	4618      	mov	r0, r3
 8008ade:	370c      	adds	r7, #12
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae6:	4770      	bx	lr

08008ae8 <_ZNSt16allocator_traitsISaIN4tama4ToneEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b084      	sub	sp, #16
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	60f8      	str	r0, [r7, #12]
 8008af0:	60b9      	str	r1, [r7, #8]
 8008af2:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f7ff fe40 	bl	800877a <_ZSt7forwardIN4tama4ToneEEOT_RNSt16remove_referenceIS2_E4typeE>
 8008afa:	4603      	mov	r3, r0
 8008afc:	461a      	mov	r2, r3
 8008afe:	68b9      	ldr	r1, [r7, #8]
 8008b00:	68f8      	ldr	r0, [r7, #12]
 8008b02:	f000 fd06 	bl	8009512 <_ZN9__gnu_cxx13new_allocatorIN4tama4ToneEE9constructIS2_JS2_EEEvPT_DpOT0_>
 8008b06:	bf00      	nop
 8008b08:	3710      	adds	r7, #16
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}

08008b0e <_ZNSt6vectorIN4tama4ToneESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8008b0e:	b580      	push	{r7, lr}
 8008b10:	b084      	sub	sp, #16
 8008b12:	af00      	add	r7, sp, #0
 8008b14:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	1d1a      	adds	r2, r3, #4
 8008b1a:	f107 030c 	add.w	r3, r7, #12
 8008b1e:	4611      	mov	r1, r2
 8008b20:	4618      	mov	r0, r3
 8008b22:	f000 fd11 	bl	8009548 <_ZN9__gnu_cxx17__normal_iteratorIPN4tama4ToneESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3710      	adds	r7, #16
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}

08008b30 <_ZNSt6vectorIN4tama4ToneESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8008b30:	b5b0      	push	{r4, r5, r7, lr}
 8008b32:	b08a      	sub	sp, #40	; 0x28
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	60f8      	str	r0, [r7, #12]
 8008b38:	60b9      	str	r1, [r7, #8]
 8008b3a:	607a      	str	r2, [r7, #4]
      const size_type __len =
 8008b3c:	4a41      	ldr	r2, [pc, #260]	; (8008c44 <_ZNSt6vectorIN4tama4ToneESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x114>)
 8008b3e:	2101      	movs	r1, #1
 8008b40:	68f8      	ldr	r0, [r7, #12]
 8008b42:	f000 fd11 	bl	8009568 <_ZNKSt6vectorIN4tama4ToneESaIS1_EE12_M_check_lenEjPKc>
 8008b46:	6278      	str	r0, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8008b48:	68f8      	ldr	r0, [r7, #12]
 8008b4a:	f000 fd55 	bl	80095f8 <_ZNSt6vectorIN4tama4ToneESaIS1_EE5beginEv>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	617b      	str	r3, [r7, #20]
 8008b52:	f107 0214 	add.w	r2, r7, #20
 8008b56:	f107 0308 	add.w	r3, r7, #8
 8008b5a:	4611      	mov	r1, r2
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	f000 fd5b 	bl	8009618 <_ZN9__gnu_cxxmiIPN4tama4ToneESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8008b62:	4603      	mov	r3, r0
 8008b64:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f000 fd6a 	bl	8009644 <_ZNSt12_Vector_baseIN4tama4ToneESaIS1_EE11_M_allocateEj>
 8008b70:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8008b72:	69fb      	ldr	r3, [r7, #28]
 8008b74:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8008b76:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8008b78:	6a3b      	ldr	r3, [r7, #32]
 8008b7a:	00db      	lsls	r3, r3, #3
	  _Alloc_traits::construct(this->_M_impl,
 8008b7c:	69fa      	ldr	r2, [r7, #28]
 8008b7e:	18d5      	adds	r5, r2, r3
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f7ff fdfa 	bl	800877a <_ZSt7forwardIN4tama4ToneEEOT_RNSt16remove_referenceIS2_E4typeE>
 8008b86:	4603      	mov	r3, r0
 8008b88:	461a      	mov	r2, r3
 8008b8a:	4629      	mov	r1, r5
 8008b8c:	4620      	mov	r0, r4
 8008b8e:	f7ff ffab 	bl	8008ae8 <_ZNSt16allocator_traitsISaIN4tama4ToneEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 8008b92:	2300      	movs	r3, #0
 8008b94:	61bb      	str	r3, [r7, #24]
	    (this->_M_impl._M_start, __position.base(),
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681c      	ldr	r4, [r3, #0]
 8008b9a:	f107 0308 	add.w	r3, r7, #8
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f000 fd64 	bl	800966c <_ZNK9__gnu_cxx17__normal_iteratorIPN4tama4ToneESt6vectorIS2_SaIS2_EEE4baseEv>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	681d      	ldr	r5, [r3, #0]
	     __new_start, _M_get_Tp_allocator());
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	4618      	mov	r0, r3
 8008bac:	f7fa fa3e 	bl	800302c <_ZNSt12_Vector_baseIN4tama4ToneESaIS1_EE19_M_get_Tp_allocatorEv>
 8008bb0:	4603      	mov	r3, r0
	  __new_finish
 8008bb2:	69fa      	ldr	r2, [r7, #28]
 8008bb4:	4629      	mov	r1, r5
 8008bb6:	4620      	mov	r0, r4
 8008bb8:	f000 fd63 	bl	8009682 <_ZSt34__uninitialized_move_if_noexcept_aIPN4tama4ToneES2_SaIS1_EET0_T_S5_S4_RT1_>
 8008bbc:	61b8      	str	r0, [r7, #24]
	  ++__new_finish;
 8008bbe:	69bb      	ldr	r3, [r7, #24]
 8008bc0:	3308      	adds	r3, #8
 8008bc2:	61bb      	str	r3, [r7, #24]
	    (__position.base(), this->_M_impl._M_finish,
 8008bc4:	f107 0308 	add.w	r3, r7, #8
 8008bc8:	4618      	mov	r0, r3
 8008bca:	f000 fd4f 	bl	800966c <_ZNK9__gnu_cxx17__normal_iteratorIPN4tama4ToneESt6vectorIS2_SaIS2_EEE4baseEv>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	681c      	ldr	r4, [r3, #0]
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	685d      	ldr	r5, [r3, #4]
	     __new_finish, _M_get_Tp_allocator());
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	4618      	mov	r0, r3
 8008bda:	f7fa fa27 	bl	800302c <_ZNSt12_Vector_baseIN4tama4ToneESaIS1_EE19_M_get_Tp_allocatorEv>
 8008bde:	4603      	mov	r3, r0
	  __new_finish
 8008be0:	69ba      	ldr	r2, [r7, #24]
 8008be2:	4629      	mov	r1, r5
 8008be4:	4620      	mov	r0, r4
 8008be6:	f000 fd4c 	bl	8009682 <_ZSt34__uninitialized_move_if_noexcept_aIPN4tama4ToneES2_SaIS1_EET0_T_S5_S4_RT1_>
 8008bea:	61b8      	str	r0, [r7, #24]
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681c      	ldr	r4, [r3, #0]
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	685d      	ldr	r5, [r3, #4]
		    _M_get_Tp_allocator());
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f7fa fa18 	bl	800302c <_ZNSt12_Vector_baseIN4tama4ToneESaIS1_EE19_M_get_Tp_allocatorEv>
 8008bfc:	4603      	mov	r3, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008bfe:	461a      	mov	r2, r3
 8008c00:	4629      	mov	r1, r5
 8008c02:	4620      	mov	r0, r4
 8008c04:	f7fa fa1d 	bl	8003042 <_ZSt8_DestroyIPN4tama4ToneES1_EvT_S3_RSaIT0_E>
      _M_deallocate(this->_M_impl._M_start,
 8008c08:	68f8      	ldr	r0, [r7, #12]
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	6819      	ldr	r1, [r3, #0]
		    this->_M_impl._M_end_of_storage
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	689b      	ldr	r3, [r3, #8]
		    - this->_M_impl._M_start);
 8008c12:	461a      	mov	r2, r3
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	1ad3      	subs	r3, r2, r3
 8008c1a:	10db      	asrs	r3, r3, #3
      _M_deallocate(this->_M_impl._M_start,
 8008c1c:	461a      	mov	r2, r3
 8008c1e:	f7fa fa57 	bl	80030d0 <_ZNSt12_Vector_baseIN4tama4ToneESaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	69fa      	ldr	r2, [r7, #28]
 8008c26:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	69ba      	ldr	r2, [r7, #24]
 8008c2c:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8008c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c30:	00db      	lsls	r3, r3, #3
 8008c32:	69fa      	ldr	r2, [r7, #28]
 8008c34:	441a      	add	r2, r3
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	609a      	str	r2, [r3, #8]
    }
 8008c3a:	bf00      	nop
 8008c3c:	3728      	adds	r7, #40	; 0x28
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bdb0      	pop	{r4, r5, r7, pc}
 8008c42:	bf00      	nop
 8008c44:	0801637c 	.word	0x0801637c

08008c48 <_ZN9__gnu_cxx13new_allocatorIN4tama7ContextEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8008c48:	b480      	push	{r7}
 8008c4a:	b083      	sub	sp, #12
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	4618      	mov	r0, r3
 8008c54:	370c      	adds	r7, #12
 8008c56:	46bd      	mov	sp, r7
 8008c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5c:	4770      	bx	lr

08008c5e <_ZN9__gnu_cxx13new_allocatorIN4tama7ContextEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8008c5e:	b480      	push	{r7}
 8008c60:	b083      	sub	sp, #12
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	6078      	str	r0, [r7, #4]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	4618      	mov	r0, r3
 8008c6a:	370c      	adds	r7, #12
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c72:	4770      	bx	lr

08008c74 <_ZNSt10shared_ptrIN4tama7ContextEEC1ISaIS1_EJRS_INS0_13TextureLoaderEERS_INS0_5InputEEEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8008c74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c76:	b087      	sub	sp, #28
 8008c78:	af02      	add	r7, sp, #8
 8008c7a:	60f8      	str	r0, [r7, #12]
 8008c7c:	7239      	strb	r1, [r7, #8]
 8008c7e:	607a      	str	r2, [r7, #4]
 8008c80:	603b      	str	r3, [r7, #0]
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
 8008c82:	68fc      	ldr	r4, [r7, #12]
 8008c84:	6838      	ldr	r0, [r7, #0]
 8008c86:	f7ff fb48 	bl	800831a <_ZSt7forwardIRSt10shared_ptrIN4tama13TextureLoaderEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8008c8a:	4605      	mov	r5, r0
 8008c8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c8e:	f7ff fb4f 	bl	8008330 <_ZSt7forwardIRSt10shared_ptrIN4tama5InputEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8008c92:	4603      	mov	r3, r0
 8008c94:	9300      	str	r3, [sp, #0]
 8008c96:	462b      	mov	r3, r5
 8008c98:	687a      	ldr	r2, [r7, #4]
 8008c9a:	4631      	mov	r1, r6
 8008c9c:	4620      	mov	r0, r4
 8008c9e:	f000 fd26 	bl	80096ee <_ZNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJRSt10shared_ptrINS0_13TextureLoaderEERS7_INS0_5InputEEEEESt19_Sp_make_shared_tagRKT_DpOT0_>
	{ }
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3714      	adds	r7, #20
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008cac <_ZNKSt12__shared_ptrIN4tama5StageELN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 8008cac:	b480      	push	{r7}
 8008cae:	b083      	sub	sp, #12
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4618      	mov	r0, r3
 8008cba:	370c      	adds	r7, #12
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc2:	4770      	bx	lr

08008cc4 <_ZNKSt12__shared_ptrIN4tama18DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 8008cc4:	b480      	push	{r7}
 8008cc6:	b083      	sub	sp, #12
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	370c      	adds	r7, #12
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cda:	4770      	bx	lr

08008cdc <_ZNKSt12__shared_ptrIN4tama7DisplayELN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 8008cdc:	b480      	push	{r7}
 8008cde:	b083      	sub	sp, #12
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	4618      	mov	r0, r3
 8008cea:	370c      	adds	r7, #12
 8008cec:	46bd      	mov	sp, r7
 8008cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf2:	4770      	bx	lr

08008cf4 <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>:
        struct _Deleter
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b082      	sub	sp, #8
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f7ff fb73 	bl	80083ea <_ZNSaIN4tama16Nokia5510DisplayEED1Ev>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	4618      	mov	r0, r3
 8008d08:	3708      	adds	r7, #8
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}

08008d0e <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>:
 8008d0e:	b580      	push	{r7, lr}
 8008d10:	b082      	sub	sp, #8
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	6078      	str	r0, [r7, #4]
 8008d16:	6039      	str	r1, [r7, #0]
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	683a      	ldr	r2, [r7, #0]
 8008d1c:	4611      	mov	r1, r2
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f000 fd64 	bl	80097ec <_ZNSaIN4tama16Nokia5510DisplayEEC1ERKS1_>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	4618      	mov	r0, r3
 8008d28:	3708      	adds	r7, #8
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}

08008d2e <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJRNS0_13DisplayConfigEEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8008d2e:	b580      	push	{r7, lr}
 8008d30:	b08c      	sub	sp, #48	; 0x30
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	60f8      	str	r0, [r7, #12]
 8008d36:	7239      	strb	r1, [r7, #8]
 8008d38:	607a      	str	r2, [r7, #4]
 8008d3a:	603b      	str	r3, [r7, #0]
	: _M_ptr(), _M_refcount()
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	601a      	str	r2, [r3, #0]
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	3304      	adds	r3, #4
 8008d46:	4618      	mov	r0, r3
 8008d48:	f7f8 f88f 	bl	8000e6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 8008d4c:	f107 0320 	add.w	r3, r7, #32
 8008d50:	6879      	ldr	r1, [r7, #4]
 8008d52:	4618      	mov	r0, r3
 8008d54:	f000 fd4a 	bl	80097ec <_ZNSaIN4tama16Nokia5510DisplayEEC1ERKS1_>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 8008d58:	f107 0318 	add.w	r3, r7, #24
 8008d5c:	f107 0220 	add.w	r2, r7, #32
 8008d60:	4611      	mov	r1, r2
 8008d62:	4618      	mov	r0, r3
 8008d64:	f000 fd50 	bl	8009808 <_ZSt18__allocate_guardedISaIN4tama16Nokia5510DisplayEEESt15__allocated_ptrIT_ERS4_>
	  auto __ptr = __guard.get();
 8008d68:	f107 0318 	add.w	r3, r7, #24
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f000 fd73 	bl	8009858 <_ZNSt15__allocated_ptrISaIN4tama16Nokia5510DisplayEEE3getEv>
 8008d72:	62f8      	str	r0, [r7, #44]	; 0x2c
	  __traits::construct(__del._M_alloc, __ptr,
 8008d74:	6838      	ldr	r0, [r7, #0]
 8008d76:	f7ff f927 	bl	8007fc8 <_ZSt7forwardIRN4tama13DisplayConfigEEOT_RNSt16remove_referenceIS3_E4typeE>
 8008d7a:	4602      	mov	r2, r0
 8008d7c:	f107 0320 	add.w	r3, r7, #32
 8008d80:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008d82:	4618      	mov	r0, r3
 8008d84:	f000 fd76 	bl	8009874 <_ZNSt16allocator_traitsISaIN4tama16Nokia5510DisplayEEE9constructIS1_JRNS0_13DisplayConfigEEEEvRS2_PT_DpOT0_>
	  __guard = nullptr;
 8008d88:	f107 0318 	add.w	r3, r7, #24
 8008d8c:	2100      	movs	r1, #0
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f000 fd83 	bl	800989a <_ZNSt15__allocated_ptrISaIN4tama16Nokia5510DisplayEEEaSEDn>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 8008d94:	f107 0220 	add.w	r2, r7, #32
 8008d98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d9c:	4611      	mov	r1, r2
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f7ff ffb5 	bl	8008d0e <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>
 8008da4:	f107 0220 	add.w	r2, r7, #32
 8008da8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008dac:	4611      	mov	r1, r2
 8008dae:	4618      	mov	r0, r3
 8008db0:	f000 fd1c 	bl	80097ec <_ZNSaIN4tama16Nokia5510DisplayEEC1ERKS1_>
 8008db4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008db8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8008dbc:	f107 0014 	add.w	r0, r7, #20
 8008dc0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008dc2:	f000 fd9f 	bl	8009904 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama16Nokia5510DisplayENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
 8008dc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f7ff fb0d 	bl	80083ea <_ZNSaIN4tama16Nokia5510DisplayEED1Ev>
 8008dd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f7ff ff8d 	bl	8008cf4 <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	  _M_refcount._M_swap(__count);
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	3304      	adds	r3, #4
 8008dde:	f107 0214 	add.w	r2, r7, #20
 8008de2:	4611      	mov	r1, r2
 8008de4:	4618      	mov	r0, r3
 8008de6:	f7f8 f84e 	bl	8000e86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  _M_ptr = __ptr;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008dee:	601a      	str	r2, [r3, #0]
	  _M_enable_shared_from_this_with(_M_ptr);
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	4619      	mov	r1, r3
 8008df6:	68f8      	ldr	r0, [r7, #12]
 8008df8:	f000 fddb 	bl	80099b2 <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 8008dfc:	f107 0314 	add.w	r3, r7, #20
 8008e00:	4618      	mov	r0, r3
 8008e02:	f7f7 fe16 	bl	8000a32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 8008e06:	f107 0318 	add.w	r3, r7, #24
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f000 fd0f 	bl	800982e <_ZNSt15__allocated_ptrISaIN4tama16Nokia5510DisplayEEED1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 8008e10:	f107 0320 	add.w	r3, r7, #32
 8008e14:	4618      	mov	r0, r3
 8008e16:	f7ff ff6d 	bl	8008cf4 <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	}
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3730      	adds	r7, #48	; 0x30
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}

08008e24 <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>:
        struct _Deleter
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b082      	sub	sp, #8
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f7ff fb24 	bl	800847c <_ZNSaIN4tama18Stm32TextureLoaderEED1Ev>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	4618      	mov	r0, r3
 8008e38:	3708      	adds	r7, #8
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}

08008e3e <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>:
 8008e3e:	b580      	push	{r7, lr}
 8008e40:	b082      	sub	sp, #8
 8008e42:	af00      	add	r7, sp, #0
 8008e44:	6078      	str	r0, [r7, #4]
 8008e46:	6039      	str	r1, [r7, #0]
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	683a      	ldr	r2, [r7, #0]
 8008e4c:	4611      	mov	r1, r2
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f000 fdba 	bl	80099c8 <_ZNSaIN4tama18Stm32TextureLoaderEEC1ERKS1_>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	4618      	mov	r0, r3
 8008e58:	3708      	adds	r7, #8
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}

08008e5e <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8008e5e:	b580      	push	{r7, lr}
 8008e60:	b08c      	sub	sp, #48	; 0x30
 8008e62:	af00      	add	r7, sp, #0
 8008e64:	60f8      	str	r0, [r7, #12]
 8008e66:	7239      	strb	r1, [r7, #8]
 8008e68:	607a      	str	r2, [r7, #4]
	: _M_ptr(), _M_refcount()
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	601a      	str	r2, [r3, #0]
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	3304      	adds	r3, #4
 8008e74:	4618      	mov	r0, r3
 8008e76:	f7f7 fff8 	bl	8000e6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 8008e7a:	f107 0320 	add.w	r3, r7, #32
 8008e7e:	6879      	ldr	r1, [r7, #4]
 8008e80:	4618      	mov	r0, r3
 8008e82:	f000 fda1 	bl	80099c8 <_ZNSaIN4tama18Stm32TextureLoaderEEC1ERKS1_>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 8008e86:	f107 0318 	add.w	r3, r7, #24
 8008e8a:	f107 0220 	add.w	r2, r7, #32
 8008e8e:	4611      	mov	r1, r2
 8008e90:	4618      	mov	r0, r3
 8008e92:	f000 fda7 	bl	80099e4 <_ZSt18__allocate_guardedISaIN4tama18Stm32TextureLoaderEEESt15__allocated_ptrIT_ERS4_>
	  auto __ptr = __guard.get();
 8008e96:	f107 0318 	add.w	r3, r7, #24
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	f000 fdca 	bl	8009a34 <_ZNSt15__allocated_ptrISaIN4tama18Stm32TextureLoaderEEE3getEv>
 8008ea0:	62f8      	str	r0, [r7, #44]	; 0x2c
	  __traits::construct(__del._M_alloc, __ptr,
 8008ea2:	f107 0320 	add.w	r3, r7, #32
 8008ea6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	f000 fdd1 	bl	8009a50 <_ZNSt16allocator_traitsISaIN4tama18Stm32TextureLoaderEEE9constructIS1_JEEEvRS2_PT_DpOT0_>
	  __guard = nullptr;
 8008eae:	f107 0318 	add.w	r3, r7, #24
 8008eb2:	2100      	movs	r1, #0
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f000 fdd8 	bl	8009a6a <_ZNSt15__allocated_ptrISaIN4tama18Stm32TextureLoaderEEEaSEDn>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 8008eba:	f107 0220 	add.w	r2, r7, #32
 8008ebe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ec2:	4611      	mov	r1, r2
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	f7ff ffba 	bl	8008e3e <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>
 8008eca:	f107 0220 	add.w	r2, r7, #32
 8008ece:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008ed2:	4611      	mov	r1, r2
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f000 fd77 	bl	80099c8 <_ZNSaIN4tama18Stm32TextureLoaderEEC1ERKS1_>
 8008eda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008ede:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8008ee2:	f107 0014 	add.w	r0, r7, #20
 8008ee6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008ee8:	f000 fdf4 	bl	8009ad4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
 8008eec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f7ff fac3 	bl	800847c <_ZNSaIN4tama18Stm32TextureLoaderEED1Ev>
 8008ef6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008efa:	4618      	mov	r0, r3
 8008efc:	f7ff ff92 	bl	8008e24 <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	  _M_refcount._M_swap(__count);
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	3304      	adds	r3, #4
 8008f04:	f107 0214 	add.w	r2, r7, #20
 8008f08:	4611      	mov	r1, r2
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f7f7 ffbb 	bl	8000e86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  _M_ptr = __ptr;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f14:	601a      	str	r2, [r3, #0]
	  _M_enable_shared_from_this_with(_M_ptr);
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	4619      	mov	r1, r3
 8008f1c:	68f8      	ldr	r0, [r7, #12]
 8008f1e:	f000 fe30 	bl	8009b82 <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 8008f22:	f107 0314 	add.w	r3, r7, #20
 8008f26:	4618      	mov	r0, r3
 8008f28:	f7f7 fd83 	bl	8000a32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 8008f2c:	f107 0318 	add.w	r3, r7, #24
 8008f30:	4618      	mov	r0, r3
 8008f32:	f000 fd6a 	bl	8009a0a <_ZNSt15__allocated_ptrISaIN4tama18Stm32TextureLoaderEEED1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 8008f36:	f107 0320 	add.w	r3, r7, #32
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f7ff ff72 	bl	8008e24 <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	}
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	4618      	mov	r0, r3
 8008f44:	3730      	adds	r7, #48	; 0x30
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}

08008f4a <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>:
        struct _Deleter
 8008f4a:	b580      	push	{r7, lr}
 8008f4c:	b082      	sub	sp, #8
 8008f4e:	af00      	add	r7, sp, #0
 8008f50:	6078      	str	r0, [r7, #4]
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	4618      	mov	r0, r3
 8008f56:	f7ff fad5 	bl	8008504 <_ZNSaIN4tama27Nokia5110DisplayDataManagerEED1Ev>
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3708      	adds	r7, #8
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}

08008f64 <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>:
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b082      	sub	sp, #8
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
 8008f6c:	6039      	str	r1, [r7, #0]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	683a      	ldr	r2, [r7, #0]
 8008f72:	4611      	mov	r1, r2
 8008f74:	4618      	mov	r0, r3
 8008f76:	f000 fe0f 	bl	8009b98 <_ZNSaIN4tama27Nokia5110DisplayDataManagerEEC1ERKS1_>
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3708      	adds	r7, #8
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}

08008f84 <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b08c      	sub	sp, #48	; 0x30
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	60f8      	str	r0, [r7, #12]
 8008f8c:	7239      	strb	r1, [r7, #8]
 8008f8e:	607a      	str	r2, [r7, #4]
	: _M_ptr(), _M_refcount()
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	2200      	movs	r2, #0
 8008f94:	601a      	str	r2, [r3, #0]
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	3304      	adds	r3, #4
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f7f7 ff65 	bl	8000e6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 8008fa0:	f107 0320 	add.w	r3, r7, #32
 8008fa4:	6879      	ldr	r1, [r7, #4]
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f000 fdf6 	bl	8009b98 <_ZNSaIN4tama27Nokia5110DisplayDataManagerEEC1ERKS1_>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 8008fac:	f107 0318 	add.w	r3, r7, #24
 8008fb0:	f107 0220 	add.w	r2, r7, #32
 8008fb4:	4611      	mov	r1, r2
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f000 fdfc 	bl	8009bb4 <_ZSt18__allocate_guardedISaIN4tama27Nokia5110DisplayDataManagerEEESt15__allocated_ptrIT_ERS4_>
	  auto __ptr = __guard.get();
 8008fbc:	f107 0318 	add.w	r3, r7, #24
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f000 fe1f 	bl	8009c04 <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEE3getEv>
 8008fc6:	62f8      	str	r0, [r7, #44]	; 0x2c
	  __traits::construct(__del._M_alloc, __ptr,
 8008fc8:	f107 0320 	add.w	r3, r7, #32
 8008fcc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f000 fe26 	bl	8009c20 <_ZNSt16allocator_traitsISaIN4tama27Nokia5110DisplayDataManagerEEE9constructIS1_JEEEvRS2_PT_DpOT0_>
	  __guard = nullptr;
 8008fd4:	f107 0318 	add.w	r3, r7, #24
 8008fd8:	2100      	movs	r1, #0
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f000 fe2d 	bl	8009c3a <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEEaSEDn>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 8008fe0:	f107 0220 	add.w	r2, r7, #32
 8008fe4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008fe8:	4611      	mov	r1, r2
 8008fea:	4618      	mov	r0, r3
 8008fec:	f7ff ffba 	bl	8008f64 <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>
 8008ff0:	f107 0220 	add.w	r2, r7, #32
 8008ff4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008ff8:	4611      	mov	r1, r2
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f000 fdcc 	bl	8009b98 <_ZNSaIN4tama27Nokia5110DisplayDataManagerEEC1ERKS1_>
 8009000:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009004:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8009008:	f107 0014 	add.w	r0, r7, #20
 800900c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800900e:	f000 fe49 	bl	8009ca4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
 8009012:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009016:	4618      	mov	r0, r3
 8009018:	f7ff fa74 	bl	8008504 <_ZNSaIN4tama27Nokia5110DisplayDataManagerEED1Ev>
 800901c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009020:	4618      	mov	r0, r3
 8009022:	f7ff ff92 	bl	8008f4a <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	  _M_refcount._M_swap(__count);
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	3304      	adds	r3, #4
 800902a:	f107 0214 	add.w	r2, r7, #20
 800902e:	4611      	mov	r1, r2
 8009030:	4618      	mov	r0, r3
 8009032:	f7f7 ff28 	bl	8000e86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  _M_ptr = __ptr;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800903a:	601a      	str	r2, [r3, #0]
	  _M_enable_shared_from_this_with(_M_ptr);
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4619      	mov	r1, r3
 8009042:	68f8      	ldr	r0, [r7, #12]
 8009044:	f000 fe85 	bl	8009d52 <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 8009048:	f107 0314 	add.w	r3, r7, #20
 800904c:	4618      	mov	r0, r3
 800904e:	f7f7 fcf0 	bl	8000a32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 8009052:	f107 0318 	add.w	r3, r7, #24
 8009056:	4618      	mov	r0, r3
 8009058:	f000 fdbf 	bl	8009bda <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEED1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 800905c:	f107 0320 	add.w	r3, r7, #32
 8009060:	4618      	mov	r0, r3
 8009062:	f7ff ff72 	bl	8008f4a <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	}
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	4618      	mov	r0, r3
 800906a:	3730      	adds	r7, #48	; 0x30
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}

08009070 <_ZNSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>:
        struct _Deleter
 8009070:	b580      	push	{r7, lr}
 8009072:	b082      	sub	sp, #8
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	4618      	mov	r0, r3
 800907c:	f7ff fa86 	bl	800858c <_ZNSaIN4tama16Stm32TimeMonitorEED1Ev>
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	4618      	mov	r0, r3
 8009084:	3708      	adds	r7, #8
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}

0800908a <_ZNSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>:
 800908a:	b580      	push	{r7, lr}
 800908c:	b082      	sub	sp, #8
 800908e:	af00      	add	r7, sp, #0
 8009090:	6078      	str	r0, [r7, #4]
 8009092:	6039      	str	r1, [r7, #0]
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	683a      	ldr	r2, [r7, #0]
 8009098:	4611      	mov	r1, r2
 800909a:	4618      	mov	r0, r3
 800909c:	f000 fe64 	bl	8009d68 <_ZNSaIN4tama16Stm32TimeMonitorEEC1ERKS1_>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	4618      	mov	r0, r3
 80090a4:	3708      	adds	r7, #8
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}

080090aa <_ZNSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 80090aa:	b580      	push	{r7, lr}
 80090ac:	b08c      	sub	sp, #48	; 0x30
 80090ae:	af00      	add	r7, sp, #0
 80090b0:	60f8      	str	r0, [r7, #12]
 80090b2:	7239      	strb	r1, [r7, #8]
 80090b4:	607a      	str	r2, [r7, #4]
	: _M_ptr(), _M_refcount()
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	2200      	movs	r2, #0
 80090ba:	601a      	str	r2, [r3, #0]
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	3304      	adds	r3, #4
 80090c0:	4618      	mov	r0, r3
 80090c2:	f7f7 fed2 	bl	8000e6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 80090c6:	f107 0320 	add.w	r3, r7, #32
 80090ca:	6879      	ldr	r1, [r7, #4]
 80090cc:	4618      	mov	r0, r3
 80090ce:	f000 fe4b 	bl	8009d68 <_ZNSaIN4tama16Stm32TimeMonitorEEC1ERKS1_>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 80090d2:	f107 0318 	add.w	r3, r7, #24
 80090d6:	f107 0220 	add.w	r2, r7, #32
 80090da:	4611      	mov	r1, r2
 80090dc:	4618      	mov	r0, r3
 80090de:	f000 fe51 	bl	8009d84 <_ZSt18__allocate_guardedISaIN4tama16Stm32TimeMonitorEEESt15__allocated_ptrIT_ERS4_>
	  auto __ptr = __guard.get();
 80090e2:	f107 0318 	add.w	r3, r7, #24
 80090e6:	4618      	mov	r0, r3
 80090e8:	f000 fe74 	bl	8009dd4 <_ZNSt15__allocated_ptrISaIN4tama16Stm32TimeMonitorEEE3getEv>
 80090ec:	62f8      	str	r0, [r7, #44]	; 0x2c
	  __traits::construct(__del._M_alloc, __ptr,
 80090ee:	f107 0320 	add.w	r3, r7, #32
 80090f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80090f4:	4618      	mov	r0, r3
 80090f6:	f000 fe7b 	bl	8009df0 <_ZNSt16allocator_traitsISaIN4tama16Stm32TimeMonitorEEE9constructIS1_JEEEvRS2_PT_DpOT0_>
	  __guard = nullptr;
 80090fa:	f107 0318 	add.w	r3, r7, #24
 80090fe:	2100      	movs	r1, #0
 8009100:	4618      	mov	r0, r3
 8009102:	f000 fe82 	bl	8009e0a <_ZNSt15__allocated_ptrISaIN4tama16Stm32TimeMonitorEEEaSEDn>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 8009106:	f107 0220 	add.w	r2, r7, #32
 800910a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800910e:	4611      	mov	r1, r2
 8009110:	4618      	mov	r0, r3
 8009112:	f7ff ffba 	bl	800908a <_ZNSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>
 8009116:	f107 0220 	add.w	r2, r7, #32
 800911a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800911e:	4611      	mov	r1, r2
 8009120:	4618      	mov	r0, r3
 8009122:	f000 fe21 	bl	8009d68 <_ZNSaIN4tama16Stm32TimeMonitorEEC1ERKS1_>
 8009126:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800912a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800912e:	f107 0014 	add.w	r0, r7, #20
 8009132:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009134:	f000 fe9e 	bl	8009e74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
 8009138:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800913c:	4618      	mov	r0, r3
 800913e:	f7ff fa25 	bl	800858c <_ZNSaIN4tama16Stm32TimeMonitorEED1Ev>
 8009142:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009146:	4618      	mov	r0, r3
 8009148:	f7ff ff92 	bl	8009070 <_ZNSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	  _M_refcount._M_swap(__count);
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	3304      	adds	r3, #4
 8009150:	f107 0214 	add.w	r2, r7, #20
 8009154:	4611      	mov	r1, r2
 8009156:	4618      	mov	r0, r3
 8009158:	f7f7 fe95 	bl	8000e86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  _M_ptr = __ptr;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009160:	601a      	str	r2, [r3, #0]
	  _M_enable_shared_from_this_with(_M_ptr);
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	4619      	mov	r1, r3
 8009168:	68f8      	ldr	r0, [r7, #12]
 800916a:	f000 feda 	bl	8009f22 <_ZNSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 800916e:	f107 0314 	add.w	r3, r7, #20
 8009172:	4618      	mov	r0, r3
 8009174:	f7f7 fc5d 	bl	8000a32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 8009178:	f107 0318 	add.w	r3, r7, #24
 800917c:	4618      	mov	r0, r3
 800917e:	f000 fe14 	bl	8009daa <_ZNSt15__allocated_ptrISaIN4tama16Stm32TimeMonitorEEED1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 8009182:	f107 0320 	add.w	r3, r7, #32
 8009186:	4618      	mov	r0, r3
 8009188:	f7ff ff72 	bl	8009070 <_ZNSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	}
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	4618      	mov	r0, r3
 8009190:	3730      	adds	r7, #48	; 0x30
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}

08009196 <_ZNSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>:
        struct _Deleter
 8009196:	b580      	push	{r7, lr}
 8009198:	b082      	sub	sp, #8
 800919a:	af00      	add	r7, sp, #0
 800919c:	6078      	str	r0, [r7, #4]
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	4618      	mov	r0, r3
 80091a2:	f7ff fa37 	bl	8008614 <_ZNSaIN4tama25Stm32SoundPlayingStrategyEED1Ev>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	4618      	mov	r0, r3
 80091aa:	3708      	adds	r7, #8
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}

080091b0 <_ZNSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>:
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b082      	sub	sp, #8
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
 80091b8:	6039      	str	r1, [r7, #0]
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	683a      	ldr	r2, [r7, #0]
 80091be:	4611      	mov	r1, r2
 80091c0:	4618      	mov	r0, r3
 80091c2:	f000 feb9 	bl	8009f38 <_ZNSaIN4tama25Stm32SoundPlayingStrategyEEC1ERKS1_>
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	4618      	mov	r0, r3
 80091ca:	3708      	adds	r7, #8
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}

080091d0 <_ZNSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b08c      	sub	sp, #48	; 0x30
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	60f8      	str	r0, [r7, #12]
 80091d8:	7239      	strb	r1, [r7, #8]
 80091da:	607a      	str	r2, [r7, #4]
	: _M_ptr(), _M_refcount()
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	2200      	movs	r2, #0
 80091e0:	601a      	str	r2, [r3, #0]
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	3304      	adds	r3, #4
 80091e6:	4618      	mov	r0, r3
 80091e8:	f7f7 fe3f 	bl	8000e6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 80091ec:	f107 0320 	add.w	r3, r7, #32
 80091f0:	6879      	ldr	r1, [r7, #4]
 80091f2:	4618      	mov	r0, r3
 80091f4:	f000 fea0 	bl	8009f38 <_ZNSaIN4tama25Stm32SoundPlayingStrategyEEC1ERKS1_>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 80091f8:	f107 0318 	add.w	r3, r7, #24
 80091fc:	f107 0220 	add.w	r2, r7, #32
 8009200:	4611      	mov	r1, r2
 8009202:	4618      	mov	r0, r3
 8009204:	f000 fea6 	bl	8009f54 <_ZSt18__allocate_guardedISaIN4tama25Stm32SoundPlayingStrategyEEESt15__allocated_ptrIT_ERS4_>
	  auto __ptr = __guard.get();
 8009208:	f107 0318 	add.w	r3, r7, #24
 800920c:	4618      	mov	r0, r3
 800920e:	f000 fec9 	bl	8009fa4 <_ZNSt15__allocated_ptrISaIN4tama25Stm32SoundPlayingStrategyEEE3getEv>
 8009212:	62f8      	str	r0, [r7, #44]	; 0x2c
	  __traits::construct(__del._M_alloc, __ptr,
 8009214:	f107 0320 	add.w	r3, r7, #32
 8009218:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800921a:	4618      	mov	r0, r3
 800921c:	f000 fed0 	bl	8009fc0 <_ZNSt16allocator_traitsISaIN4tama25Stm32SoundPlayingStrategyEEE9constructIS1_JEEEvRS2_PT_DpOT0_>
	  __guard = nullptr;
 8009220:	f107 0318 	add.w	r3, r7, #24
 8009224:	2100      	movs	r1, #0
 8009226:	4618      	mov	r0, r3
 8009228:	f000 fed7 	bl	8009fda <_ZNSt15__allocated_ptrISaIN4tama25Stm32SoundPlayingStrategyEEEaSEDn>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 800922c:	f107 0220 	add.w	r2, r7, #32
 8009230:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009234:	4611      	mov	r1, r2
 8009236:	4618      	mov	r0, r3
 8009238:	f7ff ffba 	bl	80091b0 <_ZNSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>
 800923c:	f107 0220 	add.w	r2, r7, #32
 8009240:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009244:	4611      	mov	r1, r2
 8009246:	4618      	mov	r0, r3
 8009248:	f000 fe76 	bl	8009f38 <_ZNSaIN4tama25Stm32SoundPlayingStrategyEEC1ERKS1_>
 800924c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009250:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8009254:	f107 0014 	add.w	r0, r7, #20
 8009258:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800925a:	f000 fef3 	bl	800a044 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
 800925e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009262:	4618      	mov	r0, r3
 8009264:	f7ff f9d6 	bl	8008614 <_ZNSaIN4tama25Stm32SoundPlayingStrategyEED1Ev>
 8009268:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800926c:	4618      	mov	r0, r3
 800926e:	f7ff ff92 	bl	8009196 <_ZNSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	  _M_refcount._M_swap(__count);
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	3304      	adds	r3, #4
 8009276:	f107 0214 	add.w	r2, r7, #20
 800927a:	4611      	mov	r1, r2
 800927c:	4618      	mov	r0, r3
 800927e:	f7f7 fe02 	bl	8000e86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  _M_ptr = __ptr;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009286:	601a      	str	r2, [r3, #0]
	  _M_enable_shared_from_this_with(_M_ptr);
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	4619      	mov	r1, r3
 800928e:	68f8      	ldr	r0, [r7, #12]
 8009290:	f000 ff2f 	bl	800a0f2 <_ZNSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 8009294:	f107 0314 	add.w	r3, r7, #20
 8009298:	4618      	mov	r0, r3
 800929a:	f7f7 fbca 	bl	8000a32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 800929e:	f107 0318 	add.w	r3, r7, #24
 80092a2:	4618      	mov	r0, r3
 80092a4:	f000 fe69 	bl	8009f7a <_ZNSt15__allocated_ptrISaIN4tama25Stm32SoundPlayingStrategyEEED1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 80092a8:	f107 0320 	add.w	r3, r7, #32
 80092ac:	4618      	mov	r0, r3
 80092ae:	f7ff ff72 	bl	8009196 <_ZNSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	}
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	4618      	mov	r0, r3
 80092b6:	3730      	adds	r7, #48	; 0x30
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}

080092bc <_ZNSt12__shared_ptrIN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>:
        struct _Deleter
 80092bc:	b580      	push	{r7, lr}
 80092be:	b082      	sub	sp, #8
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	4618      	mov	r0, r3
 80092c8:	f7ff f9e8 	bl	800869c <_ZNSaIN4tama11SoundPlayerEED1Ev>
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	4618      	mov	r0, r3
 80092d0:	3708      	adds	r7, #8
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}

080092d6 <_ZNSt12__shared_ptrIN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>:
 80092d6:	b580      	push	{r7, lr}
 80092d8:	b082      	sub	sp, #8
 80092da:	af00      	add	r7, sp, #0
 80092dc:	6078      	str	r0, [r7, #4]
 80092de:	6039      	str	r1, [r7, #0]
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	683a      	ldr	r2, [r7, #0]
 80092e4:	4611      	mov	r1, r2
 80092e6:	4618      	mov	r0, r3
 80092e8:	f000 ff0e 	bl	800a108 <_ZNSaIN4tama11SoundPlayerEEC1ERKS1_>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	4618      	mov	r0, r3
 80092f0:	3708      	adds	r7, #8
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}

080092f6 <_ZNSt12__shared_ptrIN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJRSt10shared_ptrINS0_11TimeMonitorEEEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 80092f6:	b580      	push	{r7, lr}
 80092f8:	b08c      	sub	sp, #48	; 0x30
 80092fa:	af00      	add	r7, sp, #0
 80092fc:	60f8      	str	r0, [r7, #12]
 80092fe:	7239      	strb	r1, [r7, #8]
 8009300:	607a      	str	r2, [r7, #4]
 8009302:	603b      	str	r3, [r7, #0]
	: _M_ptr(), _M_refcount()
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	2200      	movs	r2, #0
 8009308:	601a      	str	r2, [r3, #0]
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	3304      	adds	r3, #4
 800930e:	4618      	mov	r0, r3
 8009310:	f7f7 fdab 	bl	8000e6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 8009314:	f107 0320 	add.w	r3, r7, #32
 8009318:	6879      	ldr	r1, [r7, #4]
 800931a:	4618      	mov	r0, r3
 800931c:	f000 fef4 	bl	800a108 <_ZNSaIN4tama11SoundPlayerEEC1ERKS1_>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 8009320:	f107 0318 	add.w	r3, r7, #24
 8009324:	f107 0220 	add.w	r2, r7, #32
 8009328:	4611      	mov	r1, r2
 800932a:	4618      	mov	r0, r3
 800932c:	f000 fefa 	bl	800a124 <_ZSt18__allocate_guardedISaIN4tama11SoundPlayerEEESt15__allocated_ptrIT_ERS4_>
	  auto __ptr = __guard.get();
 8009330:	f107 0318 	add.w	r3, r7, #24
 8009334:	4618      	mov	r0, r3
 8009336:	f000 ff1d 	bl	800a174 <_ZNSt15__allocated_ptrISaIN4tama11SoundPlayerEEE3getEv>
 800933a:	62f8      	str	r0, [r7, #44]	; 0x2c
	  __traits::construct(__del._M_alloc, __ptr,
 800933c:	6838      	ldr	r0, [r7, #0]
 800933e:	f7fe ff65 	bl	800820c <_ZSt7forwardIRSt10shared_ptrIN4tama11TimeMonitorEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8009342:	4602      	mov	r2, r0
 8009344:	f107 0320 	add.w	r3, r7, #32
 8009348:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800934a:	4618      	mov	r0, r3
 800934c:	f000 ff20 	bl	800a190 <_ZNSt16allocator_traitsISaIN4tama11SoundPlayerEEE9constructIS1_JRSt10shared_ptrINS0_11TimeMonitorEEEEEvRS2_PT_DpOT0_>
	  __guard = nullptr;
 8009350:	f107 0318 	add.w	r3, r7, #24
 8009354:	2100      	movs	r1, #0
 8009356:	4618      	mov	r0, r3
 8009358:	f000 ff2d 	bl	800a1b6 <_ZNSt15__allocated_ptrISaIN4tama11SoundPlayerEEEaSEDn>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 800935c:	f107 0220 	add.w	r2, r7, #32
 8009360:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009364:	4611      	mov	r1, r2
 8009366:	4618      	mov	r0, r3
 8009368:	f7ff ffb5 	bl	80092d6 <_ZNSt12__shared_ptrIN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>
 800936c:	f107 0220 	add.w	r2, r7, #32
 8009370:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009374:	4611      	mov	r1, r2
 8009376:	4618      	mov	r0, r3
 8009378:	f000 fec6 	bl	800a108 <_ZNSaIN4tama11SoundPlayerEEC1ERKS1_>
 800937c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009380:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8009384:	f107 0014 	add.w	r0, r7, #20
 8009388:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800938a:	f000 ff49 	bl	800a220 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama11SoundPlayerENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
 800938e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009392:	4618      	mov	r0, r3
 8009394:	f7ff f982 	bl	800869c <_ZNSaIN4tama11SoundPlayerEED1Ev>
 8009398:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800939c:	4618      	mov	r0, r3
 800939e:	f7ff ff8d 	bl	80092bc <_ZNSt12__shared_ptrIN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	  _M_refcount._M_swap(__count);
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	3304      	adds	r3, #4
 80093a6:	f107 0214 	add.w	r2, r7, #20
 80093aa:	4611      	mov	r1, r2
 80093ac:	4618      	mov	r0, r3
 80093ae:	f7f7 fd6a 	bl	8000e86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  _M_ptr = __ptr;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80093b6:	601a      	str	r2, [r3, #0]
	  _M_enable_shared_from_this_with(_M_ptr);
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	4619      	mov	r1, r3
 80093be:	68f8      	ldr	r0, [r7, #12]
 80093c0:	f000 ff85 	bl	800a2ce <_ZNSt12__shared_ptrIN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 80093c4:	f107 0314 	add.w	r3, r7, #20
 80093c8:	4618      	mov	r0, r3
 80093ca:	f7f7 fb32 	bl	8000a32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 80093ce:	f107 0318 	add.w	r3, r7, #24
 80093d2:	4618      	mov	r0, r3
 80093d4:	f000 feb9 	bl	800a14a <_ZNSt15__allocated_ptrISaIN4tama11SoundPlayerEEED1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 80093d8:	f107 0320 	add.w	r3, r7, #32
 80093dc:	4618      	mov	r0, r3
 80093de:	f7ff ff6d 	bl	80092bc <_ZNSt12__shared_ptrIN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	}
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	4618      	mov	r0, r3
 80093e6:	3730      	adds	r7, #48	; 0x30
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}

080093ec <_ZNSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>:
        struct _Deleter
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b082      	sub	sp, #8
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	4618      	mov	r0, r3
 80093f8:	f7ff f97b 	bl	80086f2 <_ZNSaIN4tama10Stm32InputEED1Ev>
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	4618      	mov	r0, r3
 8009400:	3708      	adds	r7, #8
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}

08009406 <_ZNSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>:
 8009406:	b580      	push	{r7, lr}
 8009408:	b082      	sub	sp, #8
 800940a:	af00      	add	r7, sp, #0
 800940c:	6078      	str	r0, [r7, #4]
 800940e:	6039      	str	r1, [r7, #0]
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	683a      	ldr	r2, [r7, #0]
 8009414:	4611      	mov	r1, r2
 8009416:	4618      	mov	r0, r3
 8009418:	f000 ff64 	bl	800a2e4 <_ZNSaIN4tama10Stm32InputEEC1ERKS1_>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	4618      	mov	r0, r3
 8009420:	3708      	adds	r7, #8
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}

08009426 <_ZNSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8009426:	b580      	push	{r7, lr}
 8009428:	b08c      	sub	sp, #48	; 0x30
 800942a:	af00      	add	r7, sp, #0
 800942c:	60f8      	str	r0, [r7, #12]
 800942e:	7239      	strb	r1, [r7, #8]
 8009430:	607a      	str	r2, [r7, #4]
	: _M_ptr(), _M_refcount()
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	2200      	movs	r2, #0
 8009436:	601a      	str	r2, [r3, #0]
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	3304      	adds	r3, #4
 800943c:	4618      	mov	r0, r3
 800943e:	f7f7 fd14 	bl	8000e6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 8009442:	f107 0320 	add.w	r3, r7, #32
 8009446:	6879      	ldr	r1, [r7, #4]
 8009448:	4618      	mov	r0, r3
 800944a:	f000 ff4b 	bl	800a2e4 <_ZNSaIN4tama10Stm32InputEEC1ERKS1_>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 800944e:	f107 0318 	add.w	r3, r7, #24
 8009452:	f107 0220 	add.w	r2, r7, #32
 8009456:	4611      	mov	r1, r2
 8009458:	4618      	mov	r0, r3
 800945a:	f000 ff51 	bl	800a300 <_ZSt18__allocate_guardedISaIN4tama10Stm32InputEEESt15__allocated_ptrIT_ERS4_>
	  auto __ptr = __guard.get();
 800945e:	f107 0318 	add.w	r3, r7, #24
 8009462:	4618      	mov	r0, r3
 8009464:	f000 ff74 	bl	800a350 <_ZNSt15__allocated_ptrISaIN4tama10Stm32InputEEE3getEv>
 8009468:	62f8      	str	r0, [r7, #44]	; 0x2c
	  __traits::construct(__del._M_alloc, __ptr,
 800946a:	f107 0320 	add.w	r3, r7, #32
 800946e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009470:	4618      	mov	r0, r3
 8009472:	f000 ff7b 	bl	800a36c <_ZNSt16allocator_traitsISaIN4tama10Stm32InputEEE9constructIS1_JEEEvRS2_PT_DpOT0_>
	  __guard = nullptr;
 8009476:	f107 0318 	add.w	r3, r7, #24
 800947a:	2100      	movs	r1, #0
 800947c:	4618      	mov	r0, r3
 800947e:	f000 ff82 	bl	800a386 <_ZNSt15__allocated_ptrISaIN4tama10Stm32InputEEEaSEDn>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 8009482:	f107 0220 	add.w	r2, r7, #32
 8009486:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800948a:	4611      	mov	r1, r2
 800948c:	4618      	mov	r0, r3
 800948e:	f7ff ffba 	bl	8009406 <_ZNSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>
 8009492:	f107 0220 	add.w	r2, r7, #32
 8009496:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800949a:	4611      	mov	r1, r2
 800949c:	4618      	mov	r0, r3
 800949e:	f000 ff21 	bl	800a2e4 <_ZNSaIN4tama10Stm32InputEEC1ERKS1_>
 80094a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80094a6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80094aa:	f107 0014 	add.w	r0, r7, #20
 80094ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80094b0:	f000 ff9e 	bl	800a3f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama10Stm32InputENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
 80094b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80094b8:	4618      	mov	r0, r3
 80094ba:	f7ff f91a 	bl	80086f2 <_ZNSaIN4tama10Stm32InputEED1Ev>
 80094be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80094c2:	4618      	mov	r0, r3
 80094c4:	f7ff ff92 	bl	80093ec <_ZNSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	  _M_refcount._M_swap(__count);
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	3304      	adds	r3, #4
 80094cc:	f107 0214 	add.w	r2, r7, #20
 80094d0:	4611      	mov	r1, r2
 80094d2:	4618      	mov	r0, r3
 80094d4:	f7f7 fcd7 	bl	8000e86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  _M_ptr = __ptr;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094dc:	601a      	str	r2, [r3, #0]
	  _M_enable_shared_from_this_with(_M_ptr);
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	4619      	mov	r1, r3
 80094e4:	68f8      	ldr	r0, [r7, #12]
 80094e6:	f000 ffda 	bl	800a49e <_ZNSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 80094ea:	f107 0314 	add.w	r3, r7, #20
 80094ee:	4618      	mov	r0, r3
 80094f0:	f7f7 fa9f 	bl	8000a32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 80094f4:	f107 0318 	add.w	r3, r7, #24
 80094f8:	4618      	mov	r0, r3
 80094fa:	f000 ff14 	bl	800a326 <_ZNSt15__allocated_ptrISaIN4tama10Stm32InputEEED1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 80094fe:	f107 0320 	add.w	r3, r7, #32
 8009502:	4618      	mov	r0, r3
 8009504:	f7ff ff72 	bl	80093ec <_ZNSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	}
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	4618      	mov	r0, r3
 800950c:	3730      	adds	r7, #48	; 0x30
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}

08009512 <_ZN9__gnu_cxx13new_allocatorIN4tama4ToneEE9constructIS2_JS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8009512:	b590      	push	{r4, r7, lr}
 8009514:	b085      	sub	sp, #20
 8009516:	af00      	add	r7, sp, #0
 8009518:	60f8      	str	r0, [r7, #12]
 800951a:	60b9      	str	r1, [r7, #8]
 800951c:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f7ff f92b 	bl	800877a <_ZSt7forwardIN4tama4ToneEEOT_RNSt16remove_referenceIS2_E4typeE>
 8009524:	4604      	mov	r4, r0
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	4619      	mov	r1, r3
 800952a:	2008      	movs	r0, #8
 800952c:	f7f6 ffff 	bl	800052e <_ZnwjPv>
 8009530:	4603      	mov	r3, r0
 8009532:	2b00      	cmp	r3, #0
 8009534:	d004      	beq.n	8009540 <_ZN9__gnu_cxx13new_allocatorIN4tama4ToneEE9constructIS2_JS2_EEEvPT_DpOT0_+0x2e>
 8009536:	4622      	mov	r2, r4
 8009538:	e892 0003 	ldmia.w	r2, {r0, r1}
 800953c:	e883 0003 	stmia.w	r3, {r0, r1}
 8009540:	bf00      	nop
 8009542:	3714      	adds	r7, #20
 8009544:	46bd      	mov	sp, r7
 8009546:	bd90      	pop	{r4, r7, pc}

08009548 <_ZN9__gnu_cxx17__normal_iteratorIPN4tama4ToneESt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8009548:	b480      	push	{r7}
 800954a:	b083      	sub	sp, #12
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
 8009550:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	681a      	ldr	r2, [r3, #0]
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	601a      	str	r2, [r3, #0]
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	4618      	mov	r0, r3
 800955e:	370c      	adds	r7, #12
 8009560:	46bd      	mov	sp, r7
 8009562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009566:	4770      	bx	lr

08009568 <_ZNKSt6vectorIN4tama4ToneESaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8009568:	b590      	push	{r4, r7, lr}
 800956a:	b087      	sub	sp, #28
 800956c:	af00      	add	r7, sp, #0
 800956e:	60f8      	str	r0, [r7, #12]
 8009570:	60b9      	str	r1, [r7, #8]
 8009572:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8009574:	68f8      	ldr	r0, [r7, #12]
 8009576:	f000 ff9d 	bl	800a4b4 <_ZNKSt6vectorIN4tama4ToneESaIS1_EE8max_sizeEv>
 800957a:	4604      	mov	r4, r0
 800957c:	68f8      	ldr	r0, [r7, #12]
 800957e:	f7f9 fc52 	bl	8002e26 <_ZNKSt6vectorIN4tama4ToneESaIS1_EE4sizeEv>
 8009582:	4603      	mov	r3, r0
 8009584:	1ae2      	subs	r2, r4, r3
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	429a      	cmp	r2, r3
 800958a:	bf34      	ite	cc
 800958c:	2301      	movcc	r3, #1
 800958e:	2300      	movcs	r3, #0
 8009590:	b2db      	uxtb	r3, r3
 8009592:	2b00      	cmp	r3, #0
 8009594:	d003      	beq.n	800959e <_ZNKSt6vectorIN4tama4ToneESaIS1_EE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	4618      	mov	r0, r3
 800959a:	f00c fd43 	bl	8016024 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + std::max(size(), __n);
 800959e:	68f8      	ldr	r0, [r7, #12]
 80095a0:	f7f9 fc41 	bl	8002e26 <_ZNKSt6vectorIN4tama4ToneESaIS1_EE4sizeEv>
 80095a4:	4604      	mov	r4, r0
 80095a6:	68f8      	ldr	r0, [r7, #12]
 80095a8:	f7f9 fc3d 	bl	8002e26 <_ZNKSt6vectorIN4tama4ToneESaIS1_EE4sizeEv>
 80095ac:	4603      	mov	r3, r0
 80095ae:	613b      	str	r3, [r7, #16]
 80095b0:	f107 0208 	add.w	r2, r7, #8
 80095b4:	f107 0310 	add.w	r3, r7, #16
 80095b8:	4611      	mov	r1, r2
 80095ba:	4618      	mov	r0, r3
 80095bc:	f7f7 fa6d 	bl	8000a9a <_ZSt3maxIjERKT_S2_S2_>
 80095c0:	4603      	mov	r3, r0
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	4423      	add	r3, r4
 80095c6:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80095c8:	68f8      	ldr	r0, [r7, #12]
 80095ca:	f7f9 fc2c 	bl	8002e26 <_ZNKSt6vectorIN4tama4ToneESaIS1_EE4sizeEv>
 80095ce:	4602      	mov	r2, r0
 80095d0:	697b      	ldr	r3, [r7, #20]
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d306      	bcc.n	80095e4 <_ZNKSt6vectorIN4tama4ToneESaIS1_EE12_M_check_lenEjPKc+0x7c>
 80095d6:	68f8      	ldr	r0, [r7, #12]
 80095d8:	f000 ff6c 	bl	800a4b4 <_ZNKSt6vectorIN4tama4ToneESaIS1_EE8max_sizeEv>
 80095dc:	4602      	mov	r2, r0
 80095de:	697b      	ldr	r3, [r7, #20]
 80095e0:	4293      	cmp	r3, r2
 80095e2:	d904      	bls.n	80095ee <_ZNKSt6vectorIN4tama4ToneESaIS1_EE12_M_check_lenEjPKc+0x86>
 80095e4:	68f8      	ldr	r0, [r7, #12]
 80095e6:	f000 ff65 	bl	800a4b4 <_ZNKSt6vectorIN4tama4ToneESaIS1_EE8max_sizeEv>
 80095ea:	4603      	mov	r3, r0
 80095ec:	e000      	b.n	80095f0 <_ZNKSt6vectorIN4tama4ToneESaIS1_EE12_M_check_lenEjPKc+0x88>
 80095ee:	697b      	ldr	r3, [r7, #20]
      }
 80095f0:	4618      	mov	r0, r3
 80095f2:	371c      	adds	r7, #28
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd90      	pop	{r4, r7, pc}

080095f8 <_ZNSt6vectorIN4tama4ToneESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b084      	sub	sp, #16
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8009600:	687a      	ldr	r2, [r7, #4]
 8009602:	f107 030c 	add.w	r3, r7, #12
 8009606:	4611      	mov	r1, r2
 8009608:	4618      	mov	r0, r3
 800960a:	f7ff ff9d 	bl	8009548 <_ZN9__gnu_cxx17__normal_iteratorIPN4tama4ToneESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	4618      	mov	r0, r3
 8009612:	3710      	adds	r7, #16
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}

08009618 <_ZN9__gnu_cxxmiIPN4tama4ToneESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8009618:	b590      	push	{r4, r7, lr}
 800961a:	b083      	sub	sp, #12
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
 8009620:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f000 f822 	bl	800966c <_ZNK9__gnu_cxx17__normal_iteratorIPN4tama4ToneESt6vectorIS2_SaIS2_EEE4baseEv>
 8009628:	4603      	mov	r3, r0
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	461c      	mov	r4, r3
 800962e:	6838      	ldr	r0, [r7, #0]
 8009630:	f000 f81c 	bl	800966c <_ZNK9__gnu_cxx17__normal_iteratorIPN4tama4ToneESt6vectorIS2_SaIS2_EEE4baseEv>
 8009634:	4603      	mov	r3, r0
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	1ae3      	subs	r3, r4, r3
 800963a:	10db      	asrs	r3, r3, #3
 800963c:	4618      	mov	r0, r3
 800963e:	370c      	adds	r7, #12
 8009640:	46bd      	mov	sp, r7
 8009642:	bd90      	pop	{r4, r7, pc}

08009644 <_ZNSt12_Vector_baseIN4tama4ToneESaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8009644:	b580      	push	{r7, lr}
 8009646:	b082      	sub	sp, #8
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
 800964c:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d006      	beq.n	8009662 <_ZNSt12_Vector_baseIN4tama4ToneESaIS1_EE11_M_allocateEj+0x1e>
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6839      	ldr	r1, [r7, #0]
 8009658:	4618      	mov	r0, r3
 800965a:	f000 ff3c 	bl	800a4d6 <_ZNSt16allocator_traitsISaIN4tama4ToneEEE8allocateERS2_j>
 800965e:	4603      	mov	r3, r0
 8009660:	e000      	b.n	8009664 <_ZNSt12_Vector_baseIN4tama4ToneESaIS1_EE11_M_allocateEj+0x20>
 8009662:	2300      	movs	r3, #0
      }
 8009664:	4618      	mov	r0, r3
 8009666:	3708      	adds	r7, #8
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}

0800966c <_ZNK9__gnu_cxx17__normal_iteratorIPN4tama4ToneESt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800966c:	b480      	push	{r7}
 800966e:	b083      	sub	sp, #12
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	4618      	mov	r0, r3
 8009678:	370c      	adds	r7, #12
 800967a:	46bd      	mov	sp, r7
 800967c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009680:	4770      	bx	lr

08009682 <_ZSt34__uninitialized_move_if_noexcept_aIPN4tama4ToneES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8009682:	b590      	push	{r4, r7, lr}
 8009684:	b085      	sub	sp, #20
 8009686:	af00      	add	r7, sp, #0
 8009688:	60f8      	str	r0, [r7, #12]
 800968a:	60b9      	str	r1, [r7, #8]
 800968c:	607a      	str	r2, [r7, #4]
 800968e:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8009690:	68f8      	ldr	r0, [r7, #12]
 8009692:	f000 ff2f 	bl	800a4f4 <_ZSt32__make_move_if_noexcept_iteratorIN4tama4ToneESt13move_iteratorIPS1_EET0_PT_>
 8009696:	4604      	mov	r4, r0
 8009698:	68b8      	ldr	r0, [r7, #8]
 800969a:	f000 ff2b 	bl	800a4f4 <_ZSt32__make_move_if_noexcept_iteratorIN4tama4ToneESt13move_iteratorIPS1_EET0_PT_>
 800969e:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	687a      	ldr	r2, [r7, #4]
 80096a4:	4620      	mov	r0, r4
 80096a6:	f000 ff34 	bl	800a512 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN4tama4ToneEES3_S2_ET0_T_S6_S5_RSaIT1_E>
 80096aa:	4603      	mov	r3, r0
    }
 80096ac:	4618      	mov	r0, r3
 80096ae:	3714      	adds	r7, #20
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd90      	pop	{r4, r7, pc}

080096b4 <_ZNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>:
        struct _Deleter
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b082      	sub	sp, #8
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	4618      	mov	r0, r3
 80096c0:	f7ff f8a1 	bl	8008806 <_ZNSaIN4tama7ContextEED1Ev>
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	4618      	mov	r0, r3
 80096c8:	3708      	adds	r7, #8
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}

080096ce <_ZNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>:
 80096ce:	b580      	push	{r7, lr}
 80096d0:	b082      	sub	sp, #8
 80096d2:	af00      	add	r7, sp, #0
 80096d4:	6078      	str	r0, [r7, #4]
 80096d6:	6039      	str	r1, [r7, #0]
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	683a      	ldr	r2, [r7, #0]
 80096dc:	4611      	mov	r1, r2
 80096de:	4618      	mov	r0, r3
 80096e0:	f000 ff28 	bl	800a534 <_ZNSaIN4tama7ContextEEC1ERKS1_>
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	4618      	mov	r0, r3
 80096e8:	3708      	adds	r7, #8
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}

080096ee <_ZNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJRSt10shared_ptrINS0_13TextureLoaderEERS7_INS0_5InputEEEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 80096ee:	b590      	push	{r4, r7, lr}
 80096f0:	b08d      	sub	sp, #52	; 0x34
 80096f2:	af00      	add	r7, sp, #0
 80096f4:	60f8      	str	r0, [r7, #12]
 80096f6:	7239      	strb	r1, [r7, #8]
 80096f8:	607a      	str	r2, [r7, #4]
 80096fa:	603b      	str	r3, [r7, #0]
	: _M_ptr(), _M_refcount()
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	2200      	movs	r2, #0
 8009700:	601a      	str	r2, [r3, #0]
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	3304      	adds	r3, #4
 8009706:	4618      	mov	r0, r3
 8009708:	f7f7 fbaf 	bl	8000e6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 800970c:	f107 0320 	add.w	r3, r7, #32
 8009710:	6879      	ldr	r1, [r7, #4]
 8009712:	4618      	mov	r0, r3
 8009714:	f000 ff0e 	bl	800a534 <_ZNSaIN4tama7ContextEEC1ERKS1_>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 8009718:	f107 0318 	add.w	r3, r7, #24
 800971c:	f107 0220 	add.w	r2, r7, #32
 8009720:	4611      	mov	r1, r2
 8009722:	4618      	mov	r0, r3
 8009724:	f000 ff14 	bl	800a550 <_ZSt18__allocate_guardedISaIN4tama7ContextEEESt15__allocated_ptrIT_ERS4_>
	  auto __ptr = __guard.get();
 8009728:	f107 0318 	add.w	r3, r7, #24
 800972c:	4618      	mov	r0, r3
 800972e:	f000 ff37 	bl	800a5a0 <_ZNSt15__allocated_ptrISaIN4tama7ContextEEE3getEv>
 8009732:	62f8      	str	r0, [r7, #44]	; 0x2c
	  __traits::construct(__del._M_alloc, __ptr,
 8009734:	6838      	ldr	r0, [r7, #0]
 8009736:	f7fe fdf0 	bl	800831a <_ZSt7forwardIRSt10shared_ptrIN4tama13TextureLoaderEEEOT_RNSt16remove_referenceIS5_E4typeE>
 800973a:	4604      	mov	r4, r0
 800973c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800973e:	f7fe fdf7 	bl	8008330 <_ZSt7forwardIRSt10shared_ptrIN4tama5InputEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8009742:	4603      	mov	r3, r0
 8009744:	f107 0020 	add.w	r0, r7, #32
 8009748:	4622      	mov	r2, r4
 800974a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800974c:	f000 ff36 	bl	800a5bc <_ZNSt16allocator_traitsISaIN4tama7ContextEEE9constructIS1_JRSt10shared_ptrINS0_13TextureLoaderEERS5_INS0_5InputEEEEEvRS2_PT_DpOT0_>
	  __guard = nullptr;
 8009750:	f107 0318 	add.w	r3, r7, #24
 8009754:	2100      	movs	r1, #0
 8009756:	4618      	mov	r0, r3
 8009758:	f000 ff48 	bl	800a5ec <_ZNSt15__allocated_ptrISaIN4tama7ContextEEEaSEDn>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 800975c:	f107 0220 	add.w	r2, r7, #32
 8009760:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009764:	4611      	mov	r1, r2
 8009766:	4618      	mov	r0, r3
 8009768:	f7ff ffb1 	bl	80096ce <_ZNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>
 800976c:	f107 0220 	add.w	r2, r7, #32
 8009770:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009774:	4611      	mov	r1, r2
 8009776:	4618      	mov	r0, r3
 8009778:	f000 fedc 	bl	800a534 <_ZNSaIN4tama7ContextEEC1ERKS1_>
 800977c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009780:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8009784:	f107 0014 	add.w	r0, r7, #20
 8009788:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800978a:	f000 ff64 	bl	800a656 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama7ContextENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
 800978e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009792:	4618      	mov	r0, r3
 8009794:	f7ff f837 	bl	8008806 <_ZNSaIN4tama7ContextEED1Ev>
 8009798:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800979c:	4618      	mov	r0, r3
 800979e:	f7ff ff89 	bl	80096b4 <_ZNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	  _M_refcount._M_swap(__count);
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	3304      	adds	r3, #4
 80097a6:	f107 0214 	add.w	r2, r7, #20
 80097aa:	4611      	mov	r1, r2
 80097ac:	4618      	mov	r0, r3
 80097ae:	f7f7 fb6a 	bl	8000e86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  _M_ptr = __ptr;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80097b6:	601a      	str	r2, [r3, #0]
	  _M_enable_shared_from_this_with(_M_ptr);
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	4619      	mov	r1, r3
 80097be:	68f8      	ldr	r0, [r7, #12]
 80097c0:	f000 ffa0 	bl	800a704 <_ZNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 80097c4:	f107 0314 	add.w	r3, r7, #20
 80097c8:	4618      	mov	r0, r3
 80097ca:	f7f7 f932 	bl	8000a32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 80097ce:	f107 0318 	add.w	r3, r7, #24
 80097d2:	4618      	mov	r0, r3
 80097d4:	f000 fecf 	bl	800a576 <_ZNSt15__allocated_ptrISaIN4tama7ContextEEED1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 80097d8:	f107 0320 	add.w	r3, r7, #32
 80097dc:	4618      	mov	r0, r3
 80097de:	f7ff ff69 	bl	80096b4 <_ZNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	}
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	4618      	mov	r0, r3
 80097e6:	3734      	adds	r7, #52	; 0x34
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd90      	pop	{r4, r7, pc}

080097ec <_ZNSaIN4tama16Nokia5510DisplayEEC1ERKS1_>:
      allocator(const allocator& __a) throw()
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b082      	sub	sp, #8
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
 80097f4:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80097f6:	6839      	ldr	r1, [r7, #0]
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f000 ff8e 	bl	800a71a <_ZN9__gnu_cxx13new_allocatorIN4tama16Nokia5510DisplayEEC1ERKS3_>
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	4618      	mov	r0, r3
 8009802:	3708      	adds	r7, #8
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}

08009808 <_ZSt18__allocate_guardedISaIN4tama16Nokia5510DisplayEEESt15__allocated_ptrIT_ERS4_>:
    __allocate_guarded(_Alloc& __a)
 8009808:	b580      	push	{r7, lr}
 800980a:	b082      	sub	sp, #8
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
 8009810:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 8009812:	2101      	movs	r1, #1
 8009814:	6838      	ldr	r0, [r7, #0]
 8009816:	f000 ff8c 	bl	800a732 <_ZNSt16allocator_traitsISaIN4tama16Nokia5510DisplayEEE8allocateERS2_j>
 800981a:	4603      	mov	r3, r0
 800981c:	461a      	mov	r2, r3
 800981e:	6839      	ldr	r1, [r7, #0]
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f000 ff95 	bl	800a750 <_ZNSt15__allocated_ptrISaIN4tama16Nokia5510DisplayEEEC1ERS2_PS1_>
    }
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	3708      	adds	r7, #8
 800982a:	46bd      	mov	sp, r7
 800982c:	bd80      	pop	{r7, pc}

0800982e <_ZNSt15__allocated_ptrISaIN4tama16Nokia5510DisplayEEED1Ev>:
      ~__allocated_ptr()
 800982e:	b580      	push	{r7, lr}
 8009830:	b082      	sub	sp, #8
 8009832:	af00      	add	r7, sp, #0
 8009834:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	685b      	ldr	r3, [r3, #4]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d007      	beq.n	800984e <_ZNSt15__allocated_ptrISaIN4tama16Nokia5510DisplayEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6818      	ldr	r0, [r3, #0]
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	685b      	ldr	r3, [r3, #4]
 8009846:	2201      	movs	r2, #1
 8009848:	4619      	mov	r1, r3
 800984a:	f000 ff95 	bl	800a778 <_ZNSt16allocator_traitsISaIN4tama16Nokia5510DisplayEEE10deallocateERS2_PS1_j>
      }
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	4618      	mov	r0, r3
 8009852:	3708      	adds	r7, #8
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}

08009858 <_ZNSt15__allocated_ptrISaIN4tama16Nokia5510DisplayEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 8009858:	b580      	push	{r7, lr}
 800985a:	b082      	sub	sp, #8
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	685b      	ldr	r3, [r3, #4]
 8009864:	4618      	mov	r0, r3
 8009866:	f000 ff96 	bl	800a796 <_ZNSt15__allocated_ptrISaIN4tama16Nokia5510DisplayEEE10_S_raw_ptrEPS1_>
 800986a:	4603      	mov	r3, r0
 800986c:	4618      	mov	r0, r3
 800986e:	3708      	adds	r7, #8
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}

08009874 <_ZNSt16allocator_traitsISaIN4tama16Nokia5510DisplayEEE9constructIS1_JRNS0_13DisplayConfigEEEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8009874:	b580      	push	{r7, lr}
 8009876:	b084      	sub	sp, #16
 8009878:	af00      	add	r7, sp, #0
 800987a:	60f8      	str	r0, [r7, #12]
 800987c:	60b9      	str	r1, [r7, #8]
 800987e:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	f7fe fba1 	bl	8007fc8 <_ZSt7forwardIRN4tama13DisplayConfigEEOT_RNSt16remove_referenceIS3_E4typeE>
 8009886:	4603      	mov	r3, r0
 8009888:	461a      	mov	r2, r3
 800988a:	68b9      	ldr	r1, [r7, #8]
 800988c:	68f8      	ldr	r0, [r7, #12]
 800988e:	f000 ff8d 	bl	800a7ac <_ZN9__gnu_cxx13new_allocatorIN4tama16Nokia5510DisplayEE9constructIS2_JRNS1_13DisplayConfigEEEEvPT_DpOT0_>
 8009892:	bf00      	nop
 8009894:	3710      	adds	r7, #16
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}

0800989a <_ZNSt15__allocated_ptrISaIN4tama16Nokia5510DisplayEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 800989a:	b480      	push	{r7}
 800989c:	b083      	sub	sp, #12
 800989e:	af00      	add	r7, sp, #0
 80098a0:	6078      	str	r0, [r7, #4]
 80098a2:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2200      	movs	r2, #0
 80098a8:	605a      	str	r2, [r3, #4]
	return *this;
 80098aa:	687b      	ldr	r3, [r7, #4]
      }
 80098ac:	4618      	mov	r0, r3
 80098ae:	370c      	adds	r7, #12
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr

080098b8 <_ZSt4moveIRNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 80098b8:	b480      	push	{r7}
 80098ba:	b083      	sub	sp, #12
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	4618      	mov	r0, r3
 80098c4:	370c      	adds	r7, #12
 80098c6:	46bd      	mov	sp, r7
 80098c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098cc:	4770      	bx	lr

080098ce <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>:
        struct _Deleter
 80098ce:	b580      	push	{r7, lr}
 80098d0:	b082      	sub	sp, #8
 80098d2:	af00      	add	r7, sp, #0
 80098d4:	6078      	str	r0, [r7, #4]
 80098d6:	6039      	str	r1, [r7, #0]
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	683a      	ldr	r2, [r7, #0]
 80098dc:	4611      	mov	r1, r2
 80098de:	4618      	mov	r0, r3
 80098e0:	f7ff ff84 	bl	80097ec <_ZNSaIN4tama16Nokia5510DisplayEEC1ERKS1_>
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	4618      	mov	r0, r3
 80098e8:	3708      	adds	r7, #8
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd80      	pop	{r7, pc}

080098ee <_ZSt4moveIRSaIN4tama16Nokia5510DisplayEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80098ee:	b480      	push	{r7}
 80098f0:	b083      	sub	sp, #12
 80098f2:	af00      	add	r7, sp, #0
 80098f4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	4618      	mov	r0, r3
 80098fa:	370c      	adds	r7, #12
 80098fc:	46bd      	mov	sp, r7
 80098fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009902:	4770      	bx	lr

08009904 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama16Nokia5510DisplayENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
 8009904:	b5b0      	push	{r4, r5, r7, lr}
 8009906:	b08a      	sub	sp, #40	; 0x28
 8009908:	af00      	add	r7, sp, #0
 800990a:	60f8      	str	r0, [r7, #12]
 800990c:	60b9      	str	r1, [r7, #8]
 800990e:	607a      	str	r2, [r7, #4]
 8009910:	603b      	str	r3, [r7, #0]
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	2200      	movs	r2, #0
 8009916:	601a      	str	r2, [r3, #0]
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 8009918:	f107 031c 	add.w	r3, r7, #28
 800991c:	6839      	ldr	r1, [r7, #0]
 800991e:	4618      	mov	r0, r3
 8009920:	f000 ff5e 	bl	800a7e0 <_ZNSaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	      auto __guard = std::__allocate_guarded(__a2);
 8009924:	f107 0314 	add.w	r3, r7, #20
 8009928:	f107 021c 	add.w	r2, r7, #28
 800992c:	4611      	mov	r1, r2
 800992e:	4618      	mov	r0, r3
 8009930:	f000 ff6f 	bl	800a812 <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>
	      _Sp_cd_type* __mem = __guard.get();
 8009934:	f107 0314 	add.w	r3, r7, #20
 8009938:	4618      	mov	r0, r3
 800993a:	f000 ff92 	bl	800a862 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>
 800993e:	6278      	str	r0, [r7, #36]	; 0x24
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f7ff ffb9 	bl	80098b8 <_ZSt4moveIRNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8009946:	4602      	mov	r2, r0
 8009948:	f107 0320 	add.w	r3, r7, #32
 800994c:	4611      	mov	r1, r2
 800994e:	4618      	mov	r0, r3
 8009950:	f7ff ffbd 	bl	80098ce <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 8009954:	f107 0420 	add.w	r4, r7, #32
 8009958:	6838      	ldr	r0, [r7, #0]
 800995a:	f7ff ffc8 	bl	80098ee <_ZSt4moveIRSaIN4tama16Nokia5510DisplayEEEONSt16remove_referenceIT_E4typeEOS5_>
 800995e:	4605      	mov	r5, r0
 8009960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009962:	4619      	mov	r1, r3
 8009964:	2014      	movs	r0, #20
 8009966:	f7f6 fde2 	bl	800052e <_ZnwjPv>
 800996a:	2800      	cmp	r0, #0
 800996c:	d004      	beq.n	8009978 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama16Nokia5510DisplayENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x74>
 800996e:	462b      	mov	r3, r5
 8009970:	4622      	mov	r2, r4
 8009972:	68b9      	ldr	r1, [r7, #8]
 8009974:	f000 ffae 	bl	800a8d4 <_ZNSt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>
 8009978:	f107 0320 	add.w	r3, r7, #32
 800997c:	4618      	mov	r0, r3
 800997e:	f7ff f9b9 	bl	8008cf4 <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	      _M_pi = __mem;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009986:	601a      	str	r2, [r3, #0]
	      __guard = nullptr;
 8009988:	f107 0314 	add.w	r3, r7, #20
 800998c:	2100      	movs	r1, #0
 800998e:	4618      	mov	r0, r3
 8009990:	f000 ffce 	bl	800a930 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>
	      auto __guard = std::__allocate_guarded(__a2);
 8009994:	f107 0314 	add.w	r3, r7, #20
 8009998:	4618      	mov	r0, r3
 800999a:	f000 ff4d 	bl	800a838 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 800999e:	f107 031c 	add.w	r3, r7, #28
 80099a2:	4618      	mov	r0, r3
 80099a4:	f000 ff29 	bl	800a7fa <_ZNSaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
	}
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	4618      	mov	r0, r3
 80099ac:	3728      	adds	r7, #40	; 0x28
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bdb0      	pop	{r4, r5, r7, pc}

080099b2 <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 80099b2:	b480      	push	{r7}
 80099b4:	b083      	sub	sp, #12
 80099b6:	af00      	add	r7, sp, #0
 80099b8:	6078      	str	r0, [r7, #4]
 80099ba:	6039      	str	r1, [r7, #0]
	{ }
 80099bc:	bf00      	nop
 80099be:	370c      	adds	r7, #12
 80099c0:	46bd      	mov	sp, r7
 80099c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c6:	4770      	bx	lr

080099c8 <_ZNSaIN4tama18Stm32TextureLoaderEEC1ERKS1_>:
      allocator(const allocator& __a) throw()
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b082      	sub	sp, #8
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
 80099d0:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80099d2:	6839      	ldr	r1, [r7, #0]
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f000 ffda 	bl	800a98e <_ZN9__gnu_cxx13new_allocatorIN4tama18Stm32TextureLoaderEEC1ERKS3_>
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	4618      	mov	r0, r3
 80099de:	3708      	adds	r7, #8
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}

080099e4 <_ZSt18__allocate_guardedISaIN4tama18Stm32TextureLoaderEEESt15__allocated_ptrIT_ERS4_>:
    __allocate_guarded(_Alloc& __a)
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b082      	sub	sp, #8
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
 80099ec:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 80099ee:	2101      	movs	r1, #1
 80099f0:	6838      	ldr	r0, [r7, #0]
 80099f2:	f000 ffd8 	bl	800a9a6 <_ZNSt16allocator_traitsISaIN4tama18Stm32TextureLoaderEEE8allocateERS2_j>
 80099f6:	4603      	mov	r3, r0
 80099f8:	461a      	mov	r2, r3
 80099fa:	6839      	ldr	r1, [r7, #0]
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f000 ffe1 	bl	800a9c4 <_ZNSt15__allocated_ptrISaIN4tama18Stm32TextureLoaderEEEC1ERS2_PS1_>
    }
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	3708      	adds	r7, #8
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}

08009a0a <_ZNSt15__allocated_ptrISaIN4tama18Stm32TextureLoaderEEED1Ev>:
      ~__allocated_ptr()
 8009a0a:	b580      	push	{r7, lr}
 8009a0c:	b082      	sub	sp, #8
 8009a0e:	af00      	add	r7, sp, #0
 8009a10:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	685b      	ldr	r3, [r3, #4]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d007      	beq.n	8009a2a <_ZNSt15__allocated_ptrISaIN4tama18Stm32TextureLoaderEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	6818      	ldr	r0, [r3, #0]
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	685b      	ldr	r3, [r3, #4]
 8009a22:	2201      	movs	r2, #1
 8009a24:	4619      	mov	r1, r3
 8009a26:	f000 ffe1 	bl	800a9ec <_ZNSt16allocator_traitsISaIN4tama18Stm32TextureLoaderEEE10deallocateERS2_PS1_j>
      }
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3708      	adds	r7, #8
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}

08009a34 <_ZNSt15__allocated_ptrISaIN4tama18Stm32TextureLoaderEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b082      	sub	sp, #8
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	685b      	ldr	r3, [r3, #4]
 8009a40:	4618      	mov	r0, r3
 8009a42:	f000 ffe2 	bl	800aa0a <_ZNSt15__allocated_ptrISaIN4tama18Stm32TextureLoaderEEE10_S_raw_ptrEPS1_>
 8009a46:	4603      	mov	r3, r0
 8009a48:	4618      	mov	r0, r3
 8009a4a:	3708      	adds	r7, #8
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	bd80      	pop	{r7, pc}

08009a50 <_ZNSt16allocator_traitsISaIN4tama18Stm32TextureLoaderEEE9constructIS1_JEEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b082      	sub	sp, #8
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
 8009a58:	6039      	str	r1, [r7, #0]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8009a5a:	6839      	ldr	r1, [r7, #0]
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f000 ffdf 	bl	800aa20 <_ZN9__gnu_cxx13new_allocatorIN4tama18Stm32TextureLoaderEE9constructIS2_JEEEvPT_DpOT0_>
 8009a62:	bf00      	nop
 8009a64:	3708      	adds	r7, #8
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}

08009a6a <_ZNSt15__allocated_ptrISaIN4tama18Stm32TextureLoaderEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 8009a6a:	b480      	push	{r7}
 8009a6c:	b083      	sub	sp, #12
 8009a6e:	af00      	add	r7, sp, #0
 8009a70:	6078      	str	r0, [r7, #4]
 8009a72:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2200      	movs	r2, #0
 8009a78:	605a      	str	r2, [r3, #4]
	return *this;
 8009a7a:	687b      	ldr	r3, [r7, #4]
      }
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	370c      	adds	r7, #12
 8009a80:	46bd      	mov	sp, r7
 8009a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a86:	4770      	bx	lr

08009a88 <_ZSt4moveIRNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 8009a88:	b480      	push	{r7}
 8009a8a:	b083      	sub	sp, #12
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	4618      	mov	r0, r3
 8009a94:	370c      	adds	r7, #12
 8009a96:	46bd      	mov	sp, r7
 8009a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9c:	4770      	bx	lr

08009a9e <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>:
        struct _Deleter
 8009a9e:	b580      	push	{r7, lr}
 8009aa0:	b082      	sub	sp, #8
 8009aa2:	af00      	add	r7, sp, #0
 8009aa4:	6078      	str	r0, [r7, #4]
 8009aa6:	6039      	str	r1, [r7, #0]
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	683a      	ldr	r2, [r7, #0]
 8009aac:	4611      	mov	r1, r2
 8009aae:	4618      	mov	r0, r3
 8009ab0:	f7ff ff8a 	bl	80099c8 <_ZNSaIN4tama18Stm32TextureLoaderEEC1ERKS1_>
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	3708      	adds	r7, #8
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}

08009abe <_ZSt4moveIRSaIN4tama18Stm32TextureLoaderEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8009abe:	b480      	push	{r7}
 8009ac0:	b083      	sub	sp, #12
 8009ac2:	af00      	add	r7, sp, #0
 8009ac4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	4618      	mov	r0, r3
 8009aca:	370c      	adds	r7, #12
 8009acc:	46bd      	mov	sp, r7
 8009ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad2:	4770      	bx	lr

08009ad4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
 8009ad4:	b5b0      	push	{r4, r5, r7, lr}
 8009ad6:	b08a      	sub	sp, #40	; 0x28
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	60f8      	str	r0, [r7, #12]
 8009adc:	60b9      	str	r1, [r7, #8]
 8009ade:	607a      	str	r2, [r7, #4]
 8009ae0:	603b      	str	r3, [r7, #0]
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	601a      	str	r2, [r3, #0]
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 8009ae8:	f107 031c 	add.w	r3, r7, #28
 8009aec:	6839      	ldr	r1, [r7, #0]
 8009aee:	4618      	mov	r0, r3
 8009af0:	f000 ffac 	bl	800aa4c <_ZNSaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	      auto __guard = std::__allocate_guarded(__a2);
 8009af4:	f107 0314 	add.w	r3, r7, #20
 8009af8:	f107 021c 	add.w	r2, r7, #28
 8009afc:	4611      	mov	r1, r2
 8009afe:	4618      	mov	r0, r3
 8009b00:	f000 ffbd 	bl	800aa7e <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>
	      _Sp_cd_type* __mem = __guard.get();
 8009b04:	f107 0314 	add.w	r3, r7, #20
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f000 ffe0 	bl	800aace <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>
 8009b0e:	6278      	str	r0, [r7, #36]	; 0x24
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	f7ff ffb9 	bl	8009a88 <_ZSt4moveIRNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8009b16:	4602      	mov	r2, r0
 8009b18:	f107 0320 	add.w	r3, r7, #32
 8009b1c:	4611      	mov	r1, r2
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f7ff ffbd 	bl	8009a9e <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 8009b24:	f107 0420 	add.w	r4, r7, #32
 8009b28:	6838      	ldr	r0, [r7, #0]
 8009b2a:	f7ff ffc8 	bl	8009abe <_ZSt4moveIRSaIN4tama18Stm32TextureLoaderEEEONSt16remove_referenceIT_E4typeEOS5_>
 8009b2e:	4605      	mov	r5, r0
 8009b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b32:	4619      	mov	r1, r3
 8009b34:	2014      	movs	r0, #20
 8009b36:	f7f6 fcfa 	bl	800052e <_ZnwjPv>
 8009b3a:	2800      	cmp	r0, #0
 8009b3c:	d004      	beq.n	8009b48 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x74>
 8009b3e:	462b      	mov	r3, r5
 8009b40:	4622      	mov	r2, r4
 8009b42:	68b9      	ldr	r1, [r7, #8]
 8009b44:	f000 fffc 	bl	800ab40 <_ZNSt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>
 8009b48:	f107 0320 	add.w	r3, r7, #32
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	f7ff f969 	bl	8008e24 <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	      _M_pi = __mem;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b56:	601a      	str	r2, [r3, #0]
	      __guard = nullptr;
 8009b58:	f107 0314 	add.w	r3, r7, #20
 8009b5c:	2100      	movs	r1, #0
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f001 f81c 	bl	800ab9c <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>
	      auto __guard = std::__allocate_guarded(__a2);
 8009b64:	f107 0314 	add.w	r3, r7, #20
 8009b68:	4618      	mov	r0, r3
 8009b6a:	f000 ff9b 	bl	800aaa4 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 8009b6e:	f107 031c 	add.w	r3, r7, #28
 8009b72:	4618      	mov	r0, r3
 8009b74:	f000 ff77 	bl	800aa66 <_ZNSaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
	}
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	3728      	adds	r7, #40	; 0x28
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bdb0      	pop	{r4, r5, r7, pc}

08009b82 <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 8009b82:	b480      	push	{r7}
 8009b84:	b083      	sub	sp, #12
 8009b86:	af00      	add	r7, sp, #0
 8009b88:	6078      	str	r0, [r7, #4]
 8009b8a:	6039      	str	r1, [r7, #0]
	{ }
 8009b8c:	bf00      	nop
 8009b8e:	370c      	adds	r7, #12
 8009b90:	46bd      	mov	sp, r7
 8009b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b96:	4770      	bx	lr

08009b98 <_ZNSaIN4tama27Nokia5110DisplayDataManagerEEC1ERKS1_>:
      allocator(const allocator& __a) throw()
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b082      	sub	sp, #8
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8009ba2:	6839      	ldr	r1, [r7, #0]
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f001 f828 	bl	800abfa <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEEC1ERKS3_>
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	4618      	mov	r0, r3
 8009bae:	3708      	adds	r7, #8
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bd80      	pop	{r7, pc}

08009bb4 <_ZSt18__allocate_guardedISaIN4tama27Nokia5110DisplayDataManagerEEESt15__allocated_ptrIT_ERS4_>:
    __allocate_guarded(_Alloc& __a)
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b082      	sub	sp, #8
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
 8009bbc:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 8009bbe:	2101      	movs	r1, #1
 8009bc0:	6838      	ldr	r0, [r7, #0]
 8009bc2:	f001 f826 	bl	800ac12 <_ZNSt16allocator_traitsISaIN4tama27Nokia5110DisplayDataManagerEEE8allocateERS2_j>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	461a      	mov	r2, r3
 8009bca:	6839      	ldr	r1, [r7, #0]
 8009bcc:	6878      	ldr	r0, [r7, #4]
 8009bce:	f001 f82f 	bl	800ac30 <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEEC1ERS2_PS1_>
    }
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	3708      	adds	r7, #8
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd80      	pop	{r7, pc}

08009bda <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEED1Ev>:
      ~__allocated_ptr()
 8009bda:	b580      	push	{r7, lr}
 8009bdc:	b082      	sub	sp, #8
 8009bde:	af00      	add	r7, sp, #0
 8009be0:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	685b      	ldr	r3, [r3, #4]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d007      	beq.n	8009bfa <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6818      	ldr	r0, [r3, #0]
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	685b      	ldr	r3, [r3, #4]
 8009bf2:	2201      	movs	r2, #1
 8009bf4:	4619      	mov	r1, r3
 8009bf6:	f001 f82f 	bl	800ac58 <_ZNSt16allocator_traitsISaIN4tama27Nokia5110DisplayDataManagerEEE10deallocateERS2_PS1_j>
      }
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	3708      	adds	r7, #8
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bd80      	pop	{r7, pc}

08009c04 <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b082      	sub	sp, #8
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	685b      	ldr	r3, [r3, #4]
 8009c10:	4618      	mov	r0, r3
 8009c12:	f001 f830 	bl	800ac76 <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEE10_S_raw_ptrEPS1_>
 8009c16:	4603      	mov	r3, r0
 8009c18:	4618      	mov	r0, r3
 8009c1a:	3708      	adds	r7, #8
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	bd80      	pop	{r7, pc}

08009c20 <_ZNSt16allocator_traitsISaIN4tama27Nokia5110DisplayDataManagerEEE9constructIS1_JEEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b082      	sub	sp, #8
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
 8009c28:	6039      	str	r1, [r7, #0]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8009c2a:	6839      	ldr	r1, [r7, #0]
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f001 f867 	bl	800ad00 <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEE9constructIS2_JEEEvPT_DpOT0_>
 8009c32:	bf00      	nop
 8009c34:	3708      	adds	r7, #8
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd80      	pop	{r7, pc}

08009c3a <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 8009c3a:	b480      	push	{r7}
 8009c3c:	b083      	sub	sp, #12
 8009c3e:	af00      	add	r7, sp, #0
 8009c40:	6078      	str	r0, [r7, #4]
 8009c42:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2200      	movs	r2, #0
 8009c48:	605a      	str	r2, [r3, #4]
	return *this;
 8009c4a:	687b      	ldr	r3, [r7, #4]
      }
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	370c      	adds	r7, #12
 8009c50:	46bd      	mov	sp, r7
 8009c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c56:	4770      	bx	lr

08009c58 <_ZSt4moveIRNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 8009c58:	b480      	push	{r7}
 8009c5a:	b083      	sub	sp, #12
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	4618      	mov	r0, r3
 8009c64:	370c      	adds	r7, #12
 8009c66:	46bd      	mov	sp, r7
 8009c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6c:	4770      	bx	lr

08009c6e <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>:
        struct _Deleter
 8009c6e:	b580      	push	{r7, lr}
 8009c70:	b082      	sub	sp, #8
 8009c72:	af00      	add	r7, sp, #0
 8009c74:	6078      	str	r0, [r7, #4]
 8009c76:	6039      	str	r1, [r7, #0]
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	683a      	ldr	r2, [r7, #0]
 8009c7c:	4611      	mov	r1, r2
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f7ff ff8a 	bl	8009b98 <_ZNSaIN4tama27Nokia5110DisplayDataManagerEEC1ERKS1_>
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	4618      	mov	r0, r3
 8009c88:	3708      	adds	r7, #8
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}

08009c8e <_ZSt4moveIRSaIN4tama27Nokia5110DisplayDataManagerEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8009c8e:	b480      	push	{r7}
 8009c90:	b083      	sub	sp, #12
 8009c92:	af00      	add	r7, sp, #0
 8009c94:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	4618      	mov	r0, r3
 8009c9a:	370c      	adds	r7, #12
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca2:	4770      	bx	lr

08009ca4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
 8009ca4:	b5b0      	push	{r4, r5, r7, lr}
 8009ca6:	b08a      	sub	sp, #40	; 0x28
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	60f8      	str	r0, [r7, #12]
 8009cac:	60b9      	str	r1, [r7, #8]
 8009cae:	607a      	str	r2, [r7, #4]
 8009cb0:	603b      	str	r3, [r7, #0]
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	601a      	str	r2, [r3, #0]
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 8009cb8:	f107 031c 	add.w	r3, r7, #28
 8009cbc:	6839      	ldr	r1, [r7, #0]
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f001 f83a 	bl	800ad38 <_ZNSaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	      auto __guard = std::__allocate_guarded(__a2);
 8009cc4:	f107 0314 	add.w	r3, r7, #20
 8009cc8:	f107 021c 	add.w	r2, r7, #28
 8009ccc:	4611      	mov	r1, r2
 8009cce:	4618      	mov	r0, r3
 8009cd0:	f001 f84b 	bl	800ad6a <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>
	      _Sp_cd_type* __mem = __guard.get();
 8009cd4:	f107 0314 	add.w	r3, r7, #20
 8009cd8:	4618      	mov	r0, r3
 8009cda:	f001 f86e 	bl	800adba <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>
 8009cde:	6278      	str	r0, [r7, #36]	; 0x24
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f7ff ffb9 	bl	8009c58 <_ZSt4moveIRNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8009ce6:	4602      	mov	r2, r0
 8009ce8:	f107 0320 	add.w	r3, r7, #32
 8009cec:	4611      	mov	r1, r2
 8009cee:	4618      	mov	r0, r3
 8009cf0:	f7ff ffbd 	bl	8009c6e <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 8009cf4:	f107 0420 	add.w	r4, r7, #32
 8009cf8:	6838      	ldr	r0, [r7, #0]
 8009cfa:	f7ff ffc8 	bl	8009c8e <_ZSt4moveIRSaIN4tama27Nokia5110DisplayDataManagerEEEONSt16remove_referenceIT_E4typeEOS5_>
 8009cfe:	4605      	mov	r5, r0
 8009d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d02:	4619      	mov	r1, r3
 8009d04:	2014      	movs	r0, #20
 8009d06:	f7f6 fc12 	bl	800052e <_ZnwjPv>
 8009d0a:	2800      	cmp	r0, #0
 8009d0c:	d004      	beq.n	8009d18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x74>
 8009d0e:	462b      	mov	r3, r5
 8009d10:	4622      	mov	r2, r4
 8009d12:	68b9      	ldr	r1, [r7, #8]
 8009d14:	f001 f88a 	bl	800ae2c <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>
 8009d18:	f107 0320 	add.w	r3, r7, #32
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	f7ff f914 	bl	8008f4a <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	      _M_pi = __mem;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d26:	601a      	str	r2, [r3, #0]
	      __guard = nullptr;
 8009d28:	f107 0314 	add.w	r3, r7, #20
 8009d2c:	2100      	movs	r1, #0
 8009d2e:	4618      	mov	r0, r3
 8009d30:	f001 f8aa 	bl	800ae88 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>
	      auto __guard = std::__allocate_guarded(__a2);
 8009d34:	f107 0314 	add.w	r3, r7, #20
 8009d38:	4618      	mov	r0, r3
 8009d3a:	f001 f829 	bl	800ad90 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 8009d3e:	f107 031c 	add.w	r3, r7, #28
 8009d42:	4618      	mov	r0, r3
 8009d44:	f001 f805 	bl	800ad52 <_ZNSaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
	}
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	3728      	adds	r7, #40	; 0x28
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bdb0      	pop	{r4, r5, r7, pc}

08009d52 <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 8009d52:	b480      	push	{r7}
 8009d54:	b083      	sub	sp, #12
 8009d56:	af00      	add	r7, sp, #0
 8009d58:	6078      	str	r0, [r7, #4]
 8009d5a:	6039      	str	r1, [r7, #0]
	{ }
 8009d5c:	bf00      	nop
 8009d5e:	370c      	adds	r7, #12
 8009d60:	46bd      	mov	sp, r7
 8009d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d66:	4770      	bx	lr

08009d68 <_ZNSaIN4tama16Stm32TimeMonitorEEC1ERKS1_>:
      allocator(const allocator& __a) throw()
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b082      	sub	sp, #8
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
 8009d70:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8009d72:	6839      	ldr	r1, [r7, #0]
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	f001 f8b6 	bl	800aee6 <_ZN9__gnu_cxx13new_allocatorIN4tama16Stm32TimeMonitorEEC1ERKS3_>
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	3708      	adds	r7, #8
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}

08009d84 <_ZSt18__allocate_guardedISaIN4tama16Stm32TimeMonitorEEESt15__allocated_ptrIT_ERS4_>:
    __allocate_guarded(_Alloc& __a)
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b082      	sub	sp, #8
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
 8009d8c:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 8009d8e:	2101      	movs	r1, #1
 8009d90:	6838      	ldr	r0, [r7, #0]
 8009d92:	f001 f8b4 	bl	800aefe <_ZNSt16allocator_traitsISaIN4tama16Stm32TimeMonitorEEE8allocateERS2_j>
 8009d96:	4603      	mov	r3, r0
 8009d98:	461a      	mov	r2, r3
 8009d9a:	6839      	ldr	r1, [r7, #0]
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	f001 f8bd 	bl	800af1c <_ZNSt15__allocated_ptrISaIN4tama16Stm32TimeMonitorEEEC1ERS2_PS1_>
    }
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	3708      	adds	r7, #8
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bd80      	pop	{r7, pc}

08009daa <_ZNSt15__allocated_ptrISaIN4tama16Stm32TimeMonitorEEED1Ev>:
      ~__allocated_ptr()
 8009daa:	b580      	push	{r7, lr}
 8009dac:	b082      	sub	sp, #8
 8009dae:	af00      	add	r7, sp, #0
 8009db0:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	685b      	ldr	r3, [r3, #4]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d007      	beq.n	8009dca <_ZNSt15__allocated_ptrISaIN4tama16Stm32TimeMonitorEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6818      	ldr	r0, [r3, #0]
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	685b      	ldr	r3, [r3, #4]
 8009dc2:	2201      	movs	r2, #1
 8009dc4:	4619      	mov	r1, r3
 8009dc6:	f001 f8bd 	bl	800af44 <_ZNSt16allocator_traitsISaIN4tama16Stm32TimeMonitorEEE10deallocateERS2_PS1_j>
      }
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	4618      	mov	r0, r3
 8009dce:	3708      	adds	r7, #8
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}

08009dd4 <_ZNSt15__allocated_ptrISaIN4tama16Stm32TimeMonitorEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b082      	sub	sp, #8
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	685b      	ldr	r3, [r3, #4]
 8009de0:	4618      	mov	r0, r3
 8009de2:	f001 f8be 	bl	800af62 <_ZNSt15__allocated_ptrISaIN4tama16Stm32TimeMonitorEEE10_S_raw_ptrEPS1_>
 8009de6:	4603      	mov	r3, r0
 8009de8:	4618      	mov	r0, r3
 8009dea:	3708      	adds	r7, #8
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bd80      	pop	{r7, pc}

08009df0 <_ZNSt16allocator_traitsISaIN4tama16Stm32TimeMonitorEEE9constructIS1_JEEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b082      	sub	sp, #8
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
 8009df8:	6039      	str	r1, [r7, #0]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8009dfa:	6839      	ldr	r1, [r7, #0]
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f001 f8dd 	bl	800afbc <_ZN9__gnu_cxx13new_allocatorIN4tama16Stm32TimeMonitorEE9constructIS2_JEEEvPT_DpOT0_>
 8009e02:	bf00      	nop
 8009e04:	3708      	adds	r7, #8
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bd80      	pop	{r7, pc}

08009e0a <_ZNSt15__allocated_ptrISaIN4tama16Stm32TimeMonitorEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 8009e0a:	b480      	push	{r7}
 8009e0c:	b083      	sub	sp, #12
 8009e0e:	af00      	add	r7, sp, #0
 8009e10:	6078      	str	r0, [r7, #4]
 8009e12:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2200      	movs	r2, #0
 8009e18:	605a      	str	r2, [r3, #4]
	return *this;
 8009e1a:	687b      	ldr	r3, [r7, #4]
      }
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	370c      	adds	r7, #12
 8009e20:	46bd      	mov	sp, r7
 8009e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e26:	4770      	bx	lr

08009e28 <_ZSt4moveIRNSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 8009e28:	b480      	push	{r7}
 8009e2a:	b083      	sub	sp, #12
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	4618      	mov	r0, r3
 8009e34:	370c      	adds	r7, #12
 8009e36:	46bd      	mov	sp, r7
 8009e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3c:	4770      	bx	lr

08009e3e <_ZNSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>:
        struct _Deleter
 8009e3e:	b580      	push	{r7, lr}
 8009e40:	b082      	sub	sp, #8
 8009e42:	af00      	add	r7, sp, #0
 8009e44:	6078      	str	r0, [r7, #4]
 8009e46:	6039      	str	r1, [r7, #0]
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	683a      	ldr	r2, [r7, #0]
 8009e4c:	4611      	mov	r1, r2
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f7ff ff8a 	bl	8009d68 <_ZNSaIN4tama16Stm32TimeMonitorEEC1ERKS1_>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	4618      	mov	r0, r3
 8009e58:	3708      	adds	r7, #8
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}

08009e5e <_ZSt4moveIRSaIN4tama16Stm32TimeMonitorEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8009e5e:	b480      	push	{r7}
 8009e60:	b083      	sub	sp, #12
 8009e62:	af00      	add	r7, sp, #0
 8009e64:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	4618      	mov	r0, r3
 8009e6a:	370c      	adds	r7, #12
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e72:	4770      	bx	lr

08009e74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
 8009e74:	b5b0      	push	{r4, r5, r7, lr}
 8009e76:	b08a      	sub	sp, #40	; 0x28
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	60f8      	str	r0, [r7, #12]
 8009e7c:	60b9      	str	r1, [r7, #8]
 8009e7e:	607a      	str	r2, [r7, #4]
 8009e80:	603b      	str	r3, [r7, #0]
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	2200      	movs	r2, #0
 8009e86:	601a      	str	r2, [r3, #0]
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 8009e88:	f107 031c 	add.w	r3, r7, #28
 8009e8c:	6839      	ldr	r1, [r7, #0]
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f001 f8ac 	bl	800afec <_ZNSaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	      auto __guard = std::__allocate_guarded(__a2);
 8009e94:	f107 0314 	add.w	r3, r7, #20
 8009e98:	f107 021c 	add.w	r2, r7, #28
 8009e9c:	4611      	mov	r1, r2
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	f001 f8bd 	bl	800b01e <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>
	      _Sp_cd_type* __mem = __guard.get();
 8009ea4:	f107 0314 	add.w	r3, r7, #20
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f001 f8e0 	bl	800b06e <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>
 8009eae:	6278      	str	r0, [r7, #36]	; 0x24
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	f7ff ffb9 	bl	8009e28 <_ZSt4moveIRNSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8009eb6:	4602      	mov	r2, r0
 8009eb8:	f107 0320 	add.w	r3, r7, #32
 8009ebc:	4611      	mov	r1, r2
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	f7ff ffbd 	bl	8009e3e <_ZNSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 8009ec4:	f107 0420 	add.w	r4, r7, #32
 8009ec8:	6838      	ldr	r0, [r7, #0]
 8009eca:	f7ff ffc8 	bl	8009e5e <_ZSt4moveIRSaIN4tama16Stm32TimeMonitorEEEONSt16remove_referenceIT_E4typeEOS5_>
 8009ece:	4605      	mov	r5, r0
 8009ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed2:	4619      	mov	r1, r3
 8009ed4:	2014      	movs	r0, #20
 8009ed6:	f7f6 fb2a 	bl	800052e <_ZnwjPv>
 8009eda:	2800      	cmp	r0, #0
 8009edc:	d004      	beq.n	8009ee8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x74>
 8009ede:	462b      	mov	r3, r5
 8009ee0:	4622      	mov	r2, r4
 8009ee2:	68b9      	ldr	r1, [r7, #8]
 8009ee4:	f001 f8fc 	bl	800b0e0 <_ZNSt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>
 8009ee8:	f107 0320 	add.w	r3, r7, #32
 8009eec:	4618      	mov	r0, r3
 8009eee:	f7ff f8bf 	bl	8009070 <_ZNSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	      _M_pi = __mem;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ef6:	601a      	str	r2, [r3, #0]
	      __guard = nullptr;
 8009ef8:	f107 0314 	add.w	r3, r7, #20
 8009efc:	2100      	movs	r1, #0
 8009efe:	4618      	mov	r0, r3
 8009f00:	f001 f91c 	bl	800b13c <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>
	      auto __guard = std::__allocate_guarded(__a2);
 8009f04:	f107 0314 	add.w	r3, r7, #20
 8009f08:	4618      	mov	r0, r3
 8009f0a:	f001 f89b 	bl	800b044 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 8009f0e:	f107 031c 	add.w	r3, r7, #28
 8009f12:	4618      	mov	r0, r3
 8009f14:	f001 f877 	bl	800b006 <_ZNSaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
	}
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	3728      	adds	r7, #40	; 0x28
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bdb0      	pop	{r4, r5, r7, pc}

08009f22 <_ZNSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 8009f22:	b480      	push	{r7}
 8009f24:	b083      	sub	sp, #12
 8009f26:	af00      	add	r7, sp, #0
 8009f28:	6078      	str	r0, [r7, #4]
 8009f2a:	6039      	str	r1, [r7, #0]
	{ }
 8009f2c:	bf00      	nop
 8009f2e:	370c      	adds	r7, #12
 8009f30:	46bd      	mov	sp, r7
 8009f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f36:	4770      	bx	lr

08009f38 <_ZNSaIN4tama25Stm32SoundPlayingStrategyEEC1ERKS1_>:
      allocator(const allocator& __a) throw()
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b082      	sub	sp, #8
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
 8009f40:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8009f42:	6839      	ldr	r1, [r7, #0]
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	f001 f928 	bl	800b19a <_ZN9__gnu_cxx13new_allocatorIN4tama25Stm32SoundPlayingStrategyEEC1ERKS3_>
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	3708      	adds	r7, #8
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bd80      	pop	{r7, pc}

08009f54 <_ZSt18__allocate_guardedISaIN4tama25Stm32SoundPlayingStrategyEEESt15__allocated_ptrIT_ERS4_>:
    __allocate_guarded(_Alloc& __a)
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b082      	sub	sp, #8
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
 8009f5c:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 8009f5e:	2101      	movs	r1, #1
 8009f60:	6838      	ldr	r0, [r7, #0]
 8009f62:	f001 f926 	bl	800b1b2 <_ZNSt16allocator_traitsISaIN4tama25Stm32SoundPlayingStrategyEEE8allocateERS2_j>
 8009f66:	4603      	mov	r3, r0
 8009f68:	461a      	mov	r2, r3
 8009f6a:	6839      	ldr	r1, [r7, #0]
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f001 f92f 	bl	800b1d0 <_ZNSt15__allocated_ptrISaIN4tama25Stm32SoundPlayingStrategyEEEC1ERS2_PS1_>
    }
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	3708      	adds	r7, #8
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}

08009f7a <_ZNSt15__allocated_ptrISaIN4tama25Stm32SoundPlayingStrategyEEED1Ev>:
      ~__allocated_ptr()
 8009f7a:	b580      	push	{r7, lr}
 8009f7c:	b082      	sub	sp, #8
 8009f7e:	af00      	add	r7, sp, #0
 8009f80:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	685b      	ldr	r3, [r3, #4]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d007      	beq.n	8009f9a <_ZNSt15__allocated_ptrISaIN4tama25Stm32SoundPlayingStrategyEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6818      	ldr	r0, [r3, #0]
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	685b      	ldr	r3, [r3, #4]
 8009f92:	2201      	movs	r2, #1
 8009f94:	4619      	mov	r1, r3
 8009f96:	f001 f92f 	bl	800b1f8 <_ZNSt16allocator_traitsISaIN4tama25Stm32SoundPlayingStrategyEEE10deallocateERS2_PS1_j>
      }
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	3708      	adds	r7, #8
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}

08009fa4 <_ZNSt15__allocated_ptrISaIN4tama25Stm32SoundPlayingStrategyEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b082      	sub	sp, #8
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	685b      	ldr	r3, [r3, #4]
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	f001 f930 	bl	800b216 <_ZNSt15__allocated_ptrISaIN4tama25Stm32SoundPlayingStrategyEEE10_S_raw_ptrEPS1_>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	4618      	mov	r0, r3
 8009fba:	3708      	adds	r7, #8
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}

08009fc0 <_ZNSt16allocator_traitsISaIN4tama25Stm32SoundPlayingStrategyEEE9constructIS1_JEEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b082      	sub	sp, #8
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
 8009fc8:	6039      	str	r1, [r7, #0]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8009fca:	6839      	ldr	r1, [r7, #0]
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	f001 f94f 	bl	800b270 <_ZN9__gnu_cxx13new_allocatorIN4tama25Stm32SoundPlayingStrategyEE9constructIS2_JEEEvPT_DpOT0_>
 8009fd2:	bf00      	nop
 8009fd4:	3708      	adds	r7, #8
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}

08009fda <_ZNSt15__allocated_ptrISaIN4tama25Stm32SoundPlayingStrategyEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 8009fda:	b480      	push	{r7}
 8009fdc:	b083      	sub	sp, #12
 8009fde:	af00      	add	r7, sp, #0
 8009fe0:	6078      	str	r0, [r7, #4]
 8009fe2:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	605a      	str	r2, [r3, #4]
	return *this;
 8009fea:	687b      	ldr	r3, [r7, #4]
      }
 8009fec:	4618      	mov	r0, r3
 8009fee:	370c      	adds	r7, #12
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff6:	4770      	bx	lr

08009ff8 <_ZSt4moveIRNSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 8009ff8:	b480      	push	{r7}
 8009ffa:	b083      	sub	sp, #12
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	4618      	mov	r0, r3
 800a004:	370c      	adds	r7, #12
 800a006:	46bd      	mov	sp, r7
 800a008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00c:	4770      	bx	lr

0800a00e <_ZNSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>:
        struct _Deleter
 800a00e:	b580      	push	{r7, lr}
 800a010:	b082      	sub	sp, #8
 800a012:	af00      	add	r7, sp, #0
 800a014:	6078      	str	r0, [r7, #4]
 800a016:	6039      	str	r1, [r7, #0]
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	683a      	ldr	r2, [r7, #0]
 800a01c:	4611      	mov	r1, r2
 800a01e:	4618      	mov	r0, r3
 800a020:	f7ff ff8a 	bl	8009f38 <_ZNSaIN4tama25Stm32SoundPlayingStrategyEEC1ERKS1_>
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	4618      	mov	r0, r3
 800a028:	3708      	adds	r7, #8
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}

0800a02e <_ZSt4moveIRSaIN4tama25Stm32SoundPlayingStrategyEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800a02e:	b480      	push	{r7}
 800a030:	b083      	sub	sp, #12
 800a032:	af00      	add	r7, sp, #0
 800a034:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	4618      	mov	r0, r3
 800a03a:	370c      	adds	r7, #12
 800a03c:	46bd      	mov	sp, r7
 800a03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a042:	4770      	bx	lr

0800a044 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
 800a044:	b5b0      	push	{r4, r5, r7, lr}
 800a046:	b08a      	sub	sp, #40	; 0x28
 800a048:	af00      	add	r7, sp, #0
 800a04a:	60f8      	str	r0, [r7, #12]
 800a04c:	60b9      	str	r1, [r7, #8]
 800a04e:	607a      	str	r2, [r7, #4]
 800a050:	603b      	str	r3, [r7, #0]
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	2200      	movs	r2, #0
 800a056:	601a      	str	r2, [r3, #0]
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 800a058:	f107 031c 	add.w	r3, r7, #28
 800a05c:	6839      	ldr	r1, [r7, #0]
 800a05e:	4618      	mov	r0, r3
 800a060:	f001 f91c 	bl	800b29c <_ZNSaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	      auto __guard = std::__allocate_guarded(__a2);
 800a064:	f107 0314 	add.w	r3, r7, #20
 800a068:	f107 021c 	add.w	r2, r7, #28
 800a06c:	4611      	mov	r1, r2
 800a06e:	4618      	mov	r0, r3
 800a070:	f001 f92d 	bl	800b2ce <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>
	      _Sp_cd_type* __mem = __guard.get();
 800a074:	f107 0314 	add.w	r3, r7, #20
 800a078:	4618      	mov	r0, r3
 800a07a:	f001 f950 	bl	800b31e <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>
 800a07e:	6278      	str	r0, [r7, #36]	; 0x24
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	f7ff ffb9 	bl	8009ff8 <_ZSt4moveIRNSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800a086:	4602      	mov	r2, r0
 800a088:	f107 0320 	add.w	r3, r7, #32
 800a08c:	4611      	mov	r1, r2
 800a08e:	4618      	mov	r0, r3
 800a090:	f7ff ffbd 	bl	800a00e <_ZNSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 800a094:	f107 0420 	add.w	r4, r7, #32
 800a098:	6838      	ldr	r0, [r7, #0]
 800a09a:	f7ff ffc8 	bl	800a02e <_ZSt4moveIRSaIN4tama25Stm32SoundPlayingStrategyEEEONSt16remove_referenceIT_E4typeEOS5_>
 800a09e:	4605      	mov	r5, r0
 800a0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0a2:	4619      	mov	r1, r3
 800a0a4:	2014      	movs	r0, #20
 800a0a6:	f7f6 fa42 	bl	800052e <_ZnwjPv>
 800a0aa:	2800      	cmp	r0, #0
 800a0ac:	d004      	beq.n	800a0b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x74>
 800a0ae:	462b      	mov	r3, r5
 800a0b0:	4622      	mov	r2, r4
 800a0b2:	68b9      	ldr	r1, [r7, #8]
 800a0b4:	f001 f96c 	bl	800b390 <_ZNSt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>
 800a0b8:	f107 0320 	add.w	r3, r7, #32
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f7ff f86a 	bl	8009196 <_ZNSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	      _M_pi = __mem;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0c6:	601a      	str	r2, [r3, #0]
	      __guard = nullptr;
 800a0c8:	f107 0314 	add.w	r3, r7, #20
 800a0cc:	2100      	movs	r1, #0
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	f001 f98c 	bl	800b3ec <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>
	      auto __guard = std::__allocate_guarded(__a2);
 800a0d4:	f107 0314 	add.w	r3, r7, #20
 800a0d8:	4618      	mov	r0, r3
 800a0da:	f001 f90b 	bl	800b2f4 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 800a0de:	f107 031c 	add.w	r3, r7, #28
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	f001 f8e7 	bl	800b2b6 <_ZNSaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
	}
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	3728      	adds	r7, #40	; 0x28
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bdb0      	pop	{r4, r5, r7, pc}

0800a0f2 <_ZNSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 800a0f2:	b480      	push	{r7}
 800a0f4:	b083      	sub	sp, #12
 800a0f6:	af00      	add	r7, sp, #0
 800a0f8:	6078      	str	r0, [r7, #4]
 800a0fa:	6039      	str	r1, [r7, #0]
	{ }
 800a0fc:	bf00      	nop
 800a0fe:	370c      	adds	r7, #12
 800a100:	46bd      	mov	sp, r7
 800a102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a106:	4770      	bx	lr

0800a108 <_ZNSaIN4tama11SoundPlayerEEC1ERKS1_>:
      allocator(const allocator& __a) throw()
 800a108:	b580      	push	{r7, lr}
 800a10a:	b082      	sub	sp, #8
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
 800a110:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800a112:	6839      	ldr	r1, [r7, #0]
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f001 f998 	bl	800b44a <_ZN9__gnu_cxx13new_allocatorIN4tama11SoundPlayerEEC1ERKS3_>
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	4618      	mov	r0, r3
 800a11e:	3708      	adds	r7, #8
 800a120:	46bd      	mov	sp, r7
 800a122:	bd80      	pop	{r7, pc}

0800a124 <_ZSt18__allocate_guardedISaIN4tama11SoundPlayerEEESt15__allocated_ptrIT_ERS4_>:
    __allocate_guarded(_Alloc& __a)
 800a124:	b580      	push	{r7, lr}
 800a126:	b082      	sub	sp, #8
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
 800a12c:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 800a12e:	2101      	movs	r1, #1
 800a130:	6838      	ldr	r0, [r7, #0]
 800a132:	f001 f996 	bl	800b462 <_ZNSt16allocator_traitsISaIN4tama11SoundPlayerEEE8allocateERS2_j>
 800a136:	4603      	mov	r3, r0
 800a138:	461a      	mov	r2, r3
 800a13a:	6839      	ldr	r1, [r7, #0]
 800a13c:	6878      	ldr	r0, [r7, #4]
 800a13e:	f001 f99f 	bl	800b480 <_ZNSt15__allocated_ptrISaIN4tama11SoundPlayerEEEC1ERS2_PS1_>
    }
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	3708      	adds	r7, #8
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}

0800a14a <_ZNSt15__allocated_ptrISaIN4tama11SoundPlayerEEED1Ev>:
      ~__allocated_ptr()
 800a14a:	b580      	push	{r7, lr}
 800a14c:	b082      	sub	sp, #8
 800a14e:	af00      	add	r7, sp, #0
 800a150:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	685b      	ldr	r3, [r3, #4]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d007      	beq.n	800a16a <_ZNSt15__allocated_ptrISaIN4tama11SoundPlayerEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6818      	ldr	r0, [r3, #0]
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	685b      	ldr	r3, [r3, #4]
 800a162:	2201      	movs	r2, #1
 800a164:	4619      	mov	r1, r3
 800a166:	f001 f99f 	bl	800b4a8 <_ZNSt16allocator_traitsISaIN4tama11SoundPlayerEEE10deallocateERS2_PS1_j>
      }
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	4618      	mov	r0, r3
 800a16e:	3708      	adds	r7, #8
 800a170:	46bd      	mov	sp, r7
 800a172:	bd80      	pop	{r7, pc}

0800a174 <_ZNSt15__allocated_ptrISaIN4tama11SoundPlayerEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 800a174:	b580      	push	{r7, lr}
 800a176:	b082      	sub	sp, #8
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	685b      	ldr	r3, [r3, #4]
 800a180:	4618      	mov	r0, r3
 800a182:	f001 f9a0 	bl	800b4c6 <_ZNSt15__allocated_ptrISaIN4tama11SoundPlayerEEE10_S_raw_ptrEPS1_>
 800a186:	4603      	mov	r3, r0
 800a188:	4618      	mov	r0, r3
 800a18a:	3708      	adds	r7, #8
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd80      	pop	{r7, pc}

0800a190 <_ZNSt16allocator_traitsISaIN4tama11SoundPlayerEEE9constructIS1_JRSt10shared_ptrINS0_11TimeMonitorEEEEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 800a190:	b580      	push	{r7, lr}
 800a192:	b084      	sub	sp, #16
 800a194:	af00      	add	r7, sp, #0
 800a196:	60f8      	str	r0, [r7, #12]
 800a198:	60b9      	str	r1, [r7, #8]
 800a19a:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	f7fe f835 	bl	800820c <_ZSt7forwardIRSt10shared_ptrIN4tama11TimeMonitorEEEOT_RNSt16remove_referenceIS5_E4typeE>
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	461a      	mov	r2, r3
 800a1a6:	68b9      	ldr	r1, [r7, #8]
 800a1a8:	68f8      	ldr	r0, [r7, #12]
 800a1aa:	f001 f9bd 	bl	800b528 <_ZN9__gnu_cxx13new_allocatorIN4tama11SoundPlayerEE9constructIS2_JRSt10shared_ptrINS1_11TimeMonitorEEEEEvPT_DpOT0_>
 800a1ae:	bf00      	nop
 800a1b0:	3710      	adds	r7, #16
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}

0800a1b6 <_ZNSt15__allocated_ptrISaIN4tama11SoundPlayerEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 800a1b6:	b480      	push	{r7}
 800a1b8:	b083      	sub	sp, #12
 800a1ba:	af00      	add	r7, sp, #0
 800a1bc:	6078      	str	r0, [r7, #4]
 800a1be:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	605a      	str	r2, [r3, #4]
	return *this;
 800a1c6:	687b      	ldr	r3, [r7, #4]
      }
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	370c      	adds	r7, #12
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d2:	4770      	bx	lr

0800a1d4 <_ZSt4moveIRNSt12__shared_ptrIN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 800a1d4:	b480      	push	{r7}
 800a1d6:	b083      	sub	sp, #12
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	4618      	mov	r0, r3
 800a1e0:	370c      	adds	r7, #12
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e8:	4770      	bx	lr

0800a1ea <_ZNSt12__shared_ptrIN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>:
        struct _Deleter
 800a1ea:	b580      	push	{r7, lr}
 800a1ec:	b082      	sub	sp, #8
 800a1ee:	af00      	add	r7, sp, #0
 800a1f0:	6078      	str	r0, [r7, #4]
 800a1f2:	6039      	str	r1, [r7, #0]
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	683a      	ldr	r2, [r7, #0]
 800a1f8:	4611      	mov	r1, r2
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	f7ff ff84 	bl	800a108 <_ZNSaIN4tama11SoundPlayerEEC1ERKS1_>
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	4618      	mov	r0, r3
 800a204:	3708      	adds	r7, #8
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}

0800a20a <_ZSt4moveIRSaIN4tama11SoundPlayerEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800a20a:	b480      	push	{r7}
 800a20c:	b083      	sub	sp, #12
 800a20e:	af00      	add	r7, sp, #0
 800a210:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	4618      	mov	r0, r3
 800a216:	370c      	adds	r7, #12
 800a218:	46bd      	mov	sp, r7
 800a21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21e:	4770      	bx	lr

0800a220 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama11SoundPlayerENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
 800a220:	b5b0      	push	{r4, r5, r7, lr}
 800a222:	b08a      	sub	sp, #40	; 0x28
 800a224:	af00      	add	r7, sp, #0
 800a226:	60f8      	str	r0, [r7, #12]
 800a228:	60b9      	str	r1, [r7, #8]
 800a22a:	607a      	str	r2, [r7, #4]
 800a22c:	603b      	str	r3, [r7, #0]
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	2200      	movs	r2, #0
 800a232:	601a      	str	r2, [r3, #0]
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 800a234:	f107 031c 	add.w	r3, r7, #28
 800a238:	6839      	ldr	r1, [r7, #0]
 800a23a:	4618      	mov	r0, r3
 800a23c:	f001 f99b 	bl	800b576 <_ZNSaISt19_Sp_counted_deleterIPN4tama11SoundPlayerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	      auto __guard = std::__allocate_guarded(__a2);
 800a240:	f107 0314 	add.w	r3, r7, #20
 800a244:	f107 021c 	add.w	r2, r7, #28
 800a248:	4611      	mov	r1, r2
 800a24a:	4618      	mov	r0, r3
 800a24c:	f001 f9ac 	bl	800b5a8 <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama11SoundPlayerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>
	      _Sp_cd_type* __mem = __guard.get();
 800a250:	f107 0314 	add.w	r3, r7, #20
 800a254:	4618      	mov	r0, r3
 800a256:	f001 f9cf 	bl	800b5f8 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama11SoundPlayerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>
 800a25a:	6278      	str	r0, [r7, #36]	; 0x24
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f7ff ffb9 	bl	800a1d4 <_ZSt4moveIRNSt12__shared_ptrIN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800a262:	4602      	mov	r2, r0
 800a264:	f107 0320 	add.w	r3, r7, #32
 800a268:	4611      	mov	r1, r2
 800a26a:	4618      	mov	r0, r3
 800a26c:	f7ff ffbd 	bl	800a1ea <_ZNSt12__shared_ptrIN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 800a270:	f107 0420 	add.w	r4, r7, #32
 800a274:	6838      	ldr	r0, [r7, #0]
 800a276:	f7ff ffc8 	bl	800a20a <_ZSt4moveIRSaIN4tama11SoundPlayerEEEONSt16remove_referenceIT_E4typeEOS5_>
 800a27a:	4605      	mov	r5, r0
 800a27c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a27e:	4619      	mov	r1, r3
 800a280:	2014      	movs	r0, #20
 800a282:	f7f6 f954 	bl	800052e <_ZnwjPv>
 800a286:	2800      	cmp	r0, #0
 800a288:	d004      	beq.n	800a294 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama11SoundPlayerENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x74>
 800a28a:	462b      	mov	r3, r5
 800a28c:	4622      	mov	r2, r4
 800a28e:	68b9      	ldr	r1, [r7, #8]
 800a290:	f001 f9ec 	bl	800b66c <_ZNSt19_Sp_counted_deleterIPN4tama11SoundPlayerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>
 800a294:	f107 0320 	add.w	r3, r7, #32
 800a298:	4618      	mov	r0, r3
 800a29a:	f7ff f80f 	bl	80092bc <_ZNSt12__shared_ptrIN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	      _M_pi = __mem;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2a2:	601a      	str	r2, [r3, #0]
	      __guard = nullptr;
 800a2a4:	f107 0314 	add.w	r3, r7, #20
 800a2a8:	2100      	movs	r1, #0
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	f001 fa0c 	bl	800b6c8 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama11SoundPlayerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>
	      auto __guard = std::__allocate_guarded(__a2);
 800a2b0:	f107 0314 	add.w	r3, r7, #20
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	f001 f98a 	bl	800b5ce <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama11SoundPlayerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 800a2ba:	f107 031c 	add.w	r3, r7, #28
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f001 f966 	bl	800b590 <_ZNSaISt19_Sp_counted_deleterIPN4tama11SoundPlayerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
	}
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	3728      	adds	r7, #40	; 0x28
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bdb0      	pop	{r4, r5, r7, pc}

0800a2ce <_ZNSt12__shared_ptrIN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 800a2ce:	b480      	push	{r7}
 800a2d0:	b083      	sub	sp, #12
 800a2d2:	af00      	add	r7, sp, #0
 800a2d4:	6078      	str	r0, [r7, #4]
 800a2d6:	6039      	str	r1, [r7, #0]
	{ }
 800a2d8:	bf00      	nop
 800a2da:	370c      	adds	r7, #12
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e2:	4770      	bx	lr

0800a2e4 <_ZNSaIN4tama10Stm32InputEEC1ERKS1_>:
      allocator(const allocator& __a) throw()
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b082      	sub	sp, #8
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
 800a2ec:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800a2ee:	6839      	ldr	r1, [r7, #0]
 800a2f0:	6878      	ldr	r0, [r7, #4]
 800a2f2:	f001 fa18 	bl	800b726 <_ZN9__gnu_cxx13new_allocatorIN4tama10Stm32InputEEC1ERKS3_>
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	3708      	adds	r7, #8
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	bd80      	pop	{r7, pc}

0800a300 <_ZSt18__allocate_guardedISaIN4tama10Stm32InputEEESt15__allocated_ptrIT_ERS4_>:
    __allocate_guarded(_Alloc& __a)
 800a300:	b580      	push	{r7, lr}
 800a302:	b082      	sub	sp, #8
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
 800a308:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 800a30a:	2101      	movs	r1, #1
 800a30c:	6838      	ldr	r0, [r7, #0]
 800a30e:	f001 fa16 	bl	800b73e <_ZNSt16allocator_traitsISaIN4tama10Stm32InputEEE8allocateERS2_j>
 800a312:	4603      	mov	r3, r0
 800a314:	461a      	mov	r2, r3
 800a316:	6839      	ldr	r1, [r7, #0]
 800a318:	6878      	ldr	r0, [r7, #4]
 800a31a:	f001 fa1f 	bl	800b75c <_ZNSt15__allocated_ptrISaIN4tama10Stm32InputEEEC1ERS2_PS1_>
    }
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	3708      	adds	r7, #8
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}

0800a326 <_ZNSt15__allocated_ptrISaIN4tama10Stm32InputEEED1Ev>:
      ~__allocated_ptr()
 800a326:	b580      	push	{r7, lr}
 800a328:	b082      	sub	sp, #8
 800a32a:	af00      	add	r7, sp, #0
 800a32c:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	685b      	ldr	r3, [r3, #4]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d007      	beq.n	800a346 <_ZNSt15__allocated_ptrISaIN4tama10Stm32InputEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6818      	ldr	r0, [r3, #0]
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	685b      	ldr	r3, [r3, #4]
 800a33e:	2201      	movs	r2, #1
 800a340:	4619      	mov	r1, r3
 800a342:	f001 fa1f 	bl	800b784 <_ZNSt16allocator_traitsISaIN4tama10Stm32InputEEE10deallocateERS2_PS1_j>
      }
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	4618      	mov	r0, r3
 800a34a:	3708      	adds	r7, #8
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bd80      	pop	{r7, pc}

0800a350 <_ZNSt15__allocated_ptrISaIN4tama10Stm32InputEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 800a350:	b580      	push	{r7, lr}
 800a352:	b082      	sub	sp, #8
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	685b      	ldr	r3, [r3, #4]
 800a35c:	4618      	mov	r0, r3
 800a35e:	f001 fa20 	bl	800b7a2 <_ZNSt15__allocated_ptrISaIN4tama10Stm32InputEEE10_S_raw_ptrEPS1_>
 800a362:	4603      	mov	r3, r0
 800a364:	4618      	mov	r0, r3
 800a366:	3708      	adds	r7, #8
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd80      	pop	{r7, pc}

0800a36c <_ZNSt16allocator_traitsISaIN4tama10Stm32InputEEE9constructIS1_JEEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b082      	sub	sp, #8
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
 800a374:	6039      	str	r1, [r7, #0]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800a376:	6839      	ldr	r1, [r7, #0]
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	f001 fa57 	bl	800b82c <_ZN9__gnu_cxx13new_allocatorIN4tama10Stm32InputEE9constructIS2_JEEEvPT_DpOT0_>
 800a37e:	bf00      	nop
 800a380:	3708      	adds	r7, #8
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}

0800a386 <_ZNSt15__allocated_ptrISaIN4tama10Stm32InputEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 800a386:	b480      	push	{r7}
 800a388:	b083      	sub	sp, #12
 800a38a:	af00      	add	r7, sp, #0
 800a38c:	6078      	str	r0, [r7, #4]
 800a38e:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2200      	movs	r2, #0
 800a394:	605a      	str	r2, [r3, #4]
	return *this;
 800a396:	687b      	ldr	r3, [r7, #4]
      }
 800a398:	4618      	mov	r0, r3
 800a39a:	370c      	adds	r7, #12
 800a39c:	46bd      	mov	sp, r7
 800a39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a2:	4770      	bx	lr

0800a3a4 <_ZSt4moveIRNSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 800a3a4:	b480      	push	{r7}
 800a3a6:	b083      	sub	sp, #12
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	370c      	adds	r7, #12
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b8:	4770      	bx	lr

0800a3ba <_ZNSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>:
        struct _Deleter
 800a3ba:	b580      	push	{r7, lr}
 800a3bc:	b082      	sub	sp, #8
 800a3be:	af00      	add	r7, sp, #0
 800a3c0:	6078      	str	r0, [r7, #4]
 800a3c2:	6039      	str	r1, [r7, #0]
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	683a      	ldr	r2, [r7, #0]
 800a3c8:	4611      	mov	r1, r2
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f7ff ff8a 	bl	800a2e4 <_ZNSaIN4tama10Stm32InputEEC1ERKS1_>
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	3708      	adds	r7, #8
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	bd80      	pop	{r7, pc}

0800a3da <_ZSt4moveIRSaIN4tama10Stm32InputEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800a3da:	b480      	push	{r7}
 800a3dc:	b083      	sub	sp, #12
 800a3de:	af00      	add	r7, sp, #0
 800a3e0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	370c      	adds	r7, #12
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ee:	4770      	bx	lr

0800a3f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama10Stm32InputENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
 800a3f0:	b5b0      	push	{r4, r5, r7, lr}
 800a3f2:	b08a      	sub	sp, #40	; 0x28
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	60f8      	str	r0, [r7, #12]
 800a3f8:	60b9      	str	r1, [r7, #8]
 800a3fa:	607a      	str	r2, [r7, #4]
 800a3fc:	603b      	str	r3, [r7, #0]
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	2200      	movs	r2, #0
 800a402:	601a      	str	r2, [r3, #0]
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 800a404:	f107 031c 	add.w	r3, r7, #28
 800a408:	6839      	ldr	r1, [r7, #0]
 800a40a:	4618      	mov	r0, r3
 800a40c:	f001 fa28 	bl	800b860 <_ZNSaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	      auto __guard = std::__allocate_guarded(__a2);
 800a410:	f107 0314 	add.w	r3, r7, #20
 800a414:	f107 021c 	add.w	r2, r7, #28
 800a418:	4611      	mov	r1, r2
 800a41a:	4618      	mov	r0, r3
 800a41c:	f001 fa39 	bl	800b892 <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>
	      _Sp_cd_type* __mem = __guard.get();
 800a420:	f107 0314 	add.w	r3, r7, #20
 800a424:	4618      	mov	r0, r3
 800a426:	f001 fa5c 	bl	800b8e2 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>
 800a42a:	6278      	str	r0, [r7, #36]	; 0x24
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 800a42c:	6878      	ldr	r0, [r7, #4]
 800a42e:	f7ff ffb9 	bl	800a3a4 <_ZSt4moveIRNSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800a432:	4602      	mov	r2, r0
 800a434:	f107 0320 	add.w	r3, r7, #32
 800a438:	4611      	mov	r1, r2
 800a43a:	4618      	mov	r0, r3
 800a43c:	f7ff ffbd 	bl	800a3ba <_ZNSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 800a440:	f107 0420 	add.w	r4, r7, #32
 800a444:	6838      	ldr	r0, [r7, #0]
 800a446:	f7ff ffc8 	bl	800a3da <_ZSt4moveIRSaIN4tama10Stm32InputEEEONSt16remove_referenceIT_E4typeEOS5_>
 800a44a:	4605      	mov	r5, r0
 800a44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a44e:	4619      	mov	r1, r3
 800a450:	2014      	movs	r0, #20
 800a452:	f7f6 f86c 	bl	800052e <_ZnwjPv>
 800a456:	2800      	cmp	r0, #0
 800a458:	d004      	beq.n	800a464 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama10Stm32InputENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x74>
 800a45a:	462b      	mov	r3, r5
 800a45c:	4622      	mov	r2, r4
 800a45e:	68b9      	ldr	r1, [r7, #8]
 800a460:	f001 fa78 	bl	800b954 <_ZNSt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>
 800a464:	f107 0320 	add.w	r3, r7, #32
 800a468:	4618      	mov	r0, r3
 800a46a:	f7fe ffbf 	bl	80093ec <_ZNSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	      _M_pi = __mem;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a472:	601a      	str	r2, [r3, #0]
	      __guard = nullptr;
 800a474:	f107 0314 	add.w	r3, r7, #20
 800a478:	2100      	movs	r1, #0
 800a47a:	4618      	mov	r0, r3
 800a47c:	f001 fa98 	bl	800b9b0 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>
	      auto __guard = std::__allocate_guarded(__a2);
 800a480:	f107 0314 	add.w	r3, r7, #20
 800a484:	4618      	mov	r0, r3
 800a486:	f001 fa17 	bl	800b8b8 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 800a48a:	f107 031c 	add.w	r3, r7, #28
 800a48e:	4618      	mov	r0, r3
 800a490:	f001 f9f3 	bl	800b87a <_ZNSaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
	}
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	4618      	mov	r0, r3
 800a498:	3728      	adds	r7, #40	; 0x28
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bdb0      	pop	{r4, r5, r7, pc}

0800a49e <_ZNSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 800a49e:	b480      	push	{r7}
 800a4a0:	b083      	sub	sp, #12
 800a4a2:	af00      	add	r7, sp, #0
 800a4a4:	6078      	str	r0, [r7, #4]
 800a4a6:	6039      	str	r1, [r7, #0]
	{ }
 800a4a8:	bf00      	nop
 800a4aa:	370c      	adds	r7, #12
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b2:	4770      	bx	lr

0800a4b4 <_ZNKSt6vectorIN4tama4ToneESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b082      	sub	sp, #8
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f7f8 fe26 	bl	8003110 <_ZNKSt12_Vector_baseIN4tama4ToneESaIS1_EE19_M_get_Tp_allocatorEv>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	f001 faa1 	bl	800ba0e <_ZNSt16allocator_traitsISaIN4tama4ToneEEE8max_sizeERKS2_>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	3708      	adds	r7, #8
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bd80      	pop	{r7, pc}

0800a4d6 <_ZNSt16allocator_traitsISaIN4tama4ToneEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800a4d6:	b580      	push	{r7, lr}
 800a4d8:	b082      	sub	sp, #8
 800a4da:	af00      	add	r7, sp, #0
 800a4dc:	6078      	str	r0, [r7, #4]
 800a4de:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	6839      	ldr	r1, [r7, #0]
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	f001 fa9e 	bl	800ba26 <_ZN9__gnu_cxx13new_allocatorIN4tama4ToneEE8allocateEjPKv>
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	3708      	adds	r7, #8
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	bd80      	pop	{r7, pc}

0800a4f4 <_ZSt32__make_move_if_noexcept_iteratorIN4tama4ToneESt13move_iteratorIPS1_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b084      	sub	sp, #16
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 800a4fc:	f107 030c 	add.w	r3, r7, #12
 800a500:	6879      	ldr	r1, [r7, #4]
 800a502:	4618      	mov	r0, r3
 800a504:	f001 faad 	bl	800ba62 <_ZNSt13move_iteratorIPN4tama4ToneEEC1ES2_>
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	4618      	mov	r0, r3
 800a50c:	3710      	adds	r7, #16
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}

0800a512 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN4tama4ToneEES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800a512:	b580      	push	{r7, lr}
 800a514:	b084      	sub	sp, #16
 800a516:	af00      	add	r7, sp, #0
 800a518:	60f8      	str	r0, [r7, #12]
 800a51a:	60b9      	str	r1, [r7, #8]
 800a51c:	607a      	str	r2, [r7, #4]
 800a51e:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800a520:	687a      	ldr	r2, [r7, #4]
 800a522:	68b9      	ldr	r1, [r7, #8]
 800a524:	68f8      	ldr	r0, [r7, #12]
 800a526:	f001 faab 	bl	800ba80 <_ZSt18uninitialized_copyISt13move_iteratorIPN4tama4ToneEES3_ET0_T_S6_S5_>
 800a52a:	4603      	mov	r3, r0
 800a52c:	4618      	mov	r0, r3
 800a52e:	3710      	adds	r7, #16
 800a530:	46bd      	mov	sp, r7
 800a532:	bd80      	pop	{r7, pc}

0800a534 <_ZNSaIN4tama7ContextEEC1ERKS1_>:
      allocator(const allocator& __a) throw()
 800a534:	b580      	push	{r7, lr}
 800a536:	b082      	sub	sp, #8
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
 800a53c:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800a53e:	6839      	ldr	r1, [r7, #0]
 800a540:	6878      	ldr	r0, [r7, #4]
 800a542:	f001 faaf 	bl	800baa4 <_ZN9__gnu_cxx13new_allocatorIN4tama7ContextEEC1ERKS3_>
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	4618      	mov	r0, r3
 800a54a:	3708      	adds	r7, #8
 800a54c:	46bd      	mov	sp, r7
 800a54e:	bd80      	pop	{r7, pc}

0800a550 <_ZSt18__allocate_guardedISaIN4tama7ContextEEESt15__allocated_ptrIT_ERS4_>:
    __allocate_guarded(_Alloc& __a)
 800a550:	b580      	push	{r7, lr}
 800a552:	b082      	sub	sp, #8
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
 800a558:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 800a55a:	2101      	movs	r1, #1
 800a55c:	6838      	ldr	r0, [r7, #0]
 800a55e:	f001 faad 	bl	800babc <_ZNSt16allocator_traitsISaIN4tama7ContextEEE8allocateERS2_j>
 800a562:	4603      	mov	r3, r0
 800a564:	461a      	mov	r2, r3
 800a566:	6839      	ldr	r1, [r7, #0]
 800a568:	6878      	ldr	r0, [r7, #4]
 800a56a:	f001 fab6 	bl	800bada <_ZNSt15__allocated_ptrISaIN4tama7ContextEEEC1ERS2_PS1_>
    }
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	3708      	adds	r7, #8
 800a572:	46bd      	mov	sp, r7
 800a574:	bd80      	pop	{r7, pc}

0800a576 <_ZNSt15__allocated_ptrISaIN4tama7ContextEEED1Ev>:
      ~__allocated_ptr()
 800a576:	b580      	push	{r7, lr}
 800a578:	b082      	sub	sp, #8
 800a57a:	af00      	add	r7, sp, #0
 800a57c:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	685b      	ldr	r3, [r3, #4]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d007      	beq.n	800a596 <_ZNSt15__allocated_ptrISaIN4tama7ContextEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	6818      	ldr	r0, [r3, #0]
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	685b      	ldr	r3, [r3, #4]
 800a58e:	2201      	movs	r2, #1
 800a590:	4619      	mov	r1, r3
 800a592:	f001 fab6 	bl	800bb02 <_ZNSt16allocator_traitsISaIN4tama7ContextEEE10deallocateERS2_PS1_j>
      }
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	4618      	mov	r0, r3
 800a59a:	3708      	adds	r7, #8
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bd80      	pop	{r7, pc}

0800a5a0 <_ZNSt15__allocated_ptrISaIN4tama7ContextEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b082      	sub	sp, #8
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	685b      	ldr	r3, [r3, #4]
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	f001 fab7 	bl	800bb20 <_ZNSt15__allocated_ptrISaIN4tama7ContextEEE10_S_raw_ptrEPS1_>
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	3708      	adds	r7, #8
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}

0800a5bc <_ZNSt16allocator_traitsISaIN4tama7ContextEEE9constructIS1_JRSt10shared_ptrINS0_13TextureLoaderEERS5_INS0_5InputEEEEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 800a5bc:	b590      	push	{r4, r7, lr}
 800a5be:	b085      	sub	sp, #20
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	60f8      	str	r0, [r7, #12]
 800a5c4:	60b9      	str	r1, [r7, #8]
 800a5c6:	607a      	str	r2, [r7, #4]
 800a5c8:	603b      	str	r3, [r7, #0]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f7fd fea5 	bl	800831a <_ZSt7forwardIRSt10shared_ptrIN4tama13TextureLoaderEEEOT_RNSt16remove_referenceIS5_E4typeE>
 800a5d0:	4604      	mov	r4, r0
 800a5d2:	6838      	ldr	r0, [r7, #0]
 800a5d4:	f7fd feac 	bl	8008330 <_ZSt7forwardIRSt10shared_ptrIN4tama5InputEEEOT_RNSt16remove_referenceIS5_E4typeE>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	4622      	mov	r2, r4
 800a5dc:	68b9      	ldr	r1, [r7, #8]
 800a5de:	68f8      	ldr	r0, [r7, #12]
 800a5e0:	f001 faa9 	bl	800bb36 <_ZN9__gnu_cxx13new_allocatorIN4tama7ContextEE9constructIS2_JRSt10shared_ptrINS1_13TextureLoaderEERS5_INS1_5InputEEEEEvPT_DpOT0_>
 800a5e4:	bf00      	nop
 800a5e6:	3714      	adds	r7, #20
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bd90      	pop	{r4, r7, pc}

0800a5ec <_ZNSt15__allocated_ptrISaIN4tama7ContextEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 800a5ec:	b480      	push	{r7}
 800a5ee:	b083      	sub	sp, #12
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
 800a5f4:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	605a      	str	r2, [r3, #4]
	return *this;
 800a5fc:	687b      	ldr	r3, [r7, #4]
      }
 800a5fe:	4618      	mov	r0, r3
 800a600:	370c      	adds	r7, #12
 800a602:	46bd      	mov	sp, r7
 800a604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a608:	4770      	bx	lr

0800a60a <_ZSt4moveIRNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 800a60a:	b480      	push	{r7}
 800a60c:	b083      	sub	sp, #12
 800a60e:	af00      	add	r7, sp, #0
 800a610:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	4618      	mov	r0, r3
 800a616:	370c      	adds	r7, #12
 800a618:	46bd      	mov	sp, r7
 800a61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61e:	4770      	bx	lr

0800a620 <_ZNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>:
        struct _Deleter
 800a620:	b580      	push	{r7, lr}
 800a622:	b082      	sub	sp, #8
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
 800a628:	6039      	str	r1, [r7, #0]
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	683a      	ldr	r2, [r7, #0]
 800a62e:	4611      	mov	r1, r2
 800a630:	4618      	mov	r0, r3
 800a632:	f7ff ff7f 	bl	800a534 <_ZNSaIN4tama7ContextEEC1ERKS1_>
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	4618      	mov	r0, r3
 800a63a:	3708      	adds	r7, #8
 800a63c:	46bd      	mov	sp, r7
 800a63e:	bd80      	pop	{r7, pc}

0800a640 <_ZSt4moveIRSaIN4tama7ContextEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800a640:	b480      	push	{r7}
 800a642:	b083      	sub	sp, #12
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	4618      	mov	r0, r3
 800a64c:	370c      	adds	r7, #12
 800a64e:	46bd      	mov	sp, r7
 800a650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a654:	4770      	bx	lr

0800a656 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama7ContextENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
 800a656:	b5b0      	push	{r4, r5, r7, lr}
 800a658:	b08a      	sub	sp, #40	; 0x28
 800a65a:	af00      	add	r7, sp, #0
 800a65c:	60f8      	str	r0, [r7, #12]
 800a65e:	60b9      	str	r1, [r7, #8]
 800a660:	607a      	str	r2, [r7, #4]
 800a662:	603b      	str	r3, [r7, #0]
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	2200      	movs	r2, #0
 800a668:	601a      	str	r2, [r3, #0]
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 800a66a:	f107 031c 	add.w	r3, r7, #28
 800a66e:	6839      	ldr	r1, [r7, #0]
 800a670:	4618      	mov	r0, r3
 800a672:	f001 fa9a 	bl	800bbaa <_ZNSaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	      auto __guard = std::__allocate_guarded(__a2);
 800a676:	f107 0314 	add.w	r3, r7, #20
 800a67a:	f107 021c 	add.w	r2, r7, #28
 800a67e:	4611      	mov	r1, r2
 800a680:	4618      	mov	r0, r3
 800a682:	f001 faab 	bl	800bbdc <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>
	      _Sp_cd_type* __mem = __guard.get();
 800a686:	f107 0314 	add.w	r3, r7, #20
 800a68a:	4618      	mov	r0, r3
 800a68c:	f001 face 	bl	800bc2c <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>
 800a690:	6278      	str	r0, [r7, #36]	; 0x24
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 800a692:	6878      	ldr	r0, [r7, #4]
 800a694:	f7ff ffb9 	bl	800a60a <_ZSt4moveIRNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800a698:	4602      	mov	r2, r0
 800a69a:	f107 0320 	add.w	r3, r7, #32
 800a69e:	4611      	mov	r1, r2
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	f7ff ffbd 	bl	800a620 <_ZNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 800a6a6:	f107 0420 	add.w	r4, r7, #32
 800a6aa:	6838      	ldr	r0, [r7, #0]
 800a6ac:	f7ff ffc8 	bl	800a640 <_ZSt4moveIRSaIN4tama7ContextEEEONSt16remove_referenceIT_E4typeEOS5_>
 800a6b0:	4605      	mov	r5, r0
 800a6b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6b4:	4619      	mov	r1, r3
 800a6b6:	2014      	movs	r0, #20
 800a6b8:	f7f5 ff39 	bl	800052e <_ZnwjPv>
 800a6bc:	2800      	cmp	r0, #0
 800a6be:	d004      	beq.n	800a6ca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama7ContextENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x74>
 800a6c0:	462b      	mov	r3, r5
 800a6c2:	4622      	mov	r2, r4
 800a6c4:	68b9      	ldr	r1, [r7, #8]
 800a6c6:	f001 faeb 	bl	800bca0 <_ZNSt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>
 800a6ca:	f107 0320 	add.w	r3, r7, #32
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	f7fe fff0 	bl	80096b4 <_ZNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	      _M_pi = __mem;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6d8:	601a      	str	r2, [r3, #0]
	      __guard = nullptr;
 800a6da:	f107 0314 	add.w	r3, r7, #20
 800a6de:	2100      	movs	r1, #0
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	f001 fb0b 	bl	800bcfc <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>
	      auto __guard = std::__allocate_guarded(__a2);
 800a6e6:	f107 0314 	add.w	r3, r7, #20
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	f001 fa89 	bl	800bc02 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 800a6f0:	f107 031c 	add.w	r3, r7, #28
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	f001 fa65 	bl	800bbc4 <_ZNSaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
	}
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	3728      	adds	r7, #40	; 0x28
 800a700:	46bd      	mov	sp, r7
 800a702:	bdb0      	pop	{r4, r5, r7, pc}

0800a704 <_ZNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 800a704:	b480      	push	{r7}
 800a706:	b083      	sub	sp, #12
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
 800a70c:	6039      	str	r1, [r7, #0]
	{ }
 800a70e:	bf00      	nop
 800a710:	370c      	adds	r7, #12
 800a712:	46bd      	mov	sp, r7
 800a714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a718:	4770      	bx	lr

0800a71a <_ZN9__gnu_cxx13new_allocatorIN4tama16Nokia5510DisplayEEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800a71a:	b480      	push	{r7}
 800a71c:	b083      	sub	sp, #12
 800a71e:	af00      	add	r7, sp, #0
 800a720:	6078      	str	r0, [r7, #4]
 800a722:	6039      	str	r1, [r7, #0]
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	4618      	mov	r0, r3
 800a728:	370c      	adds	r7, #12
 800a72a:	46bd      	mov	sp, r7
 800a72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a730:	4770      	bx	lr

0800a732 <_ZNSt16allocator_traitsISaIN4tama16Nokia5510DisplayEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800a732:	b580      	push	{r7, lr}
 800a734:	b082      	sub	sp, #8
 800a736:	af00      	add	r7, sp, #0
 800a738:	6078      	str	r0, [r7, #4]
 800a73a:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800a73c:	2200      	movs	r2, #0
 800a73e:	6839      	ldr	r1, [r7, #0]
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f001 fb0a 	bl	800bd5a <_ZN9__gnu_cxx13new_allocatorIN4tama16Nokia5510DisplayEE8allocateEjPKv>
 800a746:	4603      	mov	r3, r0
 800a748:	4618      	mov	r0, r3
 800a74a:	3708      	adds	r7, #8
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}

0800a750 <_ZNSt15__allocated_ptrISaIN4tama16Nokia5510DisplayEEEC1ERS2_PS1_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 800a750:	b580      	push	{r7, lr}
 800a752:	b084      	sub	sp, #16
 800a754:	af00      	add	r7, sp, #0
 800a756:	60f8      	str	r0, [r7, #12]
 800a758:	60b9      	str	r1, [r7, #8]
 800a75a:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800a75c:	68b8      	ldr	r0, [r7, #8]
 800a75e:	f001 fb1d 	bl	800bd9c <_ZSt11__addressofISaIN4tama16Nokia5510DisplayEEEPT_RS3_>
 800a762:	4602      	mov	r2, r0
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	601a      	str	r2, [r3, #0]
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	687a      	ldr	r2, [r7, #4]
 800a76c:	605a      	str	r2, [r3, #4]
      { }
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	4618      	mov	r0, r3
 800a772:	3710      	adds	r7, #16
 800a774:	46bd      	mov	sp, r7
 800a776:	bd80      	pop	{r7, pc}

0800a778 <_ZNSt16allocator_traitsISaIN4tama16Nokia5510DisplayEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800a778:	b580      	push	{r7, lr}
 800a77a:	b084      	sub	sp, #16
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	60f8      	str	r0, [r7, #12]
 800a780:	60b9      	str	r1, [r7, #8]
 800a782:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800a784:	687a      	ldr	r2, [r7, #4]
 800a786:	68b9      	ldr	r1, [r7, #8]
 800a788:	68f8      	ldr	r0, [r7, #12]
 800a78a:	f001 fb12 	bl	800bdb2 <_ZN9__gnu_cxx13new_allocatorIN4tama16Nokia5510DisplayEE10deallocateEPS2_j>
 800a78e:	bf00      	nop
 800a790:	3710      	adds	r7, #16
 800a792:	46bd      	mov	sp, r7
 800a794:	bd80      	pop	{r7, pc}

0800a796 <_ZNSt15__allocated_ptrISaIN4tama16Nokia5510DisplayEEE10_S_raw_ptrEPS1_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 800a796:	b480      	push	{r7}
 800a798:	b083      	sub	sp, #12
 800a79a:	af00      	add	r7, sp, #0
 800a79c:	6078      	str	r0, [r7, #4]
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	370c      	adds	r7, #12
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7aa:	4770      	bx	lr

0800a7ac <_ZN9__gnu_cxx13new_allocatorIN4tama16Nokia5510DisplayEE9constructIS2_JRNS1_13DisplayConfigEEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800a7ac:	b590      	push	{r4, r7, lr}
 800a7ae:	b085      	sub	sp, #20
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	60f8      	str	r0, [r7, #12]
 800a7b4:	60b9      	str	r1, [r7, #8]
 800a7b6:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	f7fd fc05 	bl	8007fc8 <_ZSt7forwardIRN4tama13DisplayConfigEEOT_RNSt16remove_referenceIS3_E4typeE>
 800a7be:	4604      	mov	r4, r0
 800a7c0:	68bb      	ldr	r3, [r7, #8]
 800a7c2:	4619      	mov	r1, r3
 800a7c4:	2030      	movs	r0, #48	; 0x30
 800a7c6:	f7f5 feb2 	bl	800052e <_ZnwjPv>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d003      	beq.n	800a7d8 <_ZN9__gnu_cxx13new_allocatorIN4tama16Nokia5510DisplayEE9constructIS2_JRNS1_13DisplayConfigEEEEvPT_DpOT0_+0x2c>
 800a7d0:	4621      	mov	r1, r4
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	f003 fc98 	bl	800e108 <_ZN4tama16Nokia5510DisplayC1ERNS_13DisplayConfigE>
 800a7d8:	bf00      	nop
 800a7da:	3714      	adds	r7, #20
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	bd90      	pop	{r4, r7, pc}

0800a7e0 <_ZNSaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) throw() { }
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b082      	sub	sp, #8
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
 800a7e8:	6039      	str	r1, [r7, #0]
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	f001 faee 	bl	800bdcc <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	3708      	adds	r7, #8
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	bd80      	pop	{r7, pc}

0800a7fa <_ZNSaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>:
      ~allocator() throw() { }
 800a7fa:	b580      	push	{r7, lr}
 800a7fc:	b082      	sub	sp, #8
 800a7fe:	af00      	add	r7, sp, #0
 800a800:	6078      	str	r0, [r7, #4]
 800a802:	6878      	ldr	r0, [r7, #4]
 800a804:	f001 faed 	bl	800bde2 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	4618      	mov	r0, r3
 800a80c:	3708      	adds	r7, #8
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}

0800a812 <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>:
    __allocate_guarded(_Alloc& __a)
 800a812:	b580      	push	{r7, lr}
 800a814:	b082      	sub	sp, #8
 800a816:	af00      	add	r7, sp, #0
 800a818:	6078      	str	r0, [r7, #4]
 800a81a:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 800a81c:	2101      	movs	r1, #1
 800a81e:	6838      	ldr	r0, [r7, #0]
 800a820:	f001 faea 	bl	800bdf8 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>
 800a824:	4603      	mov	r3, r0
 800a826:	461a      	mov	r2, r3
 800a828:	6839      	ldr	r1, [r7, #0]
 800a82a:	6878      	ldr	r0, [r7, #4]
 800a82c:	f001 faf3 	bl	800be16 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
    }
 800a830:	6878      	ldr	r0, [r7, #4]
 800a832:	3708      	adds	r7, #8
 800a834:	46bd      	mov	sp, r7
 800a836:	bd80      	pop	{r7, pc}

0800a838 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>:
      ~__allocated_ptr()
 800a838:	b580      	push	{r7, lr}
 800a83a:	b082      	sub	sp, #8
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	685b      	ldr	r3, [r3, #4]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d007      	beq.n	800a858 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	6818      	ldr	r0, [r3, #0]
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	685b      	ldr	r3, [r3, #4]
 800a850:	2201      	movs	r2, #1
 800a852:	4619      	mov	r1, r3
 800a854:	f001 faf3 	bl	800be3e <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>
      }
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	4618      	mov	r0, r3
 800a85c:	3708      	adds	r7, #8
 800a85e:	46bd      	mov	sp, r7
 800a860:	bd80      	pop	{r7, pc}

0800a862 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 800a862:	b580      	push	{r7, lr}
 800a864:	b082      	sub	sp, #8
 800a866:	af00      	add	r7, sp, #0
 800a868:	6078      	str	r0, [r7, #4]
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	685b      	ldr	r3, [r3, #4]
 800a86e:	4618      	mov	r0, r3
 800a870:	f001 faf4 	bl	800be5c <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>
 800a874:	4603      	mov	r3, r0
 800a876:	4618      	mov	r0, r3
 800a878:	3708      	adds	r7, #8
 800a87a:	46bd      	mov	sp, r7
 800a87c:	bd80      	pop	{r7, pc}

0800a87e <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, false>
 800a87e:	b580      	push	{r7, lr}
 800a880:	b082      	sub	sp, #8
 800a882:	af00      	add	r7, sp, #0
 800a884:	6078      	str	r0, [r7, #4]
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	4618      	mov	r0, r3
 800a88a:	f7fe fa33 	bl	8008cf4 <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	4618      	mov	r0, r3
 800a892:	3708      	adds	r7, #8
 800a894:	46bd      	mov	sp, r7
 800a896:	bd80      	pop	{r7, pc}

0800a898 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama16Nokia5510DisplayEELb1EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp
 800a898:	b580      	push	{r7, lr}
 800a89a:	b082      	sub	sp, #8
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
 800a8a0:	6878      	ldr	r0, [r7, #4]
 800a8a2:	f7fd fda2 	bl	80083ea <_ZNSaIN4tama16Nokia5510DisplayEED1Ev>
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	3708      	adds	r7, #8
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	bd80      	pop	{r7, pc}

0800a8b0 <_ZNSt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>:
      class _Impl : _Sp_ebo_helper<0, _Deleter>, _Sp_ebo_helper<1, _Alloc>
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b082      	sub	sp, #8
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	3301      	adds	r3, #1
 800a8bc:	4618      	mov	r0, r3
 800a8be:	f7ff ffeb 	bl	800a898 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama16Nokia5510DisplayEELb1EED1Ev>
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	f7ff ffda 	bl	800a87e <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	3708      	adds	r7, #8
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bd80      	pop	{r7, pc}

0800a8d4 <_ZNSt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 800a8d4:	b590      	push	{r4, r7, lr}
 800a8d6:	b087      	sub	sp, #28
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	60f8      	str	r0, [r7, #12]
 800a8dc:	60b9      	str	r1, [r7, #8]
 800a8de:	607a      	str	r2, [r7, #4]
 800a8e0:	603b      	str	r3, [r7, #0]
      : _M_impl(__p, std::move(__d), __a) { }
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	f7f7 ff19 	bl	800271c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800a8ea:	4a10      	ldr	r2, [pc, #64]	; (800a92c <_ZNSt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_+0x58>)
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	601a      	str	r2, [r3, #0]
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	f103 040c 	add.w	r4, r3, #12
 800a8f6:	6878      	ldr	r0, [r7, #4]
 800a8f8:	f7fe ffde 	bl	80098b8 <_ZSt4moveIRNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800a8fc:	4602      	mov	r2, r0
 800a8fe:	f107 0314 	add.w	r3, r7, #20
 800a902:	4611      	mov	r1, r2
 800a904:	4618      	mov	r0, r3
 800a906:	f7fe ffe2 	bl	80098ce <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 800a90a:	f107 0214 	add.w	r2, r7, #20
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	68b9      	ldr	r1, [r7, #8]
 800a912:	4620      	mov	r0, r4
 800a914:	f001 faad 	bl	800be72 <_ZNSt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>
 800a918:	f107 0314 	add.w	r3, r7, #20
 800a91c:	4618      	mov	r0, r3
 800a91e:	f7fe f9e9 	bl	8008cf4 <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	4618      	mov	r0, r3
 800a926:	371c      	adds	r7, #28
 800a928:	46bd      	mov	sp, r7
 800a92a:	bd90      	pop	{r4, r7, pc}
 800a92c:	080171a8 	.word	0x080171a8

0800a930 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 800a930:	b480      	push	{r7}
 800a932:	b083      	sub	sp, #12
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
 800a938:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2200      	movs	r2, #0
 800a93e:	605a      	str	r2, [r3, #4]
	return *this;
 800a940:	687b      	ldr	r3, [r7, #4]
      }
 800a942:	4618      	mov	r0, r3
 800a944:	370c      	adds	r7, #12
 800a946:	46bd      	mov	sp, r7
 800a948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94c:	4770      	bx	lr

0800a94e <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>:
          void operator()(typename _Alloc::value_type* __ptr)
 800a94e:	b590      	push	{r4, r7, lr}
 800a950:	b085      	sub	sp, #20
 800a952:	af00      	add	r7, sp, #0
 800a954:	6078      	str	r0, [r7, #4]
 800a956:	6039      	str	r1, [r7, #0]
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 800a958:	6879      	ldr	r1, [r7, #4]
 800a95a:	f107 0308 	add.w	r3, r7, #8
 800a95e:	683a      	ldr	r2, [r7, #0]
 800a960:	4618      	mov	r0, r3
 800a962:	f7ff fef5 	bl	800a750 <_ZNSt15__allocated_ptrISaIN4tama16Nokia5510DisplayEEEC1ERS2_PS1_>
	    allocator_traits<_Alloc>::destroy(_M_alloc, __guard.get());
 800a966:	687c      	ldr	r4, [r7, #4]
 800a968:	f107 0308 	add.w	r3, r7, #8
 800a96c:	4618      	mov	r0, r3
 800a96e:	f7fe ff73 	bl	8009858 <_ZNSt15__allocated_ptrISaIN4tama16Nokia5510DisplayEEE3getEv>
 800a972:	4603      	mov	r3, r0
 800a974:	4619      	mov	r1, r3
 800a976:	4620      	mov	r0, r4
 800a978:	f001 fa99 	bl	800beae <_ZNSt16allocator_traitsISaIN4tama16Nokia5510DisplayEEE7destroyIS1_EEvRS2_PT_>
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 800a97c:	f107 0308 	add.w	r3, r7, #8
 800a980:	4618      	mov	r0, r3
 800a982:	f7fe ff54 	bl	800982e <_ZNSt15__allocated_ptrISaIN4tama16Nokia5510DisplayEEED1Ev>
          }
 800a986:	bf00      	nop
 800a988:	3714      	adds	r7, #20
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd90      	pop	{r4, r7, pc}

0800a98e <_ZN9__gnu_cxx13new_allocatorIN4tama18Stm32TextureLoaderEEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800a98e:	b480      	push	{r7}
 800a990:	b083      	sub	sp, #12
 800a992:	af00      	add	r7, sp, #0
 800a994:	6078      	str	r0, [r7, #4]
 800a996:	6039      	str	r1, [r7, #0]
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	4618      	mov	r0, r3
 800a99c:	370c      	adds	r7, #12
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a4:	4770      	bx	lr

0800a9a6 <_ZNSt16allocator_traitsISaIN4tama18Stm32TextureLoaderEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800a9a6:	b580      	push	{r7, lr}
 800a9a8:	b082      	sub	sp, #8
 800a9aa:	af00      	add	r7, sp, #0
 800a9ac:	6078      	str	r0, [r7, #4]
 800a9ae:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	6839      	ldr	r1, [r7, #0]
 800a9b4:	6878      	ldr	r0, [r7, #4]
 800a9b6:	f001 fa87 	bl	800bec8 <_ZN9__gnu_cxx13new_allocatorIN4tama18Stm32TextureLoaderEE8allocateEjPKv>
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	4618      	mov	r0, r3
 800a9be:	3708      	adds	r7, #8
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	bd80      	pop	{r7, pc}

0800a9c4 <_ZNSt15__allocated_ptrISaIN4tama18Stm32TextureLoaderEEEC1ERS2_PS1_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b084      	sub	sp, #16
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	60f8      	str	r0, [r7, #12]
 800a9cc:	60b9      	str	r1, [r7, #8]
 800a9ce:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800a9d0:	68b8      	ldr	r0, [r7, #8]
 800a9d2:	f001 fa97 	bl	800bf04 <_ZSt11__addressofISaIN4tama18Stm32TextureLoaderEEEPT_RS3_>
 800a9d6:	4602      	mov	r2, r0
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	601a      	str	r2, [r3, #0]
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	687a      	ldr	r2, [r7, #4]
 800a9e0:	605a      	str	r2, [r3, #4]
      { }
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	3710      	adds	r7, #16
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	bd80      	pop	{r7, pc}

0800a9ec <_ZNSt16allocator_traitsISaIN4tama18Stm32TextureLoaderEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b084      	sub	sp, #16
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	60f8      	str	r0, [r7, #12]
 800a9f4:	60b9      	str	r1, [r7, #8]
 800a9f6:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800a9f8:	687a      	ldr	r2, [r7, #4]
 800a9fa:	68b9      	ldr	r1, [r7, #8]
 800a9fc:	68f8      	ldr	r0, [r7, #12]
 800a9fe:	f001 fa8c 	bl	800bf1a <_ZN9__gnu_cxx13new_allocatorIN4tama18Stm32TextureLoaderEE10deallocateEPS2_j>
 800aa02:	bf00      	nop
 800aa04:	3710      	adds	r7, #16
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd80      	pop	{r7, pc}

0800aa0a <_ZNSt15__allocated_ptrISaIN4tama18Stm32TextureLoaderEEE10_S_raw_ptrEPS1_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 800aa0a:	b480      	push	{r7}
 800aa0c:	b083      	sub	sp, #12
 800aa0e:	af00      	add	r7, sp, #0
 800aa10:	6078      	str	r0, [r7, #4]
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	4618      	mov	r0, r3
 800aa16:	370c      	adds	r7, #12
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1e:	4770      	bx	lr

0800aa20 <_ZN9__gnu_cxx13new_allocatorIN4tama18Stm32TextureLoaderEE9constructIS2_JEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b082      	sub	sp, #8
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
 800aa28:	6039      	str	r1, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	4619      	mov	r1, r3
 800aa2e:	2004      	movs	r0, #4
 800aa30:	f7f5 fd7d 	bl	800052e <_ZnwjPv>
 800aa34:	4603      	mov	r3, r0
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d004      	beq.n	800aa44 <_ZN9__gnu_cxx13new_allocatorIN4tama18Stm32TextureLoaderEE9constructIS2_JEEEvPT_DpOT0_+0x24>
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	601a      	str	r2, [r3, #0]
 800aa3e:	4618      	mov	r0, r3
 800aa40:	f7fa ff7c 	bl	800593c <_ZN4tama18Stm32TextureLoaderC1Ev>
 800aa44:	bf00      	nop
 800aa46:	3708      	adds	r7, #8
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd80      	pop	{r7, pc}

0800aa4c <_ZNSaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) throw() { }
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b082      	sub	sp, #8
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
 800aa54:	6039      	str	r1, [r7, #0]
 800aa56:	6878      	ldr	r0, [r7, #4]
 800aa58:	f001 fa6c 	bl	800bf34 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	4618      	mov	r0, r3
 800aa60:	3708      	adds	r7, #8
 800aa62:	46bd      	mov	sp, r7
 800aa64:	bd80      	pop	{r7, pc}

0800aa66 <_ZNSaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>:
      ~allocator() throw() { }
 800aa66:	b580      	push	{r7, lr}
 800aa68:	b082      	sub	sp, #8
 800aa6a:	af00      	add	r7, sp, #0
 800aa6c:	6078      	str	r0, [r7, #4]
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f001 fa6b 	bl	800bf4a <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	4618      	mov	r0, r3
 800aa78:	3708      	adds	r7, #8
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}

0800aa7e <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>:
    __allocate_guarded(_Alloc& __a)
 800aa7e:	b580      	push	{r7, lr}
 800aa80:	b082      	sub	sp, #8
 800aa82:	af00      	add	r7, sp, #0
 800aa84:	6078      	str	r0, [r7, #4]
 800aa86:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 800aa88:	2101      	movs	r1, #1
 800aa8a:	6838      	ldr	r0, [r7, #0]
 800aa8c:	f001 fa68 	bl	800bf60 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>
 800aa90:	4603      	mov	r3, r0
 800aa92:	461a      	mov	r2, r3
 800aa94:	6839      	ldr	r1, [r7, #0]
 800aa96:	6878      	ldr	r0, [r7, #4]
 800aa98:	f001 fa71 	bl	800bf7e <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
    }
 800aa9c:	6878      	ldr	r0, [r7, #4]
 800aa9e:	3708      	adds	r7, #8
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}

0800aaa4 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>:
      ~__allocated_ptr()
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b082      	sub	sp, #8
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	685b      	ldr	r3, [r3, #4]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d007      	beq.n	800aac4 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	6818      	ldr	r0, [r3, #0]
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	685b      	ldr	r3, [r3, #4]
 800aabc:	2201      	movs	r2, #1
 800aabe:	4619      	mov	r1, r3
 800aac0:	f001 fa71 	bl	800bfa6 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>
      }
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	4618      	mov	r0, r3
 800aac8:	3708      	adds	r7, #8
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bd80      	pop	{r7, pc}

0800aace <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 800aace:	b580      	push	{r7, lr}
 800aad0:	b082      	sub	sp, #8
 800aad2:	af00      	add	r7, sp, #0
 800aad4:	6078      	str	r0, [r7, #4]
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	685b      	ldr	r3, [r3, #4]
 800aada:	4618      	mov	r0, r3
 800aadc:	f001 fa72 	bl	800bfc4 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>
 800aae0:	4603      	mov	r3, r0
 800aae2:	4618      	mov	r0, r3
 800aae4:	3708      	adds	r7, #8
 800aae6:	46bd      	mov	sp, r7
 800aae8:	bd80      	pop	{r7, pc}

0800aaea <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, false>
 800aaea:	b580      	push	{r7, lr}
 800aaec:	b082      	sub	sp, #8
 800aaee:	af00      	add	r7, sp, #0
 800aaf0:	6078      	str	r0, [r7, #4]
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	f7fe f995 	bl	8008e24 <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	4618      	mov	r0, r3
 800aafe:	3708      	adds	r7, #8
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bd80      	pop	{r7, pc}

0800ab04 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama18Stm32TextureLoaderEELb1EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b082      	sub	sp, #8
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
 800ab0c:	6878      	ldr	r0, [r7, #4]
 800ab0e:	f7fd fcb5 	bl	800847c <_ZNSaIN4tama18Stm32TextureLoaderEED1Ev>
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	4618      	mov	r0, r3
 800ab16:	3708      	adds	r7, #8
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	bd80      	pop	{r7, pc}

0800ab1c <_ZNSt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>:
      class _Impl : _Sp_ebo_helper<0, _Deleter>, _Sp_ebo_helper<1, _Alloc>
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b082      	sub	sp, #8
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	3301      	adds	r3, #1
 800ab28:	4618      	mov	r0, r3
 800ab2a:	f7ff ffeb 	bl	800ab04 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama18Stm32TextureLoaderEELb1EED1Ev>
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	4618      	mov	r0, r3
 800ab32:	f7ff ffda 	bl	800aaea <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	4618      	mov	r0, r3
 800ab3a:	3708      	adds	r7, #8
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	bd80      	pop	{r7, pc}

0800ab40 <_ZNSt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 800ab40:	b590      	push	{r4, r7, lr}
 800ab42:	b087      	sub	sp, #28
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	60f8      	str	r0, [r7, #12]
 800ab48:	60b9      	str	r1, [r7, #8]
 800ab4a:	607a      	str	r2, [r7, #4]
 800ab4c:	603b      	str	r3, [r7, #0]
      : _M_impl(__p, std::move(__d), __a) { }
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	4618      	mov	r0, r3
 800ab52:	f7f7 fde3 	bl	800271c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800ab56:	4a10      	ldr	r2, [pc, #64]	; (800ab98 <_ZNSt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_+0x58>)
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	601a      	str	r2, [r3, #0]
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	f103 040c 	add.w	r4, r3, #12
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	f7fe ff90 	bl	8009a88 <_ZSt4moveIRNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800ab68:	4602      	mov	r2, r0
 800ab6a:	f107 0314 	add.w	r3, r7, #20
 800ab6e:	4611      	mov	r1, r2
 800ab70:	4618      	mov	r0, r3
 800ab72:	f7fe ff94 	bl	8009a9e <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 800ab76:	f107 0214 	add.w	r2, r7, #20
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	68b9      	ldr	r1, [r7, #8]
 800ab7e:	4620      	mov	r0, r4
 800ab80:	f001 fa2b 	bl	800bfda <_ZNSt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>
 800ab84:	f107 0314 	add.w	r3, r7, #20
 800ab88:	4618      	mov	r0, r3
 800ab8a:	f7fe f94b 	bl	8008e24 <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	4618      	mov	r0, r3
 800ab92:	371c      	adds	r7, #28
 800ab94:	46bd      	mov	sp, r7
 800ab96:	bd90      	pop	{r4, r7, pc}
 800ab98:	0801718c 	.word	0x0801718c

0800ab9c <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 800ab9c:	b480      	push	{r7}
 800ab9e:	b083      	sub	sp, #12
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
 800aba4:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	2200      	movs	r2, #0
 800abaa:	605a      	str	r2, [r3, #4]
	return *this;
 800abac:	687b      	ldr	r3, [r7, #4]
      }
 800abae:	4618      	mov	r0, r3
 800abb0:	370c      	adds	r7, #12
 800abb2:	46bd      	mov	sp, r7
 800abb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb8:	4770      	bx	lr

0800abba <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>:
          void operator()(typename _Alloc::value_type* __ptr)
 800abba:	b590      	push	{r4, r7, lr}
 800abbc:	b085      	sub	sp, #20
 800abbe:	af00      	add	r7, sp, #0
 800abc0:	6078      	str	r0, [r7, #4]
 800abc2:	6039      	str	r1, [r7, #0]
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 800abc4:	6879      	ldr	r1, [r7, #4]
 800abc6:	f107 0308 	add.w	r3, r7, #8
 800abca:	683a      	ldr	r2, [r7, #0]
 800abcc:	4618      	mov	r0, r3
 800abce:	f7ff fef9 	bl	800a9c4 <_ZNSt15__allocated_ptrISaIN4tama18Stm32TextureLoaderEEEC1ERS2_PS1_>
	    allocator_traits<_Alloc>::destroy(_M_alloc, __guard.get());
 800abd2:	687c      	ldr	r4, [r7, #4]
 800abd4:	f107 0308 	add.w	r3, r7, #8
 800abd8:	4618      	mov	r0, r3
 800abda:	f7fe ff2b 	bl	8009a34 <_ZNSt15__allocated_ptrISaIN4tama18Stm32TextureLoaderEEE3getEv>
 800abde:	4603      	mov	r3, r0
 800abe0:	4619      	mov	r1, r3
 800abe2:	4620      	mov	r0, r4
 800abe4:	f001 fa17 	bl	800c016 <_ZNSt16allocator_traitsISaIN4tama18Stm32TextureLoaderEEE7destroyIS1_EEvRS2_PT_>
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 800abe8:	f107 0308 	add.w	r3, r7, #8
 800abec:	4618      	mov	r0, r3
 800abee:	f7fe ff0c 	bl	8009a0a <_ZNSt15__allocated_ptrISaIN4tama18Stm32TextureLoaderEEED1Ev>
          }
 800abf2:	bf00      	nop
 800abf4:	3714      	adds	r7, #20
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd90      	pop	{r4, r7, pc}

0800abfa <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800abfa:	b480      	push	{r7}
 800abfc:	b083      	sub	sp, #12
 800abfe:	af00      	add	r7, sp, #0
 800ac00:	6078      	str	r0, [r7, #4]
 800ac02:	6039      	str	r1, [r7, #0]
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	4618      	mov	r0, r3
 800ac08:	370c      	adds	r7, #12
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac10:	4770      	bx	lr

0800ac12 <_ZNSt16allocator_traitsISaIN4tama27Nokia5110DisplayDataManagerEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800ac12:	b580      	push	{r7, lr}
 800ac14:	b082      	sub	sp, #8
 800ac16:	af00      	add	r7, sp, #0
 800ac18:	6078      	str	r0, [r7, #4]
 800ac1a:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	6839      	ldr	r1, [r7, #0]
 800ac20:	6878      	ldr	r0, [r7, #4]
 800ac22:	f001 fa05 	bl	800c030 <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEE8allocateEjPKv>
 800ac26:	4603      	mov	r3, r0
 800ac28:	4618      	mov	r0, r3
 800ac2a:	3708      	adds	r7, #8
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	bd80      	pop	{r7, pc}

0800ac30 <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEEC1ERS2_PS1_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b084      	sub	sp, #16
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	60f8      	str	r0, [r7, #12]
 800ac38:	60b9      	str	r1, [r7, #8]
 800ac3a:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800ac3c:	68b8      	ldr	r0, [r7, #8]
 800ac3e:	f001 fa18 	bl	800c072 <_ZSt11__addressofISaIN4tama27Nokia5110DisplayDataManagerEEEPT_RS3_>
 800ac42:	4602      	mov	r2, r0
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	601a      	str	r2, [r3, #0]
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	687a      	ldr	r2, [r7, #4]
 800ac4c:	605a      	str	r2, [r3, #4]
      { }
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	4618      	mov	r0, r3
 800ac52:	3710      	adds	r7, #16
 800ac54:	46bd      	mov	sp, r7
 800ac56:	bd80      	pop	{r7, pc}

0800ac58 <_ZNSt16allocator_traitsISaIN4tama27Nokia5110DisplayDataManagerEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b084      	sub	sp, #16
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	60f8      	str	r0, [r7, #12]
 800ac60:	60b9      	str	r1, [r7, #8]
 800ac62:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800ac64:	687a      	ldr	r2, [r7, #4]
 800ac66:	68b9      	ldr	r1, [r7, #8]
 800ac68:	68f8      	ldr	r0, [r7, #12]
 800ac6a:	f001 fa0d 	bl	800c088 <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEE10deallocateEPS2_j>
 800ac6e:	bf00      	nop
 800ac70:	3710      	adds	r7, #16
 800ac72:	46bd      	mov	sp, r7
 800ac74:	bd80      	pop	{r7, pc}

0800ac76 <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEE10_S_raw_ptrEPS1_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 800ac76:	b480      	push	{r7}
 800ac78:	b083      	sub	sp, #12
 800ac7a:	af00      	add	r7, sp, #0
 800ac7c:	6078      	str	r0, [r7, #4]
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	4618      	mov	r0, r3
 800ac82:	370c      	adds	r7, #12
 800ac84:	46bd      	mov	sp, r7
 800ac86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8a:	4770      	bx	lr

0800ac8c <_ZN4tama18DisplayDataManagerC1Ev>:

#include "../display-data/DisplayData.h"

namespace tama
{
    class DisplayDataManager
 800ac8c:	b480      	push	{r7}
 800ac8e:	b083      	sub	sp, #12
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
 800ac94:	4a04      	ldr	r2, [pc, #16]	; (800aca8 <_ZN4tama18DisplayDataManagerC1Ev+0x1c>)
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	601a      	str	r2, [r3, #0]
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	370c      	adds	r7, #12
 800aca0:	46bd      	mov	sp, r7
 800aca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca6:	4770      	bx	lr
 800aca8:	08017200 	.word	0x08017200

0800acac <_ZN4tama27Nokia5110DisplayDataManagerC1Ev>:
#include "../../Core/ui/display/display-data/DisplayData.h"
#include "../../Configuration/display.config.h"

namespace tama
{
    class Nokia5110DisplayDataManager : public DisplayDataManager
 800acac:	b580      	push	{r7, lr}
 800acae:	b082      	sub	sp, #8
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	4618      	mov	r0, r3
 800acb8:	f7ff ffe8 	bl	800ac8c <_ZN4tama18DisplayDataManagerC1Ev>
 800acbc:	4a0f      	ldr	r2, [pc, #60]	; (800acfc <_ZN4tama27Nokia5110DisplayDataManagerC1Ev+0x50>)
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	601a      	str	r2, [r3, #0]
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	2208      	movs	r2, #8
 800acc6:	605a      	str	r2, [r3, #4]
    public:
        DisplayData getActiveSceneDisplayData(std::shared_ptr<Texture>) override;

    private:
        unsigned segmentSize = 8;
        unsigned segmentsInHeight = Config_Display_Height / segmentSize; // 6
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	685b      	ldr	r3, [r3, #4]
 800accc:	2230      	movs	r2, #48	; 0x30
 800acce:	fbb2 f2f3 	udiv	r2, r2, r3
    class Nokia5110DisplayDataManager : public DisplayDataManager
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	609a      	str	r2, [r3, #8]
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	2254      	movs	r2, #84	; 0x54
 800acda:	60da      	str	r2, [r3, #12]
        unsigned segmentsInWidth = Config_Display_Width;
        unsigned dataSize = segmentsInHeight * segmentsInWidth;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	689b      	ldr	r3, [r3, #8]
 800ace0:	687a      	ldr	r2, [r7, #4]
 800ace2:	68d2      	ldr	r2, [r2, #12]
 800ace4:	fb02 f203 	mul.w	r2, r2, r3
    class Nokia5110DisplayDataManager : public DisplayDataManager
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	611a      	str	r2, [r3, #16]
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	2201      	movs	r2, #1
 800acf0:	615a      	str	r2, [r3, #20]
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	4618      	mov	r0, r3
 800acf6:	3708      	adds	r7, #8
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bd80      	pop	{r7, pc}
 800acfc:	08017238 	.word	0x08017238

0800ad00 <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEE9constructIS2_JEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b082      	sub	sp, #8
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
 800ad08:	6039      	str	r1, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	4619      	mov	r1, r3
 800ad0e:	2018      	movs	r0, #24
 800ad10:	f7f5 fc0d 	bl	800052e <_ZnwjPv>
 800ad14:	4601      	mov	r1, r0
 800ad16:	2900      	cmp	r1, #0
 800ad18:	d00a      	beq.n	800ad30 <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEE9constructIS2_JEEEvPT_DpOT0_+0x30>
 800ad1a:	460a      	mov	r2, r1
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	6013      	str	r3, [r2, #0]
 800ad20:	6053      	str	r3, [r2, #4]
 800ad22:	6093      	str	r3, [r2, #8]
 800ad24:	60d3      	str	r3, [r2, #12]
 800ad26:	6113      	str	r3, [r2, #16]
 800ad28:	6153      	str	r3, [r2, #20]
 800ad2a:	4608      	mov	r0, r1
 800ad2c:	f7ff ffbe 	bl	800acac <_ZN4tama27Nokia5110DisplayDataManagerC1Ev>
 800ad30:	bf00      	nop
 800ad32:	3708      	adds	r7, #8
 800ad34:	46bd      	mov	sp, r7
 800ad36:	bd80      	pop	{r7, pc}

0800ad38 <_ZNSaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) throw() { }
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b082      	sub	sp, #8
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
 800ad40:	6039      	str	r1, [r7, #0]
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f001 f9ad 	bl	800c0a2 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	3708      	adds	r7, #8
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}

0800ad52 <_ZNSaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>:
      ~allocator() throw() { }
 800ad52:	b580      	push	{r7, lr}
 800ad54:	b082      	sub	sp, #8
 800ad56:	af00      	add	r7, sp, #0
 800ad58:	6078      	str	r0, [r7, #4]
 800ad5a:	6878      	ldr	r0, [r7, #4]
 800ad5c:	f001 f9ac 	bl	800c0b8 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	4618      	mov	r0, r3
 800ad64:	3708      	adds	r7, #8
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}

0800ad6a <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>:
    __allocate_guarded(_Alloc& __a)
 800ad6a:	b580      	push	{r7, lr}
 800ad6c:	b082      	sub	sp, #8
 800ad6e:	af00      	add	r7, sp, #0
 800ad70:	6078      	str	r0, [r7, #4]
 800ad72:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 800ad74:	2101      	movs	r1, #1
 800ad76:	6838      	ldr	r0, [r7, #0]
 800ad78:	f001 f9a9 	bl	800c0ce <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>
 800ad7c:	4603      	mov	r3, r0
 800ad7e:	461a      	mov	r2, r3
 800ad80:	6839      	ldr	r1, [r7, #0]
 800ad82:	6878      	ldr	r0, [r7, #4]
 800ad84:	f001 f9b2 	bl	800c0ec <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
    }
 800ad88:	6878      	ldr	r0, [r7, #4]
 800ad8a:	3708      	adds	r7, #8
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bd80      	pop	{r7, pc}

0800ad90 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>:
      ~__allocated_ptr()
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b082      	sub	sp, #8
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	685b      	ldr	r3, [r3, #4]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d007      	beq.n	800adb0 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	6818      	ldr	r0, [r3, #0]
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	685b      	ldr	r3, [r3, #4]
 800ada8:	2201      	movs	r2, #1
 800adaa:	4619      	mov	r1, r3
 800adac:	f001 f9b2 	bl	800c114 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>
      }
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	4618      	mov	r0, r3
 800adb4:	3708      	adds	r7, #8
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}

0800adba <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 800adba:	b580      	push	{r7, lr}
 800adbc:	b082      	sub	sp, #8
 800adbe:	af00      	add	r7, sp, #0
 800adc0:	6078      	str	r0, [r7, #4]
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	685b      	ldr	r3, [r3, #4]
 800adc6:	4618      	mov	r0, r3
 800adc8:	f001 f9b3 	bl	800c132 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>
 800adcc:	4603      	mov	r3, r0
 800adce:	4618      	mov	r0, r3
 800add0:	3708      	adds	r7, #8
 800add2:	46bd      	mov	sp, r7
 800add4:	bd80      	pop	{r7, pc}

0800add6 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, false>
 800add6:	b580      	push	{r7, lr}
 800add8:	b082      	sub	sp, #8
 800adda:	af00      	add	r7, sp, #0
 800addc:	6078      	str	r0, [r7, #4]
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	4618      	mov	r0, r3
 800ade2:	f7fe f8b2 	bl	8008f4a <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	4618      	mov	r0, r3
 800adea:	3708      	adds	r7, #8
 800adec:	46bd      	mov	sp, r7
 800adee:	bd80      	pop	{r7, pc}

0800adf0 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama27Nokia5110DisplayDataManagerEELb1EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b082      	sub	sp, #8
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	f7fd fb83 	bl	8008504 <_ZNSaIN4tama27Nokia5110DisplayDataManagerEED1Ev>
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	4618      	mov	r0, r3
 800ae02:	3708      	adds	r7, #8
 800ae04:	46bd      	mov	sp, r7
 800ae06:	bd80      	pop	{r7, pc}

0800ae08 <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>:
      class _Impl : _Sp_ebo_helper<0, _Deleter>, _Sp_ebo_helper<1, _Alloc>
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b082      	sub	sp, #8
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	3301      	adds	r3, #1
 800ae14:	4618      	mov	r0, r3
 800ae16:	f7ff ffeb 	bl	800adf0 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama27Nokia5110DisplayDataManagerEELb1EED1Ev>
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	f7ff ffda 	bl	800add6 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	4618      	mov	r0, r3
 800ae26:	3708      	adds	r7, #8
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	bd80      	pop	{r7, pc}

0800ae2c <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 800ae2c:	b590      	push	{r4, r7, lr}
 800ae2e:	b087      	sub	sp, #28
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	60f8      	str	r0, [r7, #12]
 800ae34:	60b9      	str	r1, [r7, #8]
 800ae36:	607a      	str	r2, [r7, #4]
 800ae38:	603b      	str	r3, [r7, #0]
      : _M_impl(__p, std::move(__d), __a) { }
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	f7f7 fc6d 	bl	800271c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800ae42:	4a10      	ldr	r2, [pc, #64]	; (800ae84 <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_+0x58>)
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	601a      	str	r2, [r3, #0]
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	f103 040c 	add.w	r4, r3, #12
 800ae4e:	6878      	ldr	r0, [r7, #4]
 800ae50:	f7fe ff02 	bl	8009c58 <_ZSt4moveIRNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800ae54:	4602      	mov	r2, r0
 800ae56:	f107 0314 	add.w	r3, r7, #20
 800ae5a:	4611      	mov	r1, r2
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	f7fe ff06 	bl	8009c6e <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 800ae62:	f107 0214 	add.w	r2, r7, #20
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	68b9      	ldr	r1, [r7, #8]
 800ae6a:	4620      	mov	r0, r4
 800ae6c:	f001 f96c 	bl	800c148 <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>
 800ae70:	f107 0314 	add.w	r3, r7, #20
 800ae74:	4618      	mov	r0, r3
 800ae76:	f7fe f868 	bl	8008f4a <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	371c      	adds	r7, #28
 800ae80:	46bd      	mov	sp, r7
 800ae82:	bd90      	pop	{r4, r7, pc}
 800ae84:	08017170 	.word	0x08017170

0800ae88 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 800ae88:	b480      	push	{r7}
 800ae8a:	b083      	sub	sp, #12
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
 800ae90:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2200      	movs	r2, #0
 800ae96:	605a      	str	r2, [r3, #4]
	return *this;
 800ae98:	687b      	ldr	r3, [r7, #4]
      }
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	370c      	adds	r7, #12
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea4:	4770      	bx	lr

0800aea6 <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>:
          void operator()(typename _Alloc::value_type* __ptr)
 800aea6:	b590      	push	{r4, r7, lr}
 800aea8:	b085      	sub	sp, #20
 800aeaa:	af00      	add	r7, sp, #0
 800aeac:	6078      	str	r0, [r7, #4]
 800aeae:	6039      	str	r1, [r7, #0]
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 800aeb0:	6879      	ldr	r1, [r7, #4]
 800aeb2:	f107 0308 	add.w	r3, r7, #8
 800aeb6:	683a      	ldr	r2, [r7, #0]
 800aeb8:	4618      	mov	r0, r3
 800aeba:	f7ff feb9 	bl	800ac30 <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEEC1ERS2_PS1_>
	    allocator_traits<_Alloc>::destroy(_M_alloc, __guard.get());
 800aebe:	687c      	ldr	r4, [r7, #4]
 800aec0:	f107 0308 	add.w	r3, r7, #8
 800aec4:	4618      	mov	r0, r3
 800aec6:	f7fe fe9d 	bl	8009c04 <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEE3getEv>
 800aeca:	4603      	mov	r3, r0
 800aecc:	4619      	mov	r1, r3
 800aece:	4620      	mov	r0, r4
 800aed0:	f001 f958 	bl	800c184 <_ZNSt16allocator_traitsISaIN4tama27Nokia5110DisplayDataManagerEEE7destroyIS1_EEvRS2_PT_>
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 800aed4:	f107 0308 	add.w	r3, r7, #8
 800aed8:	4618      	mov	r0, r3
 800aeda:	f7fe fe7e 	bl	8009bda <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEED1Ev>
          }
 800aede:	bf00      	nop
 800aee0:	3714      	adds	r7, #20
 800aee2:	46bd      	mov	sp, r7
 800aee4:	bd90      	pop	{r4, r7, pc}

0800aee6 <_ZN9__gnu_cxx13new_allocatorIN4tama16Stm32TimeMonitorEEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800aee6:	b480      	push	{r7}
 800aee8:	b083      	sub	sp, #12
 800aeea:	af00      	add	r7, sp, #0
 800aeec:	6078      	str	r0, [r7, #4]
 800aeee:	6039      	str	r1, [r7, #0]
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	4618      	mov	r0, r3
 800aef4:	370c      	adds	r7, #12
 800aef6:	46bd      	mov	sp, r7
 800aef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefc:	4770      	bx	lr

0800aefe <_ZNSt16allocator_traitsISaIN4tama16Stm32TimeMonitorEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800aefe:	b580      	push	{r7, lr}
 800af00:	b082      	sub	sp, #8
 800af02:	af00      	add	r7, sp, #0
 800af04:	6078      	str	r0, [r7, #4]
 800af06:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800af08:	2200      	movs	r2, #0
 800af0a:	6839      	ldr	r1, [r7, #0]
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	f001 f946 	bl	800c19e <_ZN9__gnu_cxx13new_allocatorIN4tama16Stm32TimeMonitorEE8allocateEjPKv>
 800af12:	4603      	mov	r3, r0
 800af14:	4618      	mov	r0, r3
 800af16:	3708      	adds	r7, #8
 800af18:	46bd      	mov	sp, r7
 800af1a:	bd80      	pop	{r7, pc}

0800af1c <_ZNSt15__allocated_ptrISaIN4tama16Stm32TimeMonitorEEEC1ERS2_PS1_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b084      	sub	sp, #16
 800af20:	af00      	add	r7, sp, #0
 800af22:	60f8      	str	r0, [r7, #12]
 800af24:	60b9      	str	r1, [r7, #8]
 800af26:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800af28:	68b8      	ldr	r0, [r7, #8]
 800af2a:	f001 f956 	bl	800c1da <_ZSt11__addressofISaIN4tama16Stm32TimeMonitorEEEPT_RS3_>
 800af2e:	4602      	mov	r2, r0
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	601a      	str	r2, [r3, #0]
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	687a      	ldr	r2, [r7, #4]
 800af38:	605a      	str	r2, [r3, #4]
      { }
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	4618      	mov	r0, r3
 800af3e:	3710      	adds	r7, #16
 800af40:	46bd      	mov	sp, r7
 800af42:	bd80      	pop	{r7, pc}

0800af44 <_ZNSt16allocator_traitsISaIN4tama16Stm32TimeMonitorEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800af44:	b580      	push	{r7, lr}
 800af46:	b084      	sub	sp, #16
 800af48:	af00      	add	r7, sp, #0
 800af4a:	60f8      	str	r0, [r7, #12]
 800af4c:	60b9      	str	r1, [r7, #8]
 800af4e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800af50:	687a      	ldr	r2, [r7, #4]
 800af52:	68b9      	ldr	r1, [r7, #8]
 800af54:	68f8      	ldr	r0, [r7, #12]
 800af56:	f001 f94b 	bl	800c1f0 <_ZN9__gnu_cxx13new_allocatorIN4tama16Stm32TimeMonitorEE10deallocateEPS2_j>
 800af5a:	bf00      	nop
 800af5c:	3710      	adds	r7, #16
 800af5e:	46bd      	mov	sp, r7
 800af60:	bd80      	pop	{r7, pc}

0800af62 <_ZNSt15__allocated_ptrISaIN4tama16Stm32TimeMonitorEEE10_S_raw_ptrEPS1_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 800af62:	b480      	push	{r7}
 800af64:	b083      	sub	sp, #12
 800af66:	af00      	add	r7, sp, #0
 800af68:	6078      	str	r0, [r7, #4]
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	4618      	mov	r0, r3
 800af6e:	370c      	adds	r7, #12
 800af70:	46bd      	mov	sp, r7
 800af72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af76:	4770      	bx	lr

0800af78 <_ZN4tama11TimeMonitorC1Ev>:
#ifndef VPET_TIMEMONITOR_H
#define VPET_TIMEMONITOR_H

namespace tama
{
    class TimeMonitor
 800af78:	b480      	push	{r7}
 800af7a:	b083      	sub	sp, #12
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
 800af80:	4a04      	ldr	r2, [pc, #16]	; (800af94 <_ZN4tama11TimeMonitorC1Ev+0x1c>)
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	601a      	str	r2, [r3, #0]
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	4618      	mov	r0, r3
 800af8a:	370c      	adds	r7, #12
 800af8c:	46bd      	mov	sp, r7
 800af8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af92:	4770      	bx	lr
 800af94:	080171e4 	.word	0x080171e4

0800af98 <_ZN4tama16Stm32TimeMonitorC1Ev>:
#include "../../Core/time/time-monitor/TimeMonitor.h"
#include <stm32f4xx_hal.h>

namespace tama
{
    class Stm32TimeMonitor : public TimeMonitor
 800af98:	b580      	push	{r7, lr}
 800af9a:	b082      	sub	sp, #8
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	4618      	mov	r0, r3
 800afa4:	f7ff ffe8 	bl	800af78 <_ZN4tama11TimeMonitorC1Ev>
 800afa8:	4a03      	ldr	r2, [pc, #12]	; (800afb8 <_ZN4tama16Stm32TimeMonitorC1Ev+0x20>)
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	601a      	str	r2, [r3, #0]
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	4618      	mov	r0, r3
 800afb2:	3708      	adds	r7, #8
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bd80      	pop	{r7, pc}
 800afb8:	08017250 	.word	0x08017250

0800afbc <_ZN9__gnu_cxx13new_allocatorIN4tama16Stm32TimeMonitorEE9constructIS2_JEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b082      	sub	sp, #8
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
 800afc4:	6039      	str	r1, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	4619      	mov	r1, r3
 800afca:	2008      	movs	r0, #8
 800afcc:	f7f5 faaf 	bl	800052e <_ZnwjPv>
 800afd0:	4603      	mov	r3, r0
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d006      	beq.n	800afe4 <_ZN9__gnu_cxx13new_allocatorIN4tama16Stm32TimeMonitorEE9constructIS2_JEEEvPT_DpOT0_+0x28>
 800afd6:	2200      	movs	r2, #0
 800afd8:	601a      	str	r2, [r3, #0]
 800afda:	2200      	movs	r2, #0
 800afdc:	605a      	str	r2, [r3, #4]
 800afde:	4618      	mov	r0, r3
 800afe0:	f7ff ffda 	bl	800af98 <_ZN4tama16Stm32TimeMonitorC1Ev>
 800afe4:	bf00      	nop
 800afe6:	3708      	adds	r7, #8
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd80      	pop	{r7, pc}

0800afec <_ZNSaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) throw() { }
 800afec:	b580      	push	{r7, lr}
 800afee:	b082      	sub	sp, #8
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
 800aff4:	6039      	str	r1, [r7, #0]
 800aff6:	6878      	ldr	r0, [r7, #4]
 800aff8:	f001 f907 	bl	800c20a <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	4618      	mov	r0, r3
 800b000:	3708      	adds	r7, #8
 800b002:	46bd      	mov	sp, r7
 800b004:	bd80      	pop	{r7, pc}

0800b006 <_ZNSaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>:
      ~allocator() throw() { }
 800b006:	b580      	push	{r7, lr}
 800b008:	b082      	sub	sp, #8
 800b00a:	af00      	add	r7, sp, #0
 800b00c:	6078      	str	r0, [r7, #4]
 800b00e:	6878      	ldr	r0, [r7, #4]
 800b010:	f001 f906 	bl	800c220 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	4618      	mov	r0, r3
 800b018:	3708      	adds	r7, #8
 800b01a:	46bd      	mov	sp, r7
 800b01c:	bd80      	pop	{r7, pc}

0800b01e <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>:
    __allocate_guarded(_Alloc& __a)
 800b01e:	b580      	push	{r7, lr}
 800b020:	b082      	sub	sp, #8
 800b022:	af00      	add	r7, sp, #0
 800b024:	6078      	str	r0, [r7, #4]
 800b026:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 800b028:	2101      	movs	r1, #1
 800b02a:	6838      	ldr	r0, [r7, #0]
 800b02c:	f001 f903 	bl	800c236 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>
 800b030:	4603      	mov	r3, r0
 800b032:	461a      	mov	r2, r3
 800b034:	6839      	ldr	r1, [r7, #0]
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f001 f90c 	bl	800c254 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
    }
 800b03c:	6878      	ldr	r0, [r7, #4]
 800b03e:	3708      	adds	r7, #8
 800b040:	46bd      	mov	sp, r7
 800b042:	bd80      	pop	{r7, pc}

0800b044 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>:
      ~__allocated_ptr()
 800b044:	b580      	push	{r7, lr}
 800b046:	b082      	sub	sp, #8
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	685b      	ldr	r3, [r3, #4]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d007      	beq.n	800b064 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	6818      	ldr	r0, [r3, #0]
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	685b      	ldr	r3, [r3, #4]
 800b05c:	2201      	movs	r2, #1
 800b05e:	4619      	mov	r1, r3
 800b060:	f001 f90c 	bl	800c27c <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>
      }
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	4618      	mov	r0, r3
 800b068:	3708      	adds	r7, #8
 800b06a:	46bd      	mov	sp, r7
 800b06c:	bd80      	pop	{r7, pc}

0800b06e <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 800b06e:	b580      	push	{r7, lr}
 800b070:	b082      	sub	sp, #8
 800b072:	af00      	add	r7, sp, #0
 800b074:	6078      	str	r0, [r7, #4]
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	685b      	ldr	r3, [r3, #4]
 800b07a:	4618      	mov	r0, r3
 800b07c:	f001 f90d 	bl	800c29a <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>
 800b080:	4603      	mov	r3, r0
 800b082:	4618      	mov	r0, r3
 800b084:	3708      	adds	r7, #8
 800b086:	46bd      	mov	sp, r7
 800b088:	bd80      	pop	{r7, pc}

0800b08a <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, false>
 800b08a:	b580      	push	{r7, lr}
 800b08c:	b082      	sub	sp, #8
 800b08e:	af00      	add	r7, sp, #0
 800b090:	6078      	str	r0, [r7, #4]
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	4618      	mov	r0, r3
 800b096:	f7fd ffeb 	bl	8009070 <_ZNSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	4618      	mov	r0, r3
 800b09e:	3708      	adds	r7, #8
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	bd80      	pop	{r7, pc}

0800b0a4 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama16Stm32TimeMonitorEELb1EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b082      	sub	sp, #8
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
 800b0ac:	6878      	ldr	r0, [r7, #4]
 800b0ae:	f7fd fa6d 	bl	800858c <_ZNSaIN4tama16Stm32TimeMonitorEED1Ev>
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	3708      	adds	r7, #8
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	bd80      	pop	{r7, pc}

0800b0bc <_ZNSt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>:
      class _Impl : _Sp_ebo_helper<0, _Deleter>, _Sp_ebo_helper<1, _Alloc>
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b082      	sub	sp, #8
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	3301      	adds	r3, #1
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	f7ff ffeb 	bl	800b0a4 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama16Stm32TimeMonitorEELb1EED1Ev>
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	f7ff ffda 	bl	800b08a <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	4618      	mov	r0, r3
 800b0da:	3708      	adds	r7, #8
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	bd80      	pop	{r7, pc}

0800b0e0 <_ZNSt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 800b0e0:	b590      	push	{r4, r7, lr}
 800b0e2:	b087      	sub	sp, #28
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	60f8      	str	r0, [r7, #12]
 800b0e8:	60b9      	str	r1, [r7, #8]
 800b0ea:	607a      	str	r2, [r7, #4]
 800b0ec:	603b      	str	r3, [r7, #0]
      : _M_impl(__p, std::move(__d), __a) { }
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	f7f7 fb13 	bl	800271c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800b0f6:	4a10      	ldr	r2, [pc, #64]	; (800b138 <_ZNSt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_+0x58>)
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	601a      	str	r2, [r3, #0]
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	f103 040c 	add.w	r4, r3, #12
 800b102:	6878      	ldr	r0, [r7, #4]
 800b104:	f7fe fe90 	bl	8009e28 <_ZSt4moveIRNSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800b108:	4602      	mov	r2, r0
 800b10a:	f107 0314 	add.w	r3, r7, #20
 800b10e:	4611      	mov	r1, r2
 800b110:	4618      	mov	r0, r3
 800b112:	f7fe fe94 	bl	8009e3e <_ZNSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 800b116:	f107 0214 	add.w	r2, r7, #20
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	68b9      	ldr	r1, [r7, #8]
 800b11e:	4620      	mov	r0, r4
 800b120:	f001 f8c6 	bl	800c2b0 <_ZNSt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>
 800b124:	f107 0314 	add.w	r3, r7, #20
 800b128:	4618      	mov	r0, r3
 800b12a:	f7fd ffa1 	bl	8009070 <_ZNSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	4618      	mov	r0, r3
 800b132:	371c      	adds	r7, #28
 800b134:	46bd      	mov	sp, r7
 800b136:	bd90      	pop	{r4, r7, pc}
 800b138:	08017154 	.word	0x08017154

0800b13c <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 800b13c:	b480      	push	{r7}
 800b13e:	b083      	sub	sp, #12
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
 800b144:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	2200      	movs	r2, #0
 800b14a:	605a      	str	r2, [r3, #4]
	return *this;
 800b14c:	687b      	ldr	r3, [r7, #4]
      }
 800b14e:	4618      	mov	r0, r3
 800b150:	370c      	adds	r7, #12
 800b152:	46bd      	mov	sp, r7
 800b154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b158:	4770      	bx	lr

0800b15a <_ZNSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>:
          void operator()(typename _Alloc::value_type* __ptr)
 800b15a:	b590      	push	{r4, r7, lr}
 800b15c:	b085      	sub	sp, #20
 800b15e:	af00      	add	r7, sp, #0
 800b160:	6078      	str	r0, [r7, #4]
 800b162:	6039      	str	r1, [r7, #0]
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 800b164:	6879      	ldr	r1, [r7, #4]
 800b166:	f107 0308 	add.w	r3, r7, #8
 800b16a:	683a      	ldr	r2, [r7, #0]
 800b16c:	4618      	mov	r0, r3
 800b16e:	f7ff fed5 	bl	800af1c <_ZNSt15__allocated_ptrISaIN4tama16Stm32TimeMonitorEEEC1ERS2_PS1_>
	    allocator_traits<_Alloc>::destroy(_M_alloc, __guard.get());
 800b172:	687c      	ldr	r4, [r7, #4]
 800b174:	f107 0308 	add.w	r3, r7, #8
 800b178:	4618      	mov	r0, r3
 800b17a:	f7fe fe2b 	bl	8009dd4 <_ZNSt15__allocated_ptrISaIN4tama16Stm32TimeMonitorEEE3getEv>
 800b17e:	4603      	mov	r3, r0
 800b180:	4619      	mov	r1, r3
 800b182:	4620      	mov	r0, r4
 800b184:	f001 f8b2 	bl	800c2ec <_ZNSt16allocator_traitsISaIN4tama16Stm32TimeMonitorEEE7destroyIS1_EEvRS2_PT_>
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 800b188:	f107 0308 	add.w	r3, r7, #8
 800b18c:	4618      	mov	r0, r3
 800b18e:	f7fe fe0c 	bl	8009daa <_ZNSt15__allocated_ptrISaIN4tama16Stm32TimeMonitorEEED1Ev>
          }
 800b192:	bf00      	nop
 800b194:	3714      	adds	r7, #20
 800b196:	46bd      	mov	sp, r7
 800b198:	bd90      	pop	{r4, r7, pc}

0800b19a <_ZN9__gnu_cxx13new_allocatorIN4tama25Stm32SoundPlayingStrategyEEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800b19a:	b480      	push	{r7}
 800b19c:	b083      	sub	sp, #12
 800b19e:	af00      	add	r7, sp, #0
 800b1a0:	6078      	str	r0, [r7, #4]
 800b1a2:	6039      	str	r1, [r7, #0]
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	370c      	adds	r7, #12
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b0:	4770      	bx	lr

0800b1b2 <_ZNSt16allocator_traitsISaIN4tama25Stm32SoundPlayingStrategyEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800b1b2:	b580      	push	{r7, lr}
 800b1b4:	b082      	sub	sp, #8
 800b1b6:	af00      	add	r7, sp, #0
 800b1b8:	6078      	str	r0, [r7, #4]
 800b1ba:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800b1bc:	2200      	movs	r2, #0
 800b1be:	6839      	ldr	r1, [r7, #0]
 800b1c0:	6878      	ldr	r0, [r7, #4]
 800b1c2:	f001 f8a0 	bl	800c306 <_ZN9__gnu_cxx13new_allocatorIN4tama25Stm32SoundPlayingStrategyEE8allocateEjPKv>
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	3708      	adds	r7, #8
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	bd80      	pop	{r7, pc}

0800b1d0 <_ZNSt15__allocated_ptrISaIN4tama25Stm32SoundPlayingStrategyEEEC1ERS2_PS1_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b084      	sub	sp, #16
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	60f8      	str	r0, [r7, #12]
 800b1d8:	60b9      	str	r1, [r7, #8]
 800b1da:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800b1dc:	68b8      	ldr	r0, [r7, #8]
 800b1de:	f001 f8b0 	bl	800c342 <_ZSt11__addressofISaIN4tama25Stm32SoundPlayingStrategyEEEPT_RS3_>
 800b1e2:	4602      	mov	r2, r0
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	601a      	str	r2, [r3, #0]
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	687a      	ldr	r2, [r7, #4]
 800b1ec:	605a      	str	r2, [r3, #4]
      { }
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	3710      	adds	r7, #16
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	bd80      	pop	{r7, pc}

0800b1f8 <_ZNSt16allocator_traitsISaIN4tama25Stm32SoundPlayingStrategyEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b084      	sub	sp, #16
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	60f8      	str	r0, [r7, #12]
 800b200:	60b9      	str	r1, [r7, #8]
 800b202:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800b204:	687a      	ldr	r2, [r7, #4]
 800b206:	68b9      	ldr	r1, [r7, #8]
 800b208:	68f8      	ldr	r0, [r7, #12]
 800b20a:	f001 f8a5 	bl	800c358 <_ZN9__gnu_cxx13new_allocatorIN4tama25Stm32SoundPlayingStrategyEE10deallocateEPS2_j>
 800b20e:	bf00      	nop
 800b210:	3710      	adds	r7, #16
 800b212:	46bd      	mov	sp, r7
 800b214:	bd80      	pop	{r7, pc}

0800b216 <_ZNSt15__allocated_ptrISaIN4tama25Stm32SoundPlayingStrategyEEE10_S_raw_ptrEPS1_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 800b216:	b480      	push	{r7}
 800b218:	b083      	sub	sp, #12
 800b21a:	af00      	add	r7, sp, #0
 800b21c:	6078      	str	r0, [r7, #4]
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	4618      	mov	r0, r3
 800b222:	370c      	adds	r7, #12
 800b224:	46bd      	mov	sp, r7
 800b226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22a:	4770      	bx	lr

0800b22c <_ZN4tama20SoundPlayingStrategyC1Ev>:

#include "tone/Tone.h"

namespace tama
{
    class SoundPlayingStrategy
 800b22c:	b480      	push	{r7}
 800b22e:	b083      	sub	sp, #12
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
 800b234:	4a04      	ldr	r2, [pc, #16]	; (800b248 <_ZN4tama20SoundPlayingStrategyC1Ev+0x1c>)
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	601a      	str	r2, [r3, #0]
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	4618      	mov	r0, r3
 800b23e:	370c      	adds	r7, #12
 800b240:	46bd      	mov	sp, r7
 800b242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b246:	4770      	bx	lr
 800b248:	080171d4 	.word	0x080171d4

0800b24c <_ZN4tama25Stm32SoundPlayingStrategyC1Ev>:
    class Stm32SoundPlayingStrategy : public SoundPlayingStrategy
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b082      	sub	sp, #8
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	4618      	mov	r0, r3
 800b258:	f7ff ffe8 	bl	800b22c <_ZN4tama20SoundPlayingStrategyC1Ev>
 800b25c:	4a03      	ldr	r2, [pc, #12]	; (800b26c <_ZN4tama25Stm32SoundPlayingStrategyC1Ev+0x20>)
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	601a      	str	r2, [r3, #0]
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	4618      	mov	r0, r3
 800b266:	3708      	adds	r7, #8
 800b268:	46bd      	mov	sp, r7
 800b26a:	bd80      	pop	{r7, pc}
 800b26c:	080171c4 	.word	0x080171c4

0800b270 <_ZN9__gnu_cxx13new_allocatorIN4tama25Stm32SoundPlayingStrategyEE9constructIS2_JEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800b270:	b580      	push	{r7, lr}
 800b272:	b082      	sub	sp, #8
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
 800b278:	6039      	str	r1, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800b27a:	683b      	ldr	r3, [r7, #0]
 800b27c:	4619      	mov	r1, r3
 800b27e:	2004      	movs	r0, #4
 800b280:	f7f5 f955 	bl	800052e <_ZnwjPv>
 800b284:	4603      	mov	r3, r0
 800b286:	2b00      	cmp	r3, #0
 800b288:	d004      	beq.n	800b294 <_ZN9__gnu_cxx13new_allocatorIN4tama25Stm32SoundPlayingStrategyEE9constructIS2_JEEEvPT_DpOT0_+0x24>
 800b28a:	2200      	movs	r2, #0
 800b28c:	601a      	str	r2, [r3, #0]
 800b28e:	4618      	mov	r0, r3
 800b290:	f7ff ffdc 	bl	800b24c <_ZN4tama25Stm32SoundPlayingStrategyC1Ev>
 800b294:	bf00      	nop
 800b296:	3708      	adds	r7, #8
 800b298:	46bd      	mov	sp, r7
 800b29a:	bd80      	pop	{r7, pc}

0800b29c <_ZNSaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) throw() { }
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b082      	sub	sp, #8
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
 800b2a4:	6039      	str	r1, [r7, #0]
 800b2a6:	6878      	ldr	r0, [r7, #4]
 800b2a8:	f001 f863 	bl	800c372 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	3708      	adds	r7, #8
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	bd80      	pop	{r7, pc}

0800b2b6 <_ZNSaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>:
      ~allocator() throw() { }
 800b2b6:	b580      	push	{r7, lr}
 800b2b8:	b082      	sub	sp, #8
 800b2ba:	af00      	add	r7, sp, #0
 800b2bc:	6078      	str	r0, [r7, #4]
 800b2be:	6878      	ldr	r0, [r7, #4]
 800b2c0:	f001 f862 	bl	800c388 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	3708      	adds	r7, #8
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	bd80      	pop	{r7, pc}

0800b2ce <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>:
    __allocate_guarded(_Alloc& __a)
 800b2ce:	b580      	push	{r7, lr}
 800b2d0:	b082      	sub	sp, #8
 800b2d2:	af00      	add	r7, sp, #0
 800b2d4:	6078      	str	r0, [r7, #4]
 800b2d6:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 800b2d8:	2101      	movs	r1, #1
 800b2da:	6838      	ldr	r0, [r7, #0]
 800b2dc:	f001 f85f 	bl	800c39e <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	461a      	mov	r2, r3
 800b2e4:	6839      	ldr	r1, [r7, #0]
 800b2e6:	6878      	ldr	r0, [r7, #4]
 800b2e8:	f001 f868 	bl	800c3bc <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
    }
 800b2ec:	6878      	ldr	r0, [r7, #4]
 800b2ee:	3708      	adds	r7, #8
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	bd80      	pop	{r7, pc}

0800b2f4 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>:
      ~__allocated_ptr()
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b082      	sub	sp, #8
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	685b      	ldr	r3, [r3, #4]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d007      	beq.n	800b314 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	6818      	ldr	r0, [r3, #0]
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	685b      	ldr	r3, [r3, #4]
 800b30c:	2201      	movs	r2, #1
 800b30e:	4619      	mov	r1, r3
 800b310:	f001 f868 	bl	800c3e4 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>
      }
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	4618      	mov	r0, r3
 800b318:	3708      	adds	r7, #8
 800b31a:	46bd      	mov	sp, r7
 800b31c:	bd80      	pop	{r7, pc}

0800b31e <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 800b31e:	b580      	push	{r7, lr}
 800b320:	b082      	sub	sp, #8
 800b322:	af00      	add	r7, sp, #0
 800b324:	6078      	str	r0, [r7, #4]
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	685b      	ldr	r3, [r3, #4]
 800b32a:	4618      	mov	r0, r3
 800b32c:	f001 f869 	bl	800c402 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>
 800b330:	4603      	mov	r3, r0
 800b332:	4618      	mov	r0, r3
 800b334:	3708      	adds	r7, #8
 800b336:	46bd      	mov	sp, r7
 800b338:	bd80      	pop	{r7, pc}

0800b33a <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, false>
 800b33a:	b580      	push	{r7, lr}
 800b33c:	b082      	sub	sp, #8
 800b33e:	af00      	add	r7, sp, #0
 800b340:	6078      	str	r0, [r7, #4]
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	4618      	mov	r0, r3
 800b346:	f7fd ff26 	bl	8009196 <_ZNSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	4618      	mov	r0, r3
 800b34e:	3708      	adds	r7, #8
 800b350:	46bd      	mov	sp, r7
 800b352:	bd80      	pop	{r7, pc}

0800b354 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama25Stm32SoundPlayingStrategyEELb1EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp
 800b354:	b580      	push	{r7, lr}
 800b356:	b082      	sub	sp, #8
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
 800b35c:	6878      	ldr	r0, [r7, #4]
 800b35e:	f7fd f959 	bl	8008614 <_ZNSaIN4tama25Stm32SoundPlayingStrategyEED1Ev>
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	4618      	mov	r0, r3
 800b366:	3708      	adds	r7, #8
 800b368:	46bd      	mov	sp, r7
 800b36a:	bd80      	pop	{r7, pc}

0800b36c <_ZNSt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>:
      class _Impl : _Sp_ebo_helper<0, _Deleter>, _Sp_ebo_helper<1, _Alloc>
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b082      	sub	sp, #8
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	3301      	adds	r3, #1
 800b378:	4618      	mov	r0, r3
 800b37a:	f7ff ffeb 	bl	800b354 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama25Stm32SoundPlayingStrategyEELb1EED1Ev>
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	4618      	mov	r0, r3
 800b382:	f7ff ffda 	bl	800b33a <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	4618      	mov	r0, r3
 800b38a:	3708      	adds	r7, #8
 800b38c:	46bd      	mov	sp, r7
 800b38e:	bd80      	pop	{r7, pc}

0800b390 <_ZNSt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 800b390:	b590      	push	{r4, r7, lr}
 800b392:	b087      	sub	sp, #28
 800b394:	af00      	add	r7, sp, #0
 800b396:	60f8      	str	r0, [r7, #12]
 800b398:	60b9      	str	r1, [r7, #8]
 800b39a:	607a      	str	r2, [r7, #4]
 800b39c:	603b      	str	r3, [r7, #0]
      : _M_impl(__p, std::move(__d), __a) { }
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	f7f7 f9bb 	bl	800271c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800b3a6:	4a10      	ldr	r2, [pc, #64]	; (800b3e8 <_ZNSt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_+0x58>)
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	601a      	str	r2, [r3, #0]
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	f103 040c 	add.w	r4, r3, #12
 800b3b2:	6878      	ldr	r0, [r7, #4]
 800b3b4:	f7fe fe20 	bl	8009ff8 <_ZSt4moveIRNSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800b3b8:	4602      	mov	r2, r0
 800b3ba:	f107 0314 	add.w	r3, r7, #20
 800b3be:	4611      	mov	r1, r2
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	f7fe fe24 	bl	800a00e <_ZNSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 800b3c6:	f107 0214 	add.w	r2, r7, #20
 800b3ca:	683b      	ldr	r3, [r7, #0]
 800b3cc:	68b9      	ldr	r1, [r7, #8]
 800b3ce:	4620      	mov	r0, r4
 800b3d0:	f001 f822 	bl	800c418 <_ZNSt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>
 800b3d4:	f107 0314 	add.w	r3, r7, #20
 800b3d8:	4618      	mov	r0, r3
 800b3da:	f7fd fedc 	bl	8009196 <_ZNSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	371c      	adds	r7, #28
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	bd90      	pop	{r4, r7, pc}
 800b3e8:	08017138 	.word	0x08017138

0800b3ec <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 800b3ec:	b480      	push	{r7}
 800b3ee:	b083      	sub	sp, #12
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
 800b3f4:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	605a      	str	r2, [r3, #4]
	return *this;
 800b3fc:	687b      	ldr	r3, [r7, #4]
      }
 800b3fe:	4618      	mov	r0, r3
 800b400:	370c      	adds	r7, #12
 800b402:	46bd      	mov	sp, r7
 800b404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b408:	4770      	bx	lr

0800b40a <_ZNSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>:
          void operator()(typename _Alloc::value_type* __ptr)
 800b40a:	b590      	push	{r4, r7, lr}
 800b40c:	b085      	sub	sp, #20
 800b40e:	af00      	add	r7, sp, #0
 800b410:	6078      	str	r0, [r7, #4]
 800b412:	6039      	str	r1, [r7, #0]
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 800b414:	6879      	ldr	r1, [r7, #4]
 800b416:	f107 0308 	add.w	r3, r7, #8
 800b41a:	683a      	ldr	r2, [r7, #0]
 800b41c:	4618      	mov	r0, r3
 800b41e:	f7ff fed7 	bl	800b1d0 <_ZNSt15__allocated_ptrISaIN4tama25Stm32SoundPlayingStrategyEEEC1ERS2_PS1_>
	    allocator_traits<_Alloc>::destroy(_M_alloc, __guard.get());
 800b422:	687c      	ldr	r4, [r7, #4]
 800b424:	f107 0308 	add.w	r3, r7, #8
 800b428:	4618      	mov	r0, r3
 800b42a:	f7fe fdbb 	bl	8009fa4 <_ZNSt15__allocated_ptrISaIN4tama25Stm32SoundPlayingStrategyEEE3getEv>
 800b42e:	4603      	mov	r3, r0
 800b430:	4619      	mov	r1, r3
 800b432:	4620      	mov	r0, r4
 800b434:	f001 f80e 	bl	800c454 <_ZNSt16allocator_traitsISaIN4tama25Stm32SoundPlayingStrategyEEE7destroyIS1_EEvRS2_PT_>
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 800b438:	f107 0308 	add.w	r3, r7, #8
 800b43c:	4618      	mov	r0, r3
 800b43e:	f7fe fd9c 	bl	8009f7a <_ZNSt15__allocated_ptrISaIN4tama25Stm32SoundPlayingStrategyEEED1Ev>
          }
 800b442:	bf00      	nop
 800b444:	3714      	adds	r7, #20
 800b446:	46bd      	mov	sp, r7
 800b448:	bd90      	pop	{r4, r7, pc}

0800b44a <_ZN9__gnu_cxx13new_allocatorIN4tama11SoundPlayerEEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800b44a:	b480      	push	{r7}
 800b44c:	b083      	sub	sp, #12
 800b44e:	af00      	add	r7, sp, #0
 800b450:	6078      	str	r0, [r7, #4]
 800b452:	6039      	str	r1, [r7, #0]
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	4618      	mov	r0, r3
 800b458:	370c      	adds	r7, #12
 800b45a:	46bd      	mov	sp, r7
 800b45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b460:	4770      	bx	lr

0800b462 <_ZNSt16allocator_traitsISaIN4tama11SoundPlayerEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800b462:	b580      	push	{r7, lr}
 800b464:	b082      	sub	sp, #8
 800b466:	af00      	add	r7, sp, #0
 800b468:	6078      	str	r0, [r7, #4]
 800b46a:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800b46c:	2200      	movs	r2, #0
 800b46e:	6839      	ldr	r1, [r7, #0]
 800b470:	6878      	ldr	r0, [r7, #4]
 800b472:	f000 fffc 	bl	800c46e <_ZN9__gnu_cxx13new_allocatorIN4tama11SoundPlayerEE8allocateEjPKv>
 800b476:	4603      	mov	r3, r0
 800b478:	4618      	mov	r0, r3
 800b47a:	3708      	adds	r7, #8
 800b47c:	46bd      	mov	sp, r7
 800b47e:	bd80      	pop	{r7, pc}

0800b480 <_ZNSt15__allocated_ptrISaIN4tama11SoundPlayerEEEC1ERS2_PS1_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 800b480:	b580      	push	{r7, lr}
 800b482:	b084      	sub	sp, #16
 800b484:	af00      	add	r7, sp, #0
 800b486:	60f8      	str	r0, [r7, #12]
 800b488:	60b9      	str	r1, [r7, #8]
 800b48a:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800b48c:	68b8      	ldr	r0, [r7, #8]
 800b48e:	f001 f80f 	bl	800c4b0 <_ZSt11__addressofISaIN4tama11SoundPlayerEEEPT_RS3_>
 800b492:	4602      	mov	r2, r0
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	601a      	str	r2, [r3, #0]
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	687a      	ldr	r2, [r7, #4]
 800b49c:	605a      	str	r2, [r3, #4]
      { }
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	3710      	adds	r7, #16
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	bd80      	pop	{r7, pc}

0800b4a8 <_ZNSt16allocator_traitsISaIN4tama11SoundPlayerEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b084      	sub	sp, #16
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	60f8      	str	r0, [r7, #12]
 800b4b0:	60b9      	str	r1, [r7, #8]
 800b4b2:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800b4b4:	687a      	ldr	r2, [r7, #4]
 800b4b6:	68b9      	ldr	r1, [r7, #8]
 800b4b8:	68f8      	ldr	r0, [r7, #12]
 800b4ba:	f001 f804 	bl	800c4c6 <_ZN9__gnu_cxx13new_allocatorIN4tama11SoundPlayerEE10deallocateEPS2_j>
 800b4be:	bf00      	nop
 800b4c0:	3710      	adds	r7, #16
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bd80      	pop	{r7, pc}

0800b4c6 <_ZNSt15__allocated_ptrISaIN4tama11SoundPlayerEEE10_S_raw_ptrEPS1_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 800b4c6:	b480      	push	{r7}
 800b4c8:	b083      	sub	sp, #12
 800b4ca:	af00      	add	r7, sp, #0
 800b4cc:	6078      	str	r0, [r7, #4]
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	370c      	adds	r7, #12
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4da:	4770      	bx	lr

0800b4dc <_ZNSt12__shared_ptrIN4tama11TimeMonitorELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b082      	sub	sp, #8
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
 800b4e4:	6039      	str	r1, [r7, #0]
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	681a      	ldr	r2, [r3, #0]
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	601a      	str	r2, [r3, #0]
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	1d1a      	adds	r2, r3, #4
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	3304      	adds	r3, #4
 800b4f6:	4619      	mov	r1, r3
 800b4f8:	4610      	mov	r0, r2
 800b4fa:	f7f5 fa83 	bl	8000a04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	4618      	mov	r0, r3
 800b502:	3708      	adds	r7, #8
 800b504:	46bd      	mov	sp, r7
 800b506:	bd80      	pop	{r7, pc}

0800b508 <_ZNSt10shared_ptrIN4tama11TimeMonitorEEC1ERKS2_>:
      shared_ptr(const shared_ptr&) noexcept = default;
 800b508:	b580      	push	{r7, lr}
 800b50a:	b082      	sub	sp, #8
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
 800b510:	6039      	str	r1, [r7, #0]
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	683a      	ldr	r2, [r7, #0]
 800b516:	4611      	mov	r1, r2
 800b518:	4618      	mov	r0, r3
 800b51a:	f7ff ffdf 	bl	800b4dc <_ZNSt12__shared_ptrIN4tama11TimeMonitorELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	4618      	mov	r0, r3
 800b522:	3708      	adds	r7, #8
 800b524:	46bd      	mov	sp, r7
 800b526:	bd80      	pop	{r7, pc}

0800b528 <_ZN9__gnu_cxx13new_allocatorIN4tama11SoundPlayerEE9constructIS2_JRSt10shared_ptrINS1_11TimeMonitorEEEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800b528:	b590      	push	{r4, r7, lr}
 800b52a:	b087      	sub	sp, #28
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	60f8      	str	r0, [r7, #12]
 800b530:	60b9      	str	r1, [r7, #8]
 800b532:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800b534:	6878      	ldr	r0, [r7, #4]
 800b536:	f7fc fe69 	bl	800820c <_ZSt7forwardIRSt10shared_ptrIN4tama11TimeMonitorEEEOT_RNSt16remove_referenceIS5_E4typeE>
 800b53a:	4602      	mov	r2, r0
 800b53c:	f107 0310 	add.w	r3, r7, #16
 800b540:	4611      	mov	r1, r2
 800b542:	4618      	mov	r0, r3
 800b544:	f7ff ffe0 	bl	800b508 <_ZNSt10shared_ptrIN4tama11TimeMonitorEEC1ERKS2_>
 800b548:	f107 0410 	add.w	r4, r7, #16
 800b54c:	68bb      	ldr	r3, [r7, #8]
 800b54e:	4619      	mov	r1, r3
 800b550:	2024      	movs	r0, #36	; 0x24
 800b552:	f7f4 ffec 	bl	800052e <_ZnwjPv>
 800b556:	4603      	mov	r3, r0
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d003      	beq.n	800b564 <_ZN9__gnu_cxx13new_allocatorIN4tama11SoundPlayerEE9constructIS2_JRSt10shared_ptrINS1_11TimeMonitorEEEEEvPT_DpOT0_+0x3c>
 800b55c:	4621      	mov	r1, r4
 800b55e:	4618      	mov	r0, r3
 800b560:	f7f7 fc21 	bl	8002da6 <_ZN4tama11SoundPlayerC1ESt10shared_ptrINS_11TimeMonitorEE>
 800b564:	f107 0310 	add.w	r3, r7, #16
 800b568:	4618      	mov	r0, r3
 800b56a:	f7fc f96f 	bl	800784c <_ZNSt10shared_ptrIN4tama11TimeMonitorEED1Ev>
 800b56e:	bf00      	nop
 800b570:	371c      	adds	r7, #28
 800b572:	46bd      	mov	sp, r7
 800b574:	bd90      	pop	{r4, r7, pc}

0800b576 <_ZNSaISt19_Sp_counted_deleterIPN4tama11SoundPlayerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) throw() { }
 800b576:	b580      	push	{r7, lr}
 800b578:	b082      	sub	sp, #8
 800b57a:	af00      	add	r7, sp, #0
 800b57c:	6078      	str	r0, [r7, #4]
 800b57e:	6039      	str	r1, [r7, #0]
 800b580:	6878      	ldr	r0, [r7, #4]
 800b582:	f000 ffad 	bl	800c4e0 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama11SoundPlayerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	4618      	mov	r0, r3
 800b58a:	3708      	adds	r7, #8
 800b58c:	46bd      	mov	sp, r7
 800b58e:	bd80      	pop	{r7, pc}

0800b590 <_ZNSaISt19_Sp_counted_deleterIPN4tama11SoundPlayerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>:
      ~allocator() throw() { }
 800b590:	b580      	push	{r7, lr}
 800b592:	b082      	sub	sp, #8
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
 800b598:	6878      	ldr	r0, [r7, #4]
 800b59a:	f000 ffac 	bl	800c4f6 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama11SoundPlayerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	3708      	adds	r7, #8
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	bd80      	pop	{r7, pc}

0800b5a8 <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama11SoundPlayerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>:
    __allocate_guarded(_Alloc& __a)
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b082      	sub	sp, #8
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
 800b5b0:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 800b5b2:	2101      	movs	r1, #1
 800b5b4:	6838      	ldr	r0, [r7, #0]
 800b5b6:	f000 ffa9 	bl	800c50c <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama11SoundPlayerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	461a      	mov	r2, r3
 800b5be:	6839      	ldr	r1, [r7, #0]
 800b5c0:	6878      	ldr	r0, [r7, #4]
 800b5c2:	f000 ffb2 	bl	800c52a <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama11SoundPlayerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
    }
 800b5c6:	6878      	ldr	r0, [r7, #4]
 800b5c8:	3708      	adds	r7, #8
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	bd80      	pop	{r7, pc}

0800b5ce <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama11SoundPlayerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>:
      ~__allocated_ptr()
 800b5ce:	b580      	push	{r7, lr}
 800b5d0:	b082      	sub	sp, #8
 800b5d2:	af00      	add	r7, sp, #0
 800b5d4:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	685b      	ldr	r3, [r3, #4]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d007      	beq.n	800b5ee <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama11SoundPlayerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	6818      	ldr	r0, [r3, #0]
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	685b      	ldr	r3, [r3, #4]
 800b5e6:	2201      	movs	r2, #1
 800b5e8:	4619      	mov	r1, r3
 800b5ea:	f000 ffb2 	bl	800c552 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama11SoundPlayerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>
      }
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	3708      	adds	r7, #8
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	bd80      	pop	{r7, pc}

0800b5f8 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama11SoundPlayerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b082      	sub	sp, #8
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	685b      	ldr	r3, [r3, #4]
 800b604:	4618      	mov	r0, r3
 800b606:	f000 ffb3 	bl	800c570 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama11SoundPlayerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>
 800b60a:	4603      	mov	r3, r0
 800b60c:	4618      	mov	r0, r3
 800b60e:	3708      	adds	r7, #8
 800b610:	46bd      	mov	sp, r7
 800b612:	bd80      	pop	{r7, pc}

0800b614 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, false>
 800b614:	b580      	push	{r7, lr}
 800b616:	b082      	sub	sp, #8
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	4618      	mov	r0, r3
 800b620:	f7fd fe4c 	bl	80092bc <_ZNSt12__shared_ptrIN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	4618      	mov	r0, r3
 800b628:	3708      	adds	r7, #8
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bd80      	pop	{r7, pc}

0800b62e <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama11SoundPlayerEELb1EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp
 800b62e:	b580      	push	{r7, lr}
 800b630:	b082      	sub	sp, #8
 800b632:	af00      	add	r7, sp, #0
 800b634:	6078      	str	r0, [r7, #4]
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f7fd f830 	bl	800869c <_ZNSaIN4tama11SoundPlayerEED1Ev>
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	4618      	mov	r0, r3
 800b640:	3708      	adds	r7, #8
 800b642:	46bd      	mov	sp, r7
 800b644:	bd80      	pop	{r7, pc}

0800b646 <_ZNSt19_Sp_counted_deleterIPN4tama11SoundPlayerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>:
      class _Impl : _Sp_ebo_helper<0, _Deleter>, _Sp_ebo_helper<1, _Alloc>
 800b646:	b580      	push	{r7, lr}
 800b648:	b082      	sub	sp, #8
 800b64a:	af00      	add	r7, sp, #0
 800b64c:	6078      	str	r0, [r7, #4]
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	3301      	adds	r3, #1
 800b652:	4618      	mov	r0, r3
 800b654:	f7ff ffeb 	bl	800b62e <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama11SoundPlayerEELb1EED1Ev>
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	4618      	mov	r0, r3
 800b65c:	f7ff ffda 	bl	800b614 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	4618      	mov	r0, r3
 800b664:	3708      	adds	r7, #8
 800b666:	46bd      	mov	sp, r7
 800b668:	bd80      	pop	{r7, pc}
	...

0800b66c <_ZNSt19_Sp_counted_deleterIPN4tama11SoundPlayerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 800b66c:	b590      	push	{r4, r7, lr}
 800b66e:	b087      	sub	sp, #28
 800b670:	af00      	add	r7, sp, #0
 800b672:	60f8      	str	r0, [r7, #12]
 800b674:	60b9      	str	r1, [r7, #8]
 800b676:	607a      	str	r2, [r7, #4]
 800b678:	603b      	str	r3, [r7, #0]
      : _M_impl(__p, std::move(__d), __a) { }
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	4618      	mov	r0, r3
 800b67e:	f7f7 f84d 	bl	800271c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800b682:	4a10      	ldr	r2, [pc, #64]	; (800b6c4 <_ZNSt19_Sp_counted_deleterIPN4tama11SoundPlayerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_+0x58>)
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	601a      	str	r2, [r3, #0]
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	f103 040c 	add.w	r4, r3, #12
 800b68e:	6878      	ldr	r0, [r7, #4]
 800b690:	f7fe fda0 	bl	800a1d4 <_ZSt4moveIRNSt12__shared_ptrIN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800b694:	4602      	mov	r2, r0
 800b696:	f107 0314 	add.w	r3, r7, #20
 800b69a:	4611      	mov	r1, r2
 800b69c:	4618      	mov	r0, r3
 800b69e:	f7fe fda4 	bl	800a1ea <_ZNSt12__shared_ptrIN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 800b6a2:	f107 0214 	add.w	r2, r7, #20
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	68b9      	ldr	r1, [r7, #8]
 800b6aa:	4620      	mov	r0, r4
 800b6ac:	f000 ff6b 	bl	800c586 <_ZNSt19_Sp_counted_deleterIPN4tama11SoundPlayerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>
 800b6b0:	f107 0314 	add.w	r3, r7, #20
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	f7fd fe01 	bl	80092bc <_ZNSt12__shared_ptrIN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	4618      	mov	r0, r3
 800b6be:	371c      	adds	r7, #28
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	bd90      	pop	{r4, r7, pc}
 800b6c4:	0801711c 	.word	0x0801711c

0800b6c8 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama11SoundPlayerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 800b6c8:	b480      	push	{r7}
 800b6ca:	b083      	sub	sp, #12
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
 800b6d0:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	605a      	str	r2, [r3, #4]
	return *this;
 800b6d8:	687b      	ldr	r3, [r7, #4]
      }
 800b6da:	4618      	mov	r0, r3
 800b6dc:	370c      	adds	r7, #12
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e4:	4770      	bx	lr

0800b6e6 <_ZNSt12__shared_ptrIN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>:
          void operator()(typename _Alloc::value_type* __ptr)
 800b6e6:	b590      	push	{r4, r7, lr}
 800b6e8:	b085      	sub	sp, #20
 800b6ea:	af00      	add	r7, sp, #0
 800b6ec:	6078      	str	r0, [r7, #4]
 800b6ee:	6039      	str	r1, [r7, #0]
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 800b6f0:	6879      	ldr	r1, [r7, #4]
 800b6f2:	f107 0308 	add.w	r3, r7, #8
 800b6f6:	683a      	ldr	r2, [r7, #0]
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	f7ff fec1 	bl	800b480 <_ZNSt15__allocated_ptrISaIN4tama11SoundPlayerEEEC1ERS2_PS1_>
	    allocator_traits<_Alloc>::destroy(_M_alloc, __guard.get());
 800b6fe:	687c      	ldr	r4, [r7, #4]
 800b700:	f107 0308 	add.w	r3, r7, #8
 800b704:	4618      	mov	r0, r3
 800b706:	f7fe fd35 	bl	800a174 <_ZNSt15__allocated_ptrISaIN4tama11SoundPlayerEEE3getEv>
 800b70a:	4603      	mov	r3, r0
 800b70c:	4619      	mov	r1, r3
 800b70e:	4620      	mov	r0, r4
 800b710:	f000 ff57 	bl	800c5c2 <_ZNSt16allocator_traitsISaIN4tama11SoundPlayerEEE7destroyIS1_EEvRS2_PT_>
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 800b714:	f107 0308 	add.w	r3, r7, #8
 800b718:	4618      	mov	r0, r3
 800b71a:	f7fe fd16 	bl	800a14a <_ZNSt15__allocated_ptrISaIN4tama11SoundPlayerEEED1Ev>
          }
 800b71e:	bf00      	nop
 800b720:	3714      	adds	r7, #20
 800b722:	46bd      	mov	sp, r7
 800b724:	bd90      	pop	{r4, r7, pc}

0800b726 <_ZN9__gnu_cxx13new_allocatorIN4tama10Stm32InputEEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800b726:	b480      	push	{r7}
 800b728:	b083      	sub	sp, #12
 800b72a:	af00      	add	r7, sp, #0
 800b72c:	6078      	str	r0, [r7, #4]
 800b72e:	6039      	str	r1, [r7, #0]
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	4618      	mov	r0, r3
 800b734:	370c      	adds	r7, #12
 800b736:	46bd      	mov	sp, r7
 800b738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73c:	4770      	bx	lr

0800b73e <_ZNSt16allocator_traitsISaIN4tama10Stm32InputEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800b73e:	b580      	push	{r7, lr}
 800b740:	b082      	sub	sp, #8
 800b742:	af00      	add	r7, sp, #0
 800b744:	6078      	str	r0, [r7, #4]
 800b746:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800b748:	2200      	movs	r2, #0
 800b74a:	6839      	ldr	r1, [r7, #0]
 800b74c:	6878      	ldr	r0, [r7, #4]
 800b74e:	f000 ff45 	bl	800c5dc <_ZN9__gnu_cxx13new_allocatorIN4tama10Stm32InputEE8allocateEjPKv>
 800b752:	4603      	mov	r3, r0
 800b754:	4618      	mov	r0, r3
 800b756:	3708      	adds	r7, #8
 800b758:	46bd      	mov	sp, r7
 800b75a:	bd80      	pop	{r7, pc}

0800b75c <_ZNSt15__allocated_ptrISaIN4tama10Stm32InputEEEC1ERS2_PS1_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b084      	sub	sp, #16
 800b760:	af00      	add	r7, sp, #0
 800b762:	60f8      	str	r0, [r7, #12]
 800b764:	60b9      	str	r1, [r7, #8]
 800b766:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800b768:	68b8      	ldr	r0, [r7, #8]
 800b76a:	f000 ff55 	bl	800c618 <_ZSt11__addressofISaIN4tama10Stm32InputEEEPT_RS3_>
 800b76e:	4602      	mov	r2, r0
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	601a      	str	r2, [r3, #0]
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	687a      	ldr	r2, [r7, #4]
 800b778:	605a      	str	r2, [r3, #4]
      { }
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	4618      	mov	r0, r3
 800b77e:	3710      	adds	r7, #16
 800b780:	46bd      	mov	sp, r7
 800b782:	bd80      	pop	{r7, pc}

0800b784 <_ZNSt16allocator_traitsISaIN4tama10Stm32InputEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800b784:	b580      	push	{r7, lr}
 800b786:	b084      	sub	sp, #16
 800b788:	af00      	add	r7, sp, #0
 800b78a:	60f8      	str	r0, [r7, #12]
 800b78c:	60b9      	str	r1, [r7, #8]
 800b78e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800b790:	687a      	ldr	r2, [r7, #4]
 800b792:	68b9      	ldr	r1, [r7, #8]
 800b794:	68f8      	ldr	r0, [r7, #12]
 800b796:	f000 ff4a 	bl	800c62e <_ZN9__gnu_cxx13new_allocatorIN4tama10Stm32InputEE10deallocateEPS2_j>
 800b79a:	bf00      	nop
 800b79c:	3710      	adds	r7, #16
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	bd80      	pop	{r7, pc}

0800b7a2 <_ZNSt15__allocated_ptrISaIN4tama10Stm32InputEEE10_S_raw_ptrEPS1_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 800b7a2:	b480      	push	{r7}
 800b7a4:	b083      	sub	sp, #12
 800b7a6:	af00      	add	r7, sp, #0
 800b7a8:	6078      	str	r0, [r7, #4]
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	370c      	adds	r7, #12
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b6:	4770      	bx	lr

0800b7b8 <_ZN4tama5InputC1Ev>:
#include <vector>
#include "../common/observers/OnInput.h"

namespace tama
{
    class Input
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b082      	sub	sp, #8
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
 800b7c0:	4a06      	ldr	r2, [pc, #24]	; (800b7dc <_ZN4tama5InputC1Ev+0x24>)
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	601a      	str	r2, [r3, #0]
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	3304      	adds	r3, #4
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	f000 ff3c 	bl	800c648 <_ZNSt6vectorISt10shared_ptrIN4tama7OnInputEESaIS3_EEC1Ev>
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	3708      	adds	r7, #8
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	bd80      	pop	{r7, pc}
 800b7da:	bf00      	nop
 800b7dc:	080171f4 	.word	0x080171f4

0800b7e0 <_ZN4tama5InputD1Ev>:
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b082      	sub	sp, #8
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
 800b7e8:	4a06      	ldr	r2, [pc, #24]	; (800b804 <_ZN4tama5InputD1Ev+0x24>)
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	601a      	str	r2, [r3, #0]
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	3304      	adds	r3, #4
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	f000 ff35 	bl	800c662 <_ZNSt6vectorISt10shared_ptrIN4tama7OnInputEESaIS3_EED1Ev>
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	3708      	adds	r7, #8
 800b7fe:	46bd      	mov	sp, r7
 800b800:	bd80      	pop	{r7, pc}
 800b802:	bf00      	nop
 800b804:	080171f4 	.word	0x080171f4

0800b808 <_ZN4tama10Stm32InputC1Ev>:

#include "../../Core/input/Input.h"

namespace tama
{
    class Stm32Input : public Input
 800b808:	b580      	push	{r7, lr}
 800b80a:	b082      	sub	sp, #8
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	4618      	mov	r0, r3
 800b814:	f7ff ffd0 	bl	800b7b8 <_ZN4tama5InputC1Ev>
 800b818:	4a03      	ldr	r2, [pc, #12]	; (800b828 <_ZN4tama10Stm32InputC1Ev+0x20>)
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	601a      	str	r2, [r3, #0]
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	4618      	mov	r0, r3
 800b822:	3708      	adds	r7, #8
 800b824:	46bd      	mov	sp, r7
 800b826:	bd80      	pop	{r7, pc}
 800b828:	0801722c 	.word	0x0801722c

0800b82c <_ZN9__gnu_cxx13new_allocatorIN4tama10Stm32InputEE9constructIS2_JEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b082      	sub	sp, #8
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
 800b834:	6039      	str	r1, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	4619      	mov	r1, r3
 800b83a:	2010      	movs	r0, #16
 800b83c:	f7f4 fe77 	bl	800052e <_ZnwjPv>
 800b840:	4601      	mov	r1, r0
 800b842:	2900      	cmp	r1, #0
 800b844:	d008      	beq.n	800b858 <_ZN9__gnu_cxx13new_allocatorIN4tama10Stm32InputEE9constructIS2_JEEEvPT_DpOT0_+0x2c>
 800b846:	460a      	mov	r2, r1
 800b848:	2300      	movs	r3, #0
 800b84a:	6013      	str	r3, [r2, #0]
 800b84c:	6053      	str	r3, [r2, #4]
 800b84e:	6093      	str	r3, [r2, #8]
 800b850:	60d3      	str	r3, [r2, #12]
 800b852:	4608      	mov	r0, r1
 800b854:	f7ff ffd8 	bl	800b808 <_ZN4tama10Stm32InputC1Ev>
 800b858:	bf00      	nop
 800b85a:	3708      	adds	r7, #8
 800b85c:	46bd      	mov	sp, r7
 800b85e:	bd80      	pop	{r7, pc}

0800b860 <_ZNSaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) throw() { }
 800b860:	b580      	push	{r7, lr}
 800b862:	b082      	sub	sp, #8
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
 800b868:	6039      	str	r1, [r7, #0]
 800b86a:	6878      	ldr	r0, [r7, #4]
 800b86c:	f000 ff14 	bl	800c698 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	4618      	mov	r0, r3
 800b874:	3708      	adds	r7, #8
 800b876:	46bd      	mov	sp, r7
 800b878:	bd80      	pop	{r7, pc}

0800b87a <_ZNSaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>:
      ~allocator() throw() { }
 800b87a:	b580      	push	{r7, lr}
 800b87c:	b082      	sub	sp, #8
 800b87e:	af00      	add	r7, sp, #0
 800b880:	6078      	str	r0, [r7, #4]
 800b882:	6878      	ldr	r0, [r7, #4]
 800b884:	f000 ff13 	bl	800c6ae <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	4618      	mov	r0, r3
 800b88c:	3708      	adds	r7, #8
 800b88e:	46bd      	mov	sp, r7
 800b890:	bd80      	pop	{r7, pc}

0800b892 <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>:
    __allocate_guarded(_Alloc& __a)
 800b892:	b580      	push	{r7, lr}
 800b894:	b082      	sub	sp, #8
 800b896:	af00      	add	r7, sp, #0
 800b898:	6078      	str	r0, [r7, #4]
 800b89a:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 800b89c:	2101      	movs	r1, #1
 800b89e:	6838      	ldr	r0, [r7, #0]
 800b8a0:	f000 ff10 	bl	800c6c4 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>
 800b8a4:	4603      	mov	r3, r0
 800b8a6:	461a      	mov	r2, r3
 800b8a8:	6839      	ldr	r1, [r7, #0]
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f000 ff19 	bl	800c6e2 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
    }
 800b8b0:	6878      	ldr	r0, [r7, #4]
 800b8b2:	3708      	adds	r7, #8
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	bd80      	pop	{r7, pc}

0800b8b8 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>:
      ~__allocated_ptr()
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b082      	sub	sp, #8
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	685b      	ldr	r3, [r3, #4]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d007      	beq.n	800b8d8 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	6818      	ldr	r0, [r3, #0]
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	685b      	ldr	r3, [r3, #4]
 800b8d0:	2201      	movs	r2, #1
 800b8d2:	4619      	mov	r1, r3
 800b8d4:	f000 ff19 	bl	800c70a <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>
      }
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	4618      	mov	r0, r3
 800b8dc:	3708      	adds	r7, #8
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	bd80      	pop	{r7, pc}

0800b8e2 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 800b8e2:	b580      	push	{r7, lr}
 800b8e4:	b082      	sub	sp, #8
 800b8e6:	af00      	add	r7, sp, #0
 800b8e8:	6078      	str	r0, [r7, #4]
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	685b      	ldr	r3, [r3, #4]
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	f000 ff1a 	bl	800c728 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	3708      	adds	r7, #8
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	bd80      	pop	{r7, pc}

0800b8fe <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, false>
 800b8fe:	b580      	push	{r7, lr}
 800b900:	b082      	sub	sp, #8
 800b902:	af00      	add	r7, sp, #0
 800b904:	6078      	str	r0, [r7, #4]
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	4618      	mov	r0, r3
 800b90a:	f7fd fd6f 	bl	80093ec <_ZNSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	4618      	mov	r0, r3
 800b912:	3708      	adds	r7, #8
 800b914:	46bd      	mov	sp, r7
 800b916:	bd80      	pop	{r7, pc}

0800b918 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama10Stm32InputEELb1EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp
 800b918:	b580      	push	{r7, lr}
 800b91a:	b082      	sub	sp, #8
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
 800b920:	6878      	ldr	r0, [r7, #4]
 800b922:	f7fc fee6 	bl	80086f2 <_ZNSaIN4tama10Stm32InputEED1Ev>
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	4618      	mov	r0, r3
 800b92a:	3708      	adds	r7, #8
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bd80      	pop	{r7, pc}

0800b930 <_ZNSt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>:
      class _Impl : _Sp_ebo_helper<0, _Deleter>, _Sp_ebo_helper<1, _Alloc>
 800b930:	b580      	push	{r7, lr}
 800b932:	b082      	sub	sp, #8
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	3301      	adds	r3, #1
 800b93c:	4618      	mov	r0, r3
 800b93e:	f7ff ffeb 	bl	800b918 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama10Stm32InputEELb1EED1Ev>
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	4618      	mov	r0, r3
 800b946:	f7ff ffda 	bl	800b8fe <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	4618      	mov	r0, r3
 800b94e:	3708      	adds	r7, #8
 800b950:	46bd      	mov	sp, r7
 800b952:	bd80      	pop	{r7, pc}

0800b954 <_ZNSt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 800b954:	b590      	push	{r4, r7, lr}
 800b956:	b087      	sub	sp, #28
 800b958:	af00      	add	r7, sp, #0
 800b95a:	60f8      	str	r0, [r7, #12]
 800b95c:	60b9      	str	r1, [r7, #8]
 800b95e:	607a      	str	r2, [r7, #4]
 800b960:	603b      	str	r3, [r7, #0]
      : _M_impl(__p, std::move(__d), __a) { }
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	4618      	mov	r0, r3
 800b966:	f7f6 fed9 	bl	800271c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800b96a:	4a10      	ldr	r2, [pc, #64]	; (800b9ac <_ZNSt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_+0x58>)
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	601a      	str	r2, [r3, #0]
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	f103 040c 	add.w	r4, r3, #12
 800b976:	6878      	ldr	r0, [r7, #4]
 800b978:	f7fe fd14 	bl	800a3a4 <_ZSt4moveIRNSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800b97c:	4602      	mov	r2, r0
 800b97e:	f107 0314 	add.w	r3, r7, #20
 800b982:	4611      	mov	r1, r2
 800b984:	4618      	mov	r0, r3
 800b986:	f7fe fd18 	bl	800a3ba <_ZNSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 800b98a:	f107 0214 	add.w	r2, r7, #20
 800b98e:	683b      	ldr	r3, [r7, #0]
 800b990:	68b9      	ldr	r1, [r7, #8]
 800b992:	4620      	mov	r0, r4
 800b994:	f000 fed3 	bl	800c73e <_ZNSt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>
 800b998:	f107 0314 	add.w	r3, r7, #20
 800b99c:	4618      	mov	r0, r3
 800b99e:	f7fd fd25 	bl	80093ec <_ZNSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	371c      	adds	r7, #28
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	bd90      	pop	{r4, r7, pc}
 800b9ac:	08017100 	.word	0x08017100

0800b9b0 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 800b9b0:	b480      	push	{r7}
 800b9b2:	b083      	sub	sp, #12
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
 800b9b8:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	2200      	movs	r2, #0
 800b9be:	605a      	str	r2, [r3, #4]
	return *this;
 800b9c0:	687b      	ldr	r3, [r7, #4]
      }
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	370c      	adds	r7, #12
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9cc:	4770      	bx	lr

0800b9ce <_ZNSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>:
          void operator()(typename _Alloc::value_type* __ptr)
 800b9ce:	b590      	push	{r4, r7, lr}
 800b9d0:	b085      	sub	sp, #20
 800b9d2:	af00      	add	r7, sp, #0
 800b9d4:	6078      	str	r0, [r7, #4]
 800b9d6:	6039      	str	r1, [r7, #0]
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 800b9d8:	6879      	ldr	r1, [r7, #4]
 800b9da:	f107 0308 	add.w	r3, r7, #8
 800b9de:	683a      	ldr	r2, [r7, #0]
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	f7ff febb 	bl	800b75c <_ZNSt15__allocated_ptrISaIN4tama10Stm32InputEEEC1ERS2_PS1_>
	    allocator_traits<_Alloc>::destroy(_M_alloc, __guard.get());
 800b9e6:	687c      	ldr	r4, [r7, #4]
 800b9e8:	f107 0308 	add.w	r3, r7, #8
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	f7fe fcaf 	bl	800a350 <_ZNSt15__allocated_ptrISaIN4tama10Stm32InputEEE3getEv>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	4619      	mov	r1, r3
 800b9f6:	4620      	mov	r0, r4
 800b9f8:	f000 febf 	bl	800c77a <_ZNSt16allocator_traitsISaIN4tama10Stm32InputEEE7destroyIS1_EEvRS2_PT_>
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 800b9fc:	f107 0308 	add.w	r3, r7, #8
 800ba00:	4618      	mov	r0, r3
 800ba02:	f7fe fc90 	bl	800a326 <_ZNSt15__allocated_ptrISaIN4tama10Stm32InputEEED1Ev>
          }
 800ba06:	bf00      	nop
 800ba08:	3714      	adds	r7, #20
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	bd90      	pop	{r4, r7, pc}

0800ba0e <_ZNSt16allocator_traitsISaIN4tama4ToneEEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a) noexcept
 800ba0e:	b580      	push	{r7, lr}
 800ba10:	b082      	sub	sp, #8
 800ba12:	af00      	add	r7, sp, #0
 800ba14:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 800ba16:	6878      	ldr	r0, [r7, #4]
 800ba18:	f000 febc 	bl	800c794 <_ZNK9__gnu_cxx13new_allocatorIN4tama4ToneEE8max_sizeEv>
 800ba1c:	4603      	mov	r3, r0
 800ba1e:	4618      	mov	r0, r3
 800ba20:	3708      	adds	r7, #8
 800ba22:	46bd      	mov	sp, r7
 800ba24:	bd80      	pop	{r7, pc}

0800ba26 <_ZN9__gnu_cxx13new_allocatorIN4tama4ToneEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800ba26:	b580      	push	{r7, lr}
 800ba28:	b084      	sub	sp, #16
 800ba2a:	af00      	add	r7, sp, #0
 800ba2c:	60f8      	str	r0, [r7, #12]
 800ba2e:	60b9      	str	r1, [r7, #8]
 800ba30:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800ba32:	68f8      	ldr	r0, [r7, #12]
 800ba34:	f000 feae 	bl	800c794 <_ZNK9__gnu_cxx13new_allocatorIN4tama4ToneEE8max_sizeEv>
 800ba38:	4602      	mov	r2, r0
 800ba3a:	68bb      	ldr	r3, [r7, #8]
 800ba3c:	4293      	cmp	r3, r2
 800ba3e:	bf8c      	ite	hi
 800ba40:	2301      	movhi	r3, #1
 800ba42:	2300      	movls	r3, #0
 800ba44:	b2db      	uxtb	r3, r3
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d001      	beq.n	800ba4e <_ZN9__gnu_cxx13new_allocatorIN4tama4ToneEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800ba4a:	f00a fae8 	bl	801601e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800ba4e:	68bb      	ldr	r3, [r7, #8]
 800ba50:	00db      	lsls	r3, r3, #3
 800ba52:	4618      	mov	r0, r3
 800ba54:	f00a fab7 	bl	8015fc6 <_Znwj>
 800ba58:	4603      	mov	r3, r0
      }
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	3710      	adds	r7, #16
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	bd80      	pop	{r7, pc}

0800ba62 <_ZNSt13move_iteratorIPN4tama4ToneEEC1ES2_>:
      move_iterator(iterator_type __i)
 800ba62:	b480      	push	{r7}
 800ba64:	b083      	sub	sp, #12
 800ba66:	af00      	add	r7, sp, #0
 800ba68:	6078      	str	r0, [r7, #4]
 800ba6a:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	683a      	ldr	r2, [r7, #0]
 800ba70:	601a      	str	r2, [r3, #0]
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	4618      	mov	r0, r3
 800ba76:	370c      	adds	r7, #12
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7e:	4770      	bx	lr

0800ba80 <_ZSt18uninitialized_copyISt13move_iteratorIPN4tama4ToneEES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b086      	sub	sp, #24
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	60f8      	str	r0, [r7, #12]
 800ba88:	60b9      	str	r1, [r7, #8]
 800ba8a:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800ba8c:	2301      	movs	r3, #1
 800ba8e:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800ba90:	687a      	ldr	r2, [r7, #4]
 800ba92:	68b9      	ldr	r1, [r7, #8]
 800ba94:	68f8      	ldr	r0, [r7, #12]
 800ba96:	f000 fe89 	bl	800c7ac <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPN4tama4ToneEES5_EET0_T_S8_S7_>
 800ba9a:	4603      	mov	r3, r0
    }
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	3718      	adds	r7, #24
 800baa0:	46bd      	mov	sp, r7
 800baa2:	bd80      	pop	{r7, pc}

0800baa4 <_ZN9__gnu_cxx13new_allocatorIN4tama7ContextEEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800baa4:	b480      	push	{r7}
 800baa6:	b083      	sub	sp, #12
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
 800baac:	6039      	str	r1, [r7, #0]
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	4618      	mov	r0, r3
 800bab2:	370c      	adds	r7, #12
 800bab4:	46bd      	mov	sp, r7
 800bab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baba:	4770      	bx	lr

0800babc <_ZNSt16allocator_traitsISaIN4tama7ContextEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800babc:	b580      	push	{r7, lr}
 800babe:	b082      	sub	sp, #8
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
 800bac4:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800bac6:	2200      	movs	r2, #0
 800bac8:	6839      	ldr	r1, [r7, #0]
 800baca:	6878      	ldr	r0, [r7, #4]
 800bacc:	f000 fe7e 	bl	800c7cc <_ZN9__gnu_cxx13new_allocatorIN4tama7ContextEE8allocateEjPKv>
 800bad0:	4603      	mov	r3, r0
 800bad2:	4618      	mov	r0, r3
 800bad4:	3708      	adds	r7, #8
 800bad6:	46bd      	mov	sp, r7
 800bad8:	bd80      	pop	{r7, pc}

0800bada <_ZNSt15__allocated_ptrISaIN4tama7ContextEEEC1ERS2_PS1_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 800bada:	b580      	push	{r7, lr}
 800badc:	b084      	sub	sp, #16
 800bade:	af00      	add	r7, sp, #0
 800bae0:	60f8      	str	r0, [r7, #12]
 800bae2:	60b9      	str	r1, [r7, #8]
 800bae4:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800bae6:	68b8      	ldr	r0, [r7, #8]
 800bae8:	f000 fe91 	bl	800c80e <_ZSt11__addressofISaIN4tama7ContextEEEPT_RS3_>
 800baec:	4602      	mov	r2, r0
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	601a      	str	r2, [r3, #0]
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	687a      	ldr	r2, [r7, #4]
 800baf6:	605a      	str	r2, [r3, #4]
      { }
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	4618      	mov	r0, r3
 800bafc:	3710      	adds	r7, #16
 800bafe:	46bd      	mov	sp, r7
 800bb00:	bd80      	pop	{r7, pc}

0800bb02 <_ZNSt16allocator_traitsISaIN4tama7ContextEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800bb02:	b580      	push	{r7, lr}
 800bb04:	b084      	sub	sp, #16
 800bb06:	af00      	add	r7, sp, #0
 800bb08:	60f8      	str	r0, [r7, #12]
 800bb0a:	60b9      	str	r1, [r7, #8]
 800bb0c:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800bb0e:	687a      	ldr	r2, [r7, #4]
 800bb10:	68b9      	ldr	r1, [r7, #8]
 800bb12:	68f8      	ldr	r0, [r7, #12]
 800bb14:	f000 fe86 	bl	800c824 <_ZN9__gnu_cxx13new_allocatorIN4tama7ContextEE10deallocateEPS2_j>
 800bb18:	bf00      	nop
 800bb1a:	3710      	adds	r7, #16
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	bd80      	pop	{r7, pc}

0800bb20 <_ZNSt15__allocated_ptrISaIN4tama7ContextEEE10_S_raw_ptrEPS1_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 800bb20:	b480      	push	{r7}
 800bb22:	b083      	sub	sp, #12
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	370c      	adds	r7, #12
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb34:	4770      	bx	lr

0800bb36 <_ZN9__gnu_cxx13new_allocatorIN4tama7ContextEE9constructIS2_JRSt10shared_ptrINS1_13TextureLoaderEERS5_INS1_5InputEEEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800bb36:	b5b0      	push	{r4, r5, r7, lr}
 800bb38:	b088      	sub	sp, #32
 800bb3a:	af00      	add	r7, sp, #0
 800bb3c:	60f8      	str	r0, [r7, #12]
 800bb3e:	60b9      	str	r1, [r7, #8]
 800bb40:	607a      	str	r2, [r7, #4]
 800bb42:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800bb44:	6878      	ldr	r0, [r7, #4]
 800bb46:	f7fc fbe8 	bl	800831a <_ZSt7forwardIRSt10shared_ptrIN4tama13TextureLoaderEEEOT_RNSt16remove_referenceIS5_E4typeE>
 800bb4a:	4602      	mov	r2, r0
 800bb4c:	f107 0310 	add.w	r3, r7, #16
 800bb50:	4611      	mov	r1, r2
 800bb52:	4618      	mov	r0, r3
 800bb54:	f7f5 fa56 	bl	8001004 <_ZNSt10shared_ptrIN4tama13TextureLoaderEEC1ERKS2_>
 800bb58:	f107 0410 	add.w	r4, r7, #16
 800bb5c:	6838      	ldr	r0, [r7, #0]
 800bb5e:	f7fc fbe7 	bl	8008330 <_ZSt7forwardIRSt10shared_ptrIN4tama5InputEEEOT_RNSt16remove_referenceIS5_E4typeE>
 800bb62:	4602      	mov	r2, r0
 800bb64:	f107 0318 	add.w	r3, r7, #24
 800bb68:	4611      	mov	r1, r2
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	f7f5 fa70 	bl	8001050 <_ZNSt10shared_ptrIN4tama5InputEEC1ERKS2_>
 800bb70:	f107 0518 	add.w	r5, r7, #24
 800bb74:	68bb      	ldr	r3, [r7, #8]
 800bb76:	4619      	mov	r1, r3
 800bb78:	2038      	movs	r0, #56	; 0x38
 800bb7a:	f7f4 fcd8 	bl	800052e <_ZnwjPv>
 800bb7e:	4603      	mov	r3, r0
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d004      	beq.n	800bb8e <_ZN9__gnu_cxx13new_allocatorIN4tama7ContextEE9constructIS2_JRSt10shared_ptrINS1_13TextureLoaderEERS5_INS1_5InputEEEEEvPT_DpOT0_+0x58>
 800bb84:	462a      	mov	r2, r5
 800bb86:	4621      	mov	r1, r4
 800bb88:	4618      	mov	r0, r3
 800bb8a:	f7f5 fa71 	bl	8001070 <_ZN4tama7ContextC1ESt10shared_ptrINS_13TextureLoaderEES1_INS_5InputEE>
 800bb8e:	f107 0318 	add.w	r3, r7, #24
 800bb92:	4618      	mov	r0, r3
 800bb94:	f7f7 fc15 	bl	80033c2 <_ZNSt10shared_ptrIN4tama5InputEED1Ev>
 800bb98:	f107 0310 	add.w	r3, r7, #16
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	f7f7 fc2b 	bl	80033f8 <_ZNSt10shared_ptrIN4tama13TextureLoaderEED1Ev>
 800bba2:	bf00      	nop
 800bba4:	3720      	adds	r7, #32
 800bba6:	46bd      	mov	sp, r7
 800bba8:	bdb0      	pop	{r4, r5, r7, pc}

0800bbaa <_ZNSaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) throw() { }
 800bbaa:	b580      	push	{r7, lr}
 800bbac:	b082      	sub	sp, #8
 800bbae:	af00      	add	r7, sp, #0
 800bbb0:	6078      	str	r0, [r7, #4]
 800bbb2:	6039      	str	r1, [r7, #0]
 800bbb4:	6878      	ldr	r0, [r7, #4]
 800bbb6:	f000 fe42 	bl	800c83e <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	3708      	adds	r7, #8
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	bd80      	pop	{r7, pc}

0800bbc4 <_ZNSaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>:
      ~allocator() throw() { }
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b082      	sub	sp, #8
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
 800bbcc:	6878      	ldr	r0, [r7, #4]
 800bbce:	f000 fe41 	bl	800c854 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	3708      	adds	r7, #8
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	bd80      	pop	{r7, pc}

0800bbdc <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>:
    __allocate_guarded(_Alloc& __a)
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b082      	sub	sp, #8
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
 800bbe4:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 800bbe6:	2101      	movs	r1, #1
 800bbe8:	6838      	ldr	r0, [r7, #0]
 800bbea:	f000 fe3e 	bl	800c86a <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>
 800bbee:	4603      	mov	r3, r0
 800bbf0:	461a      	mov	r2, r3
 800bbf2:	6839      	ldr	r1, [r7, #0]
 800bbf4:	6878      	ldr	r0, [r7, #4]
 800bbf6:	f000 fe47 	bl	800c888 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
    }
 800bbfa:	6878      	ldr	r0, [r7, #4]
 800bbfc:	3708      	adds	r7, #8
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	bd80      	pop	{r7, pc}

0800bc02 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>:
      ~__allocated_ptr()
 800bc02:	b580      	push	{r7, lr}
 800bc04:	b082      	sub	sp, #8
 800bc06:	af00      	add	r7, sp, #0
 800bc08:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	685b      	ldr	r3, [r3, #4]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d007      	beq.n	800bc22 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	6818      	ldr	r0, [r3, #0]
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	685b      	ldr	r3, [r3, #4]
 800bc1a:	2201      	movs	r2, #1
 800bc1c:	4619      	mov	r1, r3
 800bc1e:	f000 fe47 	bl	800c8b0 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>
      }
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	4618      	mov	r0, r3
 800bc26:	3708      	adds	r7, #8
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	bd80      	pop	{r7, pc}

0800bc2c <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b082      	sub	sp, #8
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	685b      	ldr	r3, [r3, #4]
 800bc38:	4618      	mov	r0, r3
 800bc3a:	f000 fe48 	bl	800c8ce <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>
 800bc3e:	4603      	mov	r3, r0
 800bc40:	4618      	mov	r0, r3
 800bc42:	3708      	adds	r7, #8
 800bc44:	46bd      	mov	sp, r7
 800bc46:	bd80      	pop	{r7, pc}

0800bc48 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, false>
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b082      	sub	sp, #8
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	4618      	mov	r0, r3
 800bc54:	f7fd fd2e 	bl	80096b4 <_ZNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	3708      	adds	r7, #8
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	bd80      	pop	{r7, pc}

0800bc62 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama7ContextEELb1EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp
 800bc62:	b580      	push	{r7, lr}
 800bc64:	b082      	sub	sp, #8
 800bc66:	af00      	add	r7, sp, #0
 800bc68:	6078      	str	r0, [r7, #4]
 800bc6a:	6878      	ldr	r0, [r7, #4]
 800bc6c:	f7fc fdcb 	bl	8008806 <_ZNSaIN4tama7ContextEED1Ev>
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	4618      	mov	r0, r3
 800bc74:	3708      	adds	r7, #8
 800bc76:	46bd      	mov	sp, r7
 800bc78:	bd80      	pop	{r7, pc}

0800bc7a <_ZNSt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>:
      class _Impl : _Sp_ebo_helper<0, _Deleter>, _Sp_ebo_helper<1, _Alloc>
 800bc7a:	b580      	push	{r7, lr}
 800bc7c:	b082      	sub	sp, #8
 800bc7e:	af00      	add	r7, sp, #0
 800bc80:	6078      	str	r0, [r7, #4]
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	3301      	adds	r3, #1
 800bc86:	4618      	mov	r0, r3
 800bc88:	f7ff ffeb 	bl	800bc62 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama7ContextEELb1EED1Ev>
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	4618      	mov	r0, r3
 800bc90:	f7ff ffda 	bl	800bc48 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	4618      	mov	r0, r3
 800bc98:	3708      	adds	r7, #8
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	bd80      	pop	{r7, pc}
	...

0800bca0 <_ZNSt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 800bca0:	b590      	push	{r4, r7, lr}
 800bca2:	b087      	sub	sp, #28
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	60f8      	str	r0, [r7, #12]
 800bca8:	60b9      	str	r1, [r7, #8]
 800bcaa:	607a      	str	r2, [r7, #4]
 800bcac:	603b      	str	r3, [r7, #0]
      : _M_impl(__p, std::move(__d), __a) { }
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	f7f6 fd33 	bl	800271c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800bcb6:	4a10      	ldr	r2, [pc, #64]	; (800bcf8 <_ZNSt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_+0x58>)
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	601a      	str	r2, [r3, #0]
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	f103 040c 	add.w	r4, r3, #12
 800bcc2:	6878      	ldr	r0, [r7, #4]
 800bcc4:	f7fe fca1 	bl	800a60a <_ZSt4moveIRNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800bcc8:	4602      	mov	r2, r0
 800bcca:	f107 0314 	add.w	r3, r7, #20
 800bcce:	4611      	mov	r1, r2
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	f7fe fca5 	bl	800a620 <_ZNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 800bcd6:	f107 0214 	add.w	r2, r7, #20
 800bcda:	683b      	ldr	r3, [r7, #0]
 800bcdc:	68b9      	ldr	r1, [r7, #8]
 800bcde:	4620      	mov	r0, r4
 800bce0:	f000 fe00 	bl	800c8e4 <_ZNSt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>
 800bce4:	f107 0314 	add.w	r3, r7, #20
 800bce8:	4618      	mov	r0, r3
 800bcea:	f7fd fce3 	bl	80096b4 <_ZNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	371c      	adds	r7, #28
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	bd90      	pop	{r4, r7, pc}
 800bcf8:	080170e4 	.word	0x080170e4

0800bcfc <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 800bcfc:	b480      	push	{r7}
 800bcfe:	b083      	sub	sp, #12
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
 800bd04:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	2200      	movs	r2, #0
 800bd0a:	605a      	str	r2, [r3, #4]
	return *this;
 800bd0c:	687b      	ldr	r3, [r7, #4]
      }
 800bd0e:	4618      	mov	r0, r3
 800bd10:	370c      	adds	r7, #12
 800bd12:	46bd      	mov	sp, r7
 800bd14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd18:	4770      	bx	lr

0800bd1a <_ZNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>:
          void operator()(typename _Alloc::value_type* __ptr)
 800bd1a:	b590      	push	{r4, r7, lr}
 800bd1c:	b085      	sub	sp, #20
 800bd1e:	af00      	add	r7, sp, #0
 800bd20:	6078      	str	r0, [r7, #4]
 800bd22:	6039      	str	r1, [r7, #0]
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 800bd24:	6879      	ldr	r1, [r7, #4]
 800bd26:	f107 0308 	add.w	r3, r7, #8
 800bd2a:	683a      	ldr	r2, [r7, #0]
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	f7ff fed4 	bl	800bada <_ZNSt15__allocated_ptrISaIN4tama7ContextEEEC1ERS2_PS1_>
	    allocator_traits<_Alloc>::destroy(_M_alloc, __guard.get());
 800bd32:	687c      	ldr	r4, [r7, #4]
 800bd34:	f107 0308 	add.w	r3, r7, #8
 800bd38:	4618      	mov	r0, r3
 800bd3a:	f7fe fc31 	bl	800a5a0 <_ZNSt15__allocated_ptrISaIN4tama7ContextEEE3getEv>
 800bd3e:	4603      	mov	r3, r0
 800bd40:	4619      	mov	r1, r3
 800bd42:	4620      	mov	r0, r4
 800bd44:	f000 fdec 	bl	800c920 <_ZNSt16allocator_traitsISaIN4tama7ContextEEE7destroyIS1_EEvRS2_PT_>
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 800bd48:	f107 0308 	add.w	r3, r7, #8
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	f7fe fc12 	bl	800a576 <_ZNSt15__allocated_ptrISaIN4tama7ContextEEED1Ev>
          }
 800bd52:	bf00      	nop
 800bd54:	3714      	adds	r7, #20
 800bd56:	46bd      	mov	sp, r7
 800bd58:	bd90      	pop	{r4, r7, pc}

0800bd5a <_ZN9__gnu_cxx13new_allocatorIN4tama16Nokia5510DisplayEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800bd5a:	b580      	push	{r7, lr}
 800bd5c:	b084      	sub	sp, #16
 800bd5e:	af00      	add	r7, sp, #0
 800bd60:	60f8      	str	r0, [r7, #12]
 800bd62:	60b9      	str	r1, [r7, #8]
 800bd64:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800bd66:	68f8      	ldr	r0, [r7, #12]
 800bd68:	f000 fde8 	bl	800c93c <_ZNK9__gnu_cxx13new_allocatorIN4tama16Nokia5510DisplayEE8max_sizeEv>
 800bd6c:	4602      	mov	r2, r0
 800bd6e:	68bb      	ldr	r3, [r7, #8]
 800bd70:	4293      	cmp	r3, r2
 800bd72:	bf8c      	ite	hi
 800bd74:	2301      	movhi	r3, #1
 800bd76:	2300      	movls	r3, #0
 800bd78:	b2db      	uxtb	r3, r3
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d001      	beq.n	800bd82 <_ZN9__gnu_cxx13new_allocatorIN4tama16Nokia5510DisplayEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800bd7e:	f00a f94e 	bl	801601e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800bd82:	68ba      	ldr	r2, [r7, #8]
 800bd84:	4613      	mov	r3, r2
 800bd86:	005b      	lsls	r3, r3, #1
 800bd88:	4413      	add	r3, r2
 800bd8a:	011b      	lsls	r3, r3, #4
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	f00a f91a 	bl	8015fc6 <_Znwj>
 800bd92:	4603      	mov	r3, r0
      }
 800bd94:	4618      	mov	r0, r3
 800bd96:	3710      	adds	r7, #16
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	bd80      	pop	{r7, pc}

0800bd9c <_ZSt11__addressofISaIN4tama16Nokia5510DisplayEEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800bd9c:	b480      	push	{r7}
 800bd9e:	b083      	sub	sp, #12
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	4618      	mov	r0, r3
 800bda8:	370c      	adds	r7, #12
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb0:	4770      	bx	lr

0800bdb2 <_ZN9__gnu_cxx13new_allocatorIN4tama16Nokia5510DisplayEE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 800bdb2:	b580      	push	{r7, lr}
 800bdb4:	b084      	sub	sp, #16
 800bdb6:	af00      	add	r7, sp, #0
 800bdb8:	60f8      	str	r0, [r7, #12]
 800bdba:	60b9      	str	r1, [r7, #8]
 800bdbc:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800bdbe:	68b8      	ldr	r0, [r7, #8]
 800bdc0:	f00a f91a 	bl	8015ff8 <_ZdlPv>
      }
 800bdc4:	bf00      	nop
 800bdc6:	3710      	adds	r7, #16
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	bd80      	pop	{r7, pc}

0800bdcc <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800bdcc:	b480      	push	{r7}
 800bdce:	b083      	sub	sp, #12
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	370c      	adds	r7, #12
 800bdda:	46bd      	mov	sp, r7
 800bddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde0:	4770      	bx	lr

0800bde2 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800bde2:	b480      	push	{r7}
 800bde4:	b083      	sub	sp, #12
 800bde6:	af00      	add	r7, sp, #0
 800bde8:	6078      	str	r0, [r7, #4]
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	4618      	mov	r0, r3
 800bdee:	370c      	adds	r7, #12
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf6:	4770      	bx	lr

0800bdf8 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>:
      allocate(allocator_type& __a, size_type __n)
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b082      	sub	sp, #8
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
 800be00:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800be02:	2200      	movs	r2, #0
 800be04:	6839      	ldr	r1, [r7, #0]
 800be06:	6878      	ldr	r0, [r7, #4]
 800be08:	f000 fda6 	bl	800c958 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>
 800be0c:	4603      	mov	r3, r0
 800be0e:	4618      	mov	r0, r3
 800be10:	3708      	adds	r7, #8
 800be12:	46bd      	mov	sp, r7
 800be14:	bd80      	pop	{r7, pc}

0800be16 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 800be16:	b580      	push	{r7, lr}
 800be18:	b084      	sub	sp, #16
 800be1a:	af00      	add	r7, sp, #0
 800be1c:	60f8      	str	r0, [r7, #12]
 800be1e:	60b9      	str	r1, [r7, #8]
 800be20:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800be22:	68b8      	ldr	r0, [r7, #8]
 800be24:	f000 fdb9 	bl	800c99a <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>
 800be28:	4602      	mov	r2, r0
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	601a      	str	r2, [r3, #0]
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	687a      	ldr	r2, [r7, #4]
 800be32:	605a      	str	r2, [r3, #4]
      { }
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	4618      	mov	r0, r3
 800be38:	3710      	adds	r7, #16
 800be3a:	46bd      	mov	sp, r7
 800be3c:	bd80      	pop	{r7, pc}

0800be3e <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800be3e:	b580      	push	{r7, lr}
 800be40:	b084      	sub	sp, #16
 800be42:	af00      	add	r7, sp, #0
 800be44:	60f8      	str	r0, [r7, #12]
 800be46:	60b9      	str	r1, [r7, #8]
 800be48:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800be4a:	687a      	ldr	r2, [r7, #4]
 800be4c:	68b9      	ldr	r1, [r7, #8]
 800be4e:	68f8      	ldr	r0, [r7, #12]
 800be50:	f000 fdae 	bl	800c9b0 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>
 800be54:	bf00      	nop
 800be56:	3710      	adds	r7, #16
 800be58:	46bd      	mov	sp, r7
 800be5a:	bd80      	pop	{r7, pc}

0800be5c <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 800be5c:	b480      	push	{r7}
 800be5e:	b083      	sub	sp, #12
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	4618      	mov	r0, r3
 800be68:	370c      	adds	r7, #12
 800be6a:	46bd      	mov	sp, r7
 800be6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be70:	4770      	bx	lr

0800be72 <_ZNSt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 800be72:	b590      	push	{r4, r7, lr}
 800be74:	b085      	sub	sp, #20
 800be76:	af00      	add	r7, sp, #0
 800be78:	60f8      	str	r0, [r7, #12]
 800be7a:	60b9      	str	r1, [r7, #8]
 800be7c:	607a      	str	r2, [r7, #4]
 800be7e:	603b      	str	r3, [r7, #0]
	: _M_ptr(__p), _Del_base(std::move(__d)), _Alloc_base(__a)
 800be80:	68fc      	ldr	r4, [r7, #12]
 800be82:	6878      	ldr	r0, [r7, #4]
 800be84:	f7fd fd18 	bl	80098b8 <_ZSt4moveIRNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800be88:	4603      	mov	r3, r0
 800be8a:	4619      	mov	r1, r3
 800be8c:	4620      	mov	r0, r4
 800be8e:	f000 fd9c 	bl	800c9ca <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	3301      	adds	r3, #1
 800be96:	6839      	ldr	r1, [r7, #0]
 800be98:	4618      	mov	r0, r3
 800be9a:	f000 fda9 	bl	800c9f0 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama16Nokia5510DisplayEELb1EEC1ERKS2_>
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	68ba      	ldr	r2, [r7, #8]
 800bea2:	605a      	str	r2, [r3, #4]
	{ }
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	4618      	mov	r0, r3
 800bea8:	3714      	adds	r7, #20
 800beaa:	46bd      	mov	sp, r7
 800beac:	bd90      	pop	{r4, r7, pc}

0800beae <_ZNSt16allocator_traitsISaIN4tama16Nokia5510DisplayEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 800beae:	b580      	push	{r7, lr}
 800beb0:	b082      	sub	sp, #8
 800beb2:	af00      	add	r7, sp, #0
 800beb4:	6078      	str	r0, [r7, #4]
 800beb6:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 800beb8:	6839      	ldr	r1, [r7, #0]
 800beba:	6878      	ldr	r0, [r7, #4]
 800bebc:	f000 fda6 	bl	800ca0c <_ZN9__gnu_cxx13new_allocatorIN4tama16Nokia5510DisplayEE7destroyIS2_EEvPT_>
 800bec0:	bf00      	nop
 800bec2:	3708      	adds	r7, #8
 800bec4:	46bd      	mov	sp, r7
 800bec6:	bd80      	pop	{r7, pc}

0800bec8 <_ZN9__gnu_cxx13new_allocatorIN4tama18Stm32TextureLoaderEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800bec8:	b580      	push	{r7, lr}
 800beca:	b084      	sub	sp, #16
 800becc:	af00      	add	r7, sp, #0
 800bece:	60f8      	str	r0, [r7, #12]
 800bed0:	60b9      	str	r1, [r7, #8]
 800bed2:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800bed4:	68f8      	ldr	r0, [r7, #12]
 800bed6:	f000 fda4 	bl	800ca22 <_ZNK9__gnu_cxx13new_allocatorIN4tama18Stm32TextureLoaderEE8max_sizeEv>
 800beda:	4602      	mov	r2, r0
 800bedc:	68bb      	ldr	r3, [r7, #8]
 800bede:	4293      	cmp	r3, r2
 800bee0:	bf8c      	ite	hi
 800bee2:	2301      	movhi	r3, #1
 800bee4:	2300      	movls	r3, #0
 800bee6:	b2db      	uxtb	r3, r3
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d001      	beq.n	800bef0 <_ZN9__gnu_cxx13new_allocatorIN4tama18Stm32TextureLoaderEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800beec:	f00a f897 	bl	801601e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800bef0:	68bb      	ldr	r3, [r7, #8]
 800bef2:	009b      	lsls	r3, r3, #2
 800bef4:	4618      	mov	r0, r3
 800bef6:	f00a f866 	bl	8015fc6 <_Znwj>
 800befa:	4603      	mov	r3, r0
      }
 800befc:	4618      	mov	r0, r3
 800befe:	3710      	adds	r7, #16
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}

0800bf04 <_ZSt11__addressofISaIN4tama18Stm32TextureLoaderEEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800bf04:	b480      	push	{r7}
 800bf06:	b083      	sub	sp, #12
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	4618      	mov	r0, r3
 800bf10:	370c      	adds	r7, #12
 800bf12:	46bd      	mov	sp, r7
 800bf14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf18:	4770      	bx	lr

0800bf1a <_ZN9__gnu_cxx13new_allocatorIN4tama18Stm32TextureLoaderEE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 800bf1a:	b580      	push	{r7, lr}
 800bf1c:	b084      	sub	sp, #16
 800bf1e:	af00      	add	r7, sp, #0
 800bf20:	60f8      	str	r0, [r7, #12]
 800bf22:	60b9      	str	r1, [r7, #8]
 800bf24:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800bf26:	68b8      	ldr	r0, [r7, #8]
 800bf28:	f00a f866 	bl	8015ff8 <_ZdlPv>
      }
 800bf2c:	bf00      	nop
 800bf2e:	3710      	adds	r7, #16
 800bf30:	46bd      	mov	sp, r7
 800bf32:	bd80      	pop	{r7, pc}

0800bf34 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800bf34:	b480      	push	{r7}
 800bf36:	b083      	sub	sp, #12
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	4618      	mov	r0, r3
 800bf40:	370c      	adds	r7, #12
 800bf42:	46bd      	mov	sp, r7
 800bf44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf48:	4770      	bx	lr

0800bf4a <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800bf4a:	b480      	push	{r7}
 800bf4c:	b083      	sub	sp, #12
 800bf4e:	af00      	add	r7, sp, #0
 800bf50:	6078      	str	r0, [r7, #4]
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	4618      	mov	r0, r3
 800bf56:	370c      	adds	r7, #12
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5e:	4770      	bx	lr

0800bf60 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>:
      allocate(allocator_type& __a, size_type __n)
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b082      	sub	sp, #8
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
 800bf68:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	6839      	ldr	r1, [r7, #0]
 800bf6e:	6878      	ldr	r0, [r7, #4]
 800bf70:	f000 fd63 	bl	800ca3a <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>
 800bf74:	4603      	mov	r3, r0
 800bf76:	4618      	mov	r0, r3
 800bf78:	3708      	adds	r7, #8
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	bd80      	pop	{r7, pc}

0800bf7e <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 800bf7e:	b580      	push	{r7, lr}
 800bf80:	b084      	sub	sp, #16
 800bf82:	af00      	add	r7, sp, #0
 800bf84:	60f8      	str	r0, [r7, #12]
 800bf86:	60b9      	str	r1, [r7, #8]
 800bf88:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800bf8a:	68b8      	ldr	r0, [r7, #8]
 800bf8c:	f000 fd76 	bl	800ca7c <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>
 800bf90:	4602      	mov	r2, r0
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	601a      	str	r2, [r3, #0]
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	687a      	ldr	r2, [r7, #4]
 800bf9a:	605a      	str	r2, [r3, #4]
      { }
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	3710      	adds	r7, #16
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	bd80      	pop	{r7, pc}

0800bfa6 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800bfa6:	b580      	push	{r7, lr}
 800bfa8:	b084      	sub	sp, #16
 800bfaa:	af00      	add	r7, sp, #0
 800bfac:	60f8      	str	r0, [r7, #12]
 800bfae:	60b9      	str	r1, [r7, #8]
 800bfb0:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800bfb2:	687a      	ldr	r2, [r7, #4]
 800bfb4:	68b9      	ldr	r1, [r7, #8]
 800bfb6:	68f8      	ldr	r0, [r7, #12]
 800bfb8:	f000 fd6b 	bl	800ca92 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>
 800bfbc:	bf00      	nop
 800bfbe:	3710      	adds	r7, #16
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bd80      	pop	{r7, pc}

0800bfc4 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 800bfc4:	b480      	push	{r7}
 800bfc6:	b083      	sub	sp, #12
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	4618      	mov	r0, r3
 800bfd0:	370c      	adds	r7, #12
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd8:	4770      	bx	lr

0800bfda <_ZNSt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 800bfda:	b590      	push	{r4, r7, lr}
 800bfdc:	b085      	sub	sp, #20
 800bfde:	af00      	add	r7, sp, #0
 800bfe0:	60f8      	str	r0, [r7, #12]
 800bfe2:	60b9      	str	r1, [r7, #8]
 800bfe4:	607a      	str	r2, [r7, #4]
 800bfe6:	603b      	str	r3, [r7, #0]
	: _M_ptr(__p), _Del_base(std::move(__d)), _Alloc_base(__a)
 800bfe8:	68fc      	ldr	r4, [r7, #12]
 800bfea:	6878      	ldr	r0, [r7, #4]
 800bfec:	f7fd fd4c 	bl	8009a88 <_ZSt4moveIRNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800bff0:	4603      	mov	r3, r0
 800bff2:	4619      	mov	r1, r3
 800bff4:	4620      	mov	r0, r4
 800bff6:	f000 fd59 	bl	800caac <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	3301      	adds	r3, #1
 800bffe:	6839      	ldr	r1, [r7, #0]
 800c000:	4618      	mov	r0, r3
 800c002:	f000 fd66 	bl	800cad2 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama18Stm32TextureLoaderEELb1EEC1ERKS2_>
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	68ba      	ldr	r2, [r7, #8]
 800c00a:	605a      	str	r2, [r3, #4]
	{ }
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	4618      	mov	r0, r3
 800c010:	3714      	adds	r7, #20
 800c012:	46bd      	mov	sp, r7
 800c014:	bd90      	pop	{r4, r7, pc}

0800c016 <_ZNSt16allocator_traitsISaIN4tama18Stm32TextureLoaderEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 800c016:	b580      	push	{r7, lr}
 800c018:	b082      	sub	sp, #8
 800c01a:	af00      	add	r7, sp, #0
 800c01c:	6078      	str	r0, [r7, #4]
 800c01e:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 800c020:	6839      	ldr	r1, [r7, #0]
 800c022:	6878      	ldr	r0, [r7, #4]
 800c024:	f000 fd63 	bl	800caee <_ZN9__gnu_cxx13new_allocatorIN4tama18Stm32TextureLoaderEE7destroyIS2_EEvPT_>
 800c028:	bf00      	nop
 800c02a:	3708      	adds	r7, #8
 800c02c:	46bd      	mov	sp, r7
 800c02e:	bd80      	pop	{r7, pc}

0800c030 <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800c030:	b580      	push	{r7, lr}
 800c032:	b084      	sub	sp, #16
 800c034:	af00      	add	r7, sp, #0
 800c036:	60f8      	str	r0, [r7, #12]
 800c038:	60b9      	str	r1, [r7, #8]
 800c03a:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800c03c:	68f8      	ldr	r0, [r7, #12]
 800c03e:	f000 fd61 	bl	800cb04 <_ZNK9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEE8max_sizeEv>
 800c042:	4602      	mov	r2, r0
 800c044:	68bb      	ldr	r3, [r7, #8]
 800c046:	4293      	cmp	r3, r2
 800c048:	bf8c      	ite	hi
 800c04a:	2301      	movhi	r3, #1
 800c04c:	2300      	movls	r3, #0
 800c04e:	b2db      	uxtb	r3, r3
 800c050:	2b00      	cmp	r3, #0
 800c052:	d001      	beq.n	800c058 <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800c054:	f009 ffe3 	bl	801601e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800c058:	68ba      	ldr	r2, [r7, #8]
 800c05a:	4613      	mov	r3, r2
 800c05c:	005b      	lsls	r3, r3, #1
 800c05e:	4413      	add	r3, r2
 800c060:	00db      	lsls	r3, r3, #3
 800c062:	4618      	mov	r0, r3
 800c064:	f009 ffaf 	bl	8015fc6 <_Znwj>
 800c068:	4603      	mov	r3, r0
      }
 800c06a:	4618      	mov	r0, r3
 800c06c:	3710      	adds	r7, #16
 800c06e:	46bd      	mov	sp, r7
 800c070:	bd80      	pop	{r7, pc}

0800c072 <_ZSt11__addressofISaIN4tama27Nokia5110DisplayDataManagerEEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800c072:	b480      	push	{r7}
 800c074:	b083      	sub	sp, #12
 800c076:	af00      	add	r7, sp, #0
 800c078:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	4618      	mov	r0, r3
 800c07e:	370c      	adds	r7, #12
 800c080:	46bd      	mov	sp, r7
 800c082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c086:	4770      	bx	lr

0800c088 <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 800c088:	b580      	push	{r7, lr}
 800c08a:	b084      	sub	sp, #16
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	60f8      	str	r0, [r7, #12]
 800c090:	60b9      	str	r1, [r7, #8]
 800c092:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800c094:	68b8      	ldr	r0, [r7, #8]
 800c096:	f009 ffaf 	bl	8015ff8 <_ZdlPv>
      }
 800c09a:	bf00      	nop
 800c09c:	3710      	adds	r7, #16
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	bd80      	pop	{r7, pc}

0800c0a2 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800c0a2:	b480      	push	{r7}
 800c0a4:	b083      	sub	sp, #12
 800c0a6:	af00      	add	r7, sp, #0
 800c0a8:	6078      	str	r0, [r7, #4]
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	370c      	adds	r7, #12
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b6:	4770      	bx	lr

0800c0b8 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800c0b8:	b480      	push	{r7}
 800c0ba:	b083      	sub	sp, #12
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	370c      	adds	r7, #12
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0cc:	4770      	bx	lr

0800c0ce <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>:
      allocate(allocator_type& __a, size_type __n)
 800c0ce:	b580      	push	{r7, lr}
 800c0d0:	b082      	sub	sp, #8
 800c0d2:	af00      	add	r7, sp, #0
 800c0d4:	6078      	str	r0, [r7, #4]
 800c0d6:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800c0d8:	2200      	movs	r2, #0
 800c0da:	6839      	ldr	r1, [r7, #0]
 800c0dc:	6878      	ldr	r0, [r7, #4]
 800c0de:	f000 fd1f 	bl	800cb20 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>
 800c0e2:	4603      	mov	r3, r0
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	3708      	adds	r7, #8
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	bd80      	pop	{r7, pc}

0800c0ec <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b084      	sub	sp, #16
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	60f8      	str	r0, [r7, #12]
 800c0f4:	60b9      	str	r1, [r7, #8]
 800c0f6:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800c0f8:	68b8      	ldr	r0, [r7, #8]
 800c0fa:	f000 fd32 	bl	800cb62 <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>
 800c0fe:	4602      	mov	r2, r0
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	601a      	str	r2, [r3, #0]
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	687a      	ldr	r2, [r7, #4]
 800c108:	605a      	str	r2, [r3, #4]
      { }
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	4618      	mov	r0, r3
 800c10e:	3710      	adds	r7, #16
 800c110:	46bd      	mov	sp, r7
 800c112:	bd80      	pop	{r7, pc}

0800c114 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800c114:	b580      	push	{r7, lr}
 800c116:	b084      	sub	sp, #16
 800c118:	af00      	add	r7, sp, #0
 800c11a:	60f8      	str	r0, [r7, #12]
 800c11c:	60b9      	str	r1, [r7, #8]
 800c11e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800c120:	687a      	ldr	r2, [r7, #4]
 800c122:	68b9      	ldr	r1, [r7, #8]
 800c124:	68f8      	ldr	r0, [r7, #12]
 800c126:	f000 fd27 	bl	800cb78 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>
 800c12a:	bf00      	nop
 800c12c:	3710      	adds	r7, #16
 800c12e:	46bd      	mov	sp, r7
 800c130:	bd80      	pop	{r7, pc}

0800c132 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 800c132:	b480      	push	{r7}
 800c134:	b083      	sub	sp, #12
 800c136:	af00      	add	r7, sp, #0
 800c138:	6078      	str	r0, [r7, #4]
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	4618      	mov	r0, r3
 800c13e:	370c      	adds	r7, #12
 800c140:	46bd      	mov	sp, r7
 800c142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c146:	4770      	bx	lr

0800c148 <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 800c148:	b590      	push	{r4, r7, lr}
 800c14a:	b085      	sub	sp, #20
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	60f8      	str	r0, [r7, #12]
 800c150:	60b9      	str	r1, [r7, #8]
 800c152:	607a      	str	r2, [r7, #4]
 800c154:	603b      	str	r3, [r7, #0]
	: _M_ptr(__p), _Del_base(std::move(__d)), _Alloc_base(__a)
 800c156:	68fc      	ldr	r4, [r7, #12]
 800c158:	6878      	ldr	r0, [r7, #4]
 800c15a:	f7fd fd7d 	bl	8009c58 <_ZSt4moveIRNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800c15e:	4603      	mov	r3, r0
 800c160:	4619      	mov	r1, r3
 800c162:	4620      	mov	r0, r4
 800c164:	f000 fd15 	bl	800cb92 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	3301      	adds	r3, #1
 800c16c:	6839      	ldr	r1, [r7, #0]
 800c16e:	4618      	mov	r0, r3
 800c170:	f000 fd22 	bl	800cbb8 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama27Nokia5110DisplayDataManagerEELb1EEC1ERKS2_>
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	68ba      	ldr	r2, [r7, #8]
 800c178:	605a      	str	r2, [r3, #4]
	{ }
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	4618      	mov	r0, r3
 800c17e:	3714      	adds	r7, #20
 800c180:	46bd      	mov	sp, r7
 800c182:	bd90      	pop	{r4, r7, pc}

0800c184 <_ZNSt16allocator_traitsISaIN4tama27Nokia5110DisplayDataManagerEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 800c184:	b580      	push	{r7, lr}
 800c186:	b082      	sub	sp, #8
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]
 800c18c:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 800c18e:	6839      	ldr	r1, [r7, #0]
 800c190:	6878      	ldr	r0, [r7, #4]
 800c192:	f000 fd1f 	bl	800cbd4 <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEE7destroyIS2_EEvPT_>
 800c196:	bf00      	nop
 800c198:	3708      	adds	r7, #8
 800c19a:	46bd      	mov	sp, r7
 800c19c:	bd80      	pop	{r7, pc}

0800c19e <_ZN9__gnu_cxx13new_allocatorIN4tama16Stm32TimeMonitorEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800c19e:	b580      	push	{r7, lr}
 800c1a0:	b084      	sub	sp, #16
 800c1a2:	af00      	add	r7, sp, #0
 800c1a4:	60f8      	str	r0, [r7, #12]
 800c1a6:	60b9      	str	r1, [r7, #8]
 800c1a8:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800c1aa:	68f8      	ldr	r0, [r7, #12]
 800c1ac:	f000 fd1d 	bl	800cbea <_ZNK9__gnu_cxx13new_allocatorIN4tama16Stm32TimeMonitorEE8max_sizeEv>
 800c1b0:	4602      	mov	r2, r0
 800c1b2:	68bb      	ldr	r3, [r7, #8]
 800c1b4:	4293      	cmp	r3, r2
 800c1b6:	bf8c      	ite	hi
 800c1b8:	2301      	movhi	r3, #1
 800c1ba:	2300      	movls	r3, #0
 800c1bc:	b2db      	uxtb	r3, r3
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d001      	beq.n	800c1c6 <_ZN9__gnu_cxx13new_allocatorIN4tama16Stm32TimeMonitorEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800c1c2:	f009 ff2c 	bl	801601e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800c1c6:	68bb      	ldr	r3, [r7, #8]
 800c1c8:	00db      	lsls	r3, r3, #3
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	f009 fefb 	bl	8015fc6 <_Znwj>
 800c1d0:	4603      	mov	r3, r0
      }
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	3710      	adds	r7, #16
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	bd80      	pop	{r7, pc}

0800c1da <_ZSt11__addressofISaIN4tama16Stm32TimeMonitorEEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800c1da:	b480      	push	{r7}
 800c1dc:	b083      	sub	sp, #12
 800c1de:	af00      	add	r7, sp, #0
 800c1e0:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	370c      	adds	r7, #12
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ee:	4770      	bx	lr

0800c1f0 <_ZN9__gnu_cxx13new_allocatorIN4tama16Stm32TimeMonitorEE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b084      	sub	sp, #16
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	60f8      	str	r0, [r7, #12]
 800c1f8:	60b9      	str	r1, [r7, #8]
 800c1fa:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800c1fc:	68b8      	ldr	r0, [r7, #8]
 800c1fe:	f009 fefb 	bl	8015ff8 <_ZdlPv>
      }
 800c202:	bf00      	nop
 800c204:	3710      	adds	r7, #16
 800c206:	46bd      	mov	sp, r7
 800c208:	bd80      	pop	{r7, pc}

0800c20a <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800c20a:	b480      	push	{r7}
 800c20c:	b083      	sub	sp, #12
 800c20e:	af00      	add	r7, sp, #0
 800c210:	6078      	str	r0, [r7, #4]
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	4618      	mov	r0, r3
 800c216:	370c      	adds	r7, #12
 800c218:	46bd      	mov	sp, r7
 800c21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21e:	4770      	bx	lr

0800c220 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800c220:	b480      	push	{r7}
 800c222:	b083      	sub	sp, #12
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	4618      	mov	r0, r3
 800c22c:	370c      	adds	r7, #12
 800c22e:	46bd      	mov	sp, r7
 800c230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c234:	4770      	bx	lr

0800c236 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>:
      allocate(allocator_type& __a, size_type __n)
 800c236:	b580      	push	{r7, lr}
 800c238:	b082      	sub	sp, #8
 800c23a:	af00      	add	r7, sp, #0
 800c23c:	6078      	str	r0, [r7, #4]
 800c23e:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800c240:	2200      	movs	r2, #0
 800c242:	6839      	ldr	r1, [r7, #0]
 800c244:	6878      	ldr	r0, [r7, #4]
 800c246:	f000 fcdc 	bl	800cc02 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>
 800c24a:	4603      	mov	r3, r0
 800c24c:	4618      	mov	r0, r3
 800c24e:	3708      	adds	r7, #8
 800c250:	46bd      	mov	sp, r7
 800c252:	bd80      	pop	{r7, pc}

0800c254 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 800c254:	b580      	push	{r7, lr}
 800c256:	b084      	sub	sp, #16
 800c258:	af00      	add	r7, sp, #0
 800c25a:	60f8      	str	r0, [r7, #12]
 800c25c:	60b9      	str	r1, [r7, #8]
 800c25e:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800c260:	68b8      	ldr	r0, [r7, #8]
 800c262:	f000 fcef 	bl	800cc44 <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>
 800c266:	4602      	mov	r2, r0
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	601a      	str	r2, [r3, #0]
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	687a      	ldr	r2, [r7, #4]
 800c270:	605a      	str	r2, [r3, #4]
      { }
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	4618      	mov	r0, r3
 800c276:	3710      	adds	r7, #16
 800c278:	46bd      	mov	sp, r7
 800c27a:	bd80      	pop	{r7, pc}

0800c27c <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b084      	sub	sp, #16
 800c280:	af00      	add	r7, sp, #0
 800c282:	60f8      	str	r0, [r7, #12]
 800c284:	60b9      	str	r1, [r7, #8]
 800c286:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800c288:	687a      	ldr	r2, [r7, #4]
 800c28a:	68b9      	ldr	r1, [r7, #8]
 800c28c:	68f8      	ldr	r0, [r7, #12]
 800c28e:	f000 fce4 	bl	800cc5a <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>
 800c292:	bf00      	nop
 800c294:	3710      	adds	r7, #16
 800c296:	46bd      	mov	sp, r7
 800c298:	bd80      	pop	{r7, pc}

0800c29a <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 800c29a:	b480      	push	{r7}
 800c29c:	b083      	sub	sp, #12
 800c29e:	af00      	add	r7, sp, #0
 800c2a0:	6078      	str	r0, [r7, #4]
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	370c      	adds	r7, #12
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ae:	4770      	bx	lr

0800c2b0 <_ZNSt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 800c2b0:	b590      	push	{r4, r7, lr}
 800c2b2:	b085      	sub	sp, #20
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	60f8      	str	r0, [r7, #12]
 800c2b8:	60b9      	str	r1, [r7, #8]
 800c2ba:	607a      	str	r2, [r7, #4]
 800c2bc:	603b      	str	r3, [r7, #0]
	: _M_ptr(__p), _Del_base(std::move(__d)), _Alloc_base(__a)
 800c2be:	68fc      	ldr	r4, [r7, #12]
 800c2c0:	6878      	ldr	r0, [r7, #4]
 800c2c2:	f7fd fdb1 	bl	8009e28 <_ZSt4moveIRNSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800c2c6:	4603      	mov	r3, r0
 800c2c8:	4619      	mov	r1, r3
 800c2ca:	4620      	mov	r0, r4
 800c2cc:	f000 fcd2 	bl	800cc74 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	3301      	adds	r3, #1
 800c2d4:	6839      	ldr	r1, [r7, #0]
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	f000 fcdf 	bl	800cc9a <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama16Stm32TimeMonitorEELb1EEC1ERKS2_>
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	68ba      	ldr	r2, [r7, #8]
 800c2e0:	605a      	str	r2, [r3, #4]
	{ }
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	3714      	adds	r7, #20
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	bd90      	pop	{r4, r7, pc}

0800c2ec <_ZNSt16allocator_traitsISaIN4tama16Stm32TimeMonitorEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b082      	sub	sp, #8
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
 800c2f4:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 800c2f6:	6839      	ldr	r1, [r7, #0]
 800c2f8:	6878      	ldr	r0, [r7, #4]
 800c2fa:	f000 fcdc 	bl	800ccb6 <_ZN9__gnu_cxx13new_allocatorIN4tama16Stm32TimeMonitorEE7destroyIS2_EEvPT_>
 800c2fe:	bf00      	nop
 800c300:	3708      	adds	r7, #8
 800c302:	46bd      	mov	sp, r7
 800c304:	bd80      	pop	{r7, pc}

0800c306 <_ZN9__gnu_cxx13new_allocatorIN4tama25Stm32SoundPlayingStrategyEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800c306:	b580      	push	{r7, lr}
 800c308:	b084      	sub	sp, #16
 800c30a:	af00      	add	r7, sp, #0
 800c30c:	60f8      	str	r0, [r7, #12]
 800c30e:	60b9      	str	r1, [r7, #8]
 800c310:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800c312:	68f8      	ldr	r0, [r7, #12]
 800c314:	f000 fcda 	bl	800cccc <_ZNK9__gnu_cxx13new_allocatorIN4tama25Stm32SoundPlayingStrategyEE8max_sizeEv>
 800c318:	4602      	mov	r2, r0
 800c31a:	68bb      	ldr	r3, [r7, #8]
 800c31c:	4293      	cmp	r3, r2
 800c31e:	bf8c      	ite	hi
 800c320:	2301      	movhi	r3, #1
 800c322:	2300      	movls	r3, #0
 800c324:	b2db      	uxtb	r3, r3
 800c326:	2b00      	cmp	r3, #0
 800c328:	d001      	beq.n	800c32e <_ZN9__gnu_cxx13new_allocatorIN4tama25Stm32SoundPlayingStrategyEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800c32a:	f009 fe78 	bl	801601e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800c32e:	68bb      	ldr	r3, [r7, #8]
 800c330:	009b      	lsls	r3, r3, #2
 800c332:	4618      	mov	r0, r3
 800c334:	f009 fe47 	bl	8015fc6 <_Znwj>
 800c338:	4603      	mov	r3, r0
      }
 800c33a:	4618      	mov	r0, r3
 800c33c:	3710      	adds	r7, #16
 800c33e:	46bd      	mov	sp, r7
 800c340:	bd80      	pop	{r7, pc}

0800c342 <_ZSt11__addressofISaIN4tama25Stm32SoundPlayingStrategyEEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800c342:	b480      	push	{r7}
 800c344:	b083      	sub	sp, #12
 800c346:	af00      	add	r7, sp, #0
 800c348:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	4618      	mov	r0, r3
 800c34e:	370c      	adds	r7, #12
 800c350:	46bd      	mov	sp, r7
 800c352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c356:	4770      	bx	lr

0800c358 <_ZN9__gnu_cxx13new_allocatorIN4tama25Stm32SoundPlayingStrategyEE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 800c358:	b580      	push	{r7, lr}
 800c35a:	b084      	sub	sp, #16
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	60f8      	str	r0, [r7, #12]
 800c360:	60b9      	str	r1, [r7, #8]
 800c362:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800c364:	68b8      	ldr	r0, [r7, #8]
 800c366:	f009 fe47 	bl	8015ff8 <_ZdlPv>
      }
 800c36a:	bf00      	nop
 800c36c:	3710      	adds	r7, #16
 800c36e:	46bd      	mov	sp, r7
 800c370:	bd80      	pop	{r7, pc}

0800c372 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800c372:	b480      	push	{r7}
 800c374:	b083      	sub	sp, #12
 800c376:	af00      	add	r7, sp, #0
 800c378:	6078      	str	r0, [r7, #4]
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	4618      	mov	r0, r3
 800c37e:	370c      	adds	r7, #12
 800c380:	46bd      	mov	sp, r7
 800c382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c386:	4770      	bx	lr

0800c388 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800c388:	b480      	push	{r7}
 800c38a:	b083      	sub	sp, #12
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	4618      	mov	r0, r3
 800c394:	370c      	adds	r7, #12
 800c396:	46bd      	mov	sp, r7
 800c398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39c:	4770      	bx	lr

0800c39e <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>:
      allocate(allocator_type& __a, size_type __n)
 800c39e:	b580      	push	{r7, lr}
 800c3a0:	b082      	sub	sp, #8
 800c3a2:	af00      	add	r7, sp, #0
 800c3a4:	6078      	str	r0, [r7, #4]
 800c3a6:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	6839      	ldr	r1, [r7, #0]
 800c3ac:	6878      	ldr	r0, [r7, #4]
 800c3ae:	f000 fc99 	bl	800cce4 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>
 800c3b2:	4603      	mov	r3, r0
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	3708      	adds	r7, #8
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	bd80      	pop	{r7, pc}

0800c3bc <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	b084      	sub	sp, #16
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	60f8      	str	r0, [r7, #12]
 800c3c4:	60b9      	str	r1, [r7, #8]
 800c3c6:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800c3c8:	68b8      	ldr	r0, [r7, #8]
 800c3ca:	f000 fcac 	bl	800cd26 <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>
 800c3ce:	4602      	mov	r2, r0
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	601a      	str	r2, [r3, #0]
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	687a      	ldr	r2, [r7, #4]
 800c3d8:	605a      	str	r2, [r3, #4]
      { }
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	4618      	mov	r0, r3
 800c3de:	3710      	adds	r7, #16
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	bd80      	pop	{r7, pc}

0800c3e4 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b084      	sub	sp, #16
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	60f8      	str	r0, [r7, #12]
 800c3ec:	60b9      	str	r1, [r7, #8]
 800c3ee:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800c3f0:	687a      	ldr	r2, [r7, #4]
 800c3f2:	68b9      	ldr	r1, [r7, #8]
 800c3f4:	68f8      	ldr	r0, [r7, #12]
 800c3f6:	f000 fca1 	bl	800cd3c <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>
 800c3fa:	bf00      	nop
 800c3fc:	3710      	adds	r7, #16
 800c3fe:	46bd      	mov	sp, r7
 800c400:	bd80      	pop	{r7, pc}

0800c402 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 800c402:	b480      	push	{r7}
 800c404:	b083      	sub	sp, #12
 800c406:	af00      	add	r7, sp, #0
 800c408:	6078      	str	r0, [r7, #4]
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	4618      	mov	r0, r3
 800c40e:	370c      	adds	r7, #12
 800c410:	46bd      	mov	sp, r7
 800c412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c416:	4770      	bx	lr

0800c418 <_ZNSt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 800c418:	b590      	push	{r4, r7, lr}
 800c41a:	b085      	sub	sp, #20
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	60f8      	str	r0, [r7, #12]
 800c420:	60b9      	str	r1, [r7, #8]
 800c422:	607a      	str	r2, [r7, #4]
 800c424:	603b      	str	r3, [r7, #0]
	: _M_ptr(__p), _Del_base(std::move(__d)), _Alloc_base(__a)
 800c426:	68fc      	ldr	r4, [r7, #12]
 800c428:	6878      	ldr	r0, [r7, #4]
 800c42a:	f7fd fde5 	bl	8009ff8 <_ZSt4moveIRNSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800c42e:	4603      	mov	r3, r0
 800c430:	4619      	mov	r1, r3
 800c432:	4620      	mov	r0, r4
 800c434:	f000 fc8f 	bl	800cd56 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	3301      	adds	r3, #1
 800c43c:	6839      	ldr	r1, [r7, #0]
 800c43e:	4618      	mov	r0, r3
 800c440:	f000 fc9c 	bl	800cd7c <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama25Stm32SoundPlayingStrategyEELb1EEC1ERKS2_>
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	68ba      	ldr	r2, [r7, #8]
 800c448:	605a      	str	r2, [r3, #4]
	{ }
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	4618      	mov	r0, r3
 800c44e:	3714      	adds	r7, #20
 800c450:	46bd      	mov	sp, r7
 800c452:	bd90      	pop	{r4, r7, pc}

0800c454 <_ZNSt16allocator_traitsISaIN4tama25Stm32SoundPlayingStrategyEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 800c454:	b580      	push	{r7, lr}
 800c456:	b082      	sub	sp, #8
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]
 800c45c:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 800c45e:	6839      	ldr	r1, [r7, #0]
 800c460:	6878      	ldr	r0, [r7, #4]
 800c462:	f000 fc99 	bl	800cd98 <_ZN9__gnu_cxx13new_allocatorIN4tama25Stm32SoundPlayingStrategyEE7destroyIS2_EEvPT_>
 800c466:	bf00      	nop
 800c468:	3708      	adds	r7, #8
 800c46a:	46bd      	mov	sp, r7
 800c46c:	bd80      	pop	{r7, pc}

0800c46e <_ZN9__gnu_cxx13new_allocatorIN4tama11SoundPlayerEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800c46e:	b580      	push	{r7, lr}
 800c470:	b084      	sub	sp, #16
 800c472:	af00      	add	r7, sp, #0
 800c474:	60f8      	str	r0, [r7, #12]
 800c476:	60b9      	str	r1, [r7, #8]
 800c478:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800c47a:	68f8      	ldr	r0, [r7, #12]
 800c47c:	f000 fc98 	bl	800cdb0 <_ZNK9__gnu_cxx13new_allocatorIN4tama11SoundPlayerEE8max_sizeEv>
 800c480:	4602      	mov	r2, r0
 800c482:	68bb      	ldr	r3, [r7, #8]
 800c484:	4293      	cmp	r3, r2
 800c486:	bf8c      	ite	hi
 800c488:	2301      	movhi	r3, #1
 800c48a:	2300      	movls	r3, #0
 800c48c:	b2db      	uxtb	r3, r3
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d001      	beq.n	800c496 <_ZN9__gnu_cxx13new_allocatorIN4tama11SoundPlayerEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800c492:	f009 fdc4 	bl	801601e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800c496:	68ba      	ldr	r2, [r7, #8]
 800c498:	4613      	mov	r3, r2
 800c49a:	00db      	lsls	r3, r3, #3
 800c49c:	4413      	add	r3, r2
 800c49e:	009b      	lsls	r3, r3, #2
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	f009 fd90 	bl	8015fc6 <_Znwj>
 800c4a6:	4603      	mov	r3, r0
      }
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	3710      	adds	r7, #16
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	bd80      	pop	{r7, pc}

0800c4b0 <_ZSt11__addressofISaIN4tama11SoundPlayerEEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800c4b0:	b480      	push	{r7}
 800c4b2:	b083      	sub	sp, #12
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	370c      	adds	r7, #12
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c4:	4770      	bx	lr

0800c4c6 <_ZN9__gnu_cxx13new_allocatorIN4tama11SoundPlayerEE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 800c4c6:	b580      	push	{r7, lr}
 800c4c8:	b084      	sub	sp, #16
 800c4ca:	af00      	add	r7, sp, #0
 800c4cc:	60f8      	str	r0, [r7, #12]
 800c4ce:	60b9      	str	r1, [r7, #8]
 800c4d0:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800c4d2:	68b8      	ldr	r0, [r7, #8]
 800c4d4:	f009 fd90 	bl	8015ff8 <_ZdlPv>
      }
 800c4d8:	bf00      	nop
 800c4da:	3710      	adds	r7, #16
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	bd80      	pop	{r7, pc}

0800c4e0 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama11SoundPlayerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800c4e0:	b480      	push	{r7}
 800c4e2:	b083      	sub	sp, #12
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	370c      	adds	r7, #12
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f4:	4770      	bx	lr

0800c4f6 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama11SoundPlayerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800c4f6:	b480      	push	{r7}
 800c4f8:	b083      	sub	sp, #12
 800c4fa:	af00      	add	r7, sp, #0
 800c4fc:	6078      	str	r0, [r7, #4]
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	4618      	mov	r0, r3
 800c502:	370c      	adds	r7, #12
 800c504:	46bd      	mov	sp, r7
 800c506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50a:	4770      	bx	lr

0800c50c <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama11SoundPlayerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>:
      allocate(allocator_type& __a, size_type __n)
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b082      	sub	sp, #8
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
 800c514:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800c516:	2200      	movs	r2, #0
 800c518:	6839      	ldr	r1, [r7, #0]
 800c51a:	6878      	ldr	r0, [r7, #4]
 800c51c:	f000 fc56 	bl	800cdcc <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama11SoundPlayerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>
 800c520:	4603      	mov	r3, r0
 800c522:	4618      	mov	r0, r3
 800c524:	3708      	adds	r7, #8
 800c526:	46bd      	mov	sp, r7
 800c528:	bd80      	pop	{r7, pc}

0800c52a <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama11SoundPlayerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 800c52a:	b580      	push	{r7, lr}
 800c52c:	b084      	sub	sp, #16
 800c52e:	af00      	add	r7, sp, #0
 800c530:	60f8      	str	r0, [r7, #12]
 800c532:	60b9      	str	r1, [r7, #8]
 800c534:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800c536:	68b8      	ldr	r0, [r7, #8]
 800c538:	f000 fc69 	bl	800ce0e <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama11SoundPlayerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>
 800c53c:	4602      	mov	r2, r0
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	601a      	str	r2, [r3, #0]
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	687a      	ldr	r2, [r7, #4]
 800c546:	605a      	str	r2, [r3, #4]
      { }
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	4618      	mov	r0, r3
 800c54c:	3710      	adds	r7, #16
 800c54e:	46bd      	mov	sp, r7
 800c550:	bd80      	pop	{r7, pc}

0800c552 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama11SoundPlayerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800c552:	b580      	push	{r7, lr}
 800c554:	b084      	sub	sp, #16
 800c556:	af00      	add	r7, sp, #0
 800c558:	60f8      	str	r0, [r7, #12]
 800c55a:	60b9      	str	r1, [r7, #8]
 800c55c:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800c55e:	687a      	ldr	r2, [r7, #4]
 800c560:	68b9      	ldr	r1, [r7, #8]
 800c562:	68f8      	ldr	r0, [r7, #12]
 800c564:	f000 fc5e 	bl	800ce24 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama11SoundPlayerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>
 800c568:	bf00      	nop
 800c56a:	3710      	adds	r7, #16
 800c56c:	46bd      	mov	sp, r7
 800c56e:	bd80      	pop	{r7, pc}

0800c570 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama11SoundPlayerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 800c570:	b480      	push	{r7}
 800c572:	b083      	sub	sp, #12
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	4618      	mov	r0, r3
 800c57c:	370c      	adds	r7, #12
 800c57e:	46bd      	mov	sp, r7
 800c580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c584:	4770      	bx	lr

0800c586 <_ZNSt19_Sp_counted_deleterIPN4tama11SoundPlayerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 800c586:	b590      	push	{r4, r7, lr}
 800c588:	b085      	sub	sp, #20
 800c58a:	af00      	add	r7, sp, #0
 800c58c:	60f8      	str	r0, [r7, #12]
 800c58e:	60b9      	str	r1, [r7, #8]
 800c590:	607a      	str	r2, [r7, #4]
 800c592:	603b      	str	r3, [r7, #0]
	: _M_ptr(__p), _Del_base(std::move(__d)), _Alloc_base(__a)
 800c594:	68fc      	ldr	r4, [r7, #12]
 800c596:	6878      	ldr	r0, [r7, #4]
 800c598:	f7fd fe1c 	bl	800a1d4 <_ZSt4moveIRNSt12__shared_ptrIN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800c59c:	4603      	mov	r3, r0
 800c59e:	4619      	mov	r1, r3
 800c5a0:	4620      	mov	r0, r4
 800c5a2:	f000 fc4c 	bl	800ce3e <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	3301      	adds	r3, #1
 800c5aa:	6839      	ldr	r1, [r7, #0]
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	f000 fc59 	bl	800ce64 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama11SoundPlayerEELb1EEC1ERKS2_>
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	68ba      	ldr	r2, [r7, #8]
 800c5b6:	605a      	str	r2, [r3, #4]
	{ }
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	3714      	adds	r7, #20
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	bd90      	pop	{r4, r7, pc}

0800c5c2 <_ZNSt16allocator_traitsISaIN4tama11SoundPlayerEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 800c5c2:	b580      	push	{r7, lr}
 800c5c4:	b082      	sub	sp, #8
 800c5c6:	af00      	add	r7, sp, #0
 800c5c8:	6078      	str	r0, [r7, #4]
 800c5ca:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 800c5cc:	6839      	ldr	r1, [r7, #0]
 800c5ce:	6878      	ldr	r0, [r7, #4]
 800c5d0:	f000 fc6d 	bl	800ceae <_ZN9__gnu_cxx13new_allocatorIN4tama11SoundPlayerEE7destroyIS2_EEvPT_>
 800c5d4:	bf00      	nop
 800c5d6:	3708      	adds	r7, #8
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	bd80      	pop	{r7, pc}

0800c5dc <_ZN9__gnu_cxx13new_allocatorIN4tama10Stm32InputEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b084      	sub	sp, #16
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	60f8      	str	r0, [r7, #12]
 800c5e4:	60b9      	str	r1, [r7, #8]
 800c5e6:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800c5e8:	68f8      	ldr	r0, [r7, #12]
 800c5ea:	f000 fc6c 	bl	800cec6 <_ZNK9__gnu_cxx13new_allocatorIN4tama10Stm32InputEE8max_sizeEv>
 800c5ee:	4602      	mov	r2, r0
 800c5f0:	68bb      	ldr	r3, [r7, #8]
 800c5f2:	4293      	cmp	r3, r2
 800c5f4:	bf8c      	ite	hi
 800c5f6:	2301      	movhi	r3, #1
 800c5f8:	2300      	movls	r3, #0
 800c5fa:	b2db      	uxtb	r3, r3
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d001      	beq.n	800c604 <_ZN9__gnu_cxx13new_allocatorIN4tama10Stm32InputEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800c600:	f009 fd0d 	bl	801601e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800c604:	68bb      	ldr	r3, [r7, #8]
 800c606:	011b      	lsls	r3, r3, #4
 800c608:	4618      	mov	r0, r3
 800c60a:	f009 fcdc 	bl	8015fc6 <_Znwj>
 800c60e:	4603      	mov	r3, r0
      }
 800c610:	4618      	mov	r0, r3
 800c612:	3710      	adds	r7, #16
 800c614:	46bd      	mov	sp, r7
 800c616:	bd80      	pop	{r7, pc}

0800c618 <_ZSt11__addressofISaIN4tama10Stm32InputEEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800c618:	b480      	push	{r7}
 800c61a:	b083      	sub	sp, #12
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	4618      	mov	r0, r3
 800c624:	370c      	adds	r7, #12
 800c626:	46bd      	mov	sp, r7
 800c628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62c:	4770      	bx	lr

0800c62e <_ZN9__gnu_cxx13new_allocatorIN4tama10Stm32InputEE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 800c62e:	b580      	push	{r7, lr}
 800c630:	b084      	sub	sp, #16
 800c632:	af00      	add	r7, sp, #0
 800c634:	60f8      	str	r0, [r7, #12]
 800c636:	60b9      	str	r1, [r7, #8]
 800c638:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800c63a:	68b8      	ldr	r0, [r7, #8]
 800c63c:	f009 fcdc 	bl	8015ff8 <_ZdlPv>
      }
 800c640:	bf00      	nop
 800c642:	3710      	adds	r7, #16
 800c644:	46bd      	mov	sp, r7
 800c646:	bd80      	pop	{r7, pc}

0800c648 <_ZNSt6vectorISt10shared_ptrIN4tama7OnInputEESaIS3_EEC1Ev>:
      vector()
 800c648:	b580      	push	{r7, lr}
 800c64a:	b082      	sub	sp, #8
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	4618      	mov	r0, r3
 800c654:	f000 fc4f 	bl	800cef6 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama7OnInputEESaIS3_EEC1Ev>
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	4618      	mov	r0, r3
 800c65c:	3708      	adds	r7, #8
 800c65e:	46bd      	mov	sp, r7
 800c660:	bd80      	pop	{r7, pc}

0800c662 <_ZNSt6vectorISt10shared_ptrIN4tama7OnInputEESaIS3_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800c662:	b5b0      	push	{r4, r5, r7, lr}
 800c664:	b082      	sub	sp, #8
 800c666:	af00      	add	r7, sp, #0
 800c668:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681c      	ldr	r4, [r3, #0]
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	4618      	mov	r0, r3
 800c676:	f7f4 f980 	bl	800097a <_ZNSt12_Vector_baseISt10shared_ptrIN4tama7OnInputEESaIS3_EE19_M_get_Tp_allocatorEv>
 800c67a:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800c67c:	461a      	mov	r2, r3
 800c67e:	4629      	mov	r1, r5
 800c680:	4620      	mov	r0, r4
 800c682:	f7f4 f99e 	bl	80009c2 <_ZSt8_DestroyIPSt10shared_ptrIN4tama7OnInputEES3_EvT_S5_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	4618      	mov	r0, r3
 800c68a:	f000 fc41 	bl	800cf10 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama7OnInputEESaIS3_EED1Ev>
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	4618      	mov	r0, r3
 800c692:	3708      	adds	r7, #8
 800c694:	46bd      	mov	sp, r7
 800c696:	bdb0      	pop	{r4, r5, r7, pc}

0800c698 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800c698:	b480      	push	{r7}
 800c69a:	b083      	sub	sp, #12
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	370c      	adds	r7, #12
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ac:	4770      	bx	lr

0800c6ae <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800c6ae:	b480      	push	{r7}
 800c6b0:	b083      	sub	sp, #12
 800c6b2:	af00      	add	r7, sp, #0
 800c6b4:	6078      	str	r0, [r7, #4]
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	370c      	adds	r7, #12
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c2:	4770      	bx	lr

0800c6c4 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>:
      allocate(allocator_type& __a, size_type __n)
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	b082      	sub	sp, #8
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	6078      	str	r0, [r7, #4]
 800c6cc:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	6839      	ldr	r1, [r7, #0]
 800c6d2:	6878      	ldr	r0, [r7, #4]
 800c6d4:	f000 fc36 	bl	800cf44 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>
 800c6d8:	4603      	mov	r3, r0
 800c6da:	4618      	mov	r0, r3
 800c6dc:	3708      	adds	r7, #8
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	bd80      	pop	{r7, pc}

0800c6e2 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 800c6e2:	b580      	push	{r7, lr}
 800c6e4:	b084      	sub	sp, #16
 800c6e6:	af00      	add	r7, sp, #0
 800c6e8:	60f8      	str	r0, [r7, #12]
 800c6ea:	60b9      	str	r1, [r7, #8]
 800c6ec:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800c6ee:	68b8      	ldr	r0, [r7, #8]
 800c6f0:	f000 fc49 	bl	800cf86 <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>
 800c6f4:	4602      	mov	r2, r0
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	601a      	str	r2, [r3, #0]
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	687a      	ldr	r2, [r7, #4]
 800c6fe:	605a      	str	r2, [r3, #4]
      { }
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	4618      	mov	r0, r3
 800c704:	3710      	adds	r7, #16
 800c706:	46bd      	mov	sp, r7
 800c708:	bd80      	pop	{r7, pc}

0800c70a <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800c70a:	b580      	push	{r7, lr}
 800c70c:	b084      	sub	sp, #16
 800c70e:	af00      	add	r7, sp, #0
 800c710:	60f8      	str	r0, [r7, #12]
 800c712:	60b9      	str	r1, [r7, #8]
 800c714:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800c716:	687a      	ldr	r2, [r7, #4]
 800c718:	68b9      	ldr	r1, [r7, #8]
 800c71a:	68f8      	ldr	r0, [r7, #12]
 800c71c:	f000 fc3e 	bl	800cf9c <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>
 800c720:	bf00      	nop
 800c722:	3710      	adds	r7, #16
 800c724:	46bd      	mov	sp, r7
 800c726:	bd80      	pop	{r7, pc}

0800c728 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 800c728:	b480      	push	{r7}
 800c72a:	b083      	sub	sp, #12
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	4618      	mov	r0, r3
 800c734:	370c      	adds	r7, #12
 800c736:	46bd      	mov	sp, r7
 800c738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73c:	4770      	bx	lr

0800c73e <_ZNSt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 800c73e:	b590      	push	{r4, r7, lr}
 800c740:	b085      	sub	sp, #20
 800c742:	af00      	add	r7, sp, #0
 800c744:	60f8      	str	r0, [r7, #12]
 800c746:	60b9      	str	r1, [r7, #8]
 800c748:	607a      	str	r2, [r7, #4]
 800c74a:	603b      	str	r3, [r7, #0]
	: _M_ptr(__p), _Del_base(std::move(__d)), _Alloc_base(__a)
 800c74c:	68fc      	ldr	r4, [r7, #12]
 800c74e:	6878      	ldr	r0, [r7, #4]
 800c750:	f7fd fe28 	bl	800a3a4 <_ZSt4moveIRNSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800c754:	4603      	mov	r3, r0
 800c756:	4619      	mov	r1, r3
 800c758:	4620      	mov	r0, r4
 800c75a:	f000 fc2c 	bl	800cfb6 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	3301      	adds	r3, #1
 800c762:	6839      	ldr	r1, [r7, #0]
 800c764:	4618      	mov	r0, r3
 800c766:	f000 fc39 	bl	800cfdc <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama10Stm32InputEELb1EEC1ERKS2_>
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	68ba      	ldr	r2, [r7, #8]
 800c76e:	605a      	str	r2, [r3, #4]
	{ }
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	4618      	mov	r0, r3
 800c774:	3714      	adds	r7, #20
 800c776:	46bd      	mov	sp, r7
 800c778:	bd90      	pop	{r4, r7, pc}

0800c77a <_ZNSt16allocator_traitsISaIN4tama10Stm32InputEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 800c77a:	b580      	push	{r7, lr}
 800c77c:	b082      	sub	sp, #8
 800c77e:	af00      	add	r7, sp, #0
 800c780:	6078      	str	r0, [r7, #4]
 800c782:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 800c784:	6839      	ldr	r1, [r7, #0]
 800c786:	6878      	ldr	r0, [r7, #4]
 800c788:	f000 fc48 	bl	800d01c <_ZN9__gnu_cxx13new_allocatorIN4tama10Stm32InputEE7destroyIS2_EEvPT_>
 800c78c:	bf00      	nop
 800c78e:	3708      	adds	r7, #8
 800c790:	46bd      	mov	sp, r7
 800c792:	bd80      	pop	{r7, pc}

0800c794 <_ZNK9__gnu_cxx13new_allocatorIN4tama4ToneEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800c794:	b480      	push	{r7}
 800c796:	b083      	sub	sp, #12
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800c79c:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	370c      	adds	r7, #12
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7aa:	4770      	bx	lr

0800c7ac <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPN4tama4ToneEES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b084      	sub	sp, #16
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	60f8      	str	r0, [r7, #12]
 800c7b4:	60b9      	str	r1, [r7, #8]
 800c7b6:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800c7b8:	687a      	ldr	r2, [r7, #4]
 800c7ba:	68b9      	ldr	r1, [r7, #8]
 800c7bc:	68f8      	ldr	r0, [r7, #12]
 800c7be:	f000 fc39 	bl	800d034 <_ZSt4copyISt13move_iteratorIPN4tama4ToneEES3_ET0_T_S6_S5_>
 800c7c2:	4603      	mov	r3, r0
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	3710      	adds	r7, #16
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	bd80      	pop	{r7, pc}

0800c7cc <_ZN9__gnu_cxx13new_allocatorIN4tama7ContextEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b084      	sub	sp, #16
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	60f8      	str	r0, [r7, #12]
 800c7d4:	60b9      	str	r1, [r7, #8]
 800c7d6:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800c7d8:	68f8      	ldr	r0, [r7, #12]
 800c7da:	f000 fc43 	bl	800d064 <_ZNK9__gnu_cxx13new_allocatorIN4tama7ContextEE8max_sizeEv>
 800c7de:	4602      	mov	r2, r0
 800c7e0:	68bb      	ldr	r3, [r7, #8]
 800c7e2:	4293      	cmp	r3, r2
 800c7e4:	bf8c      	ite	hi
 800c7e6:	2301      	movhi	r3, #1
 800c7e8:	2300      	movls	r3, #0
 800c7ea:	b2db      	uxtb	r3, r3
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d001      	beq.n	800c7f4 <_ZN9__gnu_cxx13new_allocatorIN4tama7ContextEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800c7f0:	f009 fc15 	bl	801601e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800c7f4:	68ba      	ldr	r2, [r7, #8]
 800c7f6:	4613      	mov	r3, r2
 800c7f8:	00db      	lsls	r3, r3, #3
 800c7fa:	1a9b      	subs	r3, r3, r2
 800c7fc:	00db      	lsls	r3, r3, #3
 800c7fe:	4618      	mov	r0, r3
 800c800:	f009 fbe1 	bl	8015fc6 <_Znwj>
 800c804:	4603      	mov	r3, r0
      }
 800c806:	4618      	mov	r0, r3
 800c808:	3710      	adds	r7, #16
 800c80a:	46bd      	mov	sp, r7
 800c80c:	bd80      	pop	{r7, pc}

0800c80e <_ZSt11__addressofISaIN4tama7ContextEEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800c80e:	b480      	push	{r7}
 800c810:	b083      	sub	sp, #12
 800c812:	af00      	add	r7, sp, #0
 800c814:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	4618      	mov	r0, r3
 800c81a:	370c      	adds	r7, #12
 800c81c:	46bd      	mov	sp, r7
 800c81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c822:	4770      	bx	lr

0800c824 <_ZN9__gnu_cxx13new_allocatorIN4tama7ContextEE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 800c824:	b580      	push	{r7, lr}
 800c826:	b084      	sub	sp, #16
 800c828:	af00      	add	r7, sp, #0
 800c82a:	60f8      	str	r0, [r7, #12]
 800c82c:	60b9      	str	r1, [r7, #8]
 800c82e:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800c830:	68b8      	ldr	r0, [r7, #8]
 800c832:	f009 fbe1 	bl	8015ff8 <_ZdlPv>
      }
 800c836:	bf00      	nop
 800c838:	3710      	adds	r7, #16
 800c83a:	46bd      	mov	sp, r7
 800c83c:	bd80      	pop	{r7, pc}

0800c83e <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800c83e:	b480      	push	{r7}
 800c840:	b083      	sub	sp, #12
 800c842:	af00      	add	r7, sp, #0
 800c844:	6078      	str	r0, [r7, #4]
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	4618      	mov	r0, r3
 800c84a:	370c      	adds	r7, #12
 800c84c:	46bd      	mov	sp, r7
 800c84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c852:	4770      	bx	lr

0800c854 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800c854:	b480      	push	{r7}
 800c856:	b083      	sub	sp, #12
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	4618      	mov	r0, r3
 800c860:	370c      	adds	r7, #12
 800c862:	46bd      	mov	sp, r7
 800c864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c868:	4770      	bx	lr

0800c86a <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>:
      allocate(allocator_type& __a, size_type __n)
 800c86a:	b580      	push	{r7, lr}
 800c86c:	b082      	sub	sp, #8
 800c86e:	af00      	add	r7, sp, #0
 800c870:	6078      	str	r0, [r7, #4]
 800c872:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800c874:	2200      	movs	r2, #0
 800c876:	6839      	ldr	r1, [r7, #0]
 800c878:	6878      	ldr	r0, [r7, #4]
 800c87a:	f000 fc01 	bl	800d080 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>
 800c87e:	4603      	mov	r3, r0
 800c880:	4618      	mov	r0, r3
 800c882:	3708      	adds	r7, #8
 800c884:	46bd      	mov	sp, r7
 800c886:	bd80      	pop	{r7, pc}

0800c888 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 800c888:	b580      	push	{r7, lr}
 800c88a:	b084      	sub	sp, #16
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	60f8      	str	r0, [r7, #12]
 800c890:	60b9      	str	r1, [r7, #8]
 800c892:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800c894:	68b8      	ldr	r0, [r7, #8]
 800c896:	f000 fc14 	bl	800d0c2 <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>
 800c89a:	4602      	mov	r2, r0
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	601a      	str	r2, [r3, #0]
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	687a      	ldr	r2, [r7, #4]
 800c8a4:	605a      	str	r2, [r3, #4]
      { }
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	3710      	adds	r7, #16
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	bd80      	pop	{r7, pc}

0800c8b0 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b084      	sub	sp, #16
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	60f8      	str	r0, [r7, #12]
 800c8b8:	60b9      	str	r1, [r7, #8]
 800c8ba:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800c8bc:	687a      	ldr	r2, [r7, #4]
 800c8be:	68b9      	ldr	r1, [r7, #8]
 800c8c0:	68f8      	ldr	r0, [r7, #12]
 800c8c2:	f000 fc09 	bl	800d0d8 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>
 800c8c6:	bf00      	nop
 800c8c8:	3710      	adds	r7, #16
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	bd80      	pop	{r7, pc}

0800c8ce <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 800c8ce:	b480      	push	{r7}
 800c8d0:	b083      	sub	sp, #12
 800c8d2:	af00      	add	r7, sp, #0
 800c8d4:	6078      	str	r0, [r7, #4]
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	4618      	mov	r0, r3
 800c8da:	370c      	adds	r7, #12
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e2:	4770      	bx	lr

0800c8e4 <_ZNSt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 800c8e4:	b590      	push	{r4, r7, lr}
 800c8e6:	b085      	sub	sp, #20
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	60f8      	str	r0, [r7, #12]
 800c8ec:	60b9      	str	r1, [r7, #8]
 800c8ee:	607a      	str	r2, [r7, #4]
 800c8f0:	603b      	str	r3, [r7, #0]
	: _M_ptr(__p), _Del_base(std::move(__d)), _Alloc_base(__a)
 800c8f2:	68fc      	ldr	r4, [r7, #12]
 800c8f4:	6878      	ldr	r0, [r7, #4]
 800c8f6:	f7fd fe88 	bl	800a60a <_ZSt4moveIRNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800c8fa:	4603      	mov	r3, r0
 800c8fc:	4619      	mov	r1, r3
 800c8fe:	4620      	mov	r0, r4
 800c900:	f000 fbf7 	bl	800d0f2 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	3301      	adds	r3, #1
 800c908:	6839      	ldr	r1, [r7, #0]
 800c90a:	4618      	mov	r0, r3
 800c90c:	f000 fc04 	bl	800d118 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama7ContextEELb1EEC1ERKS2_>
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	68ba      	ldr	r2, [r7, #8]
 800c914:	605a      	str	r2, [r3, #4]
	{ }
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	4618      	mov	r0, r3
 800c91a:	3714      	adds	r7, #20
 800c91c:	46bd      	mov	sp, r7
 800c91e:	bd90      	pop	{r4, r7, pc}

0800c920 <_ZNSt16allocator_traitsISaIN4tama7ContextEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 800c920:	b580      	push	{r7, lr}
 800c922:	b082      	sub	sp, #8
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
 800c928:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 800c92a:	6839      	ldr	r1, [r7, #0]
 800c92c:	6878      	ldr	r0, [r7, #4]
 800c92e:	f000 fc25 	bl	800d17c <_ZN9__gnu_cxx13new_allocatorIN4tama7ContextEE7destroyIS2_EEvPT_>
 800c932:	bf00      	nop
 800c934:	3708      	adds	r7, #8
 800c936:	46bd      	mov	sp, r7
 800c938:	bd80      	pop	{r7, pc}
	...

0800c93c <_ZNK9__gnu_cxx13new_allocatorIN4tama16Nokia5510DisplayEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800c93c:	b480      	push	{r7}
 800c93e:	b083      	sub	sp, #12
 800c940:	af00      	add	r7, sp, #0
 800c942:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800c944:	4b03      	ldr	r3, [pc, #12]	; (800c954 <_ZNK9__gnu_cxx13new_allocatorIN4tama16Nokia5510DisplayEE8max_sizeEv+0x18>)
 800c946:	4618      	mov	r0, r3
 800c948:	370c      	adds	r7, #12
 800c94a:	46bd      	mov	sp, r7
 800c94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c950:	4770      	bx	lr
 800c952:	bf00      	nop
 800c954:	05555555 	.word	0x05555555

0800c958 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800c958:	b580      	push	{r7, lr}
 800c95a:	b084      	sub	sp, #16
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	60f8      	str	r0, [r7, #12]
 800c960:	60b9      	str	r1, [r7, #8]
 800c962:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800c964:	68f8      	ldr	r0, [r7, #12]
 800c966:	f000 fc15 	bl	800d194 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>
 800c96a:	4602      	mov	r2, r0
 800c96c:	68bb      	ldr	r3, [r7, #8]
 800c96e:	4293      	cmp	r3, r2
 800c970:	bf8c      	ite	hi
 800c972:	2301      	movhi	r3, #1
 800c974:	2300      	movls	r3, #0
 800c976:	b2db      	uxtb	r3, r3
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d001      	beq.n	800c980 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800c97c:	f009 fb4f 	bl	801601e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800c980:	68ba      	ldr	r2, [r7, #8]
 800c982:	4613      	mov	r3, r2
 800c984:	009b      	lsls	r3, r3, #2
 800c986:	4413      	add	r3, r2
 800c988:	009b      	lsls	r3, r3, #2
 800c98a:	4618      	mov	r0, r3
 800c98c:	f009 fb1b 	bl	8015fc6 <_Znwj>
 800c990:	4603      	mov	r3, r0
      }
 800c992:	4618      	mov	r0, r3
 800c994:	3710      	adds	r7, #16
 800c996:	46bd      	mov	sp, r7
 800c998:	bd80      	pop	{r7, pc}

0800c99a <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800c99a:	b480      	push	{r7}
 800c99c:	b083      	sub	sp, #12
 800c99e:	af00      	add	r7, sp, #0
 800c9a0:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	370c      	adds	r7, #12
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ae:	4770      	bx	lr

0800c9b0 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>:
      deallocate(pointer __p, size_type)
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b084      	sub	sp, #16
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	60f8      	str	r0, [r7, #12]
 800c9b8:	60b9      	str	r1, [r7, #8]
 800c9ba:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800c9bc:	68b8      	ldr	r0, [r7, #8]
 800c9be:	f009 fb1b 	bl	8015ff8 <_ZdlPv>
      }
 800c9c2:	bf00      	nop
 800c9c4:	3710      	adds	r7, #16
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	bd80      	pop	{r7, pc}

0800c9ca <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _M_tp(std::move(__tp)) { }
 800c9ca:	b590      	push	{r4, r7, lr}
 800c9cc:	b083      	sub	sp, #12
 800c9ce:	af00      	add	r7, sp, #0
 800c9d0:	6078      	str	r0, [r7, #4]
 800c9d2:	6039      	str	r1, [r7, #0]
 800c9d4:	687c      	ldr	r4, [r7, #4]
 800c9d6:	6838      	ldr	r0, [r7, #0]
 800c9d8:	f7fc ff6e 	bl	80098b8 <_ZSt4moveIRNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800c9dc:	4603      	mov	r3, r0
 800c9de:	4619      	mov	r1, r3
 800c9e0:	4620      	mov	r0, r4
 800c9e2:	f7fc ff74 	bl	80098ce <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	370c      	adds	r7, #12
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	bd90      	pop	{r4, r7, pc}

0800c9f0 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama16Nokia5510DisplayEELb1EEC1ERKS2_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b082      	sub	sp, #8
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
 800c9f8:	6039      	str	r1, [r7, #0]
 800c9fa:	6839      	ldr	r1, [r7, #0]
 800c9fc:	6878      	ldr	r0, [r7, #4]
 800c9fe:	f7fc fef5 	bl	80097ec <_ZNSaIN4tama16Nokia5510DisplayEEC1ERKS1_>
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	4618      	mov	r0, r3
 800ca06:	3708      	adds	r7, #8
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	bd80      	pop	{r7, pc}

0800ca0c <_ZN9__gnu_cxx13new_allocatorIN4tama16Nokia5510DisplayEE7destroyIS2_EEvPT_>:
	destroy(_Up* __p) { __p->~_Up(); }
 800ca0c:	b480      	push	{r7}
 800ca0e:	b083      	sub	sp, #12
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
 800ca14:	6039      	str	r1, [r7, #0]
 800ca16:	bf00      	nop
 800ca18:	370c      	adds	r7, #12
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca20:	4770      	bx	lr

0800ca22 <_ZNK9__gnu_cxx13new_allocatorIN4tama18Stm32TextureLoaderEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800ca22:	b480      	push	{r7}
 800ca24:	b083      	sub	sp, #12
 800ca26:	af00      	add	r7, sp, #0
 800ca28:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800ca2a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800ca2e:	4618      	mov	r0, r3
 800ca30:	370c      	adds	r7, #12
 800ca32:	46bd      	mov	sp, r7
 800ca34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca38:	4770      	bx	lr

0800ca3a <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800ca3a:	b580      	push	{r7, lr}
 800ca3c:	b084      	sub	sp, #16
 800ca3e:	af00      	add	r7, sp, #0
 800ca40:	60f8      	str	r0, [r7, #12]
 800ca42:	60b9      	str	r1, [r7, #8]
 800ca44:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800ca46:	68f8      	ldr	r0, [r7, #12]
 800ca48:	f000 fbb2 	bl	800d1b0 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>
 800ca4c:	4602      	mov	r2, r0
 800ca4e:	68bb      	ldr	r3, [r7, #8]
 800ca50:	4293      	cmp	r3, r2
 800ca52:	bf8c      	ite	hi
 800ca54:	2301      	movhi	r3, #1
 800ca56:	2300      	movls	r3, #0
 800ca58:	b2db      	uxtb	r3, r3
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d001      	beq.n	800ca62 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800ca5e:	f009 fade 	bl	801601e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800ca62:	68ba      	ldr	r2, [r7, #8]
 800ca64:	4613      	mov	r3, r2
 800ca66:	009b      	lsls	r3, r3, #2
 800ca68:	4413      	add	r3, r2
 800ca6a:	009b      	lsls	r3, r3, #2
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	f009 faaa 	bl	8015fc6 <_Znwj>
 800ca72:	4603      	mov	r3, r0
      }
 800ca74:	4618      	mov	r0, r3
 800ca76:	3710      	adds	r7, #16
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	bd80      	pop	{r7, pc}

0800ca7c <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800ca7c:	b480      	push	{r7}
 800ca7e:	b083      	sub	sp, #12
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	4618      	mov	r0, r3
 800ca88:	370c      	adds	r7, #12
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca90:	4770      	bx	lr

0800ca92 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>:
      deallocate(pointer __p, size_type)
 800ca92:	b580      	push	{r7, lr}
 800ca94:	b084      	sub	sp, #16
 800ca96:	af00      	add	r7, sp, #0
 800ca98:	60f8      	str	r0, [r7, #12]
 800ca9a:	60b9      	str	r1, [r7, #8]
 800ca9c:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800ca9e:	68b8      	ldr	r0, [r7, #8]
 800caa0:	f009 faaa 	bl	8015ff8 <_ZdlPv>
      }
 800caa4:	bf00      	nop
 800caa6:	3710      	adds	r7, #16
 800caa8:	46bd      	mov	sp, r7
 800caaa:	bd80      	pop	{r7, pc}

0800caac <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _M_tp(std::move(__tp)) { }
 800caac:	b590      	push	{r4, r7, lr}
 800caae:	b083      	sub	sp, #12
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6078      	str	r0, [r7, #4]
 800cab4:	6039      	str	r1, [r7, #0]
 800cab6:	687c      	ldr	r4, [r7, #4]
 800cab8:	6838      	ldr	r0, [r7, #0]
 800caba:	f7fc ffe5 	bl	8009a88 <_ZSt4moveIRNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800cabe:	4603      	mov	r3, r0
 800cac0:	4619      	mov	r1, r3
 800cac2:	4620      	mov	r0, r4
 800cac4:	f7fc ffeb 	bl	8009a9e <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	4618      	mov	r0, r3
 800cacc:	370c      	adds	r7, #12
 800cace:	46bd      	mov	sp, r7
 800cad0:	bd90      	pop	{r4, r7, pc}

0800cad2 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama18Stm32TextureLoaderEELb1EEC1ERKS2_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 800cad2:	b580      	push	{r7, lr}
 800cad4:	b082      	sub	sp, #8
 800cad6:	af00      	add	r7, sp, #0
 800cad8:	6078      	str	r0, [r7, #4]
 800cada:	6039      	str	r1, [r7, #0]
 800cadc:	6839      	ldr	r1, [r7, #0]
 800cade:	6878      	ldr	r0, [r7, #4]
 800cae0:	f7fc ff72 	bl	80099c8 <_ZNSaIN4tama18Stm32TextureLoaderEEC1ERKS1_>
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	4618      	mov	r0, r3
 800cae8:	3708      	adds	r7, #8
 800caea:	46bd      	mov	sp, r7
 800caec:	bd80      	pop	{r7, pc}

0800caee <_ZN9__gnu_cxx13new_allocatorIN4tama18Stm32TextureLoaderEE7destroyIS2_EEvPT_>:
	destroy(_Up* __p) { __p->~_Up(); }
 800caee:	b480      	push	{r7}
 800caf0:	b083      	sub	sp, #12
 800caf2:	af00      	add	r7, sp, #0
 800caf4:	6078      	str	r0, [r7, #4]
 800caf6:	6039      	str	r1, [r7, #0]
 800caf8:	bf00      	nop
 800cafa:	370c      	adds	r7, #12
 800cafc:	46bd      	mov	sp, r7
 800cafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb02:	4770      	bx	lr

0800cb04 <_ZNK9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800cb04:	b480      	push	{r7}
 800cb06:	b083      	sub	sp, #12
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800cb0c:	4b03      	ldr	r3, [pc, #12]	; (800cb1c <_ZNK9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEE8max_sizeEv+0x18>)
 800cb0e:	4618      	mov	r0, r3
 800cb10:	370c      	adds	r7, #12
 800cb12:	46bd      	mov	sp, r7
 800cb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb18:	4770      	bx	lr
 800cb1a:	bf00      	nop
 800cb1c:	0aaaaaaa 	.word	0x0aaaaaaa

0800cb20 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b084      	sub	sp, #16
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	60f8      	str	r0, [r7, #12]
 800cb28:	60b9      	str	r1, [r7, #8]
 800cb2a:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800cb2c:	68f8      	ldr	r0, [r7, #12]
 800cb2e:	f000 fb4d 	bl	800d1cc <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>
 800cb32:	4602      	mov	r2, r0
 800cb34:	68bb      	ldr	r3, [r7, #8]
 800cb36:	4293      	cmp	r3, r2
 800cb38:	bf8c      	ite	hi
 800cb3a:	2301      	movhi	r3, #1
 800cb3c:	2300      	movls	r3, #0
 800cb3e:	b2db      	uxtb	r3, r3
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d001      	beq.n	800cb48 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800cb44:	f009 fa6b 	bl	801601e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800cb48:	68ba      	ldr	r2, [r7, #8]
 800cb4a:	4613      	mov	r3, r2
 800cb4c:	009b      	lsls	r3, r3, #2
 800cb4e:	4413      	add	r3, r2
 800cb50:	009b      	lsls	r3, r3, #2
 800cb52:	4618      	mov	r0, r3
 800cb54:	f009 fa37 	bl	8015fc6 <_Znwj>
 800cb58:	4603      	mov	r3, r0
      }
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	3710      	adds	r7, #16
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	bd80      	pop	{r7, pc}

0800cb62 <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800cb62:	b480      	push	{r7}
 800cb64:	b083      	sub	sp, #12
 800cb66:	af00      	add	r7, sp, #0
 800cb68:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	370c      	adds	r7, #12
 800cb70:	46bd      	mov	sp, r7
 800cb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb76:	4770      	bx	lr

0800cb78 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>:
      deallocate(pointer __p, size_type)
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b084      	sub	sp, #16
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	60f8      	str	r0, [r7, #12]
 800cb80:	60b9      	str	r1, [r7, #8]
 800cb82:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800cb84:	68b8      	ldr	r0, [r7, #8]
 800cb86:	f009 fa37 	bl	8015ff8 <_ZdlPv>
      }
 800cb8a:	bf00      	nop
 800cb8c:	3710      	adds	r7, #16
 800cb8e:	46bd      	mov	sp, r7
 800cb90:	bd80      	pop	{r7, pc}

0800cb92 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _M_tp(std::move(__tp)) { }
 800cb92:	b590      	push	{r4, r7, lr}
 800cb94:	b083      	sub	sp, #12
 800cb96:	af00      	add	r7, sp, #0
 800cb98:	6078      	str	r0, [r7, #4]
 800cb9a:	6039      	str	r1, [r7, #0]
 800cb9c:	687c      	ldr	r4, [r7, #4]
 800cb9e:	6838      	ldr	r0, [r7, #0]
 800cba0:	f7fd f85a 	bl	8009c58 <_ZSt4moveIRNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800cba4:	4603      	mov	r3, r0
 800cba6:	4619      	mov	r1, r3
 800cba8:	4620      	mov	r0, r4
 800cbaa:	f7fd f860 	bl	8009c6e <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	370c      	adds	r7, #12
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	bd90      	pop	{r4, r7, pc}

0800cbb8 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama27Nokia5110DisplayDataManagerEELb1EEC1ERKS2_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	b082      	sub	sp, #8
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	6078      	str	r0, [r7, #4]
 800cbc0:	6039      	str	r1, [r7, #0]
 800cbc2:	6839      	ldr	r1, [r7, #0]
 800cbc4:	6878      	ldr	r0, [r7, #4]
 800cbc6:	f7fc ffe7 	bl	8009b98 <_ZNSaIN4tama27Nokia5110DisplayDataManagerEEC1ERKS1_>
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	4618      	mov	r0, r3
 800cbce:	3708      	adds	r7, #8
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	bd80      	pop	{r7, pc}

0800cbd4 <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEE7destroyIS2_EEvPT_>:
	destroy(_Up* __p) { __p->~_Up(); }
 800cbd4:	b480      	push	{r7}
 800cbd6:	b083      	sub	sp, #12
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
 800cbdc:	6039      	str	r1, [r7, #0]
 800cbde:	bf00      	nop
 800cbe0:	370c      	adds	r7, #12
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe8:	4770      	bx	lr

0800cbea <_ZNK9__gnu_cxx13new_allocatorIN4tama16Stm32TimeMonitorEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800cbea:	b480      	push	{r7}
 800cbec:	b083      	sub	sp, #12
 800cbee:	af00      	add	r7, sp, #0
 800cbf0:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800cbf2:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	370c      	adds	r7, #12
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc00:	4770      	bx	lr

0800cc02 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800cc02:	b580      	push	{r7, lr}
 800cc04:	b084      	sub	sp, #16
 800cc06:	af00      	add	r7, sp, #0
 800cc08:	60f8      	str	r0, [r7, #12]
 800cc0a:	60b9      	str	r1, [r7, #8]
 800cc0c:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800cc0e:	68f8      	ldr	r0, [r7, #12]
 800cc10:	f000 faea 	bl	800d1e8 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>
 800cc14:	4602      	mov	r2, r0
 800cc16:	68bb      	ldr	r3, [r7, #8]
 800cc18:	4293      	cmp	r3, r2
 800cc1a:	bf8c      	ite	hi
 800cc1c:	2301      	movhi	r3, #1
 800cc1e:	2300      	movls	r3, #0
 800cc20:	b2db      	uxtb	r3, r3
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d001      	beq.n	800cc2a <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800cc26:	f009 f9fa 	bl	801601e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800cc2a:	68ba      	ldr	r2, [r7, #8]
 800cc2c:	4613      	mov	r3, r2
 800cc2e:	009b      	lsls	r3, r3, #2
 800cc30:	4413      	add	r3, r2
 800cc32:	009b      	lsls	r3, r3, #2
 800cc34:	4618      	mov	r0, r3
 800cc36:	f009 f9c6 	bl	8015fc6 <_Znwj>
 800cc3a:	4603      	mov	r3, r0
      }
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	3710      	adds	r7, #16
 800cc40:	46bd      	mov	sp, r7
 800cc42:	bd80      	pop	{r7, pc}

0800cc44 <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800cc44:	b480      	push	{r7}
 800cc46:	b083      	sub	sp, #12
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	4618      	mov	r0, r3
 800cc50:	370c      	adds	r7, #12
 800cc52:	46bd      	mov	sp, r7
 800cc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc58:	4770      	bx	lr

0800cc5a <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>:
      deallocate(pointer __p, size_type)
 800cc5a:	b580      	push	{r7, lr}
 800cc5c:	b084      	sub	sp, #16
 800cc5e:	af00      	add	r7, sp, #0
 800cc60:	60f8      	str	r0, [r7, #12]
 800cc62:	60b9      	str	r1, [r7, #8]
 800cc64:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800cc66:	68b8      	ldr	r0, [r7, #8]
 800cc68:	f009 f9c6 	bl	8015ff8 <_ZdlPv>
      }
 800cc6c:	bf00      	nop
 800cc6e:	3710      	adds	r7, #16
 800cc70:	46bd      	mov	sp, r7
 800cc72:	bd80      	pop	{r7, pc}

0800cc74 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _M_tp(std::move(__tp)) { }
 800cc74:	b590      	push	{r4, r7, lr}
 800cc76:	b083      	sub	sp, #12
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
 800cc7c:	6039      	str	r1, [r7, #0]
 800cc7e:	687c      	ldr	r4, [r7, #4]
 800cc80:	6838      	ldr	r0, [r7, #0]
 800cc82:	f7fd f8d1 	bl	8009e28 <_ZSt4moveIRNSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800cc86:	4603      	mov	r3, r0
 800cc88:	4619      	mov	r1, r3
 800cc8a:	4620      	mov	r0, r4
 800cc8c:	f7fd f8d7 	bl	8009e3e <_ZNSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	4618      	mov	r0, r3
 800cc94:	370c      	adds	r7, #12
 800cc96:	46bd      	mov	sp, r7
 800cc98:	bd90      	pop	{r4, r7, pc}

0800cc9a <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama16Stm32TimeMonitorEELb1EEC1ERKS2_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 800cc9a:	b580      	push	{r7, lr}
 800cc9c:	b082      	sub	sp, #8
 800cc9e:	af00      	add	r7, sp, #0
 800cca0:	6078      	str	r0, [r7, #4]
 800cca2:	6039      	str	r1, [r7, #0]
 800cca4:	6839      	ldr	r1, [r7, #0]
 800cca6:	6878      	ldr	r0, [r7, #4]
 800cca8:	f7fd f85e 	bl	8009d68 <_ZNSaIN4tama16Stm32TimeMonitorEEC1ERKS1_>
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	4618      	mov	r0, r3
 800ccb0:	3708      	adds	r7, #8
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	bd80      	pop	{r7, pc}

0800ccb6 <_ZN9__gnu_cxx13new_allocatorIN4tama16Stm32TimeMonitorEE7destroyIS2_EEvPT_>:
	destroy(_Up* __p) { __p->~_Up(); }
 800ccb6:	b480      	push	{r7}
 800ccb8:	b083      	sub	sp, #12
 800ccba:	af00      	add	r7, sp, #0
 800ccbc:	6078      	str	r0, [r7, #4]
 800ccbe:	6039      	str	r1, [r7, #0]
 800ccc0:	bf00      	nop
 800ccc2:	370c      	adds	r7, #12
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccca:	4770      	bx	lr

0800cccc <_ZNK9__gnu_cxx13new_allocatorIN4tama25Stm32SoundPlayingStrategyEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800cccc:	b480      	push	{r7}
 800ccce:	b083      	sub	sp, #12
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800ccd4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800ccd8:	4618      	mov	r0, r3
 800ccda:	370c      	adds	r7, #12
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce2:	4770      	bx	lr

0800cce4 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800cce4:	b580      	push	{r7, lr}
 800cce6:	b084      	sub	sp, #16
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	60f8      	str	r0, [r7, #12]
 800ccec:	60b9      	str	r1, [r7, #8]
 800ccee:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800ccf0:	68f8      	ldr	r0, [r7, #12]
 800ccf2:	f000 fa87 	bl	800d204 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>
 800ccf6:	4602      	mov	r2, r0
 800ccf8:	68bb      	ldr	r3, [r7, #8]
 800ccfa:	4293      	cmp	r3, r2
 800ccfc:	bf8c      	ite	hi
 800ccfe:	2301      	movhi	r3, #1
 800cd00:	2300      	movls	r3, #0
 800cd02:	b2db      	uxtb	r3, r3
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d001      	beq.n	800cd0c <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800cd08:	f009 f989 	bl	801601e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800cd0c:	68ba      	ldr	r2, [r7, #8]
 800cd0e:	4613      	mov	r3, r2
 800cd10:	009b      	lsls	r3, r3, #2
 800cd12:	4413      	add	r3, r2
 800cd14:	009b      	lsls	r3, r3, #2
 800cd16:	4618      	mov	r0, r3
 800cd18:	f009 f955 	bl	8015fc6 <_Znwj>
 800cd1c:	4603      	mov	r3, r0
      }
 800cd1e:	4618      	mov	r0, r3
 800cd20:	3710      	adds	r7, #16
 800cd22:	46bd      	mov	sp, r7
 800cd24:	bd80      	pop	{r7, pc}

0800cd26 <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800cd26:	b480      	push	{r7}
 800cd28:	b083      	sub	sp, #12
 800cd2a:	af00      	add	r7, sp, #0
 800cd2c:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	4618      	mov	r0, r3
 800cd32:	370c      	adds	r7, #12
 800cd34:	46bd      	mov	sp, r7
 800cd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3a:	4770      	bx	lr

0800cd3c <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>:
      deallocate(pointer __p, size_type)
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b084      	sub	sp, #16
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	60f8      	str	r0, [r7, #12]
 800cd44:	60b9      	str	r1, [r7, #8]
 800cd46:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800cd48:	68b8      	ldr	r0, [r7, #8]
 800cd4a:	f009 f955 	bl	8015ff8 <_ZdlPv>
      }
 800cd4e:	bf00      	nop
 800cd50:	3710      	adds	r7, #16
 800cd52:	46bd      	mov	sp, r7
 800cd54:	bd80      	pop	{r7, pc}

0800cd56 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _M_tp(std::move(__tp)) { }
 800cd56:	b590      	push	{r4, r7, lr}
 800cd58:	b083      	sub	sp, #12
 800cd5a:	af00      	add	r7, sp, #0
 800cd5c:	6078      	str	r0, [r7, #4]
 800cd5e:	6039      	str	r1, [r7, #0]
 800cd60:	687c      	ldr	r4, [r7, #4]
 800cd62:	6838      	ldr	r0, [r7, #0]
 800cd64:	f7fd f948 	bl	8009ff8 <_ZSt4moveIRNSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800cd68:	4603      	mov	r3, r0
 800cd6a:	4619      	mov	r1, r3
 800cd6c:	4620      	mov	r0, r4
 800cd6e:	f7fd f94e 	bl	800a00e <_ZNSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	4618      	mov	r0, r3
 800cd76:	370c      	adds	r7, #12
 800cd78:	46bd      	mov	sp, r7
 800cd7a:	bd90      	pop	{r4, r7, pc}

0800cd7c <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama25Stm32SoundPlayingStrategyEELb1EEC1ERKS2_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	b082      	sub	sp, #8
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	6078      	str	r0, [r7, #4]
 800cd84:	6039      	str	r1, [r7, #0]
 800cd86:	6839      	ldr	r1, [r7, #0]
 800cd88:	6878      	ldr	r0, [r7, #4]
 800cd8a:	f7fd f8d5 	bl	8009f38 <_ZNSaIN4tama25Stm32SoundPlayingStrategyEEC1ERKS1_>
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	4618      	mov	r0, r3
 800cd92:	3708      	adds	r7, #8
 800cd94:	46bd      	mov	sp, r7
 800cd96:	bd80      	pop	{r7, pc}

0800cd98 <_ZN9__gnu_cxx13new_allocatorIN4tama25Stm32SoundPlayingStrategyEE7destroyIS2_EEvPT_>:
	destroy(_Up* __p) { __p->~_Up(); }
 800cd98:	b480      	push	{r7}
 800cd9a:	b083      	sub	sp, #12
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	6078      	str	r0, [r7, #4]
 800cda0:	6039      	str	r1, [r7, #0]
 800cda2:	bf00      	nop
 800cda4:	370c      	adds	r7, #12
 800cda6:	46bd      	mov	sp, r7
 800cda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdac:	4770      	bx	lr
	...

0800cdb0 <_ZNK9__gnu_cxx13new_allocatorIN4tama11SoundPlayerEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800cdb0:	b480      	push	{r7}
 800cdb2:	b083      	sub	sp, #12
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800cdb8:	4b03      	ldr	r3, [pc, #12]	; (800cdc8 <_ZNK9__gnu_cxx13new_allocatorIN4tama11SoundPlayerEE8max_sizeEv+0x18>)
 800cdba:	4618      	mov	r0, r3
 800cdbc:	370c      	adds	r7, #12
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc4:	4770      	bx	lr
 800cdc6:	bf00      	nop
 800cdc8:	071c71c7 	.word	0x071c71c7

0800cdcc <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama11SoundPlayerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b084      	sub	sp, #16
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	60f8      	str	r0, [r7, #12]
 800cdd4:	60b9      	str	r1, [r7, #8]
 800cdd6:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800cdd8:	68f8      	ldr	r0, [r7, #12]
 800cdda:	f000 fa21 	bl	800d220 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama11SoundPlayerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>
 800cdde:	4602      	mov	r2, r0
 800cde0:	68bb      	ldr	r3, [r7, #8]
 800cde2:	4293      	cmp	r3, r2
 800cde4:	bf8c      	ite	hi
 800cde6:	2301      	movhi	r3, #1
 800cde8:	2300      	movls	r3, #0
 800cdea:	b2db      	uxtb	r3, r3
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d001      	beq.n	800cdf4 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama11SoundPlayerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800cdf0:	f009 f915 	bl	801601e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800cdf4:	68ba      	ldr	r2, [r7, #8]
 800cdf6:	4613      	mov	r3, r2
 800cdf8:	009b      	lsls	r3, r3, #2
 800cdfa:	4413      	add	r3, r2
 800cdfc:	009b      	lsls	r3, r3, #2
 800cdfe:	4618      	mov	r0, r3
 800ce00:	f009 f8e1 	bl	8015fc6 <_Znwj>
 800ce04:	4603      	mov	r3, r0
      }
 800ce06:	4618      	mov	r0, r3
 800ce08:	3710      	adds	r7, #16
 800ce0a:	46bd      	mov	sp, r7
 800ce0c:	bd80      	pop	{r7, pc}

0800ce0e <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama11SoundPlayerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800ce0e:	b480      	push	{r7}
 800ce10:	b083      	sub	sp, #12
 800ce12:	af00      	add	r7, sp, #0
 800ce14:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	4618      	mov	r0, r3
 800ce1a:	370c      	adds	r7, #12
 800ce1c:	46bd      	mov	sp, r7
 800ce1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce22:	4770      	bx	lr

0800ce24 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama11SoundPlayerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>:
      deallocate(pointer __p, size_type)
 800ce24:	b580      	push	{r7, lr}
 800ce26:	b084      	sub	sp, #16
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	60f8      	str	r0, [r7, #12]
 800ce2c:	60b9      	str	r1, [r7, #8]
 800ce2e:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800ce30:	68b8      	ldr	r0, [r7, #8]
 800ce32:	f009 f8e1 	bl	8015ff8 <_ZdlPv>
      }
 800ce36:	bf00      	nop
 800ce38:	3710      	adds	r7, #16
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	bd80      	pop	{r7, pc}

0800ce3e <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _M_tp(std::move(__tp)) { }
 800ce3e:	b590      	push	{r4, r7, lr}
 800ce40:	b083      	sub	sp, #12
 800ce42:	af00      	add	r7, sp, #0
 800ce44:	6078      	str	r0, [r7, #4]
 800ce46:	6039      	str	r1, [r7, #0]
 800ce48:	687c      	ldr	r4, [r7, #4]
 800ce4a:	6838      	ldr	r0, [r7, #0]
 800ce4c:	f7fd f9c2 	bl	800a1d4 <_ZSt4moveIRNSt12__shared_ptrIN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800ce50:	4603      	mov	r3, r0
 800ce52:	4619      	mov	r1, r3
 800ce54:	4620      	mov	r0, r4
 800ce56:	f7fd f9c8 	bl	800a1ea <_ZNSt12__shared_ptrIN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	370c      	adds	r7, #12
 800ce60:	46bd      	mov	sp, r7
 800ce62:	bd90      	pop	{r4, r7, pc}

0800ce64 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama11SoundPlayerEELb1EEC1ERKS2_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b082      	sub	sp, #8
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
 800ce6c:	6039      	str	r1, [r7, #0]
 800ce6e:	6839      	ldr	r1, [r7, #0]
 800ce70:	6878      	ldr	r0, [r7, #4]
 800ce72:	f7fd f949 	bl	800a108 <_ZNSaIN4tama11SoundPlayerEEC1ERKS1_>
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	4618      	mov	r0, r3
 800ce7a:	3708      	adds	r7, #8
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	bd80      	pop	{r7, pc}

0800ce80 <_ZN4tama11SoundPlayerD1Ev>:
#include "../tone/Tone.h"
#include "../SoundPlayingStrategy.h"

namespace tama
{
    class SoundPlayer
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b082      	sub	sp, #8
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	6078      	str	r0, [r7, #4]
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	3310      	adds	r3, #16
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	f7f6 f838 	bl	8002f02 <_ZNSt6vectorIN4tama4ToneESaIS1_EED1Ev>
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	3308      	adds	r3, #8
 800ce96:	4618      	mov	r0, r3
 800ce98:	f7fa fd0e 	bl	80078b8 <_ZNSt10shared_ptrIN4tama20SoundPlayingStrategyEED1Ev>
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	4618      	mov	r0, r3
 800cea0:	f7fa fcd4 	bl	800784c <_ZNSt10shared_ptrIN4tama11TimeMonitorEED1Ev>
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	4618      	mov	r0, r3
 800cea8:	3708      	adds	r7, #8
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	bd80      	pop	{r7, pc}

0800ceae <_ZN9__gnu_cxx13new_allocatorIN4tama11SoundPlayerEE7destroyIS2_EEvPT_>:
	destroy(_Up* __p) { __p->~_Up(); }
 800ceae:	b580      	push	{r7, lr}
 800ceb0:	b082      	sub	sp, #8
 800ceb2:	af00      	add	r7, sp, #0
 800ceb4:	6078      	str	r0, [r7, #4]
 800ceb6:	6039      	str	r1, [r7, #0]
 800ceb8:	6838      	ldr	r0, [r7, #0]
 800ceba:	f7ff ffe1 	bl	800ce80 <_ZN4tama11SoundPlayerD1Ev>
 800cebe:	bf00      	nop
 800cec0:	3708      	adds	r7, #8
 800cec2:	46bd      	mov	sp, r7
 800cec4:	bd80      	pop	{r7, pc}

0800cec6 <_ZNK9__gnu_cxx13new_allocatorIN4tama10Stm32InputEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800cec6:	b480      	push	{r7}
 800cec8:	b083      	sub	sp, #12
 800ceca:	af00      	add	r7, sp, #0
 800cecc:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800cece:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800ced2:	4618      	mov	r0, r3
 800ced4:	370c      	adds	r7, #12
 800ced6:	46bd      	mov	sp, r7
 800ced8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cedc:	4770      	bx	lr

0800cede <_ZNSt12_Vector_baseISt10shared_ptrIN4tama7OnInputEESaIS3_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 800cede:	b580      	push	{r7, lr}
 800cee0:	b082      	sub	sp, #8
 800cee2:	af00      	add	r7, sp, #0
 800cee4:	6078      	str	r0, [r7, #4]
 800cee6:	6878      	ldr	r0, [r7, #4]
 800cee8:	f000 f9bd 	bl	800d266 <_ZNSaISt10shared_ptrIN4tama7OnInputEEED1Ev>
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	4618      	mov	r0, r3
 800cef0:	3708      	adds	r7, #8
 800cef2:	46bd      	mov	sp, r7
 800cef4:	bd80      	pop	{r7, pc}

0800cef6 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama7OnInputEESaIS3_EEC1Ev>:
      _Vector_base()
 800cef6:	b580      	push	{r7, lr}
 800cef8:	b082      	sub	sp, #8
 800cefa:	af00      	add	r7, sp, #0
 800cefc:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	4618      	mov	r0, r3
 800cf02:	f000 f99b 	bl	800d23c <_ZNSt12_Vector_baseISt10shared_ptrIN4tama7OnInputEESaIS3_EE12_Vector_implC1Ev>
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	4618      	mov	r0, r3
 800cf0a:	3708      	adds	r7, #8
 800cf0c:	46bd      	mov	sp, r7
 800cf0e:	bd80      	pop	{r7, pc}

0800cf10 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama7OnInputEESaIS3_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800cf10:	b580      	push	{r7, lr}
 800cf12:	b082      	sub	sp, #8
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	6819      	ldr	r1, [r3, #0]
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 800cf20:	461a      	mov	r2, r3
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	1ad3      	subs	r3, r2, r3
 800cf28:	10db      	asrs	r3, r3, #3
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 800cf2a:	461a      	mov	r2, r3
 800cf2c:	6878      	ldr	r0, [r7, #4]
 800cf2e:	f7f3 fd56 	bl	80009de <_ZNSt12_Vector_baseISt10shared_ptrIN4tama7OnInputEESaIS3_EE13_M_deallocateEPS3_j>
		      - this->_M_impl._M_start); }
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	4618      	mov	r0, r3
 800cf36:	f7ff ffd2 	bl	800cede <_ZNSt12_Vector_baseISt10shared_ptrIN4tama7OnInputEESaIS3_EE12_Vector_implD1Ev>
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	3708      	adds	r7, #8
 800cf40:	46bd      	mov	sp, r7
 800cf42:	bd80      	pop	{r7, pc}

0800cf44 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800cf44:	b580      	push	{r7, lr}
 800cf46:	b084      	sub	sp, #16
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	60f8      	str	r0, [r7, #12]
 800cf4c:	60b9      	str	r1, [r7, #8]
 800cf4e:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800cf50:	68f8      	ldr	r0, [r7, #12]
 800cf52:	f000 f995 	bl	800d280 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>
 800cf56:	4602      	mov	r2, r0
 800cf58:	68bb      	ldr	r3, [r7, #8]
 800cf5a:	4293      	cmp	r3, r2
 800cf5c:	bf8c      	ite	hi
 800cf5e:	2301      	movhi	r3, #1
 800cf60:	2300      	movls	r3, #0
 800cf62:	b2db      	uxtb	r3, r3
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d001      	beq.n	800cf6c <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800cf68:	f009 f859 	bl	801601e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800cf6c:	68ba      	ldr	r2, [r7, #8]
 800cf6e:	4613      	mov	r3, r2
 800cf70:	009b      	lsls	r3, r3, #2
 800cf72:	4413      	add	r3, r2
 800cf74:	009b      	lsls	r3, r3, #2
 800cf76:	4618      	mov	r0, r3
 800cf78:	f009 f825 	bl	8015fc6 <_Znwj>
 800cf7c:	4603      	mov	r3, r0
      }
 800cf7e:	4618      	mov	r0, r3
 800cf80:	3710      	adds	r7, #16
 800cf82:	46bd      	mov	sp, r7
 800cf84:	bd80      	pop	{r7, pc}

0800cf86 <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800cf86:	b480      	push	{r7}
 800cf88:	b083      	sub	sp, #12
 800cf8a:	af00      	add	r7, sp, #0
 800cf8c:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	4618      	mov	r0, r3
 800cf92:	370c      	adds	r7, #12
 800cf94:	46bd      	mov	sp, r7
 800cf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9a:	4770      	bx	lr

0800cf9c <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>:
      deallocate(pointer __p, size_type)
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b084      	sub	sp, #16
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	60f8      	str	r0, [r7, #12]
 800cfa4:	60b9      	str	r1, [r7, #8]
 800cfa6:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800cfa8:	68b8      	ldr	r0, [r7, #8]
 800cfaa:	f009 f825 	bl	8015ff8 <_ZdlPv>
      }
 800cfae:	bf00      	nop
 800cfb0:	3710      	adds	r7, #16
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	bd80      	pop	{r7, pc}

0800cfb6 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _M_tp(std::move(__tp)) { }
 800cfb6:	b590      	push	{r4, r7, lr}
 800cfb8:	b083      	sub	sp, #12
 800cfba:	af00      	add	r7, sp, #0
 800cfbc:	6078      	str	r0, [r7, #4]
 800cfbe:	6039      	str	r1, [r7, #0]
 800cfc0:	687c      	ldr	r4, [r7, #4]
 800cfc2:	6838      	ldr	r0, [r7, #0]
 800cfc4:	f7fd f9ee 	bl	800a3a4 <_ZSt4moveIRNSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800cfc8:	4603      	mov	r3, r0
 800cfca:	4619      	mov	r1, r3
 800cfcc:	4620      	mov	r0, r4
 800cfce:	f7fd f9f4 	bl	800a3ba <_ZNSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	370c      	adds	r7, #12
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	bd90      	pop	{r4, r7, pc}

0800cfdc <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama10Stm32InputEELb1EEC1ERKS2_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b082      	sub	sp, #8
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
 800cfe4:	6039      	str	r1, [r7, #0]
 800cfe6:	6839      	ldr	r1, [r7, #0]
 800cfe8:	6878      	ldr	r0, [r7, #4]
 800cfea:	f7fd f97b 	bl	800a2e4 <_ZNSaIN4tama10Stm32InputEEC1ERKS1_>
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	4618      	mov	r0, r3
 800cff2:	3708      	adds	r7, #8
 800cff4:	46bd      	mov	sp, r7
 800cff6:	bd80      	pop	{r7, pc}

0800cff8 <_ZN4tama10Stm32InputD1Ev>:
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b082      	sub	sp, #8
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
 800d000:	4a05      	ldr	r2, [pc, #20]	; (800d018 <_ZN4tama10Stm32InputD1Ev+0x20>)
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	601a      	str	r2, [r3, #0]
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	4618      	mov	r0, r3
 800d00a:	f7fe fbe9 	bl	800b7e0 <_ZN4tama5InputD1Ev>
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	4618      	mov	r0, r3
 800d012:	3708      	adds	r7, #8
 800d014:	46bd      	mov	sp, r7
 800d016:	bd80      	pop	{r7, pc}
 800d018:	0801722c 	.word	0x0801722c

0800d01c <_ZN9__gnu_cxx13new_allocatorIN4tama10Stm32InputEE7destroyIS2_EEvPT_>:
	destroy(_Up* __p) { __p->~_Up(); }
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b082      	sub	sp, #8
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]
 800d024:	6039      	str	r1, [r7, #0]
 800d026:	6838      	ldr	r0, [r7, #0]
 800d028:	f7ff ffe6 	bl	800cff8 <_ZN4tama10Stm32InputD1Ev>
 800d02c:	bf00      	nop
 800d02e:	3708      	adds	r7, #8
 800d030:	46bd      	mov	sp, r7
 800d032:	bd80      	pop	{r7, pc}

0800d034 <_ZSt4copyISt13move_iteratorIPN4tama4ToneEES3_ET0_T_S6_S5_>:
    copy(_II __first, _II __last, _OI __result)
 800d034:	b590      	push	{r4, r7, lr}
 800d036:	b085      	sub	sp, #20
 800d038:	af00      	add	r7, sp, #0
 800d03a:	60f8      	str	r0, [r7, #12]
 800d03c:	60b9      	str	r1, [r7, #8]
 800d03e:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 800d040:	68f8      	ldr	r0, [r7, #12]
 800d042:	f000 f92b 	bl	800d29c <_ZSt12__miter_baseIPN4tama4ToneEEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 800d046:	4604      	mov	r4, r0
 800d048:	68b8      	ldr	r0, [r7, #8]
 800d04a:	f000 f927 	bl	800d29c <_ZSt12__miter_baseIPN4tama4ToneEEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 800d04e:	4603      	mov	r3, r0
	       __result));
 800d050:	687a      	ldr	r2, [r7, #4]
 800d052:	4619      	mov	r1, r3
 800d054:	4620      	mov	r0, r4
 800d056:	f000 f932 	bl	800d2be <_ZSt14__copy_move_a2ILb1EPN4tama4ToneES2_ET1_T0_S4_S3_>
 800d05a:	4603      	mov	r3, r0
    }
 800d05c:	4618      	mov	r0, r3
 800d05e:	3714      	adds	r7, #20
 800d060:	46bd      	mov	sp, r7
 800d062:	bd90      	pop	{r4, r7, pc}

0800d064 <_ZNK9__gnu_cxx13new_allocatorIN4tama7ContextEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800d064:	b480      	push	{r7}
 800d066:	b083      	sub	sp, #12
 800d068:	af00      	add	r7, sp, #0
 800d06a:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800d06c:	4b03      	ldr	r3, [pc, #12]	; (800d07c <_ZNK9__gnu_cxx13new_allocatorIN4tama7ContextEE8max_sizeEv+0x18>)
 800d06e:	4618      	mov	r0, r3
 800d070:	370c      	adds	r7, #12
 800d072:	46bd      	mov	sp, r7
 800d074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d078:	4770      	bx	lr
 800d07a:	bf00      	nop
 800d07c:	04924924 	.word	0x04924924

0800d080 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800d080:	b580      	push	{r7, lr}
 800d082:	b084      	sub	sp, #16
 800d084:	af00      	add	r7, sp, #0
 800d086:	60f8      	str	r0, [r7, #12]
 800d088:	60b9      	str	r1, [r7, #8]
 800d08a:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800d08c:	68f8      	ldr	r0, [r7, #12]
 800d08e:	f000 f933 	bl	800d2f8 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>
 800d092:	4602      	mov	r2, r0
 800d094:	68bb      	ldr	r3, [r7, #8]
 800d096:	4293      	cmp	r3, r2
 800d098:	bf8c      	ite	hi
 800d09a:	2301      	movhi	r3, #1
 800d09c:	2300      	movls	r3, #0
 800d09e:	b2db      	uxtb	r3, r3
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d001      	beq.n	800d0a8 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800d0a4:	f008 ffbb 	bl	801601e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800d0a8:	68ba      	ldr	r2, [r7, #8]
 800d0aa:	4613      	mov	r3, r2
 800d0ac:	009b      	lsls	r3, r3, #2
 800d0ae:	4413      	add	r3, r2
 800d0b0:	009b      	lsls	r3, r3, #2
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	f008 ff87 	bl	8015fc6 <_Znwj>
 800d0b8:	4603      	mov	r3, r0
      }
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	3710      	adds	r7, #16
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	bd80      	pop	{r7, pc}

0800d0c2 <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800d0c2:	b480      	push	{r7}
 800d0c4:	b083      	sub	sp, #12
 800d0c6:	af00      	add	r7, sp, #0
 800d0c8:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	370c      	adds	r7, #12
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d6:	4770      	bx	lr

0800d0d8 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>:
      deallocate(pointer __p, size_type)
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b084      	sub	sp, #16
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	60f8      	str	r0, [r7, #12]
 800d0e0:	60b9      	str	r1, [r7, #8]
 800d0e2:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800d0e4:	68b8      	ldr	r0, [r7, #8]
 800d0e6:	f008 ff87 	bl	8015ff8 <_ZdlPv>
      }
 800d0ea:	bf00      	nop
 800d0ec:	3710      	adds	r7, #16
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	bd80      	pop	{r7, pc}

0800d0f2 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _M_tp(std::move(__tp)) { }
 800d0f2:	b590      	push	{r4, r7, lr}
 800d0f4:	b083      	sub	sp, #12
 800d0f6:	af00      	add	r7, sp, #0
 800d0f8:	6078      	str	r0, [r7, #4]
 800d0fa:	6039      	str	r1, [r7, #0]
 800d0fc:	687c      	ldr	r4, [r7, #4]
 800d0fe:	6838      	ldr	r0, [r7, #0]
 800d100:	f7fd fa83 	bl	800a60a <_ZSt4moveIRNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800d104:	4603      	mov	r3, r0
 800d106:	4619      	mov	r1, r3
 800d108:	4620      	mov	r0, r4
 800d10a:	f7fd fa89 	bl	800a620 <_ZNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	4618      	mov	r0, r3
 800d112:	370c      	adds	r7, #12
 800d114:	46bd      	mov	sp, r7
 800d116:	bd90      	pop	{r4, r7, pc}

0800d118 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama7ContextEELb1EEC1ERKS2_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 800d118:	b580      	push	{r7, lr}
 800d11a:	b082      	sub	sp, #8
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	6078      	str	r0, [r7, #4]
 800d120:	6039      	str	r1, [r7, #0]
 800d122:	6839      	ldr	r1, [r7, #0]
 800d124:	6878      	ldr	r0, [r7, #4]
 800d126:	f7fd fa05 	bl	800a534 <_ZNSaIN4tama7ContextEEC1ERKS1_>
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	4618      	mov	r0, r3
 800d12e:	3708      	adds	r7, #8
 800d130:	46bd      	mov	sp, r7
 800d132:	bd80      	pop	{r7, pc}

0800d134 <_ZNSt5stackISt10shared_ptrIN4tama5StageEESt5dequeIS3_SaIS3_EEED1Ev>:
    class stack
 800d134:	b580      	push	{r7, lr}
 800d136:	b082      	sub	sp, #8
 800d138:	af00      	add	r7, sp, #0
 800d13a:	6078      	str	r0, [r7, #4]
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	4618      	mov	r0, r3
 800d140:	f000 f8e8 	bl	800d314 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EED1Ev>
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	4618      	mov	r0, r3
 800d148:	3708      	adds	r7, #8
 800d14a:	46bd      	mov	sp, r7
 800d14c:	bd80      	pop	{r7, pc}

0800d14e <_ZN4tama7ContextD1Ev>:

namespace tama
{
    class Stage;

    class Context
 800d14e:	b580      	push	{r7, lr}
 800d150:	b082      	sub	sp, #8
 800d152:	af00      	add	r7, sp, #0
 800d154:	6078      	str	r0, [r7, #4]
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	3330      	adds	r3, #48	; 0x30
 800d15a:	4618      	mov	r0, r3
 800d15c:	f7f6 f931 	bl	80033c2 <_ZNSt10shared_ptrIN4tama5InputEED1Ev>
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	3328      	adds	r3, #40	; 0x28
 800d164:	4618      	mov	r0, r3
 800d166:	f7f6 f947 	bl	80033f8 <_ZNSt10shared_ptrIN4tama13TextureLoaderEED1Ev>
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	4618      	mov	r0, r3
 800d16e:	f7ff ffe1 	bl	800d134 <_ZNSt5stackISt10shared_ptrIN4tama5StageEESt5dequeIS3_SaIS3_EEED1Ev>
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	4618      	mov	r0, r3
 800d176:	3708      	adds	r7, #8
 800d178:	46bd      	mov	sp, r7
 800d17a:	bd80      	pop	{r7, pc}

0800d17c <_ZN9__gnu_cxx13new_allocatorIN4tama7ContextEE7destroyIS2_EEvPT_>:
	destroy(_Up* __p) { __p->~_Up(); }
 800d17c:	b580      	push	{r7, lr}
 800d17e:	b082      	sub	sp, #8
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]
 800d184:	6039      	str	r1, [r7, #0]
 800d186:	6838      	ldr	r0, [r7, #0]
 800d188:	f7ff ffe1 	bl	800d14e <_ZN4tama7ContextD1Ev>
 800d18c:	bf00      	nop
 800d18e:	3708      	adds	r7, #8
 800d190:	46bd      	mov	sp, r7
 800d192:	bd80      	pop	{r7, pc}

0800d194 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800d194:	b480      	push	{r7}
 800d196:	b083      	sub	sp, #12
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800d19c:	4b03      	ldr	r3, [pc, #12]	; (800d1ac <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv+0x18>)
 800d19e:	4618      	mov	r0, r3
 800d1a0:	370c      	adds	r7, #12
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a8:	4770      	bx	lr
 800d1aa:	bf00      	nop
 800d1ac:	0ccccccc 	.word	0x0ccccccc

0800d1b0 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800d1b0:	b480      	push	{r7}
 800d1b2:	b083      	sub	sp, #12
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800d1b8:	4b03      	ldr	r3, [pc, #12]	; (800d1c8 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv+0x18>)
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	370c      	adds	r7, #12
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c4:	4770      	bx	lr
 800d1c6:	bf00      	nop
 800d1c8:	0ccccccc 	.word	0x0ccccccc

0800d1cc <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800d1cc:	b480      	push	{r7}
 800d1ce:	b083      	sub	sp, #12
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800d1d4:	4b03      	ldr	r3, [pc, #12]	; (800d1e4 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv+0x18>)
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	370c      	adds	r7, #12
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e0:	4770      	bx	lr
 800d1e2:	bf00      	nop
 800d1e4:	0ccccccc 	.word	0x0ccccccc

0800d1e8 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800d1e8:	b480      	push	{r7}
 800d1ea:	b083      	sub	sp, #12
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800d1f0:	4b03      	ldr	r3, [pc, #12]	; (800d200 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv+0x18>)
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	370c      	adds	r7, #12
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fc:	4770      	bx	lr
 800d1fe:	bf00      	nop
 800d200:	0ccccccc 	.word	0x0ccccccc

0800d204 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800d204:	b480      	push	{r7}
 800d206:	b083      	sub	sp, #12
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800d20c:	4b03      	ldr	r3, [pc, #12]	; (800d21c <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv+0x18>)
 800d20e:	4618      	mov	r0, r3
 800d210:	370c      	adds	r7, #12
 800d212:	46bd      	mov	sp, r7
 800d214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d218:	4770      	bx	lr
 800d21a:	bf00      	nop
 800d21c:	0ccccccc 	.word	0x0ccccccc

0800d220 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama11SoundPlayerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800d220:	b480      	push	{r7}
 800d222:	b083      	sub	sp, #12
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800d228:	4b03      	ldr	r3, [pc, #12]	; (800d238 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama11SoundPlayerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv+0x18>)
 800d22a:	4618      	mov	r0, r3
 800d22c:	370c      	adds	r7, #12
 800d22e:	46bd      	mov	sp, r7
 800d230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d234:	4770      	bx	lr
 800d236:	bf00      	nop
 800d238:	0ccccccc 	.word	0x0ccccccc

0800d23c <_ZNSt12_Vector_baseISt10shared_ptrIN4tama7OnInputEESaIS3_EE12_Vector_implC1Ev>:
	_Vector_impl()
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b082      	sub	sp, #8
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 800d244:	6878      	ldr	r0, [r7, #4]
 800d246:	f000 f88a 	bl	800d35e <_ZNSaISt10shared_ptrIN4tama7OnInputEEEC1Ev>
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	2200      	movs	r2, #0
 800d24e:	601a      	str	r2, [r3, #0]
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	2200      	movs	r2, #0
 800d254:	605a      	str	r2, [r3, #4]
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	2200      	movs	r2, #0
 800d25a:	609a      	str	r2, [r3, #8]
	{ }
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	4618      	mov	r0, r3
 800d260:	3708      	adds	r7, #8
 800d262:	46bd      	mov	sp, r7
 800d264:	bd80      	pop	{r7, pc}

0800d266 <_ZNSaISt10shared_ptrIN4tama7OnInputEEED1Ev>:
 800d266:	b580      	push	{r7, lr}
 800d268:	b082      	sub	sp, #8
 800d26a:	af00      	add	r7, sp, #0
 800d26c:	6078      	str	r0, [r7, #4]
 800d26e:	6878      	ldr	r0, [r7, #4]
 800d270:	f000 f881 	bl	800d376 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama7OnInputEEED1Ev>
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	4618      	mov	r0, r3
 800d278:	3708      	adds	r7, #8
 800d27a:	46bd      	mov	sp, r7
 800d27c:	bd80      	pop	{r7, pc}
	...

0800d280 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800d280:	b480      	push	{r7}
 800d282:	b083      	sub	sp, #12
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800d288:	4b03      	ldr	r3, [pc, #12]	; (800d298 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv+0x18>)
 800d28a:	4618      	mov	r0, r3
 800d28c:	370c      	adds	r7, #12
 800d28e:	46bd      	mov	sp, r7
 800d290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d294:	4770      	bx	lr
 800d296:	bf00      	nop
 800d298:	0ccccccc 	.word	0x0ccccccc

0800d29c <_ZSt12__miter_baseIPN4tama4ToneEEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 800d29c:	b580      	push	{r7, lr}
 800d29e:	b082      	sub	sp, #8
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 800d2a4:	1d3b      	adds	r3, r7, #4
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	f000 f870 	bl	800d38c <_ZNKSt13move_iteratorIPN4tama4ToneEE4baseEv>
 800d2ac:	4603      	mov	r3, r0
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	f000 f878 	bl	800d3a4 <_ZSt12__miter_baseIPN4tama4ToneEET_S3_>
 800d2b4:	4603      	mov	r3, r0
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	3708      	adds	r7, #8
 800d2ba:	46bd      	mov	sp, r7
 800d2bc:	bd80      	pop	{r7, pc}

0800d2be <_ZSt14__copy_move_a2ILb1EPN4tama4ToneES2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800d2be:	b5b0      	push	{r4, r5, r7, lr}
 800d2c0:	b084      	sub	sp, #16
 800d2c2:	af00      	add	r7, sp, #0
 800d2c4:	60f8      	str	r0, [r7, #12]
 800d2c6:	60b9      	str	r1, [r7, #8]
 800d2c8:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 800d2ca:	68f8      	ldr	r0, [r7, #12]
 800d2cc:	f000 f875 	bl	800d3ba <_ZSt12__niter_baseIPN4tama4ToneEET_S3_>
 800d2d0:	4604      	mov	r4, r0
 800d2d2:	68b8      	ldr	r0, [r7, #8]
 800d2d4:	f000 f871 	bl	800d3ba <_ZSt12__niter_baseIPN4tama4ToneEET_S3_>
 800d2d8:	4605      	mov	r5, r0
 800d2da:	6878      	ldr	r0, [r7, #4]
 800d2dc:	f000 f86d 	bl	800d3ba <_ZSt12__niter_baseIPN4tama4ToneEET_S3_>
 800d2e0:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 800d2e2:	461a      	mov	r2, r3
 800d2e4:	4629      	mov	r1, r5
 800d2e6:	4620      	mov	r0, r4
 800d2e8:	f000 f872 	bl	800d3d0 <_ZSt13__copy_move_aILb1EPN4tama4ToneES2_ET1_T0_S4_S3_>
 800d2ec:	4603      	mov	r3, r0
    }
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	3710      	adds	r7, #16
 800d2f2:	46bd      	mov	sp, r7
 800d2f4:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800d2f8 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800d2f8:	b480      	push	{r7}
 800d2fa:	b083      	sub	sp, #12
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800d300:	4b03      	ldr	r3, [pc, #12]	; (800d310 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv+0x18>)
 800d302:	4618      	mov	r0, r3
 800d304:	370c      	adds	r7, #12
 800d306:	46bd      	mov	sp, r7
 800d308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d30c:	4770      	bx	lr
 800d30e:	bf00      	nop
 800d310:	0ccccccc 	.word	0x0ccccccc

0800d314 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EED1Ev>:
      ~deque()
 800d314:	b580      	push	{r7, lr}
 800d316:	b08a      	sub	sp, #40	; 0x28
 800d318:	af00      	add	r7, sp, #0
 800d31a:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 800d31c:	f107 0308 	add.w	r3, r7, #8
 800d320:	6879      	ldr	r1, [r7, #4]
 800d322:	4618      	mov	r0, r3
 800d324:	f000 f894 	bl	800d450 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE5beginEv>
 800d328:	f107 0318 	add.w	r3, r7, #24
 800d32c:	6879      	ldr	r1, [r7, #4]
 800d32e:	4618      	mov	r0, r3
 800d330:	f7f3 ff91 	bl	8001256 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE3endEv>
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	4618      	mov	r0, r3
 800d338:	f7f3 ff9c 	bl	8001274 <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE19_M_get_Tp_allocatorEv>
 800d33c:	4603      	mov	r3, r0
 800d33e:	f107 0218 	add.w	r2, r7, #24
 800d342:	f107 0108 	add.w	r1, r7, #8
 800d346:	6878      	ldr	r0, [r7, #4]
 800d348:	f000 f891 	bl	800d46e <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE15_M_destroy_dataESt15_Deque_iteratorIS3_RS3_PS3_ES9_RKS4_>
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	4618      	mov	r0, r3
 800d350:	f000 f85c 	bl	800d40c <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EED1Ev>
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	4618      	mov	r0, r3
 800d358:	3728      	adds	r7, #40	; 0x28
 800d35a:	46bd      	mov	sp, r7
 800d35c:	bd80      	pop	{r7, pc}

0800d35e <_ZNSaISt10shared_ptrIN4tama7OnInputEEEC1Ev>:
      allocator() throw() { }
 800d35e:	b580      	push	{r7, lr}
 800d360:	b082      	sub	sp, #8
 800d362:	af00      	add	r7, sp, #0
 800d364:	6078      	str	r0, [r7, #4]
 800d366:	6878      	ldr	r0, [r7, #4]
 800d368:	f000 f8a0 	bl	800d4ac <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama7OnInputEEEC1Ev>
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	4618      	mov	r0, r3
 800d370:	3708      	adds	r7, #8
 800d372:	46bd      	mov	sp, r7
 800d374:	bd80      	pop	{r7, pc}

0800d376 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama7OnInputEEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800d376:	b480      	push	{r7}
 800d378:	b083      	sub	sp, #12
 800d37a:	af00      	add	r7, sp, #0
 800d37c:	6078      	str	r0, [r7, #4]
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	4618      	mov	r0, r3
 800d382:	370c      	adds	r7, #12
 800d384:	46bd      	mov	sp, r7
 800d386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d38a:	4770      	bx	lr

0800d38c <_ZNKSt13move_iteratorIPN4tama4ToneEE4baseEv>:
      base() const
 800d38c:	b480      	push	{r7}
 800d38e:	b083      	sub	sp, #12
 800d390:	af00      	add	r7, sp, #0
 800d392:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	4618      	mov	r0, r3
 800d39a:	370c      	adds	r7, #12
 800d39c:	46bd      	mov	sp, r7
 800d39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a2:	4770      	bx	lr

0800d3a4 <_ZSt12__miter_baseIPN4tama4ToneEET_S3_>:
    __miter_base(_Iterator __it)
 800d3a4:	b480      	push	{r7}
 800d3a6:	b083      	sub	sp, #12
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	6078      	str	r0, [r7, #4]
    { return __it; }
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	370c      	adds	r7, #12
 800d3b2:	46bd      	mov	sp, r7
 800d3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b8:	4770      	bx	lr

0800d3ba <_ZSt12__niter_baseIPN4tama4ToneEET_S3_>:
    __niter_base(_Iterator __it)
 800d3ba:	b480      	push	{r7}
 800d3bc:	b083      	sub	sp, #12
 800d3be:	af00      	add	r7, sp, #0
 800d3c0:	6078      	str	r0, [r7, #4]
    { return __it; }
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	370c      	adds	r7, #12
 800d3c8:	46bd      	mov	sp, r7
 800d3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ce:	4770      	bx	lr

0800d3d0 <_ZSt13__copy_move_aILb1EPN4tama4ToneES2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800d3d0:	b580      	push	{r7, lr}
 800d3d2:	b086      	sub	sp, #24
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	60f8      	str	r0, [r7, #12]
 800d3d8:	60b9      	str	r1, [r7, #8]
 800d3da:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 800d3dc:	2301      	movs	r3, #1
 800d3de:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 800d3e0:	687a      	ldr	r2, [r7, #4]
 800d3e2:	68b9      	ldr	r1, [r7, #8]
 800d3e4:	68f8      	ldr	r0, [r7, #12]
 800d3e6:	f000 f86c 	bl	800d4c2 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN4tama4ToneEEEPT_PKS5_S8_S6_>
 800d3ea:	4603      	mov	r3, r0
    }
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	3718      	adds	r7, #24
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	bd80      	pop	{r7, pc}

0800d3f4 <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE11_Deque_implD1Ev>:
      struct _Deque_impl
 800d3f4:	b580      	push	{r7, lr}
 800d3f6:	b082      	sub	sp, #8
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	6078      	str	r0, [r7, #4]
 800d3fc:	6878      	ldr	r0, [r7, #4]
 800d3fe:	f000 f87d 	bl	800d4fc <_ZNSaISt10shared_ptrIN4tama5StageEEED1Ev>
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	4618      	mov	r0, r3
 800d406:	3708      	adds	r7, #8
 800d408:	46bd      	mov	sp, r7
 800d40a:	bd80      	pop	{r7, pc}

0800d40c <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 800d40c:	b580      	push	{r7, lr}
 800d40e:	b082      	sub	sp, #8
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d010      	beq.n	800d43e <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 800d424:	3304      	adds	r3, #4
 800d426:	461a      	mov	r2, r3
 800d428:	6878      	ldr	r0, [r7, #4]
 800d42a:	f000 f873 	bl	800d514 <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE16_M_destroy_nodesEPPS3_S7_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	6819      	ldr	r1, [r3, #0]
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	685b      	ldr	r3, [r3, #4]
 800d436:	461a      	mov	r2, r3
 800d438:	6878      	ldr	r0, [r7, #4]
 800d43a:	f7f4 f82b 	bl	8001494 <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE17_M_deallocate_mapEPPS3_j>
    }
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	4618      	mov	r0, r3
 800d442:	f7ff ffd7 	bl	800d3f4 <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE11_Deque_implD1Ev>
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	4618      	mov	r0, r3
 800d44a:	3708      	adds	r7, #8
 800d44c:	46bd      	mov	sp, r7
 800d44e:	bd80      	pop	{r7, pc}

0800d450 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800d450:	b580      	push	{r7, lr}
 800d452:	b082      	sub	sp, #8
 800d454:	af00      	add	r7, sp, #0
 800d456:	6078      	str	r0, [r7, #4]
 800d458:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 800d45a:	683b      	ldr	r3, [r7, #0]
 800d45c:	3308      	adds	r3, #8
 800d45e:	4619      	mov	r1, r3
 800d460:	6878      	ldr	r0, [r7, #4]
 800d462:	f7f3 ff12 	bl	800128a <_ZNSt15_Deque_iteratorISt10shared_ptrIN4tama5StageEERS3_PS3_EC1ERKS6_>
 800d466:	6878      	ldr	r0, [r7, #4]
 800d468:	3708      	adds	r7, #8
 800d46a:	46bd      	mov	sp, r7
 800d46c:	bd80      	pop	{r7, pc}

0800d46e <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE15_M_destroy_dataESt15_Deque_iteratorIS3_RS3_PS3_ES9_RKS4_>:
      _M_destroy_data(iterator __first, iterator __last,
 800d46e:	b580      	push	{r7, lr}
 800d470:	b08c      	sub	sp, #48	; 0x30
 800d472:	af00      	add	r7, sp, #0
 800d474:	60f8      	str	r0, [r7, #12]
 800d476:	60b9      	str	r1, [r7, #8]
 800d478:	607a      	str	r2, [r7, #4]
 800d47a:	603b      	str	r3, [r7, #0]
	  _M_destroy_data_aux(__first, __last);
 800d47c:	f107 0310 	add.w	r3, r7, #16
 800d480:	68b9      	ldr	r1, [r7, #8]
 800d482:	4618      	mov	r0, r3
 800d484:	f7f3 ff01 	bl	800128a <_ZNSt15_Deque_iteratorISt10shared_ptrIN4tama5StageEERS3_PS3_EC1ERKS6_>
 800d488:	f107 0320 	add.w	r3, r7, #32
 800d48c:	6879      	ldr	r1, [r7, #4]
 800d48e:	4618      	mov	r0, r3
 800d490:	f7f3 fefb 	bl	800128a <_ZNSt15_Deque_iteratorISt10shared_ptrIN4tama5StageEERS3_PS3_EC1ERKS6_>
 800d494:	f107 0220 	add.w	r2, r7, #32
 800d498:	f107 0310 	add.w	r3, r7, #16
 800d49c:	4619      	mov	r1, r3
 800d49e:	68f8      	ldr	r0, [r7, #12]
 800d4a0:	f000 f852 	bl	800d548 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE19_M_destroy_data_auxESt15_Deque_iteratorIS3_RS3_PS3_ES9_>
      }
 800d4a4:	bf00      	nop
 800d4a6:	3730      	adds	r7, #48	; 0x30
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	bd80      	pop	{r7, pc}

0800d4ac <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama7OnInputEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800d4ac:	b480      	push	{r7}
 800d4ae:	b083      	sub	sp, #12
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	370c      	adds	r7, #12
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c0:	4770      	bx	lr

0800d4c2 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN4tama4ToneEEEPT_PKS5_S8_S6_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800d4c2:	b580      	push	{r7, lr}
 800d4c4:	b086      	sub	sp, #24
 800d4c6:	af00      	add	r7, sp, #0
 800d4c8:	60f8      	str	r0, [r7, #12]
 800d4ca:	60b9      	str	r1, [r7, #8]
 800d4cc:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800d4ce:	68ba      	ldr	r2, [r7, #8]
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	1ad3      	subs	r3, r2, r3
 800d4d4:	10db      	asrs	r3, r3, #3
 800d4d6:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800d4d8:	697b      	ldr	r3, [r7, #20]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d006      	beq.n	800d4ec <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN4tama4ToneEEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800d4de:	697b      	ldr	r3, [r7, #20]
 800d4e0:	00db      	lsls	r3, r3, #3
 800d4e2:	461a      	mov	r2, r3
 800d4e4:	68f9      	ldr	r1, [r7, #12]
 800d4e6:	6878      	ldr	r0, [r7, #4]
 800d4e8:	f008 fde0 	bl	80160ac <memmove>
	  return __result + _Num;
 800d4ec:	697b      	ldr	r3, [r7, #20]
 800d4ee:	00db      	lsls	r3, r3, #3
 800d4f0:	687a      	ldr	r2, [r7, #4]
 800d4f2:	4413      	add	r3, r2
	}
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	3718      	adds	r7, #24
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	bd80      	pop	{r7, pc}

0800d4fc <_ZNSaISt10shared_ptrIN4tama5StageEEED1Ev>:
      ~allocator() throw() { }
 800d4fc:	b580      	push	{r7, lr}
 800d4fe:	b082      	sub	sp, #8
 800d500:	af00      	add	r7, sp, #0
 800d502:	6078      	str	r0, [r7, #4]
 800d504:	6878      	ldr	r0, [r7, #4]
 800d506:	f000 f87a 	bl	800d5fe <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama5StageEEED1Ev>
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	4618      	mov	r0, r3
 800d50e:	3708      	adds	r7, #8
 800d510:	46bd      	mov	sp, r7
 800d512:	bd80      	pop	{r7, pc}

0800d514 <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE16_M_destroy_nodesEPPS3_S7_>:
    _Deque_base<_Tp, _Alloc>::
 800d514:	b580      	push	{r7, lr}
 800d516:	b086      	sub	sp, #24
 800d518:	af00      	add	r7, sp, #0
 800d51a:	60f8      	str	r0, [r7, #12]
 800d51c:	60b9      	str	r1, [r7, #8]
 800d51e:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 800d520:	68bb      	ldr	r3, [r7, #8]
 800d522:	617b      	str	r3, [r7, #20]
 800d524:	697a      	ldr	r2, [r7, #20]
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	429a      	cmp	r2, r3
 800d52a:	d209      	bcs.n	800d540 <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE16_M_destroy_nodesEPPS3_S7_+0x2c>
	_M_deallocate_node(*__n);
 800d52c:	697b      	ldr	r3, [r7, #20]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	4619      	mov	r1, r3
 800d532:	68f8      	ldr	r0, [r7, #12]
 800d534:	f7f4 f82b 	bl	800158e <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE18_M_deallocate_nodeEPS3_>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 800d538:	697b      	ldr	r3, [r7, #20]
 800d53a:	3304      	adds	r3, #4
 800d53c:	617b      	str	r3, [r7, #20]
 800d53e:	e7f1      	b.n	800d524 <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE16_M_destroy_nodesEPPS3_S7_+0x10>
    }
 800d540:	bf00      	nop
 800d542:	3718      	adds	r7, #24
 800d544:	46bd      	mov	sp, r7
 800d546:	bd80      	pop	{r7, pc}

0800d548 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE19_M_destroy_data_auxESt15_Deque_iteratorIS3_RS3_PS3_ES9_>:
     deque<_Tp, _Alloc>::
 800d548:	b5b0      	push	{r4, r5, r7, lr}
 800d54a:	b086      	sub	sp, #24
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	60f8      	str	r0, [r7, #12]
 800d550:	60b9      	str	r1, [r7, #8]
 800d552:	607a      	str	r2, [r7, #4]
       for (_Map_pointer __node = __first._M_node + 1;
 800d554:	68bb      	ldr	r3, [r7, #8]
 800d556:	68db      	ldr	r3, [r3, #12]
 800d558:	3304      	adds	r3, #4
 800d55a:	617b      	str	r3, [r7, #20]
	    __node < __last._M_node; ++__node)
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	68db      	ldr	r3, [r3, #12]
 800d560:	697a      	ldr	r2, [r7, #20]
 800d562:	429a      	cmp	r2, r3
 800d564:	d216      	bcs.n	800d594 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE19_M_destroy_data_auxESt15_Deque_iteratorIS3_RS3_PS3_ES9_+0x4c>
	 std::_Destroy(*__node, *__node + _S_buffer_size(),
 800d566:	697b      	ldr	r3, [r7, #20]
 800d568:	681d      	ldr	r5, [r3, #0]
 800d56a:	697b      	ldr	r3, [r7, #20]
 800d56c:	681c      	ldr	r4, [r3, #0]
 800d56e:	f000 f851 	bl	800d614 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE14_S_buffer_sizeEv>
 800d572:	4603      	mov	r3, r0
 800d574:	00db      	lsls	r3, r3, #3
 800d576:	441c      	add	r4, r3
		       _M_get_Tp_allocator());
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	4618      	mov	r0, r3
 800d57c:	f7f3 fe7a 	bl	8001274 <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE19_M_get_Tp_allocatorEv>
 800d580:	4603      	mov	r3, r0
	 std::_Destroy(*__node, *__node + _S_buffer_size(),
 800d582:	461a      	mov	r2, r3
 800d584:	4621      	mov	r1, r4
 800d586:	4628      	mov	r0, r5
 800d588:	f000 f84c 	bl	800d624 <_ZSt8_DestroyIPSt10shared_ptrIN4tama5StageEES3_EvT_S5_RSaIT0_E>
       for (_Map_pointer __node = __first._M_node + 1;
 800d58c:	697b      	ldr	r3, [r7, #20]
 800d58e:	3304      	adds	r3, #4
 800d590:	617b      	str	r3, [r7, #20]
 800d592:	e7e3      	b.n	800d55c <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE19_M_destroy_data_auxESt15_Deque_iteratorIS3_RS3_PS3_ES9_+0x14>
       if (__first._M_node != __last._M_node)
 800d594:	68bb      	ldr	r3, [r7, #8]
 800d596:	68da      	ldr	r2, [r3, #12]
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	68db      	ldr	r3, [r3, #12]
 800d59c:	429a      	cmp	r2, r3
 800d59e:	d01c      	beq.n	800d5da <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE19_M_destroy_data_auxESt15_Deque_iteratorIS3_RS3_PS3_ES9_+0x92>
	   std::_Destroy(__first._M_cur, __first._M_last,
 800d5a0:	68bb      	ldr	r3, [r7, #8]
 800d5a2:	681c      	ldr	r4, [r3, #0]
 800d5a4:	68bb      	ldr	r3, [r7, #8]
 800d5a6:	689d      	ldr	r5, [r3, #8]
			 _M_get_Tp_allocator());
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	f7f3 fe62 	bl	8001274 <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE19_M_get_Tp_allocatorEv>
 800d5b0:	4603      	mov	r3, r0
	   std::_Destroy(__first._M_cur, __first._M_last,
 800d5b2:	461a      	mov	r2, r3
 800d5b4:	4629      	mov	r1, r5
 800d5b6:	4620      	mov	r0, r4
 800d5b8:	f000 f834 	bl	800d624 <_ZSt8_DestroyIPSt10shared_ptrIN4tama5StageEES3_EvT_S5_RSaIT0_E>
	   std::_Destroy(__last._M_first, __last._M_cur,
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	685c      	ldr	r4, [r3, #4]
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	681d      	ldr	r5, [r3, #0]
			 _M_get_Tp_allocator());
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	f7f3 fe54 	bl	8001274 <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE19_M_get_Tp_allocatorEv>
 800d5cc:	4603      	mov	r3, r0
	   std::_Destroy(__last._M_first, __last._M_cur,
 800d5ce:	461a      	mov	r2, r3
 800d5d0:	4629      	mov	r1, r5
 800d5d2:	4620      	mov	r0, r4
 800d5d4:	f000 f826 	bl	800d624 <_ZSt8_DestroyIPSt10shared_ptrIN4tama5StageEES3_EvT_S5_RSaIT0_E>
     }
 800d5d8:	e00d      	b.n	800d5f6 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE19_M_destroy_data_auxESt15_Deque_iteratorIS3_RS3_PS3_ES9_+0xae>
	 std::_Destroy(__first._M_cur, __last._M_cur,
 800d5da:	68bb      	ldr	r3, [r7, #8]
 800d5dc:	681c      	ldr	r4, [r3, #0]
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	681d      	ldr	r5, [r3, #0]
		       _M_get_Tp_allocator());
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	f7f3 fe45 	bl	8001274 <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE19_M_get_Tp_allocatorEv>
 800d5ea:	4603      	mov	r3, r0
	 std::_Destroy(__first._M_cur, __last._M_cur,
 800d5ec:	461a      	mov	r2, r3
 800d5ee:	4629      	mov	r1, r5
 800d5f0:	4620      	mov	r0, r4
 800d5f2:	f000 f817 	bl	800d624 <_ZSt8_DestroyIPSt10shared_ptrIN4tama5StageEES3_EvT_S5_RSaIT0_E>
     }
 800d5f6:	bf00      	nop
 800d5f8:	3718      	adds	r7, #24
 800d5fa:	46bd      	mov	sp, r7
 800d5fc:	bdb0      	pop	{r4, r5, r7, pc}

0800d5fe <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama5StageEEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800d5fe:	b480      	push	{r7}
 800d600:	b083      	sub	sp, #12
 800d602:	af00      	add	r7, sp, #0
 800d604:	6078      	str	r0, [r7, #4]
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	4618      	mov	r0, r3
 800d60a:	370c      	adds	r7, #12
 800d60c:	46bd      	mov	sp, r7
 800d60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d612:	4770      	bx	lr

0800d614 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 800d614:	b580      	push	{r7, lr}
 800d616:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 800d618:	2008      	movs	r0, #8
 800d61a:	f7f3 fc49 	bl	8000eb0 <_ZSt16__deque_buf_sizej>
 800d61e:	4603      	mov	r3, r0
 800d620:	4618      	mov	r0, r3
 800d622:	bd80      	pop	{r7, pc}

0800d624 <_ZSt8_DestroyIPSt10shared_ptrIN4tama5StageEES3_EvT_S5_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800d624:	b580      	push	{r7, lr}
 800d626:	b084      	sub	sp, #16
 800d628:	af00      	add	r7, sp, #0
 800d62a:	60f8      	str	r0, [r7, #12]
 800d62c:	60b9      	str	r1, [r7, #8]
 800d62e:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800d630:	68b9      	ldr	r1, [r7, #8]
 800d632:	68f8      	ldr	r0, [r7, #12]
 800d634:	f000 f804 	bl	800d640 <_ZSt8_DestroyIPSt10shared_ptrIN4tama5StageEEEvT_S5_>
    }
 800d638:	bf00      	nop
 800d63a:	3710      	adds	r7, #16
 800d63c:	46bd      	mov	sp, r7
 800d63e:	bd80      	pop	{r7, pc}

0800d640 <_ZSt8_DestroyIPSt10shared_ptrIN4tama5StageEEEvT_S5_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800d640:	b580      	push	{r7, lr}
 800d642:	b082      	sub	sp, #8
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
 800d648:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 800d64a:	6839      	ldr	r1, [r7, #0]
 800d64c:	6878      	ldr	r0, [r7, #4]
 800d64e:	f000 f80f 	bl	800d670 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrIN4tama5StageEEEEvT_S7_>
    }
 800d652:	bf00      	nop
 800d654:	3708      	adds	r7, #8
 800d656:	46bd      	mov	sp, r7
 800d658:	bd80      	pop	{r7, pc}

0800d65a <_ZSt11__addressofISt10shared_ptrIN4tama5StageEEEPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800d65a:	b480      	push	{r7}
 800d65c:	b083      	sub	sp, #12
 800d65e:	af00      	add	r7, sp, #0
 800d660:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	4618      	mov	r0, r3
 800d666:	370c      	adds	r7, #12
 800d668:	46bd      	mov	sp, r7
 800d66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d66e:	4770      	bx	lr

0800d670 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrIN4tama5StageEEEEvT_S7_>:
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 800d670:	b580      	push	{r7, lr}
 800d672:	b082      	sub	sp, #8
 800d674:	af00      	add	r7, sp, #0
 800d676:	6078      	str	r0, [r7, #4]
 800d678:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800d67a:	687a      	ldr	r2, [r7, #4]
 800d67c:	683b      	ldr	r3, [r7, #0]
 800d67e:	429a      	cmp	r2, r3
 800d680:	d00a      	beq.n	800d698 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrIN4tama5StageEEEEvT_S7_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 800d682:	6878      	ldr	r0, [r7, #4]
 800d684:	f7ff ffe9 	bl	800d65a <_ZSt11__addressofISt10shared_ptrIN4tama5StageEEEPT_RS4_>
 800d688:	4603      	mov	r3, r0
 800d68a:	4618      	mov	r0, r3
 800d68c:	f000 f808 	bl	800d6a0 <_ZSt8_DestroyISt10shared_ptrIN4tama5StageEEEvPT_>
	  for (; __first != __last; ++__first)
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	3308      	adds	r3, #8
 800d694:	607b      	str	r3, [r7, #4]
 800d696:	e7f0      	b.n	800d67a <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrIN4tama5StageEEEEvT_S7_+0xa>
	}
 800d698:	bf00      	nop
 800d69a:	3708      	adds	r7, #8
 800d69c:	46bd      	mov	sp, r7
 800d69e:	bd80      	pop	{r7, pc}

0800d6a0 <_ZSt8_DestroyISt10shared_ptrIN4tama5StageEEEvPT_>:
    _Destroy(_Tp* __pointer)
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	b082      	sub	sp, #8
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 800d6a8:	6878      	ldr	r0, [r7, #4]
 800d6aa:	f7f3 fc76 	bl	8000f9a <_ZNSt10shared_ptrIN4tama5StageEED1Ev>
 800d6ae:	bf00      	nop
 800d6b0:	3708      	adds	r7, #8
 800d6b2:	46bd      	mov	sp, r7
 800d6b4:	bd80      	pop	{r7, pc}
	...

0800d6b8 <_ZNSt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b082      	sub	sp, #8
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	6078      	str	r0, [r7, #4]
 800d6c0:	4a08      	ldr	r2, [pc, #32]	; (800d6e4 <_ZNSt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev+0x2c>)
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	601a      	str	r2, [r3, #0]
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	330c      	adds	r3, #12
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	f7fe fad5 	bl	800bc7a <_ZNSt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	f7f4 fbe2 	bl	8001e9c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	4618      	mov	r0, r3
 800d6dc:	3708      	adds	r7, #8
 800d6de:	46bd      	mov	sp, r7
 800d6e0:	bd80      	pop	{r7, pc}
 800d6e2:	bf00      	nop
 800d6e4:	080170e4 	.word	0x080170e4

0800d6e8 <_ZNSt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b082      	sub	sp, #8
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	6078      	str	r0, [r7, #4]
 800d6f0:	6878      	ldr	r0, [r7, #4]
 800d6f2:	f7ff ffe1 	bl	800d6b8 <_ZNSt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
 800d6f6:	2114      	movs	r1, #20
 800d6f8:	6878      	ldr	r0, [r7, #4]
 800d6fa:	f008 fc62 	bl	8015fc2 <_ZdlPvj>
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	4618      	mov	r0, r3
 800d702:	3708      	adds	r7, #8
 800d704:	46bd      	mov	sp, r7
 800d706:	bd80      	pop	{r7, pc}

0800d708 <_ZNSt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      _M_dispose() noexcept
 800d708:	b580      	push	{r7, lr}
 800d70a:	b082      	sub	sp, #8
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	330c      	adds	r3, #12
 800d714:	4618      	mov	r0, r3
 800d716:	f000 fb5e 	bl	800ddd6 <_ZNSt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>
 800d71a:	4602      	mov	r2, r0
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	691b      	ldr	r3, [r3, #16]
 800d720:	4619      	mov	r1, r3
 800d722:	4610      	mov	r0, r2
 800d724:	f7fe faf9 	bl	800bd1a <_ZNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>
 800d728:	bf00      	nop
 800d72a:	3708      	adds	r7, #8
 800d72c:	46bd      	mov	sp, r7
 800d72e:	bd80      	pop	{r7, pc}

0800d730 <_ZNSt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      _M_destroy() noexcept
 800d730:	b580      	push	{r7, lr}
 800d732:	b086      	sub	sp, #24
 800d734:	af00      	add	r7, sp, #0
 800d736:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	330c      	adds	r3, #12
 800d73c:	4618      	mov	r0, r3
 800d73e:	f000 fb57 	bl	800ddf0 <_ZNSt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>
 800d742:	4602      	mov	r2, r0
 800d744:	f107 0314 	add.w	r3, r7, #20
 800d748:	4611      	mov	r1, r2
 800d74a:	4618      	mov	r0, r3
 800d74c:	f7fe fa2d 	bl	800bbaa <_ZNSaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 800d750:	f107 0114 	add.w	r1, r7, #20
 800d754:	f107 030c 	add.w	r3, r7, #12
 800d758:	687a      	ldr	r2, [r7, #4]
 800d75a:	4618      	mov	r0, r3
 800d75c:	f7ff f894 	bl	800c888 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
	this->~_Sp_counted_deleter();
 800d760:	6878      	ldr	r0, [r7, #4]
 800d762:	f7ff ffa9 	bl	800d6b8 <_ZNSt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 800d766:	f107 030c 	add.w	r3, r7, #12
 800d76a:	4618      	mov	r0, r3
 800d76c:	f7fe fa49 	bl	800bc02 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	__allocator_type __a(_M_impl._M_alloc());
 800d770:	f107 0314 	add.w	r3, r7, #20
 800d774:	4618      	mov	r0, r3
 800d776:	f7fe fa25 	bl	800bbc4 <_ZNSaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
      }
 800d77a:	bf00      	nop
 800d77c:	3718      	adds	r7, #24
 800d77e:	46bd      	mov	sp, r7
 800d780:	bd80      	pop	{r7, pc}

0800d782 <_ZNSt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept
 800d782:	b480      	push	{r7}
 800d784:	b083      	sub	sp, #12
 800d786:	af00      	add	r7, sp, #0
 800d788:	6078      	str	r0, [r7, #4]
 800d78a:	6039      	str	r1, [r7, #0]
        return nullptr;
 800d78c:	2300      	movs	r3, #0
      }
 800d78e:	4618      	mov	r0, r3
 800d790:	370c      	adds	r7, #12
 800d792:	46bd      	mov	sp, r7
 800d794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d798:	4770      	bx	lr
	...

0800d79c <_ZNSt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b082      	sub	sp, #8
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
 800d7a4:	4a08      	ldr	r2, [pc, #32]	; (800d7c8 <_ZNSt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev+0x2c>)
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	601a      	str	r2, [r3, #0]
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	330c      	adds	r3, #12
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	f7fe f8be 	bl	800b930 <_ZNSt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	f7f4 fb70 	bl	8001e9c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	4618      	mov	r0, r3
 800d7c0:	3708      	adds	r7, #8
 800d7c2:	46bd      	mov	sp, r7
 800d7c4:	bd80      	pop	{r7, pc}
 800d7c6:	bf00      	nop
 800d7c8:	08017100 	.word	0x08017100

0800d7cc <_ZNSt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
 800d7cc:	b580      	push	{r7, lr}
 800d7ce:	b082      	sub	sp, #8
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	6078      	str	r0, [r7, #4]
 800d7d4:	6878      	ldr	r0, [r7, #4]
 800d7d6:	f7ff ffe1 	bl	800d79c <_ZNSt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
 800d7da:	2114      	movs	r1, #20
 800d7dc:	6878      	ldr	r0, [r7, #4]
 800d7de:	f008 fbf0 	bl	8015fc2 <_ZdlPvj>
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	3708      	adds	r7, #8
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	bd80      	pop	{r7, pc}

0800d7ec <_ZNSt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      _M_dispose() noexcept
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b082      	sub	sp, #8
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	330c      	adds	r3, #12
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	f000 fb07 	bl	800de0c <_ZNSt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>
 800d7fe:	4602      	mov	r2, r0
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	691b      	ldr	r3, [r3, #16]
 800d804:	4619      	mov	r1, r3
 800d806:	4610      	mov	r0, r2
 800d808:	f7fe f8e1 	bl	800b9ce <_ZNSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>
 800d80c:	bf00      	nop
 800d80e:	3708      	adds	r7, #8
 800d810:	46bd      	mov	sp, r7
 800d812:	bd80      	pop	{r7, pc}

0800d814 <_ZNSt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      _M_destroy() noexcept
 800d814:	b580      	push	{r7, lr}
 800d816:	b086      	sub	sp, #24
 800d818:	af00      	add	r7, sp, #0
 800d81a:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	330c      	adds	r3, #12
 800d820:	4618      	mov	r0, r3
 800d822:	f000 fb00 	bl	800de26 <_ZNSt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>
 800d826:	4602      	mov	r2, r0
 800d828:	f107 0314 	add.w	r3, r7, #20
 800d82c:	4611      	mov	r1, r2
 800d82e:	4618      	mov	r0, r3
 800d830:	f7fe f816 	bl	800b860 <_ZNSaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 800d834:	f107 0114 	add.w	r1, r7, #20
 800d838:	f107 030c 	add.w	r3, r7, #12
 800d83c:	687a      	ldr	r2, [r7, #4]
 800d83e:	4618      	mov	r0, r3
 800d840:	f7fe ff4f 	bl	800c6e2 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
	this->~_Sp_counted_deleter();
 800d844:	6878      	ldr	r0, [r7, #4]
 800d846:	f7ff ffa9 	bl	800d79c <_ZNSt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 800d84a:	f107 030c 	add.w	r3, r7, #12
 800d84e:	4618      	mov	r0, r3
 800d850:	f7fe f832 	bl	800b8b8 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	__allocator_type __a(_M_impl._M_alloc());
 800d854:	f107 0314 	add.w	r3, r7, #20
 800d858:	4618      	mov	r0, r3
 800d85a:	f7fe f80e 	bl	800b87a <_ZNSaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
      }
 800d85e:	bf00      	nop
 800d860:	3718      	adds	r7, #24
 800d862:	46bd      	mov	sp, r7
 800d864:	bd80      	pop	{r7, pc}

0800d866 <_ZNSt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept
 800d866:	b480      	push	{r7}
 800d868:	b083      	sub	sp, #12
 800d86a:	af00      	add	r7, sp, #0
 800d86c:	6078      	str	r0, [r7, #4]
 800d86e:	6039      	str	r1, [r7, #0]
        return nullptr;
 800d870:	2300      	movs	r3, #0
      }
 800d872:	4618      	mov	r0, r3
 800d874:	370c      	adds	r7, #12
 800d876:	46bd      	mov	sp, r7
 800d878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d87c:	4770      	bx	lr
	...

0800d880 <_ZNSt19_Sp_counted_deleterIPN4tama11SoundPlayerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 800d880:	b580      	push	{r7, lr}
 800d882:	b082      	sub	sp, #8
 800d884:	af00      	add	r7, sp, #0
 800d886:	6078      	str	r0, [r7, #4]
 800d888:	4a08      	ldr	r2, [pc, #32]	; (800d8ac <_ZNSt19_Sp_counted_deleterIPN4tama11SoundPlayerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev+0x2c>)
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	601a      	str	r2, [r3, #0]
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	330c      	adds	r3, #12
 800d892:	4618      	mov	r0, r3
 800d894:	f7fd fed7 	bl	800b646 <_ZNSt19_Sp_counted_deleterIPN4tama11SoundPlayerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	4618      	mov	r0, r3
 800d89c:	f7f4 fafe 	bl	8001e9c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	3708      	adds	r7, #8
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	bd80      	pop	{r7, pc}
 800d8aa:	bf00      	nop
 800d8ac:	0801711c 	.word	0x0801711c

0800d8b0 <_ZNSt19_Sp_counted_deleterIPN4tama11SoundPlayerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b082      	sub	sp, #8
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
 800d8b8:	6878      	ldr	r0, [r7, #4]
 800d8ba:	f7ff ffe1 	bl	800d880 <_ZNSt19_Sp_counted_deleterIPN4tama11SoundPlayerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
 800d8be:	2114      	movs	r1, #20
 800d8c0:	6878      	ldr	r0, [r7, #4]
 800d8c2:	f008 fb7e 	bl	8015fc2 <_ZdlPvj>
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	3708      	adds	r7, #8
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	bd80      	pop	{r7, pc}

0800d8d0 <_ZNSt19_Sp_counted_deleterIPN4tama11SoundPlayerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      _M_dispose() noexcept
 800d8d0:	b580      	push	{r7, lr}
 800d8d2:	b082      	sub	sp, #8
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	330c      	adds	r3, #12
 800d8dc:	4618      	mov	r0, r3
 800d8de:	f000 fab0 	bl	800de42 <_ZNSt19_Sp_counted_deleterIPN4tama11SoundPlayerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>
 800d8e2:	4602      	mov	r2, r0
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	691b      	ldr	r3, [r3, #16]
 800d8e8:	4619      	mov	r1, r3
 800d8ea:	4610      	mov	r0, r2
 800d8ec:	f7fd fefb 	bl	800b6e6 <_ZNSt12__shared_ptrIN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>
 800d8f0:	bf00      	nop
 800d8f2:	3708      	adds	r7, #8
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	bd80      	pop	{r7, pc}

0800d8f8 <_ZNSt19_Sp_counted_deleterIPN4tama11SoundPlayerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      _M_destroy() noexcept
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	b086      	sub	sp, #24
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	330c      	adds	r3, #12
 800d904:	4618      	mov	r0, r3
 800d906:	f000 faa9 	bl	800de5c <_ZNSt19_Sp_counted_deleterIPN4tama11SoundPlayerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>
 800d90a:	4602      	mov	r2, r0
 800d90c:	f107 0314 	add.w	r3, r7, #20
 800d910:	4611      	mov	r1, r2
 800d912:	4618      	mov	r0, r3
 800d914:	f7fd fe2f 	bl	800b576 <_ZNSaISt19_Sp_counted_deleterIPN4tama11SoundPlayerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 800d918:	f107 0114 	add.w	r1, r7, #20
 800d91c:	f107 030c 	add.w	r3, r7, #12
 800d920:	687a      	ldr	r2, [r7, #4]
 800d922:	4618      	mov	r0, r3
 800d924:	f7fe fe01 	bl	800c52a <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama11SoundPlayerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
	this->~_Sp_counted_deleter();
 800d928:	6878      	ldr	r0, [r7, #4]
 800d92a:	f7ff ffa9 	bl	800d880 <_ZNSt19_Sp_counted_deleterIPN4tama11SoundPlayerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 800d92e:	f107 030c 	add.w	r3, r7, #12
 800d932:	4618      	mov	r0, r3
 800d934:	f7fd fe4b 	bl	800b5ce <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama11SoundPlayerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	__allocator_type __a(_M_impl._M_alloc());
 800d938:	f107 0314 	add.w	r3, r7, #20
 800d93c:	4618      	mov	r0, r3
 800d93e:	f7fd fe27 	bl	800b590 <_ZNSaISt19_Sp_counted_deleterIPN4tama11SoundPlayerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
      }
 800d942:	bf00      	nop
 800d944:	3718      	adds	r7, #24
 800d946:	46bd      	mov	sp, r7
 800d948:	bd80      	pop	{r7, pc}

0800d94a <_ZNSt19_Sp_counted_deleterIPN4tama11SoundPlayerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept
 800d94a:	b480      	push	{r7}
 800d94c:	b083      	sub	sp, #12
 800d94e:	af00      	add	r7, sp, #0
 800d950:	6078      	str	r0, [r7, #4]
 800d952:	6039      	str	r1, [r7, #0]
        return nullptr;
 800d954:	2300      	movs	r3, #0
      }
 800d956:	4618      	mov	r0, r3
 800d958:	370c      	adds	r7, #12
 800d95a:	46bd      	mov	sp, r7
 800d95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d960:	4770      	bx	lr
	...

0800d964 <_ZNSt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 800d964:	b580      	push	{r7, lr}
 800d966:	b082      	sub	sp, #8
 800d968:	af00      	add	r7, sp, #0
 800d96a:	6078      	str	r0, [r7, #4]
 800d96c:	4a08      	ldr	r2, [pc, #32]	; (800d990 <_ZNSt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev+0x2c>)
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	601a      	str	r2, [r3, #0]
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	330c      	adds	r3, #12
 800d976:	4618      	mov	r0, r3
 800d978:	f7fd fcf8 	bl	800b36c <_ZNSt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	4618      	mov	r0, r3
 800d980:	f7f4 fa8c 	bl	8001e9c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	4618      	mov	r0, r3
 800d988:	3708      	adds	r7, #8
 800d98a:	46bd      	mov	sp, r7
 800d98c:	bd80      	pop	{r7, pc}
 800d98e:	bf00      	nop
 800d990:	08017138 	.word	0x08017138

0800d994 <_ZNSt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
 800d994:	b580      	push	{r7, lr}
 800d996:	b082      	sub	sp, #8
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
 800d99c:	6878      	ldr	r0, [r7, #4]
 800d99e:	f7ff ffe1 	bl	800d964 <_ZNSt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
 800d9a2:	2114      	movs	r1, #20
 800d9a4:	6878      	ldr	r0, [r7, #4]
 800d9a6:	f008 fb0c 	bl	8015fc2 <_ZdlPvj>
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	3708      	adds	r7, #8
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	bd80      	pop	{r7, pc}

0800d9b4 <_ZNSt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      _M_dispose() noexcept
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	b082      	sub	sp, #8
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	330c      	adds	r3, #12
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	f000 fa59 	bl	800de78 <_ZNSt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>
 800d9c6:	4602      	mov	r2, r0
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	691b      	ldr	r3, [r3, #16]
 800d9cc:	4619      	mov	r1, r3
 800d9ce:	4610      	mov	r0, r2
 800d9d0:	f7fd fd1b 	bl	800b40a <_ZNSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>
 800d9d4:	bf00      	nop
 800d9d6:	3708      	adds	r7, #8
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	bd80      	pop	{r7, pc}

0800d9dc <_ZNSt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      _M_destroy() noexcept
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b086      	sub	sp, #24
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	330c      	adds	r3, #12
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	f000 fa52 	bl	800de92 <_ZNSt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>
 800d9ee:	4602      	mov	r2, r0
 800d9f0:	f107 0314 	add.w	r3, r7, #20
 800d9f4:	4611      	mov	r1, r2
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	f7fd fc50 	bl	800b29c <_ZNSaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 800d9fc:	f107 0114 	add.w	r1, r7, #20
 800da00:	f107 030c 	add.w	r3, r7, #12
 800da04:	687a      	ldr	r2, [r7, #4]
 800da06:	4618      	mov	r0, r3
 800da08:	f7fe fcd8 	bl	800c3bc <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
	this->~_Sp_counted_deleter();
 800da0c:	6878      	ldr	r0, [r7, #4]
 800da0e:	f7ff ffa9 	bl	800d964 <_ZNSt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 800da12:	f107 030c 	add.w	r3, r7, #12
 800da16:	4618      	mov	r0, r3
 800da18:	f7fd fc6c 	bl	800b2f4 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	__allocator_type __a(_M_impl._M_alloc());
 800da1c:	f107 0314 	add.w	r3, r7, #20
 800da20:	4618      	mov	r0, r3
 800da22:	f7fd fc48 	bl	800b2b6 <_ZNSaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
      }
 800da26:	bf00      	nop
 800da28:	3718      	adds	r7, #24
 800da2a:	46bd      	mov	sp, r7
 800da2c:	bd80      	pop	{r7, pc}

0800da2e <_ZNSt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept
 800da2e:	b480      	push	{r7}
 800da30:	b083      	sub	sp, #12
 800da32:	af00      	add	r7, sp, #0
 800da34:	6078      	str	r0, [r7, #4]
 800da36:	6039      	str	r1, [r7, #0]
        return nullptr;
 800da38:	2300      	movs	r3, #0
      }
 800da3a:	4618      	mov	r0, r3
 800da3c:	370c      	adds	r7, #12
 800da3e:	46bd      	mov	sp, r7
 800da40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da44:	4770      	bx	lr
	...

0800da48 <_ZNSt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 800da48:	b580      	push	{r7, lr}
 800da4a:	b082      	sub	sp, #8
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
 800da50:	4a08      	ldr	r2, [pc, #32]	; (800da74 <_ZNSt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev+0x2c>)
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	601a      	str	r2, [r3, #0]
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	330c      	adds	r3, #12
 800da5a:	4618      	mov	r0, r3
 800da5c:	f7fd fb2e 	bl	800b0bc <_ZNSt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	4618      	mov	r0, r3
 800da64:	f7f4 fa1a 	bl	8001e9c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	4618      	mov	r0, r3
 800da6c:	3708      	adds	r7, #8
 800da6e:	46bd      	mov	sp, r7
 800da70:	bd80      	pop	{r7, pc}
 800da72:	bf00      	nop
 800da74:	08017154 	.word	0x08017154

0800da78 <_ZNSt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
 800da78:	b580      	push	{r7, lr}
 800da7a:	b082      	sub	sp, #8
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
 800da80:	6878      	ldr	r0, [r7, #4]
 800da82:	f7ff ffe1 	bl	800da48 <_ZNSt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
 800da86:	2114      	movs	r1, #20
 800da88:	6878      	ldr	r0, [r7, #4]
 800da8a:	f008 fa9a 	bl	8015fc2 <_ZdlPvj>
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	4618      	mov	r0, r3
 800da92:	3708      	adds	r7, #8
 800da94:	46bd      	mov	sp, r7
 800da96:	bd80      	pop	{r7, pc}

0800da98 <_ZNSt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      _M_dispose() noexcept
 800da98:	b580      	push	{r7, lr}
 800da9a:	b082      	sub	sp, #8
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	330c      	adds	r3, #12
 800daa4:	4618      	mov	r0, r3
 800daa6:	f000 fa02 	bl	800deae <_ZNSt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>
 800daaa:	4602      	mov	r2, r0
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	691b      	ldr	r3, [r3, #16]
 800dab0:	4619      	mov	r1, r3
 800dab2:	4610      	mov	r0, r2
 800dab4:	f7fd fb51 	bl	800b15a <_ZNSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>
 800dab8:	bf00      	nop
 800daba:	3708      	adds	r7, #8
 800dabc:	46bd      	mov	sp, r7
 800dabe:	bd80      	pop	{r7, pc}

0800dac0 <_ZNSt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      _M_destroy() noexcept
 800dac0:	b580      	push	{r7, lr}
 800dac2:	b086      	sub	sp, #24
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	330c      	adds	r3, #12
 800dacc:	4618      	mov	r0, r3
 800dace:	f000 f9fb 	bl	800dec8 <_ZNSt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>
 800dad2:	4602      	mov	r2, r0
 800dad4:	f107 0314 	add.w	r3, r7, #20
 800dad8:	4611      	mov	r1, r2
 800dada:	4618      	mov	r0, r3
 800dadc:	f7fd fa86 	bl	800afec <_ZNSaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 800dae0:	f107 0114 	add.w	r1, r7, #20
 800dae4:	f107 030c 	add.w	r3, r7, #12
 800dae8:	687a      	ldr	r2, [r7, #4]
 800daea:	4618      	mov	r0, r3
 800daec:	f7fe fbb2 	bl	800c254 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
	this->~_Sp_counted_deleter();
 800daf0:	6878      	ldr	r0, [r7, #4]
 800daf2:	f7ff ffa9 	bl	800da48 <_ZNSt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 800daf6:	f107 030c 	add.w	r3, r7, #12
 800dafa:	4618      	mov	r0, r3
 800dafc:	f7fd faa2 	bl	800b044 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	__allocator_type __a(_M_impl._M_alloc());
 800db00:	f107 0314 	add.w	r3, r7, #20
 800db04:	4618      	mov	r0, r3
 800db06:	f7fd fa7e 	bl	800b006 <_ZNSaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
      }
 800db0a:	bf00      	nop
 800db0c:	3718      	adds	r7, #24
 800db0e:	46bd      	mov	sp, r7
 800db10:	bd80      	pop	{r7, pc}

0800db12 <_ZNSt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept
 800db12:	b480      	push	{r7}
 800db14:	b083      	sub	sp, #12
 800db16:	af00      	add	r7, sp, #0
 800db18:	6078      	str	r0, [r7, #4]
 800db1a:	6039      	str	r1, [r7, #0]
        return nullptr;
 800db1c:	2300      	movs	r3, #0
      }
 800db1e:	4618      	mov	r0, r3
 800db20:	370c      	adds	r7, #12
 800db22:	46bd      	mov	sp, r7
 800db24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db28:	4770      	bx	lr
	...

0800db2c <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 800db2c:	b580      	push	{r7, lr}
 800db2e:	b082      	sub	sp, #8
 800db30:	af00      	add	r7, sp, #0
 800db32:	6078      	str	r0, [r7, #4]
 800db34:	4a08      	ldr	r2, [pc, #32]	; (800db58 <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev+0x2c>)
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	601a      	str	r2, [r3, #0]
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	330c      	adds	r3, #12
 800db3e:	4618      	mov	r0, r3
 800db40:	f7fd f962 	bl	800ae08 <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	4618      	mov	r0, r3
 800db48:	f7f4 f9a8 	bl	8001e9c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	4618      	mov	r0, r3
 800db50:	3708      	adds	r7, #8
 800db52:	46bd      	mov	sp, r7
 800db54:	bd80      	pop	{r7, pc}
 800db56:	bf00      	nop
 800db58:	08017170 	.word	0x08017170

0800db5c <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
 800db5c:	b580      	push	{r7, lr}
 800db5e:	b082      	sub	sp, #8
 800db60:	af00      	add	r7, sp, #0
 800db62:	6078      	str	r0, [r7, #4]
 800db64:	6878      	ldr	r0, [r7, #4]
 800db66:	f7ff ffe1 	bl	800db2c <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
 800db6a:	2114      	movs	r1, #20
 800db6c:	6878      	ldr	r0, [r7, #4]
 800db6e:	f008 fa28 	bl	8015fc2 <_ZdlPvj>
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	4618      	mov	r0, r3
 800db76:	3708      	adds	r7, #8
 800db78:	46bd      	mov	sp, r7
 800db7a:	bd80      	pop	{r7, pc}

0800db7c <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      _M_dispose() noexcept
 800db7c:	b580      	push	{r7, lr}
 800db7e:	b082      	sub	sp, #8
 800db80:	af00      	add	r7, sp, #0
 800db82:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	330c      	adds	r3, #12
 800db88:	4618      	mov	r0, r3
 800db8a:	f000 f9ab 	bl	800dee4 <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>
 800db8e:	4602      	mov	r2, r0
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	691b      	ldr	r3, [r3, #16]
 800db94:	4619      	mov	r1, r3
 800db96:	4610      	mov	r0, r2
 800db98:	f7fd f985 	bl	800aea6 <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>
 800db9c:	bf00      	nop
 800db9e:	3708      	adds	r7, #8
 800dba0:	46bd      	mov	sp, r7
 800dba2:	bd80      	pop	{r7, pc}

0800dba4 <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      _M_destroy() noexcept
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b086      	sub	sp, #24
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	330c      	adds	r3, #12
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	f000 f9a4 	bl	800defe <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>
 800dbb6:	4602      	mov	r2, r0
 800dbb8:	f107 0314 	add.w	r3, r7, #20
 800dbbc:	4611      	mov	r1, r2
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	f7fd f8ba 	bl	800ad38 <_ZNSaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 800dbc4:	f107 0114 	add.w	r1, r7, #20
 800dbc8:	f107 030c 	add.w	r3, r7, #12
 800dbcc:	687a      	ldr	r2, [r7, #4]
 800dbce:	4618      	mov	r0, r3
 800dbd0:	f7fe fa8c 	bl	800c0ec <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
	this->~_Sp_counted_deleter();
 800dbd4:	6878      	ldr	r0, [r7, #4]
 800dbd6:	f7ff ffa9 	bl	800db2c <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 800dbda:	f107 030c 	add.w	r3, r7, #12
 800dbde:	4618      	mov	r0, r3
 800dbe0:	f7fd f8d6 	bl	800ad90 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	__allocator_type __a(_M_impl._M_alloc());
 800dbe4:	f107 0314 	add.w	r3, r7, #20
 800dbe8:	4618      	mov	r0, r3
 800dbea:	f7fd f8b2 	bl	800ad52 <_ZNSaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
      }
 800dbee:	bf00      	nop
 800dbf0:	3718      	adds	r7, #24
 800dbf2:	46bd      	mov	sp, r7
 800dbf4:	bd80      	pop	{r7, pc}

0800dbf6 <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept
 800dbf6:	b480      	push	{r7}
 800dbf8:	b083      	sub	sp, #12
 800dbfa:	af00      	add	r7, sp, #0
 800dbfc:	6078      	str	r0, [r7, #4]
 800dbfe:	6039      	str	r1, [r7, #0]
        return nullptr;
 800dc00:	2300      	movs	r3, #0
      }
 800dc02:	4618      	mov	r0, r3
 800dc04:	370c      	adds	r7, #12
 800dc06:	46bd      	mov	sp, r7
 800dc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc0c:	4770      	bx	lr
	...

0800dc10 <_ZNSt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b082      	sub	sp, #8
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	6078      	str	r0, [r7, #4]
 800dc18:	4a08      	ldr	r2, [pc, #32]	; (800dc3c <_ZNSt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev+0x2c>)
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	601a      	str	r2, [r3, #0]
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	330c      	adds	r3, #12
 800dc22:	4618      	mov	r0, r3
 800dc24:	f7fc ff7a 	bl	800ab1c <_ZNSt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	f7f4 f936 	bl	8001e9c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	4618      	mov	r0, r3
 800dc34:	3708      	adds	r7, #8
 800dc36:	46bd      	mov	sp, r7
 800dc38:	bd80      	pop	{r7, pc}
 800dc3a:	bf00      	nop
 800dc3c:	0801718c 	.word	0x0801718c

0800dc40 <_ZNSt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
 800dc40:	b580      	push	{r7, lr}
 800dc42:	b082      	sub	sp, #8
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	6078      	str	r0, [r7, #4]
 800dc48:	6878      	ldr	r0, [r7, #4]
 800dc4a:	f7ff ffe1 	bl	800dc10 <_ZNSt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
 800dc4e:	2114      	movs	r1, #20
 800dc50:	6878      	ldr	r0, [r7, #4]
 800dc52:	f008 f9b6 	bl	8015fc2 <_ZdlPvj>
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	4618      	mov	r0, r3
 800dc5a:	3708      	adds	r7, #8
 800dc5c:	46bd      	mov	sp, r7
 800dc5e:	bd80      	pop	{r7, pc}

0800dc60 <_ZNSt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      _M_dispose() noexcept
 800dc60:	b580      	push	{r7, lr}
 800dc62:	b082      	sub	sp, #8
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	330c      	adds	r3, #12
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	f000 f954 	bl	800df1a <_ZNSt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>
 800dc72:	4602      	mov	r2, r0
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	691b      	ldr	r3, [r3, #16]
 800dc78:	4619      	mov	r1, r3
 800dc7a:	4610      	mov	r0, r2
 800dc7c:	f7fc ff9d 	bl	800abba <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>
 800dc80:	bf00      	nop
 800dc82:	3708      	adds	r7, #8
 800dc84:	46bd      	mov	sp, r7
 800dc86:	bd80      	pop	{r7, pc}

0800dc88 <_ZNSt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      _M_destroy() noexcept
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b086      	sub	sp, #24
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	330c      	adds	r3, #12
 800dc94:	4618      	mov	r0, r3
 800dc96:	f000 f94d 	bl	800df34 <_ZNSt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>
 800dc9a:	4602      	mov	r2, r0
 800dc9c:	f107 0314 	add.w	r3, r7, #20
 800dca0:	4611      	mov	r1, r2
 800dca2:	4618      	mov	r0, r3
 800dca4:	f7fc fed2 	bl	800aa4c <_ZNSaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 800dca8:	f107 0114 	add.w	r1, r7, #20
 800dcac:	f107 030c 	add.w	r3, r7, #12
 800dcb0:	687a      	ldr	r2, [r7, #4]
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	f7fe f963 	bl	800bf7e <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
	this->~_Sp_counted_deleter();
 800dcb8:	6878      	ldr	r0, [r7, #4]
 800dcba:	f7ff ffa9 	bl	800dc10 <_ZNSt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 800dcbe:	f107 030c 	add.w	r3, r7, #12
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	f7fc feee 	bl	800aaa4 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	__allocator_type __a(_M_impl._M_alloc());
 800dcc8:	f107 0314 	add.w	r3, r7, #20
 800dccc:	4618      	mov	r0, r3
 800dcce:	f7fc feca 	bl	800aa66 <_ZNSaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
      }
 800dcd2:	bf00      	nop
 800dcd4:	3718      	adds	r7, #24
 800dcd6:	46bd      	mov	sp, r7
 800dcd8:	bd80      	pop	{r7, pc}

0800dcda <_ZNSt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept
 800dcda:	b480      	push	{r7}
 800dcdc:	b083      	sub	sp, #12
 800dcde:	af00      	add	r7, sp, #0
 800dce0:	6078      	str	r0, [r7, #4]
 800dce2:	6039      	str	r1, [r7, #0]
        return nullptr;
 800dce4:	2300      	movs	r3, #0
      }
 800dce6:	4618      	mov	r0, r3
 800dce8:	370c      	adds	r7, #12
 800dcea:	46bd      	mov	sp, r7
 800dcec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf0:	4770      	bx	lr
	...

0800dcf4 <_ZNSt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 800dcf4:	b580      	push	{r7, lr}
 800dcf6:	b082      	sub	sp, #8
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	6078      	str	r0, [r7, #4]
 800dcfc:	4a08      	ldr	r2, [pc, #32]	; (800dd20 <_ZNSt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev+0x2c>)
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	601a      	str	r2, [r3, #0]
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	330c      	adds	r3, #12
 800dd06:	4618      	mov	r0, r3
 800dd08:	f7fc fdd2 	bl	800a8b0 <_ZNSt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	4618      	mov	r0, r3
 800dd10:	f7f4 f8c4 	bl	8001e9c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	4618      	mov	r0, r3
 800dd18:	3708      	adds	r7, #8
 800dd1a:	46bd      	mov	sp, r7
 800dd1c:	bd80      	pop	{r7, pc}
 800dd1e:	bf00      	nop
 800dd20:	080171a8 	.word	0x080171a8

0800dd24 <_ZNSt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
 800dd24:	b580      	push	{r7, lr}
 800dd26:	b082      	sub	sp, #8
 800dd28:	af00      	add	r7, sp, #0
 800dd2a:	6078      	str	r0, [r7, #4]
 800dd2c:	6878      	ldr	r0, [r7, #4]
 800dd2e:	f7ff ffe1 	bl	800dcf4 <_ZNSt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
 800dd32:	2114      	movs	r1, #20
 800dd34:	6878      	ldr	r0, [r7, #4]
 800dd36:	f008 f944 	bl	8015fc2 <_ZdlPvj>
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	3708      	adds	r7, #8
 800dd40:	46bd      	mov	sp, r7
 800dd42:	bd80      	pop	{r7, pc}

0800dd44 <_ZNSt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      _M_dispose() noexcept
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b082      	sub	sp, #8
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	330c      	adds	r3, #12
 800dd50:	4618      	mov	r0, r3
 800dd52:	f000 f8fd 	bl	800df50 <_ZNSt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>
 800dd56:	4602      	mov	r2, r0
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	691b      	ldr	r3, [r3, #16]
 800dd5c:	4619      	mov	r1, r3
 800dd5e:	4610      	mov	r0, r2
 800dd60:	f7fc fdf5 	bl	800a94e <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>
 800dd64:	bf00      	nop
 800dd66:	3708      	adds	r7, #8
 800dd68:	46bd      	mov	sp, r7
 800dd6a:	bd80      	pop	{r7, pc}

0800dd6c <_ZNSt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      _M_destroy() noexcept
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	b086      	sub	sp, #24
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	330c      	adds	r3, #12
 800dd78:	4618      	mov	r0, r3
 800dd7a:	f000 f8f6 	bl	800df6a <_ZNSt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>
 800dd7e:	4602      	mov	r2, r0
 800dd80:	f107 0314 	add.w	r3, r7, #20
 800dd84:	4611      	mov	r1, r2
 800dd86:	4618      	mov	r0, r3
 800dd88:	f7fc fd2a 	bl	800a7e0 <_ZNSaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 800dd8c:	f107 0114 	add.w	r1, r7, #20
 800dd90:	f107 030c 	add.w	r3, r7, #12
 800dd94:	687a      	ldr	r2, [r7, #4]
 800dd96:	4618      	mov	r0, r3
 800dd98:	f7fe f83d 	bl	800be16 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
	this->~_Sp_counted_deleter();
 800dd9c:	6878      	ldr	r0, [r7, #4]
 800dd9e:	f7ff ffa9 	bl	800dcf4 <_ZNSt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 800dda2:	f107 030c 	add.w	r3, r7, #12
 800dda6:	4618      	mov	r0, r3
 800dda8:	f7fc fd46 	bl	800a838 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	__allocator_type __a(_M_impl._M_alloc());
 800ddac:	f107 0314 	add.w	r3, r7, #20
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	f7fc fd22 	bl	800a7fa <_ZNSaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
      }
 800ddb6:	bf00      	nop
 800ddb8:	3718      	adds	r7, #24
 800ddba:	46bd      	mov	sp, r7
 800ddbc:	bd80      	pop	{r7, pc}

0800ddbe <_ZNSt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept
 800ddbe:	b480      	push	{r7}
 800ddc0:	b083      	sub	sp, #12
 800ddc2:	af00      	add	r7, sp, #0
 800ddc4:	6078      	str	r0, [r7, #4]
 800ddc6:	6039      	str	r1, [r7, #0]
        return nullptr;
 800ddc8:	2300      	movs	r3, #0
      }
 800ddca:	4618      	mov	r0, r3
 800ddcc:	370c      	adds	r7, #12
 800ddce:	46bd      	mov	sp, r7
 800ddd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd4:	4770      	bx	lr

0800ddd6 <_ZNSt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 800ddd6:	b580      	push	{r7, lr}
 800ddd8:	b082      	sub	sp, #8
 800ddda:	af00      	add	r7, sp, #0
 800dddc:	6078      	str	r0, [r7, #4]
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	4618      	mov	r0, r3
 800dde2:	f000 f8d0 	bl	800df86 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>
 800dde6:	4603      	mov	r3, r0
 800dde8:	4618      	mov	r0, r3
 800ddea:	3708      	adds	r7, #8
 800ddec:	46bd      	mov	sp, r7
 800ddee:	bd80      	pop	{r7, pc}

0800ddf0 <_ZNSt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 800ddf0:	b580      	push	{r7, lr}
 800ddf2:	b082      	sub	sp, #8
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	6078      	str	r0, [r7, #4]
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	3301      	adds	r3, #1
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	f000 f8cd 	bl	800df9c <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama7ContextEELb1EE6_S_getERS3_>
 800de02:	4603      	mov	r3, r0
 800de04:	4618      	mov	r0, r3
 800de06:	3708      	adds	r7, #8
 800de08:	46bd      	mov	sp, r7
 800de0a:	bd80      	pop	{r7, pc}

0800de0c <_ZNSt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 800de0c:	b580      	push	{r7, lr}
 800de0e:	b082      	sub	sp, #8
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	4618      	mov	r0, r3
 800de18:	f000 f8cb 	bl	800dfb2 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>
 800de1c:	4603      	mov	r3, r0
 800de1e:	4618      	mov	r0, r3
 800de20:	3708      	adds	r7, #8
 800de22:	46bd      	mov	sp, r7
 800de24:	bd80      	pop	{r7, pc}

0800de26 <_ZNSt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 800de26:	b580      	push	{r7, lr}
 800de28:	b082      	sub	sp, #8
 800de2a:	af00      	add	r7, sp, #0
 800de2c:	6078      	str	r0, [r7, #4]
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	3301      	adds	r3, #1
 800de32:	4618      	mov	r0, r3
 800de34:	f000 f8c8 	bl	800dfc8 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama10Stm32InputEELb1EE6_S_getERS3_>
 800de38:	4603      	mov	r3, r0
 800de3a:	4618      	mov	r0, r3
 800de3c:	3708      	adds	r7, #8
 800de3e:	46bd      	mov	sp, r7
 800de40:	bd80      	pop	{r7, pc}

0800de42 <_ZNSt19_Sp_counted_deleterIPN4tama11SoundPlayerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 800de42:	b580      	push	{r7, lr}
 800de44:	b082      	sub	sp, #8
 800de46:	af00      	add	r7, sp, #0
 800de48:	6078      	str	r0, [r7, #4]
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	4618      	mov	r0, r3
 800de4e:	f000 f8c6 	bl	800dfde <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>
 800de52:	4603      	mov	r3, r0
 800de54:	4618      	mov	r0, r3
 800de56:	3708      	adds	r7, #8
 800de58:	46bd      	mov	sp, r7
 800de5a:	bd80      	pop	{r7, pc}

0800de5c <_ZNSt19_Sp_counted_deleterIPN4tama11SoundPlayerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 800de5c:	b580      	push	{r7, lr}
 800de5e:	b082      	sub	sp, #8
 800de60:	af00      	add	r7, sp, #0
 800de62:	6078      	str	r0, [r7, #4]
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	3301      	adds	r3, #1
 800de68:	4618      	mov	r0, r3
 800de6a:	f000 f8c3 	bl	800dff4 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama11SoundPlayerEELb1EE6_S_getERS3_>
 800de6e:	4603      	mov	r3, r0
 800de70:	4618      	mov	r0, r3
 800de72:	3708      	adds	r7, #8
 800de74:	46bd      	mov	sp, r7
 800de76:	bd80      	pop	{r7, pc}

0800de78 <_ZNSt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 800de78:	b580      	push	{r7, lr}
 800de7a:	b082      	sub	sp, #8
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	6078      	str	r0, [r7, #4]
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	4618      	mov	r0, r3
 800de84:	f000 f8c1 	bl	800e00a <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>
 800de88:	4603      	mov	r3, r0
 800de8a:	4618      	mov	r0, r3
 800de8c:	3708      	adds	r7, #8
 800de8e:	46bd      	mov	sp, r7
 800de90:	bd80      	pop	{r7, pc}

0800de92 <_ZNSt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 800de92:	b580      	push	{r7, lr}
 800de94:	b082      	sub	sp, #8
 800de96:	af00      	add	r7, sp, #0
 800de98:	6078      	str	r0, [r7, #4]
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	3301      	adds	r3, #1
 800de9e:	4618      	mov	r0, r3
 800dea0:	f000 f8be 	bl	800e020 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama25Stm32SoundPlayingStrategyEELb1EE6_S_getERS3_>
 800dea4:	4603      	mov	r3, r0
 800dea6:	4618      	mov	r0, r3
 800dea8:	3708      	adds	r7, #8
 800deaa:	46bd      	mov	sp, r7
 800deac:	bd80      	pop	{r7, pc}

0800deae <_ZNSt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 800deae:	b580      	push	{r7, lr}
 800deb0:	b082      	sub	sp, #8
 800deb2:	af00      	add	r7, sp, #0
 800deb4:	6078      	str	r0, [r7, #4]
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	4618      	mov	r0, r3
 800deba:	f000 f8bc 	bl	800e036 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>
 800debe:	4603      	mov	r3, r0
 800dec0:	4618      	mov	r0, r3
 800dec2:	3708      	adds	r7, #8
 800dec4:	46bd      	mov	sp, r7
 800dec6:	bd80      	pop	{r7, pc}

0800dec8 <_ZNSt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 800dec8:	b580      	push	{r7, lr}
 800deca:	b082      	sub	sp, #8
 800decc:	af00      	add	r7, sp, #0
 800dece:	6078      	str	r0, [r7, #4]
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	3301      	adds	r3, #1
 800ded4:	4618      	mov	r0, r3
 800ded6:	f000 f8b9 	bl	800e04c <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama16Stm32TimeMonitorEELb1EE6_S_getERS3_>
 800deda:	4603      	mov	r3, r0
 800dedc:	4618      	mov	r0, r3
 800dede:	3708      	adds	r7, #8
 800dee0:	46bd      	mov	sp, r7
 800dee2:	bd80      	pop	{r7, pc}

0800dee4 <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 800dee4:	b580      	push	{r7, lr}
 800dee6:	b082      	sub	sp, #8
 800dee8:	af00      	add	r7, sp, #0
 800deea:	6078      	str	r0, [r7, #4]
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	4618      	mov	r0, r3
 800def0:	f000 f8b7 	bl	800e062 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>
 800def4:	4603      	mov	r3, r0
 800def6:	4618      	mov	r0, r3
 800def8:	3708      	adds	r7, #8
 800defa:	46bd      	mov	sp, r7
 800defc:	bd80      	pop	{r7, pc}

0800defe <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 800defe:	b580      	push	{r7, lr}
 800df00:	b082      	sub	sp, #8
 800df02:	af00      	add	r7, sp, #0
 800df04:	6078      	str	r0, [r7, #4]
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	3301      	adds	r3, #1
 800df0a:	4618      	mov	r0, r3
 800df0c:	f000 f8b4 	bl	800e078 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama27Nokia5110DisplayDataManagerEELb1EE6_S_getERS3_>
 800df10:	4603      	mov	r3, r0
 800df12:	4618      	mov	r0, r3
 800df14:	3708      	adds	r7, #8
 800df16:	46bd      	mov	sp, r7
 800df18:	bd80      	pop	{r7, pc}

0800df1a <_ZNSt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 800df1a:	b580      	push	{r7, lr}
 800df1c:	b082      	sub	sp, #8
 800df1e:	af00      	add	r7, sp, #0
 800df20:	6078      	str	r0, [r7, #4]
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	4618      	mov	r0, r3
 800df26:	f000 f8b2 	bl	800e08e <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>
 800df2a:	4603      	mov	r3, r0
 800df2c:	4618      	mov	r0, r3
 800df2e:	3708      	adds	r7, #8
 800df30:	46bd      	mov	sp, r7
 800df32:	bd80      	pop	{r7, pc}

0800df34 <_ZNSt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 800df34:	b580      	push	{r7, lr}
 800df36:	b082      	sub	sp, #8
 800df38:	af00      	add	r7, sp, #0
 800df3a:	6078      	str	r0, [r7, #4]
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	3301      	adds	r3, #1
 800df40:	4618      	mov	r0, r3
 800df42:	f000 f8af 	bl	800e0a4 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama18Stm32TextureLoaderEELb1EE6_S_getERS3_>
 800df46:	4603      	mov	r3, r0
 800df48:	4618      	mov	r0, r3
 800df4a:	3708      	adds	r7, #8
 800df4c:	46bd      	mov	sp, r7
 800df4e:	bd80      	pop	{r7, pc}

0800df50 <_ZNSt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 800df50:	b580      	push	{r7, lr}
 800df52:	b082      	sub	sp, #8
 800df54:	af00      	add	r7, sp, #0
 800df56:	6078      	str	r0, [r7, #4]
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	4618      	mov	r0, r3
 800df5c:	f000 f8ad 	bl	800e0ba <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>
 800df60:	4603      	mov	r3, r0
 800df62:	4618      	mov	r0, r3
 800df64:	3708      	adds	r7, #8
 800df66:	46bd      	mov	sp, r7
 800df68:	bd80      	pop	{r7, pc}

0800df6a <_ZNSt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 800df6a:	b580      	push	{r7, lr}
 800df6c:	b082      	sub	sp, #8
 800df6e:	af00      	add	r7, sp, #0
 800df70:	6078      	str	r0, [r7, #4]
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	3301      	adds	r3, #1
 800df76:	4618      	mov	r0, r3
 800df78:	f000 f8aa 	bl	800e0d0 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama16Nokia5510DisplayEELb1EE6_S_getERS3_>
 800df7c:	4603      	mov	r3, r0
 800df7e:	4618      	mov	r0, r3
 800df80:	3708      	adds	r7, #8
 800df82:	46bd      	mov	sp, r7
 800df84:	bd80      	pop	{r7, pc}

0800df86 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>:
      _S_get(_Sp_ebo_helper& __eboh)
 800df86:	b480      	push	{r7}
 800df88:	b083      	sub	sp, #12
 800df8a:	af00      	add	r7, sp, #0
 800df8c:	6078      	str	r0, [r7, #4]
      { return __eboh._M_tp; }
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	4618      	mov	r0, r3
 800df92:	370c      	adds	r7, #12
 800df94:	46bd      	mov	sp, r7
 800df96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df9a:	4770      	bx	lr

0800df9c <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama7ContextEELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 800df9c:	b480      	push	{r7}
 800df9e:	b083      	sub	sp, #12
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	6078      	str	r0, [r7, #4]
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	370c      	adds	r7, #12
 800dfaa:	46bd      	mov	sp, r7
 800dfac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb0:	4770      	bx	lr

0800dfb2 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>:
      _S_get(_Sp_ebo_helper& __eboh)
 800dfb2:	b480      	push	{r7}
 800dfb4:	b083      	sub	sp, #12
 800dfb6:	af00      	add	r7, sp, #0
 800dfb8:	6078      	str	r0, [r7, #4]
      { return __eboh._M_tp; }
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	370c      	adds	r7, #12
 800dfc0:	46bd      	mov	sp, r7
 800dfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc6:	4770      	bx	lr

0800dfc8 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama10Stm32InputEELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 800dfc8:	b480      	push	{r7}
 800dfca:	b083      	sub	sp, #12
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	6078      	str	r0, [r7, #4]
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	370c      	adds	r7, #12
 800dfd6:	46bd      	mov	sp, r7
 800dfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfdc:	4770      	bx	lr

0800dfde <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>:
      _S_get(_Sp_ebo_helper& __eboh)
 800dfde:	b480      	push	{r7}
 800dfe0:	b083      	sub	sp, #12
 800dfe2:	af00      	add	r7, sp, #0
 800dfe4:	6078      	str	r0, [r7, #4]
      { return __eboh._M_tp; }
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	4618      	mov	r0, r3
 800dfea:	370c      	adds	r7, #12
 800dfec:	46bd      	mov	sp, r7
 800dfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff2:	4770      	bx	lr

0800dff4 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama11SoundPlayerEELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 800dff4:	b480      	push	{r7}
 800dff6:	b083      	sub	sp, #12
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	6078      	str	r0, [r7, #4]
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	4618      	mov	r0, r3
 800e000:	370c      	adds	r7, #12
 800e002:	46bd      	mov	sp, r7
 800e004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e008:	4770      	bx	lr

0800e00a <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>:
      _S_get(_Sp_ebo_helper& __eboh)
 800e00a:	b480      	push	{r7}
 800e00c:	b083      	sub	sp, #12
 800e00e:	af00      	add	r7, sp, #0
 800e010:	6078      	str	r0, [r7, #4]
      { return __eboh._M_tp; }
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	4618      	mov	r0, r3
 800e016:	370c      	adds	r7, #12
 800e018:	46bd      	mov	sp, r7
 800e01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e01e:	4770      	bx	lr

0800e020 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama25Stm32SoundPlayingStrategyEELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 800e020:	b480      	push	{r7}
 800e022:	b083      	sub	sp, #12
 800e024:	af00      	add	r7, sp, #0
 800e026:	6078      	str	r0, [r7, #4]
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	4618      	mov	r0, r3
 800e02c:	370c      	adds	r7, #12
 800e02e:	46bd      	mov	sp, r7
 800e030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e034:	4770      	bx	lr

0800e036 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>:
      _S_get(_Sp_ebo_helper& __eboh)
 800e036:	b480      	push	{r7}
 800e038:	b083      	sub	sp, #12
 800e03a:	af00      	add	r7, sp, #0
 800e03c:	6078      	str	r0, [r7, #4]
      { return __eboh._M_tp; }
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	4618      	mov	r0, r3
 800e042:	370c      	adds	r7, #12
 800e044:	46bd      	mov	sp, r7
 800e046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e04a:	4770      	bx	lr

0800e04c <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama16Stm32TimeMonitorEELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 800e04c:	b480      	push	{r7}
 800e04e:	b083      	sub	sp, #12
 800e050:	af00      	add	r7, sp, #0
 800e052:	6078      	str	r0, [r7, #4]
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	4618      	mov	r0, r3
 800e058:	370c      	adds	r7, #12
 800e05a:	46bd      	mov	sp, r7
 800e05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e060:	4770      	bx	lr

0800e062 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>:
      _S_get(_Sp_ebo_helper& __eboh)
 800e062:	b480      	push	{r7}
 800e064:	b083      	sub	sp, #12
 800e066:	af00      	add	r7, sp, #0
 800e068:	6078      	str	r0, [r7, #4]
      { return __eboh._M_tp; }
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	4618      	mov	r0, r3
 800e06e:	370c      	adds	r7, #12
 800e070:	46bd      	mov	sp, r7
 800e072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e076:	4770      	bx	lr

0800e078 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama27Nokia5110DisplayDataManagerEELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 800e078:	b480      	push	{r7}
 800e07a:	b083      	sub	sp, #12
 800e07c:	af00      	add	r7, sp, #0
 800e07e:	6078      	str	r0, [r7, #4]
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	4618      	mov	r0, r3
 800e084:	370c      	adds	r7, #12
 800e086:	46bd      	mov	sp, r7
 800e088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e08c:	4770      	bx	lr

0800e08e <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>:
      _S_get(_Sp_ebo_helper& __eboh)
 800e08e:	b480      	push	{r7}
 800e090:	b083      	sub	sp, #12
 800e092:	af00      	add	r7, sp, #0
 800e094:	6078      	str	r0, [r7, #4]
      { return __eboh._M_tp; }
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	4618      	mov	r0, r3
 800e09a:	370c      	adds	r7, #12
 800e09c:	46bd      	mov	sp, r7
 800e09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a2:	4770      	bx	lr

0800e0a4 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama18Stm32TextureLoaderEELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 800e0a4:	b480      	push	{r7}
 800e0a6:	b083      	sub	sp, #12
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	6078      	str	r0, [r7, #4]
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	370c      	adds	r7, #12
 800e0b2:	46bd      	mov	sp, r7
 800e0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b8:	4770      	bx	lr

0800e0ba <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>:
      _S_get(_Sp_ebo_helper& __eboh)
 800e0ba:	b480      	push	{r7}
 800e0bc:	b083      	sub	sp, #12
 800e0be:	af00      	add	r7, sp, #0
 800e0c0:	6078      	str	r0, [r7, #4]
      { return __eboh._M_tp; }
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	370c      	adds	r7, #12
 800e0c8:	46bd      	mov	sp, r7
 800e0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ce:	4770      	bx	lr

0800e0d0 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama16Nokia5510DisplayEELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 800e0d0:	b480      	push	{r7}
 800e0d2:	b083      	sub	sp, #12
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	6078      	str	r0, [r7, #4]
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	4618      	mov	r0, r3
 800e0dc:	370c      	adds	r7, #12
 800e0de:	46bd      	mov	sp, r7
 800e0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e4:	4770      	bx	lr
	...

0800e0e8 <_ZN4tama7DisplayC1Ev>:
#include "PixelColor.h"
#include "display-data/DisplayData.h"

namespace tama
{
    class Display
 800e0e8:	b480      	push	{r7}
 800e0ea:	b083      	sub	sp, #12
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	6078      	str	r0, [r7, #4]
 800e0f0:	4a04      	ldr	r2, [pc, #16]	; (800e104 <_ZN4tama7DisplayC1Ev+0x1c>)
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	601a      	str	r2, [r3, #0]
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	370c      	adds	r7, #12
 800e0fc:	46bd      	mov	sp, r7
 800e0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e102:	4770      	bx	lr
 800e104:	0801721c 	.word	0x0801721c

0800e108 <_ZN4tama16Nokia5510DisplayC1ERNS_13DisplayConfigE>:
// Created by grzegorz on 3/25/21.
//

#include "Nokia5510Display.h"

tama::Nokia5510Display::Nokia5510Display(DisplayConfig & displayConfig)
 800e108:	b5b0      	push	{r4, r5, r7, lr}
 800e10a:	b084      	sub	sp, #16
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	6078      	str	r0, [r7, #4]
 800e110:	6039      	str	r1, [r7, #0]
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	4618      	mov	r0, r3
 800e116:	f7ff ffe7 	bl	800e0e8 <_ZN4tama7DisplayC1Ev>
 800e11a:	4a32      	ldr	r2, [pc, #200]	; (800e1e4 <_ZN4tama16Nokia5510DisplayC1ERNS_13DisplayConfigE+0xdc>)
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	601a      	str	r2, [r3, #0]
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	2254      	movs	r2, #84	; 0x54
 800e124:	629a      	str	r2, [r3, #40]	; 0x28
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	2230      	movs	r2, #48	; 0x30
 800e12a:	62da      	str	r2, [r3, #44]	; 0x2c
{
    this->cfg = displayConfig;
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	683a      	ldr	r2, [r7, #0]
 800e130:	1d1c      	adds	r4, r3, #4
 800e132:	4615      	mov	r5, r2
 800e134:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e136:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e138:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e13a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e13c:	682b      	ldr	r3, [r5, #0]
 800e13e:	6023      	str	r3, [r4, #0]
    HAL_GPIO_WritePin(cfg.reset_port, cfg.reset_pin, GPIO_PIN_RESET);
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	6898      	ldr	r0, [r3, #8]
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	899b      	ldrh	r3, [r3, #12]
 800e148:	2200      	movs	r2, #0
 800e14a:	4619      	mov	r1, r3
 800e14c:	f001 fcfc 	bl	800fb48 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 800e150:	2064      	movs	r0, #100	; 0x64
 800e152:	f001 fa2b 	bl	800f5ac <HAL_Delay>
    HAL_GPIO_WritePin(cfg.reset_port, cfg.reset_pin, GPIO_PIN_SET);
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	6898      	ldr	r0, [r3, #8]
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	899b      	ldrh	r3, [r3, #12]
 800e15e:	2201      	movs	r2, #1
 800e160:	4619      	mov	r1, r3
 800e162:	f001 fcf1 	bl	800fb48 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(cfg.bl_port, cfg.bl_pin, GPIO_PIN_SET);
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	6918      	ldr	r0, [r3, #16]
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	8a9b      	ldrh	r3, [r3, #20]
 800e16e:	2201      	movs	r2, #1
 800e170:	4619      	mov	r1, r3
 800e172:	f001 fce9 	bl	800fb48 <HAL_GPIO_WritePin>
    writeCommand(0x21);
 800e176:	2121      	movs	r1, #33	; 0x21
 800e178:	6878      	ldr	r0, [r7, #4]
 800e17a:	f000 f884 	bl	800e286 <_ZN4tama16Nokia5510Display12writeCommandEh>
    writeCommand(0x04);
 800e17e:	2104      	movs	r1, #4
 800e180:	6878      	ldr	r0, [r7, #4]
 800e182:	f000 f880 	bl	800e286 <_ZN4tama16Nokia5510Display12writeCommandEh>
    writeCommand(0x10 | 0x04);
 800e186:	2114      	movs	r1, #20
 800e188:	6878      	ldr	r0, [r7, #4]
 800e18a:	f000 f87c 	bl	800e286 <_ZN4tama16Nokia5510Display12writeCommandEh>
    writeCommand(0x80 | 0x41); //contrast
 800e18e:	21c1      	movs	r1, #193	; 0xc1
 800e190:	6878      	ldr	r0, [r7, #4]
 800e192:	f000 f878 	bl	800e286 <_ZN4tama16Nokia5510Display12writeCommandEh>
    writeCommand(0x20);
 800e196:	2120      	movs	r1, #32
 800e198:	6878      	ldr	r0, [r7, #4]
 800e19a:	f000 f874 	bl	800e286 <_ZN4tama16Nokia5510Display12writeCommandEh>
    writeCommand(0x08 | 0x04);
 800e19e:	210c      	movs	r1, #12
 800e1a0:	6878      	ldr	r0, [r7, #4]
 800e1a2:	f000 f870 	bl	800e286 <_ZN4tama16Nokia5510Display12writeCommandEh>
    for (int i = 0; i < 504; i++)
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	60fb      	str	r3, [r7, #12]
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 800e1b0:	da07      	bge.n	800e1c2 <_ZN4tama16Nokia5510DisplayC1ERNS_13DisplayConfigE+0xba>
        displayPixel(0x0);
 800e1b2:	2100      	movs	r1, #0
 800e1b4:	6878      	ldr	r0, [r7, #4]
 800e1b6:	f000 f83d 	bl	800e234 <_ZN4tama16Nokia5510Display12displayPixelEh>
    for (int i = 0; i < 504; i++)
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	3301      	adds	r3, #1
 800e1be:	60fb      	str	r3, [r7, #12]
 800e1c0:	e7f3      	b.n	800e1aa <_ZN4tama16Nokia5510DisplayC1ERNS_13DisplayConfigE+0xa2>
    writeCommand(0x20 | 0x00);
 800e1c2:	2120      	movs	r1, #32
 800e1c4:	6878      	ldr	r0, [r7, #4]
 800e1c6:	f000 f85e 	bl	800e286 <_ZN4tama16Nokia5510Display12writeCommandEh>
    writeCommand(0x80 | 0); // Wybˇr kolumny
 800e1ca:	2180      	movs	r1, #128	; 0x80
 800e1cc:	6878      	ldr	r0, [r7, #4]
 800e1ce:	f000 f85a 	bl	800e286 <_ZN4tama16Nokia5510Display12writeCommandEh>
    writeCommand(0x40 | 0); // Wybˇr wiersza
 800e1d2:	2140      	movs	r1, #64	; 0x40
 800e1d4:	6878      	ldr	r0, [r7, #4]
 800e1d6:	f000 f856 	bl	800e286 <_ZN4tama16Nokia5510Display12writeCommandEh>
}
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	4618      	mov	r0, r3
 800e1de:	3710      	adds	r7, #16
 800e1e0:	46bd      	mov	sp, r7
 800e1e2:	bdb0      	pop	{r4, r5, r7, pc}
 800e1e4:	0801720c 	.word	0x0801720c

0800e1e8 <_ZN4tama16Nokia5510Display11displayDataEv>:

void tama::Nokia5510Display::displayData()
{
 800e1e8:	b480      	push	{r7}
 800e1ea:	b083      	sub	sp, #12
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	6078      	str	r0, [r7, #4]

}
 800e1f0:	bf00      	nop
 800e1f2:	370c      	adds	r7, #12
 800e1f4:	46bd      	mov	sp, r7
 800e1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1fa:	4770      	bx	lr

0800e1fc <_ZN4tama16Nokia5510Display7setDataERNS_11DisplayDataE>:

void tama::Nokia5510Display::setData(DisplayData & pixels)
{
 800e1fc:	b580      	push	{r7, lr}
 800e1fe:	b084      	sub	sp, #16
 800e200:	af00      	add	r7, sp, #0
 800e202:	6078      	str	r0, [r7, #4]
 800e204:	6039      	str	r1, [r7, #0]


	for (unsigned i = 0; i <504; ++i)
 800e206:	2300      	movs	r3, #0
 800e208:	60fb      	str	r3, [r7, #12]
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 800e210:	d20c      	bcs.n	800e22c <_ZN4tama16Nokia5510Display7setDataERNS_11DisplayDataE+0x30>
	{
		displayPixel(((uint8_t *)pixels.data)[i]);
 800e212:	683b      	ldr	r3, [r7, #0]
 800e214:	681a      	ldr	r2, [r3, #0]
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	4413      	add	r3, r2
 800e21a:	781b      	ldrb	r3, [r3, #0]
 800e21c:	4619      	mov	r1, r3
 800e21e:	6878      	ldr	r0, [r7, #4]
 800e220:	f000 f808 	bl	800e234 <_ZN4tama16Nokia5510Display12displayPixelEh>
	for (unsigned i = 0; i <504; ++i)
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	3301      	adds	r3, #1
 800e228:	60fb      	str	r3, [r7, #12]
 800e22a:	e7ee      	b.n	800e20a <_ZN4tama16Nokia5510Display7setDataERNS_11DisplayDataE+0xe>
//
//    HAL_GPIO_WritePin(cfg.dc_port, cfg.dc_pin, GPIO_PIN_SET);
//    HAL_GPIO_WritePin(cfg.ce_port, cfg.ce_pin, GPIO_PIN_RESET);
//    HAL_SPI_Transmit(cfg.spi, ((uint8_t *)pixels.data + 252), 252, 100);
//    HAL_GPIO_WritePin(cfg.ce_port, cfg.ce_pin, GPIO_PIN_SET);
}
 800e22c:	bf00      	nop
 800e22e:	3710      	adds	r7, #16
 800e230:	46bd      	mov	sp, r7
 800e232:	bd80      	pop	{r7, pc}

0800e234 <_ZN4tama16Nokia5510Display12displayPixelEh>:


void tama::Nokia5510Display::displayPixel(uint8_t pixelData)
{
 800e234:	b580      	push	{r7, lr}
 800e236:	b082      	sub	sp, #8
 800e238:	af00      	add	r7, sp, #0
 800e23a:	6078      	str	r0, [r7, #4]
 800e23c:	460b      	mov	r3, r1
 800e23e:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(cfg.dc_port, cfg.dc_pin, GPIO_PIN_SET);
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	6998      	ldr	r0, [r3, #24]
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e248:	2201      	movs	r2, #1
 800e24a:	4619      	mov	r1, r3
 800e24c:	f001 fc7c 	bl	800fb48 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(cfg.ce_port, cfg.ce_pin, GPIO_PIN_RESET);
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	6a18      	ldr	r0, [r3, #32]
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	8b9b      	ldrh	r3, [r3, #28]
 800e258:	2200      	movs	r2, #0
 800e25a:	4619      	mov	r1, r3
 800e25c:	f001 fc74 	bl	800fb48 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(cfg.spi, &pixelData, 1, 100);
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	6858      	ldr	r0, [r3, #4]
 800e264:	1cf9      	adds	r1, r7, #3
 800e266:	2364      	movs	r3, #100	; 0x64
 800e268:	2201      	movs	r2, #1
 800e26a:	f004 fd57 	bl	8012d1c <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(cfg.ce_port, cfg.ce_pin, GPIO_PIN_SET);
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	6a18      	ldr	r0, [r3, #32]
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	8b9b      	ldrh	r3, [r3, #28]
 800e276:	2201      	movs	r2, #1
 800e278:	4619      	mov	r1, r3
 800e27a:	f001 fc65 	bl	800fb48 <HAL_GPIO_WritePin>
}
 800e27e:	bf00      	nop
 800e280:	3708      	adds	r7, #8
 800e282:	46bd      	mov	sp, r7
 800e284:	bd80      	pop	{r7, pc}

0800e286 <_ZN4tama16Nokia5510Display12writeCommandEh>:

void tama::Nokia5510Display::writeCommand(uint8_t cmd)
{
 800e286:	b580      	push	{r7, lr}
 800e288:	b082      	sub	sp, #8
 800e28a:	af00      	add	r7, sp, #0
 800e28c:	6078      	str	r0, [r7, #4]
 800e28e:	460b      	mov	r3, r1
 800e290:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(cfg.dc_port, cfg.dc_pin, GPIO_PIN_RESET);
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	6998      	ldr	r0, [r3, #24]
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e29a:	2200      	movs	r2, #0
 800e29c:	4619      	mov	r1, r3
 800e29e:	f001 fc53 	bl	800fb48 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(cfg.ce_port, cfg.ce_pin, GPIO_PIN_RESET);
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	6a18      	ldr	r0, [r3, #32]
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	8b9b      	ldrh	r3, [r3, #28]
 800e2aa:	2200      	movs	r2, #0
 800e2ac:	4619      	mov	r1, r3
 800e2ae:	f001 fc4b 	bl	800fb48 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(cfg.spi, &cmd, 1, 100);
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	6858      	ldr	r0, [r3, #4]
 800e2b6:	1cf9      	adds	r1, r7, #3
 800e2b8:	2364      	movs	r3, #100	; 0x64
 800e2ba:	2201      	movs	r2, #1
 800e2bc:	f004 fd2e 	bl	8012d1c <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(cfg.ce_port, cfg.ce_pin, GPIO_PIN_SET);
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	6a18      	ldr	r0, [r3, #32]
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	8b9b      	ldrh	r3, [r3, #28]
 800e2c8:	2201      	movs	r2, #1
 800e2ca:	4619      	mov	r1, r3
 800e2cc:	f001 fc3c 	bl	800fb48 <HAL_GPIO_WritePin>
}
 800e2d0:	bf00      	nop
 800e2d2:	3708      	adds	r7, #8
 800e2d4:	46bd      	mov	sp, r7
 800e2d6:	bd80      	pop	{r7, pc}

0800e2d8 <_ZN4tama10Stm32Input6updateEv>:
#include <gpio.h>
#include "Stm32Input.h"
#include "../../Core/input/button.h"

void tama::Stm32Input::update()
{
 800e2d8:	b580      	push	{r7, lr}
 800e2da:	b088      	sub	sp, #32
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	6078      	str	r0, [r7, #4]
    Button button = tama::Button::NONE;
 800e2e0:	2303      	movs	r3, #3
 800e2e2:	77fb      	strb	r3, [r7, #31]

    if (HAL_GPIO_ReadPin(BUTTON_C_GPIO_Port, BUTTON_C_Pin) == GPIO_PIN_RESET)
 800e2e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800e2e8:	482e      	ldr	r0, [pc, #184]	; (800e3a4 <_ZN4tama10Stm32Input6updateEv+0xcc>)
 800e2ea:	f001 fc15 	bl	800fb18 <HAL_GPIO_ReadPin>
 800e2ee:	4603      	mov	r3, r0
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	bf0c      	ite	eq
 800e2f4:	2301      	moveq	r3, #1
 800e2f6:	2300      	movne	r3, #0
 800e2f8:	b2db      	uxtb	r3, r3
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d001      	beq.n	800e302 <_ZN4tama10Stm32Input6updateEv+0x2a>
    {
        button = tama::Button::C;
 800e2fe:	2302      	movs	r3, #2
 800e300:	77fb      	strb	r3, [r7, #31]
    }
    if (HAL_GPIO_ReadPin(BUTTON_B_GPIO_Port, BUTTON_B_Pin) == GPIO_PIN_RESET)
 800e302:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e306:	4827      	ldr	r0, [pc, #156]	; (800e3a4 <_ZN4tama10Stm32Input6updateEv+0xcc>)
 800e308:	f001 fc06 	bl	800fb18 <HAL_GPIO_ReadPin>
 800e30c:	4603      	mov	r3, r0
 800e30e:	2b00      	cmp	r3, #0
 800e310:	bf0c      	ite	eq
 800e312:	2301      	moveq	r3, #1
 800e314:	2300      	movne	r3, #0
 800e316:	b2db      	uxtb	r3, r3
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d001      	beq.n	800e320 <_ZN4tama10Stm32Input6updateEv+0x48>
    {
        button = tama::Button::B;
 800e31c:	2301      	movs	r3, #1
 800e31e:	77fb      	strb	r3, [r7, #31]
    }

    if (button != tama::Button::NONE)
 800e320:	7ffb      	ldrb	r3, [r7, #31]
 800e322:	2b03      	cmp	r3, #3
 800e324:	d039      	beq.n	800e39a <_ZN4tama10Stm32Input6updateEv+0xc2>
    {
        for (auto listener : listeners)
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	3304      	adds	r3, #4
 800e32a:	61bb      	str	r3, [r7, #24]
 800e32c:	69b8      	ldr	r0, [r7, #24]
 800e32e:	f7f2 fadf 	bl	80008f0 <_ZNSt6vectorISt10shared_ptrIN4tama7OnInputEESaIS3_EE5beginEv>
 800e332:	4603      	mov	r3, r0
 800e334:	60fb      	str	r3, [r7, #12]
 800e336:	69b8      	ldr	r0, [r7, #24]
 800e338:	f7f2 f997 	bl	800066a <_ZNSt6vectorISt10shared_ptrIN4tama7OnInputEESaIS3_EE3endEv>
 800e33c:	4603      	mov	r3, r0
 800e33e:	60bb      	str	r3, [r7, #8]
 800e340:	f107 0208 	add.w	r2, r7, #8
 800e344:	f107 030c 	add.w	r3, r7, #12
 800e348:	4611      	mov	r1, r2
 800e34a:	4618      	mov	r0, r3
 800e34c:	f000 f82c 	bl	800e3a8 <_ZN9__gnu_cxxneIPSt10shared_ptrIN4tama7OnInputEESt6vectorIS4_SaIS4_EEEEbRKNS_17__normal_iteratorIT_T0_EESE_>
 800e350:	4603      	mov	r3, r0
 800e352:	2b00      	cmp	r3, #0
 800e354:	d021      	beq.n	800e39a <_ZN4tama10Stm32Input6updateEv+0xc2>
 800e356:	f107 030c 	add.w	r3, r7, #12
 800e35a:	4618      	mov	r0, r3
 800e35c:	f000 f84d 	bl	800e3fa <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama7OnInputEESt6vectorIS4_SaIS4_EEEdeEv>
 800e360:	4602      	mov	r2, r0
 800e362:	f107 0310 	add.w	r3, r7, #16
 800e366:	4611      	mov	r1, r2
 800e368:	4618      	mov	r0, r3
 800e36a:	f7f2 fa3f 	bl	80007ec <_ZNSt10shared_ptrIN4tama7OnInputEEC1ERKS2_>
        {
            listener->onInput(button);
 800e36e:	f107 0310 	add.w	r3, r7, #16
 800e372:	4618      	mov	r0, r3
 800e374:	f000 f84d 	bl	800e412 <_ZNKSt19__shared_ptr_accessIN4tama7OnInputELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800e378:	4602      	mov	r2, r0
 800e37a:	6813      	ldr	r3, [r2, #0]
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	7ff9      	ldrb	r1, [r7, #31]
 800e380:	4610      	mov	r0, r2
 800e382:	4798      	blx	r3
        for (auto listener : listeners)
 800e384:	f107 0310 	add.w	r3, r7, #16
 800e388:	4618      	mov	r0, r3
 800e38a:	f7f2 fbc9 	bl	8000b20 <_ZNSt10shared_ptrIN4tama7OnInputEED1Ev>
 800e38e:	f107 030c 	add.w	r3, r7, #12
 800e392:	4618      	mov	r0, r3
 800e394:	f000 f820 	bl	800e3d8 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama7OnInputEESt6vectorIS4_SaIS4_EEEppEv>
 800e398:	e7d2      	b.n	800e340 <_ZN4tama10Stm32Input6updateEv+0x68>
        }
    }
}
 800e39a:	bf00      	nop
 800e39c:	3720      	adds	r7, #32
 800e39e:	46bd      	mov	sp, r7
 800e3a0:	bd80      	pop	{r7, pc}
 800e3a2:	bf00      	nop
 800e3a4:	40020c00 	.word	0x40020c00

0800e3a8 <_ZN9__gnu_cxxneIPSt10shared_ptrIN4tama7OnInputEESt6vectorIS4_SaIS4_EEEEbRKNS_17__normal_iteratorIT_T0_EESE_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 800e3a8:	b590      	push	{r4, r7, lr}
 800e3aa:	b083      	sub	sp, #12
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	6078      	str	r0, [r7, #4]
 800e3b0:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 800e3b2:	6878      	ldr	r0, [r7, #4]
 800e3b4:	f7f2 fad6 	bl	8000964 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama7OnInputEESt6vectorIS4_SaIS4_EEE4baseEv>
 800e3b8:	4603      	mov	r3, r0
 800e3ba:	681c      	ldr	r4, [r3, #0]
 800e3bc:	6838      	ldr	r0, [r7, #0]
 800e3be:	f7f2 fad1 	bl	8000964 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama7OnInputEESt6vectorIS4_SaIS4_EEE4baseEv>
 800e3c2:	4603      	mov	r3, r0
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	429c      	cmp	r4, r3
 800e3c8:	bf14      	ite	ne
 800e3ca:	2301      	movne	r3, #1
 800e3cc:	2300      	moveq	r3, #0
 800e3ce:	b2db      	uxtb	r3, r3
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	370c      	adds	r7, #12
 800e3d4:	46bd      	mov	sp, r7
 800e3d6:	bd90      	pop	{r4, r7, pc}

0800e3d8 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama7OnInputEESt6vectorIS4_SaIS4_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800e3d8:	b480      	push	{r7}
 800e3da:	b083      	sub	sp, #12
 800e3dc:	af00      	add	r7, sp, #0
 800e3de:	6078      	str	r0, [r7, #4]
	++_M_current;
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	f103 0208 	add.w	r2, r3, #8
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	601a      	str	r2, [r3, #0]
	return *this;
 800e3ec:	687b      	ldr	r3, [r7, #4]
      }
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	370c      	adds	r7, #12
 800e3f2:	46bd      	mov	sp, r7
 800e3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f8:	4770      	bx	lr

0800e3fa <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama7OnInputEESt6vectorIS4_SaIS4_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800e3fa:	b480      	push	{r7}
 800e3fc:	b083      	sub	sp, #12
 800e3fe:	af00      	add	r7, sp, #0
 800e400:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	4618      	mov	r0, r3
 800e408:	370c      	adds	r7, #12
 800e40a:	46bd      	mov	sp, r7
 800e40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e410:	4770      	bx	lr

0800e412 <_ZNKSt19__shared_ptr_accessIN4tama7OnInputELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 800e412:	b580      	push	{r7, lr}
 800e414:	b082      	sub	sp, #8
 800e416:	af00      	add	r7, sp, #0
 800e418:	6078      	str	r0, [r7, #4]
	return _M_get();
 800e41a:	6878      	ldr	r0, [r7, #4]
 800e41c:	f000 f805 	bl	800e42a <_ZNKSt19__shared_ptr_accessIN4tama7OnInputELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 800e420:	4603      	mov	r3, r0
      }
 800e422:	4618      	mov	r0, r3
 800e424:	3708      	adds	r7, #8
 800e426:	46bd      	mov	sp, r7
 800e428:	bd80      	pop	{r7, pc}

0800e42a <_ZNKSt19__shared_ptr_accessIN4tama7OnInputELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 800e42a:	b580      	push	{r7, lr}
 800e42c:	b082      	sub	sp, #8
 800e42e:	af00      	add	r7, sp, #0
 800e430:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 800e432:	6878      	ldr	r0, [r7, #4]
 800e434:	f000 f805 	bl	800e442 <_ZNKSt12__shared_ptrIN4tama7OnInputELN9__gnu_cxx12_Lock_policyE0EE3getEv>
 800e438:	4603      	mov	r3, r0
 800e43a:	4618      	mov	r0, r3
 800e43c:	3708      	adds	r7, #8
 800e43e:	46bd      	mov	sp, r7
 800e440:	bd80      	pop	{r7, pc}

0800e442 <_ZNKSt12__shared_ptrIN4tama7OnInputELN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 800e442:	b480      	push	{r7}
 800e444:	b083      	sub	sp, #12
 800e446:	af00      	add	r7, sp, #0
 800e448:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	4618      	mov	r0, r3
 800e450:	370c      	adds	r7, #12
 800e452:	46bd      	mov	sp, r7
 800e454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e458:	4770      	bx	lr

0800e45a <_ZN4tama27Nokia5110DisplayDataManager25getActiveSceneDisplayDataESt10shared_ptrINS_7TextureEE>:
//

#include "Nokia5110DisplayDataManager.h"

tama::DisplayData tama::Nokia5110DisplayDataManager::getActiveSceneDisplayData(std::shared_ptr<Texture> texture)
{
 800e45a:	b590      	push	{r4, r7, lr}
 800e45c:	b08b      	sub	sp, #44	; 0x2c
 800e45e:	af00      	add	r7, sp, #0
 800e460:	60f8      	str	r0, [r7, #12]
 800e462:	60b9      	str	r1, [r7, #8]
 800e464:	607a      	str	r2, [r7, #4]
    uint8_t * data = new uint8_t[dataSize];
 800e466:	68bb      	ldr	r3, [r7, #8]
 800e468:	691b      	ldr	r3, [r3, #16]
 800e46a:	4618      	mov	r0, r3
 800e46c:	f007 fda7 	bl	8015fbe <_Znaj>
 800e470:	4603      	mov	r3, r0
 800e472:	61fb      	str	r3, [r7, #28]
    for (unsigned i = 0; i < texture->height; ++i)
 800e474:	2300      	movs	r3, #0
 800e476:	627b      	str	r3, [r7, #36]	; 0x24
 800e478:	6878      	ldr	r0, [r7, #4]
 800e47a:	f7f7 fa43 	bl	8005904 <_ZNKSt19__shared_ptr_accessIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800e47e:	4603      	mov	r3, r0
 800e480:	689b      	ldr	r3, [r3, #8]
 800e482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e484:	429a      	cmp	r2, r3
 800e486:	bf34      	ite	cc
 800e488:	2301      	movcc	r3, #1
 800e48a:	2300      	movcs	r3, #0
 800e48c:	b2db      	uxtb	r3, r3
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d03f      	beq.n	800e512 <_ZN4tama27Nokia5110DisplayDataManager25getActiveSceneDisplayDataESt10shared_ptrINS_7TextureEE+0xb8>
    {
        for (unsigned j = 0; j < texture->width; ++j) //i = 32, j = 60
 800e492:	2300      	movs	r3, #0
 800e494:	623b      	str	r3, [r7, #32]
 800e496:	6878      	ldr	r0, [r7, #4]
 800e498:	f7f7 fa34 	bl	8005904 <_ZNKSt19__shared_ptr_accessIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800e49c:	4603      	mov	r3, r0
 800e49e:	685b      	ldr	r3, [r3, #4]
 800e4a0:	6a3a      	ldr	r2, [r7, #32]
 800e4a2:	429a      	cmp	r2, r3
 800e4a4:	bf34      	ite	cc
 800e4a6:	2301      	movcc	r3, #1
 800e4a8:	2300      	movcs	r3, #0
 800e4aa:	b2db      	uxtb	r3, r3
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d02c      	beq.n	800e50a <_ZN4tama27Nokia5110DisplayDataManager25getActiveSceneDisplayDataESt10shared_ptrINS_7TextureEE+0xb0>
        {
            unsigned segmentHeightNumber = i / segmentSize; // 0, 1, .., 7 -> 4
 800e4b0:	68bb      	ldr	r3, [r7, #8]
 800e4b2:	685b      	ldr	r3, [r3, #4]
 800e4b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e4b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800e4ba:	61bb      	str	r3, [r7, #24]
            unsigned bitInSegment = i % segmentSize; // 0 ... 7 -> 0  // 504 = 7 * 48 + 47
 800e4bc:	68bb      	ldr	r3, [r7, #8]
 800e4be:	685a      	ldr	r2, [r3, #4]
 800e4c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4c2:	fbb3 f1f2 	udiv	r1, r3, r2
 800e4c6:	fb02 f201 	mul.w	r2, r2, r1
 800e4ca:	1a9b      	subs	r3, r3, r2
 800e4cc:	617b      	str	r3, [r7, #20]
            setPixel(data[segmentHeightNumber * segmentsInWidth + j], bitInSegment, texture->data[i][j]);
 800e4ce:	68bb      	ldr	r3, [r7, #8]
 800e4d0:	68db      	ldr	r3, [r3, #12]
 800e4d2:	69ba      	ldr	r2, [r7, #24]
 800e4d4:	fb02 f203 	mul.w	r2, r2, r3
 800e4d8:	6a3b      	ldr	r3, [r7, #32]
 800e4da:	4413      	add	r3, r2
 800e4dc:	69fa      	ldr	r2, [r7, #28]
 800e4de:	18d4      	adds	r4, r2, r3
 800e4e0:	6878      	ldr	r0, [r7, #4]
 800e4e2:	f7f7 fa0f 	bl	8005904 <_ZNKSt19__shared_ptr_accessIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800e4e6:	4603      	mov	r3, r0
 800e4e8:	68da      	ldr	r2, [r3, #12]
 800e4ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ec:	009b      	lsls	r3, r3, #2
 800e4ee:	4413      	add	r3, r2
 800e4f0:	681a      	ldr	r2, [r3, #0]
 800e4f2:	6a3b      	ldr	r3, [r7, #32]
 800e4f4:	4413      	add	r3, r2
 800e4f6:	781b      	ldrb	r3, [r3, #0]
 800e4f8:	697a      	ldr	r2, [r7, #20]
 800e4fa:	4621      	mov	r1, r4
 800e4fc:	68b8      	ldr	r0, [r7, #8]
 800e4fe:	f000 f817 	bl	800e530 <_ZN4tama27Nokia5110DisplayDataManager8setPixelERhjNS_10PixelColorE>
        for (unsigned j = 0; j < texture->width; ++j) //i = 32, j = 60
 800e502:	6a3b      	ldr	r3, [r7, #32]
 800e504:	3301      	adds	r3, #1
 800e506:	623b      	str	r3, [r7, #32]
 800e508:	e7c5      	b.n	800e496 <_ZN4tama27Nokia5110DisplayDataManager25getActiveSceneDisplayDataESt10shared_ptrINS_7TextureEE+0x3c>
    for (unsigned i = 0; i < texture->height; ++i)
 800e50a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e50c:	3301      	adds	r3, #1
 800e50e:	627b      	str	r3, [r7, #36]	; 0x24
 800e510:	e7b2      	b.n	800e478 <_ZN4tama27Nokia5110DisplayDataManager25getActiveSceneDisplayDataESt10shared_ptrINS_7TextureEE+0x1e>
        }
    }
    return DisplayData{data, dataSize, dataFragmentSize};
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	69fa      	ldr	r2, [r7, #28]
 800e516:	601a      	str	r2, [r3, #0]
 800e518:	68bb      	ldr	r3, [r7, #8]
 800e51a:	691a      	ldr	r2, [r3, #16]
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	605a      	str	r2, [r3, #4]
 800e520:	68bb      	ldr	r3, [r7, #8]
 800e522:	695a      	ldr	r2, [r3, #20]
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	609a      	str	r2, [r3, #8]
}
 800e528:	68f8      	ldr	r0, [r7, #12]
 800e52a:	372c      	adds	r7, #44	; 0x2c
 800e52c:	46bd      	mov	sp, r7
 800e52e:	bd90      	pop	{r4, r7, pc}

0800e530 <_ZN4tama27Nokia5110DisplayDataManager8setPixelERhjNS_10PixelColorE>:

void tama::Nokia5110DisplayDataManager::setPixel(uint8_t & pixelSegment, unsigned position, tama::PixelColor color)
{
 800e530:	b480      	push	{r7}
 800e532:	b085      	sub	sp, #20
 800e534:	af00      	add	r7, sp, #0
 800e536:	60f8      	str	r0, [r7, #12]
 800e538:	60b9      	str	r1, [r7, #8]
 800e53a:	607a      	str	r2, [r7, #4]
 800e53c:	70fb      	strb	r3, [r7, #3]
    if (color == PixelColor::BLACK)
 800e53e:	78fb      	ldrb	r3, [r7, #3]
 800e540:	2b01      	cmp	r3, #1
 800e542:	d10d      	bne.n	800e560 <_ZN4tama27Nokia5110DisplayDataManager8setPixelERhjNS_10PixelColorE+0x30>
    {
       pixelSegment |= 1 << position;
 800e544:	68bb      	ldr	r3, [r7, #8]
 800e546:	781b      	ldrb	r3, [r3, #0]
 800e548:	b25a      	sxtb	r2, r3
 800e54a:	2101      	movs	r1, #1
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	fa01 f303 	lsl.w	r3, r1, r3
 800e552:	b25b      	sxtb	r3, r3
 800e554:	4313      	orrs	r3, r2
 800e556:	b25b      	sxtb	r3, r3
 800e558:	b2da      	uxtb	r2, r3
 800e55a:	68bb      	ldr	r3, [r7, #8]
 800e55c:	701a      	strb	r2, [r3, #0]
    } else {
        pixelSegment &= ~(1 << position);
    }
}
 800e55e:	e00e      	b.n	800e57e <_ZN4tama27Nokia5110DisplayDataManager8setPixelERhjNS_10PixelColorE+0x4e>
        pixelSegment &= ~(1 << position);
 800e560:	68bb      	ldr	r3, [r7, #8]
 800e562:	781b      	ldrb	r3, [r3, #0]
 800e564:	b25a      	sxtb	r2, r3
 800e566:	2101      	movs	r1, #1
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	fa01 f303 	lsl.w	r3, r1, r3
 800e56e:	b25b      	sxtb	r3, r3
 800e570:	43db      	mvns	r3, r3
 800e572:	b25b      	sxtb	r3, r3
 800e574:	4013      	ands	r3, r2
 800e576:	b25b      	sxtb	r3, r3
 800e578:	b2da      	uxtb	r2, r3
 800e57a:	68bb      	ldr	r3, [r7, #8]
 800e57c:	701a      	strb	r2, [r3, #0]
}
 800e57e:	bf00      	nop
 800e580:	3714      	adds	r7, #20
 800e582:	46bd      	mov	sp, r7
 800e584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e588:	4770      	bx	lr

0800e58a <_ZN4tama18Stm32TextureLoader4loadERKNS_12TextureAssetE>:
//

#include "Stm32TextureLoader.h"

std::shared_ptr<tama::Texture> tama::Stm32TextureLoader::load(const TextureAsset & textureAsset)
{
 800e58a:	b590      	push	{r4, r7, lr}
 800e58c:	b089      	sub	sp, #36	; 0x24
 800e58e:	af00      	add	r7, sp, #0
 800e590:	60f8      	str	r0, [r7, #12]
 800e592:	60b9      	str	r1, [r7, #8]
 800e594:	607a      	str	r2, [r7, #4]
    std::shared_ptr<Texture> texture = std::make_shared<Texture>(textureAsset.width, textureAsset.height);
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	1d19      	adds	r1, r3, #4
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	f103 0208 	add.w	r2, r3, #8
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	4618      	mov	r0, r3
 800e5a4:	f000 f895 	bl	800e6d2 <_ZSt11make_sharedIN4tama7TextureEJRKjS3_EESt10shared_ptrIT_EDpOT0_>
    PixelColor ** textureData = createEmptyTextureData(textureAsset.width, textureAsset.height);
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	6859      	ldr	r1, [r3, #4]
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	689b      	ldr	r3, [r3, #8]
 800e5b0:	461a      	mov	r2, r3
 800e5b2:	68b8      	ldr	r0, [r7, #8]
 800e5b4:	f000 f854 	bl	800e660 <_ZN4tama18Stm32TextureLoader22createEmptyTextureDataEjj>
 800e5b8:	6178      	str	r0, [r7, #20]

    for (unsigned i = 0; i < textureAsset.height; ++i)
 800e5ba:	2300      	movs	r3, #0
 800e5bc:	61fb      	str	r3, [r7, #28]
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	689b      	ldr	r3, [r3, #8]
 800e5c2:	69fa      	ldr	r2, [r7, #28]
 800e5c4:	429a      	cmp	r2, r3
 800e5c6:	d227      	bcs.n	800e618 <_ZN4tama18Stm32TextureLoader4loadERKNS_12TextureAssetE+0x8e>
    {
        for (unsigned j = 0; j < textureAsset.width; ++j)
 800e5c8:	2300      	movs	r3, #0
 800e5ca:	61bb      	str	r3, [r7, #24]
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	685b      	ldr	r3, [r3, #4]
 800e5d0:	69ba      	ldr	r2, [r7, #24]
 800e5d2:	429a      	cmp	r2, r3
 800e5d4:	d21c      	bcs.n	800e610 <_ZN4tama18Stm32TextureLoader4loadERKNS_12TextureAssetE+0x86>
        {
            textureData[i][j] = colorFromData(textureAsset.data[i * textureAsset.width + j]);
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	681a      	ldr	r2, [r3, #0]
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	685b      	ldr	r3, [r3, #4]
 800e5de:	69f9      	ldr	r1, [r7, #28]
 800e5e0:	fb01 f103 	mul.w	r1, r1, r3
 800e5e4:	69bb      	ldr	r3, [r7, #24]
 800e5e6:	440b      	add	r3, r1
 800e5e8:	005b      	lsls	r3, r3, #1
 800e5ea:	4413      	add	r3, r2
 800e5ec:	f9b3 1000 	ldrsh.w	r1, [r3]
 800e5f0:	69fb      	ldr	r3, [r7, #28]
 800e5f2:	009b      	lsls	r3, r3, #2
 800e5f4:	697a      	ldr	r2, [r7, #20]
 800e5f6:	4413      	add	r3, r2
 800e5f8:	681a      	ldr	r2, [r3, #0]
 800e5fa:	69bb      	ldr	r3, [r7, #24]
 800e5fc:	18d4      	adds	r4, r2, r3
 800e5fe:	68b8      	ldr	r0, [r7, #8]
 800e600:	f000 f815 	bl	800e62e <_ZN4tama18Stm32TextureLoader13colorFromDataEs>
 800e604:	4603      	mov	r3, r0
 800e606:	7023      	strb	r3, [r4, #0]
        for (unsigned j = 0; j < textureAsset.width; ++j)
 800e608:	69bb      	ldr	r3, [r7, #24]
 800e60a:	3301      	adds	r3, #1
 800e60c:	61bb      	str	r3, [r7, #24]
 800e60e:	e7dd      	b.n	800e5cc <_ZN4tama18Stm32TextureLoader4loadERKNS_12TextureAssetE+0x42>
    for (unsigned i = 0; i < textureAsset.height; ++i)
 800e610:	69fb      	ldr	r3, [r7, #28]
 800e612:	3301      	adds	r3, #1
 800e614:	61fb      	str	r3, [r7, #28]
 800e616:	e7d2      	b.n	800e5be <_ZN4tama18Stm32TextureLoader4loadERKNS_12TextureAssetE+0x34>
        }
    }

    texture->data = textureData;
 800e618:	68f8      	ldr	r0, [r7, #12]
 800e61a:	f7f7 f973 	bl	8005904 <_ZNKSt19__shared_ptr_accessIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800e61e:	4602      	mov	r2, r0
 800e620:	697b      	ldr	r3, [r7, #20]
 800e622:	60d3      	str	r3, [r2, #12]

    return texture;
 800e624:	bf00      	nop
}
 800e626:	68f8      	ldr	r0, [r7, #12]
 800e628:	3724      	adds	r7, #36	; 0x24
 800e62a:	46bd      	mov	sp, r7
 800e62c:	bd90      	pop	{r4, r7, pc}

0800e62e <_ZN4tama18Stm32TextureLoader13colorFromDataEs>:

tama::PixelColor tama::Stm32TextureLoader::colorFromData(short data)
{
 800e62e:	b480      	push	{r7}
 800e630:	b083      	sub	sp, #12
 800e632:	af00      	add	r7, sp, #0
 800e634:	6078      	str	r0, [r7, #4]
 800e636:	460b      	mov	r3, r1
 800e638:	807b      	strh	r3, [r7, #2]
    if (data == 15)
 800e63a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e63e:	2b0f      	cmp	r3, #15
 800e640:	d101      	bne.n	800e646 <_ZN4tama18Stm32TextureLoader13colorFromDataEs+0x18>
    {
        return PixelColor::WHITE;
 800e642:	2300      	movs	r3, #0
 800e644:	e006      	b.n	800e654 <_ZN4tama18Stm32TextureLoader13colorFromDataEs+0x26>
    } else if (data == 0)
 800e646:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d101      	bne.n	800e652 <_ZN4tama18Stm32TextureLoader13colorFromDataEs+0x24>
    {
        return PixelColor::BLACK;
 800e64e:	2301      	movs	r3, #1
 800e650:	e000      	b.n	800e654 <_ZN4tama18Stm32TextureLoader13colorFromDataEs+0x26>
    }
    return PixelColor::TRANSPARENT;
 800e652:	2302      	movs	r3, #2
}
 800e654:	4618      	mov	r0, r3
 800e656:	370c      	adds	r7, #12
 800e658:	46bd      	mov	sp, r7
 800e65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e65e:	4770      	bx	lr

0800e660 <_ZN4tama18Stm32TextureLoader22createEmptyTextureDataEjj>:

tama::PixelColor ** tama::Stm32TextureLoader::createEmptyTextureData(unsigned int width, unsigned int height)
{
 800e660:	b590      	push	{r4, r7, lr}
 800e662:	b087      	sub	sp, #28
 800e664:	af00      	add	r7, sp, #0
 800e666:	60f8      	str	r0, [r7, #12]
 800e668:	60b9      	str	r1, [r7, #8]
 800e66a:	607a      	str	r2, [r7, #4]
    PixelColor ** textureData = new PixelColor*[height];
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	4a12      	ldr	r2, [pc, #72]	; (800e6b8 <_ZN4tama18Stm32TextureLoader22createEmptyTextureDataEjj+0x58>)
 800e670:	4293      	cmp	r3, r2
 800e672:	d801      	bhi.n	800e678 <_ZN4tama18Stm32TextureLoader22createEmptyTextureDataEjj+0x18>
 800e674:	009b      	lsls	r3, r3, #2
 800e676:	e001      	b.n	800e67c <_ZN4tama18Stm32TextureLoader22createEmptyTextureDataEjj+0x1c>
 800e678:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e67c:	4618      	mov	r0, r3
 800e67e:	f007 fc9e 	bl	8015fbe <_Znaj>
 800e682:	4603      	mov	r3, r0
 800e684:	613b      	str	r3, [r7, #16]
    for (unsigned i = 0; i < height; ++i)
 800e686:	2300      	movs	r3, #0
 800e688:	617b      	str	r3, [r7, #20]
 800e68a:	697a      	ldr	r2, [r7, #20]
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	429a      	cmp	r2, r3
 800e690:	d20d      	bcs.n	800e6ae <_ZN4tama18Stm32TextureLoader22createEmptyTextureDataEjj+0x4e>
    {
        textureData[i] = new PixelColor[width];
 800e692:	68b9      	ldr	r1, [r7, #8]
 800e694:	697b      	ldr	r3, [r7, #20]
 800e696:	009b      	lsls	r3, r3, #2
 800e698:	693a      	ldr	r2, [r7, #16]
 800e69a:	18d4      	adds	r4, r2, r3
 800e69c:	4608      	mov	r0, r1
 800e69e:	f007 fc8e 	bl	8015fbe <_Znaj>
 800e6a2:	4603      	mov	r3, r0
 800e6a4:	6023      	str	r3, [r4, #0]
    for (unsigned i = 0; i < height; ++i)
 800e6a6:	697b      	ldr	r3, [r7, #20]
 800e6a8:	3301      	adds	r3, #1
 800e6aa:	617b      	str	r3, [r7, #20]
 800e6ac:	e7ed      	b.n	800e68a <_ZN4tama18Stm32TextureLoader22createEmptyTextureDataEjj+0x2a>
    }
    return textureData;
 800e6ae:	693b      	ldr	r3, [r7, #16]
}
 800e6b0:	4618      	mov	r0, r3
 800e6b2:	371c      	adds	r7, #28
 800e6b4:	46bd      	mov	sp, r7
 800e6b6:	bd90      	pop	{r4, r7, pc}
 800e6b8:	1ffffffe 	.word	0x1ffffffe

0800e6bc <_ZSt7forwardIRKjEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800e6bc:	b480      	push	{r7}
 800e6be:	b083      	sub	sp, #12
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	370c      	adds	r7, #12
 800e6ca:	46bd      	mov	sp, r7
 800e6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d0:	4770      	bx	lr

0800e6d2 <_ZSt11make_sharedIN4tama7TextureEJRKjS3_EESt10shared_ptrIT_EDpOT0_>:
    make_shared(_Args&&... __args)
 800e6d2:	b590      	push	{r4, r7, lr}
 800e6d4:	b087      	sub	sp, #28
 800e6d6:	af00      	add	r7, sp, #0
 800e6d8:	60f8      	str	r0, [r7, #12]
 800e6da:	60b9      	str	r1, [r7, #8]
 800e6dc:	607a      	str	r2, [r7, #4]
				       std::forward<_Args>(__args)...);
 800e6de:	f107 0314 	add.w	r3, r7, #20
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	f7f7 f948 	bl	8005978 <_ZNSaIN4tama7TextureEEC1Ev>
 800e6e8:	68b8      	ldr	r0, [r7, #8]
 800e6ea:	f7ff ffe7 	bl	800e6bc <_ZSt7forwardIRKjEOT_RNSt16remove_referenceIS2_E4typeE>
 800e6ee:	4604      	mov	r4, r0
 800e6f0:	6878      	ldr	r0, [r7, #4]
 800e6f2:	f7ff ffe3 	bl	800e6bc <_ZSt7forwardIRKjEOT_RNSt16remove_referenceIS2_E4typeE>
 800e6f6:	4603      	mov	r3, r0
 800e6f8:	68f8      	ldr	r0, [r7, #12]
 800e6fa:	f107 0114 	add.w	r1, r7, #20
 800e6fe:	4622      	mov	r2, r4
 800e700:	f000 f809 	bl	800e716 <_ZSt15allocate_sharedIN4tama7TextureESaIS1_EJRKjS4_EESt10shared_ptrIT_ERKT0_DpOT1_>
 800e704:	f107 0314 	add.w	r3, r7, #20
 800e708:	4618      	mov	r0, r3
 800e70a:	f7f7 f941 	bl	8005990 <_ZNSaIN4tama7TextureEED1Ev>
    }
 800e70e:	68f8      	ldr	r0, [r7, #12]
 800e710:	371c      	adds	r7, #28
 800e712:	46bd      	mov	sp, r7
 800e714:	bd90      	pop	{r4, r7, pc}

0800e716 <_ZSt15allocate_sharedIN4tama7TextureESaIS1_EJRKjS4_EESt10shared_ptrIT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 800e716:	b5b0      	push	{r4, r5, r7, lr}
 800e718:	b088      	sub	sp, #32
 800e71a:	af02      	add	r7, sp, #8
 800e71c:	60f8      	str	r0, [r7, #12]
 800e71e:	60b9      	str	r1, [r7, #8]
 800e720:	607a      	str	r2, [r7, #4]
 800e722:	603b      	str	r3, [r7, #0]
			     std::forward<_Args>(__args)...);
 800e724:	6878      	ldr	r0, [r7, #4]
 800e726:	f7ff ffc9 	bl	800e6bc <_ZSt7forwardIRKjEOT_RNSt16remove_referenceIS2_E4typeE>
 800e72a:	4604      	mov	r4, r0
 800e72c:	6838      	ldr	r0, [r7, #0]
 800e72e:	f7ff ffc5 	bl	800e6bc <_ZSt7forwardIRKjEOT_RNSt16remove_referenceIS2_E4typeE>
 800e732:	4603      	mov	r3, r0
 800e734:	9300      	str	r3, [sp, #0]
 800e736:	4623      	mov	r3, r4
 800e738:	68ba      	ldr	r2, [r7, #8]
 800e73a:	4629      	mov	r1, r5
 800e73c:	68f8      	ldr	r0, [r7, #12]
 800e73e:	f000 f804 	bl	800e74a <_ZNSt10shared_ptrIN4tama7TextureEEC1ISaIS1_EJRKjS6_EEESt19_Sp_make_shared_tagRKT_DpOT0_>
    }
 800e742:	68f8      	ldr	r0, [r7, #12]
 800e744:	3718      	adds	r7, #24
 800e746:	46bd      	mov	sp, r7
 800e748:	bdb0      	pop	{r4, r5, r7, pc}

0800e74a <_ZNSt10shared_ptrIN4tama7TextureEEC1ISaIS1_EJRKjS6_EEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 800e74a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e74c:	b087      	sub	sp, #28
 800e74e:	af02      	add	r7, sp, #8
 800e750:	60f8      	str	r0, [r7, #12]
 800e752:	7239      	strb	r1, [r7, #8]
 800e754:	607a      	str	r2, [r7, #4]
 800e756:	603b      	str	r3, [r7, #0]
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
 800e758:	68fc      	ldr	r4, [r7, #12]
 800e75a:	6838      	ldr	r0, [r7, #0]
 800e75c:	f7ff ffae 	bl	800e6bc <_ZSt7forwardIRKjEOT_RNSt16remove_referenceIS2_E4typeE>
 800e760:	4605      	mov	r5, r0
 800e762:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e764:	f7ff ffaa 	bl	800e6bc <_ZSt7forwardIRKjEOT_RNSt16remove_referenceIS2_E4typeE>
 800e768:	4603      	mov	r3, r0
 800e76a:	9300      	str	r3, [sp, #0]
 800e76c:	462b      	mov	r3, r5
 800e76e:	687a      	ldr	r2, [r7, #4]
 800e770:	4631      	mov	r1, r6
 800e772:	4620      	mov	r0, r4
 800e774:	f000 f805 	bl	800e782 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJRKjS8_EEESt19_Sp_make_shared_tagRKT_DpOT0_>
	{ }
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	4618      	mov	r0, r3
 800e77c:	3714      	adds	r7, #20
 800e77e:	46bd      	mov	sp, r7
 800e780:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e782 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJRKjS8_EEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 800e782:	b590      	push	{r4, r7, lr}
 800e784:	b08d      	sub	sp, #52	; 0x34
 800e786:	af00      	add	r7, sp, #0
 800e788:	60f8      	str	r0, [r7, #12]
 800e78a:	7239      	strb	r1, [r7, #8]
 800e78c:	607a      	str	r2, [r7, #4]
 800e78e:	603b      	str	r3, [r7, #0]
	: _M_ptr(), _M_refcount()
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	2200      	movs	r2, #0
 800e794:	601a      	str	r2, [r3, #0]
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	3304      	adds	r3, #4
 800e79a:	4618      	mov	r0, r3
 800e79c:	f7f2 fb65 	bl	8000e6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 800e7a0:	f107 0320 	add.w	r3, r7, #32
 800e7a4:	6879      	ldr	r1, [r7, #4]
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	f7f7 f93d 	bl	8005a26 <_ZNSaIN4tama7TextureEEC1ERKS1_>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 800e7ac:	f107 0318 	add.w	r3, r7, #24
 800e7b0:	f107 0220 	add.w	r2, r7, #32
 800e7b4:	4611      	mov	r1, r2
 800e7b6:	4618      	mov	r0, r3
 800e7b8:	f7f7 f943 	bl	8005a42 <_ZSt18__allocate_guardedISaIN4tama7TextureEEESt15__allocated_ptrIT_ERS4_>
	  auto __ptr = __guard.get();
 800e7bc:	f107 0318 	add.w	r3, r7, #24
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	f7f7 f966 	bl	8005a92 <_ZNSt15__allocated_ptrISaIN4tama7TextureEEE3getEv>
 800e7c6:	62f8      	str	r0, [r7, #44]	; 0x2c
	  __traits::construct(__del._M_alloc, __ptr,
 800e7c8:	6838      	ldr	r0, [r7, #0]
 800e7ca:	f7ff ff77 	bl	800e6bc <_ZSt7forwardIRKjEOT_RNSt16remove_referenceIS2_E4typeE>
 800e7ce:	4604      	mov	r4, r0
 800e7d0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800e7d2:	f7ff ff73 	bl	800e6bc <_ZSt7forwardIRKjEOT_RNSt16remove_referenceIS2_E4typeE>
 800e7d6:	4603      	mov	r3, r0
 800e7d8:	f107 0020 	add.w	r0, r7, #32
 800e7dc:	4622      	mov	r2, r4
 800e7de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e7e0:	f000 f84e 	bl	800e880 <_ZNSt16allocator_traitsISaIN4tama7TextureEEE9constructIS1_JRKjS6_EEEvRS2_PT_DpOT0_>
	  __guard = nullptr;
 800e7e4:	f107 0318 	add.w	r3, r7, #24
 800e7e8:	2100      	movs	r1, #0
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	f7f7 f95f 	bl	8005aae <_ZNSt15__allocated_ptrISaIN4tama7TextureEEEaSEDn>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 800e7f0:	f107 0220 	add.w	r2, r7, #32
 800e7f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e7f8:	4611      	mov	r1, r2
 800e7fa:	4618      	mov	r0, r3
 800e7fc:	f7f7 f903 	bl	8005a06 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>
 800e800:	f107 0220 	add.w	r2, r7, #32
 800e804:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e808:	4611      	mov	r1, r2
 800e80a:	4618      	mov	r0, r3
 800e80c:	f7f7 f90b 	bl	8005a26 <_ZNSaIN4tama7TextureEEC1ERKS1_>
 800e810:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e814:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800e818:	f107 0014 	add.w	r0, r7, #20
 800e81c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e81e:	f7f7 f97b 	bl	8005b18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama7TextureENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
 800e822:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e826:	4618      	mov	r0, r3
 800e828:	f7f7 f8b2 	bl	8005990 <_ZNSaIN4tama7TextureEED1Ev>
 800e82c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e830:	4618      	mov	r0, r3
 800e832:	f7f7 f8db 	bl	80059ec <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	  _M_refcount._M_swap(__count);
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	3304      	adds	r3, #4
 800e83a:	f107 0214 	add.w	r2, r7, #20
 800e83e:	4611      	mov	r1, r2
 800e840:	4618      	mov	r0, r3
 800e842:	f7f2 fb20 	bl	8000e86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  _M_ptr = __ptr;
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e84a:	601a      	str	r2, [r3, #0]
	  _M_enable_shared_from_this_with(_M_ptr);
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	4619      	mov	r1, r3
 800e852:	68f8      	ldr	r0, [r7, #12]
 800e854:	f7f7 f9b7 	bl	8005bc6 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 800e858:	f107 0314 	add.w	r3, r7, #20
 800e85c:	4618      	mov	r0, r3
 800e85e:	f7f2 f8e8 	bl	8000a32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 800e862:	f107 0318 	add.w	r3, r7, #24
 800e866:	4618      	mov	r0, r3
 800e868:	f7f7 f8fe 	bl	8005a68 <_ZNSt15__allocated_ptrISaIN4tama7TextureEEED1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 800e86c:	f107 0320 	add.w	r3, r7, #32
 800e870:	4618      	mov	r0, r3
 800e872:	f7f7 f8bb 	bl	80059ec <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	}
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	4618      	mov	r0, r3
 800e87a:	3734      	adds	r7, #52	; 0x34
 800e87c:	46bd      	mov	sp, r7
 800e87e:	bd90      	pop	{r4, r7, pc}

0800e880 <_ZNSt16allocator_traitsISaIN4tama7TextureEEE9constructIS1_JRKjS6_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 800e880:	b590      	push	{r4, r7, lr}
 800e882:	b085      	sub	sp, #20
 800e884:	af00      	add	r7, sp, #0
 800e886:	60f8      	str	r0, [r7, #12]
 800e888:	60b9      	str	r1, [r7, #8]
 800e88a:	607a      	str	r2, [r7, #4]
 800e88c:	603b      	str	r3, [r7, #0]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800e88e:	6878      	ldr	r0, [r7, #4]
 800e890:	f7ff ff14 	bl	800e6bc <_ZSt7forwardIRKjEOT_RNSt16remove_referenceIS2_E4typeE>
 800e894:	4604      	mov	r4, r0
 800e896:	6838      	ldr	r0, [r7, #0]
 800e898:	f7ff ff10 	bl	800e6bc <_ZSt7forwardIRKjEOT_RNSt16remove_referenceIS2_E4typeE>
 800e89c:	4603      	mov	r3, r0
 800e89e:	4622      	mov	r2, r4
 800e8a0:	68b9      	ldr	r1, [r7, #8]
 800e8a2:	68f8      	ldr	r0, [r7, #12]
 800e8a4:	f000 f804 	bl	800e8b0 <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE9constructIS2_JRKjS6_EEEvPT_DpOT0_>
 800e8a8:	bf00      	nop
 800e8aa:	3714      	adds	r7, #20
 800e8ac:	46bd      	mov	sp, r7
 800e8ae:	bd90      	pop	{r4, r7, pc}

0800e8b0 <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE9constructIS2_JRKjS6_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800e8b0:	b5b0      	push	{r4, r5, r7, lr}
 800e8b2:	b084      	sub	sp, #16
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	60f8      	str	r0, [r7, #12]
 800e8b8:	60b9      	str	r1, [r7, #8]
 800e8ba:	607a      	str	r2, [r7, #4]
 800e8bc:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800e8be:	6878      	ldr	r0, [r7, #4]
 800e8c0:	f7ff fefc 	bl	800e6bc <_ZSt7forwardIRKjEOT_RNSt16remove_referenceIS2_E4typeE>
 800e8c4:	4603      	mov	r3, r0
 800e8c6:	681c      	ldr	r4, [r3, #0]
 800e8c8:	6838      	ldr	r0, [r7, #0]
 800e8ca:	f7ff fef7 	bl	800e6bc <_ZSt7forwardIRKjEOT_RNSt16remove_referenceIS2_E4typeE>
 800e8ce:	4603      	mov	r3, r0
 800e8d0:	681d      	ldr	r5, [r3, #0]
 800e8d2:	68bb      	ldr	r3, [r7, #8]
 800e8d4:	4619      	mov	r1, r3
 800e8d6:	2010      	movs	r0, #16
 800e8d8:	f7f1 fe29 	bl	800052e <_ZnwjPv>
 800e8dc:	4603      	mov	r3, r0
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d004      	beq.n	800e8ec <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE9constructIS2_JRKjS6_EEEvPT_DpOT0_+0x3c>
 800e8e2:	462a      	mov	r2, r5
 800e8e4:	4621      	mov	r1, r4
 800e8e6:	4618      	mov	r0, r3
 800e8e8:	f7f6 fef4 	bl	80056d4 <_ZN4tama7TextureC1Ejj>
 800e8ec:	bf00      	nop
 800e8ee:	3710      	adds	r7, #16
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	bdb0      	pop	{r4, r5, r7, pc}

0800e8f4 <_ZN4tama16Stm32TimeMonitor10startTimerEv>:
//

#include "Stm32TimeMonitor.h"

void tama::Stm32TimeMonitor::startTimer()
{
 800e8f4:	b580      	push	{r7, lr}
 800e8f6:	b082      	sub	sp, #8
 800e8f8:	af00      	add	r7, sp, #0
 800e8fa:	6078      	str	r0, [r7, #4]
    timestamp = HAL_GetTick();
 800e8fc:	f000 fe4a 	bl	800f594 <HAL_GetTick>
 800e900:	4602      	mov	r2, r0
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	605a      	str	r2, [r3, #4]
}
 800e906:	bf00      	nop
 800e908:	3708      	adds	r7, #8
 800e90a:	46bd      	mov	sp, r7
 800e90c:	bd80      	pop	{r7, pc}

0800e90e <_ZN4tama16Stm32TimeMonitor14getElapsedTimeEv>:

unsigned int tama::Stm32TimeMonitor::getElapsedTime()
{
 800e90e:	b580      	push	{r7, lr}
 800e910:	b082      	sub	sp, #8
 800e912:	af00      	add	r7, sp, #0
 800e914:	6078      	str	r0, [r7, #4]
    return HAL_GetTick() - timestamp;
 800e916:	f000 fe3d 	bl	800f594 <HAL_GetTick>
 800e91a:	4602      	mov	r2, r0
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	685b      	ldr	r3, [r3, #4]
 800e920:	1ad3      	subs	r3, r2, r3
}
 800e922:	4618      	mov	r0, r3
 800e924:	3708      	adds	r7, #8
 800e926:	46bd      	mov	sp, r7
 800e928:	bd80      	pop	{r7, pc}
	...

0800e92c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800e92c:	b580      	push	{r7, lr}
 800e92e:	b08c      	sub	sp, #48	; 0x30
 800e930:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e932:	f107 031c 	add.w	r3, r7, #28
 800e936:	2200      	movs	r2, #0
 800e938:	601a      	str	r2, [r3, #0]
 800e93a:	605a      	str	r2, [r3, #4]
 800e93c:	609a      	str	r2, [r3, #8]
 800e93e:	60da      	str	r2, [r3, #12]
 800e940:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800e942:	2300      	movs	r3, #0
 800e944:	61bb      	str	r3, [r7, #24]
 800e946:	4b7e      	ldr	r3, [pc, #504]	; (800eb40 <MX_GPIO_Init+0x214>)
 800e948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e94a:	4a7d      	ldr	r2, [pc, #500]	; (800eb40 <MX_GPIO_Init+0x214>)
 800e94c:	f043 0310 	orr.w	r3, r3, #16
 800e950:	6313      	str	r3, [r2, #48]	; 0x30
 800e952:	4b7b      	ldr	r3, [pc, #492]	; (800eb40 <MX_GPIO_Init+0x214>)
 800e954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e956:	f003 0310 	and.w	r3, r3, #16
 800e95a:	61bb      	str	r3, [r7, #24]
 800e95c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800e95e:	2300      	movs	r3, #0
 800e960:	617b      	str	r3, [r7, #20]
 800e962:	4b77      	ldr	r3, [pc, #476]	; (800eb40 <MX_GPIO_Init+0x214>)
 800e964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e966:	4a76      	ldr	r2, [pc, #472]	; (800eb40 <MX_GPIO_Init+0x214>)
 800e968:	f043 0304 	orr.w	r3, r3, #4
 800e96c:	6313      	str	r3, [r2, #48]	; 0x30
 800e96e:	4b74      	ldr	r3, [pc, #464]	; (800eb40 <MX_GPIO_Init+0x214>)
 800e970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e972:	f003 0304 	and.w	r3, r3, #4
 800e976:	617b      	str	r3, [r7, #20]
 800e978:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800e97a:	2300      	movs	r3, #0
 800e97c:	613b      	str	r3, [r7, #16]
 800e97e:	4b70      	ldr	r3, [pc, #448]	; (800eb40 <MX_GPIO_Init+0x214>)
 800e980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e982:	4a6f      	ldr	r2, [pc, #444]	; (800eb40 <MX_GPIO_Init+0x214>)
 800e984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e988:	6313      	str	r3, [r2, #48]	; 0x30
 800e98a:	4b6d      	ldr	r3, [pc, #436]	; (800eb40 <MX_GPIO_Init+0x214>)
 800e98c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e98e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e992:	613b      	str	r3, [r7, #16]
 800e994:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800e996:	2300      	movs	r3, #0
 800e998:	60fb      	str	r3, [r7, #12]
 800e99a:	4b69      	ldr	r3, [pc, #420]	; (800eb40 <MX_GPIO_Init+0x214>)
 800e99c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e99e:	4a68      	ldr	r2, [pc, #416]	; (800eb40 <MX_GPIO_Init+0x214>)
 800e9a0:	f043 0301 	orr.w	r3, r3, #1
 800e9a4:	6313      	str	r3, [r2, #48]	; 0x30
 800e9a6:	4b66      	ldr	r3, [pc, #408]	; (800eb40 <MX_GPIO_Init+0x214>)
 800e9a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9aa:	f003 0301 	and.w	r3, r3, #1
 800e9ae:	60fb      	str	r3, [r7, #12]
 800e9b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	60bb      	str	r3, [r7, #8]
 800e9b6:	4b62      	ldr	r3, [pc, #392]	; (800eb40 <MX_GPIO_Init+0x214>)
 800e9b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9ba:	4a61      	ldr	r2, [pc, #388]	; (800eb40 <MX_GPIO_Init+0x214>)
 800e9bc:	f043 0302 	orr.w	r3, r3, #2
 800e9c0:	6313      	str	r3, [r2, #48]	; 0x30
 800e9c2:	4b5f      	ldr	r3, [pc, #380]	; (800eb40 <MX_GPIO_Init+0x214>)
 800e9c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9c6:	f003 0302 	and.w	r3, r3, #2
 800e9ca:	60bb      	str	r3, [r7, #8]
 800e9cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800e9ce:	2300      	movs	r3, #0
 800e9d0:	607b      	str	r3, [r7, #4]
 800e9d2:	4b5b      	ldr	r3, [pc, #364]	; (800eb40 <MX_GPIO_Init+0x214>)
 800e9d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9d6:	4a5a      	ldr	r2, [pc, #360]	; (800eb40 <MX_GPIO_Init+0x214>)
 800e9d8:	f043 0308 	orr.w	r3, r3, #8
 800e9dc:	6313      	str	r3, [r2, #48]	; 0x30
 800e9de:	4b58      	ldr	r3, [pc, #352]	; (800eb40 <MX_GPIO_Init+0x214>)
 800e9e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9e2:	f003 0308 	and.w	r3, r3, #8
 800e9e6:	607b      	str	r3, [r7, #4]
 800e9e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|RST_Pin|BL_Pin, GPIO_PIN_RESET);
 800e9ea:	2200      	movs	r2, #0
 800e9ec:	f44f 7122 	mov.w	r1, #648	; 0x288
 800e9f0:	4854      	ldr	r0, [pc, #336]	; (800eb44 <MX_GPIO_Init+0x218>)
 800e9f2:	f001 f8a9 	bl	800fb48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800e9f6:	2201      	movs	r2, #1
 800e9f8:	2101      	movs	r1, #1
 800e9fa:	4853      	ldr	r0, [pc, #332]	; (800eb48 <MX_GPIO_Init+0x21c>)
 800e9fc:	f001 f8a4 	bl	800fb48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 800ea00:	2200      	movs	r2, #0
 800ea02:	2120      	movs	r1, #32
 800ea04:	4850      	ldr	r0, [pc, #320]	; (800eb48 <MX_GPIO_Init+0x21c>)
 800ea06:	f001 f89f 	bl	800fb48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 800ea0a:	2200      	movs	r2, #0
 800ea0c:	2102      	movs	r1, #2
 800ea0e:	484f      	ldr	r0, [pc, #316]	; (800eb4c <MX_GPIO_Init+0x220>)
 800ea10:	f001 f89a 	bl	800fb48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800ea14:	2200      	movs	r2, #0
 800ea16:	f24f 0110 	movw	r1, #61456	; 0xf010
 800ea1a:	484d      	ldr	r0, [pc, #308]	; (800eb50 <MX_GPIO_Init+0x224>)
 800ea1c:	f001 f894 	bl	800fb48 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 800ea20:	2304      	movs	r3, #4
 800ea22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ea24:	2300      	movs	r3, #0
 800ea26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ea28:	2300      	movs	r3, #0
 800ea2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 800ea2c:	f107 031c 	add.w	r3, r7, #28
 800ea30:	4619      	mov	r1, r3
 800ea32:	4844      	ldr	r0, [pc, #272]	; (800eb44 <MX_GPIO_Init+0x218>)
 800ea34:	f000 feee 	bl	800f814 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|RST_Pin|BL_Pin;
 800ea38:	f44f 7322 	mov.w	r3, #648	; 0x288
 800ea3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ea3e:	2301      	movs	r3, #1
 800ea40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ea42:	2300      	movs	r3, #0
 800ea44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ea46:	2300      	movs	r3, #0
 800ea48:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800ea4a:	f107 031c 	add.w	r3, r7, #28
 800ea4e:	4619      	mov	r1, r3
 800ea50:	483c      	ldr	r0, [pc, #240]	; (800eb44 <MX_GPIO_Init+0x218>)
 800ea52:	f000 fedf 	bl	800f814 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 800ea56:	2332      	movs	r3, #50	; 0x32
 800ea58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800ea5a:	4b3e      	ldr	r3, [pc, #248]	; (800eb54 <MX_GPIO_Init+0x228>)
 800ea5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ea5e:	2300      	movs	r3, #0
 800ea60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800ea62:	f107 031c 	add.w	r3, r7, #28
 800ea66:	4619      	mov	r1, r3
 800ea68:	4836      	ldr	r0, [pc, #216]	; (800eb44 <MX_GPIO_Init+0x218>)
 800ea6a:	f000 fed3 	bl	800f814 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|DC_Pin;
 800ea6e:	2321      	movs	r3, #33	; 0x21
 800ea70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ea72:	2301      	movs	r3, #1
 800ea74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ea76:	2300      	movs	r3, #0
 800ea78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ea7a:	2300      	movs	r3, #0
 800ea7c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ea7e:	f107 031c 	add.w	r3, r7, #28
 800ea82:	4619      	mov	r1, r3
 800ea84:	4830      	ldr	r0, [pc, #192]	; (800eb48 <MX_GPIO_Init+0x21c>)
 800ea86:	f000 fec5 	bl	800f814 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800ea8a:	2301      	movs	r3, #1
 800ea8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800ea8e:	4b31      	ldr	r3, [pc, #196]	; (800eb54 <MX_GPIO_Init+0x228>)
 800ea90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ea92:	2300      	movs	r3, #0
 800ea94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ea96:	f107 031c 	add.w	r3, r7, #28
 800ea9a:	4619      	mov	r1, r3
 800ea9c:	482e      	ldr	r0, [pc, #184]	; (800eb58 <MX_GPIO_Init+0x22c>)
 800ea9e:	f000 feb9 	bl	800f814 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CE_Pin;
 800eaa2:	2302      	movs	r3, #2
 800eaa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800eaa6:	2301      	movs	r3, #1
 800eaa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eaaa:	2300      	movs	r3, #0
 800eaac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800eaae:	2300      	movs	r3, #0
 800eab0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CE_GPIO_Port, &GPIO_InitStruct);
 800eab2:	f107 031c 	add.w	r3, r7, #28
 800eab6:	4619      	mov	r1, r3
 800eab8:	4824      	ldr	r0, [pc, #144]	; (800eb4c <MX_GPIO_Init+0x220>)
 800eaba:	f000 feab 	bl	800f814 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_B_Pin;
 800eabe:	f44f 7380 	mov.w	r3, #256	; 0x100
 800eac2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800eac4:	2300      	movs	r3, #0
 800eac6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800eac8:	2301      	movs	r3, #1
 800eaca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUTTON_B_GPIO_Port, &GPIO_InitStruct);
 800eacc:	f107 031c 	add.w	r3, r7, #28
 800ead0:	4619      	mov	r1, r3
 800ead2:	481f      	ldr	r0, [pc, #124]	; (800eb50 <MX_GPIO_Init+0x224>)
 800ead4:	f000 fe9e 	bl	800f814 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_C_Pin;
 800ead8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eadc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800eade:	4b1f      	ldr	r3, [pc, #124]	; (800eb5c <MX_GPIO_Init+0x230>)
 800eae0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800eae2:	2301      	movs	r3, #1
 800eae4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUTTON_C_GPIO_Port, &GPIO_InitStruct);
 800eae6:	f107 031c 	add.w	r3, r7, #28
 800eaea:	4619      	mov	r1, r3
 800eaec:	4818      	ldr	r0, [pc, #96]	; (800eb50 <MX_GPIO_Init+0x224>)
 800eaee:	f000 fe91 	bl	800f814 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800eaf2:	f24f 0310 	movw	r3, #61456	; 0xf010
 800eaf6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800eaf8:	2301      	movs	r3, #1
 800eafa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eafc:	2300      	movs	r3, #0
 800eafe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800eb00:	2300      	movs	r3, #0
 800eb02:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800eb04:	f107 031c 	add.w	r3, r7, #28
 800eb08:	4619      	mov	r1, r3
 800eb0a:	4811      	ldr	r0, [pc, #68]	; (800eb50 <MX_GPIO_Init+0x224>)
 800eb0c:	f000 fe82 	bl	800f814 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800eb10:	2320      	movs	r3, #32
 800eb12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800eb14:	2300      	movs	r3, #0
 800eb16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eb18:	2300      	movs	r3, #0
 800eb1a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800eb1c:	f107 031c 	add.w	r3, r7, #28
 800eb20:	4619      	mov	r1, r3
 800eb22:	480b      	ldr	r0, [pc, #44]	; (800eb50 <MX_GPIO_Init+0x224>)
 800eb24:	f000 fe76 	bl	800f814 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800eb28:	2200      	movs	r2, #0
 800eb2a:	2100      	movs	r1, #0
 800eb2c:	2028      	movs	r0, #40	; 0x28
 800eb2e:	f000 fe3a 	bl	800f7a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800eb32:	2028      	movs	r0, #40	; 0x28
 800eb34:	f000 fe53 	bl	800f7de <HAL_NVIC_EnableIRQ>

}
 800eb38:	bf00      	nop
 800eb3a:	3730      	adds	r7, #48	; 0x30
 800eb3c:	46bd      	mov	sp, r7
 800eb3e:	bd80      	pop	{r7, pc}
 800eb40:	40023800 	.word	0x40023800
 800eb44:	40021000 	.word	0x40021000
 800eb48:	40020800 	.word	0x40020800
 800eb4c:	40020400 	.word	0x40020400
 800eb50:	40020c00 	.word	0x40020c00
 800eb54:	10120000 	.word	0x10120000
 800eb58:	40020000 	.word	0x40020000
 800eb5c:	10110000 	.word	0x10110000

0800eb60 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800eb60:	b580      	push	{r7, lr}
 800eb62:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800eb64:	4b12      	ldr	r3, [pc, #72]	; (800ebb0 <MX_I2C1_Init+0x50>)
 800eb66:	4a13      	ldr	r2, [pc, #76]	; (800ebb4 <MX_I2C1_Init+0x54>)
 800eb68:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800eb6a:	4b11      	ldr	r3, [pc, #68]	; (800ebb0 <MX_I2C1_Init+0x50>)
 800eb6c:	4a12      	ldr	r2, [pc, #72]	; (800ebb8 <MX_I2C1_Init+0x58>)
 800eb6e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800eb70:	4b0f      	ldr	r3, [pc, #60]	; (800ebb0 <MX_I2C1_Init+0x50>)
 800eb72:	2200      	movs	r2, #0
 800eb74:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800eb76:	4b0e      	ldr	r3, [pc, #56]	; (800ebb0 <MX_I2C1_Init+0x50>)
 800eb78:	2200      	movs	r2, #0
 800eb7a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800eb7c:	4b0c      	ldr	r3, [pc, #48]	; (800ebb0 <MX_I2C1_Init+0x50>)
 800eb7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800eb82:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800eb84:	4b0a      	ldr	r3, [pc, #40]	; (800ebb0 <MX_I2C1_Init+0x50>)
 800eb86:	2200      	movs	r2, #0
 800eb88:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800eb8a:	4b09      	ldr	r3, [pc, #36]	; (800ebb0 <MX_I2C1_Init+0x50>)
 800eb8c:	2200      	movs	r2, #0
 800eb8e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800eb90:	4b07      	ldr	r3, [pc, #28]	; (800ebb0 <MX_I2C1_Init+0x50>)
 800eb92:	2200      	movs	r2, #0
 800eb94:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800eb96:	4b06      	ldr	r3, [pc, #24]	; (800ebb0 <MX_I2C1_Init+0x50>)
 800eb98:	2200      	movs	r2, #0
 800eb9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800eb9c:	4804      	ldr	r0, [pc, #16]	; (800ebb0 <MX_I2C1_Init+0x50>)
 800eb9e:	f002 fce5 	bl	801156c <HAL_I2C_Init>
 800eba2:	4603      	mov	r3, r0
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d001      	beq.n	800ebac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800eba8:	f000 fa36 	bl	800f018 <Error_Handler>
  }

}
 800ebac:	bf00      	nop
 800ebae:	bd80      	pop	{r7, pc}
 800ebb0:	20000220 	.word	0x20000220
 800ebb4:	40005400 	.word	0x40005400
 800ebb8:	000186a0 	.word	0x000186a0

0800ebbc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800ebbc:	b580      	push	{r7, lr}
 800ebbe:	b08a      	sub	sp, #40	; 0x28
 800ebc0:	af00      	add	r7, sp, #0
 800ebc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ebc4:	f107 0314 	add.w	r3, r7, #20
 800ebc8:	2200      	movs	r2, #0
 800ebca:	601a      	str	r2, [r3, #0]
 800ebcc:	605a      	str	r2, [r3, #4]
 800ebce:	609a      	str	r2, [r3, #8]
 800ebd0:	60da      	str	r2, [r3, #12]
 800ebd2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	4a19      	ldr	r2, [pc, #100]	; (800ec40 <HAL_I2C_MspInit+0x84>)
 800ebda:	4293      	cmp	r3, r2
 800ebdc:	d12c      	bne.n	800ec38 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ebde:	2300      	movs	r3, #0
 800ebe0:	613b      	str	r3, [r7, #16]
 800ebe2:	4b18      	ldr	r3, [pc, #96]	; (800ec44 <HAL_I2C_MspInit+0x88>)
 800ebe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ebe6:	4a17      	ldr	r2, [pc, #92]	; (800ec44 <HAL_I2C_MspInit+0x88>)
 800ebe8:	f043 0302 	orr.w	r3, r3, #2
 800ebec:	6313      	str	r3, [r2, #48]	; 0x30
 800ebee:	4b15      	ldr	r3, [pc, #84]	; (800ec44 <HAL_I2C_MspInit+0x88>)
 800ebf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ebf2:	f003 0302 	and.w	r3, r3, #2
 800ebf6:	613b      	str	r3, [r7, #16]
 800ebf8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800ebfa:	f44f 7310 	mov.w	r3, #576	; 0x240
 800ebfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800ec00:	2312      	movs	r3, #18
 800ec02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ec04:	2301      	movs	r3, #1
 800ec06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ec08:	2300      	movs	r3, #0
 800ec0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800ec0c:	2304      	movs	r3, #4
 800ec0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ec10:	f107 0314 	add.w	r3, r7, #20
 800ec14:	4619      	mov	r1, r3
 800ec16:	480c      	ldr	r0, [pc, #48]	; (800ec48 <HAL_I2C_MspInit+0x8c>)
 800ec18:	f000 fdfc 	bl	800f814 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800ec1c:	2300      	movs	r3, #0
 800ec1e:	60fb      	str	r3, [r7, #12]
 800ec20:	4b08      	ldr	r3, [pc, #32]	; (800ec44 <HAL_I2C_MspInit+0x88>)
 800ec22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec24:	4a07      	ldr	r2, [pc, #28]	; (800ec44 <HAL_I2C_MspInit+0x88>)
 800ec26:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ec2a:	6413      	str	r3, [r2, #64]	; 0x40
 800ec2c:	4b05      	ldr	r3, [pc, #20]	; (800ec44 <HAL_I2C_MspInit+0x88>)
 800ec2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ec34:	60fb      	str	r3, [r7, #12]
 800ec36:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800ec38:	bf00      	nop
 800ec3a:	3728      	adds	r7, #40	; 0x28
 800ec3c:	46bd      	mov	sp, r7
 800ec3e:	bd80      	pop	{r7, pc}
 800ec40:	40005400 	.word	0x40005400
 800ec44:	40023800 	.word	0x40023800
 800ec48:	40020400 	.word	0x40020400

0800ec4c <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
I2S_HandleTypeDef hi2s3;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	af00      	add	r7, sp, #0

  hi2s2.Instance = SPI2;
 800ec50:	4b12      	ldr	r3, [pc, #72]	; (800ec9c <MX_I2S2_Init+0x50>)
 800ec52:	4a13      	ldr	r2, [pc, #76]	; (800eca0 <MX_I2S2_Init+0x54>)
 800ec54:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800ec56:	4b11      	ldr	r3, [pc, #68]	; (800ec9c <MX_I2S2_Init+0x50>)
 800ec58:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ec5c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800ec5e:	4b0f      	ldr	r3, [pc, #60]	; (800ec9c <MX_I2S2_Init+0x50>)
 800ec60:	2200      	movs	r2, #0
 800ec62:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 800ec64:	4b0d      	ldr	r3, [pc, #52]	; (800ec9c <MX_I2S2_Init+0x50>)
 800ec66:	2200      	movs	r2, #0
 800ec68:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800ec6a:	4b0c      	ldr	r3, [pc, #48]	; (800ec9c <MX_I2S2_Init+0x50>)
 800ec6c:	2200      	movs	r2, #0
 800ec6e:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800ec70:	4b0a      	ldr	r3, [pc, #40]	; (800ec9c <MX_I2S2_Init+0x50>)
 800ec72:	4a0c      	ldr	r2, [pc, #48]	; (800eca4 <MX_I2S2_Init+0x58>)
 800ec74:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800ec76:	4b09      	ldr	r3, [pc, #36]	; (800ec9c <MX_I2S2_Init+0x50>)
 800ec78:	2200      	movs	r2, #0
 800ec7a:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 800ec7c:	4b07      	ldr	r3, [pc, #28]	; (800ec9c <MX_I2S2_Init+0x50>)
 800ec7e:	2200      	movs	r2, #0
 800ec80:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 800ec82:	4b06      	ldr	r3, [pc, #24]	; (800ec9c <MX_I2S2_Init+0x50>)
 800ec84:	2201      	movs	r2, #1
 800ec86:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800ec88:	4804      	ldr	r0, [pc, #16]	; (800ec9c <MX_I2S2_Init+0x50>)
 800ec8a:	f002 fda7 	bl	80117dc <HAL_I2S_Init>
 800ec8e:	4603      	mov	r3, r0
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d001      	beq.n	800ec98 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 800ec94:	f000 f9c0 	bl	800f018 <Error_Handler>
  }

}
 800ec98:	bf00      	nop
 800ec9a:	bd80      	pop	{r7, pc}
 800ec9c:	20000274 	.word	0x20000274
 800eca0:	40003800 	.word	0x40003800
 800eca4:	00017700 	.word	0x00017700

0800eca8 <MX_I2S3_Init>:
/* I2S3 init function */
void MX_I2S3_Init(void)
{
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	af00      	add	r7, sp, #0

  hi2s3.Instance = SPI3;
 800ecac:	4b13      	ldr	r3, [pc, #76]	; (800ecfc <MX_I2S3_Init+0x54>)
 800ecae:	4a14      	ldr	r2, [pc, #80]	; (800ed00 <MX_I2S3_Init+0x58>)
 800ecb0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800ecb2:	4b12      	ldr	r3, [pc, #72]	; (800ecfc <MX_I2S3_Init+0x54>)
 800ecb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ecb8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800ecba:	4b10      	ldr	r3, [pc, #64]	; (800ecfc <MX_I2S3_Init+0x54>)
 800ecbc:	2200      	movs	r2, #0
 800ecbe:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800ecc0:	4b0e      	ldr	r3, [pc, #56]	; (800ecfc <MX_I2S3_Init+0x54>)
 800ecc2:	2200      	movs	r2, #0
 800ecc4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800ecc6:	4b0d      	ldr	r3, [pc, #52]	; (800ecfc <MX_I2S3_Init+0x54>)
 800ecc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800eccc:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800ecce:	4b0b      	ldr	r3, [pc, #44]	; (800ecfc <MX_I2S3_Init+0x54>)
 800ecd0:	4a0c      	ldr	r2, [pc, #48]	; (800ed04 <MX_I2S3_Init+0x5c>)
 800ecd2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800ecd4:	4b09      	ldr	r3, [pc, #36]	; (800ecfc <MX_I2S3_Init+0x54>)
 800ecd6:	2200      	movs	r2, #0
 800ecd8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800ecda:	4b08      	ldr	r3, [pc, #32]	; (800ecfc <MX_I2S3_Init+0x54>)
 800ecdc:	2200      	movs	r2, #0
 800ecde:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800ece0:	4b06      	ldr	r3, [pc, #24]	; (800ecfc <MX_I2S3_Init+0x54>)
 800ece2:	2200      	movs	r2, #0
 800ece4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800ece6:	4805      	ldr	r0, [pc, #20]	; (800ecfc <MX_I2S3_Init+0x54>)
 800ece8:	f002 fd78 	bl	80117dc <HAL_I2S_Init>
 800ecec:	4603      	mov	r3, r0
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d001      	beq.n	800ecf6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800ecf2:	f000 f991 	bl	800f018 <Error_Handler>
  }

}
 800ecf6:	bf00      	nop
 800ecf8:	bd80      	pop	{r7, pc}
 800ecfa:	bf00      	nop
 800ecfc:	200002bc 	.word	0x200002bc
 800ed00:	40003c00 	.word	0x40003c00
 800ed04:	00017700 	.word	0x00017700

0800ed08 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 800ed08:	b580      	push	{r7, lr}
 800ed0a:	b08e      	sub	sp, #56	; 0x38
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ed10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ed14:	2200      	movs	r2, #0
 800ed16:	601a      	str	r2, [r3, #0]
 800ed18:	605a      	str	r2, [r3, #4]
 800ed1a:	609a      	str	r2, [r3, #8]
 800ed1c:	60da      	str	r2, [r3, #12]
 800ed1e:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI2)
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	4a59      	ldr	r2, [pc, #356]	; (800ee8c <HAL_I2S_MspInit+0x184>)
 800ed26:	4293      	cmp	r3, r2
 800ed28:	d15b      	bne.n	800ede2 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800ed2a:	2300      	movs	r3, #0
 800ed2c:	623b      	str	r3, [r7, #32]
 800ed2e:	4b58      	ldr	r3, [pc, #352]	; (800ee90 <HAL_I2S_MspInit+0x188>)
 800ed30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed32:	4a57      	ldr	r2, [pc, #348]	; (800ee90 <HAL_I2S_MspInit+0x188>)
 800ed34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ed38:	6413      	str	r3, [r2, #64]	; 0x40
 800ed3a:	4b55      	ldr	r3, [pc, #340]	; (800ee90 <HAL_I2S_MspInit+0x188>)
 800ed3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ed42:	623b      	str	r3, [r7, #32]
 800ed44:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ed46:	2300      	movs	r3, #0
 800ed48:	61fb      	str	r3, [r7, #28]
 800ed4a:	4b51      	ldr	r3, [pc, #324]	; (800ee90 <HAL_I2S_MspInit+0x188>)
 800ed4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed4e:	4a50      	ldr	r2, [pc, #320]	; (800ee90 <HAL_I2S_MspInit+0x188>)
 800ed50:	f043 0304 	orr.w	r3, r3, #4
 800ed54:	6313      	str	r3, [r2, #48]	; 0x30
 800ed56:	4b4e      	ldr	r3, [pc, #312]	; (800ee90 <HAL_I2S_MspInit+0x188>)
 800ed58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed5a:	f003 0304 	and.w	r3, r3, #4
 800ed5e:	61fb      	str	r3, [r7, #28]
 800ed60:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ed62:	2300      	movs	r3, #0
 800ed64:	61bb      	str	r3, [r7, #24]
 800ed66:	4b4a      	ldr	r3, [pc, #296]	; (800ee90 <HAL_I2S_MspInit+0x188>)
 800ed68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed6a:	4a49      	ldr	r2, [pc, #292]	; (800ee90 <HAL_I2S_MspInit+0x188>)
 800ed6c:	f043 0302 	orr.w	r3, r3, #2
 800ed70:	6313      	str	r3, [r2, #48]	; 0x30
 800ed72:	4b47      	ldr	r3, [pc, #284]	; (800ee90 <HAL_I2S_MspInit+0x188>)
 800ed74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed76:	f003 0302 	and.w	r3, r3, #2
 800ed7a:	61bb      	str	r3, [r7, #24]
 800ed7c:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800ed7e:	2304      	movs	r3, #4
 800ed80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ed82:	2302      	movs	r3, #2
 800ed84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ed86:	2300      	movs	r3, #0
 800ed88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ed8a:	2300      	movs	r3, #0
 800ed8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 800ed8e:	2306      	movs	r3, #6
 800ed90:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ed92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ed96:	4619      	mov	r1, r3
 800ed98:	483e      	ldr	r0, [pc, #248]	; (800ee94 <HAL_I2S_MspInit+0x18c>)
 800ed9a:	f000 fd3b 	bl	800f814 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800ed9e:	2308      	movs	r3, #8
 800eda0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eda2:	2302      	movs	r3, #2
 800eda4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eda6:	2300      	movs	r3, #0
 800eda8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800edaa:	2300      	movs	r3, #0
 800edac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800edae:	2305      	movs	r3, #5
 800edb0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800edb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800edb6:	4619      	mov	r1, r3
 800edb8:	4836      	ldr	r0, [pc, #216]	; (800ee94 <HAL_I2S_MspInit+0x18c>)
 800edba:	f000 fd2b 	bl	800f814 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 800edbe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800edc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800edc4:	2302      	movs	r3, #2
 800edc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800edc8:	2300      	movs	r3, #0
 800edca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800edcc:	2300      	movs	r3, #0
 800edce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800edd0:	2305      	movs	r3, #5
 800edd2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800edd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800edd8:	4619      	mov	r1, r3
 800edda:	482f      	ldr	r0, [pc, #188]	; (800ee98 <HAL_I2S_MspInit+0x190>)
 800eddc:	f000 fd1a 	bl	800f814 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800ede0:	e04f      	b.n	800ee82 <HAL_I2S_MspInit+0x17a>
  else if(i2sHandle->Instance==SPI3)
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	4a2d      	ldr	r2, [pc, #180]	; (800ee9c <HAL_I2S_MspInit+0x194>)
 800ede8:	4293      	cmp	r3, r2
 800edea:	d14a      	bne.n	800ee82 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800edec:	2300      	movs	r3, #0
 800edee:	617b      	str	r3, [r7, #20]
 800edf0:	4b27      	ldr	r3, [pc, #156]	; (800ee90 <HAL_I2S_MspInit+0x188>)
 800edf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800edf4:	4a26      	ldr	r2, [pc, #152]	; (800ee90 <HAL_I2S_MspInit+0x188>)
 800edf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800edfa:	6413      	str	r3, [r2, #64]	; 0x40
 800edfc:	4b24      	ldr	r3, [pc, #144]	; (800ee90 <HAL_I2S_MspInit+0x188>)
 800edfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ee04:	617b      	str	r3, [r7, #20]
 800ee06:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ee08:	2300      	movs	r3, #0
 800ee0a:	613b      	str	r3, [r7, #16]
 800ee0c:	4b20      	ldr	r3, [pc, #128]	; (800ee90 <HAL_I2S_MspInit+0x188>)
 800ee0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee10:	4a1f      	ldr	r2, [pc, #124]	; (800ee90 <HAL_I2S_MspInit+0x188>)
 800ee12:	f043 0301 	orr.w	r3, r3, #1
 800ee16:	6313      	str	r3, [r2, #48]	; 0x30
 800ee18:	4b1d      	ldr	r3, [pc, #116]	; (800ee90 <HAL_I2S_MspInit+0x188>)
 800ee1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee1c:	f003 0301 	and.w	r3, r3, #1
 800ee20:	613b      	str	r3, [r7, #16]
 800ee22:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ee24:	2300      	movs	r3, #0
 800ee26:	60fb      	str	r3, [r7, #12]
 800ee28:	4b19      	ldr	r3, [pc, #100]	; (800ee90 <HAL_I2S_MspInit+0x188>)
 800ee2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee2c:	4a18      	ldr	r2, [pc, #96]	; (800ee90 <HAL_I2S_MspInit+0x188>)
 800ee2e:	f043 0304 	orr.w	r3, r3, #4
 800ee32:	6313      	str	r3, [r2, #48]	; 0x30
 800ee34:	4b16      	ldr	r3, [pc, #88]	; (800ee90 <HAL_I2S_MspInit+0x188>)
 800ee36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee38:	f003 0304 	and.w	r3, r3, #4
 800ee3c:	60fb      	str	r3, [r7, #12]
 800ee3e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800ee40:	2310      	movs	r3, #16
 800ee42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ee44:	2302      	movs	r3, #2
 800ee46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ee48:	2300      	movs	r3, #0
 800ee4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ee4c:	2300      	movs	r3, #0
 800ee4e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800ee50:	2306      	movs	r3, #6
 800ee52:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800ee54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ee58:	4619      	mov	r1, r3
 800ee5a:	4811      	ldr	r0, [pc, #68]	; (800eea0 <HAL_I2S_MspInit+0x198>)
 800ee5c:	f000 fcda 	bl	800f814 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800ee60:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800ee64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ee66:	2302      	movs	r3, #2
 800ee68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ee6a:	2300      	movs	r3, #0
 800ee6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ee6e:	2300      	movs	r3, #0
 800ee70:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800ee72:	2306      	movs	r3, #6
 800ee74:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ee76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ee7a:	4619      	mov	r1, r3
 800ee7c:	4805      	ldr	r0, [pc, #20]	; (800ee94 <HAL_I2S_MspInit+0x18c>)
 800ee7e:	f000 fcc9 	bl	800f814 <HAL_GPIO_Init>
}
 800ee82:	bf00      	nop
 800ee84:	3738      	adds	r7, #56	; 0x38
 800ee86:	46bd      	mov	sp, r7
 800ee88:	bd80      	pop	{r7, pc}
 800ee8a:	bf00      	nop
 800ee8c:	40003800 	.word	0x40003800
 800ee90:	40023800 	.word	0x40023800
 800ee94:	40020800 	.word	0x40020800
 800ee98:	40020400 	.word	0x40020400
 800ee9c:	40003c00 	.word	0x40003c00
 800eea0:	40020000 	.word	0x40020000

0800eea4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800eea4:	b580      	push	{r7, lr}
 800eea6:	b082      	sub	sp, #8
 800eea8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800eeaa:	f000 fb0d 	bl	800f4c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800eeae:	f000 f821 	bl	800eef4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800eeb2:	f7ff fd3b 	bl	800e92c <MX_GPIO_Init>
  MX_I2C1_Init();
 800eeb6:	f7ff fe53 	bl	800eb60 <MX_I2C1_Init>
  MX_I2S2_Init();
 800eeba:	f7ff fec7 	bl	800ec4c <MX_I2S2_Init>
  MX_I2S3_Init();
 800eebe:	f7ff fef3 	bl	800eca8 <MX_I2S3_Init>
  MX_SPI1_Init();
 800eec2:	f000 f8b1 	bl	800f028 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 800eec6:	f006 fdc1 	bl	8015a4c <MX_USB_HOST_Init>
  MX_TIM3_Init();
 800eeca:	f000 fa01 	bl	800f2d0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800eece:	2100      	movs	r1, #0
 800eed0:	4807      	ldr	r0, [pc, #28]	; (800eef0 <main+0x4c>)
 800eed2:	f004 f963 	bl	801319c <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_PRESCALER(&htim3, 0);
 800eed6:	4b06      	ldr	r3, [pc, #24]	; (800eef0 <main+0x4c>)
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	2200      	movs	r2, #0
 800eedc:	629a      	str	r2, [r3, #40]	; 0x28
//  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 10000);
//  for (int i =1; i <= 40; i += 1) {
                 __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 10);
 800eede:	4b04      	ldr	r3, [pc, #16]	; (800eef0 <main+0x4c>)
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	220a      	movs	r2, #10
 800eee4:	635a      	str	r2, [r3, #52]	; 0x34
//                 HAL_Delay(100);
//  }
  tama::Main tamaMain;
  tamaMain.run();
 800eee6:	1d3b      	adds	r3, r7, #4
 800eee8:	4618      	mov	r0, r3
 800eeea:	f7f8 fd33 	bl	8007954 <_ZN4tama4Main3runEv>
 800eeee:	bf00      	nop
 800eef0:	2000035c 	.word	0x2000035c

0800eef4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800eef4:	b580      	push	{r7, lr}
 800eef6:	b09a      	sub	sp, #104	; 0x68
 800eef8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800eefa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800eefe:	2230      	movs	r2, #48	; 0x30
 800ef00:	2100      	movs	r1, #0
 800ef02:	4618      	mov	r0, r3
 800ef04:	f007 f8eb 	bl	80160de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800ef08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ef0c:	2200      	movs	r2, #0
 800ef0e:	601a      	str	r2, [r3, #0]
 800ef10:	605a      	str	r2, [r3, #4]
 800ef12:	609a      	str	r2, [r3, #8]
 800ef14:	60da      	str	r2, [r3, #12]
 800ef16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800ef18:	f107 030c 	add.w	r3, r7, #12
 800ef1c:	2200      	movs	r2, #0
 800ef1e:	601a      	str	r2, [r3, #0]
 800ef20:	605a      	str	r2, [r3, #4]
 800ef22:	609a      	str	r2, [r3, #8]
 800ef24:	60da      	str	r2, [r3, #12]
 800ef26:	611a      	str	r2, [r3, #16]
 800ef28:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	60bb      	str	r3, [r7, #8]
 800ef2e:	4b38      	ldr	r3, [pc, #224]	; (800f010 <_Z18SystemClock_Configv+0x11c>)
 800ef30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef32:	4a37      	ldr	r2, [pc, #220]	; (800f010 <_Z18SystemClock_Configv+0x11c>)
 800ef34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ef38:	6413      	str	r3, [r2, #64]	; 0x40
 800ef3a:	4b35      	ldr	r3, [pc, #212]	; (800f010 <_Z18SystemClock_Configv+0x11c>)
 800ef3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ef42:	60bb      	str	r3, [r7, #8]
 800ef44:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800ef46:	2300      	movs	r3, #0
 800ef48:	607b      	str	r3, [r7, #4]
 800ef4a:	4b32      	ldr	r3, [pc, #200]	; (800f014 <_Z18SystemClock_Configv+0x120>)
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	4a31      	ldr	r2, [pc, #196]	; (800f014 <_Z18SystemClock_Configv+0x120>)
 800ef50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ef54:	6013      	str	r3, [r2, #0]
 800ef56:	4b2f      	ldr	r3, [pc, #188]	; (800f014 <_Z18SystemClock_Configv+0x120>)
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800ef5e:	607b      	str	r3, [r7, #4]
 800ef60:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800ef62:	2301      	movs	r3, #1
 800ef64:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800ef66:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800ef6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800ef6c:	2302      	movs	r3, #2
 800ef6e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800ef70:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ef74:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 800ef76:	2304      	movs	r3, #4
 800ef78:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 800ef7a:	23c0      	movs	r3, #192	; 0xc0
 800ef7c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800ef7e:	2304      	movs	r3, #4
 800ef80:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800ef82:	2308      	movs	r3, #8
 800ef84:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800ef86:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	f003 f8c6 	bl	801211c <HAL_RCC_OscConfig>
 800ef90:	4603      	mov	r3, r0
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	bf14      	ite	ne
 800ef96:	2301      	movne	r3, #1
 800ef98:	2300      	moveq	r3, #0
 800ef9a:	b2db      	uxtb	r3, r3
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d001      	beq.n	800efa4 <_Z18SystemClock_Configv+0xb0>
  {
    Error_Handler();
 800efa0:	f000 f83a 	bl	800f018 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800efa4:	230f      	movs	r3, #15
 800efa6:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800efa8:	2302      	movs	r3, #2
 800efaa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800efac:	2300      	movs	r3, #0
 800efae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800efb0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800efb4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800efb6:	2300      	movs	r3, #0
 800efb8:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800efba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800efbe:	2103      	movs	r1, #3
 800efc0:	4618      	mov	r0, r3
 800efc2:	f003 fb1b 	bl	80125fc <HAL_RCC_ClockConfig>
 800efc6:	4603      	mov	r3, r0
 800efc8:	2b00      	cmp	r3, #0
 800efca:	bf14      	ite	ne
 800efcc:	2301      	movne	r3, #1
 800efce:	2300      	moveq	r3, #0
 800efd0:	b2db      	uxtb	r3, r3
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d001      	beq.n	800efda <_Z18SystemClock_Configv+0xe6>
  {
    Error_Handler();
 800efd6:	f000 f81f 	bl	800f018 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800efda:	2301      	movs	r3, #1
 800efdc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 800efde:	23c8      	movs	r3, #200	; 0xc8
 800efe0:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 800efe2:	2305      	movs	r3, #5
 800efe4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800efe6:	2302      	movs	r3, #2
 800efe8:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800efea:	f107 030c 	add.w	r3, r7, #12
 800efee:	4618      	mov	r0, r3
 800eff0:	f003 fce2 	bl	80129b8 <HAL_RCCEx_PeriphCLKConfig>
 800eff4:	4603      	mov	r3, r0
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	bf14      	ite	ne
 800effa:	2301      	movne	r3, #1
 800effc:	2300      	moveq	r3, #0
 800effe:	b2db      	uxtb	r3, r3
 800f000:	2b00      	cmp	r3, #0
 800f002:	d001      	beq.n	800f008 <_Z18SystemClock_Configv+0x114>
  {
    Error_Handler();
 800f004:	f000 f808 	bl	800f018 <Error_Handler>
  }
}
 800f008:	bf00      	nop
 800f00a:	3768      	adds	r7, #104	; 0x68
 800f00c:	46bd      	mov	sp, r7
 800f00e:	bd80      	pop	{r7, pc}
 800f010:	40023800 	.word	0x40023800
 800f014:	40007000 	.word	0x40007000

0800f018 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800f018:	b480      	push	{r7}
 800f01a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800f01c:	bf00      	nop
 800f01e:	46bd      	mov	sp, r7
 800f020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f024:	4770      	bx	lr
	...

0800f028 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800f028:	b580      	push	{r7, lr}
 800f02a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 800f02c:	4b17      	ldr	r3, [pc, #92]	; (800f08c <MX_SPI1_Init+0x64>)
 800f02e:	4a18      	ldr	r2, [pc, #96]	; (800f090 <MX_SPI1_Init+0x68>)
 800f030:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800f032:	4b16      	ldr	r3, [pc, #88]	; (800f08c <MX_SPI1_Init+0x64>)
 800f034:	f44f 7282 	mov.w	r2, #260	; 0x104
 800f038:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800f03a:	4b14      	ldr	r3, [pc, #80]	; (800f08c <MX_SPI1_Init+0x64>)
 800f03c:	2200      	movs	r2, #0
 800f03e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800f040:	4b12      	ldr	r3, [pc, #72]	; (800f08c <MX_SPI1_Init+0x64>)
 800f042:	2200      	movs	r2, #0
 800f044:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800f046:	4b11      	ldr	r3, [pc, #68]	; (800f08c <MX_SPI1_Init+0x64>)
 800f048:	2200      	movs	r2, #0
 800f04a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800f04c:	4b0f      	ldr	r3, [pc, #60]	; (800f08c <MX_SPI1_Init+0x64>)
 800f04e:	2200      	movs	r2, #0
 800f050:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800f052:	4b0e      	ldr	r3, [pc, #56]	; (800f08c <MX_SPI1_Init+0x64>)
 800f054:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f058:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800f05a:	4b0c      	ldr	r3, [pc, #48]	; (800f08c <MX_SPI1_Init+0x64>)
 800f05c:	2220      	movs	r2, #32
 800f05e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800f060:	4b0a      	ldr	r3, [pc, #40]	; (800f08c <MX_SPI1_Init+0x64>)
 800f062:	2200      	movs	r2, #0
 800f064:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800f066:	4b09      	ldr	r3, [pc, #36]	; (800f08c <MX_SPI1_Init+0x64>)
 800f068:	2200      	movs	r2, #0
 800f06a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f06c:	4b07      	ldr	r3, [pc, #28]	; (800f08c <MX_SPI1_Init+0x64>)
 800f06e:	2200      	movs	r2, #0
 800f070:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800f072:	4b06      	ldr	r3, [pc, #24]	; (800f08c <MX_SPI1_Init+0x64>)
 800f074:	220a      	movs	r2, #10
 800f076:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800f078:	4804      	ldr	r0, [pc, #16]	; (800f08c <MX_SPI1_Init+0x64>)
 800f07a:	f003 fdeb 	bl	8012c54 <HAL_SPI_Init>
 800f07e:	4603      	mov	r3, r0
 800f080:	2b00      	cmp	r3, #0
 800f082:	d001      	beq.n	800f088 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800f084:	f7ff ffc8 	bl	800f018 <Error_Handler>
  }

}
 800f088:	bf00      	nop
 800f08a:	bd80      	pop	{r7, pc}
 800f08c:	20000304 	.word	0x20000304
 800f090:	40013000 	.word	0x40013000

0800f094 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800f094:	b580      	push	{r7, lr}
 800f096:	b08a      	sub	sp, #40	; 0x28
 800f098:	af00      	add	r7, sp, #0
 800f09a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f09c:	f107 0314 	add.w	r3, r7, #20
 800f0a0:	2200      	movs	r2, #0
 800f0a2:	601a      	str	r2, [r3, #0]
 800f0a4:	605a      	str	r2, [r3, #4]
 800f0a6:	609a      	str	r2, [r3, #8]
 800f0a8:	60da      	str	r2, [r3, #12]
 800f0aa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	4a19      	ldr	r2, [pc, #100]	; (800f118 <HAL_SPI_MspInit+0x84>)
 800f0b2:	4293      	cmp	r3, r2
 800f0b4:	d12b      	bne.n	800f10e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800f0b6:	2300      	movs	r3, #0
 800f0b8:	613b      	str	r3, [r7, #16]
 800f0ba:	4b18      	ldr	r3, [pc, #96]	; (800f11c <HAL_SPI_MspInit+0x88>)
 800f0bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f0be:	4a17      	ldr	r2, [pc, #92]	; (800f11c <HAL_SPI_MspInit+0x88>)
 800f0c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f0c4:	6453      	str	r3, [r2, #68]	; 0x44
 800f0c6:	4b15      	ldr	r3, [pc, #84]	; (800f11c <HAL_SPI_MspInit+0x88>)
 800f0c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f0ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f0ce:	613b      	str	r3, [r7, #16]
 800f0d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	60fb      	str	r3, [r7, #12]
 800f0d6:	4b11      	ldr	r3, [pc, #68]	; (800f11c <HAL_SPI_MspInit+0x88>)
 800f0d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f0da:	4a10      	ldr	r2, [pc, #64]	; (800f11c <HAL_SPI_MspInit+0x88>)
 800f0dc:	f043 0301 	orr.w	r3, r3, #1
 800f0e0:	6313      	str	r3, [r2, #48]	; 0x30
 800f0e2:	4b0e      	ldr	r3, [pc, #56]	; (800f11c <HAL_SPI_MspInit+0x88>)
 800f0e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f0e6:	f003 0301 	and.w	r3, r3, #1
 800f0ea:	60fb      	str	r3, [r7, #12]
 800f0ec:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800f0ee:	23e0      	movs	r3, #224	; 0xe0
 800f0f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f0f2:	2302      	movs	r3, #2
 800f0f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f0f6:	2300      	movs	r3, #0
 800f0f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f0fa:	2303      	movs	r3, #3
 800f0fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800f0fe:	2305      	movs	r3, #5
 800f100:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f102:	f107 0314 	add.w	r3, r7, #20
 800f106:	4619      	mov	r1, r3
 800f108:	4805      	ldr	r0, [pc, #20]	; (800f120 <HAL_SPI_MspInit+0x8c>)
 800f10a:	f000 fb83 	bl	800f814 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800f10e:	bf00      	nop
 800f110:	3728      	adds	r7, #40	; 0x28
 800f112:	46bd      	mov	sp, r7
 800f114:	bd80      	pop	{r7, pc}
 800f116:	bf00      	nop
 800f118:	40013000 	.word	0x40013000
 800f11c:	40023800 	.word	0x40023800
 800f120:	40020000 	.word	0x40020000

0800f124 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800f124:	b580      	push	{r7, lr}
 800f126:	b082      	sub	sp, #8
 800f128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800f12a:	2300      	movs	r3, #0
 800f12c:	607b      	str	r3, [r7, #4]
 800f12e:	4b10      	ldr	r3, [pc, #64]	; (800f170 <HAL_MspInit+0x4c>)
 800f130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f132:	4a0f      	ldr	r2, [pc, #60]	; (800f170 <HAL_MspInit+0x4c>)
 800f134:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f138:	6453      	str	r3, [r2, #68]	; 0x44
 800f13a:	4b0d      	ldr	r3, [pc, #52]	; (800f170 <HAL_MspInit+0x4c>)
 800f13c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f13e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f142:	607b      	str	r3, [r7, #4]
 800f144:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800f146:	2300      	movs	r3, #0
 800f148:	603b      	str	r3, [r7, #0]
 800f14a:	4b09      	ldr	r3, [pc, #36]	; (800f170 <HAL_MspInit+0x4c>)
 800f14c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f14e:	4a08      	ldr	r2, [pc, #32]	; (800f170 <HAL_MspInit+0x4c>)
 800f150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f154:	6413      	str	r3, [r2, #64]	; 0x40
 800f156:	4b06      	ldr	r3, [pc, #24]	; (800f170 <HAL_MspInit+0x4c>)
 800f158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f15a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f15e:	603b      	str	r3, [r7, #0]
 800f160:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800f162:	2007      	movs	r0, #7
 800f164:	f000 fb14 	bl	800f790 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800f168:	bf00      	nop
 800f16a:	3708      	adds	r7, #8
 800f16c:	46bd      	mov	sp, r7
 800f16e:	bd80      	pop	{r7, pc}
 800f170:	40023800 	.word	0x40023800

0800f174 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800f174:	b480      	push	{r7}
 800f176:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800f178:	bf00      	nop
 800f17a:	46bd      	mov	sp, r7
 800f17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f180:	4770      	bx	lr

0800f182 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800f182:	b480      	push	{r7}
 800f184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800f186:	e7fe      	b.n	800f186 <HardFault_Handler+0x4>

0800f188 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800f188:	b480      	push	{r7}
 800f18a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800f18c:	e7fe      	b.n	800f18c <MemManage_Handler+0x4>

0800f18e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800f18e:	b480      	push	{r7}
 800f190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800f192:	e7fe      	b.n	800f192 <BusFault_Handler+0x4>

0800f194 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800f194:	b480      	push	{r7}
 800f196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800f198:	e7fe      	b.n	800f198 <UsageFault_Handler+0x4>

0800f19a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800f19a:	b480      	push	{r7}
 800f19c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800f19e:	bf00      	nop
 800f1a0:	46bd      	mov	sp, r7
 800f1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a6:	4770      	bx	lr

0800f1a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800f1a8:	b480      	push	{r7}
 800f1aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800f1ac:	bf00      	nop
 800f1ae:	46bd      	mov	sp, r7
 800f1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b4:	4770      	bx	lr

0800f1b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800f1b6:	b480      	push	{r7}
 800f1b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800f1ba:	bf00      	nop
 800f1bc:	46bd      	mov	sp, r7
 800f1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1c2:	4770      	bx	lr

0800f1c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800f1c4:	b580      	push	{r7, lr}
 800f1c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800f1c8:	f000 f9d0 	bl	800f56c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800f1cc:	bf00      	nop
 800f1ce:	bd80      	pop	{r7, pc}

0800f1d0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800f1d0:	b580      	push	{r7, lr}
 800f1d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800f1d4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800f1d8:	f000 fcd0 	bl	800fb7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800f1dc:	bf00      	nop
 800f1de:	bd80      	pop	{r7, pc}

0800f1e0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800f1e0:	b580      	push	{r7, lr}
 800f1e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800f1e4:	4802      	ldr	r0, [pc, #8]	; (800f1f0 <OTG_FS_IRQHandler+0x10>)
 800f1e6:	f000 ff7b 	bl	80100e0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800f1ea:	bf00      	nop
 800f1ec:	bd80      	pop	{r7, pc}
 800f1ee:	bf00      	nop
 800f1f0:	20000778 	.word	0x20000778

0800f1f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800f1f4:	b480      	push	{r7}
 800f1f6:	af00      	add	r7, sp, #0
	return 1;
 800f1f8:	2301      	movs	r3, #1
}
 800f1fa:	4618      	mov	r0, r3
 800f1fc:	46bd      	mov	sp, r7
 800f1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f202:	4770      	bx	lr

0800f204 <_kill>:

int _kill(int pid, int sig)
{
 800f204:	b580      	push	{r7, lr}
 800f206:	b082      	sub	sp, #8
 800f208:	af00      	add	r7, sp, #0
 800f20a:	6078      	str	r0, [r7, #4]
 800f20c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800f20e:	f006 ff13 	bl	8016038 <__errno>
 800f212:	4602      	mov	r2, r0
 800f214:	2316      	movs	r3, #22
 800f216:	6013      	str	r3, [r2, #0]
	return -1;
 800f218:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800f21c:	4618      	mov	r0, r3
 800f21e:	3708      	adds	r7, #8
 800f220:	46bd      	mov	sp, r7
 800f222:	bd80      	pop	{r7, pc}

0800f224 <_exit>:

void _exit (int status)
{
 800f224:	b580      	push	{r7, lr}
 800f226:	b082      	sub	sp, #8
 800f228:	af00      	add	r7, sp, #0
 800f22a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800f22c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800f230:	6878      	ldr	r0, [r7, #4]
 800f232:	f7ff ffe7 	bl	800f204 <_kill>
	while (1) {}		/* Make sure we hang here */
 800f236:	e7fe      	b.n	800f236 <_exit+0x12>

0800f238 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800f238:	b580      	push	{r7, lr}
 800f23a:	b086      	sub	sp, #24
 800f23c:	af00      	add	r7, sp, #0
 800f23e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800f240:	4a14      	ldr	r2, [pc, #80]	; (800f294 <_sbrk+0x5c>)
 800f242:	4b15      	ldr	r3, [pc, #84]	; (800f298 <_sbrk+0x60>)
 800f244:	1ad3      	subs	r3, r2, r3
 800f246:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800f248:	697b      	ldr	r3, [r7, #20]
 800f24a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800f24c:	4b13      	ldr	r3, [pc, #76]	; (800f29c <_sbrk+0x64>)
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	2b00      	cmp	r3, #0
 800f252:	d102      	bne.n	800f25a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800f254:	4b11      	ldr	r3, [pc, #68]	; (800f29c <_sbrk+0x64>)
 800f256:	4a12      	ldr	r2, [pc, #72]	; (800f2a0 <_sbrk+0x68>)
 800f258:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800f25a:	4b10      	ldr	r3, [pc, #64]	; (800f29c <_sbrk+0x64>)
 800f25c:	681a      	ldr	r2, [r3, #0]
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	4413      	add	r3, r2
 800f262:	693a      	ldr	r2, [r7, #16]
 800f264:	429a      	cmp	r2, r3
 800f266:	d207      	bcs.n	800f278 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800f268:	f006 fee6 	bl	8016038 <__errno>
 800f26c:	4602      	mov	r2, r0
 800f26e:	230c      	movs	r3, #12
 800f270:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800f272:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f276:	e009      	b.n	800f28c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800f278:	4b08      	ldr	r3, [pc, #32]	; (800f29c <_sbrk+0x64>)
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800f27e:	4b07      	ldr	r3, [pc, #28]	; (800f29c <_sbrk+0x64>)
 800f280:	681a      	ldr	r2, [r3, #0]
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	4413      	add	r3, r2
 800f286:	4a05      	ldr	r2, [pc, #20]	; (800f29c <_sbrk+0x64>)
 800f288:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800f28a:	68fb      	ldr	r3, [r7, #12]
}
 800f28c:	4618      	mov	r0, r3
 800f28e:	3718      	adds	r7, #24
 800f290:	46bd      	mov	sp, r7
 800f292:	bd80      	pop	{r7, pc}
 800f294:	20020000 	.word	0x20020000
 800f298:	00000400 	.word	0x00000400
 800f29c:	20000208 	.word	0x20000208
 800f2a0:	20000a40 	.word	0x20000a40

0800f2a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800f2a4:	b480      	push	{r7}
 800f2a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800f2a8:	4b08      	ldr	r3, [pc, #32]	; (800f2cc <SystemInit+0x28>)
 800f2aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f2ae:	4a07      	ldr	r2, [pc, #28]	; (800f2cc <SystemInit+0x28>)
 800f2b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f2b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800f2b8:	4b04      	ldr	r3, [pc, #16]	; (800f2cc <SystemInit+0x28>)
 800f2ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800f2be:	609a      	str	r2, [r3, #8]
#endif
}
 800f2c0:	bf00      	nop
 800f2c2:	46bd      	mov	sp, r7
 800f2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c8:	4770      	bx	lr
 800f2ca:	bf00      	nop
 800f2cc:	e000ed00 	.word	0xe000ed00

0800f2d0 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800f2d0:	b580      	push	{r7, lr}
 800f2d2:	b08e      	sub	sp, #56	; 0x38
 800f2d4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800f2d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f2da:	2200      	movs	r2, #0
 800f2dc:	601a      	str	r2, [r3, #0]
 800f2de:	605a      	str	r2, [r3, #4]
 800f2e0:	609a      	str	r2, [r3, #8]
 800f2e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f2e4:	f107 0320 	add.w	r3, r7, #32
 800f2e8:	2200      	movs	r2, #0
 800f2ea:	601a      	str	r2, [r3, #0]
 800f2ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800f2ee:	1d3b      	adds	r3, r7, #4
 800f2f0:	2200      	movs	r2, #0
 800f2f2:	601a      	str	r2, [r3, #0]
 800f2f4:	605a      	str	r2, [r3, #4]
 800f2f6:	609a      	str	r2, [r3, #8]
 800f2f8:	60da      	str	r2, [r3, #12]
 800f2fa:	611a      	str	r2, [r3, #16]
 800f2fc:	615a      	str	r2, [r3, #20]
 800f2fe:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 800f300:	4b2c      	ldr	r3, [pc, #176]	; (800f3b4 <MX_TIM3_Init+0xe4>)
 800f302:	4a2d      	ldr	r2, [pc, #180]	; (800f3b8 <MX_TIM3_Init+0xe8>)
 800f304:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 95;
 800f306:	4b2b      	ldr	r3, [pc, #172]	; (800f3b4 <MX_TIM3_Init+0xe4>)
 800f308:	225f      	movs	r2, #95	; 0x5f
 800f30a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f30c:	4b29      	ldr	r3, [pc, #164]	; (800f3b4 <MX_TIM3_Init+0xe4>)
 800f30e:	2200      	movs	r2, #0
 800f310:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 24;
 800f312:	4b28      	ldr	r3, [pc, #160]	; (800f3b4 <MX_TIM3_Init+0xe4>)
 800f314:	2218      	movs	r2, #24
 800f316:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f318:	4b26      	ldr	r3, [pc, #152]	; (800f3b4 <MX_TIM3_Init+0xe4>)
 800f31a:	2200      	movs	r2, #0
 800f31c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800f31e:	4b25      	ldr	r3, [pc, #148]	; (800f3b4 <MX_TIM3_Init+0xe4>)
 800f320:	2280      	movs	r2, #128	; 0x80
 800f322:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800f324:	4823      	ldr	r0, [pc, #140]	; (800f3b4 <MX_TIM3_Init+0xe4>)
 800f326:	f003 fed9 	bl	80130dc <HAL_TIM_Base_Init>
 800f32a:	4603      	mov	r3, r0
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d001      	beq.n	800f334 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 800f330:	f7ff fe72 	bl	800f018 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800f334:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f338:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800f33a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f33e:	4619      	mov	r1, r3
 800f340:	481c      	ldr	r0, [pc, #112]	; (800f3b4 <MX_TIM3_Init+0xe4>)
 800f342:	f004 f823 	bl	801338c <HAL_TIM_ConfigClockSource>
 800f346:	4603      	mov	r3, r0
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d001      	beq.n	800f350 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 800f34c:	f7ff fe64 	bl	800f018 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800f350:	4818      	ldr	r0, [pc, #96]	; (800f3b4 <MX_TIM3_Init+0xe4>)
 800f352:	f003 feee 	bl	8013132 <HAL_TIM_PWM_Init>
 800f356:	4603      	mov	r3, r0
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d001      	beq.n	800f360 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 800f35c:	f7ff fe5c 	bl	800f018 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f360:	2300      	movs	r3, #0
 800f362:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f364:	2300      	movs	r3, #0
 800f366:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800f368:	f107 0320 	add.w	r3, r7, #32
 800f36c:	4619      	mov	r1, r3
 800f36e:	4811      	ldr	r0, [pc, #68]	; (800f3b4 <MX_TIM3_Init+0xe4>)
 800f370:	f004 fb90 	bl	8013a94 <HAL_TIMEx_MasterConfigSynchronization>
 800f374:	4603      	mov	r3, r0
 800f376:	2b00      	cmp	r3, #0
 800f378:	d001      	beq.n	800f37e <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800f37a:	f7ff fe4d 	bl	800f018 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800f37e:	2360      	movs	r3, #96	; 0x60
 800f380:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800f382:	2300      	movs	r3, #0
 800f384:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800f386:	2300      	movs	r3, #0
 800f388:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800f38a:	2300      	movs	r3, #0
 800f38c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800f38e:	1d3b      	adds	r3, r7, #4
 800f390:	2200      	movs	r2, #0
 800f392:	4619      	mov	r1, r3
 800f394:	4807      	ldr	r0, [pc, #28]	; (800f3b4 <MX_TIM3_Init+0xe4>)
 800f396:	f003 ff33 	bl	8013200 <HAL_TIM_PWM_ConfigChannel>
 800f39a:	4603      	mov	r3, r0
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d001      	beq.n	800f3a4 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 800f3a0:	f7ff fe3a 	bl	800f018 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 800f3a4:	4803      	ldr	r0, [pc, #12]	; (800f3b4 <MX_TIM3_Init+0xe4>)
 800f3a6:	f000 f82b 	bl	800f400 <HAL_TIM_MspPostInit>

}
 800f3aa:	bf00      	nop
 800f3ac:	3738      	adds	r7, #56	; 0x38
 800f3ae:	46bd      	mov	sp, r7
 800f3b0:	bd80      	pop	{r7, pc}
 800f3b2:	bf00      	nop
 800f3b4:	2000035c 	.word	0x2000035c
 800f3b8:	40000400 	.word	0x40000400

0800f3bc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800f3bc:	b480      	push	{r7}
 800f3be:	b085      	sub	sp, #20
 800f3c0:	af00      	add	r7, sp, #0
 800f3c2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	4a0b      	ldr	r2, [pc, #44]	; (800f3f8 <HAL_TIM_Base_MspInit+0x3c>)
 800f3ca:	4293      	cmp	r3, r2
 800f3cc:	d10d      	bne.n	800f3ea <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800f3ce:	2300      	movs	r3, #0
 800f3d0:	60fb      	str	r3, [r7, #12]
 800f3d2:	4b0a      	ldr	r3, [pc, #40]	; (800f3fc <HAL_TIM_Base_MspInit+0x40>)
 800f3d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3d6:	4a09      	ldr	r2, [pc, #36]	; (800f3fc <HAL_TIM_Base_MspInit+0x40>)
 800f3d8:	f043 0302 	orr.w	r3, r3, #2
 800f3dc:	6413      	str	r3, [r2, #64]	; 0x40
 800f3de:	4b07      	ldr	r3, [pc, #28]	; (800f3fc <HAL_TIM_Base_MspInit+0x40>)
 800f3e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3e2:	f003 0302 	and.w	r3, r3, #2
 800f3e6:	60fb      	str	r3, [r7, #12]
 800f3e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800f3ea:	bf00      	nop
 800f3ec:	3714      	adds	r7, #20
 800f3ee:	46bd      	mov	sp, r7
 800f3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f4:	4770      	bx	lr
 800f3f6:	bf00      	nop
 800f3f8:	40000400 	.word	0x40000400
 800f3fc:	40023800 	.word	0x40023800

0800f400 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800f400:	b580      	push	{r7, lr}
 800f402:	b088      	sub	sp, #32
 800f404:	af00      	add	r7, sp, #0
 800f406:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f408:	f107 030c 	add.w	r3, r7, #12
 800f40c:	2200      	movs	r2, #0
 800f40e:	601a      	str	r2, [r3, #0]
 800f410:	605a      	str	r2, [r3, #4]
 800f412:	609a      	str	r2, [r3, #8]
 800f414:	60da      	str	r2, [r3, #12]
 800f416:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	4a12      	ldr	r2, [pc, #72]	; (800f468 <HAL_TIM_MspPostInit+0x68>)
 800f41e:	4293      	cmp	r3, r2
 800f420:	d11d      	bne.n	800f45e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800f422:	2300      	movs	r3, #0
 800f424:	60bb      	str	r3, [r7, #8]
 800f426:	4b11      	ldr	r3, [pc, #68]	; (800f46c <HAL_TIM_MspPostInit+0x6c>)
 800f428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f42a:	4a10      	ldr	r2, [pc, #64]	; (800f46c <HAL_TIM_MspPostInit+0x6c>)
 800f42c:	f043 0304 	orr.w	r3, r3, #4
 800f430:	6313      	str	r3, [r2, #48]	; 0x30
 800f432:	4b0e      	ldr	r3, [pc, #56]	; (800f46c <HAL_TIM_MspPostInit+0x6c>)
 800f434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f436:	f003 0304 	and.w	r3, r3, #4
 800f43a:	60bb      	str	r3, [r7, #8]
 800f43c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800f43e:	2340      	movs	r3, #64	; 0x40
 800f440:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f442:	2302      	movs	r3, #2
 800f444:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f446:	2300      	movs	r3, #0
 800f448:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f44a:	2300      	movs	r3, #0
 800f44c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800f44e:	2302      	movs	r3, #2
 800f450:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f452:	f107 030c 	add.w	r3, r7, #12
 800f456:	4619      	mov	r1, r3
 800f458:	4805      	ldr	r0, [pc, #20]	; (800f470 <HAL_TIM_MspPostInit+0x70>)
 800f45a:	f000 f9db 	bl	800f814 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800f45e:	bf00      	nop
 800f460:	3720      	adds	r7, #32
 800f462:	46bd      	mov	sp, r7
 800f464:	bd80      	pop	{r7, pc}
 800f466:	bf00      	nop
 800f468:	40000400 	.word	0x40000400
 800f46c:	40023800 	.word	0x40023800
 800f470:	40020800 	.word	0x40020800

0800f474 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800f474:	f8df d034 	ldr.w	sp, [pc, #52]	; 800f4ac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800f478:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800f47a:	e003      	b.n	800f484 <LoopCopyDataInit>

0800f47c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800f47c:	4b0c      	ldr	r3, [pc, #48]	; (800f4b0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800f47e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800f480:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800f482:	3104      	adds	r1, #4

0800f484 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800f484:	480b      	ldr	r0, [pc, #44]	; (800f4b4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800f486:	4b0c      	ldr	r3, [pc, #48]	; (800f4b8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800f488:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800f48a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800f48c:	d3f6      	bcc.n	800f47c <CopyDataInit>
  ldr  r2, =_sbss
 800f48e:	4a0b      	ldr	r2, [pc, #44]	; (800f4bc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800f490:	e002      	b.n	800f498 <LoopFillZerobss>

0800f492 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800f492:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800f494:	f842 3b04 	str.w	r3, [r2], #4

0800f498 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800f498:	4b09      	ldr	r3, [pc, #36]	; (800f4c0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800f49a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800f49c:	d3f9      	bcc.n	800f492 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800f49e:	f7ff ff01 	bl	800f2a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800f4a2:	f006 fdcf 	bl	8016044 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800f4a6:	f7ff fcfd 	bl	800eea4 <main>
  bx  lr    
 800f4aa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800f4ac:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800f4b0:	08017284 	.word	0x08017284
  ldr  r0, =_sdata
 800f4b4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800f4b8:	200001ec 	.word	0x200001ec
  ldr  r2, =_sbss
 800f4bc:	200001ec 	.word	0x200001ec
  ldr  r3, = _ebss
 800f4c0:	20000a40 	.word	0x20000a40

0800f4c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800f4c4:	e7fe      	b.n	800f4c4 <ADC_IRQHandler>
	...

0800f4c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800f4c8:	b580      	push	{r7, lr}
 800f4ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800f4cc:	4b0e      	ldr	r3, [pc, #56]	; (800f508 <HAL_Init+0x40>)
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	4a0d      	ldr	r2, [pc, #52]	; (800f508 <HAL_Init+0x40>)
 800f4d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f4d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800f4d8:	4b0b      	ldr	r3, [pc, #44]	; (800f508 <HAL_Init+0x40>)
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	4a0a      	ldr	r2, [pc, #40]	; (800f508 <HAL_Init+0x40>)
 800f4de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800f4e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800f4e4:	4b08      	ldr	r3, [pc, #32]	; (800f508 <HAL_Init+0x40>)
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	4a07      	ldr	r2, [pc, #28]	; (800f508 <HAL_Init+0x40>)
 800f4ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f4ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800f4f0:	2003      	movs	r0, #3
 800f4f2:	f000 f94d 	bl	800f790 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800f4f6:	2000      	movs	r0, #0
 800f4f8:	f000 f808 	bl	800f50c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800f4fc:	f7ff fe12 	bl	800f124 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800f500:	2300      	movs	r3, #0
}
 800f502:	4618      	mov	r0, r3
 800f504:	bd80      	pop	{r7, pc}
 800f506:	bf00      	nop
 800f508:	40023c00 	.word	0x40023c00

0800f50c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800f50c:	b580      	push	{r7, lr}
 800f50e:	b082      	sub	sp, #8
 800f510:	af00      	add	r7, sp, #0
 800f512:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800f514:	4b12      	ldr	r3, [pc, #72]	; (800f560 <HAL_InitTick+0x54>)
 800f516:	681a      	ldr	r2, [r3, #0]
 800f518:	4b12      	ldr	r3, [pc, #72]	; (800f564 <HAL_InitTick+0x58>)
 800f51a:	781b      	ldrb	r3, [r3, #0]
 800f51c:	4619      	mov	r1, r3
 800f51e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f522:	fbb3 f3f1 	udiv	r3, r3, r1
 800f526:	fbb2 f3f3 	udiv	r3, r2, r3
 800f52a:	4618      	mov	r0, r3
 800f52c:	f000 f965 	bl	800f7fa <HAL_SYSTICK_Config>
 800f530:	4603      	mov	r3, r0
 800f532:	2b00      	cmp	r3, #0
 800f534:	d001      	beq.n	800f53a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800f536:	2301      	movs	r3, #1
 800f538:	e00e      	b.n	800f558 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	2b0f      	cmp	r3, #15
 800f53e:	d80a      	bhi.n	800f556 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800f540:	2200      	movs	r2, #0
 800f542:	6879      	ldr	r1, [r7, #4]
 800f544:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f548:	f000 f92d 	bl	800f7a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800f54c:	4a06      	ldr	r2, [pc, #24]	; (800f568 <HAL_InitTick+0x5c>)
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800f552:	2300      	movs	r3, #0
 800f554:	e000      	b.n	800f558 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800f556:	2301      	movs	r3, #1
}
 800f558:	4618      	mov	r0, r3
 800f55a:	3708      	adds	r7, #8
 800f55c:	46bd      	mov	sp, r7
 800f55e:	bd80      	pop	{r7, pc}
 800f560:	20000158 	.word	0x20000158
 800f564:	20000160 	.word	0x20000160
 800f568:	2000015c 	.word	0x2000015c

0800f56c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800f56c:	b480      	push	{r7}
 800f56e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800f570:	4b06      	ldr	r3, [pc, #24]	; (800f58c <HAL_IncTick+0x20>)
 800f572:	781b      	ldrb	r3, [r3, #0]
 800f574:	461a      	mov	r2, r3
 800f576:	4b06      	ldr	r3, [pc, #24]	; (800f590 <HAL_IncTick+0x24>)
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	4413      	add	r3, r2
 800f57c:	4a04      	ldr	r2, [pc, #16]	; (800f590 <HAL_IncTick+0x24>)
 800f57e:	6013      	str	r3, [r2, #0]
}
 800f580:	bf00      	nop
 800f582:	46bd      	mov	sp, r7
 800f584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f588:	4770      	bx	lr
 800f58a:	bf00      	nop
 800f58c:	20000160 	.word	0x20000160
 800f590:	2000039c 	.word	0x2000039c

0800f594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800f594:	b480      	push	{r7}
 800f596:	af00      	add	r7, sp, #0
  return uwTick;
 800f598:	4b03      	ldr	r3, [pc, #12]	; (800f5a8 <HAL_GetTick+0x14>)
 800f59a:	681b      	ldr	r3, [r3, #0]
}
 800f59c:	4618      	mov	r0, r3
 800f59e:	46bd      	mov	sp, r7
 800f5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a4:	4770      	bx	lr
 800f5a6:	bf00      	nop
 800f5a8:	2000039c 	.word	0x2000039c

0800f5ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800f5ac:	b580      	push	{r7, lr}
 800f5ae:	b084      	sub	sp, #16
 800f5b0:	af00      	add	r7, sp, #0
 800f5b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800f5b4:	f7ff ffee 	bl	800f594 <HAL_GetTick>
 800f5b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f5c4:	d005      	beq.n	800f5d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800f5c6:	4b09      	ldr	r3, [pc, #36]	; (800f5ec <HAL_Delay+0x40>)
 800f5c8:	781b      	ldrb	r3, [r3, #0]
 800f5ca:	461a      	mov	r2, r3
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	4413      	add	r3, r2
 800f5d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800f5d2:	bf00      	nop
 800f5d4:	f7ff ffde 	bl	800f594 <HAL_GetTick>
 800f5d8:	4602      	mov	r2, r0
 800f5da:	68bb      	ldr	r3, [r7, #8]
 800f5dc:	1ad3      	subs	r3, r2, r3
 800f5de:	68fa      	ldr	r2, [r7, #12]
 800f5e0:	429a      	cmp	r2, r3
 800f5e2:	d8f7      	bhi.n	800f5d4 <HAL_Delay+0x28>
  {
  }
}
 800f5e4:	bf00      	nop
 800f5e6:	3710      	adds	r7, #16
 800f5e8:	46bd      	mov	sp, r7
 800f5ea:	bd80      	pop	{r7, pc}
 800f5ec:	20000160 	.word	0x20000160

0800f5f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800f5f0:	b480      	push	{r7}
 800f5f2:	b085      	sub	sp, #20
 800f5f4:	af00      	add	r7, sp, #0
 800f5f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	f003 0307 	and.w	r3, r3, #7
 800f5fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800f600:	4b0c      	ldr	r3, [pc, #48]	; (800f634 <__NVIC_SetPriorityGrouping+0x44>)
 800f602:	68db      	ldr	r3, [r3, #12]
 800f604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800f606:	68ba      	ldr	r2, [r7, #8]
 800f608:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800f60c:	4013      	ands	r3, r2
 800f60e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800f614:	68bb      	ldr	r3, [r7, #8]
 800f616:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800f618:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800f61c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800f622:	4a04      	ldr	r2, [pc, #16]	; (800f634 <__NVIC_SetPriorityGrouping+0x44>)
 800f624:	68bb      	ldr	r3, [r7, #8]
 800f626:	60d3      	str	r3, [r2, #12]
}
 800f628:	bf00      	nop
 800f62a:	3714      	adds	r7, #20
 800f62c:	46bd      	mov	sp, r7
 800f62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f632:	4770      	bx	lr
 800f634:	e000ed00 	.word	0xe000ed00

0800f638 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800f638:	b480      	push	{r7}
 800f63a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800f63c:	4b04      	ldr	r3, [pc, #16]	; (800f650 <__NVIC_GetPriorityGrouping+0x18>)
 800f63e:	68db      	ldr	r3, [r3, #12]
 800f640:	0a1b      	lsrs	r3, r3, #8
 800f642:	f003 0307 	and.w	r3, r3, #7
}
 800f646:	4618      	mov	r0, r3
 800f648:	46bd      	mov	sp, r7
 800f64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f64e:	4770      	bx	lr
 800f650:	e000ed00 	.word	0xe000ed00

0800f654 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800f654:	b480      	push	{r7}
 800f656:	b083      	sub	sp, #12
 800f658:	af00      	add	r7, sp, #0
 800f65a:	4603      	mov	r3, r0
 800f65c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f65e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f662:	2b00      	cmp	r3, #0
 800f664:	db0b      	blt.n	800f67e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f666:	79fb      	ldrb	r3, [r7, #7]
 800f668:	f003 021f 	and.w	r2, r3, #31
 800f66c:	4907      	ldr	r1, [pc, #28]	; (800f68c <__NVIC_EnableIRQ+0x38>)
 800f66e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f672:	095b      	lsrs	r3, r3, #5
 800f674:	2001      	movs	r0, #1
 800f676:	fa00 f202 	lsl.w	r2, r0, r2
 800f67a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800f67e:	bf00      	nop
 800f680:	370c      	adds	r7, #12
 800f682:	46bd      	mov	sp, r7
 800f684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f688:	4770      	bx	lr
 800f68a:	bf00      	nop
 800f68c:	e000e100 	.word	0xe000e100

0800f690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800f690:	b480      	push	{r7}
 800f692:	b083      	sub	sp, #12
 800f694:	af00      	add	r7, sp, #0
 800f696:	4603      	mov	r3, r0
 800f698:	6039      	str	r1, [r7, #0]
 800f69a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f69c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	db0a      	blt.n	800f6ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f6a4:	683b      	ldr	r3, [r7, #0]
 800f6a6:	b2da      	uxtb	r2, r3
 800f6a8:	490c      	ldr	r1, [pc, #48]	; (800f6dc <__NVIC_SetPriority+0x4c>)
 800f6aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f6ae:	0112      	lsls	r2, r2, #4
 800f6b0:	b2d2      	uxtb	r2, r2
 800f6b2:	440b      	add	r3, r1
 800f6b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800f6b8:	e00a      	b.n	800f6d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f6ba:	683b      	ldr	r3, [r7, #0]
 800f6bc:	b2da      	uxtb	r2, r3
 800f6be:	4908      	ldr	r1, [pc, #32]	; (800f6e0 <__NVIC_SetPriority+0x50>)
 800f6c0:	79fb      	ldrb	r3, [r7, #7]
 800f6c2:	f003 030f 	and.w	r3, r3, #15
 800f6c6:	3b04      	subs	r3, #4
 800f6c8:	0112      	lsls	r2, r2, #4
 800f6ca:	b2d2      	uxtb	r2, r2
 800f6cc:	440b      	add	r3, r1
 800f6ce:	761a      	strb	r2, [r3, #24]
}
 800f6d0:	bf00      	nop
 800f6d2:	370c      	adds	r7, #12
 800f6d4:	46bd      	mov	sp, r7
 800f6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6da:	4770      	bx	lr
 800f6dc:	e000e100 	.word	0xe000e100
 800f6e0:	e000ed00 	.word	0xe000ed00

0800f6e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800f6e4:	b480      	push	{r7}
 800f6e6:	b089      	sub	sp, #36	; 0x24
 800f6e8:	af00      	add	r7, sp, #0
 800f6ea:	60f8      	str	r0, [r7, #12]
 800f6ec:	60b9      	str	r1, [r7, #8]
 800f6ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	f003 0307 	and.w	r3, r3, #7
 800f6f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800f6f8:	69fb      	ldr	r3, [r7, #28]
 800f6fa:	f1c3 0307 	rsb	r3, r3, #7
 800f6fe:	2b04      	cmp	r3, #4
 800f700:	bf28      	it	cs
 800f702:	2304      	movcs	r3, #4
 800f704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800f706:	69fb      	ldr	r3, [r7, #28]
 800f708:	3304      	adds	r3, #4
 800f70a:	2b06      	cmp	r3, #6
 800f70c:	d902      	bls.n	800f714 <NVIC_EncodePriority+0x30>
 800f70e:	69fb      	ldr	r3, [r7, #28]
 800f710:	3b03      	subs	r3, #3
 800f712:	e000      	b.n	800f716 <NVIC_EncodePriority+0x32>
 800f714:	2300      	movs	r3, #0
 800f716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800f718:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f71c:	69bb      	ldr	r3, [r7, #24]
 800f71e:	fa02 f303 	lsl.w	r3, r2, r3
 800f722:	43da      	mvns	r2, r3
 800f724:	68bb      	ldr	r3, [r7, #8]
 800f726:	401a      	ands	r2, r3
 800f728:	697b      	ldr	r3, [r7, #20]
 800f72a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800f72c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800f730:	697b      	ldr	r3, [r7, #20]
 800f732:	fa01 f303 	lsl.w	r3, r1, r3
 800f736:	43d9      	mvns	r1, r3
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800f73c:	4313      	orrs	r3, r2
         );
}
 800f73e:	4618      	mov	r0, r3
 800f740:	3724      	adds	r7, #36	; 0x24
 800f742:	46bd      	mov	sp, r7
 800f744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f748:	4770      	bx	lr
	...

0800f74c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800f74c:	b580      	push	{r7, lr}
 800f74e:	b082      	sub	sp, #8
 800f750:	af00      	add	r7, sp, #0
 800f752:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	3b01      	subs	r3, #1
 800f758:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800f75c:	d301      	bcc.n	800f762 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800f75e:	2301      	movs	r3, #1
 800f760:	e00f      	b.n	800f782 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800f762:	4a0a      	ldr	r2, [pc, #40]	; (800f78c <SysTick_Config+0x40>)
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	3b01      	subs	r3, #1
 800f768:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800f76a:	210f      	movs	r1, #15
 800f76c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f770:	f7ff ff8e 	bl	800f690 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800f774:	4b05      	ldr	r3, [pc, #20]	; (800f78c <SysTick_Config+0x40>)
 800f776:	2200      	movs	r2, #0
 800f778:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800f77a:	4b04      	ldr	r3, [pc, #16]	; (800f78c <SysTick_Config+0x40>)
 800f77c:	2207      	movs	r2, #7
 800f77e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800f780:	2300      	movs	r3, #0
}
 800f782:	4618      	mov	r0, r3
 800f784:	3708      	adds	r7, #8
 800f786:	46bd      	mov	sp, r7
 800f788:	bd80      	pop	{r7, pc}
 800f78a:	bf00      	nop
 800f78c:	e000e010 	.word	0xe000e010

0800f790 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800f790:	b580      	push	{r7, lr}
 800f792:	b082      	sub	sp, #8
 800f794:	af00      	add	r7, sp, #0
 800f796:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800f798:	6878      	ldr	r0, [r7, #4]
 800f79a:	f7ff ff29 	bl	800f5f0 <__NVIC_SetPriorityGrouping>
}
 800f79e:	bf00      	nop
 800f7a0:	3708      	adds	r7, #8
 800f7a2:	46bd      	mov	sp, r7
 800f7a4:	bd80      	pop	{r7, pc}

0800f7a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800f7a6:	b580      	push	{r7, lr}
 800f7a8:	b086      	sub	sp, #24
 800f7aa:	af00      	add	r7, sp, #0
 800f7ac:	4603      	mov	r3, r0
 800f7ae:	60b9      	str	r1, [r7, #8]
 800f7b0:	607a      	str	r2, [r7, #4]
 800f7b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800f7b4:	2300      	movs	r3, #0
 800f7b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800f7b8:	f7ff ff3e 	bl	800f638 <__NVIC_GetPriorityGrouping>
 800f7bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800f7be:	687a      	ldr	r2, [r7, #4]
 800f7c0:	68b9      	ldr	r1, [r7, #8]
 800f7c2:	6978      	ldr	r0, [r7, #20]
 800f7c4:	f7ff ff8e 	bl	800f6e4 <NVIC_EncodePriority>
 800f7c8:	4602      	mov	r2, r0
 800f7ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f7ce:	4611      	mov	r1, r2
 800f7d0:	4618      	mov	r0, r3
 800f7d2:	f7ff ff5d 	bl	800f690 <__NVIC_SetPriority>
}
 800f7d6:	bf00      	nop
 800f7d8:	3718      	adds	r7, #24
 800f7da:	46bd      	mov	sp, r7
 800f7dc:	bd80      	pop	{r7, pc}

0800f7de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800f7de:	b580      	push	{r7, lr}
 800f7e0:	b082      	sub	sp, #8
 800f7e2:	af00      	add	r7, sp, #0
 800f7e4:	4603      	mov	r3, r0
 800f7e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800f7e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f7ec:	4618      	mov	r0, r3
 800f7ee:	f7ff ff31 	bl	800f654 <__NVIC_EnableIRQ>
}
 800f7f2:	bf00      	nop
 800f7f4:	3708      	adds	r7, #8
 800f7f6:	46bd      	mov	sp, r7
 800f7f8:	bd80      	pop	{r7, pc}

0800f7fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800f7fa:	b580      	push	{r7, lr}
 800f7fc:	b082      	sub	sp, #8
 800f7fe:	af00      	add	r7, sp, #0
 800f800:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800f802:	6878      	ldr	r0, [r7, #4]
 800f804:	f7ff ffa2 	bl	800f74c <SysTick_Config>
 800f808:	4603      	mov	r3, r0
}
 800f80a:	4618      	mov	r0, r3
 800f80c:	3708      	adds	r7, #8
 800f80e:	46bd      	mov	sp, r7
 800f810:	bd80      	pop	{r7, pc}
	...

0800f814 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800f814:	b480      	push	{r7}
 800f816:	b089      	sub	sp, #36	; 0x24
 800f818:	af00      	add	r7, sp, #0
 800f81a:	6078      	str	r0, [r7, #4]
 800f81c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800f81e:	2300      	movs	r3, #0
 800f820:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800f822:	2300      	movs	r3, #0
 800f824:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800f826:	2300      	movs	r3, #0
 800f828:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800f82a:	2300      	movs	r3, #0
 800f82c:	61fb      	str	r3, [r7, #28]
 800f82e:	e159      	b.n	800fae4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800f830:	2201      	movs	r2, #1
 800f832:	69fb      	ldr	r3, [r7, #28]
 800f834:	fa02 f303 	lsl.w	r3, r2, r3
 800f838:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800f83a:	683b      	ldr	r3, [r7, #0]
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	697a      	ldr	r2, [r7, #20]
 800f840:	4013      	ands	r3, r2
 800f842:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800f844:	693a      	ldr	r2, [r7, #16]
 800f846:	697b      	ldr	r3, [r7, #20]
 800f848:	429a      	cmp	r2, r3
 800f84a:	f040 8148 	bne.w	800fade <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800f84e:	683b      	ldr	r3, [r7, #0]
 800f850:	685b      	ldr	r3, [r3, #4]
 800f852:	2b01      	cmp	r3, #1
 800f854:	d00b      	beq.n	800f86e <HAL_GPIO_Init+0x5a>
 800f856:	683b      	ldr	r3, [r7, #0]
 800f858:	685b      	ldr	r3, [r3, #4]
 800f85a:	2b02      	cmp	r3, #2
 800f85c:	d007      	beq.n	800f86e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800f85e:	683b      	ldr	r3, [r7, #0]
 800f860:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800f862:	2b11      	cmp	r3, #17
 800f864:	d003      	beq.n	800f86e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800f866:	683b      	ldr	r3, [r7, #0]
 800f868:	685b      	ldr	r3, [r3, #4]
 800f86a:	2b12      	cmp	r3, #18
 800f86c:	d130      	bne.n	800f8d0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	689b      	ldr	r3, [r3, #8]
 800f872:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800f874:	69fb      	ldr	r3, [r7, #28]
 800f876:	005b      	lsls	r3, r3, #1
 800f878:	2203      	movs	r2, #3
 800f87a:	fa02 f303 	lsl.w	r3, r2, r3
 800f87e:	43db      	mvns	r3, r3
 800f880:	69ba      	ldr	r2, [r7, #24]
 800f882:	4013      	ands	r3, r2
 800f884:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800f886:	683b      	ldr	r3, [r7, #0]
 800f888:	68da      	ldr	r2, [r3, #12]
 800f88a:	69fb      	ldr	r3, [r7, #28]
 800f88c:	005b      	lsls	r3, r3, #1
 800f88e:	fa02 f303 	lsl.w	r3, r2, r3
 800f892:	69ba      	ldr	r2, [r7, #24]
 800f894:	4313      	orrs	r3, r2
 800f896:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	69ba      	ldr	r2, [r7, #24]
 800f89c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	685b      	ldr	r3, [r3, #4]
 800f8a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800f8a4:	2201      	movs	r2, #1
 800f8a6:	69fb      	ldr	r3, [r7, #28]
 800f8a8:	fa02 f303 	lsl.w	r3, r2, r3
 800f8ac:	43db      	mvns	r3, r3
 800f8ae:	69ba      	ldr	r2, [r7, #24]
 800f8b0:	4013      	ands	r3, r2
 800f8b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800f8b4:	683b      	ldr	r3, [r7, #0]
 800f8b6:	685b      	ldr	r3, [r3, #4]
 800f8b8:	091b      	lsrs	r3, r3, #4
 800f8ba:	f003 0201 	and.w	r2, r3, #1
 800f8be:	69fb      	ldr	r3, [r7, #28]
 800f8c0:	fa02 f303 	lsl.w	r3, r2, r3
 800f8c4:	69ba      	ldr	r2, [r7, #24]
 800f8c6:	4313      	orrs	r3, r2
 800f8c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	69ba      	ldr	r2, [r7, #24]
 800f8ce:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	68db      	ldr	r3, [r3, #12]
 800f8d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800f8d6:	69fb      	ldr	r3, [r7, #28]
 800f8d8:	005b      	lsls	r3, r3, #1
 800f8da:	2203      	movs	r2, #3
 800f8dc:	fa02 f303 	lsl.w	r3, r2, r3
 800f8e0:	43db      	mvns	r3, r3
 800f8e2:	69ba      	ldr	r2, [r7, #24]
 800f8e4:	4013      	ands	r3, r2
 800f8e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800f8e8:	683b      	ldr	r3, [r7, #0]
 800f8ea:	689a      	ldr	r2, [r3, #8]
 800f8ec:	69fb      	ldr	r3, [r7, #28]
 800f8ee:	005b      	lsls	r3, r3, #1
 800f8f0:	fa02 f303 	lsl.w	r3, r2, r3
 800f8f4:	69ba      	ldr	r2, [r7, #24]
 800f8f6:	4313      	orrs	r3, r2
 800f8f8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	69ba      	ldr	r2, [r7, #24]
 800f8fe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800f900:	683b      	ldr	r3, [r7, #0]
 800f902:	685b      	ldr	r3, [r3, #4]
 800f904:	2b02      	cmp	r3, #2
 800f906:	d003      	beq.n	800f910 <HAL_GPIO_Init+0xfc>
 800f908:	683b      	ldr	r3, [r7, #0]
 800f90a:	685b      	ldr	r3, [r3, #4]
 800f90c:	2b12      	cmp	r3, #18
 800f90e:	d123      	bne.n	800f958 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800f910:	69fb      	ldr	r3, [r7, #28]
 800f912:	08da      	lsrs	r2, r3, #3
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	3208      	adds	r2, #8
 800f918:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f91c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800f91e:	69fb      	ldr	r3, [r7, #28]
 800f920:	f003 0307 	and.w	r3, r3, #7
 800f924:	009b      	lsls	r3, r3, #2
 800f926:	220f      	movs	r2, #15
 800f928:	fa02 f303 	lsl.w	r3, r2, r3
 800f92c:	43db      	mvns	r3, r3
 800f92e:	69ba      	ldr	r2, [r7, #24]
 800f930:	4013      	ands	r3, r2
 800f932:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800f934:	683b      	ldr	r3, [r7, #0]
 800f936:	691a      	ldr	r2, [r3, #16]
 800f938:	69fb      	ldr	r3, [r7, #28]
 800f93a:	f003 0307 	and.w	r3, r3, #7
 800f93e:	009b      	lsls	r3, r3, #2
 800f940:	fa02 f303 	lsl.w	r3, r2, r3
 800f944:	69ba      	ldr	r2, [r7, #24]
 800f946:	4313      	orrs	r3, r2
 800f948:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800f94a:	69fb      	ldr	r3, [r7, #28]
 800f94c:	08da      	lsrs	r2, r3, #3
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	3208      	adds	r2, #8
 800f952:	69b9      	ldr	r1, [r7, #24]
 800f954:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800f95e:	69fb      	ldr	r3, [r7, #28]
 800f960:	005b      	lsls	r3, r3, #1
 800f962:	2203      	movs	r2, #3
 800f964:	fa02 f303 	lsl.w	r3, r2, r3
 800f968:	43db      	mvns	r3, r3
 800f96a:	69ba      	ldr	r2, [r7, #24]
 800f96c:	4013      	ands	r3, r2
 800f96e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800f970:	683b      	ldr	r3, [r7, #0]
 800f972:	685b      	ldr	r3, [r3, #4]
 800f974:	f003 0203 	and.w	r2, r3, #3
 800f978:	69fb      	ldr	r3, [r7, #28]
 800f97a:	005b      	lsls	r3, r3, #1
 800f97c:	fa02 f303 	lsl.w	r3, r2, r3
 800f980:	69ba      	ldr	r2, [r7, #24]
 800f982:	4313      	orrs	r3, r2
 800f984:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	69ba      	ldr	r2, [r7, #24]
 800f98a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800f98c:	683b      	ldr	r3, [r7, #0]
 800f98e:	685b      	ldr	r3, [r3, #4]
 800f990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f994:	2b00      	cmp	r3, #0
 800f996:	f000 80a2 	beq.w	800fade <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800f99a:	2300      	movs	r3, #0
 800f99c:	60fb      	str	r3, [r7, #12]
 800f99e:	4b56      	ldr	r3, [pc, #344]	; (800faf8 <HAL_GPIO_Init+0x2e4>)
 800f9a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f9a2:	4a55      	ldr	r2, [pc, #340]	; (800faf8 <HAL_GPIO_Init+0x2e4>)
 800f9a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f9a8:	6453      	str	r3, [r2, #68]	; 0x44
 800f9aa:	4b53      	ldr	r3, [pc, #332]	; (800faf8 <HAL_GPIO_Init+0x2e4>)
 800f9ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f9ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f9b2:	60fb      	str	r3, [r7, #12]
 800f9b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800f9b6:	4a51      	ldr	r2, [pc, #324]	; (800fafc <HAL_GPIO_Init+0x2e8>)
 800f9b8:	69fb      	ldr	r3, [r7, #28]
 800f9ba:	089b      	lsrs	r3, r3, #2
 800f9bc:	3302      	adds	r3, #2
 800f9be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f9c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800f9c4:	69fb      	ldr	r3, [r7, #28]
 800f9c6:	f003 0303 	and.w	r3, r3, #3
 800f9ca:	009b      	lsls	r3, r3, #2
 800f9cc:	220f      	movs	r2, #15
 800f9ce:	fa02 f303 	lsl.w	r3, r2, r3
 800f9d2:	43db      	mvns	r3, r3
 800f9d4:	69ba      	ldr	r2, [r7, #24]
 800f9d6:	4013      	ands	r3, r2
 800f9d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	4a48      	ldr	r2, [pc, #288]	; (800fb00 <HAL_GPIO_Init+0x2ec>)
 800f9de:	4293      	cmp	r3, r2
 800f9e0:	d019      	beq.n	800fa16 <HAL_GPIO_Init+0x202>
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	4a47      	ldr	r2, [pc, #284]	; (800fb04 <HAL_GPIO_Init+0x2f0>)
 800f9e6:	4293      	cmp	r3, r2
 800f9e8:	d013      	beq.n	800fa12 <HAL_GPIO_Init+0x1fe>
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	4a46      	ldr	r2, [pc, #280]	; (800fb08 <HAL_GPIO_Init+0x2f4>)
 800f9ee:	4293      	cmp	r3, r2
 800f9f0:	d00d      	beq.n	800fa0e <HAL_GPIO_Init+0x1fa>
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	4a45      	ldr	r2, [pc, #276]	; (800fb0c <HAL_GPIO_Init+0x2f8>)
 800f9f6:	4293      	cmp	r3, r2
 800f9f8:	d007      	beq.n	800fa0a <HAL_GPIO_Init+0x1f6>
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	4a44      	ldr	r2, [pc, #272]	; (800fb10 <HAL_GPIO_Init+0x2fc>)
 800f9fe:	4293      	cmp	r3, r2
 800fa00:	d101      	bne.n	800fa06 <HAL_GPIO_Init+0x1f2>
 800fa02:	2304      	movs	r3, #4
 800fa04:	e008      	b.n	800fa18 <HAL_GPIO_Init+0x204>
 800fa06:	2307      	movs	r3, #7
 800fa08:	e006      	b.n	800fa18 <HAL_GPIO_Init+0x204>
 800fa0a:	2303      	movs	r3, #3
 800fa0c:	e004      	b.n	800fa18 <HAL_GPIO_Init+0x204>
 800fa0e:	2302      	movs	r3, #2
 800fa10:	e002      	b.n	800fa18 <HAL_GPIO_Init+0x204>
 800fa12:	2301      	movs	r3, #1
 800fa14:	e000      	b.n	800fa18 <HAL_GPIO_Init+0x204>
 800fa16:	2300      	movs	r3, #0
 800fa18:	69fa      	ldr	r2, [r7, #28]
 800fa1a:	f002 0203 	and.w	r2, r2, #3
 800fa1e:	0092      	lsls	r2, r2, #2
 800fa20:	4093      	lsls	r3, r2
 800fa22:	69ba      	ldr	r2, [r7, #24]
 800fa24:	4313      	orrs	r3, r2
 800fa26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800fa28:	4934      	ldr	r1, [pc, #208]	; (800fafc <HAL_GPIO_Init+0x2e8>)
 800fa2a:	69fb      	ldr	r3, [r7, #28]
 800fa2c:	089b      	lsrs	r3, r3, #2
 800fa2e:	3302      	adds	r3, #2
 800fa30:	69ba      	ldr	r2, [r7, #24]
 800fa32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800fa36:	4b37      	ldr	r3, [pc, #220]	; (800fb14 <HAL_GPIO_Init+0x300>)
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800fa3c:	693b      	ldr	r3, [r7, #16]
 800fa3e:	43db      	mvns	r3, r3
 800fa40:	69ba      	ldr	r2, [r7, #24]
 800fa42:	4013      	ands	r3, r2
 800fa44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800fa46:	683b      	ldr	r3, [r7, #0]
 800fa48:	685b      	ldr	r3, [r3, #4]
 800fa4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d003      	beq.n	800fa5a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800fa52:	69ba      	ldr	r2, [r7, #24]
 800fa54:	693b      	ldr	r3, [r7, #16]
 800fa56:	4313      	orrs	r3, r2
 800fa58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800fa5a:	4a2e      	ldr	r2, [pc, #184]	; (800fb14 <HAL_GPIO_Init+0x300>)
 800fa5c:	69bb      	ldr	r3, [r7, #24]
 800fa5e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800fa60:	4b2c      	ldr	r3, [pc, #176]	; (800fb14 <HAL_GPIO_Init+0x300>)
 800fa62:	685b      	ldr	r3, [r3, #4]
 800fa64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800fa66:	693b      	ldr	r3, [r7, #16]
 800fa68:	43db      	mvns	r3, r3
 800fa6a:	69ba      	ldr	r2, [r7, #24]
 800fa6c:	4013      	ands	r3, r2
 800fa6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800fa70:	683b      	ldr	r3, [r7, #0]
 800fa72:	685b      	ldr	r3, [r3, #4]
 800fa74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d003      	beq.n	800fa84 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800fa7c:	69ba      	ldr	r2, [r7, #24]
 800fa7e:	693b      	ldr	r3, [r7, #16]
 800fa80:	4313      	orrs	r3, r2
 800fa82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800fa84:	4a23      	ldr	r2, [pc, #140]	; (800fb14 <HAL_GPIO_Init+0x300>)
 800fa86:	69bb      	ldr	r3, [r7, #24]
 800fa88:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800fa8a:	4b22      	ldr	r3, [pc, #136]	; (800fb14 <HAL_GPIO_Init+0x300>)
 800fa8c:	689b      	ldr	r3, [r3, #8]
 800fa8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800fa90:	693b      	ldr	r3, [r7, #16]
 800fa92:	43db      	mvns	r3, r3
 800fa94:	69ba      	ldr	r2, [r7, #24]
 800fa96:	4013      	ands	r3, r2
 800fa98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800fa9a:	683b      	ldr	r3, [r7, #0]
 800fa9c:	685b      	ldr	r3, [r3, #4]
 800fa9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d003      	beq.n	800faae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800faa6:	69ba      	ldr	r2, [r7, #24]
 800faa8:	693b      	ldr	r3, [r7, #16]
 800faaa:	4313      	orrs	r3, r2
 800faac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800faae:	4a19      	ldr	r2, [pc, #100]	; (800fb14 <HAL_GPIO_Init+0x300>)
 800fab0:	69bb      	ldr	r3, [r7, #24]
 800fab2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800fab4:	4b17      	ldr	r3, [pc, #92]	; (800fb14 <HAL_GPIO_Init+0x300>)
 800fab6:	68db      	ldr	r3, [r3, #12]
 800fab8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800faba:	693b      	ldr	r3, [r7, #16]
 800fabc:	43db      	mvns	r3, r3
 800fabe:	69ba      	ldr	r2, [r7, #24]
 800fac0:	4013      	ands	r3, r2
 800fac2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800fac4:	683b      	ldr	r3, [r7, #0]
 800fac6:	685b      	ldr	r3, [r3, #4]
 800fac8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800facc:	2b00      	cmp	r3, #0
 800face:	d003      	beq.n	800fad8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800fad0:	69ba      	ldr	r2, [r7, #24]
 800fad2:	693b      	ldr	r3, [r7, #16]
 800fad4:	4313      	orrs	r3, r2
 800fad6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800fad8:	4a0e      	ldr	r2, [pc, #56]	; (800fb14 <HAL_GPIO_Init+0x300>)
 800fada:	69bb      	ldr	r3, [r7, #24]
 800fadc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800fade:	69fb      	ldr	r3, [r7, #28]
 800fae0:	3301      	adds	r3, #1
 800fae2:	61fb      	str	r3, [r7, #28]
 800fae4:	69fb      	ldr	r3, [r7, #28]
 800fae6:	2b0f      	cmp	r3, #15
 800fae8:	f67f aea2 	bls.w	800f830 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800faec:	bf00      	nop
 800faee:	3724      	adds	r7, #36	; 0x24
 800faf0:	46bd      	mov	sp, r7
 800faf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faf6:	4770      	bx	lr
 800faf8:	40023800 	.word	0x40023800
 800fafc:	40013800 	.word	0x40013800
 800fb00:	40020000 	.word	0x40020000
 800fb04:	40020400 	.word	0x40020400
 800fb08:	40020800 	.word	0x40020800
 800fb0c:	40020c00 	.word	0x40020c00
 800fb10:	40021000 	.word	0x40021000
 800fb14:	40013c00 	.word	0x40013c00

0800fb18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800fb18:	b480      	push	{r7}
 800fb1a:	b085      	sub	sp, #20
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	6078      	str	r0, [r7, #4]
 800fb20:	460b      	mov	r3, r1
 800fb22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	691a      	ldr	r2, [r3, #16]
 800fb28:	887b      	ldrh	r3, [r7, #2]
 800fb2a:	4013      	ands	r3, r2
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d002      	beq.n	800fb36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800fb30:	2301      	movs	r3, #1
 800fb32:	73fb      	strb	r3, [r7, #15]
 800fb34:	e001      	b.n	800fb3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800fb36:	2300      	movs	r3, #0
 800fb38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800fb3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb3c:	4618      	mov	r0, r3
 800fb3e:	3714      	adds	r7, #20
 800fb40:	46bd      	mov	sp, r7
 800fb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb46:	4770      	bx	lr

0800fb48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800fb48:	b480      	push	{r7}
 800fb4a:	b083      	sub	sp, #12
 800fb4c:	af00      	add	r7, sp, #0
 800fb4e:	6078      	str	r0, [r7, #4]
 800fb50:	460b      	mov	r3, r1
 800fb52:	807b      	strh	r3, [r7, #2]
 800fb54:	4613      	mov	r3, r2
 800fb56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800fb58:	787b      	ldrb	r3, [r7, #1]
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d003      	beq.n	800fb66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800fb5e:	887a      	ldrh	r2, [r7, #2]
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800fb64:	e003      	b.n	800fb6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800fb66:	887b      	ldrh	r3, [r7, #2]
 800fb68:	041a      	lsls	r2, r3, #16
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	619a      	str	r2, [r3, #24]
}
 800fb6e:	bf00      	nop
 800fb70:	370c      	adds	r7, #12
 800fb72:	46bd      	mov	sp, r7
 800fb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb78:	4770      	bx	lr
	...

0800fb7c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800fb7c:	b580      	push	{r7, lr}
 800fb7e:	b082      	sub	sp, #8
 800fb80:	af00      	add	r7, sp, #0
 800fb82:	4603      	mov	r3, r0
 800fb84:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800fb86:	4b08      	ldr	r3, [pc, #32]	; (800fba8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800fb88:	695a      	ldr	r2, [r3, #20]
 800fb8a:	88fb      	ldrh	r3, [r7, #6]
 800fb8c:	4013      	ands	r3, r2
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d006      	beq.n	800fba0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800fb92:	4a05      	ldr	r2, [pc, #20]	; (800fba8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800fb94:	88fb      	ldrh	r3, [r7, #6]
 800fb96:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800fb98:	88fb      	ldrh	r3, [r7, #6]
 800fb9a:	4618      	mov	r0, r3
 800fb9c:	f000 f806 	bl	800fbac <HAL_GPIO_EXTI_Callback>
  }
}
 800fba0:	bf00      	nop
 800fba2:	3708      	adds	r7, #8
 800fba4:	46bd      	mov	sp, r7
 800fba6:	bd80      	pop	{r7, pc}
 800fba8:	40013c00 	.word	0x40013c00

0800fbac <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800fbac:	b480      	push	{r7}
 800fbae:	b083      	sub	sp, #12
 800fbb0:	af00      	add	r7, sp, #0
 800fbb2:	4603      	mov	r3, r0
 800fbb4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800fbb6:	bf00      	nop
 800fbb8:	370c      	adds	r7, #12
 800fbba:	46bd      	mov	sp, r7
 800fbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc0:	4770      	bx	lr

0800fbc2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800fbc2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fbc4:	b08f      	sub	sp, #60	; 0x3c
 800fbc6:	af0a      	add	r7, sp, #40	; 0x28
 800fbc8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d101      	bne.n	800fbd4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800fbd0:	2301      	movs	r3, #1
 800fbd2:	e054      	b.n	800fc7e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 800fbe0:	b2db      	uxtb	r3, r3
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d106      	bne.n	800fbf4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	2200      	movs	r2, #0
 800fbea:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800fbee:	6878      	ldr	r0, [r7, #4]
 800fbf0:	f005 ff80 	bl	8015af4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	2203      	movs	r2, #3
 800fbf8:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fc00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d102      	bne.n	800fc0e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	2200      	movs	r2, #0
 800fc0c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	4618      	mov	r0, r3
 800fc14:	f004 f81e 	bl	8013c54 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	603b      	str	r3, [r7, #0]
 800fc1e:	687e      	ldr	r6, [r7, #4]
 800fc20:	466d      	mov	r5, sp
 800fc22:	f106 0410 	add.w	r4, r6, #16
 800fc26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fc28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800fc2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fc2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800fc2e:	e894 0003 	ldmia.w	r4, {r0, r1}
 800fc32:	e885 0003 	stmia.w	r5, {r0, r1}
 800fc36:	1d33      	adds	r3, r6, #4
 800fc38:	cb0e      	ldmia	r3, {r1, r2, r3}
 800fc3a:	6838      	ldr	r0, [r7, #0]
 800fc3c:	f003 ff98 	bl	8013b70 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	2101      	movs	r1, #1
 800fc46:	4618      	mov	r0, r3
 800fc48:	f004 f815 	bl	8013c76 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	603b      	str	r3, [r7, #0]
 800fc52:	687e      	ldr	r6, [r7, #4]
 800fc54:	466d      	mov	r5, sp
 800fc56:	f106 0410 	add.w	r4, r6, #16
 800fc5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fc5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800fc5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fc60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800fc62:	e894 0003 	ldmia.w	r4, {r0, r1}
 800fc66:	e885 0003 	stmia.w	r5, {r0, r1}
 800fc6a:	1d33      	adds	r3, r6, #4
 800fc6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800fc6e:	6838      	ldr	r0, [r7, #0]
 800fc70:	f004 f928 	bl	8013ec4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	2201      	movs	r2, #1
 800fc78:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 800fc7c:	2300      	movs	r3, #0
}
 800fc7e:	4618      	mov	r0, r3
 800fc80:	3714      	adds	r7, #20
 800fc82:	46bd      	mov	sp, r7
 800fc84:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fc86 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800fc86:	b590      	push	{r4, r7, lr}
 800fc88:	b089      	sub	sp, #36	; 0x24
 800fc8a:	af04      	add	r7, sp, #16
 800fc8c:	6078      	str	r0, [r7, #4]
 800fc8e:	4608      	mov	r0, r1
 800fc90:	4611      	mov	r1, r2
 800fc92:	461a      	mov	r2, r3
 800fc94:	4603      	mov	r3, r0
 800fc96:	70fb      	strb	r3, [r7, #3]
 800fc98:	460b      	mov	r3, r1
 800fc9a:	70bb      	strb	r3, [r7, #2]
 800fc9c:	4613      	mov	r3, r2
 800fc9e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800fca6:	2b01      	cmp	r3, #1
 800fca8:	d101      	bne.n	800fcae <HAL_HCD_HC_Init+0x28>
 800fcaa:	2302      	movs	r3, #2
 800fcac:	e07f      	b.n	800fdae <HAL_HCD_HC_Init+0x128>
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	2201      	movs	r2, #1
 800fcb2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 800fcb6:	78fa      	ldrb	r2, [r7, #3]
 800fcb8:	6879      	ldr	r1, [r7, #4]
 800fcba:	4613      	mov	r3, r2
 800fcbc:	009b      	lsls	r3, r3, #2
 800fcbe:	4413      	add	r3, r2
 800fcc0:	00db      	lsls	r3, r3, #3
 800fcc2:	440b      	add	r3, r1
 800fcc4:	333d      	adds	r3, #61	; 0x3d
 800fcc6:	2200      	movs	r2, #0
 800fcc8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800fcca:	78fa      	ldrb	r2, [r7, #3]
 800fccc:	6879      	ldr	r1, [r7, #4]
 800fcce:	4613      	mov	r3, r2
 800fcd0:	009b      	lsls	r3, r3, #2
 800fcd2:	4413      	add	r3, r2
 800fcd4:	00db      	lsls	r3, r3, #3
 800fcd6:	440b      	add	r3, r1
 800fcd8:	3338      	adds	r3, #56	; 0x38
 800fcda:	787a      	ldrb	r2, [r7, #1]
 800fcdc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800fcde:	78fa      	ldrb	r2, [r7, #3]
 800fce0:	6879      	ldr	r1, [r7, #4]
 800fce2:	4613      	mov	r3, r2
 800fce4:	009b      	lsls	r3, r3, #2
 800fce6:	4413      	add	r3, r2
 800fce8:	00db      	lsls	r3, r3, #3
 800fcea:	440b      	add	r3, r1
 800fcec:	3340      	adds	r3, #64	; 0x40
 800fcee:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800fcf0:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800fcf2:	78fa      	ldrb	r2, [r7, #3]
 800fcf4:	6879      	ldr	r1, [r7, #4]
 800fcf6:	4613      	mov	r3, r2
 800fcf8:	009b      	lsls	r3, r3, #2
 800fcfa:	4413      	add	r3, r2
 800fcfc:	00db      	lsls	r3, r3, #3
 800fcfe:	440b      	add	r3, r1
 800fd00:	3339      	adds	r3, #57	; 0x39
 800fd02:	78fa      	ldrb	r2, [r7, #3]
 800fd04:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800fd06:	78fa      	ldrb	r2, [r7, #3]
 800fd08:	6879      	ldr	r1, [r7, #4]
 800fd0a:	4613      	mov	r3, r2
 800fd0c:	009b      	lsls	r3, r3, #2
 800fd0e:	4413      	add	r3, r2
 800fd10:	00db      	lsls	r3, r3, #3
 800fd12:	440b      	add	r3, r1
 800fd14:	333f      	adds	r3, #63	; 0x3f
 800fd16:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800fd1a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800fd1c:	78fa      	ldrb	r2, [r7, #3]
 800fd1e:	78bb      	ldrb	r3, [r7, #2]
 800fd20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fd24:	b2d8      	uxtb	r0, r3
 800fd26:	6879      	ldr	r1, [r7, #4]
 800fd28:	4613      	mov	r3, r2
 800fd2a:	009b      	lsls	r3, r3, #2
 800fd2c:	4413      	add	r3, r2
 800fd2e:	00db      	lsls	r3, r3, #3
 800fd30:	440b      	add	r3, r1
 800fd32:	333a      	adds	r3, #58	; 0x3a
 800fd34:	4602      	mov	r2, r0
 800fd36:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800fd38:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	da0a      	bge.n	800fd56 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800fd40:	78fa      	ldrb	r2, [r7, #3]
 800fd42:	6879      	ldr	r1, [r7, #4]
 800fd44:	4613      	mov	r3, r2
 800fd46:	009b      	lsls	r3, r3, #2
 800fd48:	4413      	add	r3, r2
 800fd4a:	00db      	lsls	r3, r3, #3
 800fd4c:	440b      	add	r3, r1
 800fd4e:	333b      	adds	r3, #59	; 0x3b
 800fd50:	2201      	movs	r2, #1
 800fd52:	701a      	strb	r2, [r3, #0]
 800fd54:	e009      	b.n	800fd6a <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800fd56:	78fa      	ldrb	r2, [r7, #3]
 800fd58:	6879      	ldr	r1, [r7, #4]
 800fd5a:	4613      	mov	r3, r2
 800fd5c:	009b      	lsls	r3, r3, #2
 800fd5e:	4413      	add	r3, r2
 800fd60:	00db      	lsls	r3, r3, #3
 800fd62:	440b      	add	r3, r1
 800fd64:	333b      	adds	r3, #59	; 0x3b
 800fd66:	2200      	movs	r2, #0
 800fd68:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800fd6a:	78fa      	ldrb	r2, [r7, #3]
 800fd6c:	6879      	ldr	r1, [r7, #4]
 800fd6e:	4613      	mov	r3, r2
 800fd70:	009b      	lsls	r3, r3, #2
 800fd72:	4413      	add	r3, r2
 800fd74:	00db      	lsls	r3, r3, #3
 800fd76:	440b      	add	r3, r1
 800fd78:	333c      	adds	r3, #60	; 0x3c
 800fd7a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800fd7e:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	6818      	ldr	r0, [r3, #0]
 800fd84:	787c      	ldrb	r4, [r7, #1]
 800fd86:	78ba      	ldrb	r2, [r7, #2]
 800fd88:	78f9      	ldrb	r1, [r7, #3]
 800fd8a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800fd8c:	9302      	str	r3, [sp, #8]
 800fd8e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800fd92:	9301      	str	r3, [sp, #4]
 800fd94:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fd98:	9300      	str	r3, [sp, #0]
 800fd9a:	4623      	mov	r3, r4
 800fd9c:	f004 f9d2 	bl	8014144 <USB_HC_Init>
 800fda0:	4603      	mov	r3, r0
 800fda2:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	2200      	movs	r2, #0
 800fda8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800fdac:	7bfb      	ldrb	r3, [r7, #15]
}
 800fdae:	4618      	mov	r0, r3
 800fdb0:	3714      	adds	r7, #20
 800fdb2:	46bd      	mov	sp, r7
 800fdb4:	bd90      	pop	{r4, r7, pc}

0800fdb6 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800fdb6:	b580      	push	{r7, lr}
 800fdb8:	b084      	sub	sp, #16
 800fdba:	af00      	add	r7, sp, #0
 800fdbc:	6078      	str	r0, [r7, #4]
 800fdbe:	460b      	mov	r3, r1
 800fdc0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800fdc2:	2300      	movs	r3, #0
 800fdc4:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800fdcc:	2b01      	cmp	r3, #1
 800fdce:	d101      	bne.n	800fdd4 <HAL_HCD_HC_Halt+0x1e>
 800fdd0:	2302      	movs	r3, #2
 800fdd2:	e00f      	b.n	800fdf4 <HAL_HCD_HC_Halt+0x3e>
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	2201      	movs	r2, #1
 800fdd8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	78fa      	ldrb	r2, [r7, #3]
 800fde2:	4611      	mov	r1, r2
 800fde4:	4618      	mov	r0, r3
 800fde6:	f004 fc0e 	bl	8014606 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	2200      	movs	r2, #0
 800fdee:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800fdf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800fdf4:	4618      	mov	r0, r3
 800fdf6:	3710      	adds	r7, #16
 800fdf8:	46bd      	mov	sp, r7
 800fdfa:	bd80      	pop	{r7, pc}

0800fdfc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800fdfc:	b580      	push	{r7, lr}
 800fdfe:	b082      	sub	sp, #8
 800fe00:	af00      	add	r7, sp, #0
 800fe02:	6078      	str	r0, [r7, #4]
 800fe04:	4608      	mov	r0, r1
 800fe06:	4611      	mov	r1, r2
 800fe08:	461a      	mov	r2, r3
 800fe0a:	4603      	mov	r3, r0
 800fe0c:	70fb      	strb	r3, [r7, #3]
 800fe0e:	460b      	mov	r3, r1
 800fe10:	70bb      	strb	r3, [r7, #2]
 800fe12:	4613      	mov	r3, r2
 800fe14:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800fe16:	78fa      	ldrb	r2, [r7, #3]
 800fe18:	6879      	ldr	r1, [r7, #4]
 800fe1a:	4613      	mov	r3, r2
 800fe1c:	009b      	lsls	r3, r3, #2
 800fe1e:	4413      	add	r3, r2
 800fe20:	00db      	lsls	r3, r3, #3
 800fe22:	440b      	add	r3, r1
 800fe24:	333b      	adds	r3, #59	; 0x3b
 800fe26:	78ba      	ldrb	r2, [r7, #2]
 800fe28:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800fe2a:	78fa      	ldrb	r2, [r7, #3]
 800fe2c:	6879      	ldr	r1, [r7, #4]
 800fe2e:	4613      	mov	r3, r2
 800fe30:	009b      	lsls	r3, r3, #2
 800fe32:	4413      	add	r3, r2
 800fe34:	00db      	lsls	r3, r3, #3
 800fe36:	440b      	add	r3, r1
 800fe38:	333f      	adds	r3, #63	; 0x3f
 800fe3a:	787a      	ldrb	r2, [r7, #1]
 800fe3c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800fe3e:	7c3b      	ldrb	r3, [r7, #16]
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d114      	bne.n	800fe6e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800fe44:	78fa      	ldrb	r2, [r7, #3]
 800fe46:	6879      	ldr	r1, [r7, #4]
 800fe48:	4613      	mov	r3, r2
 800fe4a:	009b      	lsls	r3, r3, #2
 800fe4c:	4413      	add	r3, r2
 800fe4e:	00db      	lsls	r3, r3, #3
 800fe50:	440b      	add	r3, r1
 800fe52:	3342      	adds	r3, #66	; 0x42
 800fe54:	2203      	movs	r2, #3
 800fe56:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800fe58:	78fa      	ldrb	r2, [r7, #3]
 800fe5a:	6879      	ldr	r1, [r7, #4]
 800fe5c:	4613      	mov	r3, r2
 800fe5e:	009b      	lsls	r3, r3, #2
 800fe60:	4413      	add	r3, r2
 800fe62:	00db      	lsls	r3, r3, #3
 800fe64:	440b      	add	r3, r1
 800fe66:	333d      	adds	r3, #61	; 0x3d
 800fe68:	7f3a      	ldrb	r2, [r7, #28]
 800fe6a:	701a      	strb	r2, [r3, #0]
 800fe6c:	e009      	b.n	800fe82 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800fe6e:	78fa      	ldrb	r2, [r7, #3]
 800fe70:	6879      	ldr	r1, [r7, #4]
 800fe72:	4613      	mov	r3, r2
 800fe74:	009b      	lsls	r3, r3, #2
 800fe76:	4413      	add	r3, r2
 800fe78:	00db      	lsls	r3, r3, #3
 800fe7a:	440b      	add	r3, r1
 800fe7c:	3342      	adds	r3, #66	; 0x42
 800fe7e:	2202      	movs	r2, #2
 800fe80:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800fe82:	787b      	ldrb	r3, [r7, #1]
 800fe84:	2b03      	cmp	r3, #3
 800fe86:	f200 80d6 	bhi.w	8010036 <HAL_HCD_HC_SubmitRequest+0x23a>
 800fe8a:	a201      	add	r2, pc, #4	; (adr r2, 800fe90 <HAL_HCD_HC_SubmitRequest+0x94>)
 800fe8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe90:	0800fea1 	.word	0x0800fea1
 800fe94:	08010021 	.word	0x08010021
 800fe98:	0800ff0d 	.word	0x0800ff0d
 800fe9c:	0800ff97 	.word	0x0800ff97
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800fea0:	7c3b      	ldrb	r3, [r7, #16]
 800fea2:	2b01      	cmp	r3, #1
 800fea4:	f040 80c9 	bne.w	801003a <HAL_HCD_HC_SubmitRequest+0x23e>
 800fea8:	78bb      	ldrb	r3, [r7, #2]
 800feaa:	2b00      	cmp	r3, #0
 800feac:	f040 80c5 	bne.w	801003a <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 800feb0:	8b3b      	ldrh	r3, [r7, #24]
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d109      	bne.n	800feca <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800feb6:	78fa      	ldrb	r2, [r7, #3]
 800feb8:	6879      	ldr	r1, [r7, #4]
 800feba:	4613      	mov	r3, r2
 800febc:	009b      	lsls	r3, r3, #2
 800febe:	4413      	add	r3, r2
 800fec0:	00db      	lsls	r3, r3, #3
 800fec2:	440b      	add	r3, r1
 800fec4:	3351      	adds	r3, #81	; 0x51
 800fec6:	2201      	movs	r2, #1
 800fec8:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800feca:	78fa      	ldrb	r2, [r7, #3]
 800fecc:	6879      	ldr	r1, [r7, #4]
 800fece:	4613      	mov	r3, r2
 800fed0:	009b      	lsls	r3, r3, #2
 800fed2:	4413      	add	r3, r2
 800fed4:	00db      	lsls	r3, r3, #3
 800fed6:	440b      	add	r3, r1
 800fed8:	3351      	adds	r3, #81	; 0x51
 800feda:	781b      	ldrb	r3, [r3, #0]
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d10a      	bne.n	800fef6 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800fee0:	78fa      	ldrb	r2, [r7, #3]
 800fee2:	6879      	ldr	r1, [r7, #4]
 800fee4:	4613      	mov	r3, r2
 800fee6:	009b      	lsls	r3, r3, #2
 800fee8:	4413      	add	r3, r2
 800feea:	00db      	lsls	r3, r3, #3
 800feec:	440b      	add	r3, r1
 800feee:	3342      	adds	r3, #66	; 0x42
 800fef0:	2200      	movs	r2, #0
 800fef2:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800fef4:	e0a1      	b.n	801003a <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800fef6:	78fa      	ldrb	r2, [r7, #3]
 800fef8:	6879      	ldr	r1, [r7, #4]
 800fefa:	4613      	mov	r3, r2
 800fefc:	009b      	lsls	r3, r3, #2
 800fefe:	4413      	add	r3, r2
 800ff00:	00db      	lsls	r3, r3, #3
 800ff02:	440b      	add	r3, r1
 800ff04:	3342      	adds	r3, #66	; 0x42
 800ff06:	2202      	movs	r2, #2
 800ff08:	701a      	strb	r2, [r3, #0]
      break;
 800ff0a:	e096      	b.n	801003a <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800ff0c:	78bb      	ldrb	r3, [r7, #2]
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d120      	bne.n	800ff54 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800ff12:	78fa      	ldrb	r2, [r7, #3]
 800ff14:	6879      	ldr	r1, [r7, #4]
 800ff16:	4613      	mov	r3, r2
 800ff18:	009b      	lsls	r3, r3, #2
 800ff1a:	4413      	add	r3, r2
 800ff1c:	00db      	lsls	r3, r3, #3
 800ff1e:	440b      	add	r3, r1
 800ff20:	3351      	adds	r3, #81	; 0x51
 800ff22:	781b      	ldrb	r3, [r3, #0]
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d10a      	bne.n	800ff3e <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800ff28:	78fa      	ldrb	r2, [r7, #3]
 800ff2a:	6879      	ldr	r1, [r7, #4]
 800ff2c:	4613      	mov	r3, r2
 800ff2e:	009b      	lsls	r3, r3, #2
 800ff30:	4413      	add	r3, r2
 800ff32:	00db      	lsls	r3, r3, #3
 800ff34:	440b      	add	r3, r1
 800ff36:	3342      	adds	r3, #66	; 0x42
 800ff38:	2200      	movs	r2, #0
 800ff3a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800ff3c:	e07e      	b.n	801003c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800ff3e:	78fa      	ldrb	r2, [r7, #3]
 800ff40:	6879      	ldr	r1, [r7, #4]
 800ff42:	4613      	mov	r3, r2
 800ff44:	009b      	lsls	r3, r3, #2
 800ff46:	4413      	add	r3, r2
 800ff48:	00db      	lsls	r3, r3, #3
 800ff4a:	440b      	add	r3, r1
 800ff4c:	3342      	adds	r3, #66	; 0x42
 800ff4e:	2202      	movs	r2, #2
 800ff50:	701a      	strb	r2, [r3, #0]
      break;
 800ff52:	e073      	b.n	801003c <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800ff54:	78fa      	ldrb	r2, [r7, #3]
 800ff56:	6879      	ldr	r1, [r7, #4]
 800ff58:	4613      	mov	r3, r2
 800ff5a:	009b      	lsls	r3, r3, #2
 800ff5c:	4413      	add	r3, r2
 800ff5e:	00db      	lsls	r3, r3, #3
 800ff60:	440b      	add	r3, r1
 800ff62:	3350      	adds	r3, #80	; 0x50
 800ff64:	781b      	ldrb	r3, [r3, #0]
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d10a      	bne.n	800ff80 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800ff6a:	78fa      	ldrb	r2, [r7, #3]
 800ff6c:	6879      	ldr	r1, [r7, #4]
 800ff6e:	4613      	mov	r3, r2
 800ff70:	009b      	lsls	r3, r3, #2
 800ff72:	4413      	add	r3, r2
 800ff74:	00db      	lsls	r3, r3, #3
 800ff76:	440b      	add	r3, r1
 800ff78:	3342      	adds	r3, #66	; 0x42
 800ff7a:	2200      	movs	r2, #0
 800ff7c:	701a      	strb	r2, [r3, #0]
      break;
 800ff7e:	e05d      	b.n	801003c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800ff80:	78fa      	ldrb	r2, [r7, #3]
 800ff82:	6879      	ldr	r1, [r7, #4]
 800ff84:	4613      	mov	r3, r2
 800ff86:	009b      	lsls	r3, r3, #2
 800ff88:	4413      	add	r3, r2
 800ff8a:	00db      	lsls	r3, r3, #3
 800ff8c:	440b      	add	r3, r1
 800ff8e:	3342      	adds	r3, #66	; 0x42
 800ff90:	2202      	movs	r2, #2
 800ff92:	701a      	strb	r2, [r3, #0]
      break;
 800ff94:	e052      	b.n	801003c <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800ff96:	78bb      	ldrb	r3, [r7, #2]
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d120      	bne.n	800ffde <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800ff9c:	78fa      	ldrb	r2, [r7, #3]
 800ff9e:	6879      	ldr	r1, [r7, #4]
 800ffa0:	4613      	mov	r3, r2
 800ffa2:	009b      	lsls	r3, r3, #2
 800ffa4:	4413      	add	r3, r2
 800ffa6:	00db      	lsls	r3, r3, #3
 800ffa8:	440b      	add	r3, r1
 800ffaa:	3351      	adds	r3, #81	; 0x51
 800ffac:	781b      	ldrb	r3, [r3, #0]
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d10a      	bne.n	800ffc8 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800ffb2:	78fa      	ldrb	r2, [r7, #3]
 800ffb4:	6879      	ldr	r1, [r7, #4]
 800ffb6:	4613      	mov	r3, r2
 800ffb8:	009b      	lsls	r3, r3, #2
 800ffba:	4413      	add	r3, r2
 800ffbc:	00db      	lsls	r3, r3, #3
 800ffbe:	440b      	add	r3, r1
 800ffc0:	3342      	adds	r3, #66	; 0x42
 800ffc2:	2200      	movs	r2, #0
 800ffc4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800ffc6:	e039      	b.n	801003c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800ffc8:	78fa      	ldrb	r2, [r7, #3]
 800ffca:	6879      	ldr	r1, [r7, #4]
 800ffcc:	4613      	mov	r3, r2
 800ffce:	009b      	lsls	r3, r3, #2
 800ffd0:	4413      	add	r3, r2
 800ffd2:	00db      	lsls	r3, r3, #3
 800ffd4:	440b      	add	r3, r1
 800ffd6:	3342      	adds	r3, #66	; 0x42
 800ffd8:	2202      	movs	r2, #2
 800ffda:	701a      	strb	r2, [r3, #0]
      break;
 800ffdc:	e02e      	b.n	801003c <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800ffde:	78fa      	ldrb	r2, [r7, #3]
 800ffe0:	6879      	ldr	r1, [r7, #4]
 800ffe2:	4613      	mov	r3, r2
 800ffe4:	009b      	lsls	r3, r3, #2
 800ffe6:	4413      	add	r3, r2
 800ffe8:	00db      	lsls	r3, r3, #3
 800ffea:	440b      	add	r3, r1
 800ffec:	3350      	adds	r3, #80	; 0x50
 800ffee:	781b      	ldrb	r3, [r3, #0]
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d10a      	bne.n	801000a <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800fff4:	78fa      	ldrb	r2, [r7, #3]
 800fff6:	6879      	ldr	r1, [r7, #4]
 800fff8:	4613      	mov	r3, r2
 800fffa:	009b      	lsls	r3, r3, #2
 800fffc:	4413      	add	r3, r2
 800fffe:	00db      	lsls	r3, r3, #3
 8010000:	440b      	add	r3, r1
 8010002:	3342      	adds	r3, #66	; 0x42
 8010004:	2200      	movs	r2, #0
 8010006:	701a      	strb	r2, [r3, #0]
      break;
 8010008:	e018      	b.n	801003c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 801000a:	78fa      	ldrb	r2, [r7, #3]
 801000c:	6879      	ldr	r1, [r7, #4]
 801000e:	4613      	mov	r3, r2
 8010010:	009b      	lsls	r3, r3, #2
 8010012:	4413      	add	r3, r2
 8010014:	00db      	lsls	r3, r3, #3
 8010016:	440b      	add	r3, r1
 8010018:	3342      	adds	r3, #66	; 0x42
 801001a:	2202      	movs	r2, #2
 801001c:	701a      	strb	r2, [r3, #0]
      break;
 801001e:	e00d      	b.n	801003c <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8010020:	78fa      	ldrb	r2, [r7, #3]
 8010022:	6879      	ldr	r1, [r7, #4]
 8010024:	4613      	mov	r3, r2
 8010026:	009b      	lsls	r3, r3, #2
 8010028:	4413      	add	r3, r2
 801002a:	00db      	lsls	r3, r3, #3
 801002c:	440b      	add	r3, r1
 801002e:	3342      	adds	r3, #66	; 0x42
 8010030:	2200      	movs	r2, #0
 8010032:	701a      	strb	r2, [r3, #0]
      break;
 8010034:	e002      	b.n	801003c <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8010036:	bf00      	nop
 8010038:	e000      	b.n	801003c <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 801003a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 801003c:	78fa      	ldrb	r2, [r7, #3]
 801003e:	6879      	ldr	r1, [r7, #4]
 8010040:	4613      	mov	r3, r2
 8010042:	009b      	lsls	r3, r3, #2
 8010044:	4413      	add	r3, r2
 8010046:	00db      	lsls	r3, r3, #3
 8010048:	440b      	add	r3, r1
 801004a:	3344      	adds	r3, #68	; 0x44
 801004c:	697a      	ldr	r2, [r7, #20]
 801004e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8010050:	78fa      	ldrb	r2, [r7, #3]
 8010052:	8b39      	ldrh	r1, [r7, #24]
 8010054:	6878      	ldr	r0, [r7, #4]
 8010056:	4613      	mov	r3, r2
 8010058:	009b      	lsls	r3, r3, #2
 801005a:	4413      	add	r3, r2
 801005c:	00db      	lsls	r3, r3, #3
 801005e:	4403      	add	r3, r0
 8010060:	3348      	adds	r3, #72	; 0x48
 8010062:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8010064:	78fa      	ldrb	r2, [r7, #3]
 8010066:	6879      	ldr	r1, [r7, #4]
 8010068:	4613      	mov	r3, r2
 801006a:	009b      	lsls	r3, r3, #2
 801006c:	4413      	add	r3, r2
 801006e:	00db      	lsls	r3, r3, #3
 8010070:	440b      	add	r3, r1
 8010072:	335c      	adds	r3, #92	; 0x5c
 8010074:	2200      	movs	r2, #0
 8010076:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8010078:	78fa      	ldrb	r2, [r7, #3]
 801007a:	6879      	ldr	r1, [r7, #4]
 801007c:	4613      	mov	r3, r2
 801007e:	009b      	lsls	r3, r3, #2
 8010080:	4413      	add	r3, r2
 8010082:	00db      	lsls	r3, r3, #3
 8010084:	440b      	add	r3, r1
 8010086:	334c      	adds	r3, #76	; 0x4c
 8010088:	2200      	movs	r2, #0
 801008a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 801008c:	78fa      	ldrb	r2, [r7, #3]
 801008e:	6879      	ldr	r1, [r7, #4]
 8010090:	4613      	mov	r3, r2
 8010092:	009b      	lsls	r3, r3, #2
 8010094:	4413      	add	r3, r2
 8010096:	00db      	lsls	r3, r3, #3
 8010098:	440b      	add	r3, r1
 801009a:	3339      	adds	r3, #57	; 0x39
 801009c:	78fa      	ldrb	r2, [r7, #3]
 801009e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80100a0:	78fa      	ldrb	r2, [r7, #3]
 80100a2:	6879      	ldr	r1, [r7, #4]
 80100a4:	4613      	mov	r3, r2
 80100a6:	009b      	lsls	r3, r3, #2
 80100a8:	4413      	add	r3, r2
 80100aa:	00db      	lsls	r3, r3, #3
 80100ac:	440b      	add	r3, r1
 80100ae:	335d      	adds	r3, #93	; 0x5d
 80100b0:	2200      	movs	r2, #0
 80100b2:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	6818      	ldr	r0, [r3, #0]
 80100b8:	78fa      	ldrb	r2, [r7, #3]
 80100ba:	4613      	mov	r3, r2
 80100bc:	009b      	lsls	r3, r3, #2
 80100be:	4413      	add	r3, r2
 80100c0:	00db      	lsls	r3, r3, #3
 80100c2:	3338      	adds	r3, #56	; 0x38
 80100c4:	687a      	ldr	r2, [r7, #4]
 80100c6:	18d1      	adds	r1, r2, r3
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	691b      	ldr	r3, [r3, #16]
 80100cc:	b2db      	uxtb	r3, r3
 80100ce:	461a      	mov	r2, r3
 80100d0:	f004 f942 	bl	8014358 <USB_HC_StartXfer>
 80100d4:	4603      	mov	r3, r0
}
 80100d6:	4618      	mov	r0, r3
 80100d8:	3708      	adds	r7, #8
 80100da:	46bd      	mov	sp, r7
 80100dc:	bd80      	pop	{r7, pc}
 80100de:	bf00      	nop

080100e0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80100e0:	b580      	push	{r7, lr}
 80100e2:	b086      	sub	sp, #24
 80100e4:	af00      	add	r7, sp, #0
 80100e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80100ee:	693b      	ldr	r3, [r7, #16]
 80100f0:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	4618      	mov	r0, r3
 80100f8:	f003 fea1 	bl	8013e3e <USB_GetMode>
 80100fc:	4603      	mov	r3, r0
 80100fe:	2b01      	cmp	r3, #1
 8010100:	f040 80ef 	bne.w	80102e2 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	4618      	mov	r0, r3
 801010a:	f003 fe85 	bl	8013e18 <USB_ReadInterrupts>
 801010e:	4603      	mov	r3, r0
 8010110:	2b00      	cmp	r3, #0
 8010112:	f000 80e5 	beq.w	80102e0 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	4618      	mov	r0, r3
 801011c:	f003 fe7c 	bl	8013e18 <USB_ReadInterrupts>
 8010120:	4603      	mov	r3, r0
 8010122:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010126:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801012a:	d104      	bne.n	8010136 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8010134:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	4618      	mov	r0, r3
 801013c:	f003 fe6c 	bl	8013e18 <USB_ReadInterrupts>
 8010140:	4603      	mov	r3, r0
 8010142:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010146:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801014a:	d104      	bne.n	8010156 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8010154:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	4618      	mov	r0, r3
 801015c:	f003 fe5c 	bl	8013e18 <USB_ReadInterrupts>
 8010160:	4603      	mov	r3, r0
 8010162:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010166:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801016a:	d104      	bne.n	8010176 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8010174:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	4618      	mov	r0, r3
 801017c:	f003 fe4c 	bl	8013e18 <USB_ReadInterrupts>
 8010180:	4603      	mov	r3, r0
 8010182:	f003 0302 	and.w	r3, r3, #2
 8010186:	2b02      	cmp	r3, #2
 8010188:	d103      	bne.n	8010192 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	2202      	movs	r2, #2
 8010190:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	4618      	mov	r0, r3
 8010198:	f003 fe3e 	bl	8013e18 <USB_ReadInterrupts>
 801019c:	4603      	mov	r3, r0
 801019e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80101a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80101a6:	d115      	bne.n	80101d4 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80101b0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	f003 0301 	and.w	r3, r3, #1
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d108      	bne.n	80101d4 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80101c2:	6878      	ldr	r0, [r7, #4]
 80101c4:	f005 fd14 	bl	8015bf0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	2101      	movs	r1, #1
 80101ce:	4618      	mov	r0, r3
 80101d0:	f003 ff34 	bl	801403c <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	4618      	mov	r0, r3
 80101da:	f003 fe1d 	bl	8013e18 <USB_ReadInterrupts>
 80101de:	4603      	mov	r3, r0
 80101e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80101e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80101e8:	d102      	bne.n	80101f0 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80101ea:	6878      	ldr	r0, [r7, #4]
 80101ec:	f001 f94a 	bl	8011484 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	4618      	mov	r0, r3
 80101f6:	f003 fe0f 	bl	8013e18 <USB_ReadInterrupts>
 80101fa:	4603      	mov	r3, r0
 80101fc:	f003 0308 	and.w	r3, r3, #8
 8010200:	2b08      	cmp	r3, #8
 8010202:	d106      	bne.n	8010212 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8010204:	6878      	ldr	r0, [r7, #4]
 8010206:	f005 fcd7 	bl	8015bb8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	2208      	movs	r2, #8
 8010210:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	4618      	mov	r0, r3
 8010218:	f003 fdfe 	bl	8013e18 <USB_ReadInterrupts>
 801021c:	4603      	mov	r3, r0
 801021e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010222:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010226:	d138      	bne.n	801029a <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	4618      	mov	r0, r3
 801022e:	f004 f9d9 	bl	80145e4 <USB_HC_ReadInterrupt>
 8010232:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8010234:	2300      	movs	r3, #0
 8010236:	617b      	str	r3, [r7, #20]
 8010238:	e025      	b.n	8010286 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 801023a:	697b      	ldr	r3, [r7, #20]
 801023c:	f003 030f 	and.w	r3, r3, #15
 8010240:	68ba      	ldr	r2, [r7, #8]
 8010242:	fa22 f303 	lsr.w	r3, r2, r3
 8010246:	f003 0301 	and.w	r3, r3, #1
 801024a:	2b00      	cmp	r3, #0
 801024c:	d018      	beq.n	8010280 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 801024e:	697b      	ldr	r3, [r7, #20]
 8010250:	015a      	lsls	r2, r3, #5
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	4413      	add	r3, r2
 8010256:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010260:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010264:	d106      	bne.n	8010274 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8010266:	697b      	ldr	r3, [r7, #20]
 8010268:	b2db      	uxtb	r3, r3
 801026a:	4619      	mov	r1, r3
 801026c:	6878      	ldr	r0, [r7, #4]
 801026e:	f000 f8b3 	bl	80103d8 <HCD_HC_IN_IRQHandler>
 8010272:	e005      	b.n	8010280 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8010274:	697b      	ldr	r3, [r7, #20]
 8010276:	b2db      	uxtb	r3, r3
 8010278:	4619      	mov	r1, r3
 801027a:	6878      	ldr	r0, [r7, #4]
 801027c:	f000 fce1 	bl	8010c42 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8010280:	697b      	ldr	r3, [r7, #20]
 8010282:	3301      	adds	r3, #1
 8010284:	617b      	str	r3, [r7, #20]
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	689b      	ldr	r3, [r3, #8]
 801028a:	697a      	ldr	r2, [r7, #20]
 801028c:	429a      	cmp	r2, r3
 801028e:	d3d4      	bcc.n	801023a <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8010298:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	4618      	mov	r0, r3
 80102a0:	f003 fdba 	bl	8013e18 <USB_ReadInterrupts>
 80102a4:	4603      	mov	r3, r0
 80102a6:	f003 0310 	and.w	r3, r3, #16
 80102aa:	2b10      	cmp	r3, #16
 80102ac:	d101      	bne.n	80102b2 <HAL_HCD_IRQHandler+0x1d2>
 80102ae:	2301      	movs	r3, #1
 80102b0:	e000      	b.n	80102b4 <HAL_HCD_IRQHandler+0x1d4>
 80102b2:	2300      	movs	r3, #0
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d014      	beq.n	80102e2 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	699a      	ldr	r2, [r3, #24]
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	f022 0210 	bic.w	r2, r2, #16
 80102c6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80102c8:	6878      	ldr	r0, [r7, #4]
 80102ca:	f001 f82f 	bl	801132c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	699a      	ldr	r2, [r3, #24]
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	f042 0210 	orr.w	r2, r2, #16
 80102dc:	619a      	str	r2, [r3, #24]
 80102de:	e000      	b.n	80102e2 <HAL_HCD_IRQHandler+0x202>
      return;
 80102e0:	bf00      	nop
    }
  }
}
 80102e2:	3718      	adds	r7, #24
 80102e4:	46bd      	mov	sp, r7
 80102e6:	bd80      	pop	{r7, pc}

080102e8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80102e8:	b580      	push	{r7, lr}
 80102ea:	b082      	sub	sp, #8
 80102ec:	af00      	add	r7, sp, #0
 80102ee:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80102f6:	2b01      	cmp	r3, #1
 80102f8:	d101      	bne.n	80102fe <HAL_HCD_Start+0x16>
 80102fa:	2302      	movs	r3, #2
 80102fc:	e013      	b.n	8010326 <HAL_HCD_Start+0x3e>
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	2201      	movs	r2, #1
 8010302:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	4618      	mov	r0, r3
 801030c:	f003 fc91 	bl	8013c32 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	2101      	movs	r1, #1
 8010316:	4618      	mov	r0, r3
 8010318:	f003 feca 	bl	80140b0 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	2200      	movs	r2, #0
 8010320:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8010324:	2300      	movs	r3, #0
}
 8010326:	4618      	mov	r0, r3
 8010328:	3708      	adds	r7, #8
 801032a:	46bd      	mov	sp, r7
 801032c:	bd80      	pop	{r7, pc}

0801032e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 801032e:	b580      	push	{r7, lr}
 8010330:	b082      	sub	sp, #8
 8010332:	af00      	add	r7, sp, #0
 8010334:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 801033c:	2b01      	cmp	r3, #1
 801033e:	d101      	bne.n	8010344 <HAL_HCD_Stop+0x16>
 8010340:	2302      	movs	r3, #2
 8010342:	e00d      	b.n	8010360 <HAL_HCD_Stop+0x32>
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	2201      	movs	r2, #1
 8010348:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	4618      	mov	r0, r3
 8010352:	f004 fa93 	bl	801487c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	2200      	movs	r2, #0
 801035a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 801035e:	2300      	movs	r3, #0
}
 8010360:	4618      	mov	r0, r3
 8010362:	3708      	adds	r7, #8
 8010364:	46bd      	mov	sp, r7
 8010366:	bd80      	pop	{r7, pc}

08010368 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8010368:	b480      	push	{r7}
 801036a:	b083      	sub	sp, #12
 801036c:	af00      	add	r7, sp, #0
 801036e:	6078      	str	r0, [r7, #4]
 8010370:	460b      	mov	r3, r1
 8010372:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8010374:	78fa      	ldrb	r2, [r7, #3]
 8010376:	6879      	ldr	r1, [r7, #4]
 8010378:	4613      	mov	r3, r2
 801037a:	009b      	lsls	r3, r3, #2
 801037c:	4413      	add	r3, r2
 801037e:	00db      	lsls	r3, r3, #3
 8010380:	440b      	add	r3, r1
 8010382:	335c      	adds	r3, #92	; 0x5c
 8010384:	781b      	ldrb	r3, [r3, #0]
}
 8010386:	4618      	mov	r0, r3
 8010388:	370c      	adds	r7, #12
 801038a:	46bd      	mov	sp, r7
 801038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010390:	4770      	bx	lr

08010392 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8010392:	b480      	push	{r7}
 8010394:	b083      	sub	sp, #12
 8010396:	af00      	add	r7, sp, #0
 8010398:	6078      	str	r0, [r7, #4]
 801039a:	460b      	mov	r3, r1
 801039c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 801039e:	78fa      	ldrb	r2, [r7, #3]
 80103a0:	6879      	ldr	r1, [r7, #4]
 80103a2:	4613      	mov	r3, r2
 80103a4:	009b      	lsls	r3, r3, #2
 80103a6:	4413      	add	r3, r2
 80103a8:	00db      	lsls	r3, r3, #3
 80103aa:	440b      	add	r3, r1
 80103ac:	334c      	adds	r3, #76	; 0x4c
 80103ae:	681b      	ldr	r3, [r3, #0]
}
 80103b0:	4618      	mov	r0, r3
 80103b2:	370c      	adds	r7, #12
 80103b4:	46bd      	mov	sp, r7
 80103b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ba:	4770      	bx	lr

080103bc <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80103bc:	b580      	push	{r7, lr}
 80103be:	b082      	sub	sp, #8
 80103c0:	af00      	add	r7, sp, #0
 80103c2:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	4618      	mov	r0, r3
 80103ca:	f003 feaa 	bl	8014122 <USB_GetCurrentFrame>
 80103ce:	4603      	mov	r3, r0
}
 80103d0:	4618      	mov	r0, r3
 80103d2:	3708      	adds	r7, #8
 80103d4:	46bd      	mov	sp, r7
 80103d6:	bd80      	pop	{r7, pc}

080103d8 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80103d8:	b580      	push	{r7, lr}
 80103da:	b086      	sub	sp, #24
 80103dc:	af00      	add	r7, sp, #0
 80103de:	6078      	str	r0, [r7, #4]
 80103e0:	460b      	mov	r3, r1
 80103e2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80103ea:	697b      	ldr	r3, [r7, #20]
 80103ec:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80103ee:	78fb      	ldrb	r3, [r7, #3]
 80103f0:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80103f2:	68fb      	ldr	r3, [r7, #12]
 80103f4:	015a      	lsls	r2, r3, #5
 80103f6:	693b      	ldr	r3, [r7, #16]
 80103f8:	4413      	add	r3, r2
 80103fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80103fe:	689b      	ldr	r3, [r3, #8]
 8010400:	f003 0304 	and.w	r3, r3, #4
 8010404:	2b04      	cmp	r3, #4
 8010406:	d119      	bne.n	801043c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8010408:	68fb      	ldr	r3, [r7, #12]
 801040a:	015a      	lsls	r2, r3, #5
 801040c:	693b      	ldr	r3, [r7, #16]
 801040e:	4413      	add	r3, r2
 8010410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010414:	461a      	mov	r2, r3
 8010416:	2304      	movs	r3, #4
 8010418:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 801041a:	68fb      	ldr	r3, [r7, #12]
 801041c:	015a      	lsls	r2, r3, #5
 801041e:	693b      	ldr	r3, [r7, #16]
 8010420:	4413      	add	r3, r2
 8010422:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010426:	68db      	ldr	r3, [r3, #12]
 8010428:	68fa      	ldr	r2, [r7, #12]
 801042a:	0151      	lsls	r1, r2, #5
 801042c:	693a      	ldr	r2, [r7, #16]
 801042e:	440a      	add	r2, r1
 8010430:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8010434:	f043 0302 	orr.w	r3, r3, #2
 8010438:	60d3      	str	r3, [r2, #12]
 801043a:	e0ce      	b.n	80105da <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 801043c:	68fb      	ldr	r3, [r7, #12]
 801043e:	015a      	lsls	r2, r3, #5
 8010440:	693b      	ldr	r3, [r7, #16]
 8010442:	4413      	add	r3, r2
 8010444:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010448:	689b      	ldr	r3, [r3, #8]
 801044a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801044e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010452:	d12c      	bne.n	80104ae <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	015a      	lsls	r2, r3, #5
 8010458:	693b      	ldr	r3, [r7, #16]
 801045a:	4413      	add	r3, r2
 801045c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010460:	461a      	mov	r2, r3
 8010462:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010466:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8010468:	6879      	ldr	r1, [r7, #4]
 801046a:	68fa      	ldr	r2, [r7, #12]
 801046c:	4613      	mov	r3, r2
 801046e:	009b      	lsls	r3, r3, #2
 8010470:	4413      	add	r3, r2
 8010472:	00db      	lsls	r3, r3, #3
 8010474:	440b      	add	r3, r1
 8010476:	335d      	adds	r3, #93	; 0x5d
 8010478:	2207      	movs	r2, #7
 801047a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	015a      	lsls	r2, r3, #5
 8010480:	693b      	ldr	r3, [r7, #16]
 8010482:	4413      	add	r3, r2
 8010484:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010488:	68db      	ldr	r3, [r3, #12]
 801048a:	68fa      	ldr	r2, [r7, #12]
 801048c:	0151      	lsls	r1, r2, #5
 801048e:	693a      	ldr	r2, [r7, #16]
 8010490:	440a      	add	r2, r1
 8010492:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8010496:	f043 0302 	orr.w	r3, r3, #2
 801049a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	681b      	ldr	r3, [r3, #0]
 80104a0:	68fa      	ldr	r2, [r7, #12]
 80104a2:	b2d2      	uxtb	r2, r2
 80104a4:	4611      	mov	r1, r2
 80104a6:	4618      	mov	r0, r3
 80104a8:	f004 f8ad 	bl	8014606 <USB_HC_Halt>
 80104ac:	e095      	b.n	80105da <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80104ae:	68fb      	ldr	r3, [r7, #12]
 80104b0:	015a      	lsls	r2, r3, #5
 80104b2:	693b      	ldr	r3, [r7, #16]
 80104b4:	4413      	add	r3, r2
 80104b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80104ba:	689b      	ldr	r3, [r3, #8]
 80104bc:	f003 0320 	and.w	r3, r3, #32
 80104c0:	2b20      	cmp	r3, #32
 80104c2:	d109      	bne.n	80104d8 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	015a      	lsls	r2, r3, #5
 80104c8:	693b      	ldr	r3, [r7, #16]
 80104ca:	4413      	add	r3, r2
 80104cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80104d0:	461a      	mov	r2, r3
 80104d2:	2320      	movs	r3, #32
 80104d4:	6093      	str	r3, [r2, #8]
 80104d6:	e080      	b.n	80105da <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	015a      	lsls	r2, r3, #5
 80104dc:	693b      	ldr	r3, [r7, #16]
 80104de:	4413      	add	r3, r2
 80104e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80104e4:	689b      	ldr	r3, [r3, #8]
 80104e6:	f003 0308 	and.w	r3, r3, #8
 80104ea:	2b08      	cmp	r3, #8
 80104ec:	d134      	bne.n	8010558 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80104ee:	68fb      	ldr	r3, [r7, #12]
 80104f0:	015a      	lsls	r2, r3, #5
 80104f2:	693b      	ldr	r3, [r7, #16]
 80104f4:	4413      	add	r3, r2
 80104f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80104fa:	68db      	ldr	r3, [r3, #12]
 80104fc:	68fa      	ldr	r2, [r7, #12]
 80104fe:	0151      	lsls	r1, r2, #5
 8010500:	693a      	ldr	r2, [r7, #16]
 8010502:	440a      	add	r2, r1
 8010504:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8010508:	f043 0302 	orr.w	r3, r3, #2
 801050c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 801050e:	6879      	ldr	r1, [r7, #4]
 8010510:	68fa      	ldr	r2, [r7, #12]
 8010512:	4613      	mov	r3, r2
 8010514:	009b      	lsls	r3, r3, #2
 8010516:	4413      	add	r3, r2
 8010518:	00db      	lsls	r3, r3, #3
 801051a:	440b      	add	r3, r1
 801051c:	335d      	adds	r3, #93	; 0x5d
 801051e:	2205      	movs	r2, #5
 8010520:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	015a      	lsls	r2, r3, #5
 8010526:	693b      	ldr	r3, [r7, #16]
 8010528:	4413      	add	r3, r2
 801052a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801052e:	461a      	mov	r2, r3
 8010530:	2310      	movs	r3, #16
 8010532:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	015a      	lsls	r2, r3, #5
 8010538:	693b      	ldr	r3, [r7, #16]
 801053a:	4413      	add	r3, r2
 801053c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010540:	461a      	mov	r2, r3
 8010542:	2308      	movs	r3, #8
 8010544:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	68fa      	ldr	r2, [r7, #12]
 801054c:	b2d2      	uxtb	r2, r2
 801054e:	4611      	mov	r1, r2
 8010550:	4618      	mov	r0, r3
 8010552:	f004 f858 	bl	8014606 <USB_HC_Halt>
 8010556:	e040      	b.n	80105da <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	015a      	lsls	r2, r3, #5
 801055c:	693b      	ldr	r3, [r7, #16]
 801055e:	4413      	add	r3, r2
 8010560:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010564:	689b      	ldr	r3, [r3, #8]
 8010566:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801056a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801056e:	d134      	bne.n	80105da <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8010570:	68fb      	ldr	r3, [r7, #12]
 8010572:	015a      	lsls	r2, r3, #5
 8010574:	693b      	ldr	r3, [r7, #16]
 8010576:	4413      	add	r3, r2
 8010578:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801057c:	68db      	ldr	r3, [r3, #12]
 801057e:	68fa      	ldr	r2, [r7, #12]
 8010580:	0151      	lsls	r1, r2, #5
 8010582:	693a      	ldr	r2, [r7, #16]
 8010584:	440a      	add	r2, r1
 8010586:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801058a:	f043 0302 	orr.w	r3, r3, #2
 801058e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	68fa      	ldr	r2, [r7, #12]
 8010596:	b2d2      	uxtb	r2, r2
 8010598:	4611      	mov	r1, r2
 801059a:	4618      	mov	r0, r3
 801059c:	f004 f833 	bl	8014606 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	015a      	lsls	r2, r3, #5
 80105a4:	693b      	ldr	r3, [r7, #16]
 80105a6:	4413      	add	r3, r2
 80105a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80105ac:	461a      	mov	r2, r3
 80105ae:	2310      	movs	r3, #16
 80105b0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80105b2:	6879      	ldr	r1, [r7, #4]
 80105b4:	68fa      	ldr	r2, [r7, #12]
 80105b6:	4613      	mov	r3, r2
 80105b8:	009b      	lsls	r3, r3, #2
 80105ba:	4413      	add	r3, r2
 80105bc:	00db      	lsls	r3, r3, #3
 80105be:	440b      	add	r3, r1
 80105c0:	335d      	adds	r3, #93	; 0x5d
 80105c2:	2208      	movs	r2, #8
 80105c4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	015a      	lsls	r2, r3, #5
 80105ca:	693b      	ldr	r3, [r7, #16]
 80105cc:	4413      	add	r3, r2
 80105ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80105d2:	461a      	mov	r2, r3
 80105d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80105d8:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	015a      	lsls	r2, r3, #5
 80105de:	693b      	ldr	r3, [r7, #16]
 80105e0:	4413      	add	r3, r2
 80105e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80105e6:	689b      	ldr	r3, [r3, #8]
 80105e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80105ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80105f0:	d122      	bne.n	8010638 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	015a      	lsls	r2, r3, #5
 80105f6:	693b      	ldr	r3, [r7, #16]
 80105f8:	4413      	add	r3, r2
 80105fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80105fe:	68db      	ldr	r3, [r3, #12]
 8010600:	68fa      	ldr	r2, [r7, #12]
 8010602:	0151      	lsls	r1, r2, #5
 8010604:	693a      	ldr	r2, [r7, #16]
 8010606:	440a      	add	r2, r1
 8010608:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801060c:	f043 0302 	orr.w	r3, r3, #2
 8010610:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	68fa      	ldr	r2, [r7, #12]
 8010618:	b2d2      	uxtb	r2, r2
 801061a:	4611      	mov	r1, r2
 801061c:	4618      	mov	r0, r3
 801061e:	f003 fff2 	bl	8014606 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8010622:	68fb      	ldr	r3, [r7, #12]
 8010624:	015a      	lsls	r2, r3, #5
 8010626:	693b      	ldr	r3, [r7, #16]
 8010628:	4413      	add	r3, r2
 801062a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801062e:	461a      	mov	r2, r3
 8010630:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010634:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8010636:	e300      	b.n	8010c3a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	015a      	lsls	r2, r3, #5
 801063c:	693b      	ldr	r3, [r7, #16]
 801063e:	4413      	add	r3, r2
 8010640:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010644:	689b      	ldr	r3, [r3, #8]
 8010646:	f003 0301 	and.w	r3, r3, #1
 801064a:	2b01      	cmp	r3, #1
 801064c:	f040 80fd 	bne.w	801084a <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	691b      	ldr	r3, [r3, #16]
 8010654:	2b00      	cmp	r3, #0
 8010656:	d01b      	beq.n	8010690 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8010658:	6879      	ldr	r1, [r7, #4]
 801065a:	68fa      	ldr	r2, [r7, #12]
 801065c:	4613      	mov	r3, r2
 801065e:	009b      	lsls	r3, r3, #2
 8010660:	4413      	add	r3, r2
 8010662:	00db      	lsls	r3, r3, #3
 8010664:	440b      	add	r3, r1
 8010666:	3348      	adds	r3, #72	; 0x48
 8010668:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	0159      	lsls	r1, r3, #5
 801066e:	693b      	ldr	r3, [r7, #16]
 8010670:	440b      	add	r3, r1
 8010672:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010676:	691b      	ldr	r3, [r3, #16]
 8010678:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 801067c:	1ad1      	subs	r1, r2, r3
 801067e:	6878      	ldr	r0, [r7, #4]
 8010680:	68fa      	ldr	r2, [r7, #12]
 8010682:	4613      	mov	r3, r2
 8010684:	009b      	lsls	r3, r3, #2
 8010686:	4413      	add	r3, r2
 8010688:	00db      	lsls	r3, r3, #3
 801068a:	4403      	add	r3, r0
 801068c:	334c      	adds	r3, #76	; 0x4c
 801068e:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8010690:	6879      	ldr	r1, [r7, #4]
 8010692:	68fa      	ldr	r2, [r7, #12]
 8010694:	4613      	mov	r3, r2
 8010696:	009b      	lsls	r3, r3, #2
 8010698:	4413      	add	r3, r2
 801069a:	00db      	lsls	r3, r3, #3
 801069c:	440b      	add	r3, r1
 801069e:	335d      	adds	r3, #93	; 0x5d
 80106a0:	2201      	movs	r2, #1
 80106a2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80106a4:	6879      	ldr	r1, [r7, #4]
 80106a6:	68fa      	ldr	r2, [r7, #12]
 80106a8:	4613      	mov	r3, r2
 80106aa:	009b      	lsls	r3, r3, #2
 80106ac:	4413      	add	r3, r2
 80106ae:	00db      	lsls	r3, r3, #3
 80106b0:	440b      	add	r3, r1
 80106b2:	3358      	adds	r3, #88	; 0x58
 80106b4:	2200      	movs	r2, #0
 80106b6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80106b8:	68fb      	ldr	r3, [r7, #12]
 80106ba:	015a      	lsls	r2, r3, #5
 80106bc:	693b      	ldr	r3, [r7, #16]
 80106be:	4413      	add	r3, r2
 80106c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80106c4:	461a      	mov	r2, r3
 80106c6:	2301      	movs	r3, #1
 80106c8:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80106ca:	6879      	ldr	r1, [r7, #4]
 80106cc:	68fa      	ldr	r2, [r7, #12]
 80106ce:	4613      	mov	r3, r2
 80106d0:	009b      	lsls	r3, r3, #2
 80106d2:	4413      	add	r3, r2
 80106d4:	00db      	lsls	r3, r3, #3
 80106d6:	440b      	add	r3, r1
 80106d8:	333f      	adds	r3, #63	; 0x3f
 80106da:	781b      	ldrb	r3, [r3, #0]
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d00a      	beq.n	80106f6 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80106e0:	6879      	ldr	r1, [r7, #4]
 80106e2:	68fa      	ldr	r2, [r7, #12]
 80106e4:	4613      	mov	r3, r2
 80106e6:	009b      	lsls	r3, r3, #2
 80106e8:	4413      	add	r3, r2
 80106ea:	00db      	lsls	r3, r3, #3
 80106ec:	440b      	add	r3, r1
 80106ee:	333f      	adds	r3, #63	; 0x3f
 80106f0:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80106f2:	2b02      	cmp	r3, #2
 80106f4:	d121      	bne.n	801073a <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80106f6:	68fb      	ldr	r3, [r7, #12]
 80106f8:	015a      	lsls	r2, r3, #5
 80106fa:	693b      	ldr	r3, [r7, #16]
 80106fc:	4413      	add	r3, r2
 80106fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010702:	68db      	ldr	r3, [r3, #12]
 8010704:	68fa      	ldr	r2, [r7, #12]
 8010706:	0151      	lsls	r1, r2, #5
 8010708:	693a      	ldr	r2, [r7, #16]
 801070a:	440a      	add	r2, r1
 801070c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8010710:	f043 0302 	orr.w	r3, r3, #2
 8010714:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	68fa      	ldr	r2, [r7, #12]
 801071c:	b2d2      	uxtb	r2, r2
 801071e:	4611      	mov	r1, r2
 8010720:	4618      	mov	r0, r3
 8010722:	f003 ff70 	bl	8014606 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8010726:	68fb      	ldr	r3, [r7, #12]
 8010728:	015a      	lsls	r2, r3, #5
 801072a:	693b      	ldr	r3, [r7, #16]
 801072c:	4413      	add	r3, r2
 801072e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010732:	461a      	mov	r2, r3
 8010734:	2310      	movs	r3, #16
 8010736:	6093      	str	r3, [r2, #8]
 8010738:	e070      	b.n	801081c <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 801073a:	6879      	ldr	r1, [r7, #4]
 801073c:	68fa      	ldr	r2, [r7, #12]
 801073e:	4613      	mov	r3, r2
 8010740:	009b      	lsls	r3, r3, #2
 8010742:	4413      	add	r3, r2
 8010744:	00db      	lsls	r3, r3, #3
 8010746:	440b      	add	r3, r1
 8010748:	333f      	adds	r3, #63	; 0x3f
 801074a:	781b      	ldrb	r3, [r3, #0]
 801074c:	2b03      	cmp	r3, #3
 801074e:	d12a      	bne.n	80107a6 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	015a      	lsls	r2, r3, #5
 8010754:	693b      	ldr	r3, [r7, #16]
 8010756:	4413      	add	r3, r2
 8010758:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801075c:	681b      	ldr	r3, [r3, #0]
 801075e:	68fa      	ldr	r2, [r7, #12]
 8010760:	0151      	lsls	r1, r2, #5
 8010762:	693a      	ldr	r2, [r7, #16]
 8010764:	440a      	add	r2, r1
 8010766:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801076a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801076e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8010770:	6879      	ldr	r1, [r7, #4]
 8010772:	68fa      	ldr	r2, [r7, #12]
 8010774:	4613      	mov	r3, r2
 8010776:	009b      	lsls	r3, r3, #2
 8010778:	4413      	add	r3, r2
 801077a:	00db      	lsls	r3, r3, #3
 801077c:	440b      	add	r3, r1
 801077e:	335c      	adds	r3, #92	; 0x5c
 8010780:	2201      	movs	r2, #1
 8010782:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	b2d8      	uxtb	r0, r3
 8010788:	6879      	ldr	r1, [r7, #4]
 801078a:	68fa      	ldr	r2, [r7, #12]
 801078c:	4613      	mov	r3, r2
 801078e:	009b      	lsls	r3, r3, #2
 8010790:	4413      	add	r3, r2
 8010792:	00db      	lsls	r3, r3, #3
 8010794:	440b      	add	r3, r1
 8010796:	335c      	adds	r3, #92	; 0x5c
 8010798:	781b      	ldrb	r3, [r3, #0]
 801079a:	461a      	mov	r2, r3
 801079c:	4601      	mov	r1, r0
 801079e:	6878      	ldr	r0, [r7, #4]
 80107a0:	f005 fa34 	bl	8015c0c <HAL_HCD_HC_NotifyURBChange_Callback>
 80107a4:	e03a      	b.n	801081c <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80107a6:	6879      	ldr	r1, [r7, #4]
 80107a8:	68fa      	ldr	r2, [r7, #12]
 80107aa:	4613      	mov	r3, r2
 80107ac:	009b      	lsls	r3, r3, #2
 80107ae:	4413      	add	r3, r2
 80107b0:	00db      	lsls	r3, r3, #3
 80107b2:	440b      	add	r3, r1
 80107b4:	333f      	adds	r3, #63	; 0x3f
 80107b6:	781b      	ldrb	r3, [r3, #0]
 80107b8:	2b01      	cmp	r3, #1
 80107ba:	d12f      	bne.n	801081c <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80107bc:	6879      	ldr	r1, [r7, #4]
 80107be:	68fa      	ldr	r2, [r7, #12]
 80107c0:	4613      	mov	r3, r2
 80107c2:	009b      	lsls	r3, r3, #2
 80107c4:	4413      	add	r3, r2
 80107c6:	00db      	lsls	r3, r3, #3
 80107c8:	440b      	add	r3, r1
 80107ca:	335c      	adds	r3, #92	; 0x5c
 80107cc:	2201      	movs	r2, #1
 80107ce:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80107d0:	6879      	ldr	r1, [r7, #4]
 80107d2:	68fa      	ldr	r2, [r7, #12]
 80107d4:	4613      	mov	r3, r2
 80107d6:	009b      	lsls	r3, r3, #2
 80107d8:	4413      	add	r3, r2
 80107da:	00db      	lsls	r3, r3, #3
 80107dc:	440b      	add	r3, r1
 80107de:	3350      	adds	r3, #80	; 0x50
 80107e0:	781b      	ldrb	r3, [r3, #0]
 80107e2:	f083 0301 	eor.w	r3, r3, #1
 80107e6:	b2d8      	uxtb	r0, r3
 80107e8:	6879      	ldr	r1, [r7, #4]
 80107ea:	68fa      	ldr	r2, [r7, #12]
 80107ec:	4613      	mov	r3, r2
 80107ee:	009b      	lsls	r3, r3, #2
 80107f0:	4413      	add	r3, r2
 80107f2:	00db      	lsls	r3, r3, #3
 80107f4:	440b      	add	r3, r1
 80107f6:	3350      	adds	r3, #80	; 0x50
 80107f8:	4602      	mov	r2, r0
 80107fa:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	b2d8      	uxtb	r0, r3
 8010800:	6879      	ldr	r1, [r7, #4]
 8010802:	68fa      	ldr	r2, [r7, #12]
 8010804:	4613      	mov	r3, r2
 8010806:	009b      	lsls	r3, r3, #2
 8010808:	4413      	add	r3, r2
 801080a:	00db      	lsls	r3, r3, #3
 801080c:	440b      	add	r3, r1
 801080e:	335c      	adds	r3, #92	; 0x5c
 8010810:	781b      	ldrb	r3, [r3, #0]
 8010812:	461a      	mov	r2, r3
 8010814:	4601      	mov	r1, r0
 8010816:	6878      	ldr	r0, [r7, #4]
 8010818:	f005 f9f8 	bl	8015c0c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 801081c:	6879      	ldr	r1, [r7, #4]
 801081e:	68fa      	ldr	r2, [r7, #12]
 8010820:	4613      	mov	r3, r2
 8010822:	009b      	lsls	r3, r3, #2
 8010824:	4413      	add	r3, r2
 8010826:	00db      	lsls	r3, r3, #3
 8010828:	440b      	add	r3, r1
 801082a:	3350      	adds	r3, #80	; 0x50
 801082c:	781b      	ldrb	r3, [r3, #0]
 801082e:	f083 0301 	eor.w	r3, r3, #1
 8010832:	b2d8      	uxtb	r0, r3
 8010834:	6879      	ldr	r1, [r7, #4]
 8010836:	68fa      	ldr	r2, [r7, #12]
 8010838:	4613      	mov	r3, r2
 801083a:	009b      	lsls	r3, r3, #2
 801083c:	4413      	add	r3, r2
 801083e:	00db      	lsls	r3, r3, #3
 8010840:	440b      	add	r3, r1
 8010842:	3350      	adds	r3, #80	; 0x50
 8010844:	4602      	mov	r2, r0
 8010846:	701a      	strb	r2, [r3, #0]
}
 8010848:	e1f7      	b.n	8010c3a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	015a      	lsls	r2, r3, #5
 801084e:	693b      	ldr	r3, [r7, #16]
 8010850:	4413      	add	r3, r2
 8010852:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010856:	689b      	ldr	r3, [r3, #8]
 8010858:	f003 0302 	and.w	r3, r3, #2
 801085c:	2b02      	cmp	r3, #2
 801085e:	f040 811a 	bne.w	8010a96 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	015a      	lsls	r2, r3, #5
 8010866:	693b      	ldr	r3, [r7, #16]
 8010868:	4413      	add	r3, r2
 801086a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801086e:	68db      	ldr	r3, [r3, #12]
 8010870:	68fa      	ldr	r2, [r7, #12]
 8010872:	0151      	lsls	r1, r2, #5
 8010874:	693a      	ldr	r2, [r7, #16]
 8010876:	440a      	add	r2, r1
 8010878:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801087c:	f023 0302 	bic.w	r3, r3, #2
 8010880:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8010882:	6879      	ldr	r1, [r7, #4]
 8010884:	68fa      	ldr	r2, [r7, #12]
 8010886:	4613      	mov	r3, r2
 8010888:	009b      	lsls	r3, r3, #2
 801088a:	4413      	add	r3, r2
 801088c:	00db      	lsls	r3, r3, #3
 801088e:	440b      	add	r3, r1
 8010890:	335d      	adds	r3, #93	; 0x5d
 8010892:	781b      	ldrb	r3, [r3, #0]
 8010894:	2b01      	cmp	r3, #1
 8010896:	d10a      	bne.n	80108ae <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8010898:	6879      	ldr	r1, [r7, #4]
 801089a:	68fa      	ldr	r2, [r7, #12]
 801089c:	4613      	mov	r3, r2
 801089e:	009b      	lsls	r3, r3, #2
 80108a0:	4413      	add	r3, r2
 80108a2:	00db      	lsls	r3, r3, #3
 80108a4:	440b      	add	r3, r1
 80108a6:	335c      	adds	r3, #92	; 0x5c
 80108a8:	2201      	movs	r2, #1
 80108aa:	701a      	strb	r2, [r3, #0]
 80108ac:	e0d9      	b.n	8010a62 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80108ae:	6879      	ldr	r1, [r7, #4]
 80108b0:	68fa      	ldr	r2, [r7, #12]
 80108b2:	4613      	mov	r3, r2
 80108b4:	009b      	lsls	r3, r3, #2
 80108b6:	4413      	add	r3, r2
 80108b8:	00db      	lsls	r3, r3, #3
 80108ba:	440b      	add	r3, r1
 80108bc:	335d      	adds	r3, #93	; 0x5d
 80108be:	781b      	ldrb	r3, [r3, #0]
 80108c0:	2b05      	cmp	r3, #5
 80108c2:	d10a      	bne.n	80108da <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80108c4:	6879      	ldr	r1, [r7, #4]
 80108c6:	68fa      	ldr	r2, [r7, #12]
 80108c8:	4613      	mov	r3, r2
 80108ca:	009b      	lsls	r3, r3, #2
 80108cc:	4413      	add	r3, r2
 80108ce:	00db      	lsls	r3, r3, #3
 80108d0:	440b      	add	r3, r1
 80108d2:	335c      	adds	r3, #92	; 0x5c
 80108d4:	2205      	movs	r2, #5
 80108d6:	701a      	strb	r2, [r3, #0]
 80108d8:	e0c3      	b.n	8010a62 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80108da:	6879      	ldr	r1, [r7, #4]
 80108dc:	68fa      	ldr	r2, [r7, #12]
 80108de:	4613      	mov	r3, r2
 80108e0:	009b      	lsls	r3, r3, #2
 80108e2:	4413      	add	r3, r2
 80108e4:	00db      	lsls	r3, r3, #3
 80108e6:	440b      	add	r3, r1
 80108e8:	335d      	adds	r3, #93	; 0x5d
 80108ea:	781b      	ldrb	r3, [r3, #0]
 80108ec:	2b06      	cmp	r3, #6
 80108ee:	d00a      	beq.n	8010906 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80108f0:	6879      	ldr	r1, [r7, #4]
 80108f2:	68fa      	ldr	r2, [r7, #12]
 80108f4:	4613      	mov	r3, r2
 80108f6:	009b      	lsls	r3, r3, #2
 80108f8:	4413      	add	r3, r2
 80108fa:	00db      	lsls	r3, r3, #3
 80108fc:	440b      	add	r3, r1
 80108fe:	335d      	adds	r3, #93	; 0x5d
 8010900:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8010902:	2b08      	cmp	r3, #8
 8010904:	d156      	bne.n	80109b4 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8010906:	6879      	ldr	r1, [r7, #4]
 8010908:	68fa      	ldr	r2, [r7, #12]
 801090a:	4613      	mov	r3, r2
 801090c:	009b      	lsls	r3, r3, #2
 801090e:	4413      	add	r3, r2
 8010910:	00db      	lsls	r3, r3, #3
 8010912:	440b      	add	r3, r1
 8010914:	3358      	adds	r3, #88	; 0x58
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	1c59      	adds	r1, r3, #1
 801091a:	6878      	ldr	r0, [r7, #4]
 801091c:	68fa      	ldr	r2, [r7, #12]
 801091e:	4613      	mov	r3, r2
 8010920:	009b      	lsls	r3, r3, #2
 8010922:	4413      	add	r3, r2
 8010924:	00db      	lsls	r3, r3, #3
 8010926:	4403      	add	r3, r0
 8010928:	3358      	adds	r3, #88	; 0x58
 801092a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 801092c:	6879      	ldr	r1, [r7, #4]
 801092e:	68fa      	ldr	r2, [r7, #12]
 8010930:	4613      	mov	r3, r2
 8010932:	009b      	lsls	r3, r3, #2
 8010934:	4413      	add	r3, r2
 8010936:	00db      	lsls	r3, r3, #3
 8010938:	440b      	add	r3, r1
 801093a:	3358      	adds	r3, #88	; 0x58
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	2b03      	cmp	r3, #3
 8010940:	d914      	bls.n	801096c <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8010942:	6879      	ldr	r1, [r7, #4]
 8010944:	68fa      	ldr	r2, [r7, #12]
 8010946:	4613      	mov	r3, r2
 8010948:	009b      	lsls	r3, r3, #2
 801094a:	4413      	add	r3, r2
 801094c:	00db      	lsls	r3, r3, #3
 801094e:	440b      	add	r3, r1
 8010950:	3358      	adds	r3, #88	; 0x58
 8010952:	2200      	movs	r2, #0
 8010954:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8010956:	6879      	ldr	r1, [r7, #4]
 8010958:	68fa      	ldr	r2, [r7, #12]
 801095a:	4613      	mov	r3, r2
 801095c:	009b      	lsls	r3, r3, #2
 801095e:	4413      	add	r3, r2
 8010960:	00db      	lsls	r3, r3, #3
 8010962:	440b      	add	r3, r1
 8010964:	335c      	adds	r3, #92	; 0x5c
 8010966:	2204      	movs	r2, #4
 8010968:	701a      	strb	r2, [r3, #0]
 801096a:	e009      	b.n	8010980 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 801096c:	6879      	ldr	r1, [r7, #4]
 801096e:	68fa      	ldr	r2, [r7, #12]
 8010970:	4613      	mov	r3, r2
 8010972:	009b      	lsls	r3, r3, #2
 8010974:	4413      	add	r3, r2
 8010976:	00db      	lsls	r3, r3, #3
 8010978:	440b      	add	r3, r1
 801097a:	335c      	adds	r3, #92	; 0x5c
 801097c:	2202      	movs	r2, #2
 801097e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	015a      	lsls	r2, r3, #5
 8010984:	693b      	ldr	r3, [r7, #16]
 8010986:	4413      	add	r3, r2
 8010988:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8010990:	68bb      	ldr	r3, [r7, #8]
 8010992:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8010996:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8010998:	68bb      	ldr	r3, [r7, #8]
 801099a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801099e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	015a      	lsls	r2, r3, #5
 80109a4:	693b      	ldr	r3, [r7, #16]
 80109a6:	4413      	add	r3, r2
 80109a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80109ac:	461a      	mov	r2, r3
 80109ae:	68bb      	ldr	r3, [r7, #8]
 80109b0:	6013      	str	r3, [r2, #0]
 80109b2:	e056      	b.n	8010a62 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80109b4:	6879      	ldr	r1, [r7, #4]
 80109b6:	68fa      	ldr	r2, [r7, #12]
 80109b8:	4613      	mov	r3, r2
 80109ba:	009b      	lsls	r3, r3, #2
 80109bc:	4413      	add	r3, r2
 80109be:	00db      	lsls	r3, r3, #3
 80109c0:	440b      	add	r3, r1
 80109c2:	335d      	adds	r3, #93	; 0x5d
 80109c4:	781b      	ldrb	r3, [r3, #0]
 80109c6:	2b03      	cmp	r3, #3
 80109c8:	d123      	bne.n	8010a12 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80109ca:	6879      	ldr	r1, [r7, #4]
 80109cc:	68fa      	ldr	r2, [r7, #12]
 80109ce:	4613      	mov	r3, r2
 80109d0:	009b      	lsls	r3, r3, #2
 80109d2:	4413      	add	r3, r2
 80109d4:	00db      	lsls	r3, r3, #3
 80109d6:	440b      	add	r3, r1
 80109d8:	335c      	adds	r3, #92	; 0x5c
 80109da:	2202      	movs	r2, #2
 80109dc:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	015a      	lsls	r2, r3, #5
 80109e2:	693b      	ldr	r3, [r7, #16]
 80109e4:	4413      	add	r3, r2
 80109e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80109ee:	68bb      	ldr	r3, [r7, #8]
 80109f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80109f4:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80109f6:	68bb      	ldr	r3, [r7, #8]
 80109f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80109fc:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	015a      	lsls	r2, r3, #5
 8010a02:	693b      	ldr	r3, [r7, #16]
 8010a04:	4413      	add	r3, r2
 8010a06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010a0a:	461a      	mov	r2, r3
 8010a0c:	68bb      	ldr	r3, [r7, #8]
 8010a0e:	6013      	str	r3, [r2, #0]
 8010a10:	e027      	b.n	8010a62 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8010a12:	6879      	ldr	r1, [r7, #4]
 8010a14:	68fa      	ldr	r2, [r7, #12]
 8010a16:	4613      	mov	r3, r2
 8010a18:	009b      	lsls	r3, r3, #2
 8010a1a:	4413      	add	r3, r2
 8010a1c:	00db      	lsls	r3, r3, #3
 8010a1e:	440b      	add	r3, r1
 8010a20:	335d      	adds	r3, #93	; 0x5d
 8010a22:	781b      	ldrb	r3, [r3, #0]
 8010a24:	2b07      	cmp	r3, #7
 8010a26:	d11c      	bne.n	8010a62 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8010a28:	6879      	ldr	r1, [r7, #4]
 8010a2a:	68fa      	ldr	r2, [r7, #12]
 8010a2c:	4613      	mov	r3, r2
 8010a2e:	009b      	lsls	r3, r3, #2
 8010a30:	4413      	add	r3, r2
 8010a32:	00db      	lsls	r3, r3, #3
 8010a34:	440b      	add	r3, r1
 8010a36:	3358      	adds	r3, #88	; 0x58
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	1c59      	adds	r1, r3, #1
 8010a3c:	6878      	ldr	r0, [r7, #4]
 8010a3e:	68fa      	ldr	r2, [r7, #12]
 8010a40:	4613      	mov	r3, r2
 8010a42:	009b      	lsls	r3, r3, #2
 8010a44:	4413      	add	r3, r2
 8010a46:	00db      	lsls	r3, r3, #3
 8010a48:	4403      	add	r3, r0
 8010a4a:	3358      	adds	r3, #88	; 0x58
 8010a4c:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8010a4e:	6879      	ldr	r1, [r7, #4]
 8010a50:	68fa      	ldr	r2, [r7, #12]
 8010a52:	4613      	mov	r3, r2
 8010a54:	009b      	lsls	r3, r3, #2
 8010a56:	4413      	add	r3, r2
 8010a58:	00db      	lsls	r3, r3, #3
 8010a5a:	440b      	add	r3, r1
 8010a5c:	335c      	adds	r3, #92	; 0x5c
 8010a5e:	2204      	movs	r2, #4
 8010a60:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8010a62:	68fb      	ldr	r3, [r7, #12]
 8010a64:	015a      	lsls	r2, r3, #5
 8010a66:	693b      	ldr	r3, [r7, #16]
 8010a68:	4413      	add	r3, r2
 8010a6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010a6e:	461a      	mov	r2, r3
 8010a70:	2302      	movs	r3, #2
 8010a72:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8010a74:	68fb      	ldr	r3, [r7, #12]
 8010a76:	b2d8      	uxtb	r0, r3
 8010a78:	6879      	ldr	r1, [r7, #4]
 8010a7a:	68fa      	ldr	r2, [r7, #12]
 8010a7c:	4613      	mov	r3, r2
 8010a7e:	009b      	lsls	r3, r3, #2
 8010a80:	4413      	add	r3, r2
 8010a82:	00db      	lsls	r3, r3, #3
 8010a84:	440b      	add	r3, r1
 8010a86:	335c      	adds	r3, #92	; 0x5c
 8010a88:	781b      	ldrb	r3, [r3, #0]
 8010a8a:	461a      	mov	r2, r3
 8010a8c:	4601      	mov	r1, r0
 8010a8e:	6878      	ldr	r0, [r7, #4]
 8010a90:	f005 f8bc 	bl	8015c0c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8010a94:	e0d1      	b.n	8010c3a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8010a96:	68fb      	ldr	r3, [r7, #12]
 8010a98:	015a      	lsls	r2, r3, #5
 8010a9a:	693b      	ldr	r3, [r7, #16]
 8010a9c:	4413      	add	r3, r2
 8010a9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010aa2:	689b      	ldr	r3, [r3, #8]
 8010aa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010aa8:	2b80      	cmp	r3, #128	; 0x80
 8010aaa:	d13e      	bne.n	8010b2a <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8010aac:	68fb      	ldr	r3, [r7, #12]
 8010aae:	015a      	lsls	r2, r3, #5
 8010ab0:	693b      	ldr	r3, [r7, #16]
 8010ab2:	4413      	add	r3, r2
 8010ab4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010ab8:	68db      	ldr	r3, [r3, #12]
 8010aba:	68fa      	ldr	r2, [r7, #12]
 8010abc:	0151      	lsls	r1, r2, #5
 8010abe:	693a      	ldr	r2, [r7, #16]
 8010ac0:	440a      	add	r2, r1
 8010ac2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8010ac6:	f043 0302 	orr.w	r3, r3, #2
 8010aca:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8010acc:	6879      	ldr	r1, [r7, #4]
 8010ace:	68fa      	ldr	r2, [r7, #12]
 8010ad0:	4613      	mov	r3, r2
 8010ad2:	009b      	lsls	r3, r3, #2
 8010ad4:	4413      	add	r3, r2
 8010ad6:	00db      	lsls	r3, r3, #3
 8010ad8:	440b      	add	r3, r1
 8010ada:	3358      	adds	r3, #88	; 0x58
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	1c59      	adds	r1, r3, #1
 8010ae0:	6878      	ldr	r0, [r7, #4]
 8010ae2:	68fa      	ldr	r2, [r7, #12]
 8010ae4:	4613      	mov	r3, r2
 8010ae6:	009b      	lsls	r3, r3, #2
 8010ae8:	4413      	add	r3, r2
 8010aea:	00db      	lsls	r3, r3, #3
 8010aec:	4403      	add	r3, r0
 8010aee:	3358      	adds	r3, #88	; 0x58
 8010af0:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8010af2:	6879      	ldr	r1, [r7, #4]
 8010af4:	68fa      	ldr	r2, [r7, #12]
 8010af6:	4613      	mov	r3, r2
 8010af8:	009b      	lsls	r3, r3, #2
 8010afa:	4413      	add	r3, r2
 8010afc:	00db      	lsls	r3, r3, #3
 8010afe:	440b      	add	r3, r1
 8010b00:	335d      	adds	r3, #93	; 0x5d
 8010b02:	2206      	movs	r2, #6
 8010b04:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	68fa      	ldr	r2, [r7, #12]
 8010b0c:	b2d2      	uxtb	r2, r2
 8010b0e:	4611      	mov	r1, r2
 8010b10:	4618      	mov	r0, r3
 8010b12:	f003 fd78 	bl	8014606 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8010b16:	68fb      	ldr	r3, [r7, #12]
 8010b18:	015a      	lsls	r2, r3, #5
 8010b1a:	693b      	ldr	r3, [r7, #16]
 8010b1c:	4413      	add	r3, r2
 8010b1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010b22:	461a      	mov	r2, r3
 8010b24:	2380      	movs	r3, #128	; 0x80
 8010b26:	6093      	str	r3, [r2, #8]
}
 8010b28:	e087      	b.n	8010c3a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8010b2a:	68fb      	ldr	r3, [r7, #12]
 8010b2c:	015a      	lsls	r2, r3, #5
 8010b2e:	693b      	ldr	r3, [r7, #16]
 8010b30:	4413      	add	r3, r2
 8010b32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010b36:	689b      	ldr	r3, [r3, #8]
 8010b38:	f003 0310 	and.w	r3, r3, #16
 8010b3c:	2b10      	cmp	r3, #16
 8010b3e:	d17c      	bne.n	8010c3a <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8010b40:	6879      	ldr	r1, [r7, #4]
 8010b42:	68fa      	ldr	r2, [r7, #12]
 8010b44:	4613      	mov	r3, r2
 8010b46:	009b      	lsls	r3, r3, #2
 8010b48:	4413      	add	r3, r2
 8010b4a:	00db      	lsls	r3, r3, #3
 8010b4c:	440b      	add	r3, r1
 8010b4e:	333f      	adds	r3, #63	; 0x3f
 8010b50:	781b      	ldrb	r3, [r3, #0]
 8010b52:	2b03      	cmp	r3, #3
 8010b54:	d122      	bne.n	8010b9c <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8010b56:	6879      	ldr	r1, [r7, #4]
 8010b58:	68fa      	ldr	r2, [r7, #12]
 8010b5a:	4613      	mov	r3, r2
 8010b5c:	009b      	lsls	r3, r3, #2
 8010b5e:	4413      	add	r3, r2
 8010b60:	00db      	lsls	r3, r3, #3
 8010b62:	440b      	add	r3, r1
 8010b64:	3358      	adds	r3, #88	; 0x58
 8010b66:	2200      	movs	r2, #0
 8010b68:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8010b6a:	68fb      	ldr	r3, [r7, #12]
 8010b6c:	015a      	lsls	r2, r3, #5
 8010b6e:	693b      	ldr	r3, [r7, #16]
 8010b70:	4413      	add	r3, r2
 8010b72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010b76:	68db      	ldr	r3, [r3, #12]
 8010b78:	68fa      	ldr	r2, [r7, #12]
 8010b7a:	0151      	lsls	r1, r2, #5
 8010b7c:	693a      	ldr	r2, [r7, #16]
 8010b7e:	440a      	add	r2, r1
 8010b80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8010b84:	f043 0302 	orr.w	r3, r3, #2
 8010b88:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	68fa      	ldr	r2, [r7, #12]
 8010b90:	b2d2      	uxtb	r2, r2
 8010b92:	4611      	mov	r1, r2
 8010b94:	4618      	mov	r0, r3
 8010b96:	f003 fd36 	bl	8014606 <USB_HC_Halt>
 8010b9a:	e045      	b.n	8010c28 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8010b9c:	6879      	ldr	r1, [r7, #4]
 8010b9e:	68fa      	ldr	r2, [r7, #12]
 8010ba0:	4613      	mov	r3, r2
 8010ba2:	009b      	lsls	r3, r3, #2
 8010ba4:	4413      	add	r3, r2
 8010ba6:	00db      	lsls	r3, r3, #3
 8010ba8:	440b      	add	r3, r1
 8010baa:	333f      	adds	r3, #63	; 0x3f
 8010bac:	781b      	ldrb	r3, [r3, #0]
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d00a      	beq.n	8010bc8 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8010bb2:	6879      	ldr	r1, [r7, #4]
 8010bb4:	68fa      	ldr	r2, [r7, #12]
 8010bb6:	4613      	mov	r3, r2
 8010bb8:	009b      	lsls	r3, r3, #2
 8010bba:	4413      	add	r3, r2
 8010bbc:	00db      	lsls	r3, r3, #3
 8010bbe:	440b      	add	r3, r1
 8010bc0:	333f      	adds	r3, #63	; 0x3f
 8010bc2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8010bc4:	2b02      	cmp	r3, #2
 8010bc6:	d12f      	bne.n	8010c28 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8010bc8:	6879      	ldr	r1, [r7, #4]
 8010bca:	68fa      	ldr	r2, [r7, #12]
 8010bcc:	4613      	mov	r3, r2
 8010bce:	009b      	lsls	r3, r3, #2
 8010bd0:	4413      	add	r3, r2
 8010bd2:	00db      	lsls	r3, r3, #3
 8010bd4:	440b      	add	r3, r1
 8010bd6:	3358      	adds	r3, #88	; 0x58
 8010bd8:	2200      	movs	r2, #0
 8010bda:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	691b      	ldr	r3, [r3, #16]
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d121      	bne.n	8010c28 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8010be4:	6879      	ldr	r1, [r7, #4]
 8010be6:	68fa      	ldr	r2, [r7, #12]
 8010be8:	4613      	mov	r3, r2
 8010bea:	009b      	lsls	r3, r3, #2
 8010bec:	4413      	add	r3, r2
 8010bee:	00db      	lsls	r3, r3, #3
 8010bf0:	440b      	add	r3, r1
 8010bf2:	335d      	adds	r3, #93	; 0x5d
 8010bf4:	2203      	movs	r2, #3
 8010bf6:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	015a      	lsls	r2, r3, #5
 8010bfc:	693b      	ldr	r3, [r7, #16]
 8010bfe:	4413      	add	r3, r2
 8010c00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010c04:	68db      	ldr	r3, [r3, #12]
 8010c06:	68fa      	ldr	r2, [r7, #12]
 8010c08:	0151      	lsls	r1, r2, #5
 8010c0a:	693a      	ldr	r2, [r7, #16]
 8010c0c:	440a      	add	r2, r1
 8010c0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8010c12:	f043 0302 	orr.w	r3, r3, #2
 8010c16:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	68fa      	ldr	r2, [r7, #12]
 8010c1e:	b2d2      	uxtb	r2, r2
 8010c20:	4611      	mov	r1, r2
 8010c22:	4618      	mov	r0, r3
 8010c24:	f003 fcef 	bl	8014606 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8010c28:	68fb      	ldr	r3, [r7, #12]
 8010c2a:	015a      	lsls	r2, r3, #5
 8010c2c:	693b      	ldr	r3, [r7, #16]
 8010c2e:	4413      	add	r3, r2
 8010c30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010c34:	461a      	mov	r2, r3
 8010c36:	2310      	movs	r3, #16
 8010c38:	6093      	str	r3, [r2, #8]
}
 8010c3a:	bf00      	nop
 8010c3c:	3718      	adds	r7, #24
 8010c3e:	46bd      	mov	sp, r7
 8010c40:	bd80      	pop	{r7, pc}

08010c42 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8010c42:	b580      	push	{r7, lr}
 8010c44:	b086      	sub	sp, #24
 8010c46:	af00      	add	r7, sp, #0
 8010c48:	6078      	str	r0, [r7, #4]
 8010c4a:	460b      	mov	r3, r1
 8010c4c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010c54:	697b      	ldr	r3, [r7, #20]
 8010c56:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8010c58:	78fb      	ldrb	r3, [r7, #3]
 8010c5a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8010c5c:	68fb      	ldr	r3, [r7, #12]
 8010c5e:	015a      	lsls	r2, r3, #5
 8010c60:	693b      	ldr	r3, [r7, #16]
 8010c62:	4413      	add	r3, r2
 8010c64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010c68:	689b      	ldr	r3, [r3, #8]
 8010c6a:	f003 0304 	and.w	r3, r3, #4
 8010c6e:	2b04      	cmp	r3, #4
 8010c70:	d119      	bne.n	8010ca6 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8010c72:	68fb      	ldr	r3, [r7, #12]
 8010c74:	015a      	lsls	r2, r3, #5
 8010c76:	693b      	ldr	r3, [r7, #16]
 8010c78:	4413      	add	r3, r2
 8010c7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010c7e:	461a      	mov	r2, r3
 8010c80:	2304      	movs	r3, #4
 8010c82:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	015a      	lsls	r2, r3, #5
 8010c88:	693b      	ldr	r3, [r7, #16]
 8010c8a:	4413      	add	r3, r2
 8010c8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010c90:	68db      	ldr	r3, [r3, #12]
 8010c92:	68fa      	ldr	r2, [r7, #12]
 8010c94:	0151      	lsls	r1, r2, #5
 8010c96:	693a      	ldr	r2, [r7, #16]
 8010c98:	440a      	add	r2, r1
 8010c9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8010c9e:	f043 0302 	orr.w	r3, r3, #2
 8010ca2:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8010ca4:	e33e      	b.n	8011324 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	015a      	lsls	r2, r3, #5
 8010caa:	693b      	ldr	r3, [r7, #16]
 8010cac:	4413      	add	r3, r2
 8010cae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010cb2:	689b      	ldr	r3, [r3, #8]
 8010cb4:	f003 0320 	and.w	r3, r3, #32
 8010cb8:	2b20      	cmp	r3, #32
 8010cba:	d141      	bne.n	8010d40 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8010cbc:	68fb      	ldr	r3, [r7, #12]
 8010cbe:	015a      	lsls	r2, r3, #5
 8010cc0:	693b      	ldr	r3, [r7, #16]
 8010cc2:	4413      	add	r3, r2
 8010cc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010cc8:	461a      	mov	r2, r3
 8010cca:	2320      	movs	r3, #32
 8010ccc:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8010cce:	6879      	ldr	r1, [r7, #4]
 8010cd0:	68fa      	ldr	r2, [r7, #12]
 8010cd2:	4613      	mov	r3, r2
 8010cd4:	009b      	lsls	r3, r3, #2
 8010cd6:	4413      	add	r3, r2
 8010cd8:	00db      	lsls	r3, r3, #3
 8010cda:	440b      	add	r3, r1
 8010cdc:	333d      	adds	r3, #61	; 0x3d
 8010cde:	781b      	ldrb	r3, [r3, #0]
 8010ce0:	2b01      	cmp	r3, #1
 8010ce2:	f040 831f 	bne.w	8011324 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8010ce6:	6879      	ldr	r1, [r7, #4]
 8010ce8:	68fa      	ldr	r2, [r7, #12]
 8010cea:	4613      	mov	r3, r2
 8010cec:	009b      	lsls	r3, r3, #2
 8010cee:	4413      	add	r3, r2
 8010cf0:	00db      	lsls	r3, r3, #3
 8010cf2:	440b      	add	r3, r1
 8010cf4:	333d      	adds	r3, #61	; 0x3d
 8010cf6:	2200      	movs	r2, #0
 8010cf8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8010cfa:	6879      	ldr	r1, [r7, #4]
 8010cfc:	68fa      	ldr	r2, [r7, #12]
 8010cfe:	4613      	mov	r3, r2
 8010d00:	009b      	lsls	r3, r3, #2
 8010d02:	4413      	add	r3, r2
 8010d04:	00db      	lsls	r3, r3, #3
 8010d06:	440b      	add	r3, r1
 8010d08:	335c      	adds	r3, #92	; 0x5c
 8010d0a:	2202      	movs	r2, #2
 8010d0c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	015a      	lsls	r2, r3, #5
 8010d12:	693b      	ldr	r3, [r7, #16]
 8010d14:	4413      	add	r3, r2
 8010d16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010d1a:	68db      	ldr	r3, [r3, #12]
 8010d1c:	68fa      	ldr	r2, [r7, #12]
 8010d1e:	0151      	lsls	r1, r2, #5
 8010d20:	693a      	ldr	r2, [r7, #16]
 8010d22:	440a      	add	r2, r1
 8010d24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8010d28:	f043 0302 	orr.w	r3, r3, #2
 8010d2c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	68fa      	ldr	r2, [r7, #12]
 8010d34:	b2d2      	uxtb	r2, r2
 8010d36:	4611      	mov	r1, r2
 8010d38:	4618      	mov	r0, r3
 8010d3a:	f003 fc64 	bl	8014606 <USB_HC_Halt>
}
 8010d3e:	e2f1      	b.n	8011324 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8010d40:	68fb      	ldr	r3, [r7, #12]
 8010d42:	015a      	lsls	r2, r3, #5
 8010d44:	693b      	ldr	r3, [r7, #16]
 8010d46:	4413      	add	r3, r2
 8010d48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010d4c:	689b      	ldr	r3, [r3, #8]
 8010d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010d52:	2b40      	cmp	r3, #64	; 0x40
 8010d54:	d13f      	bne.n	8010dd6 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8010d56:	6879      	ldr	r1, [r7, #4]
 8010d58:	68fa      	ldr	r2, [r7, #12]
 8010d5a:	4613      	mov	r3, r2
 8010d5c:	009b      	lsls	r3, r3, #2
 8010d5e:	4413      	add	r3, r2
 8010d60:	00db      	lsls	r3, r3, #3
 8010d62:	440b      	add	r3, r1
 8010d64:	335d      	adds	r3, #93	; 0x5d
 8010d66:	2204      	movs	r2, #4
 8010d68:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8010d6a:	6879      	ldr	r1, [r7, #4]
 8010d6c:	68fa      	ldr	r2, [r7, #12]
 8010d6e:	4613      	mov	r3, r2
 8010d70:	009b      	lsls	r3, r3, #2
 8010d72:	4413      	add	r3, r2
 8010d74:	00db      	lsls	r3, r3, #3
 8010d76:	440b      	add	r3, r1
 8010d78:	333d      	adds	r3, #61	; 0x3d
 8010d7a:	2201      	movs	r2, #1
 8010d7c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8010d7e:	6879      	ldr	r1, [r7, #4]
 8010d80:	68fa      	ldr	r2, [r7, #12]
 8010d82:	4613      	mov	r3, r2
 8010d84:	009b      	lsls	r3, r3, #2
 8010d86:	4413      	add	r3, r2
 8010d88:	00db      	lsls	r3, r3, #3
 8010d8a:	440b      	add	r3, r1
 8010d8c:	3358      	adds	r3, #88	; 0x58
 8010d8e:	2200      	movs	r2, #0
 8010d90:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	015a      	lsls	r2, r3, #5
 8010d96:	693b      	ldr	r3, [r7, #16]
 8010d98:	4413      	add	r3, r2
 8010d9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010d9e:	68db      	ldr	r3, [r3, #12]
 8010da0:	68fa      	ldr	r2, [r7, #12]
 8010da2:	0151      	lsls	r1, r2, #5
 8010da4:	693a      	ldr	r2, [r7, #16]
 8010da6:	440a      	add	r2, r1
 8010da8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8010dac:	f043 0302 	orr.w	r3, r3, #2
 8010db0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	68fa      	ldr	r2, [r7, #12]
 8010db8:	b2d2      	uxtb	r2, r2
 8010dba:	4611      	mov	r1, r2
 8010dbc:	4618      	mov	r0, r3
 8010dbe:	f003 fc22 	bl	8014606 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8010dc2:	68fb      	ldr	r3, [r7, #12]
 8010dc4:	015a      	lsls	r2, r3, #5
 8010dc6:	693b      	ldr	r3, [r7, #16]
 8010dc8:	4413      	add	r3, r2
 8010dca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010dce:	461a      	mov	r2, r3
 8010dd0:	2340      	movs	r3, #64	; 0x40
 8010dd2:	6093      	str	r3, [r2, #8]
}
 8010dd4:	e2a6      	b.n	8011324 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8010dd6:	68fb      	ldr	r3, [r7, #12]
 8010dd8:	015a      	lsls	r2, r3, #5
 8010dda:	693b      	ldr	r3, [r7, #16]
 8010ddc:	4413      	add	r3, r2
 8010dde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010de2:	689b      	ldr	r3, [r3, #8]
 8010de4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010de8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010dec:	d122      	bne.n	8010e34 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8010dee:	68fb      	ldr	r3, [r7, #12]
 8010df0:	015a      	lsls	r2, r3, #5
 8010df2:	693b      	ldr	r3, [r7, #16]
 8010df4:	4413      	add	r3, r2
 8010df6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010dfa:	68db      	ldr	r3, [r3, #12]
 8010dfc:	68fa      	ldr	r2, [r7, #12]
 8010dfe:	0151      	lsls	r1, r2, #5
 8010e00:	693a      	ldr	r2, [r7, #16]
 8010e02:	440a      	add	r2, r1
 8010e04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8010e08:	f043 0302 	orr.w	r3, r3, #2
 8010e0c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	68fa      	ldr	r2, [r7, #12]
 8010e14:	b2d2      	uxtb	r2, r2
 8010e16:	4611      	mov	r1, r2
 8010e18:	4618      	mov	r0, r3
 8010e1a:	f003 fbf4 	bl	8014606 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8010e1e:	68fb      	ldr	r3, [r7, #12]
 8010e20:	015a      	lsls	r2, r3, #5
 8010e22:	693b      	ldr	r3, [r7, #16]
 8010e24:	4413      	add	r3, r2
 8010e26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010e2a:	461a      	mov	r2, r3
 8010e2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010e30:	6093      	str	r3, [r2, #8]
}
 8010e32:	e277      	b.n	8011324 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8010e34:	68fb      	ldr	r3, [r7, #12]
 8010e36:	015a      	lsls	r2, r3, #5
 8010e38:	693b      	ldr	r3, [r7, #16]
 8010e3a:	4413      	add	r3, r2
 8010e3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010e40:	689b      	ldr	r3, [r3, #8]
 8010e42:	f003 0301 	and.w	r3, r3, #1
 8010e46:	2b01      	cmp	r3, #1
 8010e48:	d135      	bne.n	8010eb6 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8010e4a:	6879      	ldr	r1, [r7, #4]
 8010e4c:	68fa      	ldr	r2, [r7, #12]
 8010e4e:	4613      	mov	r3, r2
 8010e50:	009b      	lsls	r3, r3, #2
 8010e52:	4413      	add	r3, r2
 8010e54:	00db      	lsls	r3, r3, #3
 8010e56:	440b      	add	r3, r1
 8010e58:	3358      	adds	r3, #88	; 0x58
 8010e5a:	2200      	movs	r2, #0
 8010e5c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8010e5e:	68fb      	ldr	r3, [r7, #12]
 8010e60:	015a      	lsls	r2, r3, #5
 8010e62:	693b      	ldr	r3, [r7, #16]
 8010e64:	4413      	add	r3, r2
 8010e66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010e6a:	68db      	ldr	r3, [r3, #12]
 8010e6c:	68fa      	ldr	r2, [r7, #12]
 8010e6e:	0151      	lsls	r1, r2, #5
 8010e70:	693a      	ldr	r2, [r7, #16]
 8010e72:	440a      	add	r2, r1
 8010e74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8010e78:	f043 0302 	orr.w	r3, r3, #2
 8010e7c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	68fa      	ldr	r2, [r7, #12]
 8010e84:	b2d2      	uxtb	r2, r2
 8010e86:	4611      	mov	r1, r2
 8010e88:	4618      	mov	r0, r3
 8010e8a:	f003 fbbc 	bl	8014606 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8010e8e:	68fb      	ldr	r3, [r7, #12]
 8010e90:	015a      	lsls	r2, r3, #5
 8010e92:	693b      	ldr	r3, [r7, #16]
 8010e94:	4413      	add	r3, r2
 8010e96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010e9a:	461a      	mov	r2, r3
 8010e9c:	2301      	movs	r3, #1
 8010e9e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8010ea0:	6879      	ldr	r1, [r7, #4]
 8010ea2:	68fa      	ldr	r2, [r7, #12]
 8010ea4:	4613      	mov	r3, r2
 8010ea6:	009b      	lsls	r3, r3, #2
 8010ea8:	4413      	add	r3, r2
 8010eaa:	00db      	lsls	r3, r3, #3
 8010eac:	440b      	add	r3, r1
 8010eae:	335d      	adds	r3, #93	; 0x5d
 8010eb0:	2201      	movs	r2, #1
 8010eb2:	701a      	strb	r2, [r3, #0]
}
 8010eb4:	e236      	b.n	8011324 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8010eb6:	68fb      	ldr	r3, [r7, #12]
 8010eb8:	015a      	lsls	r2, r3, #5
 8010eba:	693b      	ldr	r3, [r7, #16]
 8010ebc:	4413      	add	r3, r2
 8010ebe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010ec2:	689b      	ldr	r3, [r3, #8]
 8010ec4:	f003 0308 	and.w	r3, r3, #8
 8010ec8:	2b08      	cmp	r3, #8
 8010eca:	d12b      	bne.n	8010f24 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8010ecc:	68fb      	ldr	r3, [r7, #12]
 8010ece:	015a      	lsls	r2, r3, #5
 8010ed0:	693b      	ldr	r3, [r7, #16]
 8010ed2:	4413      	add	r3, r2
 8010ed4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010ed8:	461a      	mov	r2, r3
 8010eda:	2308      	movs	r3, #8
 8010edc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	015a      	lsls	r2, r3, #5
 8010ee2:	693b      	ldr	r3, [r7, #16]
 8010ee4:	4413      	add	r3, r2
 8010ee6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010eea:	68db      	ldr	r3, [r3, #12]
 8010eec:	68fa      	ldr	r2, [r7, #12]
 8010eee:	0151      	lsls	r1, r2, #5
 8010ef0:	693a      	ldr	r2, [r7, #16]
 8010ef2:	440a      	add	r2, r1
 8010ef4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8010ef8:	f043 0302 	orr.w	r3, r3, #2
 8010efc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	68fa      	ldr	r2, [r7, #12]
 8010f04:	b2d2      	uxtb	r2, r2
 8010f06:	4611      	mov	r1, r2
 8010f08:	4618      	mov	r0, r3
 8010f0a:	f003 fb7c 	bl	8014606 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8010f0e:	6879      	ldr	r1, [r7, #4]
 8010f10:	68fa      	ldr	r2, [r7, #12]
 8010f12:	4613      	mov	r3, r2
 8010f14:	009b      	lsls	r3, r3, #2
 8010f16:	4413      	add	r3, r2
 8010f18:	00db      	lsls	r3, r3, #3
 8010f1a:	440b      	add	r3, r1
 8010f1c:	335d      	adds	r3, #93	; 0x5d
 8010f1e:	2205      	movs	r2, #5
 8010f20:	701a      	strb	r2, [r3, #0]
}
 8010f22:	e1ff      	b.n	8011324 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8010f24:	68fb      	ldr	r3, [r7, #12]
 8010f26:	015a      	lsls	r2, r3, #5
 8010f28:	693b      	ldr	r3, [r7, #16]
 8010f2a:	4413      	add	r3, r2
 8010f2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010f30:	689b      	ldr	r3, [r3, #8]
 8010f32:	f003 0310 	and.w	r3, r3, #16
 8010f36:	2b10      	cmp	r3, #16
 8010f38:	d155      	bne.n	8010fe6 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8010f3a:	6879      	ldr	r1, [r7, #4]
 8010f3c:	68fa      	ldr	r2, [r7, #12]
 8010f3e:	4613      	mov	r3, r2
 8010f40:	009b      	lsls	r3, r3, #2
 8010f42:	4413      	add	r3, r2
 8010f44:	00db      	lsls	r3, r3, #3
 8010f46:	440b      	add	r3, r1
 8010f48:	3358      	adds	r3, #88	; 0x58
 8010f4a:	2200      	movs	r2, #0
 8010f4c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8010f4e:	6879      	ldr	r1, [r7, #4]
 8010f50:	68fa      	ldr	r2, [r7, #12]
 8010f52:	4613      	mov	r3, r2
 8010f54:	009b      	lsls	r3, r3, #2
 8010f56:	4413      	add	r3, r2
 8010f58:	00db      	lsls	r3, r3, #3
 8010f5a:	440b      	add	r3, r1
 8010f5c:	335d      	adds	r3, #93	; 0x5d
 8010f5e:	2203      	movs	r2, #3
 8010f60:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8010f62:	6879      	ldr	r1, [r7, #4]
 8010f64:	68fa      	ldr	r2, [r7, #12]
 8010f66:	4613      	mov	r3, r2
 8010f68:	009b      	lsls	r3, r3, #2
 8010f6a:	4413      	add	r3, r2
 8010f6c:	00db      	lsls	r3, r3, #3
 8010f6e:	440b      	add	r3, r1
 8010f70:	333d      	adds	r3, #61	; 0x3d
 8010f72:	781b      	ldrb	r3, [r3, #0]
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d114      	bne.n	8010fa2 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8010f78:	6879      	ldr	r1, [r7, #4]
 8010f7a:	68fa      	ldr	r2, [r7, #12]
 8010f7c:	4613      	mov	r3, r2
 8010f7e:	009b      	lsls	r3, r3, #2
 8010f80:	4413      	add	r3, r2
 8010f82:	00db      	lsls	r3, r3, #3
 8010f84:	440b      	add	r3, r1
 8010f86:	333c      	adds	r3, #60	; 0x3c
 8010f88:	781b      	ldrb	r3, [r3, #0]
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d109      	bne.n	8010fa2 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8010f8e:	6879      	ldr	r1, [r7, #4]
 8010f90:	68fa      	ldr	r2, [r7, #12]
 8010f92:	4613      	mov	r3, r2
 8010f94:	009b      	lsls	r3, r3, #2
 8010f96:	4413      	add	r3, r2
 8010f98:	00db      	lsls	r3, r3, #3
 8010f9a:	440b      	add	r3, r1
 8010f9c:	333d      	adds	r3, #61	; 0x3d
 8010f9e:	2201      	movs	r2, #1
 8010fa0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8010fa2:	68fb      	ldr	r3, [r7, #12]
 8010fa4:	015a      	lsls	r2, r3, #5
 8010fa6:	693b      	ldr	r3, [r7, #16]
 8010fa8:	4413      	add	r3, r2
 8010faa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010fae:	68db      	ldr	r3, [r3, #12]
 8010fb0:	68fa      	ldr	r2, [r7, #12]
 8010fb2:	0151      	lsls	r1, r2, #5
 8010fb4:	693a      	ldr	r2, [r7, #16]
 8010fb6:	440a      	add	r2, r1
 8010fb8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8010fbc:	f043 0302 	orr.w	r3, r3, #2
 8010fc0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	68fa      	ldr	r2, [r7, #12]
 8010fc8:	b2d2      	uxtb	r2, r2
 8010fca:	4611      	mov	r1, r2
 8010fcc:	4618      	mov	r0, r3
 8010fce:	f003 fb1a 	bl	8014606 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8010fd2:	68fb      	ldr	r3, [r7, #12]
 8010fd4:	015a      	lsls	r2, r3, #5
 8010fd6:	693b      	ldr	r3, [r7, #16]
 8010fd8:	4413      	add	r3, r2
 8010fda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010fde:	461a      	mov	r2, r3
 8010fe0:	2310      	movs	r3, #16
 8010fe2:	6093      	str	r3, [r2, #8]
}
 8010fe4:	e19e      	b.n	8011324 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8010fe6:	68fb      	ldr	r3, [r7, #12]
 8010fe8:	015a      	lsls	r2, r3, #5
 8010fea:	693b      	ldr	r3, [r7, #16]
 8010fec:	4413      	add	r3, r2
 8010fee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010ff2:	689b      	ldr	r3, [r3, #8]
 8010ff4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010ff8:	2b80      	cmp	r3, #128	; 0x80
 8010ffa:	d12b      	bne.n	8011054 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8010ffc:	68fb      	ldr	r3, [r7, #12]
 8010ffe:	015a      	lsls	r2, r3, #5
 8011000:	693b      	ldr	r3, [r7, #16]
 8011002:	4413      	add	r3, r2
 8011004:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011008:	68db      	ldr	r3, [r3, #12]
 801100a:	68fa      	ldr	r2, [r7, #12]
 801100c:	0151      	lsls	r1, r2, #5
 801100e:	693a      	ldr	r2, [r7, #16]
 8011010:	440a      	add	r2, r1
 8011012:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8011016:	f043 0302 	orr.w	r3, r3, #2
 801101a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	68fa      	ldr	r2, [r7, #12]
 8011022:	b2d2      	uxtb	r2, r2
 8011024:	4611      	mov	r1, r2
 8011026:	4618      	mov	r0, r3
 8011028:	f003 faed 	bl	8014606 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 801102c:	6879      	ldr	r1, [r7, #4]
 801102e:	68fa      	ldr	r2, [r7, #12]
 8011030:	4613      	mov	r3, r2
 8011032:	009b      	lsls	r3, r3, #2
 8011034:	4413      	add	r3, r2
 8011036:	00db      	lsls	r3, r3, #3
 8011038:	440b      	add	r3, r1
 801103a:	335d      	adds	r3, #93	; 0x5d
 801103c:	2206      	movs	r2, #6
 801103e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8011040:	68fb      	ldr	r3, [r7, #12]
 8011042:	015a      	lsls	r2, r3, #5
 8011044:	693b      	ldr	r3, [r7, #16]
 8011046:	4413      	add	r3, r2
 8011048:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801104c:	461a      	mov	r2, r3
 801104e:	2380      	movs	r3, #128	; 0x80
 8011050:	6093      	str	r3, [r2, #8]
}
 8011052:	e167      	b.n	8011324 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	015a      	lsls	r2, r3, #5
 8011058:	693b      	ldr	r3, [r7, #16]
 801105a:	4413      	add	r3, r2
 801105c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011060:	689b      	ldr	r3, [r3, #8]
 8011062:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011066:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801106a:	d135      	bne.n	80110d8 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 801106c:	68fb      	ldr	r3, [r7, #12]
 801106e:	015a      	lsls	r2, r3, #5
 8011070:	693b      	ldr	r3, [r7, #16]
 8011072:	4413      	add	r3, r2
 8011074:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011078:	68db      	ldr	r3, [r3, #12]
 801107a:	68fa      	ldr	r2, [r7, #12]
 801107c:	0151      	lsls	r1, r2, #5
 801107e:	693a      	ldr	r2, [r7, #16]
 8011080:	440a      	add	r2, r1
 8011082:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8011086:	f043 0302 	orr.w	r3, r3, #2
 801108a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	68fa      	ldr	r2, [r7, #12]
 8011092:	b2d2      	uxtb	r2, r2
 8011094:	4611      	mov	r1, r2
 8011096:	4618      	mov	r0, r3
 8011098:	f003 fab5 	bl	8014606 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 801109c:	68fb      	ldr	r3, [r7, #12]
 801109e:	015a      	lsls	r2, r3, #5
 80110a0:	693b      	ldr	r3, [r7, #16]
 80110a2:	4413      	add	r3, r2
 80110a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80110a8:	461a      	mov	r2, r3
 80110aa:	2310      	movs	r3, #16
 80110ac:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	015a      	lsls	r2, r3, #5
 80110b2:	693b      	ldr	r3, [r7, #16]
 80110b4:	4413      	add	r3, r2
 80110b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80110ba:	461a      	mov	r2, r3
 80110bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80110c0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80110c2:	6879      	ldr	r1, [r7, #4]
 80110c4:	68fa      	ldr	r2, [r7, #12]
 80110c6:	4613      	mov	r3, r2
 80110c8:	009b      	lsls	r3, r3, #2
 80110ca:	4413      	add	r3, r2
 80110cc:	00db      	lsls	r3, r3, #3
 80110ce:	440b      	add	r3, r1
 80110d0:	335d      	adds	r3, #93	; 0x5d
 80110d2:	2208      	movs	r2, #8
 80110d4:	701a      	strb	r2, [r3, #0]
}
 80110d6:	e125      	b.n	8011324 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80110d8:	68fb      	ldr	r3, [r7, #12]
 80110da:	015a      	lsls	r2, r3, #5
 80110dc:	693b      	ldr	r3, [r7, #16]
 80110de:	4413      	add	r3, r2
 80110e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80110e4:	689b      	ldr	r3, [r3, #8]
 80110e6:	f003 0302 	and.w	r3, r3, #2
 80110ea:	2b02      	cmp	r3, #2
 80110ec:	f040 811a 	bne.w	8011324 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	015a      	lsls	r2, r3, #5
 80110f4:	693b      	ldr	r3, [r7, #16]
 80110f6:	4413      	add	r3, r2
 80110f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80110fc:	68db      	ldr	r3, [r3, #12]
 80110fe:	68fa      	ldr	r2, [r7, #12]
 8011100:	0151      	lsls	r1, r2, #5
 8011102:	693a      	ldr	r2, [r7, #16]
 8011104:	440a      	add	r2, r1
 8011106:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801110a:	f023 0302 	bic.w	r3, r3, #2
 801110e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8011110:	6879      	ldr	r1, [r7, #4]
 8011112:	68fa      	ldr	r2, [r7, #12]
 8011114:	4613      	mov	r3, r2
 8011116:	009b      	lsls	r3, r3, #2
 8011118:	4413      	add	r3, r2
 801111a:	00db      	lsls	r3, r3, #3
 801111c:	440b      	add	r3, r1
 801111e:	335d      	adds	r3, #93	; 0x5d
 8011120:	781b      	ldrb	r3, [r3, #0]
 8011122:	2b01      	cmp	r3, #1
 8011124:	d137      	bne.n	8011196 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8011126:	6879      	ldr	r1, [r7, #4]
 8011128:	68fa      	ldr	r2, [r7, #12]
 801112a:	4613      	mov	r3, r2
 801112c:	009b      	lsls	r3, r3, #2
 801112e:	4413      	add	r3, r2
 8011130:	00db      	lsls	r3, r3, #3
 8011132:	440b      	add	r3, r1
 8011134:	335c      	adds	r3, #92	; 0x5c
 8011136:	2201      	movs	r2, #1
 8011138:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 801113a:	6879      	ldr	r1, [r7, #4]
 801113c:	68fa      	ldr	r2, [r7, #12]
 801113e:	4613      	mov	r3, r2
 8011140:	009b      	lsls	r3, r3, #2
 8011142:	4413      	add	r3, r2
 8011144:	00db      	lsls	r3, r3, #3
 8011146:	440b      	add	r3, r1
 8011148:	333f      	adds	r3, #63	; 0x3f
 801114a:	781b      	ldrb	r3, [r3, #0]
 801114c:	2b02      	cmp	r3, #2
 801114e:	d00b      	beq.n	8011168 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8011150:	6879      	ldr	r1, [r7, #4]
 8011152:	68fa      	ldr	r2, [r7, #12]
 8011154:	4613      	mov	r3, r2
 8011156:	009b      	lsls	r3, r3, #2
 8011158:	4413      	add	r3, r2
 801115a:	00db      	lsls	r3, r3, #3
 801115c:	440b      	add	r3, r1
 801115e:	333f      	adds	r3, #63	; 0x3f
 8011160:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8011162:	2b03      	cmp	r3, #3
 8011164:	f040 80c5 	bne.w	80112f2 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8011168:	6879      	ldr	r1, [r7, #4]
 801116a:	68fa      	ldr	r2, [r7, #12]
 801116c:	4613      	mov	r3, r2
 801116e:	009b      	lsls	r3, r3, #2
 8011170:	4413      	add	r3, r2
 8011172:	00db      	lsls	r3, r3, #3
 8011174:	440b      	add	r3, r1
 8011176:	3351      	adds	r3, #81	; 0x51
 8011178:	781b      	ldrb	r3, [r3, #0]
 801117a:	f083 0301 	eor.w	r3, r3, #1
 801117e:	b2d8      	uxtb	r0, r3
 8011180:	6879      	ldr	r1, [r7, #4]
 8011182:	68fa      	ldr	r2, [r7, #12]
 8011184:	4613      	mov	r3, r2
 8011186:	009b      	lsls	r3, r3, #2
 8011188:	4413      	add	r3, r2
 801118a:	00db      	lsls	r3, r3, #3
 801118c:	440b      	add	r3, r1
 801118e:	3351      	adds	r3, #81	; 0x51
 8011190:	4602      	mov	r2, r0
 8011192:	701a      	strb	r2, [r3, #0]
 8011194:	e0ad      	b.n	80112f2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8011196:	6879      	ldr	r1, [r7, #4]
 8011198:	68fa      	ldr	r2, [r7, #12]
 801119a:	4613      	mov	r3, r2
 801119c:	009b      	lsls	r3, r3, #2
 801119e:	4413      	add	r3, r2
 80111a0:	00db      	lsls	r3, r3, #3
 80111a2:	440b      	add	r3, r1
 80111a4:	335d      	adds	r3, #93	; 0x5d
 80111a6:	781b      	ldrb	r3, [r3, #0]
 80111a8:	2b03      	cmp	r3, #3
 80111aa:	d10a      	bne.n	80111c2 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80111ac:	6879      	ldr	r1, [r7, #4]
 80111ae:	68fa      	ldr	r2, [r7, #12]
 80111b0:	4613      	mov	r3, r2
 80111b2:	009b      	lsls	r3, r3, #2
 80111b4:	4413      	add	r3, r2
 80111b6:	00db      	lsls	r3, r3, #3
 80111b8:	440b      	add	r3, r1
 80111ba:	335c      	adds	r3, #92	; 0x5c
 80111bc:	2202      	movs	r2, #2
 80111be:	701a      	strb	r2, [r3, #0]
 80111c0:	e097      	b.n	80112f2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80111c2:	6879      	ldr	r1, [r7, #4]
 80111c4:	68fa      	ldr	r2, [r7, #12]
 80111c6:	4613      	mov	r3, r2
 80111c8:	009b      	lsls	r3, r3, #2
 80111ca:	4413      	add	r3, r2
 80111cc:	00db      	lsls	r3, r3, #3
 80111ce:	440b      	add	r3, r1
 80111d0:	335d      	adds	r3, #93	; 0x5d
 80111d2:	781b      	ldrb	r3, [r3, #0]
 80111d4:	2b04      	cmp	r3, #4
 80111d6:	d10a      	bne.n	80111ee <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80111d8:	6879      	ldr	r1, [r7, #4]
 80111da:	68fa      	ldr	r2, [r7, #12]
 80111dc:	4613      	mov	r3, r2
 80111de:	009b      	lsls	r3, r3, #2
 80111e0:	4413      	add	r3, r2
 80111e2:	00db      	lsls	r3, r3, #3
 80111e4:	440b      	add	r3, r1
 80111e6:	335c      	adds	r3, #92	; 0x5c
 80111e8:	2202      	movs	r2, #2
 80111ea:	701a      	strb	r2, [r3, #0]
 80111ec:	e081      	b.n	80112f2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80111ee:	6879      	ldr	r1, [r7, #4]
 80111f0:	68fa      	ldr	r2, [r7, #12]
 80111f2:	4613      	mov	r3, r2
 80111f4:	009b      	lsls	r3, r3, #2
 80111f6:	4413      	add	r3, r2
 80111f8:	00db      	lsls	r3, r3, #3
 80111fa:	440b      	add	r3, r1
 80111fc:	335d      	adds	r3, #93	; 0x5d
 80111fe:	781b      	ldrb	r3, [r3, #0]
 8011200:	2b05      	cmp	r3, #5
 8011202:	d10a      	bne.n	801121a <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8011204:	6879      	ldr	r1, [r7, #4]
 8011206:	68fa      	ldr	r2, [r7, #12]
 8011208:	4613      	mov	r3, r2
 801120a:	009b      	lsls	r3, r3, #2
 801120c:	4413      	add	r3, r2
 801120e:	00db      	lsls	r3, r3, #3
 8011210:	440b      	add	r3, r1
 8011212:	335c      	adds	r3, #92	; 0x5c
 8011214:	2205      	movs	r2, #5
 8011216:	701a      	strb	r2, [r3, #0]
 8011218:	e06b      	b.n	80112f2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 801121a:	6879      	ldr	r1, [r7, #4]
 801121c:	68fa      	ldr	r2, [r7, #12]
 801121e:	4613      	mov	r3, r2
 8011220:	009b      	lsls	r3, r3, #2
 8011222:	4413      	add	r3, r2
 8011224:	00db      	lsls	r3, r3, #3
 8011226:	440b      	add	r3, r1
 8011228:	335d      	adds	r3, #93	; 0x5d
 801122a:	781b      	ldrb	r3, [r3, #0]
 801122c:	2b06      	cmp	r3, #6
 801122e:	d00a      	beq.n	8011246 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8011230:	6879      	ldr	r1, [r7, #4]
 8011232:	68fa      	ldr	r2, [r7, #12]
 8011234:	4613      	mov	r3, r2
 8011236:	009b      	lsls	r3, r3, #2
 8011238:	4413      	add	r3, r2
 801123a:	00db      	lsls	r3, r3, #3
 801123c:	440b      	add	r3, r1
 801123e:	335d      	adds	r3, #93	; 0x5d
 8011240:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8011242:	2b08      	cmp	r3, #8
 8011244:	d155      	bne.n	80112f2 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8011246:	6879      	ldr	r1, [r7, #4]
 8011248:	68fa      	ldr	r2, [r7, #12]
 801124a:	4613      	mov	r3, r2
 801124c:	009b      	lsls	r3, r3, #2
 801124e:	4413      	add	r3, r2
 8011250:	00db      	lsls	r3, r3, #3
 8011252:	440b      	add	r3, r1
 8011254:	3358      	adds	r3, #88	; 0x58
 8011256:	681b      	ldr	r3, [r3, #0]
 8011258:	1c59      	adds	r1, r3, #1
 801125a:	6878      	ldr	r0, [r7, #4]
 801125c:	68fa      	ldr	r2, [r7, #12]
 801125e:	4613      	mov	r3, r2
 8011260:	009b      	lsls	r3, r3, #2
 8011262:	4413      	add	r3, r2
 8011264:	00db      	lsls	r3, r3, #3
 8011266:	4403      	add	r3, r0
 8011268:	3358      	adds	r3, #88	; 0x58
 801126a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 801126c:	6879      	ldr	r1, [r7, #4]
 801126e:	68fa      	ldr	r2, [r7, #12]
 8011270:	4613      	mov	r3, r2
 8011272:	009b      	lsls	r3, r3, #2
 8011274:	4413      	add	r3, r2
 8011276:	00db      	lsls	r3, r3, #3
 8011278:	440b      	add	r3, r1
 801127a:	3358      	adds	r3, #88	; 0x58
 801127c:	681b      	ldr	r3, [r3, #0]
 801127e:	2b03      	cmp	r3, #3
 8011280:	d914      	bls.n	80112ac <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8011282:	6879      	ldr	r1, [r7, #4]
 8011284:	68fa      	ldr	r2, [r7, #12]
 8011286:	4613      	mov	r3, r2
 8011288:	009b      	lsls	r3, r3, #2
 801128a:	4413      	add	r3, r2
 801128c:	00db      	lsls	r3, r3, #3
 801128e:	440b      	add	r3, r1
 8011290:	3358      	adds	r3, #88	; 0x58
 8011292:	2200      	movs	r2, #0
 8011294:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8011296:	6879      	ldr	r1, [r7, #4]
 8011298:	68fa      	ldr	r2, [r7, #12]
 801129a:	4613      	mov	r3, r2
 801129c:	009b      	lsls	r3, r3, #2
 801129e:	4413      	add	r3, r2
 80112a0:	00db      	lsls	r3, r3, #3
 80112a2:	440b      	add	r3, r1
 80112a4:	335c      	adds	r3, #92	; 0x5c
 80112a6:	2204      	movs	r2, #4
 80112a8:	701a      	strb	r2, [r3, #0]
 80112aa:	e009      	b.n	80112c0 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80112ac:	6879      	ldr	r1, [r7, #4]
 80112ae:	68fa      	ldr	r2, [r7, #12]
 80112b0:	4613      	mov	r3, r2
 80112b2:	009b      	lsls	r3, r3, #2
 80112b4:	4413      	add	r3, r2
 80112b6:	00db      	lsls	r3, r3, #3
 80112b8:	440b      	add	r3, r1
 80112ba:	335c      	adds	r3, #92	; 0x5c
 80112bc:	2202      	movs	r2, #2
 80112be:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80112c0:	68fb      	ldr	r3, [r7, #12]
 80112c2:	015a      	lsls	r2, r3, #5
 80112c4:	693b      	ldr	r3, [r7, #16]
 80112c6:	4413      	add	r3, r2
 80112c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80112d0:	68bb      	ldr	r3, [r7, #8]
 80112d2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80112d6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80112d8:	68bb      	ldr	r3, [r7, #8]
 80112da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80112de:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80112e0:	68fb      	ldr	r3, [r7, #12]
 80112e2:	015a      	lsls	r2, r3, #5
 80112e4:	693b      	ldr	r3, [r7, #16]
 80112e6:	4413      	add	r3, r2
 80112e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80112ec:	461a      	mov	r2, r3
 80112ee:	68bb      	ldr	r3, [r7, #8]
 80112f0:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	015a      	lsls	r2, r3, #5
 80112f6:	693b      	ldr	r3, [r7, #16]
 80112f8:	4413      	add	r3, r2
 80112fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80112fe:	461a      	mov	r2, r3
 8011300:	2302      	movs	r3, #2
 8011302:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8011304:	68fb      	ldr	r3, [r7, #12]
 8011306:	b2d8      	uxtb	r0, r3
 8011308:	6879      	ldr	r1, [r7, #4]
 801130a:	68fa      	ldr	r2, [r7, #12]
 801130c:	4613      	mov	r3, r2
 801130e:	009b      	lsls	r3, r3, #2
 8011310:	4413      	add	r3, r2
 8011312:	00db      	lsls	r3, r3, #3
 8011314:	440b      	add	r3, r1
 8011316:	335c      	adds	r3, #92	; 0x5c
 8011318:	781b      	ldrb	r3, [r3, #0]
 801131a:	461a      	mov	r2, r3
 801131c:	4601      	mov	r1, r0
 801131e:	6878      	ldr	r0, [r7, #4]
 8011320:	f004 fc74 	bl	8015c0c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8011324:	bf00      	nop
 8011326:	3718      	adds	r7, #24
 8011328:	46bd      	mov	sp, r7
 801132a:	bd80      	pop	{r7, pc}

0801132c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 801132c:	b580      	push	{r7, lr}
 801132e:	b08a      	sub	sp, #40	; 0x28
 8011330:	af00      	add	r7, sp, #0
 8011332:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	681b      	ldr	r3, [r3, #0]
 8011338:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 801133a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801133c:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	681b      	ldr	r3, [r3, #0]
 8011342:	6a1b      	ldr	r3, [r3, #32]
 8011344:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8011346:	69fb      	ldr	r3, [r7, #28]
 8011348:	f003 030f 	and.w	r3, r3, #15
 801134c:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 801134e:	69fb      	ldr	r3, [r7, #28]
 8011350:	0c5b      	lsrs	r3, r3, #17
 8011352:	f003 030f 	and.w	r3, r3, #15
 8011356:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8011358:	69fb      	ldr	r3, [r7, #28]
 801135a:	091b      	lsrs	r3, r3, #4
 801135c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011360:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8011362:	697b      	ldr	r3, [r7, #20]
 8011364:	2b02      	cmp	r3, #2
 8011366:	d003      	beq.n	8011370 <HCD_RXQLVL_IRQHandler+0x44>
 8011368:	2b05      	cmp	r3, #5
 801136a:	f000 8082 	beq.w	8011472 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 801136e:	e083      	b.n	8011478 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8011370:	693b      	ldr	r3, [r7, #16]
 8011372:	2b00      	cmp	r3, #0
 8011374:	d07f      	beq.n	8011476 <HCD_RXQLVL_IRQHandler+0x14a>
 8011376:	6879      	ldr	r1, [r7, #4]
 8011378:	69ba      	ldr	r2, [r7, #24]
 801137a:	4613      	mov	r3, r2
 801137c:	009b      	lsls	r3, r3, #2
 801137e:	4413      	add	r3, r2
 8011380:	00db      	lsls	r3, r3, #3
 8011382:	440b      	add	r3, r1
 8011384:	3344      	adds	r3, #68	; 0x44
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	2b00      	cmp	r3, #0
 801138a:	d074      	beq.n	8011476 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	6818      	ldr	r0, [r3, #0]
 8011390:	6879      	ldr	r1, [r7, #4]
 8011392:	69ba      	ldr	r2, [r7, #24]
 8011394:	4613      	mov	r3, r2
 8011396:	009b      	lsls	r3, r3, #2
 8011398:	4413      	add	r3, r2
 801139a:	00db      	lsls	r3, r3, #3
 801139c:	440b      	add	r3, r1
 801139e:	3344      	adds	r3, #68	; 0x44
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	693a      	ldr	r2, [r7, #16]
 80113a4:	b292      	uxth	r2, r2
 80113a6:	4619      	mov	r1, r3
 80113a8:	f002 fd0d 	bl	8013dc6 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80113ac:	6879      	ldr	r1, [r7, #4]
 80113ae:	69ba      	ldr	r2, [r7, #24]
 80113b0:	4613      	mov	r3, r2
 80113b2:	009b      	lsls	r3, r3, #2
 80113b4:	4413      	add	r3, r2
 80113b6:	00db      	lsls	r3, r3, #3
 80113b8:	440b      	add	r3, r1
 80113ba:	3344      	adds	r3, #68	; 0x44
 80113bc:	681a      	ldr	r2, [r3, #0]
 80113be:	693b      	ldr	r3, [r7, #16]
 80113c0:	18d1      	adds	r1, r2, r3
 80113c2:	6878      	ldr	r0, [r7, #4]
 80113c4:	69ba      	ldr	r2, [r7, #24]
 80113c6:	4613      	mov	r3, r2
 80113c8:	009b      	lsls	r3, r3, #2
 80113ca:	4413      	add	r3, r2
 80113cc:	00db      	lsls	r3, r3, #3
 80113ce:	4403      	add	r3, r0
 80113d0:	3344      	adds	r3, #68	; 0x44
 80113d2:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80113d4:	6879      	ldr	r1, [r7, #4]
 80113d6:	69ba      	ldr	r2, [r7, #24]
 80113d8:	4613      	mov	r3, r2
 80113da:	009b      	lsls	r3, r3, #2
 80113dc:	4413      	add	r3, r2
 80113de:	00db      	lsls	r3, r3, #3
 80113e0:	440b      	add	r3, r1
 80113e2:	334c      	adds	r3, #76	; 0x4c
 80113e4:	681a      	ldr	r2, [r3, #0]
 80113e6:	693b      	ldr	r3, [r7, #16]
 80113e8:	18d1      	adds	r1, r2, r3
 80113ea:	6878      	ldr	r0, [r7, #4]
 80113ec:	69ba      	ldr	r2, [r7, #24]
 80113ee:	4613      	mov	r3, r2
 80113f0:	009b      	lsls	r3, r3, #2
 80113f2:	4413      	add	r3, r2
 80113f4:	00db      	lsls	r3, r3, #3
 80113f6:	4403      	add	r3, r0
 80113f8:	334c      	adds	r3, #76	; 0x4c
 80113fa:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80113fc:	69bb      	ldr	r3, [r7, #24]
 80113fe:	015a      	lsls	r2, r3, #5
 8011400:	6a3b      	ldr	r3, [r7, #32]
 8011402:	4413      	add	r3, r2
 8011404:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011408:	691a      	ldr	r2, [r3, #16]
 801140a:	4b1d      	ldr	r3, [pc, #116]	; (8011480 <HCD_RXQLVL_IRQHandler+0x154>)
 801140c:	4013      	ands	r3, r2
 801140e:	2b00      	cmp	r3, #0
 8011410:	d031      	beq.n	8011476 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8011412:	69bb      	ldr	r3, [r7, #24]
 8011414:	015a      	lsls	r2, r3, #5
 8011416:	6a3b      	ldr	r3, [r7, #32]
 8011418:	4413      	add	r3, r2
 801141a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8011422:	68fb      	ldr	r3, [r7, #12]
 8011424:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8011428:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 801142a:	68fb      	ldr	r3, [r7, #12]
 801142c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8011430:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8011432:	69bb      	ldr	r3, [r7, #24]
 8011434:	015a      	lsls	r2, r3, #5
 8011436:	6a3b      	ldr	r3, [r7, #32]
 8011438:	4413      	add	r3, r2
 801143a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801143e:	461a      	mov	r2, r3
 8011440:	68fb      	ldr	r3, [r7, #12]
 8011442:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8011444:	6879      	ldr	r1, [r7, #4]
 8011446:	69ba      	ldr	r2, [r7, #24]
 8011448:	4613      	mov	r3, r2
 801144a:	009b      	lsls	r3, r3, #2
 801144c:	4413      	add	r3, r2
 801144e:	00db      	lsls	r3, r3, #3
 8011450:	440b      	add	r3, r1
 8011452:	3350      	adds	r3, #80	; 0x50
 8011454:	781b      	ldrb	r3, [r3, #0]
 8011456:	f083 0301 	eor.w	r3, r3, #1
 801145a:	b2d8      	uxtb	r0, r3
 801145c:	6879      	ldr	r1, [r7, #4]
 801145e:	69ba      	ldr	r2, [r7, #24]
 8011460:	4613      	mov	r3, r2
 8011462:	009b      	lsls	r3, r3, #2
 8011464:	4413      	add	r3, r2
 8011466:	00db      	lsls	r3, r3, #3
 8011468:	440b      	add	r3, r1
 801146a:	3350      	adds	r3, #80	; 0x50
 801146c:	4602      	mov	r2, r0
 801146e:	701a      	strb	r2, [r3, #0]
      break;
 8011470:	e001      	b.n	8011476 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8011472:	bf00      	nop
 8011474:	e000      	b.n	8011478 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8011476:	bf00      	nop
  }
}
 8011478:	bf00      	nop
 801147a:	3728      	adds	r7, #40	; 0x28
 801147c:	46bd      	mov	sp, r7
 801147e:	bd80      	pop	{r7, pc}
 8011480:	1ff80000 	.word	0x1ff80000

08011484 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8011484:	b580      	push	{r7, lr}
 8011486:	b086      	sub	sp, #24
 8011488:	af00      	add	r7, sp, #0
 801148a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011492:	697b      	ldr	r3, [r7, #20]
 8011494:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8011496:	693b      	ldr	r3, [r7, #16]
 8011498:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80114a0:	693b      	ldr	r3, [r7, #16]
 80114a2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80114a6:	681b      	ldr	r3, [r3, #0]
 80114a8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80114aa:	68bb      	ldr	r3, [r7, #8]
 80114ac:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80114b0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	f003 0302 	and.w	r3, r3, #2
 80114b8:	2b02      	cmp	r3, #2
 80114ba:	d10b      	bne.n	80114d4 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	f003 0301 	and.w	r3, r3, #1
 80114c2:	2b01      	cmp	r3, #1
 80114c4:	d102      	bne.n	80114cc <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80114c6:	6878      	ldr	r0, [r7, #4]
 80114c8:	f004 fb84 	bl	8015bd4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80114cc:	68bb      	ldr	r3, [r7, #8]
 80114ce:	f043 0302 	orr.w	r3, r3, #2
 80114d2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80114d4:	68fb      	ldr	r3, [r7, #12]
 80114d6:	f003 0308 	and.w	r3, r3, #8
 80114da:	2b08      	cmp	r3, #8
 80114dc:	d132      	bne.n	8011544 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80114de:	68bb      	ldr	r3, [r7, #8]
 80114e0:	f043 0308 	orr.w	r3, r3, #8
 80114e4:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80114e6:	68fb      	ldr	r3, [r7, #12]
 80114e8:	f003 0304 	and.w	r3, r3, #4
 80114ec:	2b04      	cmp	r3, #4
 80114ee:	d126      	bne.n	801153e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	699b      	ldr	r3, [r3, #24]
 80114f4:	2b02      	cmp	r3, #2
 80114f6:	d113      	bne.n	8011520 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80114fe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8011502:	d106      	bne.n	8011512 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	681b      	ldr	r3, [r3, #0]
 8011508:	2102      	movs	r1, #2
 801150a:	4618      	mov	r0, r3
 801150c:	f002 fd96 	bl	801403c <USB_InitFSLSPClkSel>
 8011510:	e011      	b.n	8011536 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	681b      	ldr	r3, [r3, #0]
 8011516:	2101      	movs	r1, #1
 8011518:	4618      	mov	r0, r3
 801151a:	f002 fd8f 	bl	801403c <USB_InitFSLSPClkSel>
 801151e:	e00a      	b.n	8011536 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	68db      	ldr	r3, [r3, #12]
 8011524:	2b01      	cmp	r3, #1
 8011526:	d106      	bne.n	8011536 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8011528:	693b      	ldr	r3, [r7, #16]
 801152a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801152e:	461a      	mov	r2, r3
 8011530:	f64e 2360 	movw	r3, #60000	; 0xea60
 8011534:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8011536:	6878      	ldr	r0, [r7, #4]
 8011538:	f004 fb76 	bl	8015c28 <HAL_HCD_PortEnabled_Callback>
 801153c:	e002      	b.n	8011544 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 801153e:	6878      	ldr	r0, [r7, #4]
 8011540:	f004 fb80 	bl	8015c44 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8011544:	68fb      	ldr	r3, [r7, #12]
 8011546:	f003 0320 	and.w	r3, r3, #32
 801154a:	2b20      	cmp	r3, #32
 801154c:	d103      	bne.n	8011556 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 801154e:	68bb      	ldr	r3, [r7, #8]
 8011550:	f043 0320 	orr.w	r3, r3, #32
 8011554:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8011556:	693b      	ldr	r3, [r7, #16]
 8011558:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 801155c:	461a      	mov	r2, r3
 801155e:	68bb      	ldr	r3, [r7, #8]
 8011560:	6013      	str	r3, [r2, #0]
}
 8011562:	bf00      	nop
 8011564:	3718      	adds	r7, #24
 8011566:	46bd      	mov	sp, r7
 8011568:	bd80      	pop	{r7, pc}
	...

0801156c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 801156c:	b580      	push	{r7, lr}
 801156e:	b084      	sub	sp, #16
 8011570:	af00      	add	r7, sp, #0
 8011572:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	2b00      	cmp	r3, #0
 8011578:	d101      	bne.n	801157e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 801157a:	2301      	movs	r3, #1
 801157c:	e11f      	b.n	80117be <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011584:	b2db      	uxtb	r3, r3
 8011586:	2b00      	cmp	r3, #0
 8011588:	d106      	bne.n	8011598 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	2200      	movs	r2, #0
 801158e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8011592:	6878      	ldr	r0, [r7, #4]
 8011594:	f7fd fb12 	bl	800ebbc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	2224      	movs	r2, #36	; 0x24
 801159c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	681b      	ldr	r3, [r3, #0]
 80115a4:	681a      	ldr	r2, [r3, #0]
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	681b      	ldr	r3, [r3, #0]
 80115aa:	f022 0201 	bic.w	r2, r2, #1
 80115ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	681a      	ldr	r2, [r3, #0]
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80115be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	681b      	ldr	r3, [r3, #0]
 80115c4:	681a      	ldr	r2, [r3, #0]
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	681b      	ldr	r3, [r3, #0]
 80115ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80115ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80115d0:	f001 f9de 	bl	8012990 <HAL_RCC_GetPCLK1Freq>
 80115d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	685b      	ldr	r3, [r3, #4]
 80115da:	4a7b      	ldr	r2, [pc, #492]	; (80117c8 <HAL_I2C_Init+0x25c>)
 80115dc:	4293      	cmp	r3, r2
 80115de:	d807      	bhi.n	80115f0 <HAL_I2C_Init+0x84>
 80115e0:	68fb      	ldr	r3, [r7, #12]
 80115e2:	4a7a      	ldr	r2, [pc, #488]	; (80117cc <HAL_I2C_Init+0x260>)
 80115e4:	4293      	cmp	r3, r2
 80115e6:	bf94      	ite	ls
 80115e8:	2301      	movls	r3, #1
 80115ea:	2300      	movhi	r3, #0
 80115ec:	b2db      	uxtb	r3, r3
 80115ee:	e006      	b.n	80115fe <HAL_I2C_Init+0x92>
 80115f0:	68fb      	ldr	r3, [r7, #12]
 80115f2:	4a77      	ldr	r2, [pc, #476]	; (80117d0 <HAL_I2C_Init+0x264>)
 80115f4:	4293      	cmp	r3, r2
 80115f6:	bf94      	ite	ls
 80115f8:	2301      	movls	r3, #1
 80115fa:	2300      	movhi	r3, #0
 80115fc:	b2db      	uxtb	r3, r3
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d001      	beq.n	8011606 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8011602:	2301      	movs	r3, #1
 8011604:	e0db      	b.n	80117be <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8011606:	68fb      	ldr	r3, [r7, #12]
 8011608:	4a72      	ldr	r2, [pc, #456]	; (80117d4 <HAL_I2C_Init+0x268>)
 801160a:	fba2 2303 	umull	r2, r3, r2, r3
 801160e:	0c9b      	lsrs	r3, r3, #18
 8011610:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	681b      	ldr	r3, [r3, #0]
 8011616:	685b      	ldr	r3, [r3, #4]
 8011618:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	681b      	ldr	r3, [r3, #0]
 8011620:	68ba      	ldr	r2, [r7, #8]
 8011622:	430a      	orrs	r2, r1
 8011624:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	681b      	ldr	r3, [r3, #0]
 801162a:	6a1b      	ldr	r3, [r3, #32]
 801162c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	685b      	ldr	r3, [r3, #4]
 8011634:	4a64      	ldr	r2, [pc, #400]	; (80117c8 <HAL_I2C_Init+0x25c>)
 8011636:	4293      	cmp	r3, r2
 8011638:	d802      	bhi.n	8011640 <HAL_I2C_Init+0xd4>
 801163a:	68bb      	ldr	r3, [r7, #8]
 801163c:	3301      	adds	r3, #1
 801163e:	e009      	b.n	8011654 <HAL_I2C_Init+0xe8>
 8011640:	68bb      	ldr	r3, [r7, #8]
 8011642:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8011646:	fb02 f303 	mul.w	r3, r2, r3
 801164a:	4a63      	ldr	r2, [pc, #396]	; (80117d8 <HAL_I2C_Init+0x26c>)
 801164c:	fba2 2303 	umull	r2, r3, r2, r3
 8011650:	099b      	lsrs	r3, r3, #6
 8011652:	3301      	adds	r3, #1
 8011654:	687a      	ldr	r2, [r7, #4]
 8011656:	6812      	ldr	r2, [r2, #0]
 8011658:	430b      	orrs	r3, r1
 801165a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	681b      	ldr	r3, [r3, #0]
 8011660:	69db      	ldr	r3, [r3, #28]
 8011662:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8011666:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	685b      	ldr	r3, [r3, #4]
 801166e:	4956      	ldr	r1, [pc, #344]	; (80117c8 <HAL_I2C_Init+0x25c>)
 8011670:	428b      	cmp	r3, r1
 8011672:	d80d      	bhi.n	8011690 <HAL_I2C_Init+0x124>
 8011674:	68fb      	ldr	r3, [r7, #12]
 8011676:	1e59      	subs	r1, r3, #1
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	685b      	ldr	r3, [r3, #4]
 801167c:	005b      	lsls	r3, r3, #1
 801167e:	fbb1 f3f3 	udiv	r3, r1, r3
 8011682:	3301      	adds	r3, #1
 8011684:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011688:	2b04      	cmp	r3, #4
 801168a:	bf38      	it	cc
 801168c:	2304      	movcc	r3, #4
 801168e:	e04f      	b.n	8011730 <HAL_I2C_Init+0x1c4>
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	689b      	ldr	r3, [r3, #8]
 8011694:	2b00      	cmp	r3, #0
 8011696:	d111      	bne.n	80116bc <HAL_I2C_Init+0x150>
 8011698:	68fb      	ldr	r3, [r7, #12]
 801169a:	1e58      	subs	r0, r3, #1
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	6859      	ldr	r1, [r3, #4]
 80116a0:	460b      	mov	r3, r1
 80116a2:	005b      	lsls	r3, r3, #1
 80116a4:	440b      	add	r3, r1
 80116a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80116aa:	3301      	adds	r3, #1
 80116ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	bf0c      	ite	eq
 80116b4:	2301      	moveq	r3, #1
 80116b6:	2300      	movne	r3, #0
 80116b8:	b2db      	uxtb	r3, r3
 80116ba:	e012      	b.n	80116e2 <HAL_I2C_Init+0x176>
 80116bc:	68fb      	ldr	r3, [r7, #12]
 80116be:	1e58      	subs	r0, r3, #1
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	6859      	ldr	r1, [r3, #4]
 80116c4:	460b      	mov	r3, r1
 80116c6:	009b      	lsls	r3, r3, #2
 80116c8:	440b      	add	r3, r1
 80116ca:	0099      	lsls	r1, r3, #2
 80116cc:	440b      	add	r3, r1
 80116ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80116d2:	3301      	adds	r3, #1
 80116d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80116d8:	2b00      	cmp	r3, #0
 80116da:	bf0c      	ite	eq
 80116dc:	2301      	moveq	r3, #1
 80116de:	2300      	movne	r3, #0
 80116e0:	b2db      	uxtb	r3, r3
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d001      	beq.n	80116ea <HAL_I2C_Init+0x17e>
 80116e6:	2301      	movs	r3, #1
 80116e8:	e022      	b.n	8011730 <HAL_I2C_Init+0x1c4>
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	689b      	ldr	r3, [r3, #8]
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d10e      	bne.n	8011710 <HAL_I2C_Init+0x1a4>
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	1e58      	subs	r0, r3, #1
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	6859      	ldr	r1, [r3, #4]
 80116fa:	460b      	mov	r3, r1
 80116fc:	005b      	lsls	r3, r3, #1
 80116fe:	440b      	add	r3, r1
 8011700:	fbb0 f3f3 	udiv	r3, r0, r3
 8011704:	3301      	adds	r3, #1
 8011706:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801170a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801170e:	e00f      	b.n	8011730 <HAL_I2C_Init+0x1c4>
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	1e58      	subs	r0, r3, #1
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	6859      	ldr	r1, [r3, #4]
 8011718:	460b      	mov	r3, r1
 801171a:	009b      	lsls	r3, r3, #2
 801171c:	440b      	add	r3, r1
 801171e:	0099      	lsls	r1, r3, #2
 8011720:	440b      	add	r3, r1
 8011722:	fbb0 f3f3 	udiv	r3, r0, r3
 8011726:	3301      	adds	r3, #1
 8011728:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801172c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8011730:	6879      	ldr	r1, [r7, #4]
 8011732:	6809      	ldr	r1, [r1, #0]
 8011734:	4313      	orrs	r3, r2
 8011736:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	681b      	ldr	r3, [r3, #0]
 801173e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	69da      	ldr	r2, [r3, #28]
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	6a1b      	ldr	r3, [r3, #32]
 801174a:	431a      	orrs	r2, r3
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	681b      	ldr	r3, [r3, #0]
 8011750:	430a      	orrs	r2, r1
 8011752:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	681b      	ldr	r3, [r3, #0]
 8011758:	689b      	ldr	r3, [r3, #8]
 801175a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 801175e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8011762:	687a      	ldr	r2, [r7, #4]
 8011764:	6911      	ldr	r1, [r2, #16]
 8011766:	687a      	ldr	r2, [r7, #4]
 8011768:	68d2      	ldr	r2, [r2, #12]
 801176a:	4311      	orrs	r1, r2
 801176c:	687a      	ldr	r2, [r7, #4]
 801176e:	6812      	ldr	r2, [r2, #0]
 8011770:	430b      	orrs	r3, r1
 8011772:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	68db      	ldr	r3, [r3, #12]
 801177a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	695a      	ldr	r2, [r3, #20]
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	699b      	ldr	r3, [r3, #24]
 8011786:	431a      	orrs	r2, r3
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	681b      	ldr	r3, [r3, #0]
 801178c:	430a      	orrs	r2, r1
 801178e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	681b      	ldr	r3, [r3, #0]
 8011794:	681a      	ldr	r2, [r3, #0]
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	681b      	ldr	r3, [r3, #0]
 801179a:	f042 0201 	orr.w	r2, r2, #1
 801179e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	2200      	movs	r2, #0
 80117a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	2220      	movs	r2, #32
 80117aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	2200      	movs	r2, #0
 80117b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	2200      	movs	r2, #0
 80117b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80117bc:	2300      	movs	r3, #0
}
 80117be:	4618      	mov	r0, r3
 80117c0:	3710      	adds	r7, #16
 80117c2:	46bd      	mov	sp, r7
 80117c4:	bd80      	pop	{r7, pc}
 80117c6:	bf00      	nop
 80117c8:	000186a0 	.word	0x000186a0
 80117cc:	001e847f 	.word	0x001e847f
 80117d0:	003d08ff 	.word	0x003d08ff
 80117d4:	431bde83 	.word	0x431bde83
 80117d8:	10624dd3 	.word	0x10624dd3

080117dc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80117dc:	b580      	push	{r7, lr}
 80117de:	b088      	sub	sp, #32
 80117e0:	af00      	add	r7, sp, #0
 80117e2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d101      	bne.n	80117ee <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80117ea:	2301      	movs	r3, #1
 80117ec:	e128      	b.n	8011a40 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80117f4:	b2db      	uxtb	r3, r3
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d109      	bne.n	801180e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	2200      	movs	r2, #0
 80117fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	4a90      	ldr	r2, [pc, #576]	; (8011a48 <HAL_I2S_Init+0x26c>)
 8011806:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8011808:	6878      	ldr	r0, [r7, #4]
 801180a:	f7fd fa7d 	bl	800ed08 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	2202      	movs	r2, #2
 8011812:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	681b      	ldr	r3, [r3, #0]
 801181a:	69db      	ldr	r3, [r3, #28]
 801181c:	687a      	ldr	r2, [r7, #4]
 801181e:	6812      	ldr	r2, [r2, #0]
 8011820:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8011824:	f023 030f 	bic.w	r3, r3, #15
 8011828:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	681b      	ldr	r3, [r3, #0]
 801182e:	2202      	movs	r2, #2
 8011830:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	695b      	ldr	r3, [r3, #20]
 8011836:	2b02      	cmp	r3, #2
 8011838:	d060      	beq.n	80118fc <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	68db      	ldr	r3, [r3, #12]
 801183e:	2b00      	cmp	r3, #0
 8011840:	d102      	bne.n	8011848 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8011842:	2310      	movs	r3, #16
 8011844:	617b      	str	r3, [r7, #20]
 8011846:	e001      	b.n	801184c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8011848:	2320      	movs	r3, #32
 801184a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	689b      	ldr	r3, [r3, #8]
 8011850:	2b20      	cmp	r3, #32
 8011852:	d802      	bhi.n	801185a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8011854:	697b      	ldr	r3, [r7, #20]
 8011856:	005b      	lsls	r3, r3, #1
 8011858:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 801185a:	2001      	movs	r0, #1
 801185c:	f001 f99c 	bl	8012b98 <HAL_RCCEx_GetPeriphCLKFreq>
 8011860:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	691b      	ldr	r3, [r3, #16]
 8011866:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801186a:	d125      	bne.n	80118b8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	68db      	ldr	r3, [r3, #12]
 8011870:	2b00      	cmp	r3, #0
 8011872:	d010      	beq.n	8011896 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8011874:	697b      	ldr	r3, [r7, #20]
 8011876:	009b      	lsls	r3, r3, #2
 8011878:	68fa      	ldr	r2, [r7, #12]
 801187a:	fbb2 f2f3 	udiv	r2, r2, r3
 801187e:	4613      	mov	r3, r2
 8011880:	009b      	lsls	r3, r3, #2
 8011882:	4413      	add	r3, r2
 8011884:	005b      	lsls	r3, r3, #1
 8011886:	461a      	mov	r2, r3
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	695b      	ldr	r3, [r3, #20]
 801188c:	fbb2 f3f3 	udiv	r3, r2, r3
 8011890:	3305      	adds	r3, #5
 8011892:	613b      	str	r3, [r7, #16]
 8011894:	e01f      	b.n	80118d6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8011896:	697b      	ldr	r3, [r7, #20]
 8011898:	00db      	lsls	r3, r3, #3
 801189a:	68fa      	ldr	r2, [r7, #12]
 801189c:	fbb2 f2f3 	udiv	r2, r2, r3
 80118a0:	4613      	mov	r3, r2
 80118a2:	009b      	lsls	r3, r3, #2
 80118a4:	4413      	add	r3, r2
 80118a6:	005b      	lsls	r3, r3, #1
 80118a8:	461a      	mov	r2, r3
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	695b      	ldr	r3, [r3, #20]
 80118ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80118b2:	3305      	adds	r3, #5
 80118b4:	613b      	str	r3, [r7, #16]
 80118b6:	e00e      	b.n	80118d6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80118b8:	68fa      	ldr	r2, [r7, #12]
 80118ba:	697b      	ldr	r3, [r7, #20]
 80118bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80118c0:	4613      	mov	r3, r2
 80118c2:	009b      	lsls	r3, r3, #2
 80118c4:	4413      	add	r3, r2
 80118c6:	005b      	lsls	r3, r3, #1
 80118c8:	461a      	mov	r2, r3
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	695b      	ldr	r3, [r3, #20]
 80118ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80118d2:	3305      	adds	r3, #5
 80118d4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80118d6:	693b      	ldr	r3, [r7, #16]
 80118d8:	4a5c      	ldr	r2, [pc, #368]	; (8011a4c <HAL_I2S_Init+0x270>)
 80118da:	fba2 2303 	umull	r2, r3, r2, r3
 80118de:	08db      	lsrs	r3, r3, #3
 80118e0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80118e2:	693b      	ldr	r3, [r7, #16]
 80118e4:	f003 0301 	and.w	r3, r3, #1
 80118e8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80118ea:	693a      	ldr	r2, [r7, #16]
 80118ec:	69bb      	ldr	r3, [r7, #24]
 80118ee:	1ad3      	subs	r3, r2, r3
 80118f0:	085b      	lsrs	r3, r3, #1
 80118f2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80118f4:	69bb      	ldr	r3, [r7, #24]
 80118f6:	021b      	lsls	r3, r3, #8
 80118f8:	61bb      	str	r3, [r7, #24]
 80118fa:	e003      	b.n	8011904 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80118fc:	2302      	movs	r3, #2
 80118fe:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8011900:	2300      	movs	r3, #0
 8011902:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8011904:	69fb      	ldr	r3, [r7, #28]
 8011906:	2b01      	cmp	r3, #1
 8011908:	d902      	bls.n	8011910 <HAL_I2S_Init+0x134>
 801190a:	69fb      	ldr	r3, [r7, #28]
 801190c:	2bff      	cmp	r3, #255	; 0xff
 801190e:	d907      	bls.n	8011920 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011914:	f043 0210 	orr.w	r2, r3, #16
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 801191c:	2301      	movs	r3, #1
 801191e:	e08f      	b.n	8011a40 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	691a      	ldr	r2, [r3, #16]
 8011924:	69bb      	ldr	r3, [r7, #24]
 8011926:	ea42 0103 	orr.w	r1, r2, r3
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	681b      	ldr	r3, [r3, #0]
 801192e:	69fa      	ldr	r2, [r7, #28]
 8011930:	430a      	orrs	r2, r1
 8011932:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	681b      	ldr	r3, [r3, #0]
 8011938:	69db      	ldr	r3, [r3, #28]
 801193a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 801193e:	f023 030f 	bic.w	r3, r3, #15
 8011942:	687a      	ldr	r2, [r7, #4]
 8011944:	6851      	ldr	r1, [r2, #4]
 8011946:	687a      	ldr	r2, [r7, #4]
 8011948:	6892      	ldr	r2, [r2, #8]
 801194a:	4311      	orrs	r1, r2
 801194c:	687a      	ldr	r2, [r7, #4]
 801194e:	68d2      	ldr	r2, [r2, #12]
 8011950:	4311      	orrs	r1, r2
 8011952:	687a      	ldr	r2, [r7, #4]
 8011954:	6992      	ldr	r2, [r2, #24]
 8011956:	430a      	orrs	r2, r1
 8011958:	431a      	orrs	r2, r3
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011962:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	6a1b      	ldr	r3, [r3, #32]
 8011968:	2b01      	cmp	r3, #1
 801196a:	d161      	bne.n	8011a30 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	4a38      	ldr	r2, [pc, #224]	; (8011a50 <HAL_I2S_Init+0x274>)
 8011970:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	4a37      	ldr	r2, [pc, #220]	; (8011a54 <HAL_I2S_Init+0x278>)
 8011978:	4293      	cmp	r3, r2
 801197a:	d101      	bne.n	8011980 <HAL_I2S_Init+0x1a4>
 801197c:	4b36      	ldr	r3, [pc, #216]	; (8011a58 <HAL_I2S_Init+0x27c>)
 801197e:	e001      	b.n	8011984 <HAL_I2S_Init+0x1a8>
 8011980:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8011984:	69db      	ldr	r3, [r3, #28]
 8011986:	687a      	ldr	r2, [r7, #4]
 8011988:	6812      	ldr	r2, [r2, #0]
 801198a:	4932      	ldr	r1, [pc, #200]	; (8011a54 <HAL_I2S_Init+0x278>)
 801198c:	428a      	cmp	r2, r1
 801198e:	d101      	bne.n	8011994 <HAL_I2S_Init+0x1b8>
 8011990:	4a31      	ldr	r2, [pc, #196]	; (8011a58 <HAL_I2S_Init+0x27c>)
 8011992:	e001      	b.n	8011998 <HAL_I2S_Init+0x1bc>
 8011994:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8011998:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 801199c:	f023 030f 	bic.w	r3, r3, #15
 80119a0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	681b      	ldr	r3, [r3, #0]
 80119a6:	4a2b      	ldr	r2, [pc, #172]	; (8011a54 <HAL_I2S_Init+0x278>)
 80119a8:	4293      	cmp	r3, r2
 80119aa:	d101      	bne.n	80119b0 <HAL_I2S_Init+0x1d4>
 80119ac:	4b2a      	ldr	r3, [pc, #168]	; (8011a58 <HAL_I2S_Init+0x27c>)
 80119ae:	e001      	b.n	80119b4 <HAL_I2S_Init+0x1d8>
 80119b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80119b4:	2202      	movs	r2, #2
 80119b6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	681b      	ldr	r3, [r3, #0]
 80119bc:	4a25      	ldr	r2, [pc, #148]	; (8011a54 <HAL_I2S_Init+0x278>)
 80119be:	4293      	cmp	r3, r2
 80119c0:	d101      	bne.n	80119c6 <HAL_I2S_Init+0x1ea>
 80119c2:	4b25      	ldr	r3, [pc, #148]	; (8011a58 <HAL_I2S_Init+0x27c>)
 80119c4:	e001      	b.n	80119ca <HAL_I2S_Init+0x1ee>
 80119c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80119ca:	69db      	ldr	r3, [r3, #28]
 80119cc:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	685b      	ldr	r3, [r3, #4]
 80119d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80119d6:	d003      	beq.n	80119e0 <HAL_I2S_Init+0x204>
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	685b      	ldr	r3, [r3, #4]
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d103      	bne.n	80119e8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80119e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80119e4:	613b      	str	r3, [r7, #16]
 80119e6:	e001      	b.n	80119ec <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80119e8:	2300      	movs	r3, #0
 80119ea:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80119ec:	693b      	ldr	r3, [r7, #16]
 80119ee:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	689b      	ldr	r3, [r3, #8]
 80119f4:	b299      	uxth	r1, r3
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	68db      	ldr	r3, [r3, #12]
 80119fa:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	699b      	ldr	r3, [r3, #24]
 8011a00:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8011a02:	4303      	orrs	r3, r0
 8011a04:	b29b      	uxth	r3, r3
 8011a06:	430b      	orrs	r3, r1
 8011a08:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8011a0a:	4313      	orrs	r3, r2
 8011a0c:	b29a      	uxth	r2, r3
 8011a0e:	897b      	ldrh	r3, [r7, #10]
 8011a10:	4313      	orrs	r3, r2
 8011a12:	b29b      	uxth	r3, r3
 8011a14:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8011a18:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	4a0d      	ldr	r2, [pc, #52]	; (8011a54 <HAL_I2S_Init+0x278>)
 8011a20:	4293      	cmp	r3, r2
 8011a22:	d101      	bne.n	8011a28 <HAL_I2S_Init+0x24c>
 8011a24:	4b0c      	ldr	r3, [pc, #48]	; (8011a58 <HAL_I2S_Init+0x27c>)
 8011a26:	e001      	b.n	8011a2c <HAL_I2S_Init+0x250>
 8011a28:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8011a2c:	897a      	ldrh	r2, [r7, #10]
 8011a2e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	2200      	movs	r2, #0
 8011a34:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	2201      	movs	r2, #1
 8011a3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8011a3e:	2300      	movs	r3, #0
}
 8011a40:	4618      	mov	r0, r3
 8011a42:	3720      	adds	r7, #32
 8011a44:	46bd      	mov	sp, r7
 8011a46:	bd80      	pop	{r7, pc}
 8011a48:	08011b53 	.word	0x08011b53
 8011a4c:	cccccccd 	.word	0xcccccccd
 8011a50:	08011c69 	.word	0x08011c69
 8011a54:	40003800 	.word	0x40003800
 8011a58:	40003400 	.word	0x40003400

08011a5c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8011a5c:	b480      	push	{r7}
 8011a5e:	b083      	sub	sp, #12
 8011a60:	af00      	add	r7, sp, #0
 8011a62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8011a64:	bf00      	nop
 8011a66:	370c      	adds	r7, #12
 8011a68:	46bd      	mov	sp, r7
 8011a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a6e:	4770      	bx	lr

08011a70 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8011a70:	b480      	push	{r7}
 8011a72:	b083      	sub	sp, #12
 8011a74:	af00      	add	r7, sp, #0
 8011a76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8011a78:	bf00      	nop
 8011a7a:	370c      	adds	r7, #12
 8011a7c:	46bd      	mov	sp, r7
 8011a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a82:	4770      	bx	lr

08011a84 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8011a84:	b480      	push	{r7}
 8011a86:	b083      	sub	sp, #12
 8011a88:	af00      	add	r7, sp, #0
 8011a8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8011a8c:	bf00      	nop
 8011a8e:	370c      	adds	r7, #12
 8011a90:	46bd      	mov	sp, r7
 8011a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a96:	4770      	bx	lr

08011a98 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8011a98:	b580      	push	{r7, lr}
 8011a9a:	b082      	sub	sp, #8
 8011a9c:	af00      	add	r7, sp, #0
 8011a9e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011aa4:	881a      	ldrh	r2, [r3, #0]
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	681b      	ldr	r3, [r3, #0]
 8011aaa:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ab0:	1c9a      	adds	r2, r3, #2
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011aba:	b29b      	uxth	r3, r3
 8011abc:	3b01      	subs	r3, #1
 8011abe:	b29a      	uxth	r2, r3
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011ac8:	b29b      	uxth	r3, r3
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d10e      	bne.n	8011aec <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	685a      	ldr	r2, [r3, #4]
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8011adc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	2201      	movs	r2, #1
 8011ae2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8011ae6:	6878      	ldr	r0, [r7, #4]
 8011ae8:	f7ff ffb8 	bl	8011a5c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8011aec:	bf00      	nop
 8011aee:	3708      	adds	r7, #8
 8011af0:	46bd      	mov	sp, r7
 8011af2:	bd80      	pop	{r7, pc}

08011af4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8011af4:	b580      	push	{r7, lr}
 8011af6:	b082      	sub	sp, #8
 8011af8:	af00      	add	r7, sp, #0
 8011afa:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	681b      	ldr	r3, [r3, #0]
 8011b00:	68da      	ldr	r2, [r3, #12]
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b06:	b292      	uxth	r2, r2
 8011b08:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b0e:	1c9a      	adds	r2, r3, #2
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011b18:	b29b      	uxth	r3, r3
 8011b1a:	3b01      	subs	r3, #1
 8011b1c:	b29a      	uxth	r2, r3
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011b26:	b29b      	uxth	r3, r3
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	d10e      	bne.n	8011b4a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	681b      	ldr	r3, [r3, #0]
 8011b30:	685a      	ldr	r2, [r3, #4]
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	681b      	ldr	r3, [r3, #0]
 8011b36:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8011b3a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	2201      	movs	r2, #1
 8011b40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8011b44:	6878      	ldr	r0, [r7, #4]
 8011b46:	f7ff ff93 	bl	8011a70 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8011b4a:	bf00      	nop
 8011b4c:	3708      	adds	r7, #8
 8011b4e:	46bd      	mov	sp, r7
 8011b50:	bd80      	pop	{r7, pc}

08011b52 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8011b52:	b580      	push	{r7, lr}
 8011b54:	b086      	sub	sp, #24
 8011b56:	af00      	add	r7, sp, #0
 8011b58:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	681b      	ldr	r3, [r3, #0]
 8011b5e:	689b      	ldr	r3, [r3, #8]
 8011b60:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8011b68:	b2db      	uxtb	r3, r3
 8011b6a:	2b04      	cmp	r3, #4
 8011b6c:	d13a      	bne.n	8011be4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8011b6e:	697b      	ldr	r3, [r7, #20]
 8011b70:	f003 0301 	and.w	r3, r3, #1
 8011b74:	2b01      	cmp	r3, #1
 8011b76:	d109      	bne.n	8011b8c <I2S_IRQHandler+0x3a>
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	681b      	ldr	r3, [r3, #0]
 8011b7c:	685b      	ldr	r3, [r3, #4]
 8011b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011b82:	2b40      	cmp	r3, #64	; 0x40
 8011b84:	d102      	bne.n	8011b8c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8011b86:	6878      	ldr	r0, [r7, #4]
 8011b88:	f7ff ffb4 	bl	8011af4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8011b8c:	697b      	ldr	r3, [r7, #20]
 8011b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011b92:	2b40      	cmp	r3, #64	; 0x40
 8011b94:	d126      	bne.n	8011be4 <I2S_IRQHandler+0x92>
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	685b      	ldr	r3, [r3, #4]
 8011b9c:	f003 0320 	and.w	r3, r3, #32
 8011ba0:	2b20      	cmp	r3, #32
 8011ba2:	d11f      	bne.n	8011be4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	681b      	ldr	r3, [r3, #0]
 8011ba8:	685a      	ldr	r2, [r3, #4]
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	681b      	ldr	r3, [r3, #0]
 8011bae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8011bb2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8011bb4:	2300      	movs	r3, #0
 8011bb6:	613b      	str	r3, [r7, #16]
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	681b      	ldr	r3, [r3, #0]
 8011bbc:	68db      	ldr	r3, [r3, #12]
 8011bbe:	613b      	str	r3, [r7, #16]
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	681b      	ldr	r3, [r3, #0]
 8011bc4:	689b      	ldr	r3, [r3, #8]
 8011bc6:	613b      	str	r3, [r7, #16]
 8011bc8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	2201      	movs	r2, #1
 8011bce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011bd6:	f043 0202 	orr.w	r2, r3, #2
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8011bde:	6878      	ldr	r0, [r7, #4]
 8011be0:	f7ff ff50 	bl	8011a84 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8011bea:	b2db      	uxtb	r3, r3
 8011bec:	2b03      	cmp	r3, #3
 8011bee:	d136      	bne.n	8011c5e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8011bf0:	697b      	ldr	r3, [r7, #20]
 8011bf2:	f003 0302 	and.w	r3, r3, #2
 8011bf6:	2b02      	cmp	r3, #2
 8011bf8:	d109      	bne.n	8011c0e <I2S_IRQHandler+0xbc>
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	681b      	ldr	r3, [r3, #0]
 8011bfe:	685b      	ldr	r3, [r3, #4]
 8011c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011c04:	2b80      	cmp	r3, #128	; 0x80
 8011c06:	d102      	bne.n	8011c0e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8011c08:	6878      	ldr	r0, [r7, #4]
 8011c0a:	f7ff ff45 	bl	8011a98 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8011c0e:	697b      	ldr	r3, [r7, #20]
 8011c10:	f003 0308 	and.w	r3, r3, #8
 8011c14:	2b08      	cmp	r3, #8
 8011c16:	d122      	bne.n	8011c5e <I2S_IRQHandler+0x10c>
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	681b      	ldr	r3, [r3, #0]
 8011c1c:	685b      	ldr	r3, [r3, #4]
 8011c1e:	f003 0320 	and.w	r3, r3, #32
 8011c22:	2b20      	cmp	r3, #32
 8011c24:	d11b      	bne.n	8011c5e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	681b      	ldr	r3, [r3, #0]
 8011c2a:	685a      	ldr	r2, [r3, #4]
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8011c34:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8011c36:	2300      	movs	r3, #0
 8011c38:	60fb      	str	r3, [r7, #12]
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	681b      	ldr	r3, [r3, #0]
 8011c3e:	689b      	ldr	r3, [r3, #8]
 8011c40:	60fb      	str	r3, [r7, #12]
 8011c42:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	2201      	movs	r2, #1
 8011c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011c50:	f043 0204 	orr.w	r2, r3, #4
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8011c58:	6878      	ldr	r0, [r7, #4]
 8011c5a:	f7ff ff13 	bl	8011a84 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8011c5e:	bf00      	nop
 8011c60:	3718      	adds	r7, #24
 8011c62:	46bd      	mov	sp, r7
 8011c64:	bd80      	pop	{r7, pc}
	...

08011c68 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8011c68:	b580      	push	{r7, lr}
 8011c6a:	b088      	sub	sp, #32
 8011c6c:	af00      	add	r7, sp, #0
 8011c6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	689b      	ldr	r3, [r3, #8]
 8011c76:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	681b      	ldr	r3, [r3, #0]
 8011c7c:	4aa2      	ldr	r2, [pc, #648]	; (8011f08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8011c7e:	4293      	cmp	r3, r2
 8011c80:	d101      	bne.n	8011c86 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8011c82:	4ba2      	ldr	r3, [pc, #648]	; (8011f0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8011c84:	e001      	b.n	8011c8a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8011c86:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8011c8a:	689b      	ldr	r3, [r3, #8]
 8011c8c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	681b      	ldr	r3, [r3, #0]
 8011c92:	685b      	ldr	r3, [r3, #4]
 8011c94:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	681b      	ldr	r3, [r3, #0]
 8011c9a:	4a9b      	ldr	r2, [pc, #620]	; (8011f08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8011c9c:	4293      	cmp	r3, r2
 8011c9e:	d101      	bne.n	8011ca4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8011ca0:	4b9a      	ldr	r3, [pc, #616]	; (8011f0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8011ca2:	e001      	b.n	8011ca8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8011ca4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8011ca8:	685b      	ldr	r3, [r3, #4]
 8011caa:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	685b      	ldr	r3, [r3, #4]
 8011cb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011cb4:	d004      	beq.n	8011cc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	685b      	ldr	r3, [r3, #4]
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	f040 8099 	bne.w	8011df2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8011cc0:	69fb      	ldr	r3, [r7, #28]
 8011cc2:	f003 0302 	and.w	r3, r3, #2
 8011cc6:	2b02      	cmp	r3, #2
 8011cc8:	d107      	bne.n	8011cda <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8011cca:	697b      	ldr	r3, [r7, #20]
 8011ccc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d002      	beq.n	8011cda <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8011cd4:	6878      	ldr	r0, [r7, #4]
 8011cd6:	f000 f925 	bl	8011f24 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8011cda:	69bb      	ldr	r3, [r7, #24]
 8011cdc:	f003 0301 	and.w	r3, r3, #1
 8011ce0:	2b01      	cmp	r3, #1
 8011ce2:	d107      	bne.n	8011cf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8011ce4:	693b      	ldr	r3, [r7, #16]
 8011ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	d002      	beq.n	8011cf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8011cee:	6878      	ldr	r0, [r7, #4]
 8011cf0:	f000 f9c8 	bl	8012084 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8011cf4:	69bb      	ldr	r3, [r7, #24]
 8011cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011cfa:	2b40      	cmp	r3, #64	; 0x40
 8011cfc:	d13a      	bne.n	8011d74 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8011cfe:	693b      	ldr	r3, [r7, #16]
 8011d00:	f003 0320 	and.w	r3, r3, #32
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d035      	beq.n	8011d74 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	681b      	ldr	r3, [r3, #0]
 8011d0c:	4a7e      	ldr	r2, [pc, #504]	; (8011f08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8011d0e:	4293      	cmp	r3, r2
 8011d10:	d101      	bne.n	8011d16 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8011d12:	4b7e      	ldr	r3, [pc, #504]	; (8011f0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8011d14:	e001      	b.n	8011d1a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8011d16:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8011d1a:	685a      	ldr	r2, [r3, #4]
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	4979      	ldr	r1, [pc, #484]	; (8011f08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8011d22:	428b      	cmp	r3, r1
 8011d24:	d101      	bne.n	8011d2a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8011d26:	4b79      	ldr	r3, [pc, #484]	; (8011f0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8011d28:	e001      	b.n	8011d2e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8011d2a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8011d2e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8011d32:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	681b      	ldr	r3, [r3, #0]
 8011d38:	685a      	ldr	r2, [r3, #4]
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	681b      	ldr	r3, [r3, #0]
 8011d3e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8011d42:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8011d44:	2300      	movs	r3, #0
 8011d46:	60fb      	str	r3, [r7, #12]
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	68db      	ldr	r3, [r3, #12]
 8011d4e:	60fb      	str	r3, [r7, #12]
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	681b      	ldr	r3, [r3, #0]
 8011d54:	689b      	ldr	r3, [r3, #8]
 8011d56:	60fb      	str	r3, [r7, #12]
 8011d58:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	2201      	movs	r2, #1
 8011d5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011d66:	f043 0202 	orr.w	r2, r3, #2
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8011d6e:	6878      	ldr	r0, [r7, #4]
 8011d70:	f7ff fe88 	bl	8011a84 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8011d74:	69fb      	ldr	r3, [r7, #28]
 8011d76:	f003 0308 	and.w	r3, r3, #8
 8011d7a:	2b08      	cmp	r3, #8
 8011d7c:	f040 80be 	bne.w	8011efc <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8011d80:	697b      	ldr	r3, [r7, #20]
 8011d82:	f003 0320 	and.w	r3, r3, #32
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	f000 80b8 	beq.w	8011efc <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	681b      	ldr	r3, [r3, #0]
 8011d90:	685a      	ldr	r2, [r3, #4]
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	681b      	ldr	r3, [r3, #0]
 8011d96:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8011d9a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	4a59      	ldr	r2, [pc, #356]	; (8011f08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8011da2:	4293      	cmp	r3, r2
 8011da4:	d101      	bne.n	8011daa <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8011da6:	4b59      	ldr	r3, [pc, #356]	; (8011f0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8011da8:	e001      	b.n	8011dae <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8011daa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8011dae:	685a      	ldr	r2, [r3, #4]
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	681b      	ldr	r3, [r3, #0]
 8011db4:	4954      	ldr	r1, [pc, #336]	; (8011f08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8011db6:	428b      	cmp	r3, r1
 8011db8:	d101      	bne.n	8011dbe <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8011dba:	4b54      	ldr	r3, [pc, #336]	; (8011f0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8011dbc:	e001      	b.n	8011dc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8011dbe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8011dc2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8011dc6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8011dc8:	2300      	movs	r3, #0
 8011dca:	60bb      	str	r3, [r7, #8]
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	681b      	ldr	r3, [r3, #0]
 8011dd0:	689b      	ldr	r3, [r3, #8]
 8011dd2:	60bb      	str	r3, [r7, #8]
 8011dd4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	2201      	movs	r2, #1
 8011dda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011de2:	f043 0204 	orr.w	r2, r3, #4
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8011dea:	6878      	ldr	r0, [r7, #4]
 8011dec:	f7ff fe4a 	bl	8011a84 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8011df0:	e084      	b.n	8011efc <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8011df2:	69bb      	ldr	r3, [r7, #24]
 8011df4:	f003 0302 	and.w	r3, r3, #2
 8011df8:	2b02      	cmp	r3, #2
 8011dfa:	d107      	bne.n	8011e0c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8011dfc:	693b      	ldr	r3, [r7, #16]
 8011dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d002      	beq.n	8011e0c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8011e06:	6878      	ldr	r0, [r7, #4]
 8011e08:	f000 f8be 	bl	8011f88 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8011e0c:	69fb      	ldr	r3, [r7, #28]
 8011e0e:	f003 0301 	and.w	r3, r3, #1
 8011e12:	2b01      	cmp	r3, #1
 8011e14:	d107      	bne.n	8011e26 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8011e16:	697b      	ldr	r3, [r7, #20]
 8011e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d002      	beq.n	8011e26 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8011e20:	6878      	ldr	r0, [r7, #4]
 8011e22:	f000 f8fd 	bl	8012020 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8011e26:	69fb      	ldr	r3, [r7, #28]
 8011e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011e2c:	2b40      	cmp	r3, #64	; 0x40
 8011e2e:	d12f      	bne.n	8011e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8011e30:	697b      	ldr	r3, [r7, #20]
 8011e32:	f003 0320 	and.w	r3, r3, #32
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d02a      	beq.n	8011e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	685a      	ldr	r2, [r3, #4]
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	681b      	ldr	r3, [r3, #0]
 8011e44:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8011e48:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	681b      	ldr	r3, [r3, #0]
 8011e4e:	4a2e      	ldr	r2, [pc, #184]	; (8011f08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8011e50:	4293      	cmp	r3, r2
 8011e52:	d101      	bne.n	8011e58 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8011e54:	4b2d      	ldr	r3, [pc, #180]	; (8011f0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8011e56:	e001      	b.n	8011e5c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8011e58:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8011e5c:	685a      	ldr	r2, [r3, #4]
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	681b      	ldr	r3, [r3, #0]
 8011e62:	4929      	ldr	r1, [pc, #164]	; (8011f08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8011e64:	428b      	cmp	r3, r1
 8011e66:	d101      	bne.n	8011e6c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8011e68:	4b28      	ldr	r3, [pc, #160]	; (8011f0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8011e6a:	e001      	b.n	8011e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8011e6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8011e70:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8011e74:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	2201      	movs	r2, #1
 8011e7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011e82:	f043 0202 	orr.w	r2, r3, #2
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8011e8a:	6878      	ldr	r0, [r7, #4]
 8011e8c:	f7ff fdfa 	bl	8011a84 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8011e90:	69bb      	ldr	r3, [r7, #24]
 8011e92:	f003 0308 	and.w	r3, r3, #8
 8011e96:	2b08      	cmp	r3, #8
 8011e98:	d131      	bne.n	8011efe <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8011e9a:	693b      	ldr	r3, [r7, #16]
 8011e9c:	f003 0320 	and.w	r3, r3, #32
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d02c      	beq.n	8011efe <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	681b      	ldr	r3, [r3, #0]
 8011ea8:	4a17      	ldr	r2, [pc, #92]	; (8011f08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8011eaa:	4293      	cmp	r3, r2
 8011eac:	d101      	bne.n	8011eb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8011eae:	4b17      	ldr	r3, [pc, #92]	; (8011f0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8011eb0:	e001      	b.n	8011eb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8011eb2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8011eb6:	685a      	ldr	r2, [r3, #4]
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	681b      	ldr	r3, [r3, #0]
 8011ebc:	4912      	ldr	r1, [pc, #72]	; (8011f08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8011ebe:	428b      	cmp	r3, r1
 8011ec0:	d101      	bne.n	8011ec6 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8011ec2:	4b12      	ldr	r3, [pc, #72]	; (8011f0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8011ec4:	e001      	b.n	8011eca <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8011ec6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8011eca:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8011ece:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	681b      	ldr	r3, [r3, #0]
 8011ed4:	685a      	ldr	r2, [r3, #4]
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	681b      	ldr	r3, [r3, #0]
 8011eda:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8011ede:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	2201      	movs	r2, #1
 8011ee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011eec:	f043 0204 	orr.w	r2, r3, #4
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8011ef4:	6878      	ldr	r0, [r7, #4]
 8011ef6:	f7ff fdc5 	bl	8011a84 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8011efa:	e000      	b.n	8011efe <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8011efc:	bf00      	nop
}
 8011efe:	bf00      	nop
 8011f00:	3720      	adds	r7, #32
 8011f02:	46bd      	mov	sp, r7
 8011f04:	bd80      	pop	{r7, pc}
 8011f06:	bf00      	nop
 8011f08:	40003800 	.word	0x40003800
 8011f0c:	40003400 	.word	0x40003400

08011f10 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8011f10:	b480      	push	{r7}
 8011f12:	b083      	sub	sp, #12
 8011f14:	af00      	add	r7, sp, #0
 8011f16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8011f18:	bf00      	nop
 8011f1a:	370c      	adds	r7, #12
 8011f1c:	46bd      	mov	sp, r7
 8011f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f22:	4770      	bx	lr

08011f24 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8011f24:	b580      	push	{r7, lr}
 8011f26:	b082      	sub	sp, #8
 8011f28:	af00      	add	r7, sp, #0
 8011f2a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f30:	1c99      	adds	r1, r3, #2
 8011f32:	687a      	ldr	r2, [r7, #4]
 8011f34:	6251      	str	r1, [r2, #36]	; 0x24
 8011f36:	881a      	ldrh	r2, [r3, #0]
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	681b      	ldr	r3, [r3, #0]
 8011f3c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011f42:	b29b      	uxth	r3, r3
 8011f44:	3b01      	subs	r3, #1
 8011f46:	b29a      	uxth	r2, r3
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011f50:	b29b      	uxth	r3, r3
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	d113      	bne.n	8011f7e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	681b      	ldr	r3, [r3, #0]
 8011f5a:	685a      	ldr	r2, [r3, #4]
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	681b      	ldr	r3, [r3, #0]
 8011f60:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8011f64:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011f6a:	b29b      	uxth	r3, r3
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d106      	bne.n	8011f7e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	2201      	movs	r2, #1
 8011f74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8011f78:	6878      	ldr	r0, [r7, #4]
 8011f7a:	f7ff ffc9 	bl	8011f10 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8011f7e:	bf00      	nop
 8011f80:	3708      	adds	r7, #8
 8011f82:	46bd      	mov	sp, r7
 8011f84:	bd80      	pop	{r7, pc}
	...

08011f88 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8011f88:	b580      	push	{r7, lr}
 8011f8a:	b082      	sub	sp, #8
 8011f8c:	af00      	add	r7, sp, #0
 8011f8e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f94:	1c99      	adds	r1, r3, #2
 8011f96:	687a      	ldr	r2, [r7, #4]
 8011f98:	6251      	str	r1, [r2, #36]	; 0x24
 8011f9a:	8819      	ldrh	r1, [r3, #0]
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	681b      	ldr	r3, [r3, #0]
 8011fa0:	4a1d      	ldr	r2, [pc, #116]	; (8012018 <I2SEx_TxISR_I2SExt+0x90>)
 8011fa2:	4293      	cmp	r3, r2
 8011fa4:	d101      	bne.n	8011faa <I2SEx_TxISR_I2SExt+0x22>
 8011fa6:	4b1d      	ldr	r3, [pc, #116]	; (801201c <I2SEx_TxISR_I2SExt+0x94>)
 8011fa8:	e001      	b.n	8011fae <I2SEx_TxISR_I2SExt+0x26>
 8011faa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8011fae:	460a      	mov	r2, r1
 8011fb0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011fb6:	b29b      	uxth	r3, r3
 8011fb8:	3b01      	subs	r3, #1
 8011fba:	b29a      	uxth	r2, r3
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011fc4:	b29b      	uxth	r3, r3
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d121      	bne.n	801200e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	681b      	ldr	r3, [r3, #0]
 8011fce:	4a12      	ldr	r2, [pc, #72]	; (8012018 <I2SEx_TxISR_I2SExt+0x90>)
 8011fd0:	4293      	cmp	r3, r2
 8011fd2:	d101      	bne.n	8011fd8 <I2SEx_TxISR_I2SExt+0x50>
 8011fd4:	4b11      	ldr	r3, [pc, #68]	; (801201c <I2SEx_TxISR_I2SExt+0x94>)
 8011fd6:	e001      	b.n	8011fdc <I2SEx_TxISR_I2SExt+0x54>
 8011fd8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8011fdc:	685a      	ldr	r2, [r3, #4]
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	681b      	ldr	r3, [r3, #0]
 8011fe2:	490d      	ldr	r1, [pc, #52]	; (8012018 <I2SEx_TxISR_I2SExt+0x90>)
 8011fe4:	428b      	cmp	r3, r1
 8011fe6:	d101      	bne.n	8011fec <I2SEx_TxISR_I2SExt+0x64>
 8011fe8:	4b0c      	ldr	r3, [pc, #48]	; (801201c <I2SEx_TxISR_I2SExt+0x94>)
 8011fea:	e001      	b.n	8011ff0 <I2SEx_TxISR_I2SExt+0x68>
 8011fec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8011ff0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8011ff4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011ffa:	b29b      	uxth	r3, r3
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d106      	bne.n	801200e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	2201      	movs	r2, #1
 8012004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8012008:	6878      	ldr	r0, [r7, #4]
 801200a:	f7ff ff81 	bl	8011f10 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 801200e:	bf00      	nop
 8012010:	3708      	adds	r7, #8
 8012012:	46bd      	mov	sp, r7
 8012014:	bd80      	pop	{r7, pc}
 8012016:	bf00      	nop
 8012018:	40003800 	.word	0x40003800
 801201c:	40003400 	.word	0x40003400

08012020 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8012020:	b580      	push	{r7, lr}
 8012022:	b082      	sub	sp, #8
 8012024:	af00      	add	r7, sp, #0
 8012026:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	681b      	ldr	r3, [r3, #0]
 801202c:	68d8      	ldr	r0, [r3, #12]
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012032:	1c99      	adds	r1, r3, #2
 8012034:	687a      	ldr	r2, [r7, #4]
 8012036:	62d1      	str	r1, [r2, #44]	; 0x2c
 8012038:	b282      	uxth	r2, r0
 801203a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012040:	b29b      	uxth	r3, r3
 8012042:	3b01      	subs	r3, #1
 8012044:	b29a      	uxth	r2, r3
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801204e:	b29b      	uxth	r3, r3
 8012050:	2b00      	cmp	r3, #0
 8012052:	d113      	bne.n	801207c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	681b      	ldr	r3, [r3, #0]
 8012058:	685a      	ldr	r2, [r3, #4]
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	681b      	ldr	r3, [r3, #0]
 801205e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8012062:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012068:	b29b      	uxth	r3, r3
 801206a:	2b00      	cmp	r3, #0
 801206c:	d106      	bne.n	801207c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	2201      	movs	r2, #1
 8012072:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8012076:	6878      	ldr	r0, [r7, #4]
 8012078:	f7ff ff4a 	bl	8011f10 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 801207c:	bf00      	nop
 801207e:	3708      	adds	r7, #8
 8012080:	46bd      	mov	sp, r7
 8012082:	bd80      	pop	{r7, pc}

08012084 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8012084:	b580      	push	{r7, lr}
 8012086:	b082      	sub	sp, #8
 8012088:	af00      	add	r7, sp, #0
 801208a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	681b      	ldr	r3, [r3, #0]
 8012090:	4a20      	ldr	r2, [pc, #128]	; (8012114 <I2SEx_RxISR_I2SExt+0x90>)
 8012092:	4293      	cmp	r3, r2
 8012094:	d101      	bne.n	801209a <I2SEx_RxISR_I2SExt+0x16>
 8012096:	4b20      	ldr	r3, [pc, #128]	; (8012118 <I2SEx_RxISR_I2SExt+0x94>)
 8012098:	e001      	b.n	801209e <I2SEx_RxISR_I2SExt+0x1a>
 801209a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 801209e:	68d8      	ldr	r0, [r3, #12]
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120a4:	1c99      	adds	r1, r3, #2
 80120a6:	687a      	ldr	r2, [r7, #4]
 80120a8:	62d1      	str	r1, [r2, #44]	; 0x2c
 80120aa:	b282      	uxth	r2, r0
 80120ac:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80120b2:	b29b      	uxth	r3, r3
 80120b4:	3b01      	subs	r3, #1
 80120b6:	b29a      	uxth	r2, r3
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80120c0:	b29b      	uxth	r3, r3
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	d121      	bne.n	801210a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	681b      	ldr	r3, [r3, #0]
 80120ca:	4a12      	ldr	r2, [pc, #72]	; (8012114 <I2SEx_RxISR_I2SExt+0x90>)
 80120cc:	4293      	cmp	r3, r2
 80120ce:	d101      	bne.n	80120d4 <I2SEx_RxISR_I2SExt+0x50>
 80120d0:	4b11      	ldr	r3, [pc, #68]	; (8012118 <I2SEx_RxISR_I2SExt+0x94>)
 80120d2:	e001      	b.n	80120d8 <I2SEx_RxISR_I2SExt+0x54>
 80120d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80120d8:	685a      	ldr	r2, [r3, #4]
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	681b      	ldr	r3, [r3, #0]
 80120de:	490d      	ldr	r1, [pc, #52]	; (8012114 <I2SEx_RxISR_I2SExt+0x90>)
 80120e0:	428b      	cmp	r3, r1
 80120e2:	d101      	bne.n	80120e8 <I2SEx_RxISR_I2SExt+0x64>
 80120e4:	4b0c      	ldr	r3, [pc, #48]	; (8012118 <I2SEx_RxISR_I2SExt+0x94>)
 80120e6:	e001      	b.n	80120ec <I2SEx_RxISR_I2SExt+0x68>
 80120e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80120ec:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80120f0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80120f6:	b29b      	uxth	r3, r3
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d106      	bne.n	801210a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	2201      	movs	r2, #1
 8012100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8012104:	6878      	ldr	r0, [r7, #4]
 8012106:	f7ff ff03 	bl	8011f10 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 801210a:	bf00      	nop
 801210c:	3708      	adds	r7, #8
 801210e:	46bd      	mov	sp, r7
 8012110:	bd80      	pop	{r7, pc}
 8012112:	bf00      	nop
 8012114:	40003800 	.word	0x40003800
 8012118:	40003400 	.word	0x40003400

0801211c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801211c:	b580      	push	{r7, lr}
 801211e:	b086      	sub	sp, #24
 8012120:	af00      	add	r7, sp, #0
 8012122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	2b00      	cmp	r3, #0
 8012128:	d101      	bne.n	801212e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801212a:	2301      	movs	r3, #1
 801212c:	e25b      	b.n	80125e6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	681b      	ldr	r3, [r3, #0]
 8012132:	f003 0301 	and.w	r3, r3, #1
 8012136:	2b00      	cmp	r3, #0
 8012138:	d075      	beq.n	8012226 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801213a:	4ba3      	ldr	r3, [pc, #652]	; (80123c8 <HAL_RCC_OscConfig+0x2ac>)
 801213c:	689b      	ldr	r3, [r3, #8]
 801213e:	f003 030c 	and.w	r3, r3, #12
 8012142:	2b04      	cmp	r3, #4
 8012144:	d00c      	beq.n	8012160 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8012146:	4ba0      	ldr	r3, [pc, #640]	; (80123c8 <HAL_RCC_OscConfig+0x2ac>)
 8012148:	689b      	ldr	r3, [r3, #8]
 801214a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801214e:	2b08      	cmp	r3, #8
 8012150:	d112      	bne.n	8012178 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8012152:	4b9d      	ldr	r3, [pc, #628]	; (80123c8 <HAL_RCC_OscConfig+0x2ac>)
 8012154:	685b      	ldr	r3, [r3, #4]
 8012156:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801215a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801215e:	d10b      	bne.n	8012178 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012160:	4b99      	ldr	r3, [pc, #612]	; (80123c8 <HAL_RCC_OscConfig+0x2ac>)
 8012162:	681b      	ldr	r3, [r3, #0]
 8012164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012168:	2b00      	cmp	r3, #0
 801216a:	d05b      	beq.n	8012224 <HAL_RCC_OscConfig+0x108>
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	685b      	ldr	r3, [r3, #4]
 8012170:	2b00      	cmp	r3, #0
 8012172:	d157      	bne.n	8012224 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8012174:	2301      	movs	r3, #1
 8012176:	e236      	b.n	80125e6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	685b      	ldr	r3, [r3, #4]
 801217c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012180:	d106      	bne.n	8012190 <HAL_RCC_OscConfig+0x74>
 8012182:	4b91      	ldr	r3, [pc, #580]	; (80123c8 <HAL_RCC_OscConfig+0x2ac>)
 8012184:	681b      	ldr	r3, [r3, #0]
 8012186:	4a90      	ldr	r2, [pc, #576]	; (80123c8 <HAL_RCC_OscConfig+0x2ac>)
 8012188:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801218c:	6013      	str	r3, [r2, #0]
 801218e:	e01d      	b.n	80121cc <HAL_RCC_OscConfig+0xb0>
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	685b      	ldr	r3, [r3, #4]
 8012194:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8012198:	d10c      	bne.n	80121b4 <HAL_RCC_OscConfig+0x98>
 801219a:	4b8b      	ldr	r3, [pc, #556]	; (80123c8 <HAL_RCC_OscConfig+0x2ac>)
 801219c:	681b      	ldr	r3, [r3, #0]
 801219e:	4a8a      	ldr	r2, [pc, #552]	; (80123c8 <HAL_RCC_OscConfig+0x2ac>)
 80121a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80121a4:	6013      	str	r3, [r2, #0]
 80121a6:	4b88      	ldr	r3, [pc, #544]	; (80123c8 <HAL_RCC_OscConfig+0x2ac>)
 80121a8:	681b      	ldr	r3, [r3, #0]
 80121aa:	4a87      	ldr	r2, [pc, #540]	; (80123c8 <HAL_RCC_OscConfig+0x2ac>)
 80121ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80121b0:	6013      	str	r3, [r2, #0]
 80121b2:	e00b      	b.n	80121cc <HAL_RCC_OscConfig+0xb0>
 80121b4:	4b84      	ldr	r3, [pc, #528]	; (80123c8 <HAL_RCC_OscConfig+0x2ac>)
 80121b6:	681b      	ldr	r3, [r3, #0]
 80121b8:	4a83      	ldr	r2, [pc, #524]	; (80123c8 <HAL_RCC_OscConfig+0x2ac>)
 80121ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80121be:	6013      	str	r3, [r2, #0]
 80121c0:	4b81      	ldr	r3, [pc, #516]	; (80123c8 <HAL_RCC_OscConfig+0x2ac>)
 80121c2:	681b      	ldr	r3, [r3, #0]
 80121c4:	4a80      	ldr	r2, [pc, #512]	; (80123c8 <HAL_RCC_OscConfig+0x2ac>)
 80121c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80121ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	685b      	ldr	r3, [r3, #4]
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	d013      	beq.n	80121fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80121d4:	f7fd f9de 	bl	800f594 <HAL_GetTick>
 80121d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80121da:	e008      	b.n	80121ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80121dc:	f7fd f9da 	bl	800f594 <HAL_GetTick>
 80121e0:	4602      	mov	r2, r0
 80121e2:	693b      	ldr	r3, [r7, #16]
 80121e4:	1ad3      	subs	r3, r2, r3
 80121e6:	2b64      	cmp	r3, #100	; 0x64
 80121e8:	d901      	bls.n	80121ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80121ea:	2303      	movs	r3, #3
 80121ec:	e1fb      	b.n	80125e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80121ee:	4b76      	ldr	r3, [pc, #472]	; (80123c8 <HAL_RCC_OscConfig+0x2ac>)
 80121f0:	681b      	ldr	r3, [r3, #0]
 80121f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d0f0      	beq.n	80121dc <HAL_RCC_OscConfig+0xc0>
 80121fa:	e014      	b.n	8012226 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80121fc:	f7fd f9ca 	bl	800f594 <HAL_GetTick>
 8012200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8012202:	e008      	b.n	8012216 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8012204:	f7fd f9c6 	bl	800f594 <HAL_GetTick>
 8012208:	4602      	mov	r2, r0
 801220a:	693b      	ldr	r3, [r7, #16]
 801220c:	1ad3      	subs	r3, r2, r3
 801220e:	2b64      	cmp	r3, #100	; 0x64
 8012210:	d901      	bls.n	8012216 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8012212:	2303      	movs	r3, #3
 8012214:	e1e7      	b.n	80125e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8012216:	4b6c      	ldr	r3, [pc, #432]	; (80123c8 <HAL_RCC_OscConfig+0x2ac>)
 8012218:	681b      	ldr	r3, [r3, #0]
 801221a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801221e:	2b00      	cmp	r3, #0
 8012220:	d1f0      	bne.n	8012204 <HAL_RCC_OscConfig+0xe8>
 8012222:	e000      	b.n	8012226 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012224:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	681b      	ldr	r3, [r3, #0]
 801222a:	f003 0302 	and.w	r3, r3, #2
 801222e:	2b00      	cmp	r3, #0
 8012230:	d063      	beq.n	80122fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8012232:	4b65      	ldr	r3, [pc, #404]	; (80123c8 <HAL_RCC_OscConfig+0x2ac>)
 8012234:	689b      	ldr	r3, [r3, #8]
 8012236:	f003 030c 	and.w	r3, r3, #12
 801223a:	2b00      	cmp	r3, #0
 801223c:	d00b      	beq.n	8012256 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801223e:	4b62      	ldr	r3, [pc, #392]	; (80123c8 <HAL_RCC_OscConfig+0x2ac>)
 8012240:	689b      	ldr	r3, [r3, #8]
 8012242:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8012246:	2b08      	cmp	r3, #8
 8012248:	d11c      	bne.n	8012284 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801224a:	4b5f      	ldr	r3, [pc, #380]	; (80123c8 <HAL_RCC_OscConfig+0x2ac>)
 801224c:	685b      	ldr	r3, [r3, #4]
 801224e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012252:	2b00      	cmp	r3, #0
 8012254:	d116      	bne.n	8012284 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8012256:	4b5c      	ldr	r3, [pc, #368]	; (80123c8 <HAL_RCC_OscConfig+0x2ac>)
 8012258:	681b      	ldr	r3, [r3, #0]
 801225a:	f003 0302 	and.w	r3, r3, #2
 801225e:	2b00      	cmp	r3, #0
 8012260:	d005      	beq.n	801226e <HAL_RCC_OscConfig+0x152>
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	68db      	ldr	r3, [r3, #12]
 8012266:	2b01      	cmp	r3, #1
 8012268:	d001      	beq.n	801226e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 801226a:	2301      	movs	r3, #1
 801226c:	e1bb      	b.n	80125e6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801226e:	4b56      	ldr	r3, [pc, #344]	; (80123c8 <HAL_RCC_OscConfig+0x2ac>)
 8012270:	681b      	ldr	r3, [r3, #0]
 8012272:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	691b      	ldr	r3, [r3, #16]
 801227a:	00db      	lsls	r3, r3, #3
 801227c:	4952      	ldr	r1, [pc, #328]	; (80123c8 <HAL_RCC_OscConfig+0x2ac>)
 801227e:	4313      	orrs	r3, r2
 8012280:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8012282:	e03a      	b.n	80122fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	68db      	ldr	r3, [r3, #12]
 8012288:	2b00      	cmp	r3, #0
 801228a:	d020      	beq.n	80122ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801228c:	4b4f      	ldr	r3, [pc, #316]	; (80123cc <HAL_RCC_OscConfig+0x2b0>)
 801228e:	2201      	movs	r2, #1
 8012290:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012292:	f7fd f97f 	bl	800f594 <HAL_GetTick>
 8012296:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012298:	e008      	b.n	80122ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801229a:	f7fd f97b 	bl	800f594 <HAL_GetTick>
 801229e:	4602      	mov	r2, r0
 80122a0:	693b      	ldr	r3, [r7, #16]
 80122a2:	1ad3      	subs	r3, r2, r3
 80122a4:	2b02      	cmp	r3, #2
 80122a6:	d901      	bls.n	80122ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80122a8:	2303      	movs	r3, #3
 80122aa:	e19c      	b.n	80125e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80122ac:	4b46      	ldr	r3, [pc, #280]	; (80123c8 <HAL_RCC_OscConfig+0x2ac>)
 80122ae:	681b      	ldr	r3, [r3, #0]
 80122b0:	f003 0302 	and.w	r3, r3, #2
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d0f0      	beq.n	801229a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80122b8:	4b43      	ldr	r3, [pc, #268]	; (80123c8 <HAL_RCC_OscConfig+0x2ac>)
 80122ba:	681b      	ldr	r3, [r3, #0]
 80122bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	691b      	ldr	r3, [r3, #16]
 80122c4:	00db      	lsls	r3, r3, #3
 80122c6:	4940      	ldr	r1, [pc, #256]	; (80123c8 <HAL_RCC_OscConfig+0x2ac>)
 80122c8:	4313      	orrs	r3, r2
 80122ca:	600b      	str	r3, [r1, #0]
 80122cc:	e015      	b.n	80122fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80122ce:	4b3f      	ldr	r3, [pc, #252]	; (80123cc <HAL_RCC_OscConfig+0x2b0>)
 80122d0:	2200      	movs	r2, #0
 80122d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80122d4:	f7fd f95e 	bl	800f594 <HAL_GetTick>
 80122d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80122da:	e008      	b.n	80122ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80122dc:	f7fd f95a 	bl	800f594 <HAL_GetTick>
 80122e0:	4602      	mov	r2, r0
 80122e2:	693b      	ldr	r3, [r7, #16]
 80122e4:	1ad3      	subs	r3, r2, r3
 80122e6:	2b02      	cmp	r3, #2
 80122e8:	d901      	bls.n	80122ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80122ea:	2303      	movs	r3, #3
 80122ec:	e17b      	b.n	80125e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80122ee:	4b36      	ldr	r3, [pc, #216]	; (80123c8 <HAL_RCC_OscConfig+0x2ac>)
 80122f0:	681b      	ldr	r3, [r3, #0]
 80122f2:	f003 0302 	and.w	r3, r3, #2
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	d1f0      	bne.n	80122dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	681b      	ldr	r3, [r3, #0]
 80122fe:	f003 0308 	and.w	r3, r3, #8
 8012302:	2b00      	cmp	r3, #0
 8012304:	d030      	beq.n	8012368 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	695b      	ldr	r3, [r3, #20]
 801230a:	2b00      	cmp	r3, #0
 801230c:	d016      	beq.n	801233c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801230e:	4b30      	ldr	r3, [pc, #192]	; (80123d0 <HAL_RCC_OscConfig+0x2b4>)
 8012310:	2201      	movs	r2, #1
 8012312:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012314:	f7fd f93e 	bl	800f594 <HAL_GetTick>
 8012318:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801231a:	e008      	b.n	801232e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801231c:	f7fd f93a 	bl	800f594 <HAL_GetTick>
 8012320:	4602      	mov	r2, r0
 8012322:	693b      	ldr	r3, [r7, #16]
 8012324:	1ad3      	subs	r3, r2, r3
 8012326:	2b02      	cmp	r3, #2
 8012328:	d901      	bls.n	801232e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 801232a:	2303      	movs	r3, #3
 801232c:	e15b      	b.n	80125e6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801232e:	4b26      	ldr	r3, [pc, #152]	; (80123c8 <HAL_RCC_OscConfig+0x2ac>)
 8012330:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012332:	f003 0302 	and.w	r3, r3, #2
 8012336:	2b00      	cmp	r3, #0
 8012338:	d0f0      	beq.n	801231c <HAL_RCC_OscConfig+0x200>
 801233a:	e015      	b.n	8012368 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801233c:	4b24      	ldr	r3, [pc, #144]	; (80123d0 <HAL_RCC_OscConfig+0x2b4>)
 801233e:	2200      	movs	r2, #0
 8012340:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8012342:	f7fd f927 	bl	800f594 <HAL_GetTick>
 8012346:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8012348:	e008      	b.n	801235c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801234a:	f7fd f923 	bl	800f594 <HAL_GetTick>
 801234e:	4602      	mov	r2, r0
 8012350:	693b      	ldr	r3, [r7, #16]
 8012352:	1ad3      	subs	r3, r2, r3
 8012354:	2b02      	cmp	r3, #2
 8012356:	d901      	bls.n	801235c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8012358:	2303      	movs	r3, #3
 801235a:	e144      	b.n	80125e6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801235c:	4b1a      	ldr	r3, [pc, #104]	; (80123c8 <HAL_RCC_OscConfig+0x2ac>)
 801235e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012360:	f003 0302 	and.w	r3, r3, #2
 8012364:	2b00      	cmp	r3, #0
 8012366:	d1f0      	bne.n	801234a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	681b      	ldr	r3, [r3, #0]
 801236c:	f003 0304 	and.w	r3, r3, #4
 8012370:	2b00      	cmp	r3, #0
 8012372:	f000 80a0 	beq.w	80124b6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8012376:	2300      	movs	r3, #0
 8012378:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801237a:	4b13      	ldr	r3, [pc, #76]	; (80123c8 <HAL_RCC_OscConfig+0x2ac>)
 801237c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801237e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012382:	2b00      	cmp	r3, #0
 8012384:	d10f      	bne.n	80123a6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8012386:	2300      	movs	r3, #0
 8012388:	60bb      	str	r3, [r7, #8]
 801238a:	4b0f      	ldr	r3, [pc, #60]	; (80123c8 <HAL_RCC_OscConfig+0x2ac>)
 801238c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801238e:	4a0e      	ldr	r2, [pc, #56]	; (80123c8 <HAL_RCC_OscConfig+0x2ac>)
 8012390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012394:	6413      	str	r3, [r2, #64]	; 0x40
 8012396:	4b0c      	ldr	r3, [pc, #48]	; (80123c8 <HAL_RCC_OscConfig+0x2ac>)
 8012398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801239a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801239e:	60bb      	str	r3, [r7, #8]
 80123a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80123a2:	2301      	movs	r3, #1
 80123a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80123a6:	4b0b      	ldr	r3, [pc, #44]	; (80123d4 <HAL_RCC_OscConfig+0x2b8>)
 80123a8:	681b      	ldr	r3, [r3, #0]
 80123aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d121      	bne.n	80123f6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80123b2:	4b08      	ldr	r3, [pc, #32]	; (80123d4 <HAL_RCC_OscConfig+0x2b8>)
 80123b4:	681b      	ldr	r3, [r3, #0]
 80123b6:	4a07      	ldr	r2, [pc, #28]	; (80123d4 <HAL_RCC_OscConfig+0x2b8>)
 80123b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80123bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80123be:	f7fd f8e9 	bl	800f594 <HAL_GetTick>
 80123c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80123c4:	e011      	b.n	80123ea <HAL_RCC_OscConfig+0x2ce>
 80123c6:	bf00      	nop
 80123c8:	40023800 	.word	0x40023800
 80123cc:	42470000 	.word	0x42470000
 80123d0:	42470e80 	.word	0x42470e80
 80123d4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80123d8:	f7fd f8dc 	bl	800f594 <HAL_GetTick>
 80123dc:	4602      	mov	r2, r0
 80123de:	693b      	ldr	r3, [r7, #16]
 80123e0:	1ad3      	subs	r3, r2, r3
 80123e2:	2b02      	cmp	r3, #2
 80123e4:	d901      	bls.n	80123ea <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80123e6:	2303      	movs	r3, #3
 80123e8:	e0fd      	b.n	80125e6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80123ea:	4b81      	ldr	r3, [pc, #516]	; (80125f0 <HAL_RCC_OscConfig+0x4d4>)
 80123ec:	681b      	ldr	r3, [r3, #0]
 80123ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	d0f0      	beq.n	80123d8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	689b      	ldr	r3, [r3, #8]
 80123fa:	2b01      	cmp	r3, #1
 80123fc:	d106      	bne.n	801240c <HAL_RCC_OscConfig+0x2f0>
 80123fe:	4b7d      	ldr	r3, [pc, #500]	; (80125f4 <HAL_RCC_OscConfig+0x4d8>)
 8012400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012402:	4a7c      	ldr	r2, [pc, #496]	; (80125f4 <HAL_RCC_OscConfig+0x4d8>)
 8012404:	f043 0301 	orr.w	r3, r3, #1
 8012408:	6713      	str	r3, [r2, #112]	; 0x70
 801240a:	e01c      	b.n	8012446 <HAL_RCC_OscConfig+0x32a>
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	689b      	ldr	r3, [r3, #8]
 8012410:	2b05      	cmp	r3, #5
 8012412:	d10c      	bne.n	801242e <HAL_RCC_OscConfig+0x312>
 8012414:	4b77      	ldr	r3, [pc, #476]	; (80125f4 <HAL_RCC_OscConfig+0x4d8>)
 8012416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012418:	4a76      	ldr	r2, [pc, #472]	; (80125f4 <HAL_RCC_OscConfig+0x4d8>)
 801241a:	f043 0304 	orr.w	r3, r3, #4
 801241e:	6713      	str	r3, [r2, #112]	; 0x70
 8012420:	4b74      	ldr	r3, [pc, #464]	; (80125f4 <HAL_RCC_OscConfig+0x4d8>)
 8012422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012424:	4a73      	ldr	r2, [pc, #460]	; (80125f4 <HAL_RCC_OscConfig+0x4d8>)
 8012426:	f043 0301 	orr.w	r3, r3, #1
 801242a:	6713      	str	r3, [r2, #112]	; 0x70
 801242c:	e00b      	b.n	8012446 <HAL_RCC_OscConfig+0x32a>
 801242e:	4b71      	ldr	r3, [pc, #452]	; (80125f4 <HAL_RCC_OscConfig+0x4d8>)
 8012430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012432:	4a70      	ldr	r2, [pc, #448]	; (80125f4 <HAL_RCC_OscConfig+0x4d8>)
 8012434:	f023 0301 	bic.w	r3, r3, #1
 8012438:	6713      	str	r3, [r2, #112]	; 0x70
 801243a:	4b6e      	ldr	r3, [pc, #440]	; (80125f4 <HAL_RCC_OscConfig+0x4d8>)
 801243c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801243e:	4a6d      	ldr	r2, [pc, #436]	; (80125f4 <HAL_RCC_OscConfig+0x4d8>)
 8012440:	f023 0304 	bic.w	r3, r3, #4
 8012444:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	689b      	ldr	r3, [r3, #8]
 801244a:	2b00      	cmp	r3, #0
 801244c:	d015      	beq.n	801247a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801244e:	f7fd f8a1 	bl	800f594 <HAL_GetTick>
 8012452:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012454:	e00a      	b.n	801246c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012456:	f7fd f89d 	bl	800f594 <HAL_GetTick>
 801245a:	4602      	mov	r2, r0
 801245c:	693b      	ldr	r3, [r7, #16]
 801245e:	1ad3      	subs	r3, r2, r3
 8012460:	f241 3288 	movw	r2, #5000	; 0x1388
 8012464:	4293      	cmp	r3, r2
 8012466:	d901      	bls.n	801246c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8012468:	2303      	movs	r3, #3
 801246a:	e0bc      	b.n	80125e6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801246c:	4b61      	ldr	r3, [pc, #388]	; (80125f4 <HAL_RCC_OscConfig+0x4d8>)
 801246e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012470:	f003 0302 	and.w	r3, r3, #2
 8012474:	2b00      	cmp	r3, #0
 8012476:	d0ee      	beq.n	8012456 <HAL_RCC_OscConfig+0x33a>
 8012478:	e014      	b.n	80124a4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801247a:	f7fd f88b 	bl	800f594 <HAL_GetTick>
 801247e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012480:	e00a      	b.n	8012498 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012482:	f7fd f887 	bl	800f594 <HAL_GetTick>
 8012486:	4602      	mov	r2, r0
 8012488:	693b      	ldr	r3, [r7, #16]
 801248a:	1ad3      	subs	r3, r2, r3
 801248c:	f241 3288 	movw	r2, #5000	; 0x1388
 8012490:	4293      	cmp	r3, r2
 8012492:	d901      	bls.n	8012498 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8012494:	2303      	movs	r3, #3
 8012496:	e0a6      	b.n	80125e6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012498:	4b56      	ldr	r3, [pc, #344]	; (80125f4 <HAL_RCC_OscConfig+0x4d8>)
 801249a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801249c:	f003 0302 	and.w	r3, r3, #2
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d1ee      	bne.n	8012482 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80124a4:	7dfb      	ldrb	r3, [r7, #23]
 80124a6:	2b01      	cmp	r3, #1
 80124a8:	d105      	bne.n	80124b6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80124aa:	4b52      	ldr	r3, [pc, #328]	; (80125f4 <HAL_RCC_OscConfig+0x4d8>)
 80124ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80124ae:	4a51      	ldr	r2, [pc, #324]	; (80125f4 <HAL_RCC_OscConfig+0x4d8>)
 80124b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80124b4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	699b      	ldr	r3, [r3, #24]
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	f000 8092 	beq.w	80125e4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80124c0:	4b4c      	ldr	r3, [pc, #304]	; (80125f4 <HAL_RCC_OscConfig+0x4d8>)
 80124c2:	689b      	ldr	r3, [r3, #8]
 80124c4:	f003 030c 	and.w	r3, r3, #12
 80124c8:	2b08      	cmp	r3, #8
 80124ca:	d05c      	beq.n	8012586 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	699b      	ldr	r3, [r3, #24]
 80124d0:	2b02      	cmp	r3, #2
 80124d2:	d141      	bne.n	8012558 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80124d4:	4b48      	ldr	r3, [pc, #288]	; (80125f8 <HAL_RCC_OscConfig+0x4dc>)
 80124d6:	2200      	movs	r2, #0
 80124d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80124da:	f7fd f85b 	bl	800f594 <HAL_GetTick>
 80124de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80124e0:	e008      	b.n	80124f4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80124e2:	f7fd f857 	bl	800f594 <HAL_GetTick>
 80124e6:	4602      	mov	r2, r0
 80124e8:	693b      	ldr	r3, [r7, #16]
 80124ea:	1ad3      	subs	r3, r2, r3
 80124ec:	2b02      	cmp	r3, #2
 80124ee:	d901      	bls.n	80124f4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80124f0:	2303      	movs	r3, #3
 80124f2:	e078      	b.n	80125e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80124f4:	4b3f      	ldr	r3, [pc, #252]	; (80125f4 <HAL_RCC_OscConfig+0x4d8>)
 80124f6:	681b      	ldr	r3, [r3, #0]
 80124f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	d1f0      	bne.n	80124e2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	69da      	ldr	r2, [r3, #28]
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	6a1b      	ldr	r3, [r3, #32]
 8012508:	431a      	orrs	r2, r3
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801250e:	019b      	lsls	r3, r3, #6
 8012510:	431a      	orrs	r2, r3
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012516:	085b      	lsrs	r3, r3, #1
 8012518:	3b01      	subs	r3, #1
 801251a:	041b      	lsls	r3, r3, #16
 801251c:	431a      	orrs	r2, r3
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012522:	061b      	lsls	r3, r3, #24
 8012524:	4933      	ldr	r1, [pc, #204]	; (80125f4 <HAL_RCC_OscConfig+0x4d8>)
 8012526:	4313      	orrs	r3, r2
 8012528:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801252a:	4b33      	ldr	r3, [pc, #204]	; (80125f8 <HAL_RCC_OscConfig+0x4dc>)
 801252c:	2201      	movs	r2, #1
 801252e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012530:	f7fd f830 	bl	800f594 <HAL_GetTick>
 8012534:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012536:	e008      	b.n	801254a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012538:	f7fd f82c 	bl	800f594 <HAL_GetTick>
 801253c:	4602      	mov	r2, r0
 801253e:	693b      	ldr	r3, [r7, #16]
 8012540:	1ad3      	subs	r3, r2, r3
 8012542:	2b02      	cmp	r3, #2
 8012544:	d901      	bls.n	801254a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8012546:	2303      	movs	r3, #3
 8012548:	e04d      	b.n	80125e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801254a:	4b2a      	ldr	r3, [pc, #168]	; (80125f4 <HAL_RCC_OscConfig+0x4d8>)
 801254c:	681b      	ldr	r3, [r3, #0]
 801254e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012552:	2b00      	cmp	r3, #0
 8012554:	d0f0      	beq.n	8012538 <HAL_RCC_OscConfig+0x41c>
 8012556:	e045      	b.n	80125e4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8012558:	4b27      	ldr	r3, [pc, #156]	; (80125f8 <HAL_RCC_OscConfig+0x4dc>)
 801255a:	2200      	movs	r2, #0
 801255c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801255e:	f7fd f819 	bl	800f594 <HAL_GetTick>
 8012562:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012564:	e008      	b.n	8012578 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012566:	f7fd f815 	bl	800f594 <HAL_GetTick>
 801256a:	4602      	mov	r2, r0
 801256c:	693b      	ldr	r3, [r7, #16]
 801256e:	1ad3      	subs	r3, r2, r3
 8012570:	2b02      	cmp	r3, #2
 8012572:	d901      	bls.n	8012578 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8012574:	2303      	movs	r3, #3
 8012576:	e036      	b.n	80125e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012578:	4b1e      	ldr	r3, [pc, #120]	; (80125f4 <HAL_RCC_OscConfig+0x4d8>)
 801257a:	681b      	ldr	r3, [r3, #0]
 801257c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012580:	2b00      	cmp	r3, #0
 8012582:	d1f0      	bne.n	8012566 <HAL_RCC_OscConfig+0x44a>
 8012584:	e02e      	b.n	80125e4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	699b      	ldr	r3, [r3, #24]
 801258a:	2b01      	cmp	r3, #1
 801258c:	d101      	bne.n	8012592 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 801258e:	2301      	movs	r3, #1
 8012590:	e029      	b.n	80125e6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8012592:	4b18      	ldr	r3, [pc, #96]	; (80125f4 <HAL_RCC_OscConfig+0x4d8>)
 8012594:	685b      	ldr	r3, [r3, #4]
 8012596:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8012598:	68fb      	ldr	r3, [r7, #12]
 801259a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	69db      	ldr	r3, [r3, #28]
 80125a2:	429a      	cmp	r2, r3
 80125a4:	d11c      	bne.n	80125e0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80125a6:	68fb      	ldr	r3, [r7, #12]
 80125a8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80125b0:	429a      	cmp	r2, r3
 80125b2:	d115      	bne.n	80125e0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80125b4:	68fa      	ldr	r2, [r7, #12]
 80125b6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80125ba:	4013      	ands	r3, r2
 80125bc:	687a      	ldr	r2, [r7, #4]
 80125be:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80125c0:	4293      	cmp	r3, r2
 80125c2:	d10d      	bne.n	80125e0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80125c4:	68fb      	ldr	r3, [r7, #12]
 80125c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80125ce:	429a      	cmp	r2, r3
 80125d0:	d106      	bne.n	80125e0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80125d2:	68fb      	ldr	r3, [r7, #12]
 80125d4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80125dc:	429a      	cmp	r2, r3
 80125de:	d001      	beq.n	80125e4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80125e0:	2301      	movs	r3, #1
 80125e2:	e000      	b.n	80125e6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80125e4:	2300      	movs	r3, #0
}
 80125e6:	4618      	mov	r0, r3
 80125e8:	3718      	adds	r7, #24
 80125ea:	46bd      	mov	sp, r7
 80125ec:	bd80      	pop	{r7, pc}
 80125ee:	bf00      	nop
 80125f0:	40007000 	.word	0x40007000
 80125f4:	40023800 	.word	0x40023800
 80125f8:	42470060 	.word	0x42470060

080125fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80125fc:	b580      	push	{r7, lr}
 80125fe:	b084      	sub	sp, #16
 8012600:	af00      	add	r7, sp, #0
 8012602:	6078      	str	r0, [r7, #4]
 8012604:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	2b00      	cmp	r3, #0
 801260a:	d101      	bne.n	8012610 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801260c:	2301      	movs	r3, #1
 801260e:	e0cc      	b.n	80127aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8012610:	4b68      	ldr	r3, [pc, #416]	; (80127b4 <HAL_RCC_ClockConfig+0x1b8>)
 8012612:	681b      	ldr	r3, [r3, #0]
 8012614:	f003 030f 	and.w	r3, r3, #15
 8012618:	683a      	ldr	r2, [r7, #0]
 801261a:	429a      	cmp	r2, r3
 801261c:	d90c      	bls.n	8012638 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801261e:	4b65      	ldr	r3, [pc, #404]	; (80127b4 <HAL_RCC_ClockConfig+0x1b8>)
 8012620:	683a      	ldr	r2, [r7, #0]
 8012622:	b2d2      	uxtb	r2, r2
 8012624:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8012626:	4b63      	ldr	r3, [pc, #396]	; (80127b4 <HAL_RCC_ClockConfig+0x1b8>)
 8012628:	681b      	ldr	r3, [r3, #0]
 801262a:	f003 030f 	and.w	r3, r3, #15
 801262e:	683a      	ldr	r2, [r7, #0]
 8012630:	429a      	cmp	r2, r3
 8012632:	d001      	beq.n	8012638 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8012634:	2301      	movs	r3, #1
 8012636:	e0b8      	b.n	80127aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	681b      	ldr	r3, [r3, #0]
 801263c:	f003 0302 	and.w	r3, r3, #2
 8012640:	2b00      	cmp	r3, #0
 8012642:	d020      	beq.n	8012686 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	681b      	ldr	r3, [r3, #0]
 8012648:	f003 0304 	and.w	r3, r3, #4
 801264c:	2b00      	cmp	r3, #0
 801264e:	d005      	beq.n	801265c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8012650:	4b59      	ldr	r3, [pc, #356]	; (80127b8 <HAL_RCC_ClockConfig+0x1bc>)
 8012652:	689b      	ldr	r3, [r3, #8]
 8012654:	4a58      	ldr	r2, [pc, #352]	; (80127b8 <HAL_RCC_ClockConfig+0x1bc>)
 8012656:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 801265a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	681b      	ldr	r3, [r3, #0]
 8012660:	f003 0308 	and.w	r3, r3, #8
 8012664:	2b00      	cmp	r3, #0
 8012666:	d005      	beq.n	8012674 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8012668:	4b53      	ldr	r3, [pc, #332]	; (80127b8 <HAL_RCC_ClockConfig+0x1bc>)
 801266a:	689b      	ldr	r3, [r3, #8]
 801266c:	4a52      	ldr	r2, [pc, #328]	; (80127b8 <HAL_RCC_ClockConfig+0x1bc>)
 801266e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8012672:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8012674:	4b50      	ldr	r3, [pc, #320]	; (80127b8 <HAL_RCC_ClockConfig+0x1bc>)
 8012676:	689b      	ldr	r3, [r3, #8]
 8012678:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	689b      	ldr	r3, [r3, #8]
 8012680:	494d      	ldr	r1, [pc, #308]	; (80127b8 <HAL_RCC_ClockConfig+0x1bc>)
 8012682:	4313      	orrs	r3, r2
 8012684:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	681b      	ldr	r3, [r3, #0]
 801268a:	f003 0301 	and.w	r3, r3, #1
 801268e:	2b00      	cmp	r3, #0
 8012690:	d044      	beq.n	801271c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	685b      	ldr	r3, [r3, #4]
 8012696:	2b01      	cmp	r3, #1
 8012698:	d107      	bne.n	80126aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801269a:	4b47      	ldr	r3, [pc, #284]	; (80127b8 <HAL_RCC_ClockConfig+0x1bc>)
 801269c:	681b      	ldr	r3, [r3, #0]
 801269e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d119      	bne.n	80126da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80126a6:	2301      	movs	r3, #1
 80126a8:	e07f      	b.n	80127aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	685b      	ldr	r3, [r3, #4]
 80126ae:	2b02      	cmp	r3, #2
 80126b0:	d003      	beq.n	80126ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80126b6:	2b03      	cmp	r3, #3
 80126b8:	d107      	bne.n	80126ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80126ba:	4b3f      	ldr	r3, [pc, #252]	; (80127b8 <HAL_RCC_ClockConfig+0x1bc>)
 80126bc:	681b      	ldr	r3, [r3, #0]
 80126be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d109      	bne.n	80126da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80126c6:	2301      	movs	r3, #1
 80126c8:	e06f      	b.n	80127aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80126ca:	4b3b      	ldr	r3, [pc, #236]	; (80127b8 <HAL_RCC_ClockConfig+0x1bc>)
 80126cc:	681b      	ldr	r3, [r3, #0]
 80126ce:	f003 0302 	and.w	r3, r3, #2
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	d101      	bne.n	80126da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80126d6:	2301      	movs	r3, #1
 80126d8:	e067      	b.n	80127aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80126da:	4b37      	ldr	r3, [pc, #220]	; (80127b8 <HAL_RCC_ClockConfig+0x1bc>)
 80126dc:	689b      	ldr	r3, [r3, #8]
 80126de:	f023 0203 	bic.w	r2, r3, #3
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	685b      	ldr	r3, [r3, #4]
 80126e6:	4934      	ldr	r1, [pc, #208]	; (80127b8 <HAL_RCC_ClockConfig+0x1bc>)
 80126e8:	4313      	orrs	r3, r2
 80126ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80126ec:	f7fc ff52 	bl	800f594 <HAL_GetTick>
 80126f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80126f2:	e00a      	b.n	801270a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80126f4:	f7fc ff4e 	bl	800f594 <HAL_GetTick>
 80126f8:	4602      	mov	r2, r0
 80126fa:	68fb      	ldr	r3, [r7, #12]
 80126fc:	1ad3      	subs	r3, r2, r3
 80126fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8012702:	4293      	cmp	r3, r2
 8012704:	d901      	bls.n	801270a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8012706:	2303      	movs	r3, #3
 8012708:	e04f      	b.n	80127aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801270a:	4b2b      	ldr	r3, [pc, #172]	; (80127b8 <HAL_RCC_ClockConfig+0x1bc>)
 801270c:	689b      	ldr	r3, [r3, #8]
 801270e:	f003 020c 	and.w	r2, r3, #12
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	685b      	ldr	r3, [r3, #4]
 8012716:	009b      	lsls	r3, r3, #2
 8012718:	429a      	cmp	r2, r3
 801271a:	d1eb      	bne.n	80126f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801271c:	4b25      	ldr	r3, [pc, #148]	; (80127b4 <HAL_RCC_ClockConfig+0x1b8>)
 801271e:	681b      	ldr	r3, [r3, #0]
 8012720:	f003 030f 	and.w	r3, r3, #15
 8012724:	683a      	ldr	r2, [r7, #0]
 8012726:	429a      	cmp	r2, r3
 8012728:	d20c      	bcs.n	8012744 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801272a:	4b22      	ldr	r3, [pc, #136]	; (80127b4 <HAL_RCC_ClockConfig+0x1b8>)
 801272c:	683a      	ldr	r2, [r7, #0]
 801272e:	b2d2      	uxtb	r2, r2
 8012730:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8012732:	4b20      	ldr	r3, [pc, #128]	; (80127b4 <HAL_RCC_ClockConfig+0x1b8>)
 8012734:	681b      	ldr	r3, [r3, #0]
 8012736:	f003 030f 	and.w	r3, r3, #15
 801273a:	683a      	ldr	r2, [r7, #0]
 801273c:	429a      	cmp	r2, r3
 801273e:	d001      	beq.n	8012744 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8012740:	2301      	movs	r3, #1
 8012742:	e032      	b.n	80127aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	681b      	ldr	r3, [r3, #0]
 8012748:	f003 0304 	and.w	r3, r3, #4
 801274c:	2b00      	cmp	r3, #0
 801274e:	d008      	beq.n	8012762 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8012750:	4b19      	ldr	r3, [pc, #100]	; (80127b8 <HAL_RCC_ClockConfig+0x1bc>)
 8012752:	689b      	ldr	r3, [r3, #8]
 8012754:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	68db      	ldr	r3, [r3, #12]
 801275c:	4916      	ldr	r1, [pc, #88]	; (80127b8 <HAL_RCC_ClockConfig+0x1bc>)
 801275e:	4313      	orrs	r3, r2
 8012760:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	681b      	ldr	r3, [r3, #0]
 8012766:	f003 0308 	and.w	r3, r3, #8
 801276a:	2b00      	cmp	r3, #0
 801276c:	d009      	beq.n	8012782 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801276e:	4b12      	ldr	r3, [pc, #72]	; (80127b8 <HAL_RCC_ClockConfig+0x1bc>)
 8012770:	689b      	ldr	r3, [r3, #8]
 8012772:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	691b      	ldr	r3, [r3, #16]
 801277a:	00db      	lsls	r3, r3, #3
 801277c:	490e      	ldr	r1, [pc, #56]	; (80127b8 <HAL_RCC_ClockConfig+0x1bc>)
 801277e:	4313      	orrs	r3, r2
 8012780:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8012782:	f000 f821 	bl	80127c8 <HAL_RCC_GetSysClockFreq>
 8012786:	4601      	mov	r1, r0
 8012788:	4b0b      	ldr	r3, [pc, #44]	; (80127b8 <HAL_RCC_ClockConfig+0x1bc>)
 801278a:	689b      	ldr	r3, [r3, #8]
 801278c:	091b      	lsrs	r3, r3, #4
 801278e:	f003 030f 	and.w	r3, r3, #15
 8012792:	4a0a      	ldr	r2, [pc, #40]	; (80127bc <HAL_RCC_ClockConfig+0x1c0>)
 8012794:	5cd3      	ldrb	r3, [r2, r3]
 8012796:	fa21 f303 	lsr.w	r3, r1, r3
 801279a:	4a09      	ldr	r2, [pc, #36]	; (80127c0 <HAL_RCC_ClockConfig+0x1c4>)
 801279c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 801279e:	4b09      	ldr	r3, [pc, #36]	; (80127c4 <HAL_RCC_ClockConfig+0x1c8>)
 80127a0:	681b      	ldr	r3, [r3, #0]
 80127a2:	4618      	mov	r0, r3
 80127a4:	f7fc feb2 	bl	800f50c <HAL_InitTick>

  return HAL_OK;
 80127a8:	2300      	movs	r3, #0
}
 80127aa:	4618      	mov	r0, r3
 80127ac:	3710      	adds	r7, #16
 80127ae:	46bd      	mov	sp, r7
 80127b0:	bd80      	pop	{r7, pc}
 80127b2:	bf00      	nop
 80127b4:	40023c00 	.word	0x40023c00
 80127b8:	40023800 	.word	0x40023800
 80127bc:	08017258 	.word	0x08017258
 80127c0:	20000158 	.word	0x20000158
 80127c4:	2000015c 	.word	0x2000015c

080127c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80127c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80127ca:	b085      	sub	sp, #20
 80127cc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80127ce:	2300      	movs	r3, #0
 80127d0:	607b      	str	r3, [r7, #4]
 80127d2:	2300      	movs	r3, #0
 80127d4:	60fb      	str	r3, [r7, #12]
 80127d6:	2300      	movs	r3, #0
 80127d8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80127da:	2300      	movs	r3, #0
 80127dc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80127de:	4b63      	ldr	r3, [pc, #396]	; (801296c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80127e0:	689b      	ldr	r3, [r3, #8]
 80127e2:	f003 030c 	and.w	r3, r3, #12
 80127e6:	2b04      	cmp	r3, #4
 80127e8:	d007      	beq.n	80127fa <HAL_RCC_GetSysClockFreq+0x32>
 80127ea:	2b08      	cmp	r3, #8
 80127ec:	d008      	beq.n	8012800 <HAL_RCC_GetSysClockFreq+0x38>
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	f040 80b4 	bne.w	801295c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80127f4:	4b5e      	ldr	r3, [pc, #376]	; (8012970 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80127f6:	60bb      	str	r3, [r7, #8]
       break;
 80127f8:	e0b3      	b.n	8012962 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80127fa:	4b5e      	ldr	r3, [pc, #376]	; (8012974 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80127fc:	60bb      	str	r3, [r7, #8]
      break;
 80127fe:	e0b0      	b.n	8012962 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8012800:	4b5a      	ldr	r3, [pc, #360]	; (801296c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8012802:	685b      	ldr	r3, [r3, #4]
 8012804:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012808:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801280a:	4b58      	ldr	r3, [pc, #352]	; (801296c <HAL_RCC_GetSysClockFreq+0x1a4>)
 801280c:	685b      	ldr	r3, [r3, #4]
 801280e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012812:	2b00      	cmp	r3, #0
 8012814:	d04a      	beq.n	80128ac <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8012816:	4b55      	ldr	r3, [pc, #340]	; (801296c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8012818:	685b      	ldr	r3, [r3, #4]
 801281a:	099b      	lsrs	r3, r3, #6
 801281c:	f04f 0400 	mov.w	r4, #0
 8012820:	f240 11ff 	movw	r1, #511	; 0x1ff
 8012824:	f04f 0200 	mov.w	r2, #0
 8012828:	ea03 0501 	and.w	r5, r3, r1
 801282c:	ea04 0602 	and.w	r6, r4, r2
 8012830:	4629      	mov	r1, r5
 8012832:	4632      	mov	r2, r6
 8012834:	f04f 0300 	mov.w	r3, #0
 8012838:	f04f 0400 	mov.w	r4, #0
 801283c:	0154      	lsls	r4, r2, #5
 801283e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8012842:	014b      	lsls	r3, r1, #5
 8012844:	4619      	mov	r1, r3
 8012846:	4622      	mov	r2, r4
 8012848:	1b49      	subs	r1, r1, r5
 801284a:	eb62 0206 	sbc.w	r2, r2, r6
 801284e:	f04f 0300 	mov.w	r3, #0
 8012852:	f04f 0400 	mov.w	r4, #0
 8012856:	0194      	lsls	r4, r2, #6
 8012858:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 801285c:	018b      	lsls	r3, r1, #6
 801285e:	1a5b      	subs	r3, r3, r1
 8012860:	eb64 0402 	sbc.w	r4, r4, r2
 8012864:	f04f 0100 	mov.w	r1, #0
 8012868:	f04f 0200 	mov.w	r2, #0
 801286c:	00e2      	lsls	r2, r4, #3
 801286e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8012872:	00d9      	lsls	r1, r3, #3
 8012874:	460b      	mov	r3, r1
 8012876:	4614      	mov	r4, r2
 8012878:	195b      	adds	r3, r3, r5
 801287a:	eb44 0406 	adc.w	r4, r4, r6
 801287e:	f04f 0100 	mov.w	r1, #0
 8012882:	f04f 0200 	mov.w	r2, #0
 8012886:	0262      	lsls	r2, r4, #9
 8012888:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 801288c:	0259      	lsls	r1, r3, #9
 801288e:	460b      	mov	r3, r1
 8012890:	4614      	mov	r4, r2
 8012892:	4618      	mov	r0, r3
 8012894:	4621      	mov	r1, r4
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	f04f 0400 	mov.w	r4, #0
 801289c:	461a      	mov	r2, r3
 801289e:	4623      	mov	r3, r4
 80128a0:	f7ed fc9a 	bl	80001d8 <__aeabi_uldivmod>
 80128a4:	4603      	mov	r3, r0
 80128a6:	460c      	mov	r4, r1
 80128a8:	60fb      	str	r3, [r7, #12]
 80128aa:	e049      	b.n	8012940 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80128ac:	4b2f      	ldr	r3, [pc, #188]	; (801296c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80128ae:	685b      	ldr	r3, [r3, #4]
 80128b0:	099b      	lsrs	r3, r3, #6
 80128b2:	f04f 0400 	mov.w	r4, #0
 80128b6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80128ba:	f04f 0200 	mov.w	r2, #0
 80128be:	ea03 0501 	and.w	r5, r3, r1
 80128c2:	ea04 0602 	and.w	r6, r4, r2
 80128c6:	4629      	mov	r1, r5
 80128c8:	4632      	mov	r2, r6
 80128ca:	f04f 0300 	mov.w	r3, #0
 80128ce:	f04f 0400 	mov.w	r4, #0
 80128d2:	0154      	lsls	r4, r2, #5
 80128d4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80128d8:	014b      	lsls	r3, r1, #5
 80128da:	4619      	mov	r1, r3
 80128dc:	4622      	mov	r2, r4
 80128de:	1b49      	subs	r1, r1, r5
 80128e0:	eb62 0206 	sbc.w	r2, r2, r6
 80128e4:	f04f 0300 	mov.w	r3, #0
 80128e8:	f04f 0400 	mov.w	r4, #0
 80128ec:	0194      	lsls	r4, r2, #6
 80128ee:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80128f2:	018b      	lsls	r3, r1, #6
 80128f4:	1a5b      	subs	r3, r3, r1
 80128f6:	eb64 0402 	sbc.w	r4, r4, r2
 80128fa:	f04f 0100 	mov.w	r1, #0
 80128fe:	f04f 0200 	mov.w	r2, #0
 8012902:	00e2      	lsls	r2, r4, #3
 8012904:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8012908:	00d9      	lsls	r1, r3, #3
 801290a:	460b      	mov	r3, r1
 801290c:	4614      	mov	r4, r2
 801290e:	195b      	adds	r3, r3, r5
 8012910:	eb44 0406 	adc.w	r4, r4, r6
 8012914:	f04f 0100 	mov.w	r1, #0
 8012918:	f04f 0200 	mov.w	r2, #0
 801291c:	02a2      	lsls	r2, r4, #10
 801291e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8012922:	0299      	lsls	r1, r3, #10
 8012924:	460b      	mov	r3, r1
 8012926:	4614      	mov	r4, r2
 8012928:	4618      	mov	r0, r3
 801292a:	4621      	mov	r1, r4
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	f04f 0400 	mov.w	r4, #0
 8012932:	461a      	mov	r2, r3
 8012934:	4623      	mov	r3, r4
 8012936:	f7ed fc4f 	bl	80001d8 <__aeabi_uldivmod>
 801293a:	4603      	mov	r3, r0
 801293c:	460c      	mov	r4, r1
 801293e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8012940:	4b0a      	ldr	r3, [pc, #40]	; (801296c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8012942:	685b      	ldr	r3, [r3, #4]
 8012944:	0c1b      	lsrs	r3, r3, #16
 8012946:	f003 0303 	and.w	r3, r3, #3
 801294a:	3301      	adds	r3, #1
 801294c:	005b      	lsls	r3, r3, #1
 801294e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8012950:	68fa      	ldr	r2, [r7, #12]
 8012952:	683b      	ldr	r3, [r7, #0]
 8012954:	fbb2 f3f3 	udiv	r3, r2, r3
 8012958:	60bb      	str	r3, [r7, #8]
      break;
 801295a:	e002      	b.n	8012962 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 801295c:	4b04      	ldr	r3, [pc, #16]	; (8012970 <HAL_RCC_GetSysClockFreq+0x1a8>)
 801295e:	60bb      	str	r3, [r7, #8]
      break;
 8012960:	bf00      	nop
    }
  }
  return sysclockfreq;
 8012962:	68bb      	ldr	r3, [r7, #8]
}
 8012964:	4618      	mov	r0, r3
 8012966:	3714      	adds	r7, #20
 8012968:	46bd      	mov	sp, r7
 801296a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801296c:	40023800 	.word	0x40023800
 8012970:	00f42400 	.word	0x00f42400
 8012974:	007a1200 	.word	0x007a1200

08012978 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8012978:	b480      	push	{r7}
 801297a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801297c:	4b03      	ldr	r3, [pc, #12]	; (801298c <HAL_RCC_GetHCLKFreq+0x14>)
 801297e:	681b      	ldr	r3, [r3, #0]
}
 8012980:	4618      	mov	r0, r3
 8012982:	46bd      	mov	sp, r7
 8012984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012988:	4770      	bx	lr
 801298a:	bf00      	nop
 801298c:	20000158 	.word	0x20000158

08012990 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8012990:	b580      	push	{r7, lr}
 8012992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8012994:	f7ff fff0 	bl	8012978 <HAL_RCC_GetHCLKFreq>
 8012998:	4601      	mov	r1, r0
 801299a:	4b05      	ldr	r3, [pc, #20]	; (80129b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 801299c:	689b      	ldr	r3, [r3, #8]
 801299e:	0a9b      	lsrs	r3, r3, #10
 80129a0:	f003 0307 	and.w	r3, r3, #7
 80129a4:	4a03      	ldr	r2, [pc, #12]	; (80129b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80129a6:	5cd3      	ldrb	r3, [r2, r3]
 80129a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80129ac:	4618      	mov	r0, r3
 80129ae:	bd80      	pop	{r7, pc}
 80129b0:	40023800 	.word	0x40023800
 80129b4:	08017268 	.word	0x08017268

080129b8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80129b8:	b580      	push	{r7, lr}
 80129ba:	b086      	sub	sp, #24
 80129bc:	af00      	add	r7, sp, #0
 80129be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80129c0:	2300      	movs	r3, #0
 80129c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80129c4:	2300      	movs	r3, #0
 80129c6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	681b      	ldr	r3, [r3, #0]
 80129cc:	f003 0301 	and.w	r3, r3, #1
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d105      	bne.n	80129e0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	681b      	ldr	r3, [r3, #0]
 80129d8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d038      	beq.n	8012a52 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80129e0:	4b68      	ldr	r3, [pc, #416]	; (8012b84 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80129e2:	2200      	movs	r2, #0
 80129e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80129e6:	f7fc fdd5 	bl	800f594 <HAL_GetTick>
 80129ea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80129ec:	e008      	b.n	8012a00 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80129ee:	f7fc fdd1 	bl	800f594 <HAL_GetTick>
 80129f2:	4602      	mov	r2, r0
 80129f4:	697b      	ldr	r3, [r7, #20]
 80129f6:	1ad3      	subs	r3, r2, r3
 80129f8:	2b02      	cmp	r3, #2
 80129fa:	d901      	bls.n	8012a00 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80129fc:	2303      	movs	r3, #3
 80129fe:	e0bd      	b.n	8012b7c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8012a00:	4b61      	ldr	r3, [pc, #388]	; (8012b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8012a02:	681b      	ldr	r3, [r3, #0]
 8012a04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d1f0      	bne.n	80129ee <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	685a      	ldr	r2, [r3, #4]
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	689b      	ldr	r3, [r3, #8]
 8012a14:	019b      	lsls	r3, r3, #6
 8012a16:	431a      	orrs	r2, r3
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	68db      	ldr	r3, [r3, #12]
 8012a1c:	071b      	lsls	r3, r3, #28
 8012a1e:	495a      	ldr	r1, [pc, #360]	; (8012b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8012a20:	4313      	orrs	r3, r2
 8012a22:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8012a26:	4b57      	ldr	r3, [pc, #348]	; (8012b84 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8012a28:	2201      	movs	r2, #1
 8012a2a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8012a2c:	f7fc fdb2 	bl	800f594 <HAL_GetTick>
 8012a30:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8012a32:	e008      	b.n	8012a46 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8012a34:	f7fc fdae 	bl	800f594 <HAL_GetTick>
 8012a38:	4602      	mov	r2, r0
 8012a3a:	697b      	ldr	r3, [r7, #20]
 8012a3c:	1ad3      	subs	r3, r2, r3
 8012a3e:	2b02      	cmp	r3, #2
 8012a40:	d901      	bls.n	8012a46 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8012a42:	2303      	movs	r3, #3
 8012a44:	e09a      	b.n	8012b7c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8012a46:	4b50      	ldr	r3, [pc, #320]	; (8012b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8012a48:	681b      	ldr	r3, [r3, #0]
 8012a4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d0f0      	beq.n	8012a34 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	681b      	ldr	r3, [r3, #0]
 8012a56:	f003 0302 	and.w	r3, r3, #2
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	f000 8083 	beq.w	8012b66 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8012a60:	2300      	movs	r3, #0
 8012a62:	60fb      	str	r3, [r7, #12]
 8012a64:	4b48      	ldr	r3, [pc, #288]	; (8012b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8012a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a68:	4a47      	ldr	r2, [pc, #284]	; (8012b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8012a6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012a6e:	6413      	str	r3, [r2, #64]	; 0x40
 8012a70:	4b45      	ldr	r3, [pc, #276]	; (8012b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8012a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012a78:	60fb      	str	r3, [r7, #12]
 8012a7a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8012a7c:	4b43      	ldr	r3, [pc, #268]	; (8012b8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8012a7e:	681b      	ldr	r3, [r3, #0]
 8012a80:	4a42      	ldr	r2, [pc, #264]	; (8012b8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8012a82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012a86:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8012a88:	f7fc fd84 	bl	800f594 <HAL_GetTick>
 8012a8c:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8012a8e:	e008      	b.n	8012aa2 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8012a90:	f7fc fd80 	bl	800f594 <HAL_GetTick>
 8012a94:	4602      	mov	r2, r0
 8012a96:	697b      	ldr	r3, [r7, #20]
 8012a98:	1ad3      	subs	r3, r2, r3
 8012a9a:	2b02      	cmp	r3, #2
 8012a9c:	d901      	bls.n	8012aa2 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8012a9e:	2303      	movs	r3, #3
 8012aa0:	e06c      	b.n	8012b7c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8012aa2:	4b3a      	ldr	r3, [pc, #232]	; (8012b8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8012aa4:	681b      	ldr	r3, [r3, #0]
 8012aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	d0f0      	beq.n	8012a90 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8012aae:	4b36      	ldr	r3, [pc, #216]	; (8012b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8012ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012ab2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012ab6:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8012ab8:	693b      	ldr	r3, [r7, #16]
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d02f      	beq.n	8012b1e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	691b      	ldr	r3, [r3, #16]
 8012ac2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012ac6:	693a      	ldr	r2, [r7, #16]
 8012ac8:	429a      	cmp	r2, r3
 8012aca:	d028      	beq.n	8012b1e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8012acc:	4b2e      	ldr	r3, [pc, #184]	; (8012b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8012ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012ad0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012ad4:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8012ad6:	4b2e      	ldr	r3, [pc, #184]	; (8012b90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8012ad8:	2201      	movs	r2, #1
 8012ada:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8012adc:	4b2c      	ldr	r3, [pc, #176]	; (8012b90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8012ade:	2200      	movs	r2, #0
 8012ae0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8012ae2:	4a29      	ldr	r2, [pc, #164]	; (8012b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8012ae4:	693b      	ldr	r3, [r7, #16]
 8012ae6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8012ae8:	4b27      	ldr	r3, [pc, #156]	; (8012b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8012aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012aec:	f003 0301 	and.w	r3, r3, #1
 8012af0:	2b01      	cmp	r3, #1
 8012af2:	d114      	bne.n	8012b1e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8012af4:	f7fc fd4e 	bl	800f594 <HAL_GetTick>
 8012af8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012afa:	e00a      	b.n	8012b12 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012afc:	f7fc fd4a 	bl	800f594 <HAL_GetTick>
 8012b00:	4602      	mov	r2, r0
 8012b02:	697b      	ldr	r3, [r7, #20]
 8012b04:	1ad3      	subs	r3, r2, r3
 8012b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8012b0a:	4293      	cmp	r3, r2
 8012b0c:	d901      	bls.n	8012b12 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8012b0e:	2303      	movs	r3, #3
 8012b10:	e034      	b.n	8012b7c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012b12:	4b1d      	ldr	r3, [pc, #116]	; (8012b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8012b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b16:	f003 0302 	and.w	r3, r3, #2
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d0ee      	beq.n	8012afc <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	691b      	ldr	r3, [r3, #16]
 8012b22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012b26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012b2a:	d10d      	bne.n	8012b48 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8012b2c:	4b16      	ldr	r3, [pc, #88]	; (8012b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8012b2e:	689b      	ldr	r3, [r3, #8]
 8012b30:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	691b      	ldr	r3, [r3, #16]
 8012b38:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8012b3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012b40:	4911      	ldr	r1, [pc, #68]	; (8012b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8012b42:	4313      	orrs	r3, r2
 8012b44:	608b      	str	r3, [r1, #8]
 8012b46:	e005      	b.n	8012b54 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8012b48:	4b0f      	ldr	r3, [pc, #60]	; (8012b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8012b4a:	689b      	ldr	r3, [r3, #8]
 8012b4c:	4a0e      	ldr	r2, [pc, #56]	; (8012b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8012b4e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8012b52:	6093      	str	r3, [r2, #8]
 8012b54:	4b0c      	ldr	r3, [pc, #48]	; (8012b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8012b56:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	691b      	ldr	r3, [r3, #16]
 8012b5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012b60:	4909      	ldr	r1, [pc, #36]	; (8012b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8012b62:	4313      	orrs	r3, r2
 8012b64:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	681b      	ldr	r3, [r3, #0]
 8012b6a:	f003 0308 	and.w	r3, r3, #8
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	d003      	beq.n	8012b7a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	7d1a      	ldrb	r2, [r3, #20]
 8012b76:	4b07      	ldr	r3, [pc, #28]	; (8012b94 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8012b78:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8012b7a:	2300      	movs	r3, #0
}
 8012b7c:	4618      	mov	r0, r3
 8012b7e:	3718      	adds	r7, #24
 8012b80:	46bd      	mov	sp, r7
 8012b82:	bd80      	pop	{r7, pc}
 8012b84:	42470068 	.word	0x42470068
 8012b88:	40023800 	.word	0x40023800
 8012b8c:	40007000 	.word	0x40007000
 8012b90:	42470e40 	.word	0x42470e40
 8012b94:	424711e0 	.word	0x424711e0

08012b98 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8012b98:	b480      	push	{r7}
 8012b9a:	b087      	sub	sp, #28
 8012b9c:	af00      	add	r7, sp, #0
 8012b9e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8012ba0:	2300      	movs	r3, #0
 8012ba2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8012ba4:	2300      	movs	r3, #0
 8012ba6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8012ba8:	2300      	movs	r3, #0
 8012baa:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8012bac:	2300      	movs	r3, #0
 8012bae:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	2b01      	cmp	r3, #1
 8012bb4:	d13f      	bne.n	8012c36 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8012bb6:	4b23      	ldr	r3, [pc, #140]	; (8012c44 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8012bb8:	689b      	ldr	r3, [r3, #8]
 8012bba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012bbe:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8012bc0:	68fb      	ldr	r3, [r7, #12]
 8012bc2:	2b00      	cmp	r3, #0
 8012bc4:	d004      	beq.n	8012bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8012bc6:	2b01      	cmp	r3, #1
 8012bc8:	d131      	bne.n	8012c2e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8012bca:	4b1f      	ldr	r3, [pc, #124]	; (8012c48 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8012bcc:	617b      	str	r3, [r7, #20]
          break;
 8012bce:	e031      	b.n	8012c34 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8012bd0:	4b1c      	ldr	r3, [pc, #112]	; (8012c44 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8012bd2:	685b      	ldr	r3, [r3, #4]
 8012bd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012bd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8012bdc:	d109      	bne.n	8012bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8012bde:	4b19      	ldr	r3, [pc, #100]	; (8012c44 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8012be0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012be4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012be8:	4a18      	ldr	r2, [pc, #96]	; (8012c4c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8012bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8012bee:	613b      	str	r3, [r7, #16]
 8012bf0:	e008      	b.n	8012c04 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8012bf2:	4b14      	ldr	r3, [pc, #80]	; (8012c44 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8012bf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012bf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012bfc:	4a14      	ldr	r2, [pc, #80]	; (8012c50 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8012bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8012c02:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8012c04:	4b0f      	ldr	r3, [pc, #60]	; (8012c44 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8012c06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012c0a:	099b      	lsrs	r3, r3, #6
 8012c0c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8012c10:	693b      	ldr	r3, [r7, #16]
 8012c12:	fb02 f303 	mul.w	r3, r2, r3
 8012c16:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8012c18:	4b0a      	ldr	r3, [pc, #40]	; (8012c44 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8012c1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012c1e:	0f1b      	lsrs	r3, r3, #28
 8012c20:	f003 0307 	and.w	r3, r3, #7
 8012c24:	68ba      	ldr	r2, [r7, #8]
 8012c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8012c2a:	617b      	str	r3, [r7, #20]
          break;
 8012c2c:	e002      	b.n	8012c34 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8012c2e:	2300      	movs	r3, #0
 8012c30:	617b      	str	r3, [r7, #20]
          break;
 8012c32:	bf00      	nop
        }
      }
      break;
 8012c34:	bf00      	nop
    }
  }
  return frequency;
 8012c36:	697b      	ldr	r3, [r7, #20]
}
 8012c38:	4618      	mov	r0, r3
 8012c3a:	371c      	adds	r7, #28
 8012c3c:	46bd      	mov	sp, r7
 8012c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c42:	4770      	bx	lr
 8012c44:	40023800 	.word	0x40023800
 8012c48:	00bb8000 	.word	0x00bb8000
 8012c4c:	007a1200 	.word	0x007a1200
 8012c50:	00f42400 	.word	0x00f42400

08012c54 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8012c54:	b580      	push	{r7, lr}
 8012c56:	b082      	sub	sp, #8
 8012c58:	af00      	add	r7, sp, #0
 8012c5a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d101      	bne.n	8012c66 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8012c62:	2301      	movs	r3, #1
 8012c64:	e056      	b.n	8012d14 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	2200      	movs	r2, #0
 8012c6a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012c72:	b2db      	uxtb	r3, r3
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d106      	bne.n	8012c86 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	2200      	movs	r2, #0
 8012c7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8012c80:	6878      	ldr	r0, [r7, #4]
 8012c82:	f7fc fa07 	bl	800f094 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	2202      	movs	r2, #2
 8012c8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	681b      	ldr	r3, [r3, #0]
 8012c92:	681a      	ldr	r2, [r3, #0]
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	681b      	ldr	r3, [r3, #0]
 8012c98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012c9c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	685a      	ldr	r2, [r3, #4]
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	689b      	ldr	r3, [r3, #8]
 8012ca6:	431a      	orrs	r2, r3
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	68db      	ldr	r3, [r3, #12]
 8012cac:	431a      	orrs	r2, r3
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	691b      	ldr	r3, [r3, #16]
 8012cb2:	431a      	orrs	r2, r3
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	695b      	ldr	r3, [r3, #20]
 8012cb8:	431a      	orrs	r2, r3
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	699b      	ldr	r3, [r3, #24]
 8012cbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012cc2:	431a      	orrs	r2, r3
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	69db      	ldr	r3, [r3, #28]
 8012cc8:	431a      	orrs	r2, r3
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	6a1b      	ldr	r3, [r3, #32]
 8012cce:	ea42 0103 	orr.w	r1, r2, r3
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	681b      	ldr	r3, [r3, #0]
 8012cda:	430a      	orrs	r2, r1
 8012cdc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	699b      	ldr	r3, [r3, #24]
 8012ce2:	0c1b      	lsrs	r3, r3, #16
 8012ce4:	f003 0104 	and.w	r1, r3, #4
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	681b      	ldr	r3, [r3, #0]
 8012cf0:	430a      	orrs	r2, r1
 8012cf2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	681b      	ldr	r3, [r3, #0]
 8012cf8:	69da      	ldr	r2, [r3, #28]
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	681b      	ldr	r3, [r3, #0]
 8012cfe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8012d02:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	2200      	movs	r2, #0
 8012d08:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	2201      	movs	r2, #1
 8012d0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8012d12:	2300      	movs	r3, #0
}
 8012d14:	4618      	mov	r0, r3
 8012d16:	3708      	adds	r7, #8
 8012d18:	46bd      	mov	sp, r7
 8012d1a:	bd80      	pop	{r7, pc}

08012d1c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012d1c:	b580      	push	{r7, lr}
 8012d1e:	b088      	sub	sp, #32
 8012d20:	af00      	add	r7, sp, #0
 8012d22:	60f8      	str	r0, [r7, #12]
 8012d24:	60b9      	str	r1, [r7, #8]
 8012d26:	603b      	str	r3, [r7, #0]
 8012d28:	4613      	mov	r3, r2
 8012d2a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8012d2c:	2300      	movs	r3, #0
 8012d2e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8012d30:	68fb      	ldr	r3, [r7, #12]
 8012d32:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8012d36:	2b01      	cmp	r3, #1
 8012d38:	d101      	bne.n	8012d3e <HAL_SPI_Transmit+0x22>
 8012d3a:	2302      	movs	r3, #2
 8012d3c:	e11e      	b.n	8012f7c <HAL_SPI_Transmit+0x260>
 8012d3e:	68fb      	ldr	r3, [r7, #12]
 8012d40:	2201      	movs	r2, #1
 8012d42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8012d46:	f7fc fc25 	bl	800f594 <HAL_GetTick>
 8012d4a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8012d4c:	88fb      	ldrh	r3, [r7, #6]
 8012d4e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8012d50:	68fb      	ldr	r3, [r7, #12]
 8012d52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012d56:	b2db      	uxtb	r3, r3
 8012d58:	2b01      	cmp	r3, #1
 8012d5a:	d002      	beq.n	8012d62 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8012d5c:	2302      	movs	r3, #2
 8012d5e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8012d60:	e103      	b.n	8012f6a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8012d62:	68bb      	ldr	r3, [r7, #8]
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d002      	beq.n	8012d6e <HAL_SPI_Transmit+0x52>
 8012d68:	88fb      	ldrh	r3, [r7, #6]
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d102      	bne.n	8012d74 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8012d6e:	2301      	movs	r3, #1
 8012d70:	77fb      	strb	r3, [r7, #31]
    goto error;
 8012d72:	e0fa      	b.n	8012f6a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8012d74:	68fb      	ldr	r3, [r7, #12]
 8012d76:	2203      	movs	r2, #3
 8012d78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012d7c:	68fb      	ldr	r3, [r7, #12]
 8012d7e:	2200      	movs	r2, #0
 8012d80:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8012d82:	68fb      	ldr	r3, [r7, #12]
 8012d84:	68ba      	ldr	r2, [r7, #8]
 8012d86:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8012d88:	68fb      	ldr	r3, [r7, #12]
 8012d8a:	88fa      	ldrh	r2, [r7, #6]
 8012d8c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8012d8e:	68fb      	ldr	r3, [r7, #12]
 8012d90:	88fa      	ldrh	r2, [r7, #6]
 8012d92:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8012d94:	68fb      	ldr	r3, [r7, #12]
 8012d96:	2200      	movs	r2, #0
 8012d98:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8012d9a:	68fb      	ldr	r3, [r7, #12]
 8012d9c:	2200      	movs	r2, #0
 8012d9e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8012da0:	68fb      	ldr	r3, [r7, #12]
 8012da2:	2200      	movs	r2, #0
 8012da4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8012da6:	68fb      	ldr	r3, [r7, #12]
 8012da8:	2200      	movs	r2, #0
 8012daa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8012dac:	68fb      	ldr	r3, [r7, #12]
 8012dae:	2200      	movs	r2, #0
 8012db0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012db2:	68fb      	ldr	r3, [r7, #12]
 8012db4:	689b      	ldr	r3, [r3, #8]
 8012db6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012dba:	d107      	bne.n	8012dcc <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8012dbc:	68fb      	ldr	r3, [r7, #12]
 8012dbe:	681b      	ldr	r3, [r3, #0]
 8012dc0:	681a      	ldr	r2, [r3, #0]
 8012dc2:	68fb      	ldr	r3, [r7, #12]
 8012dc4:	681b      	ldr	r3, [r3, #0]
 8012dc6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8012dca:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8012dcc:	68fb      	ldr	r3, [r7, #12]
 8012dce:	681b      	ldr	r3, [r3, #0]
 8012dd0:	681b      	ldr	r3, [r3, #0]
 8012dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012dd6:	2b40      	cmp	r3, #64	; 0x40
 8012dd8:	d007      	beq.n	8012dea <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8012dda:	68fb      	ldr	r3, [r7, #12]
 8012ddc:	681b      	ldr	r3, [r3, #0]
 8012dde:	681a      	ldr	r2, [r3, #0]
 8012de0:	68fb      	ldr	r3, [r7, #12]
 8012de2:	681b      	ldr	r3, [r3, #0]
 8012de4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012de8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8012dea:	68fb      	ldr	r3, [r7, #12]
 8012dec:	68db      	ldr	r3, [r3, #12]
 8012dee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012df2:	d14b      	bne.n	8012e8c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8012df4:	68fb      	ldr	r3, [r7, #12]
 8012df6:	685b      	ldr	r3, [r3, #4]
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	d002      	beq.n	8012e02 <HAL_SPI_Transmit+0xe6>
 8012dfc:	8afb      	ldrh	r3, [r7, #22]
 8012dfe:	2b01      	cmp	r3, #1
 8012e00:	d13e      	bne.n	8012e80 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8012e02:	68fb      	ldr	r3, [r7, #12]
 8012e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e06:	881a      	ldrh	r2, [r3, #0]
 8012e08:	68fb      	ldr	r3, [r7, #12]
 8012e0a:	681b      	ldr	r3, [r3, #0]
 8012e0c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8012e0e:	68fb      	ldr	r3, [r7, #12]
 8012e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e12:	1c9a      	adds	r2, r3, #2
 8012e14:	68fb      	ldr	r3, [r7, #12]
 8012e16:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8012e18:	68fb      	ldr	r3, [r7, #12]
 8012e1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012e1c:	b29b      	uxth	r3, r3
 8012e1e:	3b01      	subs	r3, #1
 8012e20:	b29a      	uxth	r2, r3
 8012e22:	68fb      	ldr	r3, [r7, #12]
 8012e24:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8012e26:	e02b      	b.n	8012e80 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8012e28:	68fb      	ldr	r3, [r7, #12]
 8012e2a:	681b      	ldr	r3, [r3, #0]
 8012e2c:	689b      	ldr	r3, [r3, #8]
 8012e2e:	f003 0302 	and.w	r3, r3, #2
 8012e32:	2b02      	cmp	r3, #2
 8012e34:	d112      	bne.n	8012e5c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8012e36:	68fb      	ldr	r3, [r7, #12]
 8012e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e3a:	881a      	ldrh	r2, [r3, #0]
 8012e3c:	68fb      	ldr	r3, [r7, #12]
 8012e3e:	681b      	ldr	r3, [r3, #0]
 8012e40:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8012e42:	68fb      	ldr	r3, [r7, #12]
 8012e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e46:	1c9a      	adds	r2, r3, #2
 8012e48:	68fb      	ldr	r3, [r7, #12]
 8012e4a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8012e4c:	68fb      	ldr	r3, [r7, #12]
 8012e4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012e50:	b29b      	uxth	r3, r3
 8012e52:	3b01      	subs	r3, #1
 8012e54:	b29a      	uxth	r2, r3
 8012e56:	68fb      	ldr	r3, [r7, #12]
 8012e58:	86da      	strh	r2, [r3, #54]	; 0x36
 8012e5a:	e011      	b.n	8012e80 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8012e5c:	f7fc fb9a 	bl	800f594 <HAL_GetTick>
 8012e60:	4602      	mov	r2, r0
 8012e62:	69bb      	ldr	r3, [r7, #24]
 8012e64:	1ad3      	subs	r3, r2, r3
 8012e66:	683a      	ldr	r2, [r7, #0]
 8012e68:	429a      	cmp	r2, r3
 8012e6a:	d803      	bhi.n	8012e74 <HAL_SPI_Transmit+0x158>
 8012e6c:	683b      	ldr	r3, [r7, #0]
 8012e6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012e72:	d102      	bne.n	8012e7a <HAL_SPI_Transmit+0x15e>
 8012e74:	683b      	ldr	r3, [r7, #0]
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	d102      	bne.n	8012e80 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8012e7a:	2303      	movs	r3, #3
 8012e7c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8012e7e:	e074      	b.n	8012f6a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8012e80:	68fb      	ldr	r3, [r7, #12]
 8012e82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012e84:	b29b      	uxth	r3, r3
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	d1ce      	bne.n	8012e28 <HAL_SPI_Transmit+0x10c>
 8012e8a:	e04c      	b.n	8012f26 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8012e8c:	68fb      	ldr	r3, [r7, #12]
 8012e8e:	685b      	ldr	r3, [r3, #4]
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d002      	beq.n	8012e9a <HAL_SPI_Transmit+0x17e>
 8012e94:	8afb      	ldrh	r3, [r7, #22]
 8012e96:	2b01      	cmp	r3, #1
 8012e98:	d140      	bne.n	8012f1c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8012e9a:	68fb      	ldr	r3, [r7, #12]
 8012e9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012e9e:	68fb      	ldr	r3, [r7, #12]
 8012ea0:	681b      	ldr	r3, [r3, #0]
 8012ea2:	330c      	adds	r3, #12
 8012ea4:	7812      	ldrb	r2, [r2, #0]
 8012ea6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8012ea8:	68fb      	ldr	r3, [r7, #12]
 8012eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012eac:	1c5a      	adds	r2, r3, #1
 8012eae:	68fb      	ldr	r3, [r7, #12]
 8012eb0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8012eb2:	68fb      	ldr	r3, [r7, #12]
 8012eb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012eb6:	b29b      	uxth	r3, r3
 8012eb8:	3b01      	subs	r3, #1
 8012eba:	b29a      	uxth	r2, r3
 8012ebc:	68fb      	ldr	r3, [r7, #12]
 8012ebe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8012ec0:	e02c      	b.n	8012f1c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8012ec2:	68fb      	ldr	r3, [r7, #12]
 8012ec4:	681b      	ldr	r3, [r3, #0]
 8012ec6:	689b      	ldr	r3, [r3, #8]
 8012ec8:	f003 0302 	and.w	r3, r3, #2
 8012ecc:	2b02      	cmp	r3, #2
 8012ece:	d113      	bne.n	8012ef8 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8012ed0:	68fb      	ldr	r3, [r7, #12]
 8012ed2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012ed4:	68fb      	ldr	r3, [r7, #12]
 8012ed6:	681b      	ldr	r3, [r3, #0]
 8012ed8:	330c      	adds	r3, #12
 8012eda:	7812      	ldrb	r2, [r2, #0]
 8012edc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8012ede:	68fb      	ldr	r3, [r7, #12]
 8012ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012ee2:	1c5a      	adds	r2, r3, #1
 8012ee4:	68fb      	ldr	r3, [r7, #12]
 8012ee6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8012ee8:	68fb      	ldr	r3, [r7, #12]
 8012eea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012eec:	b29b      	uxth	r3, r3
 8012eee:	3b01      	subs	r3, #1
 8012ef0:	b29a      	uxth	r2, r3
 8012ef2:	68fb      	ldr	r3, [r7, #12]
 8012ef4:	86da      	strh	r2, [r3, #54]	; 0x36
 8012ef6:	e011      	b.n	8012f1c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8012ef8:	f7fc fb4c 	bl	800f594 <HAL_GetTick>
 8012efc:	4602      	mov	r2, r0
 8012efe:	69bb      	ldr	r3, [r7, #24]
 8012f00:	1ad3      	subs	r3, r2, r3
 8012f02:	683a      	ldr	r2, [r7, #0]
 8012f04:	429a      	cmp	r2, r3
 8012f06:	d803      	bhi.n	8012f10 <HAL_SPI_Transmit+0x1f4>
 8012f08:	683b      	ldr	r3, [r7, #0]
 8012f0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012f0e:	d102      	bne.n	8012f16 <HAL_SPI_Transmit+0x1fa>
 8012f10:	683b      	ldr	r3, [r7, #0]
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	d102      	bne.n	8012f1c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8012f16:	2303      	movs	r3, #3
 8012f18:	77fb      	strb	r3, [r7, #31]
          goto error;
 8012f1a:	e026      	b.n	8012f6a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8012f1c:	68fb      	ldr	r3, [r7, #12]
 8012f1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012f20:	b29b      	uxth	r3, r3
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	d1cd      	bne.n	8012ec2 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8012f26:	69ba      	ldr	r2, [r7, #24]
 8012f28:	6839      	ldr	r1, [r7, #0]
 8012f2a:	68f8      	ldr	r0, [r7, #12]
 8012f2c:	f000 f894 	bl	8013058 <SPI_EndRxTxTransaction>
 8012f30:	4603      	mov	r3, r0
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	d002      	beq.n	8012f3c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8012f36:	68fb      	ldr	r3, [r7, #12]
 8012f38:	2220      	movs	r2, #32
 8012f3a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8012f3c:	68fb      	ldr	r3, [r7, #12]
 8012f3e:	689b      	ldr	r3, [r3, #8]
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d10a      	bne.n	8012f5a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8012f44:	2300      	movs	r3, #0
 8012f46:	613b      	str	r3, [r7, #16]
 8012f48:	68fb      	ldr	r3, [r7, #12]
 8012f4a:	681b      	ldr	r3, [r3, #0]
 8012f4c:	68db      	ldr	r3, [r3, #12]
 8012f4e:	613b      	str	r3, [r7, #16]
 8012f50:	68fb      	ldr	r3, [r7, #12]
 8012f52:	681b      	ldr	r3, [r3, #0]
 8012f54:	689b      	ldr	r3, [r3, #8]
 8012f56:	613b      	str	r3, [r7, #16]
 8012f58:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012f5a:	68fb      	ldr	r3, [r7, #12]
 8012f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d002      	beq.n	8012f68 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8012f62:	2301      	movs	r3, #1
 8012f64:	77fb      	strb	r3, [r7, #31]
 8012f66:	e000      	b.n	8012f6a <HAL_SPI_Transmit+0x24e>
  }

error:
 8012f68:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8012f6a:	68fb      	ldr	r3, [r7, #12]
 8012f6c:	2201      	movs	r2, #1
 8012f6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8012f72:	68fb      	ldr	r3, [r7, #12]
 8012f74:	2200      	movs	r2, #0
 8012f76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8012f7a:	7ffb      	ldrb	r3, [r7, #31]
}
 8012f7c:	4618      	mov	r0, r3
 8012f7e:	3720      	adds	r7, #32
 8012f80:	46bd      	mov	sp, r7
 8012f82:	bd80      	pop	{r7, pc}

08012f84 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8012f84:	b580      	push	{r7, lr}
 8012f86:	b084      	sub	sp, #16
 8012f88:	af00      	add	r7, sp, #0
 8012f8a:	60f8      	str	r0, [r7, #12]
 8012f8c:	60b9      	str	r1, [r7, #8]
 8012f8e:	603b      	str	r3, [r7, #0]
 8012f90:	4613      	mov	r3, r2
 8012f92:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8012f94:	e04c      	b.n	8013030 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8012f96:	683b      	ldr	r3, [r7, #0]
 8012f98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012f9c:	d048      	beq.n	8013030 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8012f9e:	f7fc faf9 	bl	800f594 <HAL_GetTick>
 8012fa2:	4602      	mov	r2, r0
 8012fa4:	69bb      	ldr	r3, [r7, #24]
 8012fa6:	1ad3      	subs	r3, r2, r3
 8012fa8:	683a      	ldr	r2, [r7, #0]
 8012faa:	429a      	cmp	r2, r3
 8012fac:	d902      	bls.n	8012fb4 <SPI_WaitFlagStateUntilTimeout+0x30>
 8012fae:	683b      	ldr	r3, [r7, #0]
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d13d      	bne.n	8013030 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8012fb4:	68fb      	ldr	r3, [r7, #12]
 8012fb6:	681b      	ldr	r3, [r3, #0]
 8012fb8:	685a      	ldr	r2, [r3, #4]
 8012fba:	68fb      	ldr	r3, [r7, #12]
 8012fbc:	681b      	ldr	r3, [r3, #0]
 8012fbe:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8012fc2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012fc4:	68fb      	ldr	r3, [r7, #12]
 8012fc6:	685b      	ldr	r3, [r3, #4]
 8012fc8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012fcc:	d111      	bne.n	8012ff2 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8012fce:	68fb      	ldr	r3, [r7, #12]
 8012fd0:	689b      	ldr	r3, [r3, #8]
 8012fd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012fd6:	d004      	beq.n	8012fe2 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8012fd8:	68fb      	ldr	r3, [r7, #12]
 8012fda:	689b      	ldr	r3, [r3, #8]
 8012fdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012fe0:	d107      	bne.n	8012ff2 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8012fe2:	68fb      	ldr	r3, [r7, #12]
 8012fe4:	681b      	ldr	r3, [r3, #0]
 8012fe6:	681a      	ldr	r2, [r3, #0]
 8012fe8:	68fb      	ldr	r3, [r7, #12]
 8012fea:	681b      	ldr	r3, [r3, #0]
 8012fec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012ff0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8012ff2:	68fb      	ldr	r3, [r7, #12]
 8012ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012ff6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012ffa:	d10f      	bne.n	801301c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8012ffc:	68fb      	ldr	r3, [r7, #12]
 8012ffe:	681b      	ldr	r3, [r3, #0]
 8013000:	681a      	ldr	r2, [r3, #0]
 8013002:	68fb      	ldr	r3, [r7, #12]
 8013004:	681b      	ldr	r3, [r3, #0]
 8013006:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801300a:	601a      	str	r2, [r3, #0]
 801300c:	68fb      	ldr	r3, [r7, #12]
 801300e:	681b      	ldr	r3, [r3, #0]
 8013010:	681a      	ldr	r2, [r3, #0]
 8013012:	68fb      	ldr	r3, [r7, #12]
 8013014:	681b      	ldr	r3, [r3, #0]
 8013016:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801301a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801301c:	68fb      	ldr	r3, [r7, #12]
 801301e:	2201      	movs	r2, #1
 8013020:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8013024:	68fb      	ldr	r3, [r7, #12]
 8013026:	2200      	movs	r2, #0
 8013028:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 801302c:	2303      	movs	r3, #3
 801302e:	e00f      	b.n	8013050 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8013030:	68fb      	ldr	r3, [r7, #12]
 8013032:	681b      	ldr	r3, [r3, #0]
 8013034:	689a      	ldr	r2, [r3, #8]
 8013036:	68bb      	ldr	r3, [r7, #8]
 8013038:	4013      	ands	r3, r2
 801303a:	68ba      	ldr	r2, [r7, #8]
 801303c:	429a      	cmp	r2, r3
 801303e:	bf0c      	ite	eq
 8013040:	2301      	moveq	r3, #1
 8013042:	2300      	movne	r3, #0
 8013044:	b2db      	uxtb	r3, r3
 8013046:	461a      	mov	r2, r3
 8013048:	79fb      	ldrb	r3, [r7, #7]
 801304a:	429a      	cmp	r2, r3
 801304c:	d1a3      	bne.n	8012f96 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 801304e:	2300      	movs	r3, #0
}
 8013050:	4618      	mov	r0, r3
 8013052:	3710      	adds	r7, #16
 8013054:	46bd      	mov	sp, r7
 8013056:	bd80      	pop	{r7, pc}

08013058 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8013058:	b580      	push	{r7, lr}
 801305a:	b088      	sub	sp, #32
 801305c:	af02      	add	r7, sp, #8
 801305e:	60f8      	str	r0, [r7, #12]
 8013060:	60b9      	str	r1, [r7, #8]
 8013062:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8013064:	4b1b      	ldr	r3, [pc, #108]	; (80130d4 <SPI_EndRxTxTransaction+0x7c>)
 8013066:	681b      	ldr	r3, [r3, #0]
 8013068:	4a1b      	ldr	r2, [pc, #108]	; (80130d8 <SPI_EndRxTxTransaction+0x80>)
 801306a:	fba2 2303 	umull	r2, r3, r2, r3
 801306e:	0d5b      	lsrs	r3, r3, #21
 8013070:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013074:	fb02 f303 	mul.w	r3, r2, r3
 8013078:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801307a:	68fb      	ldr	r3, [r7, #12]
 801307c:	685b      	ldr	r3, [r3, #4]
 801307e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013082:	d112      	bne.n	80130aa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	9300      	str	r3, [sp, #0]
 8013088:	68bb      	ldr	r3, [r7, #8]
 801308a:	2200      	movs	r2, #0
 801308c:	2180      	movs	r1, #128	; 0x80
 801308e:	68f8      	ldr	r0, [r7, #12]
 8013090:	f7ff ff78 	bl	8012f84 <SPI_WaitFlagStateUntilTimeout>
 8013094:	4603      	mov	r3, r0
 8013096:	2b00      	cmp	r3, #0
 8013098:	d016      	beq.n	80130c8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801309a:	68fb      	ldr	r3, [r7, #12]
 801309c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801309e:	f043 0220 	orr.w	r2, r3, #32
 80130a2:	68fb      	ldr	r3, [r7, #12]
 80130a4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80130a6:	2303      	movs	r3, #3
 80130a8:	e00f      	b.n	80130ca <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80130aa:	697b      	ldr	r3, [r7, #20]
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d00a      	beq.n	80130c6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80130b0:	697b      	ldr	r3, [r7, #20]
 80130b2:	3b01      	subs	r3, #1
 80130b4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80130b6:	68fb      	ldr	r3, [r7, #12]
 80130b8:	681b      	ldr	r3, [r3, #0]
 80130ba:	689b      	ldr	r3, [r3, #8]
 80130bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80130c0:	2b80      	cmp	r3, #128	; 0x80
 80130c2:	d0f2      	beq.n	80130aa <SPI_EndRxTxTransaction+0x52>
 80130c4:	e000      	b.n	80130c8 <SPI_EndRxTxTransaction+0x70>
        break;
 80130c6:	bf00      	nop
  }

  return HAL_OK;
 80130c8:	2300      	movs	r3, #0
}
 80130ca:	4618      	mov	r0, r3
 80130cc:	3718      	adds	r7, #24
 80130ce:	46bd      	mov	sp, r7
 80130d0:	bd80      	pop	{r7, pc}
 80130d2:	bf00      	nop
 80130d4:	20000158 	.word	0x20000158
 80130d8:	165e9f81 	.word	0x165e9f81

080130dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80130dc:	b580      	push	{r7, lr}
 80130de:	b082      	sub	sp, #8
 80130e0:	af00      	add	r7, sp, #0
 80130e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	d101      	bne.n	80130ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80130ea:	2301      	movs	r3, #1
 80130ec:	e01d      	b.n	801312a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80130f4:	b2db      	uxtb	r3, r3
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d106      	bne.n	8013108 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	2200      	movs	r2, #0
 80130fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8013102:	6878      	ldr	r0, [r7, #4]
 8013104:	f7fc f95a 	bl	800f3bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	2202      	movs	r2, #2
 801310c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	681a      	ldr	r2, [r3, #0]
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	3304      	adds	r3, #4
 8013118:	4619      	mov	r1, r3
 801311a:	4610      	mov	r0, r2
 801311c:	f000 f9ee 	bl	80134fc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	2201      	movs	r2, #1
 8013124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8013128:	2300      	movs	r3, #0
}
 801312a:	4618      	mov	r0, r3
 801312c:	3708      	adds	r7, #8
 801312e:	46bd      	mov	sp, r7
 8013130:	bd80      	pop	{r7, pc}

08013132 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8013132:	b580      	push	{r7, lr}
 8013134:	b082      	sub	sp, #8
 8013136:	af00      	add	r7, sp, #0
 8013138:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	2b00      	cmp	r3, #0
 801313e:	d101      	bne.n	8013144 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8013140:	2301      	movs	r3, #1
 8013142:	e01d      	b.n	8013180 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801314a:	b2db      	uxtb	r3, r3
 801314c:	2b00      	cmp	r3, #0
 801314e:	d106      	bne.n	801315e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	2200      	movs	r2, #0
 8013154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8013158:	6878      	ldr	r0, [r7, #4]
 801315a:	f000 f815 	bl	8013188 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	2202      	movs	r2, #2
 8013162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	681a      	ldr	r2, [r3, #0]
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	3304      	adds	r3, #4
 801316e:	4619      	mov	r1, r3
 8013170:	4610      	mov	r0, r2
 8013172:	f000 f9c3 	bl	80134fc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	2201      	movs	r2, #1
 801317a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801317e:	2300      	movs	r3, #0
}
 8013180:	4618      	mov	r0, r3
 8013182:	3708      	adds	r7, #8
 8013184:	46bd      	mov	sp, r7
 8013186:	bd80      	pop	{r7, pc}

08013188 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8013188:	b480      	push	{r7}
 801318a:	b083      	sub	sp, #12
 801318c:	af00      	add	r7, sp, #0
 801318e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8013190:	bf00      	nop
 8013192:	370c      	adds	r7, #12
 8013194:	46bd      	mov	sp, r7
 8013196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801319a:	4770      	bx	lr

0801319c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801319c:	b580      	push	{r7, lr}
 801319e:	b084      	sub	sp, #16
 80131a0:	af00      	add	r7, sp, #0
 80131a2:	6078      	str	r0, [r7, #4]
 80131a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	681b      	ldr	r3, [r3, #0]
 80131aa:	2201      	movs	r2, #1
 80131ac:	6839      	ldr	r1, [r7, #0]
 80131ae:	4618      	mov	r0, r3
 80131b0:	f000 fc4a 	bl	8013a48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	681b      	ldr	r3, [r3, #0]
 80131b8:	4a10      	ldr	r2, [pc, #64]	; (80131fc <HAL_TIM_PWM_Start+0x60>)
 80131ba:	4293      	cmp	r3, r2
 80131bc:	d107      	bne.n	80131ce <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	681b      	ldr	r3, [r3, #0]
 80131c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	681b      	ldr	r3, [r3, #0]
 80131c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80131cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	681b      	ldr	r3, [r3, #0]
 80131d2:	689b      	ldr	r3, [r3, #8]
 80131d4:	f003 0307 	and.w	r3, r3, #7
 80131d8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80131da:	68fb      	ldr	r3, [r7, #12]
 80131dc:	2b06      	cmp	r3, #6
 80131de:	d007      	beq.n	80131f0 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	681b      	ldr	r3, [r3, #0]
 80131e4:	681a      	ldr	r2, [r3, #0]
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	681b      	ldr	r3, [r3, #0]
 80131ea:	f042 0201 	orr.w	r2, r2, #1
 80131ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80131f0:	2300      	movs	r3, #0
}
 80131f2:	4618      	mov	r0, r3
 80131f4:	3710      	adds	r7, #16
 80131f6:	46bd      	mov	sp, r7
 80131f8:	bd80      	pop	{r7, pc}
 80131fa:	bf00      	nop
 80131fc:	40010000 	.word	0x40010000

08013200 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8013200:	b580      	push	{r7, lr}
 8013202:	b084      	sub	sp, #16
 8013204:	af00      	add	r7, sp, #0
 8013206:	60f8      	str	r0, [r7, #12]
 8013208:	60b9      	str	r1, [r7, #8]
 801320a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801320c:	68fb      	ldr	r3, [r7, #12]
 801320e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013212:	2b01      	cmp	r3, #1
 8013214:	d101      	bne.n	801321a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8013216:	2302      	movs	r3, #2
 8013218:	e0b4      	b.n	8013384 <HAL_TIM_PWM_ConfigChannel+0x184>
 801321a:	68fb      	ldr	r3, [r7, #12]
 801321c:	2201      	movs	r2, #1
 801321e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8013222:	68fb      	ldr	r3, [r7, #12]
 8013224:	2202      	movs	r2, #2
 8013226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	2b0c      	cmp	r3, #12
 801322e:	f200 809f 	bhi.w	8013370 <HAL_TIM_PWM_ConfigChannel+0x170>
 8013232:	a201      	add	r2, pc, #4	; (adr r2, 8013238 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8013234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013238:	0801326d 	.word	0x0801326d
 801323c:	08013371 	.word	0x08013371
 8013240:	08013371 	.word	0x08013371
 8013244:	08013371 	.word	0x08013371
 8013248:	080132ad 	.word	0x080132ad
 801324c:	08013371 	.word	0x08013371
 8013250:	08013371 	.word	0x08013371
 8013254:	08013371 	.word	0x08013371
 8013258:	080132ef 	.word	0x080132ef
 801325c:	08013371 	.word	0x08013371
 8013260:	08013371 	.word	0x08013371
 8013264:	08013371 	.word	0x08013371
 8013268:	0801332f 	.word	0x0801332f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801326c:	68fb      	ldr	r3, [r7, #12]
 801326e:	681b      	ldr	r3, [r3, #0]
 8013270:	68b9      	ldr	r1, [r7, #8]
 8013272:	4618      	mov	r0, r3
 8013274:	f000 f9c2 	bl	80135fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8013278:	68fb      	ldr	r3, [r7, #12]
 801327a:	681b      	ldr	r3, [r3, #0]
 801327c:	699a      	ldr	r2, [r3, #24]
 801327e:	68fb      	ldr	r3, [r7, #12]
 8013280:	681b      	ldr	r3, [r3, #0]
 8013282:	f042 0208 	orr.w	r2, r2, #8
 8013286:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8013288:	68fb      	ldr	r3, [r7, #12]
 801328a:	681b      	ldr	r3, [r3, #0]
 801328c:	699a      	ldr	r2, [r3, #24]
 801328e:	68fb      	ldr	r3, [r7, #12]
 8013290:	681b      	ldr	r3, [r3, #0]
 8013292:	f022 0204 	bic.w	r2, r2, #4
 8013296:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8013298:	68fb      	ldr	r3, [r7, #12]
 801329a:	681b      	ldr	r3, [r3, #0]
 801329c:	6999      	ldr	r1, [r3, #24]
 801329e:	68bb      	ldr	r3, [r7, #8]
 80132a0:	691a      	ldr	r2, [r3, #16]
 80132a2:	68fb      	ldr	r3, [r7, #12]
 80132a4:	681b      	ldr	r3, [r3, #0]
 80132a6:	430a      	orrs	r2, r1
 80132a8:	619a      	str	r2, [r3, #24]
      break;
 80132aa:	e062      	b.n	8013372 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80132ac:	68fb      	ldr	r3, [r7, #12]
 80132ae:	681b      	ldr	r3, [r3, #0]
 80132b0:	68b9      	ldr	r1, [r7, #8]
 80132b2:	4618      	mov	r0, r3
 80132b4:	f000 fa08 	bl	80136c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80132b8:	68fb      	ldr	r3, [r7, #12]
 80132ba:	681b      	ldr	r3, [r3, #0]
 80132bc:	699a      	ldr	r2, [r3, #24]
 80132be:	68fb      	ldr	r3, [r7, #12]
 80132c0:	681b      	ldr	r3, [r3, #0]
 80132c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80132c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80132c8:	68fb      	ldr	r3, [r7, #12]
 80132ca:	681b      	ldr	r3, [r3, #0]
 80132cc:	699a      	ldr	r2, [r3, #24]
 80132ce:	68fb      	ldr	r3, [r7, #12]
 80132d0:	681b      	ldr	r3, [r3, #0]
 80132d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80132d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80132d8:	68fb      	ldr	r3, [r7, #12]
 80132da:	681b      	ldr	r3, [r3, #0]
 80132dc:	6999      	ldr	r1, [r3, #24]
 80132de:	68bb      	ldr	r3, [r7, #8]
 80132e0:	691b      	ldr	r3, [r3, #16]
 80132e2:	021a      	lsls	r2, r3, #8
 80132e4:	68fb      	ldr	r3, [r7, #12]
 80132e6:	681b      	ldr	r3, [r3, #0]
 80132e8:	430a      	orrs	r2, r1
 80132ea:	619a      	str	r2, [r3, #24]
      break;
 80132ec:	e041      	b.n	8013372 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80132ee:	68fb      	ldr	r3, [r7, #12]
 80132f0:	681b      	ldr	r3, [r3, #0]
 80132f2:	68b9      	ldr	r1, [r7, #8]
 80132f4:	4618      	mov	r0, r3
 80132f6:	f000 fa53 	bl	80137a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80132fa:	68fb      	ldr	r3, [r7, #12]
 80132fc:	681b      	ldr	r3, [r3, #0]
 80132fe:	69da      	ldr	r2, [r3, #28]
 8013300:	68fb      	ldr	r3, [r7, #12]
 8013302:	681b      	ldr	r3, [r3, #0]
 8013304:	f042 0208 	orr.w	r2, r2, #8
 8013308:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801330a:	68fb      	ldr	r3, [r7, #12]
 801330c:	681b      	ldr	r3, [r3, #0]
 801330e:	69da      	ldr	r2, [r3, #28]
 8013310:	68fb      	ldr	r3, [r7, #12]
 8013312:	681b      	ldr	r3, [r3, #0]
 8013314:	f022 0204 	bic.w	r2, r2, #4
 8013318:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801331a:	68fb      	ldr	r3, [r7, #12]
 801331c:	681b      	ldr	r3, [r3, #0]
 801331e:	69d9      	ldr	r1, [r3, #28]
 8013320:	68bb      	ldr	r3, [r7, #8]
 8013322:	691a      	ldr	r2, [r3, #16]
 8013324:	68fb      	ldr	r3, [r7, #12]
 8013326:	681b      	ldr	r3, [r3, #0]
 8013328:	430a      	orrs	r2, r1
 801332a:	61da      	str	r2, [r3, #28]
      break;
 801332c:	e021      	b.n	8013372 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801332e:	68fb      	ldr	r3, [r7, #12]
 8013330:	681b      	ldr	r3, [r3, #0]
 8013332:	68b9      	ldr	r1, [r7, #8]
 8013334:	4618      	mov	r0, r3
 8013336:	f000 fa9d 	bl	8013874 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801333a:	68fb      	ldr	r3, [r7, #12]
 801333c:	681b      	ldr	r3, [r3, #0]
 801333e:	69da      	ldr	r2, [r3, #28]
 8013340:	68fb      	ldr	r3, [r7, #12]
 8013342:	681b      	ldr	r3, [r3, #0]
 8013344:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8013348:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801334a:	68fb      	ldr	r3, [r7, #12]
 801334c:	681b      	ldr	r3, [r3, #0]
 801334e:	69da      	ldr	r2, [r3, #28]
 8013350:	68fb      	ldr	r3, [r7, #12]
 8013352:	681b      	ldr	r3, [r3, #0]
 8013354:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013358:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801335a:	68fb      	ldr	r3, [r7, #12]
 801335c:	681b      	ldr	r3, [r3, #0]
 801335e:	69d9      	ldr	r1, [r3, #28]
 8013360:	68bb      	ldr	r3, [r7, #8]
 8013362:	691b      	ldr	r3, [r3, #16]
 8013364:	021a      	lsls	r2, r3, #8
 8013366:	68fb      	ldr	r3, [r7, #12]
 8013368:	681b      	ldr	r3, [r3, #0]
 801336a:	430a      	orrs	r2, r1
 801336c:	61da      	str	r2, [r3, #28]
      break;
 801336e:	e000      	b.n	8013372 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8013370:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8013372:	68fb      	ldr	r3, [r7, #12]
 8013374:	2201      	movs	r2, #1
 8013376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801337a:	68fb      	ldr	r3, [r7, #12]
 801337c:	2200      	movs	r2, #0
 801337e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8013382:	2300      	movs	r3, #0
}
 8013384:	4618      	mov	r0, r3
 8013386:	3710      	adds	r7, #16
 8013388:	46bd      	mov	sp, r7
 801338a:	bd80      	pop	{r7, pc}

0801338c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801338c:	b580      	push	{r7, lr}
 801338e:	b084      	sub	sp, #16
 8013390:	af00      	add	r7, sp, #0
 8013392:	6078      	str	r0, [r7, #4]
 8013394:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801339c:	2b01      	cmp	r3, #1
 801339e:	d101      	bne.n	80133a4 <HAL_TIM_ConfigClockSource+0x18>
 80133a0:	2302      	movs	r3, #2
 80133a2:	e0a6      	b.n	80134f2 <HAL_TIM_ConfigClockSource+0x166>
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	2201      	movs	r2, #1
 80133a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	2202      	movs	r2, #2
 80133b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	681b      	ldr	r3, [r3, #0]
 80133b8:	689b      	ldr	r3, [r3, #8]
 80133ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80133bc:	68fb      	ldr	r3, [r7, #12]
 80133be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80133c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80133c4:	68fb      	ldr	r3, [r7, #12]
 80133c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80133ca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	681b      	ldr	r3, [r3, #0]
 80133d0:	68fa      	ldr	r2, [r7, #12]
 80133d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80133d4:	683b      	ldr	r3, [r7, #0]
 80133d6:	681b      	ldr	r3, [r3, #0]
 80133d8:	2b40      	cmp	r3, #64	; 0x40
 80133da:	d067      	beq.n	80134ac <HAL_TIM_ConfigClockSource+0x120>
 80133dc:	2b40      	cmp	r3, #64	; 0x40
 80133de:	d80b      	bhi.n	80133f8 <HAL_TIM_ConfigClockSource+0x6c>
 80133e0:	2b10      	cmp	r3, #16
 80133e2:	d073      	beq.n	80134cc <HAL_TIM_ConfigClockSource+0x140>
 80133e4:	2b10      	cmp	r3, #16
 80133e6:	d802      	bhi.n	80133ee <HAL_TIM_ConfigClockSource+0x62>
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	d06f      	beq.n	80134cc <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80133ec:	e078      	b.n	80134e0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80133ee:	2b20      	cmp	r3, #32
 80133f0:	d06c      	beq.n	80134cc <HAL_TIM_ConfigClockSource+0x140>
 80133f2:	2b30      	cmp	r3, #48	; 0x30
 80133f4:	d06a      	beq.n	80134cc <HAL_TIM_ConfigClockSource+0x140>
      break;
 80133f6:	e073      	b.n	80134e0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80133f8:	2b70      	cmp	r3, #112	; 0x70
 80133fa:	d00d      	beq.n	8013418 <HAL_TIM_ConfigClockSource+0x8c>
 80133fc:	2b70      	cmp	r3, #112	; 0x70
 80133fe:	d804      	bhi.n	801340a <HAL_TIM_ConfigClockSource+0x7e>
 8013400:	2b50      	cmp	r3, #80	; 0x50
 8013402:	d033      	beq.n	801346c <HAL_TIM_ConfigClockSource+0xe0>
 8013404:	2b60      	cmp	r3, #96	; 0x60
 8013406:	d041      	beq.n	801348c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8013408:	e06a      	b.n	80134e0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 801340a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801340e:	d066      	beq.n	80134de <HAL_TIM_ConfigClockSource+0x152>
 8013410:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013414:	d017      	beq.n	8013446 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8013416:	e063      	b.n	80134e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	6818      	ldr	r0, [r3, #0]
 801341c:	683b      	ldr	r3, [r7, #0]
 801341e:	6899      	ldr	r1, [r3, #8]
 8013420:	683b      	ldr	r3, [r7, #0]
 8013422:	685a      	ldr	r2, [r3, #4]
 8013424:	683b      	ldr	r3, [r7, #0]
 8013426:	68db      	ldr	r3, [r3, #12]
 8013428:	f000 faee 	bl	8013a08 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	681b      	ldr	r3, [r3, #0]
 8013430:	689b      	ldr	r3, [r3, #8]
 8013432:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8013434:	68fb      	ldr	r3, [r7, #12]
 8013436:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 801343a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	681b      	ldr	r3, [r3, #0]
 8013440:	68fa      	ldr	r2, [r7, #12]
 8013442:	609a      	str	r2, [r3, #8]
      break;
 8013444:	e04c      	b.n	80134e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	6818      	ldr	r0, [r3, #0]
 801344a:	683b      	ldr	r3, [r7, #0]
 801344c:	6899      	ldr	r1, [r3, #8]
 801344e:	683b      	ldr	r3, [r7, #0]
 8013450:	685a      	ldr	r2, [r3, #4]
 8013452:	683b      	ldr	r3, [r7, #0]
 8013454:	68db      	ldr	r3, [r3, #12]
 8013456:	f000 fad7 	bl	8013a08 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	681b      	ldr	r3, [r3, #0]
 801345e:	689a      	ldr	r2, [r3, #8]
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	681b      	ldr	r3, [r3, #0]
 8013464:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8013468:	609a      	str	r2, [r3, #8]
      break;
 801346a:	e039      	b.n	80134e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	6818      	ldr	r0, [r3, #0]
 8013470:	683b      	ldr	r3, [r7, #0]
 8013472:	6859      	ldr	r1, [r3, #4]
 8013474:	683b      	ldr	r3, [r7, #0]
 8013476:	68db      	ldr	r3, [r3, #12]
 8013478:	461a      	mov	r2, r3
 801347a:	f000 fa4b 	bl	8013914 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	681b      	ldr	r3, [r3, #0]
 8013482:	2150      	movs	r1, #80	; 0x50
 8013484:	4618      	mov	r0, r3
 8013486:	f000 faa4 	bl	80139d2 <TIM_ITRx_SetConfig>
      break;
 801348a:	e029      	b.n	80134e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	6818      	ldr	r0, [r3, #0]
 8013490:	683b      	ldr	r3, [r7, #0]
 8013492:	6859      	ldr	r1, [r3, #4]
 8013494:	683b      	ldr	r3, [r7, #0]
 8013496:	68db      	ldr	r3, [r3, #12]
 8013498:	461a      	mov	r2, r3
 801349a:	f000 fa6a 	bl	8013972 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	681b      	ldr	r3, [r3, #0]
 80134a2:	2160      	movs	r1, #96	; 0x60
 80134a4:	4618      	mov	r0, r3
 80134a6:	f000 fa94 	bl	80139d2 <TIM_ITRx_SetConfig>
      break;
 80134aa:	e019      	b.n	80134e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	6818      	ldr	r0, [r3, #0]
 80134b0:	683b      	ldr	r3, [r7, #0]
 80134b2:	6859      	ldr	r1, [r3, #4]
 80134b4:	683b      	ldr	r3, [r7, #0]
 80134b6:	68db      	ldr	r3, [r3, #12]
 80134b8:	461a      	mov	r2, r3
 80134ba:	f000 fa2b 	bl	8013914 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	681b      	ldr	r3, [r3, #0]
 80134c2:	2140      	movs	r1, #64	; 0x40
 80134c4:	4618      	mov	r0, r3
 80134c6:	f000 fa84 	bl	80139d2 <TIM_ITRx_SetConfig>
      break;
 80134ca:	e009      	b.n	80134e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	681a      	ldr	r2, [r3, #0]
 80134d0:	683b      	ldr	r3, [r7, #0]
 80134d2:	681b      	ldr	r3, [r3, #0]
 80134d4:	4619      	mov	r1, r3
 80134d6:	4610      	mov	r0, r2
 80134d8:	f000 fa7b 	bl	80139d2 <TIM_ITRx_SetConfig>
      break;
 80134dc:	e000      	b.n	80134e0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80134de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	2201      	movs	r2, #1
 80134e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	2200      	movs	r2, #0
 80134ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80134f0:	2300      	movs	r3, #0
}
 80134f2:	4618      	mov	r0, r3
 80134f4:	3710      	adds	r7, #16
 80134f6:	46bd      	mov	sp, r7
 80134f8:	bd80      	pop	{r7, pc}
	...

080134fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80134fc:	b480      	push	{r7}
 80134fe:	b085      	sub	sp, #20
 8013500:	af00      	add	r7, sp, #0
 8013502:	6078      	str	r0, [r7, #4]
 8013504:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	681b      	ldr	r3, [r3, #0]
 801350a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	4a34      	ldr	r2, [pc, #208]	; (80135e0 <TIM_Base_SetConfig+0xe4>)
 8013510:	4293      	cmp	r3, r2
 8013512:	d00f      	beq.n	8013534 <TIM_Base_SetConfig+0x38>
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801351a:	d00b      	beq.n	8013534 <TIM_Base_SetConfig+0x38>
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	4a31      	ldr	r2, [pc, #196]	; (80135e4 <TIM_Base_SetConfig+0xe8>)
 8013520:	4293      	cmp	r3, r2
 8013522:	d007      	beq.n	8013534 <TIM_Base_SetConfig+0x38>
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	4a30      	ldr	r2, [pc, #192]	; (80135e8 <TIM_Base_SetConfig+0xec>)
 8013528:	4293      	cmp	r3, r2
 801352a:	d003      	beq.n	8013534 <TIM_Base_SetConfig+0x38>
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	4a2f      	ldr	r2, [pc, #188]	; (80135ec <TIM_Base_SetConfig+0xf0>)
 8013530:	4293      	cmp	r3, r2
 8013532:	d108      	bne.n	8013546 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8013534:	68fb      	ldr	r3, [r7, #12]
 8013536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801353a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801353c:	683b      	ldr	r3, [r7, #0]
 801353e:	685b      	ldr	r3, [r3, #4]
 8013540:	68fa      	ldr	r2, [r7, #12]
 8013542:	4313      	orrs	r3, r2
 8013544:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	4a25      	ldr	r2, [pc, #148]	; (80135e0 <TIM_Base_SetConfig+0xe4>)
 801354a:	4293      	cmp	r3, r2
 801354c:	d01b      	beq.n	8013586 <TIM_Base_SetConfig+0x8a>
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013554:	d017      	beq.n	8013586 <TIM_Base_SetConfig+0x8a>
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	4a22      	ldr	r2, [pc, #136]	; (80135e4 <TIM_Base_SetConfig+0xe8>)
 801355a:	4293      	cmp	r3, r2
 801355c:	d013      	beq.n	8013586 <TIM_Base_SetConfig+0x8a>
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	4a21      	ldr	r2, [pc, #132]	; (80135e8 <TIM_Base_SetConfig+0xec>)
 8013562:	4293      	cmp	r3, r2
 8013564:	d00f      	beq.n	8013586 <TIM_Base_SetConfig+0x8a>
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	4a20      	ldr	r2, [pc, #128]	; (80135ec <TIM_Base_SetConfig+0xf0>)
 801356a:	4293      	cmp	r3, r2
 801356c:	d00b      	beq.n	8013586 <TIM_Base_SetConfig+0x8a>
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	4a1f      	ldr	r2, [pc, #124]	; (80135f0 <TIM_Base_SetConfig+0xf4>)
 8013572:	4293      	cmp	r3, r2
 8013574:	d007      	beq.n	8013586 <TIM_Base_SetConfig+0x8a>
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	4a1e      	ldr	r2, [pc, #120]	; (80135f4 <TIM_Base_SetConfig+0xf8>)
 801357a:	4293      	cmp	r3, r2
 801357c:	d003      	beq.n	8013586 <TIM_Base_SetConfig+0x8a>
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	4a1d      	ldr	r2, [pc, #116]	; (80135f8 <TIM_Base_SetConfig+0xfc>)
 8013582:	4293      	cmp	r3, r2
 8013584:	d108      	bne.n	8013598 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8013586:	68fb      	ldr	r3, [r7, #12]
 8013588:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801358c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801358e:	683b      	ldr	r3, [r7, #0]
 8013590:	68db      	ldr	r3, [r3, #12]
 8013592:	68fa      	ldr	r2, [r7, #12]
 8013594:	4313      	orrs	r3, r2
 8013596:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8013598:	68fb      	ldr	r3, [r7, #12]
 801359a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801359e:	683b      	ldr	r3, [r7, #0]
 80135a0:	695b      	ldr	r3, [r3, #20]
 80135a2:	4313      	orrs	r3, r2
 80135a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	68fa      	ldr	r2, [r7, #12]
 80135aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80135ac:	683b      	ldr	r3, [r7, #0]
 80135ae:	689a      	ldr	r2, [r3, #8]
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80135b4:	683b      	ldr	r3, [r7, #0]
 80135b6:	681a      	ldr	r2, [r3, #0]
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	4a08      	ldr	r2, [pc, #32]	; (80135e0 <TIM_Base_SetConfig+0xe4>)
 80135c0:	4293      	cmp	r3, r2
 80135c2:	d103      	bne.n	80135cc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80135c4:	683b      	ldr	r3, [r7, #0]
 80135c6:	691a      	ldr	r2, [r3, #16]
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	2201      	movs	r2, #1
 80135d0:	615a      	str	r2, [r3, #20]
}
 80135d2:	bf00      	nop
 80135d4:	3714      	adds	r7, #20
 80135d6:	46bd      	mov	sp, r7
 80135d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135dc:	4770      	bx	lr
 80135de:	bf00      	nop
 80135e0:	40010000 	.word	0x40010000
 80135e4:	40000400 	.word	0x40000400
 80135e8:	40000800 	.word	0x40000800
 80135ec:	40000c00 	.word	0x40000c00
 80135f0:	40014000 	.word	0x40014000
 80135f4:	40014400 	.word	0x40014400
 80135f8:	40014800 	.word	0x40014800

080135fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80135fc:	b480      	push	{r7}
 80135fe:	b087      	sub	sp, #28
 8013600:	af00      	add	r7, sp, #0
 8013602:	6078      	str	r0, [r7, #4]
 8013604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	6a1b      	ldr	r3, [r3, #32]
 801360a:	f023 0201 	bic.w	r2, r3, #1
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	6a1b      	ldr	r3, [r3, #32]
 8013616:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	685b      	ldr	r3, [r3, #4]
 801361c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	699b      	ldr	r3, [r3, #24]
 8013622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8013624:	68fb      	ldr	r3, [r7, #12]
 8013626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801362a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801362c:	68fb      	ldr	r3, [r7, #12]
 801362e:	f023 0303 	bic.w	r3, r3, #3
 8013632:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013634:	683b      	ldr	r3, [r7, #0]
 8013636:	681b      	ldr	r3, [r3, #0]
 8013638:	68fa      	ldr	r2, [r7, #12]
 801363a:	4313      	orrs	r3, r2
 801363c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801363e:	697b      	ldr	r3, [r7, #20]
 8013640:	f023 0302 	bic.w	r3, r3, #2
 8013644:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8013646:	683b      	ldr	r3, [r7, #0]
 8013648:	689b      	ldr	r3, [r3, #8]
 801364a:	697a      	ldr	r2, [r7, #20]
 801364c:	4313      	orrs	r3, r2
 801364e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	4a1c      	ldr	r2, [pc, #112]	; (80136c4 <TIM_OC1_SetConfig+0xc8>)
 8013654:	4293      	cmp	r3, r2
 8013656:	d10c      	bne.n	8013672 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8013658:	697b      	ldr	r3, [r7, #20]
 801365a:	f023 0308 	bic.w	r3, r3, #8
 801365e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8013660:	683b      	ldr	r3, [r7, #0]
 8013662:	68db      	ldr	r3, [r3, #12]
 8013664:	697a      	ldr	r2, [r7, #20]
 8013666:	4313      	orrs	r3, r2
 8013668:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801366a:	697b      	ldr	r3, [r7, #20]
 801366c:	f023 0304 	bic.w	r3, r3, #4
 8013670:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	4a13      	ldr	r2, [pc, #76]	; (80136c4 <TIM_OC1_SetConfig+0xc8>)
 8013676:	4293      	cmp	r3, r2
 8013678:	d111      	bne.n	801369e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801367a:	693b      	ldr	r3, [r7, #16]
 801367c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013680:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8013682:	693b      	ldr	r3, [r7, #16]
 8013684:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8013688:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801368a:	683b      	ldr	r3, [r7, #0]
 801368c:	695b      	ldr	r3, [r3, #20]
 801368e:	693a      	ldr	r2, [r7, #16]
 8013690:	4313      	orrs	r3, r2
 8013692:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8013694:	683b      	ldr	r3, [r7, #0]
 8013696:	699b      	ldr	r3, [r3, #24]
 8013698:	693a      	ldr	r2, [r7, #16]
 801369a:	4313      	orrs	r3, r2
 801369c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	693a      	ldr	r2, [r7, #16]
 80136a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	68fa      	ldr	r2, [r7, #12]
 80136a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80136aa:	683b      	ldr	r3, [r7, #0]
 80136ac:	685a      	ldr	r2, [r3, #4]
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	697a      	ldr	r2, [r7, #20]
 80136b6:	621a      	str	r2, [r3, #32]
}
 80136b8:	bf00      	nop
 80136ba:	371c      	adds	r7, #28
 80136bc:	46bd      	mov	sp, r7
 80136be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136c2:	4770      	bx	lr
 80136c4:	40010000 	.word	0x40010000

080136c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80136c8:	b480      	push	{r7}
 80136ca:	b087      	sub	sp, #28
 80136cc:	af00      	add	r7, sp, #0
 80136ce:	6078      	str	r0, [r7, #4]
 80136d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	6a1b      	ldr	r3, [r3, #32]
 80136d6:	f023 0210 	bic.w	r2, r3, #16
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	6a1b      	ldr	r3, [r3, #32]
 80136e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	685b      	ldr	r3, [r3, #4]
 80136e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	699b      	ldr	r3, [r3, #24]
 80136ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80136f0:	68fb      	ldr	r3, [r7, #12]
 80136f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80136f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80136f8:	68fb      	ldr	r3, [r7, #12]
 80136fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80136fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013700:	683b      	ldr	r3, [r7, #0]
 8013702:	681b      	ldr	r3, [r3, #0]
 8013704:	021b      	lsls	r3, r3, #8
 8013706:	68fa      	ldr	r2, [r7, #12]
 8013708:	4313      	orrs	r3, r2
 801370a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801370c:	697b      	ldr	r3, [r7, #20]
 801370e:	f023 0320 	bic.w	r3, r3, #32
 8013712:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8013714:	683b      	ldr	r3, [r7, #0]
 8013716:	689b      	ldr	r3, [r3, #8]
 8013718:	011b      	lsls	r3, r3, #4
 801371a:	697a      	ldr	r2, [r7, #20]
 801371c:	4313      	orrs	r3, r2
 801371e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	4a1e      	ldr	r2, [pc, #120]	; (801379c <TIM_OC2_SetConfig+0xd4>)
 8013724:	4293      	cmp	r3, r2
 8013726:	d10d      	bne.n	8013744 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8013728:	697b      	ldr	r3, [r7, #20]
 801372a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801372e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8013730:	683b      	ldr	r3, [r7, #0]
 8013732:	68db      	ldr	r3, [r3, #12]
 8013734:	011b      	lsls	r3, r3, #4
 8013736:	697a      	ldr	r2, [r7, #20]
 8013738:	4313      	orrs	r3, r2
 801373a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801373c:	697b      	ldr	r3, [r7, #20]
 801373e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013742:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	4a15      	ldr	r2, [pc, #84]	; (801379c <TIM_OC2_SetConfig+0xd4>)
 8013748:	4293      	cmp	r3, r2
 801374a:	d113      	bne.n	8013774 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801374c:	693b      	ldr	r3, [r7, #16]
 801374e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8013752:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8013754:	693b      	ldr	r3, [r7, #16]
 8013756:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801375a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801375c:	683b      	ldr	r3, [r7, #0]
 801375e:	695b      	ldr	r3, [r3, #20]
 8013760:	009b      	lsls	r3, r3, #2
 8013762:	693a      	ldr	r2, [r7, #16]
 8013764:	4313      	orrs	r3, r2
 8013766:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8013768:	683b      	ldr	r3, [r7, #0]
 801376a:	699b      	ldr	r3, [r3, #24]
 801376c:	009b      	lsls	r3, r3, #2
 801376e:	693a      	ldr	r2, [r7, #16]
 8013770:	4313      	orrs	r3, r2
 8013772:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	693a      	ldr	r2, [r7, #16]
 8013778:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	68fa      	ldr	r2, [r7, #12]
 801377e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8013780:	683b      	ldr	r3, [r7, #0]
 8013782:	685a      	ldr	r2, [r3, #4]
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	697a      	ldr	r2, [r7, #20]
 801378c:	621a      	str	r2, [r3, #32]
}
 801378e:	bf00      	nop
 8013790:	371c      	adds	r7, #28
 8013792:	46bd      	mov	sp, r7
 8013794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013798:	4770      	bx	lr
 801379a:	bf00      	nop
 801379c:	40010000 	.word	0x40010000

080137a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80137a0:	b480      	push	{r7}
 80137a2:	b087      	sub	sp, #28
 80137a4:	af00      	add	r7, sp, #0
 80137a6:	6078      	str	r0, [r7, #4]
 80137a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	6a1b      	ldr	r3, [r3, #32]
 80137ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	6a1b      	ldr	r3, [r3, #32]
 80137ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	685b      	ldr	r3, [r3, #4]
 80137c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	69db      	ldr	r3, [r3, #28]
 80137c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80137c8:	68fb      	ldr	r3, [r7, #12]
 80137ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80137ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80137d0:	68fb      	ldr	r3, [r7, #12]
 80137d2:	f023 0303 	bic.w	r3, r3, #3
 80137d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80137d8:	683b      	ldr	r3, [r7, #0]
 80137da:	681b      	ldr	r3, [r3, #0]
 80137dc:	68fa      	ldr	r2, [r7, #12]
 80137de:	4313      	orrs	r3, r2
 80137e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80137e2:	697b      	ldr	r3, [r7, #20]
 80137e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80137e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80137ea:	683b      	ldr	r3, [r7, #0]
 80137ec:	689b      	ldr	r3, [r3, #8]
 80137ee:	021b      	lsls	r3, r3, #8
 80137f0:	697a      	ldr	r2, [r7, #20]
 80137f2:	4313      	orrs	r3, r2
 80137f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	4a1d      	ldr	r2, [pc, #116]	; (8013870 <TIM_OC3_SetConfig+0xd0>)
 80137fa:	4293      	cmp	r3, r2
 80137fc:	d10d      	bne.n	801381a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80137fe:	697b      	ldr	r3, [r7, #20]
 8013800:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013804:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8013806:	683b      	ldr	r3, [r7, #0]
 8013808:	68db      	ldr	r3, [r3, #12]
 801380a:	021b      	lsls	r3, r3, #8
 801380c:	697a      	ldr	r2, [r7, #20]
 801380e:	4313      	orrs	r3, r2
 8013810:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8013812:	697b      	ldr	r3, [r7, #20]
 8013814:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8013818:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	4a14      	ldr	r2, [pc, #80]	; (8013870 <TIM_OC3_SetConfig+0xd0>)
 801381e:	4293      	cmp	r3, r2
 8013820:	d113      	bne.n	801384a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8013822:	693b      	ldr	r3, [r7, #16]
 8013824:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013828:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801382a:	693b      	ldr	r3, [r7, #16]
 801382c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8013830:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8013832:	683b      	ldr	r3, [r7, #0]
 8013834:	695b      	ldr	r3, [r3, #20]
 8013836:	011b      	lsls	r3, r3, #4
 8013838:	693a      	ldr	r2, [r7, #16]
 801383a:	4313      	orrs	r3, r2
 801383c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801383e:	683b      	ldr	r3, [r7, #0]
 8013840:	699b      	ldr	r3, [r3, #24]
 8013842:	011b      	lsls	r3, r3, #4
 8013844:	693a      	ldr	r2, [r7, #16]
 8013846:	4313      	orrs	r3, r2
 8013848:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	693a      	ldr	r2, [r7, #16]
 801384e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	68fa      	ldr	r2, [r7, #12]
 8013854:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8013856:	683b      	ldr	r3, [r7, #0]
 8013858:	685a      	ldr	r2, [r3, #4]
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	697a      	ldr	r2, [r7, #20]
 8013862:	621a      	str	r2, [r3, #32]
}
 8013864:	bf00      	nop
 8013866:	371c      	adds	r7, #28
 8013868:	46bd      	mov	sp, r7
 801386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801386e:	4770      	bx	lr
 8013870:	40010000 	.word	0x40010000

08013874 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8013874:	b480      	push	{r7}
 8013876:	b087      	sub	sp, #28
 8013878:	af00      	add	r7, sp, #0
 801387a:	6078      	str	r0, [r7, #4]
 801387c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	6a1b      	ldr	r3, [r3, #32]
 8013882:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	6a1b      	ldr	r3, [r3, #32]
 801388e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	685b      	ldr	r3, [r3, #4]
 8013894:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	69db      	ldr	r3, [r3, #28]
 801389a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801389c:	68fb      	ldr	r3, [r7, #12]
 801389e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80138a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80138a4:	68fb      	ldr	r3, [r7, #12]
 80138a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80138aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80138ac:	683b      	ldr	r3, [r7, #0]
 80138ae:	681b      	ldr	r3, [r3, #0]
 80138b0:	021b      	lsls	r3, r3, #8
 80138b2:	68fa      	ldr	r2, [r7, #12]
 80138b4:	4313      	orrs	r3, r2
 80138b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80138b8:	693b      	ldr	r3, [r7, #16]
 80138ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80138be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80138c0:	683b      	ldr	r3, [r7, #0]
 80138c2:	689b      	ldr	r3, [r3, #8]
 80138c4:	031b      	lsls	r3, r3, #12
 80138c6:	693a      	ldr	r2, [r7, #16]
 80138c8:	4313      	orrs	r3, r2
 80138ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	4a10      	ldr	r2, [pc, #64]	; (8013910 <TIM_OC4_SetConfig+0x9c>)
 80138d0:	4293      	cmp	r3, r2
 80138d2:	d109      	bne.n	80138e8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80138d4:	697b      	ldr	r3, [r7, #20]
 80138d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80138da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80138dc:	683b      	ldr	r3, [r7, #0]
 80138de:	695b      	ldr	r3, [r3, #20]
 80138e0:	019b      	lsls	r3, r3, #6
 80138e2:	697a      	ldr	r2, [r7, #20]
 80138e4:	4313      	orrs	r3, r2
 80138e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	697a      	ldr	r2, [r7, #20]
 80138ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	68fa      	ldr	r2, [r7, #12]
 80138f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80138f4:	683b      	ldr	r3, [r7, #0]
 80138f6:	685a      	ldr	r2, [r3, #4]
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	693a      	ldr	r2, [r7, #16]
 8013900:	621a      	str	r2, [r3, #32]
}
 8013902:	bf00      	nop
 8013904:	371c      	adds	r7, #28
 8013906:	46bd      	mov	sp, r7
 8013908:	f85d 7b04 	ldr.w	r7, [sp], #4
 801390c:	4770      	bx	lr
 801390e:	bf00      	nop
 8013910:	40010000 	.word	0x40010000

08013914 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8013914:	b480      	push	{r7}
 8013916:	b087      	sub	sp, #28
 8013918:	af00      	add	r7, sp, #0
 801391a:	60f8      	str	r0, [r7, #12]
 801391c:	60b9      	str	r1, [r7, #8]
 801391e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8013920:	68fb      	ldr	r3, [r7, #12]
 8013922:	6a1b      	ldr	r3, [r3, #32]
 8013924:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8013926:	68fb      	ldr	r3, [r7, #12]
 8013928:	6a1b      	ldr	r3, [r3, #32]
 801392a:	f023 0201 	bic.w	r2, r3, #1
 801392e:	68fb      	ldr	r3, [r7, #12]
 8013930:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013932:	68fb      	ldr	r3, [r7, #12]
 8013934:	699b      	ldr	r3, [r3, #24]
 8013936:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8013938:	693b      	ldr	r3, [r7, #16]
 801393a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801393e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8013940:	687b      	ldr	r3, [r7, #4]
 8013942:	011b      	lsls	r3, r3, #4
 8013944:	693a      	ldr	r2, [r7, #16]
 8013946:	4313      	orrs	r3, r2
 8013948:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801394a:	697b      	ldr	r3, [r7, #20]
 801394c:	f023 030a 	bic.w	r3, r3, #10
 8013950:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8013952:	697a      	ldr	r2, [r7, #20]
 8013954:	68bb      	ldr	r3, [r7, #8]
 8013956:	4313      	orrs	r3, r2
 8013958:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801395a:	68fb      	ldr	r3, [r7, #12]
 801395c:	693a      	ldr	r2, [r7, #16]
 801395e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013960:	68fb      	ldr	r3, [r7, #12]
 8013962:	697a      	ldr	r2, [r7, #20]
 8013964:	621a      	str	r2, [r3, #32]
}
 8013966:	bf00      	nop
 8013968:	371c      	adds	r7, #28
 801396a:	46bd      	mov	sp, r7
 801396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013970:	4770      	bx	lr

08013972 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8013972:	b480      	push	{r7}
 8013974:	b087      	sub	sp, #28
 8013976:	af00      	add	r7, sp, #0
 8013978:	60f8      	str	r0, [r7, #12]
 801397a:	60b9      	str	r1, [r7, #8]
 801397c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801397e:	68fb      	ldr	r3, [r7, #12]
 8013980:	6a1b      	ldr	r3, [r3, #32]
 8013982:	f023 0210 	bic.w	r2, r3, #16
 8013986:	68fb      	ldr	r3, [r7, #12]
 8013988:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801398a:	68fb      	ldr	r3, [r7, #12]
 801398c:	699b      	ldr	r3, [r3, #24]
 801398e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8013990:	68fb      	ldr	r3, [r7, #12]
 8013992:	6a1b      	ldr	r3, [r3, #32]
 8013994:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8013996:	697b      	ldr	r3, [r7, #20]
 8013998:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801399c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	031b      	lsls	r3, r3, #12
 80139a2:	697a      	ldr	r2, [r7, #20]
 80139a4:	4313      	orrs	r3, r2
 80139a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80139a8:	693b      	ldr	r3, [r7, #16]
 80139aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80139ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80139b0:	68bb      	ldr	r3, [r7, #8]
 80139b2:	011b      	lsls	r3, r3, #4
 80139b4:	693a      	ldr	r2, [r7, #16]
 80139b6:	4313      	orrs	r3, r2
 80139b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80139ba:	68fb      	ldr	r3, [r7, #12]
 80139bc:	697a      	ldr	r2, [r7, #20]
 80139be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80139c0:	68fb      	ldr	r3, [r7, #12]
 80139c2:	693a      	ldr	r2, [r7, #16]
 80139c4:	621a      	str	r2, [r3, #32]
}
 80139c6:	bf00      	nop
 80139c8:	371c      	adds	r7, #28
 80139ca:	46bd      	mov	sp, r7
 80139cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139d0:	4770      	bx	lr

080139d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80139d2:	b480      	push	{r7}
 80139d4:	b085      	sub	sp, #20
 80139d6:	af00      	add	r7, sp, #0
 80139d8:	6078      	str	r0, [r7, #4]
 80139da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	689b      	ldr	r3, [r3, #8]
 80139e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80139e2:	68fb      	ldr	r3, [r7, #12]
 80139e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80139e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80139ea:	683a      	ldr	r2, [r7, #0]
 80139ec:	68fb      	ldr	r3, [r7, #12]
 80139ee:	4313      	orrs	r3, r2
 80139f0:	f043 0307 	orr.w	r3, r3, #7
 80139f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	68fa      	ldr	r2, [r7, #12]
 80139fa:	609a      	str	r2, [r3, #8]
}
 80139fc:	bf00      	nop
 80139fe:	3714      	adds	r7, #20
 8013a00:	46bd      	mov	sp, r7
 8013a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a06:	4770      	bx	lr

08013a08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8013a08:	b480      	push	{r7}
 8013a0a:	b087      	sub	sp, #28
 8013a0c:	af00      	add	r7, sp, #0
 8013a0e:	60f8      	str	r0, [r7, #12]
 8013a10:	60b9      	str	r1, [r7, #8]
 8013a12:	607a      	str	r2, [r7, #4]
 8013a14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8013a16:	68fb      	ldr	r3, [r7, #12]
 8013a18:	689b      	ldr	r3, [r3, #8]
 8013a1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8013a1c:	697b      	ldr	r3, [r7, #20]
 8013a1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8013a22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8013a24:	683b      	ldr	r3, [r7, #0]
 8013a26:	021a      	lsls	r2, r3, #8
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	431a      	orrs	r2, r3
 8013a2c:	68bb      	ldr	r3, [r7, #8]
 8013a2e:	4313      	orrs	r3, r2
 8013a30:	697a      	ldr	r2, [r7, #20]
 8013a32:	4313      	orrs	r3, r2
 8013a34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8013a36:	68fb      	ldr	r3, [r7, #12]
 8013a38:	697a      	ldr	r2, [r7, #20]
 8013a3a:	609a      	str	r2, [r3, #8]
}
 8013a3c:	bf00      	nop
 8013a3e:	371c      	adds	r7, #28
 8013a40:	46bd      	mov	sp, r7
 8013a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a46:	4770      	bx	lr

08013a48 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8013a48:	b480      	push	{r7}
 8013a4a:	b087      	sub	sp, #28
 8013a4c:	af00      	add	r7, sp, #0
 8013a4e:	60f8      	str	r0, [r7, #12]
 8013a50:	60b9      	str	r1, [r7, #8]
 8013a52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8013a54:	68bb      	ldr	r3, [r7, #8]
 8013a56:	f003 031f 	and.w	r3, r3, #31
 8013a5a:	2201      	movs	r2, #1
 8013a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8013a60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8013a62:	68fb      	ldr	r3, [r7, #12]
 8013a64:	6a1a      	ldr	r2, [r3, #32]
 8013a66:	697b      	ldr	r3, [r7, #20]
 8013a68:	43db      	mvns	r3, r3
 8013a6a:	401a      	ands	r2, r3
 8013a6c:	68fb      	ldr	r3, [r7, #12]
 8013a6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8013a70:	68fb      	ldr	r3, [r7, #12]
 8013a72:	6a1a      	ldr	r2, [r3, #32]
 8013a74:	68bb      	ldr	r3, [r7, #8]
 8013a76:	f003 031f 	and.w	r3, r3, #31
 8013a7a:	6879      	ldr	r1, [r7, #4]
 8013a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8013a80:	431a      	orrs	r2, r3
 8013a82:	68fb      	ldr	r3, [r7, #12]
 8013a84:	621a      	str	r2, [r3, #32]
}
 8013a86:	bf00      	nop
 8013a88:	371c      	adds	r7, #28
 8013a8a:	46bd      	mov	sp, r7
 8013a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a90:	4770      	bx	lr
	...

08013a94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8013a94:	b480      	push	{r7}
 8013a96:	b085      	sub	sp, #20
 8013a98:	af00      	add	r7, sp, #0
 8013a9a:	6078      	str	r0, [r7, #4]
 8013a9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013aa4:	2b01      	cmp	r3, #1
 8013aa6:	d101      	bne.n	8013aac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8013aa8:	2302      	movs	r3, #2
 8013aaa:	e050      	b.n	8013b4e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	2201      	movs	r2, #1
 8013ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	2202      	movs	r2, #2
 8013ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	681b      	ldr	r3, [r3, #0]
 8013ac0:	685b      	ldr	r3, [r3, #4]
 8013ac2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	681b      	ldr	r3, [r3, #0]
 8013ac8:	689b      	ldr	r3, [r3, #8]
 8013aca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8013acc:	68fb      	ldr	r3, [r7, #12]
 8013ace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013ad2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8013ad4:	683b      	ldr	r3, [r7, #0]
 8013ad6:	681b      	ldr	r3, [r3, #0]
 8013ad8:	68fa      	ldr	r2, [r7, #12]
 8013ada:	4313      	orrs	r3, r2
 8013adc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	681b      	ldr	r3, [r3, #0]
 8013ae2:	68fa      	ldr	r2, [r7, #12]
 8013ae4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	681b      	ldr	r3, [r3, #0]
 8013aea:	4a1c      	ldr	r2, [pc, #112]	; (8013b5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8013aec:	4293      	cmp	r3, r2
 8013aee:	d018      	beq.n	8013b22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	681b      	ldr	r3, [r3, #0]
 8013af4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013af8:	d013      	beq.n	8013b22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	681b      	ldr	r3, [r3, #0]
 8013afe:	4a18      	ldr	r2, [pc, #96]	; (8013b60 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8013b00:	4293      	cmp	r3, r2
 8013b02:	d00e      	beq.n	8013b22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	681b      	ldr	r3, [r3, #0]
 8013b08:	4a16      	ldr	r2, [pc, #88]	; (8013b64 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8013b0a:	4293      	cmp	r3, r2
 8013b0c:	d009      	beq.n	8013b22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8013b0e:	687b      	ldr	r3, [r7, #4]
 8013b10:	681b      	ldr	r3, [r3, #0]
 8013b12:	4a15      	ldr	r2, [pc, #84]	; (8013b68 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8013b14:	4293      	cmp	r3, r2
 8013b16:	d004      	beq.n	8013b22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	681b      	ldr	r3, [r3, #0]
 8013b1c:	4a13      	ldr	r2, [pc, #76]	; (8013b6c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8013b1e:	4293      	cmp	r3, r2
 8013b20:	d10c      	bne.n	8013b3c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8013b22:	68bb      	ldr	r3, [r7, #8]
 8013b24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013b28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8013b2a:	683b      	ldr	r3, [r7, #0]
 8013b2c:	685b      	ldr	r3, [r3, #4]
 8013b2e:	68ba      	ldr	r2, [r7, #8]
 8013b30:	4313      	orrs	r3, r2
 8013b32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	681b      	ldr	r3, [r3, #0]
 8013b38:	68ba      	ldr	r2, [r7, #8]
 8013b3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	2201      	movs	r2, #1
 8013b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	2200      	movs	r2, #0
 8013b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8013b4c:	2300      	movs	r3, #0
}
 8013b4e:	4618      	mov	r0, r3
 8013b50:	3714      	adds	r7, #20
 8013b52:	46bd      	mov	sp, r7
 8013b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b58:	4770      	bx	lr
 8013b5a:	bf00      	nop
 8013b5c:	40010000 	.word	0x40010000
 8013b60:	40000400 	.word	0x40000400
 8013b64:	40000800 	.word	0x40000800
 8013b68:	40000c00 	.word	0x40000c00
 8013b6c:	40014000 	.word	0x40014000

08013b70 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8013b70:	b084      	sub	sp, #16
 8013b72:	b580      	push	{r7, lr}
 8013b74:	b084      	sub	sp, #16
 8013b76:	af00      	add	r7, sp, #0
 8013b78:	6078      	str	r0, [r7, #4]
 8013b7a:	f107 001c 	add.w	r0, r7, #28
 8013b7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8013b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b84:	2b01      	cmp	r3, #1
 8013b86:	d122      	bne.n	8013bce <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013b8c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	68db      	ldr	r3, [r3, #12]
 8013b98:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8013b9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013ba0:	687a      	ldr	r2, [r7, #4]
 8013ba2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	68db      	ldr	r3, [r3, #12]
 8013ba8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8013bb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013bb2:	2b01      	cmp	r3, #1
 8013bb4:	d105      	bne.n	8013bc2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	68db      	ldr	r3, [r3, #12]
 8013bba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8013bc2:	6878      	ldr	r0, [r7, #4]
 8013bc4:	f000 f94a 	bl	8013e5c <USB_CoreReset>
 8013bc8:	4603      	mov	r3, r0
 8013bca:	73fb      	strb	r3, [r7, #15]
 8013bcc:	e01a      	b.n	8013c04 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	68db      	ldr	r3, [r3, #12]
 8013bd2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8013bda:	6878      	ldr	r0, [r7, #4]
 8013bdc:	f000 f93e 	bl	8013e5c <USB_CoreReset>
 8013be0:	4603      	mov	r3, r0
 8013be2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8013be4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	d106      	bne.n	8013bf8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013bee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	639a      	str	r2, [r3, #56]	; 0x38
 8013bf6:	e005      	b.n	8013c04 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013bfc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8013c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c06:	2b01      	cmp	r3, #1
 8013c08:	d10b      	bne.n	8013c22 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	689b      	ldr	r3, [r3, #8]
 8013c0e:	f043 0206 	orr.w	r2, r3, #6
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	689b      	ldr	r3, [r3, #8]
 8013c1a:	f043 0220 	orr.w	r2, r3, #32
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8013c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c24:	4618      	mov	r0, r3
 8013c26:	3710      	adds	r7, #16
 8013c28:	46bd      	mov	sp, r7
 8013c2a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013c2e:	b004      	add	sp, #16
 8013c30:	4770      	bx	lr

08013c32 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8013c32:	b480      	push	{r7}
 8013c34:	b083      	sub	sp, #12
 8013c36:	af00      	add	r7, sp, #0
 8013c38:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	689b      	ldr	r3, [r3, #8]
 8013c3e:	f043 0201 	orr.w	r2, r3, #1
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8013c46:	2300      	movs	r3, #0
}
 8013c48:	4618      	mov	r0, r3
 8013c4a:	370c      	adds	r7, #12
 8013c4c:	46bd      	mov	sp, r7
 8013c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c52:	4770      	bx	lr

08013c54 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8013c54:	b480      	push	{r7}
 8013c56:	b083      	sub	sp, #12
 8013c58:	af00      	add	r7, sp, #0
 8013c5a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	689b      	ldr	r3, [r3, #8]
 8013c60:	f023 0201 	bic.w	r2, r3, #1
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8013c68:	2300      	movs	r3, #0
}
 8013c6a:	4618      	mov	r0, r3
 8013c6c:	370c      	adds	r7, #12
 8013c6e:	46bd      	mov	sp, r7
 8013c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c74:	4770      	bx	lr

08013c76 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8013c76:	b580      	push	{r7, lr}
 8013c78:	b082      	sub	sp, #8
 8013c7a:	af00      	add	r7, sp, #0
 8013c7c:	6078      	str	r0, [r7, #4]
 8013c7e:	460b      	mov	r3, r1
 8013c80:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	68db      	ldr	r3, [r3, #12]
 8013c86:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8013c8e:	78fb      	ldrb	r3, [r7, #3]
 8013c90:	2b01      	cmp	r3, #1
 8013c92:	d106      	bne.n	8013ca2 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	68db      	ldr	r3, [r3, #12]
 8013c98:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	60da      	str	r2, [r3, #12]
 8013ca0:	e00b      	b.n	8013cba <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8013ca2:	78fb      	ldrb	r3, [r7, #3]
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	d106      	bne.n	8013cb6 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	68db      	ldr	r3, [r3, #12]
 8013cac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	60da      	str	r2, [r3, #12]
 8013cb4:	e001      	b.n	8013cba <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8013cb6:	2301      	movs	r3, #1
 8013cb8:	e003      	b.n	8013cc2 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8013cba:	2032      	movs	r0, #50	; 0x32
 8013cbc:	f7fb fc76 	bl	800f5ac <HAL_Delay>

  return HAL_OK;
 8013cc0:	2300      	movs	r3, #0
}
 8013cc2:	4618      	mov	r0, r3
 8013cc4:	3708      	adds	r7, #8
 8013cc6:	46bd      	mov	sp, r7
 8013cc8:	bd80      	pop	{r7, pc}
	...

08013ccc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8013ccc:	b480      	push	{r7}
 8013cce:	b085      	sub	sp, #20
 8013cd0:	af00      	add	r7, sp, #0
 8013cd2:	6078      	str	r0, [r7, #4]
 8013cd4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8013cd6:	2300      	movs	r3, #0
 8013cd8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8013cda:	683b      	ldr	r3, [r7, #0]
 8013cdc:	019b      	lsls	r3, r3, #6
 8013cde:	f043 0220 	orr.w	r2, r3, #32
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8013ce6:	68fb      	ldr	r3, [r7, #12]
 8013ce8:	3301      	adds	r3, #1
 8013cea:	60fb      	str	r3, [r7, #12]
 8013cec:	68fb      	ldr	r3, [r7, #12]
 8013cee:	4a09      	ldr	r2, [pc, #36]	; (8013d14 <USB_FlushTxFifo+0x48>)
 8013cf0:	4293      	cmp	r3, r2
 8013cf2:	d901      	bls.n	8013cf8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8013cf4:	2303      	movs	r3, #3
 8013cf6:	e006      	b.n	8013d06 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	691b      	ldr	r3, [r3, #16]
 8013cfc:	f003 0320 	and.w	r3, r3, #32
 8013d00:	2b20      	cmp	r3, #32
 8013d02:	d0f0      	beq.n	8013ce6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8013d04:	2300      	movs	r3, #0
}
 8013d06:	4618      	mov	r0, r3
 8013d08:	3714      	adds	r7, #20
 8013d0a:	46bd      	mov	sp, r7
 8013d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d10:	4770      	bx	lr
 8013d12:	bf00      	nop
 8013d14:	00030d40 	.word	0x00030d40

08013d18 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8013d18:	b480      	push	{r7}
 8013d1a:	b085      	sub	sp, #20
 8013d1c:	af00      	add	r7, sp, #0
 8013d1e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8013d20:	2300      	movs	r3, #0
 8013d22:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	2210      	movs	r2, #16
 8013d28:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8013d2a:	68fb      	ldr	r3, [r7, #12]
 8013d2c:	3301      	adds	r3, #1
 8013d2e:	60fb      	str	r3, [r7, #12]
 8013d30:	68fb      	ldr	r3, [r7, #12]
 8013d32:	4a09      	ldr	r2, [pc, #36]	; (8013d58 <USB_FlushRxFifo+0x40>)
 8013d34:	4293      	cmp	r3, r2
 8013d36:	d901      	bls.n	8013d3c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8013d38:	2303      	movs	r3, #3
 8013d3a:	e006      	b.n	8013d4a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	691b      	ldr	r3, [r3, #16]
 8013d40:	f003 0310 	and.w	r3, r3, #16
 8013d44:	2b10      	cmp	r3, #16
 8013d46:	d0f0      	beq.n	8013d2a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8013d48:	2300      	movs	r3, #0
}
 8013d4a:	4618      	mov	r0, r3
 8013d4c:	3714      	adds	r7, #20
 8013d4e:	46bd      	mov	sp, r7
 8013d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d54:	4770      	bx	lr
 8013d56:	bf00      	nop
 8013d58:	00030d40 	.word	0x00030d40

08013d5c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8013d5c:	b480      	push	{r7}
 8013d5e:	b089      	sub	sp, #36	; 0x24
 8013d60:	af00      	add	r7, sp, #0
 8013d62:	60f8      	str	r0, [r7, #12]
 8013d64:	60b9      	str	r1, [r7, #8]
 8013d66:	4611      	mov	r1, r2
 8013d68:	461a      	mov	r2, r3
 8013d6a:	460b      	mov	r3, r1
 8013d6c:	71fb      	strb	r3, [r7, #7]
 8013d6e:	4613      	mov	r3, r2
 8013d70:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013d72:	68fb      	ldr	r3, [r7, #12]
 8013d74:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8013d76:	68bb      	ldr	r3, [r7, #8]
 8013d78:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8013d7a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013d7e:	2b00      	cmp	r3, #0
 8013d80:	d11a      	bne.n	8013db8 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8013d82:	88bb      	ldrh	r3, [r7, #4]
 8013d84:	3303      	adds	r3, #3
 8013d86:	089b      	lsrs	r3, r3, #2
 8013d88:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8013d8a:	2300      	movs	r3, #0
 8013d8c:	61bb      	str	r3, [r7, #24]
 8013d8e:	e00f      	b.n	8013db0 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8013d90:	79fb      	ldrb	r3, [r7, #7]
 8013d92:	031a      	lsls	r2, r3, #12
 8013d94:	697b      	ldr	r3, [r7, #20]
 8013d96:	4413      	add	r3, r2
 8013d98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013d9c:	461a      	mov	r2, r3
 8013d9e:	69fb      	ldr	r3, [r7, #28]
 8013da0:	681b      	ldr	r3, [r3, #0]
 8013da2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8013da4:	69fb      	ldr	r3, [r7, #28]
 8013da6:	3304      	adds	r3, #4
 8013da8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8013daa:	69bb      	ldr	r3, [r7, #24]
 8013dac:	3301      	adds	r3, #1
 8013dae:	61bb      	str	r3, [r7, #24]
 8013db0:	69ba      	ldr	r2, [r7, #24]
 8013db2:	693b      	ldr	r3, [r7, #16]
 8013db4:	429a      	cmp	r2, r3
 8013db6:	d3eb      	bcc.n	8013d90 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8013db8:	2300      	movs	r3, #0
}
 8013dba:	4618      	mov	r0, r3
 8013dbc:	3724      	adds	r7, #36	; 0x24
 8013dbe:	46bd      	mov	sp, r7
 8013dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dc4:	4770      	bx	lr

08013dc6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8013dc6:	b480      	push	{r7}
 8013dc8:	b089      	sub	sp, #36	; 0x24
 8013dca:	af00      	add	r7, sp, #0
 8013dcc:	60f8      	str	r0, [r7, #12]
 8013dce:	60b9      	str	r1, [r7, #8]
 8013dd0:	4613      	mov	r3, r2
 8013dd2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013dd4:	68fb      	ldr	r3, [r7, #12]
 8013dd6:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8013dd8:	68bb      	ldr	r3, [r7, #8]
 8013dda:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8013ddc:	88fb      	ldrh	r3, [r7, #6]
 8013dde:	3303      	adds	r3, #3
 8013de0:	089b      	lsrs	r3, r3, #2
 8013de2:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8013de4:	2300      	movs	r3, #0
 8013de6:	61bb      	str	r3, [r7, #24]
 8013de8:	e00b      	b.n	8013e02 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8013dea:	697b      	ldr	r3, [r7, #20]
 8013dec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013df0:	681a      	ldr	r2, [r3, #0]
 8013df2:	69fb      	ldr	r3, [r7, #28]
 8013df4:	601a      	str	r2, [r3, #0]
    pDest++;
 8013df6:	69fb      	ldr	r3, [r7, #28]
 8013df8:	3304      	adds	r3, #4
 8013dfa:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8013dfc:	69bb      	ldr	r3, [r7, #24]
 8013dfe:	3301      	adds	r3, #1
 8013e00:	61bb      	str	r3, [r7, #24]
 8013e02:	69ba      	ldr	r2, [r7, #24]
 8013e04:	693b      	ldr	r3, [r7, #16]
 8013e06:	429a      	cmp	r2, r3
 8013e08:	d3ef      	bcc.n	8013dea <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8013e0a:	69fb      	ldr	r3, [r7, #28]
}
 8013e0c:	4618      	mov	r0, r3
 8013e0e:	3724      	adds	r7, #36	; 0x24
 8013e10:	46bd      	mov	sp, r7
 8013e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e16:	4770      	bx	lr

08013e18 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8013e18:	b480      	push	{r7}
 8013e1a:	b085      	sub	sp, #20
 8013e1c:	af00      	add	r7, sp, #0
 8013e1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	695b      	ldr	r3, [r3, #20]
 8013e24:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	699b      	ldr	r3, [r3, #24]
 8013e2a:	68fa      	ldr	r2, [r7, #12]
 8013e2c:	4013      	ands	r3, r2
 8013e2e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8013e30:	68fb      	ldr	r3, [r7, #12]
}
 8013e32:	4618      	mov	r0, r3
 8013e34:	3714      	adds	r7, #20
 8013e36:	46bd      	mov	sp, r7
 8013e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e3c:	4770      	bx	lr

08013e3e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8013e3e:	b480      	push	{r7}
 8013e40:	b083      	sub	sp, #12
 8013e42:	af00      	add	r7, sp, #0
 8013e44:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	695b      	ldr	r3, [r3, #20]
 8013e4a:	f003 0301 	and.w	r3, r3, #1
}
 8013e4e:	4618      	mov	r0, r3
 8013e50:	370c      	adds	r7, #12
 8013e52:	46bd      	mov	sp, r7
 8013e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e58:	4770      	bx	lr
	...

08013e5c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8013e5c:	b480      	push	{r7}
 8013e5e:	b085      	sub	sp, #20
 8013e60:	af00      	add	r7, sp, #0
 8013e62:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8013e64:	2300      	movs	r3, #0
 8013e66:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8013e68:	68fb      	ldr	r3, [r7, #12]
 8013e6a:	3301      	adds	r3, #1
 8013e6c:	60fb      	str	r3, [r7, #12]
 8013e6e:	68fb      	ldr	r3, [r7, #12]
 8013e70:	4a13      	ldr	r2, [pc, #76]	; (8013ec0 <USB_CoreReset+0x64>)
 8013e72:	4293      	cmp	r3, r2
 8013e74:	d901      	bls.n	8013e7a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8013e76:	2303      	movs	r3, #3
 8013e78:	e01b      	b.n	8013eb2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	691b      	ldr	r3, [r3, #16]
 8013e7e:	2b00      	cmp	r3, #0
 8013e80:	daf2      	bge.n	8013e68 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8013e82:	2300      	movs	r3, #0
 8013e84:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8013e86:	687b      	ldr	r3, [r7, #4]
 8013e88:	691b      	ldr	r3, [r3, #16]
 8013e8a:	f043 0201 	orr.w	r2, r3, #1
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8013e92:	68fb      	ldr	r3, [r7, #12]
 8013e94:	3301      	adds	r3, #1
 8013e96:	60fb      	str	r3, [r7, #12]
 8013e98:	68fb      	ldr	r3, [r7, #12]
 8013e9a:	4a09      	ldr	r2, [pc, #36]	; (8013ec0 <USB_CoreReset+0x64>)
 8013e9c:	4293      	cmp	r3, r2
 8013e9e:	d901      	bls.n	8013ea4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8013ea0:	2303      	movs	r3, #3
 8013ea2:	e006      	b.n	8013eb2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	691b      	ldr	r3, [r3, #16]
 8013ea8:	f003 0301 	and.w	r3, r3, #1
 8013eac:	2b01      	cmp	r3, #1
 8013eae:	d0f0      	beq.n	8013e92 <USB_CoreReset+0x36>

  return HAL_OK;
 8013eb0:	2300      	movs	r3, #0
}
 8013eb2:	4618      	mov	r0, r3
 8013eb4:	3714      	adds	r7, #20
 8013eb6:	46bd      	mov	sp, r7
 8013eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ebc:	4770      	bx	lr
 8013ebe:	bf00      	nop
 8013ec0:	00030d40 	.word	0x00030d40

08013ec4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8013ec4:	b084      	sub	sp, #16
 8013ec6:	b580      	push	{r7, lr}
 8013ec8:	b084      	sub	sp, #16
 8013eca:	af00      	add	r7, sp, #0
 8013ecc:	6078      	str	r0, [r7, #4]
 8013ece:	f107 001c 	add.w	r0, r7, #28
 8013ed2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8013eda:	68bb      	ldr	r3, [r7, #8]
 8013edc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013ee0:	461a      	mov	r2, r3
 8013ee2:	2300      	movs	r3, #0
 8013ee4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013eea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013ef6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013f02:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	d018      	beq.n	8013f48 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8013f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f18:	2b01      	cmp	r3, #1
 8013f1a:	d10a      	bne.n	8013f32 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8013f1c:	68bb      	ldr	r3, [r7, #8]
 8013f1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013f22:	681b      	ldr	r3, [r3, #0]
 8013f24:	68ba      	ldr	r2, [r7, #8]
 8013f26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8013f2a:	f043 0304 	orr.w	r3, r3, #4
 8013f2e:	6013      	str	r3, [r2, #0]
 8013f30:	e014      	b.n	8013f5c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8013f32:	68bb      	ldr	r3, [r7, #8]
 8013f34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013f38:	681b      	ldr	r3, [r3, #0]
 8013f3a:	68ba      	ldr	r2, [r7, #8]
 8013f3c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8013f40:	f023 0304 	bic.w	r3, r3, #4
 8013f44:	6013      	str	r3, [r2, #0]
 8013f46:	e009      	b.n	8013f5c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8013f48:	68bb      	ldr	r3, [r7, #8]
 8013f4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013f4e:	681b      	ldr	r3, [r3, #0]
 8013f50:	68ba      	ldr	r2, [r7, #8]
 8013f52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8013f56:	f023 0304 	bic.w	r3, r3, #4
 8013f5a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8013f5c:	2110      	movs	r1, #16
 8013f5e:	6878      	ldr	r0, [r7, #4]
 8013f60:	f7ff feb4 	bl	8013ccc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8013f64:	6878      	ldr	r0, [r7, #4]
 8013f66:	f7ff fed7 	bl	8013d18 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8013f6a:	2300      	movs	r3, #0
 8013f6c:	60fb      	str	r3, [r7, #12]
 8013f6e:	e015      	b.n	8013f9c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8013f70:	68fb      	ldr	r3, [r7, #12]
 8013f72:	015a      	lsls	r2, r3, #5
 8013f74:	68bb      	ldr	r3, [r7, #8]
 8013f76:	4413      	add	r3, r2
 8013f78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013f7c:	461a      	mov	r2, r3
 8013f7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013f82:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8013f84:	68fb      	ldr	r3, [r7, #12]
 8013f86:	015a      	lsls	r2, r3, #5
 8013f88:	68bb      	ldr	r3, [r7, #8]
 8013f8a:	4413      	add	r3, r2
 8013f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013f90:	461a      	mov	r2, r3
 8013f92:	2300      	movs	r3, #0
 8013f94:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8013f96:	68fb      	ldr	r3, [r7, #12]
 8013f98:	3301      	adds	r3, #1
 8013f9a:	60fb      	str	r3, [r7, #12]
 8013f9c:	6a3b      	ldr	r3, [r7, #32]
 8013f9e:	68fa      	ldr	r2, [r7, #12]
 8013fa0:	429a      	cmp	r2, r3
 8013fa2:	d3e5      	bcc.n	8013f70 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8013fa4:	2101      	movs	r1, #1
 8013fa6:	6878      	ldr	r0, [r7, #4]
 8013fa8:	f000 f882 	bl	80140b0 <USB_DriveVbus>

  HAL_Delay(200U);
 8013fac:	20c8      	movs	r0, #200	; 0xc8
 8013fae:	f7fb fafd 	bl	800f5ac <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	2200      	movs	r2, #0
 8013fb6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013fbe:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	d00b      	beq.n	8013fe4 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013fd2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	4a14      	ldr	r2, [pc, #80]	; (8014028 <USB_HostInit+0x164>)
 8013fd8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	4a13      	ldr	r2, [pc, #76]	; (801402c <USB_HostInit+0x168>)
 8013fde:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8013fe2:	e009      	b.n	8013ff8 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	2280      	movs	r2, #128	; 0x80
 8013fe8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	4a10      	ldr	r2, [pc, #64]	; (8014030 <USB_HostInit+0x16c>)
 8013fee:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	4a10      	ldr	r2, [pc, #64]	; (8014034 <USB_HostInit+0x170>)
 8013ff4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8013ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ffa:	2b00      	cmp	r3, #0
 8013ffc:	d105      	bne.n	801400a <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	699b      	ldr	r3, [r3, #24]
 8014002:	f043 0210 	orr.w	r2, r3, #16
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	699a      	ldr	r2, [r3, #24]
 801400e:	4b0a      	ldr	r3, [pc, #40]	; (8014038 <USB_HostInit+0x174>)
 8014010:	4313      	orrs	r3, r2
 8014012:	687a      	ldr	r2, [r7, #4]
 8014014:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8014016:	2300      	movs	r3, #0
}
 8014018:	4618      	mov	r0, r3
 801401a:	3710      	adds	r7, #16
 801401c:	46bd      	mov	sp, r7
 801401e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8014022:	b004      	add	sp, #16
 8014024:	4770      	bx	lr
 8014026:	bf00      	nop
 8014028:	01000200 	.word	0x01000200
 801402c:	00e00300 	.word	0x00e00300
 8014030:	00600080 	.word	0x00600080
 8014034:	004000e0 	.word	0x004000e0
 8014038:	a3200008 	.word	0xa3200008

0801403c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 801403c:	b480      	push	{r7}
 801403e:	b085      	sub	sp, #20
 8014040:	af00      	add	r7, sp, #0
 8014042:	6078      	str	r0, [r7, #4]
 8014044:	460b      	mov	r3, r1
 8014046:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 801404c:	68fb      	ldr	r3, [r7, #12]
 801404e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014052:	681b      	ldr	r3, [r3, #0]
 8014054:	68fa      	ldr	r2, [r7, #12]
 8014056:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801405a:	f023 0303 	bic.w	r3, r3, #3
 801405e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8014060:	68fb      	ldr	r3, [r7, #12]
 8014062:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014066:	681a      	ldr	r2, [r3, #0]
 8014068:	78fb      	ldrb	r3, [r7, #3]
 801406a:	f003 0303 	and.w	r3, r3, #3
 801406e:	68f9      	ldr	r1, [r7, #12]
 8014070:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8014074:	4313      	orrs	r3, r2
 8014076:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8014078:	78fb      	ldrb	r3, [r7, #3]
 801407a:	2b01      	cmp	r3, #1
 801407c:	d107      	bne.n	801408e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 801407e:	68fb      	ldr	r3, [r7, #12]
 8014080:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014084:	461a      	mov	r2, r3
 8014086:	f64b 3380 	movw	r3, #48000	; 0xbb80
 801408a:	6053      	str	r3, [r2, #4]
 801408c:	e009      	b.n	80140a2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 801408e:	78fb      	ldrb	r3, [r7, #3]
 8014090:	2b02      	cmp	r3, #2
 8014092:	d106      	bne.n	80140a2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8014094:	68fb      	ldr	r3, [r7, #12]
 8014096:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801409a:	461a      	mov	r2, r3
 801409c:	f241 7370 	movw	r3, #6000	; 0x1770
 80140a0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80140a2:	2300      	movs	r3, #0
}
 80140a4:	4618      	mov	r0, r3
 80140a6:	3714      	adds	r7, #20
 80140a8:	46bd      	mov	sp, r7
 80140aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140ae:	4770      	bx	lr

080140b0 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80140b0:	b480      	push	{r7}
 80140b2:	b085      	sub	sp, #20
 80140b4:	af00      	add	r7, sp, #0
 80140b6:	6078      	str	r0, [r7, #4]
 80140b8:	460b      	mov	r3, r1
 80140ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80140c0:	2300      	movs	r3, #0
 80140c2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80140c4:	68fb      	ldr	r3, [r7, #12]
 80140c6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80140ca:	681b      	ldr	r3, [r3, #0]
 80140cc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80140ce:	68bb      	ldr	r3, [r7, #8]
 80140d0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80140d4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80140d6:	68bb      	ldr	r3, [r7, #8]
 80140d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80140dc:	2b00      	cmp	r3, #0
 80140de:	d109      	bne.n	80140f4 <USB_DriveVbus+0x44>
 80140e0:	78fb      	ldrb	r3, [r7, #3]
 80140e2:	2b01      	cmp	r3, #1
 80140e4:	d106      	bne.n	80140f4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80140e6:	68bb      	ldr	r3, [r7, #8]
 80140e8:	68fa      	ldr	r2, [r7, #12]
 80140ea:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80140ee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80140f2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80140f4:	68bb      	ldr	r3, [r7, #8]
 80140f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80140fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80140fe:	d109      	bne.n	8014114 <USB_DriveVbus+0x64>
 8014100:	78fb      	ldrb	r3, [r7, #3]
 8014102:	2b00      	cmp	r3, #0
 8014104:	d106      	bne.n	8014114 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8014106:	68bb      	ldr	r3, [r7, #8]
 8014108:	68fa      	ldr	r2, [r7, #12]
 801410a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 801410e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014112:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8014114:	2300      	movs	r3, #0
}
 8014116:	4618      	mov	r0, r3
 8014118:	3714      	adds	r7, #20
 801411a:	46bd      	mov	sp, r7
 801411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014120:	4770      	bx	lr

08014122 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8014122:	b480      	push	{r7}
 8014124:	b085      	sub	sp, #20
 8014126:	af00      	add	r7, sp, #0
 8014128:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 801412e:	68fb      	ldr	r3, [r7, #12]
 8014130:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014134:	689b      	ldr	r3, [r3, #8]
 8014136:	b29b      	uxth	r3, r3
}
 8014138:	4618      	mov	r0, r3
 801413a:	3714      	adds	r7, #20
 801413c:	46bd      	mov	sp, r7
 801413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014142:	4770      	bx	lr

08014144 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8014144:	b480      	push	{r7}
 8014146:	b087      	sub	sp, #28
 8014148:	af00      	add	r7, sp, #0
 801414a:	6078      	str	r0, [r7, #4]
 801414c:	4608      	mov	r0, r1
 801414e:	4611      	mov	r1, r2
 8014150:	461a      	mov	r2, r3
 8014152:	4603      	mov	r3, r0
 8014154:	70fb      	strb	r3, [r7, #3]
 8014156:	460b      	mov	r3, r1
 8014158:	70bb      	strb	r3, [r7, #2]
 801415a:	4613      	mov	r3, r2
 801415c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 801415e:	2300      	movs	r3, #0
 8014160:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8014166:	78fb      	ldrb	r3, [r7, #3]
 8014168:	015a      	lsls	r2, r3, #5
 801416a:	68bb      	ldr	r3, [r7, #8]
 801416c:	4413      	add	r3, r2
 801416e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014172:	461a      	mov	r2, r3
 8014174:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014178:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 801417a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801417e:	2b03      	cmp	r3, #3
 8014180:	d87e      	bhi.n	8014280 <USB_HC_Init+0x13c>
 8014182:	a201      	add	r2, pc, #4	; (adr r2, 8014188 <USB_HC_Init+0x44>)
 8014184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014188:	08014199 	.word	0x08014199
 801418c:	08014243 	.word	0x08014243
 8014190:	08014199 	.word	0x08014199
 8014194:	08014205 	.word	0x08014205
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8014198:	78fb      	ldrb	r3, [r7, #3]
 801419a:	015a      	lsls	r2, r3, #5
 801419c:	68bb      	ldr	r3, [r7, #8]
 801419e:	4413      	add	r3, r2
 80141a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80141a4:	461a      	mov	r2, r3
 80141a6:	f240 439d 	movw	r3, #1181	; 0x49d
 80141aa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80141ac:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	da10      	bge.n	80141d6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80141b4:	78fb      	ldrb	r3, [r7, #3]
 80141b6:	015a      	lsls	r2, r3, #5
 80141b8:	68bb      	ldr	r3, [r7, #8]
 80141ba:	4413      	add	r3, r2
 80141bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80141c0:	68db      	ldr	r3, [r3, #12]
 80141c2:	78fa      	ldrb	r2, [r7, #3]
 80141c4:	0151      	lsls	r1, r2, #5
 80141c6:	68ba      	ldr	r2, [r7, #8]
 80141c8:	440a      	add	r2, r1
 80141ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80141ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80141d2:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 80141d4:	e057      	b.n	8014286 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80141da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80141de:	2b00      	cmp	r3, #0
 80141e0:	d051      	beq.n	8014286 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80141e2:	78fb      	ldrb	r3, [r7, #3]
 80141e4:	015a      	lsls	r2, r3, #5
 80141e6:	68bb      	ldr	r3, [r7, #8]
 80141e8:	4413      	add	r3, r2
 80141ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80141ee:	68db      	ldr	r3, [r3, #12]
 80141f0:	78fa      	ldrb	r2, [r7, #3]
 80141f2:	0151      	lsls	r1, r2, #5
 80141f4:	68ba      	ldr	r2, [r7, #8]
 80141f6:	440a      	add	r2, r1
 80141f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80141fc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8014200:	60d3      	str	r3, [r2, #12]
      break;
 8014202:	e040      	b.n	8014286 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8014204:	78fb      	ldrb	r3, [r7, #3]
 8014206:	015a      	lsls	r2, r3, #5
 8014208:	68bb      	ldr	r3, [r7, #8]
 801420a:	4413      	add	r3, r2
 801420c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014210:	461a      	mov	r2, r3
 8014212:	f240 639d 	movw	r3, #1693	; 0x69d
 8014216:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8014218:	f997 3002 	ldrsb.w	r3, [r7, #2]
 801421c:	2b00      	cmp	r3, #0
 801421e:	da34      	bge.n	801428a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8014220:	78fb      	ldrb	r3, [r7, #3]
 8014222:	015a      	lsls	r2, r3, #5
 8014224:	68bb      	ldr	r3, [r7, #8]
 8014226:	4413      	add	r3, r2
 8014228:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801422c:	68db      	ldr	r3, [r3, #12]
 801422e:	78fa      	ldrb	r2, [r7, #3]
 8014230:	0151      	lsls	r1, r2, #5
 8014232:	68ba      	ldr	r2, [r7, #8]
 8014234:	440a      	add	r2, r1
 8014236:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801423a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801423e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8014240:	e023      	b.n	801428a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8014242:	78fb      	ldrb	r3, [r7, #3]
 8014244:	015a      	lsls	r2, r3, #5
 8014246:	68bb      	ldr	r3, [r7, #8]
 8014248:	4413      	add	r3, r2
 801424a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801424e:	461a      	mov	r2, r3
 8014250:	f240 2325 	movw	r3, #549	; 0x225
 8014254:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8014256:	f997 3002 	ldrsb.w	r3, [r7, #2]
 801425a:	2b00      	cmp	r3, #0
 801425c:	da17      	bge.n	801428e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 801425e:	78fb      	ldrb	r3, [r7, #3]
 8014260:	015a      	lsls	r2, r3, #5
 8014262:	68bb      	ldr	r3, [r7, #8]
 8014264:	4413      	add	r3, r2
 8014266:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801426a:	68db      	ldr	r3, [r3, #12]
 801426c:	78fa      	ldrb	r2, [r7, #3]
 801426e:	0151      	lsls	r1, r2, #5
 8014270:	68ba      	ldr	r2, [r7, #8]
 8014272:	440a      	add	r2, r1
 8014274:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8014278:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 801427c:	60d3      	str	r3, [r2, #12]
      }
      break;
 801427e:	e006      	b.n	801428e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8014280:	2301      	movs	r3, #1
 8014282:	75fb      	strb	r3, [r7, #23]
      break;
 8014284:	e004      	b.n	8014290 <USB_HC_Init+0x14c>
      break;
 8014286:	bf00      	nop
 8014288:	e002      	b.n	8014290 <USB_HC_Init+0x14c>
      break;
 801428a:	bf00      	nop
 801428c:	e000      	b.n	8014290 <USB_HC_Init+0x14c>
      break;
 801428e:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8014290:	68bb      	ldr	r3, [r7, #8]
 8014292:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014296:	699a      	ldr	r2, [r3, #24]
 8014298:	78fb      	ldrb	r3, [r7, #3]
 801429a:	f003 030f 	and.w	r3, r3, #15
 801429e:	2101      	movs	r1, #1
 80142a0:	fa01 f303 	lsl.w	r3, r1, r3
 80142a4:	68b9      	ldr	r1, [r7, #8]
 80142a6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80142aa:	4313      	orrs	r3, r2
 80142ac:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	699b      	ldr	r3, [r3, #24]
 80142b2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80142ba:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80142be:	2b00      	cmp	r3, #0
 80142c0:	da03      	bge.n	80142ca <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80142c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80142c6:	613b      	str	r3, [r7, #16]
 80142c8:	e001      	b.n	80142ce <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80142ca:	2300      	movs	r3, #0
 80142cc:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 80142ce:	f897 3020 	ldrb.w	r3, [r7, #32]
 80142d2:	2b02      	cmp	r3, #2
 80142d4:	d103      	bne.n	80142de <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80142d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80142da:	60fb      	str	r3, [r7, #12]
 80142dc:	e001      	b.n	80142e2 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80142de:	2300      	movs	r3, #0
 80142e0:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80142e2:	787b      	ldrb	r3, [r7, #1]
 80142e4:	059b      	lsls	r3, r3, #22
 80142e6:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80142ea:	78bb      	ldrb	r3, [r7, #2]
 80142ec:	02db      	lsls	r3, r3, #11
 80142ee:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80142f2:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80142f4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80142f8:	049b      	lsls	r3, r3, #18
 80142fa:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80142fe:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8014300:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8014302:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8014306:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8014308:	693b      	ldr	r3, [r7, #16]
 801430a:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 801430c:	78fb      	ldrb	r3, [r7, #3]
 801430e:	0159      	lsls	r1, r3, #5
 8014310:	68bb      	ldr	r3, [r7, #8]
 8014312:	440b      	add	r3, r1
 8014314:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014318:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 801431a:	68fb      	ldr	r3, [r7, #12]
 801431c:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 801431e:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8014320:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014324:	2b03      	cmp	r3, #3
 8014326:	d10f      	bne.n	8014348 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8014328:	78fb      	ldrb	r3, [r7, #3]
 801432a:	015a      	lsls	r2, r3, #5
 801432c:	68bb      	ldr	r3, [r7, #8]
 801432e:	4413      	add	r3, r2
 8014330:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014334:	681b      	ldr	r3, [r3, #0]
 8014336:	78fa      	ldrb	r2, [r7, #3]
 8014338:	0151      	lsls	r1, r2, #5
 801433a:	68ba      	ldr	r2, [r7, #8]
 801433c:	440a      	add	r2, r1
 801433e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8014342:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8014346:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8014348:	7dfb      	ldrb	r3, [r7, #23]
}
 801434a:	4618      	mov	r0, r3
 801434c:	371c      	adds	r7, #28
 801434e:	46bd      	mov	sp, r7
 8014350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014354:	4770      	bx	lr
 8014356:	bf00      	nop

08014358 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8014358:	b580      	push	{r7, lr}
 801435a:	b08c      	sub	sp, #48	; 0x30
 801435c:	af02      	add	r7, sp, #8
 801435e:	60f8      	str	r0, [r7, #12]
 8014360:	60b9      	str	r1, [r7, #8]
 8014362:	4613      	mov	r3, r2
 8014364:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014366:	68fb      	ldr	r3, [r7, #12]
 8014368:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 801436a:	68bb      	ldr	r3, [r7, #8]
 801436c:	785b      	ldrb	r3, [r3, #1]
 801436e:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8014370:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014374:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8014376:	68fb      	ldr	r3, [r7, #12]
 8014378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801437a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801437e:	2b00      	cmp	r3, #0
 8014380:	d028      	beq.n	80143d4 <USB_HC_StartXfer+0x7c>
 8014382:	68bb      	ldr	r3, [r7, #8]
 8014384:	791b      	ldrb	r3, [r3, #4]
 8014386:	2b00      	cmp	r3, #0
 8014388:	d124      	bne.n	80143d4 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 801438a:	79fb      	ldrb	r3, [r7, #7]
 801438c:	2b00      	cmp	r3, #0
 801438e:	d10b      	bne.n	80143a8 <USB_HC_StartXfer+0x50>
 8014390:	68bb      	ldr	r3, [r7, #8]
 8014392:	795b      	ldrb	r3, [r3, #5]
 8014394:	2b01      	cmp	r3, #1
 8014396:	d107      	bne.n	80143a8 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8014398:	68bb      	ldr	r3, [r7, #8]
 801439a:	785b      	ldrb	r3, [r3, #1]
 801439c:	4619      	mov	r1, r3
 801439e:	68f8      	ldr	r0, [r7, #12]
 80143a0:	f000 fa30 	bl	8014804 <USB_DoPing>
      return HAL_OK;
 80143a4:	2300      	movs	r3, #0
 80143a6:	e114      	b.n	80145d2 <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 80143a8:	79fb      	ldrb	r3, [r7, #7]
 80143aa:	2b01      	cmp	r3, #1
 80143ac:	d112      	bne.n	80143d4 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80143ae:	69fb      	ldr	r3, [r7, #28]
 80143b0:	015a      	lsls	r2, r3, #5
 80143b2:	6a3b      	ldr	r3, [r7, #32]
 80143b4:	4413      	add	r3, r2
 80143b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80143ba:	68db      	ldr	r3, [r3, #12]
 80143bc:	69fa      	ldr	r2, [r7, #28]
 80143be:	0151      	lsls	r1, r2, #5
 80143c0:	6a3a      	ldr	r2, [r7, #32]
 80143c2:	440a      	add	r2, r1
 80143c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80143c8:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80143cc:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 80143ce:	68bb      	ldr	r3, [r7, #8]
 80143d0:	2200      	movs	r2, #0
 80143d2:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80143d4:	68bb      	ldr	r3, [r7, #8]
 80143d6:	691b      	ldr	r3, [r3, #16]
 80143d8:	2b00      	cmp	r3, #0
 80143da:	d018      	beq.n	801440e <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80143dc:	68bb      	ldr	r3, [r7, #8]
 80143de:	691b      	ldr	r3, [r3, #16]
 80143e0:	68ba      	ldr	r2, [r7, #8]
 80143e2:	8912      	ldrh	r2, [r2, #8]
 80143e4:	4413      	add	r3, r2
 80143e6:	3b01      	subs	r3, #1
 80143e8:	68ba      	ldr	r2, [r7, #8]
 80143ea:	8912      	ldrh	r2, [r2, #8]
 80143ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80143f0:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80143f2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80143f4:	8b7b      	ldrh	r3, [r7, #26]
 80143f6:	429a      	cmp	r2, r3
 80143f8:	d90b      	bls.n	8014412 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 80143fa:	8b7b      	ldrh	r3, [r7, #26]
 80143fc:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80143fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014400:	68ba      	ldr	r2, [r7, #8]
 8014402:	8912      	ldrh	r2, [r2, #8]
 8014404:	fb02 f203 	mul.w	r2, r2, r3
 8014408:	68bb      	ldr	r3, [r7, #8]
 801440a:	611a      	str	r2, [r3, #16]
 801440c:	e001      	b.n	8014412 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 801440e:	2301      	movs	r3, #1
 8014410:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8014412:	68bb      	ldr	r3, [r7, #8]
 8014414:	78db      	ldrb	r3, [r3, #3]
 8014416:	2b00      	cmp	r3, #0
 8014418:	d006      	beq.n	8014428 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 801441a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801441c:	68ba      	ldr	r2, [r7, #8]
 801441e:	8912      	ldrh	r2, [r2, #8]
 8014420:	fb02 f203 	mul.w	r2, r2, r3
 8014424:	68bb      	ldr	r3, [r7, #8]
 8014426:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8014428:	68bb      	ldr	r3, [r7, #8]
 801442a:	691b      	ldr	r3, [r3, #16]
 801442c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8014430:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014432:	04d9      	lsls	r1, r3, #19
 8014434:	4b69      	ldr	r3, [pc, #420]	; (80145dc <USB_HC_StartXfer+0x284>)
 8014436:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8014438:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 801443a:	68bb      	ldr	r3, [r7, #8]
 801443c:	7a9b      	ldrb	r3, [r3, #10]
 801443e:	075b      	lsls	r3, r3, #29
 8014440:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8014444:	69f9      	ldr	r1, [r7, #28]
 8014446:	0148      	lsls	r0, r1, #5
 8014448:	6a39      	ldr	r1, [r7, #32]
 801444a:	4401      	add	r1, r0
 801444c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8014450:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8014452:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8014454:	79fb      	ldrb	r3, [r7, #7]
 8014456:	2b00      	cmp	r3, #0
 8014458:	d009      	beq.n	801446e <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 801445a:	68bb      	ldr	r3, [r7, #8]
 801445c:	68d9      	ldr	r1, [r3, #12]
 801445e:	69fb      	ldr	r3, [r7, #28]
 8014460:	015a      	lsls	r2, r3, #5
 8014462:	6a3b      	ldr	r3, [r7, #32]
 8014464:	4413      	add	r3, r2
 8014466:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801446a:	460a      	mov	r2, r1
 801446c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 801446e:	6a3b      	ldr	r3, [r7, #32]
 8014470:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014474:	689b      	ldr	r3, [r3, #8]
 8014476:	f003 0301 	and.w	r3, r3, #1
 801447a:	2b00      	cmp	r3, #0
 801447c:	bf0c      	ite	eq
 801447e:	2301      	moveq	r3, #1
 8014480:	2300      	movne	r3, #0
 8014482:	b2db      	uxtb	r3, r3
 8014484:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8014486:	69fb      	ldr	r3, [r7, #28]
 8014488:	015a      	lsls	r2, r3, #5
 801448a:	6a3b      	ldr	r3, [r7, #32]
 801448c:	4413      	add	r3, r2
 801448e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014492:	681b      	ldr	r3, [r3, #0]
 8014494:	69fa      	ldr	r2, [r7, #28]
 8014496:	0151      	lsls	r1, r2, #5
 8014498:	6a3a      	ldr	r2, [r7, #32]
 801449a:	440a      	add	r2, r1
 801449c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80144a0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80144a4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80144a6:	69fb      	ldr	r3, [r7, #28]
 80144a8:	015a      	lsls	r2, r3, #5
 80144aa:	6a3b      	ldr	r3, [r7, #32]
 80144ac:	4413      	add	r3, r2
 80144ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80144b2:	681a      	ldr	r2, [r3, #0]
 80144b4:	7e7b      	ldrb	r3, [r7, #25]
 80144b6:	075b      	lsls	r3, r3, #29
 80144b8:	69f9      	ldr	r1, [r7, #28]
 80144ba:	0148      	lsls	r0, r1, #5
 80144bc:	6a39      	ldr	r1, [r7, #32]
 80144be:	4401      	add	r1, r0
 80144c0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80144c4:	4313      	orrs	r3, r2
 80144c6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80144c8:	69fb      	ldr	r3, [r7, #28]
 80144ca:	015a      	lsls	r2, r3, #5
 80144cc:	6a3b      	ldr	r3, [r7, #32]
 80144ce:	4413      	add	r3, r2
 80144d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80144d4:	681b      	ldr	r3, [r3, #0]
 80144d6:	4a42      	ldr	r2, [pc, #264]	; (80145e0 <USB_HC_StartXfer+0x288>)
 80144d8:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80144da:	4b41      	ldr	r3, [pc, #260]	; (80145e0 <USB_HC_StartXfer+0x288>)
 80144dc:	681b      	ldr	r3, [r3, #0]
 80144de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80144e2:	4a3f      	ldr	r2, [pc, #252]	; (80145e0 <USB_HC_StartXfer+0x288>)
 80144e4:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80144e6:	68bb      	ldr	r3, [r7, #8]
 80144e8:	78db      	ldrb	r3, [r3, #3]
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	d006      	beq.n	80144fc <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80144ee:	4b3c      	ldr	r3, [pc, #240]	; (80145e0 <USB_HC_StartXfer+0x288>)
 80144f0:	681b      	ldr	r3, [r3, #0]
 80144f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80144f6:	4a3a      	ldr	r2, [pc, #232]	; (80145e0 <USB_HC_StartXfer+0x288>)
 80144f8:	6013      	str	r3, [r2, #0]
 80144fa:	e005      	b.n	8014508 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80144fc:	4b38      	ldr	r3, [pc, #224]	; (80145e0 <USB_HC_StartXfer+0x288>)
 80144fe:	681b      	ldr	r3, [r3, #0]
 8014500:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8014504:	4a36      	ldr	r2, [pc, #216]	; (80145e0 <USB_HC_StartXfer+0x288>)
 8014506:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8014508:	4b35      	ldr	r3, [pc, #212]	; (80145e0 <USB_HC_StartXfer+0x288>)
 801450a:	681b      	ldr	r3, [r3, #0]
 801450c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8014510:	4a33      	ldr	r2, [pc, #204]	; (80145e0 <USB_HC_StartXfer+0x288>)
 8014512:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8014514:	69fb      	ldr	r3, [r7, #28]
 8014516:	015a      	lsls	r2, r3, #5
 8014518:	6a3b      	ldr	r3, [r7, #32]
 801451a:	4413      	add	r3, r2
 801451c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014520:	461a      	mov	r2, r3
 8014522:	4b2f      	ldr	r3, [pc, #188]	; (80145e0 <USB_HC_StartXfer+0x288>)
 8014524:	681b      	ldr	r3, [r3, #0]
 8014526:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8014528:	79fb      	ldrb	r3, [r7, #7]
 801452a:	2b00      	cmp	r3, #0
 801452c:	d001      	beq.n	8014532 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 801452e:	2300      	movs	r3, #0
 8014530:	e04f      	b.n	80145d2 <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8014532:	68bb      	ldr	r3, [r7, #8]
 8014534:	78db      	ldrb	r3, [r3, #3]
 8014536:	2b00      	cmp	r3, #0
 8014538:	d14a      	bne.n	80145d0 <USB_HC_StartXfer+0x278>
 801453a:	68bb      	ldr	r3, [r7, #8]
 801453c:	691b      	ldr	r3, [r3, #16]
 801453e:	2b00      	cmp	r3, #0
 8014540:	d046      	beq.n	80145d0 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 8014542:	68bb      	ldr	r3, [r7, #8]
 8014544:	79db      	ldrb	r3, [r3, #7]
 8014546:	2b03      	cmp	r3, #3
 8014548:	d830      	bhi.n	80145ac <USB_HC_StartXfer+0x254>
 801454a:	a201      	add	r2, pc, #4	; (adr r2, 8014550 <USB_HC_StartXfer+0x1f8>)
 801454c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014550:	08014561 	.word	0x08014561
 8014554:	08014585 	.word	0x08014585
 8014558:	08014561 	.word	0x08014561
 801455c:	08014585 	.word	0x08014585
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8014560:	68bb      	ldr	r3, [r7, #8]
 8014562:	691b      	ldr	r3, [r3, #16]
 8014564:	3303      	adds	r3, #3
 8014566:	089b      	lsrs	r3, r3, #2
 8014568:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 801456a:	8afa      	ldrh	r2, [r7, #22]
 801456c:	68fb      	ldr	r3, [r7, #12]
 801456e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014570:	b29b      	uxth	r3, r3
 8014572:	429a      	cmp	r2, r3
 8014574:	d91c      	bls.n	80145b0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8014576:	68fb      	ldr	r3, [r7, #12]
 8014578:	699b      	ldr	r3, [r3, #24]
 801457a:	f043 0220 	orr.w	r2, r3, #32
 801457e:	68fb      	ldr	r3, [r7, #12]
 8014580:	619a      	str	r2, [r3, #24]
        }
        break;
 8014582:	e015      	b.n	80145b0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8014584:	68bb      	ldr	r3, [r7, #8]
 8014586:	691b      	ldr	r3, [r3, #16]
 8014588:	3303      	adds	r3, #3
 801458a:	089b      	lsrs	r3, r3, #2
 801458c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 801458e:	8afa      	ldrh	r2, [r7, #22]
 8014590:	6a3b      	ldr	r3, [r7, #32]
 8014592:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014596:	691b      	ldr	r3, [r3, #16]
 8014598:	b29b      	uxth	r3, r3
 801459a:	429a      	cmp	r2, r3
 801459c:	d90a      	bls.n	80145b4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 801459e:	68fb      	ldr	r3, [r7, #12]
 80145a0:	699b      	ldr	r3, [r3, #24]
 80145a2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80145a6:	68fb      	ldr	r3, [r7, #12]
 80145a8:	619a      	str	r2, [r3, #24]
        }
        break;
 80145aa:	e003      	b.n	80145b4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80145ac:	bf00      	nop
 80145ae:	e002      	b.n	80145b6 <USB_HC_StartXfer+0x25e>
        break;
 80145b0:	bf00      	nop
 80145b2:	e000      	b.n	80145b6 <USB_HC_StartXfer+0x25e>
        break;
 80145b4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80145b6:	68bb      	ldr	r3, [r7, #8]
 80145b8:	68d9      	ldr	r1, [r3, #12]
 80145ba:	68bb      	ldr	r3, [r7, #8]
 80145bc:	785a      	ldrb	r2, [r3, #1]
 80145be:	68bb      	ldr	r3, [r7, #8]
 80145c0:	691b      	ldr	r3, [r3, #16]
 80145c2:	b298      	uxth	r0, r3
 80145c4:	2300      	movs	r3, #0
 80145c6:	9300      	str	r3, [sp, #0]
 80145c8:	4603      	mov	r3, r0
 80145ca:	68f8      	ldr	r0, [r7, #12]
 80145cc:	f7ff fbc6 	bl	8013d5c <USB_WritePacket>
  }

  return HAL_OK;
 80145d0:	2300      	movs	r3, #0
}
 80145d2:	4618      	mov	r0, r3
 80145d4:	3728      	adds	r7, #40	; 0x28
 80145d6:	46bd      	mov	sp, r7
 80145d8:	bd80      	pop	{r7, pc}
 80145da:	bf00      	nop
 80145dc:	1ff80000 	.word	0x1ff80000
 80145e0:	2000020c 	.word	0x2000020c

080145e4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80145e4:	b480      	push	{r7}
 80145e6:	b085      	sub	sp, #20
 80145e8:	af00      	add	r7, sp, #0
 80145ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80145f0:	68fb      	ldr	r3, [r7, #12]
 80145f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80145f6:	695b      	ldr	r3, [r3, #20]
 80145f8:	b29b      	uxth	r3, r3
}
 80145fa:	4618      	mov	r0, r3
 80145fc:	3714      	adds	r7, #20
 80145fe:	46bd      	mov	sp, r7
 8014600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014604:	4770      	bx	lr

08014606 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8014606:	b480      	push	{r7}
 8014608:	b087      	sub	sp, #28
 801460a:	af00      	add	r7, sp, #0
 801460c:	6078      	str	r0, [r7, #4]
 801460e:	460b      	mov	r3, r1
 8014610:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8014616:	78fb      	ldrb	r3, [r7, #3]
 8014618:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 801461a:	2300      	movs	r3, #0
 801461c:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 801461e:	68fb      	ldr	r3, [r7, #12]
 8014620:	015a      	lsls	r2, r3, #5
 8014622:	693b      	ldr	r3, [r7, #16]
 8014624:	4413      	add	r3, r2
 8014626:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801462a:	681b      	ldr	r3, [r3, #0]
 801462c:	0c9b      	lsrs	r3, r3, #18
 801462e:	f003 0303 	and.w	r3, r3, #3
 8014632:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8014634:	68bb      	ldr	r3, [r7, #8]
 8014636:	2b00      	cmp	r3, #0
 8014638:	d002      	beq.n	8014640 <USB_HC_Halt+0x3a>
 801463a:	68bb      	ldr	r3, [r7, #8]
 801463c:	2b02      	cmp	r3, #2
 801463e:	d16c      	bne.n	801471a <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8014640:	68fb      	ldr	r3, [r7, #12]
 8014642:	015a      	lsls	r2, r3, #5
 8014644:	693b      	ldr	r3, [r7, #16]
 8014646:	4413      	add	r3, r2
 8014648:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801464c:	681b      	ldr	r3, [r3, #0]
 801464e:	68fa      	ldr	r2, [r7, #12]
 8014650:	0151      	lsls	r1, r2, #5
 8014652:	693a      	ldr	r2, [r7, #16]
 8014654:	440a      	add	r2, r1
 8014656:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801465a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801465e:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014664:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8014668:	2b00      	cmp	r3, #0
 801466a:	d143      	bne.n	80146f4 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 801466c:	68fb      	ldr	r3, [r7, #12]
 801466e:	015a      	lsls	r2, r3, #5
 8014670:	693b      	ldr	r3, [r7, #16]
 8014672:	4413      	add	r3, r2
 8014674:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014678:	681b      	ldr	r3, [r3, #0]
 801467a:	68fa      	ldr	r2, [r7, #12]
 801467c:	0151      	lsls	r1, r2, #5
 801467e:	693a      	ldr	r2, [r7, #16]
 8014680:	440a      	add	r2, r1
 8014682:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8014686:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801468a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 801468c:	68fb      	ldr	r3, [r7, #12]
 801468e:	015a      	lsls	r2, r3, #5
 8014690:	693b      	ldr	r3, [r7, #16]
 8014692:	4413      	add	r3, r2
 8014694:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014698:	681b      	ldr	r3, [r3, #0]
 801469a:	68fa      	ldr	r2, [r7, #12]
 801469c:	0151      	lsls	r1, r2, #5
 801469e:	693a      	ldr	r2, [r7, #16]
 80146a0:	440a      	add	r2, r1
 80146a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80146a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80146aa:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80146ac:	68fb      	ldr	r3, [r7, #12]
 80146ae:	015a      	lsls	r2, r3, #5
 80146b0:	693b      	ldr	r3, [r7, #16]
 80146b2:	4413      	add	r3, r2
 80146b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80146b8:	681b      	ldr	r3, [r3, #0]
 80146ba:	68fa      	ldr	r2, [r7, #12]
 80146bc:	0151      	lsls	r1, r2, #5
 80146be:	693a      	ldr	r2, [r7, #16]
 80146c0:	440a      	add	r2, r1
 80146c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80146c6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80146ca:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80146cc:	697b      	ldr	r3, [r7, #20]
 80146ce:	3301      	adds	r3, #1
 80146d0:	617b      	str	r3, [r7, #20]
 80146d2:	697b      	ldr	r3, [r7, #20]
 80146d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80146d8:	d81d      	bhi.n	8014716 <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80146da:	68fb      	ldr	r3, [r7, #12]
 80146dc:	015a      	lsls	r2, r3, #5
 80146de:	693b      	ldr	r3, [r7, #16]
 80146e0:	4413      	add	r3, r2
 80146e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80146e6:	681b      	ldr	r3, [r3, #0]
 80146e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80146ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80146f0:	d0ec      	beq.n	80146cc <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80146f2:	e080      	b.n	80147f6 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80146f4:	68fb      	ldr	r3, [r7, #12]
 80146f6:	015a      	lsls	r2, r3, #5
 80146f8:	693b      	ldr	r3, [r7, #16]
 80146fa:	4413      	add	r3, r2
 80146fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014700:	681b      	ldr	r3, [r3, #0]
 8014702:	68fa      	ldr	r2, [r7, #12]
 8014704:	0151      	lsls	r1, r2, #5
 8014706:	693a      	ldr	r2, [r7, #16]
 8014708:	440a      	add	r2, r1
 801470a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801470e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8014712:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8014714:	e06f      	b.n	80147f6 <USB_HC_Halt+0x1f0>
          break;
 8014716:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8014718:	e06d      	b.n	80147f6 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 801471a:	68fb      	ldr	r3, [r7, #12]
 801471c:	015a      	lsls	r2, r3, #5
 801471e:	693b      	ldr	r3, [r7, #16]
 8014720:	4413      	add	r3, r2
 8014722:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014726:	681b      	ldr	r3, [r3, #0]
 8014728:	68fa      	ldr	r2, [r7, #12]
 801472a:	0151      	lsls	r1, r2, #5
 801472c:	693a      	ldr	r2, [r7, #16]
 801472e:	440a      	add	r2, r1
 8014730:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8014734:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014738:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 801473a:	693b      	ldr	r3, [r7, #16]
 801473c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014740:	691b      	ldr	r3, [r3, #16]
 8014742:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8014746:	2b00      	cmp	r3, #0
 8014748:	d143      	bne.n	80147d2 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 801474a:	68fb      	ldr	r3, [r7, #12]
 801474c:	015a      	lsls	r2, r3, #5
 801474e:	693b      	ldr	r3, [r7, #16]
 8014750:	4413      	add	r3, r2
 8014752:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014756:	681b      	ldr	r3, [r3, #0]
 8014758:	68fa      	ldr	r2, [r7, #12]
 801475a:	0151      	lsls	r1, r2, #5
 801475c:	693a      	ldr	r2, [r7, #16]
 801475e:	440a      	add	r2, r1
 8014760:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8014764:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014768:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 801476a:	68fb      	ldr	r3, [r7, #12]
 801476c:	015a      	lsls	r2, r3, #5
 801476e:	693b      	ldr	r3, [r7, #16]
 8014770:	4413      	add	r3, r2
 8014772:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014776:	681b      	ldr	r3, [r3, #0]
 8014778:	68fa      	ldr	r2, [r7, #12]
 801477a:	0151      	lsls	r1, r2, #5
 801477c:	693a      	ldr	r2, [r7, #16]
 801477e:	440a      	add	r2, r1
 8014780:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8014784:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8014788:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 801478a:	68fb      	ldr	r3, [r7, #12]
 801478c:	015a      	lsls	r2, r3, #5
 801478e:	693b      	ldr	r3, [r7, #16]
 8014790:	4413      	add	r3, r2
 8014792:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014796:	681b      	ldr	r3, [r3, #0]
 8014798:	68fa      	ldr	r2, [r7, #12]
 801479a:	0151      	lsls	r1, r2, #5
 801479c:	693a      	ldr	r2, [r7, #16]
 801479e:	440a      	add	r2, r1
 80147a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80147a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80147a8:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80147aa:	697b      	ldr	r3, [r7, #20]
 80147ac:	3301      	adds	r3, #1
 80147ae:	617b      	str	r3, [r7, #20]
 80147b0:	697b      	ldr	r3, [r7, #20]
 80147b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80147b6:	d81d      	bhi.n	80147f4 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80147b8:	68fb      	ldr	r3, [r7, #12]
 80147ba:	015a      	lsls	r2, r3, #5
 80147bc:	693b      	ldr	r3, [r7, #16]
 80147be:	4413      	add	r3, r2
 80147c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80147c4:	681b      	ldr	r3, [r3, #0]
 80147c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80147ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80147ce:	d0ec      	beq.n	80147aa <USB_HC_Halt+0x1a4>
 80147d0:	e011      	b.n	80147f6 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80147d2:	68fb      	ldr	r3, [r7, #12]
 80147d4:	015a      	lsls	r2, r3, #5
 80147d6:	693b      	ldr	r3, [r7, #16]
 80147d8:	4413      	add	r3, r2
 80147da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80147de:	681b      	ldr	r3, [r3, #0]
 80147e0:	68fa      	ldr	r2, [r7, #12]
 80147e2:	0151      	lsls	r1, r2, #5
 80147e4:	693a      	ldr	r2, [r7, #16]
 80147e6:	440a      	add	r2, r1
 80147e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80147ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80147f0:	6013      	str	r3, [r2, #0]
 80147f2:	e000      	b.n	80147f6 <USB_HC_Halt+0x1f0>
          break;
 80147f4:	bf00      	nop
    }
  }

  return HAL_OK;
 80147f6:	2300      	movs	r3, #0
}
 80147f8:	4618      	mov	r0, r3
 80147fa:	371c      	adds	r7, #28
 80147fc:	46bd      	mov	sp, r7
 80147fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014802:	4770      	bx	lr

08014804 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8014804:	b480      	push	{r7}
 8014806:	b087      	sub	sp, #28
 8014808:	af00      	add	r7, sp, #0
 801480a:	6078      	str	r0, [r7, #4]
 801480c:	460b      	mov	r3, r1
 801480e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8014814:	78fb      	ldrb	r3, [r7, #3]
 8014816:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8014818:	2301      	movs	r3, #1
 801481a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 801481c:	68fb      	ldr	r3, [r7, #12]
 801481e:	04da      	lsls	r2, r3, #19
 8014820:	4b15      	ldr	r3, [pc, #84]	; (8014878 <USB_DoPing+0x74>)
 8014822:	4013      	ands	r3, r2
 8014824:	693a      	ldr	r2, [r7, #16]
 8014826:	0151      	lsls	r1, r2, #5
 8014828:	697a      	ldr	r2, [r7, #20]
 801482a:	440a      	add	r2, r1
 801482c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8014830:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8014834:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8014836:	693b      	ldr	r3, [r7, #16]
 8014838:	015a      	lsls	r2, r3, #5
 801483a:	697b      	ldr	r3, [r7, #20]
 801483c:	4413      	add	r3, r2
 801483e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014842:	681b      	ldr	r3, [r3, #0]
 8014844:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8014846:	68bb      	ldr	r3, [r7, #8]
 8014848:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801484c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 801484e:	68bb      	ldr	r3, [r7, #8]
 8014850:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8014854:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8014856:	693b      	ldr	r3, [r7, #16]
 8014858:	015a      	lsls	r2, r3, #5
 801485a:	697b      	ldr	r3, [r7, #20]
 801485c:	4413      	add	r3, r2
 801485e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014862:	461a      	mov	r2, r3
 8014864:	68bb      	ldr	r3, [r7, #8]
 8014866:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8014868:	2300      	movs	r3, #0
}
 801486a:	4618      	mov	r0, r3
 801486c:	371c      	adds	r7, #28
 801486e:	46bd      	mov	sp, r7
 8014870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014874:	4770      	bx	lr
 8014876:	bf00      	nop
 8014878:	1ff80000 	.word	0x1ff80000

0801487c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 801487c:	b580      	push	{r7, lr}
 801487e:	b086      	sub	sp, #24
 8014880:	af00      	add	r7, sp, #0
 8014882:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014884:	687b      	ldr	r3, [r7, #4]
 8014886:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8014888:	2300      	movs	r3, #0
 801488a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 801488c:	6878      	ldr	r0, [r7, #4]
 801488e:	f7ff f9e1 	bl	8013c54 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8014892:	2110      	movs	r1, #16
 8014894:	6878      	ldr	r0, [r7, #4]
 8014896:	f7ff fa19 	bl	8013ccc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 801489a:	6878      	ldr	r0, [r7, #4]
 801489c:	f7ff fa3c 	bl	8013d18 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80148a0:	2300      	movs	r3, #0
 80148a2:	613b      	str	r3, [r7, #16]
 80148a4:	e01f      	b.n	80148e6 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80148a6:	693b      	ldr	r3, [r7, #16]
 80148a8:	015a      	lsls	r2, r3, #5
 80148aa:	68fb      	ldr	r3, [r7, #12]
 80148ac:	4413      	add	r3, r2
 80148ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80148b2:	681b      	ldr	r3, [r3, #0]
 80148b4:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80148b6:	68bb      	ldr	r3, [r7, #8]
 80148b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80148bc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80148be:	68bb      	ldr	r3, [r7, #8]
 80148c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80148c4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80148c6:	68bb      	ldr	r3, [r7, #8]
 80148c8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80148cc:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80148ce:	693b      	ldr	r3, [r7, #16]
 80148d0:	015a      	lsls	r2, r3, #5
 80148d2:	68fb      	ldr	r3, [r7, #12]
 80148d4:	4413      	add	r3, r2
 80148d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80148da:	461a      	mov	r2, r3
 80148dc:	68bb      	ldr	r3, [r7, #8]
 80148de:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80148e0:	693b      	ldr	r3, [r7, #16]
 80148e2:	3301      	adds	r3, #1
 80148e4:	613b      	str	r3, [r7, #16]
 80148e6:	693b      	ldr	r3, [r7, #16]
 80148e8:	2b0f      	cmp	r3, #15
 80148ea:	d9dc      	bls.n	80148a6 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80148ec:	2300      	movs	r3, #0
 80148ee:	613b      	str	r3, [r7, #16]
 80148f0:	e034      	b.n	801495c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80148f2:	693b      	ldr	r3, [r7, #16]
 80148f4:	015a      	lsls	r2, r3, #5
 80148f6:	68fb      	ldr	r3, [r7, #12]
 80148f8:	4413      	add	r3, r2
 80148fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80148fe:	681b      	ldr	r3, [r3, #0]
 8014900:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8014902:	68bb      	ldr	r3, [r7, #8]
 8014904:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014908:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 801490a:	68bb      	ldr	r3, [r7, #8]
 801490c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8014910:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8014912:	68bb      	ldr	r3, [r7, #8]
 8014914:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8014918:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 801491a:	693b      	ldr	r3, [r7, #16]
 801491c:	015a      	lsls	r2, r3, #5
 801491e:	68fb      	ldr	r3, [r7, #12]
 8014920:	4413      	add	r3, r2
 8014922:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014926:	461a      	mov	r2, r3
 8014928:	68bb      	ldr	r3, [r7, #8]
 801492a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 801492c:	697b      	ldr	r3, [r7, #20]
 801492e:	3301      	adds	r3, #1
 8014930:	617b      	str	r3, [r7, #20]
 8014932:	697b      	ldr	r3, [r7, #20]
 8014934:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014938:	d80c      	bhi.n	8014954 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 801493a:	693b      	ldr	r3, [r7, #16]
 801493c:	015a      	lsls	r2, r3, #5
 801493e:	68fb      	ldr	r3, [r7, #12]
 8014940:	4413      	add	r3, r2
 8014942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014946:	681b      	ldr	r3, [r3, #0]
 8014948:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801494c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014950:	d0ec      	beq.n	801492c <USB_StopHost+0xb0>
 8014952:	e000      	b.n	8014956 <USB_StopHost+0xda>
        break;
 8014954:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8014956:	693b      	ldr	r3, [r7, #16]
 8014958:	3301      	adds	r3, #1
 801495a:	613b      	str	r3, [r7, #16]
 801495c:	693b      	ldr	r3, [r7, #16]
 801495e:	2b0f      	cmp	r3, #15
 8014960:	d9c7      	bls.n	80148f2 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8014962:	68fb      	ldr	r3, [r7, #12]
 8014964:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014968:	461a      	mov	r2, r3
 801496a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801496e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8014970:	687b      	ldr	r3, [r7, #4]
 8014972:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014976:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8014978:	6878      	ldr	r0, [r7, #4]
 801497a:	f7ff f95a 	bl	8013c32 <USB_EnableGlobalInt>

  return HAL_OK;
 801497e:	2300      	movs	r3, #0
}
 8014980:	4618      	mov	r0, r3
 8014982:	3718      	adds	r7, #24
 8014984:	46bd      	mov	sp, r7
 8014986:	bd80      	pop	{r7, pc}

08014988 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8014988:	b590      	push	{r4, r7, lr}
 801498a:	b089      	sub	sp, #36	; 0x24
 801498c:	af04      	add	r7, sp, #16
 801498e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8014990:	2301      	movs	r3, #1
 8014992:	2202      	movs	r2, #2
 8014994:	2102      	movs	r1, #2
 8014996:	6878      	ldr	r0, [r7, #4]
 8014998:	f000 fc68 	bl	801526c <USBH_FindInterface>
 801499c:	4603      	mov	r3, r0
 801499e:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80149a0:	7bfb      	ldrb	r3, [r7, #15]
 80149a2:	2bff      	cmp	r3, #255	; 0xff
 80149a4:	d002      	beq.n	80149ac <USBH_CDC_InterfaceInit+0x24>
 80149a6:	7bfb      	ldrb	r3, [r7, #15]
 80149a8:	2b01      	cmp	r3, #1
 80149aa:	d901      	bls.n	80149b0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80149ac:	2302      	movs	r3, #2
 80149ae:	e13d      	b.n	8014c2c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80149b0:	7bfb      	ldrb	r3, [r7, #15]
 80149b2:	4619      	mov	r1, r3
 80149b4:	6878      	ldr	r0, [r7, #4]
 80149b6:	f000 fc3d 	bl	8015234 <USBH_SelectInterface>
 80149ba:	4603      	mov	r3, r0
 80149bc:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80149be:	7bbb      	ldrb	r3, [r7, #14]
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	d001      	beq.n	80149c8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80149c4:	2302      	movs	r3, #2
 80149c6:	e131      	b.n	8014c2c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80149ce:	2050      	movs	r0, #80	; 0x50
 80149d0:	f001 fb5c 	bl	801608c <malloc>
 80149d4:	4603      	mov	r3, r0
 80149d6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80149de:	69db      	ldr	r3, [r3, #28]
 80149e0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80149e2:	68bb      	ldr	r3, [r7, #8]
 80149e4:	2b00      	cmp	r3, #0
 80149e6:	d101      	bne.n	80149ec <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80149e8:	2302      	movs	r3, #2
 80149ea:	e11f      	b.n	8014c2c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80149ec:	2250      	movs	r2, #80	; 0x50
 80149ee:	2100      	movs	r1, #0
 80149f0:	68b8      	ldr	r0, [r7, #8]
 80149f2:	f001 fb74 	bl	80160de <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80149f6:	7bfb      	ldrb	r3, [r7, #15]
 80149f8:	687a      	ldr	r2, [r7, #4]
 80149fa:	211a      	movs	r1, #26
 80149fc:	fb01 f303 	mul.w	r3, r1, r3
 8014a00:	4413      	add	r3, r2
 8014a02:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8014a06:	781b      	ldrb	r3, [r3, #0]
 8014a08:	b25b      	sxtb	r3, r3
 8014a0a:	2b00      	cmp	r3, #0
 8014a0c:	da15      	bge.n	8014a3a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8014a0e:	7bfb      	ldrb	r3, [r7, #15]
 8014a10:	687a      	ldr	r2, [r7, #4]
 8014a12:	211a      	movs	r1, #26
 8014a14:	fb01 f303 	mul.w	r3, r1, r3
 8014a18:	4413      	add	r3, r2
 8014a1a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8014a1e:	781a      	ldrb	r2, [r3, #0]
 8014a20:	68bb      	ldr	r3, [r7, #8]
 8014a22:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8014a24:	7bfb      	ldrb	r3, [r7, #15]
 8014a26:	687a      	ldr	r2, [r7, #4]
 8014a28:	211a      	movs	r1, #26
 8014a2a:	fb01 f303 	mul.w	r3, r1, r3
 8014a2e:	4413      	add	r3, r2
 8014a30:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8014a34:	881a      	ldrh	r2, [r3, #0]
 8014a36:	68bb      	ldr	r3, [r7, #8]
 8014a38:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8014a3a:	68bb      	ldr	r3, [r7, #8]
 8014a3c:	785b      	ldrb	r3, [r3, #1]
 8014a3e:	4619      	mov	r1, r3
 8014a40:	6878      	ldr	r0, [r7, #4]
 8014a42:	f000 ffa0 	bl	8015986 <USBH_AllocPipe>
 8014a46:	4603      	mov	r3, r0
 8014a48:	461a      	mov	r2, r3
 8014a4a:	68bb      	ldr	r3, [r7, #8]
 8014a4c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8014a4e:	68bb      	ldr	r3, [r7, #8]
 8014a50:	7819      	ldrb	r1, [r3, #0]
 8014a52:	68bb      	ldr	r3, [r7, #8]
 8014a54:	7858      	ldrb	r0, [r3, #1]
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8014a62:	68ba      	ldr	r2, [r7, #8]
 8014a64:	8952      	ldrh	r2, [r2, #10]
 8014a66:	9202      	str	r2, [sp, #8]
 8014a68:	2203      	movs	r2, #3
 8014a6a:	9201      	str	r2, [sp, #4]
 8014a6c:	9300      	str	r3, [sp, #0]
 8014a6e:	4623      	mov	r3, r4
 8014a70:	4602      	mov	r2, r0
 8014a72:	6878      	ldr	r0, [r7, #4]
 8014a74:	f000 ff58 	bl	8015928 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8014a78:	68bb      	ldr	r3, [r7, #8]
 8014a7a:	781b      	ldrb	r3, [r3, #0]
 8014a7c:	2200      	movs	r2, #0
 8014a7e:	4619      	mov	r1, r3
 8014a80:	6878      	ldr	r0, [r7, #4]
 8014a82:	f001 fa1b 	bl	8015ebc <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8014a86:	2300      	movs	r3, #0
 8014a88:	2200      	movs	r2, #0
 8014a8a:	210a      	movs	r1, #10
 8014a8c:	6878      	ldr	r0, [r7, #4]
 8014a8e:	f000 fbed 	bl	801526c <USBH_FindInterface>
 8014a92:	4603      	mov	r3, r0
 8014a94:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8014a96:	7bfb      	ldrb	r3, [r7, #15]
 8014a98:	2bff      	cmp	r3, #255	; 0xff
 8014a9a:	d002      	beq.n	8014aa2 <USBH_CDC_InterfaceInit+0x11a>
 8014a9c:	7bfb      	ldrb	r3, [r7, #15]
 8014a9e:	2b01      	cmp	r3, #1
 8014aa0:	d901      	bls.n	8014aa6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8014aa2:	2302      	movs	r3, #2
 8014aa4:	e0c2      	b.n	8014c2c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8014aa6:	7bfb      	ldrb	r3, [r7, #15]
 8014aa8:	687a      	ldr	r2, [r7, #4]
 8014aaa:	211a      	movs	r1, #26
 8014aac:	fb01 f303 	mul.w	r3, r1, r3
 8014ab0:	4413      	add	r3, r2
 8014ab2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8014ab6:	781b      	ldrb	r3, [r3, #0]
 8014ab8:	b25b      	sxtb	r3, r3
 8014aba:	2b00      	cmp	r3, #0
 8014abc:	da16      	bge.n	8014aec <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8014abe:	7bfb      	ldrb	r3, [r7, #15]
 8014ac0:	687a      	ldr	r2, [r7, #4]
 8014ac2:	211a      	movs	r1, #26
 8014ac4:	fb01 f303 	mul.w	r3, r1, r3
 8014ac8:	4413      	add	r3, r2
 8014aca:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8014ace:	781a      	ldrb	r2, [r3, #0]
 8014ad0:	68bb      	ldr	r3, [r7, #8]
 8014ad2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8014ad4:	7bfb      	ldrb	r3, [r7, #15]
 8014ad6:	687a      	ldr	r2, [r7, #4]
 8014ad8:	211a      	movs	r1, #26
 8014ada:	fb01 f303 	mul.w	r3, r1, r3
 8014ade:	4413      	add	r3, r2
 8014ae0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8014ae4:	881a      	ldrh	r2, [r3, #0]
 8014ae6:	68bb      	ldr	r3, [r7, #8]
 8014ae8:	835a      	strh	r2, [r3, #26]
 8014aea:	e015      	b.n	8014b18 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8014aec:	7bfb      	ldrb	r3, [r7, #15]
 8014aee:	687a      	ldr	r2, [r7, #4]
 8014af0:	211a      	movs	r1, #26
 8014af2:	fb01 f303 	mul.w	r3, r1, r3
 8014af6:	4413      	add	r3, r2
 8014af8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8014afc:	781a      	ldrb	r2, [r3, #0]
 8014afe:	68bb      	ldr	r3, [r7, #8]
 8014b00:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8014b02:	7bfb      	ldrb	r3, [r7, #15]
 8014b04:	687a      	ldr	r2, [r7, #4]
 8014b06:	211a      	movs	r1, #26
 8014b08:	fb01 f303 	mul.w	r3, r1, r3
 8014b0c:	4413      	add	r3, r2
 8014b0e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8014b12:	881a      	ldrh	r2, [r3, #0]
 8014b14:	68bb      	ldr	r3, [r7, #8]
 8014b16:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8014b18:	7bfb      	ldrb	r3, [r7, #15]
 8014b1a:	687a      	ldr	r2, [r7, #4]
 8014b1c:	211a      	movs	r1, #26
 8014b1e:	fb01 f303 	mul.w	r3, r1, r3
 8014b22:	4413      	add	r3, r2
 8014b24:	f203 3356 	addw	r3, r3, #854	; 0x356
 8014b28:	781b      	ldrb	r3, [r3, #0]
 8014b2a:	b25b      	sxtb	r3, r3
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	da16      	bge.n	8014b5e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8014b30:	7bfb      	ldrb	r3, [r7, #15]
 8014b32:	687a      	ldr	r2, [r7, #4]
 8014b34:	211a      	movs	r1, #26
 8014b36:	fb01 f303 	mul.w	r3, r1, r3
 8014b3a:	4413      	add	r3, r2
 8014b3c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8014b40:	781a      	ldrb	r2, [r3, #0]
 8014b42:	68bb      	ldr	r3, [r7, #8]
 8014b44:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8014b46:	7bfb      	ldrb	r3, [r7, #15]
 8014b48:	687a      	ldr	r2, [r7, #4]
 8014b4a:	211a      	movs	r1, #26
 8014b4c:	fb01 f303 	mul.w	r3, r1, r3
 8014b50:	4413      	add	r3, r2
 8014b52:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8014b56:	881a      	ldrh	r2, [r3, #0]
 8014b58:	68bb      	ldr	r3, [r7, #8]
 8014b5a:	835a      	strh	r2, [r3, #26]
 8014b5c:	e015      	b.n	8014b8a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8014b5e:	7bfb      	ldrb	r3, [r7, #15]
 8014b60:	687a      	ldr	r2, [r7, #4]
 8014b62:	211a      	movs	r1, #26
 8014b64:	fb01 f303 	mul.w	r3, r1, r3
 8014b68:	4413      	add	r3, r2
 8014b6a:	f203 3356 	addw	r3, r3, #854	; 0x356
 8014b6e:	781a      	ldrb	r2, [r3, #0]
 8014b70:	68bb      	ldr	r3, [r7, #8]
 8014b72:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8014b74:	7bfb      	ldrb	r3, [r7, #15]
 8014b76:	687a      	ldr	r2, [r7, #4]
 8014b78:	211a      	movs	r1, #26
 8014b7a:	fb01 f303 	mul.w	r3, r1, r3
 8014b7e:	4413      	add	r3, r2
 8014b80:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8014b84:	881a      	ldrh	r2, [r3, #0]
 8014b86:	68bb      	ldr	r3, [r7, #8]
 8014b88:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8014b8a:	68bb      	ldr	r3, [r7, #8]
 8014b8c:	7b9b      	ldrb	r3, [r3, #14]
 8014b8e:	4619      	mov	r1, r3
 8014b90:	6878      	ldr	r0, [r7, #4]
 8014b92:	f000 fef8 	bl	8015986 <USBH_AllocPipe>
 8014b96:	4603      	mov	r3, r0
 8014b98:	461a      	mov	r2, r3
 8014b9a:	68bb      	ldr	r3, [r7, #8]
 8014b9c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8014b9e:	68bb      	ldr	r3, [r7, #8]
 8014ba0:	7bdb      	ldrb	r3, [r3, #15]
 8014ba2:	4619      	mov	r1, r3
 8014ba4:	6878      	ldr	r0, [r7, #4]
 8014ba6:	f000 feee 	bl	8015986 <USBH_AllocPipe>
 8014baa:	4603      	mov	r3, r0
 8014bac:	461a      	mov	r2, r3
 8014bae:	68bb      	ldr	r3, [r7, #8]
 8014bb0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8014bb2:	68bb      	ldr	r3, [r7, #8]
 8014bb4:	7b59      	ldrb	r1, [r3, #13]
 8014bb6:	68bb      	ldr	r3, [r7, #8]
 8014bb8:	7b98      	ldrb	r0, [r3, #14]
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8014bc6:	68ba      	ldr	r2, [r7, #8]
 8014bc8:	8b12      	ldrh	r2, [r2, #24]
 8014bca:	9202      	str	r2, [sp, #8]
 8014bcc:	2202      	movs	r2, #2
 8014bce:	9201      	str	r2, [sp, #4]
 8014bd0:	9300      	str	r3, [sp, #0]
 8014bd2:	4623      	mov	r3, r4
 8014bd4:	4602      	mov	r2, r0
 8014bd6:	6878      	ldr	r0, [r7, #4]
 8014bd8:	f000 fea6 	bl	8015928 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8014bdc:	68bb      	ldr	r3, [r7, #8]
 8014bde:	7b19      	ldrb	r1, [r3, #12]
 8014be0:	68bb      	ldr	r3, [r7, #8]
 8014be2:	7bd8      	ldrb	r0, [r3, #15]
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8014bf0:	68ba      	ldr	r2, [r7, #8]
 8014bf2:	8b52      	ldrh	r2, [r2, #26]
 8014bf4:	9202      	str	r2, [sp, #8]
 8014bf6:	2202      	movs	r2, #2
 8014bf8:	9201      	str	r2, [sp, #4]
 8014bfa:	9300      	str	r3, [sp, #0]
 8014bfc:	4623      	mov	r3, r4
 8014bfe:	4602      	mov	r2, r0
 8014c00:	6878      	ldr	r0, [r7, #4]
 8014c02:	f000 fe91 	bl	8015928 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8014c06:	68bb      	ldr	r3, [r7, #8]
 8014c08:	2200      	movs	r2, #0
 8014c0a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8014c0e:	68bb      	ldr	r3, [r7, #8]
 8014c10:	7b5b      	ldrb	r3, [r3, #13]
 8014c12:	2200      	movs	r2, #0
 8014c14:	4619      	mov	r1, r3
 8014c16:	6878      	ldr	r0, [r7, #4]
 8014c18:	f001 f950 	bl	8015ebc <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8014c1c:	68bb      	ldr	r3, [r7, #8]
 8014c1e:	7b1b      	ldrb	r3, [r3, #12]
 8014c20:	2200      	movs	r2, #0
 8014c22:	4619      	mov	r1, r3
 8014c24:	6878      	ldr	r0, [r7, #4]
 8014c26:	f001 f949 	bl	8015ebc <USBH_LL_SetToggle>

  return USBH_OK;
 8014c2a:	2300      	movs	r3, #0
}
 8014c2c:	4618      	mov	r0, r3
 8014c2e:	3714      	adds	r7, #20
 8014c30:	46bd      	mov	sp, r7
 8014c32:	bd90      	pop	{r4, r7, pc}

08014c34 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8014c34:	b580      	push	{r7, lr}
 8014c36:	b084      	sub	sp, #16
 8014c38:	af00      	add	r7, sp, #0
 8014c3a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8014c3c:	687b      	ldr	r3, [r7, #4]
 8014c3e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8014c42:	69db      	ldr	r3, [r3, #28]
 8014c44:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8014c46:	68fb      	ldr	r3, [r7, #12]
 8014c48:	781b      	ldrb	r3, [r3, #0]
 8014c4a:	2b00      	cmp	r3, #0
 8014c4c:	d00e      	beq.n	8014c6c <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8014c4e:	68fb      	ldr	r3, [r7, #12]
 8014c50:	781b      	ldrb	r3, [r3, #0]
 8014c52:	4619      	mov	r1, r3
 8014c54:	6878      	ldr	r0, [r7, #4]
 8014c56:	f000 fe86 	bl	8015966 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8014c5a:	68fb      	ldr	r3, [r7, #12]
 8014c5c:	781b      	ldrb	r3, [r3, #0]
 8014c5e:	4619      	mov	r1, r3
 8014c60:	6878      	ldr	r0, [r7, #4]
 8014c62:	f000 feb1 	bl	80159c8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8014c66:	68fb      	ldr	r3, [r7, #12]
 8014c68:	2200      	movs	r2, #0
 8014c6a:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8014c6c:	68fb      	ldr	r3, [r7, #12]
 8014c6e:	7b1b      	ldrb	r3, [r3, #12]
 8014c70:	2b00      	cmp	r3, #0
 8014c72:	d00e      	beq.n	8014c92 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8014c74:	68fb      	ldr	r3, [r7, #12]
 8014c76:	7b1b      	ldrb	r3, [r3, #12]
 8014c78:	4619      	mov	r1, r3
 8014c7a:	6878      	ldr	r0, [r7, #4]
 8014c7c:	f000 fe73 	bl	8015966 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8014c80:	68fb      	ldr	r3, [r7, #12]
 8014c82:	7b1b      	ldrb	r3, [r3, #12]
 8014c84:	4619      	mov	r1, r3
 8014c86:	6878      	ldr	r0, [r7, #4]
 8014c88:	f000 fe9e 	bl	80159c8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8014c8c:	68fb      	ldr	r3, [r7, #12]
 8014c8e:	2200      	movs	r2, #0
 8014c90:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8014c92:	68fb      	ldr	r3, [r7, #12]
 8014c94:	7b5b      	ldrb	r3, [r3, #13]
 8014c96:	2b00      	cmp	r3, #0
 8014c98:	d00e      	beq.n	8014cb8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8014c9a:	68fb      	ldr	r3, [r7, #12]
 8014c9c:	7b5b      	ldrb	r3, [r3, #13]
 8014c9e:	4619      	mov	r1, r3
 8014ca0:	6878      	ldr	r0, [r7, #4]
 8014ca2:	f000 fe60 	bl	8015966 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8014ca6:	68fb      	ldr	r3, [r7, #12]
 8014ca8:	7b5b      	ldrb	r3, [r3, #13]
 8014caa:	4619      	mov	r1, r3
 8014cac:	6878      	ldr	r0, [r7, #4]
 8014cae:	f000 fe8b 	bl	80159c8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8014cb2:	68fb      	ldr	r3, [r7, #12]
 8014cb4:	2200      	movs	r2, #0
 8014cb6:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8014cbe:	69db      	ldr	r3, [r3, #28]
 8014cc0:	2b00      	cmp	r3, #0
 8014cc2:	d00b      	beq.n	8014cdc <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8014cca:	69db      	ldr	r3, [r3, #28]
 8014ccc:	4618      	mov	r0, r3
 8014cce:	f001 f9e5 	bl	801609c <free>
    phost->pActiveClass->pData = 0U;
 8014cd2:	687b      	ldr	r3, [r7, #4]
 8014cd4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8014cd8:	2200      	movs	r2, #0
 8014cda:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8014cdc:	2300      	movs	r3, #0
}
 8014cde:	4618      	mov	r0, r3
 8014ce0:	3710      	adds	r7, #16
 8014ce2:	46bd      	mov	sp, r7
 8014ce4:	bd80      	pop	{r7, pc}

08014ce6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8014ce6:	b580      	push	{r7, lr}
 8014ce8:	b084      	sub	sp, #16
 8014cea:	af00      	add	r7, sp, #0
 8014cec:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8014cee:	687b      	ldr	r3, [r7, #4]
 8014cf0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8014cf4:	69db      	ldr	r3, [r3, #28]
 8014cf6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8014cf8:	68fb      	ldr	r3, [r7, #12]
 8014cfa:	3340      	adds	r3, #64	; 0x40
 8014cfc:	4619      	mov	r1, r3
 8014cfe:	6878      	ldr	r0, [r7, #4]
 8014d00:	f000 f8b1 	bl	8014e66 <GetLineCoding>
 8014d04:	4603      	mov	r3, r0
 8014d06:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8014d08:	7afb      	ldrb	r3, [r7, #11]
 8014d0a:	2b00      	cmp	r3, #0
 8014d0c:	d105      	bne.n	8014d1a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8014d0e:	687b      	ldr	r3, [r7, #4]
 8014d10:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8014d14:	2102      	movs	r1, #2
 8014d16:	6878      	ldr	r0, [r7, #4]
 8014d18:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8014d1a:	7afb      	ldrb	r3, [r7, #11]
}
 8014d1c:	4618      	mov	r0, r3
 8014d1e:	3710      	adds	r7, #16
 8014d20:	46bd      	mov	sp, r7
 8014d22:	bd80      	pop	{r7, pc}

08014d24 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8014d24:	b580      	push	{r7, lr}
 8014d26:	b084      	sub	sp, #16
 8014d28:	af00      	add	r7, sp, #0
 8014d2a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8014d2c:	2301      	movs	r3, #1
 8014d2e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8014d30:	2300      	movs	r3, #0
 8014d32:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8014d3a:	69db      	ldr	r3, [r3, #28]
 8014d3c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8014d3e:	68bb      	ldr	r3, [r7, #8]
 8014d40:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8014d44:	2b04      	cmp	r3, #4
 8014d46:	d877      	bhi.n	8014e38 <USBH_CDC_Process+0x114>
 8014d48:	a201      	add	r2, pc, #4	; (adr r2, 8014d50 <USBH_CDC_Process+0x2c>)
 8014d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014d4e:	bf00      	nop
 8014d50:	08014d65 	.word	0x08014d65
 8014d54:	08014d6b 	.word	0x08014d6b
 8014d58:	08014d9b 	.word	0x08014d9b
 8014d5c:	08014e0f 	.word	0x08014e0f
 8014d60:	08014e1d 	.word	0x08014e1d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8014d64:	2300      	movs	r3, #0
 8014d66:	73fb      	strb	r3, [r7, #15]
      break;
 8014d68:	e06d      	b.n	8014e46 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8014d6a:	68bb      	ldr	r3, [r7, #8]
 8014d6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014d6e:	4619      	mov	r1, r3
 8014d70:	6878      	ldr	r0, [r7, #4]
 8014d72:	f000 f897 	bl	8014ea4 <SetLineCoding>
 8014d76:	4603      	mov	r3, r0
 8014d78:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8014d7a:	7bbb      	ldrb	r3, [r7, #14]
 8014d7c:	2b00      	cmp	r3, #0
 8014d7e:	d104      	bne.n	8014d8a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8014d80:	68bb      	ldr	r3, [r7, #8]
 8014d82:	2202      	movs	r2, #2
 8014d84:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8014d88:	e058      	b.n	8014e3c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8014d8a:	7bbb      	ldrb	r3, [r7, #14]
 8014d8c:	2b01      	cmp	r3, #1
 8014d8e:	d055      	beq.n	8014e3c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8014d90:	68bb      	ldr	r3, [r7, #8]
 8014d92:	2204      	movs	r2, #4
 8014d94:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8014d98:	e050      	b.n	8014e3c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8014d9a:	68bb      	ldr	r3, [r7, #8]
 8014d9c:	3340      	adds	r3, #64	; 0x40
 8014d9e:	4619      	mov	r1, r3
 8014da0:	6878      	ldr	r0, [r7, #4]
 8014da2:	f000 f860 	bl	8014e66 <GetLineCoding>
 8014da6:	4603      	mov	r3, r0
 8014da8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8014daa:	7bbb      	ldrb	r3, [r7, #14]
 8014dac:	2b00      	cmp	r3, #0
 8014dae:	d126      	bne.n	8014dfe <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8014db0:	68bb      	ldr	r3, [r7, #8]
 8014db2:	2200      	movs	r2, #0
 8014db4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8014db8:	68bb      	ldr	r3, [r7, #8]
 8014dba:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8014dbe:	68bb      	ldr	r3, [r7, #8]
 8014dc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014dc2:	791b      	ldrb	r3, [r3, #4]
 8014dc4:	429a      	cmp	r2, r3
 8014dc6:	d13b      	bne.n	8014e40 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8014dc8:	68bb      	ldr	r3, [r7, #8]
 8014dca:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8014dce:	68bb      	ldr	r3, [r7, #8]
 8014dd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014dd2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8014dd4:	429a      	cmp	r2, r3
 8014dd6:	d133      	bne.n	8014e40 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8014dd8:	68bb      	ldr	r3, [r7, #8]
 8014dda:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8014dde:	68bb      	ldr	r3, [r7, #8]
 8014de0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014de2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8014de4:	429a      	cmp	r2, r3
 8014de6:	d12b      	bne.n	8014e40 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8014de8:	68bb      	ldr	r3, [r7, #8]
 8014dea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8014dec:	68bb      	ldr	r3, [r7, #8]
 8014dee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014df0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8014df2:	429a      	cmp	r2, r3
 8014df4:	d124      	bne.n	8014e40 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8014df6:	6878      	ldr	r0, [r7, #4]
 8014df8:	f000 f95a 	bl	80150b0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8014dfc:	e020      	b.n	8014e40 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8014dfe:	7bbb      	ldrb	r3, [r7, #14]
 8014e00:	2b01      	cmp	r3, #1
 8014e02:	d01d      	beq.n	8014e40 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8014e04:	68bb      	ldr	r3, [r7, #8]
 8014e06:	2204      	movs	r2, #4
 8014e08:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8014e0c:	e018      	b.n	8014e40 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8014e0e:	6878      	ldr	r0, [r7, #4]
 8014e10:	f000 f867 	bl	8014ee2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8014e14:	6878      	ldr	r0, [r7, #4]
 8014e16:	f000 f8dc 	bl	8014fd2 <CDC_ProcessReception>
      break;
 8014e1a:	e014      	b.n	8014e46 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8014e1c:	2100      	movs	r1, #0
 8014e1e:	6878      	ldr	r0, [r7, #4]
 8014e20:	f000 fb0a 	bl	8015438 <USBH_ClrFeature>
 8014e24:	4603      	mov	r3, r0
 8014e26:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8014e28:	7bbb      	ldrb	r3, [r7, #14]
 8014e2a:	2b00      	cmp	r3, #0
 8014e2c:	d10a      	bne.n	8014e44 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8014e2e:	68bb      	ldr	r3, [r7, #8]
 8014e30:	2200      	movs	r2, #0
 8014e32:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8014e36:	e005      	b.n	8014e44 <USBH_CDC_Process+0x120>

    default:
      break;
 8014e38:	bf00      	nop
 8014e3a:	e004      	b.n	8014e46 <USBH_CDC_Process+0x122>
      break;
 8014e3c:	bf00      	nop
 8014e3e:	e002      	b.n	8014e46 <USBH_CDC_Process+0x122>
      break;
 8014e40:	bf00      	nop
 8014e42:	e000      	b.n	8014e46 <USBH_CDC_Process+0x122>
      break;
 8014e44:	bf00      	nop

  }

  return status;
 8014e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8014e48:	4618      	mov	r0, r3
 8014e4a:	3710      	adds	r7, #16
 8014e4c:	46bd      	mov	sp, r7
 8014e4e:	bd80      	pop	{r7, pc}

08014e50 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8014e50:	b480      	push	{r7}
 8014e52:	b083      	sub	sp, #12
 8014e54:	af00      	add	r7, sp, #0
 8014e56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8014e58:	2300      	movs	r3, #0
}
 8014e5a:	4618      	mov	r0, r3
 8014e5c:	370c      	adds	r7, #12
 8014e5e:	46bd      	mov	sp, r7
 8014e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e64:	4770      	bx	lr

08014e66 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8014e66:	b580      	push	{r7, lr}
 8014e68:	b082      	sub	sp, #8
 8014e6a:	af00      	add	r7, sp, #0
 8014e6c:	6078      	str	r0, [r7, #4]
 8014e6e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8014e70:	687b      	ldr	r3, [r7, #4]
 8014e72:	22a1      	movs	r2, #161	; 0xa1
 8014e74:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	2221      	movs	r2, #33	; 0x21
 8014e7a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	2200      	movs	r2, #0
 8014e80:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	2200      	movs	r2, #0
 8014e86:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	2207      	movs	r2, #7
 8014e8c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8014e8e:	683b      	ldr	r3, [r7, #0]
 8014e90:	2207      	movs	r2, #7
 8014e92:	4619      	mov	r1, r3
 8014e94:	6878      	ldr	r0, [r7, #4]
 8014e96:	f000 faf3 	bl	8015480 <USBH_CtlReq>
 8014e9a:	4603      	mov	r3, r0
}
 8014e9c:	4618      	mov	r0, r3
 8014e9e:	3708      	adds	r7, #8
 8014ea0:	46bd      	mov	sp, r7
 8014ea2:	bd80      	pop	{r7, pc}

08014ea4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8014ea4:	b580      	push	{r7, lr}
 8014ea6:	b082      	sub	sp, #8
 8014ea8:	af00      	add	r7, sp, #0
 8014eaa:	6078      	str	r0, [r7, #4]
 8014eac:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8014eae:	687b      	ldr	r3, [r7, #4]
 8014eb0:	2221      	movs	r2, #33	; 0x21
 8014eb2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	2220      	movs	r2, #32
 8014eb8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	2200      	movs	r2, #0
 8014ebe:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8014ec0:	687b      	ldr	r3, [r7, #4]
 8014ec2:	2200      	movs	r2, #0
 8014ec4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	2207      	movs	r2, #7
 8014eca:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8014ecc:	683b      	ldr	r3, [r7, #0]
 8014ece:	2207      	movs	r2, #7
 8014ed0:	4619      	mov	r1, r3
 8014ed2:	6878      	ldr	r0, [r7, #4]
 8014ed4:	f000 fad4 	bl	8015480 <USBH_CtlReq>
 8014ed8:	4603      	mov	r3, r0
}
 8014eda:	4618      	mov	r0, r3
 8014edc:	3708      	adds	r7, #8
 8014ede:	46bd      	mov	sp, r7
 8014ee0:	bd80      	pop	{r7, pc}

08014ee2 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8014ee2:	b580      	push	{r7, lr}
 8014ee4:	b086      	sub	sp, #24
 8014ee6:	af02      	add	r7, sp, #8
 8014ee8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8014ef0:	69db      	ldr	r3, [r3, #28]
 8014ef2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8014ef4:	2300      	movs	r3, #0
 8014ef6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8014ef8:	68fb      	ldr	r3, [r7, #12]
 8014efa:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8014efe:	2b01      	cmp	r3, #1
 8014f00:	d002      	beq.n	8014f08 <CDC_ProcessTransmission+0x26>
 8014f02:	2b02      	cmp	r3, #2
 8014f04:	d025      	beq.n	8014f52 <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 8014f06:	e060      	b.n	8014fca <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8014f08:	68fb      	ldr	r3, [r7, #12]
 8014f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f0c:	68fa      	ldr	r2, [r7, #12]
 8014f0e:	8b12      	ldrh	r2, [r2, #24]
 8014f10:	4293      	cmp	r3, r2
 8014f12:	d90c      	bls.n	8014f2e <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 8014f14:	68fb      	ldr	r3, [r7, #12]
 8014f16:	69d9      	ldr	r1, [r3, #28]
 8014f18:	68fb      	ldr	r3, [r7, #12]
 8014f1a:	8b1a      	ldrh	r2, [r3, #24]
 8014f1c:	68fb      	ldr	r3, [r7, #12]
 8014f1e:	7b58      	ldrb	r0, [r3, #13]
 8014f20:	2301      	movs	r3, #1
 8014f22:	9300      	str	r3, [sp, #0]
 8014f24:	4603      	mov	r3, r0
 8014f26:	6878      	ldr	r0, [r7, #4]
 8014f28:	f000 fcbb 	bl	80158a2 <USBH_BulkSendData>
 8014f2c:	e00c      	b.n	8014f48 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 8014f2e:	68fb      	ldr	r3, [r7, #12]
 8014f30:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8014f32:	68fb      	ldr	r3, [r7, #12]
 8014f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8014f36:	b29a      	uxth	r2, r3
 8014f38:	68fb      	ldr	r3, [r7, #12]
 8014f3a:	7b58      	ldrb	r0, [r3, #13]
 8014f3c:	2301      	movs	r3, #1
 8014f3e:	9300      	str	r3, [sp, #0]
 8014f40:	4603      	mov	r3, r0
 8014f42:	6878      	ldr	r0, [r7, #4]
 8014f44:	f000 fcad 	bl	80158a2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8014f48:	68fb      	ldr	r3, [r7, #12]
 8014f4a:	2202      	movs	r2, #2
 8014f4c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8014f50:	e03b      	b.n	8014fca <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8014f52:	68fb      	ldr	r3, [r7, #12]
 8014f54:	7b5b      	ldrb	r3, [r3, #13]
 8014f56:	4619      	mov	r1, r3
 8014f58:	6878      	ldr	r0, [r7, #4]
 8014f5a:	f000 ff85 	bl	8015e68 <USBH_LL_GetURBState>
 8014f5e:	4603      	mov	r3, r0
 8014f60:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8014f62:	7afb      	ldrb	r3, [r7, #11]
 8014f64:	2b01      	cmp	r3, #1
 8014f66:	d128      	bne.n	8014fba <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8014f68:	68fb      	ldr	r3, [r7, #12]
 8014f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f6c:	68fa      	ldr	r2, [r7, #12]
 8014f6e:	8b12      	ldrh	r2, [r2, #24]
 8014f70:	4293      	cmp	r3, r2
 8014f72:	d90e      	bls.n	8014f92 <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8014f74:	68fb      	ldr	r3, [r7, #12]
 8014f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f78:	68fa      	ldr	r2, [r7, #12]
 8014f7a:	8b12      	ldrh	r2, [r2, #24]
 8014f7c:	1a9a      	subs	r2, r3, r2
 8014f7e:	68fb      	ldr	r3, [r7, #12]
 8014f80:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8014f82:	68fb      	ldr	r3, [r7, #12]
 8014f84:	69db      	ldr	r3, [r3, #28]
 8014f86:	68fa      	ldr	r2, [r7, #12]
 8014f88:	8b12      	ldrh	r2, [r2, #24]
 8014f8a:	441a      	add	r2, r3
 8014f8c:	68fb      	ldr	r3, [r7, #12]
 8014f8e:	61da      	str	r2, [r3, #28]
 8014f90:	e002      	b.n	8014f98 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 8014f92:	68fb      	ldr	r3, [r7, #12]
 8014f94:	2200      	movs	r2, #0
 8014f96:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8014f98:	68fb      	ldr	r3, [r7, #12]
 8014f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f9c:	2b00      	cmp	r3, #0
 8014f9e:	d004      	beq.n	8014faa <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8014fa0:	68fb      	ldr	r3, [r7, #12]
 8014fa2:	2201      	movs	r2, #1
 8014fa4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8014fa8:	e00e      	b.n	8014fc8 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8014faa:	68fb      	ldr	r3, [r7, #12]
 8014fac:	2200      	movs	r2, #0
 8014fae:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8014fb2:	6878      	ldr	r0, [r7, #4]
 8014fb4:	f000 f868 	bl	8015088 <USBH_CDC_TransmitCallback>
      break;
 8014fb8:	e006      	b.n	8014fc8 <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 8014fba:	7afb      	ldrb	r3, [r7, #11]
 8014fbc:	2b02      	cmp	r3, #2
 8014fbe:	d103      	bne.n	8014fc8 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8014fc0:	68fb      	ldr	r3, [r7, #12]
 8014fc2:	2201      	movs	r2, #1
 8014fc4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8014fc8:	bf00      	nop
  }
}
 8014fca:	bf00      	nop
 8014fcc:	3710      	adds	r7, #16
 8014fce:	46bd      	mov	sp, r7
 8014fd0:	bd80      	pop	{r7, pc}

08014fd2 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8014fd2:	b580      	push	{r7, lr}
 8014fd4:	b086      	sub	sp, #24
 8014fd6:	af00      	add	r7, sp, #0
 8014fd8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8014fe0:	69db      	ldr	r3, [r3, #28]
 8014fe2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8014fe4:	2300      	movs	r3, #0
 8014fe6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8014fe8:	697b      	ldr	r3, [r7, #20]
 8014fea:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8014fee:	2b03      	cmp	r3, #3
 8014ff0:	d002      	beq.n	8014ff8 <CDC_ProcessReception+0x26>
 8014ff2:	2b04      	cmp	r3, #4
 8014ff4:	d00e      	beq.n	8015014 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8014ff6:	e043      	b.n	8015080 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8014ff8:	697b      	ldr	r3, [r7, #20]
 8014ffa:	6a19      	ldr	r1, [r3, #32]
 8014ffc:	697b      	ldr	r3, [r7, #20]
 8014ffe:	8b5a      	ldrh	r2, [r3, #26]
 8015000:	697b      	ldr	r3, [r7, #20]
 8015002:	7b1b      	ldrb	r3, [r3, #12]
 8015004:	6878      	ldr	r0, [r7, #4]
 8015006:	f000 fc71 	bl	80158ec <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 801500a:	697b      	ldr	r3, [r7, #20]
 801500c:	2204      	movs	r2, #4
 801500e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8015012:	e035      	b.n	8015080 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8015014:	697b      	ldr	r3, [r7, #20]
 8015016:	7b1b      	ldrb	r3, [r3, #12]
 8015018:	4619      	mov	r1, r3
 801501a:	6878      	ldr	r0, [r7, #4]
 801501c:	f000 ff24 	bl	8015e68 <USBH_LL_GetURBState>
 8015020:	4603      	mov	r3, r0
 8015022:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8015024:	7cfb      	ldrb	r3, [r7, #19]
 8015026:	2b01      	cmp	r3, #1
 8015028:	d129      	bne.n	801507e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 801502a:	697b      	ldr	r3, [r7, #20]
 801502c:	7b1b      	ldrb	r3, [r3, #12]
 801502e:	4619      	mov	r1, r3
 8015030:	6878      	ldr	r0, [r7, #4]
 8015032:	f000 fe87 	bl	8015d44 <USBH_LL_GetLastXferSize>
 8015036:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8015038:	697b      	ldr	r3, [r7, #20]
 801503a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801503c:	68fa      	ldr	r2, [r7, #12]
 801503e:	429a      	cmp	r2, r3
 8015040:	d016      	beq.n	8015070 <CDC_ProcessReception+0x9e>
 8015042:	697b      	ldr	r3, [r7, #20]
 8015044:	8b5b      	ldrh	r3, [r3, #26]
 8015046:	461a      	mov	r2, r3
 8015048:	68fb      	ldr	r3, [r7, #12]
 801504a:	4293      	cmp	r3, r2
 801504c:	d910      	bls.n	8015070 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 801504e:	697b      	ldr	r3, [r7, #20]
 8015050:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015052:	68fb      	ldr	r3, [r7, #12]
 8015054:	1ad2      	subs	r2, r2, r3
 8015056:	697b      	ldr	r3, [r7, #20]
 8015058:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 801505a:	697b      	ldr	r3, [r7, #20]
 801505c:	6a1a      	ldr	r2, [r3, #32]
 801505e:	68fb      	ldr	r3, [r7, #12]
 8015060:	441a      	add	r2, r3
 8015062:	697b      	ldr	r3, [r7, #20]
 8015064:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8015066:	697b      	ldr	r3, [r7, #20]
 8015068:	2203      	movs	r2, #3
 801506a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 801506e:	e006      	b.n	801507e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8015070:	697b      	ldr	r3, [r7, #20]
 8015072:	2200      	movs	r2, #0
 8015074:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8015078:	6878      	ldr	r0, [r7, #4]
 801507a:	f000 f80f 	bl	801509c <USBH_CDC_ReceiveCallback>
      break;
 801507e:	bf00      	nop
  }
}
 8015080:	bf00      	nop
 8015082:	3718      	adds	r7, #24
 8015084:	46bd      	mov	sp, r7
 8015086:	bd80      	pop	{r7, pc}

08015088 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8015088:	b480      	push	{r7}
 801508a:	b083      	sub	sp, #12
 801508c:	af00      	add	r7, sp, #0
 801508e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8015090:	bf00      	nop
 8015092:	370c      	adds	r7, #12
 8015094:	46bd      	mov	sp, r7
 8015096:	f85d 7b04 	ldr.w	r7, [sp], #4
 801509a:	4770      	bx	lr

0801509c <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 801509c:	b480      	push	{r7}
 801509e:	b083      	sub	sp, #12
 80150a0:	af00      	add	r7, sp, #0
 80150a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80150a4:	bf00      	nop
 80150a6:	370c      	adds	r7, #12
 80150a8:	46bd      	mov	sp, r7
 80150aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150ae:	4770      	bx	lr

080150b0 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80150b0:	b480      	push	{r7}
 80150b2:	b083      	sub	sp, #12
 80150b4:	af00      	add	r7, sp, #0
 80150b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80150b8:	bf00      	nop
 80150ba:	370c      	adds	r7, #12
 80150bc:	46bd      	mov	sp, r7
 80150be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150c2:	4770      	bx	lr

080150c4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 80150c4:	b580      	push	{r7, lr}
 80150c6:	b084      	sub	sp, #16
 80150c8:	af00      	add	r7, sp, #0
 80150ca:	60f8      	str	r0, [r7, #12]
 80150cc:	60b9      	str	r1, [r7, #8]
 80150ce:	4613      	mov	r3, r2
 80150d0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80150d2:	68fb      	ldr	r3, [r7, #12]
 80150d4:	2b00      	cmp	r3, #0
 80150d6:	d101      	bne.n	80150dc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80150d8:	2302      	movs	r3, #2
 80150da:	e029      	b.n	8015130 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80150dc:	68fb      	ldr	r3, [r7, #12]
 80150de:	79fa      	ldrb	r2, [r7, #7]
 80150e0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80150e4:	68fb      	ldr	r3, [r7, #12]
 80150e6:	2200      	movs	r2, #0
 80150e8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80150ec:	68fb      	ldr	r3, [r7, #12]
 80150ee:	2200      	movs	r2, #0
 80150f0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80150f4:	68f8      	ldr	r0, [r7, #12]
 80150f6:	f000 f81f 	bl	8015138 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80150fa:	68fb      	ldr	r3, [r7, #12]
 80150fc:	2200      	movs	r2, #0
 80150fe:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8015102:	68fb      	ldr	r3, [r7, #12]
 8015104:	2200      	movs	r2, #0
 8015106:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 801510a:	68fb      	ldr	r3, [r7, #12]
 801510c:	2200      	movs	r2, #0
 801510e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8015112:	68fb      	ldr	r3, [r7, #12]
 8015114:	2200      	movs	r2, #0
 8015116:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 801511a:	68bb      	ldr	r3, [r7, #8]
 801511c:	2b00      	cmp	r3, #0
 801511e:	d003      	beq.n	8015128 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8015120:	68fb      	ldr	r3, [r7, #12]
 8015122:	68ba      	ldr	r2, [r7, #8]
 8015124:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8015128:	68f8      	ldr	r0, [r7, #12]
 801512a:	f000 fd99 	bl	8015c60 <USBH_LL_Init>

  return USBH_OK;
 801512e:	2300      	movs	r3, #0
}
 8015130:	4618      	mov	r0, r3
 8015132:	3710      	adds	r7, #16
 8015134:	46bd      	mov	sp, r7
 8015136:	bd80      	pop	{r7, pc}

08015138 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8015138:	b480      	push	{r7}
 801513a:	b085      	sub	sp, #20
 801513c:	af00      	add	r7, sp, #0
 801513e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8015140:	2300      	movs	r3, #0
 8015142:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8015144:	2300      	movs	r3, #0
 8015146:	60fb      	str	r3, [r7, #12]
 8015148:	e009      	b.n	801515e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 801514a:	687a      	ldr	r2, [r7, #4]
 801514c:	68fb      	ldr	r3, [r7, #12]
 801514e:	33e0      	adds	r3, #224	; 0xe0
 8015150:	009b      	lsls	r3, r3, #2
 8015152:	4413      	add	r3, r2
 8015154:	2200      	movs	r2, #0
 8015156:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8015158:	68fb      	ldr	r3, [r7, #12]
 801515a:	3301      	adds	r3, #1
 801515c:	60fb      	str	r3, [r7, #12]
 801515e:	68fb      	ldr	r3, [r7, #12]
 8015160:	2b0e      	cmp	r3, #14
 8015162:	d9f2      	bls.n	801514a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8015164:	2300      	movs	r3, #0
 8015166:	60fb      	str	r3, [r7, #12]
 8015168:	e009      	b.n	801517e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 801516a:	687a      	ldr	r2, [r7, #4]
 801516c:	68fb      	ldr	r3, [r7, #12]
 801516e:	4413      	add	r3, r2
 8015170:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8015174:	2200      	movs	r2, #0
 8015176:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8015178:	68fb      	ldr	r3, [r7, #12]
 801517a:	3301      	adds	r3, #1
 801517c:	60fb      	str	r3, [r7, #12]
 801517e:	68fb      	ldr	r3, [r7, #12]
 8015180:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015184:	d3f1      	bcc.n	801516a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8015186:	687b      	ldr	r3, [r7, #4]
 8015188:	2200      	movs	r2, #0
 801518a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 801518c:	687b      	ldr	r3, [r7, #4]
 801518e:	2200      	movs	r2, #0
 8015190:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8015192:	687b      	ldr	r3, [r7, #4]
 8015194:	2201      	movs	r2, #1
 8015196:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	2200      	movs	r2, #0
 801519c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	2201      	movs	r2, #1
 80151a4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80151a6:	687b      	ldr	r3, [r7, #4]
 80151a8:	2240      	movs	r2, #64	; 0x40
 80151aa:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	2200      	movs	r2, #0
 80151b0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80151b2:	687b      	ldr	r3, [r7, #4]
 80151b4:	2200      	movs	r2, #0
 80151b6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 80151ba:	687b      	ldr	r3, [r7, #4]
 80151bc:	2201      	movs	r2, #1
 80151be:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80151c2:	687b      	ldr	r3, [r7, #4]
 80151c4:	2200      	movs	r2, #0
 80151c6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	2200      	movs	r2, #0
 80151ce:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80151d2:	2300      	movs	r3, #0
}
 80151d4:	4618      	mov	r0, r3
 80151d6:	3714      	adds	r7, #20
 80151d8:	46bd      	mov	sp, r7
 80151da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151de:	4770      	bx	lr

080151e0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80151e0:	b480      	push	{r7}
 80151e2:	b085      	sub	sp, #20
 80151e4:	af00      	add	r7, sp, #0
 80151e6:	6078      	str	r0, [r7, #4]
 80151e8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80151ea:	2300      	movs	r3, #0
 80151ec:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80151ee:	683b      	ldr	r3, [r7, #0]
 80151f0:	2b00      	cmp	r3, #0
 80151f2:	d016      	beq.n	8015222 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80151f4:	687b      	ldr	r3, [r7, #4]
 80151f6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80151fa:	2b00      	cmp	r3, #0
 80151fc:	d10e      	bne.n	801521c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80151fe:	687b      	ldr	r3, [r7, #4]
 8015200:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8015204:	1c59      	adds	r1, r3, #1
 8015206:	687a      	ldr	r2, [r7, #4]
 8015208:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 801520c:	687a      	ldr	r2, [r7, #4]
 801520e:	33de      	adds	r3, #222	; 0xde
 8015210:	6839      	ldr	r1, [r7, #0]
 8015212:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8015216:	2300      	movs	r3, #0
 8015218:	73fb      	strb	r3, [r7, #15]
 801521a:	e004      	b.n	8015226 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 801521c:	2302      	movs	r3, #2
 801521e:	73fb      	strb	r3, [r7, #15]
 8015220:	e001      	b.n	8015226 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8015222:	2302      	movs	r3, #2
 8015224:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8015226:	7bfb      	ldrb	r3, [r7, #15]
}
 8015228:	4618      	mov	r0, r3
 801522a:	3714      	adds	r7, #20
 801522c:	46bd      	mov	sp, r7
 801522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015232:	4770      	bx	lr

08015234 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8015234:	b480      	push	{r7}
 8015236:	b085      	sub	sp, #20
 8015238:	af00      	add	r7, sp, #0
 801523a:	6078      	str	r0, [r7, #4]
 801523c:	460b      	mov	r3, r1
 801523e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8015240:	2300      	movs	r3, #0
 8015242:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 801524a:	78fa      	ldrb	r2, [r7, #3]
 801524c:	429a      	cmp	r2, r3
 801524e:	d204      	bcs.n	801525a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8015250:	687b      	ldr	r3, [r7, #4]
 8015252:	78fa      	ldrb	r2, [r7, #3]
 8015254:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8015258:	e001      	b.n	801525e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 801525a:	2302      	movs	r3, #2
 801525c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 801525e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015260:	4618      	mov	r0, r3
 8015262:	3714      	adds	r7, #20
 8015264:	46bd      	mov	sp, r7
 8015266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801526a:	4770      	bx	lr

0801526c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 801526c:	b480      	push	{r7}
 801526e:	b087      	sub	sp, #28
 8015270:	af00      	add	r7, sp, #0
 8015272:	6078      	str	r0, [r7, #4]
 8015274:	4608      	mov	r0, r1
 8015276:	4611      	mov	r1, r2
 8015278:	461a      	mov	r2, r3
 801527a:	4603      	mov	r3, r0
 801527c:	70fb      	strb	r3, [r7, #3]
 801527e:	460b      	mov	r3, r1
 8015280:	70bb      	strb	r3, [r7, #2]
 8015282:	4613      	mov	r3, r2
 8015284:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8015286:	2300      	movs	r3, #0
 8015288:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 801528a:	2300      	movs	r3, #0
 801528c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8015294:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8015296:	e025      	b.n	80152e4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8015298:	7dfb      	ldrb	r3, [r7, #23]
 801529a:	221a      	movs	r2, #26
 801529c:	fb02 f303 	mul.w	r3, r2, r3
 80152a0:	3308      	adds	r3, #8
 80152a2:	68fa      	ldr	r2, [r7, #12]
 80152a4:	4413      	add	r3, r2
 80152a6:	3302      	adds	r3, #2
 80152a8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80152aa:	693b      	ldr	r3, [r7, #16]
 80152ac:	795b      	ldrb	r3, [r3, #5]
 80152ae:	78fa      	ldrb	r2, [r7, #3]
 80152b0:	429a      	cmp	r2, r3
 80152b2:	d002      	beq.n	80152ba <USBH_FindInterface+0x4e>
 80152b4:	78fb      	ldrb	r3, [r7, #3]
 80152b6:	2bff      	cmp	r3, #255	; 0xff
 80152b8:	d111      	bne.n	80152de <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80152ba:	693b      	ldr	r3, [r7, #16]
 80152bc:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80152be:	78ba      	ldrb	r2, [r7, #2]
 80152c0:	429a      	cmp	r2, r3
 80152c2:	d002      	beq.n	80152ca <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80152c4:	78bb      	ldrb	r3, [r7, #2]
 80152c6:	2bff      	cmp	r3, #255	; 0xff
 80152c8:	d109      	bne.n	80152de <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80152ca:	693b      	ldr	r3, [r7, #16]
 80152cc:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80152ce:	787a      	ldrb	r2, [r7, #1]
 80152d0:	429a      	cmp	r2, r3
 80152d2:	d002      	beq.n	80152da <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80152d4:	787b      	ldrb	r3, [r7, #1]
 80152d6:	2bff      	cmp	r3, #255	; 0xff
 80152d8:	d101      	bne.n	80152de <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80152da:	7dfb      	ldrb	r3, [r7, #23]
 80152dc:	e006      	b.n	80152ec <USBH_FindInterface+0x80>
    }
    if_ix++;
 80152de:	7dfb      	ldrb	r3, [r7, #23]
 80152e0:	3301      	adds	r3, #1
 80152e2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80152e4:	7dfb      	ldrb	r3, [r7, #23]
 80152e6:	2b01      	cmp	r3, #1
 80152e8:	d9d6      	bls.n	8015298 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80152ea:	23ff      	movs	r3, #255	; 0xff
}
 80152ec:	4618      	mov	r0, r3
 80152ee:	371c      	adds	r7, #28
 80152f0:	46bd      	mov	sp, r7
 80152f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152f6:	4770      	bx	lr

080152f8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80152f8:	b580      	push	{r7, lr}
 80152fa:	b082      	sub	sp, #8
 80152fc:	af00      	add	r7, sp, #0
 80152fe:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8015300:	6878      	ldr	r0, [r7, #4]
 8015302:	f000 fce9 	bl	8015cd8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8015306:	2101      	movs	r1, #1
 8015308:	6878      	ldr	r0, [r7, #4]
 801530a:	f000 fdc0 	bl	8015e8e <USBH_LL_DriverVBUS>

  return USBH_OK;
 801530e:	2300      	movs	r3, #0
}
 8015310:	4618      	mov	r0, r3
 8015312:	3708      	adds	r7, #8
 8015314:	46bd      	mov	sp, r7
 8015316:	bd80      	pop	{r7, pc}

08015318 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8015318:	b480      	push	{r7}
 801531a:	b083      	sub	sp, #12
 801531c:	af00      	add	r7, sp, #0
 801531e:	6078      	str	r0, [r7, #4]
 8015320:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	683a      	ldr	r2, [r7, #0]
 8015326:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 801532a:	bf00      	nop
 801532c:	370c      	adds	r7, #12
 801532e:	46bd      	mov	sp, r7
 8015330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015334:	4770      	bx	lr

08015336 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8015336:	b580      	push	{r7, lr}
 8015338:	b082      	sub	sp, #8
 801533a:	af00      	add	r7, sp, #0
 801533c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 801533e:	687b      	ldr	r3, [r7, #4]
 8015340:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8015344:	1c5a      	adds	r2, r3, #1
 8015346:	687b      	ldr	r3, [r7, #4]
 8015348:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 801534c:	6878      	ldr	r0, [r7, #4]
 801534e:	f000 f804 	bl	801535a <USBH_HandleSof>
}
 8015352:	bf00      	nop
 8015354:	3708      	adds	r7, #8
 8015356:	46bd      	mov	sp, r7
 8015358:	bd80      	pop	{r7, pc}

0801535a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 801535a:	b580      	push	{r7, lr}
 801535c:	b082      	sub	sp, #8
 801535e:	af00      	add	r7, sp, #0
 8015360:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8015362:	687b      	ldr	r3, [r7, #4]
 8015364:	781b      	ldrb	r3, [r3, #0]
 8015366:	b2db      	uxtb	r3, r3
 8015368:	2b0b      	cmp	r3, #11
 801536a:	d10a      	bne.n	8015382 <USBH_HandleSof+0x28>
 801536c:	687b      	ldr	r3, [r7, #4]
 801536e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8015372:	2b00      	cmp	r3, #0
 8015374:	d005      	beq.n	8015382 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8015376:	687b      	ldr	r3, [r7, #4]
 8015378:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801537c:	699b      	ldr	r3, [r3, #24]
 801537e:	6878      	ldr	r0, [r7, #4]
 8015380:	4798      	blx	r3
  }
}
 8015382:	bf00      	nop
 8015384:	3708      	adds	r7, #8
 8015386:	46bd      	mov	sp, r7
 8015388:	bd80      	pop	{r7, pc}

0801538a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 801538a:	b480      	push	{r7}
 801538c:	b083      	sub	sp, #12
 801538e:	af00      	add	r7, sp, #0
 8015390:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8015392:	687b      	ldr	r3, [r7, #4]
 8015394:	2201      	movs	r2, #1
 8015396:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 801539a:	bf00      	nop
}
 801539c:	370c      	adds	r7, #12
 801539e:	46bd      	mov	sp, r7
 80153a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153a4:	4770      	bx	lr

080153a6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80153a6:	b480      	push	{r7}
 80153a8:	b083      	sub	sp, #12
 80153aa:	af00      	add	r7, sp, #0
 80153ac:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80153ae:	687b      	ldr	r3, [r7, #4]
 80153b0:	2200      	movs	r2, #0
 80153b2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80153b6:	bf00      	nop
}
 80153b8:	370c      	adds	r7, #12
 80153ba:	46bd      	mov	sp, r7
 80153bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153c0:	4770      	bx	lr

080153c2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80153c2:	b480      	push	{r7}
 80153c4:	b083      	sub	sp, #12
 80153c6:	af00      	add	r7, sp, #0
 80153c8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	2201      	movs	r2, #1
 80153ce:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	2200      	movs	r2, #0
 80153d6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80153da:	687b      	ldr	r3, [r7, #4]
 80153dc:	2200      	movs	r2, #0
 80153de:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80153e2:	2300      	movs	r3, #0
}
 80153e4:	4618      	mov	r0, r3
 80153e6:	370c      	adds	r7, #12
 80153e8:	46bd      	mov	sp, r7
 80153ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153ee:	4770      	bx	lr

080153f0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80153f0:	b580      	push	{r7, lr}
 80153f2:	b082      	sub	sp, #8
 80153f4:	af00      	add	r7, sp, #0
 80153f6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	2201      	movs	r2, #1
 80153fc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8015400:	687b      	ldr	r3, [r7, #4]
 8015402:	2200      	movs	r2, #0
 8015404:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	2200      	movs	r2, #0
 801540c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8015410:	6878      	ldr	r0, [r7, #4]
 8015412:	f000 fc7c 	bl	8015d0e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8015416:	687b      	ldr	r3, [r7, #4]
 8015418:	791b      	ldrb	r3, [r3, #4]
 801541a:	4619      	mov	r1, r3
 801541c:	6878      	ldr	r0, [r7, #4]
 801541e:	f000 fad3 	bl	80159c8 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8015422:	687b      	ldr	r3, [r7, #4]
 8015424:	795b      	ldrb	r3, [r3, #5]
 8015426:	4619      	mov	r1, r3
 8015428:	6878      	ldr	r0, [r7, #4]
 801542a:	f000 facd 	bl	80159c8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 801542e:	2300      	movs	r3, #0
}
 8015430:	4618      	mov	r0, r3
 8015432:	3708      	adds	r7, #8
 8015434:	46bd      	mov	sp, r7
 8015436:	bd80      	pop	{r7, pc}

08015438 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8015438:	b580      	push	{r7, lr}
 801543a:	b082      	sub	sp, #8
 801543c:	af00      	add	r7, sp, #0
 801543e:	6078      	str	r0, [r7, #4]
 8015440:	460b      	mov	r3, r1
 8015442:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8015444:	687b      	ldr	r3, [r7, #4]
 8015446:	789b      	ldrb	r3, [r3, #2]
 8015448:	2b01      	cmp	r3, #1
 801544a:	d10f      	bne.n	801546c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	2202      	movs	r2, #2
 8015450:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8015452:	687b      	ldr	r3, [r7, #4]
 8015454:	2201      	movs	r2, #1
 8015456:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	2200      	movs	r2, #0
 801545c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 801545e:	78fb      	ldrb	r3, [r7, #3]
 8015460:	b29a      	uxth	r2, r3
 8015462:	687b      	ldr	r3, [r7, #4]
 8015464:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8015466:	687b      	ldr	r3, [r7, #4]
 8015468:	2200      	movs	r2, #0
 801546a:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 801546c:	2200      	movs	r2, #0
 801546e:	2100      	movs	r1, #0
 8015470:	6878      	ldr	r0, [r7, #4]
 8015472:	f000 f805 	bl	8015480 <USBH_CtlReq>
 8015476:	4603      	mov	r3, r0
}
 8015478:	4618      	mov	r0, r3
 801547a:	3708      	adds	r7, #8
 801547c:	46bd      	mov	sp, r7
 801547e:	bd80      	pop	{r7, pc}

08015480 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8015480:	b580      	push	{r7, lr}
 8015482:	b086      	sub	sp, #24
 8015484:	af00      	add	r7, sp, #0
 8015486:	60f8      	str	r0, [r7, #12]
 8015488:	60b9      	str	r1, [r7, #8]
 801548a:	4613      	mov	r3, r2
 801548c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 801548e:	2301      	movs	r3, #1
 8015490:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8015492:	68fb      	ldr	r3, [r7, #12]
 8015494:	789b      	ldrb	r3, [r3, #2]
 8015496:	2b01      	cmp	r3, #1
 8015498:	d002      	beq.n	80154a0 <USBH_CtlReq+0x20>
 801549a:	2b02      	cmp	r3, #2
 801549c:	d00f      	beq.n	80154be <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 801549e:	e027      	b.n	80154f0 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80154a0:	68fb      	ldr	r3, [r7, #12]
 80154a2:	68ba      	ldr	r2, [r7, #8]
 80154a4:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80154a6:	68fb      	ldr	r3, [r7, #12]
 80154a8:	88fa      	ldrh	r2, [r7, #6]
 80154aa:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80154ac:	68fb      	ldr	r3, [r7, #12]
 80154ae:	2201      	movs	r2, #1
 80154b0:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80154b2:	68fb      	ldr	r3, [r7, #12]
 80154b4:	2202      	movs	r2, #2
 80154b6:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80154b8:	2301      	movs	r3, #1
 80154ba:	75fb      	strb	r3, [r7, #23]
      break;
 80154bc:	e018      	b.n	80154f0 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80154be:	68f8      	ldr	r0, [r7, #12]
 80154c0:	f000 f81c 	bl	80154fc <USBH_HandleControl>
 80154c4:	4603      	mov	r3, r0
 80154c6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80154c8:	7dfb      	ldrb	r3, [r7, #23]
 80154ca:	2b00      	cmp	r3, #0
 80154cc:	d002      	beq.n	80154d4 <USBH_CtlReq+0x54>
 80154ce:	7dfb      	ldrb	r3, [r7, #23]
 80154d0:	2b03      	cmp	r3, #3
 80154d2:	d106      	bne.n	80154e2 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80154d4:	68fb      	ldr	r3, [r7, #12]
 80154d6:	2201      	movs	r2, #1
 80154d8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80154da:	68fb      	ldr	r3, [r7, #12]
 80154dc:	2200      	movs	r2, #0
 80154de:	761a      	strb	r2, [r3, #24]
      break;
 80154e0:	e005      	b.n	80154ee <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80154e2:	7dfb      	ldrb	r3, [r7, #23]
 80154e4:	2b02      	cmp	r3, #2
 80154e6:	d102      	bne.n	80154ee <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80154e8:	68fb      	ldr	r3, [r7, #12]
 80154ea:	2201      	movs	r2, #1
 80154ec:	709a      	strb	r2, [r3, #2]
      break;
 80154ee:	bf00      	nop
  }
  return status;
 80154f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80154f2:	4618      	mov	r0, r3
 80154f4:	3718      	adds	r7, #24
 80154f6:	46bd      	mov	sp, r7
 80154f8:	bd80      	pop	{r7, pc}
	...

080154fc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80154fc:	b580      	push	{r7, lr}
 80154fe:	b086      	sub	sp, #24
 8015500:	af02      	add	r7, sp, #8
 8015502:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8015504:	2301      	movs	r3, #1
 8015506:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8015508:	2300      	movs	r3, #0
 801550a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	7e1b      	ldrb	r3, [r3, #24]
 8015510:	3b01      	subs	r3, #1
 8015512:	2b0a      	cmp	r3, #10
 8015514:	f200 8158 	bhi.w	80157c8 <USBH_HandleControl+0x2cc>
 8015518:	a201      	add	r2, pc, #4	; (adr r2, 8015520 <USBH_HandleControl+0x24>)
 801551a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801551e:	bf00      	nop
 8015520:	0801554d 	.word	0x0801554d
 8015524:	08015567 	.word	0x08015567
 8015528:	080155d1 	.word	0x080155d1
 801552c:	080155f7 	.word	0x080155f7
 8015530:	0801562f 	.word	0x0801562f
 8015534:	0801565b 	.word	0x0801565b
 8015538:	080156ad 	.word	0x080156ad
 801553c:	080156cf 	.word	0x080156cf
 8015540:	0801570b 	.word	0x0801570b
 8015544:	08015733 	.word	0x08015733
 8015548:	08015771 	.word	0x08015771
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 801554c:	687b      	ldr	r3, [r7, #4]
 801554e:	f103 0110 	add.w	r1, r3, #16
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	795b      	ldrb	r3, [r3, #5]
 8015556:	461a      	mov	r2, r3
 8015558:	6878      	ldr	r0, [r7, #4]
 801555a:	f000 f945 	bl	80157e8 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	2202      	movs	r2, #2
 8015562:	761a      	strb	r2, [r3, #24]
      break;
 8015564:	e13b      	b.n	80157de <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	795b      	ldrb	r3, [r3, #5]
 801556a:	4619      	mov	r1, r3
 801556c:	6878      	ldr	r0, [r7, #4]
 801556e:	f000 fc7b 	bl	8015e68 <USBH_LL_GetURBState>
 8015572:	4603      	mov	r3, r0
 8015574:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8015576:	7bbb      	ldrb	r3, [r7, #14]
 8015578:	2b01      	cmp	r3, #1
 801557a:	d11e      	bne.n	80155ba <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 801557c:	687b      	ldr	r3, [r7, #4]
 801557e:	7c1b      	ldrb	r3, [r3, #16]
 8015580:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8015584:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8015586:	687b      	ldr	r3, [r7, #4]
 8015588:	8adb      	ldrh	r3, [r3, #22]
 801558a:	2b00      	cmp	r3, #0
 801558c:	d00a      	beq.n	80155a4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 801558e:	7b7b      	ldrb	r3, [r7, #13]
 8015590:	2b80      	cmp	r3, #128	; 0x80
 8015592:	d103      	bne.n	801559c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8015594:	687b      	ldr	r3, [r7, #4]
 8015596:	2203      	movs	r2, #3
 8015598:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 801559a:	e117      	b.n	80157cc <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	2205      	movs	r2, #5
 80155a0:	761a      	strb	r2, [r3, #24]
      break;
 80155a2:	e113      	b.n	80157cc <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 80155a4:	7b7b      	ldrb	r3, [r7, #13]
 80155a6:	2b80      	cmp	r3, #128	; 0x80
 80155a8:	d103      	bne.n	80155b2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80155aa:	687b      	ldr	r3, [r7, #4]
 80155ac:	2209      	movs	r2, #9
 80155ae:	761a      	strb	r2, [r3, #24]
      break;
 80155b0:	e10c      	b.n	80157cc <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 80155b2:	687b      	ldr	r3, [r7, #4]
 80155b4:	2207      	movs	r2, #7
 80155b6:	761a      	strb	r2, [r3, #24]
      break;
 80155b8:	e108      	b.n	80157cc <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80155ba:	7bbb      	ldrb	r3, [r7, #14]
 80155bc:	2b04      	cmp	r3, #4
 80155be:	d003      	beq.n	80155c8 <USBH_HandleControl+0xcc>
 80155c0:	7bbb      	ldrb	r3, [r7, #14]
 80155c2:	2b02      	cmp	r3, #2
 80155c4:	f040 8102 	bne.w	80157cc <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	220b      	movs	r2, #11
 80155cc:	761a      	strb	r2, [r3, #24]
      break;
 80155ce:	e0fd      	b.n	80157cc <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80155d0:	687b      	ldr	r3, [r7, #4]
 80155d2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80155d6:	b29a      	uxth	r2, r3
 80155d8:	687b      	ldr	r3, [r7, #4]
 80155da:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80155dc:	687b      	ldr	r3, [r7, #4]
 80155de:	6899      	ldr	r1, [r3, #8]
 80155e0:	687b      	ldr	r3, [r7, #4]
 80155e2:	899a      	ldrh	r2, [r3, #12]
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	791b      	ldrb	r3, [r3, #4]
 80155e8:	6878      	ldr	r0, [r7, #4]
 80155ea:	f000 f93c 	bl	8015866 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80155ee:	687b      	ldr	r3, [r7, #4]
 80155f0:	2204      	movs	r2, #4
 80155f2:	761a      	strb	r2, [r3, #24]
      break;
 80155f4:	e0f3      	b.n	80157de <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80155f6:	687b      	ldr	r3, [r7, #4]
 80155f8:	791b      	ldrb	r3, [r3, #4]
 80155fa:	4619      	mov	r1, r3
 80155fc:	6878      	ldr	r0, [r7, #4]
 80155fe:	f000 fc33 	bl	8015e68 <USBH_LL_GetURBState>
 8015602:	4603      	mov	r3, r0
 8015604:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8015606:	7bbb      	ldrb	r3, [r7, #14]
 8015608:	2b01      	cmp	r3, #1
 801560a:	d102      	bne.n	8015612 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 801560c:	687b      	ldr	r3, [r7, #4]
 801560e:	2209      	movs	r2, #9
 8015610:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8015612:	7bbb      	ldrb	r3, [r7, #14]
 8015614:	2b05      	cmp	r3, #5
 8015616:	d102      	bne.n	801561e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8015618:	2303      	movs	r3, #3
 801561a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 801561c:	e0d8      	b.n	80157d0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 801561e:	7bbb      	ldrb	r3, [r7, #14]
 8015620:	2b04      	cmp	r3, #4
 8015622:	f040 80d5 	bne.w	80157d0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	220b      	movs	r2, #11
 801562a:	761a      	strb	r2, [r3, #24]
      break;
 801562c:	e0d0      	b.n	80157d0 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 801562e:	687b      	ldr	r3, [r7, #4]
 8015630:	6899      	ldr	r1, [r3, #8]
 8015632:	687b      	ldr	r3, [r7, #4]
 8015634:	899a      	ldrh	r2, [r3, #12]
 8015636:	687b      	ldr	r3, [r7, #4]
 8015638:	7958      	ldrb	r0, [r3, #5]
 801563a:	2301      	movs	r3, #1
 801563c:	9300      	str	r3, [sp, #0]
 801563e:	4603      	mov	r3, r0
 8015640:	6878      	ldr	r0, [r7, #4]
 8015642:	f000 f8eb 	bl	801581c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8015646:	687b      	ldr	r3, [r7, #4]
 8015648:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801564c:	b29a      	uxth	r2, r3
 801564e:	687b      	ldr	r3, [r7, #4]
 8015650:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	2206      	movs	r2, #6
 8015656:	761a      	strb	r2, [r3, #24]
      break;
 8015658:	e0c1      	b.n	80157de <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	795b      	ldrb	r3, [r3, #5]
 801565e:	4619      	mov	r1, r3
 8015660:	6878      	ldr	r0, [r7, #4]
 8015662:	f000 fc01 	bl	8015e68 <USBH_LL_GetURBState>
 8015666:	4603      	mov	r3, r0
 8015668:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 801566a:	7bbb      	ldrb	r3, [r7, #14]
 801566c:	2b01      	cmp	r3, #1
 801566e:	d103      	bne.n	8015678 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8015670:	687b      	ldr	r3, [r7, #4]
 8015672:	2207      	movs	r2, #7
 8015674:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8015676:	e0ad      	b.n	80157d4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 8015678:	7bbb      	ldrb	r3, [r7, #14]
 801567a:	2b05      	cmp	r3, #5
 801567c:	d105      	bne.n	801568a <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 801567e:	687b      	ldr	r3, [r7, #4]
 8015680:	220c      	movs	r2, #12
 8015682:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8015684:	2303      	movs	r3, #3
 8015686:	73fb      	strb	r3, [r7, #15]
      break;
 8015688:	e0a4      	b.n	80157d4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 801568a:	7bbb      	ldrb	r3, [r7, #14]
 801568c:	2b02      	cmp	r3, #2
 801568e:	d103      	bne.n	8015698 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8015690:	687b      	ldr	r3, [r7, #4]
 8015692:	2205      	movs	r2, #5
 8015694:	761a      	strb	r2, [r3, #24]
      break;
 8015696:	e09d      	b.n	80157d4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 8015698:	7bbb      	ldrb	r3, [r7, #14]
 801569a:	2b04      	cmp	r3, #4
 801569c:	f040 809a 	bne.w	80157d4 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 80156a0:	687b      	ldr	r3, [r7, #4]
 80156a2:	220b      	movs	r2, #11
 80156a4:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80156a6:	2302      	movs	r3, #2
 80156a8:	73fb      	strb	r3, [r7, #15]
      break;
 80156aa:	e093      	b.n	80157d4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 80156ac:	687b      	ldr	r3, [r7, #4]
 80156ae:	791b      	ldrb	r3, [r3, #4]
 80156b0:	2200      	movs	r2, #0
 80156b2:	2100      	movs	r1, #0
 80156b4:	6878      	ldr	r0, [r7, #4]
 80156b6:	f000 f8d6 	bl	8015866 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80156c0:	b29a      	uxth	r2, r3
 80156c2:	687b      	ldr	r3, [r7, #4]
 80156c4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80156c6:	687b      	ldr	r3, [r7, #4]
 80156c8:	2208      	movs	r2, #8
 80156ca:	761a      	strb	r2, [r3, #24]

      break;
 80156cc:	e087      	b.n	80157de <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80156ce:	687b      	ldr	r3, [r7, #4]
 80156d0:	791b      	ldrb	r3, [r3, #4]
 80156d2:	4619      	mov	r1, r3
 80156d4:	6878      	ldr	r0, [r7, #4]
 80156d6:	f000 fbc7 	bl	8015e68 <USBH_LL_GetURBState>
 80156da:	4603      	mov	r3, r0
 80156dc:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80156de:	7bbb      	ldrb	r3, [r7, #14]
 80156e0:	2b01      	cmp	r3, #1
 80156e2:	d105      	bne.n	80156f0 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80156e4:	687b      	ldr	r3, [r7, #4]
 80156e6:	220d      	movs	r2, #13
 80156e8:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80156ea:	2300      	movs	r3, #0
 80156ec:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80156ee:	e073      	b.n	80157d8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 80156f0:	7bbb      	ldrb	r3, [r7, #14]
 80156f2:	2b04      	cmp	r3, #4
 80156f4:	d103      	bne.n	80156fe <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 80156f6:	687b      	ldr	r3, [r7, #4]
 80156f8:	220b      	movs	r2, #11
 80156fa:	761a      	strb	r2, [r3, #24]
      break;
 80156fc:	e06c      	b.n	80157d8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 80156fe:	7bbb      	ldrb	r3, [r7, #14]
 8015700:	2b05      	cmp	r3, #5
 8015702:	d169      	bne.n	80157d8 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 8015704:	2303      	movs	r3, #3
 8015706:	73fb      	strb	r3, [r7, #15]
      break;
 8015708:	e066      	b.n	80157d8 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 801570a:	687b      	ldr	r3, [r7, #4]
 801570c:	795a      	ldrb	r2, [r3, #5]
 801570e:	2301      	movs	r3, #1
 8015710:	9300      	str	r3, [sp, #0]
 8015712:	4613      	mov	r3, r2
 8015714:	2200      	movs	r2, #0
 8015716:	2100      	movs	r1, #0
 8015718:	6878      	ldr	r0, [r7, #4]
 801571a:	f000 f87f 	bl	801581c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8015724:	b29a      	uxth	r2, r3
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 801572a:	687b      	ldr	r3, [r7, #4]
 801572c:	220a      	movs	r2, #10
 801572e:	761a      	strb	r2, [r3, #24]
      break;
 8015730:	e055      	b.n	80157de <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8015732:	687b      	ldr	r3, [r7, #4]
 8015734:	795b      	ldrb	r3, [r3, #5]
 8015736:	4619      	mov	r1, r3
 8015738:	6878      	ldr	r0, [r7, #4]
 801573a:	f000 fb95 	bl	8015e68 <USBH_LL_GetURBState>
 801573e:	4603      	mov	r3, r0
 8015740:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8015742:	7bbb      	ldrb	r3, [r7, #14]
 8015744:	2b01      	cmp	r3, #1
 8015746:	d105      	bne.n	8015754 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 8015748:	2300      	movs	r3, #0
 801574a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 801574c:	687b      	ldr	r3, [r7, #4]
 801574e:	220d      	movs	r2, #13
 8015750:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8015752:	e043      	b.n	80157dc <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 8015754:	7bbb      	ldrb	r3, [r7, #14]
 8015756:	2b02      	cmp	r3, #2
 8015758:	d103      	bne.n	8015762 <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 801575a:	687b      	ldr	r3, [r7, #4]
 801575c:	2209      	movs	r2, #9
 801575e:	761a      	strb	r2, [r3, #24]
      break;
 8015760:	e03c      	b.n	80157dc <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 8015762:	7bbb      	ldrb	r3, [r7, #14]
 8015764:	2b04      	cmp	r3, #4
 8015766:	d139      	bne.n	80157dc <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	220b      	movs	r2, #11
 801576c:	761a      	strb	r2, [r3, #24]
      break;
 801576e:	e035      	b.n	80157dc <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8015770:	687b      	ldr	r3, [r7, #4]
 8015772:	7e5b      	ldrb	r3, [r3, #25]
 8015774:	3301      	adds	r3, #1
 8015776:	b2da      	uxtb	r2, r3
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	765a      	strb	r2, [r3, #25]
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	7e5b      	ldrb	r3, [r3, #25]
 8015780:	2b02      	cmp	r3, #2
 8015782:	d806      	bhi.n	8015792 <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8015784:	687b      	ldr	r3, [r7, #4]
 8015786:	2201      	movs	r2, #1
 8015788:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	2201      	movs	r2, #1
 801578e:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8015790:	e025      	b.n	80157de <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8015798:	2106      	movs	r1, #6
 801579a:	6878      	ldr	r0, [r7, #4]
 801579c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 801579e:	687b      	ldr	r3, [r7, #4]
 80157a0:	2200      	movs	r2, #0
 80157a2:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	795b      	ldrb	r3, [r3, #5]
 80157a8:	4619      	mov	r1, r3
 80157aa:	6878      	ldr	r0, [r7, #4]
 80157ac:	f000 f90c 	bl	80159c8 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 80157b0:	687b      	ldr	r3, [r7, #4]
 80157b2:	791b      	ldrb	r3, [r3, #4]
 80157b4:	4619      	mov	r1, r3
 80157b6:	6878      	ldr	r0, [r7, #4]
 80157b8:	f000 f906 	bl	80159c8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	2200      	movs	r2, #0
 80157c0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80157c2:	2302      	movs	r3, #2
 80157c4:	73fb      	strb	r3, [r7, #15]
      break;
 80157c6:	e00a      	b.n	80157de <USBH_HandleControl+0x2e2>

    default:
      break;
 80157c8:	bf00      	nop
 80157ca:	e008      	b.n	80157de <USBH_HandleControl+0x2e2>
      break;
 80157cc:	bf00      	nop
 80157ce:	e006      	b.n	80157de <USBH_HandleControl+0x2e2>
      break;
 80157d0:	bf00      	nop
 80157d2:	e004      	b.n	80157de <USBH_HandleControl+0x2e2>
      break;
 80157d4:	bf00      	nop
 80157d6:	e002      	b.n	80157de <USBH_HandleControl+0x2e2>
      break;
 80157d8:	bf00      	nop
 80157da:	e000      	b.n	80157de <USBH_HandleControl+0x2e2>
      break;
 80157dc:	bf00      	nop
  }

  return status;
 80157de:	7bfb      	ldrb	r3, [r7, #15]
}
 80157e0:	4618      	mov	r0, r3
 80157e2:	3710      	adds	r7, #16
 80157e4:	46bd      	mov	sp, r7
 80157e6:	bd80      	pop	{r7, pc}

080157e8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80157e8:	b580      	push	{r7, lr}
 80157ea:	b088      	sub	sp, #32
 80157ec:	af04      	add	r7, sp, #16
 80157ee:	60f8      	str	r0, [r7, #12]
 80157f0:	60b9      	str	r1, [r7, #8]
 80157f2:	4613      	mov	r3, r2
 80157f4:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80157f6:	79f9      	ldrb	r1, [r7, #7]
 80157f8:	2300      	movs	r3, #0
 80157fa:	9303      	str	r3, [sp, #12]
 80157fc:	2308      	movs	r3, #8
 80157fe:	9302      	str	r3, [sp, #8]
 8015800:	68bb      	ldr	r3, [r7, #8]
 8015802:	9301      	str	r3, [sp, #4]
 8015804:	2300      	movs	r3, #0
 8015806:	9300      	str	r3, [sp, #0]
 8015808:	2300      	movs	r3, #0
 801580a:	2200      	movs	r2, #0
 801580c:	68f8      	ldr	r0, [r7, #12]
 801580e:	f000 fafa 	bl	8015e06 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8015812:	2300      	movs	r3, #0
}
 8015814:	4618      	mov	r0, r3
 8015816:	3710      	adds	r7, #16
 8015818:	46bd      	mov	sp, r7
 801581a:	bd80      	pop	{r7, pc}

0801581c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 801581c:	b580      	push	{r7, lr}
 801581e:	b088      	sub	sp, #32
 8015820:	af04      	add	r7, sp, #16
 8015822:	60f8      	str	r0, [r7, #12]
 8015824:	60b9      	str	r1, [r7, #8]
 8015826:	4611      	mov	r1, r2
 8015828:	461a      	mov	r2, r3
 801582a:	460b      	mov	r3, r1
 801582c:	80fb      	strh	r3, [r7, #6]
 801582e:	4613      	mov	r3, r2
 8015830:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8015832:	68fb      	ldr	r3, [r7, #12]
 8015834:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8015838:	2b00      	cmp	r3, #0
 801583a:	d001      	beq.n	8015840 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 801583c:	2300      	movs	r3, #0
 801583e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8015840:	7979      	ldrb	r1, [r7, #5]
 8015842:	7e3b      	ldrb	r3, [r7, #24]
 8015844:	9303      	str	r3, [sp, #12]
 8015846:	88fb      	ldrh	r3, [r7, #6]
 8015848:	9302      	str	r3, [sp, #8]
 801584a:	68bb      	ldr	r3, [r7, #8]
 801584c:	9301      	str	r3, [sp, #4]
 801584e:	2301      	movs	r3, #1
 8015850:	9300      	str	r3, [sp, #0]
 8015852:	2300      	movs	r3, #0
 8015854:	2200      	movs	r2, #0
 8015856:	68f8      	ldr	r0, [r7, #12]
 8015858:	f000 fad5 	bl	8015e06 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 801585c:	2300      	movs	r3, #0
}
 801585e:	4618      	mov	r0, r3
 8015860:	3710      	adds	r7, #16
 8015862:	46bd      	mov	sp, r7
 8015864:	bd80      	pop	{r7, pc}

08015866 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8015866:	b580      	push	{r7, lr}
 8015868:	b088      	sub	sp, #32
 801586a:	af04      	add	r7, sp, #16
 801586c:	60f8      	str	r0, [r7, #12]
 801586e:	60b9      	str	r1, [r7, #8]
 8015870:	4611      	mov	r1, r2
 8015872:	461a      	mov	r2, r3
 8015874:	460b      	mov	r3, r1
 8015876:	80fb      	strh	r3, [r7, #6]
 8015878:	4613      	mov	r3, r2
 801587a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 801587c:	7979      	ldrb	r1, [r7, #5]
 801587e:	2300      	movs	r3, #0
 8015880:	9303      	str	r3, [sp, #12]
 8015882:	88fb      	ldrh	r3, [r7, #6]
 8015884:	9302      	str	r3, [sp, #8]
 8015886:	68bb      	ldr	r3, [r7, #8]
 8015888:	9301      	str	r3, [sp, #4]
 801588a:	2301      	movs	r3, #1
 801588c:	9300      	str	r3, [sp, #0]
 801588e:	2300      	movs	r3, #0
 8015890:	2201      	movs	r2, #1
 8015892:	68f8      	ldr	r0, [r7, #12]
 8015894:	f000 fab7 	bl	8015e06 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8015898:	2300      	movs	r3, #0

}
 801589a:	4618      	mov	r0, r3
 801589c:	3710      	adds	r7, #16
 801589e:	46bd      	mov	sp, r7
 80158a0:	bd80      	pop	{r7, pc}

080158a2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80158a2:	b580      	push	{r7, lr}
 80158a4:	b088      	sub	sp, #32
 80158a6:	af04      	add	r7, sp, #16
 80158a8:	60f8      	str	r0, [r7, #12]
 80158aa:	60b9      	str	r1, [r7, #8]
 80158ac:	4611      	mov	r1, r2
 80158ae:	461a      	mov	r2, r3
 80158b0:	460b      	mov	r3, r1
 80158b2:	80fb      	strh	r3, [r7, #6]
 80158b4:	4613      	mov	r3, r2
 80158b6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80158b8:	68fb      	ldr	r3, [r7, #12]
 80158ba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80158be:	2b00      	cmp	r3, #0
 80158c0:	d001      	beq.n	80158c6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80158c2:	2300      	movs	r3, #0
 80158c4:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80158c6:	7979      	ldrb	r1, [r7, #5]
 80158c8:	7e3b      	ldrb	r3, [r7, #24]
 80158ca:	9303      	str	r3, [sp, #12]
 80158cc:	88fb      	ldrh	r3, [r7, #6]
 80158ce:	9302      	str	r3, [sp, #8]
 80158d0:	68bb      	ldr	r3, [r7, #8]
 80158d2:	9301      	str	r3, [sp, #4]
 80158d4:	2301      	movs	r3, #1
 80158d6:	9300      	str	r3, [sp, #0]
 80158d8:	2302      	movs	r3, #2
 80158da:	2200      	movs	r2, #0
 80158dc:	68f8      	ldr	r0, [r7, #12]
 80158de:	f000 fa92 	bl	8015e06 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80158e2:	2300      	movs	r3, #0
}
 80158e4:	4618      	mov	r0, r3
 80158e6:	3710      	adds	r7, #16
 80158e8:	46bd      	mov	sp, r7
 80158ea:	bd80      	pop	{r7, pc}

080158ec <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80158ec:	b580      	push	{r7, lr}
 80158ee:	b088      	sub	sp, #32
 80158f0:	af04      	add	r7, sp, #16
 80158f2:	60f8      	str	r0, [r7, #12]
 80158f4:	60b9      	str	r1, [r7, #8]
 80158f6:	4611      	mov	r1, r2
 80158f8:	461a      	mov	r2, r3
 80158fa:	460b      	mov	r3, r1
 80158fc:	80fb      	strh	r3, [r7, #6]
 80158fe:	4613      	mov	r3, r2
 8015900:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8015902:	7979      	ldrb	r1, [r7, #5]
 8015904:	2300      	movs	r3, #0
 8015906:	9303      	str	r3, [sp, #12]
 8015908:	88fb      	ldrh	r3, [r7, #6]
 801590a:	9302      	str	r3, [sp, #8]
 801590c:	68bb      	ldr	r3, [r7, #8]
 801590e:	9301      	str	r3, [sp, #4]
 8015910:	2301      	movs	r3, #1
 8015912:	9300      	str	r3, [sp, #0]
 8015914:	2302      	movs	r3, #2
 8015916:	2201      	movs	r2, #1
 8015918:	68f8      	ldr	r0, [r7, #12]
 801591a:	f000 fa74 	bl	8015e06 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 801591e:	2300      	movs	r3, #0
}
 8015920:	4618      	mov	r0, r3
 8015922:	3710      	adds	r7, #16
 8015924:	46bd      	mov	sp, r7
 8015926:	bd80      	pop	{r7, pc}

08015928 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8015928:	b580      	push	{r7, lr}
 801592a:	b086      	sub	sp, #24
 801592c:	af04      	add	r7, sp, #16
 801592e:	6078      	str	r0, [r7, #4]
 8015930:	4608      	mov	r0, r1
 8015932:	4611      	mov	r1, r2
 8015934:	461a      	mov	r2, r3
 8015936:	4603      	mov	r3, r0
 8015938:	70fb      	strb	r3, [r7, #3]
 801593a:	460b      	mov	r3, r1
 801593c:	70bb      	strb	r3, [r7, #2]
 801593e:	4613      	mov	r3, r2
 8015940:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8015942:	7878      	ldrb	r0, [r7, #1]
 8015944:	78ba      	ldrb	r2, [r7, #2]
 8015946:	78f9      	ldrb	r1, [r7, #3]
 8015948:	8b3b      	ldrh	r3, [r7, #24]
 801594a:	9302      	str	r3, [sp, #8]
 801594c:	7d3b      	ldrb	r3, [r7, #20]
 801594e:	9301      	str	r3, [sp, #4]
 8015950:	7c3b      	ldrb	r3, [r7, #16]
 8015952:	9300      	str	r3, [sp, #0]
 8015954:	4603      	mov	r3, r0
 8015956:	6878      	ldr	r0, [r7, #4]
 8015958:	f000 fa07 	bl	8015d6a <USBH_LL_OpenPipe>

  return USBH_OK;
 801595c:	2300      	movs	r3, #0
}
 801595e:	4618      	mov	r0, r3
 8015960:	3708      	adds	r7, #8
 8015962:	46bd      	mov	sp, r7
 8015964:	bd80      	pop	{r7, pc}

08015966 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8015966:	b580      	push	{r7, lr}
 8015968:	b082      	sub	sp, #8
 801596a:	af00      	add	r7, sp, #0
 801596c:	6078      	str	r0, [r7, #4]
 801596e:	460b      	mov	r3, r1
 8015970:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8015972:	78fb      	ldrb	r3, [r7, #3]
 8015974:	4619      	mov	r1, r3
 8015976:	6878      	ldr	r0, [r7, #4]
 8015978:	f000 fa26 	bl	8015dc8 <USBH_LL_ClosePipe>

  return USBH_OK;
 801597c:	2300      	movs	r3, #0
}
 801597e:	4618      	mov	r0, r3
 8015980:	3708      	adds	r7, #8
 8015982:	46bd      	mov	sp, r7
 8015984:	bd80      	pop	{r7, pc}

08015986 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8015986:	b580      	push	{r7, lr}
 8015988:	b084      	sub	sp, #16
 801598a:	af00      	add	r7, sp, #0
 801598c:	6078      	str	r0, [r7, #4]
 801598e:	460b      	mov	r3, r1
 8015990:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8015992:	6878      	ldr	r0, [r7, #4]
 8015994:	f000 f836 	bl	8015a04 <USBH_GetFreePipe>
 8015998:	4603      	mov	r3, r0
 801599a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 801599c:	89fb      	ldrh	r3, [r7, #14]
 801599e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80159a2:	4293      	cmp	r3, r2
 80159a4:	d00a      	beq.n	80159bc <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80159a6:	78fa      	ldrb	r2, [r7, #3]
 80159a8:	89fb      	ldrh	r3, [r7, #14]
 80159aa:	f003 030f 	and.w	r3, r3, #15
 80159ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80159b2:	6879      	ldr	r1, [r7, #4]
 80159b4:	33e0      	adds	r3, #224	; 0xe0
 80159b6:	009b      	lsls	r3, r3, #2
 80159b8:	440b      	add	r3, r1
 80159ba:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80159bc:	89fb      	ldrh	r3, [r7, #14]
 80159be:	b2db      	uxtb	r3, r3
}
 80159c0:	4618      	mov	r0, r3
 80159c2:	3710      	adds	r7, #16
 80159c4:	46bd      	mov	sp, r7
 80159c6:	bd80      	pop	{r7, pc}

080159c8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80159c8:	b480      	push	{r7}
 80159ca:	b083      	sub	sp, #12
 80159cc:	af00      	add	r7, sp, #0
 80159ce:	6078      	str	r0, [r7, #4]
 80159d0:	460b      	mov	r3, r1
 80159d2:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80159d4:	78fb      	ldrb	r3, [r7, #3]
 80159d6:	2b0a      	cmp	r3, #10
 80159d8:	d80d      	bhi.n	80159f6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80159da:	78fb      	ldrb	r3, [r7, #3]
 80159dc:	687a      	ldr	r2, [r7, #4]
 80159de:	33e0      	adds	r3, #224	; 0xe0
 80159e0:	009b      	lsls	r3, r3, #2
 80159e2:	4413      	add	r3, r2
 80159e4:	685a      	ldr	r2, [r3, #4]
 80159e6:	78fb      	ldrb	r3, [r7, #3]
 80159e8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80159ec:	6879      	ldr	r1, [r7, #4]
 80159ee:	33e0      	adds	r3, #224	; 0xe0
 80159f0:	009b      	lsls	r3, r3, #2
 80159f2:	440b      	add	r3, r1
 80159f4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80159f6:	2300      	movs	r3, #0
}
 80159f8:	4618      	mov	r0, r3
 80159fa:	370c      	adds	r7, #12
 80159fc:	46bd      	mov	sp, r7
 80159fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a02:	4770      	bx	lr

08015a04 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8015a04:	b480      	push	{r7}
 8015a06:	b085      	sub	sp, #20
 8015a08:	af00      	add	r7, sp, #0
 8015a0a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8015a0c:	2300      	movs	r3, #0
 8015a0e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8015a10:	2300      	movs	r3, #0
 8015a12:	73fb      	strb	r3, [r7, #15]
 8015a14:	e00f      	b.n	8015a36 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8015a16:	7bfb      	ldrb	r3, [r7, #15]
 8015a18:	687a      	ldr	r2, [r7, #4]
 8015a1a:	33e0      	adds	r3, #224	; 0xe0
 8015a1c:	009b      	lsls	r3, r3, #2
 8015a1e:	4413      	add	r3, r2
 8015a20:	685b      	ldr	r3, [r3, #4]
 8015a22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8015a26:	2b00      	cmp	r3, #0
 8015a28:	d102      	bne.n	8015a30 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8015a2a:	7bfb      	ldrb	r3, [r7, #15]
 8015a2c:	b29b      	uxth	r3, r3
 8015a2e:	e007      	b.n	8015a40 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8015a30:	7bfb      	ldrb	r3, [r7, #15]
 8015a32:	3301      	adds	r3, #1
 8015a34:	73fb      	strb	r3, [r7, #15]
 8015a36:	7bfb      	ldrb	r3, [r7, #15]
 8015a38:	2b0a      	cmp	r3, #10
 8015a3a:	d9ec      	bls.n	8015a16 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8015a3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8015a40:	4618      	mov	r0, r3
 8015a42:	3714      	adds	r7, #20
 8015a44:	46bd      	mov	sp, r7
 8015a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a4a:	4770      	bx	lr

08015a4c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8015a4c:	b580      	push	{r7, lr}
 8015a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8015a50:	2201      	movs	r2, #1
 8015a52:	490e      	ldr	r1, [pc, #56]	; (8015a8c <MX_USB_HOST_Init+0x40>)
 8015a54:	480e      	ldr	r0, [pc, #56]	; (8015a90 <MX_USB_HOST_Init+0x44>)
 8015a56:	f7ff fb35 	bl	80150c4 <USBH_Init>
 8015a5a:	4603      	mov	r3, r0
 8015a5c:	2b00      	cmp	r3, #0
 8015a5e:	d001      	beq.n	8015a64 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8015a60:	f7f9 fada 	bl	800f018 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8015a64:	490b      	ldr	r1, [pc, #44]	; (8015a94 <MX_USB_HOST_Init+0x48>)
 8015a66:	480a      	ldr	r0, [pc, #40]	; (8015a90 <MX_USB_HOST_Init+0x44>)
 8015a68:	f7ff fbba 	bl	80151e0 <USBH_RegisterClass>
 8015a6c:	4603      	mov	r3, r0
 8015a6e:	2b00      	cmp	r3, #0
 8015a70:	d001      	beq.n	8015a76 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8015a72:	f7f9 fad1 	bl	800f018 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8015a76:	4806      	ldr	r0, [pc, #24]	; (8015a90 <MX_USB_HOST_Init+0x44>)
 8015a78:	f7ff fc3e 	bl	80152f8 <USBH_Start>
 8015a7c:	4603      	mov	r3, r0
 8015a7e:	2b00      	cmp	r3, #0
 8015a80:	d001      	beq.n	8015a86 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8015a82:	f7f9 fac9 	bl	800f018 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8015a86:	bf00      	nop
 8015a88:	bd80      	pop	{r7, pc}
 8015a8a:	bf00      	nop
 8015a8c:	08015a99 	.word	0x08015a99
 8015a90:	200003a0 	.word	0x200003a0
 8015a94:	20000164 	.word	0x20000164

08015a98 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8015a98:	b480      	push	{r7}
 8015a9a:	b083      	sub	sp, #12
 8015a9c:	af00      	add	r7, sp, #0
 8015a9e:	6078      	str	r0, [r7, #4]
 8015aa0:	460b      	mov	r3, r1
 8015aa2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8015aa4:	78fb      	ldrb	r3, [r7, #3]
 8015aa6:	3b01      	subs	r3, #1
 8015aa8:	2b04      	cmp	r3, #4
 8015aaa:	d819      	bhi.n	8015ae0 <USBH_UserProcess+0x48>
 8015aac:	a201      	add	r2, pc, #4	; (adr r2, 8015ab4 <USBH_UserProcess+0x1c>)
 8015aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015ab2:	bf00      	nop
 8015ab4:	08015ae1 	.word	0x08015ae1
 8015ab8:	08015ad1 	.word	0x08015ad1
 8015abc:	08015ae1 	.word	0x08015ae1
 8015ac0:	08015ad9 	.word	0x08015ad9
 8015ac4:	08015ac9 	.word	0x08015ac9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8015ac8:	4b09      	ldr	r3, [pc, #36]	; (8015af0 <USBH_UserProcess+0x58>)
 8015aca:	2203      	movs	r2, #3
 8015acc:	701a      	strb	r2, [r3, #0]
  break;
 8015ace:	e008      	b.n	8015ae2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8015ad0:	4b07      	ldr	r3, [pc, #28]	; (8015af0 <USBH_UserProcess+0x58>)
 8015ad2:	2202      	movs	r2, #2
 8015ad4:	701a      	strb	r2, [r3, #0]
  break;
 8015ad6:	e004      	b.n	8015ae2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8015ad8:	4b05      	ldr	r3, [pc, #20]	; (8015af0 <USBH_UserProcess+0x58>)
 8015ada:	2201      	movs	r2, #1
 8015adc:	701a      	strb	r2, [r3, #0]
  break;
 8015ade:	e000      	b.n	8015ae2 <USBH_UserProcess+0x4a>

  default:
  break;
 8015ae0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8015ae2:	bf00      	nop
 8015ae4:	370c      	adds	r7, #12
 8015ae6:	46bd      	mov	sp, r7
 8015ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015aec:	4770      	bx	lr
 8015aee:	bf00      	nop
 8015af0:	20000210 	.word	0x20000210

08015af4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8015af4:	b580      	push	{r7, lr}
 8015af6:	b08a      	sub	sp, #40	; 0x28
 8015af8:	af00      	add	r7, sp, #0
 8015afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015afc:	f107 0314 	add.w	r3, r7, #20
 8015b00:	2200      	movs	r2, #0
 8015b02:	601a      	str	r2, [r3, #0]
 8015b04:	605a      	str	r2, [r3, #4]
 8015b06:	609a      	str	r2, [r3, #8]
 8015b08:	60da      	str	r2, [r3, #12]
 8015b0a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	681b      	ldr	r3, [r3, #0]
 8015b10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8015b14:	d147      	bne.n	8015ba6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015b16:	2300      	movs	r3, #0
 8015b18:	613b      	str	r3, [r7, #16]
 8015b1a:	4b25      	ldr	r3, [pc, #148]	; (8015bb0 <HAL_HCD_MspInit+0xbc>)
 8015b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015b1e:	4a24      	ldr	r2, [pc, #144]	; (8015bb0 <HAL_HCD_MspInit+0xbc>)
 8015b20:	f043 0301 	orr.w	r3, r3, #1
 8015b24:	6313      	str	r3, [r2, #48]	; 0x30
 8015b26:	4b22      	ldr	r3, [pc, #136]	; (8015bb0 <HAL_HCD_MspInit+0xbc>)
 8015b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015b2a:	f003 0301 	and.w	r3, r3, #1
 8015b2e:	613b      	str	r3, [r7, #16]
 8015b30:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8015b32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015b36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8015b38:	2300      	movs	r3, #0
 8015b3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015b3c:	2300      	movs	r3, #0
 8015b3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8015b40:	f107 0314 	add.w	r3, r7, #20
 8015b44:	4619      	mov	r1, r3
 8015b46:	481b      	ldr	r0, [pc, #108]	; (8015bb4 <HAL_HCD_MspInit+0xc0>)
 8015b48:	f7f9 fe64 	bl	800f814 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8015b4c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8015b50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015b52:	2302      	movs	r3, #2
 8015b54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015b56:	2300      	movs	r3, #0
 8015b58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015b5a:	2303      	movs	r3, #3
 8015b5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8015b5e:	230a      	movs	r3, #10
 8015b60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015b62:	f107 0314 	add.w	r3, r7, #20
 8015b66:	4619      	mov	r1, r3
 8015b68:	4812      	ldr	r0, [pc, #72]	; (8015bb4 <HAL_HCD_MspInit+0xc0>)
 8015b6a:	f7f9 fe53 	bl	800f814 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8015b6e:	4b10      	ldr	r3, [pc, #64]	; (8015bb0 <HAL_HCD_MspInit+0xbc>)
 8015b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015b72:	4a0f      	ldr	r2, [pc, #60]	; (8015bb0 <HAL_HCD_MspInit+0xbc>)
 8015b74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015b78:	6353      	str	r3, [r2, #52]	; 0x34
 8015b7a:	2300      	movs	r3, #0
 8015b7c:	60fb      	str	r3, [r7, #12]
 8015b7e:	4b0c      	ldr	r3, [pc, #48]	; (8015bb0 <HAL_HCD_MspInit+0xbc>)
 8015b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015b82:	4a0b      	ldr	r2, [pc, #44]	; (8015bb0 <HAL_HCD_MspInit+0xbc>)
 8015b84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8015b88:	6453      	str	r3, [r2, #68]	; 0x44
 8015b8a:	4b09      	ldr	r3, [pc, #36]	; (8015bb0 <HAL_HCD_MspInit+0xbc>)
 8015b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015b8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015b92:	60fb      	str	r3, [r7, #12]
 8015b94:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8015b96:	2200      	movs	r2, #0
 8015b98:	2100      	movs	r1, #0
 8015b9a:	2043      	movs	r0, #67	; 0x43
 8015b9c:	f7f9 fe03 	bl	800f7a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8015ba0:	2043      	movs	r0, #67	; 0x43
 8015ba2:	f7f9 fe1c 	bl	800f7de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8015ba6:	bf00      	nop
 8015ba8:	3728      	adds	r7, #40	; 0x28
 8015baa:	46bd      	mov	sp, r7
 8015bac:	bd80      	pop	{r7, pc}
 8015bae:	bf00      	nop
 8015bb0:	40023800 	.word	0x40023800
 8015bb4:	40020000 	.word	0x40020000

08015bb8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8015bb8:	b580      	push	{r7, lr}
 8015bba:	b082      	sub	sp, #8
 8015bbc:	af00      	add	r7, sp, #0
 8015bbe:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8015bc0:	687b      	ldr	r3, [r7, #4]
 8015bc2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015bc6:	4618      	mov	r0, r3
 8015bc8:	f7ff fbb5 	bl	8015336 <USBH_LL_IncTimer>
}
 8015bcc:	bf00      	nop
 8015bce:	3708      	adds	r7, #8
 8015bd0:	46bd      	mov	sp, r7
 8015bd2:	bd80      	pop	{r7, pc}

08015bd4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8015bd4:	b580      	push	{r7, lr}
 8015bd6:	b082      	sub	sp, #8
 8015bd8:	af00      	add	r7, sp, #0
 8015bda:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8015bdc:	687b      	ldr	r3, [r7, #4]
 8015bde:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015be2:	4618      	mov	r0, r3
 8015be4:	f7ff fbed 	bl	80153c2 <USBH_LL_Connect>
}
 8015be8:	bf00      	nop
 8015bea:	3708      	adds	r7, #8
 8015bec:	46bd      	mov	sp, r7
 8015bee:	bd80      	pop	{r7, pc}

08015bf0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8015bf0:	b580      	push	{r7, lr}
 8015bf2:	b082      	sub	sp, #8
 8015bf4:	af00      	add	r7, sp, #0
 8015bf6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8015bf8:	687b      	ldr	r3, [r7, #4]
 8015bfa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015bfe:	4618      	mov	r0, r3
 8015c00:	f7ff fbf6 	bl	80153f0 <USBH_LL_Disconnect>
}
 8015c04:	bf00      	nop
 8015c06:	3708      	adds	r7, #8
 8015c08:	46bd      	mov	sp, r7
 8015c0a:	bd80      	pop	{r7, pc}

08015c0c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8015c0c:	b480      	push	{r7}
 8015c0e:	b083      	sub	sp, #12
 8015c10:	af00      	add	r7, sp, #0
 8015c12:	6078      	str	r0, [r7, #4]
 8015c14:	460b      	mov	r3, r1
 8015c16:	70fb      	strb	r3, [r7, #3]
 8015c18:	4613      	mov	r3, r2
 8015c1a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8015c1c:	bf00      	nop
 8015c1e:	370c      	adds	r7, #12
 8015c20:	46bd      	mov	sp, r7
 8015c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c26:	4770      	bx	lr

08015c28 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8015c28:	b580      	push	{r7, lr}
 8015c2a:	b082      	sub	sp, #8
 8015c2c:	af00      	add	r7, sp, #0
 8015c2e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8015c30:	687b      	ldr	r3, [r7, #4]
 8015c32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015c36:	4618      	mov	r0, r3
 8015c38:	f7ff fba7 	bl	801538a <USBH_LL_PortEnabled>
}
 8015c3c:	bf00      	nop
 8015c3e:	3708      	adds	r7, #8
 8015c40:	46bd      	mov	sp, r7
 8015c42:	bd80      	pop	{r7, pc}

08015c44 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8015c44:	b580      	push	{r7, lr}
 8015c46:	b082      	sub	sp, #8
 8015c48:	af00      	add	r7, sp, #0
 8015c4a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8015c4c:	687b      	ldr	r3, [r7, #4]
 8015c4e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015c52:	4618      	mov	r0, r3
 8015c54:	f7ff fba7 	bl	80153a6 <USBH_LL_PortDisabled>
}
 8015c58:	bf00      	nop
 8015c5a:	3708      	adds	r7, #8
 8015c5c:	46bd      	mov	sp, r7
 8015c5e:	bd80      	pop	{r7, pc}

08015c60 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8015c60:	b580      	push	{r7, lr}
 8015c62:	b082      	sub	sp, #8
 8015c64:	af00      	add	r7, sp, #0
 8015c66:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8015c68:	687b      	ldr	r3, [r7, #4]
 8015c6a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8015c6e:	2b01      	cmp	r3, #1
 8015c70:	d12a      	bne.n	8015cc8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8015c72:	4a18      	ldr	r2, [pc, #96]	; (8015cd4 <USBH_LL_Init+0x74>)
 8015c74:	687b      	ldr	r3, [r7, #4]
 8015c76:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	4a15      	ldr	r2, [pc, #84]	; (8015cd4 <USBH_LL_Init+0x74>)
 8015c7e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8015c82:	4b14      	ldr	r3, [pc, #80]	; (8015cd4 <USBH_LL_Init+0x74>)
 8015c84:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8015c88:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8015c8a:	4b12      	ldr	r3, [pc, #72]	; (8015cd4 <USBH_LL_Init+0x74>)
 8015c8c:	2208      	movs	r2, #8
 8015c8e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8015c90:	4b10      	ldr	r3, [pc, #64]	; (8015cd4 <USBH_LL_Init+0x74>)
 8015c92:	2201      	movs	r2, #1
 8015c94:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8015c96:	4b0f      	ldr	r3, [pc, #60]	; (8015cd4 <USBH_LL_Init+0x74>)
 8015c98:	2200      	movs	r2, #0
 8015c9a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8015c9c:	4b0d      	ldr	r3, [pc, #52]	; (8015cd4 <USBH_LL_Init+0x74>)
 8015c9e:	2202      	movs	r2, #2
 8015ca0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8015ca2:	4b0c      	ldr	r3, [pc, #48]	; (8015cd4 <USBH_LL_Init+0x74>)
 8015ca4:	2200      	movs	r2, #0
 8015ca6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8015ca8:	480a      	ldr	r0, [pc, #40]	; (8015cd4 <USBH_LL_Init+0x74>)
 8015caa:	f7f9 ff8a 	bl	800fbc2 <HAL_HCD_Init>
 8015cae:	4603      	mov	r3, r0
 8015cb0:	2b00      	cmp	r3, #0
 8015cb2:	d001      	beq.n	8015cb8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8015cb4:	f7f9 f9b0 	bl	800f018 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8015cb8:	4806      	ldr	r0, [pc, #24]	; (8015cd4 <USBH_LL_Init+0x74>)
 8015cba:	f7fa fb7f 	bl	80103bc <HAL_HCD_GetCurrentFrame>
 8015cbe:	4603      	mov	r3, r0
 8015cc0:	4619      	mov	r1, r3
 8015cc2:	6878      	ldr	r0, [r7, #4]
 8015cc4:	f7ff fb28 	bl	8015318 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8015cc8:	2300      	movs	r3, #0
}
 8015cca:	4618      	mov	r0, r3
 8015ccc:	3708      	adds	r7, #8
 8015cce:	46bd      	mov	sp, r7
 8015cd0:	bd80      	pop	{r7, pc}
 8015cd2:	bf00      	nop
 8015cd4:	20000778 	.word	0x20000778

08015cd8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8015cd8:	b580      	push	{r7, lr}
 8015cda:	b084      	sub	sp, #16
 8015cdc:	af00      	add	r7, sp, #0
 8015cde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015ce0:	2300      	movs	r3, #0
 8015ce2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8015ce4:	2300      	movs	r3, #0
 8015ce6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8015cee:	4618      	mov	r0, r3
 8015cf0:	f7fa fafa 	bl	80102e8 <HAL_HCD_Start>
 8015cf4:	4603      	mov	r3, r0
 8015cf6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8015cf8:	7bfb      	ldrb	r3, [r7, #15]
 8015cfa:	4618      	mov	r0, r3
 8015cfc:	f000 f912 	bl	8015f24 <USBH_Get_USB_Status>
 8015d00:	4603      	mov	r3, r0
 8015d02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015d04:	7bbb      	ldrb	r3, [r7, #14]
}
 8015d06:	4618      	mov	r0, r3
 8015d08:	3710      	adds	r7, #16
 8015d0a:	46bd      	mov	sp, r7
 8015d0c:	bd80      	pop	{r7, pc}

08015d0e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8015d0e:	b580      	push	{r7, lr}
 8015d10:	b084      	sub	sp, #16
 8015d12:	af00      	add	r7, sp, #0
 8015d14:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015d16:	2300      	movs	r3, #0
 8015d18:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8015d1a:	2300      	movs	r3, #0
 8015d1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8015d1e:	687b      	ldr	r3, [r7, #4]
 8015d20:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8015d24:	4618      	mov	r0, r3
 8015d26:	f7fa fb02 	bl	801032e <HAL_HCD_Stop>
 8015d2a:	4603      	mov	r3, r0
 8015d2c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8015d2e:	7bfb      	ldrb	r3, [r7, #15]
 8015d30:	4618      	mov	r0, r3
 8015d32:	f000 f8f7 	bl	8015f24 <USBH_Get_USB_Status>
 8015d36:	4603      	mov	r3, r0
 8015d38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015d3a:	7bbb      	ldrb	r3, [r7, #14]
}
 8015d3c:	4618      	mov	r0, r3
 8015d3e:	3710      	adds	r7, #16
 8015d40:	46bd      	mov	sp, r7
 8015d42:	bd80      	pop	{r7, pc}

08015d44 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8015d44:	b580      	push	{r7, lr}
 8015d46:	b082      	sub	sp, #8
 8015d48:	af00      	add	r7, sp, #0
 8015d4a:	6078      	str	r0, [r7, #4]
 8015d4c:	460b      	mov	r3, r1
 8015d4e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8015d56:	78fa      	ldrb	r2, [r7, #3]
 8015d58:	4611      	mov	r1, r2
 8015d5a:	4618      	mov	r0, r3
 8015d5c:	f7fa fb19 	bl	8010392 <HAL_HCD_HC_GetXferCount>
 8015d60:	4603      	mov	r3, r0
}
 8015d62:	4618      	mov	r0, r3
 8015d64:	3708      	adds	r7, #8
 8015d66:	46bd      	mov	sp, r7
 8015d68:	bd80      	pop	{r7, pc}

08015d6a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8015d6a:	b590      	push	{r4, r7, lr}
 8015d6c:	b089      	sub	sp, #36	; 0x24
 8015d6e:	af04      	add	r7, sp, #16
 8015d70:	6078      	str	r0, [r7, #4]
 8015d72:	4608      	mov	r0, r1
 8015d74:	4611      	mov	r1, r2
 8015d76:	461a      	mov	r2, r3
 8015d78:	4603      	mov	r3, r0
 8015d7a:	70fb      	strb	r3, [r7, #3]
 8015d7c:	460b      	mov	r3, r1
 8015d7e:	70bb      	strb	r3, [r7, #2]
 8015d80:	4613      	mov	r3, r2
 8015d82:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015d84:	2300      	movs	r3, #0
 8015d86:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8015d88:	2300      	movs	r3, #0
 8015d8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8015d8c:	687b      	ldr	r3, [r7, #4]
 8015d8e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8015d92:	787c      	ldrb	r4, [r7, #1]
 8015d94:	78ba      	ldrb	r2, [r7, #2]
 8015d96:	78f9      	ldrb	r1, [r7, #3]
 8015d98:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8015d9a:	9302      	str	r3, [sp, #8]
 8015d9c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015da0:	9301      	str	r3, [sp, #4]
 8015da2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015da6:	9300      	str	r3, [sp, #0]
 8015da8:	4623      	mov	r3, r4
 8015daa:	f7f9 ff6c 	bl	800fc86 <HAL_HCD_HC_Init>
 8015dae:	4603      	mov	r3, r0
 8015db0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8015db2:	7bfb      	ldrb	r3, [r7, #15]
 8015db4:	4618      	mov	r0, r3
 8015db6:	f000 f8b5 	bl	8015f24 <USBH_Get_USB_Status>
 8015dba:	4603      	mov	r3, r0
 8015dbc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015dbe:	7bbb      	ldrb	r3, [r7, #14]
}
 8015dc0:	4618      	mov	r0, r3
 8015dc2:	3714      	adds	r7, #20
 8015dc4:	46bd      	mov	sp, r7
 8015dc6:	bd90      	pop	{r4, r7, pc}

08015dc8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8015dc8:	b580      	push	{r7, lr}
 8015dca:	b084      	sub	sp, #16
 8015dcc:	af00      	add	r7, sp, #0
 8015dce:	6078      	str	r0, [r7, #4]
 8015dd0:	460b      	mov	r3, r1
 8015dd2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015dd4:	2300      	movs	r3, #0
 8015dd6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8015dd8:	2300      	movs	r3, #0
 8015dda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8015ddc:	687b      	ldr	r3, [r7, #4]
 8015dde:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8015de2:	78fa      	ldrb	r2, [r7, #3]
 8015de4:	4611      	mov	r1, r2
 8015de6:	4618      	mov	r0, r3
 8015de8:	f7f9 ffe5 	bl	800fdb6 <HAL_HCD_HC_Halt>
 8015dec:	4603      	mov	r3, r0
 8015dee:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8015df0:	7bfb      	ldrb	r3, [r7, #15]
 8015df2:	4618      	mov	r0, r3
 8015df4:	f000 f896 	bl	8015f24 <USBH_Get_USB_Status>
 8015df8:	4603      	mov	r3, r0
 8015dfa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015dfc:	7bbb      	ldrb	r3, [r7, #14]
}
 8015dfe:	4618      	mov	r0, r3
 8015e00:	3710      	adds	r7, #16
 8015e02:	46bd      	mov	sp, r7
 8015e04:	bd80      	pop	{r7, pc}

08015e06 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8015e06:	b590      	push	{r4, r7, lr}
 8015e08:	b089      	sub	sp, #36	; 0x24
 8015e0a:	af04      	add	r7, sp, #16
 8015e0c:	6078      	str	r0, [r7, #4]
 8015e0e:	4608      	mov	r0, r1
 8015e10:	4611      	mov	r1, r2
 8015e12:	461a      	mov	r2, r3
 8015e14:	4603      	mov	r3, r0
 8015e16:	70fb      	strb	r3, [r7, #3]
 8015e18:	460b      	mov	r3, r1
 8015e1a:	70bb      	strb	r3, [r7, #2]
 8015e1c:	4613      	mov	r3, r2
 8015e1e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015e20:	2300      	movs	r3, #0
 8015e22:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8015e24:	2300      	movs	r3, #0
 8015e26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8015e28:	687b      	ldr	r3, [r7, #4]
 8015e2a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8015e2e:	787c      	ldrb	r4, [r7, #1]
 8015e30:	78ba      	ldrb	r2, [r7, #2]
 8015e32:	78f9      	ldrb	r1, [r7, #3]
 8015e34:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8015e38:	9303      	str	r3, [sp, #12]
 8015e3a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8015e3c:	9302      	str	r3, [sp, #8]
 8015e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e40:	9301      	str	r3, [sp, #4]
 8015e42:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015e46:	9300      	str	r3, [sp, #0]
 8015e48:	4623      	mov	r3, r4
 8015e4a:	f7f9 ffd7 	bl	800fdfc <HAL_HCD_HC_SubmitRequest>
 8015e4e:	4603      	mov	r3, r0
 8015e50:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8015e52:	7bfb      	ldrb	r3, [r7, #15]
 8015e54:	4618      	mov	r0, r3
 8015e56:	f000 f865 	bl	8015f24 <USBH_Get_USB_Status>
 8015e5a:	4603      	mov	r3, r0
 8015e5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015e5e:	7bbb      	ldrb	r3, [r7, #14]
}
 8015e60:	4618      	mov	r0, r3
 8015e62:	3714      	adds	r7, #20
 8015e64:	46bd      	mov	sp, r7
 8015e66:	bd90      	pop	{r4, r7, pc}

08015e68 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8015e68:	b580      	push	{r7, lr}
 8015e6a:	b082      	sub	sp, #8
 8015e6c:	af00      	add	r7, sp, #0
 8015e6e:	6078      	str	r0, [r7, #4]
 8015e70:	460b      	mov	r3, r1
 8015e72:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8015e74:	687b      	ldr	r3, [r7, #4]
 8015e76:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8015e7a:	78fa      	ldrb	r2, [r7, #3]
 8015e7c:	4611      	mov	r1, r2
 8015e7e:	4618      	mov	r0, r3
 8015e80:	f7fa fa72 	bl	8010368 <HAL_HCD_HC_GetURBState>
 8015e84:	4603      	mov	r3, r0
}
 8015e86:	4618      	mov	r0, r3
 8015e88:	3708      	adds	r7, #8
 8015e8a:	46bd      	mov	sp, r7
 8015e8c:	bd80      	pop	{r7, pc}

08015e8e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8015e8e:	b580      	push	{r7, lr}
 8015e90:	b082      	sub	sp, #8
 8015e92:	af00      	add	r7, sp, #0
 8015e94:	6078      	str	r0, [r7, #4]
 8015e96:	460b      	mov	r3, r1
 8015e98:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8015ea0:	2b01      	cmp	r3, #1
 8015ea2:	d103      	bne.n	8015eac <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8015ea4:	78fb      	ldrb	r3, [r7, #3]
 8015ea6:	4618      	mov	r0, r3
 8015ea8:	f000 f868 	bl	8015f7c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8015eac:	20c8      	movs	r0, #200	; 0xc8
 8015eae:	f7f9 fb7d 	bl	800f5ac <HAL_Delay>
  return USBH_OK;
 8015eb2:	2300      	movs	r3, #0
}
 8015eb4:	4618      	mov	r0, r3
 8015eb6:	3708      	adds	r7, #8
 8015eb8:	46bd      	mov	sp, r7
 8015eba:	bd80      	pop	{r7, pc}

08015ebc <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8015ebc:	b480      	push	{r7}
 8015ebe:	b085      	sub	sp, #20
 8015ec0:	af00      	add	r7, sp, #0
 8015ec2:	6078      	str	r0, [r7, #4]
 8015ec4:	460b      	mov	r3, r1
 8015ec6:	70fb      	strb	r3, [r7, #3]
 8015ec8:	4613      	mov	r3, r2
 8015eca:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8015ecc:	687b      	ldr	r3, [r7, #4]
 8015ece:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8015ed2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8015ed4:	78fa      	ldrb	r2, [r7, #3]
 8015ed6:	68f9      	ldr	r1, [r7, #12]
 8015ed8:	4613      	mov	r3, r2
 8015eda:	009b      	lsls	r3, r3, #2
 8015edc:	4413      	add	r3, r2
 8015ede:	00db      	lsls	r3, r3, #3
 8015ee0:	440b      	add	r3, r1
 8015ee2:	333b      	adds	r3, #59	; 0x3b
 8015ee4:	781b      	ldrb	r3, [r3, #0]
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	d00a      	beq.n	8015f00 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8015eea:	78fa      	ldrb	r2, [r7, #3]
 8015eec:	68f9      	ldr	r1, [r7, #12]
 8015eee:	4613      	mov	r3, r2
 8015ef0:	009b      	lsls	r3, r3, #2
 8015ef2:	4413      	add	r3, r2
 8015ef4:	00db      	lsls	r3, r3, #3
 8015ef6:	440b      	add	r3, r1
 8015ef8:	3350      	adds	r3, #80	; 0x50
 8015efa:	78ba      	ldrb	r2, [r7, #2]
 8015efc:	701a      	strb	r2, [r3, #0]
 8015efe:	e009      	b.n	8015f14 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8015f00:	78fa      	ldrb	r2, [r7, #3]
 8015f02:	68f9      	ldr	r1, [r7, #12]
 8015f04:	4613      	mov	r3, r2
 8015f06:	009b      	lsls	r3, r3, #2
 8015f08:	4413      	add	r3, r2
 8015f0a:	00db      	lsls	r3, r3, #3
 8015f0c:	440b      	add	r3, r1
 8015f0e:	3351      	adds	r3, #81	; 0x51
 8015f10:	78ba      	ldrb	r2, [r7, #2]
 8015f12:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8015f14:	2300      	movs	r3, #0
}
 8015f16:	4618      	mov	r0, r3
 8015f18:	3714      	adds	r7, #20
 8015f1a:	46bd      	mov	sp, r7
 8015f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f20:	4770      	bx	lr
	...

08015f24 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015f24:	b480      	push	{r7}
 8015f26:	b085      	sub	sp, #20
 8015f28:	af00      	add	r7, sp, #0
 8015f2a:	4603      	mov	r3, r0
 8015f2c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8015f2e:	2300      	movs	r3, #0
 8015f30:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8015f32:	79fb      	ldrb	r3, [r7, #7]
 8015f34:	2b03      	cmp	r3, #3
 8015f36:	d817      	bhi.n	8015f68 <USBH_Get_USB_Status+0x44>
 8015f38:	a201      	add	r2, pc, #4	; (adr r2, 8015f40 <USBH_Get_USB_Status+0x1c>)
 8015f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015f3e:	bf00      	nop
 8015f40:	08015f51 	.word	0x08015f51
 8015f44:	08015f57 	.word	0x08015f57
 8015f48:	08015f5d 	.word	0x08015f5d
 8015f4c:	08015f63 	.word	0x08015f63
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8015f50:	2300      	movs	r3, #0
 8015f52:	73fb      	strb	r3, [r7, #15]
    break;
 8015f54:	e00b      	b.n	8015f6e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8015f56:	2302      	movs	r3, #2
 8015f58:	73fb      	strb	r3, [r7, #15]
    break;
 8015f5a:	e008      	b.n	8015f6e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8015f5c:	2301      	movs	r3, #1
 8015f5e:	73fb      	strb	r3, [r7, #15]
    break;
 8015f60:	e005      	b.n	8015f6e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8015f62:	2302      	movs	r3, #2
 8015f64:	73fb      	strb	r3, [r7, #15]
    break;
 8015f66:	e002      	b.n	8015f6e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8015f68:	2302      	movs	r3, #2
 8015f6a:	73fb      	strb	r3, [r7, #15]
    break;
 8015f6c:	bf00      	nop
  }
  return usb_status;
 8015f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015f70:	4618      	mov	r0, r3
 8015f72:	3714      	adds	r7, #20
 8015f74:	46bd      	mov	sp, r7
 8015f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f7a:	4770      	bx	lr

08015f7c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8015f7c:	b580      	push	{r7, lr}
 8015f7e:	b084      	sub	sp, #16
 8015f80:	af00      	add	r7, sp, #0
 8015f82:	4603      	mov	r3, r0
 8015f84:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8015f86:	79fb      	ldrb	r3, [r7, #7]
 8015f88:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8015f8a:	79fb      	ldrb	r3, [r7, #7]
 8015f8c:	2b00      	cmp	r3, #0
 8015f8e:	d102      	bne.n	8015f96 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8015f90:	2301      	movs	r3, #1
 8015f92:	73fb      	strb	r3, [r7, #15]
 8015f94:	e001      	b.n	8015f9a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8015f96:	2300      	movs	r3, #0
 8015f98:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8015f9a:	7bfb      	ldrb	r3, [r7, #15]
 8015f9c:	461a      	mov	r2, r3
 8015f9e:	2101      	movs	r1, #1
 8015fa0:	4803      	ldr	r0, [pc, #12]	; (8015fb0 <MX_DriverVbusFS+0x34>)
 8015fa2:	f7f9 fdd1 	bl	800fb48 <HAL_GPIO_WritePin>
}
 8015fa6:	bf00      	nop
 8015fa8:	3710      	adds	r7, #16
 8015faa:	46bd      	mov	sp, r7
 8015fac:	bd80      	pop	{r7, pc}
 8015fae:	bf00      	nop
 8015fb0:	40020800 	.word	0x40020800

08015fb4 <_ZdaPv>:
 8015fb4:	f000 b820 	b.w	8015ff8 <_ZdlPv>

08015fb8 <__cxa_pure_virtual>:
 8015fb8:	b508      	push	{r3, lr}
 8015fba:	f000 f82b 	bl	8016014 <_ZSt9terminatev>

08015fbe <_Znaj>:
 8015fbe:	f000 b802 	b.w	8015fc6 <_Znwj>

08015fc2 <_ZdlPvj>:
 8015fc2:	f000 b819 	b.w	8015ff8 <_ZdlPv>

08015fc6 <_Znwj>:
 8015fc6:	b510      	push	{r4, lr}
 8015fc8:	2800      	cmp	r0, #0
 8015fca:	bf14      	ite	ne
 8015fcc:	4604      	movne	r4, r0
 8015fce:	2401      	moveq	r4, #1
 8015fd0:	4620      	mov	r0, r4
 8015fd2:	f000 f85b 	bl	801608c <malloc>
 8015fd6:	b930      	cbnz	r0, 8015fe6 <_Znwj+0x20>
 8015fd8:	f000 f806 	bl	8015fe8 <_ZSt15get_new_handlerv>
 8015fdc:	b908      	cbnz	r0, 8015fe2 <_Znwj+0x1c>
 8015fde:	f000 f824 	bl	801602a <abort>
 8015fe2:	4780      	blx	r0
 8015fe4:	e7f4      	b.n	8015fd0 <_Znwj+0xa>
 8015fe6:	bd10      	pop	{r4, pc}

08015fe8 <_ZSt15get_new_handlerv>:
 8015fe8:	4b02      	ldr	r3, [pc, #8]	; (8015ff4 <_ZSt15get_new_handlerv+0xc>)
 8015fea:	6818      	ldr	r0, [r3, #0]
 8015fec:	f3bf 8f5b 	dmb	ish
 8015ff0:	4770      	bx	lr
 8015ff2:	bf00      	nop
 8015ff4:	20000214 	.word	0x20000214

08015ff8 <_ZdlPv>:
 8015ff8:	f000 b850 	b.w	801609c <free>

08015ffc <_ZN10__cxxabiv111__terminateEPFvvE>:
 8015ffc:	b508      	push	{r3, lr}
 8015ffe:	4780      	blx	r0
 8016000:	f000 f813 	bl	801602a <abort>

08016004 <_ZSt13get_terminatev>:
 8016004:	4b02      	ldr	r3, [pc, #8]	; (8016010 <_ZSt13get_terminatev+0xc>)
 8016006:	6818      	ldr	r0, [r3, #0]
 8016008:	f3bf 8f5b 	dmb	ish
 801600c:	4770      	bx	lr
 801600e:	bf00      	nop
 8016010:	20000184 	.word	0x20000184

08016014 <_ZSt9terminatev>:
 8016014:	b508      	push	{r3, lr}
 8016016:	f7ff fff5 	bl	8016004 <_ZSt13get_terminatev>
 801601a:	f7ff ffef 	bl	8015ffc <_ZN10__cxxabiv111__terminateEPFvvE>

0801601e <_ZSt17__throw_bad_allocv>:
 801601e:	b508      	push	{r3, lr}
 8016020:	f000 f803 	bl	801602a <abort>

08016024 <_ZSt20__throw_length_errorPKc>:
 8016024:	b508      	push	{r3, lr}
 8016026:	f000 f800 	bl	801602a <abort>

0801602a <abort>:
 801602a:	b508      	push	{r3, lr}
 801602c:	2006      	movs	r0, #6
 801602e:	f000 f93f 	bl	80162b0 <raise>
 8016032:	2001      	movs	r0, #1
 8016034:	f7f9 f8f6 	bl	800f224 <_exit>

08016038 <__errno>:
 8016038:	4b01      	ldr	r3, [pc, #4]	; (8016040 <__errno+0x8>)
 801603a:	6818      	ldr	r0, [r3, #0]
 801603c:	4770      	bx	lr
 801603e:	bf00      	nop
 8016040:	20000188 	.word	0x20000188

08016044 <__libc_init_array>:
 8016044:	b570      	push	{r4, r5, r6, lr}
 8016046:	4e0d      	ldr	r6, [pc, #52]	; (801607c <__libc_init_array+0x38>)
 8016048:	4c0d      	ldr	r4, [pc, #52]	; (8016080 <__libc_init_array+0x3c>)
 801604a:	1ba4      	subs	r4, r4, r6
 801604c:	10a4      	asrs	r4, r4, #2
 801604e:	2500      	movs	r5, #0
 8016050:	42a5      	cmp	r5, r4
 8016052:	d109      	bne.n	8016068 <__libc_init_array+0x24>
 8016054:	4e0b      	ldr	r6, [pc, #44]	; (8016084 <__libc_init_array+0x40>)
 8016056:	4c0c      	ldr	r4, [pc, #48]	; (8016088 <__libc_init_array+0x44>)
 8016058:	f000 f948 	bl	80162ec <_init>
 801605c:	1ba4      	subs	r4, r4, r6
 801605e:	10a4      	asrs	r4, r4, #2
 8016060:	2500      	movs	r5, #0
 8016062:	42a5      	cmp	r5, r4
 8016064:	d105      	bne.n	8016072 <__libc_init_array+0x2e>
 8016066:	bd70      	pop	{r4, r5, r6, pc}
 8016068:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801606c:	4798      	blx	r3
 801606e:	3501      	adds	r5, #1
 8016070:	e7ee      	b.n	8016050 <__libc_init_array+0xc>
 8016072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8016076:	4798      	blx	r3
 8016078:	3501      	adds	r5, #1
 801607a:	e7f2      	b.n	8016062 <__libc_init_array+0x1e>
 801607c:	08017278 	.word	0x08017278
 8016080:	08017278 	.word	0x08017278
 8016084:	08017278 	.word	0x08017278
 8016088:	08017280 	.word	0x08017280

0801608c <malloc>:
 801608c:	4b02      	ldr	r3, [pc, #8]	; (8016098 <malloc+0xc>)
 801608e:	4601      	mov	r1, r0
 8016090:	6818      	ldr	r0, [r3, #0]
 8016092:	f000 b87b 	b.w	801618c <_malloc_r>
 8016096:	bf00      	nop
 8016098:	20000188 	.word	0x20000188

0801609c <free>:
 801609c:	4b02      	ldr	r3, [pc, #8]	; (80160a8 <free+0xc>)
 801609e:	4601      	mov	r1, r0
 80160a0:	6818      	ldr	r0, [r3, #0]
 80160a2:	f000 b825 	b.w	80160f0 <_free_r>
 80160a6:	bf00      	nop
 80160a8:	20000188 	.word	0x20000188

080160ac <memmove>:
 80160ac:	4288      	cmp	r0, r1
 80160ae:	b510      	push	{r4, lr}
 80160b0:	eb01 0302 	add.w	r3, r1, r2
 80160b4:	d807      	bhi.n	80160c6 <memmove+0x1a>
 80160b6:	1e42      	subs	r2, r0, #1
 80160b8:	4299      	cmp	r1, r3
 80160ba:	d00a      	beq.n	80160d2 <memmove+0x26>
 80160bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80160c0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80160c4:	e7f8      	b.n	80160b8 <memmove+0xc>
 80160c6:	4283      	cmp	r3, r0
 80160c8:	d9f5      	bls.n	80160b6 <memmove+0xa>
 80160ca:	1881      	adds	r1, r0, r2
 80160cc:	1ad2      	subs	r2, r2, r3
 80160ce:	42d3      	cmn	r3, r2
 80160d0:	d100      	bne.n	80160d4 <memmove+0x28>
 80160d2:	bd10      	pop	{r4, pc}
 80160d4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80160d8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80160dc:	e7f7      	b.n	80160ce <memmove+0x22>

080160de <memset>:
 80160de:	4402      	add	r2, r0
 80160e0:	4603      	mov	r3, r0
 80160e2:	4293      	cmp	r3, r2
 80160e4:	d100      	bne.n	80160e8 <memset+0xa>
 80160e6:	4770      	bx	lr
 80160e8:	f803 1b01 	strb.w	r1, [r3], #1
 80160ec:	e7f9      	b.n	80160e2 <memset+0x4>
	...

080160f0 <_free_r>:
 80160f0:	b538      	push	{r3, r4, r5, lr}
 80160f2:	4605      	mov	r5, r0
 80160f4:	2900      	cmp	r1, #0
 80160f6:	d045      	beq.n	8016184 <_free_r+0x94>
 80160f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80160fc:	1f0c      	subs	r4, r1, #4
 80160fe:	2b00      	cmp	r3, #0
 8016100:	bfb8      	it	lt
 8016102:	18e4      	addlt	r4, r4, r3
 8016104:	f000 f8f0 	bl	80162e8 <__malloc_lock>
 8016108:	4a1f      	ldr	r2, [pc, #124]	; (8016188 <_free_r+0x98>)
 801610a:	6813      	ldr	r3, [r2, #0]
 801610c:	4610      	mov	r0, r2
 801610e:	b933      	cbnz	r3, 801611e <_free_r+0x2e>
 8016110:	6063      	str	r3, [r4, #4]
 8016112:	6014      	str	r4, [r2, #0]
 8016114:	4628      	mov	r0, r5
 8016116:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801611a:	f000 b8e6 	b.w	80162ea <__malloc_unlock>
 801611e:	42a3      	cmp	r3, r4
 8016120:	d90c      	bls.n	801613c <_free_r+0x4c>
 8016122:	6821      	ldr	r1, [r4, #0]
 8016124:	1862      	adds	r2, r4, r1
 8016126:	4293      	cmp	r3, r2
 8016128:	bf04      	itt	eq
 801612a:	681a      	ldreq	r2, [r3, #0]
 801612c:	685b      	ldreq	r3, [r3, #4]
 801612e:	6063      	str	r3, [r4, #4]
 8016130:	bf04      	itt	eq
 8016132:	1852      	addeq	r2, r2, r1
 8016134:	6022      	streq	r2, [r4, #0]
 8016136:	6004      	str	r4, [r0, #0]
 8016138:	e7ec      	b.n	8016114 <_free_r+0x24>
 801613a:	4613      	mov	r3, r2
 801613c:	685a      	ldr	r2, [r3, #4]
 801613e:	b10a      	cbz	r2, 8016144 <_free_r+0x54>
 8016140:	42a2      	cmp	r2, r4
 8016142:	d9fa      	bls.n	801613a <_free_r+0x4a>
 8016144:	6819      	ldr	r1, [r3, #0]
 8016146:	1858      	adds	r0, r3, r1
 8016148:	42a0      	cmp	r0, r4
 801614a:	d10b      	bne.n	8016164 <_free_r+0x74>
 801614c:	6820      	ldr	r0, [r4, #0]
 801614e:	4401      	add	r1, r0
 8016150:	1858      	adds	r0, r3, r1
 8016152:	4282      	cmp	r2, r0
 8016154:	6019      	str	r1, [r3, #0]
 8016156:	d1dd      	bne.n	8016114 <_free_r+0x24>
 8016158:	6810      	ldr	r0, [r2, #0]
 801615a:	6852      	ldr	r2, [r2, #4]
 801615c:	605a      	str	r2, [r3, #4]
 801615e:	4401      	add	r1, r0
 8016160:	6019      	str	r1, [r3, #0]
 8016162:	e7d7      	b.n	8016114 <_free_r+0x24>
 8016164:	d902      	bls.n	801616c <_free_r+0x7c>
 8016166:	230c      	movs	r3, #12
 8016168:	602b      	str	r3, [r5, #0]
 801616a:	e7d3      	b.n	8016114 <_free_r+0x24>
 801616c:	6820      	ldr	r0, [r4, #0]
 801616e:	1821      	adds	r1, r4, r0
 8016170:	428a      	cmp	r2, r1
 8016172:	bf04      	itt	eq
 8016174:	6811      	ldreq	r1, [r2, #0]
 8016176:	6852      	ldreq	r2, [r2, #4]
 8016178:	6062      	str	r2, [r4, #4]
 801617a:	bf04      	itt	eq
 801617c:	1809      	addeq	r1, r1, r0
 801617e:	6021      	streq	r1, [r4, #0]
 8016180:	605c      	str	r4, [r3, #4]
 8016182:	e7c7      	b.n	8016114 <_free_r+0x24>
 8016184:	bd38      	pop	{r3, r4, r5, pc}
 8016186:	bf00      	nop
 8016188:	20000218 	.word	0x20000218

0801618c <_malloc_r>:
 801618c:	b570      	push	{r4, r5, r6, lr}
 801618e:	1ccd      	adds	r5, r1, #3
 8016190:	f025 0503 	bic.w	r5, r5, #3
 8016194:	3508      	adds	r5, #8
 8016196:	2d0c      	cmp	r5, #12
 8016198:	bf38      	it	cc
 801619a:	250c      	movcc	r5, #12
 801619c:	2d00      	cmp	r5, #0
 801619e:	4606      	mov	r6, r0
 80161a0:	db01      	blt.n	80161a6 <_malloc_r+0x1a>
 80161a2:	42a9      	cmp	r1, r5
 80161a4:	d903      	bls.n	80161ae <_malloc_r+0x22>
 80161a6:	230c      	movs	r3, #12
 80161a8:	6033      	str	r3, [r6, #0]
 80161aa:	2000      	movs	r0, #0
 80161ac:	bd70      	pop	{r4, r5, r6, pc}
 80161ae:	f000 f89b 	bl	80162e8 <__malloc_lock>
 80161b2:	4a21      	ldr	r2, [pc, #132]	; (8016238 <_malloc_r+0xac>)
 80161b4:	6814      	ldr	r4, [r2, #0]
 80161b6:	4621      	mov	r1, r4
 80161b8:	b991      	cbnz	r1, 80161e0 <_malloc_r+0x54>
 80161ba:	4c20      	ldr	r4, [pc, #128]	; (801623c <_malloc_r+0xb0>)
 80161bc:	6823      	ldr	r3, [r4, #0]
 80161be:	b91b      	cbnz	r3, 80161c8 <_malloc_r+0x3c>
 80161c0:	4630      	mov	r0, r6
 80161c2:	f000 f83d 	bl	8016240 <_sbrk_r>
 80161c6:	6020      	str	r0, [r4, #0]
 80161c8:	4629      	mov	r1, r5
 80161ca:	4630      	mov	r0, r6
 80161cc:	f000 f838 	bl	8016240 <_sbrk_r>
 80161d0:	1c43      	adds	r3, r0, #1
 80161d2:	d124      	bne.n	801621e <_malloc_r+0x92>
 80161d4:	230c      	movs	r3, #12
 80161d6:	6033      	str	r3, [r6, #0]
 80161d8:	4630      	mov	r0, r6
 80161da:	f000 f886 	bl	80162ea <__malloc_unlock>
 80161de:	e7e4      	b.n	80161aa <_malloc_r+0x1e>
 80161e0:	680b      	ldr	r3, [r1, #0]
 80161e2:	1b5b      	subs	r3, r3, r5
 80161e4:	d418      	bmi.n	8016218 <_malloc_r+0x8c>
 80161e6:	2b0b      	cmp	r3, #11
 80161e8:	d90f      	bls.n	801620a <_malloc_r+0x7e>
 80161ea:	600b      	str	r3, [r1, #0]
 80161ec:	50cd      	str	r5, [r1, r3]
 80161ee:	18cc      	adds	r4, r1, r3
 80161f0:	4630      	mov	r0, r6
 80161f2:	f000 f87a 	bl	80162ea <__malloc_unlock>
 80161f6:	f104 000b 	add.w	r0, r4, #11
 80161fa:	1d23      	adds	r3, r4, #4
 80161fc:	f020 0007 	bic.w	r0, r0, #7
 8016200:	1ac3      	subs	r3, r0, r3
 8016202:	d0d3      	beq.n	80161ac <_malloc_r+0x20>
 8016204:	425a      	negs	r2, r3
 8016206:	50e2      	str	r2, [r4, r3]
 8016208:	e7d0      	b.n	80161ac <_malloc_r+0x20>
 801620a:	428c      	cmp	r4, r1
 801620c:	684b      	ldr	r3, [r1, #4]
 801620e:	bf16      	itet	ne
 8016210:	6063      	strne	r3, [r4, #4]
 8016212:	6013      	streq	r3, [r2, #0]
 8016214:	460c      	movne	r4, r1
 8016216:	e7eb      	b.n	80161f0 <_malloc_r+0x64>
 8016218:	460c      	mov	r4, r1
 801621a:	6849      	ldr	r1, [r1, #4]
 801621c:	e7cc      	b.n	80161b8 <_malloc_r+0x2c>
 801621e:	1cc4      	adds	r4, r0, #3
 8016220:	f024 0403 	bic.w	r4, r4, #3
 8016224:	42a0      	cmp	r0, r4
 8016226:	d005      	beq.n	8016234 <_malloc_r+0xa8>
 8016228:	1a21      	subs	r1, r4, r0
 801622a:	4630      	mov	r0, r6
 801622c:	f000 f808 	bl	8016240 <_sbrk_r>
 8016230:	3001      	adds	r0, #1
 8016232:	d0cf      	beq.n	80161d4 <_malloc_r+0x48>
 8016234:	6025      	str	r5, [r4, #0]
 8016236:	e7db      	b.n	80161f0 <_malloc_r+0x64>
 8016238:	20000218 	.word	0x20000218
 801623c:	2000021c 	.word	0x2000021c

08016240 <_sbrk_r>:
 8016240:	b538      	push	{r3, r4, r5, lr}
 8016242:	4c06      	ldr	r4, [pc, #24]	; (801625c <_sbrk_r+0x1c>)
 8016244:	2300      	movs	r3, #0
 8016246:	4605      	mov	r5, r0
 8016248:	4608      	mov	r0, r1
 801624a:	6023      	str	r3, [r4, #0]
 801624c:	f7f8 fff4 	bl	800f238 <_sbrk>
 8016250:	1c43      	adds	r3, r0, #1
 8016252:	d102      	bne.n	801625a <_sbrk_r+0x1a>
 8016254:	6823      	ldr	r3, [r4, #0]
 8016256:	b103      	cbz	r3, 801625a <_sbrk_r+0x1a>
 8016258:	602b      	str	r3, [r5, #0]
 801625a:	bd38      	pop	{r3, r4, r5, pc}
 801625c:	20000a3c 	.word	0x20000a3c

08016260 <_raise_r>:
 8016260:	291f      	cmp	r1, #31
 8016262:	b538      	push	{r3, r4, r5, lr}
 8016264:	4604      	mov	r4, r0
 8016266:	460d      	mov	r5, r1
 8016268:	d904      	bls.n	8016274 <_raise_r+0x14>
 801626a:	2316      	movs	r3, #22
 801626c:	6003      	str	r3, [r0, #0]
 801626e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016272:	bd38      	pop	{r3, r4, r5, pc}
 8016274:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8016276:	b112      	cbz	r2, 801627e <_raise_r+0x1e>
 8016278:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801627c:	b94b      	cbnz	r3, 8016292 <_raise_r+0x32>
 801627e:	4620      	mov	r0, r4
 8016280:	f000 f830 	bl	80162e4 <_getpid_r>
 8016284:	462a      	mov	r2, r5
 8016286:	4601      	mov	r1, r0
 8016288:	4620      	mov	r0, r4
 801628a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801628e:	f000 b817 	b.w	80162c0 <_kill_r>
 8016292:	2b01      	cmp	r3, #1
 8016294:	d00a      	beq.n	80162ac <_raise_r+0x4c>
 8016296:	1c59      	adds	r1, r3, #1
 8016298:	d103      	bne.n	80162a2 <_raise_r+0x42>
 801629a:	2316      	movs	r3, #22
 801629c:	6003      	str	r3, [r0, #0]
 801629e:	2001      	movs	r0, #1
 80162a0:	e7e7      	b.n	8016272 <_raise_r+0x12>
 80162a2:	2400      	movs	r4, #0
 80162a4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80162a8:	4628      	mov	r0, r5
 80162aa:	4798      	blx	r3
 80162ac:	2000      	movs	r0, #0
 80162ae:	e7e0      	b.n	8016272 <_raise_r+0x12>

080162b0 <raise>:
 80162b0:	4b02      	ldr	r3, [pc, #8]	; (80162bc <raise+0xc>)
 80162b2:	4601      	mov	r1, r0
 80162b4:	6818      	ldr	r0, [r3, #0]
 80162b6:	f7ff bfd3 	b.w	8016260 <_raise_r>
 80162ba:	bf00      	nop
 80162bc:	20000188 	.word	0x20000188

080162c0 <_kill_r>:
 80162c0:	b538      	push	{r3, r4, r5, lr}
 80162c2:	4c07      	ldr	r4, [pc, #28]	; (80162e0 <_kill_r+0x20>)
 80162c4:	2300      	movs	r3, #0
 80162c6:	4605      	mov	r5, r0
 80162c8:	4608      	mov	r0, r1
 80162ca:	4611      	mov	r1, r2
 80162cc:	6023      	str	r3, [r4, #0]
 80162ce:	f7f8 ff99 	bl	800f204 <_kill>
 80162d2:	1c43      	adds	r3, r0, #1
 80162d4:	d102      	bne.n	80162dc <_kill_r+0x1c>
 80162d6:	6823      	ldr	r3, [r4, #0]
 80162d8:	b103      	cbz	r3, 80162dc <_kill_r+0x1c>
 80162da:	602b      	str	r3, [r5, #0]
 80162dc:	bd38      	pop	{r3, r4, r5, pc}
 80162de:	bf00      	nop
 80162e0:	20000a3c 	.word	0x20000a3c

080162e4 <_getpid_r>:
 80162e4:	f7f8 bf86 	b.w	800f1f4 <_getpid>

080162e8 <__malloc_lock>:
 80162e8:	4770      	bx	lr

080162ea <__malloc_unlock>:
 80162ea:	4770      	bx	lr

080162ec <_init>:
 80162ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80162ee:	bf00      	nop
 80162f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80162f2:	bc08      	pop	{r3}
 80162f4:	469e      	mov	lr, r3
 80162f6:	4770      	bx	lr

080162f8 <_fini>:
 80162f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80162fa:	bf00      	nop
 80162fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80162fe:	bc08      	pop	{r3}
 8016300:	469e      	mov	lr, r3
 8016302:	4770      	bx	lr
