
vpet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000db60  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  0800dcf8  0800dcf8  0001dcf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800de90  0800de90  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800de90  0800de90  0001de90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800de98  0800de98  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800de98  0800de98  0001de98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800de9c  0800de9c  0001de9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800dea0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000814  20000094  0800df34  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008a8  0800df34  000208a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004cb58  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000076af  00000000  00000000  0006cc1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000029f8  00000000  00000000  000742d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000027d8  00000000  00000000  00076cc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000209ad  00000000  00000000  000794a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001fd53  00000000  00000000  00099e4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b6361  00000000  00000000  000b9ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016ff01  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bd40  00000000  00000000  0016ff7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000094 	.word	0x20000094
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800dce0 	.word	0x0800dce0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000098 	.word	0x20000098
 80001d4:	0800dce0 	.word	0x0800dce0

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <_ZN4tama5Vec2dplES0_>:
//

#include "Vec2d.h"

tama::Vec2d tama::Vec2d::operator+(tama::Vec2d delta)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af00      	add	r7, sp, #0
 80004de:	60f8      	str	r0, [r7, #12]
 80004e0:	60b9      	str	r1, [r7, #8]
 80004e2:	4639      	mov	r1, r7
 80004e4:	e881 000c 	stmia.w	r1, {r2, r3}
    return Vec2d(this->x + delta.x, this->y + delta.y);
 80004e8:	68bb      	ldr	r3, [r7, #8]
 80004ea:	681a      	ldr	r2, [r3, #0]
 80004ec:	683b      	ldr	r3, [r7, #0]
 80004ee:	18d1      	adds	r1, r2, r3
 80004f0:	68bb      	ldr	r3, [r7, #8]
 80004f2:	685a      	ldr	r2, [r3, #4]
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	4413      	add	r3, r2
 80004f8:	461a      	mov	r2, r3
 80004fa:	68f8      	ldr	r0, [r7, #12]
 80004fc:	f000 f804 	bl	8000508 <_ZN4tama5Vec2dC1Eii>
}
 8000500:	68f8      	ldr	r0, [r7, #12]
 8000502:	3710      	adds	r7, #16
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}

08000508 <_ZN4tama5Vec2dC1Eii>:

tama::Vec2d::Vec2d(int i, int j)
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	60f8      	str	r0, [r7, #12]
 8000510:	60b9      	str	r1, [r7, #8]
 8000512:	607a      	str	r2, [r7, #4]
{
    x = i;
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	68ba      	ldr	r2, [r7, #8]
 8000518:	601a      	str	r2, [r3, #0]
    y = j;
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	687a      	ldr	r2, [r7, #4]
 800051e:	605a      	str	r2, [r3, #4]
}
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	4618      	mov	r0, r3
 8000524:	3714      	adds	r7, #20
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr

0800052e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>:
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 800052e:	b480      	push	{r7}
 8000530:	b083      	sub	sp, #12
 8000532:	af00      	add	r7, sp, #0
 8000534:	6078      	str	r0, [r7, #4]
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	685b      	ldr	r3, [r3, #4]
 800053a:	1c5a      	adds	r2, r3, #1
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	605a      	str	r2, [r3, #4]
 8000540:	bf00      	nop
 8000542:	370c      	adds	r7, #12
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr

0800054c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	6039      	str	r1, [r7, #0]
      : _M_pi(__r._M_pi)
 8000556:	683b      	ldr	r3, [r7, #0]
 8000558:	681a      	ldr	r2, [r3, #0]
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	601a      	str	r2, [r3, #0]
      {
	if (_M_pi != 0)
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	2b00      	cmp	r3, #0
 8000564:	d004      	beq.n	8000570 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0x24>
	  _M_pi->_M_add_ref_copy();
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4618      	mov	r0, r3
 800056c:	f7ff ffdf 	bl	800052e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>
      }
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	4618      	mov	r0, r3
 8000574:	3708      	adds	r7, #8
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}

0800057a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
 800057a:	b580      	push	{r7, lr}
 800057c:	b082      	sub	sp, #8
 800057e:	af00      	add	r7, sp, #0
 8000580:	6078      	str	r0, [r7, #4]
      if (--_M_use_count == 0)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	685b      	ldr	r3, [r3, #4]
 8000586:	1e5a      	subs	r2, r3, #1
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	685b      	ldr	r3, [r3, #4]
 8000590:	2b00      	cmp	r3, #0
 8000592:	bf0c      	ite	eq
 8000594:	2301      	moveq	r3, #1
 8000596:	2300      	movne	r3, #0
 8000598:	b2db      	uxtb	r3, r3
 800059a:	2b00      	cmp	r3, #0
 800059c:	d019      	beq.n	80005d2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
          _M_dispose();
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	3308      	adds	r3, #8
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	6878      	ldr	r0, [r7, #4]
 80005a8:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	689b      	ldr	r3, [r3, #8]
 80005ae:	1e5a      	subs	r2, r3, #1
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	689b      	ldr	r3, [r3, #8]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	bf0c      	ite	eq
 80005bc:	2301      	moveq	r3, #1
 80005be:	2300      	movne	r3, #0
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d005      	beq.n	80005d2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
            _M_destroy();
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	330c      	adds	r3, #12
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	6878      	ldr	r0, [r7, #4]
 80005d0:	4798      	blx	r3
    }
 80005d2:	bf00      	nop
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}

080005da <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EEaSERKS4_>:
      _M_get() const noexcept
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
    };

  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
 80005da:	b580      	push	{r7, lr}
 80005dc:	b082      	sub	sp, #8
 80005de:	af00      	add	r7, sp, #0
 80005e0:	6078      	str	r0, [r7, #4]
 80005e2:	6039      	str	r1, [r7, #0]
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	681a      	ldr	r2, [r3, #0]
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	1d1a      	adds	r2, r3, #4
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	3304      	adds	r3, #4
 80005f4:	4619      	mov	r1, r3
 80005f6:	4610      	mov	r0, r2
 80005f8:	f000 f982 	bl	8000900 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	4618      	mov	r0, r3
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}

08000606 <_ZNSt10shared_ptrIN4tama7TextureEEaSERKS2_>:
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
 8000606:	b580      	push	{r7, lr}
 8000608:	b082      	sub	sp, #8
 800060a:	af00      	add	r7, sp, #0
 800060c:	6078      	str	r0, [r7, #4]
 800060e:	6039      	str	r1, [r7, #0]
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	683a      	ldr	r2, [r7, #0]
 8000614:	4611      	mov	r1, r2
 8000616:	4618      	mov	r0, r3
 8000618:	f7ff ffdf 	bl	80005da <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EEaSERKS4_>
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	4618      	mov	r0, r3
 8000620:	3708      	adds	r7, #8
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}

08000626 <_ZN4tama6Sprite10setTextureESt10shared_ptrINS_7TextureEE>:
//

#include "Sprite.h"

void tama::Sprite::setTexture(std::shared_ptr<tama::Texture> texture)
{
 8000626:	b580      	push	{r7, lr}
 8000628:	b082      	sub	sp, #8
 800062a:	af00      	add	r7, sp, #0
 800062c:	6078      	str	r0, [r7, #4]
 800062e:	6039      	str	r1, [r7, #0]
    this->texture = texture;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	3304      	adds	r3, #4
 8000634:	6839      	ldr	r1, [r7, #0]
 8000636:	4618      	mov	r0, r3
 8000638:	f7ff ffe5 	bl	8000606 <_ZNSt10shared_ptrIN4tama7TextureEEaSERKS2_>
}
 800063c:	bf00      	nop
 800063e:	3708      	adds	r7, #8
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}

08000644 <_ZN4tama6Sprite11setPositionENS_5Vec2dE>:

void tama::Sprite::setPosition(tama::Vec2d position)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	60f8      	str	r0, [r7, #12]
 800064c:	1d3b      	adds	r3, r7, #4
 800064e:	e883 0006 	stmia.w	r3, {r1, r2}
    this->position = position;
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	330c      	adds	r3, #12
 8000656:	1d3a      	adds	r2, r7, #4
 8000658:	e892 0003 	ldmia.w	r2, {r0, r1}
 800065c:	e883 0003 	stmia.w	r3, {r0, r1}
    notifyObserver();
 8000660:	68f8      	ldr	r0, [r7, #12]
 8000662:	f000 f8c8 	bl	80007f6 <_ZN4tama6Sprite14notifyObserverEv>
}
 8000666:	bf00      	nop
 8000668:	3710      	adds	r7, #16
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}

0800066e <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 800066e:	b580      	push	{r7, lr}
 8000670:	b082      	sub	sp, #8
 8000672:	af00      	add	r7, sp, #0
 8000674:	6078      	str	r0, [r7, #4]
 8000676:	6039      	str	r1, [r7, #0]
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	681a      	ldr	r2, [r3, #0]
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	1d1a      	adds	r2, r3, #4
 8000684:	683b      	ldr	r3, [r7, #0]
 8000686:	3304      	adds	r3, #4
 8000688:	4619      	mov	r1, r3
 800068a:	4610      	mov	r0, r2
 800068c:	f7ff ff5e 	bl	800054c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	4618      	mov	r0, r3
 8000694:	3708      	adds	r7, #8
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}

0800069a <_ZNSt10shared_ptrIN4tama7TextureEEC1ERKS2_>:
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
 800069a:	b580      	push	{r7, lr}
 800069c:	b082      	sub	sp, #8
 800069e:	af00      	add	r7, sp, #0
 80006a0:	6078      	str	r0, [r7, #4]
 80006a2:	6039      	str	r1, [r7, #0]
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	683a      	ldr	r2, [r7, #0]
 80006a8:	4611      	mov	r1, r2
 80006aa:	4618      	mov	r0, r3
 80006ac:	f7ff ffdf 	bl	800066e <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	4618      	mov	r0, r3
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}

080006ba <_ZN4tama6Sprite10getTextureEv>:

std::shared_ptr<tama::Texture> tama::Sprite::getTexture()
{
 80006ba:	b580      	push	{r7, lr}
 80006bc:	b082      	sub	sp, #8
 80006be:	af00      	add	r7, sp, #0
 80006c0:	6078      	str	r0, [r7, #4]
 80006c2:	6039      	str	r1, [r7, #0]
    return texture;
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	3304      	adds	r3, #4
 80006c8:	4619      	mov	r1, r3
 80006ca:	6878      	ldr	r0, [r7, #4]
 80006cc:	f7ff ffe5 	bl	800069a <_ZNSt10shared_ptrIN4tama7TextureEEC1ERKS2_>
}
 80006d0:	6878      	ldr	r0, [r7, #4]
 80006d2:	3708      	adds	r7, #8
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <_ZN4tama6Sprite11getPositionEv>:

tama::Vec2d tama::Sprite::getPosition()
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
 80006e0:	6039      	str	r1, [r7, #0]
    return position;
 80006e2:	687a      	ldr	r2, [r7, #4]
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	330c      	adds	r3, #12
 80006e8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80006ec:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80006f0:	6878      	ldr	r0, [r7, #4]
 80006f2:	370c      	adds	r7, #12
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr

080006fc <_ZN4tama6Sprite4moveENS_5Vec2dE>:

void tama::Sprite::move(tama::Vec2d delta)
{
 80006fc:	b590      	push	{r4, r7, lr}
 80006fe:	b087      	sub	sp, #28
 8000700:	af00      	add	r7, sp, #0
 8000702:	6178      	str	r0, [r7, #20]
 8000704:	f107 030c 	add.w	r3, r7, #12
 8000708:	e883 0006 	stmia.w	r3, {r1, r2}
    position = position + delta;
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	f103 010c 	add.w	r1, r3, #12
 8000712:	697c      	ldr	r4, [r7, #20]
 8000714:	4638      	mov	r0, r7
 8000716:	f107 030c 	add.w	r3, r7, #12
 800071a:	cb0c      	ldmia	r3, {r2, r3}
 800071c:	f7ff fedc 	bl	80004d8 <_ZN4tama5Vec2dplES0_>
 8000720:	f104 030c 	add.w	r3, r4, #12
 8000724:	463a      	mov	r2, r7
 8000726:	e892 0003 	ldmia.w	r2, {r0, r1}
 800072a:	e883 0003 	stmia.w	r3, {r0, r1}
    notifyObserver();
 800072e:	6978      	ldr	r0, [r7, #20]
 8000730:	f000 f861 	bl	80007f6 <_ZN4tama6Sprite14notifyObserverEv>
}
 8000734:	bf00      	nop
 8000736:	371c      	adds	r7, #28
 8000738:	46bd      	mov	sp, r7
 800073a:	bd90      	pop	{r4, r7, pc}

0800073c <_ZN4tama6Sprite4hideEv>:

void tama::Sprite::hide()
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
    visible = false;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	2200      	movs	r2, #0
 8000748:	751a      	strb	r2, [r3, #20]
    notifyObserver();
 800074a:	6878      	ldr	r0, [r7, #4]
 800074c:	f000 f853 	bl	80007f6 <_ZN4tama6Sprite14notifyObserverEv>
}
 8000750:	bf00      	nop
 8000752:	3708      	adds	r7, #8
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}

08000758 <_ZN4tama6Sprite4showEv>:

void tama::Sprite::show()
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
    visible = true;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	2201      	movs	r2, #1
 8000764:	751a      	strb	r2, [r3, #20]
    notifyObserver();
 8000766:	6878      	ldr	r0, [r7, #4]
 8000768:	f000 f845 	bl	80007f6 <_ZN4tama6Sprite14notifyObserverEv>
}
 800076c:	bf00      	nop
 800076e:	3708      	adds	r7, #8
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}

08000774 <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEaSERKS4_>:
    class __shared_ptr
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	6039      	str	r1, [r7, #0]
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	681a      	ldr	r2, [r3, #0]
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	1d1a      	adds	r2, r3, #4
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	3304      	adds	r3, #4
 800078e:	4619      	mov	r1, r3
 8000790:	4610      	mov	r0, r2
 8000792:	f000 f8b5 	bl	8000900 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	4618      	mov	r0, r3
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}

080007a0 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEaSERKS2_>:
    class shared_ptr : public __shared_ptr<_Tp>
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	6039      	str	r1, [r7, #0]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	683a      	ldr	r2, [r7, #0]
 80007ae:	4611      	mov	r1, r2
 80007b0:	4618      	mov	r0, r3
 80007b2:	f7ff ffdf 	bl	8000774 <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEaSERKS4_>
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	4618      	mov	r0, r3
 80007ba:	3708      	adds	r7, #8
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}

080007c0 <_ZN4tama6Sprite17setChangeObserverESt10shared_ptrINS_14ChangeObserverEE>:

void tama::Sprite::setChangeObserver(std::shared_ptr<tama::ChangeObserver> observer)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	6039      	str	r1, [r7, #0]
    this->observer = observer;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	3318      	adds	r3, #24
 80007ce:	6839      	ldr	r1, [r7, #0]
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff ffe5 	bl	80007a0 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEaSERKS2_>
}
 80007d6:	bf00      	nop
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}

080007de <_ZN4tama6Sprite9isVisibleEv>:

bool tama::Sprite::isVisible()
{
 80007de:	b480      	push	{r7}
 80007e0:	b083      	sub	sp, #12
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	6078      	str	r0, [r7, #4]
    return visible;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	7d1b      	ldrb	r3, [r3, #20]
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	370c      	adds	r7, #12
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr

080007f6 <_ZN4tama6Sprite14notifyObserverEv>:

void tama::Sprite::notifyObserver()
{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	b082      	sub	sp, #8
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	6078      	str	r0, [r7, #4]
    if (observer != nullptr)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	3318      	adds	r3, #24
 8000802:	2100      	movs	r1, #0
 8000804:	4618      	mov	r0, r3
 8000806:	f000 f8b1 	bl	800096c <_ZStneIN4tama14ChangeObserverEEbRKSt10shared_ptrIT_EDn>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d009      	beq.n	8000824 <_ZN4tama6Sprite14notifyObserverEv+0x2e>
    {
        observer->onChange();
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	3318      	adds	r3, #24
 8000814:	4618      	mov	r0, r3
 8000816:	f000 f8b7 	bl	8000988 <_ZNKSt19__shared_ptr_accessIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800081a:	4602      	mov	r2, r0
 800081c:	6813      	ldr	r3, [r2, #0]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4610      	mov	r0, r2
 8000822:	4798      	blx	r3
    }
}
 8000824:	bf00      	nop
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}

0800082c <_ZN4tama8DrawableC1Ev>:
#include "../../../common/observers/ChangeObserver.h"
#include "texture.h"

namespace tama
{
    class Drawable
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
 8000834:	4a04      	ldr	r2, [pc, #16]	; (8000848 <_ZN4tama8DrawableC1Ev+0x1c>)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	4618      	mov	r0, r3
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr
 8000848:	0800dd4c 	.word	0x0800dd4c

0800084c <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	3304      	adds	r3, #4
 8000858:	4618      	mov	r0, r3
 800085a:	f000 f875 	bl	8000948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4618      	mov	r0, r3
 8000862:	3708      	adds	r7, #8
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}

08000868 <_ZNSt10shared_ptrIN4tama14ChangeObserverEED1Ev>:
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff ffea 	bl	800084c <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	4618      	mov	r0, r3
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
	...

08000884 <_ZN4tama6SpriteC1ERKSt10shared_ptrINS_7TextureEERKNS_5Vec2dE>:

tama::Sprite::Sprite(const std::shared_ptr<Texture> &texture, const tama::Vec2d &position) : texture(texture),
 8000884:	b590      	push	{r4, r7, lr}
 8000886:	b087      	sub	sp, #28
 8000888:	af00      	add	r7, sp, #0
 800088a:	60f8      	str	r0, [r7, #12]
 800088c:	60b9      	str	r1, [r7, #8]
 800088e:	607a      	str	r2, [r7, #4]
                                                                                             position(position)
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	4618      	mov	r0, r3
 8000894:	f7ff ffca 	bl	800082c <_ZN4tama8DrawableC1Ev>
 8000898:	4a18      	ldr	r2, [pc, #96]	; (80008fc <_ZN4tama6SpriteC1ERKSt10shared_ptrINS_7TextureEERKNS_5Vec2dE+0x78>)
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	3304      	adds	r3, #4
 80008a2:	68b9      	ldr	r1, [r7, #8]
 80008a4:	4618      	mov	r0, r3
 80008a6:	f7ff fef8 	bl	800069a <_ZNSt10shared_ptrIN4tama7TextureEEC1ERKS2_>
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	687a      	ldr	r2, [r7, #4]
 80008ae:	330c      	adds	r3, #12
 80008b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008b4:	e883 0003 	stmia.w	r3, {r0, r1}
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	3318      	adds	r3, #24
 80008bc:	4618      	mov	r0, r3
 80008be:	f000 f86f 	bl	80009a0 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEC1Ev>
{
    observer = nullptr;
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	f103 0418 	add.w	r4, r3, #24
 80008c8:	f107 0310 	add.w	r3, r7, #16
 80008cc:	2100      	movs	r1, #0
 80008ce:	4618      	mov	r0, r3
 80008d0:	f000 f873 	bl	80009ba <_ZNSt10shared_ptrIN4tama14ChangeObserverEEC1EDn>
 80008d4:	f107 0310 	add.w	r3, r7, #16
 80008d8:	4619      	mov	r1, r3
 80008da:	4620      	mov	r0, r4
 80008dc:	f000 f885 	bl	80009ea <_ZNSt10shared_ptrIN4tama14ChangeObserverEEaSEOS2_>
 80008e0:	f107 0310 	add.w	r3, r7, #16
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff ffbf 	bl	8000868 <_ZNSt10shared_ptrIN4tama14ChangeObserverEED1Ev>
    visible = true;
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	2201      	movs	r2, #1
 80008ee:	751a      	strb	r2, [r3, #20]
}
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	4618      	mov	r0, r3
 80008f4:	371c      	adds	r7, #28
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd90      	pop	{r4, r7, pc}
 80008fa:	bf00      	nop
 80008fc:	0800dd20 	.word	0x0800dd20

08000900 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>:
      operator=(const __shared_count& __r) noexcept
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	6039      	str	r1, [r7, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	60fb      	str	r3, [r7, #12]
	if (__tmp != _M_pi)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	68fa      	ldr	r2, [r7, #12]
 8000916:	429a      	cmp	r2, r3
 8000918:	d011      	beq.n	800093e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x3e>
	    if (__tmp != 0)
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d002      	beq.n	8000926 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x26>
	      __tmp->_M_add_ref_copy();
 8000920:	68f8      	ldr	r0, [r7, #12]
 8000922:	f7ff fe04 	bl	800052e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>
	    if (_M_pi != 0)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d004      	beq.n	8000938 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x38>
	      _M_pi->_M_release();
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4618      	mov	r0, r3
 8000934:	f7ff fe21 	bl	800057a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	68fa      	ldr	r2, [r7, #12]
 800093c:	601a      	str	r2, [r3, #0]
	return *this;
 800093e:	687b      	ldr	r3, [r7, #4]
      }
 8000940:	4618      	mov	r0, r3
 8000942:	3710      	adds	r7, #16
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}

08000948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
	if (_M_pi != nullptr)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d004      	beq.n	8000962 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1a>
	  _M_pi->_M_release();
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff fe0c 	bl	800057a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	4618      	mov	r0, r3
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}

0800096c <_ZStneIN4tama14ChangeObserverEEbRKSt10shared_ptrIT_EDn>:
    operator!=(const shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept
    { return __a.get() != __b.get(); }

  template<typename _Tp>
    inline bool
    operator!=(const shared_ptr<_Tp>& __a, nullptr_t) noexcept
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
 8000974:	6039      	str	r1, [r7, #0]
    { return (bool)__a; }
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4618      	mov	r0, r3
 800097a:	f000 f849 	bl	8000a10 <_ZNKSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEcvbEv>
 800097e:	4603      	mov	r3, r0
 8000980:	4618      	mov	r0, r3
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}

08000988 <_ZNKSt19__shared_ptr_accessIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
	return _M_get();
 8000990:	6878      	ldr	r0, [r7, #4]
 8000992:	f000 f84e 	bl	8000a32 <_ZNKSt19__shared_ptr_accessIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 8000996:	4603      	mov	r3, r0
      }
 8000998:	4618      	mov	r0, r3
 800099a:	3708      	adds	r7, #8
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}

080009a0 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEC1Ev>:
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	4618      	mov	r0, r3
 80009ac:	f000 f84d 	bl	8000a4a <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	4618      	mov	r0, r3
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}

080009ba <_ZNSt10shared_ptrIN4tama14ChangeObserverEEC1EDn>:
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }
 80009ba:	b580      	push	{r7, lr}
 80009bc:	b082      	sub	sp, #8
 80009be:	af00      	add	r7, sp, #0
 80009c0:	6078      	str	r0, [r7, #4]
 80009c2:	6039      	str	r1, [r7, #0]
 80009c4:	6878      	ldr	r0, [r7, #4]
 80009c6:	f7ff ffeb 	bl	80009a0 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEC1Ev>
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4618      	mov	r0, r3
 80009ce:	3708      	adds	r7, #8
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <_ZSt4moveIRSt10shared_ptrIN4tama14ChangeObserverEEEONSt16remove_referenceIT_E4typeEOS6_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	4618      	mov	r0, r3
 80009e0:	370c      	adds	r7, #12
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr

080009ea <_ZNSt10shared_ptrIN4tama14ChangeObserverEEaSEOS2_>:
      operator=(shared_ptr&& __r) noexcept
 80009ea:	b590      	push	{r4, r7, lr}
 80009ec:	b083      	sub	sp, #12
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	6078      	str	r0, [r7, #4]
 80009f2:	6039      	str	r1, [r7, #0]
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
 80009f4:	687c      	ldr	r4, [r7, #4]
 80009f6:	6838      	ldr	r0, [r7, #0]
 80009f8:	f7ff ffec 	bl	80009d4 <_ZSt4moveIRSt10shared_ptrIN4tama14ChangeObserverEEEONSt16remove_referenceIT_E4typeEOS6_>
 80009fc:	4603      	mov	r3, r0
 80009fe:	4619      	mov	r1, r3
 8000a00:	4620      	mov	r0, r4
 8000a02:	f000 f83e 	bl	8000a82 <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_>
	return *this;
 8000a06:	687b      	ldr	r3, [r7, #4]
      }
 8000a08:	4618      	mov	r0, r3
 8000a0a:	370c      	adds	r7, #12
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd90      	pop	{r4, r7, pc}

08000a10 <_ZNKSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEcvbEv>:

      element_type*
      get() const noexcept
      { return _M_ptr; }

      explicit operator bool() const // never throws
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
      { return _M_ptr == 0 ? false : true; }
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	bf14      	ite	ne
 8000a20:	2301      	movne	r3, #1
 8000a22:	2300      	moveq	r3, #0
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	4618      	mov	r0, r3
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr

08000a32 <_ZNKSt19__shared_ptr_accessIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 8000a32:	b580      	push	{r7, lr}
 8000a34:	b082      	sub	sp, #8
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 8000a3a:	6878      	ldr	r0, [r7, #4]
 8000a3c:	f000 f840 	bl	8000ac0 <_ZNKSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EE3getEv>
 8000a40:	4603      	mov	r3, r0
 8000a42:	4618      	mov	r0, r3
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_ptr() noexcept
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	b082      	sub	sp, #8
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
      : _M_ptr(0), _M_refcount()
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	3304      	adds	r3, #4
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f000 f83b 	bl	8000ad8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
      { }
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4618      	mov	r0, r3
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <_ZSt4moveIRSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	4618      	mov	r0, r3
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr

08000a82 <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_>:
      operator=(__shared_ptr&& __r) noexcept
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b084      	sub	sp, #16
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	6078      	str	r0, [r7, #4]
 8000a8a:	6039      	str	r1, [r7, #0]
	__shared_ptr(std::move(__r)).swap(*this);
 8000a8c:	6838      	ldr	r0, [r7, #0]
 8000a8e:	f7ff ffed 	bl	8000a6c <_ZSt4moveIRSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS8_>
 8000a92:	4602      	mov	r2, r0
 8000a94:	f107 0308 	add.w	r3, r7, #8
 8000a98:	4611      	mov	r1, r2
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f000 f82a 	bl	8000af4 <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEC1EOS4_>
 8000aa0:	f107 0308 	add.w	r3, r7, #8
 8000aa4:	6879      	ldr	r1, [r7, #4]
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f000 f842 	bl	8000b30 <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EE4swapERS4_>
 8000aac:	f107 0308 	add.w	r3, r7, #8
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f7ff fecb 	bl	800084c <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EED1Ev>
	return *this;
 8000ab6:	687b      	ldr	r3, [r7, #4]
      }
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3710      	adds	r7, #16
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <_ZNKSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4618      	mov	r0, r3
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_count() noexcept : _M_pi(0)
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
      { }
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4618      	mov	r0, r3
 8000aea:	370c      	adds	r7, #12
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEC1EOS4_>:
      __shared_ptr(__shared_ptr&& __r) noexcept
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
 8000afc:	6039      	str	r1, [r7, #0]
      : _M_ptr(__r._M_ptr), _M_refcount()
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	3304      	adds	r3, #4
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f7ff ffe4 	bl	8000ad8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	_M_refcount._M_swap(__r._M_refcount);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	1d1a      	adds	r2, r3, #4
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	3304      	adds	r3, #4
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	f000 f81f 	bl	8000b5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	__r._M_ptr = 0;
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
      }
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3708      	adds	r7, #8
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EE4swapERS4_>:
      long
      use_count() const noexcept
      { return _M_refcount._M_get_use_count(); }

      void
      swap(__shared_ptr<_Tp, _Lp>& __other) noexcept
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	6039      	str	r1, [r7, #0]
      {
	std::swap(_M_ptr, __other._M_ptr);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	683a      	ldr	r2, [r7, #0]
 8000b3e:	4611      	mov	r1, r2
 8000b40:	4618      	mov	r0, r3
 8000b42:	f000 f82c 	bl	8000b9e <_ZSt4swapIPN4tama14ChangeObserverEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS7_ESt18is_move_assignableIS7_EEE5valueEvE4typeERS7_SH_>
	_M_refcount._M_swap(__other._M_refcount);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	1d1a      	adds	r2, r3, #4
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	3304      	adds	r3, #4
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4610      	mov	r0, r2
 8000b52:	f000 f804 	bl	8000b5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
      }
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>:
      _M_swap(__shared_count& __r) noexcept
 8000b5e:	b480      	push	{r7}
 8000b60:	b085      	sub	sp, #20
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	6078      	str	r0, [r7, #4]
 8000b66:	6039      	str	r1, [r7, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	60fb      	str	r3, [r7, #12]
	__r._M_pi = _M_pi;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	601a      	str	r2, [r3, #0]
	_M_pi = __tmp;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	68fa      	ldr	r2, [r7, #12]
 8000b7a:	601a      	str	r2, [r3, #0]
      }
 8000b7c:	bf00      	nop
 8000b7e:	3714      	adds	r7, #20
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr

08000b88 <_ZSt4moveIRPN4tama14ChangeObserverEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	4618      	mov	r0, r3
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr

08000b9e <_ZSt4swapIPN4tama14ChangeObserverEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS7_ESt18is_move_assignableIS7_EEE5valueEvE4typeERS7_SH_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b084      	sub	sp, #16
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
 8000ba6:	6039      	str	r1, [r7, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8000ba8:	6878      	ldr	r0, [r7, #4]
 8000baa:	f7ff ffed 	bl	8000b88 <_ZSt4moveIRPN4tama14ChangeObserverEEONSt16remove_referenceIT_E4typeEOS5_>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8000bb4:	6838      	ldr	r0, [r7, #0]
 8000bb6:	f7ff ffe7 	bl	8000b88 <_ZSt4moveIRPN4tama14ChangeObserverEEONSt16remove_referenceIT_E4typeEOS5_>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8000bc2:	f107 030c 	add.w	r3, r7, #12
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f7ff ffde 	bl	8000b88 <_ZSt4moveIRPN4tama14ChangeObserverEEONSt16remove_referenceIT_E4typeEOS5_>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	601a      	str	r2, [r3, #0]
    }
 8000bd4:	bf00      	nop
 8000bd6:	3710      	adds	r7, #16
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	6039      	str	r1, [r7, #0]
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	4618      	mov	r0, r3
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <_ZN4tama7TextureC1Ejj>:
    {
        unsigned width;
        unsigned height;
        PixelColor ** data;

        Texture(unsigned int width, unsigned int height) : width(width), height(height)
 8000bf4:	b590      	push	{r4, r7, lr}
 8000bf6:	b087      	sub	sp, #28
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	60f8      	str	r0, [r7, #12]
 8000bfc:	60b9      	str	r1, [r7, #8]
 8000bfe:	607a      	str	r2, [r7, #4]
 8000c00:	4a22      	ldr	r2, [pc, #136]	; (8000c8c <_ZN4tama7TextureC1Ejj+0x98>)
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	68ba      	ldr	r2, [r7, #8]
 8000c0a:	605a      	str	r2, [r3, #4]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	687a      	ldr	r2, [r7, #4]
 8000c10:	609a      	str	r2, [r3, #8]
        {
            data = new PixelColor*[height];
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4a1e      	ldr	r2, [pc, #120]	; (8000c90 <_ZN4tama7TextureC1Ejj+0x9c>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d801      	bhi.n	8000c1e <_ZN4tama7TextureC1Ejj+0x2a>
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	e001      	b.n	8000c22 <_ZN4tama7TextureC1Ejj+0x2e>
 8000c1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c22:	4618      	mov	r0, r3
 8000c24:	f00c fedf 	bl	800d9e6 <_Znaj>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	60da      	str	r2, [r3, #12]
            for (unsigned i = 0; i < height; ++i)
 8000c30:	2300      	movs	r3, #0
 8000c32:	617b      	str	r3, [r7, #20]
 8000c34:	697a      	ldr	r2, [r7, #20]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	d222      	bcs.n	8000c82 <_ZN4tama7TextureC1Ejj+0x8e>
            {
                data[i] = new PixelColor[width];
 8000c3c:	68b9      	ldr	r1, [r7, #8]
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	68da      	ldr	r2, [r3, #12]
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	009b      	lsls	r3, r3, #2
 8000c46:	18d4      	adds	r4, r2, r3
 8000c48:	4608      	mov	r0, r1
 8000c4a:	f00c fecc 	bl	800d9e6 <_Znaj>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	6023      	str	r3, [r4, #0]
                for (unsigned j = 0; j < width; ++j)
 8000c52:	2300      	movs	r3, #0
 8000c54:	613b      	str	r3, [r7, #16]
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	429a      	cmp	r2, r3
 8000c5c:	d20d      	bcs.n	8000c7a <_ZN4tama7TextureC1Ejj+0x86>
                {
                    data[i][j] = PixelColor::WHITE;
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	68da      	ldr	r2, [r3, #12]
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	4413      	add	r3, r2
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	693b      	ldr	r3, [r7, #16]
 8000c6c:	4413      	add	r3, r2
 8000c6e:	2200      	movs	r2, #0
 8000c70:	701a      	strb	r2, [r3, #0]
                for (unsigned j = 0; j < width; ++j)
 8000c72:	693b      	ldr	r3, [r7, #16]
 8000c74:	3301      	adds	r3, #1
 8000c76:	613b      	str	r3, [r7, #16]
 8000c78:	e7ed      	b.n	8000c56 <_ZN4tama7TextureC1Ejj+0x62>
            for (unsigned i = 0; i < height; ++i)
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	617b      	str	r3, [r7, #20]
 8000c80:	e7d8      	b.n	8000c34 <_ZN4tama7TextureC1Ejj+0x40>
                }
            }
        }
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	4618      	mov	r0, r3
 8000c86:	371c      	adds	r7, #28
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd90      	pop	{r4, r7, pc}
 8000c8c:	0800ddbc 	.word	0x0800ddbc
 8000c90:	1ffffffe 	.word	0x1ffffffe

08000c94 <_ZN4tama7Texture8insertAtENS_5Vec2dESt10shared_ptrIS0_E>:

        Texture(unsigned int width, unsigned int height, PixelColor **data) : width(width), height(height), data(data)
        {}

        void insertAt(Vec2d position, std::shared_ptr<Texture> texture)
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b088      	sub	sp, #32
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	60f8      	str	r0, [r7, #12]
 8000c9c:	1d38      	adds	r0, r7, #4
 8000c9e:	e880 0006 	stmia.w	r0, {r1, r2}
 8000ca2:	603b      	str	r3, [r7, #0]
        {
            for (unsigned i = 0; i < texture->height; ++i)
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	61fb      	str	r3, [r7, #28]
 8000ca8:	6838      	ldr	r0, [r7, #0]
 8000caa:	f000 fa1a 	bl	80010e2 <_ZNKSt19__shared_ptr_accessIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	689b      	ldr	r3, [r3, #8]
 8000cb2:	69fa      	ldr	r2, [r7, #28]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	bf34      	ite	cc
 8000cb8:	2301      	movcc	r3, #1
 8000cba:	2300      	movcs	r3, #0
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d03f      	beq.n	8000d42 <_ZN4tama7Texture8insertAtENS_5Vec2dESt10shared_ptrIS0_E+0xae>
            {
                for (unsigned j = 0; j < texture->width; ++j)
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61bb      	str	r3, [r7, #24]
 8000cc6:	6838      	ldr	r0, [r7, #0]
 8000cc8:	f000 fa0b 	bl	80010e2 <_ZNKSt19__shared_ptr_accessIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	69ba      	ldr	r2, [r7, #24]
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	bf34      	ite	cc
 8000cd6:	2301      	movcc	r3, #1
 8000cd8:	2300      	movcs	r3, #0
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d02c      	beq.n	8000d3a <_ZN4tama7Texture8insertAtENS_5Vec2dESt10shared_ptrIS0_E+0xa6>
                {
                    unsigned newX = i + position.y;
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	617b      	str	r3, [r7, #20]
                    unsigned newY = j + position.x;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	461a      	mov	r2, r3
 8000cee:	69bb      	ldr	r3, [r7, #24]
 8000cf0:	4413      	add	r3, r2
 8000cf2:	613b      	str	r3, [r7, #16]
                    if (newX < width && newY < height)
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	697a      	ldr	r2, [r7, #20]
 8000cfa:	429a      	cmp	r2, r3
 8000cfc:	d219      	bcs.n	8000d32 <_ZN4tama7Texture8insertAtENS_5Vec2dESt10shared_ptrIS0_E+0x9e>
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	689b      	ldr	r3, [r3, #8]
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d214      	bcs.n	8000d32 <_ZN4tama7Texture8insertAtENS_5Vec2dESt10shared_ptrIS0_E+0x9e>
                    {
                        this->data[newX][newY] = texture->data[i][j];
 8000d08:	6838      	ldr	r0, [r7, #0]
 8000d0a:	f000 f9ea 	bl	80010e2 <_ZNKSt19__shared_ptr_accessIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	68da      	ldr	r2, [r3, #12]
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	4413      	add	r3, r2
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	69bb      	ldr	r3, [r7, #24]
 8000d1c:	441a      	add	r2, r3
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	68d9      	ldr	r1, [r3, #12]
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	009b      	lsls	r3, r3, #2
 8000d26:	440b      	add	r3, r1
 8000d28:	6819      	ldr	r1, [r3, #0]
 8000d2a:	693b      	ldr	r3, [r7, #16]
 8000d2c:	440b      	add	r3, r1
 8000d2e:	7812      	ldrb	r2, [r2, #0]
 8000d30:	701a      	strb	r2, [r3, #0]
                for (unsigned j = 0; j < texture->width; ++j)
 8000d32:	69bb      	ldr	r3, [r7, #24]
 8000d34:	3301      	adds	r3, #1
 8000d36:	61bb      	str	r3, [r7, #24]
 8000d38:	e7c5      	b.n	8000cc6 <_ZN4tama7Texture8insertAtENS_5Vec2dESt10shared_ptrIS0_E+0x32>
            for (unsigned i = 0; i < texture->height; ++i)
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	61fb      	str	r3, [r7, #28]
 8000d40:	e7b2      	b.n	8000ca8 <_ZN4tama7Texture8insertAtENS_5Vec2dESt10shared_ptrIS0_E+0x14>
                    }
                }
            }
        }
 8000d42:	bf00      	nop
 8000d44:	3720      	adds	r7, #32
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
	...

08000d4c <_ZN4tama7TextureD1Ev>:

        virtual ~Texture()
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
        {
 8000d54:	4a16      	ldr	r2, [pc, #88]	; (8000db0 <_ZN4tama7TextureD1Ev+0x64>)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	601a      	str	r2, [r3, #0]
            for (unsigned i = 0; i < height; ++i)
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60fb      	str	r3, [r7, #12]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	689b      	ldr	r3, [r3, #8]
 8000d62:	68fa      	ldr	r2, [r7, #12]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	d214      	bcs.n	8000d92 <_ZN4tama7TextureD1Ev+0x46>
            {
                delete[] data[i];
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	68da      	ldr	r2, [r3, #12]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	4413      	add	r3, r2
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d008      	beq.n	8000d8a <_ZN4tama7TextureD1Ev+0x3e>
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	68da      	ldr	r2, [r3, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	4413      	add	r3, r2
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4618      	mov	r0, r3
 8000d86:	f00c fe29 	bl	800d9dc <_ZdaPv>
            for (unsigned i = 0; i < height; ++i)
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	e7e5      	b.n	8000d5e <_ZN4tama7TextureD1Ev+0x12>
            }
            delete[] data;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	68db      	ldr	r3, [r3, #12]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d004      	beq.n	8000da4 <_ZN4tama7TextureD1Ev+0x58>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	68db      	ldr	r3, [r3, #12]
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f00c fe1c 	bl	800d9dc <_ZdaPv>
        }
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	4618      	mov	r0, r3
 8000da8:	3710      	adds	r7, #16
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	0800ddbc 	.word	0x0800ddbc

08000db4 <_ZN4tama7TextureD0Ev>:
        virtual ~Texture()
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
        }
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f7ff ffc5 	bl	8000d4c <_ZN4tama7TextureD1Ev>
 8000dc2:	2110      	movs	r1, #16
 8000dc4:	6878      	ldr	r0, [r7, #4]
 8000dc6:	f00c fe10 	bl	800d9ea <_ZdlPvj>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <_ZN4tama14ChangeObserverC1Ev>:
#ifndef VPET_CHANGEOBSERVER_H
#define VPET_CHANGEOBSERVER_H

namespace tama
{
    class ChangeObserver
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	4a04      	ldr	r2, [pc, #16]	; (8000df0 <_ZN4tama14ChangeObserverC1Ev+0x1c>)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4618      	mov	r0, r3
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	0800ddcc 	.word	0x0800ddcc

08000df4 <_ZN4tama5SceneC1Ev>:
// Created by grzegorz on 3/28/21.
//

#include "Scene.h"

tama::Scene::Scene()
 8000df4:	b590      	push	{r4, r7, lr}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff ffe8 	bl	8000dd4 <_ZN4tama14ChangeObserverC1Ev>
 8000e04:	4a15      	ldr	r2, [pc, #84]	; (8000e5c <_ZN4tama5SceneC1Ev+0x68>)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	3304      	adds	r3, #4
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff fdc6 	bl	80009a0 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEC1Ev>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	330c      	adds	r3, #12
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f000 f96e 	bl	80010fa <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EEC1Ev>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2254      	movs	r2, #84	; 0x54
 8000e22:	619a      	str	r2, [r3, #24]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2230      	movs	r2, #48	; 0x30
 8000e28:	61da      	str	r2, [r3, #28]
{
    observer = nullptr;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	1d1c      	adds	r4, r3, #4
 8000e2e:	f107 0308 	add.w	r3, r7, #8
 8000e32:	2100      	movs	r1, #0
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff fdc0 	bl	80009ba <_ZNSt10shared_ptrIN4tama14ChangeObserverEEC1EDn>
 8000e3a:	f107 0308 	add.w	r3, r7, #8
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4620      	mov	r0, r4
 8000e42:	f7ff fdd2 	bl	80009ea <_ZNSt10shared_ptrIN4tama14ChangeObserverEEaSEOS2_>
 8000e46:	f107 0308 	add.w	r3, r7, #8
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff fd0c 	bl	8000868 <_ZNSt10shared_ptrIN4tama14ChangeObserverEED1Ev>
}
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	4618      	mov	r0, r3
 8000e54:	3714      	adds	r7, #20
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd90      	pop	{r4, r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	0800ddb0 	.word	0x0800ddb0

08000e60 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_ptr() = default;
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	3304      	adds	r3, #4
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff fd6b 	bl	8000948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4618      	mov	r0, r3
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <_ZNSt10shared_ptrIN4tama5SceneEED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff ffea 	bl	8000e60 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <_ZN4tama5Scene11addDrawableESt10shared_ptrINS_8DrawableEE>:
{
    this->observer = observer;
}

void tama::Scene::addDrawable(std::shared_ptr<Drawable> drawable)
{
 8000e96:	b5b0      	push	{r4, r5, r7, lr}
 8000e98:	b086      	sub	sp, #24
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
 8000e9e:	6039      	str	r1, [r7, #0]
    this->drawables.push_back(drawable);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	330c      	adds	r3, #12
 8000ea4:	6839      	ldr	r1, [r7, #0]
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f000 f94f 	bl	800114a <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE9push_backERKS3_>
    drawable->setChangeObserver(std::make_shared<Scene>(*this));
 8000eac:	6838      	ldr	r0, [r7, #0]
 8000eae:	f000 f972 	bl	8001196 <_ZNKSt19__shared_ptr_accessIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8000eb2:	4605      	mov	r5, r0
 8000eb4:	682b      	ldr	r3, [r5, #0]
 8000eb6:	331c      	adds	r3, #28
 8000eb8:	681c      	ldr	r4, [r3, #0]
 8000eba:	f107 0310 	add.w	r3, r7, #16
 8000ebe:	6879      	ldr	r1, [r7, #4]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f000 f97f 	bl	80011c4 <_ZSt11make_sharedIN4tama5SceneEJRS1_EESt10shared_ptrIT_EDpOT0_>
 8000ec6:	f107 0210 	add.w	r2, r7, #16
 8000eca:	f107 0308 	add.w	r3, r7, #8
 8000ece:	4611      	mov	r1, r2
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f000 f99f 	bl	8001214 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEC1INS0_5SceneEvEEOS_IT_E>
 8000ed6:	f107 0308 	add.w	r3, r7, #8
 8000eda:	4619      	mov	r1, r3
 8000edc:	4628      	mov	r0, r5
 8000ede:	47a0      	blx	r4
 8000ee0:	f107 0308 	add.w	r3, r7, #8
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff fcbf 	bl	8000868 <_ZNSt10shared_ptrIN4tama14ChangeObserverEED1Ev>
 8000eea:	f107 0310 	add.w	r3, r7, #16
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f7ff ffc4 	bl	8000e7c <_ZNSt10shared_ptrIN4tama5SceneEED1Ev>
}
 8000ef4:	bf00      	nop
 8000ef6:	3718      	adds	r7, #24
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bdb0      	pop	{r4, r5, r7, pc}

08000efc <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	3304      	adds	r3, #4
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff fd1d 	bl	8000948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4618      	mov	r0, r3
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <_ZNSt10shared_ptrIN4tama7TextureEED1Ev>:
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff ffea 	bl	8000efc <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <_ZNSt12__shared_ptrIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b082      	sub	sp, #8
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
 8000f3a:	6039      	str	r1, [r7, #0]
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	1d1a      	adds	r2, r3, #4
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	3304      	adds	r3, #4
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4610      	mov	r0, r2
 8000f50:	f7ff fafc 	bl	800054c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	4618      	mov	r0, r3
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <_ZNSt12__shared_ptrIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_ptr() = default;
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b082      	sub	sp, #8
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	3304      	adds	r3, #4
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff fcec 	bl	8000948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	4618      	mov	r0, r3
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <_ZNSt10shared_ptrIN4tama8DrawableEEC1ERKS2_>:
      shared_ptr(const shared_ptr&) noexcept = default;
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b082      	sub	sp, #8
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
 8000f82:	6039      	str	r1, [r7, #0]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	683a      	ldr	r2, [r7, #0]
 8000f88:	4611      	mov	r1, r2
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff ffd1 	bl	8000f32 <_ZNSt12__shared_ptrIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4618      	mov	r0, r3
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <_ZNSt10shared_ptrIN4tama8DrawableEED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b082      	sub	sp, #8
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff ffda 	bl	8000f5e <_ZNSt12__shared_ptrIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4618      	mov	r0, r3
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <_ZN4tama5Scene12getSceneDataEv>:
{

}

std::shared_ptr<tama::Texture> tama::Scene::getSceneData()
{
 8000fb4:	b590      	push	{r4, r7, lr}
 8000fb6:	b08d      	sub	sp, #52	; 0x34
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]
    std::shared_ptr<tama::Texture> texture = std::make_shared<tama::Texture>(width, height);
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	f103 0118 	add.w	r1, r3, #24
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	f103 021c 	add.w	r2, r3, #28
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f000 f93f 	bl	8001250 <_ZSt11make_sharedIN4tama7TextureEJRjS2_EESt10shared_ptrIT_EDpOT0_>

    for (auto drawable : drawables)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	330c      	adds	r3, #12
 8000fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fd8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000fda:	f000 f95b 	bl	8001294 <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE5beginEv>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	613b      	str	r3, [r7, #16]
 8000fe2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000fe4:	f000 f966 	bl	80012b4 <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE3endEv>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	f107 020c 	add.w	r2, r7, #12
 8000ff0:	f107 0310 	add.w	r3, r7, #16
 8000ff4:	4611      	mov	r1, r2
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f000 f96d 	bl	80012d6 <_ZN9__gnu_cxxneIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEEbRKNS_17__normal_iteratorIT_T0_EESE_>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d04f      	beq.n	80010a2 <_ZN4tama5Scene12getSceneDataEv+0xee>
 8001002:	f107 0310 	add.w	r3, r7, #16
 8001006:	4618      	mov	r0, r3
 8001008:	f000 f98e 	bl	8001328 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEdeEv>
 800100c:	4602      	mov	r2, r0
 800100e:	f107 0314 	add.w	r3, r7, #20
 8001012:	4611      	mov	r1, r2
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff ffb0 	bl	8000f7a <_ZNSt10shared_ptrIN4tama8DrawableEEC1ERKS2_>
    {
        if (drawable->isVisible())
 800101a:	f107 0314 	add.w	r3, r7, #20
 800101e:	4618      	mov	r0, r3
 8001020:	f000 f8b9 	bl	8001196 <_ZNKSt19__shared_ptr_accessIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8001024:	4602      	mov	r2, r0
 8001026:	6813      	ldr	r3, [r2, #0]
 8001028:	3320      	adds	r3, #32
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4610      	mov	r0, r2
 800102e:	4798      	blx	r3
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d02a      	beq.n	800108c <_ZN4tama5Scene12getSceneDataEv+0xd8>
        {
            texture->insertAt(drawable->getPosition(), drawable->getTexture());
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f000 f853 	bl	80010e2 <_ZNKSt19__shared_ptr_accessIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800103c:	4604      	mov	r4, r0
 800103e:	f107 0314 	add.w	r3, r7, #20
 8001042:	4618      	mov	r0, r3
 8001044:	f000 f8a7 	bl	8001196 <_ZNKSt19__shared_ptr_accessIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8001048:	4602      	mov	r2, r0
 800104a:	6813      	ldr	r3, [r2, #0]
 800104c:	330c      	adds	r3, #12
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f107 001c 	add.w	r0, r7, #28
 8001054:	4611      	mov	r1, r2
 8001056:	4798      	blx	r3
 8001058:	f107 0314 	add.w	r3, r7, #20
 800105c:	4618      	mov	r0, r3
 800105e:	f000 f89a 	bl	8001196 <_ZNKSt19__shared_ptr_accessIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8001062:	4602      	mov	r2, r0
 8001064:	6813      	ldr	r3, [r2, #0]
 8001066:	3308      	adds	r3, #8
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800106e:	4611      	mov	r1, r2
 8001070:	4798      	blx	r3
 8001072:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001076:	f107 021c 	add.w	r2, r7, #28
 800107a:	ca06      	ldmia	r2, {r1, r2}
 800107c:	4620      	mov	r0, r4
 800107e:	f7ff fe09 	bl	8000c94 <_ZN4tama7Texture8insertAtENS_5Vec2dESt10shared_ptrIS0_E>
 8001082:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff ff46 	bl	8000f18 <_ZNSt10shared_ptrIN4tama7TextureEED1Ev>
    for (auto drawable : drawables)
 800108c:	f107 0314 	add.w	r3, r7, #20
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff ff82 	bl	8000f9a <_ZNSt10shared_ptrIN4tama8DrawableEED1Ev>
 8001096:	f107 0310 	add.w	r3, r7, #16
 800109a:	4618      	mov	r0, r3
 800109c:	f000 f933 	bl	8001306 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEppEv>
 80010a0:	e7a4      	b.n	8000fec <_ZN4tama5Scene12getSceneDataEv+0x38>
        }
    }
    return texture;
 80010a2:	bf00      	nop
}
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	3734      	adds	r7, #52	; 0x34
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd90      	pop	{r4, r7, pc}

080010ac <_ZN4tama5Scene8onChangeEv>:

void tama::Scene::onChange()
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]

}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
      { delete this; }
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d005      	beq.n	80010da <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x1a>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	3304      	adds	r3, #4
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	4798      	blx	r3
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <_ZNKSt19__shared_ptr_accessIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b082      	sub	sp, #8
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
	return _M_get();
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f000 f948 	bl	8001380 <_ZNKSt19__shared_ptr_accessIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 80010f0:	4603      	mov	r3, r0
      }
 80010f2:	4618      	mov	r0, r3
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EEC1Ev>:
      // (assign() and get_allocator() are also listed in this section)

      /**
       *  @brief  Creates a %vector with no elements.
       */
      vector()
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b082      	sub	sp, #8
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
#if __cplusplus >= 201103L
      noexcept(is_nothrow_default_constructible<_Alloc>::value)
#endif
      : _Base() { }
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4618      	mov	r0, r3
 8001106:	f000 f953 	bl	80013b0 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EEC1Ev>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4618      	mov	r0, r3
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8001114:	b5b0      	push	{r4, r5, r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681c      	ldr	r4, [r3, #0]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4618      	mov	r0, r3
 8001128:	f000 f969 	bl	80013fe <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE19_M_get_Tp_allocatorEv>
 800112c:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800112e:	461a      	mov	r2, r3
 8001130:	4629      	mov	r1, r5
 8001132:	4620      	mov	r0, r4
 8001134:	f000 f96e 	bl	8001414 <_ZSt8_DestroyIPSt10shared_ptrIN4tama8DrawableEES3_EvT_S5_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	4618      	mov	r0, r3
 800113c:	f000 f945 	bl	80013ca <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EED1Ev>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	4618      	mov	r0, r3
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bdb0      	pop	{r4, r5, r7, pc}

0800114a <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE9push_backERKS3_>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
 800114a:	b580      	push	{r7, lr}
 800114c:	b082      	sub	sp, #8
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
 8001152:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	685a      	ldr	r2, [r3, #4]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	429a      	cmp	r2, r3
 800115e:	d00d      	beq.n	800117c <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE9push_backERKS3_+0x32>
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	683a      	ldr	r2, [r7, #0]
 8001168:	4619      	mov	r1, r3
 800116a:	f000 f96c 	bl	8001446 <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama8DrawableEEEE9constructIS3_JRKS3_EEEvRS4_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f103 0208 	add.w	r2, r3, #8
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	605a      	str	r2, [r3, #4]
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 800117a:	e008      	b.n	800118e <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE9push_backERKS3_+0x44>
	  _M_realloc_insert(end(), __x);
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f000 f899 	bl	80012b4 <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE3endEv>
 8001182:	4603      	mov	r3, r0
 8001184:	683a      	ldr	r2, [r7, #0]
 8001186:	4619      	mov	r1, r3
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f000 f96f 	bl	800146c <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_>
      }
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <_ZNKSt19__shared_ptr_accessIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 8001196:	b580      	push	{r7, lr}
 8001198:	b082      	sub	sp, #8
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
	return _M_get();
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f000 f9f0 	bl	8001584 <_ZNKSt19__shared_ptr_accessIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 80011a4:	4603      	mov	r3, r0
      }
 80011a6:	4618      	mov	r0, r3
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <_ZSt7forwardIRN4tama5SceneEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80011ae:	b480      	push	{r7}
 80011b0:	b083      	sub	sp, #12
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4618      	mov	r0, r3
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <_ZSt11make_sharedIN4tama5SceneEJRS1_EESt10shared_ptrIT_EDpOT0_>:
   *  @throw  std::bad_alloc, or an exception thrown from the
   *          constructor of @a _Tp.
   */
  template<typename _Tp, typename... _Args>
    inline shared_ptr<_Tp>
    make_shared(_Args&&... __args)
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	6039      	str	r1, [r7, #0]
    {
      typedef typename std::remove_const<_Tp>::type _Tp_nc;
      return std::allocate_shared<_Tp>(std::allocator<_Tp_nc>(),
				       std::forward<_Args>(__args)...);
 80011ce:	f107 030c 	add.w	r3, r7, #12
 80011d2:	4618      	mov	r0, r3
 80011d4:	f000 f9e2 	bl	800159c <_ZNSaIN4tama5SceneEEC1Ev>
 80011d8:	6838      	ldr	r0, [r7, #0]
 80011da:	f7ff ffe8 	bl	80011ae <_ZSt7forwardIRN4tama5SceneEEOT_RNSt16remove_referenceIS3_E4typeE>
 80011de:	4602      	mov	r2, r0
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f107 010c 	add.w	r1, r7, #12
 80011e6:	4618      	mov	r0, r3
 80011e8:	f000 f9f0 	bl	80015cc <_ZSt15allocate_sharedIN4tama5SceneESaIS1_EJRS1_EESt10shared_ptrIT_ERKT0_DpOT1_>
 80011ec:	f107 030c 	add.w	r3, r7, #12
 80011f0:	4618      	mov	r0, r3
 80011f2:	f000 f9df 	bl	80015b4 <_ZNSaIN4tama5SceneEED1Ev>
    }
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <_ZSt4moveIRSt10shared_ptrIN4tama5SceneEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 80011fe:	b480      	push	{r7}
 8001200:	b083      	sub	sp, #12
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4618      	mov	r0, r3
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEC1INS0_5SceneEvEEOS_IT_E>:
	shared_ptr(shared_ptr<_Yp>&& __r) noexcept
 8001214:	b590      	push	{r4, r7, lr}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 800121e:	687c      	ldr	r4, [r7, #4]
 8001220:	6838      	ldr	r0, [r7, #0]
 8001222:	f7ff ffec 	bl	80011fe <_ZSt4moveIRSt10shared_ptrIN4tama5SceneEEEONSt16remove_referenceIT_E4typeEOS6_>
 8001226:	4603      	mov	r3, r0
 8001228:	4619      	mov	r1, r3
 800122a:	4620      	mov	r0, r4
 800122c:	f000 f9e1 	bl	80015f2 <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEC1INS0_5SceneEvEEOS_IT_LS3_0EE>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	4618      	mov	r0, r3
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	bd90      	pop	{r4, r7, pc}

0800123a <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800123a:	b480      	push	{r7}
 800123c:	b083      	sub	sp, #12
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4618      	mov	r0, r3
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <_ZSt11make_sharedIN4tama7TextureEJRjS2_EESt10shared_ptrIT_EDpOT0_>:
    make_shared(_Args&&... __args)
 8001250:	b590      	push	{r4, r7, lr}
 8001252:	b087      	sub	sp, #28
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
				       std::forward<_Args>(__args)...);
 800125c:	f107 0314 	add.w	r3, r7, #20
 8001260:	4618      	mov	r0, r3
 8001262:	f000 f9e4 	bl	800162e <_ZNSaIN4tama7TextureEEC1Ev>
 8001266:	68b8      	ldr	r0, [r7, #8]
 8001268:	f7ff ffe7 	bl	800123a <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 800126c:	4604      	mov	r4, r0
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f7ff ffe3 	bl	800123a <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 8001274:	4603      	mov	r3, r0
 8001276:	68f8      	ldr	r0, [r7, #12]
 8001278:	f107 0114 	add.w	r1, r7, #20
 800127c:	4622      	mov	r2, r4
 800127e:	f000 f9ee 	bl	800165e <_ZSt15allocate_sharedIN4tama7TextureESaIS1_EJRjS3_EESt10shared_ptrIT_ERKT0_DpOT1_>
 8001282:	f107 0314 	add.w	r3, r7, #20
 8001286:	4618      	mov	r0, r3
 8001288:	f000 f9dd 	bl	8001646 <_ZNSaIN4tama7TextureEED1Ev>
    }
 800128c:	68f8      	ldr	r0, [r7, #12]
 800128e:	371c      	adds	r7, #28
 8001290:	46bd      	mov	sp, r7
 8001292:	bd90      	pop	{r4, r7, pc}

08001294 <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	f107 030c 	add.w	r3, r7, #12
 80012a2:	4611      	mov	r1, r2
 80012a4:	4618      	mov	r0, r3
 80012a6:	f000 f9f4 	bl	8001692 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEC1ERKS5_>
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	4618      	mov	r0, r3
 80012ae:	3710      	adds	r7, #16
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	1d1a      	adds	r2, r3, #4
 80012c0:	f107 030c 	add.w	r3, r7, #12
 80012c4:	4611      	mov	r1, r2
 80012c6:	4618      	mov	r0, r3
 80012c8:	f000 f9e3 	bl	8001692 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEC1ERKS5_>
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	4618      	mov	r0, r3
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <_ZN9__gnu_cxxneIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEEbRKNS_17__normal_iteratorIT_T0_EESE_>:
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 80012d6:	b590      	push	{r4, r7, lr}
 80012d8:	b083      	sub	sp, #12
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
 80012de:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f000 f9e6 	bl	80016b2 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEE4baseEv>
 80012e6:	4603      	mov	r3, r0
 80012e8:	681c      	ldr	r4, [r3, #0]
 80012ea:	6838      	ldr	r0, [r7, #0]
 80012ec:	f000 f9e1 	bl	80016b2 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEE4baseEv>
 80012f0:	4603      	mov	r3, r0
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	429c      	cmp	r4, r3
 80012f6:	bf14      	ite	ne
 80012f8:	2301      	movne	r3, #1
 80012fa:	2300      	moveq	r3, #0
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	4618      	mov	r0, r3
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	bd90      	pop	{r4, r7, pc}

08001306 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8001306:	b480      	push	{r7}
 8001308:	b083      	sub	sp, #12
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
	++_M_current;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f103 0208 	add.w	r2, r3, #8
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	601a      	str	r2, [r3, #0]
	return *this;
 800131a:	687b      	ldr	r3, [r7, #4]
      }
 800131c:	4618      	mov	r0, r3
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4618      	mov	r0, r3
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_base() noexcept
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
      { }
 8001348:	4a04      	ldr	r2, [pc, #16]	; (800135c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1c>)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4618      	mov	r0, r3
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	0800ddd8 	.word	0x0800ddd8

08001360 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_base() noexcept
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
      { }
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f7ff ffe9 	bl	8001340 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800136e:	210c      	movs	r1, #12
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f00c fb3a 	bl	800d9ea <_ZdlPvj>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4618      	mov	r0, r3
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <_ZNKSt19__shared_ptr_accessIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f000 f99d 	bl	80016c8 <_ZNKSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE3getEv>
 800138e:	4603      	mov	r3, r0
 8001390:	4618      	mov	r0, r3
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f000 f9b2 	bl	800170a <_ZNSaISt10shared_ptrIN4tama8DrawableEEED1Ev>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4618      	mov	r0, r3
 80013aa:	3708      	adds	r7, #8
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EEC1Ev>:
      _Vector_base()
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f000 f990 	bl	80016e0 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE12_Vector_implC1Ev>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	4618      	mov	r0, r3
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b082      	sub	sp, #8
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6819      	ldr	r1, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 80013da:	461a      	mov	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	10db      	asrs	r3, r3, #3
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 80013e4:	461a      	mov	r2, r3
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f000 f99b 	bl	8001722 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE13_M_deallocateEPS3_j>
		      - this->_M_impl._M_start); }
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff ffd2 	bl	8001398 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE12_Vector_implD1Ev>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	4618      	mov	r0, r3
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80013fe:	b480      	push	{r7}
 8001400:	b083      	sub	sp, #12
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4618      	mov	r0, r3
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <_ZSt8_DestroyIPSt10shared_ptrIN4tama8DrawableEES3_EvT_S5_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8001420:	68b9      	ldr	r1, [r7, #8]
 8001422:	68f8      	ldr	r0, [r7, #12]
 8001424:	f000 f990 	bl	8001748 <_ZSt8_DestroyIPSt10shared_ptrIN4tama8DrawableEEEvT_S5_>
    }
 8001428:	bf00      	nop
 800142a:	3710      	adds	r7, #16
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}

08001430 <_ZSt7forwardIRKSt10shared_ptrIN4tama8DrawableEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4618      	mov	r0, r3
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr

08001446 <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama8DrawableEEEE9constructIS3_JRKS3_EEEvRS4_PT_DpOT0_>:
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8001446:	b580      	push	{r7, lr}
 8001448:	b084      	sub	sp, #16
 800144a:	af00      	add	r7, sp, #0
 800144c:	60f8      	str	r0, [r7, #12]
 800144e:	60b9      	str	r1, [r7, #8]
 8001450:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f7ff ffec 	bl	8001430 <_ZSt7forwardIRKSt10shared_ptrIN4tama8DrawableEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8001458:	4603      	mov	r3, r0
 800145a:	461a      	mov	r2, r3
 800145c:	68b9      	ldr	r1, [r7, #8]
 800145e:	68f8      	ldr	r0, [r7, #12]
 8001460:	f000 f97f 	bl	8001762 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEE9constructIS4_JRKS4_EEEvPT_DpOT0_>
 8001464:	bf00      	nop
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 800146c:	b5b0      	push	{r4, r5, r7, lr}
 800146e:	b08a      	sub	sp, #40	; 0x28
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 8001478:	4a41      	ldr	r2, [pc, #260]	; (8001580 <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x114>)
 800147a:	2101      	movs	r1, #1
 800147c:	68f8      	ldr	r0, [r7, #12]
 800147e:	f000 f98a 	bl	8001796 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE12_M_check_lenEjPKc>
 8001482:	6278      	str	r0, [r7, #36]	; 0x24
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      const size_type __elems_before = __position - begin();
 8001484:	68f8      	ldr	r0, [r7, #12]
 8001486:	f7ff ff05 	bl	8001294 <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE5beginEv>
 800148a:	4603      	mov	r3, r0
 800148c:	617b      	str	r3, [r7, #20]
 800148e:	f107 0214 	add.w	r2, r7, #20
 8001492:	f107 0308 	add.w	r3, r7, #8
 8001496:	4611      	mov	r1, r2
 8001498:	4618      	mov	r0, r3
 800149a:	f000 f9c4 	bl	8001826 <_ZN9__gnu_cxxmiIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_>
 800149e:	4603      	mov	r3, r0
 80014a0:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014a6:	4618      	mov	r0, r3
 80014a8:	f000 f9d3 	bl	8001852 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE11_M_allocateEj>
 80014ac:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 80014b2:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 80014b4:	6a3b      	ldr	r3, [r7, #32]
 80014b6:	00db      	lsls	r3, r3, #3
	  _Alloc_traits::construct(this->_M_impl,
 80014b8:	69fa      	ldr	r2, [r7, #28]
 80014ba:	18d5      	adds	r5, r2, r3
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f7ff ffb7 	bl	8001430 <_ZSt7forwardIRKSt10shared_ptrIN4tama8DrawableEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80014c2:	4603      	mov	r3, r0
 80014c4:	461a      	mov	r2, r3
 80014c6:	4629      	mov	r1, r5
 80014c8:	4620      	mov	r0, r4
 80014ca:	f7ff ffbc 	bl	8001446 <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama8DrawableEEEE9constructIS3_JRKS3_EEEvRS4_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 80014ce:	2300      	movs	r3, #0
 80014d0:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (this->_M_impl._M_start, __position.base(),
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681c      	ldr	r4, [r3, #0]
 80014d6:	f107 0308 	add.w	r3, r7, #8
 80014da:	4618      	mov	r0, r3
 80014dc:	f000 f8e9 	bl	80016b2 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEE4baseEv>
 80014e0:	4603      	mov	r3, r0
 80014e2:	681d      	ldr	r5, [r3, #0]
	     __new_start, _M_get_Tp_allocator());
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff ff89 	bl	80013fe <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE19_M_get_Tp_allocatorEv>
 80014ec:	4603      	mov	r3, r0
	  __new_finish
 80014ee:	69fa      	ldr	r2, [r7, #28]
 80014f0:	4629      	mov	r1, r5
 80014f2:	4620      	mov	r0, r4
 80014f4:	f000 f9c1 	bl	800187a <_ZSt34__uninitialized_move_if_noexcept_aIPSt10shared_ptrIN4tama8DrawableEES4_SaIS3_EET0_T_S7_S6_RT1_>
 80014f8:	61b8      	str	r0, [r7, #24]

	  ++__new_finish;
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	3308      	adds	r3, #8
 80014fe:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (__position.base(), this->_M_impl._M_finish,
 8001500:	f107 0308 	add.w	r3, r7, #8
 8001504:	4618      	mov	r0, r3
 8001506:	f000 f8d4 	bl	80016b2 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEE4baseEv>
 800150a:	4603      	mov	r3, r0
 800150c:	681c      	ldr	r4, [r3, #0]
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	685d      	ldr	r5, [r3, #4]
	     __new_finish, _M_get_Tp_allocator());
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff ff72 	bl	80013fe <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE19_M_get_Tp_allocatorEv>
 800151a:	4603      	mov	r3, r0
	  __new_finish
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	4629      	mov	r1, r5
 8001520:	4620      	mov	r0, r4
 8001522:	f000 f9aa 	bl	800187a <_ZSt34__uninitialized_move_if_noexcept_aIPSt10shared_ptrIN4tama8DrawableEES4_SaIS3_EET0_T_S7_S6_RT1_>
 8001526:	61b8      	str	r0, [r7, #24]
	  else
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681c      	ldr	r4, [r3, #0]
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	685d      	ldr	r5, [r3, #4]
		    _M_get_Tp_allocator());
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	4618      	mov	r0, r3
 8001534:	f7ff ff63 	bl	80013fe <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE19_M_get_Tp_allocatorEv>
 8001538:	4603      	mov	r3, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800153a:	461a      	mov	r2, r3
 800153c:	4629      	mov	r1, r5
 800153e:	4620      	mov	r0, r4
 8001540:	f7ff ff68 	bl	8001414 <_ZSt8_DestroyIPSt10shared_ptrIN4tama8DrawableEES3_EvT_S5_RSaIT0_E>
      _M_deallocate(this->_M_impl._M_start,
 8001544:	68f8      	ldr	r0, [r7, #12]
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	6819      	ldr	r1, [r3, #0]
		    this->_M_impl._M_end_of_storage
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	689b      	ldr	r3, [r3, #8]
		    - this->_M_impl._M_start);
 800154e:	461a      	mov	r2, r3
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	10db      	asrs	r3, r3, #3
      _M_deallocate(this->_M_impl._M_start,
 8001558:	461a      	mov	r2, r3
 800155a:	f000 f8e2 	bl	8001722 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE13_M_deallocateEPS3_j>
      this->_M_impl._M_start = __new_start;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	69fa      	ldr	r2, [r7, #28]
 8001562:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800156a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156c:	00db      	lsls	r3, r3, #3
 800156e:	69fa      	ldr	r2, [r7, #28]
 8001570:	441a      	add	r2, r3
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	609a      	str	r2, [r3, #8]
    }
 8001576:	bf00      	nop
 8001578:	3728      	adds	r7, #40	; 0x28
 800157a:	46bd      	mov	sp, r7
 800157c:	bdb0      	pop	{r4, r5, r7, pc}
 800157e:	bf00      	nop
 8001580:	0800dcf8 	.word	0x0800dcf8

08001584 <_ZNKSt19__shared_ptr_accessIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f000 f98d 	bl	80018ac <_ZNKSt12__shared_ptrIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0EE3getEv>
 8001592:	4603      	mov	r3, r0
 8001594:	4618      	mov	r0, r3
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <_ZNSaIN4tama5SceneEEC1Ev>:
      typedef true_type propagate_on_container_move_assignment;

      typedef true_type is_always_equal;
#endif

      allocator() throw() { }
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f000 f98d 	bl	80018c4 <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEEC1Ev>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4618      	mov	r0, r3
 80015ae:	3708      	adds	r7, #8
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <_ZNSaIN4tama5SceneEED1Ev>:
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
	allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f000 f98c 	bl	80018da <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEED1Ev>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4618      	mov	r0, r3
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <_ZSt15allocate_sharedIN4tama5SceneESaIS1_EJRS1_EESt10shared_ptrIT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 80015cc:	b590      	push	{r4, r7, lr}
 80015ce:	b087      	sub	sp, #28
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
			     std::forward<_Args>(__args)...);
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f7ff fde8 	bl	80011ae <_ZSt7forwardIRN4tama5SceneEEOT_RNSt16remove_referenceIS3_E4typeE>
 80015de:	4603      	mov	r3, r0
 80015e0:	68ba      	ldr	r2, [r7, #8]
 80015e2:	4621      	mov	r1, r4
 80015e4:	68f8      	ldr	r0, [r7, #12]
 80015e6:	f000 f983 	bl	80018f0 <_ZNSt10shared_ptrIN4tama5SceneEEC1ISaIS1_EJRS1_EEESt19_Sp_make_shared_tagRKT_DpOT0_>
    }
 80015ea:	68f8      	ldr	r0, [r7, #12]
 80015ec:	371c      	adds	r7, #28
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd90      	pop	{r4, r7, pc}

080015f2 <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEC1INS0_5SceneEvEEOS_IT_LS3_0EE>:
	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b082      	sub	sp, #8
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
 80015fa:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount()
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	3304      	adds	r3, #4
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff fa65 	bl	8000ad8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _M_refcount._M_swap(__r._M_refcount);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	1d1a      	adds	r2, r3, #4
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	3304      	adds	r3, #4
 8001616:	4619      	mov	r1, r3
 8001618:	4610      	mov	r0, r2
 800161a:	f7ff faa0 	bl	8000b5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  __r._M_ptr = 0;
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
	}
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4618      	mov	r0, r3
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <_ZNSaIN4tama7TextureEEC1Ev>:
      allocator() throw() { }
 800162e:	b580      	push	{r7, lr}
 8001630:	b082      	sub	sp, #8
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f000 f970 	bl	800191c <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEEC1Ev>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	4618      	mov	r0, r3
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <_ZNSaIN4tama7TextureEED1Ev>:
      ~allocator() throw() { }
 8001646:	b580      	push	{r7, lr}
 8001648:	b082      	sub	sp, #8
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f000 f96f 	bl	8001932 <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEED1Ev>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	4618      	mov	r0, r3
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <_ZSt15allocate_sharedIN4tama7TextureESaIS1_EJRjS3_EESt10shared_ptrIT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 800165e:	b5b0      	push	{r4, r5, r7, lr}
 8001660:	b088      	sub	sp, #32
 8001662:	af02      	add	r7, sp, #8
 8001664:	60f8      	str	r0, [r7, #12]
 8001666:	60b9      	str	r1, [r7, #8]
 8001668:	607a      	str	r2, [r7, #4]
 800166a:	603b      	str	r3, [r7, #0]
			     std::forward<_Args>(__args)...);
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f7ff fde4 	bl	800123a <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 8001672:	4604      	mov	r4, r0
 8001674:	6838      	ldr	r0, [r7, #0]
 8001676:	f7ff fde0 	bl	800123a <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 800167a:	4603      	mov	r3, r0
 800167c:	9300      	str	r3, [sp, #0]
 800167e:	4623      	mov	r3, r4
 8001680:	68ba      	ldr	r2, [r7, #8]
 8001682:	4629      	mov	r1, r5
 8001684:	68f8      	ldr	r0, [r7, #12]
 8001686:	f000 f95f 	bl	8001948 <_ZNSt10shared_ptrIN4tama7TextureEEC1ISaIS1_EJRjS5_EEESt19_Sp_make_shared_tagRKT_DpOT0_>
    }
 800168a:	68f8      	ldr	r0, [r7, #12]
 800168c:	3718      	adds	r7, #24
 800168e:	46bd      	mov	sp, r7
 8001690:	bdb0      	pop	{r4, r5, r7, pc}

08001692 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEC1ERKS5_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8001692:	b480      	push	{r7}
 8001694:	b083      	sub	sp, #12
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
 800169a:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4618      	mov	r0, r3
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr

080016b2 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80016b2:	b480      	push	{r7}
 80016b4:	b083      	sub	sp, #12
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4618      	mov	r0, r3
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <_ZNKSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4618      	mov	r0, r3
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE12_Vector_implC1Ev>:
	_Vector_impl()
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f000 f949 	bl	8001980 <_ZNSaISt10shared_ptrIN4tama8DrawableEEEC1Ev>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2200      	movs	r2, #0
 80016f8:	605a      	str	r2, [r3, #4]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2200      	movs	r2, #0
 80016fe:	609a      	str	r2, [r3, #8]
	{ }
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	4618      	mov	r0, r3
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <_ZNSaISt10shared_ptrIN4tama8DrawableEEED1Ev>:
 800170a:	b580      	push	{r7, lr}
 800170c:	b082      	sub	sp, #8
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f000 f940 	bl	8001998 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEED1Ev>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	4618      	mov	r0, r3
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE13_M_deallocateEPS3_j>:
      _M_deallocate(pointer __p, size_t __n)
 8001722:	b580      	push	{r7, lr}
 8001724:	b084      	sub	sp, #16
 8001726:	af00      	add	r7, sp, #0
 8001728:	60f8      	str	r0, [r7, #12]
 800172a:	60b9      	str	r1, [r7, #8]
 800172c:	607a      	str	r2, [r7, #4]
	if (__p)
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d005      	beq.n	8001740 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE13_M_deallocateEPS3_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	68b9      	ldr	r1, [r7, #8]
 800173a:	4618      	mov	r0, r3
 800173c:	f000 f937 	bl	80019ae <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama8DrawableEEEE10deallocateERS4_PS3_j>
      }
 8001740:	bf00      	nop
 8001742:	3710      	adds	r7, #16
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <_ZSt8_DestroyIPSt10shared_ptrIN4tama8DrawableEEEvT_S5_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8001752:	6839      	ldr	r1, [r7, #0]
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f000 f944 	bl	80019e2 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrIN4tama8DrawableEEEEvT_S7_>
    }
 800175a:	bf00      	nop
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEE9constructIS4_JRKS4_EEEvPT_DpOT0_>:
      { return size_t(-1) / sizeof(_Tp); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8001762:	b590      	push	{r4, r7, lr}
 8001764:	b085      	sub	sp, #20
 8001766:	af00      	add	r7, sp, #0
 8001768:	60f8      	str	r0, [r7, #12]
 800176a:	60b9      	str	r1, [r7, #8]
 800176c:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f7ff fe5e 	bl	8001430 <_ZSt7forwardIRKSt10shared_ptrIN4tama8DrawableEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8001774:	4604      	mov	r4, r0
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	4619      	mov	r1, r3
 800177a:	2008      	movs	r0, #8
 800177c:	f7ff fa2e 	bl	8000bdc <_ZnwjPv>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d003      	beq.n	800178e <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEE9constructIS4_JRKS4_EEEvPT_DpOT0_+0x2c>
 8001786:	4621      	mov	r1, r4
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff fbf6 	bl	8000f7a <_ZNSt10shared_ptrIN4tama8DrawableEEC1ERKS2_>
 800178e:	bf00      	nop
 8001790:	3714      	adds	r7, #20
 8001792:	46bd      	mov	sp, r7
 8001794:	bd90      	pop	{r4, r7, pc}

08001796 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 8001796:	b590      	push	{r4, r7, lr}
 8001798:	b087      	sub	sp, #28
 800179a:	af00      	add	r7, sp, #0
 800179c:	60f8      	str	r0, [r7, #12]
 800179e:	60b9      	str	r1, [r7, #8]
 80017a0:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 80017a2:	68f8      	ldr	r0, [r7, #12]
 80017a4:	f000 f935 	bl	8001a12 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE8max_sizeEv>
 80017a8:	4604      	mov	r4, r0
 80017aa:	68f8      	ldr	r0, [r7, #12]
 80017ac:	f000 f942 	bl	8001a34 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE4sizeEv>
 80017b0:	4603      	mov	r3, r0
 80017b2:	1ae2      	subs	r2, r4, r3
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	bf34      	ite	cc
 80017ba:	2301      	movcc	r3, #1
 80017bc:	2300      	movcs	r3, #0
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d003      	beq.n	80017cc <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f00c f940 	bl	800da4c <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + std::max(size(), __n);
 80017cc:	68f8      	ldr	r0, [r7, #12]
 80017ce:	f000 f931 	bl	8001a34 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE4sizeEv>
 80017d2:	4604      	mov	r4, r0
 80017d4:	68f8      	ldr	r0, [r7, #12]
 80017d6:	f000 f92d 	bl	8001a34 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE4sizeEv>
 80017da:	4603      	mov	r3, r0
 80017dc:	613b      	str	r3, [r7, #16]
 80017de:	f107 0208 	add.w	r2, r7, #8
 80017e2:	f107 0310 	add.w	r3, r7, #16
 80017e6:	4611      	mov	r1, r2
 80017e8:	4618      	mov	r0, r3
 80017ea:	f000 f934 	bl	8001a56 <_ZSt3maxIjERKT_S2_S2_>
 80017ee:	4603      	mov	r3, r0
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4423      	add	r3, r4
 80017f4:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80017f6:	68f8      	ldr	r0, [r7, #12]
 80017f8:	f000 f91c 	bl	8001a34 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE4sizeEv>
 80017fc:	4602      	mov	r2, r0
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	4293      	cmp	r3, r2
 8001802:	d306      	bcc.n	8001812 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE12_M_check_lenEjPKc+0x7c>
 8001804:	68f8      	ldr	r0, [r7, #12]
 8001806:	f000 f904 	bl	8001a12 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE8max_sizeEv>
 800180a:	4602      	mov	r2, r0
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	4293      	cmp	r3, r2
 8001810:	d904      	bls.n	800181c <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE12_M_check_lenEjPKc+0x86>
 8001812:	68f8      	ldr	r0, [r7, #12]
 8001814:	f000 f8fd 	bl	8001a12 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE8max_sizeEv>
 8001818:	4603      	mov	r3, r0
 800181a:	e000      	b.n	800181e <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE12_M_check_lenEjPKc+0x88>
 800181c:	697b      	ldr	r3, [r7, #20]
      }
 800181e:	4618      	mov	r0, r3
 8001820:	371c      	adds	r7, #28
 8001822:	46bd      	mov	sp, r7
 8001824:	bd90      	pop	{r4, r7, pc}

08001826 <_ZN9__gnu_cxxmiIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8001826:	b590      	push	{r4, r7, lr}
 8001828:	b083      	sub	sp, #12
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
 800182e:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f7ff ff3e 	bl	80016b2 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEE4baseEv>
 8001836:	4603      	mov	r3, r0
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	461c      	mov	r4, r3
 800183c:	6838      	ldr	r0, [r7, #0]
 800183e:	f7ff ff38 	bl	80016b2 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEE4baseEv>
 8001842:	4603      	mov	r3, r0
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	1ae3      	subs	r3, r4, r3
 8001848:	10db      	asrs	r3, r3, #3
 800184a:	4618      	mov	r0, r3
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	bd90      	pop	{r4, r7, pc}

08001852 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8001852:	b580      	push	{r7, lr}
 8001854:	b082      	sub	sp, #8
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
 800185a:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d006      	beq.n	8001870 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE11_M_allocateEj+0x1e>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6839      	ldr	r1, [r7, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f000 f909 	bl	8001a7e <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama8DrawableEEEE8allocateERS4_j>
 800186c:	4603      	mov	r3, r0
 800186e:	e000      	b.n	8001872 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE11_M_allocateEj+0x20>
 8001870:	2300      	movs	r3, #0
      }
 8001872:	4618      	mov	r0, r3
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <_ZSt34__uninitialized_move_if_noexcept_aIPSt10shared_ptrIN4tama8DrawableEES4_SaIS3_EET0_T_S7_S6_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800187a:	b590      	push	{r4, r7, lr}
 800187c:	b085      	sub	sp, #20
 800187e:	af00      	add	r7, sp, #0
 8001880:	60f8      	str	r0, [r7, #12]
 8001882:	60b9      	str	r1, [r7, #8]
 8001884:	607a      	str	r2, [r7, #4]
 8001886:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8001888:	68f8      	ldr	r0, [r7, #12]
 800188a:	f000 f907 	bl	8001a9c <_ZSt32__make_move_if_noexcept_iteratorISt10shared_ptrIN4tama8DrawableEESt13move_iteratorIPS3_EET0_PT_>
 800188e:	4604      	mov	r4, r0
 8001890:	68b8      	ldr	r0, [r7, #8]
 8001892:	f000 f903 	bl	8001a9c <_ZSt32__make_move_if_noexcept_iteratorISt10shared_ptrIN4tama8DrawableEESt13move_iteratorIPS3_EET0_PT_>
 8001896:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	4620      	mov	r0, r4
 800189e:	f000 f90c 	bl	8001aba <_ZSt22__uninitialized_copy_aISt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEES5_S4_ET0_T_S8_S7_RSaIT1_E>
 80018a2:	4603      	mov	r3, r0
    }
 80018a4:	4618      	mov	r0, r3
 80018a6:	3714      	adds	r7, #20
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd90      	pop	{r4, r7, pc}

080018ac <_ZNKSt12__shared_ptrIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4618      	mov	r0, r3
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4618      	mov	r0, r3
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr

080018da <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80018da:	b480      	push	{r7}
 80018dc:	b083      	sub	sp, #12
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4618      	mov	r0, r3
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <_ZNSt10shared_ptrIN4tama5SceneEEC1ISaIS1_EJRS1_EEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 80018f0:	b5b0      	push	{r4, r5, r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	7239      	strb	r1, [r7, #8]
 80018fa:	607a      	str	r2, [r7, #4]
 80018fc:	603b      	str	r3, [r7, #0]
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
 80018fe:	68fc      	ldr	r4, [r7, #12]
 8001900:	6838      	ldr	r0, [r7, #0]
 8001902:	f7ff fc54 	bl	80011ae <_ZSt7forwardIRN4tama5SceneEEOT_RNSt16remove_referenceIS3_E4typeE>
 8001906:	4603      	mov	r3, r0
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	4629      	mov	r1, r5
 800190c:	4620      	mov	r0, r4
 800190e:	f000 f902 	bl	8001b16 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJRS1_EEESt19_Sp_make_shared_tagRKT_DpOT0_>
	{ }
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	4618      	mov	r0, r3
 8001916:	3710      	adds	r7, #16
 8001918:	46bd      	mov	sp, r7
 800191a:	bdb0      	pop	{r4, r5, r7, pc}

0800191c <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	4618      	mov	r0, r3
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001932:	b480      	push	{r7}
 8001934:	b083      	sub	sp, #12
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4618      	mov	r0, r3
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <_ZNSt10shared_ptrIN4tama7TextureEEC1ISaIS1_EJRjS5_EEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8001948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800194a:	b087      	sub	sp, #28
 800194c:	af02      	add	r7, sp, #8
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	7239      	strb	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
 8001954:	603b      	str	r3, [r7, #0]
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
 8001956:	68fc      	ldr	r4, [r7, #12]
 8001958:	6838      	ldr	r0, [r7, #0]
 800195a:	f7ff fc6e 	bl	800123a <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 800195e:	4605      	mov	r5, r0
 8001960:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001962:	f7ff fc6a 	bl	800123a <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 8001966:	4603      	mov	r3, r0
 8001968:	9300      	str	r3, [sp, #0]
 800196a:	462b      	mov	r3, r5
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	4631      	mov	r1, r6
 8001970:	4620      	mov	r0, r4
 8001972:	f000 f968 	bl	8001c46 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJRjS7_EEESt19_Sp_make_shared_tagRKT_DpOT0_>
	{ }
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	4618      	mov	r0, r3
 800197a:	3714      	adds	r7, #20
 800197c:	46bd      	mov	sp, r7
 800197e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001980 <_ZNSaISt10shared_ptrIN4tama8DrawableEEEC1Ev>:
      allocator() throw() { }
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f000 f9db 	bl	8001d44 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEEC1Ev>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4618      	mov	r0, r3
 8001992:	3708      	adds	r7, #8
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}

08001998 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEED1Ev>:
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4618      	mov	r0, r3
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr

080019ae <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama8DrawableEEEE10deallocateERS4_PS3_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b084      	sub	sp, #16
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	60f8      	str	r0, [r7, #12]
 80019b6:	60b9      	str	r1, [r7, #8]
 80019b8:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	68b9      	ldr	r1, [r7, #8]
 80019be:	68f8      	ldr	r0, [r7, #12]
 80019c0:	f000 f9cb 	bl	8001d5a <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEE10deallocateEPS4_j>
 80019c4:	bf00      	nop
 80019c6:	3710      	adds	r7, #16
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}

080019cc <_ZSt11__addressofISt10shared_ptrIN4tama8DrawableEEEPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	4618      	mov	r0, r3
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr

080019e2 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrIN4tama8DrawableEEEEvT_S7_>:
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b082      	sub	sp, #8
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
 80019ea:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d00a      	beq.n	8001a0a <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrIN4tama8DrawableEEEEvT_S7_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f7ff ffe9 	bl	80019cc <_ZSt11__addressofISt10shared_ptrIN4tama8DrawableEEEPT_RS4_>
 80019fa:	4603      	mov	r3, r0
 80019fc:	4618      	mov	r0, r3
 80019fe:	f000 f9b9 	bl	8001d74 <_ZSt8_DestroyISt10shared_ptrIN4tama8DrawableEEEvPT_>
	  for (; __first != __last; ++__first)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	3308      	adds	r3, #8
 8001a06:	607b      	str	r3, [r7, #4]
 8001a08:	e7f0      	b.n	80019ec <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrIN4tama8DrawableEEEEvT_S7_+0xa>
	}
 8001a0a:	bf00      	nop
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b082      	sub	sp, #8
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f000 f9c0 	bl	8001da2 <_ZNKSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE19_M_get_Tp_allocatorEv>
 8001a22:	4603      	mov	r3, r0
 8001a24:	4618      	mov	r0, r3
 8001a26:	f000 f9b0 	bl	8001d8a <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama8DrawableEEEE8max_sizeERKS4_>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	461a      	mov	r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	10db      	asrs	r3, r3, #3
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr

08001a56 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8001a56:	b480      	push	{r7}
 8001a58:	b083      	sub	sp, #12
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
 8001a5e:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d201      	bcs.n	8001a70 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	e000      	b.n	8001a72 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8001a70:	687b      	ldr	r3, [r7, #4]
    }
 8001a72:	4618      	mov	r0, r3
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama8DrawableEEEE8allocateERS4_j>:
      allocate(allocator_type& __a, size_type __n)
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b082      	sub	sp, #8
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
 8001a86:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8001a88:	2200      	movs	r2, #0
 8001a8a:	6839      	ldr	r1, [r7, #0]
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f000 f993 	bl	8001db8 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEE8allocateEjPKv>
 8001a92:	4603      	mov	r3, r0
 8001a94:	4618      	mov	r0, r3
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <_ZSt32__make_move_if_noexcept_iteratorISt10shared_ptrIN4tama8DrawableEESt13move_iteratorIPS3_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8001aa4:	f107 030c 	add.w	r3, r7, #12
 8001aa8:	6879      	ldr	r1, [r7, #4]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f000 f9a2 	bl	8001df4 <_ZNSt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEEC1ES4_>
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <_ZSt22__uninitialized_copy_aISt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEES5_S4_ET0_T_S8_S7_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b084      	sub	sp, #16
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	60f8      	str	r0, [r7, #12]
 8001ac2:	60b9      	str	r1, [r7, #8]
 8001ac4:	607a      	str	r2, [r7, #4]
 8001ac6:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	68b9      	ldr	r1, [r7, #8]
 8001acc:	68f8      	ldr	r0, [r7, #12]
 8001ace:	f000 f9a0 	bl	8001e12 <_ZSt18uninitialized_copyISt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEES5_ET0_T_S8_S7_>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3710      	adds	r7, #16
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>:
	  _M_ptr = static_cast<_Tp*>(__p);
	  _M_enable_shared_from_this_with(_M_ptr);
	}
#else
      template<typename _Alloc>
        struct _Deleter
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff fd64 	bl	80015b4 <_ZNSaIN4tama5SceneEED1Ev>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	4618      	mov	r0, r3
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>:
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b082      	sub	sp, #8
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
 8001afe:	6039      	str	r1, [r7, #0]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	683a      	ldr	r2, [r7, #0]
 8001b04:	4611      	mov	r1, r2
 8001b06:	4618      	mov	r0, r3
 8001b08:	f000 f995 	bl	8001e36 <_ZNSaIN4tama5SceneEEC1ERKS1_>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJRS1_EEESt19_Sp_make_shared_tagRKT_DpOT0_>:
          }
          _Alloc _M_alloc;
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b08c      	sub	sp, #48	; 0x30
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	60f8      	str	r0, [r7, #12]
 8001b1e:	7239      	strb	r1, [r7, #8]
 8001b20:	607a      	str	r2, [r7, #4]
 8001b22:	603b      	str	r3, [r7, #0]
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	3304      	adds	r3, #4
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7fe ffd2 	bl	8000ad8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 8001b34:	f107 0320 	add.w	r3, r7, #32
 8001b38:	6879      	ldr	r1, [r7, #4]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f000 f97b 	bl	8001e36 <_ZNSaIN4tama5SceneEEC1ERKS1_>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 8001b40:	f107 0318 	add.w	r3, r7, #24
 8001b44:	f107 0220 	add.w	r2, r7, #32
 8001b48:	4611      	mov	r1, r2
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f000 f981 	bl	8001e52 <_ZSt18__allocate_guardedISaIN4tama5SceneEEESt15__allocated_ptrIT_ERS4_>
	  auto __ptr = __guard.get();
 8001b50:	f107 0318 	add.w	r3, r7, #24
 8001b54:	4618      	mov	r0, r3
 8001b56:	f000 f9a4 	bl	8001ea2 <_ZNSt15__allocated_ptrISaIN4tama5SceneEEE3getEv>
 8001b5a:	62f8      	str	r0, [r7, #44]	; 0x2c
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
 8001b5c:	6838      	ldr	r0, [r7, #0]
 8001b5e:	f7ff fb26 	bl	80011ae <_ZSt7forwardIRN4tama5SceneEEOT_RNSt16remove_referenceIS3_E4typeE>
 8001b62:	4602      	mov	r2, r0
 8001b64:	f107 0320 	add.w	r3, r7, #32
 8001b68:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f000 f9a7 	bl	8001ebe <_ZNSt16allocator_traitsISaIN4tama5SceneEEE9constructIS1_JRS1_EEEvRS2_PT_DpOT0_>
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
 8001b70:	f107 0318 	add.w	r3, r7, #24
 8001b74:	2100      	movs	r1, #0
 8001b76:	4618      	mov	r0, r3
 8001b78:	f000 f9b4 	bl	8001ee4 <_ZNSt15__allocated_ptrISaIN4tama5SceneEEEaSEDn>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 8001b7c:	f107 0220 	add.w	r2, r7, #32
 8001b80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b84:	4611      	mov	r1, r2
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff ffb5 	bl	8001af6 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>
 8001b8c:	f107 0220 	add.w	r2, r7, #32
 8001b90:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b94:	4611      	mov	r1, r2
 8001b96:	4618      	mov	r0, r3
 8001b98:	f000 f94d 	bl	8001e36 <_ZNSaIN4tama5SceneEEC1ERKS1_>
 8001b9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ba0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001ba4:	f107 0014 	add.w	r0, r7, #20
 8001ba8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001baa:	f000 f9d0 	bl	8001f4e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama5SceneENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
 8001bae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7ff fcfe 	bl	80015b4 <_ZNSaIN4tama5SceneEED1Ev>
 8001bb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff ff8d 	bl	8001adc <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	  _M_refcount._M_swap(__count);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	3304      	adds	r3, #4
 8001bc6:	f107 0214 	add.w	r2, r7, #20
 8001bca:	4611      	mov	r1, r2
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7fe ffc6 	bl	8000b5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  _M_ptr = __ptr;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bd6:	601a      	str	r2, [r3, #0]
	  _M_enable_shared_from_this_with(_M_ptr);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4619      	mov	r1, r3
 8001bde:	68f8      	ldr	r0, [r7, #12]
 8001be0:	f000 fa0c 	bl	8001ffc <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 8001be4:	f107 0314 	add.w	r3, r7, #20
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7fe fead 	bl	8000948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 8001bee:	f107 0318 	add.w	r3, r7, #24
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f000 f940 	bl	8001e78 <_ZNSt15__allocated_ptrISaIN4tama5SceneEEED1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 8001bf8:	f107 0320 	add.w	r3, r7, #32
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff ff6d 	bl	8001adc <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	}
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	4618      	mov	r0, r3
 8001c06:	3730      	adds	r7, #48	; 0x30
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>:
        struct _Deleter
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff fd15 	bl	8001646 <_ZNSaIN4tama7TextureEED1Ev>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>:
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b082      	sub	sp, #8
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
 8001c2e:	6039      	str	r1, [r7, #0]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	683a      	ldr	r2, [r7, #0]
 8001c34:	4611      	mov	r1, r2
 8001c36:	4618      	mov	r0, r3
 8001c38:	f000 f9eb 	bl	8002012 <_ZNSaIN4tama7TextureEEC1ERKS1_>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJRjS7_EEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8001c46:	b590      	push	{r4, r7, lr}
 8001c48:	b08d      	sub	sp, #52	; 0x34
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	60f8      	str	r0, [r7, #12]
 8001c4e:	7239      	strb	r1, [r7, #8]
 8001c50:	607a      	str	r2, [r7, #4]
 8001c52:	603b      	str	r3, [r7, #0]
	: _M_ptr(), _M_refcount()
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2200      	movs	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	3304      	adds	r3, #4
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7fe ff3a 	bl	8000ad8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 8001c64:	f107 0320 	add.w	r3, r7, #32
 8001c68:	6879      	ldr	r1, [r7, #4]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f000 f9d1 	bl	8002012 <_ZNSaIN4tama7TextureEEC1ERKS1_>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 8001c70:	f107 0318 	add.w	r3, r7, #24
 8001c74:	f107 0220 	add.w	r2, r7, #32
 8001c78:	4611      	mov	r1, r2
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f000 f9d7 	bl	800202e <_ZSt18__allocate_guardedISaIN4tama7TextureEEESt15__allocated_ptrIT_ERS4_>
	  auto __ptr = __guard.get();
 8001c80:	f107 0318 	add.w	r3, r7, #24
 8001c84:	4618      	mov	r0, r3
 8001c86:	f000 f9fa 	bl	800207e <_ZNSt15__allocated_ptrISaIN4tama7TextureEEE3getEv>
 8001c8a:	62f8      	str	r0, [r7, #44]	; 0x2c
	  __traits::construct(__del._M_alloc, __ptr,
 8001c8c:	6838      	ldr	r0, [r7, #0]
 8001c8e:	f7ff fad4 	bl	800123a <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 8001c92:	4604      	mov	r4, r0
 8001c94:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001c96:	f7ff fad0 	bl	800123a <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	f107 0020 	add.w	r0, r7, #32
 8001ca0:	4622      	mov	r2, r4
 8001ca2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001ca4:	f000 f9f9 	bl	800209a <_ZNSt16allocator_traitsISaIN4tama7TextureEEE9constructIS1_JRjS5_EEEvRS2_PT_DpOT0_>
	  __guard = nullptr;
 8001ca8:	f107 0318 	add.w	r3, r7, #24
 8001cac:	2100      	movs	r1, #0
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f000 fa0b 	bl	80020ca <_ZNSt15__allocated_ptrISaIN4tama7TextureEEEaSEDn>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 8001cb4:	f107 0220 	add.w	r2, r7, #32
 8001cb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cbc:	4611      	mov	r1, r2
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff ffb1 	bl	8001c26 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>
 8001cc4:	f107 0220 	add.w	r2, r7, #32
 8001cc8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ccc:	4611      	mov	r1, r2
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f000 f99f 	bl	8002012 <_ZNSaIN4tama7TextureEEC1ERKS1_>
 8001cd4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cd8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001cdc:	f107 0014 	add.w	r0, r7, #20
 8001ce0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001ce2:	f000 fa27 	bl	8002134 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama7TextureENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
 8001ce6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff fcab 	bl	8001646 <_ZNSaIN4tama7TextureEED1Ev>
 8001cf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff ff89 	bl	8001c0c <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	  _M_refcount._M_swap(__count);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	3304      	adds	r3, #4
 8001cfe:	f107 0214 	add.w	r2, r7, #20
 8001d02:	4611      	mov	r1, r2
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7fe ff2a 	bl	8000b5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  _M_ptr = __ptr;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d0e:	601a      	str	r2, [r3, #0]
	  _M_enable_shared_from_this_with(_M_ptr);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4619      	mov	r1, r3
 8001d16:	68f8      	ldr	r0, [r7, #12]
 8001d18:	f000 fa63 	bl	80021e2 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 8001d1c:	f107 0314 	add.w	r3, r7, #20
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7fe fe11 	bl	8000948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 8001d26:	f107 0318 	add.w	r3, r7, #24
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f000 f992 	bl	8002054 <_ZNSt15__allocated_ptrISaIN4tama7TextureEEED1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 8001d30:	f107 0320 	add.w	r3, r7, #32
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7ff ff69 	bl	8001c0c <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	}
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3734      	adds	r7, #52	; 0x34
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd90      	pop	{r4, r7, pc}

08001d44 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr

08001d5a <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEE10deallocateEPS4_j>:
      deallocate(pointer __p, size_type)
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b084      	sub	sp, #16
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	60f8      	str	r0, [r7, #12]
 8001d62:	60b9      	str	r1, [r7, #8]
 8001d64:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8001d66:	68b8      	ldr	r0, [r7, #8]
 8001d68:	f00b fe5a 	bl	800da20 <_ZdlPv>
      }
 8001d6c:	bf00      	nop
 8001d6e:	3710      	adds	r7, #16
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <_ZSt8_DestroyISt10shared_ptrIN4tama8DrawableEEEvPT_>:
    _Destroy(_Tp* __pointer)
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f7ff f90c 	bl	8000f9a <_ZNSt10shared_ptrIN4tama8DrawableEED1Ev>
 8001d82:	bf00      	nop
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama8DrawableEEEE8max_sizeERKS4_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b082      	sub	sp, #8
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f000 fa30 	bl	80021f8 <_ZNK9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEE8max_sizeEv>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <_ZNKSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8001da2:	b480      	push	{r7}
 8001da4:	b083      	sub	sp, #12
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4618      	mov	r0, r3
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8001dc4:	68f8      	ldr	r0, [r7, #12]
 8001dc6:	f000 fa17 	bl	80021f8 <_ZNK9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEE8max_sizeEv>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	bf8c      	ite	hi
 8001dd2:	2301      	movhi	r3, #1
 8001dd4:	2300      	movls	r3, #0
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8001ddc:	f00b fe33 	bl	800da46 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	00db      	lsls	r3, r3, #3
 8001de4:	4618      	mov	r0, r3
 8001de6:	f00b fe02 	bl	800d9ee <_Znwj>
 8001dea:	4603      	mov	r3, r0
      }
 8001dec:	4618      	mov	r0, r3
 8001dee:	3710      	adds	r7, #16
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <_ZNSt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEEC1ES4_>:
      move_iterator(iterator_type __i)
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	683a      	ldr	r2, [r7, #0]
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	4618      	mov	r0, r3
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr

08001e12 <_ZSt18uninitialized_copyISt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEES5_ET0_T_S8_S7_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b086      	sub	sp, #24
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	60f8      	str	r0, [r7, #12]
 8001e1a:	60b9      	str	r1, [r7, #8]
 8001e1c:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	68b9      	ldr	r1, [r7, #8]
 8001e26:	68f8      	ldr	r0, [r7, #12]
 8001e28:	f000 f9f2 	bl	8002210 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEES7_EET0_T_SA_S9_>
 8001e2c:	4603      	mov	r3, r0
    }
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3718      	adds	r7, #24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <_ZNSaIN4tama5SceneEEC1ERKS1_>:
      allocator(const allocator& __a) throw()
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b082      	sub	sp, #8
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
 8001e3e:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8001e40:	6839      	ldr	r1, [r7, #0]
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 fa13 	bl	800226e <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEEC1ERKS3_>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <_ZSt18__allocate_guardedISaIN4tama5SceneEEESt15__allocated_ptrIT_ERS4_>:
    };

  /// Allocate space for a single object using __a
  template<typename _Alloc>
    __allocated_ptr<_Alloc>
    __allocate_guarded(_Alloc& __a)
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b082      	sub	sp, #8
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
 8001e5a:	6039      	str	r1, [r7, #0]
    {
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 8001e5c:	2101      	movs	r1, #1
 8001e5e:	6838      	ldr	r0, [r7, #0]
 8001e60:	f000 fa11 	bl	8002286 <_ZNSt16allocator_traitsISaIN4tama5SceneEEE8allocateERS2_j>
 8001e64:	4603      	mov	r3, r0
 8001e66:	461a      	mov	r2, r3
 8001e68:	6839      	ldr	r1, [r7, #0]
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 fa1a 	bl	80022a4 <_ZNSt15__allocated_ptrISaIN4tama5SceneEEEC1ERS2_PS1_>
    }
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <_ZNSt15__allocated_ptrISaIN4tama5SceneEEED1Ev>:
      ~__allocated_ptr()
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d007      	beq.n	8001e98 <_ZNSt15__allocated_ptrISaIN4tama5SceneEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6818      	ldr	r0, [r3, #0]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	2201      	movs	r2, #1
 8001e92:	4619      	mov	r1, r3
 8001e94:	f000 fa1a 	bl	80022cc <_ZNSt16allocator_traitsISaIN4tama5SceneEEE10deallocateERS2_PS1_j>
      }
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <_ZNSt15__allocated_ptrISaIN4tama5SceneEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b082      	sub	sp, #8
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f000 fa1b 	bl	80022ea <_ZNSt15__allocated_ptrISaIN4tama5SceneEEE10_S_raw_ptrEPS1_>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <_ZNSt16allocator_traitsISaIN4tama5SceneEEE9constructIS1_JRS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b084      	sub	sp, #16
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	60f8      	str	r0, [r7, #12]
 8001ec6:	60b9      	str	r1, [r7, #8]
 8001ec8:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f7ff f96f 	bl	80011ae <_ZSt7forwardIRN4tama5SceneEEOT_RNSt16remove_referenceIS3_E4typeE>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	68b9      	ldr	r1, [r7, #8]
 8001ed6:	68f8      	ldr	r0, [r7, #12]
 8001ed8:	f000 fa78 	bl	80023cc <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEE9constructIS2_JRS2_EEEvPT_DpOT0_>
 8001edc:	bf00      	nop
 8001ede:	3710      	adds	r7, #16
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <_ZNSt15__allocated_ptrISaIN4tama5SceneEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	605a      	str	r2, [r3, #4]
	return *this;
 8001ef4:	687b      	ldr	r3, [r7, #4]
      }
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr

08001f02 <_ZSt4moveIRNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 8001f02:	b480      	push	{r7}
 8001f04:	b083      	sub	sp, #12
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>:
        struct _Deleter
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	683a      	ldr	r2, [r7, #0]
 8001f26:	4611      	mov	r1, r2
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff ff84 	bl	8001e36 <_ZNSaIN4tama5SceneEEC1ERKS1_>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4618      	mov	r0, r3
 8001f32:	3708      	adds	r7, #8
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <_ZSt4moveIRSaIN4tama5SceneEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4618      	mov	r0, r3
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr

08001f4e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama5SceneENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
 8001f4e:	b5b0      	push	{r4, r5, r7, lr}
 8001f50:	b08a      	sub	sp, #40	; 0x28
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	60f8      	str	r0, [r7, #12]
 8001f56:	60b9      	str	r1, [r7, #8]
 8001f58:	607a      	str	r2, [r7, #4]
 8001f5a:	603b      	str	r3, [r7, #0]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	601a      	str	r2, [r3, #0]
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 8001f62:	f107 031c 	add.w	r3, r7, #28
 8001f66:	6839      	ldr	r1, [r7, #0]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f000 fa49 	bl	8002400 <_ZNSaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	      auto __guard = std::__allocate_guarded(__a2);
 8001f6e:	f107 0314 	add.w	r3, r7, #20
 8001f72:	f107 021c 	add.w	r2, r7, #28
 8001f76:	4611      	mov	r1, r2
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f000 fa5a 	bl	8002432 <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>
	      _Sp_cd_type* __mem = __guard.get();
 8001f7e:	f107 0314 	add.w	r3, r7, #20
 8001f82:	4618      	mov	r0, r3
 8001f84:	f000 fa7d 	bl	8002482 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>
 8001f88:	6278      	str	r0, [r7, #36]	; 0x24
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f7ff ffb9 	bl	8001f02 <_ZSt4moveIRNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8001f90:	4602      	mov	r2, r0
 8001f92:	f107 0320 	add.w	r3, r7, #32
 8001f96:	4611      	mov	r1, r2
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7ff ffbd 	bl	8001f18 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 8001f9e:	f107 0420 	add.w	r4, r7, #32
 8001fa2:	6838      	ldr	r0, [r7, #0]
 8001fa4:	f7ff ffc8 	bl	8001f38 <_ZSt4moveIRSaIN4tama5SceneEEEONSt16remove_referenceIT_E4typeEOS5_>
 8001fa8:	4605      	mov	r5, r0
 8001faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fac:	4619      	mov	r1, r3
 8001fae:	2014      	movs	r0, #20
 8001fb0:	f7fe fe14 	bl	8000bdc <_ZnwjPv>
 8001fb4:	2800      	cmp	r0, #0
 8001fb6:	d004      	beq.n	8001fc2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama5SceneENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x74>
 8001fb8:	462b      	mov	r3, r5
 8001fba:	4622      	mov	r2, r4
 8001fbc:	68b9      	ldr	r1, [r7, #8]
 8001fbe:	f000 fa99 	bl	80024f4 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>
 8001fc2:	f107 0320 	add.w	r3, r7, #32
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7ff fd88 	bl	8001adc <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	      _M_pi = __mem;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fd0:	601a      	str	r2, [r3, #0]
	      __guard = nullptr;
 8001fd2:	f107 0314 	add.w	r3, r7, #20
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f000 fab9 	bl	8002550 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>
	      auto __guard = std::__allocate_guarded(__a2);
 8001fde:	f107 0314 	add.w	r3, r7, #20
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f000 fa38 	bl	8002458 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 8001fe8:	f107 031c 	add.w	r3, r7, #28
 8001fec:	4618      	mov	r0, r3
 8001fee:	f000 fa14 	bl	800241a <_ZNSaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
	}
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3728      	adds	r7, #40	; 0x28
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bdb0      	pop	{r4, r5, r7, pc}

08001ffc <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	    __base->_M_weak_assign(const_cast<_Yp2*>(__p), _M_refcount);
	}

      template<typename _Yp, typename _Yp2 = typename remove_cv<_Yp>::type>
	typename enable_if<!__has_esft_base<_Yp2>::value>::type
	_M_enable_shared_from_this_with(_Yp*) noexcept
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
	{ }
 8002006:	bf00      	nop
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <_ZNSaIN4tama7TextureEEC1ERKS1_>:
      allocator(const allocator& __a) throw()
 8002012:	b580      	push	{r7, lr}
 8002014:	b082      	sub	sp, #8
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
 800201a:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800201c:	6839      	ldr	r1, [r7, #0]
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f000 fac5 	bl	80025ae <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEEC1ERKS3_>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4618      	mov	r0, r3
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <_ZSt18__allocate_guardedISaIN4tama7TextureEEESt15__allocated_ptrIT_ERS4_>:
    __allocate_guarded(_Alloc& __a)
 800202e:	b580      	push	{r7, lr}
 8002030:	b082      	sub	sp, #8
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
 8002036:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 8002038:	2101      	movs	r1, #1
 800203a:	6838      	ldr	r0, [r7, #0]
 800203c:	f000 fac3 	bl	80025c6 <_ZNSt16allocator_traitsISaIN4tama7TextureEEE8allocateERS2_j>
 8002040:	4603      	mov	r3, r0
 8002042:	461a      	mov	r2, r3
 8002044:	6839      	ldr	r1, [r7, #0]
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 facc 	bl	80025e4 <_ZNSt15__allocated_ptrISaIN4tama7TextureEEEC1ERS2_PS1_>
    }
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	3708      	adds	r7, #8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <_ZNSt15__allocated_ptrISaIN4tama7TextureEEED1Ev>:
      ~__allocated_ptr()
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d007      	beq.n	8002074 <_ZNSt15__allocated_ptrISaIN4tama7TextureEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6818      	ldr	r0, [r3, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	2201      	movs	r2, #1
 800206e:	4619      	mov	r1, r3
 8002070:	f000 facc 	bl	800260c <_ZNSt16allocator_traitsISaIN4tama7TextureEEE10deallocateERS2_PS1_j>
      }
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4618      	mov	r0, r3
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <_ZNSt15__allocated_ptrISaIN4tama7TextureEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 800207e:	b580      	push	{r7, lr}
 8002080:	b082      	sub	sp, #8
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	4618      	mov	r0, r3
 800208c:	f000 facd 	bl	800262a <_ZNSt15__allocated_ptrISaIN4tama7TextureEEE10_S_raw_ptrEPS1_>
 8002090:	4603      	mov	r3, r0
 8002092:	4618      	mov	r0, r3
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <_ZNSt16allocator_traitsISaIN4tama7TextureEEE9constructIS1_JRjS5_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 800209a:	b590      	push	{r4, r7, lr}
 800209c:	b085      	sub	sp, #20
 800209e:	af00      	add	r7, sp, #0
 80020a0:	60f8      	str	r0, [r7, #12]
 80020a2:	60b9      	str	r1, [r7, #8]
 80020a4:	607a      	str	r2, [r7, #4]
 80020a6:	603b      	str	r3, [r7, #0]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f7ff f8c6 	bl	800123a <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 80020ae:	4604      	mov	r4, r0
 80020b0:	6838      	ldr	r0, [r7, #0]
 80020b2:	f7ff f8c2 	bl	800123a <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 80020b6:	4603      	mov	r3, r0
 80020b8:	4622      	mov	r2, r4
 80020ba:	68b9      	ldr	r1, [r7, #8]
 80020bc:	68f8      	ldr	r0, [r7, #12]
 80020be:	f000 fabf 	bl	8002640 <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE9constructIS2_JRjS5_EEEvPT_DpOT0_>
 80020c2:	bf00      	nop
 80020c4:	3714      	adds	r7, #20
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd90      	pop	{r4, r7, pc}

080020ca <_ZNSt15__allocated_ptrISaIN4tama7TextureEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 80020ca:	b480      	push	{r7}
 80020cc:	b083      	sub	sp, #12
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
 80020d2:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	605a      	str	r2, [r3, #4]
	return *this;
 80020da:	687b      	ldr	r3, [r7, #4]
      }
 80020dc:	4618      	mov	r0, r3
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <_ZSt4moveIRNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4618      	mov	r0, r3
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr

080020fe <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>:
        struct _Deleter
 80020fe:	b580      	push	{r7, lr}
 8002100:	b082      	sub	sp, #8
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
 8002106:	6039      	str	r1, [r7, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	683a      	ldr	r2, [r7, #0]
 800210c:	4611      	mov	r1, r2
 800210e:	4618      	mov	r0, r3
 8002110:	f7ff ff7f 	bl	8002012 <_ZNSaIN4tama7TextureEEC1ERKS1_>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4618      	mov	r0, r3
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <_ZSt4moveIRSaIN4tama7TextureEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800211e:	b480      	push	{r7}
 8002120:	b083      	sub	sp, #12
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4618      	mov	r0, r3
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama7TextureENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
 8002134:	b5b0      	push	{r4, r5, r7, lr}
 8002136:	b08a      	sub	sp, #40	; 0x28
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
 8002140:	603b      	str	r3, [r7, #0]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 8002148:	f107 031c 	add.w	r3, r7, #28
 800214c:	6839      	ldr	r1, [r7, #0]
 800214e:	4618      	mov	r0, r3
 8002150:	f000 fa98 	bl	8002684 <_ZNSaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	      auto __guard = std::__allocate_guarded(__a2);
 8002154:	f107 0314 	add.w	r3, r7, #20
 8002158:	f107 021c 	add.w	r2, r7, #28
 800215c:	4611      	mov	r1, r2
 800215e:	4618      	mov	r0, r3
 8002160:	f000 faa9 	bl	80026b6 <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>
	      _Sp_cd_type* __mem = __guard.get();
 8002164:	f107 0314 	add.w	r3, r7, #20
 8002168:	4618      	mov	r0, r3
 800216a:	f000 facc 	bl	8002706 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>
 800216e:	6278      	str	r0, [r7, #36]	; 0x24
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f7ff ffb9 	bl	80020e8 <_ZSt4moveIRNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8002176:	4602      	mov	r2, r0
 8002178:	f107 0320 	add.w	r3, r7, #32
 800217c:	4611      	mov	r1, r2
 800217e:	4618      	mov	r0, r3
 8002180:	f7ff ffbd 	bl	80020fe <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 8002184:	f107 0420 	add.w	r4, r7, #32
 8002188:	6838      	ldr	r0, [r7, #0]
 800218a:	f7ff ffc8 	bl	800211e <_ZSt4moveIRSaIN4tama7TextureEEEONSt16remove_referenceIT_E4typeEOS5_>
 800218e:	4605      	mov	r5, r0
 8002190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002192:	4619      	mov	r1, r3
 8002194:	2014      	movs	r0, #20
 8002196:	f7fe fd21 	bl	8000bdc <_ZnwjPv>
 800219a:	2800      	cmp	r0, #0
 800219c:	d004      	beq.n	80021a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama7TextureENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x74>
 800219e:	462b      	mov	r3, r5
 80021a0:	4622      	mov	r2, r4
 80021a2:	68b9      	ldr	r1, [r7, #8]
 80021a4:	f000 fae8 	bl	8002778 <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>
 80021a8:	f107 0320 	add.w	r3, r7, #32
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff fd2d 	bl	8001c0c <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	      _M_pi = __mem;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021b6:	601a      	str	r2, [r3, #0]
	      __guard = nullptr;
 80021b8:	f107 0314 	add.w	r3, r7, #20
 80021bc:	2100      	movs	r1, #0
 80021be:	4618      	mov	r0, r3
 80021c0:	f000 fb08 	bl	80027d4 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>
	      auto __guard = std::__allocate_guarded(__a2);
 80021c4:	f107 0314 	add.w	r3, r7, #20
 80021c8:	4618      	mov	r0, r3
 80021ca:	f000 fa87 	bl	80026dc <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 80021ce:	f107 031c 	add.w	r3, r7, #28
 80021d2:	4618      	mov	r0, r3
 80021d4:	f000 fa63 	bl	800269e <_ZNSaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
	}
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	4618      	mov	r0, r3
 80021dc:	3728      	adds	r7, #40	; 0x28
 80021de:	46bd      	mov	sp, r7
 80021e0:	bdb0      	pop	{r4, r5, r7, pc}

080021e2 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 80021e2:	b480      	push	{r7}
 80021e4:	b083      	sub	sp, #12
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
 80021ea:	6039      	str	r1, [r7, #0]
	{ }
 80021ec:	bf00      	nop
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <_ZNK9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8002200:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8002204:	4618      	mov	r0, r3
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEES7_EET0_T_SA_S9_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8002210:	b590      	push	{r4, r7, lr}
 8002212:	b087      	sub	sp, #28
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 8002220:	f107 0208 	add.w	r2, r7, #8
 8002224:	f107 030c 	add.w	r3, r7, #12
 8002228:	4611      	mov	r1, r2
 800222a:	4618      	mov	r0, r3
 800222c:	f000 fb01 	bl	8002832 <_ZStneIPSt10shared_ptrIN4tama8DrawableEEEbRKSt13move_iteratorIT_ES9_>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d016      	beq.n	8002264 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEES7_EET0_T_SA_S9_+0x54>
		std::_Construct(std::__addressof(*__cur), *__first);
 8002236:	6978      	ldr	r0, [r7, #20]
 8002238:	f7ff fbc8 	bl	80019cc <_ZSt11__addressofISt10shared_ptrIN4tama8DrawableEEEPT_RS4_>
 800223c:	4604      	mov	r4, r0
 800223e:	f107 030c 	add.w	r3, r7, #12
 8002242:	4618      	mov	r0, r3
 8002244:	f000 fb17 	bl	8002876 <_ZNKSt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEEdeEv>
 8002248:	4603      	mov	r3, r0
 800224a:	4619      	mov	r1, r3
 800224c:	4620      	mov	r0, r4
 800224e:	f000 fb29 	bl	80028a4 <_ZSt10_ConstructISt10shared_ptrIN4tama8DrawableEEJS3_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 8002252:	f107 030c 	add.w	r3, r7, #12
 8002256:	4618      	mov	r0, r3
 8002258:	f000 fafc 	bl	8002854 <_ZNSt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEEppEv>
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	3308      	adds	r3, #8
 8002260:	617b      	str	r3, [r7, #20]
 8002262:	e7dd      	b.n	8002220 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEES7_EET0_T_SA_S9_+0x10>
	      return __cur;
 8002264:	697b      	ldr	r3, [r7, #20]
	}
 8002266:	4618      	mov	r0, r3
 8002268:	371c      	adds	r7, #28
 800226a:	46bd      	mov	sp, r7
 800226c:	bd90      	pop	{r4, r7, pc}

0800226e <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800226e:	b480      	push	{r7}
 8002270:	b083      	sub	sp, #12
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
 8002276:	6039      	str	r1, [r7, #0]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4618      	mov	r0, r3
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr

08002286 <_ZNSt16allocator_traitsISaIN4tama5SceneEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8002286:	b580      	push	{r7, lr}
 8002288:	b082      	sub	sp, #8
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
 800228e:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8002290:	2200      	movs	r2, #0
 8002292:	6839      	ldr	r1, [r7, #0]
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f000 fb1e 	bl	80028d6 <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEE8allocateEjPKv>
 800229a:	4603      	mov	r3, r0
 800229c:	4618      	mov	r0, r3
 800229e:	3708      	adds	r7, #8
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <_ZNSt15__allocated_ptrISaIN4tama5SceneEEEC1ERS2_PS1_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 80022b0:	68b8      	ldr	r0, [r7, #8]
 80022b2:	f000 fb2e 	bl	8002912 <_ZSt11__addressofISaIN4tama5SceneEEEPT_RS3_>
 80022b6:	4602      	mov	r2, r0
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	605a      	str	r2, [r3, #4]
      { }
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	4618      	mov	r0, r3
 80022c6:	3710      	adds	r7, #16
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}

080022cc <_ZNSt16allocator_traitsISaIN4tama5SceneEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	68b9      	ldr	r1, [r7, #8]
 80022dc:	68f8      	ldr	r0, [r7, #12]
 80022de:	f000 fb23 	bl	8002928 <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEE10deallocateEPS2_j>
 80022e2:	bf00      	nop
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <_ZNSt15__allocated_ptrISaIN4tama5SceneEEE10_S_raw_ptrEPS1_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 80022ea:	b480      	push	{r7}
 80022ec:	b083      	sub	sp, #12
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4618      	mov	r0, r3
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <_ZN4tama14ChangeObserverC1ERKS0_>:
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
 800230a:	4a05      	ldr	r2, [pc, #20]	; (8002320 <_ZN4tama14ChangeObserverC1ERKS0_+0x20>)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	601a      	str	r2, [r3, #0]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4618      	mov	r0, r3
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	0800ddcc 	.word	0x0800ddcc

08002324 <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	601a      	str	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	1d1a      	adds	r2, r3, #4
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	3304      	adds	r3, #4
 800233e:	4619      	mov	r1, r3
 8002340:	4610      	mov	r0, r2
 8002342:	f7fe f903 	bl	800054c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4618      	mov	r0, r3
 800234a:	3708      	adds	r7, #8
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEC1ERKS2_>:
      shared_ptr(const shared_ptr&) noexcept = default;
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	4611      	mov	r1, r2
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff ffdf 	bl	8002324 <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4618      	mov	r0, r3
 800236a:	3708      	adds	r7, #8
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}

08002370 <_ZN4tama5SceneC1ERKS0_>:
#include "../drawable/Drawable.h"
#include "../../../../Configuration/display.config.h"

namespace tama
{
    class Scene : public ChangeObserver
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	683a      	ldr	r2, [r7, #0]
 800237e:	4611      	mov	r1, r2
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff ffbd 	bl	8002300 <_ZN4tama14ChangeObserverC1ERKS0_>
 8002386:	4a10      	ldr	r2, [pc, #64]	; (80023c8 <_ZN4tama5SceneC1ERKS0_+0x58>)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	601a      	str	r2, [r3, #0]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	1d1a      	adds	r2, r3, #4
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	3304      	adds	r3, #4
 8002394:	4619      	mov	r1, r3
 8002396:	4610      	mov	r0, r2
 8002398:	f7ff ffda 	bl	8002350 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEC1ERKS2_>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f103 020c 	add.w	r2, r3, #12
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	330c      	adds	r3, #12
 80023a6:	4619      	mov	r1, r3
 80023a8:	4610      	mov	r0, r2
 80023aa:	f000 faca 	bl	8002942 <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EEC1ERKS5_>
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	699a      	ldr	r2, [r3, #24]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	619a      	str	r2, [r3, #24]
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	69da      	ldr	r2, [r3, #28]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	61da      	str	r2, [r3, #28]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4618      	mov	r0, r3
 80023c2:	3708      	adds	r7, #8
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	0800ddb0 	.word	0x0800ddb0

080023cc <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEE9constructIS2_JRS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80023cc:	b590      	push	{r4, r7, lr}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f7fe fee8 	bl	80011ae <_ZSt7forwardIRN4tama5SceneEEOT_RNSt16remove_referenceIS3_E4typeE>
 80023de:	4604      	mov	r4, r0
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	4619      	mov	r1, r3
 80023e4:	2020      	movs	r0, #32
 80023e6:	f7fe fbf9 	bl	8000bdc <_ZnwjPv>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d003      	beq.n	80023f8 <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEE9constructIS2_JRS2_EEEvPT_DpOT0_+0x2c>
 80023f0:	4621      	mov	r1, r4
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7ff ffbc 	bl	8002370 <_ZN4tama5SceneC1ERKS0_>
 80023f8:	bf00      	nop
 80023fa:	3714      	adds	r7, #20
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd90      	pop	{r4, r7, pc}

08002400 <_ZNSaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) throw() { }
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f000 fad6 	bl	80029bc <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4618      	mov	r0, r3
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <_ZNSaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>:
      ~allocator() throw() { }
 800241a:	b580      	push	{r7, lr}
 800241c:	b082      	sub	sp, #8
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f000 fad5 	bl	80029d2 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	4618      	mov	r0, r3
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>:
    __allocate_guarded(_Alloc& __a)
 8002432:	b580      	push	{r7, lr}
 8002434:	b082      	sub	sp, #8
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
 800243a:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 800243c:	2101      	movs	r1, #1
 800243e:	6838      	ldr	r0, [r7, #0]
 8002440:	f000 fad2 	bl	80029e8 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>
 8002444:	4603      	mov	r3, r0
 8002446:	461a      	mov	r2, r3
 8002448:	6839      	ldr	r1, [r7, #0]
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f000 fadb 	bl	8002a06 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
    }
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	3708      	adds	r7, #8
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>:
      ~__allocated_ptr()
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d007      	beq.n	8002478 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6818      	ldr	r0, [r3, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	2201      	movs	r2, #1
 8002472:	4619      	mov	r1, r3
 8002474:	f000 fadb 	bl	8002a2e <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>
      }
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4618      	mov	r0, r3
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 8002482:	b580      	push	{r7, lr}
 8002484:	b082      	sub	sp, #8
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	4618      	mov	r0, r3
 8002490:	f000 fadc 	bl	8002a4c <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>
 8002494:	4603      	mov	r3, r0
 8002496:	4618      	mov	r0, r3
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, false>
 800249e:	b580      	push	{r7, lr}
 80024a0:	b082      	sub	sp, #8
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7ff fb17 	bl	8001adc <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4618      	mov	r0, r3
 80024b2:	3708      	adds	r7, #8
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama5SceneEELb1EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f7ff f877 	bl	80015b4 <_ZNSaIN4tama5SceneEED1Ev>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4618      	mov	r0, r3
 80024ca:	3708      	adds	r7, #8
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>:
      class _Impl : _Sp_ebo_helper<0, _Deleter>, _Sp_ebo_helper<1, _Alloc>
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	3301      	adds	r3, #1
 80024dc:	4618      	mov	r0, r3
 80024de:	f7ff ffeb 	bl	80024b8 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama5SceneEELb1EED1Ev>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7ff ffda 	bl	800249e <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4618      	mov	r0, r3
 80024ee:	3708      	adds	r7, #8
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 80024f4:	b590      	push	{r4, r7, lr}
 80024f6:	b087      	sub	sp, #28
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
 8002500:	603b      	str	r3, [r7, #0]
      : _M_impl(__p, std::move(__d), __a) { }
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	4618      	mov	r0, r3
 8002506:	f000 faad 	bl	8002a64 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800250a:	4a10      	ldr	r2, [pc, #64]	; (800254c <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_+0x58>)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	601a      	str	r2, [r3, #0]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f103 040c 	add.w	r4, r3, #12
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f7ff fcf3 	bl	8001f02 <_ZSt4moveIRNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800251c:	4602      	mov	r2, r0
 800251e:	f107 0314 	add.w	r3, r7, #20
 8002522:	4611      	mov	r1, r2
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff fcf7 	bl	8001f18 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 800252a:	f107 0214 	add.w	r2, r7, #20
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	68b9      	ldr	r1, [r7, #8]
 8002532:	4620      	mov	r0, r4
 8002534:	f000 faac 	bl	8002a90 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>
 8002538:	f107 0314 	add.w	r3, r7, #20
 800253c:	4618      	mov	r0, r3
 800253e:	f7ff facd 	bl	8001adc <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	4618      	mov	r0, r3
 8002546:	371c      	adds	r7, #28
 8002548:	46bd      	mov	sp, r7
 800254a:	bd90      	pop	{r4, r7, pc}
 800254c:	0800dd94 	.word	0x0800dd94

08002550 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	605a      	str	r2, [r3, #4]
	return *this;
 8002560:	687b      	ldr	r3, [r7, #4]
      }
 8002562:	4618      	mov	r0, r3
 8002564:	370c      	adds	r7, #12
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr

0800256e <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>:
          void operator()(typename _Alloc::value_type* __ptr)
 800256e:	b590      	push	{r4, r7, lr}
 8002570:	b085      	sub	sp, #20
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
 8002576:	6039      	str	r1, [r7, #0]
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 8002578:	6879      	ldr	r1, [r7, #4]
 800257a:	f107 0308 	add.w	r3, r7, #8
 800257e:	683a      	ldr	r2, [r7, #0]
 8002580:	4618      	mov	r0, r3
 8002582:	f7ff fe8f 	bl	80022a4 <_ZNSt15__allocated_ptrISaIN4tama5SceneEEEC1ERS2_PS1_>
	    allocator_traits<_Alloc>::destroy(_M_alloc, __guard.get());
 8002586:	687c      	ldr	r4, [r7, #4]
 8002588:	f107 0308 	add.w	r3, r7, #8
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff fc88 	bl	8001ea2 <_ZNSt15__allocated_ptrISaIN4tama5SceneEEE3getEv>
 8002592:	4603      	mov	r3, r0
 8002594:	4619      	mov	r1, r3
 8002596:	4620      	mov	r0, r4
 8002598:	f000 fa98 	bl	8002acc <_ZNSt16allocator_traitsISaIN4tama5SceneEEE7destroyIS1_EEvRS2_PT_>
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 800259c:	f107 0308 	add.w	r3, r7, #8
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7ff fc69 	bl	8001e78 <_ZNSt15__allocated_ptrISaIN4tama5SceneEEED1Ev>
          }
 80025a6:	bf00      	nop
 80025a8:	3714      	adds	r7, #20
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd90      	pop	{r4, r7, pc}

080025ae <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 80025ae:	b480      	push	{r7}
 80025b0:	b083      	sub	sp, #12
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
 80025b6:	6039      	str	r1, [r7, #0]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4618      	mov	r0, r3
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr

080025c6 <_ZNSt16allocator_traitsISaIN4tama7TextureEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b082      	sub	sp, #8
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
 80025ce:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80025d0:	2200      	movs	r2, #0
 80025d2:	6839      	ldr	r1, [r7, #0]
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f000 fa86 	bl	8002ae6 <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE8allocateEjPKv>
 80025da:	4603      	mov	r3, r0
 80025dc:	4618      	mov	r0, r3
 80025de:	3708      	adds	r7, #8
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <_ZNSt15__allocated_ptrISaIN4tama7TextureEEEC1ERS2_PS1_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 80025f0:	68b8      	ldr	r0, [r7, #8]
 80025f2:	f000 fa96 	bl	8002b22 <_ZSt11__addressofISaIN4tama7TextureEEEPT_RS3_>
 80025f6:	4602      	mov	r2, r0
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	601a      	str	r2, [r3, #0]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	605a      	str	r2, [r3, #4]
      { }
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	4618      	mov	r0, r3
 8002606:	3710      	adds	r7, #16
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}

0800260c <_ZNSt16allocator_traitsISaIN4tama7TextureEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	68b9      	ldr	r1, [r7, #8]
 800261c:	68f8      	ldr	r0, [r7, #12]
 800261e:	f000 fa8b 	bl	8002b38 <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE10deallocateEPS2_j>
 8002622:	bf00      	nop
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <_ZNSt15__allocated_ptrISaIN4tama7TextureEEE10_S_raw_ptrEPS1_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 800262a:	b480      	push	{r7}
 800262c:	b083      	sub	sp, #12
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4618      	mov	r0, r3
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE9constructIS2_JRjS5_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8002640:	b5b0      	push	{r4, r5, r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
 800264c:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f7fe fdf3 	bl	800123a <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 8002654:	4603      	mov	r3, r0
 8002656:	681c      	ldr	r4, [r3, #0]
 8002658:	6838      	ldr	r0, [r7, #0]
 800265a:	f7fe fdee 	bl	800123a <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 800265e:	4603      	mov	r3, r0
 8002660:	681d      	ldr	r5, [r3, #0]
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	4619      	mov	r1, r3
 8002666:	2010      	movs	r0, #16
 8002668:	f7fe fab8 	bl	8000bdc <_ZnwjPv>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d004      	beq.n	800267c <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE9constructIS2_JRjS5_EEEvPT_DpOT0_+0x3c>
 8002672:	462a      	mov	r2, r5
 8002674:	4621      	mov	r1, r4
 8002676:	4618      	mov	r0, r3
 8002678:	f7fe fabc 	bl	8000bf4 <_ZN4tama7TextureC1Ejj>
 800267c:	bf00      	nop
 800267e:	3710      	adds	r7, #16
 8002680:	46bd      	mov	sp, r7
 8002682:	bdb0      	pop	{r4, r5, r7, pc}

08002684 <_ZNSaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) throw() { }
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f000 fa5f 	bl	8002b52 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4618      	mov	r0, r3
 8002698:	3708      	adds	r7, #8
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <_ZNSaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>:
      ~allocator() throw() { }
 800269e:	b580      	push	{r7, lr}
 80026a0:	b082      	sub	sp, #8
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 fa5e 	bl	8002b68 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	4618      	mov	r0, r3
 80026b0:	3708      	adds	r7, #8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>:
    __allocate_guarded(_Alloc& __a)
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b082      	sub	sp, #8
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
 80026be:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 80026c0:	2101      	movs	r1, #1
 80026c2:	6838      	ldr	r0, [r7, #0]
 80026c4:	f000 fa5b 	bl	8002b7e <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>
 80026c8:	4603      	mov	r3, r0
 80026ca:	461a      	mov	r2, r3
 80026cc:	6839      	ldr	r1, [r7, #0]
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 fa64 	bl	8002b9c <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
    }
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	3708      	adds	r7, #8
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>:
      ~__allocated_ptr()
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d007      	beq.n	80026fc <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6818      	ldr	r0, [r3, #0]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	2201      	movs	r2, #1
 80026f6:	4619      	mov	r1, r3
 80026f8:	f000 fa64 	bl	8002bc4 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>
      }
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4618      	mov	r0, r3
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 8002706:	b580      	push	{r7, lr}
 8002708:	b082      	sub	sp, #8
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	4618      	mov	r0, r3
 8002714:	f000 fa65 	bl	8002be2 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>
 8002718:	4603      	mov	r3, r0
 800271a:	4618      	mov	r0, r3
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, false>
 8002722:	b580      	push	{r7, lr}
 8002724:	b082      	sub	sp, #8
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4618      	mov	r0, r3
 800272e:	f7ff fa6d 	bl	8001c0c <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4618      	mov	r0, r3
 8002736:	3708      	adds	r7, #8
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama7TextureEELb1EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f7fe ff7e 	bl	8001646 <_ZNSaIN4tama7TextureEED1Ev>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4618      	mov	r0, r3
 800274e:	3708      	adds	r7, #8
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>:
      class _Impl : _Sp_ebo_helper<0, _Deleter>, _Sp_ebo_helper<1, _Alloc>
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	3301      	adds	r3, #1
 8002760:	4618      	mov	r0, r3
 8002762:	f7ff ffeb 	bl	800273c <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama7TextureEELb1EED1Ev>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4618      	mov	r0, r3
 800276a:	f7ff ffda 	bl	8002722 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4618      	mov	r0, r3
 8002772:	3708      	adds	r7, #8
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 8002778:	b590      	push	{r4, r7, lr}
 800277a:	b087      	sub	sp, #28
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]
 8002784:	603b      	str	r3, [r7, #0]
      : _M_impl(__p, std::move(__d), __a) { }
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	4618      	mov	r0, r3
 800278a:	f000 f96b 	bl	8002a64 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800278e:	4a10      	ldr	r2, [pc, #64]	; (80027d0 <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_+0x58>)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	601a      	str	r2, [r3, #0]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f103 040c 	add.w	r4, r3, #12
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f7ff fca4 	bl	80020e8 <_ZSt4moveIRNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 80027a0:	4602      	mov	r2, r0
 80027a2:	f107 0314 	add.w	r3, r7, #20
 80027a6:	4611      	mov	r1, r2
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7ff fca8 	bl	80020fe <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 80027ae:	f107 0214 	add.w	r2, r7, #20
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	68b9      	ldr	r1, [r7, #8]
 80027b6:	4620      	mov	r0, r4
 80027b8:	f000 fa1e 	bl	8002bf8 <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>
 80027bc:	f107 0314 	add.w	r3, r7, #20
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7ff fa23 	bl	8001c0c <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	4618      	mov	r0, r3
 80027ca:	371c      	adds	r7, #28
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd90      	pop	{r4, r7, pc}
 80027d0:	0800dd78 	.word	0x0800dd78

080027d4 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	605a      	str	r2, [r3, #4]
	return *this;
 80027e4:	687b      	ldr	r3, [r7, #4]
      }
 80027e6:	4618      	mov	r0, r3
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr

080027f2 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>:
          void operator()(typename _Alloc::value_type* __ptr)
 80027f2:	b590      	push	{r4, r7, lr}
 80027f4:	b085      	sub	sp, #20
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
 80027fa:	6039      	str	r1, [r7, #0]
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 80027fc:	6879      	ldr	r1, [r7, #4]
 80027fe:	f107 0308 	add.w	r3, r7, #8
 8002802:	683a      	ldr	r2, [r7, #0]
 8002804:	4618      	mov	r0, r3
 8002806:	f7ff feed 	bl	80025e4 <_ZNSt15__allocated_ptrISaIN4tama7TextureEEEC1ERS2_PS1_>
	    allocator_traits<_Alloc>::destroy(_M_alloc, __guard.get());
 800280a:	687c      	ldr	r4, [r7, #4]
 800280c:	f107 0308 	add.w	r3, r7, #8
 8002810:	4618      	mov	r0, r3
 8002812:	f7ff fc34 	bl	800207e <_ZNSt15__allocated_ptrISaIN4tama7TextureEEE3getEv>
 8002816:	4603      	mov	r3, r0
 8002818:	4619      	mov	r1, r3
 800281a:	4620      	mov	r0, r4
 800281c:	f000 fa0a 	bl	8002c34 <_ZNSt16allocator_traitsISaIN4tama7TextureEEE7destroyIS1_EEvRS2_PT_>
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 8002820:	f107 0308 	add.w	r3, r7, #8
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff fc15 	bl	8002054 <_ZNSt15__allocated_ptrISaIN4tama7TextureEEED1Ev>
          }
 800282a:	bf00      	nop
 800282c:	3714      	adds	r7, #20
 800282e:	46bd      	mov	sp, r7
 8002830:	bd90      	pop	{r4, r7, pc}

08002832 <_ZStneIPSt10shared_ptrIN4tama8DrawableEEEbRKSt13move_iteratorIT_ES9_>:
    operator!=(const move_iterator<_Iterator>& __x,
 8002832:	b580      	push	{r7, lr}
 8002834:	b082      	sub	sp, #8
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
 800283a:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 800283c:	6839      	ldr	r1, [r7, #0]
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f000 fa05 	bl	8002c4e <_ZSteqIPSt10shared_ptrIN4tama8DrawableEEEbRKSt13move_iteratorIT_ES9_>
 8002844:	4603      	mov	r3, r0
 8002846:	f083 0301 	eor.w	r3, r3, #1
 800284a:	b2db      	uxtb	r3, r3
 800284c:	4618      	mov	r0, r3
 800284e:	3708      	adds	r7, #8
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <_ZNSt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEEppEv>:
      operator++()
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
	++_M_current;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f103 0208 	add.w	r2, r3, #8
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	601a      	str	r2, [r3, #0]
	return *this;
 8002868:	687b      	ldr	r3, [r7, #4]
      }
 800286a:	4618      	mov	r0, r3
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr

08002876 <_ZNKSt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEEdeEv>:
      operator*() const
 8002876:	b480      	push	{r7}
 8002878:	b083      	sub	sp, #12
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4618      	mov	r0, r3
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr

0800288e <_ZSt7forwardISt10shared_ptrIN4tama8DrawableEEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800288e:	b480      	push	{r7}
 8002890:	b083      	sub	sp, #12
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4618      	mov	r0, r3
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <_ZSt10_ConstructISt10shared_ptrIN4tama8DrawableEEJS3_EEvPT_DpOT0_>:
    _Construct(_T1* __p, _Args&&... __args)
 80028a4:	b590      	push	{r4, r7, lr}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
 80028ae:	6838      	ldr	r0, [r7, #0]
 80028b0:	f7ff ffed 	bl	800288e <_ZSt7forwardISt10shared_ptrIN4tama8DrawableEEEOT_RNSt16remove_referenceIS4_E4typeE>
 80028b4:	4604      	mov	r4, r0
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4619      	mov	r1, r3
 80028ba:	2008      	movs	r0, #8
 80028bc:	f7fe f98e 	bl	8000bdc <_ZnwjPv>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d003      	beq.n	80028ce <_ZSt10_ConstructISt10shared_ptrIN4tama8DrawableEEJS3_EEvPT_DpOT0_+0x2a>
 80028c6:	4621      	mov	r1, r4
 80028c8:	4618      	mov	r0, r3
 80028ca:	f000 f9e1 	bl	8002c90 <_ZNSt10shared_ptrIN4tama8DrawableEEC1EOS2_>
 80028ce:	bf00      	nop
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd90      	pop	{r4, r7, pc}

080028d6 <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b084      	sub	sp, #16
 80028da:	af00      	add	r7, sp, #0
 80028dc:	60f8      	str	r0, [r7, #12]
 80028de:	60b9      	str	r1, [r7, #8]
 80028e0:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 80028e2:	68f8      	ldr	r0, [r7, #12]
 80028e4:	f000 f9e7 	bl	8002cb6 <_ZNK9__gnu_cxx13new_allocatorIN4tama5SceneEE8max_sizeEv>
 80028e8:	4602      	mov	r2, r0
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	4293      	cmp	r3, r2
 80028ee:	bf8c      	ite	hi
 80028f0:	2301      	movhi	r3, #1
 80028f2:	2300      	movls	r3, #0
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80028fa:	f00b f8a4 	bl	800da46 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	015b      	lsls	r3, r3, #5
 8002902:	4618      	mov	r0, r3
 8002904:	f00b f873 	bl	800d9ee <_Znwj>
 8002908:	4603      	mov	r3, r0
      }
 800290a:	4618      	mov	r0, r3
 800290c:	3710      	adds	r7, #16
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <_ZSt11__addressofISaIN4tama5SceneEEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8002912:	b480      	push	{r7}
 8002914:	b083      	sub	sp, #12
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4618      	mov	r0, r3
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8002934:	68b8      	ldr	r0, [r7, #8]
 8002936:	f00b f873 	bl	800da20 <_ZdlPv>
      }
 800293a:	bf00      	nop
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EEC1ERKS5_>:
      vector(const vector& __x)
 8002942:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002944:	b085      	sub	sp, #20
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
 800294a:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 800294c:	687c      	ldr	r4, [r7, #4]
 800294e:	6838      	ldr	r0, [r7, #0]
 8002950:	f7ff f870 	bl	8001a34 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE4sizeEv>
 8002954:	4605      	mov	r5, r0
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff fa22 	bl	8001da2 <_ZNKSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE19_M_get_Tp_allocatorEv>
 800295e:	4602      	mov	r2, r0
 8002960:	f107 030c 	add.w	r3, r7, #12
 8002964:	4611      	mov	r1, r2
 8002966:	4618      	mov	r0, r3
 8002968:	f000 f9b1 	bl	8002cce <_ZN9__gnu_cxx14__alloc_traitsISaISt10shared_ptrIN4tama8DrawableEEEE17_S_select_on_copyERKS5_>
 800296c:	f107 030c 	add.w	r3, r7, #12
 8002970:	461a      	mov	r2, r3
 8002972:	4629      	mov	r1, r5
 8002974:	4620      	mov	r0, r4
 8002976:	f000 f9b8 	bl	8002cea <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EEC1EjRKS4_>
 800297a:	f107 030c 	add.w	r3, r7, #12
 800297e:	4618      	mov	r0, r3
 8002980:	f7fe fec3 	bl	800170a <_ZNSaISt10shared_ptrIN4tama8DrawableEEED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8002984:	6838      	ldr	r0, [r7, #0]
 8002986:	f000 f9c4 	bl	8002d12 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE5beginEv>
 800298a:	4605      	mov	r5, r0
 800298c:	6838      	ldr	r0, [r7, #0]
 800298e:	f000 f9d4 	bl	8002d3a <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE3endEv>
 8002992:	4606      	mov	r6, r0
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4618      	mov	r0, r3
 800299c:	f7fe fd2f 	bl	80013fe <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE19_M_get_Tp_allocatorEv>
 80029a0:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 80029a2:	4622      	mov	r2, r4
 80029a4:	4631      	mov	r1, r6
 80029a6:	4628      	mov	r0, r5
 80029a8:	f000 f9db 	bl	8002d62 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS5_SaIS5_EEEEPS5_S5_ET0_T_SE_SD_RSaIT1_E>
 80029ac:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	605a      	str	r2, [r3, #4]
      }
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4618      	mov	r0, r3
 80029b6:	3714      	adds	r7, #20
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080029bc <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4618      	mov	r0, r3
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr

080029d2 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80029d2:	b480      	push	{r7}
 80029d4:	b083      	sub	sp, #12
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4618      	mov	r0, r3
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>:
      allocate(allocator_type& __a, size_type __n)
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80029f2:	2200      	movs	r2, #0
 80029f4:	6839      	ldr	r1, [r7, #0]
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 f9c4 	bl	8002d84 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>
 80029fc:	4603      	mov	r3, r0
 80029fe:	4618      	mov	r0, r3
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b084      	sub	sp, #16
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	60f8      	str	r0, [r7, #12]
 8002a0e:	60b9      	str	r1, [r7, #8]
 8002a10:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8002a12:	68b8      	ldr	r0, [r7, #8]
 8002a14:	f000 f9d7 	bl	8002dc6 <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	601a      	str	r2, [r3, #0]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	605a      	str	r2, [r3, #4]
      { }
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	4618      	mov	r0, r3
 8002a28:	3710      	adds	r7, #16
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b084      	sub	sp, #16
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	60f8      	str	r0, [r7, #12]
 8002a36:	60b9      	str	r1, [r7, #8]
 8002a38:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	68b9      	ldr	r1, [r7, #8]
 8002a3e:	68f8      	ldr	r0, [r7, #12]
 8002a40:	f000 f9cc 	bl	8002ddc <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>
 8002a44:	bf00      	nop
 8002a46:	3710      	adds	r7, #16
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4618      	mov	r0, r3
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
	...

08002a64 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      _Sp_counted_base() noexcept
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
      : _M_use_count(1), _M_weak_count(1) { }
 8002a6c:	4a07      	ldr	r2, [pc, #28]	; (8002a8c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev+0x28>)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	601a      	str	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2201      	movs	r2, #1
 8002a76:	605a      	str	r2, [r3, #4]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	609a      	str	r2, [r3, #8]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4618      	mov	r0, r3
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr
 8002a8c:	0800ddd8 	.word	0x0800ddd8

08002a90 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 8002a90:	b590      	push	{r4, r7, lr}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]
 8002a9c:	603b      	str	r3, [r7, #0]
	: _M_ptr(__p), _Del_base(std::move(__d)), _Alloc_base(__a)
 8002a9e:	68fc      	ldr	r4, [r7, #12]
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f7ff fa2e 	bl	8001f02 <_ZSt4moveIRNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	4620      	mov	r0, r4
 8002aac:	f000 f9a3 	bl	8002df6 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	6839      	ldr	r1, [r7, #0]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f000 f9b0 	bl	8002e1c <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama5SceneEELb1EEC1ERKS2_>
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	68ba      	ldr	r2, [r7, #8]
 8002ac0:	605a      	str	r2, [r3, #4]
	{ }
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3714      	adds	r7, #20
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd90      	pop	{r4, r7, pc}

08002acc <_ZNSt16allocator_traitsISaIN4tama5SceneEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 8002ad6:	6839      	ldr	r1, [r7, #0]
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f000 f9c5 	bl	8002e68 <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEE7destroyIS2_EEvPT_>
 8002ade:	bf00      	nop
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b084      	sub	sp, #16
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	60f8      	str	r0, [r7, #12]
 8002aee:	60b9      	str	r1, [r7, #8]
 8002af0:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8002af2:	68f8      	ldr	r0, [r7, #12]
 8002af4:	f000 f9c4 	bl	8002e80 <_ZNK9__gnu_cxx13new_allocatorIN4tama7TextureEE8max_sizeEv>
 8002af8:	4602      	mov	r2, r0
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	4293      	cmp	r3, r2
 8002afe:	bf8c      	ite	hi
 8002b00:	2301      	movhi	r3, #1
 8002b02:	2300      	movls	r3, #0
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8002b0a:	f00a ff9c 	bl	800da46 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	011b      	lsls	r3, r3, #4
 8002b12:	4618      	mov	r0, r3
 8002b14:	f00a ff6b 	bl	800d9ee <_Znwj>
 8002b18:	4603      	mov	r3, r0
      }
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3710      	adds	r7, #16
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <_ZSt11__addressofISaIN4tama7TextureEEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8002b22:	b480      	push	{r7}
 8002b24:	b083      	sub	sp, #12
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8002b44:	68b8      	ldr	r0, [r7, #8]
 8002b46:	f00a ff6b 	bl	800da20 <_ZdlPv>
      }
 8002b4a:	bf00      	nop
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002b52:	b480      	push	{r7}
 8002b54:	b083      	sub	sp, #12
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	4618      	mov	r0, r3
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr

08002b7e <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>:
      allocate(allocator_type& __a, size_type __n)
 8002b7e:	b580      	push	{r7, lr}
 8002b80:	b082      	sub	sp, #8
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
 8002b86:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8002b88:	2200      	movs	r2, #0
 8002b8a:	6839      	ldr	r1, [r7, #0]
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f000 f983 	bl	8002e98 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>
 8002b92:	4603      	mov	r3, r0
 8002b94:	4618      	mov	r0, r3
 8002b96:	3708      	adds	r7, #8
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8002ba8:	68b8      	ldr	r0, [r7, #8]
 8002baa:	f000 f996 	bl	8002eda <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	601a      	str	r2, [r3, #0]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	605a      	str	r2, [r3, #4]
      { }
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3710      	adds	r7, #16
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	68b9      	ldr	r1, [r7, #8]
 8002bd4:	68f8      	ldr	r0, [r7, #12]
 8002bd6:	f000 f98b 	bl	8002ef0 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>
 8002bda:	bf00      	nop
 8002bdc:	3710      	adds	r7, #16
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 8002be2:	b480      	push	{r7}
 8002be4:	b083      	sub	sp, #12
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4618      	mov	r0, r3
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 8002bf8:	b590      	push	{r4, r7, lr}
 8002bfa:	b085      	sub	sp, #20
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
 8002c04:	603b      	str	r3, [r7, #0]
	: _M_ptr(__p), _Del_base(std::move(__d)), _Alloc_base(__a)
 8002c06:	68fc      	ldr	r4, [r7, #12]
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f7ff fa6d 	bl	80020e8 <_ZSt4moveIRNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	4619      	mov	r1, r3
 8002c12:	4620      	mov	r0, r4
 8002c14:	f000 f979 	bl	8002f0a <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	6839      	ldr	r1, [r7, #0]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f000 f986 	bl	8002f30 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama7TextureEELb1EEC1ERKS2_>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	68ba      	ldr	r2, [r7, #8]
 8002c28:	605a      	str	r2, [r3, #4]
	{ }
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3714      	adds	r7, #20
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd90      	pop	{r4, r7, pc}

08002c34 <_ZNSt16allocator_traitsISaIN4tama7TextureEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 8002c3e:	6839      	ldr	r1, [r7, #0]
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f000 f983 	bl	8002f4c <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE7destroyIS2_EEvPT_>
 8002c46:	bf00      	nop
 8002c48:	3708      	adds	r7, #8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <_ZSteqIPSt10shared_ptrIN4tama8DrawableEEEbRKSt13move_iteratorIT_ES9_>:
    operator==(const move_iterator<_Iterator>& __x,
 8002c4e:	b590      	push	{r4, r7, lr}
 8002c50:	b083      	sub	sp, #12
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
 8002c56:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f000 f985 	bl	8002f68 <_ZNKSt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEE4baseEv>
 8002c5e:	4604      	mov	r4, r0
 8002c60:	6838      	ldr	r0, [r7, #0]
 8002c62:	f000 f981 	bl	8002f68 <_ZNKSt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEE4baseEv>
 8002c66:	4603      	mov	r3, r0
 8002c68:	429c      	cmp	r4, r3
 8002c6a:	bf0c      	ite	eq
 8002c6c:	2301      	moveq	r3, #1
 8002c6e:	2300      	movne	r3, #0
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	4618      	mov	r0, r3
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd90      	pop	{r4, r7, pc}

08002c7a <_ZSt4moveIRSt10shared_ptrIN4tama8DrawableEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8002c7a:	b480      	push	{r7}
 8002c7c:	b083      	sub	sp, #12
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4618      	mov	r0, r3
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <_ZNSt10shared_ptrIN4tama8DrawableEEC1EOS2_>:
      shared_ptr(shared_ptr&& __r) noexcept
 8002c90:	b590      	push	{r4, r7, lr}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
      : __shared_ptr<_Tp>(std::move(__r)) { }
 8002c9a:	687c      	ldr	r4, [r7, #4]
 8002c9c:	6838      	ldr	r0, [r7, #0]
 8002c9e:	f7ff ffec 	bl	8002c7a <_ZSt4moveIRSt10shared_ptrIN4tama8DrawableEEEONSt16remove_referenceIT_E4typeEOS6_>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	4620      	mov	r0, r4
 8002ca8:	f000 f96a 	bl	8002f80 <_ZNSt12__shared_ptrIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0EEC1EOS4_>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd90      	pop	{r4, r7, pc}

08002cb6 <_ZNK9__gnu_cxx13new_allocatorIN4tama5SceneEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8002cb6:	b480      	push	{r7}
 8002cb8:	b083      	sub	sp, #12
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8002cbe:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr

08002cce <_ZN9__gnu_cxx14__alloc_traitsISaISt10shared_ptrIN4tama8DrawableEEEE17_S_select_on_copyERKS5_>:
    template<typename _Ptr>
      static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type
      destroy(_Alloc& __a, _Ptr __p)
      { _Base_type::destroy(__a, std::addressof(*__p)); }

    static _Alloc _S_select_on_copy(const _Alloc& __a)
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b082      	sub	sp, #8
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
 8002cd6:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6839      	ldr	r1, [r7, #0]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f000 f96d 	bl	8002fbc <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama8DrawableEEEE37select_on_container_copy_constructionERKS4_>
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	3708      	adds	r7, #8
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EEC1EjRKS4_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b084      	sub	sp, #16
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	60f8      	str	r0, [r7, #12]
 8002cf2:	60b9      	str	r1, [r7, #8]
 8002cf4:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6879      	ldr	r1, [r7, #4]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f000 f979 	bl	8002ff2 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE12_Vector_implC1ERKS4_>
      { _M_create_storage(__n); }
 8002d00:	68b9      	ldr	r1, [r7, #8]
 8002d02:	68f8      	ldr	r0, [r7, #12]
 8002d04:	f000 f98c 	bl	8003020 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE17_M_create_storageEj>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3710      	adds	r7, #16
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b084      	sub	sp, #16
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	60fb      	str	r3, [r7, #12]
 8002d20:	f107 020c 	add.w	r2, r7, #12
 8002d24:	f107 0308 	add.w	r3, r7, #8
 8002d28:	4611      	mov	r1, r2
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f000 f993 	bl	8003056 <_ZN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEC1ERKS6_>
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	4618      	mov	r0, r3
 8002d34:	3710      	adds	r7, #16
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b084      	sub	sp, #16
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	60fb      	str	r3, [r7, #12]
 8002d48:	f107 020c 	add.w	r2, r7, #12
 8002d4c:	f107 0308 	add.w	r3, r7, #8
 8002d50:	4611      	mov	r1, r2
 8002d52:	4618      	mov	r0, r3
 8002d54:	f000 f97f 	bl	8003056 <_ZN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEC1ERKS6_>
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3710      	adds	r7, #16
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS5_SaIS5_EEEEPS5_S5_ET0_T_SE_SD_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b084      	sub	sp, #16
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	60f8      	str	r0, [r7, #12]
 8002d6a:	60b9      	str	r1, [r7, #8]
 8002d6c:	607a      	str	r2, [r7, #4]
 8002d6e:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	68b9      	ldr	r1, [r7, #8]
 8002d74:	68f8      	ldr	r0, [r7, #12]
 8002d76:	f000 f97e 	bl	8003076 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS5_SaIS5_EEEEPS5_ET0_T_SE_SD_>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3710      	adds	r7, #16
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	f000 f983 	bl	800309c <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>
 8002d96:	4602      	mov	r2, r0
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	bf8c      	ite	hi
 8002d9e:	2301      	movhi	r3, #1
 8002da0:	2300      	movls	r3, #0
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d001      	beq.n	8002dac <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8002da8:	f00a fe4d 	bl	800da46 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002dac:	68ba      	ldr	r2, [r7, #8]
 8002dae:	4613      	mov	r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	4413      	add	r3, r2
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	4618      	mov	r0, r3
 8002db8:	f00a fe19 	bl	800d9ee <_Znwj>
 8002dbc:	4603      	mov	r3, r0
      }
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3710      	adds	r7, #16
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8002dc6:	b480      	push	{r7}
 8002dc8:	b083      	sub	sp, #12
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>:
      deallocate(pointer __p, size_type)
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8002de8:	68b8      	ldr	r0, [r7, #8]
 8002dea:	f00a fe19 	bl	800da20 <_ZdlPv>
      }
 8002dee:	bf00      	nop
 8002df0:	3710      	adds	r7, #16
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _M_tp(std::move(__tp)) { }
 8002df6:	b590      	push	{r4, r7, lr}
 8002df8:	b083      	sub	sp, #12
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
 8002dfe:	6039      	str	r1, [r7, #0]
 8002e00:	687c      	ldr	r4, [r7, #4]
 8002e02:	6838      	ldr	r0, [r7, #0]
 8002e04:	f7ff f87d 	bl	8001f02 <_ZSt4moveIRNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	4620      	mov	r0, r4
 8002e0e:	f7ff f883 	bl	8001f18 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4618      	mov	r0, r3
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd90      	pop	{r4, r7, pc}

08002e1c <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama5SceneEELb1EEC1ERKS2_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
 8002e26:	6839      	ldr	r1, [r7, #0]
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f7ff f804 	bl	8001e36 <_ZNSaIN4tama5SceneEEC1ERKS1_>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4618      	mov	r0, r3
 8002e32:	3708      	adds	r7, #8
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <_ZN4tama5SceneD1Ev>:
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	4a08      	ldr	r2, [pc, #32]	; (8002e64 <_ZN4tama5SceneD1Ev+0x2c>)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	601a      	str	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	330c      	adds	r3, #12
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7fe f962 	bl	8001114 <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EED1Ev>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	3304      	adds	r3, #4
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7fd fd07 	bl	8000868 <_ZNSt10shared_ptrIN4tama14ChangeObserverEED1Ev>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3708      	adds	r7, #8
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	0800ddb0 	.word	0x0800ddb0

08002e68 <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEE7destroyIS2_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p) { __p->~_Up(); }
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
 8002e72:	6838      	ldr	r0, [r7, #0]
 8002e74:	f7ff ffe0 	bl	8002e38 <_ZN4tama5SceneD1Ev>
 8002e78:	bf00      	nop
 8002e7a:	3708      	adds	r7, #8
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <_ZNK9__gnu_cxx13new_allocatorIN4tama7TextureEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8002e88:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8002ea4:	68f8      	ldr	r0, [r7, #12]
 8002ea6:	f000 f907 	bl	80030b8 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	bf8c      	ite	hi
 8002eb2:	2301      	movhi	r3, #1
 8002eb4:	2300      	movls	r3, #0
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d001      	beq.n	8002ec0 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8002ebc:	f00a fdc3 	bl	800da46 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002ec0:	68ba      	ldr	r2, [r7, #8]
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	4413      	add	r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f00a fd8f 	bl	800d9ee <_Znwj>
 8002ed0:	4603      	mov	r3, r0
      }
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8002eda:	b480      	push	{r7}
 8002edc:	b083      	sub	sp, #12
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>:
      deallocate(pointer __p, size_type)
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8002efc:	68b8      	ldr	r0, [r7, #8]
 8002efe:	f00a fd8f 	bl	800da20 <_ZdlPv>
      }
 8002f02:	bf00      	nop
 8002f04:	3710      	adds	r7, #16
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _M_tp(std::move(__tp)) { }
 8002f0a:	b590      	push	{r4, r7, lr}
 8002f0c:	b083      	sub	sp, #12
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
 8002f12:	6039      	str	r1, [r7, #0]
 8002f14:	687c      	ldr	r4, [r7, #4]
 8002f16:	6838      	ldr	r0, [r7, #0]
 8002f18:	f7ff f8e6 	bl	80020e8 <_ZSt4moveIRNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	4619      	mov	r1, r3
 8002f20:	4620      	mov	r0, r4
 8002f22:	f7ff f8ec 	bl	80020fe <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd90      	pop	{r4, r7, pc}

08002f30 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama7TextureEELb1EEC1ERKS2_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
 8002f3a:	6839      	ldr	r1, [r7, #0]
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f7ff f868 	bl	8002012 <_ZNSaIN4tama7TextureEEC1ERKS1_>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4618      	mov	r0, r3
 8002f46:	3708      	adds	r7, #8
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE7destroyIS2_EEvPT_>:
	destroy(_Up* __p) { __p->~_Up(); }
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	6838      	ldr	r0, [r7, #0]
 8002f5e:	4798      	blx	r3
 8002f60:	bf00      	nop
 8002f62:	3708      	adds	r7, #8
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <_ZNKSt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEE4baseEv>:
      base() const
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4618      	mov	r0, r3
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <_ZNSt12__shared_ptrIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0EEC1EOS4_>:
      __shared_ptr(__shared_ptr&& __r) noexcept
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
      : _M_ptr(__r._M_ptr), _M_refcount()
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	601a      	str	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	3304      	adds	r3, #4
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7fd fd9e 	bl	8000ad8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	_M_refcount._M_swap(__r._M_refcount);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	1d1a      	adds	r2, r3, #4
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	3304      	adds	r3, #4
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	4610      	mov	r0, r2
 8002fa8:	f7fd fdd9 	bl	8000b5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	__r._M_ptr = 0;
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	601a      	str	r2, [r3, #0]
      }
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3708      	adds	r7, #8
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama8DrawableEEEE37select_on_container_copy_constructionERKS4_>:
       *  @brief  Obtain an allocator to use when copying a container.
       *  @param  __rhs  An allocator.
       *  @return @c __rhs
      */
      static allocator_type
      select_on_container_copy_construction(const allocator_type& __rhs)
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 8002fc6:	6839      	ldr	r1, [r7, #0]
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f000 f804 	bl	8002fd6 <_ZNSaISt10shared_ptrIN4tama8DrawableEEEC1ERKS3_>
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	3708      	adds	r7, #8
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}

08002fd6 <_ZNSaISt10shared_ptrIN4tama8DrawableEEEC1ERKS3_>:
      allocator(const allocator& __a) throw()
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b082      	sub	sp, #8
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
 8002fde:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8002fe0:	6839      	ldr	r1, [r7, #0]
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 f876 	bl	80030d4 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEEC1ERKS5_>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4618      	mov	r0, r3
 8002fec:	3708      	adds	r7, #8
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE12_Vector_implC1ERKS4_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b082      	sub	sp, #8
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
 8002ffa:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
 8002ffc:	6839      	ldr	r1, [r7, #0]
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f7ff ffe9 	bl	8002fd6 <_ZNSaISt10shared_ptrIN4tama8DrawableEEEC1ERKS3_>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	601a      	str	r2, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	605a      	str	r2, [r3, #4]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	609a      	str	r2, [r3, #8]
	{ }
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4618      	mov	r0, r3
 800301a:	3708      	adds	r7, #8
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 800302a:	6839      	ldr	r1, [r7, #0]
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f7fe fc10 	bl	8001852 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE11_M_allocateEj>
 8003032:	4602      	mov	r2, r0
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	00db      	lsls	r3, r3, #3
 8003048:	441a      	add	r2, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	609a      	str	r2, [r3, #8]
      }
 800304e:	bf00      	nop
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <_ZN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEC1ERKS6_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8003056:	b480      	push	{r7}
 8003058:	b083      	sub	sp, #12
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
 800305e:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	601a      	str	r2, [r3, #0]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4618      	mov	r0, r3
 800306c:	370c      	adds	r7, #12
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr

08003076 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS5_SaIS5_EEEEPS5_ET0_T_SE_SD_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8003076:	b580      	push	{r7, lr}
 8003078:	b086      	sub	sp, #24
 800307a:	af00      	add	r7, sp, #0
 800307c:	60f8      	str	r0, [r7, #12]
 800307e:	60b9      	str	r1, [r7, #8]
 8003080:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8003082:	2301      	movs	r3, #1
 8003084:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	68b9      	ldr	r1, [r7, #8]
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	f000 f82e 	bl	80030ec <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS7_SaIS7_EEEEPS7_EET0_T_SG_SF_>
 8003090:	4603      	mov	r3, r0
    }
 8003092:	4618      	mov	r0, r3
 8003094:	3718      	adds	r7, #24
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
	...

0800309c <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 80030a4:	4b03      	ldr	r3, [pc, #12]	; (80030b4 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv+0x18>)
 80030a6:	4618      	mov	r0, r3
 80030a8:	370c      	adds	r7, #12
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	0ccccccc 	.word	0x0ccccccc

080030b8 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 80030c0:	4b03      	ldr	r3, [pc, #12]	; (80030d0 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv+0x18>)
 80030c2:	4618      	mov	r0, r3
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	0ccccccc 	.word	0x0ccccccc

080030d4 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEEC1ERKS5_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4618      	mov	r0, r3
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS7_SaIS7_EEEEPS7_EET0_T_SG_SF_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80030ec:	b590      	push	{r4, r7, lr}
 80030ee:	b087      	sub	sp, #28
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 80030fc:	f107 0208 	add.w	r2, r7, #8
 8003100:	f107 030c 	add.w	r3, r7, #12
 8003104:	4611      	mov	r1, r2
 8003106:	4618      	mov	r0, r3
 8003108:	f000 f81f 	bl	800314a <_ZN9__gnu_cxxneIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEEbRKNS_17__normal_iteratorIT_T0_EESF_>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d016      	beq.n	8003140 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS7_SaIS7_EEEEPS7_EET0_T_SG_SF_+0x54>
		std::_Construct(std::__addressof(*__cur), *__first);
 8003112:	6978      	ldr	r0, [r7, #20]
 8003114:	f7fe fc5a 	bl	80019cc <_ZSt11__addressofISt10shared_ptrIN4tama8DrawableEEEPT_RS4_>
 8003118:	4604      	mov	r4, r0
 800311a:	f107 030c 	add.w	r3, r7, #12
 800311e:	4618      	mov	r0, r3
 8003120:	f000 f83c 	bl	800319c <_ZNK9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEdeEv>
 8003124:	4603      	mov	r3, r0
 8003126:	4619      	mov	r1, r3
 8003128:	4620      	mov	r0, r4
 800312a:	f000 f843 	bl	80031b4 <_ZSt10_ConstructISt10shared_ptrIN4tama8DrawableEEJRKS3_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 800312e:	f107 030c 	add.w	r3, r7, #12
 8003132:	4618      	mov	r0, r3
 8003134:	f000 f821 	bl	800317a <_ZN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEppEv>
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	3308      	adds	r3, #8
 800313c:	617b      	str	r3, [r7, #20]
 800313e:	e7dd      	b.n	80030fc <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS7_SaIS7_EEEEPS7_EET0_T_SG_SF_+0x10>
	      return __cur;
 8003140:	697b      	ldr	r3, [r7, #20]
	}
 8003142:	4618      	mov	r0, r3
 8003144:	371c      	adds	r7, #28
 8003146:	46bd      	mov	sp, r7
 8003148:	bd90      	pop	{r4, r7, pc}

0800314a <_ZN9__gnu_cxxneIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEEbRKNS_17__normal_iteratorIT_T0_EESF_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 800314a:	b590      	push	{r4, r7, lr}
 800314c:	b083      	sub	sp, #12
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
 8003152:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f000 f846 	bl	80031e6 <_ZNK9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEE4baseEv>
 800315a:	4603      	mov	r3, r0
 800315c:	681c      	ldr	r4, [r3, #0]
 800315e:	6838      	ldr	r0, [r7, #0]
 8003160:	f000 f841 	bl	80031e6 <_ZNK9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEE4baseEv>
 8003164:	4603      	mov	r3, r0
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	429c      	cmp	r4, r3
 800316a:	bf14      	ite	ne
 800316c:	2301      	movne	r3, #1
 800316e:	2300      	moveq	r3, #0
 8003170:	b2db      	uxtb	r3, r3
 8003172:	4618      	mov	r0, r3
 8003174:	370c      	adds	r7, #12
 8003176:	46bd      	mov	sp, r7
 8003178:	bd90      	pop	{r4, r7, pc}

0800317a <_ZN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800317a:	b480      	push	{r7}
 800317c:	b083      	sub	sp, #12
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
	++_M_current;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f103 0208 	add.w	r2, r3, #8
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	601a      	str	r2, [r3, #0]
	return *this;
 800318e:	687b      	ldr	r3, [r7, #4]
      }
 8003190:	4618      	mov	r0, r3
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <_ZNK9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4618      	mov	r0, r3
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <_ZSt10_ConstructISt10shared_ptrIN4tama8DrawableEEJRKS3_EEvPT_DpOT0_>:
    _Construct(_T1* __p, _Args&&... __args)
 80031b4:	b590      	push	{r4, r7, lr}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
 80031be:	6838      	ldr	r0, [r7, #0]
 80031c0:	f7fe f936 	bl	8001430 <_ZSt7forwardIRKSt10shared_ptrIN4tama8DrawableEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80031c4:	4604      	mov	r4, r0
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4619      	mov	r1, r3
 80031ca:	2008      	movs	r0, #8
 80031cc:	f7fd fd06 	bl	8000bdc <_ZnwjPv>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d003      	beq.n	80031de <_ZSt10_ConstructISt10shared_ptrIN4tama8DrawableEEJRKS3_EEvPT_DpOT0_+0x2a>
 80031d6:	4621      	mov	r1, r4
 80031d8:	4618      	mov	r0, r3
 80031da:	f7fd fece 	bl	8000f7a <_ZNSt10shared_ptrIN4tama8DrawableEEC1ERKS2_>
 80031de:	bf00      	nop
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd90      	pop	{r4, r7, pc}

080031e6 <_ZNK9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80031e6:	b480      	push	{r7}
 80031e8:	b083      	sub	sp, #12
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4618      	mov	r0, r3
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	4a08      	ldr	r2, [pc, #32]	; (8003228 <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev+0x2c>)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	601a      	str	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	330c      	adds	r3, #12
 800320e:	4618      	mov	r0, r3
 8003210:	f7ff faa0 	bl	8002754 <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4618      	mov	r0, r3
 8003218:	f7fe f892 	bl	8001340 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4618      	mov	r0, r3
 8003220:	3708      	adds	r7, #8
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	0800dd78 	.word	0x0800dd78

0800322c <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f7ff ffe1 	bl	80031fc <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
 800323a:	2114      	movs	r1, #20
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f00a fbd4 	bl	800d9ea <_ZdlPvj>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4618      	mov	r0, r3
 8003246:	3708      	adds	r7, #8
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      _M_dispose() noexcept
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	330c      	adds	r3, #12
 8003258:	4618      	mov	r0, r3
 800325a:	f000 f8b2 	bl	80033c2 <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>
 800325e:	4602      	mov	r2, r0
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	691b      	ldr	r3, [r3, #16]
 8003264:	4619      	mov	r1, r3
 8003266:	4610      	mov	r0, r2
 8003268:	f7ff fac3 	bl	80027f2 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>
 800326c:	bf00      	nop
 800326e:	3708      	adds	r7, #8
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8003274:	b580      	push	{r7, lr}
 8003276:	b086      	sub	sp, #24
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	330c      	adds	r3, #12
 8003280:	4618      	mov	r0, r3
 8003282:	f000 f8ab 	bl	80033dc <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>
 8003286:	4602      	mov	r2, r0
 8003288:	f107 0314 	add.w	r3, r7, #20
 800328c:	4611      	mov	r1, r2
 800328e:	4618      	mov	r0, r3
 8003290:	f7ff f9f8 	bl	8002684 <_ZNSaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8003294:	f107 0114 	add.w	r1, r7, #20
 8003298:	f107 030c 	add.w	r3, r7, #12
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	4618      	mov	r0, r3
 80032a0:	f7ff fc7c 	bl	8002b9c <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
	this->~_Sp_counted_deleter();
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f7ff ffa9 	bl	80031fc <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 80032aa:	f107 030c 	add.w	r3, r7, #12
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7ff fa14 	bl	80026dc <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	__allocator_type __a(_M_impl._M_alloc());
 80032b4:	f107 0314 	add.w	r3, r7, #20
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7ff f9f0 	bl	800269e <_ZNSaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
      }
 80032be:	bf00      	nop
 80032c0:	3718      	adds	r7, #24
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}

080032c6 <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept
 80032c6:	b480      	push	{r7}
 80032c8:	b083      	sub	sp, #12
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
 80032ce:	6039      	str	r1, [r7, #0]
        return nullptr;
 80032d0:	2300      	movs	r3, #0
      }
 80032d2:	4618      	mov	r0, r3
 80032d4:	370c      	adds	r7, #12
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
	...

080032e0 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	4a08      	ldr	r2, [pc, #32]	; (800330c <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev+0x2c>)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	601a      	str	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	330c      	adds	r3, #12
 80032f2:	4618      	mov	r0, r3
 80032f4:	f7ff f8ec 	bl	80024d0 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7fe f820 	bl	8001340 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4618      	mov	r0, r3
 8003304:	3708      	adds	r7, #8
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	0800dd94 	.word	0x0800dd94

08003310 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f7ff ffe1 	bl	80032e0 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
 800331e:	2114      	movs	r1, #20
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f00a fb62 	bl	800d9ea <_ZdlPvj>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4618      	mov	r0, r3
 800332a:	3708      	adds	r7, #8
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	330c      	adds	r3, #12
 800333c:	4618      	mov	r0, r3
 800333e:	f000 f85b 	bl	80033f8 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>
 8003342:	4602      	mov	r2, r0
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	691b      	ldr	r3, [r3, #16]
 8003348:	4619      	mov	r1, r3
 800334a:	4610      	mov	r0, r2
 800334c:	f7ff f90f 	bl	800256e <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>
 8003350:	bf00      	nop
 8003352:	3708      	adds	r7, #8
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8003358:	b580      	push	{r7, lr}
 800335a:	b086      	sub	sp, #24
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	330c      	adds	r3, #12
 8003364:	4618      	mov	r0, r3
 8003366:	f000 f854 	bl	8003412 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>
 800336a:	4602      	mov	r2, r0
 800336c:	f107 0314 	add.w	r3, r7, #20
 8003370:	4611      	mov	r1, r2
 8003372:	4618      	mov	r0, r3
 8003374:	f7ff f844 	bl	8002400 <_ZNSaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8003378:	f107 0114 	add.w	r1, r7, #20
 800337c:	f107 030c 	add.w	r3, r7, #12
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	4618      	mov	r0, r3
 8003384:	f7ff fb3f 	bl	8002a06 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
	this->~_Sp_counted_deleter();
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f7ff ffa9 	bl	80032e0 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 800338e:	f107 030c 	add.w	r3, r7, #12
 8003392:	4618      	mov	r0, r3
 8003394:	f7ff f860 	bl	8002458 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	__allocator_type __a(_M_impl._M_alloc());
 8003398:	f107 0314 	add.w	r3, r7, #20
 800339c:	4618      	mov	r0, r3
 800339e:	f7ff f83c 	bl	800241a <_ZNSaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
      }
 80033a2:	bf00      	nop
 80033a4:	3718      	adds	r7, #24
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}

080033aa <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept
 80033aa:	b480      	push	{r7}
 80033ac:	b083      	sub	sp, #12
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
 80033b2:	6039      	str	r1, [r7, #0]
        return nullptr;
 80033b4:	2300      	movs	r3, #0
      }
 80033b6:	4618      	mov	r0, r3
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr

080033c2 <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b082      	sub	sp, #8
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f000 f82e 	bl	800342e <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>
 80033d2:	4603      	mov	r3, r0
 80033d4:	4618      	mov	r0, r3
 80033d6:	3708      	adds	r7, #8
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	3301      	adds	r3, #1
 80033e8:	4618      	mov	r0, r3
 80033ea:	f000 f82b 	bl	8003444 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama7TextureEELb1EE6_S_getERS3_>
 80033ee:	4603      	mov	r3, r0
 80033f0:	4618      	mov	r0, r3
 80033f2:	3708      	adds	r7, #8
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4618      	mov	r0, r3
 8003404:	f000 f829 	bl	800345a <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>
 8003408:	4603      	mov	r3, r0
 800340a:	4618      	mov	r0, r3
 800340c:	3708      	adds	r7, #8
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}

08003412 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 8003412:	b580      	push	{r7, lr}
 8003414:	b082      	sub	sp, #8
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	3301      	adds	r3, #1
 800341e:	4618      	mov	r0, r3
 8003420:	f000 f826 	bl	8003470 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama5SceneEELb1EE6_S_getERS3_>
 8003424:	4603      	mov	r3, r0
 8003426:	4618      	mov	r0, r3
 8003428:	3708      	adds	r7, #8
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>:
      _S_get(_Sp_ebo_helper& __eboh)
 800342e:	b480      	push	{r7}
 8003430:	b083      	sub	sp, #12
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
      { return __eboh._M_tp; }
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4618      	mov	r0, r3
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr

08003444 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama7TextureEELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4618      	mov	r0, r3
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr

0800345a <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>:
      _S_get(_Sp_ebo_helper& __eboh)
 800345a:	b480      	push	{r7}
 800345c:	b083      	sub	sp, #12
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
      { return __eboh._M_tp; }
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4618      	mov	r0, r3
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama5SceneEELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4618      	mov	r0, r3
 800347c:	370c      	adds	r7, #12
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
	...

08003488 <_ZN4tama7TextureC1EjjPPNS_10PixelColorE>:
                    data[i][j] = PixelColor::WHITE;
                }
            }
        }

        Texture(unsigned int width, unsigned int height, PixelColor **data) : width(width), height(height), data(data)
 8003488:	b480      	push	{r7}
 800348a:	b085      	sub	sp, #20
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	607a      	str	r2, [r7, #4]
 8003494:	603b      	str	r3, [r7, #0]
 8003496:	4a09      	ldr	r2, [pc, #36]	; (80034bc <_ZN4tama7TextureC1EjjPPNS_10PixelColorE+0x34>)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	601a      	str	r2, [r3, #0]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	68ba      	ldr	r2, [r7, #8]
 80034a0:	605a      	str	r2, [r3, #4]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	609a      	str	r2, [r3, #8]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	683a      	ldr	r2, [r7, #0]
 80034ac:	60da      	str	r2, [r3, #12]
        {}
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	4618      	mov	r0, r3
 80034b2:	3714      	adds	r7, #20
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr
 80034bc:	0800ddbc 	.word	0x0800ddbc

080034c0 <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_ptr() = default;
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	3304      	adds	r3, #4
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7fd fa3b 	bl	8000948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4618      	mov	r0, r3
 80034d6:	3708      	adds	r7, #8
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <_ZNSt10shared_ptrIN4tama16Nokia5510DisplayEED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7ff ffea 	bl	80034c0 <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4618      	mov	r0, r3
 80034f0:	3708      	adds	r7, #8
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b082      	sub	sp, #8
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	3304      	adds	r3, #4
 8003502:	4618      	mov	r0, r3
 8003504:	f7fd fa20 	bl	8000948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4618      	mov	r0, r3
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}

08003512 <_ZNSt10shared_ptrIN4tama27Nokia5110DisplayDataManagerEED1Ev>:
 8003512:	b580      	push	{r7, lr}
 8003514:	b082      	sub	sp, #8
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4618      	mov	r0, r3
 800351e:	f7ff ffea 	bl	80034f6 <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4618      	mov	r0, r3
 8003526:	3708      	adds	r7, #8
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <_ZN4tama4Main3runEv>:
#include "../Core/ui/display/scene/Scene.h"
#include "../Core/ui/display/display-data-manager/DisplayDataManager.h"
#include "../STM32F411Disco-drivers/nokia5110-display-data-manager/Nokia5110DisplayDataManager.h"

void tama::Main::run()
{
 800352c:	b5b0      	push	{r4, r5, r7, lr}
 800352e:	b0b0      	sub	sp, #192	; 0xc0
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
    DisplayConfig displayConfig = getDefaultNokia5110DisplayConfig();
 8003534:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003538:	6879      	ldr	r1, [r7, #4]
 800353a:	4618      	mov	r0, r3
 800353c:	f000 f900 	bl	8003740 <_ZN4tama4Main32getDefaultNokia5110DisplayConfigEv>
    std::shared_ptr<Display> display = std::make_shared<Nokia5510Display>(displayConfig);
 8003540:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003544:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8003548:	4611      	mov	r1, r2
 800354a:	4618      	mov	r0, r3
 800354c:	f000 f9e5 	bl	800391a <_ZSt11make_sharedIN4tama16Nokia5510DisplayEJRNS0_13DisplayConfigEEESt10shared_ptrIT_EDpOT0_>
 8003550:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8003554:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003558:	4611      	mov	r1, r2
 800355a:	4618      	mov	r0, r3
 800355c:	f000 fa05 	bl	800396a <_ZNSt10shared_ptrIN4tama7DisplayEEC1INS0_16Nokia5510DisplayEvEEOS_IT_E>
 8003560:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003564:	4618      	mov	r0, r3
 8003566:	f7ff ffb9 	bl	80034dc <_ZNSt10shared_ptrIN4tama16Nokia5510DisplayEED1Ev>

    std::shared_ptr<Sprite> sprite = std::make_shared<Sprite>(makeSampleTexture(), Vec2d(10, 20));
 800356a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800356e:	6879      	ldr	r1, [r7, #4]
 8003570:	4618      	mov	r0, r3
 8003572:	f000 f915 	bl	80037a0 <_ZN4tama4Main17makeSampleTextureEv>
 8003576:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800357a:	2214      	movs	r2, #20
 800357c:	210a      	movs	r1, #10
 800357e:	4618      	mov	r0, r3
 8003580:	f7fc ffc2 	bl	8000508 <_ZN4tama5Vec2dC1Eii>
 8003584:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003588:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800358c:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8003590:	4618      	mov	r0, r3
 8003592:	f000 fa13 	bl	80039bc <_ZSt11make_sharedIN4tama6SpriteEJSt10shared_ptrINS0_7TextureEENS0_5Vec2dEEES2_IT_EDpOT0_>
 8003596:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800359a:	4618      	mov	r0, r3
 800359c:	f7fd fcbc 	bl	8000f18 <_ZNSt10shared_ptrIN4tama7TextureEED1Ev>
    std::shared_ptr<Sprite> sprite2 = std::make_shared<Sprite>(makeSampleTexture(), Vec2d(30, 35));
 80035a0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80035a4:	6879      	ldr	r1, [r7, #4]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f000 f8fa 	bl	80037a0 <_ZN4tama4Main17makeSampleTextureEv>
 80035ac:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80035b0:	2223      	movs	r2, #35	; 0x23
 80035b2:	211e      	movs	r1, #30
 80035b4:	4618      	mov	r0, r3
 80035b6:	f7fc ffa7 	bl	8000508 <_ZN4tama5Vec2dC1Eii>
 80035ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80035be:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80035c2:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 80035c6:	4618      	mov	r0, r3
 80035c8:	f000 f9f8 	bl	80039bc <_ZSt11make_sharedIN4tama6SpriteEJSt10shared_ptrINS0_7TextureEENS0_5Vec2dEEES2_IT_EDpOT0_>
 80035cc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7fd fca1 	bl	8000f18 <_ZNSt10shared_ptrIN4tama7TextureEED1Ev>

    std::shared_ptr<DisplayDataManager> dataManager = std::make_shared<Nokia5110DisplayDataManager>();
 80035d6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80035da:	4618      	mov	r0, r3
 80035dc:	f000 fa10 	bl	8003a00 <_ZSt11make_sharedIN4tama27Nokia5110DisplayDataManagerEJEESt10shared_ptrIT_EDpOT0_>
 80035e0:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80035e4:	f107 0320 	add.w	r3, r7, #32
 80035e8:	4611      	mov	r1, r2
 80035ea:	4618      	mov	r0, r3
 80035ec:	f000 fa2c 	bl	8003a48 <_ZNSt10shared_ptrIN4tama18DisplayDataManagerEEC1INS0_27Nokia5110DisplayDataManagerEvEEOS_IT_E>
 80035f0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7ff ff8c 	bl	8003512 <_ZNSt10shared_ptrIN4tama27Nokia5110DisplayDataManagerEED1Ev>

    std::shared_ptr<Scene> scene = std::make_shared<Scene>();
 80035fa:	f107 0318 	add.w	r3, r7, #24
 80035fe:	4618      	mov	r0, r3
 8003600:	f000 fa35 	bl	8003a6e <_ZSt11make_sharedIN4tama5SceneEJEESt10shared_ptrIT_EDpOT0_>

    scene->addDrawable(sprite);
 8003604:	f107 0318 	add.w	r3, r7, #24
 8003608:	4618      	mov	r0, r3
 800360a:	f000 fa49 	bl	8003aa0 <_ZNKSt19__shared_ptr_accessIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800360e:	4604      	mov	r4, r0
 8003610:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003614:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003618:	4611      	mov	r1, r2
 800361a:	4618      	mov	r0, r3
 800361c:	f000 fa4c 	bl	8003ab8 <_ZNSt10shared_ptrIN4tama8DrawableEEC1INS0_6SpriteEvEERKS_IT_E>
 8003620:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003624:	4619      	mov	r1, r3
 8003626:	4620      	mov	r0, r4
 8003628:	f7fd fc35 	bl	8000e96 <_ZN4tama5Scene11addDrawableESt10shared_ptrINS_8DrawableEE>
 800362c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003630:	4618      	mov	r0, r3
 8003632:	f7fd fcb2 	bl	8000f9a <_ZNSt10shared_ptrIN4tama8DrawableEED1Ev>
    scene->addDrawable(sprite2);
 8003636:	f107 0318 	add.w	r3, r7, #24
 800363a:	4618      	mov	r0, r3
 800363c:	f000 fa30 	bl	8003aa0 <_ZNKSt19__shared_ptr_accessIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8003640:	4604      	mov	r4, r0
 8003642:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003646:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800364a:	4611      	mov	r1, r2
 800364c:	4618      	mov	r0, r3
 800364e:	f000 fa33 	bl	8003ab8 <_ZNSt10shared_ptrIN4tama8DrawableEEC1INS0_6SpriteEvEERKS_IT_E>
 8003652:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003656:	4619      	mov	r1, r3
 8003658:	4620      	mov	r0, r4
 800365a:	f7fd fc1c 	bl	8000e96 <_ZN4tama5Scene11addDrawableESt10shared_ptrINS_8DrawableEE>
 800365e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003662:	4618      	mov	r0, r3
 8003664:	f7fd fc99 	bl	8000f9a <_ZNSt10shared_ptrIN4tama8DrawableEED1Ev>

    for (unsigned i = 0; i < 100; ++i)
 8003668:	2300      	movs	r3, #0
 800366a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800366e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003672:	2b63      	cmp	r3, #99	; 0x63
 8003674:	d862      	bhi.n	800373c <_ZN4tama4Main3runEv+0x210>
    {
        HAL_Delay(100);
 8003676:	2064      	movs	r0, #100	; 0x64
 8003678:	f003 faea 	bl	8006c50 <HAL_Delay>
        sprite->move(Vec2d(1, 0));
 800367c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003680:	4618      	mov	r0, r3
 8003682:	f000 fa29 	bl	8003ad8 <_ZNKSt19__shared_ptr_accessIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8003686:	4605      	mov	r5, r0
 8003688:	682b      	ldr	r3, [r5, #0]
 800368a:	3310      	adds	r3, #16
 800368c:	681c      	ldr	r4, [r3, #0]
 800368e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003692:	2200      	movs	r2, #0
 8003694:	2101      	movs	r1, #1
 8003696:	4618      	mov	r0, r3
 8003698:	f7fc ff36 	bl	8000508 <_ZN4tama5Vec2dC1Eii>
 800369c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80036a0:	e893 0006 	ldmia.w	r3, {r1, r2}
 80036a4:	4628      	mov	r0, r5
 80036a6:	47a0      	blx	r4
        sprite2->move(Vec2d(0, -1));
 80036a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036ac:	4618      	mov	r0, r3
 80036ae:	f000 fa13 	bl	8003ad8 <_ZNKSt19__shared_ptr_accessIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80036b2:	4605      	mov	r5, r0
 80036b4:	682b      	ldr	r3, [r5, #0]
 80036b6:	3310      	adds	r3, #16
 80036b8:	681c      	ldr	r4, [r3, #0]
 80036ba:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80036be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80036c2:	2100      	movs	r1, #0
 80036c4:	4618      	mov	r0, r3
 80036c6:	f7fc ff1f 	bl	8000508 <_ZN4tama5Vec2dC1Eii>
 80036ca:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80036ce:	e893 0006 	ldmia.w	r3, {r1, r2}
 80036d2:	4628      	mov	r0, r5
 80036d4:	47a0      	blx	r4
        auto sceneData = dataManager->getActiveSceneDisplayData(scene->getSceneData());
 80036d6:	f107 0320 	add.w	r3, r7, #32
 80036da:	4618      	mov	r0, r3
 80036dc:	f000 fa08 	bl	8003af0 <_ZNKSt19__shared_ptr_accessIN4tama18DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80036e0:	4605      	mov	r5, r0
 80036e2:	682b      	ldr	r3, [r5, #0]
 80036e4:	681c      	ldr	r4, [r3, #0]
 80036e6:	f107 0318 	add.w	r3, r7, #24
 80036ea:	4618      	mov	r0, r3
 80036ec:	f000 f9d8 	bl	8003aa0 <_ZNKSt19__shared_ptr_accessIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80036f0:	4602      	mov	r2, r0
 80036f2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80036f6:	4611      	mov	r1, r2
 80036f8:	4618      	mov	r0, r3
 80036fa:	f7fd fc5b 	bl	8000fb4 <_ZN4tama5Scene12getSceneDataEv>
 80036fe:	f107 030c 	add.w	r3, r7, #12
 8003702:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8003706:	4629      	mov	r1, r5
 8003708:	4618      	mov	r0, r3
 800370a:	47a0      	blx	r4
 800370c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003710:	4618      	mov	r0, r3
 8003712:	f7fd fc01 	bl	8000f18 <_ZNSt10shared_ptrIN4tama7TextureEED1Ev>
        display->setData(sceneData);
 8003716:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800371a:	4618      	mov	r0, r3
 800371c:	f000 f9f4 	bl	8003b08 <_ZNKSt19__shared_ptr_accessIN4tama7DisplayELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8003720:	4602      	mov	r2, r0
 8003722:	6813      	ldr	r3, [r2, #0]
 8003724:	3304      	adds	r3, #4
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f107 010c 	add.w	r1, r7, #12
 800372c:	4610      	mov	r0, r2
 800372e:	4798      	blx	r3
    for (unsigned i = 0; i < 100; ++i)
 8003730:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003734:	3301      	adds	r3, #1
 8003736:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800373a:	e798      	b.n	800366e <_ZN4tama4Main3runEv+0x142>
    }



    while (true)
 800373c:	e7fe      	b.n	800373c <_ZN4tama4Main3runEv+0x210>
	...

08003740 <_ZN4tama4Main32getDefaultNokia5110DisplayConfigEv>:
    {}

}

tama::DisplayConfig tama::Main::getDefaultNokia5110DisplayConfig()
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
    DisplayConfig cfg;
    cfg.spi = &hspi1;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a10      	ldr	r2, [pc, #64]	; (8003790 <_ZN4tama4Main32getDefaultNokia5110DisplayConfigEv+0x50>)
 800374e:	601a      	str	r2, [r3, #0]
    cfg.reset_port = RST_GPIO_Port;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a10      	ldr	r2, [pc, #64]	; (8003794 <_ZN4tama4Main32getDefaultNokia5110DisplayConfigEv+0x54>)
 8003754:	605a      	str	r2, [r3, #4]
    cfg.reset_pin = RST_Pin;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2280      	movs	r2, #128	; 0x80
 800375a:	811a      	strh	r2, [r3, #8]
    cfg.bl_port = BL_GPIO_Port;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a0d      	ldr	r2, [pc, #52]	; (8003794 <_ZN4tama4Main32getDefaultNokia5110DisplayConfigEv+0x54>)
 8003760:	60da      	str	r2, [r3, #12]
    cfg.bl_pin = BL_Pin;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003768:	821a      	strh	r2, [r3, #16]
    cfg.dc_port = DC_GPIO_Port;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a0a      	ldr	r2, [pc, #40]	; (8003798 <_ZN4tama4Main32getDefaultNokia5110DisplayConfigEv+0x58>)
 800376e:	615a      	str	r2, [r3, #20]
    cfg.dc_pin = DC_Pin;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2220      	movs	r2, #32
 8003774:	841a      	strh	r2, [r3, #32]
    cfg.ce_port = CE_GPIO_Port;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a08      	ldr	r2, [pc, #32]	; (800379c <_ZN4tama4Main32getDefaultNokia5110DisplayConfigEv+0x5c>)
 800377a:	61da      	str	r2, [r3, #28]
    cfg.ce_pin = CE_Pin;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2202      	movs	r2, #2
 8003780:	831a      	strh	r2, [r3, #24]
    return cfg;
 8003782:	bf00      	nop
}
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr
 8003790:	200001ac 	.word	0x200001ac
 8003794:	40021000 	.word	0x40021000
 8003798:	40020800 	.word	0x40020800
 800379c:	40020400 	.word	0x40020400

080037a0 <_ZN4tama4Main17makeSampleTextureEv>:

std::shared_ptr<tama::Texture> tama::Main::makeSampleTexture()
{
 80037a0:	b590      	push	{r4, r7, lr}
 80037a2:	b087      	sub	sp, #28
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
    unsigned tW = 7;
 80037aa:	2307      	movs	r3, #7
 80037ac:	617b      	str	r3, [r7, #20]
    unsigned tH = 3;
 80037ae:	2303      	movs	r3, #3
 80037b0:	613b      	str	r3, [r7, #16]
    PixelColor ** tD = new PixelColor*[tH];
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	4a52      	ldr	r2, [pc, #328]	; (8003900 <_ZN4tama4Main17makeSampleTextureEv+0x160>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d801      	bhi.n	80037be <_ZN4tama4Main17makeSampleTextureEv+0x1e>
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	e001      	b.n	80037c2 <_ZN4tama4Main17makeSampleTextureEv+0x22>
 80037be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80037c2:	4618      	mov	r0, r3
 80037c4:	f00a f90f 	bl	800d9e6 <_Znaj>
 80037c8:	4603      	mov	r3, r0
 80037ca:	60fb      	str	r3, [r7, #12]

    tD[0] = new PixelColor[tW];
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	68fc      	ldr	r4, [r7, #12]
 80037d0:	4618      	mov	r0, r3
 80037d2:	f00a f908 	bl	800d9e6 <_Znaj>
 80037d6:	4603      	mov	r3, r0
 80037d8:	6023      	str	r3, [r4, #0]
    tD[1] = new PixelColor[tW];
 80037da:	697a      	ldr	r2, [r7, #20]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	1d1c      	adds	r4, r3, #4
 80037e0:	4610      	mov	r0, r2
 80037e2:	f00a f900 	bl	800d9e6 <_Znaj>
 80037e6:	4603      	mov	r3, r0
 80037e8:	6023      	str	r3, [r4, #0]
    tD[2] = new PixelColor[tW];
 80037ea:	697a      	ldr	r2, [r7, #20]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f103 0408 	add.w	r4, r3, #8
 80037f2:	4610      	mov	r0, r2
 80037f4:	f00a f8f7 	bl	800d9e6 <_Znaj>
 80037f8:	4603      	mov	r3, r0
 80037fa:	6023      	str	r3, [r4, #0]

    tD[0][0] = PixelColor::BLACK;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2201      	movs	r2, #1
 8003802:	701a      	strb	r2, [r3, #0]
    tD[0][1] = PixelColor::WHITE;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	3301      	adds	r3, #1
 800380a:	2200      	movs	r2, #0
 800380c:	701a      	strb	r2, [r3, #0]
    tD[0][2] = PixelColor::BLACK;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	3302      	adds	r3, #2
 8003814:	2201      	movs	r2, #1
 8003816:	701a      	strb	r2, [r3, #0]
    tD[0][3] = PixelColor::WHITE;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	3303      	adds	r3, #3
 800381e:	2200      	movs	r2, #0
 8003820:	701a      	strb	r2, [r3, #0]
    tD[0][4] = PixelColor::BLACK;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	3304      	adds	r3, #4
 8003828:	2201      	movs	r2, #1
 800382a:	701a      	strb	r2, [r3, #0]
    tD[0][5] = PixelColor::BLACK;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	3305      	adds	r3, #5
 8003832:	2201      	movs	r2, #1
 8003834:	701a      	strb	r2, [r3, #0]
    tD[0][6] = PixelColor::WHITE;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	3306      	adds	r3, #6
 800383c:	2200      	movs	r2, #0
 800383e:	701a      	strb	r2, [r3, #0]


    tD[1][0] = PixelColor::WHITE;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	3304      	adds	r3, #4
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	2200      	movs	r2, #0
 8003848:	701a      	strb	r2, [r3, #0]
    tD[1][1] = PixelColor::BLACK;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	3304      	adds	r3, #4
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	3301      	adds	r3, #1
 8003852:	2201      	movs	r2, #1
 8003854:	701a      	strb	r2, [r3, #0]
    tD[1][2] = PixelColor::WHITE;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	3304      	adds	r3, #4
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	3302      	adds	r3, #2
 800385e:	2200      	movs	r2, #0
 8003860:	701a      	strb	r2, [r3, #0]
    tD[1][3] = PixelColor::WHITE;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	3304      	adds	r3, #4
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	3303      	adds	r3, #3
 800386a:	2200      	movs	r2, #0
 800386c:	701a      	strb	r2, [r3, #0]
    tD[1][4] = PixelColor::BLACK;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	3304      	adds	r3, #4
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	3304      	adds	r3, #4
 8003876:	2201      	movs	r2, #1
 8003878:	701a      	strb	r2, [r3, #0]
    tD[1][5] = PixelColor::WHITE;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	3304      	adds	r3, #4
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	3305      	adds	r3, #5
 8003882:	2200      	movs	r2, #0
 8003884:	701a      	strb	r2, [r3, #0]
    tD[1][6] = PixelColor::BLACK;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	3304      	adds	r3, #4
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	3306      	adds	r3, #6
 800388e:	2201      	movs	r2, #1
 8003890:	701a      	strb	r2, [r3, #0]

    tD[2][0] = PixelColor::BLACK;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	3308      	adds	r3, #8
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2201      	movs	r2, #1
 800389a:	701a      	strb	r2, [r3, #0]
    tD[2][1] = PixelColor::WHITE;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	3308      	adds	r3, #8
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	3301      	adds	r3, #1
 80038a4:	2200      	movs	r2, #0
 80038a6:	701a      	strb	r2, [r3, #0]
    tD[2][2] = PixelColor::BLACK;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	3308      	adds	r3, #8
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	3302      	adds	r3, #2
 80038b0:	2201      	movs	r2, #1
 80038b2:	701a      	strb	r2, [r3, #0]
    tD[2][3] = PixelColor::WHITE;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	3308      	adds	r3, #8
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	3303      	adds	r3, #3
 80038bc:	2200      	movs	r2, #0
 80038be:	701a      	strb	r2, [r3, #0]
    tD[2][4] = PixelColor::BLACK;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	3308      	adds	r3, #8
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	3304      	adds	r3, #4
 80038c8:	2201      	movs	r2, #1
 80038ca:	701a      	strb	r2, [r3, #0]
    tD[2][5] = PixelColor::BLACK;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	3308      	adds	r3, #8
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	3305      	adds	r3, #5
 80038d4:	2201      	movs	r2, #1
 80038d6:	701a      	strb	r2, [r3, #0]
    tD[2][6] = PixelColor::WHITE;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	3308      	adds	r3, #8
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	3306      	adds	r3, #6
 80038e0:	2200      	movs	r2, #0
 80038e2:	701a      	strb	r2, [r3, #0]

    return std::make_shared<Texture>(tW, tH, tD);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f107 030c 	add.w	r3, r7, #12
 80038ea:	f107 0210 	add.w	r2, r7, #16
 80038ee:	f107 0114 	add.w	r1, r7, #20
 80038f2:	f000 f920 	bl	8003b36 <_ZSt11make_sharedIN4tama7TextureEJRjS2_RPPNS0_10PixelColorEEESt10shared_ptrIT_EDpOT0_>
}
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	371c      	adds	r7, #28
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd90      	pop	{r4, r7, pc}
 80038fe:	bf00      	nop
 8003900:	1ffffffe 	.word	0x1ffffffe

08003904 <_ZSt7forwardIRN4tama13DisplayConfigEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4618      	mov	r0, r3
 8003910:	370c      	adds	r7, #12
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr

0800391a <_ZSt11make_sharedIN4tama16Nokia5510DisplayEJRNS0_13DisplayConfigEEESt10shared_ptrIT_EDpOT0_>:
    make_shared(_Args&&... __args)
 800391a:	b580      	push	{r7, lr}
 800391c:	b084      	sub	sp, #16
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
 8003922:	6039      	str	r1, [r7, #0]
				       std::forward<_Args>(__args)...);
 8003924:	f107 030c 	add.w	r3, r7, #12
 8003928:	4618      	mov	r0, r3
 800392a:	f000 f92d 	bl	8003b88 <_ZNSaIN4tama16Nokia5510DisplayEEC1Ev>
 800392e:	6838      	ldr	r0, [r7, #0]
 8003930:	f7ff ffe8 	bl	8003904 <_ZSt7forwardIRN4tama13DisplayConfigEEOT_RNSt16remove_referenceIS3_E4typeE>
 8003934:	4602      	mov	r2, r0
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f107 010c 	add.w	r1, r7, #12
 800393c:	4618      	mov	r0, r3
 800393e:	f000 f93b 	bl	8003bb8 <_ZSt15allocate_sharedIN4tama16Nokia5510DisplayESaIS1_EJRNS0_13DisplayConfigEEESt10shared_ptrIT_ERKT0_DpOT1_>
 8003942:	f107 030c 	add.w	r3, r7, #12
 8003946:	4618      	mov	r0, r3
 8003948:	f000 f92a 	bl	8003ba0 <_ZNSaIN4tama16Nokia5510DisplayEED1Ev>
    }
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	3710      	adds	r7, #16
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <_ZSt4moveIRSt10shared_ptrIN4tama16Nokia5510DisplayEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4618      	mov	r0, r3
 8003960:	370c      	adds	r7, #12
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr

0800396a <_ZNSt10shared_ptrIN4tama7DisplayEEC1INS0_16Nokia5510DisplayEvEEOS_IT_E>:
	shared_ptr(shared_ptr<_Yp>&& __r) noexcept
 800396a:	b590      	push	{r4, r7, lr}
 800396c:	b083      	sub	sp, #12
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
 8003972:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 8003974:	687c      	ldr	r4, [r7, #4]
 8003976:	6838      	ldr	r0, [r7, #0]
 8003978:	f7ff ffec 	bl	8003954 <_ZSt4moveIRSt10shared_ptrIN4tama16Nokia5510DisplayEEEONSt16remove_referenceIT_E4typeEOS6_>
 800397c:	4603      	mov	r3, r0
 800397e:	4619      	mov	r1, r3
 8003980:	4620      	mov	r0, r4
 8003982:	f000 f92c 	bl	8003bde <_ZNSt12__shared_ptrIN4tama7DisplayELN9__gnu_cxx12_Lock_policyE0EEC1INS0_16Nokia5510DisplayEvEEOS_IT_LS3_0EE>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4618      	mov	r0, r3
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	bd90      	pop	{r4, r7, pc}

08003990 <_ZSt7forwardISt10shared_ptrIN4tama7TextureEEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4618      	mov	r0, r3
 800399c:	370c      	adds	r7, #12
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr

080039a6 <_ZSt7forwardIN4tama5Vec2dEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80039a6:	b480      	push	{r7}
 80039a8:	b083      	sub	sp, #12
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4618      	mov	r0, r3
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <_ZSt11make_sharedIN4tama6SpriteEJSt10shared_ptrINS0_7TextureEENS0_5Vec2dEEES2_IT_EDpOT0_>:
    make_shared(_Args&&... __args)
 80039bc:	b590      	push	{r4, r7, lr}
 80039be:	b087      	sub	sp, #28
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	607a      	str	r2, [r7, #4]
				       std::forward<_Args>(__args)...);
 80039c8:	f107 0314 	add.w	r3, r7, #20
 80039cc:	4618      	mov	r0, r3
 80039ce:	f000 f924 	bl	8003c1a <_ZNSaIN4tama6SpriteEEC1Ev>
 80039d2:	68b8      	ldr	r0, [r7, #8]
 80039d4:	f7ff ffdc 	bl	8003990 <_ZSt7forwardISt10shared_ptrIN4tama7TextureEEEOT_RNSt16remove_referenceIS4_E4typeE>
 80039d8:	4604      	mov	r4, r0
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f7ff ffe3 	bl	80039a6 <_ZSt7forwardIN4tama5Vec2dEEOT_RNSt16remove_referenceIS2_E4typeE>
 80039e0:	4603      	mov	r3, r0
 80039e2:	68f8      	ldr	r0, [r7, #12]
 80039e4:	f107 0114 	add.w	r1, r7, #20
 80039e8:	4622      	mov	r2, r4
 80039ea:	f000 f92e 	bl	8003c4a <_ZSt15allocate_sharedIN4tama6SpriteESaIS1_EJSt10shared_ptrINS0_7TextureEENS0_5Vec2dEEES3_IT_ERKT0_DpOT1_>
 80039ee:	f107 0314 	add.w	r3, r7, #20
 80039f2:	4618      	mov	r0, r3
 80039f4:	f000 f91d 	bl	8003c32 <_ZNSaIN4tama6SpriteEED1Ev>
    }
 80039f8:	68f8      	ldr	r0, [r7, #12]
 80039fa:	371c      	adds	r7, #28
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd90      	pop	{r4, r7, pc}

08003a00 <_ZSt11make_sharedIN4tama27Nokia5110DisplayDataManagerEJEESt10shared_ptrIT_EDpOT0_>:
    make_shared(_Args&&... __args)
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
				       std::forward<_Args>(__args)...);
 8003a08:	f107 030c 	add.w	r3, r7, #12
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f000 f936 	bl	8003c7e <_ZNSaIN4tama27Nokia5110DisplayDataManagerEEC1Ev>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f107 020c 	add.w	r2, r7, #12
 8003a18:	4611      	mov	r1, r2
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f000 f947 	bl	8003cae <_ZSt15allocate_sharedIN4tama27Nokia5110DisplayDataManagerESaIS1_EJEESt10shared_ptrIT_ERKT0_DpOT1_>
 8003a20:	f107 030c 	add.w	r3, r7, #12
 8003a24:	4618      	mov	r0, r3
 8003a26:	f000 f936 	bl	8003c96 <_ZNSaIN4tama27Nokia5110DisplayDataManagerEED1Ev>
    }
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	3710      	adds	r7, #16
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <_ZSt4moveIRSt10shared_ptrIN4tama27Nokia5110DisplayDataManagerEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8003a32:	b480      	push	{r7}
 8003a34:	b083      	sub	sp, #12
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <_ZNSt10shared_ptrIN4tama18DisplayDataManagerEEC1INS0_27Nokia5110DisplayDataManagerEvEEOS_IT_E>:
	shared_ptr(shared_ptr<_Yp>&& __r) noexcept
 8003a48:	b590      	push	{r4, r7, lr}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 8003a52:	687c      	ldr	r4, [r7, #4]
 8003a54:	6838      	ldr	r0, [r7, #0]
 8003a56:	f7ff ffec 	bl	8003a32 <_ZSt4moveIRSt10shared_ptrIN4tama27Nokia5110DisplayDataManagerEEEONSt16remove_referenceIT_E4typeEOS6_>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	4620      	mov	r0, r4
 8003a60:	f000 f933 	bl	8003cca <_ZNSt12__shared_ptrIN4tama18DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EEC1INS0_27Nokia5110DisplayDataManagerEvEEOS_IT_LS3_0EE>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4618      	mov	r0, r3
 8003a68:	370c      	adds	r7, #12
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd90      	pop	{r4, r7, pc}

08003a6e <_ZSt11make_sharedIN4tama5SceneEJEESt10shared_ptrIT_EDpOT0_>:
    make_shared(_Args&&... __args)
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b084      	sub	sp, #16
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
				       std::forward<_Args>(__args)...);
 8003a76:	f107 030c 	add.w	r3, r7, #12
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7fd fd8e 	bl	800159c <_ZNSaIN4tama5SceneEEC1Ev>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f107 020c 	add.w	r2, r7, #12
 8003a86:	4611      	mov	r1, r2
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f000 f93c 	bl	8003d06 <_ZSt15allocate_sharedIN4tama5SceneESaIS1_EJEESt10shared_ptrIT_ERKT0_DpOT1_>
 8003a8e:	f107 030c 	add.w	r3, r7, #12
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7fd fd8e 	bl	80015b4 <_ZNSaIN4tama5SceneEED1Ev>
    }
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	3710      	adds	r7, #16
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <_ZNKSt19__shared_ptr_accessIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
	return _M_get();
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f000 f93a 	bl	8003d22 <_ZNKSt19__shared_ptr_accessIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 8003aae:	4603      	mov	r3, r0
      }
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3708      	adds	r7, #8
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <_ZNSt10shared_ptrIN4tama8DrawableEEC1INS0_6SpriteEvEERKS_IT_E>:
	shared_ptr(const shared_ptr<_Yp>& __r) noexcept
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
        : __shared_ptr<_Tp>(__r) { }
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	683a      	ldr	r2, [r7, #0]
 8003ac6:	4611      	mov	r1, r2
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f000 f936 	bl	8003d3a <_ZNSt12__shared_ptrIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0EEC1INS0_6SpriteEvEERKS_IT_LS3_0EE>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3708      	adds	r7, #8
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <_ZNKSt19__shared_ptr_accessIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
	return _M_get();
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 f940 	bl	8003d66 <_ZNKSt19__shared_ptr_accessIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 8003ae6:	4603      	mov	r3, r0
      }
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3708      	adds	r7, #8
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <_ZNKSt19__shared_ptr_accessIN4tama18DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
	return _M_get();
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 f940 	bl	8003d7e <_ZNKSt19__shared_ptr_accessIN4tama18DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 8003afe:	4603      	mov	r3, r0
      }
 8003b00:	4618      	mov	r0, r3
 8003b02:	3708      	adds	r7, #8
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <_ZNKSt19__shared_ptr_accessIN4tama7DisplayELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
	return _M_get();
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f000 f940 	bl	8003d96 <_ZNKSt19__shared_ptr_accessIN4tama7DisplayELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 8003b16:	4603      	mov	r3, r0
      }
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3708      	adds	r7, #8
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <_ZSt7forwardIRPPN4tama10PixelColorEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	370c      	adds	r7, #12
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr

08003b36 <_ZSt11make_sharedIN4tama7TextureEJRjS2_RPPNS0_10PixelColorEEESt10shared_ptrIT_EDpOT0_>:
    make_shared(_Args&&... __args)
 8003b36:	b5b0      	push	{r4, r5, r7, lr}
 8003b38:	b088      	sub	sp, #32
 8003b3a:	af02      	add	r7, sp, #8
 8003b3c:	60f8      	str	r0, [r7, #12]
 8003b3e:	60b9      	str	r1, [r7, #8]
 8003b40:	607a      	str	r2, [r7, #4]
 8003b42:	603b      	str	r3, [r7, #0]
				       std::forward<_Args>(__args)...);
 8003b44:	f107 0314 	add.w	r3, r7, #20
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f7fd fd70 	bl	800162e <_ZNSaIN4tama7TextureEEC1Ev>
 8003b4e:	68b8      	ldr	r0, [r7, #8]
 8003b50:	f7fd fb73 	bl	800123a <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 8003b54:	4604      	mov	r4, r0
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f7fd fb6f 	bl	800123a <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 8003b5c:	4605      	mov	r5, r0
 8003b5e:	6838      	ldr	r0, [r7, #0]
 8003b60:	f7ff ffde 	bl	8003b20 <_ZSt7forwardIRPPN4tama10PixelColorEEOT_RNSt16remove_referenceIS5_E4typeE>
 8003b64:	4603      	mov	r3, r0
 8003b66:	68f8      	ldr	r0, [r7, #12]
 8003b68:	f107 0114 	add.w	r1, r7, #20
 8003b6c:	9300      	str	r3, [sp, #0]
 8003b6e:	462b      	mov	r3, r5
 8003b70:	4622      	mov	r2, r4
 8003b72:	f000 f91c 	bl	8003dae <_ZSt15allocate_sharedIN4tama7TextureESaIS1_EJRjS3_RPPNS0_10PixelColorEEESt10shared_ptrIT_ERKT0_DpOT1_>
 8003b76:	f107 0314 	add.w	r3, r7, #20
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7fd fd63 	bl	8001646 <_ZNSaIN4tama7TextureEED1Ev>
    }
 8003b80:	68f8      	ldr	r0, [r7, #12]
 8003b82:	3718      	adds	r7, #24
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bdb0      	pop	{r4, r5, r7, pc}

08003b88 <_ZNSaIN4tama16Nokia5510DisplayEEC1Ev>:
      allocator() throw() { }
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 f92b 	bl	8003dec <_ZN9__gnu_cxx13new_allocatorIN4tama16Nokia5510DisplayEEC1Ev>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3708      	adds	r7, #8
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <_ZNSaIN4tama16Nokia5510DisplayEED1Ev>:
      ~allocator() throw() { }
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 f92a 	bl	8003e02 <_ZN9__gnu_cxx13new_allocatorIN4tama16Nokia5510DisplayEED1Ev>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3708      	adds	r7, #8
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <_ZSt15allocate_sharedIN4tama16Nokia5510DisplayESaIS1_EJRNS0_13DisplayConfigEEESt10shared_ptrIT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 8003bb8:	b590      	push	{r4, r7, lr}
 8003bba:	b087      	sub	sp, #28
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	607a      	str	r2, [r7, #4]
			     std::forward<_Args>(__args)...);
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f7ff fe9d 	bl	8003904 <_ZSt7forwardIRN4tama13DisplayConfigEEOT_RNSt16remove_referenceIS3_E4typeE>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	68ba      	ldr	r2, [r7, #8]
 8003bce:	4621      	mov	r1, r4
 8003bd0:	68f8      	ldr	r0, [r7, #12]
 8003bd2:	f000 f921 	bl	8003e18 <_ZNSt10shared_ptrIN4tama16Nokia5510DisplayEEC1ISaIS1_EJRNS0_13DisplayConfigEEEESt19_Sp_make_shared_tagRKT_DpOT0_>
    }
 8003bd6:	68f8      	ldr	r0, [r7, #12]
 8003bd8:	371c      	adds	r7, #28
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd90      	pop	{r4, r7, pc}

08003bde <_ZNSt12__shared_ptrIN4tama7DisplayELN9__gnu_cxx12_Lock_policyE0EEC1INS0_16Nokia5510DisplayEvEEOS_IT_LS3_0EE>:
	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 8003bde:	b580      	push	{r7, lr}
 8003be0:	b082      	sub	sp, #8
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
 8003be6:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount()
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	601a      	str	r2, [r3, #0]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	3304      	adds	r3, #4
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f7fc ff6f 	bl	8000ad8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _M_refcount._M_swap(__r._M_refcount);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	1d1a      	adds	r2, r3, #4
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	3304      	adds	r3, #4
 8003c02:	4619      	mov	r1, r3
 8003c04:	4610      	mov	r0, r2
 8003c06:	f7fc ffaa 	bl	8000b5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  __r._M_ptr = 0;
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	601a      	str	r2, [r3, #0]
	}
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4618      	mov	r0, r3
 8003c14:	3708      	adds	r7, #8
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}

08003c1a <_ZNSaIN4tama6SpriteEEC1Ev>:
      allocator() throw() { }
 8003c1a:	b580      	push	{r7, lr}
 8003c1c:	b082      	sub	sp, #8
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 f90e 	bl	8003e44 <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEEC1Ev>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3708      	adds	r7, #8
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <_ZNSaIN4tama6SpriteEED1Ev>:
      ~allocator() throw() { }
 8003c32:	b580      	push	{r7, lr}
 8003c34:	b082      	sub	sp, #8
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 f90d 	bl	8003e5a <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEED1Ev>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4618      	mov	r0, r3
 8003c44:	3708      	adds	r7, #8
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <_ZSt15allocate_sharedIN4tama6SpriteESaIS1_EJSt10shared_ptrINS0_7TextureEENS0_5Vec2dEEES3_IT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 8003c4a:	b5b0      	push	{r4, r5, r7, lr}
 8003c4c:	b088      	sub	sp, #32
 8003c4e:	af02      	add	r7, sp, #8
 8003c50:	60f8      	str	r0, [r7, #12]
 8003c52:	60b9      	str	r1, [r7, #8]
 8003c54:	607a      	str	r2, [r7, #4]
 8003c56:	603b      	str	r3, [r7, #0]
			     std::forward<_Args>(__args)...);
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f7ff fe99 	bl	8003990 <_ZSt7forwardISt10shared_ptrIN4tama7TextureEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8003c5e:	4604      	mov	r4, r0
 8003c60:	6838      	ldr	r0, [r7, #0]
 8003c62:	f7ff fea0 	bl	80039a6 <_ZSt7forwardIN4tama5Vec2dEEOT_RNSt16remove_referenceIS2_E4typeE>
 8003c66:	4603      	mov	r3, r0
 8003c68:	9300      	str	r3, [sp, #0]
 8003c6a:	4623      	mov	r3, r4
 8003c6c:	68ba      	ldr	r2, [r7, #8]
 8003c6e:	4629      	mov	r1, r5
 8003c70:	68f8      	ldr	r0, [r7, #12]
 8003c72:	f000 f8fd 	bl	8003e70 <_ZNSt10shared_ptrIN4tama6SpriteEEC1ISaIS1_EJS_INS0_7TextureEENS0_5Vec2dEEEESt19_Sp_make_shared_tagRKT_DpOT0_>
    }
 8003c76:	68f8      	ldr	r0, [r7, #12]
 8003c78:	3718      	adds	r7, #24
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bdb0      	pop	{r4, r5, r7, pc}

08003c7e <_ZNSaIN4tama27Nokia5110DisplayDataManagerEEC1Ev>:
      allocator() throw() { }
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b082      	sub	sp, #8
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 f90e 	bl	8003ea8 <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEEC1Ev>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3708      	adds	r7, #8
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}

08003c96 <_ZNSaIN4tama27Nokia5110DisplayDataManagerEED1Ev>:
      ~allocator() throw() { }
 8003c96:	b580      	push	{r7, lr}
 8003c98:	b082      	sub	sp, #8
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 f90d 	bl	8003ebe <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEED1Ev>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3708      	adds	r7, #8
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}

08003cae <_ZSt15allocate_sharedIN4tama27Nokia5110DisplayDataManagerESaIS1_EJEESt10shared_ptrIT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b084      	sub	sp, #16
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
 8003cb6:	6039      	str	r1, [r7, #0]
			     std::forward<_Args>(__args)...);
 8003cb8:	683a      	ldr	r2, [r7, #0]
 8003cba:	4619      	mov	r1, r3
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f000 f909 	bl	8003ed4 <_ZNSt10shared_ptrIN4tama27Nokia5110DisplayDataManagerEEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>
    }
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	3710      	adds	r7, #16
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}

08003cca <_ZNSt12__shared_ptrIN4tama18DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EEC1INS0_27Nokia5110DisplayDataManagerEvEEOS_IT_LS3_0EE>:
	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 8003cca:	b580      	push	{r7, lr}
 8003ccc:	b082      	sub	sp, #8
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
 8003cd2:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount()
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	601a      	str	r2, [r3, #0]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	3304      	adds	r3, #4
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7fc fef9 	bl	8000ad8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _M_refcount._M_swap(__r._M_refcount);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	1d1a      	adds	r2, r3, #4
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	3304      	adds	r3, #4
 8003cee:	4619      	mov	r1, r3
 8003cf0:	4610      	mov	r0, r2
 8003cf2:	f7fc ff34 	bl	8000b5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  __r._M_ptr = 0;
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	601a      	str	r2, [r3, #0]
	}
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3708      	adds	r7, #8
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <_ZSt15allocate_sharedIN4tama5SceneESaIS1_EJEESt10shared_ptrIT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b084      	sub	sp, #16
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
 8003d0e:	6039      	str	r1, [r7, #0]
			     std::forward<_Args>(__args)...);
 8003d10:	683a      	ldr	r2, [r7, #0]
 8003d12:	4619      	mov	r1, r3
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f000 f8ee 	bl	8003ef6 <_ZNSt10shared_ptrIN4tama5SceneEEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>
    }
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	3710      	adds	r7, #16
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <_ZNKSt19__shared_ptr_accessIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b082      	sub	sp, #8
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 f8f4 	bl	8003f18 <_ZNKSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE3getEv>
 8003d30:	4603      	mov	r3, r0
 8003d32:	4618      	mov	r0, r3
 8003d34:	3708      	adds	r7, #8
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}

08003d3a <_ZNSt12__shared_ptrIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0EEC1INS0_6SpriteEvEERKS_IT_LS3_0EE>:
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b082      	sub	sp, #8
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
 8003d42:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	601a      	str	r2, [r3, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	1d1a      	adds	r2, r3, #4
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	3304      	adds	r3, #4
 8003d54:	4619      	mov	r1, r3
 8003d56:	4610      	mov	r0, r2
 8003d58:	f7fc fbf8 	bl	800054c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	{ }
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3708      	adds	r7, #8
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}

08003d66 <_ZNKSt19__shared_ptr_accessIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 8003d66:	b580      	push	{r7, lr}
 8003d68:	b082      	sub	sp, #8
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f000 f8de 	bl	8003f30 <_ZNKSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE3getEv>
 8003d74:	4603      	mov	r3, r0
 8003d76:	4618      	mov	r0, r3
 8003d78:	3708      	adds	r7, #8
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}

08003d7e <_ZNKSt19__shared_ptr_accessIN4tama18DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 8003d7e:	b580      	push	{r7, lr}
 8003d80:	b082      	sub	sp, #8
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 f8de 	bl	8003f48 <_ZNKSt12__shared_ptrIN4tama18DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE3getEv>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3708      	adds	r7, #8
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <_ZNKSt19__shared_ptr_accessIN4tama7DisplayELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 8003d96:	b580      	push	{r7, lr}
 8003d98:	b082      	sub	sp, #8
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 f8de 	bl	8003f60 <_ZNKSt12__shared_ptrIN4tama7DisplayELN9__gnu_cxx12_Lock_policyE0EE3getEv>
 8003da4:	4603      	mov	r3, r0
 8003da6:	4618      	mov	r0, r3
 8003da8:	3708      	adds	r7, #8
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}

08003dae <_ZSt15allocate_sharedIN4tama7TextureESaIS1_EJRjS3_RPPNS0_10PixelColorEEESt10shared_ptrIT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 8003dae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003db0:	b089      	sub	sp, #36	; 0x24
 8003db2:	af02      	add	r7, sp, #8
 8003db4:	60f8      	str	r0, [r7, #12]
 8003db6:	60b9      	str	r1, [r7, #8]
 8003db8:	607a      	str	r2, [r7, #4]
 8003dba:	603b      	str	r3, [r7, #0]
			     std::forward<_Args>(__args)...);
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f7fd fa3c 	bl	800123a <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 8003dc2:	4605      	mov	r5, r0
 8003dc4:	6838      	ldr	r0, [r7, #0]
 8003dc6:	f7fd fa38 	bl	800123a <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 8003dca:	4604      	mov	r4, r0
 8003dcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003dce:	f7ff fea7 	bl	8003b20 <_ZSt7forwardIRPPN4tama10PixelColorEEOT_RNSt16remove_referenceIS5_E4typeE>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	9301      	str	r3, [sp, #4]
 8003dd6:	9400      	str	r4, [sp, #0]
 8003dd8:	462b      	mov	r3, r5
 8003dda:	68ba      	ldr	r2, [r7, #8]
 8003ddc:	4631      	mov	r1, r6
 8003dde:	68f8      	ldr	r0, [r7, #12]
 8003de0:	f000 f8ca 	bl	8003f78 <_ZNSt10shared_ptrIN4tama7TextureEEC1ISaIS1_EJRjS5_RPPNS0_10PixelColorEEEESt19_Sp_make_shared_tagRKT_DpOT0_>
    }
 8003de4:	68f8      	ldr	r0, [r7, #12]
 8003de6:	371c      	adds	r7, #28
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003dec <_ZN9__gnu_cxx13new_allocatorIN4tama16Nokia5510DisplayEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4618      	mov	r0, r3
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr

08003e02 <_ZN9__gnu_cxx13new_allocatorIN4tama16Nokia5510DisplayEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003e02:	b480      	push	{r7}
 8003e04:	b083      	sub	sp, #12
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <_ZNSt10shared_ptrIN4tama16Nokia5510DisplayEEC1ISaIS1_EJRNS0_13DisplayConfigEEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8003e18:	b5b0      	push	{r4, r5, r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	7239      	strb	r1, [r7, #8]
 8003e22:	607a      	str	r2, [r7, #4]
 8003e24:	603b      	str	r3, [r7, #0]
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
 8003e26:	68fc      	ldr	r4, [r7, #12]
 8003e28:	6838      	ldr	r0, [r7, #0]
 8003e2a:	f7ff fd6b 	bl	8003904 <_ZSt7forwardIRN4tama13DisplayConfigEEOT_RNSt16remove_referenceIS3_E4typeE>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	4629      	mov	r1, r5
 8003e34:	4620      	mov	r0, r4
 8003e36:	f000 f8df 	bl	8003ff8 <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJRNS0_13DisplayConfigEEEESt19_Sp_make_shared_tagRKT_DpOT0_>
	{ }
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3710      	adds	r7, #16
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bdb0      	pop	{r4, r5, r7, pc}

08003e44 <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4618      	mov	r0, r3
 8003e50:	370c      	adds	r7, #12
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr

08003e5a <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003e5a:	b480      	push	{r7}
 8003e5c:	b083      	sub	sp, #12
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4618      	mov	r0, r3
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <_ZNSt10shared_ptrIN4tama6SpriteEEC1ISaIS1_EJS_INS0_7TextureEENS0_5Vec2dEEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8003e70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e72:	b087      	sub	sp, #28
 8003e74:	af02      	add	r7, sp, #8
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	7239      	strb	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]
 8003e7c:	603b      	str	r3, [r7, #0]
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
 8003e7e:	68fc      	ldr	r4, [r7, #12]
 8003e80:	6838      	ldr	r0, [r7, #0]
 8003e82:	f7ff fd85 	bl	8003990 <_ZSt7forwardISt10shared_ptrIN4tama7TextureEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8003e86:	4605      	mov	r5, r0
 8003e88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e8a:	f7ff fd8c 	bl	80039a6 <_ZSt7forwardIN4tama5Vec2dEEOT_RNSt16remove_referenceIS2_E4typeE>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	9300      	str	r3, [sp, #0]
 8003e92:	462b      	mov	r3, r5
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	4631      	mov	r1, r6
 8003e98:	4620      	mov	r0, r4
 8003e9a:	f000 f945 	bl	8004128 <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJSt10shared_ptrINS0_7TextureEENS0_5Vec2dEEEESt19_Sp_make_shared_tagRKT_DpOT0_>
	{ }
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3714      	adds	r7, #20
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ea8 <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	370c      	adds	r7, #12
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr

08003ebe <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003ebe:	b480      	push	{r7}
 8003ec0:	b083      	sub	sp, #12
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4618      	mov	r0, r3
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <_ZNSt10shared_ptrIN4tama27Nokia5110DisplayDataManagerEEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8003ed4:	b590      	push	{r4, r7, lr}
 8003ed6:	b085      	sub	sp, #20
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	7239      	strb	r1, [r7, #8]
 8003ede:	607a      	str	r2, [r7, #4]
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	4621      	mov	r1, r4
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f000 f9ba 	bl	8004260 <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>
	{ }
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3714      	adds	r7, #20
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd90      	pop	{r4, r7, pc}

08003ef6 <_ZNSt10shared_ptrIN4tama5SceneEEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8003ef6:	b590      	push	{r4, r7, lr}
 8003ef8:	b085      	sub	sp, #20
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	60f8      	str	r0, [r7, #12]
 8003efe:	7239      	strb	r1, [r7, #8]
 8003f00:	607a      	str	r2, [r7, #4]
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	4621      	mov	r1, r4
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f000 fa1f 	bl	800434c <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>
	{ }
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	4618      	mov	r0, r3
 8003f12:	3714      	adds	r7, #20
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd90      	pop	{r4, r7, pc}

08003f18 <_ZNKSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4618      	mov	r0, r3
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <_ZNKSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <_ZNKSt12__shared_ptrIN4tama18DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4618      	mov	r0, r3
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <_ZNKSt12__shared_ptrIN4tama7DisplayELN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <_ZNSt10shared_ptrIN4tama7TextureEEC1ISaIS1_EJRjS5_RPPNS0_10PixelColorEEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8003f78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f7c:	b086      	sub	sp, #24
 8003f7e:	af02      	add	r7, sp, #8
 8003f80:	60f8      	str	r0, [r7, #12]
 8003f82:	7239      	strb	r1, [r7, #8]
 8003f84:	607a      	str	r2, [r7, #4]
 8003f86:	603b      	str	r3, [r7, #0]
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
 8003f88:	68fc      	ldr	r4, [r7, #12]
 8003f8a:	6838      	ldr	r0, [r7, #0]
 8003f8c:	f7fd f955 	bl	800123a <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 8003f90:	4606      	mov	r6, r0
 8003f92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f94:	f7fd f951 	bl	800123a <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 8003f98:	4605      	mov	r5, r0
 8003f9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003f9c:	f7ff fdc0 	bl	8003b20 <_ZSt7forwardIRPPN4tama10PixelColorEEOT_RNSt16remove_referenceIS5_E4typeE>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	9301      	str	r3, [sp, #4]
 8003fa4:	9500      	str	r5, [sp, #0]
 8003fa6:	4633      	mov	r3, r6
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	4641      	mov	r1, r8
 8003fac:	4620      	mov	r0, r4
 8003fae:	f000 fa43 	bl	8004438 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJRjS7_RPPNS0_10PixelColorEEEESt19_Sp_make_shared_tagRKT_DpOT0_>
	{ }
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3710      	adds	r7, #16
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003fbe <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>:
        struct _Deleter
 8003fbe:	b580      	push	{r7, lr}
 8003fc0:	b082      	sub	sp, #8
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7ff fde9 	bl	8003ba0 <_ZNSaIN4tama16Nokia5510DisplayEED1Ev>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3708      	adds	r7, #8
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>:
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	683a      	ldr	r2, [r7, #0]
 8003fe6:	4611      	mov	r1, r2
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f000 faaa 	bl	8004542 <_ZNSaIN4tama16Nokia5510DisplayEEC1ERKS1_>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3708      	adds	r7, #8
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJRNS0_13DisplayConfigEEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b08c      	sub	sp, #48	; 0x30
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	7239      	strb	r1, [r7, #8]
 8004002:	607a      	str	r2, [r7, #4]
 8004004:	603b      	str	r3, [r7, #0]
	: _M_ptr(), _M_refcount()
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2200      	movs	r2, #0
 800400a:	601a      	str	r2, [r3, #0]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	3304      	adds	r3, #4
 8004010:	4618      	mov	r0, r3
 8004012:	f7fc fd61 	bl	8000ad8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 8004016:	f107 0320 	add.w	r3, r7, #32
 800401a:	6879      	ldr	r1, [r7, #4]
 800401c:	4618      	mov	r0, r3
 800401e:	f000 fa90 	bl	8004542 <_ZNSaIN4tama16Nokia5510DisplayEEC1ERKS1_>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 8004022:	f107 0318 	add.w	r3, r7, #24
 8004026:	f107 0220 	add.w	r2, r7, #32
 800402a:	4611      	mov	r1, r2
 800402c:	4618      	mov	r0, r3
 800402e:	f000 fa96 	bl	800455e <_ZSt18__allocate_guardedISaIN4tama16Nokia5510DisplayEEESt15__allocated_ptrIT_ERS4_>
	  auto __ptr = __guard.get();
 8004032:	f107 0318 	add.w	r3, r7, #24
 8004036:	4618      	mov	r0, r3
 8004038:	f000 fab9 	bl	80045ae <_ZNSt15__allocated_ptrISaIN4tama16Nokia5510DisplayEEE3getEv>
 800403c:	62f8      	str	r0, [r7, #44]	; 0x2c
	  __traits::construct(__del._M_alloc, __ptr,
 800403e:	6838      	ldr	r0, [r7, #0]
 8004040:	f7ff fc60 	bl	8003904 <_ZSt7forwardIRN4tama13DisplayConfigEEOT_RNSt16remove_referenceIS3_E4typeE>
 8004044:	4602      	mov	r2, r0
 8004046:	f107 0320 	add.w	r3, r7, #32
 800404a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800404c:	4618      	mov	r0, r3
 800404e:	f000 fabc 	bl	80045ca <_ZNSt16allocator_traitsISaIN4tama16Nokia5510DisplayEEE9constructIS1_JRNS0_13DisplayConfigEEEEvRS2_PT_DpOT0_>
	  __guard = nullptr;
 8004052:	f107 0318 	add.w	r3, r7, #24
 8004056:	2100      	movs	r1, #0
 8004058:	4618      	mov	r0, r3
 800405a:	f000 fac9 	bl	80045f0 <_ZNSt15__allocated_ptrISaIN4tama16Nokia5510DisplayEEEaSEDn>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 800405e:	f107 0220 	add.w	r2, r7, #32
 8004062:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004066:	4611      	mov	r1, r2
 8004068:	4618      	mov	r0, r3
 800406a:	f7ff ffb5 	bl	8003fd8 <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>
 800406e:	f107 0220 	add.w	r2, r7, #32
 8004072:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004076:	4611      	mov	r1, r2
 8004078:	4618      	mov	r0, r3
 800407a:	f000 fa62 	bl	8004542 <_ZNSaIN4tama16Nokia5510DisplayEEC1ERKS1_>
 800407e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004082:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004086:	f107 0014 	add.w	r0, r7, #20
 800408a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800408c:	f000 fae5 	bl	800465a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama16Nokia5510DisplayENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
 8004090:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004094:	4618      	mov	r0, r3
 8004096:	f7ff fd83 	bl	8003ba0 <_ZNSaIN4tama16Nokia5510DisplayEED1Ev>
 800409a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800409e:	4618      	mov	r0, r3
 80040a0:	f7ff ff8d 	bl	8003fbe <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	  _M_refcount._M_swap(__count);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	3304      	adds	r3, #4
 80040a8:	f107 0214 	add.w	r2, r7, #20
 80040ac:	4611      	mov	r1, r2
 80040ae:	4618      	mov	r0, r3
 80040b0:	f7fc fd55 	bl	8000b5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  _M_ptr = __ptr;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040b8:	601a      	str	r2, [r3, #0]
	  _M_enable_shared_from_this_with(_M_ptr);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4619      	mov	r1, r3
 80040c0:	68f8      	ldr	r0, [r7, #12]
 80040c2:	f000 fb21 	bl	8004708 <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 80040c6:	f107 0314 	add.w	r3, r7, #20
 80040ca:	4618      	mov	r0, r3
 80040cc:	f7fc fc3c 	bl	8000948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 80040d0:	f107 0318 	add.w	r3, r7, #24
 80040d4:	4618      	mov	r0, r3
 80040d6:	f000 fa55 	bl	8004584 <_ZNSt15__allocated_ptrISaIN4tama16Nokia5510DisplayEEED1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 80040da:	f107 0320 	add.w	r3, r7, #32
 80040de:	4618      	mov	r0, r3
 80040e0:	f7ff ff6d 	bl	8003fbe <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	}
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	4618      	mov	r0, r3
 80040e8:	3730      	adds	r7, #48	; 0x30
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}

080040ee <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>:
        struct _Deleter
 80040ee:	b580      	push	{r7, lr}
 80040f0:	b082      	sub	sp, #8
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7ff fd9a 	bl	8003c32 <_ZNSaIN4tama6SpriteEED1Ev>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4618      	mov	r0, r3
 8004102:	3708      	adds	r7, #8
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>:
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	683a      	ldr	r2, [r7, #0]
 8004116:	4611      	mov	r1, r2
 8004118:	4618      	mov	r0, r3
 800411a:	f000 fb00 	bl	800471e <_ZNSaIN4tama6SpriteEEC1ERKS1_>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4618      	mov	r0, r3
 8004122:	3708      	adds	r7, #8
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJSt10shared_ptrINS0_7TextureEENS0_5Vec2dEEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8004128:	b590      	push	{r4, r7, lr}
 800412a:	b08d      	sub	sp, #52	; 0x34
 800412c:	af00      	add	r7, sp, #0
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	7239      	strb	r1, [r7, #8]
 8004132:	607a      	str	r2, [r7, #4]
 8004134:	603b      	str	r3, [r7, #0]
	: _M_ptr(), _M_refcount()
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	601a      	str	r2, [r3, #0]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	3304      	adds	r3, #4
 8004140:	4618      	mov	r0, r3
 8004142:	f7fc fcc9 	bl	8000ad8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 8004146:	f107 0320 	add.w	r3, r7, #32
 800414a:	6879      	ldr	r1, [r7, #4]
 800414c:	4618      	mov	r0, r3
 800414e:	f000 fae6 	bl	800471e <_ZNSaIN4tama6SpriteEEC1ERKS1_>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 8004152:	f107 0318 	add.w	r3, r7, #24
 8004156:	f107 0220 	add.w	r2, r7, #32
 800415a:	4611      	mov	r1, r2
 800415c:	4618      	mov	r0, r3
 800415e:	f000 faec 	bl	800473a <_ZSt18__allocate_guardedISaIN4tama6SpriteEEESt15__allocated_ptrIT_ERS4_>
	  auto __ptr = __guard.get();
 8004162:	f107 0318 	add.w	r3, r7, #24
 8004166:	4618      	mov	r0, r3
 8004168:	f000 fb0f 	bl	800478a <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEE3getEv>
 800416c:	62f8      	str	r0, [r7, #44]	; 0x2c
	  __traits::construct(__del._M_alloc, __ptr,
 800416e:	6838      	ldr	r0, [r7, #0]
 8004170:	f7ff fc0e 	bl	8003990 <_ZSt7forwardISt10shared_ptrIN4tama7TextureEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004174:	4604      	mov	r4, r0
 8004176:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004178:	f7ff fc15 	bl	80039a6 <_ZSt7forwardIN4tama5Vec2dEEOT_RNSt16remove_referenceIS2_E4typeE>
 800417c:	4603      	mov	r3, r0
 800417e:	f107 0020 	add.w	r0, r7, #32
 8004182:	4622      	mov	r2, r4
 8004184:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004186:	f000 fb0e 	bl	80047a6 <_ZNSt16allocator_traitsISaIN4tama6SpriteEEE9constructIS1_JSt10shared_ptrINS0_7TextureEENS0_5Vec2dEEEEvRS2_PT_DpOT0_>
	  __guard = nullptr;
 800418a:	f107 0318 	add.w	r3, r7, #24
 800418e:	2100      	movs	r1, #0
 8004190:	4618      	mov	r0, r3
 8004192:	f000 fb20 	bl	80047d6 <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEEaSEDn>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 8004196:	f107 0220 	add.w	r2, r7, #32
 800419a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800419e:	4611      	mov	r1, r2
 80041a0:	4618      	mov	r0, r3
 80041a2:	f7ff ffb1 	bl	8004108 <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>
 80041a6:	f107 0220 	add.w	r2, r7, #32
 80041aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80041ae:	4611      	mov	r1, r2
 80041b0:	4618      	mov	r0, r3
 80041b2:	f000 fab4 	bl	800471e <_ZNSaIN4tama6SpriteEEC1ERKS1_>
 80041b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80041ba:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80041be:	f107 0014 	add.w	r0, r7, #20
 80041c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80041c4:	f000 fb3c 	bl	8004840 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama6SpriteENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
 80041c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80041cc:	4618      	mov	r0, r3
 80041ce:	f7ff fd30 	bl	8003c32 <_ZNSaIN4tama6SpriteEED1Ev>
 80041d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041d6:	4618      	mov	r0, r3
 80041d8:	f7ff ff89 	bl	80040ee <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	  _M_refcount._M_swap(__count);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	3304      	adds	r3, #4
 80041e0:	f107 0214 	add.w	r2, r7, #20
 80041e4:	4611      	mov	r1, r2
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7fc fcb9 	bl	8000b5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  _M_ptr = __ptr;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041f0:	601a      	str	r2, [r3, #0]
	  _M_enable_shared_from_this_with(_M_ptr);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4619      	mov	r1, r3
 80041f8:	68f8      	ldr	r0, [r7, #12]
 80041fa:	f000 fb78 	bl	80048ee <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 80041fe:	f107 0314 	add.w	r3, r7, #20
 8004202:	4618      	mov	r0, r3
 8004204:	f7fc fba0 	bl	8000948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 8004208:	f107 0318 	add.w	r3, r7, #24
 800420c:	4618      	mov	r0, r3
 800420e:	f000 faa7 	bl	8004760 <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEED1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 8004212:	f107 0320 	add.w	r3, r7, #32
 8004216:	4618      	mov	r0, r3
 8004218:	f7ff ff69 	bl	80040ee <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	}
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	4618      	mov	r0, r3
 8004220:	3734      	adds	r7, #52	; 0x34
 8004222:	46bd      	mov	sp, r7
 8004224:	bd90      	pop	{r4, r7, pc}

08004226 <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>:
        struct _Deleter
 8004226:	b580      	push	{r7, lr}
 8004228:	b082      	sub	sp, #8
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4618      	mov	r0, r3
 8004232:	f7ff fd30 	bl	8003c96 <_ZNSaIN4tama27Nokia5110DisplayDataManagerEED1Ev>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4618      	mov	r0, r3
 800423a:	3708      	adds	r7, #8
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>:
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	683a      	ldr	r2, [r7, #0]
 800424e:	4611      	mov	r1, r2
 8004250:	4618      	mov	r0, r3
 8004252:	f000 fb57 	bl	8004904 <_ZNSaIN4tama27Nokia5110DisplayDataManagerEEC1ERKS1_>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4618      	mov	r0, r3
 800425a:	3708      	adds	r7, #8
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8004260:	b580      	push	{r7, lr}
 8004262:	b08c      	sub	sp, #48	; 0x30
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	7239      	strb	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
	: _M_ptr(), _M_refcount()
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2200      	movs	r2, #0
 8004270:	601a      	str	r2, [r3, #0]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	3304      	adds	r3, #4
 8004276:	4618      	mov	r0, r3
 8004278:	f7fc fc2e 	bl	8000ad8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 800427c:	f107 0320 	add.w	r3, r7, #32
 8004280:	6879      	ldr	r1, [r7, #4]
 8004282:	4618      	mov	r0, r3
 8004284:	f000 fb3e 	bl	8004904 <_ZNSaIN4tama27Nokia5110DisplayDataManagerEEC1ERKS1_>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 8004288:	f107 0318 	add.w	r3, r7, #24
 800428c:	f107 0220 	add.w	r2, r7, #32
 8004290:	4611      	mov	r1, r2
 8004292:	4618      	mov	r0, r3
 8004294:	f000 fb44 	bl	8004920 <_ZSt18__allocate_guardedISaIN4tama27Nokia5110DisplayDataManagerEEESt15__allocated_ptrIT_ERS4_>
	  auto __ptr = __guard.get();
 8004298:	f107 0318 	add.w	r3, r7, #24
 800429c:	4618      	mov	r0, r3
 800429e:	f000 fb67 	bl	8004970 <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEE3getEv>
 80042a2:	62f8      	str	r0, [r7, #44]	; 0x2c
	  __traits::construct(__del._M_alloc, __ptr,
 80042a4:	f107 0320 	add.w	r3, r7, #32
 80042a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042aa:	4618      	mov	r0, r3
 80042ac:	f000 fb6e 	bl	800498c <_ZNSt16allocator_traitsISaIN4tama27Nokia5110DisplayDataManagerEEE9constructIS1_JEEEvRS2_PT_DpOT0_>
	  __guard = nullptr;
 80042b0:	f107 0318 	add.w	r3, r7, #24
 80042b4:	2100      	movs	r1, #0
 80042b6:	4618      	mov	r0, r3
 80042b8:	f000 fb75 	bl	80049a6 <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEEaSEDn>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 80042bc:	f107 0220 	add.w	r2, r7, #32
 80042c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042c4:	4611      	mov	r1, r2
 80042c6:	4618      	mov	r0, r3
 80042c8:	f7ff ffba 	bl	8004240 <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>
 80042cc:	f107 0220 	add.w	r2, r7, #32
 80042d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80042d4:	4611      	mov	r1, r2
 80042d6:	4618      	mov	r0, r3
 80042d8:	f000 fb14 	bl	8004904 <_ZNSaIN4tama27Nokia5110DisplayDataManagerEEC1ERKS1_>
 80042dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80042e0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80042e4:	f107 0014 	add.w	r0, r7, #20
 80042e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042ea:	f000 fb91 	bl	8004a10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
 80042ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7ff fccf 	bl	8003c96 <_ZNSaIN4tama27Nokia5110DisplayDataManagerEED1Ev>
 80042f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7ff ff92 	bl	8004226 <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	  _M_refcount._M_swap(__count);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	3304      	adds	r3, #4
 8004306:	f107 0214 	add.w	r2, r7, #20
 800430a:	4611      	mov	r1, r2
 800430c:	4618      	mov	r0, r3
 800430e:	f7fc fc26 	bl	8000b5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  _M_ptr = __ptr;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004316:	601a      	str	r2, [r3, #0]
	  _M_enable_shared_from_this_with(_M_ptr);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4619      	mov	r1, r3
 800431e:	68f8      	ldr	r0, [r7, #12]
 8004320:	f000 fbcd 	bl	8004abe <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 8004324:	f107 0314 	add.w	r3, r7, #20
 8004328:	4618      	mov	r0, r3
 800432a:	f7fc fb0d 	bl	8000948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 800432e:	f107 0318 	add.w	r3, r7, #24
 8004332:	4618      	mov	r0, r3
 8004334:	f000 fb07 	bl	8004946 <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEED1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 8004338:	f107 0320 	add.w	r3, r7, #32
 800433c:	4618      	mov	r0, r3
 800433e:	f7ff ff72 	bl	8004226 <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	}
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	4618      	mov	r0, r3
 8004346:	3730      	adds	r7, #48	; 0x30
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 800434c:	b580      	push	{r7, lr}
 800434e:	b08c      	sub	sp, #48	; 0x30
 8004350:	af00      	add	r7, sp, #0
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	7239      	strb	r1, [r7, #8]
 8004356:	607a      	str	r2, [r7, #4]
	: _M_ptr(), _M_refcount()
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2200      	movs	r2, #0
 800435c:	601a      	str	r2, [r3, #0]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	3304      	adds	r3, #4
 8004362:	4618      	mov	r0, r3
 8004364:	f7fc fbb8 	bl	8000ad8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 8004368:	f107 0320 	add.w	r3, r7, #32
 800436c:	6879      	ldr	r1, [r7, #4]
 800436e:	4618      	mov	r0, r3
 8004370:	f7fd fd61 	bl	8001e36 <_ZNSaIN4tama5SceneEEC1ERKS1_>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 8004374:	f107 0318 	add.w	r3, r7, #24
 8004378:	f107 0220 	add.w	r2, r7, #32
 800437c:	4611      	mov	r1, r2
 800437e:	4618      	mov	r0, r3
 8004380:	f7fd fd67 	bl	8001e52 <_ZSt18__allocate_guardedISaIN4tama5SceneEEESt15__allocated_ptrIT_ERS4_>
	  auto __ptr = __guard.get();
 8004384:	f107 0318 	add.w	r3, r7, #24
 8004388:	4618      	mov	r0, r3
 800438a:	f7fd fd8a 	bl	8001ea2 <_ZNSt15__allocated_ptrISaIN4tama5SceneEEE3getEv>
 800438e:	62f8      	str	r0, [r7, #44]	; 0x2c
	  __traits::construct(__del._M_alloc, __ptr,
 8004390:	f107 0320 	add.w	r3, r7, #32
 8004394:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004396:	4618      	mov	r0, r3
 8004398:	f000 fb9c 	bl	8004ad4 <_ZNSt16allocator_traitsISaIN4tama5SceneEEE9constructIS1_JEEEvRS2_PT_DpOT0_>
	  __guard = nullptr;
 800439c:	f107 0318 	add.w	r3, r7, #24
 80043a0:	2100      	movs	r1, #0
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7fd fd9e 	bl	8001ee4 <_ZNSt15__allocated_ptrISaIN4tama5SceneEEEaSEDn>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 80043a8:	f107 0220 	add.w	r2, r7, #32
 80043ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043b0:	4611      	mov	r1, r2
 80043b2:	4618      	mov	r0, r3
 80043b4:	f7fd fb9f 	bl	8001af6 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>
 80043b8:	f107 0220 	add.w	r2, r7, #32
 80043bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80043c0:	4611      	mov	r1, r2
 80043c2:	4618      	mov	r0, r3
 80043c4:	f7fd fd37 	bl	8001e36 <_ZNSaIN4tama5SceneEEC1ERKS1_>
 80043c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80043cc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80043d0:	f107 0014 	add.w	r0, r7, #20
 80043d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80043d6:	f7fd fdba 	bl	8001f4e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama5SceneENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
 80043da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80043de:	4618      	mov	r0, r3
 80043e0:	f7fd f8e8 	bl	80015b4 <_ZNSaIN4tama5SceneEED1Ev>
 80043e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043e8:	4618      	mov	r0, r3
 80043ea:	f7fd fb77 	bl	8001adc <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	  _M_refcount._M_swap(__count);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	3304      	adds	r3, #4
 80043f2:	f107 0214 	add.w	r2, r7, #20
 80043f6:	4611      	mov	r1, r2
 80043f8:	4618      	mov	r0, r3
 80043fa:	f7fc fbb0 	bl	8000b5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  _M_ptr = __ptr;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004402:	601a      	str	r2, [r3, #0]
	  _M_enable_shared_from_this_with(_M_ptr);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4619      	mov	r1, r3
 800440a:	68f8      	ldr	r0, [r7, #12]
 800440c:	f7fd fdf6 	bl	8001ffc <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 8004410:	f107 0314 	add.w	r3, r7, #20
 8004414:	4618      	mov	r0, r3
 8004416:	f7fc fa97 	bl	8000948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 800441a:	f107 0318 	add.w	r3, r7, #24
 800441e:	4618      	mov	r0, r3
 8004420:	f7fd fd2a 	bl	8001e78 <_ZNSt15__allocated_ptrISaIN4tama5SceneEEED1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 8004424:	f107 0320 	add.w	r3, r7, #32
 8004428:	4618      	mov	r0, r3
 800442a:	f7fd fb57 	bl	8001adc <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	}
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	4618      	mov	r0, r3
 8004432:	3730      	adds	r7, #48	; 0x30
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJRjS7_RPPNS0_10PixelColorEEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8004438:	b5b0      	push	{r4, r5, r7, lr}
 800443a:	b08e      	sub	sp, #56	; 0x38
 800443c:	af02      	add	r7, sp, #8
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	7239      	strb	r1, [r7, #8]
 8004442:	607a      	str	r2, [r7, #4]
 8004444:	603b      	str	r3, [r7, #0]
	: _M_ptr(), _M_refcount()
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	601a      	str	r2, [r3, #0]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	3304      	adds	r3, #4
 8004450:	4618      	mov	r0, r3
 8004452:	f7fc fb41 	bl	8000ad8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 8004456:	f107 0320 	add.w	r3, r7, #32
 800445a:	6879      	ldr	r1, [r7, #4]
 800445c:	4618      	mov	r0, r3
 800445e:	f7fd fdd8 	bl	8002012 <_ZNSaIN4tama7TextureEEC1ERKS1_>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 8004462:	f107 0318 	add.w	r3, r7, #24
 8004466:	f107 0220 	add.w	r2, r7, #32
 800446a:	4611      	mov	r1, r2
 800446c:	4618      	mov	r0, r3
 800446e:	f7fd fdde 	bl	800202e <_ZSt18__allocate_guardedISaIN4tama7TextureEEESt15__allocated_ptrIT_ERS4_>
	  auto __ptr = __guard.get();
 8004472:	f107 0318 	add.w	r3, r7, #24
 8004476:	4618      	mov	r0, r3
 8004478:	f7fd fe01 	bl	800207e <_ZNSt15__allocated_ptrISaIN4tama7TextureEEE3getEv>
 800447c:	62f8      	str	r0, [r7, #44]	; 0x2c
	  __traits::construct(__del._M_alloc, __ptr,
 800447e:	6838      	ldr	r0, [r7, #0]
 8004480:	f7fc fedb 	bl	800123a <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 8004484:	4604      	mov	r4, r0
 8004486:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004488:	f7fc fed7 	bl	800123a <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 800448c:	4605      	mov	r5, r0
 800448e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004490:	f7ff fb46 	bl	8003b20 <_ZSt7forwardIRPPN4tama10PixelColorEEOT_RNSt16remove_referenceIS5_E4typeE>
 8004494:	4603      	mov	r3, r0
 8004496:	f107 0020 	add.w	r0, r7, #32
 800449a:	9300      	str	r3, [sp, #0]
 800449c:	462b      	mov	r3, r5
 800449e:	4622      	mov	r2, r4
 80044a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80044a2:	f000 fb24 	bl	8004aee <_ZNSt16allocator_traitsISaIN4tama7TextureEEE9constructIS1_JRjS5_RPPNS0_10PixelColorEEEEvRS2_PT_DpOT0_>
	  __guard = nullptr;
 80044a6:	f107 0318 	add.w	r3, r7, #24
 80044aa:	2100      	movs	r1, #0
 80044ac:	4618      	mov	r0, r3
 80044ae:	f7fd fe0c 	bl	80020ca <_ZNSt15__allocated_ptrISaIN4tama7TextureEEEaSEDn>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 80044b2:	f107 0220 	add.w	r2, r7, #32
 80044b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044ba:	4611      	mov	r1, r2
 80044bc:	4618      	mov	r0, r3
 80044be:	f7fd fbb2 	bl	8001c26 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>
 80044c2:	f107 0220 	add.w	r2, r7, #32
 80044c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80044ca:	4611      	mov	r1, r2
 80044cc:	4618      	mov	r0, r3
 80044ce:	f7fd fda0 	bl	8002012 <_ZNSaIN4tama7TextureEEC1ERKS1_>
 80044d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80044d6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80044da:	f107 0014 	add.w	r0, r7, #20
 80044de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80044e0:	f7fd fe28 	bl	8002134 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama7TextureENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
 80044e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80044e8:	4618      	mov	r0, r3
 80044ea:	f7fd f8ac 	bl	8001646 <_ZNSaIN4tama7TextureEED1Ev>
 80044ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044f2:	4618      	mov	r0, r3
 80044f4:	f7fd fb8a 	bl	8001c0c <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	  _M_refcount._M_swap(__count);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	3304      	adds	r3, #4
 80044fc:	f107 0214 	add.w	r2, r7, #20
 8004500:	4611      	mov	r1, r2
 8004502:	4618      	mov	r0, r3
 8004504:	f7fc fb2b 	bl	8000b5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  _M_ptr = __ptr;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800450c:	601a      	str	r2, [r3, #0]
	  _M_enable_shared_from_this_with(_M_ptr);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4619      	mov	r1, r3
 8004514:	68f8      	ldr	r0, [r7, #12]
 8004516:	f7fd fe64 	bl	80021e2 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 800451a:	f107 0314 	add.w	r3, r7, #20
 800451e:	4618      	mov	r0, r3
 8004520:	f7fc fa12 	bl	8000948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 8004524:	f107 0318 	add.w	r3, r7, #24
 8004528:	4618      	mov	r0, r3
 800452a:	f7fd fd93 	bl	8002054 <_ZNSt15__allocated_ptrISaIN4tama7TextureEEED1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 800452e:	f107 0320 	add.w	r3, r7, #32
 8004532:	4618      	mov	r0, r3
 8004534:	f7fd fb6a 	bl	8001c0c <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	}
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	4618      	mov	r0, r3
 800453c:	3730      	adds	r7, #48	; 0x30
 800453e:	46bd      	mov	sp, r7
 8004540:	bdb0      	pop	{r4, r5, r7, pc}

08004542 <_ZNSaIN4tama16Nokia5510DisplayEEC1ERKS1_>:
      allocator(const allocator& __a) throw()
 8004542:	b580      	push	{r7, lr}
 8004544:	b082      	sub	sp, #8
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
 800454a:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800454c:	6839      	ldr	r1, [r7, #0]
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 faeb 	bl	8004b2a <_ZN9__gnu_cxx13new_allocatorIN4tama16Nokia5510DisplayEEC1ERKS3_>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4618      	mov	r0, r3
 8004558:	3708      	adds	r7, #8
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}

0800455e <_ZSt18__allocate_guardedISaIN4tama16Nokia5510DisplayEEESt15__allocated_ptrIT_ERS4_>:
    __allocate_guarded(_Alloc& __a)
 800455e:	b580      	push	{r7, lr}
 8004560:	b082      	sub	sp, #8
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
 8004566:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 8004568:	2101      	movs	r1, #1
 800456a:	6838      	ldr	r0, [r7, #0]
 800456c:	f000 fae9 	bl	8004b42 <_ZNSt16allocator_traitsISaIN4tama16Nokia5510DisplayEEE8allocateERS2_j>
 8004570:	4603      	mov	r3, r0
 8004572:	461a      	mov	r2, r3
 8004574:	6839      	ldr	r1, [r7, #0]
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 faf2 	bl	8004b60 <_ZNSt15__allocated_ptrISaIN4tama16Nokia5510DisplayEEEC1ERS2_PS1_>
    }
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	3708      	adds	r7, #8
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <_ZNSt15__allocated_ptrISaIN4tama16Nokia5510DisplayEEED1Ev>:
      ~__allocated_ptr()
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d007      	beq.n	80045a4 <_ZNSt15__allocated_ptrISaIN4tama16Nokia5510DisplayEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6818      	ldr	r0, [r3, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	2201      	movs	r2, #1
 800459e:	4619      	mov	r1, r3
 80045a0:	f000 faf2 	bl	8004b88 <_ZNSt16allocator_traitsISaIN4tama16Nokia5510DisplayEEE10deallocateERS2_PS1_j>
      }
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4618      	mov	r0, r3
 80045a8:	3708      	adds	r7, #8
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <_ZNSt15__allocated_ptrISaIN4tama16Nokia5510DisplayEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b082      	sub	sp, #8
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	4618      	mov	r0, r3
 80045bc:	f000 faf3 	bl	8004ba6 <_ZNSt15__allocated_ptrISaIN4tama16Nokia5510DisplayEEE10_S_raw_ptrEPS1_>
 80045c0:	4603      	mov	r3, r0
 80045c2:	4618      	mov	r0, r3
 80045c4:	3708      	adds	r7, #8
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}

080045ca <_ZNSt16allocator_traitsISaIN4tama16Nokia5510DisplayEEE9constructIS1_JRNS0_13DisplayConfigEEEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b084      	sub	sp, #16
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	60f8      	str	r0, [r7, #12]
 80045d2:	60b9      	str	r1, [r7, #8]
 80045d4:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f7ff f994 	bl	8003904 <_ZSt7forwardIRN4tama13DisplayConfigEEOT_RNSt16remove_referenceIS3_E4typeE>
 80045dc:	4603      	mov	r3, r0
 80045de:	461a      	mov	r2, r3
 80045e0:	68b9      	ldr	r1, [r7, #8]
 80045e2:	68f8      	ldr	r0, [r7, #12]
 80045e4:	f000 faea 	bl	8004bbc <_ZN9__gnu_cxx13new_allocatorIN4tama16Nokia5510DisplayEE9constructIS2_JRNS1_13DisplayConfigEEEEvPT_DpOT0_>
 80045e8:	bf00      	nop
 80045ea:	3710      	adds	r7, #16
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <_ZNSt15__allocated_ptrISaIN4tama16Nokia5510DisplayEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	605a      	str	r2, [r3, #4]
	return *this;
 8004600:	687b      	ldr	r3, [r7, #4]
      }
 8004602:	4618      	mov	r0, r3
 8004604:	370c      	adds	r7, #12
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr

0800460e <_ZSt4moveIRNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 800460e:	b480      	push	{r7}
 8004610:	b083      	sub	sp, #12
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4618      	mov	r0, r3
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>:
        struct _Deleter
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	683a      	ldr	r2, [r7, #0]
 8004632:	4611      	mov	r1, r2
 8004634:	4618      	mov	r0, r3
 8004636:	f7ff ff84 	bl	8004542 <_ZNSaIN4tama16Nokia5510DisplayEEC1ERKS1_>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4618      	mov	r0, r3
 800463e:	3708      	adds	r7, #8
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}

08004644 <_ZSt4moveIRSaIN4tama16Nokia5510DisplayEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	4618      	mov	r0, r3
 8004650:	370c      	adds	r7, #12
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr

0800465a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama16Nokia5510DisplayENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
 800465a:	b5b0      	push	{r4, r5, r7, lr}
 800465c:	b08a      	sub	sp, #40	; 0x28
 800465e:	af00      	add	r7, sp, #0
 8004660:	60f8      	str	r0, [r7, #12]
 8004662:	60b9      	str	r1, [r7, #8]
 8004664:	607a      	str	r2, [r7, #4]
 8004666:	603b      	str	r3, [r7, #0]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2200      	movs	r2, #0
 800466c:	601a      	str	r2, [r3, #0]
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 800466e:	f107 031c 	add.w	r3, r7, #28
 8004672:	6839      	ldr	r1, [r7, #0]
 8004674:	4618      	mov	r0, r3
 8004676:	f000 fabb 	bl	8004bf0 <_ZNSaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	      auto __guard = std::__allocate_guarded(__a2);
 800467a:	f107 0314 	add.w	r3, r7, #20
 800467e:	f107 021c 	add.w	r2, r7, #28
 8004682:	4611      	mov	r1, r2
 8004684:	4618      	mov	r0, r3
 8004686:	f000 facc 	bl	8004c22 <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>
	      _Sp_cd_type* __mem = __guard.get();
 800468a:	f107 0314 	add.w	r3, r7, #20
 800468e:	4618      	mov	r0, r3
 8004690:	f000 faef 	bl	8004c72 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>
 8004694:	6278      	str	r0, [r7, #36]	; 0x24
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f7ff ffb9 	bl	800460e <_ZSt4moveIRNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800469c:	4602      	mov	r2, r0
 800469e:	f107 0320 	add.w	r3, r7, #32
 80046a2:	4611      	mov	r1, r2
 80046a4:	4618      	mov	r0, r3
 80046a6:	f7ff ffbd 	bl	8004624 <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 80046aa:	f107 0420 	add.w	r4, r7, #32
 80046ae:	6838      	ldr	r0, [r7, #0]
 80046b0:	f7ff ffc8 	bl	8004644 <_ZSt4moveIRSaIN4tama16Nokia5510DisplayEEEONSt16remove_referenceIT_E4typeEOS5_>
 80046b4:	4605      	mov	r5, r0
 80046b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b8:	4619      	mov	r1, r3
 80046ba:	2014      	movs	r0, #20
 80046bc:	f7fc fa8e 	bl	8000bdc <_ZnwjPv>
 80046c0:	2800      	cmp	r0, #0
 80046c2:	d004      	beq.n	80046ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama16Nokia5510DisplayENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x74>
 80046c4:	462b      	mov	r3, r5
 80046c6:	4622      	mov	r2, r4
 80046c8:	68b9      	ldr	r1, [r7, #8]
 80046ca:	f000 fb0b 	bl	8004ce4 <_ZNSt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>
 80046ce:	f107 0320 	add.w	r3, r7, #32
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7ff fc73 	bl	8003fbe <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	      _M_pi = __mem;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046dc:	601a      	str	r2, [r3, #0]
	      __guard = nullptr;
 80046de:	f107 0314 	add.w	r3, r7, #20
 80046e2:	2100      	movs	r1, #0
 80046e4:	4618      	mov	r0, r3
 80046e6:	f000 fb2b 	bl	8004d40 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>
	      auto __guard = std::__allocate_guarded(__a2);
 80046ea:	f107 0314 	add.w	r3, r7, #20
 80046ee:	4618      	mov	r0, r3
 80046f0:	f000 faaa 	bl	8004c48 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 80046f4:	f107 031c 	add.w	r3, r7, #28
 80046f8:	4618      	mov	r0, r3
 80046fa:	f000 fa86 	bl	8004c0a <_ZNSaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
	}
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	4618      	mov	r0, r3
 8004702:	3728      	adds	r7, #40	; 0x28
 8004704:	46bd      	mov	sp, r7
 8004706:	bdb0      	pop	{r4, r5, r7, pc}

08004708 <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	6039      	str	r1, [r7, #0]
	{ }
 8004712:	bf00      	nop
 8004714:	370c      	adds	r7, #12
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr

0800471e <_ZNSaIN4tama6SpriteEEC1ERKS1_>:
      allocator(const allocator& __a) throw()
 800471e:	b580      	push	{r7, lr}
 8004720:	b082      	sub	sp, #8
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
 8004726:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8004728:	6839      	ldr	r1, [r7, #0]
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 fb37 	bl	8004d9e <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEEC1ERKS3_>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4618      	mov	r0, r3
 8004734:	3708      	adds	r7, #8
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}

0800473a <_ZSt18__allocate_guardedISaIN4tama6SpriteEEESt15__allocated_ptrIT_ERS4_>:
    __allocate_guarded(_Alloc& __a)
 800473a:	b580      	push	{r7, lr}
 800473c:	b082      	sub	sp, #8
 800473e:	af00      	add	r7, sp, #0
 8004740:	6078      	str	r0, [r7, #4]
 8004742:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 8004744:	2101      	movs	r1, #1
 8004746:	6838      	ldr	r0, [r7, #0]
 8004748:	f000 fb35 	bl	8004db6 <_ZNSt16allocator_traitsISaIN4tama6SpriteEEE8allocateERS2_j>
 800474c:	4603      	mov	r3, r0
 800474e:	461a      	mov	r2, r3
 8004750:	6839      	ldr	r1, [r7, #0]
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 fb3e 	bl	8004dd4 <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEEC1ERS2_PS1_>
    }
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	3708      	adds	r7, #8
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}

08004760 <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEED1Ev>:
      ~__allocated_ptr()
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d007      	beq.n	8004780 <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6818      	ldr	r0, [r3, #0]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	2201      	movs	r2, #1
 800477a:	4619      	mov	r1, r3
 800477c:	f000 fb3e 	bl	8004dfc <_ZNSt16allocator_traitsISaIN4tama6SpriteEEE10deallocateERS2_PS1_j>
      }
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	4618      	mov	r0, r3
 8004784:	3708      	adds	r7, #8
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}

0800478a <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 800478a:	b580      	push	{r7, lr}
 800478c:	b082      	sub	sp, #8
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	4618      	mov	r0, r3
 8004798:	f000 fb3f 	bl	8004e1a <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEE10_S_raw_ptrEPS1_>
 800479c:	4603      	mov	r3, r0
 800479e:	4618      	mov	r0, r3
 80047a0:	3708      	adds	r7, #8
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}

080047a6 <_ZNSt16allocator_traitsISaIN4tama6SpriteEEE9constructIS1_JSt10shared_ptrINS0_7TextureEENS0_5Vec2dEEEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 80047a6:	b590      	push	{r4, r7, lr}
 80047a8:	b085      	sub	sp, #20
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	60f8      	str	r0, [r7, #12]
 80047ae:	60b9      	str	r1, [r7, #8]
 80047b0:	607a      	str	r2, [r7, #4]
 80047b2:	603b      	str	r3, [r7, #0]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f7ff f8eb 	bl	8003990 <_ZSt7forwardISt10shared_ptrIN4tama7TextureEEEOT_RNSt16remove_referenceIS4_E4typeE>
 80047ba:	4604      	mov	r4, r0
 80047bc:	6838      	ldr	r0, [r7, #0]
 80047be:	f7ff f8f2 	bl	80039a6 <_ZSt7forwardIN4tama5Vec2dEEOT_RNSt16remove_referenceIS2_E4typeE>
 80047c2:	4603      	mov	r3, r0
 80047c4:	4622      	mov	r2, r4
 80047c6:	68b9      	ldr	r1, [r7, #8]
 80047c8:	68f8      	ldr	r0, [r7, #12]
 80047ca:	f000 fb31 	bl	8004e30 <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEE9constructIS2_JSt10shared_ptrINS1_7TextureEENS1_5Vec2dEEEEvPT_DpOT0_>
 80047ce:	bf00      	nop
 80047d0:	3714      	adds	r7, #20
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd90      	pop	{r4, r7, pc}

080047d6 <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 80047d6:	b480      	push	{r7}
 80047d8:	b083      	sub	sp, #12
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
 80047de:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	605a      	str	r2, [r3, #4]
	return *this;
 80047e6:	687b      	ldr	r3, [r7, #4]
      }
 80047e8:	4618      	mov	r0, r3
 80047ea:	370c      	adds	r7, #12
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <_ZSt4moveIRNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4618      	mov	r0, r3
 8004800:	370c      	adds	r7, #12
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr

0800480a <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>:
        struct _Deleter
 800480a:	b580      	push	{r7, lr}
 800480c:	b082      	sub	sp, #8
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
 8004812:	6039      	str	r1, [r7, #0]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	683a      	ldr	r2, [r7, #0]
 8004818:	4611      	mov	r1, r2
 800481a:	4618      	mov	r0, r3
 800481c:	f7ff ff7f 	bl	800471e <_ZNSaIN4tama6SpriteEEC1ERKS1_>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4618      	mov	r0, r3
 8004824:	3708      	adds	r7, #8
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}

0800482a <_ZSt4moveIRSaIN4tama6SpriteEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800482a:	b480      	push	{r7}
 800482c:	b083      	sub	sp, #12
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4618      	mov	r0, r3
 8004836:	370c      	adds	r7, #12
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama6SpriteENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
 8004840:	b5b0      	push	{r4, r5, r7, lr}
 8004842:	b08a      	sub	sp, #40	; 0x28
 8004844:	af00      	add	r7, sp, #0
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	607a      	str	r2, [r7, #4]
 800484c:	603b      	str	r3, [r7, #0]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2200      	movs	r2, #0
 8004852:	601a      	str	r2, [r3, #0]
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 8004854:	f107 031c 	add.w	r3, r7, #28
 8004858:	6839      	ldr	r1, [r7, #0]
 800485a:	4618      	mov	r0, r3
 800485c:	f000 fb08 	bl	8004e70 <_ZNSaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	      auto __guard = std::__allocate_guarded(__a2);
 8004860:	f107 0314 	add.w	r3, r7, #20
 8004864:	f107 021c 	add.w	r2, r7, #28
 8004868:	4611      	mov	r1, r2
 800486a:	4618      	mov	r0, r3
 800486c:	f000 fb19 	bl	8004ea2 <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>
	      _Sp_cd_type* __mem = __guard.get();
 8004870:	f107 0314 	add.w	r3, r7, #20
 8004874:	4618      	mov	r0, r3
 8004876:	f000 fb3c 	bl	8004ef2 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>
 800487a:	6278      	str	r0, [r7, #36]	; 0x24
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f7ff ffb9 	bl	80047f4 <_ZSt4moveIRNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8004882:	4602      	mov	r2, r0
 8004884:	f107 0320 	add.w	r3, r7, #32
 8004888:	4611      	mov	r1, r2
 800488a:	4618      	mov	r0, r3
 800488c:	f7ff ffbd 	bl	800480a <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 8004890:	f107 0420 	add.w	r4, r7, #32
 8004894:	6838      	ldr	r0, [r7, #0]
 8004896:	f7ff ffc8 	bl	800482a <_ZSt4moveIRSaIN4tama6SpriteEEEONSt16remove_referenceIT_E4typeEOS5_>
 800489a:	4605      	mov	r5, r0
 800489c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489e:	4619      	mov	r1, r3
 80048a0:	2014      	movs	r0, #20
 80048a2:	f7fc f99b 	bl	8000bdc <_ZnwjPv>
 80048a6:	2800      	cmp	r0, #0
 80048a8:	d004      	beq.n	80048b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama6SpriteENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x74>
 80048aa:	462b      	mov	r3, r5
 80048ac:	4622      	mov	r2, r4
 80048ae:	68b9      	ldr	r1, [r7, #8]
 80048b0:	f000 fb58 	bl	8004f64 <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>
 80048b4:	f107 0320 	add.w	r3, r7, #32
 80048b8:	4618      	mov	r0, r3
 80048ba:	f7ff fc18 	bl	80040ee <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	      _M_pi = __mem;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048c2:	601a      	str	r2, [r3, #0]
	      __guard = nullptr;
 80048c4:	f107 0314 	add.w	r3, r7, #20
 80048c8:	2100      	movs	r1, #0
 80048ca:	4618      	mov	r0, r3
 80048cc:	f000 fb78 	bl	8004fc0 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>
	      auto __guard = std::__allocate_guarded(__a2);
 80048d0:	f107 0314 	add.w	r3, r7, #20
 80048d4:	4618      	mov	r0, r3
 80048d6:	f000 faf7 	bl	8004ec8 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 80048da:	f107 031c 	add.w	r3, r7, #28
 80048de:	4618      	mov	r0, r3
 80048e0:	f000 fad3 	bl	8004e8a <_ZNSaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
	}
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	4618      	mov	r0, r3
 80048e8:	3728      	adds	r7, #40	; 0x28
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bdb0      	pop	{r4, r5, r7, pc}

080048ee <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 80048ee:	b480      	push	{r7}
 80048f0:	b083      	sub	sp, #12
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
 80048f6:	6039      	str	r1, [r7, #0]
	{ }
 80048f8:	bf00      	nop
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <_ZNSaIN4tama27Nokia5110DisplayDataManagerEEC1ERKS1_>:
      allocator(const allocator& __a) throw()
 8004904:	b580      	push	{r7, lr}
 8004906:	b082      	sub	sp, #8
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800490e:	6839      	ldr	r1, [r7, #0]
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f000 fb84 	bl	800501e <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEEC1ERKS3_>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4618      	mov	r0, r3
 800491a:	3708      	adds	r7, #8
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <_ZSt18__allocate_guardedISaIN4tama27Nokia5110DisplayDataManagerEEESt15__allocated_ptrIT_ERS4_>:
    __allocate_guarded(_Alloc& __a)
 8004920:	b580      	push	{r7, lr}
 8004922:	b082      	sub	sp, #8
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 800492a:	2101      	movs	r1, #1
 800492c:	6838      	ldr	r0, [r7, #0]
 800492e:	f000 fb82 	bl	8005036 <_ZNSt16allocator_traitsISaIN4tama27Nokia5110DisplayDataManagerEEE8allocateERS2_j>
 8004932:	4603      	mov	r3, r0
 8004934:	461a      	mov	r2, r3
 8004936:	6839      	ldr	r1, [r7, #0]
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f000 fb8b 	bl	8005054 <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEEC1ERS2_PS1_>
    }
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	3708      	adds	r7, #8
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}

08004946 <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEED1Ev>:
      ~__allocated_ptr()
 8004946:	b580      	push	{r7, lr}
 8004948:	b082      	sub	sp, #8
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d007      	beq.n	8004966 <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6818      	ldr	r0, [r3, #0]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	4619      	mov	r1, r3
 8004962:	f000 fb8b 	bl	800507c <_ZNSt16allocator_traitsISaIN4tama27Nokia5110DisplayDataManagerEEE10deallocateERS2_PS1_j>
      }
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4618      	mov	r0, r3
 800496a:	3708      	adds	r7, #8
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 8004970:	b580      	push	{r7, lr}
 8004972:	b082      	sub	sp, #8
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	4618      	mov	r0, r3
 800497e:	f000 fb8c 	bl	800509a <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEE10_S_raw_ptrEPS1_>
 8004982:	4603      	mov	r3, r0
 8004984:	4618      	mov	r0, r3
 8004986:	3708      	adds	r7, #8
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}

0800498c <_ZNSt16allocator_traitsISaIN4tama27Nokia5110DisplayDataManagerEEE9constructIS1_JEEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 800498c:	b580      	push	{r7, lr}
 800498e:	b082      	sub	sp, #8
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8004996:	6839      	ldr	r1, [r7, #0]
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f000 fbc3 	bl	8005124 <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEE9constructIS2_JEEEvPT_DpOT0_>
 800499e:	bf00      	nop
 80049a0:	3708      	adds	r7, #8
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}

080049a6 <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 80049a6:	b480      	push	{r7}
 80049a8:	b083      	sub	sp, #12
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
 80049ae:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	605a      	str	r2, [r3, #4]
	return *this;
 80049b6:	687b      	ldr	r3, [r7, #4]
      }
 80049b8:	4618      	mov	r0, r3
 80049ba:	370c      	adds	r7, #12
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <_ZSt4moveIRNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	4618      	mov	r0, r3
 80049d0:	370c      	adds	r7, #12
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr

080049da <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>:
        struct _Deleter
 80049da:	b580      	push	{r7, lr}
 80049dc:	b082      	sub	sp, #8
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]
 80049e2:	6039      	str	r1, [r7, #0]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	683a      	ldr	r2, [r7, #0]
 80049e8:	4611      	mov	r1, r2
 80049ea:	4618      	mov	r0, r3
 80049ec:	f7ff ff8a 	bl	8004904 <_ZNSaIN4tama27Nokia5110DisplayDataManagerEEC1ERKS1_>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4618      	mov	r0, r3
 80049f4:	3708      	adds	r7, #8
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}

080049fa <_ZSt4moveIRSaIN4tama27Nokia5110DisplayDataManagerEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80049fa:	b480      	push	{r7}
 80049fc:	b083      	sub	sp, #12
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4618      	mov	r0, r3
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
 8004a10:	b5b0      	push	{r4, r5, r7, lr}
 8004a12:	b08a      	sub	sp, #40	; 0x28
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	60b9      	str	r1, [r7, #8]
 8004a1a:	607a      	str	r2, [r7, #4]
 8004a1c:	603b      	str	r3, [r7, #0]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2200      	movs	r2, #0
 8004a22:	601a      	str	r2, [r3, #0]
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 8004a24:	f107 031c 	add.w	r3, r7, #28
 8004a28:	6839      	ldr	r1, [r7, #0]
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f000 fb96 	bl	800515c <_ZNSaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	      auto __guard = std::__allocate_guarded(__a2);
 8004a30:	f107 0314 	add.w	r3, r7, #20
 8004a34:	f107 021c 	add.w	r2, r7, #28
 8004a38:	4611      	mov	r1, r2
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f000 fba7 	bl	800518e <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>
	      _Sp_cd_type* __mem = __guard.get();
 8004a40:	f107 0314 	add.w	r3, r7, #20
 8004a44:	4618      	mov	r0, r3
 8004a46:	f000 fbca 	bl	80051de <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>
 8004a4a:	6278      	str	r0, [r7, #36]	; 0x24
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f7ff ffb9 	bl	80049c4 <_ZSt4moveIRNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8004a52:	4602      	mov	r2, r0
 8004a54:	f107 0320 	add.w	r3, r7, #32
 8004a58:	4611      	mov	r1, r2
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f7ff ffbd 	bl	80049da <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 8004a60:	f107 0420 	add.w	r4, r7, #32
 8004a64:	6838      	ldr	r0, [r7, #0]
 8004a66:	f7ff ffc8 	bl	80049fa <_ZSt4moveIRSaIN4tama27Nokia5110DisplayDataManagerEEEONSt16remove_referenceIT_E4typeEOS5_>
 8004a6a:	4605      	mov	r5, r0
 8004a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6e:	4619      	mov	r1, r3
 8004a70:	2014      	movs	r0, #20
 8004a72:	f7fc f8b3 	bl	8000bdc <_ZnwjPv>
 8004a76:	2800      	cmp	r0, #0
 8004a78:	d004      	beq.n	8004a84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x74>
 8004a7a:	462b      	mov	r3, r5
 8004a7c:	4622      	mov	r2, r4
 8004a7e:	68b9      	ldr	r1, [r7, #8]
 8004a80:	f000 fbe6 	bl	8005250 <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>
 8004a84:	f107 0320 	add.w	r3, r7, #32
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f7ff fbcc 	bl	8004226 <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	      _M_pi = __mem;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a92:	601a      	str	r2, [r3, #0]
	      __guard = nullptr;
 8004a94:	f107 0314 	add.w	r3, r7, #20
 8004a98:	2100      	movs	r1, #0
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f000 fc06 	bl	80052ac <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>
	      auto __guard = std::__allocate_guarded(__a2);
 8004aa0:	f107 0314 	add.w	r3, r7, #20
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f000 fb85 	bl	80051b4 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 8004aaa:	f107 031c 	add.w	r3, r7, #28
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f000 fb61 	bl	8005176 <_ZNSaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
	}
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3728      	adds	r7, #40	; 0x28
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bdb0      	pop	{r4, r5, r7, pc}

08004abe <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 8004abe:	b480      	push	{r7}
 8004ac0:	b083      	sub	sp, #12
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
 8004ac6:	6039      	str	r1, [r7, #0]
	{ }
 8004ac8:	bf00      	nop
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <_ZNSt16allocator_traitsISaIN4tama5SceneEEE9constructIS1_JEEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b082      	sub	sp, #8
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8004ade:	6839      	ldr	r1, [r7, #0]
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f000 fc12 	bl	800530a <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEE9constructIS2_JEEEvPT_DpOT0_>
 8004ae6:	bf00      	nop
 8004ae8:	3708      	adds	r7, #8
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}

08004aee <_ZNSt16allocator_traitsISaIN4tama7TextureEEE9constructIS1_JRjS5_RPPNS0_10PixelColorEEEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8004aee:	b5b0      	push	{r4, r5, r7, lr}
 8004af0:	b086      	sub	sp, #24
 8004af2:	af02      	add	r7, sp, #8
 8004af4:	60f8      	str	r0, [r7, #12]
 8004af6:	60b9      	str	r1, [r7, #8]
 8004af8:	607a      	str	r2, [r7, #4]
 8004afa:	603b      	str	r3, [r7, #0]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f7fc fb9c 	bl	800123a <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 8004b02:	4604      	mov	r4, r0
 8004b04:	6838      	ldr	r0, [r7, #0]
 8004b06:	f7fc fb98 	bl	800123a <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 8004b0a:	4605      	mov	r5, r0
 8004b0c:	6a38      	ldr	r0, [r7, #32]
 8004b0e:	f7ff f807 	bl	8003b20 <_ZSt7forwardIRPPN4tama10PixelColorEEOT_RNSt16remove_referenceIS5_E4typeE>
 8004b12:	4603      	mov	r3, r0
 8004b14:	9300      	str	r3, [sp, #0]
 8004b16:	462b      	mov	r3, r5
 8004b18:	4622      	mov	r2, r4
 8004b1a:	68b9      	ldr	r1, [r7, #8]
 8004b1c:	68f8      	ldr	r0, [r7, #12]
 8004b1e:	f000 fc08 	bl	8005332 <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE9constructIS2_JRjS5_RPPNS1_10PixelColorEEEEvPT_DpOT0_>
 8004b22:	bf00      	nop
 8004b24:	3710      	adds	r7, #16
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bdb0      	pop	{r4, r5, r7, pc}

08004b2a <_ZN9__gnu_cxx13new_allocatorIN4tama16Nokia5510DisplayEEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8004b2a:	b480      	push	{r7}
 8004b2c:	b083      	sub	sp, #12
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
 8004b32:	6039      	str	r1, [r7, #0]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	4618      	mov	r0, r3
 8004b38:	370c      	adds	r7, #12
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr

08004b42 <_ZNSt16allocator_traitsISaIN4tama16Nokia5510DisplayEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8004b42:	b580      	push	{r7, lr}
 8004b44:	b082      	sub	sp, #8
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
 8004b4a:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	6839      	ldr	r1, [r7, #0]
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f000 fc14 	bl	800537e <_ZN9__gnu_cxx13new_allocatorIN4tama16Nokia5510DisplayEE8allocateEjPKv>
 8004b56:	4603      	mov	r3, r0
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3708      	adds	r7, #8
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <_ZNSt15__allocated_ptrISaIN4tama16Nokia5510DisplayEEEC1ERS2_PS1_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8004b6c:	68b8      	ldr	r0, [r7, #8]
 8004b6e:	f000 fc27 	bl	80053c0 <_ZSt11__addressofISaIN4tama16Nokia5510DisplayEEEPT_RS3_>
 8004b72:	4602      	mov	r2, r0
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	601a      	str	r2, [r3, #0]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	605a      	str	r2, [r3, #4]
      { }
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	4618      	mov	r0, r3
 8004b82:	3710      	adds	r7, #16
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <_ZNSt16allocator_traitsISaIN4tama16Nokia5510DisplayEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	68b9      	ldr	r1, [r7, #8]
 8004b98:	68f8      	ldr	r0, [r7, #12]
 8004b9a:	f000 fc1c 	bl	80053d6 <_ZN9__gnu_cxx13new_allocatorIN4tama16Nokia5510DisplayEE10deallocateEPS2_j>
 8004b9e:	bf00      	nop
 8004ba0:	3710      	adds	r7, #16
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}

08004ba6 <_ZNSt15__allocated_ptrISaIN4tama16Nokia5510DisplayEEE10_S_raw_ptrEPS1_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 8004ba6:	b480      	push	{r7}
 8004ba8:	b083      	sub	sp, #12
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	370c      	adds	r7, #12
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr

08004bbc <_ZN9__gnu_cxx13new_allocatorIN4tama16Nokia5510DisplayEE9constructIS2_JRNS1_13DisplayConfigEEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8004bbc:	b590      	push	{r4, r7, lr}
 8004bbe:	b085      	sub	sp, #20
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f7fe fe9b 	bl	8003904 <_ZSt7forwardIRN4tama13DisplayConfigEEOT_RNSt16remove_referenceIS3_E4typeE>
 8004bce:	4604      	mov	r4, r0
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	4619      	mov	r1, r3
 8004bd4:	2030      	movs	r0, #48	; 0x30
 8004bd6:	f7fc f801 	bl	8000bdc <_ZnwjPv>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d003      	beq.n	8004be8 <_ZN9__gnu_cxx13new_allocatorIN4tama16Nokia5510DisplayEE9constructIS2_JRNS1_13DisplayConfigEEEEvPT_DpOT0_+0x2c>
 8004be0:	4621      	mov	r1, r4
 8004be2:	4618      	mov	r0, r3
 8004be4:	f001 f982 	bl	8005eec <_ZN4tama16Nokia5510DisplayC1ERNS_13DisplayConfigE>
 8004be8:	bf00      	nop
 8004bea:	3714      	adds	r7, #20
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd90      	pop	{r4, r7, pc}

08004bf0 <_ZNSaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) throw() { }
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b082      	sub	sp, #8
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 fbf8 	bl	80053f0 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	4618      	mov	r0, r3
 8004c04:	3708      	adds	r7, #8
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}

08004c0a <_ZNSaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>:
      ~allocator() throw() { }
 8004c0a:	b580      	push	{r7, lr}
 8004c0c:	b082      	sub	sp, #8
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 fbf7 	bl	8005406 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3708      	adds	r7, #8
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}

08004c22 <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>:
    __allocate_guarded(_Alloc& __a)
 8004c22:	b580      	push	{r7, lr}
 8004c24:	b082      	sub	sp, #8
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]
 8004c2a:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 8004c2c:	2101      	movs	r1, #1
 8004c2e:	6838      	ldr	r0, [r7, #0]
 8004c30:	f000 fbf4 	bl	800541c <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>
 8004c34:	4603      	mov	r3, r0
 8004c36:	461a      	mov	r2, r3
 8004c38:	6839      	ldr	r1, [r7, #0]
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 fbfd 	bl	800543a <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
    }
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	3708      	adds	r7, #8
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>:
      ~__allocated_ptr()
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d007      	beq.n	8004c68 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6818      	ldr	r0, [r3, #0]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	2201      	movs	r2, #1
 8004c62:	4619      	mov	r1, r3
 8004c64:	f000 fbfd 	bl	8005462 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>
      }
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3708      	adds	r7, #8
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}

08004c72 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 8004c72:	b580      	push	{r7, lr}
 8004c74:	b082      	sub	sp, #8
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f000 fbfe 	bl	8005480 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>
 8004c84:	4603      	mov	r3, r0
 8004c86:	4618      	mov	r0, r3
 8004c88:	3708      	adds	r7, #8
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}

08004c8e <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, false>
 8004c8e:	b580      	push	{r7, lr}
 8004c90:	b082      	sub	sp, #8
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f7ff f990 	bl	8003fbe <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3708      	adds	r7, #8
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama16Nokia5510DisplayEELb1EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f7fe ff75 	bl	8003ba0 <_ZNSaIN4tama16Nokia5510DisplayEED1Ev>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3708      	adds	r7, #8
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <_ZNSt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>:
      class _Impl : _Sp_ebo_helper<0, _Deleter>, _Sp_ebo_helper<1, _Alloc>
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b082      	sub	sp, #8
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	3301      	adds	r3, #1
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f7ff ffeb 	bl	8004ca8 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama16Nokia5510DisplayEELb1EED1Ev>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f7ff ffda 	bl	8004c8e <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3708      	adds	r7, #8
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <_ZNSt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 8004ce4:	b590      	push	{r4, r7, lr}
 8004ce6:	b087      	sub	sp, #28
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	60f8      	str	r0, [r7, #12]
 8004cec:	60b9      	str	r1, [r7, #8]
 8004cee:	607a      	str	r2, [r7, #4]
 8004cf0:	603b      	str	r3, [r7, #0]
      : _M_impl(__p, std::move(__d), __a) { }
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f7fd feb5 	bl	8002a64 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8004cfa:	4a10      	ldr	r2, [pc, #64]	; (8004d3c <_ZNSt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_+0x58>)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	601a      	str	r2, [r3, #0]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f103 040c 	add.w	r4, r3, #12
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f7ff fc81 	bl	800460e <_ZSt4moveIRNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	f107 0314 	add.w	r3, r7, #20
 8004d12:	4611      	mov	r1, r2
 8004d14:	4618      	mov	r0, r3
 8004d16:	f7ff fc85 	bl	8004624 <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 8004d1a:	f107 0214 	add.w	r2, r7, #20
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	68b9      	ldr	r1, [r7, #8]
 8004d22:	4620      	mov	r0, r4
 8004d24:	f000 fbb7 	bl	8005496 <_ZNSt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>
 8004d28:	f107 0314 	add.w	r3, r7, #20
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f7ff f946 	bl	8003fbe <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	4618      	mov	r0, r3
 8004d36:	371c      	adds	r7, #28
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd90      	pop	{r4, r7, pc}
 8004d3c:	0800de2c 	.word	0x0800de2c

08004d40 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 8004d40:	b480      	push	{r7}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	605a      	str	r2, [r3, #4]
	return *this;
 8004d50:	687b      	ldr	r3, [r7, #4]
      }
 8004d52:	4618      	mov	r0, r3
 8004d54:	370c      	adds	r7, #12
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr

08004d5e <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>:
          void operator()(typename _Alloc::value_type* __ptr)
 8004d5e:	b590      	push	{r4, r7, lr}
 8004d60:	b085      	sub	sp, #20
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
 8004d66:	6039      	str	r1, [r7, #0]
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 8004d68:	6879      	ldr	r1, [r7, #4]
 8004d6a:	f107 0308 	add.w	r3, r7, #8
 8004d6e:	683a      	ldr	r2, [r7, #0]
 8004d70:	4618      	mov	r0, r3
 8004d72:	f7ff fef5 	bl	8004b60 <_ZNSt15__allocated_ptrISaIN4tama16Nokia5510DisplayEEEC1ERS2_PS1_>
	    allocator_traits<_Alloc>::destroy(_M_alloc, __guard.get());
 8004d76:	687c      	ldr	r4, [r7, #4]
 8004d78:	f107 0308 	add.w	r3, r7, #8
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f7ff fc16 	bl	80045ae <_ZNSt15__allocated_ptrISaIN4tama16Nokia5510DisplayEEE3getEv>
 8004d82:	4603      	mov	r3, r0
 8004d84:	4619      	mov	r1, r3
 8004d86:	4620      	mov	r0, r4
 8004d88:	f000 fba3 	bl	80054d2 <_ZNSt16allocator_traitsISaIN4tama16Nokia5510DisplayEEE7destroyIS1_EEvRS2_PT_>
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 8004d8c:	f107 0308 	add.w	r3, r7, #8
 8004d90:	4618      	mov	r0, r3
 8004d92:	f7ff fbf7 	bl	8004584 <_ZNSt15__allocated_ptrISaIN4tama16Nokia5510DisplayEEED1Ev>
          }
 8004d96:	bf00      	nop
 8004d98:	3714      	adds	r7, #20
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd90      	pop	{r4, r7, pc}

08004d9e <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8004d9e:	b480      	push	{r7}
 8004da0:	b083      	sub	sp, #12
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
 8004da6:	6039      	str	r1, [r7, #0]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	4618      	mov	r0, r3
 8004dac:	370c      	adds	r7, #12
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr

08004db6 <_ZNSt16allocator_traitsISaIN4tama6SpriteEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8004db6:	b580      	push	{r7, lr}
 8004db8:	b082      	sub	sp, #8
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
 8004dbe:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	6839      	ldr	r1, [r7, #0]
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f000 fb91 	bl	80054ec <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEE8allocateEjPKv>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3708      	adds	r7, #8
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEEC1ERS2_PS1_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8004de0:	68b8      	ldr	r0, [r7, #8]
 8004de2:	f000 fba1 	bl	8005528 <_ZSt11__addressofISaIN4tama6SpriteEEEPT_RS3_>
 8004de6:	4602      	mov	r2, r0
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	601a      	str	r2, [r3, #0]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	605a      	str	r2, [r3, #4]
      { }
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	4618      	mov	r0, r3
 8004df6:	3710      	adds	r7, #16
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}

08004dfc <_ZNSt16allocator_traitsISaIN4tama6SpriteEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	68b9      	ldr	r1, [r7, #8]
 8004e0c:	68f8      	ldr	r0, [r7, #12]
 8004e0e:	f000 fb96 	bl	800553e <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEE10deallocateEPS2_j>
 8004e12:	bf00      	nop
 8004e14:	3710      	adds	r7, #16
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}

08004e1a <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEE10_S_raw_ptrEPS1_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 8004e1a:	b480      	push	{r7}
 8004e1c:	b083      	sub	sp, #12
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4618      	mov	r0, r3
 8004e26:	370c      	adds	r7, #12
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEE9constructIS2_JSt10shared_ptrINS1_7TextureEENS1_5Vec2dEEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8004e30:	b5b0      	push	{r4, r5, r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	60b9      	str	r1, [r7, #8]
 8004e3a:	607a      	str	r2, [r7, #4]
 8004e3c:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f7fe fda6 	bl	8003990 <_ZSt7forwardISt10shared_ptrIN4tama7TextureEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004e44:	4604      	mov	r4, r0
 8004e46:	6838      	ldr	r0, [r7, #0]
 8004e48:	f7fe fdad 	bl	80039a6 <_ZSt7forwardIN4tama5Vec2dEEOT_RNSt16remove_referenceIS2_E4typeE>
 8004e4c:	4605      	mov	r5, r0
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	4619      	mov	r1, r3
 8004e52:	2020      	movs	r0, #32
 8004e54:	f7fb fec2 	bl	8000bdc <_ZnwjPv>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d004      	beq.n	8004e68 <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEE9constructIS2_JSt10shared_ptrINS1_7TextureEENS1_5Vec2dEEEEvPT_DpOT0_+0x38>
 8004e5e:	462a      	mov	r2, r5
 8004e60:	4621      	mov	r1, r4
 8004e62:	4618      	mov	r0, r3
 8004e64:	f7fb fd0e 	bl	8000884 <_ZN4tama6SpriteC1ERKSt10shared_ptrINS_7TextureEERKNS_5Vec2dE>
 8004e68:	bf00      	nop
 8004e6a:	3710      	adds	r7, #16
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bdb0      	pop	{r4, r5, r7, pc}

08004e70 <_ZNSaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) throw() { }
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b082      	sub	sp, #8
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 fb6c 	bl	8005558 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4618      	mov	r0, r3
 8004e84:	3708      	adds	r7, #8
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}

08004e8a <_ZNSaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>:
      ~allocator() throw() { }
 8004e8a:	b580      	push	{r7, lr}
 8004e8c:	b082      	sub	sp, #8
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 fb6b 	bl	800556e <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3708      	adds	r7, #8
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}

08004ea2 <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>:
    __allocate_guarded(_Alloc& __a)
 8004ea2:	b580      	push	{r7, lr}
 8004ea4:	b082      	sub	sp, #8
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
 8004eaa:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 8004eac:	2101      	movs	r1, #1
 8004eae:	6838      	ldr	r0, [r7, #0]
 8004eb0:	f000 fb68 	bl	8005584 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	6839      	ldr	r1, [r7, #0]
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 fb71 	bl	80055a2 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
    }
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	3708      	adds	r7, #8
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>:
      ~__allocated_ptr()
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d007      	beq.n	8004ee8 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6818      	ldr	r0, [r3, #0]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	4619      	mov	r1, r3
 8004ee4:	f000 fb71 	bl	80055ca <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>
      }
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4618      	mov	r0, r3
 8004eec:	3708      	adds	r7, #8
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}

08004ef2 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 8004ef2:	b580      	push	{r7, lr}
 8004ef4:	b082      	sub	sp, #8
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	4618      	mov	r0, r3
 8004f00:	f000 fb72 	bl	80055e8 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>
 8004f04:	4603      	mov	r3, r0
 8004f06:	4618      	mov	r0, r3
 8004f08:	3708      	adds	r7, #8
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}

08004f0e <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, false>
 8004f0e:	b580      	push	{r7, lr}
 8004f10:	b082      	sub	sp, #8
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f7ff f8e8 	bl	80040ee <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4618      	mov	r0, r3
 8004f22:	3708      	adds	r7, #8
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama6SpriteEELb1EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f7fe fe7e 	bl	8003c32 <_ZNSaIN4tama6SpriteEED1Ev>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3708      	adds	r7, #8
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>:
      class _Impl : _Sp_ebo_helper<0, _Deleter>, _Sp_ebo_helper<1, _Alloc>
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b082      	sub	sp, #8
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f7ff ffeb 	bl	8004f28 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama6SpriteEELb1EED1Ev>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4618      	mov	r0, r3
 8004f56:	f7ff ffda 	bl	8004f0e <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3708      	adds	r7, #8
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 8004f64:	b590      	push	{r4, r7, lr}
 8004f66:	b087      	sub	sp, #28
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	607a      	str	r2, [r7, #4]
 8004f70:	603b      	str	r3, [r7, #0]
      : _M_impl(__p, std::move(__d), __a) { }
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	4618      	mov	r0, r3
 8004f76:	f7fd fd75 	bl	8002a64 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8004f7a:	4a10      	ldr	r2, [pc, #64]	; (8004fbc <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_+0x58>)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	601a      	str	r2, [r3, #0]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f103 040c 	add.w	r4, r3, #12
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f7ff fc34 	bl	80047f4 <_ZSt4moveIRNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	f107 0314 	add.w	r3, r7, #20
 8004f92:	4611      	mov	r1, r2
 8004f94:	4618      	mov	r0, r3
 8004f96:	f7ff fc38 	bl	800480a <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 8004f9a:	f107 0214 	add.w	r2, r7, #20
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	68b9      	ldr	r1, [r7, #8]
 8004fa2:	4620      	mov	r0, r4
 8004fa4:	f000 fb2b 	bl	80055fe <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>
 8004fa8:	f107 0314 	add.w	r3, r7, #20
 8004fac:	4618      	mov	r0, r3
 8004fae:	f7ff f89e 	bl	80040ee <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	371c      	adds	r7, #28
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd90      	pop	{r4, r7, pc}
 8004fbc:	0800de10 	.word	0x0800de10

08004fc0 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	605a      	str	r2, [r3, #4]
	return *this;
 8004fd0:	687b      	ldr	r3, [r7, #4]
      }
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	370c      	adds	r7, #12
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr

08004fde <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>:
          void operator()(typename _Alloc::value_type* __ptr)
 8004fde:	b590      	push	{r4, r7, lr}
 8004fe0:	b085      	sub	sp, #20
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
 8004fe6:	6039      	str	r1, [r7, #0]
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 8004fe8:	6879      	ldr	r1, [r7, #4]
 8004fea:	f107 0308 	add.w	r3, r7, #8
 8004fee:	683a      	ldr	r2, [r7, #0]
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f7ff feef 	bl	8004dd4 <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEEC1ERS2_PS1_>
	    allocator_traits<_Alloc>::destroy(_M_alloc, __guard.get());
 8004ff6:	687c      	ldr	r4, [r7, #4]
 8004ff8:	f107 0308 	add.w	r3, r7, #8
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f7ff fbc4 	bl	800478a <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEE3getEv>
 8005002:	4603      	mov	r3, r0
 8005004:	4619      	mov	r1, r3
 8005006:	4620      	mov	r0, r4
 8005008:	f000 fb17 	bl	800563a <_ZNSt16allocator_traitsISaIN4tama6SpriteEEE7destroyIS1_EEvRS2_PT_>
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 800500c:	f107 0308 	add.w	r3, r7, #8
 8005010:	4618      	mov	r0, r3
 8005012:	f7ff fba5 	bl	8004760 <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEED1Ev>
          }
 8005016:	bf00      	nop
 8005018:	3714      	adds	r7, #20
 800501a:	46bd      	mov	sp, r7
 800501c:	bd90      	pop	{r4, r7, pc}

0800501e <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800501e:	b480      	push	{r7}
 8005020:	b083      	sub	sp, #12
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
 8005026:	6039      	str	r1, [r7, #0]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	4618      	mov	r0, r3
 800502c:	370c      	adds	r7, #12
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr

08005036 <_ZNSt16allocator_traitsISaIN4tama27Nokia5110DisplayDataManagerEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8005036:	b580      	push	{r7, lr}
 8005038:	b082      	sub	sp, #8
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
 800503e:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8005040:	2200      	movs	r2, #0
 8005042:	6839      	ldr	r1, [r7, #0]
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f000 fb05 	bl	8005654 <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEE8allocateEjPKv>
 800504a:	4603      	mov	r3, r0
 800504c:	4618      	mov	r0, r3
 800504e:	3708      	adds	r7, #8
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEEC1ERS2_PS1_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8005054:	b580      	push	{r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8005060:	68b8      	ldr	r0, [r7, #8]
 8005062:	f000 fb18 	bl	8005696 <_ZSt11__addressofISaIN4tama27Nokia5110DisplayDataManagerEEEPT_RS3_>
 8005066:	4602      	mov	r2, r0
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	601a      	str	r2, [r3, #0]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	605a      	str	r2, [r3, #4]
      { }
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	4618      	mov	r0, r3
 8005076:	3710      	adds	r7, #16
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}

0800507c <_ZNSt16allocator_traitsISaIN4tama27Nokia5110DisplayDataManagerEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	68b9      	ldr	r1, [r7, #8]
 800508c:	68f8      	ldr	r0, [r7, #12]
 800508e:	f000 fb0d 	bl	80056ac <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEE10deallocateEPS2_j>
 8005092:	bf00      	nop
 8005094:	3710      	adds	r7, #16
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}

0800509a <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEE10_S_raw_ptrEPS1_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 800509a:	b480      	push	{r7}
 800509c:	b083      	sub	sp, #12
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4618      	mov	r0, r3
 80050a6:	370c      	adds	r7, #12
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr

080050b0 <_ZN4tama18DisplayDataManagerC1Ev>:

#include "../display-data/DisplayData.h"

namespace tama
{
    class DisplayDataManager
 80050b0:	b480      	push	{r7}
 80050b2:	b083      	sub	sp, #12
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	4a04      	ldr	r2, [pc, #16]	; (80050cc <_ZN4tama18DisplayDataManagerC1Ev+0x1c>)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	601a      	str	r2, [r3, #0]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4618      	mov	r0, r3
 80050c2:	370c      	adds	r7, #12
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr
 80050cc:	0800de48 	.word	0x0800de48

080050d0 <_ZN4tama27Nokia5110DisplayDataManagerC1Ev>:
#include "../../Core/ui/display/display-data/DisplayData.h"
#include "../../Configuration/display.config.h"

namespace tama
{
    class Nokia5110DisplayDataManager : public DisplayDataManager
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b082      	sub	sp, #8
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4618      	mov	r0, r3
 80050dc:	f7ff ffe8 	bl	80050b0 <_ZN4tama18DisplayDataManagerC1Ev>
 80050e0:	4a0f      	ldr	r2, [pc, #60]	; (8005120 <_ZN4tama27Nokia5110DisplayDataManagerC1Ev+0x50>)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	601a      	str	r2, [r3, #0]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2208      	movs	r2, #8
 80050ea:	605a      	str	r2, [r3, #4]
    public:
        DisplayData getActiveSceneDisplayData(std::shared_ptr<Texture>) override;

    private:
        unsigned segmentSize = 8;
        unsigned segmentsInHeight = Config_Display_Height / segmentSize;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	2230      	movs	r2, #48	; 0x30
 80050f2:	fbb2 f2f3 	udiv	r2, r2, r3
    class Nokia5110DisplayDataManager : public DisplayDataManager
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	609a      	str	r2, [r3, #8]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2254      	movs	r2, #84	; 0x54
 80050fe:	60da      	str	r2, [r3, #12]
        unsigned segmentsInWidth = Config_Display_Width;
        unsigned dataSize = segmentsInHeight * segmentsInWidth;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	68d2      	ldr	r2, [r2, #12]
 8005108:	fb02 f203 	mul.w	r2, r2, r3
    class Nokia5110DisplayDataManager : public DisplayDataManager
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	611a      	str	r2, [r3, #16]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	615a      	str	r2, [r3, #20]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4618      	mov	r0, r3
 800511a:	3708      	adds	r7, #8
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}
 8005120:	0800de74 	.word	0x0800de74

08005124 <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEE9constructIS2_JEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8005124:	b580      	push	{r7, lr}
 8005126:	b082      	sub	sp, #8
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	4619      	mov	r1, r3
 8005132:	2018      	movs	r0, #24
 8005134:	f7fb fd52 	bl	8000bdc <_ZnwjPv>
 8005138:	4601      	mov	r1, r0
 800513a:	2900      	cmp	r1, #0
 800513c:	d00a      	beq.n	8005154 <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEE9constructIS2_JEEEvPT_DpOT0_+0x30>
 800513e:	460a      	mov	r2, r1
 8005140:	2300      	movs	r3, #0
 8005142:	6013      	str	r3, [r2, #0]
 8005144:	6053      	str	r3, [r2, #4]
 8005146:	6093      	str	r3, [r2, #8]
 8005148:	60d3      	str	r3, [r2, #12]
 800514a:	6113      	str	r3, [r2, #16]
 800514c:	6153      	str	r3, [r2, #20]
 800514e:	4608      	mov	r0, r1
 8005150:	f7ff ffbe 	bl	80050d0 <_ZN4tama27Nokia5110DisplayDataManagerC1Ev>
 8005154:	bf00      	nop
 8005156:	3708      	adds	r7, #8
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <_ZNSaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) throw() { }
 800515c:	b580      	push	{r7, lr}
 800515e:	b082      	sub	sp, #8
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 faad 	bl	80056c6 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4618      	mov	r0, r3
 8005170:	3708      	adds	r7, #8
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}

08005176 <_ZNSaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>:
      ~allocator() throw() { }
 8005176:	b580      	push	{r7, lr}
 8005178:	b082      	sub	sp, #8
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 faac 	bl	80056dc <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4618      	mov	r0, r3
 8005188:	3708      	adds	r7, #8
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}

0800518e <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>:
    __allocate_guarded(_Alloc& __a)
 800518e:	b580      	push	{r7, lr}
 8005190:	b082      	sub	sp, #8
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
 8005196:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 8005198:	2101      	movs	r1, #1
 800519a:	6838      	ldr	r0, [r7, #0]
 800519c:	f000 faa9 	bl	80056f2 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>
 80051a0:	4603      	mov	r3, r0
 80051a2:	461a      	mov	r2, r3
 80051a4:	6839      	ldr	r1, [r7, #0]
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 fab2 	bl	8005710 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
    }
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	3708      	adds	r7, #8
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>:
      ~__allocated_ptr()
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d007      	beq.n	80051d4 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6818      	ldr	r0, [r3, #0]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	2201      	movs	r2, #1
 80051ce:	4619      	mov	r1, r3
 80051d0:	f000 fab2 	bl	8005738 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>
      }
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4618      	mov	r0, r3
 80051d8:	3708      	adds	r7, #8
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}

080051de <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 80051de:	b580      	push	{r7, lr}
 80051e0:	b082      	sub	sp, #8
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	4618      	mov	r0, r3
 80051ec:	f000 fab3 	bl	8005756 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>
 80051f0:	4603      	mov	r3, r0
 80051f2:	4618      	mov	r0, r3
 80051f4:	3708      	adds	r7, #8
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}

080051fa <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, false>
 80051fa:	b580      	push	{r7, lr}
 80051fc:	b082      	sub	sp, #8
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4618      	mov	r0, r3
 8005206:	f7ff f80e 	bl	8004226 <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4618      	mov	r0, r3
 800520e:	3708      	adds	r7, #8
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama27Nokia5110DisplayDataManagerEELb1EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp
 8005214:	b580      	push	{r7, lr}
 8005216:	b082      	sub	sp, #8
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f7fe fd3a 	bl	8003c96 <_ZNSaIN4tama27Nokia5110DisplayDataManagerEED1Ev>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4618      	mov	r0, r3
 8005226:	3708      	adds	r7, #8
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>:
      class _Impl : _Sp_ebo_helper<0, _Deleter>, _Sp_ebo_helper<1, _Alloc>
 800522c:	b580      	push	{r7, lr}
 800522e:	b082      	sub	sp, #8
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	3301      	adds	r3, #1
 8005238:	4618      	mov	r0, r3
 800523a:	f7ff ffeb 	bl	8005214 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama27Nokia5110DisplayDataManagerEELb1EED1Ev>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4618      	mov	r0, r3
 8005242:	f7ff ffda 	bl	80051fa <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4618      	mov	r0, r3
 800524a:	3708      	adds	r7, #8
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}

08005250 <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 8005250:	b590      	push	{r4, r7, lr}
 8005252:	b087      	sub	sp, #28
 8005254:	af00      	add	r7, sp, #0
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	607a      	str	r2, [r7, #4]
 800525c:	603b      	str	r3, [r7, #0]
      : _M_impl(__p, std::move(__d), __a) { }
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	4618      	mov	r0, r3
 8005262:	f7fd fbff 	bl	8002a64 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8005266:	4a10      	ldr	r2, [pc, #64]	; (80052a8 <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_+0x58>)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	601a      	str	r2, [r3, #0]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f103 040c 	add.w	r4, r3, #12
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f7ff fba6 	bl	80049c4 <_ZSt4moveIRNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8005278:	4602      	mov	r2, r0
 800527a:	f107 0314 	add.w	r3, r7, #20
 800527e:	4611      	mov	r1, r2
 8005280:	4618      	mov	r0, r3
 8005282:	f7ff fbaa 	bl	80049da <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 8005286:	f107 0214 	add.w	r2, r7, #20
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	68b9      	ldr	r1, [r7, #8]
 800528e:	4620      	mov	r0, r4
 8005290:	f000 fa6c 	bl	800576c <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>
 8005294:	f107 0314 	add.w	r3, r7, #20
 8005298:	4618      	mov	r0, r3
 800529a:	f7fe ffc4 	bl	8004226 <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	4618      	mov	r0, r3
 80052a2:	371c      	adds	r7, #28
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd90      	pop	{r4, r7, pc}
 80052a8:	0800ddf4 	.word	0x0800ddf4

080052ac <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	605a      	str	r2, [r3, #4]
	return *this;
 80052bc:	687b      	ldr	r3, [r7, #4]
      }
 80052be:	4618      	mov	r0, r3
 80052c0:	370c      	adds	r7, #12
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr

080052ca <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>:
          void operator()(typename _Alloc::value_type* __ptr)
 80052ca:	b590      	push	{r4, r7, lr}
 80052cc:	b085      	sub	sp, #20
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
 80052d2:	6039      	str	r1, [r7, #0]
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 80052d4:	6879      	ldr	r1, [r7, #4]
 80052d6:	f107 0308 	add.w	r3, r7, #8
 80052da:	683a      	ldr	r2, [r7, #0]
 80052dc:	4618      	mov	r0, r3
 80052de:	f7ff feb9 	bl	8005054 <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEEC1ERS2_PS1_>
	    allocator_traits<_Alloc>::destroy(_M_alloc, __guard.get());
 80052e2:	687c      	ldr	r4, [r7, #4]
 80052e4:	f107 0308 	add.w	r3, r7, #8
 80052e8:	4618      	mov	r0, r3
 80052ea:	f7ff fb41 	bl	8004970 <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEE3getEv>
 80052ee:	4603      	mov	r3, r0
 80052f0:	4619      	mov	r1, r3
 80052f2:	4620      	mov	r0, r4
 80052f4:	f000 fa58 	bl	80057a8 <_ZNSt16allocator_traitsISaIN4tama27Nokia5110DisplayDataManagerEEE7destroyIS1_EEvRS2_PT_>
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 80052f8:	f107 0308 	add.w	r3, r7, #8
 80052fc:	4618      	mov	r0, r3
 80052fe:	f7ff fb22 	bl	8004946 <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEED1Ev>
          }
 8005302:	bf00      	nop
 8005304:	3714      	adds	r7, #20
 8005306:	46bd      	mov	sp, r7
 8005308:	bd90      	pop	{r4, r7, pc}

0800530a <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEE9constructIS2_JEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800530a:	b580      	push	{r7, lr}
 800530c:	b082      	sub	sp, #8
 800530e:	af00      	add	r7, sp, #0
 8005310:	6078      	str	r0, [r7, #4]
 8005312:	6039      	str	r1, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	4619      	mov	r1, r3
 8005318:	2020      	movs	r0, #32
 800531a:	f7fb fc5f 	bl	8000bdc <_ZnwjPv>
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d002      	beq.n	800532a <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEE9constructIS2_JEEEvPT_DpOT0_+0x20>
 8005324:	4618      	mov	r0, r3
 8005326:	f7fb fd65 	bl	8000df4 <_ZN4tama5SceneC1Ev>
 800532a:	bf00      	nop
 800532c:	3708      	adds	r7, #8
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}

08005332 <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE9constructIS2_JRjS5_RPPNS1_10PixelColorEEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8005332:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005334:	b085      	sub	sp, #20
 8005336:	af00      	add	r7, sp, #0
 8005338:	60f8      	str	r0, [r7, #12]
 800533a:	60b9      	str	r1, [r7, #8]
 800533c:	607a      	str	r2, [r7, #4]
 800533e:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f7fb ff7a 	bl	800123a <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 8005346:	4603      	mov	r3, r0
 8005348:	681c      	ldr	r4, [r3, #0]
 800534a:	6838      	ldr	r0, [r7, #0]
 800534c:	f7fb ff75 	bl	800123a <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 8005350:	4603      	mov	r3, r0
 8005352:	681d      	ldr	r5, [r3, #0]
 8005354:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005356:	f7fe fbe3 	bl	8003b20 <_ZSt7forwardIRPPN4tama10PixelColorEEOT_RNSt16remove_referenceIS5_E4typeE>
 800535a:	4603      	mov	r3, r0
 800535c:	681e      	ldr	r6, [r3, #0]
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	4619      	mov	r1, r3
 8005362:	2010      	movs	r0, #16
 8005364:	f7fb fc3a 	bl	8000bdc <_ZnwjPv>
 8005368:	2800      	cmp	r0, #0
 800536a:	d004      	beq.n	8005376 <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE9constructIS2_JRjS5_RPPNS1_10PixelColorEEEEvPT_DpOT0_+0x44>
 800536c:	4633      	mov	r3, r6
 800536e:	462a      	mov	r2, r5
 8005370:	4621      	mov	r1, r4
 8005372:	f7fe f889 	bl	8003488 <_ZN4tama7TextureC1EjjPPNS_10PixelColorE>
 8005376:	bf00      	nop
 8005378:	3714      	adds	r7, #20
 800537a:	46bd      	mov	sp, r7
 800537c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800537e <_ZN9__gnu_cxx13new_allocatorIN4tama16Nokia5510DisplayEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800537e:	b580      	push	{r7, lr}
 8005380:	b084      	sub	sp, #16
 8005382:	af00      	add	r7, sp, #0
 8005384:	60f8      	str	r0, [r7, #12]
 8005386:	60b9      	str	r1, [r7, #8]
 8005388:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800538a:	68f8      	ldr	r0, [r7, #12]
 800538c:	f000 fa1a 	bl	80057c4 <_ZNK9__gnu_cxx13new_allocatorIN4tama16Nokia5510DisplayEE8max_sizeEv>
 8005390:	4602      	mov	r2, r0
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	4293      	cmp	r3, r2
 8005396:	bf8c      	ite	hi
 8005398:	2301      	movhi	r3, #1
 800539a:	2300      	movls	r3, #0
 800539c:	b2db      	uxtb	r3, r3
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d001      	beq.n	80053a6 <_ZN9__gnu_cxx13new_allocatorIN4tama16Nokia5510DisplayEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80053a2:	f008 fb50 	bl	800da46 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80053a6:	68ba      	ldr	r2, [r7, #8]
 80053a8:	4613      	mov	r3, r2
 80053aa:	005b      	lsls	r3, r3, #1
 80053ac:	4413      	add	r3, r2
 80053ae:	011b      	lsls	r3, r3, #4
 80053b0:	4618      	mov	r0, r3
 80053b2:	f008 fb1c 	bl	800d9ee <_Znwj>
 80053b6:	4603      	mov	r3, r0
      }
 80053b8:	4618      	mov	r0, r3
 80053ba:	3710      	adds	r7, #16
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <_ZSt11__addressofISaIN4tama16Nokia5510DisplayEEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4618      	mov	r0, r3
 80053cc:	370c      	adds	r7, #12
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr

080053d6 <_ZN9__gnu_cxx13new_allocatorIN4tama16Nokia5510DisplayEE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 80053d6:	b580      	push	{r7, lr}
 80053d8:	b084      	sub	sp, #16
 80053da:	af00      	add	r7, sp, #0
 80053dc:	60f8      	str	r0, [r7, #12]
 80053de:	60b9      	str	r1, [r7, #8]
 80053e0:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 80053e2:	68b8      	ldr	r0, [r7, #8]
 80053e4:	f008 fb1c 	bl	800da20 <_ZdlPv>
      }
 80053e8:	bf00      	nop
 80053ea:	3710      	adds	r7, #16
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	4618      	mov	r0, r3
 80053fc:	370c      	adds	r7, #12
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr

08005406 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8005406:	b480      	push	{r7}
 8005408:	b083      	sub	sp, #12
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4618      	mov	r0, r3
 8005412:	370c      	adds	r7, #12
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>:
      allocate(allocator_type& __a, size_type __n)
 800541c:	b580      	push	{r7, lr}
 800541e:	b082      	sub	sp, #8
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8005426:	2200      	movs	r2, #0
 8005428:	6839      	ldr	r1, [r7, #0]
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 f9d8 	bl	80057e0 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>
 8005430:	4603      	mov	r3, r0
 8005432:	4618      	mov	r0, r3
 8005434:	3708      	adds	r7, #8
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}

0800543a <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 800543a:	b580      	push	{r7, lr}
 800543c:	b084      	sub	sp, #16
 800543e:	af00      	add	r7, sp, #0
 8005440:	60f8      	str	r0, [r7, #12]
 8005442:	60b9      	str	r1, [r7, #8]
 8005444:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8005446:	68b8      	ldr	r0, [r7, #8]
 8005448:	f000 f9eb 	bl	8005822 <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>
 800544c:	4602      	mov	r2, r0
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	601a      	str	r2, [r3, #0]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	605a      	str	r2, [r3, #4]
      { }
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	4618      	mov	r0, r3
 800545c:	3710      	adds	r7, #16
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}

08005462 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8005462:	b580      	push	{r7, lr}
 8005464:	b084      	sub	sp, #16
 8005466:	af00      	add	r7, sp, #0
 8005468:	60f8      	str	r0, [r7, #12]
 800546a:	60b9      	str	r1, [r7, #8]
 800546c:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	68b9      	ldr	r1, [r7, #8]
 8005472:	68f8      	ldr	r0, [r7, #12]
 8005474:	f000 f9e0 	bl	8005838 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>
 8005478:	bf00      	nop
 800547a:	3710      	adds	r7, #16
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 8005480:	b480      	push	{r7}
 8005482:	b083      	sub	sp, #12
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	4618      	mov	r0, r3
 800548c:	370c      	adds	r7, #12
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr

08005496 <_ZNSt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 8005496:	b590      	push	{r4, r7, lr}
 8005498:	b085      	sub	sp, #20
 800549a:	af00      	add	r7, sp, #0
 800549c:	60f8      	str	r0, [r7, #12]
 800549e:	60b9      	str	r1, [r7, #8]
 80054a0:	607a      	str	r2, [r7, #4]
 80054a2:	603b      	str	r3, [r7, #0]
	: _M_ptr(__p), _Del_base(std::move(__d)), _Alloc_base(__a)
 80054a4:	68fc      	ldr	r4, [r7, #12]
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f7ff f8b1 	bl	800460e <_ZSt4moveIRNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 80054ac:	4603      	mov	r3, r0
 80054ae:	4619      	mov	r1, r3
 80054b0:	4620      	mov	r0, r4
 80054b2:	f000 f9ce 	bl	8005852 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	3301      	adds	r3, #1
 80054ba:	6839      	ldr	r1, [r7, #0]
 80054bc:	4618      	mov	r0, r3
 80054be:	f000 f9db 	bl	8005878 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama16Nokia5510DisplayEELb1EEC1ERKS2_>
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	68ba      	ldr	r2, [r7, #8]
 80054c6:	605a      	str	r2, [r3, #4]
	{ }
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	4618      	mov	r0, r3
 80054cc:	3714      	adds	r7, #20
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd90      	pop	{r4, r7, pc}

080054d2 <_ZNSt16allocator_traitsISaIN4tama16Nokia5510DisplayEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 80054d2:	b580      	push	{r7, lr}
 80054d4:	b082      	sub	sp, #8
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
 80054da:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 80054dc:	6839      	ldr	r1, [r7, #0]
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 f9d8 	bl	8005894 <_ZN9__gnu_cxx13new_allocatorIN4tama16Nokia5510DisplayEE7destroyIS2_EEvPT_>
 80054e4:	bf00      	nop
 80054e6:	3708      	adds	r7, #8
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}

080054ec <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b084      	sub	sp, #16
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 80054f8:	68f8      	ldr	r0, [r7, #12]
 80054fa:	f000 f9d6 	bl	80058aa <_ZNK9__gnu_cxx13new_allocatorIN4tama6SpriteEE8max_sizeEv>
 80054fe:	4602      	mov	r2, r0
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	4293      	cmp	r3, r2
 8005504:	bf8c      	ite	hi
 8005506:	2301      	movhi	r3, #1
 8005508:	2300      	movls	r3, #0
 800550a:	b2db      	uxtb	r3, r3
 800550c:	2b00      	cmp	r3, #0
 800550e:	d001      	beq.n	8005514 <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8005510:	f008 fa99 	bl	800da46 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	015b      	lsls	r3, r3, #5
 8005518:	4618      	mov	r0, r3
 800551a:	f008 fa68 	bl	800d9ee <_Znwj>
 800551e:	4603      	mov	r3, r0
      }
 8005520:	4618      	mov	r0, r3
 8005522:	3710      	adds	r7, #16
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <_ZSt11__addressofISaIN4tama6SpriteEEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4618      	mov	r0, r3
 8005534:	370c      	adds	r7, #12
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr

0800553e <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 800553e:	b580      	push	{r7, lr}
 8005540:	b084      	sub	sp, #16
 8005542:	af00      	add	r7, sp, #0
 8005544:	60f8      	str	r0, [r7, #12]
 8005546:	60b9      	str	r1, [r7, #8]
 8005548:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800554a:	68b8      	ldr	r0, [r7, #8]
 800554c:	f008 fa68 	bl	800da20 <_ZdlPv>
      }
 8005550:	bf00      	nop
 8005552:	3710      	adds	r7, #16
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}

08005558 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4618      	mov	r0, r3
 8005564:	370c      	adds	r7, #12
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr

0800556e <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800556e:	b480      	push	{r7}
 8005570:	b083      	sub	sp, #12
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4618      	mov	r0, r3
 800557a:	370c      	adds	r7, #12
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>:
      allocate(allocator_type& __a, size_type __n)
 8005584:	b580      	push	{r7, lr}
 8005586:	b082      	sub	sp, #8
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800558e:	2200      	movs	r2, #0
 8005590:	6839      	ldr	r1, [r7, #0]
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 f995 	bl	80058c2 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>
 8005598:	4603      	mov	r3, r0
 800559a:	4618      	mov	r0, r3
 800559c:	3708      	adds	r7, #8
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}

080055a2 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 80055a2:	b580      	push	{r7, lr}
 80055a4:	b084      	sub	sp, #16
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	60f8      	str	r0, [r7, #12]
 80055aa:	60b9      	str	r1, [r7, #8]
 80055ac:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 80055ae:	68b8      	ldr	r0, [r7, #8]
 80055b0:	f000 f9a8 	bl	8005904 <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>
 80055b4:	4602      	mov	r2, r0
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	601a      	str	r2, [r3, #0]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	605a      	str	r2, [r3, #4]
      { }
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	4618      	mov	r0, r3
 80055c4:	3710      	adds	r7, #16
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}

080055ca <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80055ca:	b580      	push	{r7, lr}
 80055cc:	b084      	sub	sp, #16
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	60f8      	str	r0, [r7, #12]
 80055d2:	60b9      	str	r1, [r7, #8]
 80055d4:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	68b9      	ldr	r1, [r7, #8]
 80055da:	68f8      	ldr	r0, [r7, #12]
 80055dc:	f000 f99d 	bl	800591a <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>
 80055e0:	bf00      	nop
 80055e2:	3710      	adds	r7, #16
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4618      	mov	r0, r3
 80055f4:	370c      	adds	r7, #12
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr

080055fe <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 80055fe:	b590      	push	{r4, r7, lr}
 8005600:	b085      	sub	sp, #20
 8005602:	af00      	add	r7, sp, #0
 8005604:	60f8      	str	r0, [r7, #12]
 8005606:	60b9      	str	r1, [r7, #8]
 8005608:	607a      	str	r2, [r7, #4]
 800560a:	603b      	str	r3, [r7, #0]
	: _M_ptr(__p), _Del_base(std::move(__d)), _Alloc_base(__a)
 800560c:	68fc      	ldr	r4, [r7, #12]
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f7ff f8f0 	bl	80047f4 <_ZSt4moveIRNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8005614:	4603      	mov	r3, r0
 8005616:	4619      	mov	r1, r3
 8005618:	4620      	mov	r0, r4
 800561a:	f000 f98b 	bl	8005934 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	3301      	adds	r3, #1
 8005622:	6839      	ldr	r1, [r7, #0]
 8005624:	4618      	mov	r0, r3
 8005626:	f000 f998 	bl	800595a <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama6SpriteEELb1EEC1ERKS2_>
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	68ba      	ldr	r2, [r7, #8]
 800562e:	605a      	str	r2, [r3, #4]
	{ }
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	4618      	mov	r0, r3
 8005634:	3714      	adds	r7, #20
 8005636:	46bd      	mov	sp, r7
 8005638:	bd90      	pop	{r4, r7, pc}

0800563a <_ZNSt16allocator_traitsISaIN4tama6SpriteEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 800563a:	b580      	push	{r7, lr}
 800563c:	b082      	sub	sp, #8
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
 8005642:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 8005644:	6839      	ldr	r1, [r7, #0]
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 f9ae 	bl	80059a8 <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEE7destroyIS2_EEvPT_>
 800564c:	bf00      	nop
 800564e:	3708      	adds	r7, #8
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8005654:	b580      	push	{r7, lr}
 8005656:	b084      	sub	sp, #16
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8005660:	68f8      	ldr	r0, [r7, #12]
 8005662:	f000 f9ad 	bl	80059c0 <_ZNK9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEE8max_sizeEv>
 8005666:	4602      	mov	r2, r0
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	4293      	cmp	r3, r2
 800566c:	bf8c      	ite	hi
 800566e:	2301      	movhi	r3, #1
 8005670:	2300      	movls	r3, #0
 8005672:	b2db      	uxtb	r3, r3
 8005674:	2b00      	cmp	r3, #0
 8005676:	d001      	beq.n	800567c <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8005678:	f008 f9e5 	bl	800da46 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800567c:	68ba      	ldr	r2, [r7, #8]
 800567e:	4613      	mov	r3, r2
 8005680:	005b      	lsls	r3, r3, #1
 8005682:	4413      	add	r3, r2
 8005684:	00db      	lsls	r3, r3, #3
 8005686:	4618      	mov	r0, r3
 8005688:	f008 f9b1 	bl	800d9ee <_Znwj>
 800568c:	4603      	mov	r3, r0
      }
 800568e:	4618      	mov	r0, r3
 8005690:	3710      	adds	r7, #16
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}

08005696 <_ZSt11__addressofISaIN4tama27Nokia5110DisplayDataManagerEEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8005696:	b480      	push	{r7}
 8005698:	b083      	sub	sp, #12
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4618      	mov	r0, r3
 80056a2:	370c      	adds	r7, #12
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr

080056ac <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	60b9      	str	r1, [r7, #8]
 80056b6:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 80056b8:	68b8      	ldr	r0, [r7, #8]
 80056ba:	f008 f9b1 	bl	800da20 <_ZdlPv>
      }
 80056be:	bf00      	nop
 80056c0:	3710      	adds	r7, #16
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}

080056c6 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80056c6:	b480      	push	{r7}
 80056c8:	b083      	sub	sp, #12
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4618      	mov	r0, r3
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	4618      	mov	r0, r3
 80056e8:	370c      	adds	r7, #12
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr

080056f2 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>:
      allocate(allocator_type& __a, size_type __n)
 80056f2:	b580      	push	{r7, lr}
 80056f4:	b082      	sub	sp, #8
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
 80056fa:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80056fc:	2200      	movs	r2, #0
 80056fe:	6839      	ldr	r1, [r7, #0]
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f000 f96b 	bl	80059dc <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>
 8005706:	4603      	mov	r3, r0
 8005708:	4618      	mov	r0, r3
 800570a:	3708      	adds	r7, #8
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}

08005710 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800571c:	68b8      	ldr	r0, [r7, #8]
 800571e:	f000 f97e 	bl	8005a1e <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>
 8005722:	4602      	mov	r2, r0
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	601a      	str	r2, [r3, #0]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	605a      	str	r2, [r3, #4]
      { }
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	4618      	mov	r0, r3
 8005732:	3710      	adds	r7, #16
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}

08005738 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8005738:	b580      	push	{r7, lr}
 800573a:	b084      	sub	sp, #16
 800573c:	af00      	add	r7, sp, #0
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	68b9      	ldr	r1, [r7, #8]
 8005748:	68f8      	ldr	r0, [r7, #12]
 800574a:	f000 f973 	bl	8005a34 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>
 800574e:	bf00      	nop
 8005750:	3710      	adds	r7, #16
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}

08005756 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 8005756:	b480      	push	{r7}
 8005758:	b083      	sub	sp, #12
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4618      	mov	r0, r3
 8005762:	370c      	adds	r7, #12
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr

0800576c <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 800576c:	b590      	push	{r4, r7, lr}
 800576e:	b085      	sub	sp, #20
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	607a      	str	r2, [r7, #4]
 8005778:	603b      	str	r3, [r7, #0]
	: _M_ptr(__p), _Del_base(std::move(__d)), _Alloc_base(__a)
 800577a:	68fc      	ldr	r4, [r7, #12]
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f7ff f921 	bl	80049c4 <_ZSt4moveIRNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8005782:	4603      	mov	r3, r0
 8005784:	4619      	mov	r1, r3
 8005786:	4620      	mov	r0, r4
 8005788:	f000 f961 	bl	8005a4e <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	3301      	adds	r3, #1
 8005790:	6839      	ldr	r1, [r7, #0]
 8005792:	4618      	mov	r0, r3
 8005794:	f000 f96e 	bl	8005a74 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama27Nokia5110DisplayDataManagerEELb1EEC1ERKS2_>
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	68ba      	ldr	r2, [r7, #8]
 800579c:	605a      	str	r2, [r3, #4]
	{ }
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	4618      	mov	r0, r3
 80057a2:	3714      	adds	r7, #20
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd90      	pop	{r4, r7, pc}

080057a8 <_ZNSt16allocator_traitsISaIN4tama27Nokia5110DisplayDataManagerEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b082      	sub	sp, #8
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 80057b2:	6839      	ldr	r1, [r7, #0]
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f000 f96b 	bl	8005a90 <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEE7destroyIS2_EEvPT_>
 80057ba:	bf00      	nop
 80057bc:	3708      	adds	r7, #8
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
	...

080057c4 <_ZNK9__gnu_cxx13new_allocatorIN4tama16Nokia5510DisplayEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80057c4:	b480      	push	{r7}
 80057c6:	b083      	sub	sp, #12
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 80057cc:	4b03      	ldr	r3, [pc, #12]	; (80057dc <_ZNK9__gnu_cxx13new_allocatorIN4tama16Nokia5510DisplayEE8max_sizeEv+0x18>)
 80057ce:	4618      	mov	r0, r3
 80057d0:	370c      	adds	r7, #12
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr
 80057da:	bf00      	nop
 80057dc:	05555555 	.word	0x05555555

080057e0 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b084      	sub	sp, #16
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	60f8      	str	r0, [r7, #12]
 80057e8:	60b9      	str	r1, [r7, #8]
 80057ea:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 80057ec:	68f8      	ldr	r0, [r7, #12]
 80057ee:	f000 f95b 	bl	8005aa8 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>
 80057f2:	4602      	mov	r2, r0
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	4293      	cmp	r3, r2
 80057f8:	bf8c      	ite	hi
 80057fa:	2301      	movhi	r3, #1
 80057fc:	2300      	movls	r3, #0
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	2b00      	cmp	r3, #0
 8005802:	d001      	beq.n	8005808 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8005804:	f008 f91f 	bl	800da46 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8005808:	68ba      	ldr	r2, [r7, #8]
 800580a:	4613      	mov	r3, r2
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	4413      	add	r3, r2
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	4618      	mov	r0, r3
 8005814:	f008 f8eb 	bl	800d9ee <_Znwj>
 8005818:	4603      	mov	r3, r0
      }
 800581a:	4618      	mov	r0, r3
 800581c:	3710      	adds	r7, #16
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}

08005822 <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8005822:	b480      	push	{r7}
 8005824:	b083      	sub	sp, #12
 8005826:	af00      	add	r7, sp, #0
 8005828:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4618      	mov	r0, r3
 800582e:	370c      	adds	r7, #12
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>:
      deallocate(pointer __p, size_type)
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8005844:	68b8      	ldr	r0, [r7, #8]
 8005846:	f008 f8eb 	bl	800da20 <_ZdlPv>
      }
 800584a:	bf00      	nop
 800584c:	3710      	adds	r7, #16
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}

08005852 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _M_tp(std::move(__tp)) { }
 8005852:	b590      	push	{r4, r7, lr}
 8005854:	b083      	sub	sp, #12
 8005856:	af00      	add	r7, sp, #0
 8005858:	6078      	str	r0, [r7, #4]
 800585a:	6039      	str	r1, [r7, #0]
 800585c:	687c      	ldr	r4, [r7, #4]
 800585e:	6838      	ldr	r0, [r7, #0]
 8005860:	f7fe fed5 	bl	800460e <_ZSt4moveIRNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8005864:	4603      	mov	r3, r0
 8005866:	4619      	mov	r1, r3
 8005868:	4620      	mov	r0, r4
 800586a:	f7fe fedb 	bl	8004624 <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4618      	mov	r0, r3
 8005872:	370c      	adds	r7, #12
 8005874:	46bd      	mov	sp, r7
 8005876:	bd90      	pop	{r4, r7, pc}

08005878 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama16Nokia5510DisplayEELb1EEC1ERKS2_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 8005878:	b580      	push	{r7, lr}
 800587a:	b082      	sub	sp, #8
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	6039      	str	r1, [r7, #0]
 8005882:	6839      	ldr	r1, [r7, #0]
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f7fe fe5c 	bl	8004542 <_ZNSaIN4tama16Nokia5510DisplayEEC1ERKS1_>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4618      	mov	r0, r3
 800588e:	3708      	adds	r7, #8
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <_ZN9__gnu_cxx13new_allocatorIN4tama16Nokia5510DisplayEE7destroyIS2_EEvPT_>:
	destroy(_Up* __p) { __p->~_Up(); }
 8005894:	b480      	push	{r7}
 8005896:	b083      	sub	sp, #12
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
 800589e:	bf00      	nop
 80058a0:	370c      	adds	r7, #12
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr

080058aa <_ZNK9__gnu_cxx13new_allocatorIN4tama6SpriteEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80058aa:	b480      	push	{r7}
 80058ac:	b083      	sub	sp, #12
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 80058b2:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
 80058b6:	4618      	mov	r0, r3
 80058b8:	370c      	adds	r7, #12
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr

080058c2 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80058c2:	b580      	push	{r7, lr}
 80058c4:	b084      	sub	sp, #16
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	60f8      	str	r0, [r7, #12]
 80058ca:	60b9      	str	r1, [r7, #8]
 80058cc:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 80058ce:	68f8      	ldr	r0, [r7, #12]
 80058d0:	f000 f8f8 	bl	8005ac4 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>
 80058d4:	4602      	mov	r2, r0
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	4293      	cmp	r3, r2
 80058da:	bf8c      	ite	hi
 80058dc:	2301      	movhi	r3, #1
 80058de:	2300      	movls	r3, #0
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d001      	beq.n	80058ea <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80058e6:	f008 f8ae 	bl	800da46 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80058ea:	68ba      	ldr	r2, [r7, #8]
 80058ec:	4613      	mov	r3, r2
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	4413      	add	r3, r2
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	4618      	mov	r0, r3
 80058f6:	f008 f87a 	bl	800d9ee <_Znwj>
 80058fa:	4603      	mov	r3, r0
      }
 80058fc:	4618      	mov	r0, r3
 80058fe:	3710      	adds	r7, #16
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	4618      	mov	r0, r3
 8005910:	370c      	adds	r7, #12
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr

0800591a <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>:
      deallocate(pointer __p, size_type)
 800591a:	b580      	push	{r7, lr}
 800591c:	b084      	sub	sp, #16
 800591e:	af00      	add	r7, sp, #0
 8005920:	60f8      	str	r0, [r7, #12]
 8005922:	60b9      	str	r1, [r7, #8]
 8005924:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8005926:	68b8      	ldr	r0, [r7, #8]
 8005928:	f008 f87a 	bl	800da20 <_ZdlPv>
      }
 800592c:	bf00      	nop
 800592e:	3710      	adds	r7, #16
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}

08005934 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _M_tp(std::move(__tp)) { }
 8005934:	b590      	push	{r4, r7, lr}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
 800593e:	687c      	ldr	r4, [r7, #4]
 8005940:	6838      	ldr	r0, [r7, #0]
 8005942:	f7fe ff57 	bl	80047f4 <_ZSt4moveIRNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8005946:	4603      	mov	r3, r0
 8005948:	4619      	mov	r1, r3
 800594a:	4620      	mov	r0, r4
 800594c:	f7fe ff5d 	bl	800480a <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	4618      	mov	r0, r3
 8005954:	370c      	adds	r7, #12
 8005956:	46bd      	mov	sp, r7
 8005958:	bd90      	pop	{r4, r7, pc}

0800595a <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama6SpriteEELb1EEC1ERKS2_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 800595a:	b580      	push	{r7, lr}
 800595c:	b082      	sub	sp, #8
 800595e:	af00      	add	r7, sp, #0
 8005960:	6078      	str	r0, [r7, #4]
 8005962:	6039      	str	r1, [r7, #0]
 8005964:	6839      	ldr	r1, [r7, #0]
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f7fe fed9 	bl	800471e <_ZNSaIN4tama6SpriteEEC1ERKS1_>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4618      	mov	r0, r3
 8005970:	3708      	adds	r7, #8
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
	...

08005978 <_ZN4tama6SpriteD1Ev>:
#include <memory>
#include "../Drawable.h"

namespace tama
{
    class Sprite : public Drawable
 8005978:	b580      	push	{r7, lr}
 800597a:	b082      	sub	sp, #8
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	4a08      	ldr	r2, [pc, #32]	; (80059a4 <_ZN4tama6SpriteD1Ev+0x2c>)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	601a      	str	r2, [r3, #0]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	3318      	adds	r3, #24
 800598a:	4618      	mov	r0, r3
 800598c:	f7fa ff6c 	bl	8000868 <_ZNSt10shared_ptrIN4tama14ChangeObserverEED1Ev>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	3304      	adds	r3, #4
 8005994:	4618      	mov	r0, r3
 8005996:	f7fb fabf 	bl	8000f18 <_ZNSt10shared_ptrIN4tama7TextureEED1Ev>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4618      	mov	r0, r3
 800599e:	3708      	adds	r7, #8
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}
 80059a4:	0800dd20 	.word	0x0800dd20

080059a8 <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEE7destroyIS2_EEvPT_>:
	destroy(_Up* __p) { __p->~_Up(); }
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b082      	sub	sp, #8
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	6039      	str	r1, [r7, #0]
 80059b2:	6838      	ldr	r0, [r7, #0]
 80059b4:	f7ff ffe0 	bl	8005978 <_ZN4tama6SpriteD1Ev>
 80059b8:	bf00      	nop
 80059ba:	3708      	adds	r7, #8
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}

080059c0 <_ZNK9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 80059c8:	4b03      	ldr	r3, [pc, #12]	; (80059d8 <_ZNK9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEE8max_sizeEv+0x18>)
 80059ca:	4618      	mov	r0, r3
 80059cc:	370c      	adds	r7, #12
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr
 80059d6:	bf00      	nop
 80059d8:	0aaaaaaa 	.word	0x0aaaaaaa

080059dc <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 80059e8:	68f8      	ldr	r0, [r7, #12]
 80059ea:	f000 f879 	bl	8005ae0 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>
 80059ee:	4602      	mov	r2, r0
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	4293      	cmp	r3, r2
 80059f4:	bf8c      	ite	hi
 80059f6:	2301      	movhi	r3, #1
 80059f8:	2300      	movls	r3, #0
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d001      	beq.n	8005a04 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8005a00:	f008 f821 	bl	800da46 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8005a04:	68ba      	ldr	r2, [r7, #8]
 8005a06:	4613      	mov	r3, r2
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	4413      	add	r3, r2
 8005a0c:	009b      	lsls	r3, r3, #2
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f007 ffed 	bl	800d9ee <_Znwj>
 8005a14:	4603      	mov	r3, r0
      }
 8005a16:	4618      	mov	r0, r3
 8005a18:	3710      	adds	r7, #16
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}

08005a1e <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8005a1e:	b480      	push	{r7}
 8005a20:	b083      	sub	sp, #12
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4618      	mov	r0, r3
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>:
      deallocate(pointer __p, size_type)
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b084      	sub	sp, #16
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	60b9      	str	r1, [r7, #8]
 8005a3e:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8005a40:	68b8      	ldr	r0, [r7, #8]
 8005a42:	f007 ffed 	bl	800da20 <_ZdlPv>
      }
 8005a46:	bf00      	nop
 8005a48:	3710      	adds	r7, #16
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}

08005a4e <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _M_tp(std::move(__tp)) { }
 8005a4e:	b590      	push	{r4, r7, lr}
 8005a50:	b083      	sub	sp, #12
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	6078      	str	r0, [r7, #4]
 8005a56:	6039      	str	r1, [r7, #0]
 8005a58:	687c      	ldr	r4, [r7, #4]
 8005a5a:	6838      	ldr	r0, [r7, #0]
 8005a5c:	f7fe ffb2 	bl	80049c4 <_ZSt4moveIRNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8005a60:	4603      	mov	r3, r0
 8005a62:	4619      	mov	r1, r3
 8005a64:	4620      	mov	r0, r4
 8005a66:	f7fe ffb8 	bl	80049da <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd90      	pop	{r4, r7, pc}

08005a74 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama27Nokia5110DisplayDataManagerEELb1EEC1ERKS2_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b082      	sub	sp, #8
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	6039      	str	r1, [r7, #0]
 8005a7e:	6839      	ldr	r1, [r7, #0]
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f7fe ff3f 	bl	8004904 <_ZNSaIN4tama27Nokia5110DisplayDataManagerEEC1ERKS1_>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3708      	adds	r7, #8
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEE7destroyIS2_EEvPT_>:
	destroy(_Up* __p) { __p->~_Up(); }
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	6039      	str	r1, [r7, #0]
 8005a9a:	bf00      	nop
 8005a9c:	370c      	adds	r7, #12
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr
	...

08005aa8 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8005ab0:	4b03      	ldr	r3, [pc, #12]	; (8005ac0 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv+0x18>)
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	370c      	adds	r7, #12
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr
 8005abe:	bf00      	nop
 8005ac0:	0ccccccc 	.word	0x0ccccccc

08005ac4 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8005acc:	4b03      	ldr	r3, [pc, #12]	; (8005adc <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv+0x18>)
 8005ace:	4618      	mov	r0, r3
 8005ad0:	370c      	adds	r7, #12
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop
 8005adc:	0ccccccc 	.word	0x0ccccccc

08005ae0 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8005ae8:	4b03      	ldr	r3, [pc, #12]	; (8005af8 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv+0x18>)
 8005aea:	4618      	mov	r0, r3
 8005aec:	370c      	adds	r7, #12
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr
 8005af6:	bf00      	nop
 8005af8:	0ccccccc 	.word	0x0ccccccc

08005afc <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b082      	sub	sp, #8
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	4a08      	ldr	r2, [pc, #32]	; (8005b28 <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev+0x2c>)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	601a      	str	r2, [r3, #0]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	330c      	adds	r3, #12
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f7ff fb8c 	bl	800522c <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4618      	mov	r0, r3
 8005b18:	f7fb fc12 	bl	8001340 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3708      	adds	r7, #8
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	bf00      	nop
 8005b28:	0800ddf4 	.word	0x0800ddf4

08005b2c <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b082      	sub	sp, #8
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f7ff ffe1 	bl	8005afc <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
 8005b3a:	2114      	movs	r1, #20
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f007 ff54 	bl	800d9ea <_ZdlPvj>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4618      	mov	r0, r3
 8005b46:	3708      	adds	r7, #8
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b082      	sub	sp, #8
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	330c      	adds	r3, #12
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f000 f924 	bl	8005da6 <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>
 8005b5e:	4602      	mov	r2, r0
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	4619      	mov	r1, r3
 8005b66:	4610      	mov	r0, r2
 8005b68:	f7ff fbaf 	bl	80052ca <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>
 8005b6c:	bf00      	nop
 8005b6e:	3708      	adds	r7, #8
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}

08005b74 <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b086      	sub	sp, #24
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	330c      	adds	r3, #12
 8005b80:	4618      	mov	r0, r3
 8005b82:	f000 f91d 	bl	8005dc0 <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>
 8005b86:	4602      	mov	r2, r0
 8005b88:	f107 0314 	add.w	r3, r7, #20
 8005b8c:	4611      	mov	r1, r2
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f7ff fae4 	bl	800515c <_ZNSaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8005b94:	f107 0114 	add.w	r1, r7, #20
 8005b98:	f107 030c 	add.w	r3, r7, #12
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f7ff fdb6 	bl	8005710 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
	this->~_Sp_counted_deleter();
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f7ff ffa9 	bl	8005afc <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8005baa:	f107 030c 	add.w	r3, r7, #12
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f7ff fb00 	bl	80051b4 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	__allocator_type __a(_M_impl._M_alloc());
 8005bb4:	f107 0314 	add.w	r3, r7, #20
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f7ff fadc 	bl	8005176 <_ZNSaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
      }
 8005bbe:	bf00      	nop
 8005bc0:	3718      	adds	r7, #24
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}

08005bc6 <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept
 8005bc6:	b480      	push	{r7}
 8005bc8:	b083      	sub	sp, #12
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
 8005bce:	6039      	str	r1, [r7, #0]
        return nullptr;
 8005bd0:	2300      	movs	r3, #0
      }
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	370c      	adds	r7, #12
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr
	...

08005be0 <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b082      	sub	sp, #8
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	4a08      	ldr	r2, [pc, #32]	; (8005c0c <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev+0x2c>)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	601a      	str	r2, [r3, #0]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	330c      	adds	r3, #12
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f7ff f9a4 	bl	8004f40 <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f7fb fba0 	bl	8001340 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4618      	mov	r0, r3
 8005c04:	3708      	adds	r7, #8
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	bf00      	nop
 8005c0c:	0800de10 	.word	0x0800de10

08005c10 <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b082      	sub	sp, #8
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f7ff ffe1 	bl	8005be0 <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
 8005c1e:	2114      	movs	r1, #20
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f007 fee2 	bl	800d9ea <_ZdlPvj>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3708      	adds	r7, #8
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b082      	sub	sp, #8
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	330c      	adds	r3, #12
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f000 f8cd 	bl	8005ddc <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>
 8005c42:	4602      	mov	r2, r0
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	691b      	ldr	r3, [r3, #16]
 8005c48:	4619      	mov	r1, r3
 8005c4a:	4610      	mov	r0, r2
 8005c4c:	f7ff f9c7 	bl	8004fde <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>
 8005c50:	bf00      	nop
 8005c52:	3708      	adds	r7, #8
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b086      	sub	sp, #24
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	330c      	adds	r3, #12
 8005c64:	4618      	mov	r0, r3
 8005c66:	f000 f8c6 	bl	8005df6 <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>
 8005c6a:	4602      	mov	r2, r0
 8005c6c:	f107 0314 	add.w	r3, r7, #20
 8005c70:	4611      	mov	r1, r2
 8005c72:	4618      	mov	r0, r3
 8005c74:	f7ff f8fc 	bl	8004e70 <_ZNSaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8005c78:	f107 0114 	add.w	r1, r7, #20
 8005c7c:	f107 030c 	add.w	r3, r7, #12
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	4618      	mov	r0, r3
 8005c84:	f7ff fc8d 	bl	80055a2 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
	this->~_Sp_counted_deleter();
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f7ff ffa9 	bl	8005be0 <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8005c8e:	f107 030c 	add.w	r3, r7, #12
 8005c92:	4618      	mov	r0, r3
 8005c94:	f7ff f918 	bl	8004ec8 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	__allocator_type __a(_M_impl._M_alloc());
 8005c98:	f107 0314 	add.w	r3, r7, #20
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f7ff f8f4 	bl	8004e8a <_ZNSaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
      }
 8005ca2:	bf00      	nop
 8005ca4:	3718      	adds	r7, #24
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}

08005caa <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept
 8005caa:	b480      	push	{r7}
 8005cac:	b083      	sub	sp, #12
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]
 8005cb2:	6039      	str	r1, [r7, #0]
        return nullptr;
 8005cb4:	2300      	movs	r3, #0
      }
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	370c      	adds	r7, #12
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr
	...

08005cc4 <_ZNSt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b082      	sub	sp, #8
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	4a08      	ldr	r2, [pc, #32]	; (8005cf0 <_ZNSt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev+0x2c>)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	601a      	str	r2, [r3, #0]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	330c      	adds	r3, #12
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f7fe fff2 	bl	8004cc0 <_ZNSt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f7fb fb2e 	bl	8001340 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3708      	adds	r7, #8
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	bf00      	nop
 8005cf0:	0800de2c 	.word	0x0800de2c

08005cf4 <_ZNSt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b082      	sub	sp, #8
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f7ff ffe1 	bl	8005cc4 <_ZNSt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
 8005d02:	2114      	movs	r1, #20
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f007 fe70 	bl	800d9ea <_ZdlPvj>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3708      	adds	r7, #8
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <_ZNSt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b082      	sub	sp, #8
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	330c      	adds	r3, #12
 8005d20:	4618      	mov	r0, r3
 8005d22:	f000 f876 	bl	8005e12 <_ZNSt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>
 8005d26:	4602      	mov	r2, r0
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	691b      	ldr	r3, [r3, #16]
 8005d2c:	4619      	mov	r1, r3
 8005d2e:	4610      	mov	r0, r2
 8005d30:	f7ff f815 	bl	8004d5e <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>
 8005d34:	bf00      	nop
 8005d36:	3708      	adds	r7, #8
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <_ZNSt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b086      	sub	sp, #24
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	330c      	adds	r3, #12
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f000 f86f 	bl	8005e2c <_ZNSt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	f107 0314 	add.w	r3, r7, #20
 8005d54:	4611      	mov	r1, r2
 8005d56:	4618      	mov	r0, r3
 8005d58:	f7fe ff4a 	bl	8004bf0 <_ZNSaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8005d5c:	f107 0114 	add.w	r1, r7, #20
 8005d60:	f107 030c 	add.w	r3, r7, #12
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	4618      	mov	r0, r3
 8005d68:	f7ff fb67 	bl	800543a <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
	this->~_Sp_counted_deleter();
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f7ff ffa9 	bl	8005cc4 <_ZNSt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8005d72:	f107 030c 	add.w	r3, r7, #12
 8005d76:	4618      	mov	r0, r3
 8005d78:	f7fe ff66 	bl	8004c48 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	__allocator_type __a(_M_impl._M_alloc());
 8005d7c:	f107 0314 	add.w	r3, r7, #20
 8005d80:	4618      	mov	r0, r3
 8005d82:	f7fe ff42 	bl	8004c0a <_ZNSaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
      }
 8005d86:	bf00      	nop
 8005d88:	3718      	adds	r7, #24
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}

08005d8e <_ZNSt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept
 8005d8e:	b480      	push	{r7}
 8005d90:	b083      	sub	sp, #12
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
 8005d96:	6039      	str	r1, [r7, #0]
        return nullptr;
 8005d98:	2300      	movs	r3, #0
      }
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	370c      	adds	r7, #12
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr

08005da6 <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 8005da6:	b580      	push	{r7, lr}
 8005da8:	b082      	sub	sp, #8
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	6078      	str	r0, [r7, #4]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4618      	mov	r0, r3
 8005db2:	f000 f849 	bl	8005e48 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>
 8005db6:	4603      	mov	r3, r0
 8005db8:	4618      	mov	r0, r3
 8005dba:	3708      	adds	r7, #8
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b082      	sub	sp, #8
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	3301      	adds	r3, #1
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f000 f846 	bl	8005e5e <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama27Nokia5110DisplayDataManagerEELb1EE6_S_getERS3_>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3708      	adds	r7, #8
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}

08005ddc <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b082      	sub	sp, #8
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	4618      	mov	r0, r3
 8005de8:	f000 f844 	bl	8005e74 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>
 8005dec:	4603      	mov	r3, r0
 8005dee:	4618      	mov	r0, r3
 8005df0:	3708      	adds	r7, #8
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}

08005df6 <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 8005df6:	b580      	push	{r7, lr}
 8005df8:	b082      	sub	sp, #8
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	6078      	str	r0, [r7, #4]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	3301      	adds	r3, #1
 8005e02:	4618      	mov	r0, r3
 8005e04:	f000 f841 	bl	8005e8a <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama6SpriteEELb1EE6_S_getERS3_>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3708      	adds	r7, #8
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}

08005e12 <_ZNSt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 8005e12:	b580      	push	{r7, lr}
 8005e14:	b082      	sub	sp, #8
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f000 f83f 	bl	8005ea0 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>
 8005e22:	4603      	mov	r3, r0
 8005e24:	4618      	mov	r0, r3
 8005e26:	3708      	adds	r7, #8
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <_ZNSt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b082      	sub	sp, #8
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	3301      	adds	r3, #1
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f000 f83c 	bl	8005eb6 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama16Nokia5510DisplayEELb1EE6_S_getERS3_>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	4618      	mov	r0, r3
 8005e42:	3708      	adds	r7, #8
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>:
      _S_get(_Sp_ebo_helper& __eboh)
 8005e48:	b480      	push	{r7}
 8005e4a:	b083      	sub	sp, #12
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
      { return __eboh._M_tp; }
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	4618      	mov	r0, r3
 8005e54:	370c      	adds	r7, #12
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr

08005e5e <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama27Nokia5110DisplayDataManagerEELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 8005e5e:	b480      	push	{r7}
 8005e60:	b083      	sub	sp, #12
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4618      	mov	r0, r3
 8005e6a:	370c      	adds	r7, #12
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>:
      _S_get(_Sp_ebo_helper& __eboh)
 8005e74:	b480      	push	{r7}
 8005e76:	b083      	sub	sp, #12
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
      { return __eboh._M_tp; }
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	4618      	mov	r0, r3
 8005e80:	370c      	adds	r7, #12
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr

08005e8a <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama6SpriteEELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 8005e8a:	b480      	push	{r7}
 8005e8c:	b083      	sub	sp, #12
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4618      	mov	r0, r3
 8005e96:	370c      	adds	r7, #12
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>:
      _S_get(_Sp_ebo_helper& __eboh)
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
      { return __eboh._M_tp; }
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	4618      	mov	r0, r3
 8005eac:	370c      	adds	r7, #12
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr

08005eb6 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama16Nokia5510DisplayEELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 8005eb6:	b480      	push	{r7}
 8005eb8:	b083      	sub	sp, #12
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	370c      	adds	r7, #12
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <_ZN4tama7DisplayC1Ev>:
#include "PixelColor.h"
#include "display-data/DisplayData.h"

namespace tama
{
    class Display
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	4a04      	ldr	r2, [pc, #16]	; (8005ee8 <_ZN4tama7DisplayC1Ev+0x1c>)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	601a      	str	r2, [r3, #0]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4618      	mov	r0, r3
 8005ede:	370c      	adds	r7, #12
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr
 8005ee8:	0800de64 	.word	0x0800de64

08005eec <_ZN4tama16Nokia5510DisplayC1ERNS_13DisplayConfigE>:
// Created by grzegorz on 3/25/21.
//

#include "Nokia5510Display.h"

tama::Nokia5510Display::Nokia5510Display(DisplayConfig & displayConfig)
 8005eec:	b5b0      	push	{r4, r5, r7, lr}
 8005eee:	b084      	sub	sp, #16
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	6039      	str	r1, [r7, #0]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f7ff ffe7 	bl	8005ecc <_ZN4tama7DisplayC1Ev>
 8005efe:	4a32      	ldr	r2, [pc, #200]	; (8005fc8 <_ZN4tama16Nokia5510DisplayC1ERNS_13DisplayConfigE+0xdc>)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	601a      	str	r2, [r3, #0]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2254      	movs	r2, #84	; 0x54
 8005f08:	629a      	str	r2, [r3, #40]	; 0x28
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2230      	movs	r2, #48	; 0x30
 8005f0e:	62da      	str	r2, [r3, #44]	; 0x2c
{
    this->cfg = displayConfig;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	683a      	ldr	r2, [r7, #0]
 8005f14:	1d1c      	adds	r4, r3, #4
 8005f16:	4615      	mov	r5, r2
 8005f18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f20:	682b      	ldr	r3, [r5, #0]
 8005f22:	6023      	str	r3, [r4, #0]
    HAL_GPIO_WritePin(cfg.reset_port, cfg.reset_pin, GPIO_PIN_RESET);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6898      	ldr	r0, [r3, #8]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	899b      	ldrh	r3, [r3, #12]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	4619      	mov	r1, r3
 8005f30:	f001 f944 	bl	80071bc <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8005f34:	2064      	movs	r0, #100	; 0x64
 8005f36:	f000 fe8b 	bl	8006c50 <HAL_Delay>
    HAL_GPIO_WritePin(cfg.reset_port, cfg.reset_pin, GPIO_PIN_SET);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6898      	ldr	r0, [r3, #8]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	899b      	ldrh	r3, [r3, #12]
 8005f42:	2201      	movs	r2, #1
 8005f44:	4619      	mov	r1, r3
 8005f46:	f001 f939 	bl	80071bc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(cfg.bl_port, cfg.bl_pin, GPIO_PIN_SET);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6918      	ldr	r0, [r3, #16]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	8a9b      	ldrh	r3, [r3, #20]
 8005f52:	2201      	movs	r2, #1
 8005f54:	4619      	mov	r1, r3
 8005f56:	f001 f931 	bl	80071bc <HAL_GPIO_WritePin>
    writeCommand(0x21);
 8005f5a:	2121      	movs	r1, #33	; 0x21
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f000 f884 	bl	800606a <_ZN4tama16Nokia5510Display12writeCommandEh>
    writeCommand(0x04);
 8005f62:	2104      	movs	r1, #4
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f000 f880 	bl	800606a <_ZN4tama16Nokia5510Display12writeCommandEh>
    writeCommand(0x10 | 0x04);
 8005f6a:	2114      	movs	r1, #20
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f000 f87c 	bl	800606a <_ZN4tama16Nokia5510Display12writeCommandEh>
    writeCommand(0x80 | 0x41); //contrast
 8005f72:	21c1      	movs	r1, #193	; 0xc1
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f000 f878 	bl	800606a <_ZN4tama16Nokia5510Display12writeCommandEh>
    writeCommand(0x20);
 8005f7a:	2120      	movs	r1, #32
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f000 f874 	bl	800606a <_ZN4tama16Nokia5510Display12writeCommandEh>
    writeCommand(0x08 | 0x04);
 8005f82:	210c      	movs	r1, #12
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f000 f870 	bl	800606a <_ZN4tama16Nokia5510Display12writeCommandEh>
    for (int i = 0; i < 504; i++)
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	60fb      	str	r3, [r7, #12]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 8005f94:	da07      	bge.n	8005fa6 <_ZN4tama16Nokia5510DisplayC1ERNS_13DisplayConfigE+0xba>
        displayPixel(0x0);
 8005f96:	2100      	movs	r1, #0
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f000 f83d 	bl	8006018 <_ZN4tama16Nokia5510Display12displayPixelEh>
    for (int i = 0; i < 504; i++)
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	3301      	adds	r3, #1
 8005fa2:	60fb      	str	r3, [r7, #12]
 8005fa4:	e7f3      	b.n	8005f8e <_ZN4tama16Nokia5510DisplayC1ERNS_13DisplayConfigE+0xa2>
    writeCommand(0x20 | 0x00);
 8005fa6:	2120      	movs	r1, #32
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f000 f85e 	bl	800606a <_ZN4tama16Nokia5510Display12writeCommandEh>
    writeCommand(0x80 | 0); // Wybˇr kolumny
 8005fae:	2180      	movs	r1, #128	; 0x80
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f000 f85a 	bl	800606a <_ZN4tama16Nokia5510Display12writeCommandEh>
    writeCommand(0x40 | 0); // Wybˇr wiersza
 8005fb6:	2140      	movs	r1, #64	; 0x40
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f000 f856 	bl	800606a <_ZN4tama16Nokia5510Display12writeCommandEh>
}
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3710      	adds	r7, #16
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bdb0      	pop	{r4, r5, r7, pc}
 8005fc8:	0800de54 	.word	0x0800de54

08005fcc <_ZN4tama16Nokia5510Display11displayDataEv>:

void tama::Nokia5510Display::displayData()
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]

}
 8005fd4:	bf00      	nop
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <_ZN4tama16Nokia5510Display7setDataERNS_11DisplayDataE>:

void tama::Nokia5510Display::setData(DisplayData & pixels)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b084      	sub	sp, #16
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	6039      	str	r1, [r7, #0]


	for (unsigned i = 0; i <504; ++i)
 8005fea:	2300      	movs	r3, #0
 8005fec:	60fb      	str	r3, [r7, #12]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 8005ff4:	d20c      	bcs.n	8006010 <_ZN4tama16Nokia5510Display7setDataERNS_11DisplayDataE+0x30>
	{
		displayPixel(((uint8_t *)pixels.data)[i]);
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	4413      	add	r3, r2
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	4619      	mov	r1, r3
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 f808 	bl	8006018 <_ZN4tama16Nokia5510Display12displayPixelEh>
	for (unsigned i = 0; i <504; ++i)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	3301      	adds	r3, #1
 800600c:	60fb      	str	r3, [r7, #12]
 800600e:	e7ee      	b.n	8005fee <_ZN4tama16Nokia5510Display7setDataERNS_11DisplayDataE+0xe>
//
//    HAL_GPIO_WritePin(cfg.dc_port, cfg.dc_pin, GPIO_PIN_SET);
//    HAL_GPIO_WritePin(cfg.ce_port, cfg.ce_pin, GPIO_PIN_RESET);
//    HAL_SPI_Transmit(cfg.spi, ((uint8_t *)pixels.data + 252), 252, 100);
//    HAL_GPIO_WritePin(cfg.ce_port, cfg.ce_pin, GPIO_PIN_SET);
}
 8006010:	bf00      	nop
 8006012:	3710      	adds	r7, #16
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}

08006018 <_ZN4tama16Nokia5510Display12displayPixelEh>:


void tama::Nokia5510Display::displayPixel(uint8_t pixelData)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b082      	sub	sp, #8
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	460b      	mov	r3, r1
 8006022:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(cfg.dc_port, cfg.dc_pin, GPIO_PIN_SET);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6998      	ldr	r0, [r3, #24]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800602c:	2201      	movs	r2, #1
 800602e:	4619      	mov	r1, r3
 8006030:	f001 f8c4 	bl	80071bc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(cfg.ce_port, cfg.ce_pin, GPIO_PIN_RESET);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6a18      	ldr	r0, [r3, #32]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	8b9b      	ldrh	r3, [r3, #28]
 800603c:	2200      	movs	r2, #0
 800603e:	4619      	mov	r1, r3
 8006040:	f001 f8bc 	bl	80071bc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(cfg.spi, &pixelData, 1, 100);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6858      	ldr	r0, [r3, #4]
 8006048:	1cf9      	adds	r1, r7, #3
 800604a:	2364      	movs	r3, #100	; 0x64
 800604c:	2201      	movs	r2, #1
 800604e:	f004 f997 	bl	800a380 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(cfg.ce_port, cfg.ce_pin, GPIO_PIN_SET);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6a18      	ldr	r0, [r3, #32]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	8b9b      	ldrh	r3, [r3, #28]
 800605a:	2201      	movs	r2, #1
 800605c:	4619      	mov	r1, r3
 800605e:	f001 f8ad 	bl	80071bc <HAL_GPIO_WritePin>
}
 8006062:	bf00      	nop
 8006064:	3708      	adds	r7, #8
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}

0800606a <_ZN4tama16Nokia5510Display12writeCommandEh>:

void tama::Nokia5510Display::writeCommand(uint8_t cmd)
{
 800606a:	b580      	push	{r7, lr}
 800606c:	b082      	sub	sp, #8
 800606e:	af00      	add	r7, sp, #0
 8006070:	6078      	str	r0, [r7, #4]
 8006072:	460b      	mov	r3, r1
 8006074:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(cfg.dc_port, cfg.dc_pin, GPIO_PIN_RESET);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6998      	ldr	r0, [r3, #24]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800607e:	2200      	movs	r2, #0
 8006080:	4619      	mov	r1, r3
 8006082:	f001 f89b 	bl	80071bc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(cfg.ce_port, cfg.ce_pin, GPIO_PIN_RESET);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6a18      	ldr	r0, [r3, #32]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	8b9b      	ldrh	r3, [r3, #28]
 800608e:	2200      	movs	r2, #0
 8006090:	4619      	mov	r1, r3
 8006092:	f001 f893 	bl	80071bc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(cfg.spi, &cmd, 1, 100);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6858      	ldr	r0, [r3, #4]
 800609a:	1cf9      	adds	r1, r7, #3
 800609c:	2364      	movs	r3, #100	; 0x64
 800609e:	2201      	movs	r2, #1
 80060a0:	f004 f96e 	bl	800a380 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(cfg.ce_port, cfg.ce_pin, GPIO_PIN_SET);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6a18      	ldr	r0, [r3, #32]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	8b9b      	ldrh	r3, [r3, #28]
 80060ac:	2201      	movs	r2, #1
 80060ae:	4619      	mov	r1, r3
 80060b0:	f001 f884 	bl	80071bc <HAL_GPIO_WritePin>
}
 80060b4:	bf00      	nop
 80060b6:	3708      	adds	r7, #8
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}

080060bc <_ZN4tama27Nokia5110DisplayDataManager25getActiveSceneDisplayDataESt10shared_ptrINS_7TextureEE>:
//

#include "Nokia5110DisplayDataManager.h"

tama::DisplayData tama::Nokia5110DisplayDataManager::getActiveSceneDisplayData(std::shared_ptr<Texture> texture)
{
 80060bc:	b590      	push	{r4, r7, lr}
 80060be:	b08b      	sub	sp, #44	; 0x2c
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	60f8      	str	r0, [r7, #12]
 80060c4:	60b9      	str	r1, [r7, #8]
 80060c6:	607a      	str	r2, [r7, #4]
    uint8_t * data = new uint8_t[dataSize];
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	4618      	mov	r0, r3
 80060ce:	f007 fc8a 	bl	800d9e6 <_Znaj>
 80060d2:	4603      	mov	r3, r0
 80060d4:	61fb      	str	r3, [r7, #28]
    for (unsigned i = 0; i < texture->height; ++i)
 80060d6:	2300      	movs	r3, #0
 80060d8:	627b      	str	r3, [r7, #36]	; 0x24
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f7fb f801 	bl	80010e2 <_ZNKSt19__shared_ptr_accessIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80060e0:	4603      	mov	r3, r0
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060e6:	429a      	cmp	r2, r3
 80060e8:	bf34      	ite	cc
 80060ea:	2301      	movcc	r3, #1
 80060ec:	2300      	movcs	r3, #0
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d03f      	beq.n	8006174 <_ZN4tama27Nokia5110DisplayDataManager25getActiveSceneDisplayDataESt10shared_ptrINS_7TextureEE+0xb8>
    {
        for (unsigned j = 0; j < texture->width; ++j) //i = 32, j = 60
 80060f4:	2300      	movs	r3, #0
 80060f6:	623b      	str	r3, [r7, #32]
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f7fa fff2 	bl	80010e2 <_ZNKSt19__shared_ptr_accessIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80060fe:	4603      	mov	r3, r0
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	6a3a      	ldr	r2, [r7, #32]
 8006104:	429a      	cmp	r2, r3
 8006106:	bf34      	ite	cc
 8006108:	2301      	movcc	r3, #1
 800610a:	2300      	movcs	r3, #0
 800610c:	b2db      	uxtb	r3, r3
 800610e:	2b00      	cmp	r3, #0
 8006110:	d02c      	beq.n	800616c <_ZN4tama27Nokia5110DisplayDataManager25getActiveSceneDisplayDataESt10shared_ptrINS_7TextureEE+0xb0>
        {
            unsigned segmentHeightNumber = i / segmentSize; // 0, 1, .., 6 -> 4
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006118:	fbb2 f3f3 	udiv	r3, r2, r3
 800611c:	61bb      	str	r3, [r7, #24]
            unsigned bitInSegment = i % segmentSize; // 0 ... 7 -> 0
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	685a      	ldr	r2, [r3, #4]
 8006122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006124:	fbb3 f1f2 	udiv	r1, r3, r2
 8006128:	fb02 f201 	mul.w	r2, r2, r1
 800612c:	1a9b      	subs	r3, r3, r2
 800612e:	617b      	str	r3, [r7, #20]
            setPixel(data[segmentHeightNumber * segmentsInWidth + j], bitInSegment, texture->data[i][j]);
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	68db      	ldr	r3, [r3, #12]
 8006134:	69ba      	ldr	r2, [r7, #24]
 8006136:	fb02 f203 	mul.w	r2, r2, r3
 800613a:	6a3b      	ldr	r3, [r7, #32]
 800613c:	4413      	add	r3, r2
 800613e:	69fa      	ldr	r2, [r7, #28]
 8006140:	18d4      	adds	r4, r2, r3
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f7fa ffcd 	bl	80010e2 <_ZNKSt19__shared_ptr_accessIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8006148:	4603      	mov	r3, r0
 800614a:	68da      	ldr	r2, [r3, #12]
 800614c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	4413      	add	r3, r2
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	6a3b      	ldr	r3, [r7, #32]
 8006156:	4413      	add	r3, r2
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	697a      	ldr	r2, [r7, #20]
 800615c:	4621      	mov	r1, r4
 800615e:	68b8      	ldr	r0, [r7, #8]
 8006160:	f000 f817 	bl	8006192 <_ZN4tama27Nokia5110DisplayDataManager8setPixelERhjNS_10PixelColorE>
        for (unsigned j = 0; j < texture->width; ++j) //i = 32, j = 60
 8006164:	6a3b      	ldr	r3, [r7, #32]
 8006166:	3301      	adds	r3, #1
 8006168:	623b      	str	r3, [r7, #32]
 800616a:	e7c5      	b.n	80060f8 <_ZN4tama27Nokia5110DisplayDataManager25getActiveSceneDisplayDataESt10shared_ptrINS_7TextureEE+0x3c>
    for (unsigned i = 0; i < texture->height; ++i)
 800616c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616e:	3301      	adds	r3, #1
 8006170:	627b      	str	r3, [r7, #36]	; 0x24
 8006172:	e7b2      	b.n	80060da <_ZN4tama27Nokia5110DisplayDataManager25getActiveSceneDisplayDataESt10shared_ptrINS_7TextureEE+0x1e>
        }
    }
    return DisplayData{data, dataSize, dataFragmentSize};
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	69fa      	ldr	r2, [r7, #28]
 8006178:	601a      	str	r2, [r3, #0]
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	691a      	ldr	r2, [r3, #16]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	605a      	str	r2, [r3, #4]
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	695a      	ldr	r2, [r3, #20]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	609a      	str	r2, [r3, #8]
}
 800618a:	68f8      	ldr	r0, [r7, #12]
 800618c:	372c      	adds	r7, #44	; 0x2c
 800618e:	46bd      	mov	sp, r7
 8006190:	bd90      	pop	{r4, r7, pc}

08006192 <_ZN4tama27Nokia5110DisplayDataManager8setPixelERhjNS_10PixelColorE>:

void tama::Nokia5110DisplayDataManager::setPixel(uint8_t & pixelSegment, unsigned position, tama::PixelColor color)
{
 8006192:	b480      	push	{r7}
 8006194:	b085      	sub	sp, #20
 8006196:	af00      	add	r7, sp, #0
 8006198:	60f8      	str	r0, [r7, #12]
 800619a:	60b9      	str	r1, [r7, #8]
 800619c:	607a      	str	r2, [r7, #4]
 800619e:	70fb      	strb	r3, [r7, #3]
    if (color == PixelColor::WHITE)
 80061a0:	78fb      	ldrb	r3, [r7, #3]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d10d      	bne.n	80061c2 <_ZN4tama27Nokia5110DisplayDataManager8setPixelERhjNS_10PixelColorE+0x30>
    {
       pixelSegment |= 1 << position;
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	781b      	ldrb	r3, [r3, #0]
 80061aa:	b25a      	sxtb	r2, r3
 80061ac:	2101      	movs	r1, #1
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	fa01 f303 	lsl.w	r3, r1, r3
 80061b4:	b25b      	sxtb	r3, r3
 80061b6:	4313      	orrs	r3, r2
 80061b8:	b25b      	sxtb	r3, r3
 80061ba:	b2da      	uxtb	r2, r3
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	701a      	strb	r2, [r3, #0]
    } else {
        pixelSegment&= ~(1 << position);
    }
}
 80061c0:	e00e      	b.n	80061e0 <_ZN4tama27Nokia5110DisplayDataManager8setPixelERhjNS_10PixelColorE+0x4e>
        pixelSegment&= ~(1 << position);
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	781b      	ldrb	r3, [r3, #0]
 80061c6:	b25a      	sxtb	r2, r3
 80061c8:	2101      	movs	r1, #1
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	fa01 f303 	lsl.w	r3, r1, r3
 80061d0:	b25b      	sxtb	r3, r3
 80061d2:	43db      	mvns	r3, r3
 80061d4:	b25b      	sxtb	r3, r3
 80061d6:	4013      	ands	r3, r2
 80061d8:	b25b      	sxtb	r3, r3
 80061da:	b2da      	uxtb	r2, r3
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	701a      	strb	r2, [r3, #0]
}
 80061e0:	bf00      	nop
 80061e2:	3714      	adds	r7, #20
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr

080061ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b08c      	sub	sp, #48	; 0x30
 80061f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061f2:	f107 031c 	add.w	r3, r7, #28
 80061f6:	2200      	movs	r2, #0
 80061f8:	601a      	str	r2, [r3, #0]
 80061fa:	605a      	str	r2, [r3, #4]
 80061fc:	609a      	str	r2, [r3, #8]
 80061fe:	60da      	str	r2, [r3, #12]
 8006200:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006202:	2300      	movs	r3, #0
 8006204:	61bb      	str	r3, [r7, #24]
 8006206:	4b6d      	ldr	r3, [pc, #436]	; (80063bc <MX_GPIO_Init+0x1d0>)
 8006208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800620a:	4a6c      	ldr	r2, [pc, #432]	; (80063bc <MX_GPIO_Init+0x1d0>)
 800620c:	f043 0310 	orr.w	r3, r3, #16
 8006210:	6313      	str	r3, [r2, #48]	; 0x30
 8006212:	4b6a      	ldr	r3, [pc, #424]	; (80063bc <MX_GPIO_Init+0x1d0>)
 8006214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006216:	f003 0310 	and.w	r3, r3, #16
 800621a:	61bb      	str	r3, [r7, #24]
 800621c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800621e:	2300      	movs	r3, #0
 8006220:	617b      	str	r3, [r7, #20]
 8006222:	4b66      	ldr	r3, [pc, #408]	; (80063bc <MX_GPIO_Init+0x1d0>)
 8006224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006226:	4a65      	ldr	r2, [pc, #404]	; (80063bc <MX_GPIO_Init+0x1d0>)
 8006228:	f043 0304 	orr.w	r3, r3, #4
 800622c:	6313      	str	r3, [r2, #48]	; 0x30
 800622e:	4b63      	ldr	r3, [pc, #396]	; (80063bc <MX_GPIO_Init+0x1d0>)
 8006230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006232:	f003 0304 	and.w	r3, r3, #4
 8006236:	617b      	str	r3, [r7, #20]
 8006238:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800623a:	2300      	movs	r3, #0
 800623c:	613b      	str	r3, [r7, #16]
 800623e:	4b5f      	ldr	r3, [pc, #380]	; (80063bc <MX_GPIO_Init+0x1d0>)
 8006240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006242:	4a5e      	ldr	r2, [pc, #376]	; (80063bc <MX_GPIO_Init+0x1d0>)
 8006244:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006248:	6313      	str	r3, [r2, #48]	; 0x30
 800624a:	4b5c      	ldr	r3, [pc, #368]	; (80063bc <MX_GPIO_Init+0x1d0>)
 800624c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800624e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006252:	613b      	str	r3, [r7, #16]
 8006254:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006256:	2300      	movs	r3, #0
 8006258:	60fb      	str	r3, [r7, #12]
 800625a:	4b58      	ldr	r3, [pc, #352]	; (80063bc <MX_GPIO_Init+0x1d0>)
 800625c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800625e:	4a57      	ldr	r2, [pc, #348]	; (80063bc <MX_GPIO_Init+0x1d0>)
 8006260:	f043 0301 	orr.w	r3, r3, #1
 8006264:	6313      	str	r3, [r2, #48]	; 0x30
 8006266:	4b55      	ldr	r3, [pc, #340]	; (80063bc <MX_GPIO_Init+0x1d0>)
 8006268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800626a:	f003 0301 	and.w	r3, r3, #1
 800626e:	60fb      	str	r3, [r7, #12]
 8006270:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006272:	2300      	movs	r3, #0
 8006274:	60bb      	str	r3, [r7, #8]
 8006276:	4b51      	ldr	r3, [pc, #324]	; (80063bc <MX_GPIO_Init+0x1d0>)
 8006278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800627a:	4a50      	ldr	r2, [pc, #320]	; (80063bc <MX_GPIO_Init+0x1d0>)
 800627c:	f043 0302 	orr.w	r3, r3, #2
 8006280:	6313      	str	r3, [r2, #48]	; 0x30
 8006282:	4b4e      	ldr	r3, [pc, #312]	; (80063bc <MX_GPIO_Init+0x1d0>)
 8006284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006286:	f003 0302 	and.w	r3, r3, #2
 800628a:	60bb      	str	r3, [r7, #8]
 800628c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800628e:	2300      	movs	r3, #0
 8006290:	607b      	str	r3, [r7, #4]
 8006292:	4b4a      	ldr	r3, [pc, #296]	; (80063bc <MX_GPIO_Init+0x1d0>)
 8006294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006296:	4a49      	ldr	r2, [pc, #292]	; (80063bc <MX_GPIO_Init+0x1d0>)
 8006298:	f043 0308 	orr.w	r3, r3, #8
 800629c:	6313      	str	r3, [r2, #48]	; 0x30
 800629e:	4b47      	ldr	r3, [pc, #284]	; (80063bc <MX_GPIO_Init+0x1d0>)
 80062a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a2:	f003 0308 	and.w	r3, r3, #8
 80062a6:	607b      	str	r3, [r7, #4]
 80062a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|RST_Pin|BL_Pin, GPIO_PIN_RESET);
 80062aa:	2200      	movs	r2, #0
 80062ac:	f44f 7122 	mov.w	r1, #648	; 0x288
 80062b0:	4843      	ldr	r0, [pc, #268]	; (80063c0 <MX_GPIO_Init+0x1d4>)
 80062b2:	f000 ff83 	bl	80071bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80062b6:	2201      	movs	r2, #1
 80062b8:	2101      	movs	r1, #1
 80062ba:	4842      	ldr	r0, [pc, #264]	; (80063c4 <MX_GPIO_Init+0x1d8>)
 80062bc:	f000 ff7e 	bl	80071bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 80062c0:	2200      	movs	r2, #0
 80062c2:	2120      	movs	r1, #32
 80062c4:	483f      	ldr	r0, [pc, #252]	; (80063c4 <MX_GPIO_Init+0x1d8>)
 80062c6:	f000 ff79 	bl	80071bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 80062ca:	2200      	movs	r2, #0
 80062cc:	2102      	movs	r1, #2
 80062ce:	483e      	ldr	r0, [pc, #248]	; (80063c8 <MX_GPIO_Init+0x1dc>)
 80062d0:	f000 ff74 	bl	80071bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80062d4:	2200      	movs	r2, #0
 80062d6:	f24f 0110 	movw	r1, #61456	; 0xf010
 80062da:	483c      	ldr	r0, [pc, #240]	; (80063cc <MX_GPIO_Init+0x1e0>)
 80062dc:	f000 ff6e 	bl	80071bc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 80062e0:	2304      	movs	r3, #4
 80062e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80062e4:	2300      	movs	r3, #0
 80062e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062e8:	2300      	movs	r3, #0
 80062ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 80062ec:	f107 031c 	add.w	r3, r7, #28
 80062f0:	4619      	mov	r1, r3
 80062f2:	4833      	ldr	r0, [pc, #204]	; (80063c0 <MX_GPIO_Init+0x1d4>)
 80062f4:	f000 fde0 	bl	8006eb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|RST_Pin|BL_Pin;
 80062f8:	f44f 7322 	mov.w	r3, #648	; 0x288
 80062fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80062fe:	2301      	movs	r3, #1
 8006300:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006302:	2300      	movs	r3, #0
 8006304:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006306:	2300      	movs	r3, #0
 8006308:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800630a:	f107 031c 	add.w	r3, r7, #28
 800630e:	4619      	mov	r1, r3
 8006310:	482b      	ldr	r0, [pc, #172]	; (80063c0 <MX_GPIO_Init+0x1d4>)
 8006312:	f000 fdd1 	bl	8006eb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8006316:	2332      	movs	r3, #50	; 0x32
 8006318:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800631a:	4b2d      	ldr	r3, [pc, #180]	; (80063d0 <MX_GPIO_Init+0x1e4>)
 800631c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800631e:	2300      	movs	r3, #0
 8006320:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006322:	f107 031c 	add.w	r3, r7, #28
 8006326:	4619      	mov	r1, r3
 8006328:	4825      	ldr	r0, [pc, #148]	; (80063c0 <MX_GPIO_Init+0x1d4>)
 800632a:	f000 fdc5 	bl	8006eb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|DC_Pin;
 800632e:	2321      	movs	r3, #33	; 0x21
 8006330:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006332:	2301      	movs	r3, #1
 8006334:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006336:	2300      	movs	r3, #0
 8006338:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800633a:	2300      	movs	r3, #0
 800633c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800633e:	f107 031c 	add.w	r3, r7, #28
 8006342:	4619      	mov	r1, r3
 8006344:	481f      	ldr	r0, [pc, #124]	; (80063c4 <MX_GPIO_Init+0x1d8>)
 8006346:	f000 fdb7 	bl	8006eb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800634a:	2301      	movs	r3, #1
 800634c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800634e:	4b20      	ldr	r3, [pc, #128]	; (80063d0 <MX_GPIO_Init+0x1e4>)
 8006350:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006352:	2300      	movs	r3, #0
 8006354:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006356:	f107 031c 	add.w	r3, r7, #28
 800635a:	4619      	mov	r1, r3
 800635c:	481d      	ldr	r0, [pc, #116]	; (80063d4 <MX_GPIO_Init+0x1e8>)
 800635e:	f000 fdab 	bl	8006eb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CE_Pin;
 8006362:	2302      	movs	r3, #2
 8006364:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006366:	2301      	movs	r3, #1
 8006368:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800636a:	2300      	movs	r3, #0
 800636c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800636e:	2300      	movs	r3, #0
 8006370:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CE_GPIO_Port, &GPIO_InitStruct);
 8006372:	f107 031c 	add.w	r3, r7, #28
 8006376:	4619      	mov	r1, r3
 8006378:	4813      	ldr	r0, [pc, #76]	; (80063c8 <MX_GPIO_Init+0x1dc>)
 800637a:	f000 fd9d 	bl	8006eb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800637e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8006382:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006384:	2301      	movs	r3, #1
 8006386:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006388:	2300      	movs	r3, #0
 800638a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800638c:	2300      	movs	r3, #0
 800638e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006390:	f107 031c 	add.w	r3, r7, #28
 8006394:	4619      	mov	r1, r3
 8006396:	480d      	ldr	r0, [pc, #52]	; (80063cc <MX_GPIO_Init+0x1e0>)
 8006398:	f000 fd8e 	bl	8006eb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800639c:	2320      	movs	r3, #32
 800639e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80063a0:	2300      	movs	r3, #0
 80063a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063a4:	2300      	movs	r3, #0
 80063a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80063a8:	f107 031c 	add.w	r3, r7, #28
 80063ac:	4619      	mov	r1, r3
 80063ae:	4807      	ldr	r0, [pc, #28]	; (80063cc <MX_GPIO_Init+0x1e0>)
 80063b0:	f000 fd82 	bl	8006eb8 <HAL_GPIO_Init>

}
 80063b4:	bf00      	nop
 80063b6:	3730      	adds	r7, #48	; 0x30
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}
 80063bc:	40023800 	.word	0x40023800
 80063c0:	40021000 	.word	0x40021000
 80063c4:	40020800 	.word	0x40020800
 80063c8:	40020400 	.word	0x40020400
 80063cc:	40020c00 	.word	0x40020c00
 80063d0:	10120000 	.word	0x10120000
 80063d4:	40020000 	.word	0x40020000

080063d8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80063dc:	4b12      	ldr	r3, [pc, #72]	; (8006428 <MX_I2C1_Init+0x50>)
 80063de:	4a13      	ldr	r2, [pc, #76]	; (800642c <MX_I2C1_Init+0x54>)
 80063e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80063e2:	4b11      	ldr	r3, [pc, #68]	; (8006428 <MX_I2C1_Init+0x50>)
 80063e4:	4a12      	ldr	r2, [pc, #72]	; (8006430 <MX_I2C1_Init+0x58>)
 80063e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80063e8:	4b0f      	ldr	r3, [pc, #60]	; (8006428 <MX_I2C1_Init+0x50>)
 80063ea:	2200      	movs	r2, #0
 80063ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80063ee:	4b0e      	ldr	r3, [pc, #56]	; (8006428 <MX_I2C1_Init+0x50>)
 80063f0:	2200      	movs	r2, #0
 80063f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80063f4:	4b0c      	ldr	r3, [pc, #48]	; (8006428 <MX_I2C1_Init+0x50>)
 80063f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80063fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80063fc:	4b0a      	ldr	r3, [pc, #40]	; (8006428 <MX_I2C1_Init+0x50>)
 80063fe:	2200      	movs	r2, #0
 8006400:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8006402:	4b09      	ldr	r3, [pc, #36]	; (8006428 <MX_I2C1_Init+0x50>)
 8006404:	2200      	movs	r2, #0
 8006406:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006408:	4b07      	ldr	r3, [pc, #28]	; (8006428 <MX_I2C1_Init+0x50>)
 800640a:	2200      	movs	r2, #0
 800640c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800640e:	4b06      	ldr	r3, [pc, #24]	; (8006428 <MX_I2C1_Init+0x50>)
 8006410:	2200      	movs	r2, #0
 8006412:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006414:	4804      	ldr	r0, [pc, #16]	; (8006428 <MX_I2C1_Init+0x50>)
 8006416:	f002 fbdb 	bl	8008bd0 <HAL_I2C_Init>
 800641a:	4603      	mov	r3, r0
 800641c:	2b00      	cmp	r3, #0
 800641e:	d001      	beq.n	8006424 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8006420:	f000 fa28 	bl	8006874 <Error_Handler>
  }

}
 8006424:	bf00      	nop
 8006426:	bd80      	pop	{r7, pc}
 8006428:	200000c8 	.word	0x200000c8
 800642c:	40005400 	.word	0x40005400
 8006430:	000186a0 	.word	0x000186a0

08006434 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b08a      	sub	sp, #40	; 0x28
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800643c:	f107 0314 	add.w	r3, r7, #20
 8006440:	2200      	movs	r2, #0
 8006442:	601a      	str	r2, [r3, #0]
 8006444:	605a      	str	r2, [r3, #4]
 8006446:	609a      	str	r2, [r3, #8]
 8006448:	60da      	str	r2, [r3, #12]
 800644a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a19      	ldr	r2, [pc, #100]	; (80064b8 <HAL_I2C_MspInit+0x84>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d12c      	bne.n	80064b0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006456:	2300      	movs	r3, #0
 8006458:	613b      	str	r3, [r7, #16]
 800645a:	4b18      	ldr	r3, [pc, #96]	; (80064bc <HAL_I2C_MspInit+0x88>)
 800645c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800645e:	4a17      	ldr	r2, [pc, #92]	; (80064bc <HAL_I2C_MspInit+0x88>)
 8006460:	f043 0302 	orr.w	r3, r3, #2
 8006464:	6313      	str	r3, [r2, #48]	; 0x30
 8006466:	4b15      	ldr	r3, [pc, #84]	; (80064bc <HAL_I2C_MspInit+0x88>)
 8006468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800646a:	f003 0302 	and.w	r3, r3, #2
 800646e:	613b      	str	r3, [r7, #16]
 8006470:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8006472:	f44f 7310 	mov.w	r3, #576	; 0x240
 8006476:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006478:	2312      	movs	r3, #18
 800647a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800647c:	2301      	movs	r3, #1
 800647e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006480:	2300      	movs	r3, #0
 8006482:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006484:	2304      	movs	r3, #4
 8006486:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006488:	f107 0314 	add.w	r3, r7, #20
 800648c:	4619      	mov	r1, r3
 800648e:	480c      	ldr	r0, [pc, #48]	; (80064c0 <HAL_I2C_MspInit+0x8c>)
 8006490:	f000 fd12 	bl	8006eb8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006494:	2300      	movs	r3, #0
 8006496:	60fb      	str	r3, [r7, #12]
 8006498:	4b08      	ldr	r3, [pc, #32]	; (80064bc <HAL_I2C_MspInit+0x88>)
 800649a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800649c:	4a07      	ldr	r2, [pc, #28]	; (80064bc <HAL_I2C_MspInit+0x88>)
 800649e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80064a2:	6413      	str	r3, [r2, #64]	; 0x40
 80064a4:	4b05      	ldr	r3, [pc, #20]	; (80064bc <HAL_I2C_MspInit+0x88>)
 80064a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80064ac:	60fb      	str	r3, [r7, #12]
 80064ae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80064b0:	bf00      	nop
 80064b2:	3728      	adds	r7, #40	; 0x28
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}
 80064b8:	40005400 	.word	0x40005400
 80064bc:	40023800 	.word	0x40023800
 80064c0:	40020400 	.word	0x40020400

080064c4 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
I2S_HandleTypeDef hi2s3;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	af00      	add	r7, sp, #0

  hi2s2.Instance = SPI2;
 80064c8:	4b12      	ldr	r3, [pc, #72]	; (8006514 <MX_I2S2_Init+0x50>)
 80064ca:	4a13      	ldr	r2, [pc, #76]	; (8006518 <MX_I2S2_Init+0x54>)
 80064cc:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80064ce:	4b11      	ldr	r3, [pc, #68]	; (8006514 <MX_I2S2_Init+0x50>)
 80064d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064d4:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80064d6:	4b0f      	ldr	r3, [pc, #60]	; (8006514 <MX_I2S2_Init+0x50>)
 80064d8:	2200      	movs	r2, #0
 80064da:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80064dc:	4b0d      	ldr	r3, [pc, #52]	; (8006514 <MX_I2S2_Init+0x50>)
 80064de:	2200      	movs	r2, #0
 80064e0:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80064e2:	4b0c      	ldr	r3, [pc, #48]	; (8006514 <MX_I2S2_Init+0x50>)
 80064e4:	2200      	movs	r2, #0
 80064e6:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80064e8:	4b0a      	ldr	r3, [pc, #40]	; (8006514 <MX_I2S2_Init+0x50>)
 80064ea:	4a0c      	ldr	r2, [pc, #48]	; (800651c <MX_I2S2_Init+0x58>)
 80064ec:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80064ee:	4b09      	ldr	r3, [pc, #36]	; (8006514 <MX_I2S2_Init+0x50>)
 80064f0:	2200      	movs	r2, #0
 80064f2:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80064f4:	4b07      	ldr	r3, [pc, #28]	; (8006514 <MX_I2S2_Init+0x50>)
 80064f6:	2200      	movs	r2, #0
 80064f8:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80064fa:	4b06      	ldr	r3, [pc, #24]	; (8006514 <MX_I2S2_Init+0x50>)
 80064fc:	2201      	movs	r2, #1
 80064fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8006500:	4804      	ldr	r0, [pc, #16]	; (8006514 <MX_I2S2_Init+0x50>)
 8006502:	f002 fc9d 	bl	8008e40 <HAL_I2S_Init>
 8006506:	4603      	mov	r3, r0
 8006508:	2b00      	cmp	r3, #0
 800650a:	d001      	beq.n	8006510 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 800650c:	f000 f9b2 	bl	8006874 <Error_Handler>
  }

}
 8006510:	bf00      	nop
 8006512:	bd80      	pop	{r7, pc}
 8006514:	2000011c 	.word	0x2000011c
 8006518:	40003800 	.word	0x40003800
 800651c:	00017700 	.word	0x00017700

08006520 <MX_I2S3_Init>:
/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	af00      	add	r7, sp, #0

  hi2s3.Instance = SPI3;
 8006524:	4b13      	ldr	r3, [pc, #76]	; (8006574 <MX_I2S3_Init+0x54>)
 8006526:	4a14      	ldr	r2, [pc, #80]	; (8006578 <MX_I2S3_Init+0x58>)
 8006528:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800652a:	4b12      	ldr	r3, [pc, #72]	; (8006574 <MX_I2S3_Init+0x54>)
 800652c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006530:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8006532:	4b10      	ldr	r3, [pc, #64]	; (8006574 <MX_I2S3_Init+0x54>)
 8006534:	2200      	movs	r2, #0
 8006536:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8006538:	4b0e      	ldr	r3, [pc, #56]	; (8006574 <MX_I2S3_Init+0x54>)
 800653a:	2200      	movs	r2, #0
 800653c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800653e:	4b0d      	ldr	r3, [pc, #52]	; (8006574 <MX_I2S3_Init+0x54>)
 8006540:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006544:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8006546:	4b0b      	ldr	r3, [pc, #44]	; (8006574 <MX_I2S3_Init+0x54>)
 8006548:	4a0c      	ldr	r2, [pc, #48]	; (800657c <MX_I2S3_Init+0x5c>)
 800654a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800654c:	4b09      	ldr	r3, [pc, #36]	; (8006574 <MX_I2S3_Init+0x54>)
 800654e:	2200      	movs	r2, #0
 8006550:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8006552:	4b08      	ldr	r3, [pc, #32]	; (8006574 <MX_I2S3_Init+0x54>)
 8006554:	2200      	movs	r2, #0
 8006556:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8006558:	4b06      	ldr	r3, [pc, #24]	; (8006574 <MX_I2S3_Init+0x54>)
 800655a:	2200      	movs	r2, #0
 800655c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800655e:	4805      	ldr	r0, [pc, #20]	; (8006574 <MX_I2S3_Init+0x54>)
 8006560:	f002 fc6e 	bl	8008e40 <HAL_I2S_Init>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d001      	beq.n	800656e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800656a:	f000 f983 	bl	8006874 <Error_Handler>
  }

}
 800656e:	bf00      	nop
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	20000164 	.word	0x20000164
 8006578:	40003c00 	.word	0x40003c00
 800657c:	00017700 	.word	0x00017700

08006580 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b08e      	sub	sp, #56	; 0x38
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006588:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800658c:	2200      	movs	r2, #0
 800658e:	601a      	str	r2, [r3, #0]
 8006590:	605a      	str	r2, [r3, #4]
 8006592:	609a      	str	r2, [r3, #8]
 8006594:	60da      	str	r2, [r3, #12]
 8006596:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI2)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a59      	ldr	r2, [pc, #356]	; (8006704 <HAL_I2S_MspInit+0x184>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d15b      	bne.n	800665a <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80065a2:	2300      	movs	r3, #0
 80065a4:	623b      	str	r3, [r7, #32]
 80065a6:	4b58      	ldr	r3, [pc, #352]	; (8006708 <HAL_I2S_MspInit+0x188>)
 80065a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065aa:	4a57      	ldr	r2, [pc, #348]	; (8006708 <HAL_I2S_MspInit+0x188>)
 80065ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80065b0:	6413      	str	r3, [r2, #64]	; 0x40
 80065b2:	4b55      	ldr	r3, [pc, #340]	; (8006708 <HAL_I2S_MspInit+0x188>)
 80065b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065ba:	623b      	str	r3, [r7, #32]
 80065bc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80065be:	2300      	movs	r3, #0
 80065c0:	61fb      	str	r3, [r7, #28]
 80065c2:	4b51      	ldr	r3, [pc, #324]	; (8006708 <HAL_I2S_MspInit+0x188>)
 80065c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c6:	4a50      	ldr	r2, [pc, #320]	; (8006708 <HAL_I2S_MspInit+0x188>)
 80065c8:	f043 0304 	orr.w	r3, r3, #4
 80065cc:	6313      	str	r3, [r2, #48]	; 0x30
 80065ce:	4b4e      	ldr	r3, [pc, #312]	; (8006708 <HAL_I2S_MspInit+0x188>)
 80065d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d2:	f003 0304 	and.w	r3, r3, #4
 80065d6:	61fb      	str	r3, [r7, #28]
 80065d8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80065da:	2300      	movs	r3, #0
 80065dc:	61bb      	str	r3, [r7, #24]
 80065de:	4b4a      	ldr	r3, [pc, #296]	; (8006708 <HAL_I2S_MspInit+0x188>)
 80065e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065e2:	4a49      	ldr	r2, [pc, #292]	; (8006708 <HAL_I2S_MspInit+0x188>)
 80065e4:	f043 0302 	orr.w	r3, r3, #2
 80065e8:	6313      	str	r3, [r2, #48]	; 0x30
 80065ea:	4b47      	ldr	r3, [pc, #284]	; (8006708 <HAL_I2S_MspInit+0x188>)
 80065ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ee:	f003 0302 	and.w	r3, r3, #2
 80065f2:	61bb      	str	r3, [r7, #24]
 80065f4:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80065f6:	2304      	movs	r3, #4
 80065f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065fa:	2302      	movs	r3, #2
 80065fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065fe:	2300      	movs	r3, #0
 8006600:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006602:	2300      	movs	r3, #0
 8006604:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8006606:	2306      	movs	r3, #6
 8006608:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800660a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800660e:	4619      	mov	r1, r3
 8006610:	483e      	ldr	r0, [pc, #248]	; (800670c <HAL_I2S_MspInit+0x18c>)
 8006612:	f000 fc51 	bl	8006eb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8006616:	2308      	movs	r3, #8
 8006618:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800661a:	2302      	movs	r3, #2
 800661c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800661e:	2300      	movs	r3, #0
 8006620:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006622:	2300      	movs	r3, #0
 8006624:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006626:	2305      	movs	r3, #5
 8006628:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800662a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800662e:	4619      	mov	r1, r3
 8006630:	4836      	ldr	r0, [pc, #216]	; (800670c <HAL_I2S_MspInit+0x18c>)
 8006632:	f000 fc41 	bl	8006eb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8006636:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800663a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800663c:	2302      	movs	r3, #2
 800663e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006640:	2300      	movs	r3, #0
 8006642:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006644:	2300      	movs	r3, #0
 8006646:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006648:	2305      	movs	r3, #5
 800664a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800664c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006650:	4619      	mov	r1, r3
 8006652:	482f      	ldr	r0, [pc, #188]	; (8006710 <HAL_I2S_MspInit+0x190>)
 8006654:	f000 fc30 	bl	8006eb8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8006658:	e04f      	b.n	80066fa <HAL_I2S_MspInit+0x17a>
  else if(i2sHandle->Instance==SPI3)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a2d      	ldr	r2, [pc, #180]	; (8006714 <HAL_I2S_MspInit+0x194>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d14a      	bne.n	80066fa <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8006664:	2300      	movs	r3, #0
 8006666:	617b      	str	r3, [r7, #20]
 8006668:	4b27      	ldr	r3, [pc, #156]	; (8006708 <HAL_I2S_MspInit+0x188>)
 800666a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800666c:	4a26      	ldr	r2, [pc, #152]	; (8006708 <HAL_I2S_MspInit+0x188>)
 800666e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006672:	6413      	str	r3, [r2, #64]	; 0x40
 8006674:	4b24      	ldr	r3, [pc, #144]	; (8006708 <HAL_I2S_MspInit+0x188>)
 8006676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006678:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800667c:	617b      	str	r3, [r7, #20]
 800667e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006680:	2300      	movs	r3, #0
 8006682:	613b      	str	r3, [r7, #16]
 8006684:	4b20      	ldr	r3, [pc, #128]	; (8006708 <HAL_I2S_MspInit+0x188>)
 8006686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006688:	4a1f      	ldr	r2, [pc, #124]	; (8006708 <HAL_I2S_MspInit+0x188>)
 800668a:	f043 0301 	orr.w	r3, r3, #1
 800668e:	6313      	str	r3, [r2, #48]	; 0x30
 8006690:	4b1d      	ldr	r3, [pc, #116]	; (8006708 <HAL_I2S_MspInit+0x188>)
 8006692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006694:	f003 0301 	and.w	r3, r3, #1
 8006698:	613b      	str	r3, [r7, #16]
 800669a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800669c:	2300      	movs	r3, #0
 800669e:	60fb      	str	r3, [r7, #12]
 80066a0:	4b19      	ldr	r3, [pc, #100]	; (8006708 <HAL_I2S_MspInit+0x188>)
 80066a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066a4:	4a18      	ldr	r2, [pc, #96]	; (8006708 <HAL_I2S_MspInit+0x188>)
 80066a6:	f043 0304 	orr.w	r3, r3, #4
 80066aa:	6313      	str	r3, [r2, #48]	; 0x30
 80066ac:	4b16      	ldr	r3, [pc, #88]	; (8006708 <HAL_I2S_MspInit+0x188>)
 80066ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066b0:	f003 0304 	and.w	r3, r3, #4
 80066b4:	60fb      	str	r3, [r7, #12]
 80066b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80066b8:	2310      	movs	r3, #16
 80066ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066bc:	2302      	movs	r3, #2
 80066be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066c0:	2300      	movs	r3, #0
 80066c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066c4:	2300      	movs	r3, #0
 80066c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80066c8:	2306      	movs	r3, #6
 80066ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80066cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066d0:	4619      	mov	r1, r3
 80066d2:	4811      	ldr	r0, [pc, #68]	; (8006718 <HAL_I2S_MspInit+0x198>)
 80066d4:	f000 fbf0 	bl	8006eb8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80066d8:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80066dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066de:	2302      	movs	r3, #2
 80066e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066e2:	2300      	movs	r3, #0
 80066e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066e6:	2300      	movs	r3, #0
 80066e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80066ea:	2306      	movs	r3, #6
 80066ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80066ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066f2:	4619      	mov	r1, r3
 80066f4:	4805      	ldr	r0, [pc, #20]	; (800670c <HAL_I2S_MspInit+0x18c>)
 80066f6:	f000 fbdf 	bl	8006eb8 <HAL_GPIO_Init>
}
 80066fa:	bf00      	nop
 80066fc:	3738      	adds	r7, #56	; 0x38
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
 8006702:	bf00      	nop
 8006704:	40003800 	.word	0x40003800
 8006708:	40023800 	.word	0x40023800
 800670c:	40020800 	.word	0x40020800
 8006710:	40020400 	.word	0x40020400
 8006714:	40003c00 	.word	0x40003c00
 8006718:	40020000 	.word	0x40020000

0800671c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b082      	sub	sp, #8
 8006720:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006722:	f000 fa23 	bl	8006b6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006726:	f000 f813 	bl	8006750 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800672a:	f7ff fd5f 	bl	80061ec <MX_GPIO_Init>
  MX_I2C1_Init();
 800672e:	f7ff fe53 	bl	80063d8 <MX_I2C1_Init>
  MX_I2S2_Init();
 8006732:	f7ff fec7 	bl	80064c4 <MX_I2S2_Init>
  MX_I2S3_Init();
 8006736:	f7ff fef3 	bl	8006520 <MX_I2S3_Init>
  MX_SPI1_Init();
 800673a:	f000 f8a3 	bl	8006884 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 800673e:	f006 fe45 	bl	800d3cc <MX_USB_HOST_Init>
//

//  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);

    tama::Main tamaMain;
  	tamaMain.run();
 8006742:	1d3b      	adds	r3, r7, #4
 8006744:	4618      	mov	r0, r3
 8006746:	f7fc fef1 	bl	800352c <_ZN4tama4Main3runEv>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800674a:	f006 fe65 	bl	800d418 <MX_USB_HOST_Process>
 800674e:	e7fc      	b.n	800674a <main+0x2e>

08006750 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b09a      	sub	sp, #104	; 0x68
 8006754:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006756:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800675a:	2230      	movs	r2, #48	; 0x30
 800675c:	2100      	movs	r1, #0
 800675e:	4618      	mov	r0, r3
 8006760:	f007 f9b8 	bl	800dad4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006764:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006768:	2200      	movs	r2, #0
 800676a:	601a      	str	r2, [r3, #0]
 800676c:	605a      	str	r2, [r3, #4]
 800676e:	609a      	str	r2, [r3, #8]
 8006770:	60da      	str	r2, [r3, #12]
 8006772:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006774:	f107 030c 	add.w	r3, r7, #12
 8006778:	2200      	movs	r2, #0
 800677a:	601a      	str	r2, [r3, #0]
 800677c:	605a      	str	r2, [r3, #4]
 800677e:	609a      	str	r2, [r3, #8]
 8006780:	60da      	str	r2, [r3, #12]
 8006782:	611a      	str	r2, [r3, #16]
 8006784:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006786:	2300      	movs	r3, #0
 8006788:	60bb      	str	r3, [r7, #8]
 800678a:	4b38      	ldr	r3, [pc, #224]	; (800686c <_Z18SystemClock_Configv+0x11c>)
 800678c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800678e:	4a37      	ldr	r2, [pc, #220]	; (800686c <_Z18SystemClock_Configv+0x11c>)
 8006790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006794:	6413      	str	r3, [r2, #64]	; 0x40
 8006796:	4b35      	ldr	r3, [pc, #212]	; (800686c <_Z18SystemClock_Configv+0x11c>)
 8006798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800679a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800679e:	60bb      	str	r3, [r7, #8]
 80067a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80067a2:	2300      	movs	r3, #0
 80067a4:	607b      	str	r3, [r7, #4]
 80067a6:	4b32      	ldr	r3, [pc, #200]	; (8006870 <_Z18SystemClock_Configv+0x120>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a31      	ldr	r2, [pc, #196]	; (8006870 <_Z18SystemClock_Configv+0x120>)
 80067ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80067b0:	6013      	str	r3, [r2, #0]
 80067b2:	4b2f      	ldr	r3, [pc, #188]	; (8006870 <_Z18SystemClock_Configv+0x120>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80067ba:	607b      	str	r3, [r7, #4]
 80067bc:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80067be:	2301      	movs	r3, #1
 80067c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80067c2:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80067c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80067c8:	2302      	movs	r3, #2
 80067ca:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80067cc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80067d0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 80067d2:	2304      	movs	r3, #4
 80067d4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 80067d6:	23c0      	movs	r3, #192	; 0xc0
 80067d8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80067da:	2304      	movs	r3, #4
 80067dc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80067de:	2308      	movs	r3, #8
 80067e0:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80067e2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80067e6:	4618      	mov	r0, r3
 80067e8:	f002 ffca 	bl	8009780 <HAL_RCC_OscConfig>
 80067ec:	4603      	mov	r3, r0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	bf14      	ite	ne
 80067f2:	2301      	movne	r3, #1
 80067f4:	2300      	moveq	r3, #0
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d001      	beq.n	8006800 <_Z18SystemClock_Configv+0xb0>
  {
    Error_Handler();
 80067fc:	f000 f83a 	bl	8006874 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006800:	230f      	movs	r3, #15
 8006802:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006804:	2302      	movs	r3, #2
 8006806:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006808:	2300      	movs	r3, #0
 800680a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800680c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006810:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006812:	2300      	movs	r3, #0
 8006814:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8006816:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800681a:	2103      	movs	r1, #3
 800681c:	4618      	mov	r0, r3
 800681e:	f003 fa1f 	bl	8009c60 <HAL_RCC_ClockConfig>
 8006822:	4603      	mov	r3, r0
 8006824:	2b00      	cmp	r3, #0
 8006826:	bf14      	ite	ne
 8006828:	2301      	movne	r3, #1
 800682a:	2300      	moveq	r3, #0
 800682c:	b2db      	uxtb	r3, r3
 800682e:	2b00      	cmp	r3, #0
 8006830:	d001      	beq.n	8006836 <_Z18SystemClock_Configv+0xe6>
  {
    Error_Handler();
 8006832:	f000 f81f 	bl	8006874 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8006836:	2301      	movs	r3, #1
 8006838:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 800683a:	23c8      	movs	r3, #200	; 0xc8
 800683c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 800683e:	2305      	movs	r3, #5
 8006840:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8006842:	2302      	movs	r3, #2
 8006844:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006846:	f107 030c 	add.w	r3, r7, #12
 800684a:	4618      	mov	r0, r3
 800684c:	f003 fbe6 	bl	800a01c <HAL_RCCEx_PeriphCLKConfig>
 8006850:	4603      	mov	r3, r0
 8006852:	2b00      	cmp	r3, #0
 8006854:	bf14      	ite	ne
 8006856:	2301      	movne	r3, #1
 8006858:	2300      	moveq	r3, #0
 800685a:	b2db      	uxtb	r3, r3
 800685c:	2b00      	cmp	r3, #0
 800685e:	d001      	beq.n	8006864 <_Z18SystemClock_Configv+0x114>
  {
    Error_Handler();
 8006860:	f000 f808 	bl	8006874 <Error_Handler>
  }
}
 8006864:	bf00      	nop
 8006866:	3768      	adds	r7, #104	; 0x68
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}
 800686c:	40023800 	.word	0x40023800
 8006870:	40007000 	.word	0x40007000

08006874 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006874:	b480      	push	{r7}
 8006876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006878:	bf00      	nop
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr
	...

08006884 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8006888:	4b17      	ldr	r3, [pc, #92]	; (80068e8 <MX_SPI1_Init+0x64>)
 800688a:	4a18      	ldr	r2, [pc, #96]	; (80068ec <MX_SPI1_Init+0x68>)
 800688c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800688e:	4b16      	ldr	r3, [pc, #88]	; (80068e8 <MX_SPI1_Init+0x64>)
 8006890:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006894:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8006896:	4b14      	ldr	r3, [pc, #80]	; (80068e8 <MX_SPI1_Init+0x64>)
 8006898:	2200      	movs	r2, #0
 800689a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800689c:	4b12      	ldr	r3, [pc, #72]	; (80068e8 <MX_SPI1_Init+0x64>)
 800689e:	2200      	movs	r2, #0
 80068a0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80068a2:	4b11      	ldr	r3, [pc, #68]	; (80068e8 <MX_SPI1_Init+0x64>)
 80068a4:	2200      	movs	r2, #0
 80068a6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80068a8:	4b0f      	ldr	r3, [pc, #60]	; (80068e8 <MX_SPI1_Init+0x64>)
 80068aa:	2200      	movs	r2, #0
 80068ac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80068ae:	4b0e      	ldr	r3, [pc, #56]	; (80068e8 <MX_SPI1_Init+0x64>)
 80068b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068b4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80068b6:	4b0c      	ldr	r3, [pc, #48]	; (80068e8 <MX_SPI1_Init+0x64>)
 80068b8:	2220      	movs	r2, #32
 80068ba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80068bc:	4b0a      	ldr	r3, [pc, #40]	; (80068e8 <MX_SPI1_Init+0x64>)
 80068be:	2200      	movs	r2, #0
 80068c0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80068c2:	4b09      	ldr	r3, [pc, #36]	; (80068e8 <MX_SPI1_Init+0x64>)
 80068c4:	2200      	movs	r2, #0
 80068c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80068c8:	4b07      	ldr	r3, [pc, #28]	; (80068e8 <MX_SPI1_Init+0x64>)
 80068ca:	2200      	movs	r2, #0
 80068cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80068ce:	4b06      	ldr	r3, [pc, #24]	; (80068e8 <MX_SPI1_Init+0x64>)
 80068d0:	220a      	movs	r2, #10
 80068d2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80068d4:	4804      	ldr	r0, [pc, #16]	; (80068e8 <MX_SPI1_Init+0x64>)
 80068d6:	f003 fcef 	bl	800a2b8 <HAL_SPI_Init>
 80068da:	4603      	mov	r3, r0
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d001      	beq.n	80068e4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80068e0:	f7ff ffc8 	bl	8006874 <Error_Handler>
  }

}
 80068e4:	bf00      	nop
 80068e6:	bd80      	pop	{r7, pc}
 80068e8:	200001ac 	.word	0x200001ac
 80068ec:	40013000 	.word	0x40013000

080068f0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b08a      	sub	sp, #40	; 0x28
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068f8:	f107 0314 	add.w	r3, r7, #20
 80068fc:	2200      	movs	r2, #0
 80068fe:	601a      	str	r2, [r3, #0]
 8006900:	605a      	str	r2, [r3, #4]
 8006902:	609a      	str	r2, [r3, #8]
 8006904:	60da      	str	r2, [r3, #12]
 8006906:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a19      	ldr	r2, [pc, #100]	; (8006974 <HAL_SPI_MspInit+0x84>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d12b      	bne.n	800696a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006912:	2300      	movs	r3, #0
 8006914:	613b      	str	r3, [r7, #16]
 8006916:	4b18      	ldr	r3, [pc, #96]	; (8006978 <HAL_SPI_MspInit+0x88>)
 8006918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800691a:	4a17      	ldr	r2, [pc, #92]	; (8006978 <HAL_SPI_MspInit+0x88>)
 800691c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006920:	6453      	str	r3, [r2, #68]	; 0x44
 8006922:	4b15      	ldr	r3, [pc, #84]	; (8006978 <HAL_SPI_MspInit+0x88>)
 8006924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006926:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800692a:	613b      	str	r3, [r7, #16]
 800692c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800692e:	2300      	movs	r3, #0
 8006930:	60fb      	str	r3, [r7, #12]
 8006932:	4b11      	ldr	r3, [pc, #68]	; (8006978 <HAL_SPI_MspInit+0x88>)
 8006934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006936:	4a10      	ldr	r2, [pc, #64]	; (8006978 <HAL_SPI_MspInit+0x88>)
 8006938:	f043 0301 	orr.w	r3, r3, #1
 800693c:	6313      	str	r3, [r2, #48]	; 0x30
 800693e:	4b0e      	ldr	r3, [pc, #56]	; (8006978 <HAL_SPI_MspInit+0x88>)
 8006940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006942:	f003 0301 	and.w	r3, r3, #1
 8006946:	60fb      	str	r3, [r7, #12]
 8006948:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800694a:	23e0      	movs	r3, #224	; 0xe0
 800694c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800694e:	2302      	movs	r3, #2
 8006950:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006952:	2300      	movs	r3, #0
 8006954:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006956:	2303      	movs	r3, #3
 8006958:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800695a:	2305      	movs	r3, #5
 800695c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800695e:	f107 0314 	add.w	r3, r7, #20
 8006962:	4619      	mov	r1, r3
 8006964:	4805      	ldr	r0, [pc, #20]	; (800697c <HAL_SPI_MspInit+0x8c>)
 8006966:	f000 faa7 	bl	8006eb8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800696a:	bf00      	nop
 800696c:	3728      	adds	r7, #40	; 0x28
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop
 8006974:	40013000 	.word	0x40013000
 8006978:	40023800 	.word	0x40023800
 800697c:	40020000 	.word	0x40020000

08006980 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b082      	sub	sp, #8
 8006984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006986:	2300      	movs	r3, #0
 8006988:	607b      	str	r3, [r7, #4]
 800698a:	4b10      	ldr	r3, [pc, #64]	; (80069cc <HAL_MspInit+0x4c>)
 800698c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800698e:	4a0f      	ldr	r2, [pc, #60]	; (80069cc <HAL_MspInit+0x4c>)
 8006990:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006994:	6453      	str	r3, [r2, #68]	; 0x44
 8006996:	4b0d      	ldr	r3, [pc, #52]	; (80069cc <HAL_MspInit+0x4c>)
 8006998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800699a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800699e:	607b      	str	r3, [r7, #4]
 80069a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80069a2:	2300      	movs	r3, #0
 80069a4:	603b      	str	r3, [r7, #0]
 80069a6:	4b09      	ldr	r3, [pc, #36]	; (80069cc <HAL_MspInit+0x4c>)
 80069a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069aa:	4a08      	ldr	r2, [pc, #32]	; (80069cc <HAL_MspInit+0x4c>)
 80069ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069b0:	6413      	str	r3, [r2, #64]	; 0x40
 80069b2:	4b06      	ldr	r3, [pc, #24]	; (80069cc <HAL_MspInit+0x4c>)
 80069b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069ba:	603b      	str	r3, [r7, #0]
 80069bc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80069be:	2007      	movs	r0, #7
 80069c0:	f000 fa38 	bl	8006e34 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80069c4:	bf00      	nop
 80069c6:	3708      	adds	r7, #8
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}
 80069cc:	40023800 	.word	0x40023800

080069d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80069d0:	b480      	push	{r7}
 80069d2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80069d4:	bf00      	nop
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr

080069de <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80069de:	b480      	push	{r7}
 80069e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80069e2:	e7fe      	b.n	80069e2 <MemManage_Handler+0x4>

080069e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80069e4:	b480      	push	{r7}
 80069e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80069e8:	e7fe      	b.n	80069e8 <BusFault_Handler+0x4>

080069ea <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80069ea:	b480      	push	{r7}
 80069ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80069ee:	e7fe      	b.n	80069ee <UsageFault_Handler+0x4>

080069f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80069f0:	b480      	push	{r7}
 80069f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80069f4:	bf00      	nop
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr

080069fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80069fe:	b480      	push	{r7}
 8006a00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006a02:	bf00      	nop
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr

08006a0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006a10:	bf00      	nop
 8006a12:	46bd      	mov	sp, r7
 8006a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a18:	4770      	bx	lr

08006a1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006a1a:	b580      	push	{r7, lr}
 8006a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006a1e:	f000 f8f7 	bl	8006c10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006a22:	bf00      	nop
 8006a24:	bd80      	pop	{r7, pc}
	...

08006a28 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8006a2c:	4802      	ldr	r0, [pc, #8]	; (8006a38 <OTG_FS_IRQHandler+0x10>)
 8006a2e:	f000 fe6d 	bl	800770c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8006a32:	bf00      	nop
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	200005e0 	.word	0x200005e0

08006a3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	af00      	add	r7, sp, #0
	return 1;
 8006a40:	2301      	movs	r3, #1
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr

08006a4c <_kill>:

int _kill(int pid, int sig)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b082      	sub	sp, #8
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8006a56:	f007 f803 	bl	800da60 <__errno>
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	2316      	movs	r3, #22
 8006a5e:	6013      	str	r3, [r2, #0]
	return -1;
 8006a60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3708      	adds	r7, #8
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <_exit>:

void _exit (int status)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b082      	sub	sp, #8
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8006a74:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f7ff ffe7 	bl	8006a4c <_kill>
	while (1) {}		/* Make sure we hang here */
 8006a7e:	e7fe      	b.n	8006a7e <_exit+0x12>

08006a80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b086      	sub	sp, #24
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006a88:	4a14      	ldr	r2, [pc, #80]	; (8006adc <_sbrk+0x5c>)
 8006a8a:	4b15      	ldr	r3, [pc, #84]	; (8006ae0 <_sbrk+0x60>)
 8006a8c:	1ad3      	subs	r3, r2, r3
 8006a8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006a94:	4b13      	ldr	r3, [pc, #76]	; (8006ae4 <_sbrk+0x64>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d102      	bne.n	8006aa2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006a9c:	4b11      	ldr	r3, [pc, #68]	; (8006ae4 <_sbrk+0x64>)
 8006a9e:	4a12      	ldr	r2, [pc, #72]	; (8006ae8 <_sbrk+0x68>)
 8006aa0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006aa2:	4b10      	ldr	r3, [pc, #64]	; (8006ae4 <_sbrk+0x64>)
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	4413      	add	r3, r2
 8006aaa:	693a      	ldr	r2, [r7, #16]
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d207      	bcs.n	8006ac0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006ab0:	f006 ffd6 	bl	800da60 <__errno>
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	230c      	movs	r3, #12
 8006ab8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8006aba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006abe:	e009      	b.n	8006ad4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006ac0:	4b08      	ldr	r3, [pc, #32]	; (8006ae4 <_sbrk+0x64>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006ac6:	4b07      	ldr	r3, [pc, #28]	; (8006ae4 <_sbrk+0x64>)
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	4413      	add	r3, r2
 8006ace:	4a05      	ldr	r2, [pc, #20]	; (8006ae4 <_sbrk+0x64>)
 8006ad0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3718      	adds	r7, #24
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}
 8006adc:	20020000 	.word	0x20020000
 8006ae0:	00000400 	.word	0x00000400
 8006ae4:	200000b0 	.word	0x200000b0
 8006ae8:	200008a8 	.word	0x200008a8

08006aec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006aec:	b480      	push	{r7}
 8006aee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006af0:	4b08      	ldr	r3, [pc, #32]	; (8006b14 <SystemInit+0x28>)
 8006af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006af6:	4a07      	ldr	r2, [pc, #28]	; (8006b14 <SystemInit+0x28>)
 8006af8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006afc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006b00:	4b04      	ldr	r3, [pc, #16]	; (8006b14 <SystemInit+0x28>)
 8006b02:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006b06:	609a      	str	r2, [r3, #8]
#endif
}
 8006b08:	bf00      	nop
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr
 8006b12:	bf00      	nop
 8006b14:	e000ed00 	.word	0xe000ed00

08006b18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8006b18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006b50 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006b1c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006b1e:	e003      	b.n	8006b28 <LoopCopyDataInit>

08006b20 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006b20:	4b0c      	ldr	r3, [pc, #48]	; (8006b54 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006b22:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006b24:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006b26:	3104      	adds	r1, #4

08006b28 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006b28:	480b      	ldr	r0, [pc, #44]	; (8006b58 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006b2a:	4b0c      	ldr	r3, [pc, #48]	; (8006b5c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006b2c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006b2e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006b30:	d3f6      	bcc.n	8006b20 <CopyDataInit>
  ldr  r2, =_sbss
 8006b32:	4a0b      	ldr	r2, [pc, #44]	; (8006b60 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006b34:	e002      	b.n	8006b3c <LoopFillZerobss>

08006b36 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006b36:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006b38:	f842 3b04 	str.w	r3, [r2], #4

08006b3c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006b3c:	4b09      	ldr	r3, [pc, #36]	; (8006b64 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006b3e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006b40:	d3f9      	bcc.n	8006b36 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006b42:	f7ff ffd3 	bl	8006aec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006b46:	f006 ff91 	bl	800da6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006b4a:	f7ff fde7 	bl	800671c <main>
  bx  lr    
 8006b4e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8006b50:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8006b54:	0800dea0 	.word	0x0800dea0
  ldr  r0, =_sdata
 8006b58:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006b5c:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 8006b60:	20000094 	.word	0x20000094
  ldr  r3, = _ebss
 8006b64:	200008a8 	.word	0x200008a8

08006b68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006b68:	e7fe      	b.n	8006b68 <ADC_IRQHandler>
	...

08006b6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006b70:	4b0e      	ldr	r3, [pc, #56]	; (8006bac <HAL_Init+0x40>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a0d      	ldr	r2, [pc, #52]	; (8006bac <HAL_Init+0x40>)
 8006b76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006b7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006b7c:	4b0b      	ldr	r3, [pc, #44]	; (8006bac <HAL_Init+0x40>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a0a      	ldr	r2, [pc, #40]	; (8006bac <HAL_Init+0x40>)
 8006b82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006b86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006b88:	4b08      	ldr	r3, [pc, #32]	; (8006bac <HAL_Init+0x40>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a07      	ldr	r2, [pc, #28]	; (8006bac <HAL_Init+0x40>)
 8006b8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006b94:	2003      	movs	r0, #3
 8006b96:	f000 f94d 	bl	8006e34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006b9a:	2000      	movs	r0, #0
 8006b9c:	f000 f808 	bl	8006bb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006ba0:	f7ff feee 	bl	8006980 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006ba4:	2300      	movs	r3, #0
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	bd80      	pop	{r7, pc}
 8006baa:	bf00      	nop
 8006bac:	40023c00 	.word	0x40023c00

08006bb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b082      	sub	sp, #8
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006bb8:	4b12      	ldr	r3, [pc, #72]	; (8006c04 <HAL_InitTick+0x54>)
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	4b12      	ldr	r3, [pc, #72]	; (8006c08 <HAL_InitTick+0x58>)
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006bc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8006bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f000 f965 	bl	8006e9e <HAL_SYSTICK_Config>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d001      	beq.n	8006bde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e00e      	b.n	8006bfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2b0f      	cmp	r3, #15
 8006be2:	d80a      	bhi.n	8006bfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006be4:	2200      	movs	r2, #0
 8006be6:	6879      	ldr	r1, [r7, #4]
 8006be8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006bec:	f000 f92d 	bl	8006e4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006bf0:	4a06      	ldr	r2, [pc, #24]	; (8006c0c <HAL_InitTick+0x5c>)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	e000      	b.n	8006bfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3708      	adds	r7, #8
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}
 8006c04:	20000000 	.word	0x20000000
 8006c08:	20000008 	.word	0x20000008
 8006c0c:	20000004 	.word	0x20000004

08006c10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006c10:	b480      	push	{r7}
 8006c12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006c14:	4b06      	ldr	r3, [pc, #24]	; (8006c30 <HAL_IncTick+0x20>)
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	461a      	mov	r2, r3
 8006c1a:	4b06      	ldr	r3, [pc, #24]	; (8006c34 <HAL_IncTick+0x24>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4413      	add	r3, r2
 8006c20:	4a04      	ldr	r2, [pc, #16]	; (8006c34 <HAL_IncTick+0x24>)
 8006c22:	6013      	str	r3, [r2, #0]
}
 8006c24:	bf00      	nop
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr
 8006c2e:	bf00      	nop
 8006c30:	20000008 	.word	0x20000008
 8006c34:	20000204 	.word	0x20000204

08006c38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	af00      	add	r7, sp, #0
  return uwTick;
 8006c3c:	4b03      	ldr	r3, [pc, #12]	; (8006c4c <HAL_GetTick+0x14>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr
 8006c4a:	bf00      	nop
 8006c4c:	20000204 	.word	0x20000204

08006c50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b084      	sub	sp, #16
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006c58:	f7ff ffee 	bl	8006c38 <HAL_GetTick>
 8006c5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c68:	d005      	beq.n	8006c76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006c6a:	4b09      	ldr	r3, [pc, #36]	; (8006c90 <HAL_Delay+0x40>)
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	461a      	mov	r2, r3
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	4413      	add	r3, r2
 8006c74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006c76:	bf00      	nop
 8006c78:	f7ff ffde 	bl	8006c38 <HAL_GetTick>
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	1ad3      	subs	r3, r2, r3
 8006c82:	68fa      	ldr	r2, [r7, #12]
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d8f7      	bhi.n	8006c78 <HAL_Delay+0x28>
  {
  }
}
 8006c88:	bf00      	nop
 8006c8a:	3710      	adds	r7, #16
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}
 8006c90:	20000008 	.word	0x20000008

08006c94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b085      	sub	sp, #20
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f003 0307 	and.w	r3, r3, #7
 8006ca2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006ca4:	4b0c      	ldr	r3, [pc, #48]	; (8006cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8006ca6:	68db      	ldr	r3, [r3, #12]
 8006ca8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006caa:	68ba      	ldr	r2, [r7, #8]
 8006cac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006cb0:	4013      	ands	r3, r2
 8006cb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006cbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006cc6:	4a04      	ldr	r2, [pc, #16]	; (8006cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	60d3      	str	r3, [r2, #12]
}
 8006ccc:	bf00      	nop
 8006cce:	3714      	adds	r7, #20
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr
 8006cd8:	e000ed00 	.word	0xe000ed00

08006cdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006ce0:	4b04      	ldr	r3, [pc, #16]	; (8006cf4 <__NVIC_GetPriorityGrouping+0x18>)
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	0a1b      	lsrs	r3, r3, #8
 8006ce6:	f003 0307 	and.w	r3, r3, #7
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr
 8006cf4:	e000ed00 	.word	0xe000ed00

08006cf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b083      	sub	sp, #12
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	4603      	mov	r3, r0
 8006d00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	db0b      	blt.n	8006d22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006d0a:	79fb      	ldrb	r3, [r7, #7]
 8006d0c:	f003 021f 	and.w	r2, r3, #31
 8006d10:	4907      	ldr	r1, [pc, #28]	; (8006d30 <__NVIC_EnableIRQ+0x38>)
 8006d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d16:	095b      	lsrs	r3, r3, #5
 8006d18:	2001      	movs	r0, #1
 8006d1a:	fa00 f202 	lsl.w	r2, r0, r2
 8006d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006d22:	bf00      	nop
 8006d24:	370c      	adds	r7, #12
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr
 8006d2e:	bf00      	nop
 8006d30:	e000e100 	.word	0xe000e100

08006d34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b083      	sub	sp, #12
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	6039      	str	r1, [r7, #0]
 8006d3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	db0a      	blt.n	8006d5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	b2da      	uxtb	r2, r3
 8006d4c:	490c      	ldr	r1, [pc, #48]	; (8006d80 <__NVIC_SetPriority+0x4c>)
 8006d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d52:	0112      	lsls	r2, r2, #4
 8006d54:	b2d2      	uxtb	r2, r2
 8006d56:	440b      	add	r3, r1
 8006d58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006d5c:	e00a      	b.n	8006d74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	b2da      	uxtb	r2, r3
 8006d62:	4908      	ldr	r1, [pc, #32]	; (8006d84 <__NVIC_SetPriority+0x50>)
 8006d64:	79fb      	ldrb	r3, [r7, #7]
 8006d66:	f003 030f 	and.w	r3, r3, #15
 8006d6a:	3b04      	subs	r3, #4
 8006d6c:	0112      	lsls	r2, r2, #4
 8006d6e:	b2d2      	uxtb	r2, r2
 8006d70:	440b      	add	r3, r1
 8006d72:	761a      	strb	r2, [r3, #24]
}
 8006d74:	bf00      	nop
 8006d76:	370c      	adds	r7, #12
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr
 8006d80:	e000e100 	.word	0xe000e100
 8006d84:	e000ed00 	.word	0xe000ed00

08006d88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b089      	sub	sp, #36	; 0x24
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	60f8      	str	r0, [r7, #12]
 8006d90:	60b9      	str	r1, [r7, #8]
 8006d92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f003 0307 	and.w	r3, r3, #7
 8006d9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006d9c:	69fb      	ldr	r3, [r7, #28]
 8006d9e:	f1c3 0307 	rsb	r3, r3, #7
 8006da2:	2b04      	cmp	r3, #4
 8006da4:	bf28      	it	cs
 8006da6:	2304      	movcs	r3, #4
 8006da8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006daa:	69fb      	ldr	r3, [r7, #28]
 8006dac:	3304      	adds	r3, #4
 8006dae:	2b06      	cmp	r3, #6
 8006db0:	d902      	bls.n	8006db8 <NVIC_EncodePriority+0x30>
 8006db2:	69fb      	ldr	r3, [r7, #28]
 8006db4:	3b03      	subs	r3, #3
 8006db6:	e000      	b.n	8006dba <NVIC_EncodePriority+0x32>
 8006db8:	2300      	movs	r3, #0
 8006dba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006dbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006dc0:	69bb      	ldr	r3, [r7, #24]
 8006dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8006dc6:	43da      	mvns	r2, r3
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	401a      	ands	r2, r3
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006dd0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8006dda:	43d9      	mvns	r1, r3
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006de0:	4313      	orrs	r3, r2
         );
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3724      	adds	r7, #36	; 0x24
 8006de6:	46bd      	mov	sp, r7
 8006de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dec:	4770      	bx	lr
	...

08006df0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b082      	sub	sp, #8
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	3b01      	subs	r3, #1
 8006dfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006e00:	d301      	bcc.n	8006e06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006e02:	2301      	movs	r3, #1
 8006e04:	e00f      	b.n	8006e26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006e06:	4a0a      	ldr	r2, [pc, #40]	; (8006e30 <SysTick_Config+0x40>)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	3b01      	subs	r3, #1
 8006e0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006e0e:	210f      	movs	r1, #15
 8006e10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e14:	f7ff ff8e 	bl	8006d34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006e18:	4b05      	ldr	r3, [pc, #20]	; (8006e30 <SysTick_Config+0x40>)
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006e1e:	4b04      	ldr	r3, [pc, #16]	; (8006e30 <SysTick_Config+0x40>)
 8006e20:	2207      	movs	r2, #7
 8006e22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006e24:	2300      	movs	r3, #0
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	3708      	adds	r7, #8
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}
 8006e2e:	bf00      	nop
 8006e30:	e000e010 	.word	0xe000e010

08006e34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b082      	sub	sp, #8
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f7ff ff29 	bl	8006c94 <__NVIC_SetPriorityGrouping>
}
 8006e42:	bf00      	nop
 8006e44:	3708      	adds	r7, #8
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}

08006e4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006e4a:	b580      	push	{r7, lr}
 8006e4c:	b086      	sub	sp, #24
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	4603      	mov	r3, r0
 8006e52:	60b9      	str	r1, [r7, #8]
 8006e54:	607a      	str	r2, [r7, #4]
 8006e56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006e5c:	f7ff ff3e 	bl	8006cdc <__NVIC_GetPriorityGrouping>
 8006e60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006e62:	687a      	ldr	r2, [r7, #4]
 8006e64:	68b9      	ldr	r1, [r7, #8]
 8006e66:	6978      	ldr	r0, [r7, #20]
 8006e68:	f7ff ff8e 	bl	8006d88 <NVIC_EncodePriority>
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e72:	4611      	mov	r1, r2
 8006e74:	4618      	mov	r0, r3
 8006e76:	f7ff ff5d 	bl	8006d34 <__NVIC_SetPriority>
}
 8006e7a:	bf00      	nop
 8006e7c:	3718      	adds	r7, #24
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}

08006e82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006e82:	b580      	push	{r7, lr}
 8006e84:	b082      	sub	sp, #8
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	4603      	mov	r3, r0
 8006e8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e90:	4618      	mov	r0, r3
 8006e92:	f7ff ff31 	bl	8006cf8 <__NVIC_EnableIRQ>
}
 8006e96:	bf00      	nop
 8006e98:	3708      	adds	r7, #8
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}

08006e9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006e9e:	b580      	push	{r7, lr}
 8006ea0:	b082      	sub	sp, #8
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f7ff ffa2 	bl	8006df0 <SysTick_Config>
 8006eac:	4603      	mov	r3, r0
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3708      	adds	r7, #8
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
	...

08006eb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b089      	sub	sp, #36	; 0x24
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006ece:	2300      	movs	r3, #0
 8006ed0:	61fb      	str	r3, [r7, #28]
 8006ed2:	e159      	b.n	8007188 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	69fb      	ldr	r3, [r7, #28]
 8006ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8006edc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	697a      	ldr	r2, [r7, #20]
 8006ee4:	4013      	ands	r3, r2
 8006ee6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006ee8:	693a      	ldr	r2, [r7, #16]
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	429a      	cmp	r2, r3
 8006eee:	f040 8148 	bne.w	8007182 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d00b      	beq.n	8006f12 <HAL_GPIO_Init+0x5a>
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	2b02      	cmp	r3, #2
 8006f00:	d007      	beq.n	8006f12 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006f06:	2b11      	cmp	r3, #17
 8006f08:	d003      	beq.n	8006f12 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	2b12      	cmp	r3, #18
 8006f10:	d130      	bne.n	8006f74 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006f18:	69fb      	ldr	r3, [r7, #28]
 8006f1a:	005b      	lsls	r3, r3, #1
 8006f1c:	2203      	movs	r2, #3
 8006f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f22:	43db      	mvns	r3, r3
 8006f24:	69ba      	ldr	r2, [r7, #24]
 8006f26:	4013      	ands	r3, r2
 8006f28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	68da      	ldr	r2, [r3, #12]
 8006f2e:	69fb      	ldr	r3, [r7, #28]
 8006f30:	005b      	lsls	r3, r3, #1
 8006f32:	fa02 f303 	lsl.w	r3, r2, r3
 8006f36:	69ba      	ldr	r2, [r7, #24]
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	69ba      	ldr	r2, [r7, #24]
 8006f40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006f48:	2201      	movs	r2, #1
 8006f4a:	69fb      	ldr	r3, [r7, #28]
 8006f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f50:	43db      	mvns	r3, r3
 8006f52:	69ba      	ldr	r2, [r7, #24]
 8006f54:	4013      	ands	r3, r2
 8006f56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	091b      	lsrs	r3, r3, #4
 8006f5e:	f003 0201 	and.w	r2, r3, #1
 8006f62:	69fb      	ldr	r3, [r7, #28]
 8006f64:	fa02 f303 	lsl.w	r3, r2, r3
 8006f68:	69ba      	ldr	r2, [r7, #24]
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	69ba      	ldr	r2, [r7, #24]
 8006f72:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	68db      	ldr	r3, [r3, #12]
 8006f78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006f7a:	69fb      	ldr	r3, [r7, #28]
 8006f7c:	005b      	lsls	r3, r3, #1
 8006f7e:	2203      	movs	r2, #3
 8006f80:	fa02 f303 	lsl.w	r3, r2, r3
 8006f84:	43db      	mvns	r3, r3
 8006f86:	69ba      	ldr	r2, [r7, #24]
 8006f88:	4013      	ands	r3, r2
 8006f8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	689a      	ldr	r2, [r3, #8]
 8006f90:	69fb      	ldr	r3, [r7, #28]
 8006f92:	005b      	lsls	r3, r3, #1
 8006f94:	fa02 f303 	lsl.w	r3, r2, r3
 8006f98:	69ba      	ldr	r2, [r7, #24]
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	69ba      	ldr	r2, [r7, #24]
 8006fa2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	2b02      	cmp	r3, #2
 8006faa:	d003      	beq.n	8006fb4 <HAL_GPIO_Init+0xfc>
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	2b12      	cmp	r3, #18
 8006fb2:	d123      	bne.n	8006ffc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006fb4:	69fb      	ldr	r3, [r7, #28]
 8006fb6:	08da      	lsrs	r2, r3, #3
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	3208      	adds	r2, #8
 8006fbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006fc2:	69fb      	ldr	r3, [r7, #28]
 8006fc4:	f003 0307 	and.w	r3, r3, #7
 8006fc8:	009b      	lsls	r3, r3, #2
 8006fca:	220f      	movs	r2, #15
 8006fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8006fd0:	43db      	mvns	r3, r3
 8006fd2:	69ba      	ldr	r2, [r7, #24]
 8006fd4:	4013      	ands	r3, r2
 8006fd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	691a      	ldr	r2, [r3, #16]
 8006fdc:	69fb      	ldr	r3, [r7, #28]
 8006fde:	f003 0307 	and.w	r3, r3, #7
 8006fe2:	009b      	lsls	r3, r3, #2
 8006fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8006fe8:	69ba      	ldr	r2, [r7, #24]
 8006fea:	4313      	orrs	r3, r2
 8006fec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006fee:	69fb      	ldr	r3, [r7, #28]
 8006ff0:	08da      	lsrs	r2, r3, #3
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	3208      	adds	r2, #8
 8006ff6:	69b9      	ldr	r1, [r7, #24]
 8006ff8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007002:	69fb      	ldr	r3, [r7, #28]
 8007004:	005b      	lsls	r3, r3, #1
 8007006:	2203      	movs	r2, #3
 8007008:	fa02 f303 	lsl.w	r3, r2, r3
 800700c:	43db      	mvns	r3, r3
 800700e:	69ba      	ldr	r2, [r7, #24]
 8007010:	4013      	ands	r3, r2
 8007012:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	f003 0203 	and.w	r2, r3, #3
 800701c:	69fb      	ldr	r3, [r7, #28]
 800701e:	005b      	lsls	r3, r3, #1
 8007020:	fa02 f303 	lsl.w	r3, r2, r3
 8007024:	69ba      	ldr	r2, [r7, #24]
 8007026:	4313      	orrs	r3, r2
 8007028:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	69ba      	ldr	r2, [r7, #24]
 800702e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007038:	2b00      	cmp	r3, #0
 800703a:	f000 80a2 	beq.w	8007182 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800703e:	2300      	movs	r3, #0
 8007040:	60fb      	str	r3, [r7, #12]
 8007042:	4b56      	ldr	r3, [pc, #344]	; (800719c <HAL_GPIO_Init+0x2e4>)
 8007044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007046:	4a55      	ldr	r2, [pc, #340]	; (800719c <HAL_GPIO_Init+0x2e4>)
 8007048:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800704c:	6453      	str	r3, [r2, #68]	; 0x44
 800704e:	4b53      	ldr	r3, [pc, #332]	; (800719c <HAL_GPIO_Init+0x2e4>)
 8007050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007052:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007056:	60fb      	str	r3, [r7, #12]
 8007058:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800705a:	4a51      	ldr	r2, [pc, #324]	; (80071a0 <HAL_GPIO_Init+0x2e8>)
 800705c:	69fb      	ldr	r3, [r7, #28]
 800705e:	089b      	lsrs	r3, r3, #2
 8007060:	3302      	adds	r3, #2
 8007062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007066:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007068:	69fb      	ldr	r3, [r7, #28]
 800706a:	f003 0303 	and.w	r3, r3, #3
 800706e:	009b      	lsls	r3, r3, #2
 8007070:	220f      	movs	r2, #15
 8007072:	fa02 f303 	lsl.w	r3, r2, r3
 8007076:	43db      	mvns	r3, r3
 8007078:	69ba      	ldr	r2, [r7, #24]
 800707a:	4013      	ands	r3, r2
 800707c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	4a48      	ldr	r2, [pc, #288]	; (80071a4 <HAL_GPIO_Init+0x2ec>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d019      	beq.n	80070ba <HAL_GPIO_Init+0x202>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	4a47      	ldr	r2, [pc, #284]	; (80071a8 <HAL_GPIO_Init+0x2f0>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d013      	beq.n	80070b6 <HAL_GPIO_Init+0x1fe>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	4a46      	ldr	r2, [pc, #280]	; (80071ac <HAL_GPIO_Init+0x2f4>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d00d      	beq.n	80070b2 <HAL_GPIO_Init+0x1fa>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	4a45      	ldr	r2, [pc, #276]	; (80071b0 <HAL_GPIO_Init+0x2f8>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d007      	beq.n	80070ae <HAL_GPIO_Init+0x1f6>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	4a44      	ldr	r2, [pc, #272]	; (80071b4 <HAL_GPIO_Init+0x2fc>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d101      	bne.n	80070aa <HAL_GPIO_Init+0x1f2>
 80070a6:	2304      	movs	r3, #4
 80070a8:	e008      	b.n	80070bc <HAL_GPIO_Init+0x204>
 80070aa:	2307      	movs	r3, #7
 80070ac:	e006      	b.n	80070bc <HAL_GPIO_Init+0x204>
 80070ae:	2303      	movs	r3, #3
 80070b0:	e004      	b.n	80070bc <HAL_GPIO_Init+0x204>
 80070b2:	2302      	movs	r3, #2
 80070b4:	e002      	b.n	80070bc <HAL_GPIO_Init+0x204>
 80070b6:	2301      	movs	r3, #1
 80070b8:	e000      	b.n	80070bc <HAL_GPIO_Init+0x204>
 80070ba:	2300      	movs	r3, #0
 80070bc:	69fa      	ldr	r2, [r7, #28]
 80070be:	f002 0203 	and.w	r2, r2, #3
 80070c2:	0092      	lsls	r2, r2, #2
 80070c4:	4093      	lsls	r3, r2
 80070c6:	69ba      	ldr	r2, [r7, #24]
 80070c8:	4313      	orrs	r3, r2
 80070ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80070cc:	4934      	ldr	r1, [pc, #208]	; (80071a0 <HAL_GPIO_Init+0x2e8>)
 80070ce:	69fb      	ldr	r3, [r7, #28]
 80070d0:	089b      	lsrs	r3, r3, #2
 80070d2:	3302      	adds	r3, #2
 80070d4:	69ba      	ldr	r2, [r7, #24]
 80070d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80070da:	4b37      	ldr	r3, [pc, #220]	; (80071b8 <HAL_GPIO_Init+0x300>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	43db      	mvns	r3, r3
 80070e4:	69ba      	ldr	r2, [r7, #24]
 80070e6:	4013      	ands	r3, r2
 80070e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d003      	beq.n	80070fe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80070f6:	69ba      	ldr	r2, [r7, #24]
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	4313      	orrs	r3, r2
 80070fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80070fe:	4a2e      	ldr	r2, [pc, #184]	; (80071b8 <HAL_GPIO_Init+0x300>)
 8007100:	69bb      	ldr	r3, [r7, #24]
 8007102:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007104:	4b2c      	ldr	r3, [pc, #176]	; (80071b8 <HAL_GPIO_Init+0x300>)
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	43db      	mvns	r3, r3
 800710e:	69ba      	ldr	r2, [r7, #24]
 8007110:	4013      	ands	r3, r2
 8007112:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800711c:	2b00      	cmp	r3, #0
 800711e:	d003      	beq.n	8007128 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8007120:	69ba      	ldr	r2, [r7, #24]
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	4313      	orrs	r3, r2
 8007126:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007128:	4a23      	ldr	r2, [pc, #140]	; (80071b8 <HAL_GPIO_Init+0x300>)
 800712a:	69bb      	ldr	r3, [r7, #24]
 800712c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800712e:	4b22      	ldr	r3, [pc, #136]	; (80071b8 <HAL_GPIO_Init+0x300>)
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	43db      	mvns	r3, r3
 8007138:	69ba      	ldr	r2, [r7, #24]
 800713a:	4013      	ands	r3, r2
 800713c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007146:	2b00      	cmp	r3, #0
 8007148:	d003      	beq.n	8007152 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800714a:	69ba      	ldr	r2, [r7, #24]
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	4313      	orrs	r3, r2
 8007150:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007152:	4a19      	ldr	r2, [pc, #100]	; (80071b8 <HAL_GPIO_Init+0x300>)
 8007154:	69bb      	ldr	r3, [r7, #24]
 8007156:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007158:	4b17      	ldr	r3, [pc, #92]	; (80071b8 <HAL_GPIO_Init+0x300>)
 800715a:	68db      	ldr	r3, [r3, #12]
 800715c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	43db      	mvns	r3, r3
 8007162:	69ba      	ldr	r2, [r7, #24]
 8007164:	4013      	ands	r3, r2
 8007166:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007170:	2b00      	cmp	r3, #0
 8007172:	d003      	beq.n	800717c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8007174:	69ba      	ldr	r2, [r7, #24]
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	4313      	orrs	r3, r2
 800717a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800717c:	4a0e      	ldr	r2, [pc, #56]	; (80071b8 <HAL_GPIO_Init+0x300>)
 800717e:	69bb      	ldr	r3, [r7, #24]
 8007180:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007182:	69fb      	ldr	r3, [r7, #28]
 8007184:	3301      	adds	r3, #1
 8007186:	61fb      	str	r3, [r7, #28]
 8007188:	69fb      	ldr	r3, [r7, #28]
 800718a:	2b0f      	cmp	r3, #15
 800718c:	f67f aea2 	bls.w	8006ed4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007190:	bf00      	nop
 8007192:	3724      	adds	r7, #36	; 0x24
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr
 800719c:	40023800 	.word	0x40023800
 80071a0:	40013800 	.word	0x40013800
 80071a4:	40020000 	.word	0x40020000
 80071a8:	40020400 	.word	0x40020400
 80071ac:	40020800 	.word	0x40020800
 80071b0:	40020c00 	.word	0x40020c00
 80071b4:	40021000 	.word	0x40021000
 80071b8:	40013c00 	.word	0x40013c00

080071bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80071bc:	b480      	push	{r7}
 80071be:	b083      	sub	sp, #12
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	460b      	mov	r3, r1
 80071c6:	807b      	strh	r3, [r7, #2]
 80071c8:	4613      	mov	r3, r2
 80071ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80071cc:	787b      	ldrb	r3, [r7, #1]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d003      	beq.n	80071da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80071d2:	887a      	ldrh	r2, [r7, #2]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80071d8:	e003      	b.n	80071e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80071da:	887b      	ldrh	r3, [r7, #2]
 80071dc:	041a      	lsls	r2, r3, #16
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	619a      	str	r2, [r3, #24]
}
 80071e2:	bf00      	nop
 80071e4:	370c      	adds	r7, #12
 80071e6:	46bd      	mov	sp, r7
 80071e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ec:	4770      	bx	lr

080071ee <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80071ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071f0:	b08f      	sub	sp, #60	; 0x3c
 80071f2:	af0a      	add	r7, sp, #40	; 0x28
 80071f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d101      	bne.n	8007200 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80071fc:	2301      	movs	r3, #1
 80071fe:	e054      	b.n	80072aa <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 800720c:	b2db      	uxtb	r3, r3
 800720e:	2b00      	cmp	r3, #0
 8007210:	d106      	bne.n	8007220 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2200      	movs	r2, #0
 8007216:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f006 f934 	bl	800d488 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2203      	movs	r2, #3
 8007224:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800722c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007230:	2b00      	cmp	r3, #0
 8007232:	d102      	bne.n	800723a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4618      	mov	r0, r3
 8007240:	f003 faf0 	bl	800a824 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	603b      	str	r3, [r7, #0]
 800724a:	687e      	ldr	r6, [r7, #4]
 800724c:	466d      	mov	r5, sp
 800724e:	f106 0410 	add.w	r4, r6, #16
 8007252:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007254:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007256:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007258:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800725a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800725e:	e885 0003 	stmia.w	r5, {r0, r1}
 8007262:	1d33      	adds	r3, r6, #4
 8007264:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007266:	6838      	ldr	r0, [r7, #0]
 8007268:	f003 fa6a 	bl	800a740 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	2101      	movs	r1, #1
 8007272:	4618      	mov	r0, r3
 8007274:	f003 fae7 	bl	800a846 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	603b      	str	r3, [r7, #0]
 800727e:	687e      	ldr	r6, [r7, #4]
 8007280:	466d      	mov	r5, sp
 8007282:	f106 0410 	add.w	r4, r6, #16
 8007286:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007288:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800728a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800728c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800728e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007292:	e885 0003 	stmia.w	r5, {r0, r1}
 8007296:	1d33      	adds	r3, r6, #4
 8007298:	cb0e      	ldmia	r3, {r1, r2, r3}
 800729a:	6838      	ldr	r0, [r7, #0]
 800729c:	f003 fbfa 	bl	800aa94 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2201      	movs	r2, #1
 80072a4:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80072a8:	2300      	movs	r3, #0
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3714      	adds	r7, #20
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080072b2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80072b2:	b590      	push	{r4, r7, lr}
 80072b4:	b089      	sub	sp, #36	; 0x24
 80072b6:	af04      	add	r7, sp, #16
 80072b8:	6078      	str	r0, [r7, #4]
 80072ba:	4608      	mov	r0, r1
 80072bc:	4611      	mov	r1, r2
 80072be:	461a      	mov	r2, r3
 80072c0:	4603      	mov	r3, r0
 80072c2:	70fb      	strb	r3, [r7, #3]
 80072c4:	460b      	mov	r3, r1
 80072c6:	70bb      	strb	r3, [r7, #2]
 80072c8:	4613      	mov	r3, r2
 80072ca:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d101      	bne.n	80072da <HAL_HCD_HC_Init+0x28>
 80072d6:	2302      	movs	r3, #2
 80072d8:	e07f      	b.n	80073da <HAL_HCD_HC_Init+0x128>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2201      	movs	r2, #1
 80072de:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80072e2:	78fa      	ldrb	r2, [r7, #3]
 80072e4:	6879      	ldr	r1, [r7, #4]
 80072e6:	4613      	mov	r3, r2
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	4413      	add	r3, r2
 80072ec:	00db      	lsls	r3, r3, #3
 80072ee:	440b      	add	r3, r1
 80072f0:	333d      	adds	r3, #61	; 0x3d
 80072f2:	2200      	movs	r2, #0
 80072f4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80072f6:	78fa      	ldrb	r2, [r7, #3]
 80072f8:	6879      	ldr	r1, [r7, #4]
 80072fa:	4613      	mov	r3, r2
 80072fc:	009b      	lsls	r3, r3, #2
 80072fe:	4413      	add	r3, r2
 8007300:	00db      	lsls	r3, r3, #3
 8007302:	440b      	add	r3, r1
 8007304:	3338      	adds	r3, #56	; 0x38
 8007306:	787a      	ldrb	r2, [r7, #1]
 8007308:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800730a:	78fa      	ldrb	r2, [r7, #3]
 800730c:	6879      	ldr	r1, [r7, #4]
 800730e:	4613      	mov	r3, r2
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	4413      	add	r3, r2
 8007314:	00db      	lsls	r3, r3, #3
 8007316:	440b      	add	r3, r1
 8007318:	3340      	adds	r3, #64	; 0x40
 800731a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800731c:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800731e:	78fa      	ldrb	r2, [r7, #3]
 8007320:	6879      	ldr	r1, [r7, #4]
 8007322:	4613      	mov	r3, r2
 8007324:	009b      	lsls	r3, r3, #2
 8007326:	4413      	add	r3, r2
 8007328:	00db      	lsls	r3, r3, #3
 800732a:	440b      	add	r3, r1
 800732c:	3339      	adds	r3, #57	; 0x39
 800732e:	78fa      	ldrb	r2, [r7, #3]
 8007330:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8007332:	78fa      	ldrb	r2, [r7, #3]
 8007334:	6879      	ldr	r1, [r7, #4]
 8007336:	4613      	mov	r3, r2
 8007338:	009b      	lsls	r3, r3, #2
 800733a:	4413      	add	r3, r2
 800733c:	00db      	lsls	r3, r3, #3
 800733e:	440b      	add	r3, r1
 8007340:	333f      	adds	r3, #63	; 0x3f
 8007342:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8007346:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8007348:	78fa      	ldrb	r2, [r7, #3]
 800734a:	78bb      	ldrb	r3, [r7, #2]
 800734c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007350:	b2d8      	uxtb	r0, r3
 8007352:	6879      	ldr	r1, [r7, #4]
 8007354:	4613      	mov	r3, r2
 8007356:	009b      	lsls	r3, r3, #2
 8007358:	4413      	add	r3, r2
 800735a:	00db      	lsls	r3, r3, #3
 800735c:	440b      	add	r3, r1
 800735e:	333a      	adds	r3, #58	; 0x3a
 8007360:	4602      	mov	r2, r0
 8007362:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8007364:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007368:	2b00      	cmp	r3, #0
 800736a:	da0a      	bge.n	8007382 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800736c:	78fa      	ldrb	r2, [r7, #3]
 800736e:	6879      	ldr	r1, [r7, #4]
 8007370:	4613      	mov	r3, r2
 8007372:	009b      	lsls	r3, r3, #2
 8007374:	4413      	add	r3, r2
 8007376:	00db      	lsls	r3, r3, #3
 8007378:	440b      	add	r3, r1
 800737a:	333b      	adds	r3, #59	; 0x3b
 800737c:	2201      	movs	r2, #1
 800737e:	701a      	strb	r2, [r3, #0]
 8007380:	e009      	b.n	8007396 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8007382:	78fa      	ldrb	r2, [r7, #3]
 8007384:	6879      	ldr	r1, [r7, #4]
 8007386:	4613      	mov	r3, r2
 8007388:	009b      	lsls	r3, r3, #2
 800738a:	4413      	add	r3, r2
 800738c:	00db      	lsls	r3, r3, #3
 800738e:	440b      	add	r3, r1
 8007390:	333b      	adds	r3, #59	; 0x3b
 8007392:	2200      	movs	r2, #0
 8007394:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8007396:	78fa      	ldrb	r2, [r7, #3]
 8007398:	6879      	ldr	r1, [r7, #4]
 800739a:	4613      	mov	r3, r2
 800739c:	009b      	lsls	r3, r3, #2
 800739e:	4413      	add	r3, r2
 80073a0:	00db      	lsls	r3, r3, #3
 80073a2:	440b      	add	r3, r1
 80073a4:	333c      	adds	r3, #60	; 0x3c
 80073a6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80073aa:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6818      	ldr	r0, [r3, #0]
 80073b0:	787c      	ldrb	r4, [r7, #1]
 80073b2:	78ba      	ldrb	r2, [r7, #2]
 80073b4:	78f9      	ldrb	r1, [r7, #3]
 80073b6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80073b8:	9302      	str	r3, [sp, #8]
 80073ba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80073be:	9301      	str	r3, [sp, #4]
 80073c0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80073c4:	9300      	str	r3, [sp, #0]
 80073c6:	4623      	mov	r3, r4
 80073c8:	f003 fce6 	bl	800ad98 <USB_HC_Init>
 80073cc:	4603      	mov	r3, r0
 80073ce:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2200      	movs	r2, #0
 80073d4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80073d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3714      	adds	r7, #20
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd90      	pop	{r4, r7, pc}

080073e2 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80073e2:	b580      	push	{r7, lr}
 80073e4:	b084      	sub	sp, #16
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6078      	str	r0, [r7, #4]
 80073ea:	460b      	mov	r3, r1
 80073ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80073ee:	2300      	movs	r3, #0
 80073f0:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	d101      	bne.n	8007400 <HAL_HCD_HC_Halt+0x1e>
 80073fc:	2302      	movs	r3, #2
 80073fe:	e00f      	b.n	8007420 <HAL_HCD_HC_Halt+0x3e>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2201      	movs	r2, #1
 8007404:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	78fa      	ldrb	r2, [r7, #3]
 800740e:	4611      	mov	r1, r2
 8007410:	4618      	mov	r0, r3
 8007412:	f003 ff22 	bl	800b25a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2200      	movs	r2, #0
 800741a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800741e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007420:	4618      	mov	r0, r3
 8007422:	3710      	adds	r7, #16
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}

08007428 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b082      	sub	sp, #8
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	4608      	mov	r0, r1
 8007432:	4611      	mov	r1, r2
 8007434:	461a      	mov	r2, r3
 8007436:	4603      	mov	r3, r0
 8007438:	70fb      	strb	r3, [r7, #3]
 800743a:	460b      	mov	r3, r1
 800743c:	70bb      	strb	r3, [r7, #2]
 800743e:	4613      	mov	r3, r2
 8007440:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8007442:	78fa      	ldrb	r2, [r7, #3]
 8007444:	6879      	ldr	r1, [r7, #4]
 8007446:	4613      	mov	r3, r2
 8007448:	009b      	lsls	r3, r3, #2
 800744a:	4413      	add	r3, r2
 800744c:	00db      	lsls	r3, r3, #3
 800744e:	440b      	add	r3, r1
 8007450:	333b      	adds	r3, #59	; 0x3b
 8007452:	78ba      	ldrb	r2, [r7, #2]
 8007454:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8007456:	78fa      	ldrb	r2, [r7, #3]
 8007458:	6879      	ldr	r1, [r7, #4]
 800745a:	4613      	mov	r3, r2
 800745c:	009b      	lsls	r3, r3, #2
 800745e:	4413      	add	r3, r2
 8007460:	00db      	lsls	r3, r3, #3
 8007462:	440b      	add	r3, r1
 8007464:	333f      	adds	r3, #63	; 0x3f
 8007466:	787a      	ldrb	r2, [r7, #1]
 8007468:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800746a:	7c3b      	ldrb	r3, [r7, #16]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d114      	bne.n	800749a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8007470:	78fa      	ldrb	r2, [r7, #3]
 8007472:	6879      	ldr	r1, [r7, #4]
 8007474:	4613      	mov	r3, r2
 8007476:	009b      	lsls	r3, r3, #2
 8007478:	4413      	add	r3, r2
 800747a:	00db      	lsls	r3, r3, #3
 800747c:	440b      	add	r3, r1
 800747e:	3342      	adds	r3, #66	; 0x42
 8007480:	2203      	movs	r2, #3
 8007482:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8007484:	78fa      	ldrb	r2, [r7, #3]
 8007486:	6879      	ldr	r1, [r7, #4]
 8007488:	4613      	mov	r3, r2
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	4413      	add	r3, r2
 800748e:	00db      	lsls	r3, r3, #3
 8007490:	440b      	add	r3, r1
 8007492:	333d      	adds	r3, #61	; 0x3d
 8007494:	7f3a      	ldrb	r2, [r7, #28]
 8007496:	701a      	strb	r2, [r3, #0]
 8007498:	e009      	b.n	80074ae <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800749a:	78fa      	ldrb	r2, [r7, #3]
 800749c:	6879      	ldr	r1, [r7, #4]
 800749e:	4613      	mov	r3, r2
 80074a0:	009b      	lsls	r3, r3, #2
 80074a2:	4413      	add	r3, r2
 80074a4:	00db      	lsls	r3, r3, #3
 80074a6:	440b      	add	r3, r1
 80074a8:	3342      	adds	r3, #66	; 0x42
 80074aa:	2202      	movs	r2, #2
 80074ac:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80074ae:	787b      	ldrb	r3, [r7, #1]
 80074b0:	2b03      	cmp	r3, #3
 80074b2:	f200 80d6 	bhi.w	8007662 <HAL_HCD_HC_SubmitRequest+0x23a>
 80074b6:	a201      	add	r2, pc, #4	; (adr r2, 80074bc <HAL_HCD_HC_SubmitRequest+0x94>)
 80074b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074bc:	080074cd 	.word	0x080074cd
 80074c0:	0800764d 	.word	0x0800764d
 80074c4:	08007539 	.word	0x08007539
 80074c8:	080075c3 	.word	0x080075c3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80074cc:	7c3b      	ldrb	r3, [r7, #16]
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	f040 80c9 	bne.w	8007666 <HAL_HCD_HC_SubmitRequest+0x23e>
 80074d4:	78bb      	ldrb	r3, [r7, #2]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	f040 80c5 	bne.w	8007666 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 80074dc:	8b3b      	ldrh	r3, [r7, #24]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d109      	bne.n	80074f6 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80074e2:	78fa      	ldrb	r2, [r7, #3]
 80074e4:	6879      	ldr	r1, [r7, #4]
 80074e6:	4613      	mov	r3, r2
 80074e8:	009b      	lsls	r3, r3, #2
 80074ea:	4413      	add	r3, r2
 80074ec:	00db      	lsls	r3, r3, #3
 80074ee:	440b      	add	r3, r1
 80074f0:	3351      	adds	r3, #81	; 0x51
 80074f2:	2201      	movs	r2, #1
 80074f4:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80074f6:	78fa      	ldrb	r2, [r7, #3]
 80074f8:	6879      	ldr	r1, [r7, #4]
 80074fa:	4613      	mov	r3, r2
 80074fc:	009b      	lsls	r3, r3, #2
 80074fe:	4413      	add	r3, r2
 8007500:	00db      	lsls	r3, r3, #3
 8007502:	440b      	add	r3, r1
 8007504:	3351      	adds	r3, #81	; 0x51
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d10a      	bne.n	8007522 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800750c:	78fa      	ldrb	r2, [r7, #3]
 800750e:	6879      	ldr	r1, [r7, #4]
 8007510:	4613      	mov	r3, r2
 8007512:	009b      	lsls	r3, r3, #2
 8007514:	4413      	add	r3, r2
 8007516:	00db      	lsls	r3, r3, #3
 8007518:	440b      	add	r3, r1
 800751a:	3342      	adds	r3, #66	; 0x42
 800751c:	2200      	movs	r2, #0
 800751e:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8007520:	e0a1      	b.n	8007666 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007522:	78fa      	ldrb	r2, [r7, #3]
 8007524:	6879      	ldr	r1, [r7, #4]
 8007526:	4613      	mov	r3, r2
 8007528:	009b      	lsls	r3, r3, #2
 800752a:	4413      	add	r3, r2
 800752c:	00db      	lsls	r3, r3, #3
 800752e:	440b      	add	r3, r1
 8007530:	3342      	adds	r3, #66	; 0x42
 8007532:	2202      	movs	r2, #2
 8007534:	701a      	strb	r2, [r3, #0]
      break;
 8007536:	e096      	b.n	8007666 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8007538:	78bb      	ldrb	r3, [r7, #2]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d120      	bne.n	8007580 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800753e:	78fa      	ldrb	r2, [r7, #3]
 8007540:	6879      	ldr	r1, [r7, #4]
 8007542:	4613      	mov	r3, r2
 8007544:	009b      	lsls	r3, r3, #2
 8007546:	4413      	add	r3, r2
 8007548:	00db      	lsls	r3, r3, #3
 800754a:	440b      	add	r3, r1
 800754c:	3351      	adds	r3, #81	; 0x51
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d10a      	bne.n	800756a <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007554:	78fa      	ldrb	r2, [r7, #3]
 8007556:	6879      	ldr	r1, [r7, #4]
 8007558:	4613      	mov	r3, r2
 800755a:	009b      	lsls	r3, r3, #2
 800755c:	4413      	add	r3, r2
 800755e:	00db      	lsls	r3, r3, #3
 8007560:	440b      	add	r3, r1
 8007562:	3342      	adds	r3, #66	; 0x42
 8007564:	2200      	movs	r2, #0
 8007566:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8007568:	e07e      	b.n	8007668 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800756a:	78fa      	ldrb	r2, [r7, #3]
 800756c:	6879      	ldr	r1, [r7, #4]
 800756e:	4613      	mov	r3, r2
 8007570:	009b      	lsls	r3, r3, #2
 8007572:	4413      	add	r3, r2
 8007574:	00db      	lsls	r3, r3, #3
 8007576:	440b      	add	r3, r1
 8007578:	3342      	adds	r3, #66	; 0x42
 800757a:	2202      	movs	r2, #2
 800757c:	701a      	strb	r2, [r3, #0]
      break;
 800757e:	e073      	b.n	8007668 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8007580:	78fa      	ldrb	r2, [r7, #3]
 8007582:	6879      	ldr	r1, [r7, #4]
 8007584:	4613      	mov	r3, r2
 8007586:	009b      	lsls	r3, r3, #2
 8007588:	4413      	add	r3, r2
 800758a:	00db      	lsls	r3, r3, #3
 800758c:	440b      	add	r3, r1
 800758e:	3350      	adds	r3, #80	; 0x50
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d10a      	bne.n	80075ac <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007596:	78fa      	ldrb	r2, [r7, #3]
 8007598:	6879      	ldr	r1, [r7, #4]
 800759a:	4613      	mov	r3, r2
 800759c:	009b      	lsls	r3, r3, #2
 800759e:	4413      	add	r3, r2
 80075a0:	00db      	lsls	r3, r3, #3
 80075a2:	440b      	add	r3, r1
 80075a4:	3342      	adds	r3, #66	; 0x42
 80075a6:	2200      	movs	r2, #0
 80075a8:	701a      	strb	r2, [r3, #0]
      break;
 80075aa:	e05d      	b.n	8007668 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80075ac:	78fa      	ldrb	r2, [r7, #3]
 80075ae:	6879      	ldr	r1, [r7, #4]
 80075b0:	4613      	mov	r3, r2
 80075b2:	009b      	lsls	r3, r3, #2
 80075b4:	4413      	add	r3, r2
 80075b6:	00db      	lsls	r3, r3, #3
 80075b8:	440b      	add	r3, r1
 80075ba:	3342      	adds	r3, #66	; 0x42
 80075bc:	2202      	movs	r2, #2
 80075be:	701a      	strb	r2, [r3, #0]
      break;
 80075c0:	e052      	b.n	8007668 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80075c2:	78bb      	ldrb	r3, [r7, #2]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d120      	bne.n	800760a <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80075c8:	78fa      	ldrb	r2, [r7, #3]
 80075ca:	6879      	ldr	r1, [r7, #4]
 80075cc:	4613      	mov	r3, r2
 80075ce:	009b      	lsls	r3, r3, #2
 80075d0:	4413      	add	r3, r2
 80075d2:	00db      	lsls	r3, r3, #3
 80075d4:	440b      	add	r3, r1
 80075d6:	3351      	adds	r3, #81	; 0x51
 80075d8:	781b      	ldrb	r3, [r3, #0]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d10a      	bne.n	80075f4 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80075de:	78fa      	ldrb	r2, [r7, #3]
 80075e0:	6879      	ldr	r1, [r7, #4]
 80075e2:	4613      	mov	r3, r2
 80075e4:	009b      	lsls	r3, r3, #2
 80075e6:	4413      	add	r3, r2
 80075e8:	00db      	lsls	r3, r3, #3
 80075ea:	440b      	add	r3, r1
 80075ec:	3342      	adds	r3, #66	; 0x42
 80075ee:	2200      	movs	r2, #0
 80075f0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80075f2:	e039      	b.n	8007668 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80075f4:	78fa      	ldrb	r2, [r7, #3]
 80075f6:	6879      	ldr	r1, [r7, #4]
 80075f8:	4613      	mov	r3, r2
 80075fa:	009b      	lsls	r3, r3, #2
 80075fc:	4413      	add	r3, r2
 80075fe:	00db      	lsls	r3, r3, #3
 8007600:	440b      	add	r3, r1
 8007602:	3342      	adds	r3, #66	; 0x42
 8007604:	2202      	movs	r2, #2
 8007606:	701a      	strb	r2, [r3, #0]
      break;
 8007608:	e02e      	b.n	8007668 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800760a:	78fa      	ldrb	r2, [r7, #3]
 800760c:	6879      	ldr	r1, [r7, #4]
 800760e:	4613      	mov	r3, r2
 8007610:	009b      	lsls	r3, r3, #2
 8007612:	4413      	add	r3, r2
 8007614:	00db      	lsls	r3, r3, #3
 8007616:	440b      	add	r3, r1
 8007618:	3350      	adds	r3, #80	; 0x50
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d10a      	bne.n	8007636 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007620:	78fa      	ldrb	r2, [r7, #3]
 8007622:	6879      	ldr	r1, [r7, #4]
 8007624:	4613      	mov	r3, r2
 8007626:	009b      	lsls	r3, r3, #2
 8007628:	4413      	add	r3, r2
 800762a:	00db      	lsls	r3, r3, #3
 800762c:	440b      	add	r3, r1
 800762e:	3342      	adds	r3, #66	; 0x42
 8007630:	2200      	movs	r2, #0
 8007632:	701a      	strb	r2, [r3, #0]
      break;
 8007634:	e018      	b.n	8007668 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007636:	78fa      	ldrb	r2, [r7, #3]
 8007638:	6879      	ldr	r1, [r7, #4]
 800763a:	4613      	mov	r3, r2
 800763c:	009b      	lsls	r3, r3, #2
 800763e:	4413      	add	r3, r2
 8007640:	00db      	lsls	r3, r3, #3
 8007642:	440b      	add	r3, r1
 8007644:	3342      	adds	r3, #66	; 0x42
 8007646:	2202      	movs	r2, #2
 8007648:	701a      	strb	r2, [r3, #0]
      break;
 800764a:	e00d      	b.n	8007668 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800764c:	78fa      	ldrb	r2, [r7, #3]
 800764e:	6879      	ldr	r1, [r7, #4]
 8007650:	4613      	mov	r3, r2
 8007652:	009b      	lsls	r3, r3, #2
 8007654:	4413      	add	r3, r2
 8007656:	00db      	lsls	r3, r3, #3
 8007658:	440b      	add	r3, r1
 800765a:	3342      	adds	r3, #66	; 0x42
 800765c:	2200      	movs	r2, #0
 800765e:	701a      	strb	r2, [r3, #0]
      break;
 8007660:	e002      	b.n	8007668 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8007662:	bf00      	nop
 8007664:	e000      	b.n	8007668 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8007666:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8007668:	78fa      	ldrb	r2, [r7, #3]
 800766a:	6879      	ldr	r1, [r7, #4]
 800766c:	4613      	mov	r3, r2
 800766e:	009b      	lsls	r3, r3, #2
 8007670:	4413      	add	r3, r2
 8007672:	00db      	lsls	r3, r3, #3
 8007674:	440b      	add	r3, r1
 8007676:	3344      	adds	r3, #68	; 0x44
 8007678:	697a      	ldr	r2, [r7, #20]
 800767a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800767c:	78fa      	ldrb	r2, [r7, #3]
 800767e:	8b39      	ldrh	r1, [r7, #24]
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	4613      	mov	r3, r2
 8007684:	009b      	lsls	r3, r3, #2
 8007686:	4413      	add	r3, r2
 8007688:	00db      	lsls	r3, r3, #3
 800768a:	4403      	add	r3, r0
 800768c:	3348      	adds	r3, #72	; 0x48
 800768e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8007690:	78fa      	ldrb	r2, [r7, #3]
 8007692:	6879      	ldr	r1, [r7, #4]
 8007694:	4613      	mov	r3, r2
 8007696:	009b      	lsls	r3, r3, #2
 8007698:	4413      	add	r3, r2
 800769a:	00db      	lsls	r3, r3, #3
 800769c:	440b      	add	r3, r1
 800769e:	335c      	adds	r3, #92	; 0x5c
 80076a0:	2200      	movs	r2, #0
 80076a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80076a4:	78fa      	ldrb	r2, [r7, #3]
 80076a6:	6879      	ldr	r1, [r7, #4]
 80076a8:	4613      	mov	r3, r2
 80076aa:	009b      	lsls	r3, r3, #2
 80076ac:	4413      	add	r3, r2
 80076ae:	00db      	lsls	r3, r3, #3
 80076b0:	440b      	add	r3, r1
 80076b2:	334c      	adds	r3, #76	; 0x4c
 80076b4:	2200      	movs	r2, #0
 80076b6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80076b8:	78fa      	ldrb	r2, [r7, #3]
 80076ba:	6879      	ldr	r1, [r7, #4]
 80076bc:	4613      	mov	r3, r2
 80076be:	009b      	lsls	r3, r3, #2
 80076c0:	4413      	add	r3, r2
 80076c2:	00db      	lsls	r3, r3, #3
 80076c4:	440b      	add	r3, r1
 80076c6:	3339      	adds	r3, #57	; 0x39
 80076c8:	78fa      	ldrb	r2, [r7, #3]
 80076ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80076cc:	78fa      	ldrb	r2, [r7, #3]
 80076ce:	6879      	ldr	r1, [r7, #4]
 80076d0:	4613      	mov	r3, r2
 80076d2:	009b      	lsls	r3, r3, #2
 80076d4:	4413      	add	r3, r2
 80076d6:	00db      	lsls	r3, r3, #3
 80076d8:	440b      	add	r3, r1
 80076da:	335d      	adds	r3, #93	; 0x5d
 80076dc:	2200      	movs	r2, #0
 80076de:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6818      	ldr	r0, [r3, #0]
 80076e4:	78fa      	ldrb	r2, [r7, #3]
 80076e6:	4613      	mov	r3, r2
 80076e8:	009b      	lsls	r3, r3, #2
 80076ea:	4413      	add	r3, r2
 80076ec:	00db      	lsls	r3, r3, #3
 80076ee:	3338      	adds	r3, #56	; 0x38
 80076f0:	687a      	ldr	r2, [r7, #4]
 80076f2:	18d1      	adds	r1, r2, r3
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	691b      	ldr	r3, [r3, #16]
 80076f8:	b2db      	uxtb	r3, r3
 80076fa:	461a      	mov	r2, r3
 80076fc:	f003 fc56 	bl	800afac <USB_HC_StartXfer>
 8007700:	4603      	mov	r3, r0
}
 8007702:	4618      	mov	r0, r3
 8007704:	3708      	adds	r7, #8
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}
 800770a:	bf00      	nop

0800770c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b086      	sub	sp, #24
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4618      	mov	r0, r3
 8007724:	f003 f973 	bl	800aa0e <USB_GetMode>
 8007728:	4603      	mov	r3, r0
 800772a:	2b01      	cmp	r3, #1
 800772c:	f040 80ef 	bne.w	800790e <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4618      	mov	r0, r3
 8007736:	f003 f957 	bl	800a9e8 <USB_ReadInterrupts>
 800773a:	4603      	mov	r3, r0
 800773c:	2b00      	cmp	r3, #0
 800773e:	f000 80e5 	beq.w	800790c <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4618      	mov	r0, r3
 8007748:	f003 f94e 	bl	800a9e8 <USB_ReadInterrupts>
 800774c:	4603      	mov	r3, r0
 800774e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007752:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007756:	d104      	bne.n	8007762 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007760:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4618      	mov	r0, r3
 8007768:	f003 f93e 	bl	800a9e8 <USB_ReadInterrupts>
 800776c:	4603      	mov	r3, r0
 800776e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007772:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007776:	d104      	bne.n	8007782 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007780:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4618      	mov	r0, r3
 8007788:	f003 f92e 	bl	800a9e8 <USB_ReadInterrupts>
 800778c:	4603      	mov	r3, r0
 800778e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007792:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007796:	d104      	bne.n	80077a2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80077a0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4618      	mov	r0, r3
 80077a8:	f003 f91e 	bl	800a9e8 <USB_ReadInterrupts>
 80077ac:	4603      	mov	r3, r0
 80077ae:	f003 0302 	and.w	r3, r3, #2
 80077b2:	2b02      	cmp	r3, #2
 80077b4:	d103      	bne.n	80077be <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	2202      	movs	r2, #2
 80077bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4618      	mov	r0, r3
 80077c4:	f003 f910 	bl	800a9e8 <USB_ReadInterrupts>
 80077c8:	4603      	mov	r3, r0
 80077ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80077ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80077d2:	d115      	bne.n	8007800 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80077dc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f003 0301 	and.w	r3, r3, #1
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d108      	bne.n	8007800 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f005 fec8 	bl	800d584 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	2101      	movs	r1, #1
 80077fa:	4618      	mov	r0, r3
 80077fc:	f003 fa06 	bl	800ac0c <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4618      	mov	r0, r3
 8007806:	f003 f8ef 	bl	800a9e8 <USB_ReadInterrupts>
 800780a:	4603      	mov	r3, r0
 800780c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007810:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007814:	d102      	bne.n	800781c <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f001 f966 	bl	8008ae8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4618      	mov	r0, r3
 8007822:	f003 f8e1 	bl	800a9e8 <USB_ReadInterrupts>
 8007826:	4603      	mov	r3, r0
 8007828:	f003 0308 	and.w	r3, r3, #8
 800782c:	2b08      	cmp	r3, #8
 800782e:	d106      	bne.n	800783e <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f005 fe8b 	bl	800d54c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	2208      	movs	r2, #8
 800783c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4618      	mov	r0, r3
 8007844:	f003 f8d0 	bl	800a9e8 <USB_ReadInterrupts>
 8007848:	4603      	mov	r3, r0
 800784a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800784e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007852:	d138      	bne.n	80078c6 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4618      	mov	r0, r3
 800785a:	f003 fced 	bl	800b238 <USB_HC_ReadInterrupt>
 800785e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8007860:	2300      	movs	r3, #0
 8007862:	617b      	str	r3, [r7, #20]
 8007864:	e025      	b.n	80078b2 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	f003 030f 	and.w	r3, r3, #15
 800786c:	68ba      	ldr	r2, [r7, #8]
 800786e:	fa22 f303 	lsr.w	r3, r2, r3
 8007872:	f003 0301 	and.w	r3, r3, #1
 8007876:	2b00      	cmp	r3, #0
 8007878:	d018      	beq.n	80078ac <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	015a      	lsls	r2, r3, #5
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	4413      	add	r3, r2
 8007882:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800788c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007890:	d106      	bne.n	80078a0 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	b2db      	uxtb	r3, r3
 8007896:	4619      	mov	r1, r3
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 f8cf 	bl	8007a3c <HCD_HC_IN_IRQHandler>
 800789e:	e005      	b.n	80078ac <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	b2db      	uxtb	r3, r3
 80078a4:	4619      	mov	r1, r3
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 fcfd 	bl	80082a6 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	3301      	adds	r3, #1
 80078b0:	617b      	str	r3, [r7, #20]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	689b      	ldr	r3, [r3, #8]
 80078b6:	697a      	ldr	r2, [r7, #20]
 80078b8:	429a      	cmp	r2, r3
 80078ba:	d3d4      	bcc.n	8007866 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80078c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4618      	mov	r0, r3
 80078cc:	f003 f88c 	bl	800a9e8 <USB_ReadInterrupts>
 80078d0:	4603      	mov	r3, r0
 80078d2:	f003 0310 	and.w	r3, r3, #16
 80078d6:	2b10      	cmp	r3, #16
 80078d8:	d101      	bne.n	80078de <HAL_HCD_IRQHandler+0x1d2>
 80078da:	2301      	movs	r3, #1
 80078dc:	e000      	b.n	80078e0 <HAL_HCD_IRQHandler+0x1d4>
 80078de:	2300      	movs	r3, #0
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d014      	beq.n	800790e <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	699a      	ldr	r2, [r3, #24]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f022 0210 	bic.w	r2, r2, #16
 80078f2:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f001 f84b 	bl	8008990 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	699a      	ldr	r2, [r3, #24]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f042 0210 	orr.w	r2, r2, #16
 8007908:	619a      	str	r2, [r3, #24]
 800790a:	e000      	b.n	800790e <HAL_HCD_IRQHandler+0x202>
      return;
 800790c:	bf00      	nop
    }
  }
}
 800790e:	3718      	adds	r7, #24
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}

08007914 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b082      	sub	sp, #8
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8007922:	2b01      	cmp	r3, #1
 8007924:	d101      	bne.n	800792a <HAL_HCD_Start+0x16>
 8007926:	2302      	movs	r3, #2
 8007928:	e013      	b.n	8007952 <HAL_HCD_Start+0x3e>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2201      	movs	r2, #1
 800792e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4618      	mov	r0, r3
 8007938:	f002 ff63 	bl	800a802 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	2101      	movs	r1, #1
 8007942:	4618      	mov	r0, r3
 8007944:	f003 f9c6 	bl	800acd4 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2200      	movs	r2, #0
 800794c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8007950:	2300      	movs	r3, #0
}
 8007952:	4618      	mov	r0, r3
 8007954:	3708      	adds	r7, #8
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}

0800795a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800795a:	b580      	push	{r7, lr}
 800795c:	b082      	sub	sp, #8
 800795e:	af00      	add	r7, sp, #0
 8007960:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8007968:	2b01      	cmp	r3, #1
 800796a:	d101      	bne.n	8007970 <HAL_HCD_Stop+0x16>
 800796c:	2302      	movs	r3, #2
 800796e:	e00d      	b.n	800798c <HAL_HCD_Stop+0x32>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2201      	movs	r2, #1
 8007974:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4618      	mov	r0, r3
 800797e:	f003 fda7 	bl	800b4d0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2200      	movs	r2, #0
 8007986:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 800798a:	2300      	movs	r3, #0
}
 800798c:	4618      	mov	r0, r3
 800798e:	3708      	adds	r7, #8
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}

08007994 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b082      	sub	sp, #8
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4618      	mov	r0, r3
 80079a2:	f003 f96d 	bl	800ac80 <USB_ResetPort>
 80079a6:	4603      	mov	r3, r0
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	3708      	adds	r7, #8
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}

080079b0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b083      	sub	sp, #12
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	460b      	mov	r3, r1
 80079ba:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80079bc:	78fa      	ldrb	r2, [r7, #3]
 80079be:	6879      	ldr	r1, [r7, #4]
 80079c0:	4613      	mov	r3, r2
 80079c2:	009b      	lsls	r3, r3, #2
 80079c4:	4413      	add	r3, r2
 80079c6:	00db      	lsls	r3, r3, #3
 80079c8:	440b      	add	r3, r1
 80079ca:	335c      	adds	r3, #92	; 0x5c
 80079cc:	781b      	ldrb	r3, [r3, #0]
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	370c      	adds	r7, #12
 80079d2:	46bd      	mov	sp, r7
 80079d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d8:	4770      	bx	lr

080079da <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80079da:	b480      	push	{r7}
 80079dc:	b083      	sub	sp, #12
 80079de:	af00      	add	r7, sp, #0
 80079e0:	6078      	str	r0, [r7, #4]
 80079e2:	460b      	mov	r3, r1
 80079e4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80079e6:	78fa      	ldrb	r2, [r7, #3]
 80079e8:	6879      	ldr	r1, [r7, #4]
 80079ea:	4613      	mov	r3, r2
 80079ec:	009b      	lsls	r3, r3, #2
 80079ee:	4413      	add	r3, r2
 80079f0:	00db      	lsls	r3, r3, #3
 80079f2:	440b      	add	r3, r1
 80079f4:	334c      	adds	r3, #76	; 0x4c
 80079f6:	681b      	ldr	r3, [r3, #0]
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	370c      	adds	r7, #12
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr

08007a04 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b082      	sub	sp, #8
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4618      	mov	r0, r3
 8007a12:	f003 f9af 	bl	800ad74 <USB_GetCurrentFrame>
 8007a16:	4603      	mov	r3, r0
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3708      	adds	r7, #8
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b082      	sub	sp, #8
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f003 f98a 	bl	800ad46 <USB_GetHostSpeed>
 8007a32:	4603      	mov	r3, r0
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	3708      	adds	r7, #8
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}

08007a3c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b086      	sub	sp, #24
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	460b      	mov	r3, r1
 8007a46:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8007a52:	78fb      	ldrb	r3, [r7, #3]
 8007a54:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	015a      	lsls	r2, r3, #5
 8007a5a:	693b      	ldr	r3, [r7, #16]
 8007a5c:	4413      	add	r3, r2
 8007a5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a62:	689b      	ldr	r3, [r3, #8]
 8007a64:	f003 0304 	and.w	r3, r3, #4
 8007a68:	2b04      	cmp	r3, #4
 8007a6a:	d119      	bne.n	8007aa0 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	015a      	lsls	r2, r3, #5
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	4413      	add	r3, r2
 8007a74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a78:	461a      	mov	r2, r3
 8007a7a:	2304      	movs	r3, #4
 8007a7c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	015a      	lsls	r2, r3, #5
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	4413      	add	r3, r2
 8007a86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a8a:	68db      	ldr	r3, [r3, #12]
 8007a8c:	68fa      	ldr	r2, [r7, #12]
 8007a8e:	0151      	lsls	r1, r2, #5
 8007a90:	693a      	ldr	r2, [r7, #16]
 8007a92:	440a      	add	r2, r1
 8007a94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a98:	f043 0302 	orr.w	r3, r3, #2
 8007a9c:	60d3      	str	r3, [r2, #12]
 8007a9e:	e0ce      	b.n	8007c3e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	015a      	lsls	r2, r3, #5
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	4413      	add	r3, r2
 8007aa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007aac:	689b      	ldr	r3, [r3, #8]
 8007aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ab2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ab6:	d12c      	bne.n	8007b12 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	015a      	lsls	r2, r3, #5
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	4413      	add	r3, r2
 8007ac0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ac4:	461a      	mov	r2, r3
 8007ac6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007aca:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8007acc:	6879      	ldr	r1, [r7, #4]
 8007ace:	68fa      	ldr	r2, [r7, #12]
 8007ad0:	4613      	mov	r3, r2
 8007ad2:	009b      	lsls	r3, r3, #2
 8007ad4:	4413      	add	r3, r2
 8007ad6:	00db      	lsls	r3, r3, #3
 8007ad8:	440b      	add	r3, r1
 8007ada:	335d      	adds	r3, #93	; 0x5d
 8007adc:	2207      	movs	r2, #7
 8007ade:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	015a      	lsls	r2, r3, #5
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	4413      	add	r3, r2
 8007ae8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007aec:	68db      	ldr	r3, [r3, #12]
 8007aee:	68fa      	ldr	r2, [r7, #12]
 8007af0:	0151      	lsls	r1, r2, #5
 8007af2:	693a      	ldr	r2, [r7, #16]
 8007af4:	440a      	add	r2, r1
 8007af6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007afa:	f043 0302 	orr.w	r3, r3, #2
 8007afe:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	68fa      	ldr	r2, [r7, #12]
 8007b06:	b2d2      	uxtb	r2, r2
 8007b08:	4611      	mov	r1, r2
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f003 fba5 	bl	800b25a <USB_HC_Halt>
 8007b10:	e095      	b.n	8007c3e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	015a      	lsls	r2, r3, #5
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	4413      	add	r3, r2
 8007b1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b1e:	689b      	ldr	r3, [r3, #8]
 8007b20:	f003 0320 	and.w	r3, r3, #32
 8007b24:	2b20      	cmp	r3, #32
 8007b26:	d109      	bne.n	8007b3c <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	015a      	lsls	r2, r3, #5
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	4413      	add	r3, r2
 8007b30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b34:	461a      	mov	r2, r3
 8007b36:	2320      	movs	r3, #32
 8007b38:	6093      	str	r3, [r2, #8]
 8007b3a:	e080      	b.n	8007c3e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	015a      	lsls	r2, r3, #5
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	4413      	add	r3, r2
 8007b44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b48:	689b      	ldr	r3, [r3, #8]
 8007b4a:	f003 0308 	and.w	r3, r3, #8
 8007b4e:	2b08      	cmp	r3, #8
 8007b50:	d134      	bne.n	8007bbc <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	015a      	lsls	r2, r3, #5
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	4413      	add	r3, r2
 8007b5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b5e:	68db      	ldr	r3, [r3, #12]
 8007b60:	68fa      	ldr	r2, [r7, #12]
 8007b62:	0151      	lsls	r1, r2, #5
 8007b64:	693a      	ldr	r2, [r7, #16]
 8007b66:	440a      	add	r2, r1
 8007b68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b6c:	f043 0302 	orr.w	r3, r3, #2
 8007b70:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8007b72:	6879      	ldr	r1, [r7, #4]
 8007b74:	68fa      	ldr	r2, [r7, #12]
 8007b76:	4613      	mov	r3, r2
 8007b78:	009b      	lsls	r3, r3, #2
 8007b7a:	4413      	add	r3, r2
 8007b7c:	00db      	lsls	r3, r3, #3
 8007b7e:	440b      	add	r3, r1
 8007b80:	335d      	adds	r3, #93	; 0x5d
 8007b82:	2205      	movs	r2, #5
 8007b84:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	015a      	lsls	r2, r3, #5
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	4413      	add	r3, r2
 8007b8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b92:	461a      	mov	r2, r3
 8007b94:	2310      	movs	r3, #16
 8007b96:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	015a      	lsls	r2, r3, #5
 8007b9c:	693b      	ldr	r3, [r7, #16]
 8007b9e:	4413      	add	r3, r2
 8007ba0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ba4:	461a      	mov	r2, r3
 8007ba6:	2308      	movs	r3, #8
 8007ba8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	68fa      	ldr	r2, [r7, #12]
 8007bb0:	b2d2      	uxtb	r2, r2
 8007bb2:	4611      	mov	r1, r2
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f003 fb50 	bl	800b25a <USB_HC_Halt>
 8007bba:	e040      	b.n	8007c3e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	015a      	lsls	r2, r3, #5
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	4413      	add	r3, r2
 8007bc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bc8:	689b      	ldr	r3, [r3, #8]
 8007bca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bd2:	d134      	bne.n	8007c3e <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	015a      	lsls	r2, r3, #5
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	4413      	add	r3, r2
 8007bdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007be0:	68db      	ldr	r3, [r3, #12]
 8007be2:	68fa      	ldr	r2, [r7, #12]
 8007be4:	0151      	lsls	r1, r2, #5
 8007be6:	693a      	ldr	r2, [r7, #16]
 8007be8:	440a      	add	r2, r1
 8007bea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007bee:	f043 0302 	orr.w	r3, r3, #2
 8007bf2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	68fa      	ldr	r2, [r7, #12]
 8007bfa:	b2d2      	uxtb	r2, r2
 8007bfc:	4611      	mov	r1, r2
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f003 fb2b 	bl	800b25a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	015a      	lsls	r2, r3, #5
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	4413      	add	r3, r2
 8007c0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c10:	461a      	mov	r2, r3
 8007c12:	2310      	movs	r3, #16
 8007c14:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8007c16:	6879      	ldr	r1, [r7, #4]
 8007c18:	68fa      	ldr	r2, [r7, #12]
 8007c1a:	4613      	mov	r3, r2
 8007c1c:	009b      	lsls	r3, r3, #2
 8007c1e:	4413      	add	r3, r2
 8007c20:	00db      	lsls	r3, r3, #3
 8007c22:	440b      	add	r3, r1
 8007c24:	335d      	adds	r3, #93	; 0x5d
 8007c26:	2208      	movs	r2, #8
 8007c28:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	015a      	lsls	r2, r3, #5
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	4413      	add	r3, r2
 8007c32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c36:	461a      	mov	r2, r3
 8007c38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c3c:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	015a      	lsls	r2, r3, #5
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	4413      	add	r3, r2
 8007c46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c4a:	689b      	ldr	r3, [r3, #8]
 8007c4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c54:	d122      	bne.n	8007c9c <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	015a      	lsls	r2, r3, #5
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	4413      	add	r3, r2
 8007c5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c62:	68db      	ldr	r3, [r3, #12]
 8007c64:	68fa      	ldr	r2, [r7, #12]
 8007c66:	0151      	lsls	r1, r2, #5
 8007c68:	693a      	ldr	r2, [r7, #16]
 8007c6a:	440a      	add	r2, r1
 8007c6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c70:	f043 0302 	orr.w	r3, r3, #2
 8007c74:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	68fa      	ldr	r2, [r7, #12]
 8007c7c:	b2d2      	uxtb	r2, r2
 8007c7e:	4611      	mov	r1, r2
 8007c80:	4618      	mov	r0, r3
 8007c82:	f003 faea 	bl	800b25a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	015a      	lsls	r2, r3, #5
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	4413      	add	r3, r2
 8007c8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c92:	461a      	mov	r2, r3
 8007c94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c98:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8007c9a:	e300      	b.n	800829e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	015a      	lsls	r2, r3, #5
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	4413      	add	r3, r2
 8007ca4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ca8:	689b      	ldr	r3, [r3, #8]
 8007caa:	f003 0301 	and.w	r3, r3, #1
 8007cae:	2b01      	cmp	r3, #1
 8007cb0:	f040 80fd 	bne.w	8007eae <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	691b      	ldr	r3, [r3, #16]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d01b      	beq.n	8007cf4 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8007cbc:	6879      	ldr	r1, [r7, #4]
 8007cbe:	68fa      	ldr	r2, [r7, #12]
 8007cc0:	4613      	mov	r3, r2
 8007cc2:	009b      	lsls	r3, r3, #2
 8007cc4:	4413      	add	r3, r2
 8007cc6:	00db      	lsls	r3, r3, #3
 8007cc8:	440b      	add	r3, r1
 8007cca:	3348      	adds	r3, #72	; 0x48
 8007ccc:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	0159      	lsls	r1, r3, #5
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	440b      	add	r3, r1
 8007cd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cda:	691b      	ldr	r3, [r3, #16]
 8007cdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8007ce0:	1ad1      	subs	r1, r2, r3
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	68fa      	ldr	r2, [r7, #12]
 8007ce6:	4613      	mov	r3, r2
 8007ce8:	009b      	lsls	r3, r3, #2
 8007cea:	4413      	add	r3, r2
 8007cec:	00db      	lsls	r3, r3, #3
 8007cee:	4403      	add	r3, r0
 8007cf0:	334c      	adds	r3, #76	; 0x4c
 8007cf2:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8007cf4:	6879      	ldr	r1, [r7, #4]
 8007cf6:	68fa      	ldr	r2, [r7, #12]
 8007cf8:	4613      	mov	r3, r2
 8007cfa:	009b      	lsls	r3, r3, #2
 8007cfc:	4413      	add	r3, r2
 8007cfe:	00db      	lsls	r3, r3, #3
 8007d00:	440b      	add	r3, r1
 8007d02:	335d      	adds	r3, #93	; 0x5d
 8007d04:	2201      	movs	r2, #1
 8007d06:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8007d08:	6879      	ldr	r1, [r7, #4]
 8007d0a:	68fa      	ldr	r2, [r7, #12]
 8007d0c:	4613      	mov	r3, r2
 8007d0e:	009b      	lsls	r3, r3, #2
 8007d10:	4413      	add	r3, r2
 8007d12:	00db      	lsls	r3, r3, #3
 8007d14:	440b      	add	r3, r1
 8007d16:	3358      	adds	r3, #88	; 0x58
 8007d18:	2200      	movs	r2, #0
 8007d1a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	015a      	lsls	r2, r3, #5
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	4413      	add	r3, r2
 8007d24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d28:	461a      	mov	r2, r3
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8007d2e:	6879      	ldr	r1, [r7, #4]
 8007d30:	68fa      	ldr	r2, [r7, #12]
 8007d32:	4613      	mov	r3, r2
 8007d34:	009b      	lsls	r3, r3, #2
 8007d36:	4413      	add	r3, r2
 8007d38:	00db      	lsls	r3, r3, #3
 8007d3a:	440b      	add	r3, r1
 8007d3c:	333f      	adds	r3, #63	; 0x3f
 8007d3e:	781b      	ldrb	r3, [r3, #0]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d00a      	beq.n	8007d5a <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8007d44:	6879      	ldr	r1, [r7, #4]
 8007d46:	68fa      	ldr	r2, [r7, #12]
 8007d48:	4613      	mov	r3, r2
 8007d4a:	009b      	lsls	r3, r3, #2
 8007d4c:	4413      	add	r3, r2
 8007d4e:	00db      	lsls	r3, r3, #3
 8007d50:	440b      	add	r3, r1
 8007d52:	333f      	adds	r3, #63	; 0x3f
 8007d54:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8007d56:	2b02      	cmp	r3, #2
 8007d58:	d121      	bne.n	8007d9e <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	015a      	lsls	r2, r3, #5
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	4413      	add	r3, r2
 8007d62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d66:	68db      	ldr	r3, [r3, #12]
 8007d68:	68fa      	ldr	r2, [r7, #12]
 8007d6a:	0151      	lsls	r1, r2, #5
 8007d6c:	693a      	ldr	r2, [r7, #16]
 8007d6e:	440a      	add	r2, r1
 8007d70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d74:	f043 0302 	orr.w	r3, r3, #2
 8007d78:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	68fa      	ldr	r2, [r7, #12]
 8007d80:	b2d2      	uxtb	r2, r2
 8007d82:	4611      	mov	r1, r2
 8007d84:	4618      	mov	r0, r3
 8007d86:	f003 fa68 	bl	800b25a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	015a      	lsls	r2, r3, #5
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	4413      	add	r3, r2
 8007d92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d96:	461a      	mov	r2, r3
 8007d98:	2310      	movs	r3, #16
 8007d9a:	6093      	str	r3, [r2, #8]
 8007d9c:	e070      	b.n	8007e80 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8007d9e:	6879      	ldr	r1, [r7, #4]
 8007da0:	68fa      	ldr	r2, [r7, #12]
 8007da2:	4613      	mov	r3, r2
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	4413      	add	r3, r2
 8007da8:	00db      	lsls	r3, r3, #3
 8007daa:	440b      	add	r3, r1
 8007dac:	333f      	adds	r3, #63	; 0x3f
 8007dae:	781b      	ldrb	r3, [r3, #0]
 8007db0:	2b03      	cmp	r3, #3
 8007db2:	d12a      	bne.n	8007e0a <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	015a      	lsls	r2, r3, #5
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	4413      	add	r3, r2
 8007dbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	68fa      	ldr	r2, [r7, #12]
 8007dc4:	0151      	lsls	r1, r2, #5
 8007dc6:	693a      	ldr	r2, [r7, #16]
 8007dc8:	440a      	add	r2, r1
 8007dca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007dce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007dd2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8007dd4:	6879      	ldr	r1, [r7, #4]
 8007dd6:	68fa      	ldr	r2, [r7, #12]
 8007dd8:	4613      	mov	r3, r2
 8007dda:	009b      	lsls	r3, r3, #2
 8007ddc:	4413      	add	r3, r2
 8007dde:	00db      	lsls	r3, r3, #3
 8007de0:	440b      	add	r3, r1
 8007de2:	335c      	adds	r3, #92	; 0x5c
 8007de4:	2201      	movs	r2, #1
 8007de6:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	b2d8      	uxtb	r0, r3
 8007dec:	6879      	ldr	r1, [r7, #4]
 8007dee:	68fa      	ldr	r2, [r7, #12]
 8007df0:	4613      	mov	r3, r2
 8007df2:	009b      	lsls	r3, r3, #2
 8007df4:	4413      	add	r3, r2
 8007df6:	00db      	lsls	r3, r3, #3
 8007df8:	440b      	add	r3, r1
 8007dfa:	335c      	adds	r3, #92	; 0x5c
 8007dfc:	781b      	ldrb	r3, [r3, #0]
 8007dfe:	461a      	mov	r2, r3
 8007e00:	4601      	mov	r1, r0
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f005 fbcc 	bl	800d5a0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8007e08:	e03a      	b.n	8007e80 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8007e0a:	6879      	ldr	r1, [r7, #4]
 8007e0c:	68fa      	ldr	r2, [r7, #12]
 8007e0e:	4613      	mov	r3, r2
 8007e10:	009b      	lsls	r3, r3, #2
 8007e12:	4413      	add	r3, r2
 8007e14:	00db      	lsls	r3, r3, #3
 8007e16:	440b      	add	r3, r1
 8007e18:	333f      	adds	r3, #63	; 0x3f
 8007e1a:	781b      	ldrb	r3, [r3, #0]
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	d12f      	bne.n	8007e80 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8007e20:	6879      	ldr	r1, [r7, #4]
 8007e22:	68fa      	ldr	r2, [r7, #12]
 8007e24:	4613      	mov	r3, r2
 8007e26:	009b      	lsls	r3, r3, #2
 8007e28:	4413      	add	r3, r2
 8007e2a:	00db      	lsls	r3, r3, #3
 8007e2c:	440b      	add	r3, r1
 8007e2e:	335c      	adds	r3, #92	; 0x5c
 8007e30:	2201      	movs	r2, #1
 8007e32:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8007e34:	6879      	ldr	r1, [r7, #4]
 8007e36:	68fa      	ldr	r2, [r7, #12]
 8007e38:	4613      	mov	r3, r2
 8007e3a:	009b      	lsls	r3, r3, #2
 8007e3c:	4413      	add	r3, r2
 8007e3e:	00db      	lsls	r3, r3, #3
 8007e40:	440b      	add	r3, r1
 8007e42:	3350      	adds	r3, #80	; 0x50
 8007e44:	781b      	ldrb	r3, [r3, #0]
 8007e46:	f083 0301 	eor.w	r3, r3, #1
 8007e4a:	b2d8      	uxtb	r0, r3
 8007e4c:	6879      	ldr	r1, [r7, #4]
 8007e4e:	68fa      	ldr	r2, [r7, #12]
 8007e50:	4613      	mov	r3, r2
 8007e52:	009b      	lsls	r3, r3, #2
 8007e54:	4413      	add	r3, r2
 8007e56:	00db      	lsls	r3, r3, #3
 8007e58:	440b      	add	r3, r1
 8007e5a:	3350      	adds	r3, #80	; 0x50
 8007e5c:	4602      	mov	r2, r0
 8007e5e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	b2d8      	uxtb	r0, r3
 8007e64:	6879      	ldr	r1, [r7, #4]
 8007e66:	68fa      	ldr	r2, [r7, #12]
 8007e68:	4613      	mov	r3, r2
 8007e6a:	009b      	lsls	r3, r3, #2
 8007e6c:	4413      	add	r3, r2
 8007e6e:	00db      	lsls	r3, r3, #3
 8007e70:	440b      	add	r3, r1
 8007e72:	335c      	adds	r3, #92	; 0x5c
 8007e74:	781b      	ldrb	r3, [r3, #0]
 8007e76:	461a      	mov	r2, r3
 8007e78:	4601      	mov	r1, r0
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f005 fb90 	bl	800d5a0 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8007e80:	6879      	ldr	r1, [r7, #4]
 8007e82:	68fa      	ldr	r2, [r7, #12]
 8007e84:	4613      	mov	r3, r2
 8007e86:	009b      	lsls	r3, r3, #2
 8007e88:	4413      	add	r3, r2
 8007e8a:	00db      	lsls	r3, r3, #3
 8007e8c:	440b      	add	r3, r1
 8007e8e:	3350      	adds	r3, #80	; 0x50
 8007e90:	781b      	ldrb	r3, [r3, #0]
 8007e92:	f083 0301 	eor.w	r3, r3, #1
 8007e96:	b2d8      	uxtb	r0, r3
 8007e98:	6879      	ldr	r1, [r7, #4]
 8007e9a:	68fa      	ldr	r2, [r7, #12]
 8007e9c:	4613      	mov	r3, r2
 8007e9e:	009b      	lsls	r3, r3, #2
 8007ea0:	4413      	add	r3, r2
 8007ea2:	00db      	lsls	r3, r3, #3
 8007ea4:	440b      	add	r3, r1
 8007ea6:	3350      	adds	r3, #80	; 0x50
 8007ea8:	4602      	mov	r2, r0
 8007eaa:	701a      	strb	r2, [r3, #0]
}
 8007eac:	e1f7      	b.n	800829e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	015a      	lsls	r2, r3, #5
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	4413      	add	r3, r2
 8007eb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007eba:	689b      	ldr	r3, [r3, #8]
 8007ebc:	f003 0302 	and.w	r3, r3, #2
 8007ec0:	2b02      	cmp	r3, #2
 8007ec2:	f040 811a 	bne.w	80080fa <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	015a      	lsls	r2, r3, #5
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	4413      	add	r3, r2
 8007ece:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ed2:	68db      	ldr	r3, [r3, #12]
 8007ed4:	68fa      	ldr	r2, [r7, #12]
 8007ed6:	0151      	lsls	r1, r2, #5
 8007ed8:	693a      	ldr	r2, [r7, #16]
 8007eda:	440a      	add	r2, r1
 8007edc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ee0:	f023 0302 	bic.w	r3, r3, #2
 8007ee4:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8007ee6:	6879      	ldr	r1, [r7, #4]
 8007ee8:	68fa      	ldr	r2, [r7, #12]
 8007eea:	4613      	mov	r3, r2
 8007eec:	009b      	lsls	r3, r3, #2
 8007eee:	4413      	add	r3, r2
 8007ef0:	00db      	lsls	r3, r3, #3
 8007ef2:	440b      	add	r3, r1
 8007ef4:	335d      	adds	r3, #93	; 0x5d
 8007ef6:	781b      	ldrb	r3, [r3, #0]
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	d10a      	bne.n	8007f12 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8007efc:	6879      	ldr	r1, [r7, #4]
 8007efe:	68fa      	ldr	r2, [r7, #12]
 8007f00:	4613      	mov	r3, r2
 8007f02:	009b      	lsls	r3, r3, #2
 8007f04:	4413      	add	r3, r2
 8007f06:	00db      	lsls	r3, r3, #3
 8007f08:	440b      	add	r3, r1
 8007f0a:	335c      	adds	r3, #92	; 0x5c
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	701a      	strb	r2, [r3, #0]
 8007f10:	e0d9      	b.n	80080c6 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8007f12:	6879      	ldr	r1, [r7, #4]
 8007f14:	68fa      	ldr	r2, [r7, #12]
 8007f16:	4613      	mov	r3, r2
 8007f18:	009b      	lsls	r3, r3, #2
 8007f1a:	4413      	add	r3, r2
 8007f1c:	00db      	lsls	r3, r3, #3
 8007f1e:	440b      	add	r3, r1
 8007f20:	335d      	adds	r3, #93	; 0x5d
 8007f22:	781b      	ldrb	r3, [r3, #0]
 8007f24:	2b05      	cmp	r3, #5
 8007f26:	d10a      	bne.n	8007f3e <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8007f28:	6879      	ldr	r1, [r7, #4]
 8007f2a:	68fa      	ldr	r2, [r7, #12]
 8007f2c:	4613      	mov	r3, r2
 8007f2e:	009b      	lsls	r3, r3, #2
 8007f30:	4413      	add	r3, r2
 8007f32:	00db      	lsls	r3, r3, #3
 8007f34:	440b      	add	r3, r1
 8007f36:	335c      	adds	r3, #92	; 0x5c
 8007f38:	2205      	movs	r2, #5
 8007f3a:	701a      	strb	r2, [r3, #0]
 8007f3c:	e0c3      	b.n	80080c6 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007f3e:	6879      	ldr	r1, [r7, #4]
 8007f40:	68fa      	ldr	r2, [r7, #12]
 8007f42:	4613      	mov	r3, r2
 8007f44:	009b      	lsls	r3, r3, #2
 8007f46:	4413      	add	r3, r2
 8007f48:	00db      	lsls	r3, r3, #3
 8007f4a:	440b      	add	r3, r1
 8007f4c:	335d      	adds	r3, #93	; 0x5d
 8007f4e:	781b      	ldrb	r3, [r3, #0]
 8007f50:	2b06      	cmp	r3, #6
 8007f52:	d00a      	beq.n	8007f6a <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8007f54:	6879      	ldr	r1, [r7, #4]
 8007f56:	68fa      	ldr	r2, [r7, #12]
 8007f58:	4613      	mov	r3, r2
 8007f5a:	009b      	lsls	r3, r3, #2
 8007f5c:	4413      	add	r3, r2
 8007f5e:	00db      	lsls	r3, r3, #3
 8007f60:	440b      	add	r3, r1
 8007f62:	335d      	adds	r3, #93	; 0x5d
 8007f64:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007f66:	2b08      	cmp	r3, #8
 8007f68:	d156      	bne.n	8008018 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8007f6a:	6879      	ldr	r1, [r7, #4]
 8007f6c:	68fa      	ldr	r2, [r7, #12]
 8007f6e:	4613      	mov	r3, r2
 8007f70:	009b      	lsls	r3, r3, #2
 8007f72:	4413      	add	r3, r2
 8007f74:	00db      	lsls	r3, r3, #3
 8007f76:	440b      	add	r3, r1
 8007f78:	3358      	adds	r3, #88	; 0x58
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	1c59      	adds	r1, r3, #1
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	68fa      	ldr	r2, [r7, #12]
 8007f82:	4613      	mov	r3, r2
 8007f84:	009b      	lsls	r3, r3, #2
 8007f86:	4413      	add	r3, r2
 8007f88:	00db      	lsls	r3, r3, #3
 8007f8a:	4403      	add	r3, r0
 8007f8c:	3358      	adds	r3, #88	; 0x58
 8007f8e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8007f90:	6879      	ldr	r1, [r7, #4]
 8007f92:	68fa      	ldr	r2, [r7, #12]
 8007f94:	4613      	mov	r3, r2
 8007f96:	009b      	lsls	r3, r3, #2
 8007f98:	4413      	add	r3, r2
 8007f9a:	00db      	lsls	r3, r3, #3
 8007f9c:	440b      	add	r3, r1
 8007f9e:	3358      	adds	r3, #88	; 0x58
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	2b03      	cmp	r3, #3
 8007fa4:	d914      	bls.n	8007fd0 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8007fa6:	6879      	ldr	r1, [r7, #4]
 8007fa8:	68fa      	ldr	r2, [r7, #12]
 8007faa:	4613      	mov	r3, r2
 8007fac:	009b      	lsls	r3, r3, #2
 8007fae:	4413      	add	r3, r2
 8007fb0:	00db      	lsls	r3, r3, #3
 8007fb2:	440b      	add	r3, r1
 8007fb4:	3358      	adds	r3, #88	; 0x58
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007fba:	6879      	ldr	r1, [r7, #4]
 8007fbc:	68fa      	ldr	r2, [r7, #12]
 8007fbe:	4613      	mov	r3, r2
 8007fc0:	009b      	lsls	r3, r3, #2
 8007fc2:	4413      	add	r3, r2
 8007fc4:	00db      	lsls	r3, r3, #3
 8007fc6:	440b      	add	r3, r1
 8007fc8:	335c      	adds	r3, #92	; 0x5c
 8007fca:	2204      	movs	r2, #4
 8007fcc:	701a      	strb	r2, [r3, #0]
 8007fce:	e009      	b.n	8007fe4 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007fd0:	6879      	ldr	r1, [r7, #4]
 8007fd2:	68fa      	ldr	r2, [r7, #12]
 8007fd4:	4613      	mov	r3, r2
 8007fd6:	009b      	lsls	r3, r3, #2
 8007fd8:	4413      	add	r3, r2
 8007fda:	00db      	lsls	r3, r3, #3
 8007fdc:	440b      	add	r3, r1
 8007fde:	335c      	adds	r3, #92	; 0x5c
 8007fe0:	2202      	movs	r2, #2
 8007fe2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	015a      	lsls	r2, r3, #5
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	4413      	add	r3, r2
 8007fec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007ffa:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008002:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	015a      	lsls	r2, r3, #5
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	4413      	add	r3, r2
 800800c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008010:	461a      	mov	r2, r3
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	6013      	str	r3, [r2, #0]
 8008016:	e056      	b.n	80080c6 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8008018:	6879      	ldr	r1, [r7, #4]
 800801a:	68fa      	ldr	r2, [r7, #12]
 800801c:	4613      	mov	r3, r2
 800801e:	009b      	lsls	r3, r3, #2
 8008020:	4413      	add	r3, r2
 8008022:	00db      	lsls	r3, r3, #3
 8008024:	440b      	add	r3, r1
 8008026:	335d      	adds	r3, #93	; 0x5d
 8008028:	781b      	ldrb	r3, [r3, #0]
 800802a:	2b03      	cmp	r3, #3
 800802c:	d123      	bne.n	8008076 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800802e:	6879      	ldr	r1, [r7, #4]
 8008030:	68fa      	ldr	r2, [r7, #12]
 8008032:	4613      	mov	r3, r2
 8008034:	009b      	lsls	r3, r3, #2
 8008036:	4413      	add	r3, r2
 8008038:	00db      	lsls	r3, r3, #3
 800803a:	440b      	add	r3, r1
 800803c:	335c      	adds	r3, #92	; 0x5c
 800803e:	2202      	movs	r2, #2
 8008040:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	015a      	lsls	r2, r3, #5
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	4413      	add	r3, r2
 800804a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008058:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008060:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	015a      	lsls	r2, r3, #5
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	4413      	add	r3, r2
 800806a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800806e:	461a      	mov	r2, r3
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	6013      	str	r3, [r2, #0]
 8008074:	e027      	b.n	80080c6 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8008076:	6879      	ldr	r1, [r7, #4]
 8008078:	68fa      	ldr	r2, [r7, #12]
 800807a:	4613      	mov	r3, r2
 800807c:	009b      	lsls	r3, r3, #2
 800807e:	4413      	add	r3, r2
 8008080:	00db      	lsls	r3, r3, #3
 8008082:	440b      	add	r3, r1
 8008084:	335d      	adds	r3, #93	; 0x5d
 8008086:	781b      	ldrb	r3, [r3, #0]
 8008088:	2b07      	cmp	r3, #7
 800808a:	d11c      	bne.n	80080c6 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 800808c:	6879      	ldr	r1, [r7, #4]
 800808e:	68fa      	ldr	r2, [r7, #12]
 8008090:	4613      	mov	r3, r2
 8008092:	009b      	lsls	r3, r3, #2
 8008094:	4413      	add	r3, r2
 8008096:	00db      	lsls	r3, r3, #3
 8008098:	440b      	add	r3, r1
 800809a:	3358      	adds	r3, #88	; 0x58
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	1c59      	adds	r1, r3, #1
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	68fa      	ldr	r2, [r7, #12]
 80080a4:	4613      	mov	r3, r2
 80080a6:	009b      	lsls	r3, r3, #2
 80080a8:	4413      	add	r3, r2
 80080aa:	00db      	lsls	r3, r3, #3
 80080ac:	4403      	add	r3, r0
 80080ae:	3358      	adds	r3, #88	; 0x58
 80080b0:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80080b2:	6879      	ldr	r1, [r7, #4]
 80080b4:	68fa      	ldr	r2, [r7, #12]
 80080b6:	4613      	mov	r3, r2
 80080b8:	009b      	lsls	r3, r3, #2
 80080ba:	4413      	add	r3, r2
 80080bc:	00db      	lsls	r3, r3, #3
 80080be:	440b      	add	r3, r1
 80080c0:	335c      	adds	r3, #92	; 0x5c
 80080c2:	2204      	movs	r2, #4
 80080c4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	015a      	lsls	r2, r3, #5
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	4413      	add	r3, r2
 80080ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080d2:	461a      	mov	r2, r3
 80080d4:	2302      	movs	r3, #2
 80080d6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	b2d8      	uxtb	r0, r3
 80080dc:	6879      	ldr	r1, [r7, #4]
 80080de:	68fa      	ldr	r2, [r7, #12]
 80080e0:	4613      	mov	r3, r2
 80080e2:	009b      	lsls	r3, r3, #2
 80080e4:	4413      	add	r3, r2
 80080e6:	00db      	lsls	r3, r3, #3
 80080e8:	440b      	add	r3, r1
 80080ea:	335c      	adds	r3, #92	; 0x5c
 80080ec:	781b      	ldrb	r3, [r3, #0]
 80080ee:	461a      	mov	r2, r3
 80080f0:	4601      	mov	r1, r0
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f005 fa54 	bl	800d5a0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80080f8:	e0d1      	b.n	800829e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	015a      	lsls	r2, r3, #5
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	4413      	add	r3, r2
 8008102:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008106:	689b      	ldr	r3, [r3, #8]
 8008108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800810c:	2b80      	cmp	r3, #128	; 0x80
 800810e:	d13e      	bne.n	800818e <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	015a      	lsls	r2, r3, #5
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	4413      	add	r3, r2
 8008118:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800811c:	68db      	ldr	r3, [r3, #12]
 800811e:	68fa      	ldr	r2, [r7, #12]
 8008120:	0151      	lsls	r1, r2, #5
 8008122:	693a      	ldr	r2, [r7, #16]
 8008124:	440a      	add	r2, r1
 8008126:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800812a:	f043 0302 	orr.w	r3, r3, #2
 800812e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8008130:	6879      	ldr	r1, [r7, #4]
 8008132:	68fa      	ldr	r2, [r7, #12]
 8008134:	4613      	mov	r3, r2
 8008136:	009b      	lsls	r3, r3, #2
 8008138:	4413      	add	r3, r2
 800813a:	00db      	lsls	r3, r3, #3
 800813c:	440b      	add	r3, r1
 800813e:	3358      	adds	r3, #88	; 0x58
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	1c59      	adds	r1, r3, #1
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	68fa      	ldr	r2, [r7, #12]
 8008148:	4613      	mov	r3, r2
 800814a:	009b      	lsls	r3, r3, #2
 800814c:	4413      	add	r3, r2
 800814e:	00db      	lsls	r3, r3, #3
 8008150:	4403      	add	r3, r0
 8008152:	3358      	adds	r3, #88	; 0x58
 8008154:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8008156:	6879      	ldr	r1, [r7, #4]
 8008158:	68fa      	ldr	r2, [r7, #12]
 800815a:	4613      	mov	r3, r2
 800815c:	009b      	lsls	r3, r3, #2
 800815e:	4413      	add	r3, r2
 8008160:	00db      	lsls	r3, r3, #3
 8008162:	440b      	add	r3, r1
 8008164:	335d      	adds	r3, #93	; 0x5d
 8008166:	2206      	movs	r2, #6
 8008168:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	68fa      	ldr	r2, [r7, #12]
 8008170:	b2d2      	uxtb	r2, r2
 8008172:	4611      	mov	r1, r2
 8008174:	4618      	mov	r0, r3
 8008176:	f003 f870 	bl	800b25a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	015a      	lsls	r2, r3, #5
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	4413      	add	r3, r2
 8008182:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008186:	461a      	mov	r2, r3
 8008188:	2380      	movs	r3, #128	; 0x80
 800818a:	6093      	str	r3, [r2, #8]
}
 800818c:	e087      	b.n	800829e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	015a      	lsls	r2, r3, #5
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	4413      	add	r3, r2
 8008196:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800819a:	689b      	ldr	r3, [r3, #8]
 800819c:	f003 0310 	and.w	r3, r3, #16
 80081a0:	2b10      	cmp	r3, #16
 80081a2:	d17c      	bne.n	800829e <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80081a4:	6879      	ldr	r1, [r7, #4]
 80081a6:	68fa      	ldr	r2, [r7, #12]
 80081a8:	4613      	mov	r3, r2
 80081aa:	009b      	lsls	r3, r3, #2
 80081ac:	4413      	add	r3, r2
 80081ae:	00db      	lsls	r3, r3, #3
 80081b0:	440b      	add	r3, r1
 80081b2:	333f      	adds	r3, #63	; 0x3f
 80081b4:	781b      	ldrb	r3, [r3, #0]
 80081b6:	2b03      	cmp	r3, #3
 80081b8:	d122      	bne.n	8008200 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80081ba:	6879      	ldr	r1, [r7, #4]
 80081bc:	68fa      	ldr	r2, [r7, #12]
 80081be:	4613      	mov	r3, r2
 80081c0:	009b      	lsls	r3, r3, #2
 80081c2:	4413      	add	r3, r2
 80081c4:	00db      	lsls	r3, r3, #3
 80081c6:	440b      	add	r3, r1
 80081c8:	3358      	adds	r3, #88	; 0x58
 80081ca:	2200      	movs	r2, #0
 80081cc:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	015a      	lsls	r2, r3, #5
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	4413      	add	r3, r2
 80081d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081da:	68db      	ldr	r3, [r3, #12]
 80081dc:	68fa      	ldr	r2, [r7, #12]
 80081de:	0151      	lsls	r1, r2, #5
 80081e0:	693a      	ldr	r2, [r7, #16]
 80081e2:	440a      	add	r2, r1
 80081e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80081e8:	f043 0302 	orr.w	r3, r3, #2
 80081ec:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	68fa      	ldr	r2, [r7, #12]
 80081f4:	b2d2      	uxtb	r2, r2
 80081f6:	4611      	mov	r1, r2
 80081f8:	4618      	mov	r0, r3
 80081fa:	f003 f82e 	bl	800b25a <USB_HC_Halt>
 80081fe:	e045      	b.n	800828c <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8008200:	6879      	ldr	r1, [r7, #4]
 8008202:	68fa      	ldr	r2, [r7, #12]
 8008204:	4613      	mov	r3, r2
 8008206:	009b      	lsls	r3, r3, #2
 8008208:	4413      	add	r3, r2
 800820a:	00db      	lsls	r3, r3, #3
 800820c:	440b      	add	r3, r1
 800820e:	333f      	adds	r3, #63	; 0x3f
 8008210:	781b      	ldrb	r3, [r3, #0]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d00a      	beq.n	800822c <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8008216:	6879      	ldr	r1, [r7, #4]
 8008218:	68fa      	ldr	r2, [r7, #12]
 800821a:	4613      	mov	r3, r2
 800821c:	009b      	lsls	r3, r3, #2
 800821e:	4413      	add	r3, r2
 8008220:	00db      	lsls	r3, r3, #3
 8008222:	440b      	add	r3, r1
 8008224:	333f      	adds	r3, #63	; 0x3f
 8008226:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8008228:	2b02      	cmp	r3, #2
 800822a:	d12f      	bne.n	800828c <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800822c:	6879      	ldr	r1, [r7, #4]
 800822e:	68fa      	ldr	r2, [r7, #12]
 8008230:	4613      	mov	r3, r2
 8008232:	009b      	lsls	r3, r3, #2
 8008234:	4413      	add	r3, r2
 8008236:	00db      	lsls	r3, r3, #3
 8008238:	440b      	add	r3, r1
 800823a:	3358      	adds	r3, #88	; 0x58
 800823c:	2200      	movs	r2, #0
 800823e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	691b      	ldr	r3, [r3, #16]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d121      	bne.n	800828c <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8008248:	6879      	ldr	r1, [r7, #4]
 800824a:	68fa      	ldr	r2, [r7, #12]
 800824c:	4613      	mov	r3, r2
 800824e:	009b      	lsls	r3, r3, #2
 8008250:	4413      	add	r3, r2
 8008252:	00db      	lsls	r3, r3, #3
 8008254:	440b      	add	r3, r1
 8008256:	335d      	adds	r3, #93	; 0x5d
 8008258:	2203      	movs	r2, #3
 800825a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	015a      	lsls	r2, r3, #5
 8008260:	693b      	ldr	r3, [r7, #16]
 8008262:	4413      	add	r3, r2
 8008264:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008268:	68db      	ldr	r3, [r3, #12]
 800826a:	68fa      	ldr	r2, [r7, #12]
 800826c:	0151      	lsls	r1, r2, #5
 800826e:	693a      	ldr	r2, [r7, #16]
 8008270:	440a      	add	r2, r1
 8008272:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008276:	f043 0302 	orr.w	r3, r3, #2
 800827a:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	68fa      	ldr	r2, [r7, #12]
 8008282:	b2d2      	uxtb	r2, r2
 8008284:	4611      	mov	r1, r2
 8008286:	4618      	mov	r0, r3
 8008288:	f002 ffe7 	bl	800b25a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	015a      	lsls	r2, r3, #5
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	4413      	add	r3, r2
 8008294:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008298:	461a      	mov	r2, r3
 800829a:	2310      	movs	r3, #16
 800829c:	6093      	str	r3, [r2, #8]
}
 800829e:	bf00      	nop
 80082a0:	3718      	adds	r7, #24
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}

080082a6 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80082a6:	b580      	push	{r7, lr}
 80082a8:	b086      	sub	sp, #24
 80082aa:	af00      	add	r7, sp, #0
 80082ac:	6078      	str	r0, [r7, #4]
 80082ae:	460b      	mov	r3, r1
 80082b0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80082bc:	78fb      	ldrb	r3, [r7, #3]
 80082be:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	015a      	lsls	r2, r3, #5
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	4413      	add	r3, r2
 80082c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082cc:	689b      	ldr	r3, [r3, #8]
 80082ce:	f003 0304 	and.w	r3, r3, #4
 80082d2:	2b04      	cmp	r3, #4
 80082d4:	d119      	bne.n	800830a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	015a      	lsls	r2, r3, #5
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	4413      	add	r3, r2
 80082de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082e2:	461a      	mov	r2, r3
 80082e4:	2304      	movs	r3, #4
 80082e6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	015a      	lsls	r2, r3, #5
 80082ec:	693b      	ldr	r3, [r7, #16]
 80082ee:	4413      	add	r3, r2
 80082f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082f4:	68db      	ldr	r3, [r3, #12]
 80082f6:	68fa      	ldr	r2, [r7, #12]
 80082f8:	0151      	lsls	r1, r2, #5
 80082fa:	693a      	ldr	r2, [r7, #16]
 80082fc:	440a      	add	r2, r1
 80082fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008302:	f043 0302 	orr.w	r3, r3, #2
 8008306:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8008308:	e33e      	b.n	8008988 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	015a      	lsls	r2, r3, #5
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	4413      	add	r3, r2
 8008312:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008316:	689b      	ldr	r3, [r3, #8]
 8008318:	f003 0320 	and.w	r3, r3, #32
 800831c:	2b20      	cmp	r3, #32
 800831e:	d141      	bne.n	80083a4 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	015a      	lsls	r2, r3, #5
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	4413      	add	r3, r2
 8008328:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800832c:	461a      	mov	r2, r3
 800832e:	2320      	movs	r3, #32
 8008330:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8008332:	6879      	ldr	r1, [r7, #4]
 8008334:	68fa      	ldr	r2, [r7, #12]
 8008336:	4613      	mov	r3, r2
 8008338:	009b      	lsls	r3, r3, #2
 800833a:	4413      	add	r3, r2
 800833c:	00db      	lsls	r3, r3, #3
 800833e:	440b      	add	r3, r1
 8008340:	333d      	adds	r3, #61	; 0x3d
 8008342:	781b      	ldrb	r3, [r3, #0]
 8008344:	2b01      	cmp	r3, #1
 8008346:	f040 831f 	bne.w	8008988 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 800834a:	6879      	ldr	r1, [r7, #4]
 800834c:	68fa      	ldr	r2, [r7, #12]
 800834e:	4613      	mov	r3, r2
 8008350:	009b      	lsls	r3, r3, #2
 8008352:	4413      	add	r3, r2
 8008354:	00db      	lsls	r3, r3, #3
 8008356:	440b      	add	r3, r1
 8008358:	333d      	adds	r3, #61	; 0x3d
 800835a:	2200      	movs	r2, #0
 800835c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800835e:	6879      	ldr	r1, [r7, #4]
 8008360:	68fa      	ldr	r2, [r7, #12]
 8008362:	4613      	mov	r3, r2
 8008364:	009b      	lsls	r3, r3, #2
 8008366:	4413      	add	r3, r2
 8008368:	00db      	lsls	r3, r3, #3
 800836a:	440b      	add	r3, r1
 800836c:	335c      	adds	r3, #92	; 0x5c
 800836e:	2202      	movs	r2, #2
 8008370:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	015a      	lsls	r2, r3, #5
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	4413      	add	r3, r2
 800837a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800837e:	68db      	ldr	r3, [r3, #12]
 8008380:	68fa      	ldr	r2, [r7, #12]
 8008382:	0151      	lsls	r1, r2, #5
 8008384:	693a      	ldr	r2, [r7, #16]
 8008386:	440a      	add	r2, r1
 8008388:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800838c:	f043 0302 	orr.w	r3, r3, #2
 8008390:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	68fa      	ldr	r2, [r7, #12]
 8008398:	b2d2      	uxtb	r2, r2
 800839a:	4611      	mov	r1, r2
 800839c:	4618      	mov	r0, r3
 800839e:	f002 ff5c 	bl	800b25a <USB_HC_Halt>
}
 80083a2:	e2f1      	b.n	8008988 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	015a      	lsls	r2, r3, #5
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	4413      	add	r3, r2
 80083ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083b0:	689b      	ldr	r3, [r3, #8]
 80083b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083b6:	2b40      	cmp	r3, #64	; 0x40
 80083b8:	d13f      	bne.n	800843a <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80083ba:	6879      	ldr	r1, [r7, #4]
 80083bc:	68fa      	ldr	r2, [r7, #12]
 80083be:	4613      	mov	r3, r2
 80083c0:	009b      	lsls	r3, r3, #2
 80083c2:	4413      	add	r3, r2
 80083c4:	00db      	lsls	r3, r3, #3
 80083c6:	440b      	add	r3, r1
 80083c8:	335d      	adds	r3, #93	; 0x5d
 80083ca:	2204      	movs	r2, #4
 80083cc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80083ce:	6879      	ldr	r1, [r7, #4]
 80083d0:	68fa      	ldr	r2, [r7, #12]
 80083d2:	4613      	mov	r3, r2
 80083d4:	009b      	lsls	r3, r3, #2
 80083d6:	4413      	add	r3, r2
 80083d8:	00db      	lsls	r3, r3, #3
 80083da:	440b      	add	r3, r1
 80083dc:	333d      	adds	r3, #61	; 0x3d
 80083de:	2201      	movs	r2, #1
 80083e0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80083e2:	6879      	ldr	r1, [r7, #4]
 80083e4:	68fa      	ldr	r2, [r7, #12]
 80083e6:	4613      	mov	r3, r2
 80083e8:	009b      	lsls	r3, r3, #2
 80083ea:	4413      	add	r3, r2
 80083ec:	00db      	lsls	r3, r3, #3
 80083ee:	440b      	add	r3, r1
 80083f0:	3358      	adds	r3, #88	; 0x58
 80083f2:	2200      	movs	r2, #0
 80083f4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	015a      	lsls	r2, r3, #5
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	4413      	add	r3, r2
 80083fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008402:	68db      	ldr	r3, [r3, #12]
 8008404:	68fa      	ldr	r2, [r7, #12]
 8008406:	0151      	lsls	r1, r2, #5
 8008408:	693a      	ldr	r2, [r7, #16]
 800840a:	440a      	add	r2, r1
 800840c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008410:	f043 0302 	orr.w	r3, r3, #2
 8008414:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	68fa      	ldr	r2, [r7, #12]
 800841c:	b2d2      	uxtb	r2, r2
 800841e:	4611      	mov	r1, r2
 8008420:	4618      	mov	r0, r3
 8008422:	f002 ff1a 	bl	800b25a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	015a      	lsls	r2, r3, #5
 800842a:	693b      	ldr	r3, [r7, #16]
 800842c:	4413      	add	r3, r2
 800842e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008432:	461a      	mov	r2, r3
 8008434:	2340      	movs	r3, #64	; 0x40
 8008436:	6093      	str	r3, [r2, #8]
}
 8008438:	e2a6      	b.n	8008988 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	015a      	lsls	r2, r3, #5
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	4413      	add	r3, r2
 8008442:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008446:	689b      	ldr	r3, [r3, #8]
 8008448:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800844c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008450:	d122      	bne.n	8008498 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	015a      	lsls	r2, r3, #5
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	4413      	add	r3, r2
 800845a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800845e:	68db      	ldr	r3, [r3, #12]
 8008460:	68fa      	ldr	r2, [r7, #12]
 8008462:	0151      	lsls	r1, r2, #5
 8008464:	693a      	ldr	r2, [r7, #16]
 8008466:	440a      	add	r2, r1
 8008468:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800846c:	f043 0302 	orr.w	r3, r3, #2
 8008470:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	68fa      	ldr	r2, [r7, #12]
 8008478:	b2d2      	uxtb	r2, r2
 800847a:	4611      	mov	r1, r2
 800847c:	4618      	mov	r0, r3
 800847e:	f002 feec 	bl	800b25a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	015a      	lsls	r2, r3, #5
 8008486:	693b      	ldr	r3, [r7, #16]
 8008488:	4413      	add	r3, r2
 800848a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800848e:	461a      	mov	r2, r3
 8008490:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008494:	6093      	str	r3, [r2, #8]
}
 8008496:	e277      	b.n	8008988 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	015a      	lsls	r2, r3, #5
 800849c:	693b      	ldr	r3, [r7, #16]
 800849e:	4413      	add	r3, r2
 80084a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084a4:	689b      	ldr	r3, [r3, #8]
 80084a6:	f003 0301 	and.w	r3, r3, #1
 80084aa:	2b01      	cmp	r3, #1
 80084ac:	d135      	bne.n	800851a <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80084ae:	6879      	ldr	r1, [r7, #4]
 80084b0:	68fa      	ldr	r2, [r7, #12]
 80084b2:	4613      	mov	r3, r2
 80084b4:	009b      	lsls	r3, r3, #2
 80084b6:	4413      	add	r3, r2
 80084b8:	00db      	lsls	r3, r3, #3
 80084ba:	440b      	add	r3, r1
 80084bc:	3358      	adds	r3, #88	; 0x58
 80084be:	2200      	movs	r2, #0
 80084c0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	015a      	lsls	r2, r3, #5
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	4413      	add	r3, r2
 80084ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084ce:	68db      	ldr	r3, [r3, #12]
 80084d0:	68fa      	ldr	r2, [r7, #12]
 80084d2:	0151      	lsls	r1, r2, #5
 80084d4:	693a      	ldr	r2, [r7, #16]
 80084d6:	440a      	add	r2, r1
 80084d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80084dc:	f043 0302 	orr.w	r3, r3, #2
 80084e0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	68fa      	ldr	r2, [r7, #12]
 80084e8:	b2d2      	uxtb	r2, r2
 80084ea:	4611      	mov	r1, r2
 80084ec:	4618      	mov	r0, r3
 80084ee:	f002 feb4 	bl	800b25a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	015a      	lsls	r2, r3, #5
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	4413      	add	r3, r2
 80084fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084fe:	461a      	mov	r2, r3
 8008500:	2301      	movs	r3, #1
 8008502:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8008504:	6879      	ldr	r1, [r7, #4]
 8008506:	68fa      	ldr	r2, [r7, #12]
 8008508:	4613      	mov	r3, r2
 800850a:	009b      	lsls	r3, r3, #2
 800850c:	4413      	add	r3, r2
 800850e:	00db      	lsls	r3, r3, #3
 8008510:	440b      	add	r3, r1
 8008512:	335d      	adds	r3, #93	; 0x5d
 8008514:	2201      	movs	r2, #1
 8008516:	701a      	strb	r2, [r3, #0]
}
 8008518:	e236      	b.n	8008988 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	015a      	lsls	r2, r3, #5
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	4413      	add	r3, r2
 8008522:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008526:	689b      	ldr	r3, [r3, #8]
 8008528:	f003 0308 	and.w	r3, r3, #8
 800852c:	2b08      	cmp	r3, #8
 800852e:	d12b      	bne.n	8008588 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	015a      	lsls	r2, r3, #5
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	4413      	add	r3, r2
 8008538:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800853c:	461a      	mov	r2, r3
 800853e:	2308      	movs	r3, #8
 8008540:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	015a      	lsls	r2, r3, #5
 8008546:	693b      	ldr	r3, [r7, #16]
 8008548:	4413      	add	r3, r2
 800854a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800854e:	68db      	ldr	r3, [r3, #12]
 8008550:	68fa      	ldr	r2, [r7, #12]
 8008552:	0151      	lsls	r1, r2, #5
 8008554:	693a      	ldr	r2, [r7, #16]
 8008556:	440a      	add	r2, r1
 8008558:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800855c:	f043 0302 	orr.w	r3, r3, #2
 8008560:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	68fa      	ldr	r2, [r7, #12]
 8008568:	b2d2      	uxtb	r2, r2
 800856a:	4611      	mov	r1, r2
 800856c:	4618      	mov	r0, r3
 800856e:	f002 fe74 	bl	800b25a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8008572:	6879      	ldr	r1, [r7, #4]
 8008574:	68fa      	ldr	r2, [r7, #12]
 8008576:	4613      	mov	r3, r2
 8008578:	009b      	lsls	r3, r3, #2
 800857a:	4413      	add	r3, r2
 800857c:	00db      	lsls	r3, r3, #3
 800857e:	440b      	add	r3, r1
 8008580:	335d      	adds	r3, #93	; 0x5d
 8008582:	2205      	movs	r2, #5
 8008584:	701a      	strb	r2, [r3, #0]
}
 8008586:	e1ff      	b.n	8008988 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	015a      	lsls	r2, r3, #5
 800858c:	693b      	ldr	r3, [r7, #16]
 800858e:	4413      	add	r3, r2
 8008590:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008594:	689b      	ldr	r3, [r3, #8]
 8008596:	f003 0310 	and.w	r3, r3, #16
 800859a:	2b10      	cmp	r3, #16
 800859c:	d155      	bne.n	800864a <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800859e:	6879      	ldr	r1, [r7, #4]
 80085a0:	68fa      	ldr	r2, [r7, #12]
 80085a2:	4613      	mov	r3, r2
 80085a4:	009b      	lsls	r3, r3, #2
 80085a6:	4413      	add	r3, r2
 80085a8:	00db      	lsls	r3, r3, #3
 80085aa:	440b      	add	r3, r1
 80085ac:	3358      	adds	r3, #88	; 0x58
 80085ae:	2200      	movs	r2, #0
 80085b0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80085b2:	6879      	ldr	r1, [r7, #4]
 80085b4:	68fa      	ldr	r2, [r7, #12]
 80085b6:	4613      	mov	r3, r2
 80085b8:	009b      	lsls	r3, r3, #2
 80085ba:	4413      	add	r3, r2
 80085bc:	00db      	lsls	r3, r3, #3
 80085be:	440b      	add	r3, r1
 80085c0:	335d      	adds	r3, #93	; 0x5d
 80085c2:	2203      	movs	r2, #3
 80085c4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80085c6:	6879      	ldr	r1, [r7, #4]
 80085c8:	68fa      	ldr	r2, [r7, #12]
 80085ca:	4613      	mov	r3, r2
 80085cc:	009b      	lsls	r3, r3, #2
 80085ce:	4413      	add	r3, r2
 80085d0:	00db      	lsls	r3, r3, #3
 80085d2:	440b      	add	r3, r1
 80085d4:	333d      	adds	r3, #61	; 0x3d
 80085d6:	781b      	ldrb	r3, [r3, #0]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d114      	bne.n	8008606 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80085dc:	6879      	ldr	r1, [r7, #4]
 80085de:	68fa      	ldr	r2, [r7, #12]
 80085e0:	4613      	mov	r3, r2
 80085e2:	009b      	lsls	r3, r3, #2
 80085e4:	4413      	add	r3, r2
 80085e6:	00db      	lsls	r3, r3, #3
 80085e8:	440b      	add	r3, r1
 80085ea:	333c      	adds	r3, #60	; 0x3c
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d109      	bne.n	8008606 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 80085f2:	6879      	ldr	r1, [r7, #4]
 80085f4:	68fa      	ldr	r2, [r7, #12]
 80085f6:	4613      	mov	r3, r2
 80085f8:	009b      	lsls	r3, r3, #2
 80085fa:	4413      	add	r3, r2
 80085fc:	00db      	lsls	r3, r3, #3
 80085fe:	440b      	add	r3, r1
 8008600:	333d      	adds	r3, #61	; 0x3d
 8008602:	2201      	movs	r2, #1
 8008604:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	015a      	lsls	r2, r3, #5
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	4413      	add	r3, r2
 800860e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008612:	68db      	ldr	r3, [r3, #12]
 8008614:	68fa      	ldr	r2, [r7, #12]
 8008616:	0151      	lsls	r1, r2, #5
 8008618:	693a      	ldr	r2, [r7, #16]
 800861a:	440a      	add	r2, r1
 800861c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008620:	f043 0302 	orr.w	r3, r3, #2
 8008624:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	68fa      	ldr	r2, [r7, #12]
 800862c:	b2d2      	uxtb	r2, r2
 800862e:	4611      	mov	r1, r2
 8008630:	4618      	mov	r0, r3
 8008632:	f002 fe12 	bl	800b25a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	015a      	lsls	r2, r3, #5
 800863a:	693b      	ldr	r3, [r7, #16]
 800863c:	4413      	add	r3, r2
 800863e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008642:	461a      	mov	r2, r3
 8008644:	2310      	movs	r3, #16
 8008646:	6093      	str	r3, [r2, #8]
}
 8008648:	e19e      	b.n	8008988 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	015a      	lsls	r2, r3, #5
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	4413      	add	r3, r2
 8008652:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008656:	689b      	ldr	r3, [r3, #8]
 8008658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800865c:	2b80      	cmp	r3, #128	; 0x80
 800865e:	d12b      	bne.n	80086b8 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	015a      	lsls	r2, r3, #5
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	4413      	add	r3, r2
 8008668:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800866c:	68db      	ldr	r3, [r3, #12]
 800866e:	68fa      	ldr	r2, [r7, #12]
 8008670:	0151      	lsls	r1, r2, #5
 8008672:	693a      	ldr	r2, [r7, #16]
 8008674:	440a      	add	r2, r1
 8008676:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800867a:	f043 0302 	orr.w	r3, r3, #2
 800867e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	68fa      	ldr	r2, [r7, #12]
 8008686:	b2d2      	uxtb	r2, r2
 8008688:	4611      	mov	r1, r2
 800868a:	4618      	mov	r0, r3
 800868c:	f002 fde5 	bl	800b25a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8008690:	6879      	ldr	r1, [r7, #4]
 8008692:	68fa      	ldr	r2, [r7, #12]
 8008694:	4613      	mov	r3, r2
 8008696:	009b      	lsls	r3, r3, #2
 8008698:	4413      	add	r3, r2
 800869a:	00db      	lsls	r3, r3, #3
 800869c:	440b      	add	r3, r1
 800869e:	335d      	adds	r3, #93	; 0x5d
 80086a0:	2206      	movs	r2, #6
 80086a2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	015a      	lsls	r2, r3, #5
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	4413      	add	r3, r2
 80086ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086b0:	461a      	mov	r2, r3
 80086b2:	2380      	movs	r3, #128	; 0x80
 80086b4:	6093      	str	r3, [r2, #8]
}
 80086b6:	e167      	b.n	8008988 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	015a      	lsls	r2, r3, #5
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	4413      	add	r3, r2
 80086c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086c4:	689b      	ldr	r3, [r3, #8]
 80086c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086ce:	d135      	bne.n	800873c <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	015a      	lsls	r2, r3, #5
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	4413      	add	r3, r2
 80086d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086dc:	68db      	ldr	r3, [r3, #12]
 80086de:	68fa      	ldr	r2, [r7, #12]
 80086e0:	0151      	lsls	r1, r2, #5
 80086e2:	693a      	ldr	r2, [r7, #16]
 80086e4:	440a      	add	r2, r1
 80086e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80086ea:	f043 0302 	orr.w	r3, r3, #2
 80086ee:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	68fa      	ldr	r2, [r7, #12]
 80086f6:	b2d2      	uxtb	r2, r2
 80086f8:	4611      	mov	r1, r2
 80086fa:	4618      	mov	r0, r3
 80086fc:	f002 fdad 	bl	800b25a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	015a      	lsls	r2, r3, #5
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	4413      	add	r3, r2
 8008708:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800870c:	461a      	mov	r2, r3
 800870e:	2310      	movs	r3, #16
 8008710:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	015a      	lsls	r2, r3, #5
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	4413      	add	r3, r2
 800871a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800871e:	461a      	mov	r2, r3
 8008720:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008724:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8008726:	6879      	ldr	r1, [r7, #4]
 8008728:	68fa      	ldr	r2, [r7, #12]
 800872a:	4613      	mov	r3, r2
 800872c:	009b      	lsls	r3, r3, #2
 800872e:	4413      	add	r3, r2
 8008730:	00db      	lsls	r3, r3, #3
 8008732:	440b      	add	r3, r1
 8008734:	335d      	adds	r3, #93	; 0x5d
 8008736:	2208      	movs	r2, #8
 8008738:	701a      	strb	r2, [r3, #0]
}
 800873a:	e125      	b.n	8008988 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	015a      	lsls	r2, r3, #5
 8008740:	693b      	ldr	r3, [r7, #16]
 8008742:	4413      	add	r3, r2
 8008744:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008748:	689b      	ldr	r3, [r3, #8]
 800874a:	f003 0302 	and.w	r3, r3, #2
 800874e:	2b02      	cmp	r3, #2
 8008750:	f040 811a 	bne.w	8008988 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	015a      	lsls	r2, r3, #5
 8008758:	693b      	ldr	r3, [r7, #16]
 800875a:	4413      	add	r3, r2
 800875c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008760:	68db      	ldr	r3, [r3, #12]
 8008762:	68fa      	ldr	r2, [r7, #12]
 8008764:	0151      	lsls	r1, r2, #5
 8008766:	693a      	ldr	r2, [r7, #16]
 8008768:	440a      	add	r2, r1
 800876a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800876e:	f023 0302 	bic.w	r3, r3, #2
 8008772:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8008774:	6879      	ldr	r1, [r7, #4]
 8008776:	68fa      	ldr	r2, [r7, #12]
 8008778:	4613      	mov	r3, r2
 800877a:	009b      	lsls	r3, r3, #2
 800877c:	4413      	add	r3, r2
 800877e:	00db      	lsls	r3, r3, #3
 8008780:	440b      	add	r3, r1
 8008782:	335d      	adds	r3, #93	; 0x5d
 8008784:	781b      	ldrb	r3, [r3, #0]
 8008786:	2b01      	cmp	r3, #1
 8008788:	d137      	bne.n	80087fa <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800878a:	6879      	ldr	r1, [r7, #4]
 800878c:	68fa      	ldr	r2, [r7, #12]
 800878e:	4613      	mov	r3, r2
 8008790:	009b      	lsls	r3, r3, #2
 8008792:	4413      	add	r3, r2
 8008794:	00db      	lsls	r3, r3, #3
 8008796:	440b      	add	r3, r1
 8008798:	335c      	adds	r3, #92	; 0x5c
 800879a:	2201      	movs	r2, #1
 800879c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800879e:	6879      	ldr	r1, [r7, #4]
 80087a0:	68fa      	ldr	r2, [r7, #12]
 80087a2:	4613      	mov	r3, r2
 80087a4:	009b      	lsls	r3, r3, #2
 80087a6:	4413      	add	r3, r2
 80087a8:	00db      	lsls	r3, r3, #3
 80087aa:	440b      	add	r3, r1
 80087ac:	333f      	adds	r3, #63	; 0x3f
 80087ae:	781b      	ldrb	r3, [r3, #0]
 80087b0:	2b02      	cmp	r3, #2
 80087b2:	d00b      	beq.n	80087cc <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80087b4:	6879      	ldr	r1, [r7, #4]
 80087b6:	68fa      	ldr	r2, [r7, #12]
 80087b8:	4613      	mov	r3, r2
 80087ba:	009b      	lsls	r3, r3, #2
 80087bc:	4413      	add	r3, r2
 80087be:	00db      	lsls	r3, r3, #3
 80087c0:	440b      	add	r3, r1
 80087c2:	333f      	adds	r3, #63	; 0x3f
 80087c4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80087c6:	2b03      	cmp	r3, #3
 80087c8:	f040 80c5 	bne.w	8008956 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80087cc:	6879      	ldr	r1, [r7, #4]
 80087ce:	68fa      	ldr	r2, [r7, #12]
 80087d0:	4613      	mov	r3, r2
 80087d2:	009b      	lsls	r3, r3, #2
 80087d4:	4413      	add	r3, r2
 80087d6:	00db      	lsls	r3, r3, #3
 80087d8:	440b      	add	r3, r1
 80087da:	3351      	adds	r3, #81	; 0x51
 80087dc:	781b      	ldrb	r3, [r3, #0]
 80087de:	f083 0301 	eor.w	r3, r3, #1
 80087e2:	b2d8      	uxtb	r0, r3
 80087e4:	6879      	ldr	r1, [r7, #4]
 80087e6:	68fa      	ldr	r2, [r7, #12]
 80087e8:	4613      	mov	r3, r2
 80087ea:	009b      	lsls	r3, r3, #2
 80087ec:	4413      	add	r3, r2
 80087ee:	00db      	lsls	r3, r3, #3
 80087f0:	440b      	add	r3, r1
 80087f2:	3351      	adds	r3, #81	; 0x51
 80087f4:	4602      	mov	r2, r0
 80087f6:	701a      	strb	r2, [r3, #0]
 80087f8:	e0ad      	b.n	8008956 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80087fa:	6879      	ldr	r1, [r7, #4]
 80087fc:	68fa      	ldr	r2, [r7, #12]
 80087fe:	4613      	mov	r3, r2
 8008800:	009b      	lsls	r3, r3, #2
 8008802:	4413      	add	r3, r2
 8008804:	00db      	lsls	r3, r3, #3
 8008806:	440b      	add	r3, r1
 8008808:	335d      	adds	r3, #93	; 0x5d
 800880a:	781b      	ldrb	r3, [r3, #0]
 800880c:	2b03      	cmp	r3, #3
 800880e:	d10a      	bne.n	8008826 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8008810:	6879      	ldr	r1, [r7, #4]
 8008812:	68fa      	ldr	r2, [r7, #12]
 8008814:	4613      	mov	r3, r2
 8008816:	009b      	lsls	r3, r3, #2
 8008818:	4413      	add	r3, r2
 800881a:	00db      	lsls	r3, r3, #3
 800881c:	440b      	add	r3, r1
 800881e:	335c      	adds	r3, #92	; 0x5c
 8008820:	2202      	movs	r2, #2
 8008822:	701a      	strb	r2, [r3, #0]
 8008824:	e097      	b.n	8008956 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8008826:	6879      	ldr	r1, [r7, #4]
 8008828:	68fa      	ldr	r2, [r7, #12]
 800882a:	4613      	mov	r3, r2
 800882c:	009b      	lsls	r3, r3, #2
 800882e:	4413      	add	r3, r2
 8008830:	00db      	lsls	r3, r3, #3
 8008832:	440b      	add	r3, r1
 8008834:	335d      	adds	r3, #93	; 0x5d
 8008836:	781b      	ldrb	r3, [r3, #0]
 8008838:	2b04      	cmp	r3, #4
 800883a:	d10a      	bne.n	8008852 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800883c:	6879      	ldr	r1, [r7, #4]
 800883e:	68fa      	ldr	r2, [r7, #12]
 8008840:	4613      	mov	r3, r2
 8008842:	009b      	lsls	r3, r3, #2
 8008844:	4413      	add	r3, r2
 8008846:	00db      	lsls	r3, r3, #3
 8008848:	440b      	add	r3, r1
 800884a:	335c      	adds	r3, #92	; 0x5c
 800884c:	2202      	movs	r2, #2
 800884e:	701a      	strb	r2, [r3, #0]
 8008850:	e081      	b.n	8008956 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8008852:	6879      	ldr	r1, [r7, #4]
 8008854:	68fa      	ldr	r2, [r7, #12]
 8008856:	4613      	mov	r3, r2
 8008858:	009b      	lsls	r3, r3, #2
 800885a:	4413      	add	r3, r2
 800885c:	00db      	lsls	r3, r3, #3
 800885e:	440b      	add	r3, r1
 8008860:	335d      	adds	r3, #93	; 0x5d
 8008862:	781b      	ldrb	r3, [r3, #0]
 8008864:	2b05      	cmp	r3, #5
 8008866:	d10a      	bne.n	800887e <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8008868:	6879      	ldr	r1, [r7, #4]
 800886a:	68fa      	ldr	r2, [r7, #12]
 800886c:	4613      	mov	r3, r2
 800886e:	009b      	lsls	r3, r3, #2
 8008870:	4413      	add	r3, r2
 8008872:	00db      	lsls	r3, r3, #3
 8008874:	440b      	add	r3, r1
 8008876:	335c      	adds	r3, #92	; 0x5c
 8008878:	2205      	movs	r2, #5
 800887a:	701a      	strb	r2, [r3, #0]
 800887c:	e06b      	b.n	8008956 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800887e:	6879      	ldr	r1, [r7, #4]
 8008880:	68fa      	ldr	r2, [r7, #12]
 8008882:	4613      	mov	r3, r2
 8008884:	009b      	lsls	r3, r3, #2
 8008886:	4413      	add	r3, r2
 8008888:	00db      	lsls	r3, r3, #3
 800888a:	440b      	add	r3, r1
 800888c:	335d      	adds	r3, #93	; 0x5d
 800888e:	781b      	ldrb	r3, [r3, #0]
 8008890:	2b06      	cmp	r3, #6
 8008892:	d00a      	beq.n	80088aa <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8008894:	6879      	ldr	r1, [r7, #4]
 8008896:	68fa      	ldr	r2, [r7, #12]
 8008898:	4613      	mov	r3, r2
 800889a:	009b      	lsls	r3, r3, #2
 800889c:	4413      	add	r3, r2
 800889e:	00db      	lsls	r3, r3, #3
 80088a0:	440b      	add	r3, r1
 80088a2:	335d      	adds	r3, #93	; 0x5d
 80088a4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80088a6:	2b08      	cmp	r3, #8
 80088a8:	d155      	bne.n	8008956 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80088aa:	6879      	ldr	r1, [r7, #4]
 80088ac:	68fa      	ldr	r2, [r7, #12]
 80088ae:	4613      	mov	r3, r2
 80088b0:	009b      	lsls	r3, r3, #2
 80088b2:	4413      	add	r3, r2
 80088b4:	00db      	lsls	r3, r3, #3
 80088b6:	440b      	add	r3, r1
 80088b8:	3358      	adds	r3, #88	; 0x58
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	1c59      	adds	r1, r3, #1
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	68fa      	ldr	r2, [r7, #12]
 80088c2:	4613      	mov	r3, r2
 80088c4:	009b      	lsls	r3, r3, #2
 80088c6:	4413      	add	r3, r2
 80088c8:	00db      	lsls	r3, r3, #3
 80088ca:	4403      	add	r3, r0
 80088cc:	3358      	adds	r3, #88	; 0x58
 80088ce:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80088d0:	6879      	ldr	r1, [r7, #4]
 80088d2:	68fa      	ldr	r2, [r7, #12]
 80088d4:	4613      	mov	r3, r2
 80088d6:	009b      	lsls	r3, r3, #2
 80088d8:	4413      	add	r3, r2
 80088da:	00db      	lsls	r3, r3, #3
 80088dc:	440b      	add	r3, r1
 80088de:	3358      	adds	r3, #88	; 0x58
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	2b03      	cmp	r3, #3
 80088e4:	d914      	bls.n	8008910 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80088e6:	6879      	ldr	r1, [r7, #4]
 80088e8:	68fa      	ldr	r2, [r7, #12]
 80088ea:	4613      	mov	r3, r2
 80088ec:	009b      	lsls	r3, r3, #2
 80088ee:	4413      	add	r3, r2
 80088f0:	00db      	lsls	r3, r3, #3
 80088f2:	440b      	add	r3, r1
 80088f4:	3358      	adds	r3, #88	; 0x58
 80088f6:	2200      	movs	r2, #0
 80088f8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80088fa:	6879      	ldr	r1, [r7, #4]
 80088fc:	68fa      	ldr	r2, [r7, #12]
 80088fe:	4613      	mov	r3, r2
 8008900:	009b      	lsls	r3, r3, #2
 8008902:	4413      	add	r3, r2
 8008904:	00db      	lsls	r3, r3, #3
 8008906:	440b      	add	r3, r1
 8008908:	335c      	adds	r3, #92	; 0x5c
 800890a:	2204      	movs	r2, #4
 800890c:	701a      	strb	r2, [r3, #0]
 800890e:	e009      	b.n	8008924 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8008910:	6879      	ldr	r1, [r7, #4]
 8008912:	68fa      	ldr	r2, [r7, #12]
 8008914:	4613      	mov	r3, r2
 8008916:	009b      	lsls	r3, r3, #2
 8008918:	4413      	add	r3, r2
 800891a:	00db      	lsls	r3, r3, #3
 800891c:	440b      	add	r3, r1
 800891e:	335c      	adds	r3, #92	; 0x5c
 8008920:	2202      	movs	r2, #2
 8008922:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	015a      	lsls	r2, r3, #5
 8008928:	693b      	ldr	r3, [r7, #16]
 800892a:	4413      	add	r3, r2
 800892c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800893a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008942:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	015a      	lsls	r2, r3, #5
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	4413      	add	r3, r2
 800894c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008950:	461a      	mov	r2, r3
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	015a      	lsls	r2, r3, #5
 800895a:	693b      	ldr	r3, [r7, #16]
 800895c:	4413      	add	r3, r2
 800895e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008962:	461a      	mov	r2, r3
 8008964:	2302      	movs	r3, #2
 8008966:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	b2d8      	uxtb	r0, r3
 800896c:	6879      	ldr	r1, [r7, #4]
 800896e:	68fa      	ldr	r2, [r7, #12]
 8008970:	4613      	mov	r3, r2
 8008972:	009b      	lsls	r3, r3, #2
 8008974:	4413      	add	r3, r2
 8008976:	00db      	lsls	r3, r3, #3
 8008978:	440b      	add	r3, r1
 800897a:	335c      	adds	r3, #92	; 0x5c
 800897c:	781b      	ldrb	r3, [r3, #0]
 800897e:	461a      	mov	r2, r3
 8008980:	4601      	mov	r1, r0
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f004 fe0c 	bl	800d5a0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8008988:	bf00      	nop
 800898a:	3718      	adds	r7, #24
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}

08008990 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b08a      	sub	sp, #40	; 0x28
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800899e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a0:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	6a1b      	ldr	r3, [r3, #32]
 80089a8:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80089aa:	69fb      	ldr	r3, [r7, #28]
 80089ac:	f003 030f 	and.w	r3, r3, #15
 80089b0:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80089b2:	69fb      	ldr	r3, [r7, #28]
 80089b4:	0c5b      	lsrs	r3, r3, #17
 80089b6:	f003 030f 	and.w	r3, r3, #15
 80089ba:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80089bc:	69fb      	ldr	r3, [r7, #28]
 80089be:	091b      	lsrs	r3, r3, #4
 80089c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80089c4:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	2b02      	cmp	r3, #2
 80089ca:	d003      	beq.n	80089d4 <HCD_RXQLVL_IRQHandler+0x44>
 80089cc:	2b05      	cmp	r3, #5
 80089ce:	f000 8082 	beq.w	8008ad6 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80089d2:	e083      	b.n	8008adc <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d07f      	beq.n	8008ada <HCD_RXQLVL_IRQHandler+0x14a>
 80089da:	6879      	ldr	r1, [r7, #4]
 80089dc:	69ba      	ldr	r2, [r7, #24]
 80089de:	4613      	mov	r3, r2
 80089e0:	009b      	lsls	r3, r3, #2
 80089e2:	4413      	add	r3, r2
 80089e4:	00db      	lsls	r3, r3, #3
 80089e6:	440b      	add	r3, r1
 80089e8:	3344      	adds	r3, #68	; 0x44
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d074      	beq.n	8008ada <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6818      	ldr	r0, [r3, #0]
 80089f4:	6879      	ldr	r1, [r7, #4]
 80089f6:	69ba      	ldr	r2, [r7, #24]
 80089f8:	4613      	mov	r3, r2
 80089fa:	009b      	lsls	r3, r3, #2
 80089fc:	4413      	add	r3, r2
 80089fe:	00db      	lsls	r3, r3, #3
 8008a00:	440b      	add	r3, r1
 8008a02:	3344      	adds	r3, #68	; 0x44
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	693a      	ldr	r2, [r7, #16]
 8008a08:	b292      	uxth	r2, r2
 8008a0a:	4619      	mov	r1, r3
 8008a0c:	f001 ffc3 	bl	800a996 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8008a10:	6879      	ldr	r1, [r7, #4]
 8008a12:	69ba      	ldr	r2, [r7, #24]
 8008a14:	4613      	mov	r3, r2
 8008a16:	009b      	lsls	r3, r3, #2
 8008a18:	4413      	add	r3, r2
 8008a1a:	00db      	lsls	r3, r3, #3
 8008a1c:	440b      	add	r3, r1
 8008a1e:	3344      	adds	r3, #68	; 0x44
 8008a20:	681a      	ldr	r2, [r3, #0]
 8008a22:	693b      	ldr	r3, [r7, #16]
 8008a24:	18d1      	adds	r1, r2, r3
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	69ba      	ldr	r2, [r7, #24]
 8008a2a:	4613      	mov	r3, r2
 8008a2c:	009b      	lsls	r3, r3, #2
 8008a2e:	4413      	add	r3, r2
 8008a30:	00db      	lsls	r3, r3, #3
 8008a32:	4403      	add	r3, r0
 8008a34:	3344      	adds	r3, #68	; 0x44
 8008a36:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8008a38:	6879      	ldr	r1, [r7, #4]
 8008a3a:	69ba      	ldr	r2, [r7, #24]
 8008a3c:	4613      	mov	r3, r2
 8008a3e:	009b      	lsls	r3, r3, #2
 8008a40:	4413      	add	r3, r2
 8008a42:	00db      	lsls	r3, r3, #3
 8008a44:	440b      	add	r3, r1
 8008a46:	334c      	adds	r3, #76	; 0x4c
 8008a48:	681a      	ldr	r2, [r3, #0]
 8008a4a:	693b      	ldr	r3, [r7, #16]
 8008a4c:	18d1      	adds	r1, r2, r3
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	69ba      	ldr	r2, [r7, #24]
 8008a52:	4613      	mov	r3, r2
 8008a54:	009b      	lsls	r3, r3, #2
 8008a56:	4413      	add	r3, r2
 8008a58:	00db      	lsls	r3, r3, #3
 8008a5a:	4403      	add	r3, r0
 8008a5c:	334c      	adds	r3, #76	; 0x4c
 8008a5e:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8008a60:	69bb      	ldr	r3, [r7, #24]
 8008a62:	015a      	lsls	r2, r3, #5
 8008a64:	6a3b      	ldr	r3, [r7, #32]
 8008a66:	4413      	add	r3, r2
 8008a68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a6c:	691a      	ldr	r2, [r3, #16]
 8008a6e:	4b1d      	ldr	r3, [pc, #116]	; (8008ae4 <HCD_RXQLVL_IRQHandler+0x154>)
 8008a70:	4013      	ands	r3, r2
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d031      	beq.n	8008ada <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008a76:	69bb      	ldr	r3, [r7, #24]
 8008a78:	015a      	lsls	r2, r3, #5
 8008a7a:	6a3b      	ldr	r3, [r7, #32]
 8008a7c:	4413      	add	r3, r2
 8008a7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008a8c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008a94:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008a96:	69bb      	ldr	r3, [r7, #24]
 8008a98:	015a      	lsls	r2, r3, #5
 8008a9a:	6a3b      	ldr	r3, [r7, #32]
 8008a9c:	4413      	add	r3, r2
 8008a9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008aa2:	461a      	mov	r2, r3
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8008aa8:	6879      	ldr	r1, [r7, #4]
 8008aaa:	69ba      	ldr	r2, [r7, #24]
 8008aac:	4613      	mov	r3, r2
 8008aae:	009b      	lsls	r3, r3, #2
 8008ab0:	4413      	add	r3, r2
 8008ab2:	00db      	lsls	r3, r3, #3
 8008ab4:	440b      	add	r3, r1
 8008ab6:	3350      	adds	r3, #80	; 0x50
 8008ab8:	781b      	ldrb	r3, [r3, #0]
 8008aba:	f083 0301 	eor.w	r3, r3, #1
 8008abe:	b2d8      	uxtb	r0, r3
 8008ac0:	6879      	ldr	r1, [r7, #4]
 8008ac2:	69ba      	ldr	r2, [r7, #24]
 8008ac4:	4613      	mov	r3, r2
 8008ac6:	009b      	lsls	r3, r3, #2
 8008ac8:	4413      	add	r3, r2
 8008aca:	00db      	lsls	r3, r3, #3
 8008acc:	440b      	add	r3, r1
 8008ace:	3350      	adds	r3, #80	; 0x50
 8008ad0:	4602      	mov	r2, r0
 8008ad2:	701a      	strb	r2, [r3, #0]
      break;
 8008ad4:	e001      	b.n	8008ada <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8008ad6:	bf00      	nop
 8008ad8:	e000      	b.n	8008adc <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8008ada:	bf00      	nop
  }
}
 8008adc:	bf00      	nop
 8008ade:	3728      	adds	r7, #40	; 0x28
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}
 8008ae4:	1ff80000 	.word	0x1ff80000

08008ae8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b086      	sub	sp, #24
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8008b04:	693b      	ldr	r3, [r7, #16]
 8008b06:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008b14:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	f003 0302 	and.w	r3, r3, #2
 8008b1c:	2b02      	cmp	r3, #2
 8008b1e:	d10b      	bne.n	8008b38 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	f003 0301 	and.w	r3, r3, #1
 8008b26:	2b01      	cmp	r3, #1
 8008b28:	d102      	bne.n	8008b30 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f004 fd1c 	bl	800d568 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	f043 0302 	orr.w	r3, r3, #2
 8008b36:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	f003 0308 	and.w	r3, r3, #8
 8008b3e:	2b08      	cmp	r3, #8
 8008b40:	d132      	bne.n	8008ba8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	f043 0308 	orr.w	r3, r3, #8
 8008b48:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	f003 0304 	and.w	r3, r3, #4
 8008b50:	2b04      	cmp	r3, #4
 8008b52:	d126      	bne.n	8008ba2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	699b      	ldr	r3, [r3, #24]
 8008b58:	2b02      	cmp	r3, #2
 8008b5a:	d113      	bne.n	8008b84 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8008b62:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008b66:	d106      	bne.n	8008b76 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	2102      	movs	r1, #2
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f002 f84c 	bl	800ac0c <USB_InitFSLSPClkSel>
 8008b74:	e011      	b.n	8008b9a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	2101      	movs	r1, #1
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	f002 f845 	bl	800ac0c <USB_InitFSLSPClkSel>
 8008b82:	e00a      	b.n	8008b9a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	68db      	ldr	r3, [r3, #12]
 8008b88:	2b01      	cmp	r3, #1
 8008b8a:	d106      	bne.n	8008b9a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b92:	461a      	mov	r2, r3
 8008b94:	f64e 2360 	movw	r3, #60000	; 0xea60
 8008b98:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f004 fd0e 	bl	800d5bc <HAL_HCD_PortEnabled_Callback>
 8008ba0:	e002      	b.n	8008ba8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f004 fd18 	bl	800d5d8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	f003 0320 	and.w	r3, r3, #32
 8008bae:	2b20      	cmp	r3, #32
 8008bb0:	d103      	bne.n	8008bba <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	f043 0320 	orr.w	r3, r3, #32
 8008bb8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8008bba:	693b      	ldr	r3, [r7, #16]
 8008bbc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008bc0:	461a      	mov	r2, r3
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	6013      	str	r3, [r2, #0]
}
 8008bc6:	bf00      	nop
 8008bc8:	3718      	adds	r7, #24
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}
	...

08008bd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b084      	sub	sp, #16
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d101      	bne.n	8008be2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008bde:	2301      	movs	r3, #1
 8008be0:	e11f      	b.n	8008e22 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008be8:	b2db      	uxtb	r3, r3
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d106      	bne.n	8008bfc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f7fd fc1c 	bl	8006434 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2224      	movs	r2, #36	; 0x24
 8008c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	681a      	ldr	r2, [r3, #0]
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f022 0201 	bic.w	r2, r2, #1
 8008c12:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	681a      	ldr	r2, [r3, #0]
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008c22:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	681a      	ldr	r2, [r3, #0]
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008c32:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008c34:	f001 f9de 	bl	8009ff4 <HAL_RCC_GetPCLK1Freq>
 8008c38:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	4a7b      	ldr	r2, [pc, #492]	; (8008e2c <HAL_I2C_Init+0x25c>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d807      	bhi.n	8008c54 <HAL_I2C_Init+0x84>
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	4a7a      	ldr	r2, [pc, #488]	; (8008e30 <HAL_I2C_Init+0x260>)
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	bf94      	ite	ls
 8008c4c:	2301      	movls	r3, #1
 8008c4e:	2300      	movhi	r3, #0
 8008c50:	b2db      	uxtb	r3, r3
 8008c52:	e006      	b.n	8008c62 <HAL_I2C_Init+0x92>
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	4a77      	ldr	r2, [pc, #476]	; (8008e34 <HAL_I2C_Init+0x264>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	bf94      	ite	ls
 8008c5c:	2301      	movls	r3, #1
 8008c5e:	2300      	movhi	r3, #0
 8008c60:	b2db      	uxtb	r3, r3
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d001      	beq.n	8008c6a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008c66:	2301      	movs	r3, #1
 8008c68:	e0db      	b.n	8008e22 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	4a72      	ldr	r2, [pc, #456]	; (8008e38 <HAL_I2C_Init+0x268>)
 8008c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8008c72:	0c9b      	lsrs	r3, r3, #18
 8008c74:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	685b      	ldr	r3, [r3, #4]
 8008c7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	68ba      	ldr	r2, [r7, #8]
 8008c86:	430a      	orrs	r2, r1
 8008c88:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	6a1b      	ldr	r3, [r3, #32]
 8008c90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	685b      	ldr	r3, [r3, #4]
 8008c98:	4a64      	ldr	r2, [pc, #400]	; (8008e2c <HAL_I2C_Init+0x25c>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d802      	bhi.n	8008ca4 <HAL_I2C_Init+0xd4>
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	3301      	adds	r3, #1
 8008ca2:	e009      	b.n	8008cb8 <HAL_I2C_Init+0xe8>
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008caa:	fb02 f303 	mul.w	r3, r2, r3
 8008cae:	4a63      	ldr	r2, [pc, #396]	; (8008e3c <HAL_I2C_Init+0x26c>)
 8008cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8008cb4:	099b      	lsrs	r3, r3, #6
 8008cb6:	3301      	adds	r3, #1
 8008cb8:	687a      	ldr	r2, [r7, #4]
 8008cba:	6812      	ldr	r2, [r2, #0]
 8008cbc:	430b      	orrs	r3, r1
 8008cbe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	69db      	ldr	r3, [r3, #28]
 8008cc6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008cca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	685b      	ldr	r3, [r3, #4]
 8008cd2:	4956      	ldr	r1, [pc, #344]	; (8008e2c <HAL_I2C_Init+0x25c>)
 8008cd4:	428b      	cmp	r3, r1
 8008cd6:	d80d      	bhi.n	8008cf4 <HAL_I2C_Init+0x124>
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	1e59      	subs	r1, r3, #1
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	005b      	lsls	r3, r3, #1
 8008ce2:	fbb1 f3f3 	udiv	r3, r1, r3
 8008ce6:	3301      	adds	r3, #1
 8008ce8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008cec:	2b04      	cmp	r3, #4
 8008cee:	bf38      	it	cc
 8008cf0:	2304      	movcc	r3, #4
 8008cf2:	e04f      	b.n	8008d94 <HAL_I2C_Init+0x1c4>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	689b      	ldr	r3, [r3, #8]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d111      	bne.n	8008d20 <HAL_I2C_Init+0x150>
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	1e58      	subs	r0, r3, #1
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6859      	ldr	r1, [r3, #4]
 8008d04:	460b      	mov	r3, r1
 8008d06:	005b      	lsls	r3, r3, #1
 8008d08:	440b      	add	r3, r1
 8008d0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8008d0e:	3301      	adds	r3, #1
 8008d10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	bf0c      	ite	eq
 8008d18:	2301      	moveq	r3, #1
 8008d1a:	2300      	movne	r3, #0
 8008d1c:	b2db      	uxtb	r3, r3
 8008d1e:	e012      	b.n	8008d46 <HAL_I2C_Init+0x176>
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	1e58      	subs	r0, r3, #1
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6859      	ldr	r1, [r3, #4]
 8008d28:	460b      	mov	r3, r1
 8008d2a:	009b      	lsls	r3, r3, #2
 8008d2c:	440b      	add	r3, r1
 8008d2e:	0099      	lsls	r1, r3, #2
 8008d30:	440b      	add	r3, r1
 8008d32:	fbb0 f3f3 	udiv	r3, r0, r3
 8008d36:	3301      	adds	r3, #1
 8008d38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	bf0c      	ite	eq
 8008d40:	2301      	moveq	r3, #1
 8008d42:	2300      	movne	r3, #0
 8008d44:	b2db      	uxtb	r3, r3
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d001      	beq.n	8008d4e <HAL_I2C_Init+0x17e>
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	e022      	b.n	8008d94 <HAL_I2C_Init+0x1c4>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	689b      	ldr	r3, [r3, #8]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d10e      	bne.n	8008d74 <HAL_I2C_Init+0x1a4>
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	1e58      	subs	r0, r3, #1
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6859      	ldr	r1, [r3, #4]
 8008d5e:	460b      	mov	r3, r1
 8008d60:	005b      	lsls	r3, r3, #1
 8008d62:	440b      	add	r3, r1
 8008d64:	fbb0 f3f3 	udiv	r3, r0, r3
 8008d68:	3301      	adds	r3, #1
 8008d6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008d6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d72:	e00f      	b.n	8008d94 <HAL_I2C_Init+0x1c4>
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	1e58      	subs	r0, r3, #1
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6859      	ldr	r1, [r3, #4]
 8008d7c:	460b      	mov	r3, r1
 8008d7e:	009b      	lsls	r3, r3, #2
 8008d80:	440b      	add	r3, r1
 8008d82:	0099      	lsls	r1, r3, #2
 8008d84:	440b      	add	r3, r1
 8008d86:	fbb0 f3f3 	udiv	r3, r0, r3
 8008d8a:	3301      	adds	r3, #1
 8008d8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008d90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008d94:	6879      	ldr	r1, [r7, #4]
 8008d96:	6809      	ldr	r1, [r1, #0]
 8008d98:	4313      	orrs	r3, r2
 8008d9a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	69da      	ldr	r2, [r3, #28]
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6a1b      	ldr	r3, [r3, #32]
 8008dae:	431a      	orrs	r2, r3
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	430a      	orrs	r2, r1
 8008db6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	689b      	ldr	r3, [r3, #8]
 8008dbe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008dc2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008dc6:	687a      	ldr	r2, [r7, #4]
 8008dc8:	6911      	ldr	r1, [r2, #16]
 8008dca:	687a      	ldr	r2, [r7, #4]
 8008dcc:	68d2      	ldr	r2, [r2, #12]
 8008dce:	4311      	orrs	r1, r2
 8008dd0:	687a      	ldr	r2, [r7, #4]
 8008dd2:	6812      	ldr	r2, [r2, #0]
 8008dd4:	430b      	orrs	r3, r1
 8008dd6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	68db      	ldr	r3, [r3, #12]
 8008dde:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	695a      	ldr	r2, [r3, #20]
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	699b      	ldr	r3, [r3, #24]
 8008dea:	431a      	orrs	r2, r3
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	430a      	orrs	r2, r1
 8008df2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	681a      	ldr	r2, [r3, #0]
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f042 0201 	orr.w	r2, r2, #1
 8008e02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2200      	movs	r2, #0
 8008e08:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2220      	movs	r2, #32
 8008e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2200      	movs	r2, #0
 8008e16:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008e20:	2300      	movs	r3, #0
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	3710      	adds	r7, #16
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}
 8008e2a:	bf00      	nop
 8008e2c:	000186a0 	.word	0x000186a0
 8008e30:	001e847f 	.word	0x001e847f
 8008e34:	003d08ff 	.word	0x003d08ff
 8008e38:	431bde83 	.word	0x431bde83
 8008e3c:	10624dd3 	.word	0x10624dd3

08008e40 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b088      	sub	sp, #32
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d101      	bne.n	8008e52 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	e128      	b.n	80090a4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008e58:	b2db      	uxtb	r3, r3
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d109      	bne.n	8008e72 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2200      	movs	r2, #0
 8008e62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	4a90      	ldr	r2, [pc, #576]	; (80090ac <HAL_I2S_Init+0x26c>)
 8008e6a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f7fd fb87 	bl	8006580 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2202      	movs	r2, #2
 8008e76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	69db      	ldr	r3, [r3, #28]
 8008e80:	687a      	ldr	r2, [r7, #4]
 8008e82:	6812      	ldr	r2, [r2, #0]
 8008e84:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8008e88:	f023 030f 	bic.w	r3, r3, #15
 8008e8c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	2202      	movs	r2, #2
 8008e94:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	695b      	ldr	r3, [r3, #20]
 8008e9a:	2b02      	cmp	r3, #2
 8008e9c:	d060      	beq.n	8008f60 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	68db      	ldr	r3, [r3, #12]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d102      	bne.n	8008eac <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8008ea6:	2310      	movs	r3, #16
 8008ea8:	617b      	str	r3, [r7, #20]
 8008eaa:	e001      	b.n	8008eb0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8008eac:	2320      	movs	r3, #32
 8008eae:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	689b      	ldr	r3, [r3, #8]
 8008eb4:	2b20      	cmp	r3, #32
 8008eb6:	d802      	bhi.n	8008ebe <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8008eb8:	697b      	ldr	r3, [r7, #20]
 8008eba:	005b      	lsls	r3, r3, #1
 8008ebc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8008ebe:	2001      	movs	r0, #1
 8008ec0:	f001 f99c 	bl	800a1fc <HAL_RCCEx_GetPeriphCLKFreq>
 8008ec4:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	691b      	ldr	r3, [r3, #16]
 8008eca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ece:	d125      	bne.n	8008f1c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	68db      	ldr	r3, [r3, #12]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d010      	beq.n	8008efa <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	009b      	lsls	r3, r3, #2
 8008edc:	68fa      	ldr	r2, [r7, #12]
 8008ede:	fbb2 f2f3 	udiv	r2, r2, r3
 8008ee2:	4613      	mov	r3, r2
 8008ee4:	009b      	lsls	r3, r3, #2
 8008ee6:	4413      	add	r3, r2
 8008ee8:	005b      	lsls	r3, r3, #1
 8008eea:	461a      	mov	r2, r3
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	695b      	ldr	r3, [r3, #20]
 8008ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ef4:	3305      	adds	r3, #5
 8008ef6:	613b      	str	r3, [r7, #16]
 8008ef8:	e01f      	b.n	8008f3a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	00db      	lsls	r3, r3, #3
 8008efe:	68fa      	ldr	r2, [r7, #12]
 8008f00:	fbb2 f2f3 	udiv	r2, r2, r3
 8008f04:	4613      	mov	r3, r2
 8008f06:	009b      	lsls	r3, r3, #2
 8008f08:	4413      	add	r3, r2
 8008f0a:	005b      	lsls	r3, r3, #1
 8008f0c:	461a      	mov	r2, r3
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	695b      	ldr	r3, [r3, #20]
 8008f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f16:	3305      	adds	r3, #5
 8008f18:	613b      	str	r3, [r7, #16]
 8008f1a:	e00e      	b.n	8008f3a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8008f1c:	68fa      	ldr	r2, [r7, #12]
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	fbb2 f2f3 	udiv	r2, r2, r3
 8008f24:	4613      	mov	r3, r2
 8008f26:	009b      	lsls	r3, r3, #2
 8008f28:	4413      	add	r3, r2
 8008f2a:	005b      	lsls	r3, r3, #1
 8008f2c:	461a      	mov	r2, r3
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	695b      	ldr	r3, [r3, #20]
 8008f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f36:	3305      	adds	r3, #5
 8008f38:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8008f3a:	693b      	ldr	r3, [r7, #16]
 8008f3c:	4a5c      	ldr	r2, [pc, #368]	; (80090b0 <HAL_I2S_Init+0x270>)
 8008f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8008f42:	08db      	lsrs	r3, r3, #3
 8008f44:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8008f46:	693b      	ldr	r3, [r7, #16]
 8008f48:	f003 0301 	and.w	r3, r3, #1
 8008f4c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8008f4e:	693a      	ldr	r2, [r7, #16]
 8008f50:	69bb      	ldr	r3, [r7, #24]
 8008f52:	1ad3      	subs	r3, r2, r3
 8008f54:	085b      	lsrs	r3, r3, #1
 8008f56:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8008f58:	69bb      	ldr	r3, [r7, #24]
 8008f5a:	021b      	lsls	r3, r3, #8
 8008f5c:	61bb      	str	r3, [r7, #24]
 8008f5e:	e003      	b.n	8008f68 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8008f60:	2302      	movs	r3, #2
 8008f62:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8008f64:	2300      	movs	r3, #0
 8008f66:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8008f68:	69fb      	ldr	r3, [r7, #28]
 8008f6a:	2b01      	cmp	r3, #1
 8008f6c:	d902      	bls.n	8008f74 <HAL_I2S_Init+0x134>
 8008f6e:	69fb      	ldr	r3, [r7, #28]
 8008f70:	2bff      	cmp	r3, #255	; 0xff
 8008f72:	d907      	bls.n	8008f84 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f78:	f043 0210 	orr.w	r2, r3, #16
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8008f80:	2301      	movs	r3, #1
 8008f82:	e08f      	b.n	80090a4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	691a      	ldr	r2, [r3, #16]
 8008f88:	69bb      	ldr	r3, [r7, #24]
 8008f8a:	ea42 0103 	orr.w	r1, r2, r3
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	69fa      	ldr	r2, [r7, #28]
 8008f94:	430a      	orrs	r2, r1
 8008f96:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	69db      	ldr	r3, [r3, #28]
 8008f9e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8008fa2:	f023 030f 	bic.w	r3, r3, #15
 8008fa6:	687a      	ldr	r2, [r7, #4]
 8008fa8:	6851      	ldr	r1, [r2, #4]
 8008faa:	687a      	ldr	r2, [r7, #4]
 8008fac:	6892      	ldr	r2, [r2, #8]
 8008fae:	4311      	orrs	r1, r2
 8008fb0:	687a      	ldr	r2, [r7, #4]
 8008fb2:	68d2      	ldr	r2, [r2, #12]
 8008fb4:	4311      	orrs	r1, r2
 8008fb6:	687a      	ldr	r2, [r7, #4]
 8008fb8:	6992      	ldr	r2, [r2, #24]
 8008fba:	430a      	orrs	r2, r1
 8008fbc:	431a      	orrs	r2, r3
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008fc6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6a1b      	ldr	r3, [r3, #32]
 8008fcc:	2b01      	cmp	r3, #1
 8008fce:	d161      	bne.n	8009094 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	4a38      	ldr	r2, [pc, #224]	; (80090b4 <HAL_I2S_Init+0x274>)
 8008fd4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	4a37      	ldr	r2, [pc, #220]	; (80090b8 <HAL_I2S_Init+0x278>)
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	d101      	bne.n	8008fe4 <HAL_I2S_Init+0x1a4>
 8008fe0:	4b36      	ldr	r3, [pc, #216]	; (80090bc <HAL_I2S_Init+0x27c>)
 8008fe2:	e001      	b.n	8008fe8 <HAL_I2S_Init+0x1a8>
 8008fe4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008fe8:	69db      	ldr	r3, [r3, #28]
 8008fea:	687a      	ldr	r2, [r7, #4]
 8008fec:	6812      	ldr	r2, [r2, #0]
 8008fee:	4932      	ldr	r1, [pc, #200]	; (80090b8 <HAL_I2S_Init+0x278>)
 8008ff0:	428a      	cmp	r2, r1
 8008ff2:	d101      	bne.n	8008ff8 <HAL_I2S_Init+0x1b8>
 8008ff4:	4a31      	ldr	r2, [pc, #196]	; (80090bc <HAL_I2S_Init+0x27c>)
 8008ff6:	e001      	b.n	8008ffc <HAL_I2S_Init+0x1bc>
 8008ff8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8008ffc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8009000:	f023 030f 	bic.w	r3, r3, #15
 8009004:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	4a2b      	ldr	r2, [pc, #172]	; (80090b8 <HAL_I2S_Init+0x278>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d101      	bne.n	8009014 <HAL_I2S_Init+0x1d4>
 8009010:	4b2a      	ldr	r3, [pc, #168]	; (80090bc <HAL_I2S_Init+0x27c>)
 8009012:	e001      	b.n	8009018 <HAL_I2S_Init+0x1d8>
 8009014:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009018:	2202      	movs	r2, #2
 800901a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	4a25      	ldr	r2, [pc, #148]	; (80090b8 <HAL_I2S_Init+0x278>)
 8009022:	4293      	cmp	r3, r2
 8009024:	d101      	bne.n	800902a <HAL_I2S_Init+0x1ea>
 8009026:	4b25      	ldr	r3, [pc, #148]	; (80090bc <HAL_I2S_Init+0x27c>)
 8009028:	e001      	b.n	800902e <HAL_I2S_Init+0x1ee>
 800902a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800902e:	69db      	ldr	r3, [r3, #28]
 8009030:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	685b      	ldr	r3, [r3, #4]
 8009036:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800903a:	d003      	beq.n	8009044 <HAL_I2S_Init+0x204>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	685b      	ldr	r3, [r3, #4]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d103      	bne.n	800904c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8009044:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009048:	613b      	str	r3, [r7, #16]
 800904a:	e001      	b.n	8009050 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800904c:	2300      	movs	r3, #0
 800904e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8009050:	693b      	ldr	r3, [r7, #16]
 8009052:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	689b      	ldr	r3, [r3, #8]
 8009058:	b299      	uxth	r1, r3
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	68db      	ldr	r3, [r3, #12]
 800905e:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	699b      	ldr	r3, [r3, #24]
 8009064:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8009066:	4303      	orrs	r3, r0
 8009068:	b29b      	uxth	r3, r3
 800906a:	430b      	orrs	r3, r1
 800906c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800906e:	4313      	orrs	r3, r2
 8009070:	b29a      	uxth	r2, r3
 8009072:	897b      	ldrh	r3, [r7, #10]
 8009074:	4313      	orrs	r3, r2
 8009076:	b29b      	uxth	r3, r3
 8009078:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800907c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	4a0d      	ldr	r2, [pc, #52]	; (80090b8 <HAL_I2S_Init+0x278>)
 8009084:	4293      	cmp	r3, r2
 8009086:	d101      	bne.n	800908c <HAL_I2S_Init+0x24c>
 8009088:	4b0c      	ldr	r3, [pc, #48]	; (80090bc <HAL_I2S_Init+0x27c>)
 800908a:	e001      	b.n	8009090 <HAL_I2S_Init+0x250>
 800908c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009090:	897a      	ldrh	r2, [r7, #10]
 8009092:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2200      	movs	r2, #0
 8009098:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2201      	movs	r2, #1
 800909e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80090a2:	2300      	movs	r3, #0
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3720      	adds	r7, #32
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}
 80090ac:	080091b7 	.word	0x080091b7
 80090b0:	cccccccd 	.word	0xcccccccd
 80090b4:	080092cd 	.word	0x080092cd
 80090b8:	40003800 	.word	0x40003800
 80090bc:	40003400 	.word	0x40003400

080090c0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b083      	sub	sp, #12
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80090c8:	bf00      	nop
 80090ca:	370c      	adds	r7, #12
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr

080090d4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b083      	sub	sp, #12
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80090dc:	bf00      	nop
 80090de:	370c      	adds	r7, #12
 80090e0:	46bd      	mov	sp, r7
 80090e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e6:	4770      	bx	lr

080090e8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b083      	sub	sp, #12
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80090f0:	bf00      	nop
 80090f2:	370c      	adds	r7, #12
 80090f4:	46bd      	mov	sp, r7
 80090f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fa:	4770      	bx	lr

080090fc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b082      	sub	sp, #8
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009108:	881a      	ldrh	r2, [r3, #0]
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009114:	1c9a      	adds	r2, r3, #2
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800911e:	b29b      	uxth	r3, r3
 8009120:	3b01      	subs	r3, #1
 8009122:	b29a      	uxth	r2, r3
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800912c:	b29b      	uxth	r3, r3
 800912e:	2b00      	cmp	r3, #0
 8009130:	d10e      	bne.n	8009150 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	685a      	ldr	r2, [r3, #4]
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009140:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2201      	movs	r2, #1
 8009146:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f7ff ffb8 	bl	80090c0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8009150:	bf00      	nop
 8009152:	3708      	adds	r7, #8
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}

08009158 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b082      	sub	sp, #8
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	68da      	ldr	r2, [r3, #12]
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800916a:	b292      	uxth	r2, r2
 800916c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009172:	1c9a      	adds	r2, r3, #2
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800917c:	b29b      	uxth	r3, r3
 800917e:	3b01      	subs	r3, #1
 8009180:	b29a      	uxth	r2, r3
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800918a:	b29b      	uxth	r3, r3
 800918c:	2b00      	cmp	r3, #0
 800918e:	d10e      	bne.n	80091ae <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	685a      	ldr	r2, [r3, #4]
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800919e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2201      	movs	r2, #1
 80091a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f7ff ff93 	bl	80090d4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80091ae:	bf00      	nop
 80091b0:	3708      	adds	r7, #8
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}

080091b6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80091b6:	b580      	push	{r7, lr}
 80091b8:	b086      	sub	sp, #24
 80091ba:	af00      	add	r7, sp, #0
 80091bc:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	689b      	ldr	r3, [r3, #8]
 80091c4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80091cc:	b2db      	uxtb	r3, r3
 80091ce:	2b04      	cmp	r3, #4
 80091d0:	d13a      	bne.n	8009248 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	f003 0301 	and.w	r3, r3, #1
 80091d8:	2b01      	cmp	r3, #1
 80091da:	d109      	bne.n	80091f0 <I2S_IRQHandler+0x3a>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	685b      	ldr	r3, [r3, #4]
 80091e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091e6:	2b40      	cmp	r3, #64	; 0x40
 80091e8:	d102      	bne.n	80091f0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f7ff ffb4 	bl	8009158 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091f6:	2b40      	cmp	r3, #64	; 0x40
 80091f8:	d126      	bne.n	8009248 <I2S_IRQHandler+0x92>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	685b      	ldr	r3, [r3, #4]
 8009200:	f003 0320 	and.w	r3, r3, #32
 8009204:	2b20      	cmp	r3, #32
 8009206:	d11f      	bne.n	8009248 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	685a      	ldr	r2, [r3, #4]
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8009216:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8009218:	2300      	movs	r3, #0
 800921a:	613b      	str	r3, [r7, #16]
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	68db      	ldr	r3, [r3, #12]
 8009222:	613b      	str	r3, [r7, #16]
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	689b      	ldr	r3, [r3, #8]
 800922a:	613b      	str	r3, [r7, #16]
 800922c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2201      	movs	r2, #1
 8009232:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800923a:	f043 0202 	orr.w	r2, r3, #2
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f7ff ff50 	bl	80090e8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800924e:	b2db      	uxtb	r3, r3
 8009250:	2b03      	cmp	r3, #3
 8009252:	d136      	bne.n	80092c2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	f003 0302 	and.w	r3, r3, #2
 800925a:	2b02      	cmp	r3, #2
 800925c:	d109      	bne.n	8009272 <I2S_IRQHandler+0xbc>
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	685b      	ldr	r3, [r3, #4]
 8009264:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009268:	2b80      	cmp	r3, #128	; 0x80
 800926a:	d102      	bne.n	8009272 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f7ff ff45 	bl	80090fc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	f003 0308 	and.w	r3, r3, #8
 8009278:	2b08      	cmp	r3, #8
 800927a:	d122      	bne.n	80092c2 <I2S_IRQHandler+0x10c>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	685b      	ldr	r3, [r3, #4]
 8009282:	f003 0320 	and.w	r3, r3, #32
 8009286:	2b20      	cmp	r3, #32
 8009288:	d11b      	bne.n	80092c2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	685a      	ldr	r2, [r3, #4]
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009298:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800929a:	2300      	movs	r3, #0
 800929c:	60fb      	str	r3, [r7, #12]
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	689b      	ldr	r3, [r3, #8]
 80092a4:	60fb      	str	r3, [r7, #12]
 80092a6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2201      	movs	r2, #1
 80092ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092b4:	f043 0204 	orr.w	r2, r3, #4
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f7ff ff13 	bl	80090e8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80092c2:	bf00      	nop
 80092c4:	3718      	adds	r7, #24
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}
	...

080092cc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b088      	sub	sp, #32
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	689b      	ldr	r3, [r3, #8]
 80092da:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	4aa2      	ldr	r2, [pc, #648]	; (800956c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80092e2:	4293      	cmp	r3, r2
 80092e4:	d101      	bne.n	80092ea <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80092e6:	4ba2      	ldr	r3, [pc, #648]	; (8009570 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80092e8:	e001      	b.n	80092ee <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80092ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80092ee:	689b      	ldr	r3, [r3, #8]
 80092f0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	685b      	ldr	r3, [r3, #4]
 80092f8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	4a9b      	ldr	r2, [pc, #620]	; (800956c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8009300:	4293      	cmp	r3, r2
 8009302:	d101      	bne.n	8009308 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8009304:	4b9a      	ldr	r3, [pc, #616]	; (8009570 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8009306:	e001      	b.n	800930c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8009308:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800930c:	685b      	ldr	r3, [r3, #4]
 800930e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	685b      	ldr	r3, [r3, #4]
 8009314:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009318:	d004      	beq.n	8009324 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	685b      	ldr	r3, [r3, #4]
 800931e:	2b00      	cmp	r3, #0
 8009320:	f040 8099 	bne.w	8009456 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8009324:	69fb      	ldr	r3, [r7, #28]
 8009326:	f003 0302 	and.w	r3, r3, #2
 800932a:	2b02      	cmp	r3, #2
 800932c:	d107      	bne.n	800933e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009334:	2b00      	cmp	r3, #0
 8009336:	d002      	beq.n	800933e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f000 f925 	bl	8009588 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800933e:	69bb      	ldr	r3, [r7, #24]
 8009340:	f003 0301 	and.w	r3, r3, #1
 8009344:	2b01      	cmp	r3, #1
 8009346:	d107      	bne.n	8009358 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8009348:	693b      	ldr	r3, [r7, #16]
 800934a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800934e:	2b00      	cmp	r3, #0
 8009350:	d002      	beq.n	8009358 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f000 f9c8 	bl	80096e8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8009358:	69bb      	ldr	r3, [r7, #24]
 800935a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800935e:	2b40      	cmp	r3, #64	; 0x40
 8009360:	d13a      	bne.n	80093d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8009362:	693b      	ldr	r3, [r7, #16]
 8009364:	f003 0320 	and.w	r3, r3, #32
 8009368:	2b00      	cmp	r3, #0
 800936a:	d035      	beq.n	80093d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	4a7e      	ldr	r2, [pc, #504]	; (800956c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8009372:	4293      	cmp	r3, r2
 8009374:	d101      	bne.n	800937a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8009376:	4b7e      	ldr	r3, [pc, #504]	; (8009570 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8009378:	e001      	b.n	800937e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800937a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800937e:	685a      	ldr	r2, [r3, #4]
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	4979      	ldr	r1, [pc, #484]	; (800956c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8009386:	428b      	cmp	r3, r1
 8009388:	d101      	bne.n	800938e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800938a:	4b79      	ldr	r3, [pc, #484]	; (8009570 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800938c:	e001      	b.n	8009392 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800938e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009392:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8009396:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	685a      	ldr	r2, [r3, #4]
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80093a6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80093a8:	2300      	movs	r3, #0
 80093aa:	60fb      	str	r3, [r7, #12]
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	68db      	ldr	r3, [r3, #12]
 80093b2:	60fb      	str	r3, [r7, #12]
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	689b      	ldr	r3, [r3, #8]
 80093ba:	60fb      	str	r3, [r7, #12]
 80093bc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2201      	movs	r2, #1
 80093c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093ca:	f043 0202 	orr.w	r2, r3, #2
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f7ff fe88 	bl	80090e8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80093d8:	69fb      	ldr	r3, [r7, #28]
 80093da:	f003 0308 	and.w	r3, r3, #8
 80093de:	2b08      	cmp	r3, #8
 80093e0:	f040 80be 	bne.w	8009560 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	f003 0320 	and.w	r3, r3, #32
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	f000 80b8 	beq.w	8009560 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	685a      	ldr	r2, [r3, #4]
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80093fe:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	4a59      	ldr	r2, [pc, #356]	; (800956c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d101      	bne.n	800940e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800940a:	4b59      	ldr	r3, [pc, #356]	; (8009570 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800940c:	e001      	b.n	8009412 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800940e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009412:	685a      	ldr	r2, [r3, #4]
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	4954      	ldr	r1, [pc, #336]	; (800956c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800941a:	428b      	cmp	r3, r1
 800941c:	d101      	bne.n	8009422 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800941e:	4b54      	ldr	r3, [pc, #336]	; (8009570 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8009420:	e001      	b.n	8009426 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8009422:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009426:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800942a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800942c:	2300      	movs	r3, #0
 800942e:	60bb      	str	r3, [r7, #8]
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	689b      	ldr	r3, [r3, #8]
 8009436:	60bb      	str	r3, [r7, #8]
 8009438:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2201      	movs	r2, #1
 800943e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009446:	f043 0204 	orr.w	r2, r3, #4
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f7ff fe4a 	bl	80090e8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8009454:	e084      	b.n	8009560 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8009456:	69bb      	ldr	r3, [r7, #24]
 8009458:	f003 0302 	and.w	r3, r3, #2
 800945c:	2b02      	cmp	r3, #2
 800945e:	d107      	bne.n	8009470 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8009460:	693b      	ldr	r3, [r7, #16]
 8009462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009466:	2b00      	cmp	r3, #0
 8009468:	d002      	beq.n	8009470 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 f8be 	bl	80095ec <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8009470:	69fb      	ldr	r3, [r7, #28]
 8009472:	f003 0301 	and.w	r3, r3, #1
 8009476:	2b01      	cmp	r3, #1
 8009478:	d107      	bne.n	800948a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800947a:	697b      	ldr	r3, [r7, #20]
 800947c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009480:	2b00      	cmp	r3, #0
 8009482:	d002      	beq.n	800948a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f000 f8fd 	bl	8009684 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800948a:	69fb      	ldr	r3, [r7, #28]
 800948c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009490:	2b40      	cmp	r3, #64	; 0x40
 8009492:	d12f      	bne.n	80094f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	f003 0320 	and.w	r3, r3, #32
 800949a:	2b00      	cmp	r3, #0
 800949c:	d02a      	beq.n	80094f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	685a      	ldr	r2, [r3, #4]
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80094ac:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	4a2e      	ldr	r2, [pc, #184]	; (800956c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d101      	bne.n	80094bc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80094b8:	4b2d      	ldr	r3, [pc, #180]	; (8009570 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80094ba:	e001      	b.n	80094c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80094bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80094c0:	685a      	ldr	r2, [r3, #4]
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	4929      	ldr	r1, [pc, #164]	; (800956c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80094c8:	428b      	cmp	r3, r1
 80094ca:	d101      	bne.n	80094d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80094cc:	4b28      	ldr	r3, [pc, #160]	; (8009570 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80094ce:	e001      	b.n	80094d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80094d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80094d4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80094d8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2201      	movs	r2, #1
 80094de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094e6:	f043 0202 	orr.w	r2, r3, #2
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f7ff fdfa 	bl	80090e8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80094f4:	69bb      	ldr	r3, [r7, #24]
 80094f6:	f003 0308 	and.w	r3, r3, #8
 80094fa:	2b08      	cmp	r3, #8
 80094fc:	d131      	bne.n	8009562 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80094fe:	693b      	ldr	r3, [r7, #16]
 8009500:	f003 0320 	and.w	r3, r3, #32
 8009504:	2b00      	cmp	r3, #0
 8009506:	d02c      	beq.n	8009562 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	4a17      	ldr	r2, [pc, #92]	; (800956c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800950e:	4293      	cmp	r3, r2
 8009510:	d101      	bne.n	8009516 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8009512:	4b17      	ldr	r3, [pc, #92]	; (8009570 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8009514:	e001      	b.n	800951a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8009516:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800951a:	685a      	ldr	r2, [r3, #4]
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	4912      	ldr	r1, [pc, #72]	; (800956c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8009522:	428b      	cmp	r3, r1
 8009524:	d101      	bne.n	800952a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8009526:	4b12      	ldr	r3, [pc, #72]	; (8009570 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8009528:	e001      	b.n	800952e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800952a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800952e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009532:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	685a      	ldr	r2, [r3, #4]
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8009542:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2201      	movs	r2, #1
 8009548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009550:	f043 0204 	orr.w	r2, r3, #4
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f7ff fdc5 	bl	80090e8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800955e:	e000      	b.n	8009562 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8009560:	bf00      	nop
}
 8009562:	bf00      	nop
 8009564:	3720      	adds	r7, #32
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}
 800956a:	bf00      	nop
 800956c:	40003800 	.word	0x40003800
 8009570:	40003400 	.word	0x40003400

08009574 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8009574:	b480      	push	{r7}
 8009576:	b083      	sub	sp, #12
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800957c:	bf00      	nop
 800957e:	370c      	adds	r7, #12
 8009580:	46bd      	mov	sp, r7
 8009582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009586:	4770      	bx	lr

08009588 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b082      	sub	sp, #8
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009594:	1c99      	adds	r1, r3, #2
 8009596:	687a      	ldr	r2, [r7, #4]
 8009598:	6251      	str	r1, [r2, #36]	; 0x24
 800959a:	881a      	ldrh	r2, [r3, #0]
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095a6:	b29b      	uxth	r3, r3
 80095a8:	3b01      	subs	r3, #1
 80095aa:	b29a      	uxth	r2, r3
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095b4:	b29b      	uxth	r3, r3
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d113      	bne.n	80095e2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	685a      	ldr	r2, [r3, #4]
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80095c8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80095ce:	b29b      	uxth	r3, r3
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d106      	bne.n	80095e2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2201      	movs	r2, #1
 80095d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80095dc:	6878      	ldr	r0, [r7, #4]
 80095de:	f7ff ffc9 	bl	8009574 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80095e2:	bf00      	nop
 80095e4:	3708      	adds	r7, #8
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}
	...

080095ec <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b082      	sub	sp, #8
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095f8:	1c99      	adds	r1, r3, #2
 80095fa:	687a      	ldr	r2, [r7, #4]
 80095fc:	6251      	str	r1, [r2, #36]	; 0x24
 80095fe:	8819      	ldrh	r1, [r3, #0]
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	4a1d      	ldr	r2, [pc, #116]	; (800967c <I2SEx_TxISR_I2SExt+0x90>)
 8009606:	4293      	cmp	r3, r2
 8009608:	d101      	bne.n	800960e <I2SEx_TxISR_I2SExt+0x22>
 800960a:	4b1d      	ldr	r3, [pc, #116]	; (8009680 <I2SEx_TxISR_I2SExt+0x94>)
 800960c:	e001      	b.n	8009612 <I2SEx_TxISR_I2SExt+0x26>
 800960e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009612:	460a      	mov	r2, r1
 8009614:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800961a:	b29b      	uxth	r3, r3
 800961c:	3b01      	subs	r3, #1
 800961e:	b29a      	uxth	r2, r3
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009628:	b29b      	uxth	r3, r3
 800962a:	2b00      	cmp	r3, #0
 800962c:	d121      	bne.n	8009672 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	4a12      	ldr	r2, [pc, #72]	; (800967c <I2SEx_TxISR_I2SExt+0x90>)
 8009634:	4293      	cmp	r3, r2
 8009636:	d101      	bne.n	800963c <I2SEx_TxISR_I2SExt+0x50>
 8009638:	4b11      	ldr	r3, [pc, #68]	; (8009680 <I2SEx_TxISR_I2SExt+0x94>)
 800963a:	e001      	b.n	8009640 <I2SEx_TxISR_I2SExt+0x54>
 800963c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009640:	685a      	ldr	r2, [r3, #4]
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	490d      	ldr	r1, [pc, #52]	; (800967c <I2SEx_TxISR_I2SExt+0x90>)
 8009648:	428b      	cmp	r3, r1
 800964a:	d101      	bne.n	8009650 <I2SEx_TxISR_I2SExt+0x64>
 800964c:	4b0c      	ldr	r3, [pc, #48]	; (8009680 <I2SEx_TxISR_I2SExt+0x94>)
 800964e:	e001      	b.n	8009654 <I2SEx_TxISR_I2SExt+0x68>
 8009650:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009654:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009658:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800965e:	b29b      	uxth	r3, r3
 8009660:	2b00      	cmp	r3, #0
 8009662:	d106      	bne.n	8009672 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2201      	movs	r2, #1
 8009668:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f7ff ff81 	bl	8009574 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8009672:	bf00      	nop
 8009674:	3708      	adds	r7, #8
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}
 800967a:	bf00      	nop
 800967c:	40003800 	.word	0x40003800
 8009680:	40003400 	.word	0x40003400

08009684 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b082      	sub	sp, #8
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	68d8      	ldr	r0, [r3, #12]
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009696:	1c99      	adds	r1, r3, #2
 8009698:	687a      	ldr	r2, [r7, #4]
 800969a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800969c:	b282      	uxth	r2, r0
 800969e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80096a4:	b29b      	uxth	r3, r3
 80096a6:	3b01      	subs	r3, #1
 80096a8:	b29a      	uxth	r2, r3
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80096b2:	b29b      	uxth	r3, r3
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d113      	bne.n	80096e0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	685a      	ldr	r2, [r3, #4]
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80096c6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096cc:	b29b      	uxth	r3, r3
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d106      	bne.n	80096e0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2201      	movs	r2, #1
 80096d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f7ff ff4a 	bl	8009574 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80096e0:	bf00      	nop
 80096e2:	3708      	adds	r7, #8
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}

080096e8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b082      	sub	sp, #8
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	4a20      	ldr	r2, [pc, #128]	; (8009778 <I2SEx_RxISR_I2SExt+0x90>)
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d101      	bne.n	80096fe <I2SEx_RxISR_I2SExt+0x16>
 80096fa:	4b20      	ldr	r3, [pc, #128]	; (800977c <I2SEx_RxISR_I2SExt+0x94>)
 80096fc:	e001      	b.n	8009702 <I2SEx_RxISR_I2SExt+0x1a>
 80096fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009702:	68d8      	ldr	r0, [r3, #12]
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009708:	1c99      	adds	r1, r3, #2
 800970a:	687a      	ldr	r2, [r7, #4]
 800970c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800970e:	b282      	uxth	r2, r0
 8009710:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009716:	b29b      	uxth	r3, r3
 8009718:	3b01      	subs	r3, #1
 800971a:	b29a      	uxth	r2, r3
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009724:	b29b      	uxth	r3, r3
 8009726:	2b00      	cmp	r3, #0
 8009728:	d121      	bne.n	800976e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	4a12      	ldr	r2, [pc, #72]	; (8009778 <I2SEx_RxISR_I2SExt+0x90>)
 8009730:	4293      	cmp	r3, r2
 8009732:	d101      	bne.n	8009738 <I2SEx_RxISR_I2SExt+0x50>
 8009734:	4b11      	ldr	r3, [pc, #68]	; (800977c <I2SEx_RxISR_I2SExt+0x94>)
 8009736:	e001      	b.n	800973c <I2SEx_RxISR_I2SExt+0x54>
 8009738:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800973c:	685a      	ldr	r2, [r3, #4]
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	490d      	ldr	r1, [pc, #52]	; (8009778 <I2SEx_RxISR_I2SExt+0x90>)
 8009744:	428b      	cmp	r3, r1
 8009746:	d101      	bne.n	800974c <I2SEx_RxISR_I2SExt+0x64>
 8009748:	4b0c      	ldr	r3, [pc, #48]	; (800977c <I2SEx_RxISR_I2SExt+0x94>)
 800974a:	e001      	b.n	8009750 <I2SEx_RxISR_I2SExt+0x68>
 800974c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009750:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8009754:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800975a:	b29b      	uxth	r3, r3
 800975c:	2b00      	cmp	r3, #0
 800975e:	d106      	bne.n	800976e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2201      	movs	r2, #1
 8009764:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	f7ff ff03 	bl	8009574 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800976e:	bf00      	nop
 8009770:	3708      	adds	r7, #8
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}
 8009776:	bf00      	nop
 8009778:	40003800 	.word	0x40003800
 800977c:	40003400 	.word	0x40003400

08009780 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b086      	sub	sp, #24
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d101      	bne.n	8009792 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800978e:	2301      	movs	r3, #1
 8009790:	e25b      	b.n	8009c4a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f003 0301 	and.w	r3, r3, #1
 800979a:	2b00      	cmp	r3, #0
 800979c:	d075      	beq.n	800988a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800979e:	4ba3      	ldr	r3, [pc, #652]	; (8009a2c <HAL_RCC_OscConfig+0x2ac>)
 80097a0:	689b      	ldr	r3, [r3, #8]
 80097a2:	f003 030c 	and.w	r3, r3, #12
 80097a6:	2b04      	cmp	r3, #4
 80097a8:	d00c      	beq.n	80097c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80097aa:	4ba0      	ldr	r3, [pc, #640]	; (8009a2c <HAL_RCC_OscConfig+0x2ac>)
 80097ac:	689b      	ldr	r3, [r3, #8]
 80097ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80097b2:	2b08      	cmp	r3, #8
 80097b4:	d112      	bne.n	80097dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80097b6:	4b9d      	ldr	r3, [pc, #628]	; (8009a2c <HAL_RCC_OscConfig+0x2ac>)
 80097b8:	685b      	ldr	r3, [r3, #4]
 80097ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80097be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80097c2:	d10b      	bne.n	80097dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80097c4:	4b99      	ldr	r3, [pc, #612]	; (8009a2c <HAL_RCC_OscConfig+0x2ac>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d05b      	beq.n	8009888 <HAL_RCC_OscConfig+0x108>
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	685b      	ldr	r3, [r3, #4]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d157      	bne.n	8009888 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80097d8:	2301      	movs	r3, #1
 80097da:	e236      	b.n	8009c4a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	685b      	ldr	r3, [r3, #4]
 80097e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097e4:	d106      	bne.n	80097f4 <HAL_RCC_OscConfig+0x74>
 80097e6:	4b91      	ldr	r3, [pc, #580]	; (8009a2c <HAL_RCC_OscConfig+0x2ac>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	4a90      	ldr	r2, [pc, #576]	; (8009a2c <HAL_RCC_OscConfig+0x2ac>)
 80097ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80097f0:	6013      	str	r3, [r2, #0]
 80097f2:	e01d      	b.n	8009830 <HAL_RCC_OscConfig+0xb0>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	685b      	ldr	r3, [r3, #4]
 80097f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80097fc:	d10c      	bne.n	8009818 <HAL_RCC_OscConfig+0x98>
 80097fe:	4b8b      	ldr	r3, [pc, #556]	; (8009a2c <HAL_RCC_OscConfig+0x2ac>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	4a8a      	ldr	r2, [pc, #552]	; (8009a2c <HAL_RCC_OscConfig+0x2ac>)
 8009804:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009808:	6013      	str	r3, [r2, #0]
 800980a:	4b88      	ldr	r3, [pc, #544]	; (8009a2c <HAL_RCC_OscConfig+0x2ac>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	4a87      	ldr	r2, [pc, #540]	; (8009a2c <HAL_RCC_OscConfig+0x2ac>)
 8009810:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009814:	6013      	str	r3, [r2, #0]
 8009816:	e00b      	b.n	8009830 <HAL_RCC_OscConfig+0xb0>
 8009818:	4b84      	ldr	r3, [pc, #528]	; (8009a2c <HAL_RCC_OscConfig+0x2ac>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	4a83      	ldr	r2, [pc, #524]	; (8009a2c <HAL_RCC_OscConfig+0x2ac>)
 800981e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009822:	6013      	str	r3, [r2, #0]
 8009824:	4b81      	ldr	r3, [pc, #516]	; (8009a2c <HAL_RCC_OscConfig+0x2ac>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4a80      	ldr	r2, [pc, #512]	; (8009a2c <HAL_RCC_OscConfig+0x2ac>)
 800982a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800982e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	685b      	ldr	r3, [r3, #4]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d013      	beq.n	8009860 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009838:	f7fd f9fe 	bl	8006c38 <HAL_GetTick>
 800983c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800983e:	e008      	b.n	8009852 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009840:	f7fd f9fa 	bl	8006c38 <HAL_GetTick>
 8009844:	4602      	mov	r2, r0
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	1ad3      	subs	r3, r2, r3
 800984a:	2b64      	cmp	r3, #100	; 0x64
 800984c:	d901      	bls.n	8009852 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800984e:	2303      	movs	r3, #3
 8009850:	e1fb      	b.n	8009c4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009852:	4b76      	ldr	r3, [pc, #472]	; (8009a2c <HAL_RCC_OscConfig+0x2ac>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800985a:	2b00      	cmp	r3, #0
 800985c:	d0f0      	beq.n	8009840 <HAL_RCC_OscConfig+0xc0>
 800985e:	e014      	b.n	800988a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009860:	f7fd f9ea 	bl	8006c38 <HAL_GetTick>
 8009864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009866:	e008      	b.n	800987a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009868:	f7fd f9e6 	bl	8006c38 <HAL_GetTick>
 800986c:	4602      	mov	r2, r0
 800986e:	693b      	ldr	r3, [r7, #16]
 8009870:	1ad3      	subs	r3, r2, r3
 8009872:	2b64      	cmp	r3, #100	; 0x64
 8009874:	d901      	bls.n	800987a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009876:	2303      	movs	r3, #3
 8009878:	e1e7      	b.n	8009c4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800987a:	4b6c      	ldr	r3, [pc, #432]	; (8009a2c <HAL_RCC_OscConfig+0x2ac>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009882:	2b00      	cmp	r3, #0
 8009884:	d1f0      	bne.n	8009868 <HAL_RCC_OscConfig+0xe8>
 8009886:	e000      	b.n	800988a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009888:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f003 0302 	and.w	r3, r3, #2
 8009892:	2b00      	cmp	r3, #0
 8009894:	d063      	beq.n	800995e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009896:	4b65      	ldr	r3, [pc, #404]	; (8009a2c <HAL_RCC_OscConfig+0x2ac>)
 8009898:	689b      	ldr	r3, [r3, #8]
 800989a:	f003 030c 	and.w	r3, r3, #12
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d00b      	beq.n	80098ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80098a2:	4b62      	ldr	r3, [pc, #392]	; (8009a2c <HAL_RCC_OscConfig+0x2ac>)
 80098a4:	689b      	ldr	r3, [r3, #8]
 80098a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80098aa:	2b08      	cmp	r3, #8
 80098ac:	d11c      	bne.n	80098e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80098ae:	4b5f      	ldr	r3, [pc, #380]	; (8009a2c <HAL_RCC_OscConfig+0x2ac>)
 80098b0:	685b      	ldr	r3, [r3, #4]
 80098b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d116      	bne.n	80098e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80098ba:	4b5c      	ldr	r3, [pc, #368]	; (8009a2c <HAL_RCC_OscConfig+0x2ac>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f003 0302 	and.w	r3, r3, #2
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d005      	beq.n	80098d2 <HAL_RCC_OscConfig+0x152>
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	68db      	ldr	r3, [r3, #12]
 80098ca:	2b01      	cmp	r3, #1
 80098cc:	d001      	beq.n	80098d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80098ce:	2301      	movs	r3, #1
 80098d0:	e1bb      	b.n	8009c4a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80098d2:	4b56      	ldr	r3, [pc, #344]	; (8009a2c <HAL_RCC_OscConfig+0x2ac>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	691b      	ldr	r3, [r3, #16]
 80098de:	00db      	lsls	r3, r3, #3
 80098e0:	4952      	ldr	r1, [pc, #328]	; (8009a2c <HAL_RCC_OscConfig+0x2ac>)
 80098e2:	4313      	orrs	r3, r2
 80098e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80098e6:	e03a      	b.n	800995e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	68db      	ldr	r3, [r3, #12]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d020      	beq.n	8009932 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80098f0:	4b4f      	ldr	r3, [pc, #316]	; (8009a30 <HAL_RCC_OscConfig+0x2b0>)
 80098f2:	2201      	movs	r2, #1
 80098f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098f6:	f7fd f99f 	bl	8006c38 <HAL_GetTick>
 80098fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80098fc:	e008      	b.n	8009910 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80098fe:	f7fd f99b 	bl	8006c38 <HAL_GetTick>
 8009902:	4602      	mov	r2, r0
 8009904:	693b      	ldr	r3, [r7, #16]
 8009906:	1ad3      	subs	r3, r2, r3
 8009908:	2b02      	cmp	r3, #2
 800990a:	d901      	bls.n	8009910 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800990c:	2303      	movs	r3, #3
 800990e:	e19c      	b.n	8009c4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009910:	4b46      	ldr	r3, [pc, #280]	; (8009a2c <HAL_RCC_OscConfig+0x2ac>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	f003 0302 	and.w	r3, r3, #2
 8009918:	2b00      	cmp	r3, #0
 800991a:	d0f0      	beq.n	80098fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800991c:	4b43      	ldr	r3, [pc, #268]	; (8009a2c <HAL_RCC_OscConfig+0x2ac>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	691b      	ldr	r3, [r3, #16]
 8009928:	00db      	lsls	r3, r3, #3
 800992a:	4940      	ldr	r1, [pc, #256]	; (8009a2c <HAL_RCC_OscConfig+0x2ac>)
 800992c:	4313      	orrs	r3, r2
 800992e:	600b      	str	r3, [r1, #0]
 8009930:	e015      	b.n	800995e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009932:	4b3f      	ldr	r3, [pc, #252]	; (8009a30 <HAL_RCC_OscConfig+0x2b0>)
 8009934:	2200      	movs	r2, #0
 8009936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009938:	f7fd f97e 	bl	8006c38 <HAL_GetTick>
 800993c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800993e:	e008      	b.n	8009952 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009940:	f7fd f97a 	bl	8006c38 <HAL_GetTick>
 8009944:	4602      	mov	r2, r0
 8009946:	693b      	ldr	r3, [r7, #16]
 8009948:	1ad3      	subs	r3, r2, r3
 800994a:	2b02      	cmp	r3, #2
 800994c:	d901      	bls.n	8009952 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800994e:	2303      	movs	r3, #3
 8009950:	e17b      	b.n	8009c4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009952:	4b36      	ldr	r3, [pc, #216]	; (8009a2c <HAL_RCC_OscConfig+0x2ac>)
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f003 0302 	and.w	r3, r3, #2
 800995a:	2b00      	cmp	r3, #0
 800995c:	d1f0      	bne.n	8009940 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f003 0308 	and.w	r3, r3, #8
 8009966:	2b00      	cmp	r3, #0
 8009968:	d030      	beq.n	80099cc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	695b      	ldr	r3, [r3, #20]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d016      	beq.n	80099a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009972:	4b30      	ldr	r3, [pc, #192]	; (8009a34 <HAL_RCC_OscConfig+0x2b4>)
 8009974:	2201      	movs	r2, #1
 8009976:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009978:	f7fd f95e 	bl	8006c38 <HAL_GetTick>
 800997c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800997e:	e008      	b.n	8009992 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009980:	f7fd f95a 	bl	8006c38 <HAL_GetTick>
 8009984:	4602      	mov	r2, r0
 8009986:	693b      	ldr	r3, [r7, #16]
 8009988:	1ad3      	subs	r3, r2, r3
 800998a:	2b02      	cmp	r3, #2
 800998c:	d901      	bls.n	8009992 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800998e:	2303      	movs	r3, #3
 8009990:	e15b      	b.n	8009c4a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009992:	4b26      	ldr	r3, [pc, #152]	; (8009a2c <HAL_RCC_OscConfig+0x2ac>)
 8009994:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009996:	f003 0302 	and.w	r3, r3, #2
 800999a:	2b00      	cmp	r3, #0
 800999c:	d0f0      	beq.n	8009980 <HAL_RCC_OscConfig+0x200>
 800999e:	e015      	b.n	80099cc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80099a0:	4b24      	ldr	r3, [pc, #144]	; (8009a34 <HAL_RCC_OscConfig+0x2b4>)
 80099a2:	2200      	movs	r2, #0
 80099a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80099a6:	f7fd f947 	bl	8006c38 <HAL_GetTick>
 80099aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80099ac:	e008      	b.n	80099c0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80099ae:	f7fd f943 	bl	8006c38 <HAL_GetTick>
 80099b2:	4602      	mov	r2, r0
 80099b4:	693b      	ldr	r3, [r7, #16]
 80099b6:	1ad3      	subs	r3, r2, r3
 80099b8:	2b02      	cmp	r3, #2
 80099ba:	d901      	bls.n	80099c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80099bc:	2303      	movs	r3, #3
 80099be:	e144      	b.n	8009c4a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80099c0:	4b1a      	ldr	r3, [pc, #104]	; (8009a2c <HAL_RCC_OscConfig+0x2ac>)
 80099c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80099c4:	f003 0302 	and.w	r3, r3, #2
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d1f0      	bne.n	80099ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	f003 0304 	and.w	r3, r3, #4
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	f000 80a0 	beq.w	8009b1a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80099da:	2300      	movs	r3, #0
 80099dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80099de:	4b13      	ldr	r3, [pc, #76]	; (8009a2c <HAL_RCC_OscConfig+0x2ac>)
 80099e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d10f      	bne.n	8009a0a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80099ea:	2300      	movs	r3, #0
 80099ec:	60bb      	str	r3, [r7, #8]
 80099ee:	4b0f      	ldr	r3, [pc, #60]	; (8009a2c <HAL_RCC_OscConfig+0x2ac>)
 80099f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099f2:	4a0e      	ldr	r2, [pc, #56]	; (8009a2c <HAL_RCC_OscConfig+0x2ac>)
 80099f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80099f8:	6413      	str	r3, [r2, #64]	; 0x40
 80099fa:	4b0c      	ldr	r3, [pc, #48]	; (8009a2c <HAL_RCC_OscConfig+0x2ac>)
 80099fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a02:	60bb      	str	r3, [r7, #8]
 8009a04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009a06:	2301      	movs	r3, #1
 8009a08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009a0a:	4b0b      	ldr	r3, [pc, #44]	; (8009a38 <HAL_RCC_OscConfig+0x2b8>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d121      	bne.n	8009a5a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009a16:	4b08      	ldr	r3, [pc, #32]	; (8009a38 <HAL_RCC_OscConfig+0x2b8>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	4a07      	ldr	r2, [pc, #28]	; (8009a38 <HAL_RCC_OscConfig+0x2b8>)
 8009a1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009a22:	f7fd f909 	bl	8006c38 <HAL_GetTick>
 8009a26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009a28:	e011      	b.n	8009a4e <HAL_RCC_OscConfig+0x2ce>
 8009a2a:	bf00      	nop
 8009a2c:	40023800 	.word	0x40023800
 8009a30:	42470000 	.word	0x42470000
 8009a34:	42470e80 	.word	0x42470e80
 8009a38:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009a3c:	f7fd f8fc 	bl	8006c38 <HAL_GetTick>
 8009a40:	4602      	mov	r2, r0
 8009a42:	693b      	ldr	r3, [r7, #16]
 8009a44:	1ad3      	subs	r3, r2, r3
 8009a46:	2b02      	cmp	r3, #2
 8009a48:	d901      	bls.n	8009a4e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8009a4a:	2303      	movs	r3, #3
 8009a4c:	e0fd      	b.n	8009c4a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009a4e:	4b81      	ldr	r3, [pc, #516]	; (8009c54 <HAL_RCC_OscConfig+0x4d4>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d0f0      	beq.n	8009a3c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	689b      	ldr	r3, [r3, #8]
 8009a5e:	2b01      	cmp	r3, #1
 8009a60:	d106      	bne.n	8009a70 <HAL_RCC_OscConfig+0x2f0>
 8009a62:	4b7d      	ldr	r3, [pc, #500]	; (8009c58 <HAL_RCC_OscConfig+0x4d8>)
 8009a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a66:	4a7c      	ldr	r2, [pc, #496]	; (8009c58 <HAL_RCC_OscConfig+0x4d8>)
 8009a68:	f043 0301 	orr.w	r3, r3, #1
 8009a6c:	6713      	str	r3, [r2, #112]	; 0x70
 8009a6e:	e01c      	b.n	8009aaa <HAL_RCC_OscConfig+0x32a>
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	689b      	ldr	r3, [r3, #8]
 8009a74:	2b05      	cmp	r3, #5
 8009a76:	d10c      	bne.n	8009a92 <HAL_RCC_OscConfig+0x312>
 8009a78:	4b77      	ldr	r3, [pc, #476]	; (8009c58 <HAL_RCC_OscConfig+0x4d8>)
 8009a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a7c:	4a76      	ldr	r2, [pc, #472]	; (8009c58 <HAL_RCC_OscConfig+0x4d8>)
 8009a7e:	f043 0304 	orr.w	r3, r3, #4
 8009a82:	6713      	str	r3, [r2, #112]	; 0x70
 8009a84:	4b74      	ldr	r3, [pc, #464]	; (8009c58 <HAL_RCC_OscConfig+0x4d8>)
 8009a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a88:	4a73      	ldr	r2, [pc, #460]	; (8009c58 <HAL_RCC_OscConfig+0x4d8>)
 8009a8a:	f043 0301 	orr.w	r3, r3, #1
 8009a8e:	6713      	str	r3, [r2, #112]	; 0x70
 8009a90:	e00b      	b.n	8009aaa <HAL_RCC_OscConfig+0x32a>
 8009a92:	4b71      	ldr	r3, [pc, #452]	; (8009c58 <HAL_RCC_OscConfig+0x4d8>)
 8009a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a96:	4a70      	ldr	r2, [pc, #448]	; (8009c58 <HAL_RCC_OscConfig+0x4d8>)
 8009a98:	f023 0301 	bic.w	r3, r3, #1
 8009a9c:	6713      	str	r3, [r2, #112]	; 0x70
 8009a9e:	4b6e      	ldr	r3, [pc, #440]	; (8009c58 <HAL_RCC_OscConfig+0x4d8>)
 8009aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009aa2:	4a6d      	ldr	r2, [pc, #436]	; (8009c58 <HAL_RCC_OscConfig+0x4d8>)
 8009aa4:	f023 0304 	bic.w	r3, r3, #4
 8009aa8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	689b      	ldr	r3, [r3, #8]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d015      	beq.n	8009ade <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ab2:	f7fd f8c1 	bl	8006c38 <HAL_GetTick>
 8009ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009ab8:	e00a      	b.n	8009ad0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009aba:	f7fd f8bd 	bl	8006c38 <HAL_GetTick>
 8009abe:	4602      	mov	r2, r0
 8009ac0:	693b      	ldr	r3, [r7, #16]
 8009ac2:	1ad3      	subs	r3, r2, r3
 8009ac4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	d901      	bls.n	8009ad0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8009acc:	2303      	movs	r3, #3
 8009ace:	e0bc      	b.n	8009c4a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009ad0:	4b61      	ldr	r3, [pc, #388]	; (8009c58 <HAL_RCC_OscConfig+0x4d8>)
 8009ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ad4:	f003 0302 	and.w	r3, r3, #2
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d0ee      	beq.n	8009aba <HAL_RCC_OscConfig+0x33a>
 8009adc:	e014      	b.n	8009b08 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009ade:	f7fd f8ab 	bl	8006c38 <HAL_GetTick>
 8009ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009ae4:	e00a      	b.n	8009afc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009ae6:	f7fd f8a7 	bl	8006c38 <HAL_GetTick>
 8009aea:	4602      	mov	r2, r0
 8009aec:	693b      	ldr	r3, [r7, #16]
 8009aee:	1ad3      	subs	r3, r2, r3
 8009af0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009af4:	4293      	cmp	r3, r2
 8009af6:	d901      	bls.n	8009afc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8009af8:	2303      	movs	r3, #3
 8009afa:	e0a6      	b.n	8009c4a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009afc:	4b56      	ldr	r3, [pc, #344]	; (8009c58 <HAL_RCC_OscConfig+0x4d8>)
 8009afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b00:	f003 0302 	and.w	r3, r3, #2
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d1ee      	bne.n	8009ae6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009b08:	7dfb      	ldrb	r3, [r7, #23]
 8009b0a:	2b01      	cmp	r3, #1
 8009b0c:	d105      	bne.n	8009b1a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009b0e:	4b52      	ldr	r3, [pc, #328]	; (8009c58 <HAL_RCC_OscConfig+0x4d8>)
 8009b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b12:	4a51      	ldr	r2, [pc, #324]	; (8009c58 <HAL_RCC_OscConfig+0x4d8>)
 8009b14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009b18:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	699b      	ldr	r3, [r3, #24]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	f000 8092 	beq.w	8009c48 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009b24:	4b4c      	ldr	r3, [pc, #304]	; (8009c58 <HAL_RCC_OscConfig+0x4d8>)
 8009b26:	689b      	ldr	r3, [r3, #8]
 8009b28:	f003 030c 	and.w	r3, r3, #12
 8009b2c:	2b08      	cmp	r3, #8
 8009b2e:	d05c      	beq.n	8009bea <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	699b      	ldr	r3, [r3, #24]
 8009b34:	2b02      	cmp	r3, #2
 8009b36:	d141      	bne.n	8009bbc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009b38:	4b48      	ldr	r3, [pc, #288]	; (8009c5c <HAL_RCC_OscConfig+0x4dc>)
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b3e:	f7fd f87b 	bl	8006c38 <HAL_GetTick>
 8009b42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009b44:	e008      	b.n	8009b58 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009b46:	f7fd f877 	bl	8006c38 <HAL_GetTick>
 8009b4a:	4602      	mov	r2, r0
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	1ad3      	subs	r3, r2, r3
 8009b50:	2b02      	cmp	r3, #2
 8009b52:	d901      	bls.n	8009b58 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8009b54:	2303      	movs	r3, #3
 8009b56:	e078      	b.n	8009c4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009b58:	4b3f      	ldr	r3, [pc, #252]	; (8009c58 <HAL_RCC_OscConfig+0x4d8>)
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d1f0      	bne.n	8009b46 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	69da      	ldr	r2, [r3, #28]
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6a1b      	ldr	r3, [r3, #32]
 8009b6c:	431a      	orrs	r2, r3
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b72:	019b      	lsls	r3, r3, #6
 8009b74:	431a      	orrs	r2, r3
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b7a:	085b      	lsrs	r3, r3, #1
 8009b7c:	3b01      	subs	r3, #1
 8009b7e:	041b      	lsls	r3, r3, #16
 8009b80:	431a      	orrs	r2, r3
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b86:	061b      	lsls	r3, r3, #24
 8009b88:	4933      	ldr	r1, [pc, #204]	; (8009c58 <HAL_RCC_OscConfig+0x4d8>)
 8009b8a:	4313      	orrs	r3, r2
 8009b8c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009b8e:	4b33      	ldr	r3, [pc, #204]	; (8009c5c <HAL_RCC_OscConfig+0x4dc>)
 8009b90:	2201      	movs	r2, #1
 8009b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b94:	f7fd f850 	bl	8006c38 <HAL_GetTick>
 8009b98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009b9a:	e008      	b.n	8009bae <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009b9c:	f7fd f84c 	bl	8006c38 <HAL_GetTick>
 8009ba0:	4602      	mov	r2, r0
 8009ba2:	693b      	ldr	r3, [r7, #16]
 8009ba4:	1ad3      	subs	r3, r2, r3
 8009ba6:	2b02      	cmp	r3, #2
 8009ba8:	d901      	bls.n	8009bae <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8009baa:	2303      	movs	r3, #3
 8009bac:	e04d      	b.n	8009c4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009bae:	4b2a      	ldr	r3, [pc, #168]	; (8009c58 <HAL_RCC_OscConfig+0x4d8>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d0f0      	beq.n	8009b9c <HAL_RCC_OscConfig+0x41c>
 8009bba:	e045      	b.n	8009c48 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009bbc:	4b27      	ldr	r3, [pc, #156]	; (8009c5c <HAL_RCC_OscConfig+0x4dc>)
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009bc2:	f7fd f839 	bl	8006c38 <HAL_GetTick>
 8009bc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009bc8:	e008      	b.n	8009bdc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009bca:	f7fd f835 	bl	8006c38 <HAL_GetTick>
 8009bce:	4602      	mov	r2, r0
 8009bd0:	693b      	ldr	r3, [r7, #16]
 8009bd2:	1ad3      	subs	r3, r2, r3
 8009bd4:	2b02      	cmp	r3, #2
 8009bd6:	d901      	bls.n	8009bdc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8009bd8:	2303      	movs	r3, #3
 8009bda:	e036      	b.n	8009c4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009bdc:	4b1e      	ldr	r3, [pc, #120]	; (8009c58 <HAL_RCC_OscConfig+0x4d8>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d1f0      	bne.n	8009bca <HAL_RCC_OscConfig+0x44a>
 8009be8:	e02e      	b.n	8009c48 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	699b      	ldr	r3, [r3, #24]
 8009bee:	2b01      	cmp	r3, #1
 8009bf0:	d101      	bne.n	8009bf6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	e029      	b.n	8009c4a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009bf6:	4b18      	ldr	r3, [pc, #96]	; (8009c58 <HAL_RCC_OscConfig+0x4d8>)
 8009bf8:	685b      	ldr	r3, [r3, #4]
 8009bfa:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	69db      	ldr	r3, [r3, #28]
 8009c06:	429a      	cmp	r2, r3
 8009c08:	d11c      	bne.n	8009c44 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009c14:	429a      	cmp	r2, r3
 8009c16:	d115      	bne.n	8009c44 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8009c18:	68fa      	ldr	r2, [r7, #12]
 8009c1a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009c1e:	4013      	ands	r3, r2
 8009c20:	687a      	ldr	r2, [r7, #4]
 8009c22:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009c24:	4293      	cmp	r3, r2
 8009c26:	d10d      	bne.n	8009c44 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8009c32:	429a      	cmp	r2, r3
 8009c34:	d106      	bne.n	8009c44 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009c40:	429a      	cmp	r2, r3
 8009c42:	d001      	beq.n	8009c48 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8009c44:	2301      	movs	r3, #1
 8009c46:	e000      	b.n	8009c4a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8009c48:	2300      	movs	r3, #0
}
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	3718      	adds	r7, #24
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bd80      	pop	{r7, pc}
 8009c52:	bf00      	nop
 8009c54:	40007000 	.word	0x40007000
 8009c58:	40023800 	.word	0x40023800
 8009c5c:	42470060 	.word	0x42470060

08009c60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b084      	sub	sp, #16
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
 8009c68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d101      	bne.n	8009c74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009c70:	2301      	movs	r3, #1
 8009c72:	e0cc      	b.n	8009e0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009c74:	4b68      	ldr	r3, [pc, #416]	; (8009e18 <HAL_RCC_ClockConfig+0x1b8>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f003 030f 	and.w	r3, r3, #15
 8009c7c:	683a      	ldr	r2, [r7, #0]
 8009c7e:	429a      	cmp	r2, r3
 8009c80:	d90c      	bls.n	8009c9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009c82:	4b65      	ldr	r3, [pc, #404]	; (8009e18 <HAL_RCC_ClockConfig+0x1b8>)
 8009c84:	683a      	ldr	r2, [r7, #0]
 8009c86:	b2d2      	uxtb	r2, r2
 8009c88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009c8a:	4b63      	ldr	r3, [pc, #396]	; (8009e18 <HAL_RCC_ClockConfig+0x1b8>)
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	f003 030f 	and.w	r3, r3, #15
 8009c92:	683a      	ldr	r2, [r7, #0]
 8009c94:	429a      	cmp	r2, r3
 8009c96:	d001      	beq.n	8009c9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009c98:	2301      	movs	r3, #1
 8009c9a:	e0b8      	b.n	8009e0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	f003 0302 	and.w	r3, r3, #2
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d020      	beq.n	8009cea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f003 0304 	and.w	r3, r3, #4
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d005      	beq.n	8009cc0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009cb4:	4b59      	ldr	r3, [pc, #356]	; (8009e1c <HAL_RCC_ClockConfig+0x1bc>)
 8009cb6:	689b      	ldr	r3, [r3, #8]
 8009cb8:	4a58      	ldr	r2, [pc, #352]	; (8009e1c <HAL_RCC_ClockConfig+0x1bc>)
 8009cba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009cbe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	f003 0308 	and.w	r3, r3, #8
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d005      	beq.n	8009cd8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009ccc:	4b53      	ldr	r3, [pc, #332]	; (8009e1c <HAL_RCC_ClockConfig+0x1bc>)
 8009cce:	689b      	ldr	r3, [r3, #8]
 8009cd0:	4a52      	ldr	r2, [pc, #328]	; (8009e1c <HAL_RCC_ClockConfig+0x1bc>)
 8009cd2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009cd6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009cd8:	4b50      	ldr	r3, [pc, #320]	; (8009e1c <HAL_RCC_ClockConfig+0x1bc>)
 8009cda:	689b      	ldr	r3, [r3, #8]
 8009cdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	689b      	ldr	r3, [r3, #8]
 8009ce4:	494d      	ldr	r1, [pc, #308]	; (8009e1c <HAL_RCC_ClockConfig+0x1bc>)
 8009ce6:	4313      	orrs	r3, r2
 8009ce8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f003 0301 	and.w	r3, r3, #1
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d044      	beq.n	8009d80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	685b      	ldr	r3, [r3, #4]
 8009cfa:	2b01      	cmp	r3, #1
 8009cfc:	d107      	bne.n	8009d0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009cfe:	4b47      	ldr	r3, [pc, #284]	; (8009e1c <HAL_RCC_ClockConfig+0x1bc>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d119      	bne.n	8009d3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	e07f      	b.n	8009e0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	685b      	ldr	r3, [r3, #4]
 8009d12:	2b02      	cmp	r3, #2
 8009d14:	d003      	beq.n	8009d1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009d1a:	2b03      	cmp	r3, #3
 8009d1c:	d107      	bne.n	8009d2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009d1e:	4b3f      	ldr	r3, [pc, #252]	; (8009e1c <HAL_RCC_ClockConfig+0x1bc>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d109      	bne.n	8009d3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	e06f      	b.n	8009e0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009d2e:	4b3b      	ldr	r3, [pc, #236]	; (8009e1c <HAL_RCC_ClockConfig+0x1bc>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	f003 0302 	and.w	r3, r3, #2
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d101      	bne.n	8009d3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	e067      	b.n	8009e0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009d3e:	4b37      	ldr	r3, [pc, #220]	; (8009e1c <HAL_RCC_ClockConfig+0x1bc>)
 8009d40:	689b      	ldr	r3, [r3, #8]
 8009d42:	f023 0203 	bic.w	r2, r3, #3
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	685b      	ldr	r3, [r3, #4]
 8009d4a:	4934      	ldr	r1, [pc, #208]	; (8009e1c <HAL_RCC_ClockConfig+0x1bc>)
 8009d4c:	4313      	orrs	r3, r2
 8009d4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009d50:	f7fc ff72 	bl	8006c38 <HAL_GetTick>
 8009d54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009d56:	e00a      	b.n	8009d6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009d58:	f7fc ff6e 	bl	8006c38 <HAL_GetTick>
 8009d5c:	4602      	mov	r2, r0
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	1ad3      	subs	r3, r2, r3
 8009d62:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d66:	4293      	cmp	r3, r2
 8009d68:	d901      	bls.n	8009d6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009d6a:	2303      	movs	r3, #3
 8009d6c:	e04f      	b.n	8009e0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009d6e:	4b2b      	ldr	r3, [pc, #172]	; (8009e1c <HAL_RCC_ClockConfig+0x1bc>)
 8009d70:	689b      	ldr	r3, [r3, #8]
 8009d72:	f003 020c 	and.w	r2, r3, #12
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	685b      	ldr	r3, [r3, #4]
 8009d7a:	009b      	lsls	r3, r3, #2
 8009d7c:	429a      	cmp	r2, r3
 8009d7e:	d1eb      	bne.n	8009d58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009d80:	4b25      	ldr	r3, [pc, #148]	; (8009e18 <HAL_RCC_ClockConfig+0x1b8>)
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	f003 030f 	and.w	r3, r3, #15
 8009d88:	683a      	ldr	r2, [r7, #0]
 8009d8a:	429a      	cmp	r2, r3
 8009d8c:	d20c      	bcs.n	8009da8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009d8e:	4b22      	ldr	r3, [pc, #136]	; (8009e18 <HAL_RCC_ClockConfig+0x1b8>)
 8009d90:	683a      	ldr	r2, [r7, #0]
 8009d92:	b2d2      	uxtb	r2, r2
 8009d94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009d96:	4b20      	ldr	r3, [pc, #128]	; (8009e18 <HAL_RCC_ClockConfig+0x1b8>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f003 030f 	and.w	r3, r3, #15
 8009d9e:	683a      	ldr	r2, [r7, #0]
 8009da0:	429a      	cmp	r2, r3
 8009da2:	d001      	beq.n	8009da8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009da4:	2301      	movs	r3, #1
 8009da6:	e032      	b.n	8009e0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	f003 0304 	and.w	r3, r3, #4
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d008      	beq.n	8009dc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009db4:	4b19      	ldr	r3, [pc, #100]	; (8009e1c <HAL_RCC_ClockConfig+0x1bc>)
 8009db6:	689b      	ldr	r3, [r3, #8]
 8009db8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	68db      	ldr	r3, [r3, #12]
 8009dc0:	4916      	ldr	r1, [pc, #88]	; (8009e1c <HAL_RCC_ClockConfig+0x1bc>)
 8009dc2:	4313      	orrs	r3, r2
 8009dc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f003 0308 	and.w	r3, r3, #8
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d009      	beq.n	8009de6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009dd2:	4b12      	ldr	r3, [pc, #72]	; (8009e1c <HAL_RCC_ClockConfig+0x1bc>)
 8009dd4:	689b      	ldr	r3, [r3, #8]
 8009dd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	691b      	ldr	r3, [r3, #16]
 8009dde:	00db      	lsls	r3, r3, #3
 8009de0:	490e      	ldr	r1, [pc, #56]	; (8009e1c <HAL_RCC_ClockConfig+0x1bc>)
 8009de2:	4313      	orrs	r3, r2
 8009de4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009de6:	f000 f821 	bl	8009e2c <HAL_RCC_GetSysClockFreq>
 8009dea:	4601      	mov	r1, r0
 8009dec:	4b0b      	ldr	r3, [pc, #44]	; (8009e1c <HAL_RCC_ClockConfig+0x1bc>)
 8009dee:	689b      	ldr	r3, [r3, #8]
 8009df0:	091b      	lsrs	r3, r3, #4
 8009df2:	f003 030f 	and.w	r3, r3, #15
 8009df6:	4a0a      	ldr	r2, [pc, #40]	; (8009e20 <HAL_RCC_ClockConfig+0x1c0>)
 8009df8:	5cd3      	ldrb	r3, [r2, r3]
 8009dfa:	fa21 f303 	lsr.w	r3, r1, r3
 8009dfe:	4a09      	ldr	r2, [pc, #36]	; (8009e24 <HAL_RCC_ClockConfig+0x1c4>)
 8009e00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009e02:	4b09      	ldr	r3, [pc, #36]	; (8009e28 <HAL_RCC_ClockConfig+0x1c8>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	4618      	mov	r0, r3
 8009e08:	f7fc fed2 	bl	8006bb0 <HAL_InitTick>

  return HAL_OK;
 8009e0c:	2300      	movs	r3, #0
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	3710      	adds	r7, #16
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}
 8009e16:	bf00      	nop
 8009e18:	40023c00 	.word	0x40023c00
 8009e1c:	40023800 	.word	0x40023800
 8009e20:	0800de78 	.word	0x0800de78
 8009e24:	20000000 	.word	0x20000000
 8009e28:	20000004 	.word	0x20000004

08009e2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e2e:	b085      	sub	sp, #20
 8009e30:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009e32:	2300      	movs	r3, #0
 8009e34:	607b      	str	r3, [r7, #4]
 8009e36:	2300      	movs	r3, #0
 8009e38:	60fb      	str	r3, [r7, #12]
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8009e3e:	2300      	movs	r3, #0
 8009e40:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009e42:	4b63      	ldr	r3, [pc, #396]	; (8009fd0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009e44:	689b      	ldr	r3, [r3, #8]
 8009e46:	f003 030c 	and.w	r3, r3, #12
 8009e4a:	2b04      	cmp	r3, #4
 8009e4c:	d007      	beq.n	8009e5e <HAL_RCC_GetSysClockFreq+0x32>
 8009e4e:	2b08      	cmp	r3, #8
 8009e50:	d008      	beq.n	8009e64 <HAL_RCC_GetSysClockFreq+0x38>
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	f040 80b4 	bne.w	8009fc0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009e58:	4b5e      	ldr	r3, [pc, #376]	; (8009fd4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8009e5a:	60bb      	str	r3, [r7, #8]
       break;
 8009e5c:	e0b3      	b.n	8009fc6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009e5e:	4b5e      	ldr	r3, [pc, #376]	; (8009fd8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8009e60:	60bb      	str	r3, [r7, #8]
      break;
 8009e62:	e0b0      	b.n	8009fc6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009e64:	4b5a      	ldr	r3, [pc, #360]	; (8009fd0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009e66:	685b      	ldr	r3, [r3, #4]
 8009e68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009e6c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009e6e:	4b58      	ldr	r3, [pc, #352]	; (8009fd0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009e70:	685b      	ldr	r3, [r3, #4]
 8009e72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d04a      	beq.n	8009f10 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009e7a:	4b55      	ldr	r3, [pc, #340]	; (8009fd0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009e7c:	685b      	ldr	r3, [r3, #4]
 8009e7e:	099b      	lsrs	r3, r3, #6
 8009e80:	f04f 0400 	mov.w	r4, #0
 8009e84:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009e88:	f04f 0200 	mov.w	r2, #0
 8009e8c:	ea03 0501 	and.w	r5, r3, r1
 8009e90:	ea04 0602 	and.w	r6, r4, r2
 8009e94:	4629      	mov	r1, r5
 8009e96:	4632      	mov	r2, r6
 8009e98:	f04f 0300 	mov.w	r3, #0
 8009e9c:	f04f 0400 	mov.w	r4, #0
 8009ea0:	0154      	lsls	r4, r2, #5
 8009ea2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009ea6:	014b      	lsls	r3, r1, #5
 8009ea8:	4619      	mov	r1, r3
 8009eaa:	4622      	mov	r2, r4
 8009eac:	1b49      	subs	r1, r1, r5
 8009eae:	eb62 0206 	sbc.w	r2, r2, r6
 8009eb2:	f04f 0300 	mov.w	r3, #0
 8009eb6:	f04f 0400 	mov.w	r4, #0
 8009eba:	0194      	lsls	r4, r2, #6
 8009ebc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8009ec0:	018b      	lsls	r3, r1, #6
 8009ec2:	1a5b      	subs	r3, r3, r1
 8009ec4:	eb64 0402 	sbc.w	r4, r4, r2
 8009ec8:	f04f 0100 	mov.w	r1, #0
 8009ecc:	f04f 0200 	mov.w	r2, #0
 8009ed0:	00e2      	lsls	r2, r4, #3
 8009ed2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8009ed6:	00d9      	lsls	r1, r3, #3
 8009ed8:	460b      	mov	r3, r1
 8009eda:	4614      	mov	r4, r2
 8009edc:	195b      	adds	r3, r3, r5
 8009ede:	eb44 0406 	adc.w	r4, r4, r6
 8009ee2:	f04f 0100 	mov.w	r1, #0
 8009ee6:	f04f 0200 	mov.w	r2, #0
 8009eea:	0262      	lsls	r2, r4, #9
 8009eec:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8009ef0:	0259      	lsls	r1, r3, #9
 8009ef2:	460b      	mov	r3, r1
 8009ef4:	4614      	mov	r4, r2
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	4621      	mov	r1, r4
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	f04f 0400 	mov.w	r4, #0
 8009f00:	461a      	mov	r2, r3
 8009f02:	4623      	mov	r3, r4
 8009f04:	f7f6 f968 	bl	80001d8 <__aeabi_uldivmod>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	460c      	mov	r4, r1
 8009f0c:	60fb      	str	r3, [r7, #12]
 8009f0e:	e049      	b.n	8009fa4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009f10:	4b2f      	ldr	r3, [pc, #188]	; (8009fd0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009f12:	685b      	ldr	r3, [r3, #4]
 8009f14:	099b      	lsrs	r3, r3, #6
 8009f16:	f04f 0400 	mov.w	r4, #0
 8009f1a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009f1e:	f04f 0200 	mov.w	r2, #0
 8009f22:	ea03 0501 	and.w	r5, r3, r1
 8009f26:	ea04 0602 	and.w	r6, r4, r2
 8009f2a:	4629      	mov	r1, r5
 8009f2c:	4632      	mov	r2, r6
 8009f2e:	f04f 0300 	mov.w	r3, #0
 8009f32:	f04f 0400 	mov.w	r4, #0
 8009f36:	0154      	lsls	r4, r2, #5
 8009f38:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009f3c:	014b      	lsls	r3, r1, #5
 8009f3e:	4619      	mov	r1, r3
 8009f40:	4622      	mov	r2, r4
 8009f42:	1b49      	subs	r1, r1, r5
 8009f44:	eb62 0206 	sbc.w	r2, r2, r6
 8009f48:	f04f 0300 	mov.w	r3, #0
 8009f4c:	f04f 0400 	mov.w	r4, #0
 8009f50:	0194      	lsls	r4, r2, #6
 8009f52:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8009f56:	018b      	lsls	r3, r1, #6
 8009f58:	1a5b      	subs	r3, r3, r1
 8009f5a:	eb64 0402 	sbc.w	r4, r4, r2
 8009f5e:	f04f 0100 	mov.w	r1, #0
 8009f62:	f04f 0200 	mov.w	r2, #0
 8009f66:	00e2      	lsls	r2, r4, #3
 8009f68:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8009f6c:	00d9      	lsls	r1, r3, #3
 8009f6e:	460b      	mov	r3, r1
 8009f70:	4614      	mov	r4, r2
 8009f72:	195b      	adds	r3, r3, r5
 8009f74:	eb44 0406 	adc.w	r4, r4, r6
 8009f78:	f04f 0100 	mov.w	r1, #0
 8009f7c:	f04f 0200 	mov.w	r2, #0
 8009f80:	02a2      	lsls	r2, r4, #10
 8009f82:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8009f86:	0299      	lsls	r1, r3, #10
 8009f88:	460b      	mov	r3, r1
 8009f8a:	4614      	mov	r4, r2
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	4621      	mov	r1, r4
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f04f 0400 	mov.w	r4, #0
 8009f96:	461a      	mov	r2, r3
 8009f98:	4623      	mov	r3, r4
 8009f9a:	f7f6 f91d 	bl	80001d8 <__aeabi_uldivmod>
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	460c      	mov	r4, r1
 8009fa2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009fa4:	4b0a      	ldr	r3, [pc, #40]	; (8009fd0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009fa6:	685b      	ldr	r3, [r3, #4]
 8009fa8:	0c1b      	lsrs	r3, r3, #16
 8009faa:	f003 0303 	and.w	r3, r3, #3
 8009fae:	3301      	adds	r3, #1
 8009fb0:	005b      	lsls	r3, r3, #1
 8009fb2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8009fb4:	68fa      	ldr	r2, [r7, #12]
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fbc:	60bb      	str	r3, [r7, #8]
      break;
 8009fbe:	e002      	b.n	8009fc6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009fc0:	4b04      	ldr	r3, [pc, #16]	; (8009fd4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8009fc2:	60bb      	str	r3, [r7, #8]
      break;
 8009fc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009fc6:	68bb      	ldr	r3, [r7, #8]
}
 8009fc8:	4618      	mov	r0, r3
 8009fca:	3714      	adds	r7, #20
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fd0:	40023800 	.word	0x40023800
 8009fd4:	00f42400 	.word	0x00f42400
 8009fd8:	007a1200 	.word	0x007a1200

08009fdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009fdc:	b480      	push	{r7}
 8009fde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009fe0:	4b03      	ldr	r3, [pc, #12]	; (8009ff0 <HAL_RCC_GetHCLKFreq+0x14>)
 8009fe2:	681b      	ldr	r3, [r3, #0]
}
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fec:	4770      	bx	lr
 8009fee:	bf00      	nop
 8009ff0:	20000000 	.word	0x20000000

08009ff4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009ff8:	f7ff fff0 	bl	8009fdc <HAL_RCC_GetHCLKFreq>
 8009ffc:	4601      	mov	r1, r0
 8009ffe:	4b05      	ldr	r3, [pc, #20]	; (800a014 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a000:	689b      	ldr	r3, [r3, #8]
 800a002:	0a9b      	lsrs	r3, r3, #10
 800a004:	f003 0307 	and.w	r3, r3, #7
 800a008:	4a03      	ldr	r2, [pc, #12]	; (800a018 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a00a:	5cd3      	ldrb	r3, [r2, r3]
 800a00c:	fa21 f303 	lsr.w	r3, r1, r3
}
 800a010:	4618      	mov	r0, r3
 800a012:	bd80      	pop	{r7, pc}
 800a014:	40023800 	.word	0x40023800
 800a018:	0800de88 	.word	0x0800de88

0800a01c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b086      	sub	sp, #24
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a024:	2300      	movs	r3, #0
 800a026:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800a028:	2300      	movs	r3, #0
 800a02a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f003 0301 	and.w	r3, r3, #1
 800a034:	2b00      	cmp	r3, #0
 800a036:	d105      	bne.n	800a044 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a040:	2b00      	cmp	r3, #0
 800a042:	d038      	beq.n	800a0b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a044:	4b68      	ldr	r3, [pc, #416]	; (800a1e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800a046:	2200      	movs	r2, #0
 800a048:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a04a:	f7fc fdf5 	bl	8006c38 <HAL_GetTick>
 800a04e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a050:	e008      	b.n	800a064 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a052:	f7fc fdf1 	bl	8006c38 <HAL_GetTick>
 800a056:	4602      	mov	r2, r0
 800a058:	697b      	ldr	r3, [r7, #20]
 800a05a:	1ad3      	subs	r3, r2, r3
 800a05c:	2b02      	cmp	r3, #2
 800a05e:	d901      	bls.n	800a064 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a060:	2303      	movs	r3, #3
 800a062:	e0bd      	b.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a064:	4b61      	ldr	r3, [pc, #388]	; (800a1ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d1f0      	bne.n	800a052 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	685a      	ldr	r2, [r3, #4]
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	689b      	ldr	r3, [r3, #8]
 800a078:	019b      	lsls	r3, r3, #6
 800a07a:	431a      	orrs	r2, r3
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	68db      	ldr	r3, [r3, #12]
 800a080:	071b      	lsls	r3, r3, #28
 800a082:	495a      	ldr	r1, [pc, #360]	; (800a1ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a084:	4313      	orrs	r3, r2
 800a086:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800a08a:	4b57      	ldr	r3, [pc, #348]	; (800a1e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800a08c:	2201      	movs	r2, #1
 800a08e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a090:	f7fc fdd2 	bl	8006c38 <HAL_GetTick>
 800a094:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a096:	e008      	b.n	800a0aa <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a098:	f7fc fdce 	bl	8006c38 <HAL_GetTick>
 800a09c:	4602      	mov	r2, r0
 800a09e:	697b      	ldr	r3, [r7, #20]
 800a0a0:	1ad3      	subs	r3, r2, r3
 800a0a2:	2b02      	cmp	r3, #2
 800a0a4:	d901      	bls.n	800a0aa <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a0a6:	2303      	movs	r3, #3
 800a0a8:	e09a      	b.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a0aa:	4b50      	ldr	r3, [pc, #320]	; (800a1ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d0f0      	beq.n	800a098 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	f003 0302 	and.w	r3, r3, #2
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	f000 8083 	beq.w	800a1ca <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	60fb      	str	r3, [r7, #12]
 800a0c8:	4b48      	ldr	r3, [pc, #288]	; (800a1ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a0ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0cc:	4a47      	ldr	r2, [pc, #284]	; (800a1ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a0ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a0d2:	6413      	str	r3, [r2, #64]	; 0x40
 800a0d4:	4b45      	ldr	r3, [pc, #276]	; (800a1ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a0d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a0dc:	60fb      	str	r3, [r7, #12]
 800a0de:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800a0e0:	4b43      	ldr	r3, [pc, #268]	; (800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	4a42      	ldr	r2, [pc, #264]	; (800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a0e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a0ea:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a0ec:	f7fc fda4 	bl	8006c38 <HAL_GetTick>
 800a0f0:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a0f2:	e008      	b.n	800a106 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a0f4:	f7fc fda0 	bl	8006c38 <HAL_GetTick>
 800a0f8:	4602      	mov	r2, r0
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	1ad3      	subs	r3, r2, r3
 800a0fe:	2b02      	cmp	r3, #2
 800a100:	d901      	bls.n	800a106 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800a102:	2303      	movs	r3, #3
 800a104:	e06c      	b.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a106:	4b3a      	ldr	r3, [pc, #232]	; (800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d0f0      	beq.n	800a0f4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a112:	4b36      	ldr	r3, [pc, #216]	; (800a1ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a116:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a11a:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a11c:	693b      	ldr	r3, [r7, #16]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d02f      	beq.n	800a182 <HAL_RCCEx_PeriphCLKConfig+0x166>
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	691b      	ldr	r3, [r3, #16]
 800a126:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a12a:	693a      	ldr	r2, [r7, #16]
 800a12c:	429a      	cmp	r2, r3
 800a12e:	d028      	beq.n	800a182 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a130:	4b2e      	ldr	r3, [pc, #184]	; (800a1ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a134:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a138:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a13a:	4b2e      	ldr	r3, [pc, #184]	; (800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800a13c:	2201      	movs	r2, #1
 800a13e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a140:	4b2c      	ldr	r3, [pc, #176]	; (800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800a142:	2200      	movs	r2, #0
 800a144:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800a146:	4a29      	ldr	r2, [pc, #164]	; (800a1ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a148:	693b      	ldr	r3, [r7, #16]
 800a14a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a14c:	4b27      	ldr	r3, [pc, #156]	; (800a1ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a14e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a150:	f003 0301 	and.w	r3, r3, #1
 800a154:	2b01      	cmp	r3, #1
 800a156:	d114      	bne.n	800a182 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800a158:	f7fc fd6e 	bl	8006c38 <HAL_GetTick>
 800a15c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a15e:	e00a      	b.n	800a176 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a160:	f7fc fd6a 	bl	8006c38 <HAL_GetTick>
 800a164:	4602      	mov	r2, r0
 800a166:	697b      	ldr	r3, [r7, #20]
 800a168:	1ad3      	subs	r3, r2, r3
 800a16a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a16e:	4293      	cmp	r3, r2
 800a170:	d901      	bls.n	800a176 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800a172:	2303      	movs	r3, #3
 800a174:	e034      	b.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a176:	4b1d      	ldr	r3, [pc, #116]	; (800a1ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a17a:	f003 0302 	and.w	r3, r3, #2
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d0ee      	beq.n	800a160 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	691b      	ldr	r3, [r3, #16]
 800a186:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a18a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a18e:	d10d      	bne.n	800a1ac <HAL_RCCEx_PeriphCLKConfig+0x190>
 800a190:	4b16      	ldr	r3, [pc, #88]	; (800a1ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a192:	689b      	ldr	r3, [r3, #8]
 800a194:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	691b      	ldr	r3, [r3, #16]
 800a19c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a1a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a1a4:	4911      	ldr	r1, [pc, #68]	; (800a1ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a1a6:	4313      	orrs	r3, r2
 800a1a8:	608b      	str	r3, [r1, #8]
 800a1aa:	e005      	b.n	800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800a1ac:	4b0f      	ldr	r3, [pc, #60]	; (800a1ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a1ae:	689b      	ldr	r3, [r3, #8]
 800a1b0:	4a0e      	ldr	r2, [pc, #56]	; (800a1ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a1b2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800a1b6:	6093      	str	r3, [r2, #8]
 800a1b8:	4b0c      	ldr	r3, [pc, #48]	; (800a1ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a1ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	691b      	ldr	r3, [r3, #16]
 800a1c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a1c4:	4909      	ldr	r1, [pc, #36]	; (800a1ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a1c6:	4313      	orrs	r3, r2
 800a1c8:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f003 0308 	and.w	r3, r3, #8
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d003      	beq.n	800a1de <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	7d1a      	ldrb	r2, [r3, #20]
 800a1da:	4b07      	ldr	r3, [pc, #28]	; (800a1f8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800a1dc:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800a1de:	2300      	movs	r3, #0
}
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	3718      	adds	r7, #24
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}
 800a1e8:	42470068 	.word	0x42470068
 800a1ec:	40023800 	.word	0x40023800
 800a1f0:	40007000 	.word	0x40007000
 800a1f4:	42470e40 	.word	0x42470e40
 800a1f8:	424711e0 	.word	0x424711e0

0800a1fc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	b087      	sub	sp, #28
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800a204:	2300      	movs	r3, #0
 800a206:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800a208:	2300      	movs	r3, #0
 800a20a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800a20c:	2300      	movs	r3, #0
 800a20e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800a210:	2300      	movs	r3, #0
 800a212:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2b01      	cmp	r3, #1
 800a218:	d13f      	bne.n	800a29a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800a21a:	4b23      	ldr	r3, [pc, #140]	; (800a2a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800a21c:	689b      	ldr	r3, [r3, #8]
 800a21e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a222:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d004      	beq.n	800a234 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800a22a:	2b01      	cmp	r3, #1
 800a22c:	d131      	bne.n	800a292 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800a22e:	4b1f      	ldr	r3, [pc, #124]	; (800a2ac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800a230:	617b      	str	r3, [r7, #20]
          break;
 800a232:	e031      	b.n	800a298 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800a234:	4b1c      	ldr	r3, [pc, #112]	; (800a2a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800a236:	685b      	ldr	r3, [r3, #4]
 800a238:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a23c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a240:	d109      	bne.n	800a256 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800a242:	4b19      	ldr	r3, [pc, #100]	; (800a2a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800a244:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a248:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a24c:	4a18      	ldr	r2, [pc, #96]	; (800a2b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800a24e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a252:	613b      	str	r3, [r7, #16]
 800a254:	e008      	b.n	800a268 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800a256:	4b14      	ldr	r3, [pc, #80]	; (800a2a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800a258:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a25c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a260:	4a14      	ldr	r2, [pc, #80]	; (800a2b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800a262:	fbb2 f3f3 	udiv	r3, r2, r3
 800a266:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800a268:	4b0f      	ldr	r3, [pc, #60]	; (800a2a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800a26a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a26e:	099b      	lsrs	r3, r3, #6
 800a270:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a274:	693b      	ldr	r3, [r7, #16]
 800a276:	fb02 f303 	mul.w	r3, r2, r3
 800a27a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800a27c:	4b0a      	ldr	r3, [pc, #40]	; (800a2a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800a27e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a282:	0f1b      	lsrs	r3, r3, #28
 800a284:	f003 0307 	and.w	r3, r3, #7
 800a288:	68ba      	ldr	r2, [r7, #8]
 800a28a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a28e:	617b      	str	r3, [r7, #20]
          break;
 800a290:	e002      	b.n	800a298 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800a292:	2300      	movs	r3, #0
 800a294:	617b      	str	r3, [r7, #20]
          break;
 800a296:	bf00      	nop
        }
      }
      break;
 800a298:	bf00      	nop
    }
  }
  return frequency;
 800a29a:	697b      	ldr	r3, [r7, #20]
}
 800a29c:	4618      	mov	r0, r3
 800a29e:	371c      	adds	r7, #28
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a6:	4770      	bx	lr
 800a2a8:	40023800 	.word	0x40023800
 800a2ac:	00bb8000 	.word	0x00bb8000
 800a2b0:	007a1200 	.word	0x007a1200
 800a2b4:	00f42400 	.word	0x00f42400

0800a2b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b082      	sub	sp, #8
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d101      	bne.n	800a2ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	e056      	b.n	800a378 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a2d6:	b2db      	uxtb	r3, r3
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d106      	bne.n	800a2ea <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2200      	movs	r2, #0
 800a2e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a2e4:	6878      	ldr	r0, [r7, #4]
 800a2e6:	f7fc fb03 	bl	80068f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2202      	movs	r2, #2
 800a2ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	681a      	ldr	r2, [r3, #0]
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a300:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	685a      	ldr	r2, [r3, #4]
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	689b      	ldr	r3, [r3, #8]
 800a30a:	431a      	orrs	r2, r3
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	68db      	ldr	r3, [r3, #12]
 800a310:	431a      	orrs	r2, r3
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	691b      	ldr	r3, [r3, #16]
 800a316:	431a      	orrs	r2, r3
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	695b      	ldr	r3, [r3, #20]
 800a31c:	431a      	orrs	r2, r3
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	699b      	ldr	r3, [r3, #24]
 800a322:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a326:	431a      	orrs	r2, r3
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	69db      	ldr	r3, [r3, #28]
 800a32c:	431a      	orrs	r2, r3
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6a1b      	ldr	r3, [r3, #32]
 800a332:	ea42 0103 	orr.w	r1, r2, r3
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	430a      	orrs	r2, r1
 800a340:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	699b      	ldr	r3, [r3, #24]
 800a346:	0c1b      	lsrs	r3, r3, #16
 800a348:	f003 0104 	and.w	r1, r3, #4
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	430a      	orrs	r2, r1
 800a356:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	69da      	ldr	r2, [r3, #28]
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a366:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2200      	movs	r2, #0
 800a36c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2201      	movs	r2, #1
 800a372:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a376:	2300      	movs	r3, #0
}
 800a378:	4618      	mov	r0, r3
 800a37a:	3708      	adds	r7, #8
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}

0800a380 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b088      	sub	sp, #32
 800a384:	af00      	add	r7, sp, #0
 800a386:	60f8      	str	r0, [r7, #12]
 800a388:	60b9      	str	r1, [r7, #8]
 800a38a:	603b      	str	r3, [r7, #0]
 800a38c:	4613      	mov	r3, r2
 800a38e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a390:	2300      	movs	r3, #0
 800a392:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a39a:	2b01      	cmp	r3, #1
 800a39c:	d101      	bne.n	800a3a2 <HAL_SPI_Transmit+0x22>
 800a39e:	2302      	movs	r3, #2
 800a3a0:	e11e      	b.n	800a5e0 <HAL_SPI_Transmit+0x260>
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	2201      	movs	r2, #1
 800a3a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a3aa:	f7fc fc45 	bl	8006c38 <HAL_GetTick>
 800a3ae:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a3b0:	88fb      	ldrh	r3, [r7, #6]
 800a3b2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a3ba:	b2db      	uxtb	r3, r3
 800a3bc:	2b01      	cmp	r3, #1
 800a3be:	d002      	beq.n	800a3c6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a3c0:	2302      	movs	r3, #2
 800a3c2:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a3c4:	e103      	b.n	800a5ce <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800a3c6:	68bb      	ldr	r3, [r7, #8]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d002      	beq.n	800a3d2 <HAL_SPI_Transmit+0x52>
 800a3cc:	88fb      	ldrh	r3, [r7, #6]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d102      	bne.n	800a3d8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a3d6:	e0fa      	b.n	800a5ce <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	2203      	movs	r2, #3
 800a3dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	68ba      	ldr	r2, [r7, #8]
 800a3ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	88fa      	ldrh	r2, [r7, #6]
 800a3f0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	88fa      	ldrh	r2, [r7, #6]
 800a3f6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	2200      	movs	r2, #0
 800a402:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	2200      	movs	r2, #0
 800a408:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	2200      	movs	r2, #0
 800a40e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	2200      	movs	r2, #0
 800a414:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	689b      	ldr	r3, [r3, #8]
 800a41a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a41e:	d107      	bne.n	800a430 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	681a      	ldr	r2, [r3, #0]
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a42e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a43a:	2b40      	cmp	r3, #64	; 0x40
 800a43c:	d007      	beq.n	800a44e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	681a      	ldr	r2, [r3, #0]
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a44c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	68db      	ldr	r3, [r3, #12]
 800a452:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a456:	d14b      	bne.n	800a4f0 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	685b      	ldr	r3, [r3, #4]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d002      	beq.n	800a466 <HAL_SPI_Transmit+0xe6>
 800a460:	8afb      	ldrh	r3, [r7, #22]
 800a462:	2b01      	cmp	r3, #1
 800a464:	d13e      	bne.n	800a4e4 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a46a:	881a      	ldrh	r2, [r3, #0]
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a476:	1c9a      	adds	r2, r3, #2
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a480:	b29b      	uxth	r3, r3
 800a482:	3b01      	subs	r3, #1
 800a484:	b29a      	uxth	r2, r3
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a48a:	e02b      	b.n	800a4e4 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	689b      	ldr	r3, [r3, #8]
 800a492:	f003 0302 	and.w	r3, r3, #2
 800a496:	2b02      	cmp	r3, #2
 800a498:	d112      	bne.n	800a4c0 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a49e:	881a      	ldrh	r2, [r3, #0]
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4aa:	1c9a      	adds	r2, r3, #2
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a4b4:	b29b      	uxth	r3, r3
 800a4b6:	3b01      	subs	r3, #1
 800a4b8:	b29a      	uxth	r2, r3
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	86da      	strh	r2, [r3, #54]	; 0x36
 800a4be:	e011      	b.n	800a4e4 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a4c0:	f7fc fbba 	bl	8006c38 <HAL_GetTick>
 800a4c4:	4602      	mov	r2, r0
 800a4c6:	69bb      	ldr	r3, [r7, #24]
 800a4c8:	1ad3      	subs	r3, r2, r3
 800a4ca:	683a      	ldr	r2, [r7, #0]
 800a4cc:	429a      	cmp	r2, r3
 800a4ce:	d803      	bhi.n	800a4d8 <HAL_SPI_Transmit+0x158>
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a4d6:	d102      	bne.n	800a4de <HAL_SPI_Transmit+0x15e>
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d102      	bne.n	800a4e4 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800a4de:	2303      	movs	r3, #3
 800a4e0:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a4e2:	e074      	b.n	800a5ce <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a4e8:	b29b      	uxth	r3, r3
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d1ce      	bne.n	800a48c <HAL_SPI_Transmit+0x10c>
 800a4ee:	e04c      	b.n	800a58a <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	685b      	ldr	r3, [r3, #4]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d002      	beq.n	800a4fe <HAL_SPI_Transmit+0x17e>
 800a4f8:	8afb      	ldrh	r3, [r7, #22]
 800a4fa:	2b01      	cmp	r3, #1
 800a4fc:	d140      	bne.n	800a580 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	330c      	adds	r3, #12
 800a508:	7812      	ldrb	r2, [r2, #0]
 800a50a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a510:	1c5a      	adds	r2, r3, #1
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a51a:	b29b      	uxth	r3, r3
 800a51c:	3b01      	subs	r3, #1
 800a51e:	b29a      	uxth	r2, r3
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800a524:	e02c      	b.n	800a580 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	689b      	ldr	r3, [r3, #8]
 800a52c:	f003 0302 	and.w	r3, r3, #2
 800a530:	2b02      	cmp	r3, #2
 800a532:	d113      	bne.n	800a55c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	330c      	adds	r3, #12
 800a53e:	7812      	ldrb	r2, [r2, #0]
 800a540:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a546:	1c5a      	adds	r2, r3, #1
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a550:	b29b      	uxth	r3, r3
 800a552:	3b01      	subs	r3, #1
 800a554:	b29a      	uxth	r2, r3
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	86da      	strh	r2, [r3, #54]	; 0x36
 800a55a:	e011      	b.n	800a580 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a55c:	f7fc fb6c 	bl	8006c38 <HAL_GetTick>
 800a560:	4602      	mov	r2, r0
 800a562:	69bb      	ldr	r3, [r7, #24]
 800a564:	1ad3      	subs	r3, r2, r3
 800a566:	683a      	ldr	r2, [r7, #0]
 800a568:	429a      	cmp	r2, r3
 800a56a:	d803      	bhi.n	800a574 <HAL_SPI_Transmit+0x1f4>
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a572:	d102      	bne.n	800a57a <HAL_SPI_Transmit+0x1fa>
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d102      	bne.n	800a580 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800a57a:	2303      	movs	r3, #3
 800a57c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a57e:	e026      	b.n	800a5ce <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a584:	b29b      	uxth	r3, r3
 800a586:	2b00      	cmp	r3, #0
 800a588:	d1cd      	bne.n	800a526 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a58a:	69ba      	ldr	r2, [r7, #24]
 800a58c:	6839      	ldr	r1, [r7, #0]
 800a58e:	68f8      	ldr	r0, [r7, #12]
 800a590:	f000 f894 	bl	800a6bc <SPI_EndRxTxTransaction>
 800a594:	4603      	mov	r3, r0
 800a596:	2b00      	cmp	r3, #0
 800a598:	d002      	beq.n	800a5a0 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	2220      	movs	r2, #32
 800a59e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	689b      	ldr	r3, [r3, #8]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d10a      	bne.n	800a5be <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	613b      	str	r3, [r7, #16]
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	68db      	ldr	r3, [r3, #12]
 800a5b2:	613b      	str	r3, [r7, #16]
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	689b      	ldr	r3, [r3, #8]
 800a5ba:	613b      	str	r3, [r7, #16]
 800a5bc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d002      	beq.n	800a5cc <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	77fb      	strb	r3, [r7, #31]
 800a5ca:	e000      	b.n	800a5ce <HAL_SPI_Transmit+0x24e>
  }

error:
 800a5cc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	2201      	movs	r2, #1
 800a5d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	2200      	movs	r2, #0
 800a5da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a5de:	7ffb      	ldrb	r3, [r7, #31]
}
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	3720      	adds	r7, #32
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	bd80      	pop	{r7, pc}

0800a5e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b084      	sub	sp, #16
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	60f8      	str	r0, [r7, #12]
 800a5f0:	60b9      	str	r1, [r7, #8]
 800a5f2:	603b      	str	r3, [r7, #0]
 800a5f4:	4613      	mov	r3, r2
 800a5f6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a5f8:	e04c      	b.n	800a694 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a600:	d048      	beq.n	800a694 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800a602:	f7fc fb19 	bl	8006c38 <HAL_GetTick>
 800a606:	4602      	mov	r2, r0
 800a608:	69bb      	ldr	r3, [r7, #24]
 800a60a:	1ad3      	subs	r3, r2, r3
 800a60c:	683a      	ldr	r2, [r7, #0]
 800a60e:	429a      	cmp	r2, r3
 800a610:	d902      	bls.n	800a618 <SPI_WaitFlagStateUntilTimeout+0x30>
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d13d      	bne.n	800a694 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	685a      	ldr	r2, [r3, #4]
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a626:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	685b      	ldr	r3, [r3, #4]
 800a62c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a630:	d111      	bne.n	800a656 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	689b      	ldr	r3, [r3, #8]
 800a636:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a63a:	d004      	beq.n	800a646 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	689b      	ldr	r3, [r3, #8]
 800a640:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a644:	d107      	bne.n	800a656 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	681a      	ldr	r2, [r3, #0]
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a654:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a65a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a65e:	d10f      	bne.n	800a680 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	681a      	ldr	r2, [r3, #0]
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a66e:	601a      	str	r2, [r3, #0]
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	681a      	ldr	r2, [r3, #0]
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a67e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	2201      	movs	r2, #1
 800a684:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	2200      	movs	r2, #0
 800a68c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a690:	2303      	movs	r3, #3
 800a692:	e00f      	b.n	800a6b4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	689a      	ldr	r2, [r3, #8]
 800a69a:	68bb      	ldr	r3, [r7, #8]
 800a69c:	4013      	ands	r3, r2
 800a69e:	68ba      	ldr	r2, [r7, #8]
 800a6a0:	429a      	cmp	r2, r3
 800a6a2:	bf0c      	ite	eq
 800a6a4:	2301      	moveq	r3, #1
 800a6a6:	2300      	movne	r3, #0
 800a6a8:	b2db      	uxtb	r3, r3
 800a6aa:	461a      	mov	r2, r3
 800a6ac:	79fb      	ldrb	r3, [r7, #7]
 800a6ae:	429a      	cmp	r2, r3
 800a6b0:	d1a3      	bne.n	800a5fa <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800a6b2:	2300      	movs	r3, #0
}
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	3710      	adds	r7, #16
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	bd80      	pop	{r7, pc}

0800a6bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b088      	sub	sp, #32
 800a6c0:	af02      	add	r7, sp, #8
 800a6c2:	60f8      	str	r0, [r7, #12]
 800a6c4:	60b9      	str	r1, [r7, #8]
 800a6c6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a6c8:	4b1b      	ldr	r3, [pc, #108]	; (800a738 <SPI_EndRxTxTransaction+0x7c>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	4a1b      	ldr	r2, [pc, #108]	; (800a73c <SPI_EndRxTxTransaction+0x80>)
 800a6ce:	fba2 2303 	umull	r2, r3, r2, r3
 800a6d2:	0d5b      	lsrs	r3, r3, #21
 800a6d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a6d8:	fb02 f303 	mul.w	r3, r2, r3
 800a6dc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	685b      	ldr	r3, [r3, #4]
 800a6e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a6e6:	d112      	bne.n	800a70e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	9300      	str	r3, [sp, #0]
 800a6ec:	68bb      	ldr	r3, [r7, #8]
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	2180      	movs	r1, #128	; 0x80
 800a6f2:	68f8      	ldr	r0, [r7, #12]
 800a6f4:	f7ff ff78 	bl	800a5e8 <SPI_WaitFlagStateUntilTimeout>
 800a6f8:	4603      	mov	r3, r0
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d016      	beq.n	800a72c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a702:	f043 0220 	orr.w	r2, r3, #32
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a70a:	2303      	movs	r3, #3
 800a70c:	e00f      	b.n	800a72e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a70e:	697b      	ldr	r3, [r7, #20]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d00a      	beq.n	800a72a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a714:	697b      	ldr	r3, [r7, #20]
 800a716:	3b01      	subs	r3, #1
 800a718:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	689b      	ldr	r3, [r3, #8]
 800a720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a724:	2b80      	cmp	r3, #128	; 0x80
 800a726:	d0f2      	beq.n	800a70e <SPI_EndRxTxTransaction+0x52>
 800a728:	e000      	b.n	800a72c <SPI_EndRxTxTransaction+0x70>
        break;
 800a72a:	bf00      	nop
  }

  return HAL_OK;
 800a72c:	2300      	movs	r3, #0
}
 800a72e:	4618      	mov	r0, r3
 800a730:	3718      	adds	r7, #24
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}
 800a736:	bf00      	nop
 800a738:	20000000 	.word	0x20000000
 800a73c:	165e9f81 	.word	0x165e9f81

0800a740 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a740:	b084      	sub	sp, #16
 800a742:	b580      	push	{r7, lr}
 800a744:	b084      	sub	sp, #16
 800a746:	af00      	add	r7, sp, #0
 800a748:	6078      	str	r0, [r7, #4]
 800a74a:	f107 001c 	add.w	r0, r7, #28
 800a74e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a754:	2b01      	cmp	r3, #1
 800a756:	d122      	bne.n	800a79e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a75c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	68db      	ldr	r3, [r3, #12]
 800a768:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a76c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a770:	687a      	ldr	r2, [r7, #4]
 800a772:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	68db      	ldr	r3, [r3, #12]
 800a778:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a780:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a782:	2b01      	cmp	r3, #1
 800a784:	d105      	bne.n	800a792 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	68db      	ldr	r3, [r3, #12]
 800a78a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800a792:	6878      	ldr	r0, [r7, #4]
 800a794:	f000 f94a 	bl	800aa2c <USB_CoreReset>
 800a798:	4603      	mov	r3, r0
 800a79a:	73fb      	strb	r3, [r7, #15]
 800a79c:	e01a      	b.n	800a7d4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	68db      	ldr	r3, [r3, #12]
 800a7a2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f000 f93e 	bl	800aa2c <USB_CoreReset>
 800a7b0:	4603      	mov	r3, r0
 800a7b2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a7b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d106      	bne.n	800a7c8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7be:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	639a      	str	r2, [r3, #56]	; 0x38
 800a7c6:	e005      	b.n	800a7d4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a7d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7d6:	2b01      	cmp	r3, #1
 800a7d8:	d10b      	bne.n	800a7f2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	689b      	ldr	r3, [r3, #8]
 800a7de:	f043 0206 	orr.w	r2, r3, #6
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	689b      	ldr	r3, [r3, #8]
 800a7ea:	f043 0220 	orr.w	r2, r3, #32
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a7f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	3710      	adds	r7, #16
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a7fe:	b004      	add	sp, #16
 800a800:	4770      	bx	lr

0800a802 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a802:	b480      	push	{r7}
 800a804:	b083      	sub	sp, #12
 800a806:	af00      	add	r7, sp, #0
 800a808:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	689b      	ldr	r3, [r3, #8]
 800a80e:	f043 0201 	orr.w	r2, r3, #1
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a816:	2300      	movs	r3, #0
}
 800a818:	4618      	mov	r0, r3
 800a81a:	370c      	adds	r7, #12
 800a81c:	46bd      	mov	sp, r7
 800a81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a822:	4770      	bx	lr

0800a824 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a824:	b480      	push	{r7}
 800a826:	b083      	sub	sp, #12
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	689b      	ldr	r3, [r3, #8]
 800a830:	f023 0201 	bic.w	r2, r3, #1
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a838:	2300      	movs	r3, #0
}
 800a83a:	4618      	mov	r0, r3
 800a83c:	370c      	adds	r7, #12
 800a83e:	46bd      	mov	sp, r7
 800a840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a844:	4770      	bx	lr

0800a846 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a846:	b580      	push	{r7, lr}
 800a848:	b082      	sub	sp, #8
 800a84a:	af00      	add	r7, sp, #0
 800a84c:	6078      	str	r0, [r7, #4]
 800a84e:	460b      	mov	r3, r1
 800a850:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	68db      	ldr	r3, [r3, #12]
 800a856:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a85e:	78fb      	ldrb	r3, [r7, #3]
 800a860:	2b01      	cmp	r3, #1
 800a862:	d106      	bne.n	800a872 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	68db      	ldr	r3, [r3, #12]
 800a868:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	60da      	str	r2, [r3, #12]
 800a870:	e00b      	b.n	800a88a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800a872:	78fb      	ldrb	r3, [r7, #3]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d106      	bne.n	800a886 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	68db      	ldr	r3, [r3, #12]
 800a87c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	60da      	str	r2, [r3, #12]
 800a884:	e001      	b.n	800a88a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800a886:	2301      	movs	r3, #1
 800a888:	e003      	b.n	800a892 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800a88a:	2032      	movs	r0, #50	; 0x32
 800a88c:	f7fc f9e0 	bl	8006c50 <HAL_Delay>

  return HAL_OK;
 800a890:	2300      	movs	r3, #0
}
 800a892:	4618      	mov	r0, r3
 800a894:	3708      	adds	r7, #8
 800a896:	46bd      	mov	sp, r7
 800a898:	bd80      	pop	{r7, pc}
	...

0800a89c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a89c:	b480      	push	{r7}
 800a89e:	b085      	sub	sp, #20
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
 800a8a4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	019b      	lsls	r3, r3, #6
 800a8ae:	f043 0220 	orr.w	r2, r3, #32
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	3301      	adds	r3, #1
 800a8ba:	60fb      	str	r3, [r7, #12]
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	4a09      	ldr	r2, [pc, #36]	; (800a8e4 <USB_FlushTxFifo+0x48>)
 800a8c0:	4293      	cmp	r3, r2
 800a8c2:	d901      	bls.n	800a8c8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800a8c4:	2303      	movs	r3, #3
 800a8c6:	e006      	b.n	800a8d6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	691b      	ldr	r3, [r3, #16]
 800a8cc:	f003 0320 	and.w	r3, r3, #32
 800a8d0:	2b20      	cmp	r3, #32
 800a8d2:	d0f0      	beq.n	800a8b6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800a8d4:	2300      	movs	r3, #0
}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	3714      	adds	r7, #20
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e0:	4770      	bx	lr
 800a8e2:	bf00      	nop
 800a8e4:	00030d40 	.word	0x00030d40

0800a8e8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a8e8:	b480      	push	{r7}
 800a8ea:	b085      	sub	sp, #20
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2210      	movs	r2, #16
 800a8f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	3301      	adds	r3, #1
 800a8fe:	60fb      	str	r3, [r7, #12]
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	4a09      	ldr	r2, [pc, #36]	; (800a928 <USB_FlushRxFifo+0x40>)
 800a904:	4293      	cmp	r3, r2
 800a906:	d901      	bls.n	800a90c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800a908:	2303      	movs	r3, #3
 800a90a:	e006      	b.n	800a91a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	691b      	ldr	r3, [r3, #16]
 800a910:	f003 0310 	and.w	r3, r3, #16
 800a914:	2b10      	cmp	r3, #16
 800a916:	d0f0      	beq.n	800a8fa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800a918:	2300      	movs	r3, #0
}
 800a91a:	4618      	mov	r0, r3
 800a91c:	3714      	adds	r7, #20
 800a91e:	46bd      	mov	sp, r7
 800a920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a924:	4770      	bx	lr
 800a926:	bf00      	nop
 800a928:	00030d40 	.word	0x00030d40

0800a92c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a92c:	b480      	push	{r7}
 800a92e:	b089      	sub	sp, #36	; 0x24
 800a930:	af00      	add	r7, sp, #0
 800a932:	60f8      	str	r0, [r7, #12]
 800a934:	60b9      	str	r1, [r7, #8]
 800a936:	4611      	mov	r1, r2
 800a938:	461a      	mov	r2, r3
 800a93a:	460b      	mov	r3, r1
 800a93c:	71fb      	strb	r3, [r7, #7]
 800a93e:	4613      	mov	r3, r2
 800a940:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800a946:	68bb      	ldr	r3, [r7, #8]
 800a948:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800a94a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d11a      	bne.n	800a988 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a952:	88bb      	ldrh	r3, [r7, #4]
 800a954:	3303      	adds	r3, #3
 800a956:	089b      	lsrs	r3, r3, #2
 800a958:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a95a:	2300      	movs	r3, #0
 800a95c:	61bb      	str	r3, [r7, #24]
 800a95e:	e00f      	b.n	800a980 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a960:	79fb      	ldrb	r3, [r7, #7]
 800a962:	031a      	lsls	r2, r3, #12
 800a964:	697b      	ldr	r3, [r7, #20]
 800a966:	4413      	add	r3, r2
 800a968:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a96c:	461a      	mov	r2, r3
 800a96e:	69fb      	ldr	r3, [r7, #28]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a974:	69fb      	ldr	r3, [r7, #28]
 800a976:	3304      	adds	r3, #4
 800a978:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a97a:	69bb      	ldr	r3, [r7, #24]
 800a97c:	3301      	adds	r3, #1
 800a97e:	61bb      	str	r3, [r7, #24]
 800a980:	69ba      	ldr	r2, [r7, #24]
 800a982:	693b      	ldr	r3, [r7, #16]
 800a984:	429a      	cmp	r2, r3
 800a986:	d3eb      	bcc.n	800a960 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a988:	2300      	movs	r3, #0
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	3724      	adds	r7, #36	; 0x24
 800a98e:	46bd      	mov	sp, r7
 800a990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a994:	4770      	bx	lr

0800a996 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a996:	b480      	push	{r7}
 800a998:	b089      	sub	sp, #36	; 0x24
 800a99a:	af00      	add	r7, sp, #0
 800a99c:	60f8      	str	r0, [r7, #12]
 800a99e:	60b9      	str	r1, [r7, #8]
 800a9a0:	4613      	mov	r3, r2
 800a9a2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800a9a8:	68bb      	ldr	r3, [r7, #8]
 800a9aa:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800a9ac:	88fb      	ldrh	r3, [r7, #6]
 800a9ae:	3303      	adds	r3, #3
 800a9b0:	089b      	lsrs	r3, r3, #2
 800a9b2:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	61bb      	str	r3, [r7, #24]
 800a9b8:	e00b      	b.n	800a9d2 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a9ba:	697b      	ldr	r3, [r7, #20]
 800a9bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9c0:	681a      	ldr	r2, [r3, #0]
 800a9c2:	69fb      	ldr	r3, [r7, #28]
 800a9c4:	601a      	str	r2, [r3, #0]
    pDest++;
 800a9c6:	69fb      	ldr	r3, [r7, #28]
 800a9c8:	3304      	adds	r3, #4
 800a9ca:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800a9cc:	69bb      	ldr	r3, [r7, #24]
 800a9ce:	3301      	adds	r3, #1
 800a9d0:	61bb      	str	r3, [r7, #24]
 800a9d2:	69ba      	ldr	r2, [r7, #24]
 800a9d4:	693b      	ldr	r3, [r7, #16]
 800a9d6:	429a      	cmp	r2, r3
 800a9d8:	d3ef      	bcc.n	800a9ba <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800a9da:	69fb      	ldr	r3, [r7, #28]
}
 800a9dc:	4618      	mov	r0, r3
 800a9de:	3724      	adds	r7, #36	; 0x24
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e6:	4770      	bx	lr

0800a9e8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a9e8:	b480      	push	{r7}
 800a9ea:	b085      	sub	sp, #20
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	695b      	ldr	r3, [r3, #20]
 800a9f4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	699b      	ldr	r3, [r3, #24]
 800a9fa:	68fa      	ldr	r2, [r7, #12]
 800a9fc:	4013      	ands	r3, r2
 800a9fe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800aa00:	68fb      	ldr	r3, [r7, #12]
}
 800aa02:	4618      	mov	r0, r3
 800aa04:	3714      	adds	r7, #20
 800aa06:	46bd      	mov	sp, r7
 800aa08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0c:	4770      	bx	lr

0800aa0e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800aa0e:	b480      	push	{r7}
 800aa10:	b083      	sub	sp, #12
 800aa12:	af00      	add	r7, sp, #0
 800aa14:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	695b      	ldr	r3, [r3, #20]
 800aa1a:	f003 0301 	and.w	r3, r3, #1
}
 800aa1e:	4618      	mov	r0, r3
 800aa20:	370c      	adds	r7, #12
 800aa22:	46bd      	mov	sp, r7
 800aa24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa28:	4770      	bx	lr
	...

0800aa2c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	b085      	sub	sp, #20
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800aa34:	2300      	movs	r3, #0
 800aa36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	3301      	adds	r3, #1
 800aa3c:	60fb      	str	r3, [r7, #12]
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	4a13      	ldr	r2, [pc, #76]	; (800aa90 <USB_CoreReset+0x64>)
 800aa42:	4293      	cmp	r3, r2
 800aa44:	d901      	bls.n	800aa4a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800aa46:	2303      	movs	r3, #3
 800aa48:	e01b      	b.n	800aa82 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	691b      	ldr	r3, [r3, #16]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	daf2      	bge.n	800aa38 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800aa52:	2300      	movs	r3, #0
 800aa54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	691b      	ldr	r3, [r3, #16]
 800aa5a:	f043 0201 	orr.w	r2, r3, #1
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	3301      	adds	r3, #1
 800aa66:	60fb      	str	r3, [r7, #12]
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	4a09      	ldr	r2, [pc, #36]	; (800aa90 <USB_CoreReset+0x64>)
 800aa6c:	4293      	cmp	r3, r2
 800aa6e:	d901      	bls.n	800aa74 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800aa70:	2303      	movs	r3, #3
 800aa72:	e006      	b.n	800aa82 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	691b      	ldr	r3, [r3, #16]
 800aa78:	f003 0301 	and.w	r3, r3, #1
 800aa7c:	2b01      	cmp	r3, #1
 800aa7e:	d0f0      	beq.n	800aa62 <USB_CoreReset+0x36>

  return HAL_OK;
 800aa80:	2300      	movs	r3, #0
}
 800aa82:	4618      	mov	r0, r3
 800aa84:	3714      	adds	r7, #20
 800aa86:	46bd      	mov	sp, r7
 800aa88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8c:	4770      	bx	lr
 800aa8e:	bf00      	nop
 800aa90:	00030d40 	.word	0x00030d40

0800aa94 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800aa94:	b084      	sub	sp, #16
 800aa96:	b580      	push	{r7, lr}
 800aa98:	b084      	sub	sp, #16
 800aa9a:	af00      	add	r7, sp, #0
 800aa9c:	6078      	str	r0, [r7, #4]
 800aa9e:	f107 001c 	add.w	r0, r7, #28
 800aaa2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800aaaa:	68bb      	ldr	r3, [r7, #8]
 800aaac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aab0:	461a      	mov	r2, r3
 800aab2:	2300      	movs	r3, #0
 800aab4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aac6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aad2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d018      	beq.n	800ab18 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800aae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aae8:	2b01      	cmp	r3, #1
 800aaea:	d10a      	bne.n	800ab02 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	68ba      	ldr	r2, [r7, #8]
 800aaf6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aafa:	f043 0304 	orr.w	r3, r3, #4
 800aafe:	6013      	str	r3, [r2, #0]
 800ab00:	e014      	b.n	800ab2c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800ab02:	68bb      	ldr	r3, [r7, #8]
 800ab04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	68ba      	ldr	r2, [r7, #8]
 800ab0c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ab10:	f023 0304 	bic.w	r3, r3, #4
 800ab14:	6013      	str	r3, [r2, #0]
 800ab16:	e009      	b.n	800ab2c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	68ba      	ldr	r2, [r7, #8]
 800ab22:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ab26:	f023 0304 	bic.w	r3, r3, #4
 800ab2a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800ab2c:	2110      	movs	r1, #16
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	f7ff feb4 	bl	800a89c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	f7ff fed7 	bl	800a8e8 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	60fb      	str	r3, [r7, #12]
 800ab3e:	e015      	b.n	800ab6c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	015a      	lsls	r2, r3, #5
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	4413      	add	r3, r2
 800ab48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab4c:	461a      	mov	r2, r3
 800ab4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ab52:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	015a      	lsls	r2, r3, #5
 800ab58:	68bb      	ldr	r3, [r7, #8]
 800ab5a:	4413      	add	r3, r2
 800ab5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab60:	461a      	mov	r2, r3
 800ab62:	2300      	movs	r3, #0
 800ab64:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	3301      	adds	r3, #1
 800ab6a:	60fb      	str	r3, [r7, #12]
 800ab6c:	6a3b      	ldr	r3, [r7, #32]
 800ab6e:	68fa      	ldr	r2, [r7, #12]
 800ab70:	429a      	cmp	r2, r3
 800ab72:	d3e5      	bcc.n	800ab40 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800ab74:	2101      	movs	r1, #1
 800ab76:	6878      	ldr	r0, [r7, #4]
 800ab78:	f000 f8ac 	bl	800acd4 <USB_DriveVbus>

  HAL_Delay(200U);
 800ab7c:	20c8      	movs	r0, #200	; 0xc8
 800ab7e:	f7fc f867 	bl	8006c50 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	2200      	movs	r2, #0
 800ab86:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ab8e:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d00b      	beq.n	800abb4 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aba2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	4a14      	ldr	r2, [pc, #80]	; (800abf8 <USB_HostInit+0x164>)
 800aba8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	4a13      	ldr	r2, [pc, #76]	; (800abfc <USB_HostInit+0x168>)
 800abae:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800abb2:	e009      	b.n	800abc8 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2280      	movs	r2, #128	; 0x80
 800abb8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	4a10      	ldr	r2, [pc, #64]	; (800ac00 <USB_HostInit+0x16c>)
 800abbe:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	4a10      	ldr	r2, [pc, #64]	; (800ac04 <USB_HostInit+0x170>)
 800abc4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800abc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d105      	bne.n	800abda <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	699b      	ldr	r3, [r3, #24]
 800abd2:	f043 0210 	orr.w	r2, r3, #16
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	699a      	ldr	r2, [r3, #24]
 800abde:	4b0a      	ldr	r3, [pc, #40]	; (800ac08 <USB_HostInit+0x174>)
 800abe0:	4313      	orrs	r3, r2
 800abe2:	687a      	ldr	r2, [r7, #4]
 800abe4:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800abe6:	2300      	movs	r3, #0
}
 800abe8:	4618      	mov	r0, r3
 800abea:	3710      	adds	r7, #16
 800abec:	46bd      	mov	sp, r7
 800abee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800abf2:	b004      	add	sp, #16
 800abf4:	4770      	bx	lr
 800abf6:	bf00      	nop
 800abf8:	01000200 	.word	0x01000200
 800abfc:	00e00300 	.word	0x00e00300
 800ac00:	00600080 	.word	0x00600080
 800ac04:	004000e0 	.word	0x004000e0
 800ac08:	a3200008 	.word	0xa3200008

0800ac0c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	b085      	sub	sp, #20
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
 800ac14:	460b      	mov	r3, r1
 800ac16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	68fa      	ldr	r2, [r7, #12]
 800ac26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ac2a:	f023 0303 	bic.w	r3, r3, #3
 800ac2e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ac36:	681a      	ldr	r2, [r3, #0]
 800ac38:	78fb      	ldrb	r3, [r7, #3]
 800ac3a:	f003 0303 	and.w	r3, r3, #3
 800ac3e:	68f9      	ldr	r1, [r7, #12]
 800ac40:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ac44:	4313      	orrs	r3, r2
 800ac46:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800ac48:	78fb      	ldrb	r3, [r7, #3]
 800ac4a:	2b01      	cmp	r3, #1
 800ac4c:	d107      	bne.n	800ac5e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ac54:	461a      	mov	r2, r3
 800ac56:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800ac5a:	6053      	str	r3, [r2, #4]
 800ac5c:	e009      	b.n	800ac72 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800ac5e:	78fb      	ldrb	r3, [r7, #3]
 800ac60:	2b02      	cmp	r3, #2
 800ac62:	d106      	bne.n	800ac72 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ac6a:	461a      	mov	r2, r3
 800ac6c:	f241 7370 	movw	r3, #6000	; 0x1770
 800ac70:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800ac72:	2300      	movs	r3, #0
}
 800ac74:	4618      	mov	r0, r3
 800ac76:	3714      	adds	r7, #20
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7e:	4770      	bx	lr

0800ac80 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b084      	sub	sp, #16
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800ac9a:	68bb      	ldr	r3, [r7, #8]
 800ac9c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800aca0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	68fa      	ldr	r2, [r7, #12]
 800aca6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800acaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800acae:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800acb0:	2064      	movs	r0, #100	; 0x64
 800acb2:	f7fb ffcd 	bl	8006c50 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800acb6:	68bb      	ldr	r3, [r7, #8]
 800acb8:	68fa      	ldr	r2, [r7, #12]
 800acba:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800acbe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800acc2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800acc4:	200a      	movs	r0, #10
 800acc6:	f7fb ffc3 	bl	8006c50 <HAL_Delay>

  return HAL_OK;
 800acca:	2300      	movs	r3, #0
}
 800accc:	4618      	mov	r0, r3
 800acce:	3710      	adds	r7, #16
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd80      	pop	{r7, pc}

0800acd4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800acd4:	b480      	push	{r7}
 800acd6:	b085      	sub	sp, #20
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
 800acdc:	460b      	mov	r3, r1
 800acde:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800ace4:	2300      	movs	r3, #0
 800ace6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800acf2:	68bb      	ldr	r3, [r7, #8]
 800acf4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800acf8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800acfa:	68bb      	ldr	r3, [r7, #8]
 800acfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d109      	bne.n	800ad18 <USB_DriveVbus+0x44>
 800ad04:	78fb      	ldrb	r3, [r7, #3]
 800ad06:	2b01      	cmp	r3, #1
 800ad08:	d106      	bne.n	800ad18 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800ad0a:	68bb      	ldr	r3, [r7, #8]
 800ad0c:	68fa      	ldr	r2, [r7, #12]
 800ad0e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800ad12:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ad16:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800ad18:	68bb      	ldr	r3, [r7, #8]
 800ad1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ad1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad22:	d109      	bne.n	800ad38 <USB_DriveVbus+0x64>
 800ad24:	78fb      	ldrb	r3, [r7, #3]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d106      	bne.n	800ad38 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800ad2a:	68bb      	ldr	r3, [r7, #8]
 800ad2c:	68fa      	ldr	r2, [r7, #12]
 800ad2e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800ad32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ad36:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800ad38:	2300      	movs	r3, #0
}
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	3714      	adds	r7, #20
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad44:	4770      	bx	lr

0800ad46 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ad46:	b480      	push	{r7}
 800ad48:	b085      	sub	sp, #20
 800ad4a:	af00      	add	r7, sp, #0
 800ad4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800ad52:	2300      	movs	r3, #0
 800ad54:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800ad60:	68bb      	ldr	r3, [r7, #8]
 800ad62:	0c5b      	lsrs	r3, r3, #17
 800ad64:	f003 0303 	and.w	r3, r3, #3
}
 800ad68:	4618      	mov	r0, r3
 800ad6a:	3714      	adds	r7, #20
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad72:	4770      	bx	lr

0800ad74 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800ad74:	b480      	push	{r7}
 800ad76:	b085      	sub	sp, #20
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ad86:	689b      	ldr	r3, [r3, #8]
 800ad88:	b29b      	uxth	r3, r3
}
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	3714      	adds	r7, #20
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad94:	4770      	bx	lr
	...

0800ad98 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800ad98:	b480      	push	{r7}
 800ad9a:	b087      	sub	sp, #28
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
 800ada0:	4608      	mov	r0, r1
 800ada2:	4611      	mov	r1, r2
 800ada4:	461a      	mov	r2, r3
 800ada6:	4603      	mov	r3, r0
 800ada8:	70fb      	strb	r3, [r7, #3]
 800adaa:	460b      	mov	r3, r1
 800adac:	70bb      	strb	r3, [r7, #2]
 800adae:	4613      	mov	r3, r2
 800adb0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800adb2:	2300      	movs	r3, #0
 800adb4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800adba:	78fb      	ldrb	r3, [r7, #3]
 800adbc:	015a      	lsls	r2, r3, #5
 800adbe:	68bb      	ldr	r3, [r7, #8]
 800adc0:	4413      	add	r3, r2
 800adc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800adc6:	461a      	mov	r2, r3
 800adc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800adcc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800adce:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800add2:	2b03      	cmp	r3, #3
 800add4:	d87e      	bhi.n	800aed4 <USB_HC_Init+0x13c>
 800add6:	a201      	add	r2, pc, #4	; (adr r2, 800addc <USB_HC_Init+0x44>)
 800add8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800addc:	0800aded 	.word	0x0800aded
 800ade0:	0800ae97 	.word	0x0800ae97
 800ade4:	0800aded 	.word	0x0800aded
 800ade8:	0800ae59 	.word	0x0800ae59
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800adec:	78fb      	ldrb	r3, [r7, #3]
 800adee:	015a      	lsls	r2, r3, #5
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	4413      	add	r3, r2
 800adf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800adf8:	461a      	mov	r2, r3
 800adfa:	f240 439d 	movw	r3, #1181	; 0x49d
 800adfe:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800ae00:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	da10      	bge.n	800ae2a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800ae08:	78fb      	ldrb	r3, [r7, #3]
 800ae0a:	015a      	lsls	r2, r3, #5
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	4413      	add	r3, r2
 800ae10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae14:	68db      	ldr	r3, [r3, #12]
 800ae16:	78fa      	ldrb	r2, [r7, #3]
 800ae18:	0151      	lsls	r1, r2, #5
 800ae1a:	68ba      	ldr	r2, [r7, #8]
 800ae1c:	440a      	add	r2, r1
 800ae1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ae22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ae26:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800ae28:	e057      	b.n	800aeda <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d051      	beq.n	800aeda <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800ae36:	78fb      	ldrb	r3, [r7, #3]
 800ae38:	015a      	lsls	r2, r3, #5
 800ae3a:	68bb      	ldr	r3, [r7, #8]
 800ae3c:	4413      	add	r3, r2
 800ae3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae42:	68db      	ldr	r3, [r3, #12]
 800ae44:	78fa      	ldrb	r2, [r7, #3]
 800ae46:	0151      	lsls	r1, r2, #5
 800ae48:	68ba      	ldr	r2, [r7, #8]
 800ae4a:	440a      	add	r2, r1
 800ae4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ae50:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800ae54:	60d3      	str	r3, [r2, #12]
      break;
 800ae56:	e040      	b.n	800aeda <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ae58:	78fb      	ldrb	r3, [r7, #3]
 800ae5a:	015a      	lsls	r2, r3, #5
 800ae5c:	68bb      	ldr	r3, [r7, #8]
 800ae5e:	4413      	add	r3, r2
 800ae60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae64:	461a      	mov	r2, r3
 800ae66:	f240 639d 	movw	r3, #1693	; 0x69d
 800ae6a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800ae6c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	da34      	bge.n	800aede <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800ae74:	78fb      	ldrb	r3, [r7, #3]
 800ae76:	015a      	lsls	r2, r3, #5
 800ae78:	68bb      	ldr	r3, [r7, #8]
 800ae7a:	4413      	add	r3, r2
 800ae7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae80:	68db      	ldr	r3, [r3, #12]
 800ae82:	78fa      	ldrb	r2, [r7, #3]
 800ae84:	0151      	lsls	r1, r2, #5
 800ae86:	68ba      	ldr	r2, [r7, #8]
 800ae88:	440a      	add	r2, r1
 800ae8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ae8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ae92:	60d3      	str	r3, [r2, #12]
      }

      break;
 800ae94:	e023      	b.n	800aede <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ae96:	78fb      	ldrb	r3, [r7, #3]
 800ae98:	015a      	lsls	r2, r3, #5
 800ae9a:	68bb      	ldr	r3, [r7, #8]
 800ae9c:	4413      	add	r3, r2
 800ae9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aea2:	461a      	mov	r2, r3
 800aea4:	f240 2325 	movw	r3, #549	; 0x225
 800aea8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800aeaa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	da17      	bge.n	800aee2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800aeb2:	78fb      	ldrb	r3, [r7, #3]
 800aeb4:	015a      	lsls	r2, r3, #5
 800aeb6:	68bb      	ldr	r3, [r7, #8]
 800aeb8:	4413      	add	r3, r2
 800aeba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aebe:	68db      	ldr	r3, [r3, #12]
 800aec0:	78fa      	ldrb	r2, [r7, #3]
 800aec2:	0151      	lsls	r1, r2, #5
 800aec4:	68ba      	ldr	r2, [r7, #8]
 800aec6:	440a      	add	r2, r1
 800aec8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aecc:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800aed0:	60d3      	str	r3, [r2, #12]
      }
      break;
 800aed2:	e006      	b.n	800aee2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800aed4:	2301      	movs	r3, #1
 800aed6:	75fb      	strb	r3, [r7, #23]
      break;
 800aed8:	e004      	b.n	800aee4 <USB_HC_Init+0x14c>
      break;
 800aeda:	bf00      	nop
 800aedc:	e002      	b.n	800aee4 <USB_HC_Init+0x14c>
      break;
 800aede:	bf00      	nop
 800aee0:	e000      	b.n	800aee4 <USB_HC_Init+0x14c>
      break;
 800aee2:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aeea:	699a      	ldr	r2, [r3, #24]
 800aeec:	78fb      	ldrb	r3, [r7, #3]
 800aeee:	f003 030f 	and.w	r3, r3, #15
 800aef2:	2101      	movs	r1, #1
 800aef4:	fa01 f303 	lsl.w	r3, r1, r3
 800aef8:	68b9      	ldr	r1, [r7, #8]
 800aefa:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800aefe:	4313      	orrs	r3, r2
 800af00:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	699b      	ldr	r3, [r3, #24]
 800af06:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800af0e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800af12:	2b00      	cmp	r3, #0
 800af14:	da03      	bge.n	800af1e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800af16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800af1a:	613b      	str	r3, [r7, #16]
 800af1c:	e001      	b.n	800af22 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800af1e:	2300      	movs	r3, #0
 800af20:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800af22:	f897 3020 	ldrb.w	r3, [r7, #32]
 800af26:	2b02      	cmp	r3, #2
 800af28:	d103      	bne.n	800af32 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800af2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800af2e:	60fb      	str	r3, [r7, #12]
 800af30:	e001      	b.n	800af36 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800af32:	2300      	movs	r3, #0
 800af34:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800af36:	787b      	ldrb	r3, [r7, #1]
 800af38:	059b      	lsls	r3, r3, #22
 800af3a:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800af3e:	78bb      	ldrb	r3, [r7, #2]
 800af40:	02db      	lsls	r3, r3, #11
 800af42:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800af46:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800af48:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800af4c:	049b      	lsls	r3, r3, #18
 800af4e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800af52:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800af54:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800af56:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800af5a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800af5c:	693b      	ldr	r3, [r7, #16]
 800af5e:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800af60:	78fb      	ldrb	r3, [r7, #3]
 800af62:	0159      	lsls	r1, r3, #5
 800af64:	68bb      	ldr	r3, [r7, #8]
 800af66:	440b      	add	r3, r1
 800af68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af6c:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800af72:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800af74:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800af78:	2b03      	cmp	r3, #3
 800af7a:	d10f      	bne.n	800af9c <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800af7c:	78fb      	ldrb	r3, [r7, #3]
 800af7e:	015a      	lsls	r2, r3, #5
 800af80:	68bb      	ldr	r3, [r7, #8]
 800af82:	4413      	add	r3, r2
 800af84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	78fa      	ldrb	r2, [r7, #3]
 800af8c:	0151      	lsls	r1, r2, #5
 800af8e:	68ba      	ldr	r2, [r7, #8]
 800af90:	440a      	add	r2, r1
 800af92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800af96:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800af9a:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800af9c:	7dfb      	ldrb	r3, [r7, #23]
}
 800af9e:	4618      	mov	r0, r3
 800afa0:	371c      	adds	r7, #28
 800afa2:	46bd      	mov	sp, r7
 800afa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa8:	4770      	bx	lr
 800afaa:	bf00      	nop

0800afac <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b08c      	sub	sp, #48	; 0x30
 800afb0:	af02      	add	r7, sp, #8
 800afb2:	60f8      	str	r0, [r7, #12]
 800afb4:	60b9      	str	r1, [r7, #8]
 800afb6:	4613      	mov	r3, r2
 800afb8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800afbe:	68bb      	ldr	r3, [r7, #8]
 800afc0:	785b      	ldrb	r3, [r3, #1]
 800afc2:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800afc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800afc8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d028      	beq.n	800b028 <USB_HC_StartXfer+0x7c>
 800afd6:	68bb      	ldr	r3, [r7, #8]
 800afd8:	791b      	ldrb	r3, [r3, #4]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d124      	bne.n	800b028 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800afde:	79fb      	ldrb	r3, [r7, #7]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d10b      	bne.n	800affc <USB_HC_StartXfer+0x50>
 800afe4:	68bb      	ldr	r3, [r7, #8]
 800afe6:	795b      	ldrb	r3, [r3, #5]
 800afe8:	2b01      	cmp	r3, #1
 800afea:	d107      	bne.n	800affc <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	785b      	ldrb	r3, [r3, #1]
 800aff0:	4619      	mov	r1, r3
 800aff2:	68f8      	ldr	r0, [r7, #12]
 800aff4:	f000 fa30 	bl	800b458 <USB_DoPing>
      return HAL_OK;
 800aff8:	2300      	movs	r3, #0
 800affa:	e114      	b.n	800b226 <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 800affc:	79fb      	ldrb	r3, [r7, #7]
 800affe:	2b01      	cmp	r3, #1
 800b000:	d112      	bne.n	800b028 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800b002:	69fb      	ldr	r3, [r7, #28]
 800b004:	015a      	lsls	r2, r3, #5
 800b006:	6a3b      	ldr	r3, [r7, #32]
 800b008:	4413      	add	r3, r2
 800b00a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b00e:	68db      	ldr	r3, [r3, #12]
 800b010:	69fa      	ldr	r2, [r7, #28]
 800b012:	0151      	lsls	r1, r2, #5
 800b014:	6a3a      	ldr	r2, [r7, #32]
 800b016:	440a      	add	r2, r1
 800b018:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b01c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800b020:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800b022:	68bb      	ldr	r3, [r7, #8]
 800b024:	2200      	movs	r2, #0
 800b026:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800b028:	68bb      	ldr	r3, [r7, #8]
 800b02a:	691b      	ldr	r3, [r3, #16]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d018      	beq.n	800b062 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	691b      	ldr	r3, [r3, #16]
 800b034:	68ba      	ldr	r2, [r7, #8]
 800b036:	8912      	ldrh	r2, [r2, #8]
 800b038:	4413      	add	r3, r2
 800b03a:	3b01      	subs	r3, #1
 800b03c:	68ba      	ldr	r2, [r7, #8]
 800b03e:	8912      	ldrh	r2, [r2, #8]
 800b040:	fbb3 f3f2 	udiv	r3, r3, r2
 800b044:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800b046:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b048:	8b7b      	ldrh	r3, [r7, #26]
 800b04a:	429a      	cmp	r2, r3
 800b04c:	d90b      	bls.n	800b066 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800b04e:	8b7b      	ldrh	r3, [r7, #26]
 800b050:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800b052:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b054:	68ba      	ldr	r2, [r7, #8]
 800b056:	8912      	ldrh	r2, [r2, #8]
 800b058:	fb02 f203 	mul.w	r2, r2, r3
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	611a      	str	r2, [r3, #16]
 800b060:	e001      	b.n	800b066 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800b062:	2301      	movs	r3, #1
 800b064:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800b066:	68bb      	ldr	r3, [r7, #8]
 800b068:	78db      	ldrb	r3, [r3, #3]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d006      	beq.n	800b07c <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800b06e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b070:	68ba      	ldr	r2, [r7, #8]
 800b072:	8912      	ldrh	r2, [r2, #8]
 800b074:	fb02 f203 	mul.w	r2, r2, r3
 800b078:	68bb      	ldr	r3, [r7, #8]
 800b07a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800b07c:	68bb      	ldr	r3, [r7, #8]
 800b07e:	691b      	ldr	r3, [r3, #16]
 800b080:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b084:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b086:	04d9      	lsls	r1, r3, #19
 800b088:	4b69      	ldr	r3, [pc, #420]	; (800b230 <USB_HC_StartXfer+0x284>)
 800b08a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800b08c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800b08e:	68bb      	ldr	r3, [r7, #8]
 800b090:	7a9b      	ldrb	r3, [r3, #10]
 800b092:	075b      	lsls	r3, r3, #29
 800b094:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800b098:	69f9      	ldr	r1, [r7, #28]
 800b09a:	0148      	lsls	r0, r1, #5
 800b09c:	6a39      	ldr	r1, [r7, #32]
 800b09e:	4401      	add	r1, r0
 800b0a0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b0a4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800b0a6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800b0a8:	79fb      	ldrb	r3, [r7, #7]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d009      	beq.n	800b0c2 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800b0ae:	68bb      	ldr	r3, [r7, #8]
 800b0b0:	68d9      	ldr	r1, [r3, #12]
 800b0b2:	69fb      	ldr	r3, [r7, #28]
 800b0b4:	015a      	lsls	r2, r3, #5
 800b0b6:	6a3b      	ldr	r3, [r7, #32]
 800b0b8:	4413      	add	r3, r2
 800b0ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b0be:	460a      	mov	r2, r1
 800b0c0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800b0c2:	6a3b      	ldr	r3, [r7, #32]
 800b0c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b0c8:	689b      	ldr	r3, [r3, #8]
 800b0ca:	f003 0301 	and.w	r3, r3, #1
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	bf0c      	ite	eq
 800b0d2:	2301      	moveq	r3, #1
 800b0d4:	2300      	movne	r3, #0
 800b0d6:	b2db      	uxtb	r3, r3
 800b0d8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800b0da:	69fb      	ldr	r3, [r7, #28]
 800b0dc:	015a      	lsls	r2, r3, #5
 800b0de:	6a3b      	ldr	r3, [r7, #32]
 800b0e0:	4413      	add	r3, r2
 800b0e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	69fa      	ldr	r2, [r7, #28]
 800b0ea:	0151      	lsls	r1, r2, #5
 800b0ec:	6a3a      	ldr	r2, [r7, #32]
 800b0ee:	440a      	add	r2, r1
 800b0f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b0f4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b0f8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800b0fa:	69fb      	ldr	r3, [r7, #28]
 800b0fc:	015a      	lsls	r2, r3, #5
 800b0fe:	6a3b      	ldr	r3, [r7, #32]
 800b100:	4413      	add	r3, r2
 800b102:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b106:	681a      	ldr	r2, [r3, #0]
 800b108:	7e7b      	ldrb	r3, [r7, #25]
 800b10a:	075b      	lsls	r3, r3, #29
 800b10c:	69f9      	ldr	r1, [r7, #28]
 800b10e:	0148      	lsls	r0, r1, #5
 800b110:	6a39      	ldr	r1, [r7, #32]
 800b112:	4401      	add	r1, r0
 800b114:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800b118:	4313      	orrs	r3, r2
 800b11a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800b11c:	69fb      	ldr	r3, [r7, #28]
 800b11e:	015a      	lsls	r2, r3, #5
 800b120:	6a3b      	ldr	r3, [r7, #32]
 800b122:	4413      	add	r3, r2
 800b124:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	4a42      	ldr	r2, [pc, #264]	; (800b234 <USB_HC_StartXfer+0x288>)
 800b12c:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b12e:	4b41      	ldr	r3, [pc, #260]	; (800b234 <USB_HC_StartXfer+0x288>)
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b136:	4a3f      	ldr	r2, [pc, #252]	; (800b234 <USB_HC_StartXfer+0x288>)
 800b138:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800b13a:	68bb      	ldr	r3, [r7, #8]
 800b13c:	78db      	ldrb	r3, [r3, #3]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d006      	beq.n	800b150 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800b142:	4b3c      	ldr	r3, [pc, #240]	; (800b234 <USB_HC_StartXfer+0x288>)
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b14a:	4a3a      	ldr	r2, [pc, #232]	; (800b234 <USB_HC_StartXfer+0x288>)
 800b14c:	6013      	str	r3, [r2, #0]
 800b14e:	e005      	b.n	800b15c <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800b150:	4b38      	ldr	r3, [pc, #224]	; (800b234 <USB_HC_StartXfer+0x288>)
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b158:	4a36      	ldr	r2, [pc, #216]	; (800b234 <USB_HC_StartXfer+0x288>)
 800b15a:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b15c:	4b35      	ldr	r3, [pc, #212]	; (800b234 <USB_HC_StartXfer+0x288>)
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b164:	4a33      	ldr	r2, [pc, #204]	; (800b234 <USB_HC_StartXfer+0x288>)
 800b166:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800b168:	69fb      	ldr	r3, [r7, #28]
 800b16a:	015a      	lsls	r2, r3, #5
 800b16c:	6a3b      	ldr	r3, [r7, #32]
 800b16e:	4413      	add	r3, r2
 800b170:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b174:	461a      	mov	r2, r3
 800b176:	4b2f      	ldr	r3, [pc, #188]	; (800b234 <USB_HC_StartXfer+0x288>)
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800b17c:	79fb      	ldrb	r3, [r7, #7]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d001      	beq.n	800b186 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800b182:	2300      	movs	r3, #0
 800b184:	e04f      	b.n	800b226 <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800b186:	68bb      	ldr	r3, [r7, #8]
 800b188:	78db      	ldrb	r3, [r3, #3]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d14a      	bne.n	800b224 <USB_HC_StartXfer+0x278>
 800b18e:	68bb      	ldr	r3, [r7, #8]
 800b190:	691b      	ldr	r3, [r3, #16]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d046      	beq.n	800b224 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 800b196:	68bb      	ldr	r3, [r7, #8]
 800b198:	79db      	ldrb	r3, [r3, #7]
 800b19a:	2b03      	cmp	r3, #3
 800b19c:	d830      	bhi.n	800b200 <USB_HC_StartXfer+0x254>
 800b19e:	a201      	add	r2, pc, #4	; (adr r2, 800b1a4 <USB_HC_StartXfer+0x1f8>)
 800b1a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1a4:	0800b1b5 	.word	0x0800b1b5
 800b1a8:	0800b1d9 	.word	0x0800b1d9
 800b1ac:	0800b1b5 	.word	0x0800b1b5
 800b1b0:	0800b1d9 	.word	0x0800b1d9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800b1b4:	68bb      	ldr	r3, [r7, #8]
 800b1b6:	691b      	ldr	r3, [r3, #16]
 800b1b8:	3303      	adds	r3, #3
 800b1ba:	089b      	lsrs	r3, r3, #2
 800b1bc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800b1be:	8afa      	ldrh	r2, [r7, #22]
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1c4:	b29b      	uxth	r3, r3
 800b1c6:	429a      	cmp	r2, r3
 800b1c8:	d91c      	bls.n	800b204 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	699b      	ldr	r3, [r3, #24]
 800b1ce:	f043 0220 	orr.w	r2, r3, #32
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	619a      	str	r2, [r3, #24]
        }
        break;
 800b1d6:	e015      	b.n	800b204 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800b1d8:	68bb      	ldr	r3, [r7, #8]
 800b1da:	691b      	ldr	r3, [r3, #16]
 800b1dc:	3303      	adds	r3, #3
 800b1de:	089b      	lsrs	r3, r3, #2
 800b1e0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800b1e2:	8afa      	ldrh	r2, [r7, #22]
 800b1e4:	6a3b      	ldr	r3, [r7, #32]
 800b1e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b1ea:	691b      	ldr	r3, [r3, #16]
 800b1ec:	b29b      	uxth	r3, r3
 800b1ee:	429a      	cmp	r2, r3
 800b1f0:	d90a      	bls.n	800b208 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	699b      	ldr	r3, [r3, #24]
 800b1f6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	619a      	str	r2, [r3, #24]
        }
        break;
 800b1fe:	e003      	b.n	800b208 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800b200:	bf00      	nop
 800b202:	e002      	b.n	800b20a <USB_HC_StartXfer+0x25e>
        break;
 800b204:	bf00      	nop
 800b206:	e000      	b.n	800b20a <USB_HC_StartXfer+0x25e>
        break;
 800b208:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800b20a:	68bb      	ldr	r3, [r7, #8]
 800b20c:	68d9      	ldr	r1, [r3, #12]
 800b20e:	68bb      	ldr	r3, [r7, #8]
 800b210:	785a      	ldrb	r2, [r3, #1]
 800b212:	68bb      	ldr	r3, [r7, #8]
 800b214:	691b      	ldr	r3, [r3, #16]
 800b216:	b298      	uxth	r0, r3
 800b218:	2300      	movs	r3, #0
 800b21a:	9300      	str	r3, [sp, #0]
 800b21c:	4603      	mov	r3, r0
 800b21e:	68f8      	ldr	r0, [r7, #12]
 800b220:	f7ff fb84 	bl	800a92c <USB_WritePacket>
  }

  return HAL_OK;
 800b224:	2300      	movs	r3, #0
}
 800b226:	4618      	mov	r0, r3
 800b228:	3728      	adds	r7, #40	; 0x28
 800b22a:	46bd      	mov	sp, r7
 800b22c:	bd80      	pop	{r7, pc}
 800b22e:	bf00      	nop
 800b230:	1ff80000 	.word	0x1ff80000
 800b234:	200000b4 	.word	0x200000b4

0800b238 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b238:	b480      	push	{r7}
 800b23a:	b085      	sub	sp, #20
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b24a:	695b      	ldr	r3, [r3, #20]
 800b24c:	b29b      	uxth	r3, r3
}
 800b24e:	4618      	mov	r0, r3
 800b250:	3714      	adds	r7, #20
 800b252:	46bd      	mov	sp, r7
 800b254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b258:	4770      	bx	lr

0800b25a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800b25a:	b480      	push	{r7}
 800b25c:	b087      	sub	sp, #28
 800b25e:	af00      	add	r7, sp, #0
 800b260:	6078      	str	r0, [r7, #4]
 800b262:	460b      	mov	r3, r1
 800b264:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800b26a:	78fb      	ldrb	r3, [r7, #3]
 800b26c:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800b26e:	2300      	movs	r3, #0
 800b270:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	015a      	lsls	r2, r3, #5
 800b276:	693b      	ldr	r3, [r7, #16]
 800b278:	4413      	add	r3, r2
 800b27a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	0c9b      	lsrs	r3, r3, #18
 800b282:	f003 0303 	and.w	r3, r3, #3
 800b286:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800b288:	68bb      	ldr	r3, [r7, #8]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d002      	beq.n	800b294 <USB_HC_Halt+0x3a>
 800b28e:	68bb      	ldr	r3, [r7, #8]
 800b290:	2b02      	cmp	r3, #2
 800b292:	d16c      	bne.n	800b36e <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	015a      	lsls	r2, r3, #5
 800b298:	693b      	ldr	r3, [r7, #16]
 800b29a:	4413      	add	r3, r2
 800b29c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	68fa      	ldr	r2, [r7, #12]
 800b2a4:	0151      	lsls	r1, r2, #5
 800b2a6:	693a      	ldr	r2, [r7, #16]
 800b2a8:	440a      	add	r2, r1
 800b2aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b2ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b2b2:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d143      	bne.n	800b348 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	015a      	lsls	r2, r3, #5
 800b2c4:	693b      	ldr	r3, [r7, #16]
 800b2c6:	4413      	add	r3, r2
 800b2c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	68fa      	ldr	r2, [r7, #12]
 800b2d0:	0151      	lsls	r1, r2, #5
 800b2d2:	693a      	ldr	r2, [r7, #16]
 800b2d4:	440a      	add	r2, r1
 800b2d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b2da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b2de:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	015a      	lsls	r2, r3, #5
 800b2e4:	693b      	ldr	r3, [r7, #16]
 800b2e6:	4413      	add	r3, r2
 800b2e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	68fa      	ldr	r2, [r7, #12]
 800b2f0:	0151      	lsls	r1, r2, #5
 800b2f2:	693a      	ldr	r2, [r7, #16]
 800b2f4:	440a      	add	r2, r1
 800b2f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b2fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b2fe:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	015a      	lsls	r2, r3, #5
 800b304:	693b      	ldr	r3, [r7, #16]
 800b306:	4413      	add	r3, r2
 800b308:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	68fa      	ldr	r2, [r7, #12]
 800b310:	0151      	lsls	r1, r2, #5
 800b312:	693a      	ldr	r2, [r7, #16]
 800b314:	440a      	add	r2, r1
 800b316:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b31a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b31e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800b320:	697b      	ldr	r3, [r7, #20]
 800b322:	3301      	adds	r3, #1
 800b324:	617b      	str	r3, [r7, #20]
 800b326:	697b      	ldr	r3, [r7, #20]
 800b328:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b32c:	d81d      	bhi.n	800b36a <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	015a      	lsls	r2, r3, #5
 800b332:	693b      	ldr	r3, [r7, #16]
 800b334:	4413      	add	r3, r2
 800b336:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b340:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b344:	d0ec      	beq.n	800b320 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800b346:	e080      	b.n	800b44a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	015a      	lsls	r2, r3, #5
 800b34c:	693b      	ldr	r3, [r7, #16]
 800b34e:	4413      	add	r3, r2
 800b350:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	68fa      	ldr	r2, [r7, #12]
 800b358:	0151      	lsls	r1, r2, #5
 800b35a:	693a      	ldr	r2, [r7, #16]
 800b35c:	440a      	add	r2, r1
 800b35e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b362:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b366:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800b368:	e06f      	b.n	800b44a <USB_HC_Halt+0x1f0>
          break;
 800b36a:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800b36c:	e06d      	b.n	800b44a <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	015a      	lsls	r2, r3, #5
 800b372:	693b      	ldr	r3, [r7, #16]
 800b374:	4413      	add	r3, r2
 800b376:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	68fa      	ldr	r2, [r7, #12]
 800b37e:	0151      	lsls	r1, r2, #5
 800b380:	693a      	ldr	r2, [r7, #16]
 800b382:	440a      	add	r2, r1
 800b384:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b388:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b38c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800b38e:	693b      	ldr	r3, [r7, #16]
 800b390:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b394:	691b      	ldr	r3, [r3, #16]
 800b396:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d143      	bne.n	800b426 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	015a      	lsls	r2, r3, #5
 800b3a2:	693b      	ldr	r3, [r7, #16]
 800b3a4:	4413      	add	r3, r2
 800b3a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	68fa      	ldr	r2, [r7, #12]
 800b3ae:	0151      	lsls	r1, r2, #5
 800b3b0:	693a      	ldr	r2, [r7, #16]
 800b3b2:	440a      	add	r2, r1
 800b3b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b3b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b3bc:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	015a      	lsls	r2, r3, #5
 800b3c2:	693b      	ldr	r3, [r7, #16]
 800b3c4:	4413      	add	r3, r2
 800b3c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	68fa      	ldr	r2, [r7, #12]
 800b3ce:	0151      	lsls	r1, r2, #5
 800b3d0:	693a      	ldr	r2, [r7, #16]
 800b3d2:	440a      	add	r2, r1
 800b3d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b3d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b3dc:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	015a      	lsls	r2, r3, #5
 800b3e2:	693b      	ldr	r3, [r7, #16]
 800b3e4:	4413      	add	r3, r2
 800b3e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	68fa      	ldr	r2, [r7, #12]
 800b3ee:	0151      	lsls	r1, r2, #5
 800b3f0:	693a      	ldr	r2, [r7, #16]
 800b3f2:	440a      	add	r2, r1
 800b3f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b3f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b3fc:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800b3fe:	697b      	ldr	r3, [r7, #20]
 800b400:	3301      	adds	r3, #1
 800b402:	617b      	str	r3, [r7, #20]
 800b404:	697b      	ldr	r3, [r7, #20]
 800b406:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b40a:	d81d      	bhi.n	800b448 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	015a      	lsls	r2, r3, #5
 800b410:	693b      	ldr	r3, [r7, #16]
 800b412:	4413      	add	r3, r2
 800b414:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b41e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b422:	d0ec      	beq.n	800b3fe <USB_HC_Halt+0x1a4>
 800b424:	e011      	b.n	800b44a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	015a      	lsls	r2, r3, #5
 800b42a:	693b      	ldr	r3, [r7, #16]
 800b42c:	4413      	add	r3, r2
 800b42e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	68fa      	ldr	r2, [r7, #12]
 800b436:	0151      	lsls	r1, r2, #5
 800b438:	693a      	ldr	r2, [r7, #16]
 800b43a:	440a      	add	r2, r1
 800b43c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b440:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b444:	6013      	str	r3, [r2, #0]
 800b446:	e000      	b.n	800b44a <USB_HC_Halt+0x1f0>
          break;
 800b448:	bf00      	nop
    }
  }

  return HAL_OK;
 800b44a:	2300      	movs	r3, #0
}
 800b44c:	4618      	mov	r0, r3
 800b44e:	371c      	adds	r7, #28
 800b450:	46bd      	mov	sp, r7
 800b452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b456:	4770      	bx	lr

0800b458 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800b458:	b480      	push	{r7}
 800b45a:	b087      	sub	sp, #28
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
 800b460:	460b      	mov	r3, r1
 800b462:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800b468:	78fb      	ldrb	r3, [r7, #3]
 800b46a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800b46c:	2301      	movs	r3, #1
 800b46e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	04da      	lsls	r2, r3, #19
 800b474:	4b15      	ldr	r3, [pc, #84]	; (800b4cc <USB_DoPing+0x74>)
 800b476:	4013      	ands	r3, r2
 800b478:	693a      	ldr	r2, [r7, #16]
 800b47a:	0151      	lsls	r1, r2, #5
 800b47c:	697a      	ldr	r2, [r7, #20]
 800b47e:	440a      	add	r2, r1
 800b480:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b484:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b488:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800b48a:	693b      	ldr	r3, [r7, #16]
 800b48c:	015a      	lsls	r2, r3, #5
 800b48e:	697b      	ldr	r3, [r7, #20]
 800b490:	4413      	add	r3, r2
 800b492:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b49a:	68bb      	ldr	r3, [r7, #8]
 800b49c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b4a0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b4a2:	68bb      	ldr	r3, [r7, #8]
 800b4a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b4a8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800b4aa:	693b      	ldr	r3, [r7, #16]
 800b4ac:	015a      	lsls	r2, r3, #5
 800b4ae:	697b      	ldr	r3, [r7, #20]
 800b4b0:	4413      	add	r3, r2
 800b4b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b4b6:	461a      	mov	r2, r3
 800b4b8:	68bb      	ldr	r3, [r7, #8]
 800b4ba:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800b4bc:	2300      	movs	r3, #0
}
 800b4be:	4618      	mov	r0, r3
 800b4c0:	371c      	adds	r7, #28
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c8:	4770      	bx	lr
 800b4ca:	bf00      	nop
 800b4cc:	1ff80000 	.word	0x1ff80000

0800b4d0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b086      	sub	sp, #24
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800b4dc:	2300      	movs	r3, #0
 800b4de:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800b4e0:	6878      	ldr	r0, [r7, #4]
 800b4e2:	f7ff f99f 	bl	800a824 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800b4e6:	2110      	movs	r1, #16
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	f7ff f9d7 	bl	800a89c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800b4ee:	6878      	ldr	r0, [r7, #4]
 800b4f0:	f7ff f9fa 	bl	800a8e8 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	613b      	str	r3, [r7, #16]
 800b4f8:	e01f      	b.n	800b53a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800b4fa:	693b      	ldr	r3, [r7, #16]
 800b4fc:	015a      	lsls	r2, r3, #5
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	4413      	add	r3, r2
 800b502:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800b50a:	68bb      	ldr	r3, [r7, #8]
 800b50c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b510:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800b512:	68bb      	ldr	r3, [r7, #8]
 800b514:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b518:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b51a:	68bb      	ldr	r3, [r7, #8]
 800b51c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b520:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800b522:	693b      	ldr	r3, [r7, #16]
 800b524:	015a      	lsls	r2, r3, #5
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	4413      	add	r3, r2
 800b52a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b52e:	461a      	mov	r2, r3
 800b530:	68bb      	ldr	r3, [r7, #8]
 800b532:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800b534:	693b      	ldr	r3, [r7, #16]
 800b536:	3301      	adds	r3, #1
 800b538:	613b      	str	r3, [r7, #16]
 800b53a:	693b      	ldr	r3, [r7, #16]
 800b53c:	2b0f      	cmp	r3, #15
 800b53e:	d9dc      	bls.n	800b4fa <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800b540:	2300      	movs	r3, #0
 800b542:	613b      	str	r3, [r7, #16]
 800b544:	e034      	b.n	800b5b0 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800b546:	693b      	ldr	r3, [r7, #16]
 800b548:	015a      	lsls	r2, r3, #5
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	4413      	add	r3, r2
 800b54e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800b556:	68bb      	ldr	r3, [r7, #8]
 800b558:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b55c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800b55e:	68bb      	ldr	r3, [r7, #8]
 800b560:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b564:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b566:	68bb      	ldr	r3, [r7, #8]
 800b568:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b56c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800b56e:	693b      	ldr	r3, [r7, #16]
 800b570:	015a      	lsls	r2, r3, #5
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	4413      	add	r3, r2
 800b576:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b57a:	461a      	mov	r2, r3
 800b57c:	68bb      	ldr	r3, [r7, #8]
 800b57e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800b580:	697b      	ldr	r3, [r7, #20]
 800b582:	3301      	adds	r3, #1
 800b584:	617b      	str	r3, [r7, #20]
 800b586:	697b      	ldr	r3, [r7, #20]
 800b588:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b58c:	d80c      	bhi.n	800b5a8 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b58e:	693b      	ldr	r3, [r7, #16]
 800b590:	015a      	lsls	r2, r3, #5
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	4413      	add	r3, r2
 800b596:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b5a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b5a4:	d0ec      	beq.n	800b580 <USB_StopHost+0xb0>
 800b5a6:	e000      	b.n	800b5aa <USB_StopHost+0xda>
        break;
 800b5a8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800b5aa:	693b      	ldr	r3, [r7, #16]
 800b5ac:	3301      	adds	r3, #1
 800b5ae:	613b      	str	r3, [r7, #16]
 800b5b0:	693b      	ldr	r3, [r7, #16]
 800b5b2:	2b0f      	cmp	r3, #15
 800b5b4:	d9c7      	bls.n	800b546 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b5bc:	461a      	mov	r2, r3
 800b5be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b5c2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b5ca:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800b5cc:	6878      	ldr	r0, [r7, #4]
 800b5ce:	f7ff f918 	bl	800a802 <USB_EnableGlobalInt>

  return HAL_OK;
 800b5d2:	2300      	movs	r3, #0
}
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	3718      	adds	r7, #24
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	bd80      	pop	{r7, pc}

0800b5dc <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800b5dc:	b590      	push	{r4, r7, lr}
 800b5de:	b089      	sub	sp, #36	; 0x24
 800b5e0:	af04      	add	r7, sp, #16
 800b5e2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800b5e4:	2301      	movs	r3, #1
 800b5e6:	2202      	movs	r2, #2
 800b5e8:	2102      	movs	r1, #2
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	f000 fc68 	bl	800bec0 <USBH_FindInterface>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800b5f4:	7bfb      	ldrb	r3, [r7, #15]
 800b5f6:	2bff      	cmp	r3, #255	; 0xff
 800b5f8:	d002      	beq.n	800b600 <USBH_CDC_InterfaceInit+0x24>
 800b5fa:	7bfb      	ldrb	r3, [r7, #15]
 800b5fc:	2b01      	cmp	r3, #1
 800b5fe:	d901      	bls.n	800b604 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800b600:	2302      	movs	r3, #2
 800b602:	e13d      	b.n	800b880 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800b604:	7bfb      	ldrb	r3, [r7, #15]
 800b606:	4619      	mov	r1, r3
 800b608:	6878      	ldr	r0, [r7, #4]
 800b60a:	f000 fc3d 	bl	800be88 <USBH_SelectInterface>
 800b60e:	4603      	mov	r3, r0
 800b610:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800b612:	7bbb      	ldrb	r3, [r7, #14]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d001      	beq.n	800b61c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800b618:	2302      	movs	r3, #2
 800b61a:	e131      	b.n	800b880 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800b622:	2050      	movs	r0, #80	; 0x50
 800b624:	f002 fa46 	bl	800dab4 <malloc>
 800b628:	4603      	mov	r3, r0
 800b62a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b632:	69db      	ldr	r3, [r3, #28]
 800b634:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800b636:	68bb      	ldr	r3, [r7, #8]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d101      	bne.n	800b640 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800b63c:	2302      	movs	r3, #2
 800b63e:	e11f      	b.n	800b880 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800b640:	2250      	movs	r2, #80	; 0x50
 800b642:	2100      	movs	r1, #0
 800b644:	68b8      	ldr	r0, [r7, #8]
 800b646:	f002 fa45 	bl	800dad4 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800b64a:	7bfb      	ldrb	r3, [r7, #15]
 800b64c:	687a      	ldr	r2, [r7, #4]
 800b64e:	211a      	movs	r1, #26
 800b650:	fb01 f303 	mul.w	r3, r1, r3
 800b654:	4413      	add	r3, r2
 800b656:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b65a:	781b      	ldrb	r3, [r3, #0]
 800b65c:	b25b      	sxtb	r3, r3
 800b65e:	2b00      	cmp	r3, #0
 800b660:	da15      	bge.n	800b68e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800b662:	7bfb      	ldrb	r3, [r7, #15]
 800b664:	687a      	ldr	r2, [r7, #4]
 800b666:	211a      	movs	r1, #26
 800b668:	fb01 f303 	mul.w	r3, r1, r3
 800b66c:	4413      	add	r3, r2
 800b66e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b672:	781a      	ldrb	r2, [r3, #0]
 800b674:	68bb      	ldr	r3, [r7, #8]
 800b676:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b678:	7bfb      	ldrb	r3, [r7, #15]
 800b67a:	687a      	ldr	r2, [r7, #4]
 800b67c:	211a      	movs	r1, #26
 800b67e:	fb01 f303 	mul.w	r3, r1, r3
 800b682:	4413      	add	r3, r2
 800b684:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b688:	881a      	ldrh	r2, [r3, #0]
 800b68a:	68bb      	ldr	r3, [r7, #8]
 800b68c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800b68e:	68bb      	ldr	r3, [r7, #8]
 800b690:	785b      	ldrb	r3, [r3, #1]
 800b692:	4619      	mov	r1, r3
 800b694:	6878      	ldr	r0, [r7, #4]
 800b696:	f001 fe36 	bl	800d306 <USBH_AllocPipe>
 800b69a:	4603      	mov	r3, r0
 800b69c:	461a      	mov	r2, r3
 800b69e:	68bb      	ldr	r3, [r7, #8]
 800b6a0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800b6a2:	68bb      	ldr	r3, [r7, #8]
 800b6a4:	7819      	ldrb	r1, [r3, #0]
 800b6a6:	68bb      	ldr	r3, [r7, #8]
 800b6a8:	7858      	ldrb	r0, [r3, #1]
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b6b6:	68ba      	ldr	r2, [r7, #8]
 800b6b8:	8952      	ldrh	r2, [r2, #10]
 800b6ba:	9202      	str	r2, [sp, #8]
 800b6bc:	2203      	movs	r2, #3
 800b6be:	9201      	str	r2, [sp, #4]
 800b6c0:	9300      	str	r3, [sp, #0]
 800b6c2:	4623      	mov	r3, r4
 800b6c4:	4602      	mov	r2, r0
 800b6c6:	6878      	ldr	r0, [r7, #4]
 800b6c8:	f001 fdee 	bl	800d2a8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800b6cc:	68bb      	ldr	r3, [r7, #8]
 800b6ce:	781b      	ldrb	r3, [r3, #0]
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	4619      	mov	r1, r3
 800b6d4:	6878      	ldr	r0, [r7, #4]
 800b6d6:	f002 f8fb 	bl	800d8d0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800b6da:	2300      	movs	r3, #0
 800b6dc:	2200      	movs	r2, #0
 800b6de:	210a      	movs	r1, #10
 800b6e0:	6878      	ldr	r0, [r7, #4]
 800b6e2:	f000 fbed 	bl	800bec0 <USBH_FindInterface>
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800b6ea:	7bfb      	ldrb	r3, [r7, #15]
 800b6ec:	2bff      	cmp	r3, #255	; 0xff
 800b6ee:	d002      	beq.n	800b6f6 <USBH_CDC_InterfaceInit+0x11a>
 800b6f0:	7bfb      	ldrb	r3, [r7, #15]
 800b6f2:	2b01      	cmp	r3, #1
 800b6f4:	d901      	bls.n	800b6fa <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800b6f6:	2302      	movs	r3, #2
 800b6f8:	e0c2      	b.n	800b880 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800b6fa:	7bfb      	ldrb	r3, [r7, #15]
 800b6fc:	687a      	ldr	r2, [r7, #4]
 800b6fe:	211a      	movs	r1, #26
 800b700:	fb01 f303 	mul.w	r3, r1, r3
 800b704:	4413      	add	r3, r2
 800b706:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b70a:	781b      	ldrb	r3, [r3, #0]
 800b70c:	b25b      	sxtb	r3, r3
 800b70e:	2b00      	cmp	r3, #0
 800b710:	da16      	bge.n	800b740 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800b712:	7bfb      	ldrb	r3, [r7, #15]
 800b714:	687a      	ldr	r2, [r7, #4]
 800b716:	211a      	movs	r1, #26
 800b718:	fb01 f303 	mul.w	r3, r1, r3
 800b71c:	4413      	add	r3, r2
 800b71e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b722:	781a      	ldrb	r2, [r3, #0]
 800b724:	68bb      	ldr	r3, [r7, #8]
 800b726:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b728:	7bfb      	ldrb	r3, [r7, #15]
 800b72a:	687a      	ldr	r2, [r7, #4]
 800b72c:	211a      	movs	r1, #26
 800b72e:	fb01 f303 	mul.w	r3, r1, r3
 800b732:	4413      	add	r3, r2
 800b734:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b738:	881a      	ldrh	r2, [r3, #0]
 800b73a:	68bb      	ldr	r3, [r7, #8]
 800b73c:	835a      	strh	r2, [r3, #26]
 800b73e:	e015      	b.n	800b76c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800b740:	7bfb      	ldrb	r3, [r7, #15]
 800b742:	687a      	ldr	r2, [r7, #4]
 800b744:	211a      	movs	r1, #26
 800b746:	fb01 f303 	mul.w	r3, r1, r3
 800b74a:	4413      	add	r3, r2
 800b74c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b750:	781a      	ldrb	r2, [r3, #0]
 800b752:	68bb      	ldr	r3, [r7, #8]
 800b754:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b756:	7bfb      	ldrb	r3, [r7, #15]
 800b758:	687a      	ldr	r2, [r7, #4]
 800b75a:	211a      	movs	r1, #26
 800b75c:	fb01 f303 	mul.w	r3, r1, r3
 800b760:	4413      	add	r3, r2
 800b762:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b766:	881a      	ldrh	r2, [r3, #0]
 800b768:	68bb      	ldr	r3, [r7, #8]
 800b76a:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800b76c:	7bfb      	ldrb	r3, [r7, #15]
 800b76e:	687a      	ldr	r2, [r7, #4]
 800b770:	211a      	movs	r1, #26
 800b772:	fb01 f303 	mul.w	r3, r1, r3
 800b776:	4413      	add	r3, r2
 800b778:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b77c:	781b      	ldrb	r3, [r3, #0]
 800b77e:	b25b      	sxtb	r3, r3
 800b780:	2b00      	cmp	r3, #0
 800b782:	da16      	bge.n	800b7b2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800b784:	7bfb      	ldrb	r3, [r7, #15]
 800b786:	687a      	ldr	r2, [r7, #4]
 800b788:	211a      	movs	r1, #26
 800b78a:	fb01 f303 	mul.w	r3, r1, r3
 800b78e:	4413      	add	r3, r2
 800b790:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b794:	781a      	ldrb	r2, [r3, #0]
 800b796:	68bb      	ldr	r3, [r7, #8]
 800b798:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b79a:	7bfb      	ldrb	r3, [r7, #15]
 800b79c:	687a      	ldr	r2, [r7, #4]
 800b79e:	211a      	movs	r1, #26
 800b7a0:	fb01 f303 	mul.w	r3, r1, r3
 800b7a4:	4413      	add	r3, r2
 800b7a6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800b7aa:	881a      	ldrh	r2, [r3, #0]
 800b7ac:	68bb      	ldr	r3, [r7, #8]
 800b7ae:	835a      	strh	r2, [r3, #26]
 800b7b0:	e015      	b.n	800b7de <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800b7b2:	7bfb      	ldrb	r3, [r7, #15]
 800b7b4:	687a      	ldr	r2, [r7, #4]
 800b7b6:	211a      	movs	r1, #26
 800b7b8:	fb01 f303 	mul.w	r3, r1, r3
 800b7bc:	4413      	add	r3, r2
 800b7be:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b7c2:	781a      	ldrb	r2, [r3, #0]
 800b7c4:	68bb      	ldr	r3, [r7, #8]
 800b7c6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b7c8:	7bfb      	ldrb	r3, [r7, #15]
 800b7ca:	687a      	ldr	r2, [r7, #4]
 800b7cc:	211a      	movs	r1, #26
 800b7ce:	fb01 f303 	mul.w	r3, r1, r3
 800b7d2:	4413      	add	r3, r2
 800b7d4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800b7d8:	881a      	ldrh	r2, [r3, #0]
 800b7da:	68bb      	ldr	r3, [r7, #8]
 800b7dc:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800b7de:	68bb      	ldr	r3, [r7, #8]
 800b7e0:	7b9b      	ldrb	r3, [r3, #14]
 800b7e2:	4619      	mov	r1, r3
 800b7e4:	6878      	ldr	r0, [r7, #4]
 800b7e6:	f001 fd8e 	bl	800d306 <USBH_AllocPipe>
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	461a      	mov	r2, r3
 800b7ee:	68bb      	ldr	r3, [r7, #8]
 800b7f0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800b7f2:	68bb      	ldr	r3, [r7, #8]
 800b7f4:	7bdb      	ldrb	r3, [r3, #15]
 800b7f6:	4619      	mov	r1, r3
 800b7f8:	6878      	ldr	r0, [r7, #4]
 800b7fa:	f001 fd84 	bl	800d306 <USBH_AllocPipe>
 800b7fe:	4603      	mov	r3, r0
 800b800:	461a      	mov	r2, r3
 800b802:	68bb      	ldr	r3, [r7, #8]
 800b804:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800b806:	68bb      	ldr	r3, [r7, #8]
 800b808:	7b59      	ldrb	r1, [r3, #13]
 800b80a:	68bb      	ldr	r3, [r7, #8]
 800b80c:	7b98      	ldrb	r0, [r3, #14]
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b81a:	68ba      	ldr	r2, [r7, #8]
 800b81c:	8b12      	ldrh	r2, [r2, #24]
 800b81e:	9202      	str	r2, [sp, #8]
 800b820:	2202      	movs	r2, #2
 800b822:	9201      	str	r2, [sp, #4]
 800b824:	9300      	str	r3, [sp, #0]
 800b826:	4623      	mov	r3, r4
 800b828:	4602      	mov	r2, r0
 800b82a:	6878      	ldr	r0, [r7, #4]
 800b82c:	f001 fd3c 	bl	800d2a8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800b830:	68bb      	ldr	r3, [r7, #8]
 800b832:	7b19      	ldrb	r1, [r3, #12]
 800b834:	68bb      	ldr	r3, [r7, #8]
 800b836:	7bd8      	ldrb	r0, [r3, #15]
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b844:	68ba      	ldr	r2, [r7, #8]
 800b846:	8b52      	ldrh	r2, [r2, #26]
 800b848:	9202      	str	r2, [sp, #8]
 800b84a:	2202      	movs	r2, #2
 800b84c:	9201      	str	r2, [sp, #4]
 800b84e:	9300      	str	r3, [sp, #0]
 800b850:	4623      	mov	r3, r4
 800b852:	4602      	mov	r2, r0
 800b854:	6878      	ldr	r0, [r7, #4]
 800b856:	f001 fd27 	bl	800d2a8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800b85a:	68bb      	ldr	r3, [r7, #8]
 800b85c:	2200      	movs	r2, #0
 800b85e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800b862:	68bb      	ldr	r3, [r7, #8]
 800b864:	7b5b      	ldrb	r3, [r3, #13]
 800b866:	2200      	movs	r2, #0
 800b868:	4619      	mov	r1, r3
 800b86a:	6878      	ldr	r0, [r7, #4]
 800b86c:	f002 f830 	bl	800d8d0 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800b870:	68bb      	ldr	r3, [r7, #8]
 800b872:	7b1b      	ldrb	r3, [r3, #12]
 800b874:	2200      	movs	r2, #0
 800b876:	4619      	mov	r1, r3
 800b878:	6878      	ldr	r0, [r7, #4]
 800b87a:	f002 f829 	bl	800d8d0 <USBH_LL_SetToggle>

  return USBH_OK;
 800b87e:	2300      	movs	r3, #0
}
 800b880:	4618      	mov	r0, r3
 800b882:	3714      	adds	r7, #20
 800b884:	46bd      	mov	sp, r7
 800b886:	bd90      	pop	{r4, r7, pc}

0800b888 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b084      	sub	sp, #16
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b896:	69db      	ldr	r3, [r3, #28]
 800b898:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	781b      	ldrb	r3, [r3, #0]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d00e      	beq.n	800b8c0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	781b      	ldrb	r3, [r3, #0]
 800b8a6:	4619      	mov	r1, r3
 800b8a8:	6878      	ldr	r0, [r7, #4]
 800b8aa:	f001 fd1c 	bl	800d2e6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	781b      	ldrb	r3, [r3, #0]
 800b8b2:	4619      	mov	r1, r3
 800b8b4:	6878      	ldr	r0, [r7, #4]
 800b8b6:	f001 fd47 	bl	800d348 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	2200      	movs	r2, #0
 800b8be:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	7b1b      	ldrb	r3, [r3, #12]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d00e      	beq.n	800b8e6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	7b1b      	ldrb	r3, [r3, #12]
 800b8cc:	4619      	mov	r1, r3
 800b8ce:	6878      	ldr	r0, [r7, #4]
 800b8d0:	f001 fd09 	bl	800d2e6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	7b1b      	ldrb	r3, [r3, #12]
 800b8d8:	4619      	mov	r1, r3
 800b8da:	6878      	ldr	r0, [r7, #4]
 800b8dc:	f001 fd34 	bl	800d348 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	7b5b      	ldrb	r3, [r3, #13]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d00e      	beq.n	800b90c <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	7b5b      	ldrb	r3, [r3, #13]
 800b8f2:	4619      	mov	r1, r3
 800b8f4:	6878      	ldr	r0, [r7, #4]
 800b8f6:	f001 fcf6 	bl	800d2e6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	7b5b      	ldrb	r3, [r3, #13]
 800b8fe:	4619      	mov	r1, r3
 800b900:	6878      	ldr	r0, [r7, #4]
 800b902:	f001 fd21 	bl	800d348 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	2200      	movs	r2, #0
 800b90a:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b912:	69db      	ldr	r3, [r3, #28]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d00b      	beq.n	800b930 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b91e:	69db      	ldr	r3, [r3, #28]
 800b920:	4618      	mov	r0, r3
 800b922:	f002 f8cf 	bl	800dac4 <free>
    phost->pActiveClass->pData = 0U;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b92c:	2200      	movs	r2, #0
 800b92e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800b930:	2300      	movs	r3, #0
}
 800b932:	4618      	mov	r0, r3
 800b934:	3710      	adds	r7, #16
 800b936:	46bd      	mov	sp, r7
 800b938:	bd80      	pop	{r7, pc}

0800b93a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800b93a:	b580      	push	{r7, lr}
 800b93c:	b084      	sub	sp, #16
 800b93e:	af00      	add	r7, sp, #0
 800b940:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b948:	69db      	ldr	r3, [r3, #28]
 800b94a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	3340      	adds	r3, #64	; 0x40
 800b950:	4619      	mov	r1, r3
 800b952:	6878      	ldr	r0, [r7, #4]
 800b954:	f000 f8b1 	bl	800baba <GetLineCoding>
 800b958:	4603      	mov	r3, r0
 800b95a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800b95c:	7afb      	ldrb	r3, [r7, #11]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d105      	bne.n	800b96e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b968:	2102      	movs	r1, #2
 800b96a:	6878      	ldr	r0, [r7, #4]
 800b96c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800b96e:	7afb      	ldrb	r3, [r7, #11]
}
 800b970:	4618      	mov	r0, r3
 800b972:	3710      	adds	r7, #16
 800b974:	46bd      	mov	sp, r7
 800b976:	bd80      	pop	{r7, pc}

0800b978 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b084      	sub	sp, #16
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800b980:	2301      	movs	r3, #1
 800b982:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800b984:	2300      	movs	r3, #0
 800b986:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b98e:	69db      	ldr	r3, [r3, #28]
 800b990:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800b992:	68bb      	ldr	r3, [r7, #8]
 800b994:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800b998:	2b04      	cmp	r3, #4
 800b99a:	d877      	bhi.n	800ba8c <USBH_CDC_Process+0x114>
 800b99c:	a201      	add	r2, pc, #4	; (adr r2, 800b9a4 <USBH_CDC_Process+0x2c>)
 800b99e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9a2:	bf00      	nop
 800b9a4:	0800b9b9 	.word	0x0800b9b9
 800b9a8:	0800b9bf 	.word	0x0800b9bf
 800b9ac:	0800b9ef 	.word	0x0800b9ef
 800b9b0:	0800ba63 	.word	0x0800ba63
 800b9b4:	0800ba71 	.word	0x0800ba71
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	73fb      	strb	r3, [r7, #15]
      break;
 800b9bc:	e06d      	b.n	800ba9a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800b9be:	68bb      	ldr	r3, [r7, #8]
 800b9c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b9c2:	4619      	mov	r1, r3
 800b9c4:	6878      	ldr	r0, [r7, #4]
 800b9c6:	f000 f897 	bl	800baf8 <SetLineCoding>
 800b9ca:	4603      	mov	r3, r0
 800b9cc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800b9ce:	7bbb      	ldrb	r3, [r7, #14]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d104      	bne.n	800b9de <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800b9d4:	68bb      	ldr	r3, [r7, #8]
 800b9d6:	2202      	movs	r2, #2
 800b9d8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800b9dc:	e058      	b.n	800ba90 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800b9de:	7bbb      	ldrb	r3, [r7, #14]
 800b9e0:	2b01      	cmp	r3, #1
 800b9e2:	d055      	beq.n	800ba90 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800b9e4:	68bb      	ldr	r3, [r7, #8]
 800b9e6:	2204      	movs	r2, #4
 800b9e8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800b9ec:	e050      	b.n	800ba90 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800b9ee:	68bb      	ldr	r3, [r7, #8]
 800b9f0:	3340      	adds	r3, #64	; 0x40
 800b9f2:	4619      	mov	r1, r3
 800b9f4:	6878      	ldr	r0, [r7, #4]
 800b9f6:	f000 f860 	bl	800baba <GetLineCoding>
 800b9fa:	4603      	mov	r3, r0
 800b9fc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800b9fe:	7bbb      	ldrb	r3, [r7, #14]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d126      	bne.n	800ba52 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800ba04:	68bb      	ldr	r3, [r7, #8]
 800ba06:	2200      	movs	r2, #0
 800ba08:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800ba0c:	68bb      	ldr	r3, [r7, #8]
 800ba0e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800ba12:	68bb      	ldr	r3, [r7, #8]
 800ba14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba16:	791b      	ldrb	r3, [r3, #4]
 800ba18:	429a      	cmp	r2, r3
 800ba1a:	d13b      	bne.n	800ba94 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800ba1c:	68bb      	ldr	r3, [r7, #8]
 800ba1e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800ba22:	68bb      	ldr	r3, [r7, #8]
 800ba24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba26:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800ba28:	429a      	cmp	r2, r3
 800ba2a:	d133      	bne.n	800ba94 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800ba2c:	68bb      	ldr	r3, [r7, #8]
 800ba2e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800ba32:	68bb      	ldr	r3, [r7, #8]
 800ba34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba36:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800ba38:	429a      	cmp	r2, r3
 800ba3a:	d12b      	bne.n	800ba94 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800ba3c:	68bb      	ldr	r3, [r7, #8]
 800ba3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ba40:	68bb      	ldr	r3, [r7, #8]
 800ba42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba44:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800ba46:	429a      	cmp	r2, r3
 800ba48:	d124      	bne.n	800ba94 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800ba4a:	6878      	ldr	r0, [r7, #4]
 800ba4c:	f000 f95a 	bl	800bd04 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800ba50:	e020      	b.n	800ba94 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800ba52:	7bbb      	ldrb	r3, [r7, #14]
 800ba54:	2b01      	cmp	r3, #1
 800ba56:	d01d      	beq.n	800ba94 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800ba58:	68bb      	ldr	r3, [r7, #8]
 800ba5a:	2204      	movs	r2, #4
 800ba5c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800ba60:	e018      	b.n	800ba94 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800ba62:	6878      	ldr	r0, [r7, #4]
 800ba64:	f000 f867 	bl	800bb36 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800ba68:	6878      	ldr	r0, [r7, #4]
 800ba6a:	f000 f8dc 	bl	800bc26 <CDC_ProcessReception>
      break;
 800ba6e:	e014      	b.n	800ba9a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800ba70:	2100      	movs	r1, #0
 800ba72:	6878      	ldr	r0, [r7, #4]
 800ba74:	f000 ffe5 	bl	800ca42 <USBH_ClrFeature>
 800ba78:	4603      	mov	r3, r0
 800ba7a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800ba7c:	7bbb      	ldrb	r3, [r7, #14]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d10a      	bne.n	800ba98 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800ba82:	68bb      	ldr	r3, [r7, #8]
 800ba84:	2200      	movs	r2, #0
 800ba86:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800ba8a:	e005      	b.n	800ba98 <USBH_CDC_Process+0x120>

    default:
      break;
 800ba8c:	bf00      	nop
 800ba8e:	e004      	b.n	800ba9a <USBH_CDC_Process+0x122>
      break;
 800ba90:	bf00      	nop
 800ba92:	e002      	b.n	800ba9a <USBH_CDC_Process+0x122>
      break;
 800ba94:	bf00      	nop
 800ba96:	e000      	b.n	800ba9a <USBH_CDC_Process+0x122>
      break;
 800ba98:	bf00      	nop

  }

  return status;
 800ba9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	3710      	adds	r7, #16
 800baa0:	46bd      	mov	sp, r7
 800baa2:	bd80      	pop	{r7, pc}

0800baa4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800baa4:	b480      	push	{r7}
 800baa6:	b083      	sub	sp, #12
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800baac:	2300      	movs	r3, #0
}
 800baae:	4618      	mov	r0, r3
 800bab0:	370c      	adds	r7, #12
 800bab2:	46bd      	mov	sp, r7
 800bab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab8:	4770      	bx	lr

0800baba <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800baba:	b580      	push	{r7, lr}
 800babc:	b082      	sub	sp, #8
 800babe:	af00      	add	r7, sp, #0
 800bac0:	6078      	str	r0, [r7, #4]
 800bac2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	22a1      	movs	r2, #161	; 0xa1
 800bac8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	2221      	movs	r2, #33	; 0x21
 800bace:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	2200      	movs	r2, #0
 800bad4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	2200      	movs	r2, #0
 800bada:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	2207      	movs	r2, #7
 800bae0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800bae2:	683b      	ldr	r3, [r7, #0]
 800bae4:	2207      	movs	r2, #7
 800bae6:	4619      	mov	r1, r3
 800bae8:	6878      	ldr	r0, [r7, #4]
 800baea:	f001 f98a 	bl	800ce02 <USBH_CtlReq>
 800baee:	4603      	mov	r3, r0
}
 800baf0:	4618      	mov	r0, r3
 800baf2:	3708      	adds	r7, #8
 800baf4:	46bd      	mov	sp, r7
 800baf6:	bd80      	pop	{r7, pc}

0800baf8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b082      	sub	sp, #8
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
 800bb00:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	2221      	movs	r2, #33	; 0x21
 800bb06:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	2220      	movs	r2, #32
 800bb0c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	2200      	movs	r2, #0
 800bb12:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	2200      	movs	r2, #0
 800bb18:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	2207      	movs	r2, #7
 800bb1e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800bb20:	683b      	ldr	r3, [r7, #0]
 800bb22:	2207      	movs	r2, #7
 800bb24:	4619      	mov	r1, r3
 800bb26:	6878      	ldr	r0, [r7, #4]
 800bb28:	f001 f96b 	bl	800ce02 <USBH_CtlReq>
 800bb2c:	4603      	mov	r3, r0
}
 800bb2e:	4618      	mov	r0, r3
 800bb30:	3708      	adds	r7, #8
 800bb32:	46bd      	mov	sp, r7
 800bb34:	bd80      	pop	{r7, pc}

0800bb36 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800bb36:	b580      	push	{r7, lr}
 800bb38:	b086      	sub	sp, #24
 800bb3a:	af02      	add	r7, sp, #8
 800bb3c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bb44:	69db      	ldr	r3, [r3, #28]
 800bb46:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800bb48:	2300      	movs	r3, #0
 800bb4a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800bb52:	2b01      	cmp	r3, #1
 800bb54:	d002      	beq.n	800bb5c <CDC_ProcessTransmission+0x26>
 800bb56:	2b02      	cmp	r3, #2
 800bb58:	d025      	beq.n	800bba6 <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 800bb5a:	e060      	b.n	800bc1e <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb60:	68fa      	ldr	r2, [r7, #12]
 800bb62:	8b12      	ldrh	r2, [r2, #24]
 800bb64:	4293      	cmp	r3, r2
 800bb66:	d90c      	bls.n	800bb82 <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	69d9      	ldr	r1, [r3, #28]
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	8b1a      	ldrh	r2, [r3, #24]
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	7b58      	ldrb	r0, [r3, #13]
 800bb74:	2301      	movs	r3, #1
 800bb76:	9300      	str	r3, [sp, #0]
 800bb78:	4603      	mov	r3, r0
 800bb7a:	6878      	ldr	r0, [r7, #4]
 800bb7c:	f001 fb51 	bl	800d222 <USBH_BulkSendData>
 800bb80:	e00c      	b.n	800bb9c <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800bb8a:	b29a      	uxth	r2, r3
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	7b58      	ldrb	r0, [r3, #13]
 800bb90:	2301      	movs	r3, #1
 800bb92:	9300      	str	r3, [sp, #0]
 800bb94:	4603      	mov	r3, r0
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	f001 fb43 	bl	800d222 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	2202      	movs	r2, #2
 800bba0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800bba4:	e03b      	b.n	800bc1e <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	7b5b      	ldrb	r3, [r3, #13]
 800bbaa:	4619      	mov	r1, r3
 800bbac:	6878      	ldr	r0, [r7, #4]
 800bbae:	f001 fe65 	bl	800d87c <USBH_LL_GetURBState>
 800bbb2:	4603      	mov	r3, r0
 800bbb4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800bbb6:	7afb      	ldrb	r3, [r7, #11]
 800bbb8:	2b01      	cmp	r3, #1
 800bbba:	d128      	bne.n	800bc0e <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbc0:	68fa      	ldr	r2, [r7, #12]
 800bbc2:	8b12      	ldrh	r2, [r2, #24]
 800bbc4:	4293      	cmp	r3, r2
 800bbc6:	d90e      	bls.n	800bbe6 <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbcc:	68fa      	ldr	r2, [r7, #12]
 800bbce:	8b12      	ldrh	r2, [r2, #24]
 800bbd0:	1a9a      	subs	r2, r3, r2
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	69db      	ldr	r3, [r3, #28]
 800bbda:	68fa      	ldr	r2, [r7, #12]
 800bbdc:	8b12      	ldrh	r2, [r2, #24]
 800bbde:	441a      	add	r2, r3
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	61da      	str	r2, [r3, #28]
 800bbe4:	e002      	b.n	800bbec <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	2200      	movs	r2, #0
 800bbea:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d004      	beq.n	800bbfe <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	2201      	movs	r2, #1
 800bbf8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800bbfc:	e00e      	b.n	800bc1c <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	2200      	movs	r2, #0
 800bc02:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800bc06:	6878      	ldr	r0, [r7, #4]
 800bc08:	f000 f868 	bl	800bcdc <USBH_CDC_TransmitCallback>
      break;
 800bc0c:	e006      	b.n	800bc1c <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 800bc0e:	7afb      	ldrb	r3, [r7, #11]
 800bc10:	2b02      	cmp	r3, #2
 800bc12:	d103      	bne.n	800bc1c <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	2201      	movs	r2, #1
 800bc18:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800bc1c:	bf00      	nop
  }
}
 800bc1e:	bf00      	nop
 800bc20:	3710      	adds	r7, #16
 800bc22:	46bd      	mov	sp, r7
 800bc24:	bd80      	pop	{r7, pc}

0800bc26 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800bc26:	b580      	push	{r7, lr}
 800bc28:	b086      	sub	sp, #24
 800bc2a:	af00      	add	r7, sp, #0
 800bc2c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bc34:	69db      	ldr	r3, [r3, #28]
 800bc36:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800bc38:	2300      	movs	r3, #0
 800bc3a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800bc3c:	697b      	ldr	r3, [r7, #20]
 800bc3e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800bc42:	2b03      	cmp	r3, #3
 800bc44:	d002      	beq.n	800bc4c <CDC_ProcessReception+0x26>
 800bc46:	2b04      	cmp	r3, #4
 800bc48:	d00e      	beq.n	800bc68 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800bc4a:	e043      	b.n	800bcd4 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 800bc4c:	697b      	ldr	r3, [r7, #20]
 800bc4e:	6a19      	ldr	r1, [r3, #32]
 800bc50:	697b      	ldr	r3, [r7, #20]
 800bc52:	8b5a      	ldrh	r2, [r3, #26]
 800bc54:	697b      	ldr	r3, [r7, #20]
 800bc56:	7b1b      	ldrb	r3, [r3, #12]
 800bc58:	6878      	ldr	r0, [r7, #4]
 800bc5a:	f001 fb07 	bl	800d26c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800bc5e:	697b      	ldr	r3, [r7, #20]
 800bc60:	2204      	movs	r2, #4
 800bc62:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800bc66:	e035      	b.n	800bcd4 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800bc68:	697b      	ldr	r3, [r7, #20]
 800bc6a:	7b1b      	ldrb	r3, [r3, #12]
 800bc6c:	4619      	mov	r1, r3
 800bc6e:	6878      	ldr	r0, [r7, #4]
 800bc70:	f001 fe04 	bl	800d87c <USBH_LL_GetURBState>
 800bc74:	4603      	mov	r3, r0
 800bc76:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800bc78:	7cfb      	ldrb	r3, [r7, #19]
 800bc7a:	2b01      	cmp	r3, #1
 800bc7c:	d129      	bne.n	800bcd2 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800bc7e:	697b      	ldr	r3, [r7, #20]
 800bc80:	7b1b      	ldrb	r3, [r3, #12]
 800bc82:	4619      	mov	r1, r3
 800bc84:	6878      	ldr	r0, [r7, #4]
 800bc86:	f001 fd67 	bl	800d758 <USBH_LL_GetLastXferSize>
 800bc8a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800bc8c:	697b      	ldr	r3, [r7, #20]
 800bc8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc90:	68fa      	ldr	r2, [r7, #12]
 800bc92:	429a      	cmp	r2, r3
 800bc94:	d016      	beq.n	800bcc4 <CDC_ProcessReception+0x9e>
 800bc96:	697b      	ldr	r3, [r7, #20]
 800bc98:	8b5b      	ldrh	r3, [r3, #26]
 800bc9a:	461a      	mov	r2, r3
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	4293      	cmp	r3, r2
 800bca0:	d910      	bls.n	800bcc4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800bca2:	697b      	ldr	r3, [r7, #20]
 800bca4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	1ad2      	subs	r2, r2, r3
 800bcaa:	697b      	ldr	r3, [r7, #20]
 800bcac:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800bcae:	697b      	ldr	r3, [r7, #20]
 800bcb0:	6a1a      	ldr	r2, [r3, #32]
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	441a      	add	r2, r3
 800bcb6:	697b      	ldr	r3, [r7, #20]
 800bcb8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800bcba:	697b      	ldr	r3, [r7, #20]
 800bcbc:	2203      	movs	r2, #3
 800bcbe:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800bcc2:	e006      	b.n	800bcd2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800bcc4:	697b      	ldr	r3, [r7, #20]
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800bccc:	6878      	ldr	r0, [r7, #4]
 800bcce:	f000 f80f 	bl	800bcf0 <USBH_CDC_ReceiveCallback>
      break;
 800bcd2:	bf00      	nop
  }
}
 800bcd4:	bf00      	nop
 800bcd6:	3718      	adds	r7, #24
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	bd80      	pop	{r7, pc}

0800bcdc <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800bcdc:	b480      	push	{r7}
 800bcde:	b083      	sub	sp, #12
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800bce4:	bf00      	nop
 800bce6:	370c      	adds	r7, #12
 800bce8:	46bd      	mov	sp, r7
 800bcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcee:	4770      	bx	lr

0800bcf0 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800bcf0:	b480      	push	{r7}
 800bcf2:	b083      	sub	sp, #12
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800bcf8:	bf00      	nop
 800bcfa:	370c      	adds	r7, #12
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd02:	4770      	bx	lr

0800bd04 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800bd04:	b480      	push	{r7}
 800bd06:	b083      	sub	sp, #12
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800bd0c:	bf00      	nop
 800bd0e:	370c      	adds	r7, #12
 800bd10:	46bd      	mov	sp, r7
 800bd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd16:	4770      	bx	lr

0800bd18 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b084      	sub	sp, #16
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	60f8      	str	r0, [r7, #12]
 800bd20:	60b9      	str	r1, [r7, #8]
 800bd22:	4613      	mov	r3, r2
 800bd24:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d101      	bne.n	800bd30 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800bd2c:	2302      	movs	r3, #2
 800bd2e:	e029      	b.n	800bd84 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	79fa      	ldrb	r2, [r7, #7]
 800bd34:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	2200      	movs	r2, #0
 800bd44:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800bd48:	68f8      	ldr	r0, [r7, #12]
 800bd4a:	f000 f81f 	bl	800bd8c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	2200      	movs	r2, #0
 800bd52:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	2200      	movs	r2, #0
 800bd5a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	2200      	movs	r2, #0
 800bd62:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	2200      	movs	r2, #0
 800bd6a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800bd6e:	68bb      	ldr	r3, [r7, #8]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d003      	beq.n	800bd7c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	68ba      	ldr	r2, [r7, #8]
 800bd78:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800bd7c:	68f8      	ldr	r0, [r7, #12]
 800bd7e:	f001 fc39 	bl	800d5f4 <USBH_LL_Init>

  return USBH_OK;
 800bd82:	2300      	movs	r3, #0
}
 800bd84:	4618      	mov	r0, r3
 800bd86:	3710      	adds	r7, #16
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	bd80      	pop	{r7, pc}

0800bd8c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800bd8c:	b480      	push	{r7}
 800bd8e:	b085      	sub	sp, #20
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800bd94:	2300      	movs	r3, #0
 800bd96:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800bd98:	2300      	movs	r3, #0
 800bd9a:	60fb      	str	r3, [r7, #12]
 800bd9c:	e009      	b.n	800bdb2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800bd9e:	687a      	ldr	r2, [r7, #4]
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	33e0      	adds	r3, #224	; 0xe0
 800bda4:	009b      	lsls	r3, r3, #2
 800bda6:	4413      	add	r3, r2
 800bda8:	2200      	movs	r2, #0
 800bdaa:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	3301      	adds	r3, #1
 800bdb0:	60fb      	str	r3, [r7, #12]
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	2b0e      	cmp	r3, #14
 800bdb6:	d9f2      	bls.n	800bd9e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800bdb8:	2300      	movs	r3, #0
 800bdba:	60fb      	str	r3, [r7, #12]
 800bdbc:	e009      	b.n	800bdd2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800bdbe:	687a      	ldr	r2, [r7, #4]
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	4413      	add	r3, r2
 800bdc4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800bdc8:	2200      	movs	r2, #0
 800bdca:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	3301      	adds	r3, #1
 800bdd0:	60fb      	str	r3, [r7, #12]
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bdd8:	d3f1      	bcc.n	800bdbe <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	2200      	movs	r2, #0
 800bdde:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	2200      	movs	r2, #0
 800bde4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	2201      	movs	r2, #1
 800bdea:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	2200      	movs	r2, #0
 800bdf0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	2201      	movs	r2, #1
 800bdf8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	2240      	movs	r2, #64	; 0x40
 800bdfe:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	2200      	movs	r2, #0
 800be04:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	2200      	movs	r2, #0
 800be0a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	2201      	movs	r2, #1
 800be12:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	2200      	movs	r2, #0
 800be1a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	2200      	movs	r2, #0
 800be22:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800be26:	2300      	movs	r3, #0
}
 800be28:	4618      	mov	r0, r3
 800be2a:	3714      	adds	r7, #20
 800be2c:	46bd      	mov	sp, r7
 800be2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be32:	4770      	bx	lr

0800be34 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800be34:	b480      	push	{r7}
 800be36:	b085      	sub	sp, #20
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
 800be3c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800be3e:	2300      	movs	r3, #0
 800be40:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800be42:	683b      	ldr	r3, [r7, #0]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d016      	beq.n	800be76 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d10e      	bne.n	800be70 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800be58:	1c59      	adds	r1, r3, #1
 800be5a:	687a      	ldr	r2, [r7, #4]
 800be5c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800be60:	687a      	ldr	r2, [r7, #4]
 800be62:	33de      	adds	r3, #222	; 0xde
 800be64:	6839      	ldr	r1, [r7, #0]
 800be66:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800be6a:	2300      	movs	r3, #0
 800be6c:	73fb      	strb	r3, [r7, #15]
 800be6e:	e004      	b.n	800be7a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800be70:	2302      	movs	r3, #2
 800be72:	73fb      	strb	r3, [r7, #15]
 800be74:	e001      	b.n	800be7a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800be76:	2302      	movs	r3, #2
 800be78:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800be7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800be7c:	4618      	mov	r0, r3
 800be7e:	3714      	adds	r7, #20
 800be80:	46bd      	mov	sp, r7
 800be82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be86:	4770      	bx	lr

0800be88 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800be88:	b480      	push	{r7}
 800be8a:	b085      	sub	sp, #20
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
 800be90:	460b      	mov	r3, r1
 800be92:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800be94:	2300      	movs	r3, #0
 800be96:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800be9e:	78fa      	ldrb	r2, [r7, #3]
 800bea0:	429a      	cmp	r2, r3
 800bea2:	d204      	bcs.n	800beae <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	78fa      	ldrb	r2, [r7, #3]
 800bea8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800beac:	e001      	b.n	800beb2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800beae:	2302      	movs	r3, #2
 800beb0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800beb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800beb4:	4618      	mov	r0, r3
 800beb6:	3714      	adds	r7, #20
 800beb8:	46bd      	mov	sp, r7
 800beba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bebe:	4770      	bx	lr

0800bec0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800bec0:	b480      	push	{r7}
 800bec2:	b087      	sub	sp, #28
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
 800bec8:	4608      	mov	r0, r1
 800beca:	4611      	mov	r1, r2
 800becc:	461a      	mov	r2, r3
 800bece:	4603      	mov	r3, r0
 800bed0:	70fb      	strb	r3, [r7, #3]
 800bed2:	460b      	mov	r3, r1
 800bed4:	70bb      	strb	r3, [r7, #2]
 800bed6:	4613      	mov	r3, r2
 800bed8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800beda:	2300      	movs	r3, #0
 800bedc:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800bede:	2300      	movs	r3, #0
 800bee0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800bee8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800beea:	e025      	b.n	800bf38 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800beec:	7dfb      	ldrb	r3, [r7, #23]
 800beee:	221a      	movs	r2, #26
 800bef0:	fb02 f303 	mul.w	r3, r2, r3
 800bef4:	3308      	adds	r3, #8
 800bef6:	68fa      	ldr	r2, [r7, #12]
 800bef8:	4413      	add	r3, r2
 800befa:	3302      	adds	r3, #2
 800befc:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800befe:	693b      	ldr	r3, [r7, #16]
 800bf00:	795b      	ldrb	r3, [r3, #5]
 800bf02:	78fa      	ldrb	r2, [r7, #3]
 800bf04:	429a      	cmp	r2, r3
 800bf06:	d002      	beq.n	800bf0e <USBH_FindInterface+0x4e>
 800bf08:	78fb      	ldrb	r3, [r7, #3]
 800bf0a:	2bff      	cmp	r3, #255	; 0xff
 800bf0c:	d111      	bne.n	800bf32 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800bf0e:	693b      	ldr	r3, [r7, #16]
 800bf10:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800bf12:	78ba      	ldrb	r2, [r7, #2]
 800bf14:	429a      	cmp	r2, r3
 800bf16:	d002      	beq.n	800bf1e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800bf18:	78bb      	ldrb	r3, [r7, #2]
 800bf1a:	2bff      	cmp	r3, #255	; 0xff
 800bf1c:	d109      	bne.n	800bf32 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800bf1e:	693b      	ldr	r3, [r7, #16]
 800bf20:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800bf22:	787a      	ldrb	r2, [r7, #1]
 800bf24:	429a      	cmp	r2, r3
 800bf26:	d002      	beq.n	800bf2e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800bf28:	787b      	ldrb	r3, [r7, #1]
 800bf2a:	2bff      	cmp	r3, #255	; 0xff
 800bf2c:	d101      	bne.n	800bf32 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800bf2e:	7dfb      	ldrb	r3, [r7, #23]
 800bf30:	e006      	b.n	800bf40 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800bf32:	7dfb      	ldrb	r3, [r7, #23]
 800bf34:	3301      	adds	r3, #1
 800bf36:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800bf38:	7dfb      	ldrb	r3, [r7, #23]
 800bf3a:	2b01      	cmp	r3, #1
 800bf3c:	d9d6      	bls.n	800beec <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800bf3e:	23ff      	movs	r3, #255	; 0xff
}
 800bf40:	4618      	mov	r0, r3
 800bf42:	371c      	adds	r7, #28
 800bf44:	46bd      	mov	sp, r7
 800bf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4a:	4770      	bx	lr

0800bf4c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b082      	sub	sp, #8
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800bf54:	6878      	ldr	r0, [r7, #4]
 800bf56:	f001 fb89 	bl	800d66c <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800bf5a:	2101      	movs	r1, #1
 800bf5c:	6878      	ldr	r0, [r7, #4]
 800bf5e:	f001 fca0 	bl	800d8a2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800bf62:	2300      	movs	r3, #0
}
 800bf64:	4618      	mov	r0, r3
 800bf66:	3708      	adds	r7, #8
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	bd80      	pop	{r7, pc}

0800bf6c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	b088      	sub	sp, #32
 800bf70:	af04      	add	r7, sp, #16
 800bf72:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800bf74:	2302      	movs	r3, #2
 800bf76:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800bf78:	2300      	movs	r3, #0
 800bf7a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800bf82:	b2db      	uxtb	r3, r3
 800bf84:	2b01      	cmp	r3, #1
 800bf86:	d102      	bne.n	800bf8e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	2203      	movs	r2, #3
 800bf8c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	781b      	ldrb	r3, [r3, #0]
 800bf92:	b2db      	uxtb	r3, r3
 800bf94:	2b0b      	cmp	r3, #11
 800bf96:	f200 81b3 	bhi.w	800c300 <USBH_Process+0x394>
 800bf9a:	a201      	add	r2, pc, #4	; (adr r2, 800bfa0 <USBH_Process+0x34>)
 800bf9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfa0:	0800bfd1 	.word	0x0800bfd1
 800bfa4:	0800c003 	.word	0x0800c003
 800bfa8:	0800c06b 	.word	0x0800c06b
 800bfac:	0800c29b 	.word	0x0800c29b
 800bfb0:	0800c301 	.word	0x0800c301
 800bfb4:	0800c10f 	.word	0x0800c10f
 800bfb8:	0800c241 	.word	0x0800c241
 800bfbc:	0800c145 	.word	0x0800c145
 800bfc0:	0800c165 	.word	0x0800c165
 800bfc4:	0800c185 	.word	0x0800c185
 800bfc8:	0800c1b3 	.word	0x0800c1b3
 800bfcc:	0800c283 	.word	0x0800c283
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800bfd6:	b2db      	uxtb	r3, r3
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	f000 8193 	beq.w	800c304 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	2201      	movs	r2, #1
 800bfe2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800bfe4:	20c8      	movs	r0, #200	; 0xc8
 800bfe6:	f001 fca6 	bl	800d936 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800bfea:	6878      	ldr	r0, [r7, #4]
 800bfec:	f001 fb99 	bl	800d722 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	2200      	movs	r2, #0
 800bff4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	2200      	movs	r2, #0
 800bffc:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800c000:	e180      	b.n	800c304 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800c008:	2b01      	cmp	r3, #1
 800c00a:	d107      	bne.n	800c01c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2200      	movs	r2, #0
 800c010:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	2202      	movs	r2, #2
 800c018:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c01a:	e182      	b.n	800c322 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c022:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c026:	d914      	bls.n	800c052 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800c02e:	3301      	adds	r3, #1
 800c030:	b2da      	uxtb	r2, r3
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800c03e:	2b03      	cmp	r3, #3
 800c040:	d903      	bls.n	800c04a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	220d      	movs	r2, #13
 800c046:	701a      	strb	r2, [r3, #0]
      break;
 800c048:	e16b      	b.n	800c322 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	2200      	movs	r2, #0
 800c04e:	701a      	strb	r2, [r3, #0]
      break;
 800c050:	e167      	b.n	800c322 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c058:	f103 020a 	add.w	r2, r3, #10
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800c062:	200a      	movs	r0, #10
 800c064:	f001 fc67 	bl	800d936 <USBH_Delay>
      break;
 800c068:	e15b      	b.n	800c322 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c070:	2b00      	cmp	r3, #0
 800c072:	d005      	beq.n	800c080 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c07a:	2104      	movs	r1, #4
 800c07c:	6878      	ldr	r0, [r7, #4]
 800c07e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800c080:	2064      	movs	r0, #100	; 0x64
 800c082:	f001 fc58 	bl	800d936 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800c086:	6878      	ldr	r0, [r7, #4]
 800c088:	f001 fb26 	bl	800d6d8 <USBH_LL_GetSpeed>
 800c08c:	4603      	mov	r3, r0
 800c08e:	461a      	mov	r2, r3
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	2205      	movs	r2, #5
 800c09a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800c09c:	2100      	movs	r1, #0
 800c09e:	6878      	ldr	r0, [r7, #4]
 800c0a0:	f001 f931 	bl	800d306 <USBH_AllocPipe>
 800c0a4:	4603      	mov	r3, r0
 800c0a6:	461a      	mov	r2, r3
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800c0ac:	2180      	movs	r1, #128	; 0x80
 800c0ae:	6878      	ldr	r0, [r7, #4]
 800c0b0:	f001 f929 	bl	800d306 <USBH_AllocPipe>
 800c0b4:	4603      	mov	r3, r0
 800c0b6:	461a      	mov	r2, r3
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	7919      	ldrb	r1, [r3, #4]
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800c0cc:	687a      	ldr	r2, [r7, #4]
 800c0ce:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800c0d0:	b292      	uxth	r2, r2
 800c0d2:	9202      	str	r2, [sp, #8]
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	9201      	str	r2, [sp, #4]
 800c0d8:	9300      	str	r3, [sp, #0]
 800c0da:	4603      	mov	r3, r0
 800c0dc:	2280      	movs	r2, #128	; 0x80
 800c0de:	6878      	ldr	r0, [r7, #4]
 800c0e0:	f001 f8e2 	bl	800d2a8 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	7959      	ldrb	r1, [r3, #5]
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800c0f4:	687a      	ldr	r2, [r7, #4]
 800c0f6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800c0f8:	b292      	uxth	r2, r2
 800c0fa:	9202      	str	r2, [sp, #8]
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	9201      	str	r2, [sp, #4]
 800c100:	9300      	str	r3, [sp, #0]
 800c102:	4603      	mov	r3, r0
 800c104:	2200      	movs	r2, #0
 800c106:	6878      	ldr	r0, [r7, #4]
 800c108:	f001 f8ce 	bl	800d2a8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c10c:	e109      	b.n	800c322 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800c10e:	6878      	ldr	r0, [r7, #4]
 800c110:	f000 f90c 	bl	800c32c <USBH_HandleEnum>
 800c114:	4603      	mov	r3, r0
 800c116:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800c118:	7bbb      	ldrb	r3, [r7, #14]
 800c11a:	b2db      	uxtb	r3, r3
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	f040 80f3 	bne.w	800c308 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	2200      	movs	r2, #0
 800c126:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800c130:	2b01      	cmp	r3, #1
 800c132:	d103      	bne.n	800c13c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	2208      	movs	r2, #8
 800c138:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800c13a:	e0e5      	b.n	800c308 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	2207      	movs	r2, #7
 800c140:	701a      	strb	r2, [r3, #0]
      break;
 800c142:	e0e1      	b.n	800c308 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	f000 80de 	beq.w	800c30c <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c156:	2101      	movs	r1, #1
 800c158:	6878      	ldr	r0, [r7, #4]
 800c15a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	2208      	movs	r2, #8
 800c160:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800c162:	e0d3      	b.n	800c30c <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800c16a:	b29b      	uxth	r3, r3
 800c16c:	4619      	mov	r1, r3
 800c16e:	6878      	ldr	r0, [r7, #4]
 800c170:	f000 fc20 	bl	800c9b4 <USBH_SetCfg>
 800c174:	4603      	mov	r3, r0
 800c176:	2b00      	cmp	r3, #0
 800c178:	f040 80ca 	bne.w	800c310 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2209      	movs	r2, #9
 800c180:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c182:	e0c5      	b.n	800c310 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800c18a:	f003 0320 	and.w	r3, r3, #32
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d00b      	beq.n	800c1aa <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800c192:	2101      	movs	r1, #1
 800c194:	6878      	ldr	r0, [r7, #4]
 800c196:	f000 fc30 	bl	800c9fa <USBH_SetFeature>
 800c19a:	4603      	mov	r3, r0
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	f040 80b9 	bne.w	800c314 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	220a      	movs	r2, #10
 800c1a6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c1a8:	e0b4      	b.n	800c314 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	220a      	movs	r2, #10
 800c1ae:	701a      	strb	r2, [r3, #0]
      break;
 800c1b0:	e0b0      	b.n	800c314 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	f000 80ad 	beq.w	800c318 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c1c6:	2300      	movs	r3, #0
 800c1c8:	73fb      	strb	r3, [r7, #15]
 800c1ca:	e016      	b.n	800c1fa <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800c1cc:	7bfa      	ldrb	r2, [r7, #15]
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	32de      	adds	r2, #222	; 0xde
 800c1d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1d6:	791a      	ldrb	r2, [r3, #4]
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800c1de:	429a      	cmp	r2, r3
 800c1e0:	d108      	bne.n	800c1f4 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800c1e2:	7bfa      	ldrb	r2, [r7, #15]
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	32de      	adds	r2, #222	; 0xde
 800c1e8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800c1f2:	e005      	b.n	800c200 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c1f4:	7bfb      	ldrb	r3, [r7, #15]
 800c1f6:	3301      	adds	r3, #1
 800c1f8:	73fb      	strb	r3, [r7, #15]
 800c1fa:	7bfb      	ldrb	r3, [r7, #15]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d0e5      	beq.n	800c1cc <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c206:	2b00      	cmp	r3, #0
 800c208:	d016      	beq.n	800c238 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c210:	689b      	ldr	r3, [r3, #8]
 800c212:	6878      	ldr	r0, [r7, #4]
 800c214:	4798      	blx	r3
 800c216:	4603      	mov	r3, r0
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d109      	bne.n	800c230 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2206      	movs	r2, #6
 800c220:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c228:	2103      	movs	r1, #3
 800c22a:	6878      	ldr	r0, [r7, #4]
 800c22c:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c22e:	e073      	b.n	800c318 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	220d      	movs	r2, #13
 800c234:	701a      	strb	r2, [r3, #0]
      break;
 800c236:	e06f      	b.n	800c318 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	220d      	movs	r2, #13
 800c23c:	701a      	strb	r2, [r3, #0]
      break;
 800c23e:	e06b      	b.n	800c318 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c246:	2b00      	cmp	r3, #0
 800c248:	d017      	beq.n	800c27a <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c250:	691b      	ldr	r3, [r3, #16]
 800c252:	6878      	ldr	r0, [r7, #4]
 800c254:	4798      	blx	r3
 800c256:	4603      	mov	r3, r0
 800c258:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800c25a:	7bbb      	ldrb	r3, [r7, #14]
 800c25c:	b2db      	uxtb	r3, r3
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d103      	bne.n	800c26a <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	220b      	movs	r2, #11
 800c266:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c268:	e058      	b.n	800c31c <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800c26a:	7bbb      	ldrb	r3, [r7, #14]
 800c26c:	b2db      	uxtb	r3, r3
 800c26e:	2b02      	cmp	r3, #2
 800c270:	d154      	bne.n	800c31c <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	220d      	movs	r2, #13
 800c276:	701a      	strb	r2, [r3, #0]
      break;
 800c278:	e050      	b.n	800c31c <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	220d      	movs	r2, #13
 800c27e:	701a      	strb	r2, [r3, #0]
      break;
 800c280:	e04c      	b.n	800c31c <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d049      	beq.n	800c320 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c292:	695b      	ldr	r3, [r3, #20]
 800c294:	6878      	ldr	r0, [r7, #4]
 800c296:	4798      	blx	r3
      }
      break;
 800c298:	e042      	b.n	800c320 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	2200      	movs	r2, #0
 800c29e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800c2a2:	6878      	ldr	r0, [r7, #4]
 800c2a4:	f7ff fd72 	bl	800bd8c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d009      	beq.n	800c2c6 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c2b8:	68db      	ldr	r3, [r3, #12]
 800c2ba:	6878      	ldr	r0, [r7, #4]
 800c2bc:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d005      	beq.n	800c2dc <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c2d6:	2105      	movs	r1, #5
 800c2d8:	6878      	ldr	r0, [r7, #4]
 800c2da:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800c2e2:	b2db      	uxtb	r3, r3
 800c2e4:	2b01      	cmp	r3, #1
 800c2e6:	d107      	bne.n	800c2f8 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800c2f0:	6878      	ldr	r0, [r7, #4]
 800c2f2:	f7ff fe2b 	bl	800bf4c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c2f6:	e014      	b.n	800c322 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800c2f8:	6878      	ldr	r0, [r7, #4]
 800c2fa:	f001 f9b7 	bl	800d66c <USBH_LL_Start>
      break;
 800c2fe:	e010      	b.n	800c322 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800c300:	bf00      	nop
 800c302:	e00e      	b.n	800c322 <USBH_Process+0x3b6>
      break;
 800c304:	bf00      	nop
 800c306:	e00c      	b.n	800c322 <USBH_Process+0x3b6>
      break;
 800c308:	bf00      	nop
 800c30a:	e00a      	b.n	800c322 <USBH_Process+0x3b6>
    break;
 800c30c:	bf00      	nop
 800c30e:	e008      	b.n	800c322 <USBH_Process+0x3b6>
      break;
 800c310:	bf00      	nop
 800c312:	e006      	b.n	800c322 <USBH_Process+0x3b6>
      break;
 800c314:	bf00      	nop
 800c316:	e004      	b.n	800c322 <USBH_Process+0x3b6>
      break;
 800c318:	bf00      	nop
 800c31a:	e002      	b.n	800c322 <USBH_Process+0x3b6>
      break;
 800c31c:	bf00      	nop
 800c31e:	e000      	b.n	800c322 <USBH_Process+0x3b6>
      break;
 800c320:	bf00      	nop
  }
  return USBH_OK;
 800c322:	2300      	movs	r3, #0
}
 800c324:	4618      	mov	r0, r3
 800c326:	3710      	adds	r7, #16
 800c328:	46bd      	mov	sp, r7
 800c32a:	bd80      	pop	{r7, pc}

0800c32c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b088      	sub	sp, #32
 800c330:	af04      	add	r7, sp, #16
 800c332:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800c334:	2301      	movs	r3, #1
 800c336:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800c338:	2301      	movs	r3, #1
 800c33a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	785b      	ldrb	r3, [r3, #1]
 800c340:	2b07      	cmp	r3, #7
 800c342:	f200 81c1 	bhi.w	800c6c8 <USBH_HandleEnum+0x39c>
 800c346:	a201      	add	r2, pc, #4	; (adr r2, 800c34c <USBH_HandleEnum+0x20>)
 800c348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c34c:	0800c36d 	.word	0x0800c36d
 800c350:	0800c42b 	.word	0x0800c42b
 800c354:	0800c495 	.word	0x0800c495
 800c358:	0800c523 	.word	0x0800c523
 800c35c:	0800c58d 	.word	0x0800c58d
 800c360:	0800c5fd 	.word	0x0800c5fd
 800c364:	0800c643 	.word	0x0800c643
 800c368:	0800c689 	.word	0x0800c689
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800c36c:	2108      	movs	r1, #8
 800c36e:	6878      	ldr	r0, [r7, #4]
 800c370:	f000 fa50 	bl	800c814 <USBH_Get_DevDesc>
 800c374:	4603      	mov	r3, r0
 800c376:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c378:	7bbb      	ldrb	r3, [r7, #14]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d130      	bne.n	800c3e0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	2201      	movs	r2, #1
 800c38c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	7919      	ldrb	r1, [r3, #4]
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c39e:	687a      	ldr	r2, [r7, #4]
 800c3a0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c3a2:	b292      	uxth	r2, r2
 800c3a4:	9202      	str	r2, [sp, #8]
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	9201      	str	r2, [sp, #4]
 800c3aa:	9300      	str	r3, [sp, #0]
 800c3ac:	4603      	mov	r3, r0
 800c3ae:	2280      	movs	r2, #128	; 0x80
 800c3b0:	6878      	ldr	r0, [r7, #4]
 800c3b2:	f000 ff79 	bl	800d2a8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	7959      	ldrb	r1, [r3, #5]
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c3c6:	687a      	ldr	r2, [r7, #4]
 800c3c8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c3ca:	b292      	uxth	r2, r2
 800c3cc:	9202      	str	r2, [sp, #8]
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	9201      	str	r2, [sp, #4]
 800c3d2:	9300      	str	r3, [sp, #0]
 800c3d4:	4603      	mov	r3, r0
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	6878      	ldr	r0, [r7, #4]
 800c3da:	f000 ff65 	bl	800d2a8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c3de:	e175      	b.n	800c6cc <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c3e0:	7bbb      	ldrb	r3, [r7, #14]
 800c3e2:	2b03      	cmp	r3, #3
 800c3e4:	f040 8172 	bne.w	800c6cc <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c3ee:	3301      	adds	r3, #1
 800c3f0:	b2da      	uxtb	r2, r3
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c3fe:	2b03      	cmp	r3, #3
 800c400:	d903      	bls.n	800c40a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	220d      	movs	r2, #13
 800c406:	701a      	strb	r2, [r3, #0]
      break;
 800c408:	e160      	b.n	800c6cc <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	795b      	ldrb	r3, [r3, #5]
 800c40e:	4619      	mov	r1, r3
 800c410:	6878      	ldr	r0, [r7, #4]
 800c412:	f000 ff99 	bl	800d348 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	791b      	ldrb	r3, [r3, #4]
 800c41a:	4619      	mov	r1, r3
 800c41c:	6878      	ldr	r0, [r7, #4]
 800c41e:	f000 ff93 	bl	800d348 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	2200      	movs	r2, #0
 800c426:	701a      	strb	r2, [r3, #0]
      break;
 800c428:	e150      	b.n	800c6cc <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800c42a:	2112      	movs	r1, #18
 800c42c:	6878      	ldr	r0, [r7, #4]
 800c42e:	f000 f9f1 	bl	800c814 <USBH_Get_DevDesc>
 800c432:	4603      	mov	r3, r0
 800c434:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c436:	7bbb      	ldrb	r3, [r7, #14]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d103      	bne.n	800c444 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	2202      	movs	r2, #2
 800c440:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c442:	e145      	b.n	800c6d0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c444:	7bbb      	ldrb	r3, [r7, #14]
 800c446:	2b03      	cmp	r3, #3
 800c448:	f040 8142 	bne.w	800c6d0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c452:	3301      	adds	r3, #1
 800c454:	b2da      	uxtb	r2, r3
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c462:	2b03      	cmp	r3, #3
 800c464:	d903      	bls.n	800c46e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	220d      	movs	r2, #13
 800c46a:	701a      	strb	r2, [r3, #0]
      break;
 800c46c:	e130      	b.n	800c6d0 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	795b      	ldrb	r3, [r3, #5]
 800c472:	4619      	mov	r1, r3
 800c474:	6878      	ldr	r0, [r7, #4]
 800c476:	f000 ff67 	bl	800d348 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	791b      	ldrb	r3, [r3, #4]
 800c47e:	4619      	mov	r1, r3
 800c480:	6878      	ldr	r0, [r7, #4]
 800c482:	f000 ff61 	bl	800d348 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	2200      	movs	r2, #0
 800c48a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	2200      	movs	r2, #0
 800c490:	701a      	strb	r2, [r3, #0]
      break;
 800c492:	e11d      	b.n	800c6d0 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800c494:	2101      	movs	r1, #1
 800c496:	6878      	ldr	r0, [r7, #4]
 800c498:	f000 fa68 	bl	800c96c <USBH_SetAddress>
 800c49c:	4603      	mov	r3, r0
 800c49e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c4a0:	7bbb      	ldrb	r3, [r7, #14]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d132      	bne.n	800c50c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800c4a6:	2002      	movs	r0, #2
 800c4a8:	f001 fa45 	bl	800d936 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	2201      	movs	r2, #1
 800c4b0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	2203      	movs	r2, #3
 800c4b8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	7919      	ldrb	r1, [r3, #4]
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c4ca:	687a      	ldr	r2, [r7, #4]
 800c4cc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c4ce:	b292      	uxth	r2, r2
 800c4d0:	9202      	str	r2, [sp, #8]
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	9201      	str	r2, [sp, #4]
 800c4d6:	9300      	str	r3, [sp, #0]
 800c4d8:	4603      	mov	r3, r0
 800c4da:	2280      	movs	r2, #128	; 0x80
 800c4dc:	6878      	ldr	r0, [r7, #4]
 800c4de:	f000 fee3 	bl	800d2a8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	7959      	ldrb	r1, [r3, #5]
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c4f2:	687a      	ldr	r2, [r7, #4]
 800c4f4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c4f6:	b292      	uxth	r2, r2
 800c4f8:	9202      	str	r2, [sp, #8]
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	9201      	str	r2, [sp, #4]
 800c4fe:	9300      	str	r3, [sp, #0]
 800c500:	4603      	mov	r3, r0
 800c502:	2200      	movs	r2, #0
 800c504:	6878      	ldr	r0, [r7, #4]
 800c506:	f000 fecf 	bl	800d2a8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c50a:	e0e3      	b.n	800c6d4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c50c:	7bbb      	ldrb	r3, [r7, #14]
 800c50e:	2b03      	cmp	r3, #3
 800c510:	f040 80e0 	bne.w	800c6d4 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	220d      	movs	r2, #13
 800c518:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	2200      	movs	r2, #0
 800c51e:	705a      	strb	r2, [r3, #1]
      break;
 800c520:	e0d8      	b.n	800c6d4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800c522:	2109      	movs	r1, #9
 800c524:	6878      	ldr	r0, [r7, #4]
 800c526:	f000 f99d 	bl	800c864 <USBH_Get_CfgDesc>
 800c52a:	4603      	mov	r3, r0
 800c52c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c52e:	7bbb      	ldrb	r3, [r7, #14]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d103      	bne.n	800c53c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	2204      	movs	r2, #4
 800c538:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c53a:	e0cd      	b.n	800c6d8 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c53c:	7bbb      	ldrb	r3, [r7, #14]
 800c53e:	2b03      	cmp	r3, #3
 800c540:	f040 80ca 	bne.w	800c6d8 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c54a:	3301      	adds	r3, #1
 800c54c:	b2da      	uxtb	r2, r3
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c55a:	2b03      	cmp	r3, #3
 800c55c:	d903      	bls.n	800c566 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	220d      	movs	r2, #13
 800c562:	701a      	strb	r2, [r3, #0]
      break;
 800c564:	e0b8      	b.n	800c6d8 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	795b      	ldrb	r3, [r3, #5]
 800c56a:	4619      	mov	r1, r3
 800c56c:	6878      	ldr	r0, [r7, #4]
 800c56e:	f000 feeb 	bl	800d348 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	791b      	ldrb	r3, [r3, #4]
 800c576:	4619      	mov	r1, r3
 800c578:	6878      	ldr	r0, [r7, #4]
 800c57a:	f000 fee5 	bl	800d348 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	2200      	movs	r2, #0
 800c582:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	2200      	movs	r2, #0
 800c588:	701a      	strb	r2, [r3, #0]
      break;
 800c58a:	e0a5      	b.n	800c6d8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800c592:	4619      	mov	r1, r3
 800c594:	6878      	ldr	r0, [r7, #4]
 800c596:	f000 f965 	bl	800c864 <USBH_Get_CfgDesc>
 800c59a:	4603      	mov	r3, r0
 800c59c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c59e:	7bbb      	ldrb	r3, [r7, #14]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d103      	bne.n	800c5ac <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	2205      	movs	r2, #5
 800c5a8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c5aa:	e097      	b.n	800c6dc <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c5ac:	7bbb      	ldrb	r3, [r7, #14]
 800c5ae:	2b03      	cmp	r3, #3
 800c5b0:	f040 8094 	bne.w	800c6dc <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c5ba:	3301      	adds	r3, #1
 800c5bc:	b2da      	uxtb	r2, r3
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c5ca:	2b03      	cmp	r3, #3
 800c5cc:	d903      	bls.n	800c5d6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	220d      	movs	r2, #13
 800c5d2:	701a      	strb	r2, [r3, #0]
      break;
 800c5d4:	e082      	b.n	800c6dc <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	795b      	ldrb	r3, [r3, #5]
 800c5da:	4619      	mov	r1, r3
 800c5dc:	6878      	ldr	r0, [r7, #4]
 800c5de:	f000 feb3 	bl	800d348 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	791b      	ldrb	r3, [r3, #4]
 800c5e6:	4619      	mov	r1, r3
 800c5e8:	6878      	ldr	r0, [r7, #4]
 800c5ea:	f000 fead 	bl	800d348 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	2200      	movs	r2, #0
 800c5f2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	701a      	strb	r2, [r3, #0]
      break;
 800c5fa:	e06f      	b.n	800c6dc <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800c602:	2b00      	cmp	r3, #0
 800c604:	d019      	beq.n	800c63a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800c612:	23ff      	movs	r3, #255	; 0xff
 800c614:	6878      	ldr	r0, [r7, #4]
 800c616:	f000 f949 	bl	800c8ac <USBH_Get_StringDesc>
 800c61a:	4603      	mov	r3, r0
 800c61c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c61e:	7bbb      	ldrb	r3, [r7, #14]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d103      	bne.n	800c62c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	2206      	movs	r2, #6
 800c628:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800c62a:	e059      	b.n	800c6e0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c62c:	7bbb      	ldrb	r3, [r7, #14]
 800c62e:	2b03      	cmp	r3, #3
 800c630:	d156      	bne.n	800c6e0 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	2206      	movs	r2, #6
 800c636:	705a      	strb	r2, [r3, #1]
      break;
 800c638:	e052      	b.n	800c6e0 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	2206      	movs	r2, #6
 800c63e:	705a      	strb	r2, [r3, #1]
      break;
 800c640:	e04e      	b.n	800c6e0 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d019      	beq.n	800c680 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800c658:	23ff      	movs	r3, #255	; 0xff
 800c65a:	6878      	ldr	r0, [r7, #4]
 800c65c:	f000 f926 	bl	800c8ac <USBH_Get_StringDesc>
 800c660:	4603      	mov	r3, r0
 800c662:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c664:	7bbb      	ldrb	r3, [r7, #14]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d103      	bne.n	800c672 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	2207      	movs	r2, #7
 800c66e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800c670:	e038      	b.n	800c6e4 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c672:	7bbb      	ldrb	r3, [r7, #14]
 800c674:	2b03      	cmp	r3, #3
 800c676:	d135      	bne.n	800c6e4 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	2207      	movs	r2, #7
 800c67c:	705a      	strb	r2, [r3, #1]
      break;
 800c67e:	e031      	b.n	800c6e4 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	2207      	movs	r2, #7
 800c684:	705a      	strb	r2, [r3, #1]
      break;
 800c686:	e02d      	b.n	800c6e4 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d017      	beq.n	800c6c2 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c69e:	23ff      	movs	r3, #255	; 0xff
 800c6a0:	6878      	ldr	r0, [r7, #4]
 800c6a2:	f000 f903 	bl	800c8ac <USBH_Get_StringDesc>
 800c6a6:	4603      	mov	r3, r0
 800c6a8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c6aa:	7bbb      	ldrb	r3, [r7, #14]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d102      	bne.n	800c6b6 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800c6b4:	e018      	b.n	800c6e8 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c6b6:	7bbb      	ldrb	r3, [r7, #14]
 800c6b8:	2b03      	cmp	r3, #3
 800c6ba:	d115      	bne.n	800c6e8 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800c6bc:	2300      	movs	r3, #0
 800c6be:	73fb      	strb	r3, [r7, #15]
      break;
 800c6c0:	e012      	b.n	800c6e8 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	73fb      	strb	r3, [r7, #15]
      break;
 800c6c6:	e00f      	b.n	800c6e8 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800c6c8:	bf00      	nop
 800c6ca:	e00e      	b.n	800c6ea <USBH_HandleEnum+0x3be>
      break;
 800c6cc:	bf00      	nop
 800c6ce:	e00c      	b.n	800c6ea <USBH_HandleEnum+0x3be>
      break;
 800c6d0:	bf00      	nop
 800c6d2:	e00a      	b.n	800c6ea <USBH_HandleEnum+0x3be>
      break;
 800c6d4:	bf00      	nop
 800c6d6:	e008      	b.n	800c6ea <USBH_HandleEnum+0x3be>
      break;
 800c6d8:	bf00      	nop
 800c6da:	e006      	b.n	800c6ea <USBH_HandleEnum+0x3be>
      break;
 800c6dc:	bf00      	nop
 800c6de:	e004      	b.n	800c6ea <USBH_HandleEnum+0x3be>
      break;
 800c6e0:	bf00      	nop
 800c6e2:	e002      	b.n	800c6ea <USBH_HandleEnum+0x3be>
      break;
 800c6e4:	bf00      	nop
 800c6e6:	e000      	b.n	800c6ea <USBH_HandleEnum+0x3be>
      break;
 800c6e8:	bf00      	nop
  }
  return Status;
 800c6ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	3710      	adds	r7, #16
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	bd80      	pop	{r7, pc}

0800c6f4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800c6f4:	b480      	push	{r7}
 800c6f6:	b083      	sub	sp, #12
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
 800c6fc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	683a      	ldr	r2, [r7, #0]
 800c702:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800c706:	bf00      	nop
 800c708:	370c      	adds	r7, #12
 800c70a:	46bd      	mov	sp, r7
 800c70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c710:	4770      	bx	lr

0800c712 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800c712:	b580      	push	{r7, lr}
 800c714:	b082      	sub	sp, #8
 800c716:	af00      	add	r7, sp, #0
 800c718:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c720:	1c5a      	adds	r2, r3, #1
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800c728:	6878      	ldr	r0, [r7, #4]
 800c72a:	f000 f804 	bl	800c736 <USBH_HandleSof>
}
 800c72e:	bf00      	nop
 800c730:	3708      	adds	r7, #8
 800c732:	46bd      	mov	sp, r7
 800c734:	bd80      	pop	{r7, pc}

0800c736 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800c736:	b580      	push	{r7, lr}
 800c738:	b082      	sub	sp, #8
 800c73a:	af00      	add	r7, sp, #0
 800c73c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	781b      	ldrb	r3, [r3, #0]
 800c742:	b2db      	uxtb	r3, r3
 800c744:	2b0b      	cmp	r3, #11
 800c746:	d10a      	bne.n	800c75e <USBH_HandleSof+0x28>
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d005      	beq.n	800c75e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c758:	699b      	ldr	r3, [r3, #24]
 800c75a:	6878      	ldr	r0, [r7, #4]
 800c75c:	4798      	blx	r3
  }
}
 800c75e:	bf00      	nop
 800c760:	3708      	adds	r7, #8
 800c762:	46bd      	mov	sp, r7
 800c764:	bd80      	pop	{r7, pc}

0800c766 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800c766:	b480      	push	{r7}
 800c768:	b083      	sub	sp, #12
 800c76a:	af00      	add	r7, sp, #0
 800c76c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	2201      	movs	r2, #1
 800c772:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800c776:	bf00      	nop
}
 800c778:	370c      	adds	r7, #12
 800c77a:	46bd      	mov	sp, r7
 800c77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c780:	4770      	bx	lr

0800c782 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800c782:	b480      	push	{r7}
 800c784:	b083      	sub	sp, #12
 800c786:	af00      	add	r7, sp, #0
 800c788:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	2200      	movs	r2, #0
 800c78e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800c792:	bf00      	nop
}
 800c794:	370c      	adds	r7, #12
 800c796:	46bd      	mov	sp, r7
 800c798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79c:	4770      	bx	lr

0800c79e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800c79e:	b480      	push	{r7}
 800c7a0:	b083      	sub	sp, #12
 800c7a2:	af00      	add	r7, sp, #0
 800c7a4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	2201      	movs	r2, #1
 800c7aa:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800c7be:	2300      	movs	r3, #0
}
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	370c      	adds	r7, #12
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ca:	4770      	bx	lr

0800c7cc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b082      	sub	sp, #8
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	2201      	movs	r2, #1
 800c7d8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	2200      	movs	r2, #0
 800c7e0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800c7ec:	6878      	ldr	r0, [r7, #4]
 800c7ee:	f000 ff58 	bl	800d6a2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	791b      	ldrb	r3, [r3, #4]
 800c7f6:	4619      	mov	r1, r3
 800c7f8:	6878      	ldr	r0, [r7, #4]
 800c7fa:	f000 fda5 	bl	800d348 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	795b      	ldrb	r3, [r3, #5]
 800c802:	4619      	mov	r1, r3
 800c804:	6878      	ldr	r0, [r7, #4]
 800c806:	f000 fd9f 	bl	800d348 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800c80a:	2300      	movs	r3, #0
}
 800c80c:	4618      	mov	r0, r3
 800c80e:	3708      	adds	r7, #8
 800c810:	46bd      	mov	sp, r7
 800c812:	bd80      	pop	{r7, pc}

0800c814 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800c814:	b580      	push	{r7, lr}
 800c816:	b086      	sub	sp, #24
 800c818:	af02      	add	r7, sp, #8
 800c81a:	6078      	str	r0, [r7, #4]
 800c81c:	460b      	mov	r3, r1
 800c81e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800c826:	78fb      	ldrb	r3, [r7, #3]
 800c828:	b29b      	uxth	r3, r3
 800c82a:	9300      	str	r3, [sp, #0]
 800c82c:	4613      	mov	r3, r2
 800c82e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c832:	2100      	movs	r1, #0
 800c834:	6878      	ldr	r0, [r7, #4]
 800c836:	f000 f864 	bl	800c902 <USBH_GetDescriptor>
 800c83a:	4603      	mov	r3, r0
 800c83c:	73fb      	strb	r3, [r7, #15]
 800c83e:	7bfb      	ldrb	r3, [r7, #15]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d10a      	bne.n	800c85a <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	f203 3026 	addw	r0, r3, #806	; 0x326
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c850:	78fa      	ldrb	r2, [r7, #3]
 800c852:	b292      	uxth	r2, r2
 800c854:	4619      	mov	r1, r3
 800c856:	f000 f918 	bl	800ca8a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800c85a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c85c:	4618      	mov	r0, r3
 800c85e:	3710      	adds	r7, #16
 800c860:	46bd      	mov	sp, r7
 800c862:	bd80      	pop	{r7, pc}

0800c864 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800c864:	b580      	push	{r7, lr}
 800c866:	b086      	sub	sp, #24
 800c868:	af02      	add	r7, sp, #8
 800c86a:	6078      	str	r0, [r7, #4]
 800c86c:	460b      	mov	r3, r1
 800c86e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	331c      	adds	r3, #28
 800c874:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800c876:	887b      	ldrh	r3, [r7, #2]
 800c878:	9300      	str	r3, [sp, #0]
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c880:	2100      	movs	r1, #0
 800c882:	6878      	ldr	r0, [r7, #4]
 800c884:	f000 f83d 	bl	800c902 <USBH_GetDescriptor>
 800c888:	4603      	mov	r3, r0
 800c88a:	72fb      	strb	r3, [r7, #11]
 800c88c:	7afb      	ldrb	r3, [r7, #11]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d107      	bne.n	800c8a2 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800c898:	887a      	ldrh	r2, [r7, #2]
 800c89a:	68f9      	ldr	r1, [r7, #12]
 800c89c:	4618      	mov	r0, r3
 800c89e:	f000 f964 	bl	800cb6a <USBH_ParseCfgDesc>
  }

  return status;
 800c8a2:	7afb      	ldrb	r3, [r7, #11]
}
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	3710      	adds	r7, #16
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	bd80      	pop	{r7, pc}

0800c8ac <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b088      	sub	sp, #32
 800c8b0:	af02      	add	r7, sp, #8
 800c8b2:	60f8      	str	r0, [r7, #12]
 800c8b4:	607a      	str	r2, [r7, #4]
 800c8b6:	461a      	mov	r2, r3
 800c8b8:	460b      	mov	r3, r1
 800c8ba:	72fb      	strb	r3, [r7, #11]
 800c8bc:	4613      	mov	r3, r2
 800c8be:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800c8c0:	7afb      	ldrb	r3, [r7, #11]
 800c8c2:	b29b      	uxth	r3, r3
 800c8c4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800c8c8:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800c8d0:	893b      	ldrh	r3, [r7, #8]
 800c8d2:	9300      	str	r3, [sp, #0]
 800c8d4:	460b      	mov	r3, r1
 800c8d6:	2100      	movs	r1, #0
 800c8d8:	68f8      	ldr	r0, [r7, #12]
 800c8da:	f000 f812 	bl	800c902 <USBH_GetDescriptor>
 800c8de:	4603      	mov	r3, r0
 800c8e0:	75fb      	strb	r3, [r7, #23]
 800c8e2:	7dfb      	ldrb	r3, [r7, #23]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d107      	bne.n	800c8f8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c8ee:	893a      	ldrh	r2, [r7, #8]
 800c8f0:	6879      	ldr	r1, [r7, #4]
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	f000 fa37 	bl	800cd66 <USBH_ParseStringDesc>
  }

  return status;
 800c8f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	3718      	adds	r7, #24
 800c8fe:	46bd      	mov	sp, r7
 800c900:	bd80      	pop	{r7, pc}

0800c902 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800c902:	b580      	push	{r7, lr}
 800c904:	b084      	sub	sp, #16
 800c906:	af00      	add	r7, sp, #0
 800c908:	60f8      	str	r0, [r7, #12]
 800c90a:	607b      	str	r3, [r7, #4]
 800c90c:	460b      	mov	r3, r1
 800c90e:	72fb      	strb	r3, [r7, #11]
 800c910:	4613      	mov	r3, r2
 800c912:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	789b      	ldrb	r3, [r3, #2]
 800c918:	2b01      	cmp	r3, #1
 800c91a:	d11c      	bne.n	800c956 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800c91c:	7afb      	ldrb	r3, [r7, #11]
 800c91e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c922:	b2da      	uxtb	r2, r3
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	2206      	movs	r2, #6
 800c92c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	893a      	ldrh	r2, [r7, #8]
 800c932:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800c934:	893b      	ldrh	r3, [r7, #8]
 800c936:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c93a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c93e:	d104      	bne.n	800c94a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	f240 4209 	movw	r2, #1033	; 0x409
 800c946:	829a      	strh	r2, [r3, #20]
 800c948:	e002      	b.n	800c950 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	2200      	movs	r2, #0
 800c94e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	8b3a      	ldrh	r2, [r7, #24]
 800c954:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800c956:	8b3b      	ldrh	r3, [r7, #24]
 800c958:	461a      	mov	r2, r3
 800c95a:	6879      	ldr	r1, [r7, #4]
 800c95c:	68f8      	ldr	r0, [r7, #12]
 800c95e:	f000 fa50 	bl	800ce02 <USBH_CtlReq>
 800c962:	4603      	mov	r3, r0
}
 800c964:	4618      	mov	r0, r3
 800c966:	3710      	adds	r7, #16
 800c968:	46bd      	mov	sp, r7
 800c96a:	bd80      	pop	{r7, pc}

0800c96c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b082      	sub	sp, #8
 800c970:	af00      	add	r7, sp, #0
 800c972:	6078      	str	r0, [r7, #4]
 800c974:	460b      	mov	r3, r1
 800c976:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	789b      	ldrb	r3, [r3, #2]
 800c97c:	2b01      	cmp	r3, #1
 800c97e:	d10f      	bne.n	800c9a0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	2200      	movs	r2, #0
 800c984:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	2205      	movs	r2, #5
 800c98a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800c98c:	78fb      	ldrb	r3, [r7, #3]
 800c98e:	b29a      	uxth	r2, r3
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	2200      	movs	r2, #0
 800c998:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	2200      	movs	r2, #0
 800c99e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800c9a0:	2200      	movs	r2, #0
 800c9a2:	2100      	movs	r1, #0
 800c9a4:	6878      	ldr	r0, [r7, #4]
 800c9a6:	f000 fa2c 	bl	800ce02 <USBH_CtlReq>
 800c9aa:	4603      	mov	r3, r0
}
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	3708      	adds	r7, #8
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	bd80      	pop	{r7, pc}

0800c9b4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b082      	sub	sp, #8
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]
 800c9bc:	460b      	mov	r3, r1
 800c9be:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	789b      	ldrb	r3, [r3, #2]
 800c9c4:	2b01      	cmp	r3, #1
 800c9c6:	d10e      	bne.n	800c9e6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	2200      	movs	r2, #0
 800c9cc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	2209      	movs	r2, #9
 800c9d2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	887a      	ldrh	r2, [r7, #2]
 800c9d8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	2200      	movs	r2, #0
 800c9de:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	2200      	movs	r2, #0
 800c9e4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	2100      	movs	r1, #0
 800c9ea:	6878      	ldr	r0, [r7, #4]
 800c9ec:	f000 fa09 	bl	800ce02 <USBH_CtlReq>
 800c9f0:	4603      	mov	r3, r0
}
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	3708      	adds	r7, #8
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	bd80      	pop	{r7, pc}

0800c9fa <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800c9fa:	b580      	push	{r7, lr}
 800c9fc:	b082      	sub	sp, #8
 800c9fe:	af00      	add	r7, sp, #0
 800ca00:	6078      	str	r0, [r7, #4]
 800ca02:	460b      	mov	r3, r1
 800ca04:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	789b      	ldrb	r3, [r3, #2]
 800ca0a:	2b01      	cmp	r3, #1
 800ca0c:	d10f      	bne.n	800ca2e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	2200      	movs	r2, #0
 800ca12:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	2203      	movs	r2, #3
 800ca18:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800ca1a:	78fb      	ldrb	r3, [r7, #3]
 800ca1c:	b29a      	uxth	r2, r3
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	2200      	movs	r2, #0
 800ca26:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800ca2e:	2200      	movs	r2, #0
 800ca30:	2100      	movs	r1, #0
 800ca32:	6878      	ldr	r0, [r7, #4]
 800ca34:	f000 f9e5 	bl	800ce02 <USBH_CtlReq>
 800ca38:	4603      	mov	r3, r0
}
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	3708      	adds	r7, #8
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	bd80      	pop	{r7, pc}

0800ca42 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800ca42:	b580      	push	{r7, lr}
 800ca44:	b082      	sub	sp, #8
 800ca46:	af00      	add	r7, sp, #0
 800ca48:	6078      	str	r0, [r7, #4]
 800ca4a:	460b      	mov	r3, r1
 800ca4c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	789b      	ldrb	r3, [r3, #2]
 800ca52:	2b01      	cmp	r3, #1
 800ca54:	d10f      	bne.n	800ca76 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	2202      	movs	r2, #2
 800ca5a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	2201      	movs	r2, #1
 800ca60:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	2200      	movs	r2, #0
 800ca66:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800ca68:	78fb      	ldrb	r3, [r7, #3]
 800ca6a:	b29a      	uxth	r2, r3
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	2200      	movs	r2, #0
 800ca74:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800ca76:	2200      	movs	r2, #0
 800ca78:	2100      	movs	r1, #0
 800ca7a:	6878      	ldr	r0, [r7, #4]
 800ca7c:	f000 f9c1 	bl	800ce02 <USBH_CtlReq>
 800ca80:	4603      	mov	r3, r0
}
 800ca82:	4618      	mov	r0, r3
 800ca84:	3708      	adds	r7, #8
 800ca86:	46bd      	mov	sp, r7
 800ca88:	bd80      	pop	{r7, pc}

0800ca8a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800ca8a:	b480      	push	{r7}
 800ca8c:	b085      	sub	sp, #20
 800ca8e:	af00      	add	r7, sp, #0
 800ca90:	60f8      	str	r0, [r7, #12]
 800ca92:	60b9      	str	r1, [r7, #8]
 800ca94:	4613      	mov	r3, r2
 800ca96:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800ca98:	68bb      	ldr	r3, [r7, #8]
 800ca9a:	781a      	ldrb	r2, [r3, #0]
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800caa0:	68bb      	ldr	r3, [r7, #8]
 800caa2:	785a      	ldrb	r2, [r3, #1]
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800caa8:	68bb      	ldr	r3, [r7, #8]
 800caaa:	3302      	adds	r3, #2
 800caac:	781b      	ldrb	r3, [r3, #0]
 800caae:	b29a      	uxth	r2, r3
 800cab0:	68bb      	ldr	r3, [r7, #8]
 800cab2:	3303      	adds	r3, #3
 800cab4:	781b      	ldrb	r3, [r3, #0]
 800cab6:	b29b      	uxth	r3, r3
 800cab8:	021b      	lsls	r3, r3, #8
 800caba:	b29b      	uxth	r3, r3
 800cabc:	4313      	orrs	r3, r2
 800cabe:	b29a      	uxth	r2, r3
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800cac4:	68bb      	ldr	r3, [r7, #8]
 800cac6:	791a      	ldrb	r2, [r3, #4]
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800cacc:	68bb      	ldr	r3, [r7, #8]
 800cace:	795a      	ldrb	r2, [r3, #5]
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800cad4:	68bb      	ldr	r3, [r7, #8]
 800cad6:	799a      	ldrb	r2, [r3, #6]
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800cadc:	68bb      	ldr	r3, [r7, #8]
 800cade:	79da      	ldrb	r2, [r3, #7]
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800cae4:	88fb      	ldrh	r3, [r7, #6]
 800cae6:	2b08      	cmp	r3, #8
 800cae8:	d939      	bls.n	800cb5e <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800caea:	68bb      	ldr	r3, [r7, #8]
 800caec:	3308      	adds	r3, #8
 800caee:	781b      	ldrb	r3, [r3, #0]
 800caf0:	b29a      	uxth	r2, r3
 800caf2:	68bb      	ldr	r3, [r7, #8]
 800caf4:	3309      	adds	r3, #9
 800caf6:	781b      	ldrb	r3, [r3, #0]
 800caf8:	b29b      	uxth	r3, r3
 800cafa:	021b      	lsls	r3, r3, #8
 800cafc:	b29b      	uxth	r3, r3
 800cafe:	4313      	orrs	r3, r2
 800cb00:	b29a      	uxth	r2, r3
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800cb06:	68bb      	ldr	r3, [r7, #8]
 800cb08:	330a      	adds	r3, #10
 800cb0a:	781b      	ldrb	r3, [r3, #0]
 800cb0c:	b29a      	uxth	r2, r3
 800cb0e:	68bb      	ldr	r3, [r7, #8]
 800cb10:	330b      	adds	r3, #11
 800cb12:	781b      	ldrb	r3, [r3, #0]
 800cb14:	b29b      	uxth	r3, r3
 800cb16:	021b      	lsls	r3, r3, #8
 800cb18:	b29b      	uxth	r3, r3
 800cb1a:	4313      	orrs	r3, r2
 800cb1c:	b29a      	uxth	r2, r3
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800cb22:	68bb      	ldr	r3, [r7, #8]
 800cb24:	330c      	adds	r3, #12
 800cb26:	781b      	ldrb	r3, [r3, #0]
 800cb28:	b29a      	uxth	r2, r3
 800cb2a:	68bb      	ldr	r3, [r7, #8]
 800cb2c:	330d      	adds	r3, #13
 800cb2e:	781b      	ldrb	r3, [r3, #0]
 800cb30:	b29b      	uxth	r3, r3
 800cb32:	021b      	lsls	r3, r3, #8
 800cb34:	b29b      	uxth	r3, r3
 800cb36:	4313      	orrs	r3, r2
 800cb38:	b29a      	uxth	r2, r3
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800cb3e:	68bb      	ldr	r3, [r7, #8]
 800cb40:	7b9a      	ldrb	r2, [r3, #14]
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800cb46:	68bb      	ldr	r3, [r7, #8]
 800cb48:	7bda      	ldrb	r2, [r3, #15]
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800cb4e:	68bb      	ldr	r3, [r7, #8]
 800cb50:	7c1a      	ldrb	r2, [r3, #16]
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800cb56:	68bb      	ldr	r3, [r7, #8]
 800cb58:	7c5a      	ldrb	r2, [r3, #17]
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	745a      	strb	r2, [r3, #17]
  }
}
 800cb5e:	bf00      	nop
 800cb60:	3714      	adds	r7, #20
 800cb62:	46bd      	mov	sp, r7
 800cb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb68:	4770      	bx	lr

0800cb6a <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800cb6a:	b580      	push	{r7, lr}
 800cb6c:	b08a      	sub	sp, #40	; 0x28
 800cb6e:	af00      	add	r7, sp, #0
 800cb70:	60f8      	str	r0, [r7, #12]
 800cb72:	60b9      	str	r1, [r7, #8]
 800cb74:	4613      	mov	r3, r2
 800cb76:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800cb78:	68bb      	ldr	r3, [r7, #8]
 800cb7a:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800cb82:	2300      	movs	r3, #0
 800cb84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800cb88:	68bb      	ldr	r3, [r7, #8]
 800cb8a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800cb8c:	68bb      	ldr	r3, [r7, #8]
 800cb8e:	781a      	ldrb	r2, [r3, #0]
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800cb94:	68bb      	ldr	r3, [r7, #8]
 800cb96:	785a      	ldrb	r2, [r3, #1]
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800cb9c:	68bb      	ldr	r3, [r7, #8]
 800cb9e:	3302      	adds	r3, #2
 800cba0:	781b      	ldrb	r3, [r3, #0]
 800cba2:	b29a      	uxth	r2, r3
 800cba4:	68bb      	ldr	r3, [r7, #8]
 800cba6:	3303      	adds	r3, #3
 800cba8:	781b      	ldrb	r3, [r3, #0]
 800cbaa:	b29b      	uxth	r3, r3
 800cbac:	021b      	lsls	r3, r3, #8
 800cbae:	b29b      	uxth	r3, r3
 800cbb0:	4313      	orrs	r3, r2
 800cbb2:	b29a      	uxth	r2, r3
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800cbb8:	68bb      	ldr	r3, [r7, #8]
 800cbba:	791a      	ldrb	r2, [r3, #4]
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800cbc0:	68bb      	ldr	r3, [r7, #8]
 800cbc2:	795a      	ldrb	r2, [r3, #5]
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800cbc8:	68bb      	ldr	r3, [r7, #8]
 800cbca:	799a      	ldrb	r2, [r3, #6]
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800cbd0:	68bb      	ldr	r3, [r7, #8]
 800cbd2:	79da      	ldrb	r2, [r3, #7]
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800cbd8:	68bb      	ldr	r3, [r7, #8]
 800cbda:	7a1a      	ldrb	r2, [r3, #8]
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800cbe0:	88fb      	ldrh	r3, [r7, #6]
 800cbe2:	2b09      	cmp	r3, #9
 800cbe4:	d95f      	bls.n	800cca6 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800cbe6:	2309      	movs	r3, #9
 800cbe8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800cbea:	2300      	movs	r3, #0
 800cbec:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800cbee:	e051      	b.n	800cc94 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800cbf0:	f107 0316 	add.w	r3, r7, #22
 800cbf4:	4619      	mov	r1, r3
 800cbf6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cbf8:	f000 f8e8 	bl	800cdcc <USBH_GetNextDesc>
 800cbfc:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800cbfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc00:	785b      	ldrb	r3, [r3, #1]
 800cc02:	2b04      	cmp	r3, #4
 800cc04:	d146      	bne.n	800cc94 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800cc06:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cc0a:	221a      	movs	r2, #26
 800cc0c:	fb02 f303 	mul.w	r3, r2, r3
 800cc10:	3308      	adds	r3, #8
 800cc12:	68fa      	ldr	r2, [r7, #12]
 800cc14:	4413      	add	r3, r2
 800cc16:	3302      	adds	r3, #2
 800cc18:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800cc1a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cc1c:	69f8      	ldr	r0, [r7, #28]
 800cc1e:	f000 f846 	bl	800ccae <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800cc22:	2300      	movs	r3, #0
 800cc24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800cc28:	2300      	movs	r3, #0
 800cc2a:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800cc2c:	e022      	b.n	800cc74 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800cc2e:	f107 0316 	add.w	r3, r7, #22
 800cc32:	4619      	mov	r1, r3
 800cc34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cc36:	f000 f8c9 	bl	800cdcc <USBH_GetNextDesc>
 800cc3a:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800cc3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc3e:	785b      	ldrb	r3, [r3, #1]
 800cc40:	2b05      	cmp	r3, #5
 800cc42:	d117      	bne.n	800cc74 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800cc44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cc48:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800cc4c:	3201      	adds	r2, #1
 800cc4e:	00d2      	lsls	r2, r2, #3
 800cc50:	211a      	movs	r1, #26
 800cc52:	fb01 f303 	mul.w	r3, r1, r3
 800cc56:	4413      	add	r3, r2
 800cc58:	3308      	adds	r3, #8
 800cc5a:	68fa      	ldr	r2, [r7, #12]
 800cc5c:	4413      	add	r3, r2
 800cc5e:	3304      	adds	r3, #4
 800cc60:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800cc62:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cc64:	69b8      	ldr	r0, [r7, #24]
 800cc66:	f000 f851 	bl	800cd0c <USBH_ParseEPDesc>
            ep_ix++;
 800cc6a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800cc6e:	3301      	adds	r3, #1
 800cc70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800cc74:	69fb      	ldr	r3, [r7, #28]
 800cc76:	791b      	ldrb	r3, [r3, #4]
 800cc78:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800cc7c:	429a      	cmp	r2, r3
 800cc7e:	d204      	bcs.n	800cc8a <USBH_ParseCfgDesc+0x120>
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	885a      	ldrh	r2, [r3, #2]
 800cc84:	8afb      	ldrh	r3, [r7, #22]
 800cc86:	429a      	cmp	r2, r3
 800cc88:	d8d1      	bhi.n	800cc2e <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800cc8a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cc8e:	3301      	adds	r3, #1
 800cc90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800cc94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cc98:	2b01      	cmp	r3, #1
 800cc9a:	d804      	bhi.n	800cca6 <USBH_ParseCfgDesc+0x13c>
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	885a      	ldrh	r2, [r3, #2]
 800cca0:	8afb      	ldrh	r3, [r7, #22]
 800cca2:	429a      	cmp	r2, r3
 800cca4:	d8a4      	bhi.n	800cbf0 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800cca6:	bf00      	nop
 800cca8:	3728      	adds	r7, #40	; 0x28
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	bd80      	pop	{r7, pc}

0800ccae <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800ccae:	b480      	push	{r7}
 800ccb0:	b083      	sub	sp, #12
 800ccb2:	af00      	add	r7, sp, #0
 800ccb4:	6078      	str	r0, [r7, #4]
 800ccb6:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800ccb8:	683b      	ldr	r3, [r7, #0]
 800ccba:	781a      	ldrb	r2, [r3, #0]
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800ccc0:	683b      	ldr	r3, [r7, #0]
 800ccc2:	785a      	ldrb	r2, [r3, #1]
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	789a      	ldrb	r2, [r3, #2]
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800ccd0:	683b      	ldr	r3, [r7, #0]
 800ccd2:	78da      	ldrb	r2, [r3, #3]
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800ccd8:	683b      	ldr	r3, [r7, #0]
 800ccda:	791a      	ldrb	r2, [r3, #4]
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800cce0:	683b      	ldr	r3, [r7, #0]
 800cce2:	795a      	ldrb	r2, [r3, #5]
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800cce8:	683b      	ldr	r3, [r7, #0]
 800ccea:	799a      	ldrb	r2, [r3, #6]
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800ccf0:	683b      	ldr	r3, [r7, #0]
 800ccf2:	79da      	ldrb	r2, [r3, #7]
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800ccf8:	683b      	ldr	r3, [r7, #0]
 800ccfa:	7a1a      	ldrb	r2, [r3, #8]
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	721a      	strb	r2, [r3, #8]
}
 800cd00:	bf00      	nop
 800cd02:	370c      	adds	r7, #12
 800cd04:	46bd      	mov	sp, r7
 800cd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0a:	4770      	bx	lr

0800cd0c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800cd0c:	b480      	push	{r7}
 800cd0e:	b083      	sub	sp, #12
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	6078      	str	r0, [r7, #4]
 800cd14:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800cd16:	683b      	ldr	r3, [r7, #0]
 800cd18:	781a      	ldrb	r2, [r3, #0]
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800cd1e:	683b      	ldr	r3, [r7, #0]
 800cd20:	785a      	ldrb	r2, [r3, #1]
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800cd26:	683b      	ldr	r3, [r7, #0]
 800cd28:	789a      	ldrb	r2, [r3, #2]
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800cd2e:	683b      	ldr	r3, [r7, #0]
 800cd30:	78da      	ldrb	r2, [r3, #3]
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800cd36:	683b      	ldr	r3, [r7, #0]
 800cd38:	3304      	adds	r3, #4
 800cd3a:	781b      	ldrb	r3, [r3, #0]
 800cd3c:	b29a      	uxth	r2, r3
 800cd3e:	683b      	ldr	r3, [r7, #0]
 800cd40:	3305      	adds	r3, #5
 800cd42:	781b      	ldrb	r3, [r3, #0]
 800cd44:	b29b      	uxth	r3, r3
 800cd46:	021b      	lsls	r3, r3, #8
 800cd48:	b29b      	uxth	r3, r3
 800cd4a:	4313      	orrs	r3, r2
 800cd4c:	b29a      	uxth	r2, r3
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800cd52:	683b      	ldr	r3, [r7, #0]
 800cd54:	799a      	ldrb	r2, [r3, #6]
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	719a      	strb	r2, [r3, #6]
}
 800cd5a:	bf00      	nop
 800cd5c:	370c      	adds	r7, #12
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd64:	4770      	bx	lr

0800cd66 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800cd66:	b480      	push	{r7}
 800cd68:	b087      	sub	sp, #28
 800cd6a:	af00      	add	r7, sp, #0
 800cd6c:	60f8      	str	r0, [r7, #12]
 800cd6e:	60b9      	str	r1, [r7, #8]
 800cd70:	4613      	mov	r3, r2
 800cd72:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	3301      	adds	r3, #1
 800cd78:	781b      	ldrb	r3, [r3, #0]
 800cd7a:	2b03      	cmp	r3, #3
 800cd7c:	d120      	bne.n	800cdc0 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	781b      	ldrb	r3, [r3, #0]
 800cd82:	1e9a      	subs	r2, r3, #2
 800cd84:	88fb      	ldrh	r3, [r7, #6]
 800cd86:	4293      	cmp	r3, r2
 800cd88:	bf28      	it	cs
 800cd8a:	4613      	movcs	r3, r2
 800cd8c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	3302      	adds	r3, #2
 800cd92:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800cd94:	2300      	movs	r3, #0
 800cd96:	82fb      	strh	r3, [r7, #22]
 800cd98:	e00b      	b.n	800cdb2 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800cd9a:	8afb      	ldrh	r3, [r7, #22]
 800cd9c:	68fa      	ldr	r2, [r7, #12]
 800cd9e:	4413      	add	r3, r2
 800cda0:	781a      	ldrb	r2, [r3, #0]
 800cda2:	68bb      	ldr	r3, [r7, #8]
 800cda4:	701a      	strb	r2, [r3, #0]
      pdest++;
 800cda6:	68bb      	ldr	r3, [r7, #8]
 800cda8:	3301      	adds	r3, #1
 800cdaa:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800cdac:	8afb      	ldrh	r3, [r7, #22]
 800cdae:	3302      	adds	r3, #2
 800cdb0:	82fb      	strh	r3, [r7, #22]
 800cdb2:	8afa      	ldrh	r2, [r7, #22]
 800cdb4:	8abb      	ldrh	r3, [r7, #20]
 800cdb6:	429a      	cmp	r2, r3
 800cdb8:	d3ef      	bcc.n	800cd9a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800cdba:	68bb      	ldr	r3, [r7, #8]
 800cdbc:	2200      	movs	r2, #0
 800cdbe:	701a      	strb	r2, [r3, #0]
  }
}
 800cdc0:	bf00      	nop
 800cdc2:	371c      	adds	r7, #28
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdca:	4770      	bx	lr

0800cdcc <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800cdcc:	b480      	push	{r7}
 800cdce:	b085      	sub	sp, #20
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	6078      	str	r0, [r7, #4]
 800cdd4:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800cdd6:	683b      	ldr	r3, [r7, #0]
 800cdd8:	881a      	ldrh	r2, [r3, #0]
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	781b      	ldrb	r3, [r3, #0]
 800cdde:	b29b      	uxth	r3, r3
 800cde0:	4413      	add	r3, r2
 800cde2:	b29a      	uxth	r2, r3
 800cde4:	683b      	ldr	r3, [r7, #0]
 800cde6:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	781b      	ldrb	r3, [r3, #0]
 800cdec:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	4413      	add	r3, r2
 800cdf2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800cdf4:	68fb      	ldr	r3, [r7, #12]
}
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	3714      	adds	r7, #20
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce00:	4770      	bx	lr

0800ce02 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800ce02:	b580      	push	{r7, lr}
 800ce04:	b086      	sub	sp, #24
 800ce06:	af00      	add	r7, sp, #0
 800ce08:	60f8      	str	r0, [r7, #12]
 800ce0a:	60b9      	str	r1, [r7, #8]
 800ce0c:	4613      	mov	r3, r2
 800ce0e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800ce10:	2301      	movs	r3, #1
 800ce12:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	789b      	ldrb	r3, [r3, #2]
 800ce18:	2b01      	cmp	r3, #1
 800ce1a:	d002      	beq.n	800ce22 <USBH_CtlReq+0x20>
 800ce1c:	2b02      	cmp	r3, #2
 800ce1e:	d00f      	beq.n	800ce40 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800ce20:	e027      	b.n	800ce72 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	68ba      	ldr	r2, [r7, #8]
 800ce26:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	88fa      	ldrh	r2, [r7, #6]
 800ce2c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	2201      	movs	r2, #1
 800ce32:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	2202      	movs	r2, #2
 800ce38:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800ce3a:	2301      	movs	r3, #1
 800ce3c:	75fb      	strb	r3, [r7, #23]
      break;
 800ce3e:	e018      	b.n	800ce72 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800ce40:	68f8      	ldr	r0, [r7, #12]
 800ce42:	f000 f81b 	bl	800ce7c <USBH_HandleControl>
 800ce46:	4603      	mov	r3, r0
 800ce48:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800ce4a:	7dfb      	ldrb	r3, [r7, #23]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d002      	beq.n	800ce56 <USBH_CtlReq+0x54>
 800ce50:	7dfb      	ldrb	r3, [r7, #23]
 800ce52:	2b03      	cmp	r3, #3
 800ce54:	d106      	bne.n	800ce64 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	2201      	movs	r2, #1
 800ce5a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	2200      	movs	r2, #0
 800ce60:	761a      	strb	r2, [r3, #24]
      break;
 800ce62:	e005      	b.n	800ce70 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800ce64:	7dfb      	ldrb	r3, [r7, #23]
 800ce66:	2b02      	cmp	r3, #2
 800ce68:	d102      	bne.n	800ce70 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	2201      	movs	r2, #1
 800ce6e:	709a      	strb	r2, [r3, #2]
      break;
 800ce70:	bf00      	nop
  }
  return status;
 800ce72:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce74:	4618      	mov	r0, r3
 800ce76:	3718      	adds	r7, #24
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bd80      	pop	{r7, pc}

0800ce7c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b086      	sub	sp, #24
 800ce80:	af02      	add	r7, sp, #8
 800ce82:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800ce84:	2301      	movs	r3, #1
 800ce86:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ce88:	2300      	movs	r3, #0
 800ce8a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	7e1b      	ldrb	r3, [r3, #24]
 800ce90:	3b01      	subs	r3, #1
 800ce92:	2b0a      	cmp	r3, #10
 800ce94:	f200 8158 	bhi.w	800d148 <USBH_HandleControl+0x2cc>
 800ce98:	a201      	add	r2, pc, #4	; (adr r2, 800cea0 <USBH_HandleControl+0x24>)
 800ce9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce9e:	bf00      	nop
 800cea0:	0800cecd 	.word	0x0800cecd
 800cea4:	0800cee7 	.word	0x0800cee7
 800cea8:	0800cf51 	.word	0x0800cf51
 800ceac:	0800cf77 	.word	0x0800cf77
 800ceb0:	0800cfaf 	.word	0x0800cfaf
 800ceb4:	0800cfdb 	.word	0x0800cfdb
 800ceb8:	0800d02d 	.word	0x0800d02d
 800cebc:	0800d04f 	.word	0x0800d04f
 800cec0:	0800d08b 	.word	0x0800d08b
 800cec4:	0800d0b3 	.word	0x0800d0b3
 800cec8:	0800d0f1 	.word	0x0800d0f1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	f103 0110 	add.w	r1, r3, #16
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	795b      	ldrb	r3, [r3, #5]
 800ced6:	461a      	mov	r2, r3
 800ced8:	6878      	ldr	r0, [r7, #4]
 800ceda:	f000 f945 	bl	800d168 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	2202      	movs	r2, #2
 800cee2:	761a      	strb	r2, [r3, #24]
      break;
 800cee4:	e13b      	b.n	800d15e <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	795b      	ldrb	r3, [r3, #5]
 800ceea:	4619      	mov	r1, r3
 800ceec:	6878      	ldr	r0, [r7, #4]
 800ceee:	f000 fcc5 	bl	800d87c <USBH_LL_GetURBState>
 800cef2:	4603      	mov	r3, r0
 800cef4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800cef6:	7bbb      	ldrb	r3, [r7, #14]
 800cef8:	2b01      	cmp	r3, #1
 800cefa:	d11e      	bne.n	800cf3a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	7c1b      	ldrb	r3, [r3, #16]
 800cf00:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cf04:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	8adb      	ldrh	r3, [r3, #22]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d00a      	beq.n	800cf24 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800cf0e:	7b7b      	ldrb	r3, [r7, #13]
 800cf10:	2b80      	cmp	r3, #128	; 0x80
 800cf12:	d103      	bne.n	800cf1c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	2203      	movs	r2, #3
 800cf18:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800cf1a:	e117      	b.n	800d14c <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	2205      	movs	r2, #5
 800cf20:	761a      	strb	r2, [r3, #24]
      break;
 800cf22:	e113      	b.n	800d14c <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 800cf24:	7b7b      	ldrb	r3, [r7, #13]
 800cf26:	2b80      	cmp	r3, #128	; 0x80
 800cf28:	d103      	bne.n	800cf32 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	2209      	movs	r2, #9
 800cf2e:	761a      	strb	r2, [r3, #24]
      break;
 800cf30:	e10c      	b.n	800d14c <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	2207      	movs	r2, #7
 800cf36:	761a      	strb	r2, [r3, #24]
      break;
 800cf38:	e108      	b.n	800d14c <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800cf3a:	7bbb      	ldrb	r3, [r7, #14]
 800cf3c:	2b04      	cmp	r3, #4
 800cf3e:	d003      	beq.n	800cf48 <USBH_HandleControl+0xcc>
 800cf40:	7bbb      	ldrb	r3, [r7, #14]
 800cf42:	2b02      	cmp	r3, #2
 800cf44:	f040 8102 	bne.w	800d14c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	220b      	movs	r2, #11
 800cf4c:	761a      	strb	r2, [r3, #24]
      break;
 800cf4e:	e0fd      	b.n	800d14c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cf56:	b29a      	uxth	r2, r3
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	6899      	ldr	r1, [r3, #8]
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	899a      	ldrh	r2, [r3, #12]
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	791b      	ldrb	r3, [r3, #4]
 800cf68:	6878      	ldr	r0, [r7, #4]
 800cf6a:	f000 f93c 	bl	800d1e6 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	2204      	movs	r2, #4
 800cf72:	761a      	strb	r2, [r3, #24]
      break;
 800cf74:	e0f3      	b.n	800d15e <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	791b      	ldrb	r3, [r3, #4]
 800cf7a:	4619      	mov	r1, r3
 800cf7c:	6878      	ldr	r0, [r7, #4]
 800cf7e:	f000 fc7d 	bl	800d87c <USBH_LL_GetURBState>
 800cf82:	4603      	mov	r3, r0
 800cf84:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800cf86:	7bbb      	ldrb	r3, [r7, #14]
 800cf88:	2b01      	cmp	r3, #1
 800cf8a:	d102      	bne.n	800cf92 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	2209      	movs	r2, #9
 800cf90:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800cf92:	7bbb      	ldrb	r3, [r7, #14]
 800cf94:	2b05      	cmp	r3, #5
 800cf96:	d102      	bne.n	800cf9e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800cf98:	2303      	movs	r3, #3
 800cf9a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800cf9c:	e0d8      	b.n	800d150 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800cf9e:	7bbb      	ldrb	r3, [r7, #14]
 800cfa0:	2b04      	cmp	r3, #4
 800cfa2:	f040 80d5 	bne.w	800d150 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	220b      	movs	r2, #11
 800cfaa:	761a      	strb	r2, [r3, #24]
      break;
 800cfac:	e0d0      	b.n	800d150 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	6899      	ldr	r1, [r3, #8]
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	899a      	ldrh	r2, [r3, #12]
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	7958      	ldrb	r0, [r3, #5]
 800cfba:	2301      	movs	r3, #1
 800cfbc:	9300      	str	r3, [sp, #0]
 800cfbe:	4603      	mov	r3, r0
 800cfc0:	6878      	ldr	r0, [r7, #4]
 800cfc2:	f000 f8eb 	bl	800d19c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cfcc:	b29a      	uxth	r2, r3
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	2206      	movs	r2, #6
 800cfd6:	761a      	strb	r2, [r3, #24]
      break;
 800cfd8:	e0c1      	b.n	800d15e <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	795b      	ldrb	r3, [r3, #5]
 800cfde:	4619      	mov	r1, r3
 800cfe0:	6878      	ldr	r0, [r7, #4]
 800cfe2:	f000 fc4b 	bl	800d87c <USBH_LL_GetURBState>
 800cfe6:	4603      	mov	r3, r0
 800cfe8:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800cfea:	7bbb      	ldrb	r3, [r7, #14]
 800cfec:	2b01      	cmp	r3, #1
 800cfee:	d103      	bne.n	800cff8 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	2207      	movs	r2, #7
 800cff4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800cff6:	e0ad      	b.n	800d154 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 800cff8:	7bbb      	ldrb	r3, [r7, #14]
 800cffa:	2b05      	cmp	r3, #5
 800cffc:	d105      	bne.n	800d00a <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	220c      	movs	r2, #12
 800d002:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800d004:	2303      	movs	r3, #3
 800d006:	73fb      	strb	r3, [r7, #15]
      break;
 800d008:	e0a4      	b.n	800d154 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d00a:	7bbb      	ldrb	r3, [r7, #14]
 800d00c:	2b02      	cmp	r3, #2
 800d00e:	d103      	bne.n	800d018 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	2205      	movs	r2, #5
 800d014:	761a      	strb	r2, [r3, #24]
      break;
 800d016:	e09d      	b.n	800d154 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 800d018:	7bbb      	ldrb	r3, [r7, #14]
 800d01a:	2b04      	cmp	r3, #4
 800d01c:	f040 809a 	bne.w	800d154 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	220b      	movs	r2, #11
 800d024:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800d026:	2302      	movs	r3, #2
 800d028:	73fb      	strb	r3, [r7, #15]
      break;
 800d02a:	e093      	b.n	800d154 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	791b      	ldrb	r3, [r3, #4]
 800d030:	2200      	movs	r2, #0
 800d032:	2100      	movs	r1, #0
 800d034:	6878      	ldr	r0, [r7, #4]
 800d036:	f000 f8d6 	bl	800d1e6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d040:	b29a      	uxth	r2, r3
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	2208      	movs	r2, #8
 800d04a:	761a      	strb	r2, [r3, #24]

      break;
 800d04c:	e087      	b.n	800d15e <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	791b      	ldrb	r3, [r3, #4]
 800d052:	4619      	mov	r1, r3
 800d054:	6878      	ldr	r0, [r7, #4]
 800d056:	f000 fc11 	bl	800d87c <USBH_LL_GetURBState>
 800d05a:	4603      	mov	r3, r0
 800d05c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800d05e:	7bbb      	ldrb	r3, [r7, #14]
 800d060:	2b01      	cmp	r3, #1
 800d062:	d105      	bne.n	800d070 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	220d      	movs	r2, #13
 800d068:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800d06a:	2300      	movs	r3, #0
 800d06c:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d06e:	e073      	b.n	800d158 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 800d070:	7bbb      	ldrb	r3, [r7, #14]
 800d072:	2b04      	cmp	r3, #4
 800d074:	d103      	bne.n	800d07e <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	220b      	movs	r2, #11
 800d07a:	761a      	strb	r2, [r3, #24]
      break;
 800d07c:	e06c      	b.n	800d158 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 800d07e:	7bbb      	ldrb	r3, [r7, #14]
 800d080:	2b05      	cmp	r3, #5
 800d082:	d169      	bne.n	800d158 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 800d084:	2303      	movs	r3, #3
 800d086:	73fb      	strb	r3, [r7, #15]
      break;
 800d088:	e066      	b.n	800d158 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	795a      	ldrb	r2, [r3, #5]
 800d08e:	2301      	movs	r3, #1
 800d090:	9300      	str	r3, [sp, #0]
 800d092:	4613      	mov	r3, r2
 800d094:	2200      	movs	r2, #0
 800d096:	2100      	movs	r1, #0
 800d098:	6878      	ldr	r0, [r7, #4]
 800d09a:	f000 f87f 	bl	800d19c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d0a4:	b29a      	uxth	r2, r3
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	220a      	movs	r2, #10
 800d0ae:	761a      	strb	r2, [r3, #24]
      break;
 800d0b0:	e055      	b.n	800d15e <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	795b      	ldrb	r3, [r3, #5]
 800d0b6:	4619      	mov	r1, r3
 800d0b8:	6878      	ldr	r0, [r7, #4]
 800d0ba:	f000 fbdf 	bl	800d87c <USBH_LL_GetURBState>
 800d0be:	4603      	mov	r3, r0
 800d0c0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800d0c2:	7bbb      	ldrb	r3, [r7, #14]
 800d0c4:	2b01      	cmp	r3, #1
 800d0c6:	d105      	bne.n	800d0d4 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	220d      	movs	r2, #13
 800d0d0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d0d2:	e043      	b.n	800d15c <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d0d4:	7bbb      	ldrb	r3, [r7, #14]
 800d0d6:	2b02      	cmp	r3, #2
 800d0d8:	d103      	bne.n	800d0e2 <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	2209      	movs	r2, #9
 800d0de:	761a      	strb	r2, [r3, #24]
      break;
 800d0e0:	e03c      	b.n	800d15c <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 800d0e2:	7bbb      	ldrb	r3, [r7, #14]
 800d0e4:	2b04      	cmp	r3, #4
 800d0e6:	d139      	bne.n	800d15c <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	220b      	movs	r2, #11
 800d0ec:	761a      	strb	r2, [r3, #24]
      break;
 800d0ee:	e035      	b.n	800d15c <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	7e5b      	ldrb	r3, [r3, #25]
 800d0f4:	3301      	adds	r3, #1
 800d0f6:	b2da      	uxtb	r2, r3
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	765a      	strb	r2, [r3, #25]
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	7e5b      	ldrb	r3, [r3, #25]
 800d100:	2b02      	cmp	r3, #2
 800d102:	d806      	bhi.n	800d112 <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	2201      	movs	r2, #1
 800d108:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	2201      	movs	r2, #1
 800d10e:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800d110:	e025      	b.n	800d15e <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d118:	2106      	movs	r1, #6
 800d11a:	6878      	ldr	r0, [r7, #4]
 800d11c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	2200      	movs	r2, #0
 800d122:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	795b      	ldrb	r3, [r3, #5]
 800d128:	4619      	mov	r1, r3
 800d12a:	6878      	ldr	r0, [r7, #4]
 800d12c:	f000 f90c 	bl	800d348 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	791b      	ldrb	r3, [r3, #4]
 800d134:	4619      	mov	r1, r3
 800d136:	6878      	ldr	r0, [r7, #4]
 800d138:	f000 f906 	bl	800d348 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	2200      	movs	r2, #0
 800d140:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800d142:	2302      	movs	r3, #2
 800d144:	73fb      	strb	r3, [r7, #15]
      break;
 800d146:	e00a      	b.n	800d15e <USBH_HandleControl+0x2e2>

    default:
      break;
 800d148:	bf00      	nop
 800d14a:	e008      	b.n	800d15e <USBH_HandleControl+0x2e2>
      break;
 800d14c:	bf00      	nop
 800d14e:	e006      	b.n	800d15e <USBH_HandleControl+0x2e2>
      break;
 800d150:	bf00      	nop
 800d152:	e004      	b.n	800d15e <USBH_HandleControl+0x2e2>
      break;
 800d154:	bf00      	nop
 800d156:	e002      	b.n	800d15e <USBH_HandleControl+0x2e2>
      break;
 800d158:	bf00      	nop
 800d15a:	e000      	b.n	800d15e <USBH_HandleControl+0x2e2>
      break;
 800d15c:	bf00      	nop
  }

  return status;
 800d15e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d160:	4618      	mov	r0, r3
 800d162:	3710      	adds	r7, #16
 800d164:	46bd      	mov	sp, r7
 800d166:	bd80      	pop	{r7, pc}

0800d168 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800d168:	b580      	push	{r7, lr}
 800d16a:	b088      	sub	sp, #32
 800d16c:	af04      	add	r7, sp, #16
 800d16e:	60f8      	str	r0, [r7, #12]
 800d170:	60b9      	str	r1, [r7, #8]
 800d172:	4613      	mov	r3, r2
 800d174:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d176:	79f9      	ldrb	r1, [r7, #7]
 800d178:	2300      	movs	r3, #0
 800d17a:	9303      	str	r3, [sp, #12]
 800d17c:	2308      	movs	r3, #8
 800d17e:	9302      	str	r3, [sp, #8]
 800d180:	68bb      	ldr	r3, [r7, #8]
 800d182:	9301      	str	r3, [sp, #4]
 800d184:	2300      	movs	r3, #0
 800d186:	9300      	str	r3, [sp, #0]
 800d188:	2300      	movs	r3, #0
 800d18a:	2200      	movs	r2, #0
 800d18c:	68f8      	ldr	r0, [r7, #12]
 800d18e:	f000 fb44 	bl	800d81a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800d192:	2300      	movs	r3, #0
}
 800d194:	4618      	mov	r0, r3
 800d196:	3710      	adds	r7, #16
 800d198:	46bd      	mov	sp, r7
 800d19a:	bd80      	pop	{r7, pc}

0800d19c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800d19c:	b580      	push	{r7, lr}
 800d19e:	b088      	sub	sp, #32
 800d1a0:	af04      	add	r7, sp, #16
 800d1a2:	60f8      	str	r0, [r7, #12]
 800d1a4:	60b9      	str	r1, [r7, #8]
 800d1a6:	4611      	mov	r1, r2
 800d1a8:	461a      	mov	r2, r3
 800d1aa:	460b      	mov	r3, r1
 800d1ac:	80fb      	strh	r3, [r7, #6]
 800d1ae:	4613      	mov	r3, r2
 800d1b0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d001      	beq.n	800d1c0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800d1bc:	2300      	movs	r3, #0
 800d1be:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d1c0:	7979      	ldrb	r1, [r7, #5]
 800d1c2:	7e3b      	ldrb	r3, [r7, #24]
 800d1c4:	9303      	str	r3, [sp, #12]
 800d1c6:	88fb      	ldrh	r3, [r7, #6]
 800d1c8:	9302      	str	r3, [sp, #8]
 800d1ca:	68bb      	ldr	r3, [r7, #8]
 800d1cc:	9301      	str	r3, [sp, #4]
 800d1ce:	2301      	movs	r3, #1
 800d1d0:	9300      	str	r3, [sp, #0]
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	68f8      	ldr	r0, [r7, #12]
 800d1d8:	f000 fb1f 	bl	800d81a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800d1dc:	2300      	movs	r3, #0
}
 800d1de:	4618      	mov	r0, r3
 800d1e0:	3710      	adds	r7, #16
 800d1e2:	46bd      	mov	sp, r7
 800d1e4:	bd80      	pop	{r7, pc}

0800d1e6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800d1e6:	b580      	push	{r7, lr}
 800d1e8:	b088      	sub	sp, #32
 800d1ea:	af04      	add	r7, sp, #16
 800d1ec:	60f8      	str	r0, [r7, #12]
 800d1ee:	60b9      	str	r1, [r7, #8]
 800d1f0:	4611      	mov	r1, r2
 800d1f2:	461a      	mov	r2, r3
 800d1f4:	460b      	mov	r3, r1
 800d1f6:	80fb      	strh	r3, [r7, #6]
 800d1f8:	4613      	mov	r3, r2
 800d1fa:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d1fc:	7979      	ldrb	r1, [r7, #5]
 800d1fe:	2300      	movs	r3, #0
 800d200:	9303      	str	r3, [sp, #12]
 800d202:	88fb      	ldrh	r3, [r7, #6]
 800d204:	9302      	str	r3, [sp, #8]
 800d206:	68bb      	ldr	r3, [r7, #8]
 800d208:	9301      	str	r3, [sp, #4]
 800d20a:	2301      	movs	r3, #1
 800d20c:	9300      	str	r3, [sp, #0]
 800d20e:	2300      	movs	r3, #0
 800d210:	2201      	movs	r2, #1
 800d212:	68f8      	ldr	r0, [r7, #12]
 800d214:	f000 fb01 	bl	800d81a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800d218:	2300      	movs	r3, #0

}
 800d21a:	4618      	mov	r0, r3
 800d21c:	3710      	adds	r7, #16
 800d21e:	46bd      	mov	sp, r7
 800d220:	bd80      	pop	{r7, pc}

0800d222 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800d222:	b580      	push	{r7, lr}
 800d224:	b088      	sub	sp, #32
 800d226:	af04      	add	r7, sp, #16
 800d228:	60f8      	str	r0, [r7, #12]
 800d22a:	60b9      	str	r1, [r7, #8]
 800d22c:	4611      	mov	r1, r2
 800d22e:	461a      	mov	r2, r3
 800d230:	460b      	mov	r3, r1
 800d232:	80fb      	strh	r3, [r7, #6]
 800d234:	4613      	mov	r3, r2
 800d236:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d001      	beq.n	800d246 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800d242:	2300      	movs	r3, #0
 800d244:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d246:	7979      	ldrb	r1, [r7, #5]
 800d248:	7e3b      	ldrb	r3, [r7, #24]
 800d24a:	9303      	str	r3, [sp, #12]
 800d24c:	88fb      	ldrh	r3, [r7, #6]
 800d24e:	9302      	str	r3, [sp, #8]
 800d250:	68bb      	ldr	r3, [r7, #8]
 800d252:	9301      	str	r3, [sp, #4]
 800d254:	2301      	movs	r3, #1
 800d256:	9300      	str	r3, [sp, #0]
 800d258:	2302      	movs	r3, #2
 800d25a:	2200      	movs	r2, #0
 800d25c:	68f8      	ldr	r0, [r7, #12]
 800d25e:	f000 fadc 	bl	800d81a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800d262:	2300      	movs	r3, #0
}
 800d264:	4618      	mov	r0, r3
 800d266:	3710      	adds	r7, #16
 800d268:	46bd      	mov	sp, r7
 800d26a:	bd80      	pop	{r7, pc}

0800d26c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800d26c:	b580      	push	{r7, lr}
 800d26e:	b088      	sub	sp, #32
 800d270:	af04      	add	r7, sp, #16
 800d272:	60f8      	str	r0, [r7, #12]
 800d274:	60b9      	str	r1, [r7, #8]
 800d276:	4611      	mov	r1, r2
 800d278:	461a      	mov	r2, r3
 800d27a:	460b      	mov	r3, r1
 800d27c:	80fb      	strh	r3, [r7, #6]
 800d27e:	4613      	mov	r3, r2
 800d280:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d282:	7979      	ldrb	r1, [r7, #5]
 800d284:	2300      	movs	r3, #0
 800d286:	9303      	str	r3, [sp, #12]
 800d288:	88fb      	ldrh	r3, [r7, #6]
 800d28a:	9302      	str	r3, [sp, #8]
 800d28c:	68bb      	ldr	r3, [r7, #8]
 800d28e:	9301      	str	r3, [sp, #4]
 800d290:	2301      	movs	r3, #1
 800d292:	9300      	str	r3, [sp, #0]
 800d294:	2302      	movs	r3, #2
 800d296:	2201      	movs	r2, #1
 800d298:	68f8      	ldr	r0, [r7, #12]
 800d29a:	f000 fabe 	bl	800d81a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800d29e:	2300      	movs	r3, #0
}
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	3710      	adds	r7, #16
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	bd80      	pop	{r7, pc}

0800d2a8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d2a8:	b580      	push	{r7, lr}
 800d2aa:	b086      	sub	sp, #24
 800d2ac:	af04      	add	r7, sp, #16
 800d2ae:	6078      	str	r0, [r7, #4]
 800d2b0:	4608      	mov	r0, r1
 800d2b2:	4611      	mov	r1, r2
 800d2b4:	461a      	mov	r2, r3
 800d2b6:	4603      	mov	r3, r0
 800d2b8:	70fb      	strb	r3, [r7, #3]
 800d2ba:	460b      	mov	r3, r1
 800d2bc:	70bb      	strb	r3, [r7, #2]
 800d2be:	4613      	mov	r3, r2
 800d2c0:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800d2c2:	7878      	ldrb	r0, [r7, #1]
 800d2c4:	78ba      	ldrb	r2, [r7, #2]
 800d2c6:	78f9      	ldrb	r1, [r7, #3]
 800d2c8:	8b3b      	ldrh	r3, [r7, #24]
 800d2ca:	9302      	str	r3, [sp, #8]
 800d2cc:	7d3b      	ldrb	r3, [r7, #20]
 800d2ce:	9301      	str	r3, [sp, #4]
 800d2d0:	7c3b      	ldrb	r3, [r7, #16]
 800d2d2:	9300      	str	r3, [sp, #0]
 800d2d4:	4603      	mov	r3, r0
 800d2d6:	6878      	ldr	r0, [r7, #4]
 800d2d8:	f000 fa51 	bl	800d77e <USBH_LL_OpenPipe>

  return USBH_OK;
 800d2dc:	2300      	movs	r3, #0
}
 800d2de:	4618      	mov	r0, r3
 800d2e0:	3708      	adds	r7, #8
 800d2e2:	46bd      	mov	sp, r7
 800d2e4:	bd80      	pop	{r7, pc}

0800d2e6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800d2e6:	b580      	push	{r7, lr}
 800d2e8:	b082      	sub	sp, #8
 800d2ea:	af00      	add	r7, sp, #0
 800d2ec:	6078      	str	r0, [r7, #4]
 800d2ee:	460b      	mov	r3, r1
 800d2f0:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800d2f2:	78fb      	ldrb	r3, [r7, #3]
 800d2f4:	4619      	mov	r1, r3
 800d2f6:	6878      	ldr	r0, [r7, #4]
 800d2f8:	f000 fa70 	bl	800d7dc <USBH_LL_ClosePipe>

  return USBH_OK;
 800d2fc:	2300      	movs	r3, #0
}
 800d2fe:	4618      	mov	r0, r3
 800d300:	3708      	adds	r7, #8
 800d302:	46bd      	mov	sp, r7
 800d304:	bd80      	pop	{r7, pc}

0800d306 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800d306:	b580      	push	{r7, lr}
 800d308:	b084      	sub	sp, #16
 800d30a:	af00      	add	r7, sp, #0
 800d30c:	6078      	str	r0, [r7, #4]
 800d30e:	460b      	mov	r3, r1
 800d310:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800d312:	6878      	ldr	r0, [r7, #4]
 800d314:	f000 f836 	bl	800d384 <USBH_GetFreePipe>
 800d318:	4603      	mov	r3, r0
 800d31a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800d31c:	89fb      	ldrh	r3, [r7, #14]
 800d31e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d322:	4293      	cmp	r3, r2
 800d324:	d00a      	beq.n	800d33c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800d326:	78fa      	ldrb	r2, [r7, #3]
 800d328:	89fb      	ldrh	r3, [r7, #14]
 800d32a:	f003 030f 	and.w	r3, r3, #15
 800d32e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d332:	6879      	ldr	r1, [r7, #4]
 800d334:	33e0      	adds	r3, #224	; 0xe0
 800d336:	009b      	lsls	r3, r3, #2
 800d338:	440b      	add	r3, r1
 800d33a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800d33c:	89fb      	ldrh	r3, [r7, #14]
 800d33e:	b2db      	uxtb	r3, r3
}
 800d340:	4618      	mov	r0, r3
 800d342:	3710      	adds	r7, #16
 800d344:	46bd      	mov	sp, r7
 800d346:	bd80      	pop	{r7, pc}

0800d348 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800d348:	b480      	push	{r7}
 800d34a:	b083      	sub	sp, #12
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	6078      	str	r0, [r7, #4]
 800d350:	460b      	mov	r3, r1
 800d352:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800d354:	78fb      	ldrb	r3, [r7, #3]
 800d356:	2b0a      	cmp	r3, #10
 800d358:	d80d      	bhi.n	800d376 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800d35a:	78fb      	ldrb	r3, [r7, #3]
 800d35c:	687a      	ldr	r2, [r7, #4]
 800d35e:	33e0      	adds	r3, #224	; 0xe0
 800d360:	009b      	lsls	r3, r3, #2
 800d362:	4413      	add	r3, r2
 800d364:	685a      	ldr	r2, [r3, #4]
 800d366:	78fb      	ldrb	r3, [r7, #3]
 800d368:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800d36c:	6879      	ldr	r1, [r7, #4]
 800d36e:	33e0      	adds	r3, #224	; 0xe0
 800d370:	009b      	lsls	r3, r3, #2
 800d372:	440b      	add	r3, r1
 800d374:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800d376:	2300      	movs	r3, #0
}
 800d378:	4618      	mov	r0, r3
 800d37a:	370c      	adds	r7, #12
 800d37c:	46bd      	mov	sp, r7
 800d37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d382:	4770      	bx	lr

0800d384 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800d384:	b480      	push	{r7}
 800d386:	b085      	sub	sp, #20
 800d388:	af00      	add	r7, sp, #0
 800d38a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800d38c:	2300      	movs	r3, #0
 800d38e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800d390:	2300      	movs	r3, #0
 800d392:	73fb      	strb	r3, [r7, #15]
 800d394:	e00f      	b.n	800d3b6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800d396:	7bfb      	ldrb	r3, [r7, #15]
 800d398:	687a      	ldr	r2, [r7, #4]
 800d39a:	33e0      	adds	r3, #224	; 0xe0
 800d39c:	009b      	lsls	r3, r3, #2
 800d39e:	4413      	add	r3, r2
 800d3a0:	685b      	ldr	r3, [r3, #4]
 800d3a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d102      	bne.n	800d3b0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800d3aa:	7bfb      	ldrb	r3, [r7, #15]
 800d3ac:	b29b      	uxth	r3, r3
 800d3ae:	e007      	b.n	800d3c0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800d3b0:	7bfb      	ldrb	r3, [r7, #15]
 800d3b2:	3301      	adds	r3, #1
 800d3b4:	73fb      	strb	r3, [r7, #15]
 800d3b6:	7bfb      	ldrb	r3, [r7, #15]
 800d3b8:	2b0a      	cmp	r3, #10
 800d3ba:	d9ec      	bls.n	800d396 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800d3bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	3714      	adds	r7, #20
 800d3c4:	46bd      	mov	sp, r7
 800d3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ca:	4770      	bx	lr

0800d3cc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800d3d0:	2201      	movs	r2, #1
 800d3d2:	490e      	ldr	r1, [pc, #56]	; (800d40c <MX_USB_HOST_Init+0x40>)
 800d3d4:	480e      	ldr	r0, [pc, #56]	; (800d410 <MX_USB_HOST_Init+0x44>)
 800d3d6:	f7fe fc9f 	bl	800bd18 <USBH_Init>
 800d3da:	4603      	mov	r3, r0
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d001      	beq.n	800d3e4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800d3e0:	f7f9 fa48 	bl	8006874 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800d3e4:	490b      	ldr	r1, [pc, #44]	; (800d414 <MX_USB_HOST_Init+0x48>)
 800d3e6:	480a      	ldr	r0, [pc, #40]	; (800d410 <MX_USB_HOST_Init+0x44>)
 800d3e8:	f7fe fd24 	bl	800be34 <USBH_RegisterClass>
 800d3ec:	4603      	mov	r3, r0
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d001      	beq.n	800d3f6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800d3f2:	f7f9 fa3f 	bl	8006874 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800d3f6:	4806      	ldr	r0, [pc, #24]	; (800d410 <MX_USB_HOST_Init+0x44>)
 800d3f8:	f7fe fda8 	bl	800bf4c <USBH_Start>
 800d3fc:	4603      	mov	r3, r0
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d001      	beq.n	800d406 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800d402:	f7f9 fa37 	bl	8006874 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800d406:	bf00      	nop
 800d408:	bd80      	pop	{r7, pc}
 800d40a:	bf00      	nop
 800d40c:	0800d42d 	.word	0x0800d42d
 800d410:	20000208 	.word	0x20000208
 800d414:	2000000c 	.word	0x2000000c

0800d418 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800d418:	b580      	push	{r7, lr}
 800d41a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800d41c:	4802      	ldr	r0, [pc, #8]	; (800d428 <MX_USB_HOST_Process+0x10>)
 800d41e:	f7fe fda5 	bl	800bf6c <USBH_Process>
}
 800d422:	bf00      	nop
 800d424:	bd80      	pop	{r7, pc}
 800d426:	bf00      	nop
 800d428:	20000208 	.word	0x20000208

0800d42c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800d42c:	b480      	push	{r7}
 800d42e:	b083      	sub	sp, #12
 800d430:	af00      	add	r7, sp, #0
 800d432:	6078      	str	r0, [r7, #4]
 800d434:	460b      	mov	r3, r1
 800d436:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800d438:	78fb      	ldrb	r3, [r7, #3]
 800d43a:	3b01      	subs	r3, #1
 800d43c:	2b04      	cmp	r3, #4
 800d43e:	d819      	bhi.n	800d474 <USBH_UserProcess+0x48>
 800d440:	a201      	add	r2, pc, #4	; (adr r2, 800d448 <USBH_UserProcess+0x1c>)
 800d442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d446:	bf00      	nop
 800d448:	0800d475 	.word	0x0800d475
 800d44c:	0800d465 	.word	0x0800d465
 800d450:	0800d475 	.word	0x0800d475
 800d454:	0800d46d 	.word	0x0800d46d
 800d458:	0800d45d 	.word	0x0800d45d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800d45c:	4b09      	ldr	r3, [pc, #36]	; (800d484 <USBH_UserProcess+0x58>)
 800d45e:	2203      	movs	r2, #3
 800d460:	701a      	strb	r2, [r3, #0]
  break;
 800d462:	e008      	b.n	800d476 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800d464:	4b07      	ldr	r3, [pc, #28]	; (800d484 <USBH_UserProcess+0x58>)
 800d466:	2202      	movs	r2, #2
 800d468:	701a      	strb	r2, [r3, #0]
  break;
 800d46a:	e004      	b.n	800d476 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800d46c:	4b05      	ldr	r3, [pc, #20]	; (800d484 <USBH_UserProcess+0x58>)
 800d46e:	2201      	movs	r2, #1
 800d470:	701a      	strb	r2, [r3, #0]
  break;
 800d472:	e000      	b.n	800d476 <USBH_UserProcess+0x4a>

  default:
  break;
 800d474:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800d476:	bf00      	nop
 800d478:	370c      	adds	r7, #12
 800d47a:	46bd      	mov	sp, r7
 800d47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d480:	4770      	bx	lr
 800d482:	bf00      	nop
 800d484:	200000b8 	.word	0x200000b8

0800d488 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800d488:	b580      	push	{r7, lr}
 800d48a:	b08a      	sub	sp, #40	; 0x28
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d490:	f107 0314 	add.w	r3, r7, #20
 800d494:	2200      	movs	r2, #0
 800d496:	601a      	str	r2, [r3, #0]
 800d498:	605a      	str	r2, [r3, #4]
 800d49a:	609a      	str	r2, [r3, #8]
 800d49c:	60da      	str	r2, [r3, #12]
 800d49e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d4a8:	d147      	bne.n	800d53a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	613b      	str	r3, [r7, #16]
 800d4ae:	4b25      	ldr	r3, [pc, #148]	; (800d544 <HAL_HCD_MspInit+0xbc>)
 800d4b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4b2:	4a24      	ldr	r2, [pc, #144]	; (800d544 <HAL_HCD_MspInit+0xbc>)
 800d4b4:	f043 0301 	orr.w	r3, r3, #1
 800d4b8:	6313      	str	r3, [r2, #48]	; 0x30
 800d4ba:	4b22      	ldr	r3, [pc, #136]	; (800d544 <HAL_HCD_MspInit+0xbc>)
 800d4bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4be:	f003 0301 	and.w	r3, r3, #1
 800d4c2:	613b      	str	r3, [r7, #16]
 800d4c4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800d4c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d4ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d4d0:	2300      	movs	r3, #0
 800d4d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800d4d4:	f107 0314 	add.w	r3, r7, #20
 800d4d8:	4619      	mov	r1, r3
 800d4da:	481b      	ldr	r0, [pc, #108]	; (800d548 <HAL_HCD_MspInit+0xc0>)
 800d4dc:	f7f9 fcec 	bl	8006eb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800d4e0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800d4e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d4e6:	2302      	movs	r3, #2
 800d4e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d4ee:	2303      	movs	r3, #3
 800d4f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d4f2:	230a      	movs	r3, #10
 800d4f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d4f6:	f107 0314 	add.w	r3, r7, #20
 800d4fa:	4619      	mov	r1, r3
 800d4fc:	4812      	ldr	r0, [pc, #72]	; (800d548 <HAL_HCD_MspInit+0xc0>)
 800d4fe:	f7f9 fcdb 	bl	8006eb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d502:	4b10      	ldr	r3, [pc, #64]	; (800d544 <HAL_HCD_MspInit+0xbc>)
 800d504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d506:	4a0f      	ldr	r2, [pc, #60]	; (800d544 <HAL_HCD_MspInit+0xbc>)
 800d508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d50c:	6353      	str	r3, [r2, #52]	; 0x34
 800d50e:	2300      	movs	r3, #0
 800d510:	60fb      	str	r3, [r7, #12]
 800d512:	4b0c      	ldr	r3, [pc, #48]	; (800d544 <HAL_HCD_MspInit+0xbc>)
 800d514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d516:	4a0b      	ldr	r2, [pc, #44]	; (800d544 <HAL_HCD_MspInit+0xbc>)
 800d518:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d51c:	6453      	str	r3, [r2, #68]	; 0x44
 800d51e:	4b09      	ldr	r3, [pc, #36]	; (800d544 <HAL_HCD_MspInit+0xbc>)
 800d520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d522:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d526:	60fb      	str	r3, [r7, #12]
 800d528:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d52a:	2200      	movs	r2, #0
 800d52c:	2100      	movs	r1, #0
 800d52e:	2043      	movs	r0, #67	; 0x43
 800d530:	f7f9 fc8b 	bl	8006e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d534:	2043      	movs	r0, #67	; 0x43
 800d536:	f7f9 fca4 	bl	8006e82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d53a:	bf00      	nop
 800d53c:	3728      	adds	r7, #40	; 0x28
 800d53e:	46bd      	mov	sp, r7
 800d540:	bd80      	pop	{r7, pc}
 800d542:	bf00      	nop
 800d544:	40023800 	.word	0x40023800
 800d548:	40020000 	.word	0x40020000

0800d54c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b082      	sub	sp, #8
 800d550:	af00      	add	r7, sp, #0
 800d552:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d55a:	4618      	mov	r0, r3
 800d55c:	f7ff f8d9 	bl	800c712 <USBH_LL_IncTimer>
}
 800d560:	bf00      	nop
 800d562:	3708      	adds	r7, #8
 800d564:	46bd      	mov	sp, r7
 800d566:	bd80      	pop	{r7, pc}

0800d568 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d568:	b580      	push	{r7, lr}
 800d56a:	b082      	sub	sp, #8
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d576:	4618      	mov	r0, r3
 800d578:	f7ff f911 	bl	800c79e <USBH_LL_Connect>
}
 800d57c:	bf00      	nop
 800d57e:	3708      	adds	r7, #8
 800d580:	46bd      	mov	sp, r7
 800d582:	bd80      	pop	{r7, pc}

0800d584 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d584:	b580      	push	{r7, lr}
 800d586:	b082      	sub	sp, #8
 800d588:	af00      	add	r7, sp, #0
 800d58a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d592:	4618      	mov	r0, r3
 800d594:	f7ff f91a 	bl	800c7cc <USBH_LL_Disconnect>
}
 800d598:	bf00      	nop
 800d59a:	3708      	adds	r7, #8
 800d59c:	46bd      	mov	sp, r7
 800d59e:	bd80      	pop	{r7, pc}

0800d5a0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800d5a0:	b480      	push	{r7}
 800d5a2:	b083      	sub	sp, #12
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	6078      	str	r0, [r7, #4]
 800d5a8:	460b      	mov	r3, r1
 800d5aa:	70fb      	strb	r3, [r7, #3]
 800d5ac:	4613      	mov	r3, r2
 800d5ae:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800d5b0:	bf00      	nop
 800d5b2:	370c      	adds	r7, #12
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ba:	4770      	bx	lr

0800d5bc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	b082      	sub	sp, #8
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	f7ff f8cb 	bl	800c766 <USBH_LL_PortEnabled>
}
 800d5d0:	bf00      	nop
 800d5d2:	3708      	adds	r7, #8
 800d5d4:	46bd      	mov	sp, r7
 800d5d6:	bd80      	pop	{r7, pc}

0800d5d8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	b082      	sub	sp, #8
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	f7ff f8cb 	bl	800c782 <USBH_LL_PortDisabled>
}
 800d5ec:	bf00      	nop
 800d5ee:	3708      	adds	r7, #8
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	bd80      	pop	{r7, pc}

0800d5f4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	b082      	sub	sp, #8
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800d602:	2b01      	cmp	r3, #1
 800d604:	d12a      	bne.n	800d65c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800d606:	4a18      	ldr	r2, [pc, #96]	; (800d668 <USBH_LL_Init+0x74>)
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	4a15      	ldr	r2, [pc, #84]	; (800d668 <USBH_LL_Init+0x74>)
 800d612:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d616:	4b14      	ldr	r3, [pc, #80]	; (800d668 <USBH_LL_Init+0x74>)
 800d618:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d61c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800d61e:	4b12      	ldr	r3, [pc, #72]	; (800d668 <USBH_LL_Init+0x74>)
 800d620:	2208      	movs	r2, #8
 800d622:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800d624:	4b10      	ldr	r3, [pc, #64]	; (800d668 <USBH_LL_Init+0x74>)
 800d626:	2201      	movs	r2, #1
 800d628:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d62a:	4b0f      	ldr	r3, [pc, #60]	; (800d668 <USBH_LL_Init+0x74>)
 800d62c:	2200      	movs	r2, #0
 800d62e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800d630:	4b0d      	ldr	r3, [pc, #52]	; (800d668 <USBH_LL_Init+0x74>)
 800d632:	2202      	movs	r2, #2
 800d634:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d636:	4b0c      	ldr	r3, [pc, #48]	; (800d668 <USBH_LL_Init+0x74>)
 800d638:	2200      	movs	r2, #0
 800d63a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800d63c:	480a      	ldr	r0, [pc, #40]	; (800d668 <USBH_LL_Init+0x74>)
 800d63e:	f7f9 fdd6 	bl	80071ee <HAL_HCD_Init>
 800d642:	4603      	mov	r3, r0
 800d644:	2b00      	cmp	r3, #0
 800d646:	d001      	beq.n	800d64c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800d648:	f7f9 f914 	bl	8006874 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800d64c:	4806      	ldr	r0, [pc, #24]	; (800d668 <USBH_LL_Init+0x74>)
 800d64e:	f7fa f9d9 	bl	8007a04 <HAL_HCD_GetCurrentFrame>
 800d652:	4603      	mov	r3, r0
 800d654:	4619      	mov	r1, r3
 800d656:	6878      	ldr	r0, [r7, #4]
 800d658:	f7ff f84c 	bl	800c6f4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800d65c:	2300      	movs	r3, #0
}
 800d65e:	4618      	mov	r0, r3
 800d660:	3708      	adds	r7, #8
 800d662:	46bd      	mov	sp, r7
 800d664:	bd80      	pop	{r7, pc}
 800d666:	bf00      	nop
 800d668:	200005e0 	.word	0x200005e0

0800d66c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b084      	sub	sp, #16
 800d670:	af00      	add	r7, sp, #0
 800d672:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d674:	2300      	movs	r3, #0
 800d676:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d678:	2300      	movs	r3, #0
 800d67a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d682:	4618      	mov	r0, r3
 800d684:	f7fa f946 	bl	8007914 <HAL_HCD_Start>
 800d688:	4603      	mov	r3, r0
 800d68a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d68c:	7bfb      	ldrb	r3, [r7, #15]
 800d68e:	4618      	mov	r0, r3
 800d690:	f000 f95c 	bl	800d94c <USBH_Get_USB_Status>
 800d694:	4603      	mov	r3, r0
 800d696:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d698:	7bbb      	ldrb	r3, [r7, #14]
}
 800d69a:	4618      	mov	r0, r3
 800d69c:	3710      	adds	r7, #16
 800d69e:	46bd      	mov	sp, r7
 800d6a0:	bd80      	pop	{r7, pc}

0800d6a2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800d6a2:	b580      	push	{r7, lr}
 800d6a4:	b084      	sub	sp, #16
 800d6a6:	af00      	add	r7, sp, #0
 800d6a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d6b8:	4618      	mov	r0, r3
 800d6ba:	f7fa f94e 	bl	800795a <HAL_HCD_Stop>
 800d6be:	4603      	mov	r3, r0
 800d6c0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d6c2:	7bfb      	ldrb	r3, [r7, #15]
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	f000 f941 	bl	800d94c <USBH_Get_USB_Status>
 800d6ca:	4603      	mov	r3, r0
 800d6cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d6ce:	7bbb      	ldrb	r3, [r7, #14]
}
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	3710      	adds	r7, #16
 800d6d4:	46bd      	mov	sp, r7
 800d6d6:	bd80      	pop	{r7, pc}

0800d6d8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	b084      	sub	sp, #16
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800d6e0:	2301      	movs	r3, #1
 800d6e2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	f7fa f998 	bl	8007a20 <HAL_HCD_GetCurrentSpeed>
 800d6f0:	4603      	mov	r3, r0
 800d6f2:	2b01      	cmp	r3, #1
 800d6f4:	d007      	beq.n	800d706 <USBH_LL_GetSpeed+0x2e>
 800d6f6:	2b01      	cmp	r3, #1
 800d6f8:	d302      	bcc.n	800d700 <USBH_LL_GetSpeed+0x28>
 800d6fa:	2b02      	cmp	r3, #2
 800d6fc:	d006      	beq.n	800d70c <USBH_LL_GetSpeed+0x34>
 800d6fe:	e008      	b.n	800d712 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800d700:	2300      	movs	r3, #0
 800d702:	73fb      	strb	r3, [r7, #15]
    break;
 800d704:	e008      	b.n	800d718 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800d706:	2301      	movs	r3, #1
 800d708:	73fb      	strb	r3, [r7, #15]
    break;
 800d70a:	e005      	b.n	800d718 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800d70c:	2302      	movs	r3, #2
 800d70e:	73fb      	strb	r3, [r7, #15]
    break;
 800d710:	e002      	b.n	800d718 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800d712:	2301      	movs	r3, #1
 800d714:	73fb      	strb	r3, [r7, #15]
    break;
 800d716:	bf00      	nop
  }
  return  speed;
 800d718:	7bfb      	ldrb	r3, [r7, #15]
}
 800d71a:	4618      	mov	r0, r3
 800d71c:	3710      	adds	r7, #16
 800d71e:	46bd      	mov	sp, r7
 800d720:	bd80      	pop	{r7, pc}

0800d722 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800d722:	b580      	push	{r7, lr}
 800d724:	b084      	sub	sp, #16
 800d726:	af00      	add	r7, sp, #0
 800d728:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d72a:	2300      	movs	r3, #0
 800d72c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d72e:	2300      	movs	r3, #0
 800d730:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d738:	4618      	mov	r0, r3
 800d73a:	f7fa f92b 	bl	8007994 <HAL_HCD_ResetPort>
 800d73e:	4603      	mov	r3, r0
 800d740:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d742:	7bfb      	ldrb	r3, [r7, #15]
 800d744:	4618      	mov	r0, r3
 800d746:	f000 f901 	bl	800d94c <USBH_Get_USB_Status>
 800d74a:	4603      	mov	r3, r0
 800d74c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d74e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d750:	4618      	mov	r0, r3
 800d752:	3710      	adds	r7, #16
 800d754:	46bd      	mov	sp, r7
 800d756:	bd80      	pop	{r7, pc}

0800d758 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d758:	b580      	push	{r7, lr}
 800d75a:	b082      	sub	sp, #8
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	6078      	str	r0, [r7, #4]
 800d760:	460b      	mov	r3, r1
 800d762:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d76a:	78fa      	ldrb	r2, [r7, #3]
 800d76c:	4611      	mov	r1, r2
 800d76e:	4618      	mov	r0, r3
 800d770:	f7fa f933 	bl	80079da <HAL_HCD_HC_GetXferCount>
 800d774:	4603      	mov	r3, r0
}
 800d776:	4618      	mov	r0, r3
 800d778:	3708      	adds	r7, #8
 800d77a:	46bd      	mov	sp, r7
 800d77c:	bd80      	pop	{r7, pc}

0800d77e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d77e:	b590      	push	{r4, r7, lr}
 800d780:	b089      	sub	sp, #36	; 0x24
 800d782:	af04      	add	r7, sp, #16
 800d784:	6078      	str	r0, [r7, #4]
 800d786:	4608      	mov	r0, r1
 800d788:	4611      	mov	r1, r2
 800d78a:	461a      	mov	r2, r3
 800d78c:	4603      	mov	r3, r0
 800d78e:	70fb      	strb	r3, [r7, #3]
 800d790:	460b      	mov	r3, r1
 800d792:	70bb      	strb	r3, [r7, #2]
 800d794:	4613      	mov	r3, r2
 800d796:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d798:	2300      	movs	r3, #0
 800d79a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d79c:	2300      	movs	r3, #0
 800d79e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d7a6:	787c      	ldrb	r4, [r7, #1]
 800d7a8:	78ba      	ldrb	r2, [r7, #2]
 800d7aa:	78f9      	ldrb	r1, [r7, #3]
 800d7ac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d7ae:	9302      	str	r3, [sp, #8]
 800d7b0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d7b4:	9301      	str	r3, [sp, #4]
 800d7b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d7ba:	9300      	str	r3, [sp, #0]
 800d7bc:	4623      	mov	r3, r4
 800d7be:	f7f9 fd78 	bl	80072b2 <HAL_HCD_HC_Init>
 800d7c2:	4603      	mov	r3, r0
 800d7c4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800d7c6:	7bfb      	ldrb	r3, [r7, #15]
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	f000 f8bf 	bl	800d94c <USBH_Get_USB_Status>
 800d7ce:	4603      	mov	r3, r0
 800d7d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d7d2:	7bbb      	ldrb	r3, [r7, #14]
}
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	3714      	adds	r7, #20
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	bd90      	pop	{r4, r7, pc}

0800d7dc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b084      	sub	sp, #16
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	6078      	str	r0, [r7, #4]
 800d7e4:	460b      	mov	r3, r1
 800d7e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d7e8:	2300      	movs	r3, #0
 800d7ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d7ec:	2300      	movs	r3, #0
 800d7ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d7f6:	78fa      	ldrb	r2, [r7, #3]
 800d7f8:	4611      	mov	r1, r2
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	f7f9 fdf1 	bl	80073e2 <HAL_HCD_HC_Halt>
 800d800:	4603      	mov	r3, r0
 800d802:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d804:	7bfb      	ldrb	r3, [r7, #15]
 800d806:	4618      	mov	r0, r3
 800d808:	f000 f8a0 	bl	800d94c <USBH_Get_USB_Status>
 800d80c:	4603      	mov	r3, r0
 800d80e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d810:	7bbb      	ldrb	r3, [r7, #14]
}
 800d812:	4618      	mov	r0, r3
 800d814:	3710      	adds	r7, #16
 800d816:	46bd      	mov	sp, r7
 800d818:	bd80      	pop	{r7, pc}

0800d81a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800d81a:	b590      	push	{r4, r7, lr}
 800d81c:	b089      	sub	sp, #36	; 0x24
 800d81e:	af04      	add	r7, sp, #16
 800d820:	6078      	str	r0, [r7, #4]
 800d822:	4608      	mov	r0, r1
 800d824:	4611      	mov	r1, r2
 800d826:	461a      	mov	r2, r3
 800d828:	4603      	mov	r3, r0
 800d82a:	70fb      	strb	r3, [r7, #3]
 800d82c:	460b      	mov	r3, r1
 800d82e:	70bb      	strb	r3, [r7, #2]
 800d830:	4613      	mov	r3, r2
 800d832:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d834:	2300      	movs	r3, #0
 800d836:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d838:	2300      	movs	r3, #0
 800d83a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d842:	787c      	ldrb	r4, [r7, #1]
 800d844:	78ba      	ldrb	r2, [r7, #2]
 800d846:	78f9      	ldrb	r1, [r7, #3]
 800d848:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d84c:	9303      	str	r3, [sp, #12]
 800d84e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d850:	9302      	str	r3, [sp, #8]
 800d852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d854:	9301      	str	r3, [sp, #4]
 800d856:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d85a:	9300      	str	r3, [sp, #0]
 800d85c:	4623      	mov	r3, r4
 800d85e:	f7f9 fde3 	bl	8007428 <HAL_HCD_HC_SubmitRequest>
 800d862:	4603      	mov	r3, r0
 800d864:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800d866:	7bfb      	ldrb	r3, [r7, #15]
 800d868:	4618      	mov	r0, r3
 800d86a:	f000 f86f 	bl	800d94c <USBH_Get_USB_Status>
 800d86e:	4603      	mov	r3, r0
 800d870:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d872:	7bbb      	ldrb	r3, [r7, #14]
}
 800d874:	4618      	mov	r0, r3
 800d876:	3714      	adds	r7, #20
 800d878:	46bd      	mov	sp, r7
 800d87a:	bd90      	pop	{r4, r7, pc}

0800d87c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b082      	sub	sp, #8
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]
 800d884:	460b      	mov	r3, r1
 800d886:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d88e:	78fa      	ldrb	r2, [r7, #3]
 800d890:	4611      	mov	r1, r2
 800d892:	4618      	mov	r0, r3
 800d894:	f7fa f88c 	bl	80079b0 <HAL_HCD_HC_GetURBState>
 800d898:	4603      	mov	r3, r0
}
 800d89a:	4618      	mov	r0, r3
 800d89c:	3708      	adds	r7, #8
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	bd80      	pop	{r7, pc}

0800d8a2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800d8a2:	b580      	push	{r7, lr}
 800d8a4:	b082      	sub	sp, #8
 800d8a6:	af00      	add	r7, sp, #0
 800d8a8:	6078      	str	r0, [r7, #4]
 800d8aa:	460b      	mov	r3, r1
 800d8ac:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800d8b4:	2b01      	cmp	r3, #1
 800d8b6:	d103      	bne.n	800d8c0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800d8b8:	78fb      	ldrb	r3, [r7, #3]
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	f000 f872 	bl	800d9a4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800d8c0:	20c8      	movs	r0, #200	; 0xc8
 800d8c2:	f7f9 f9c5 	bl	8006c50 <HAL_Delay>
  return USBH_OK;
 800d8c6:	2300      	movs	r3, #0
}
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	3708      	adds	r7, #8
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	bd80      	pop	{r7, pc}

0800d8d0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800d8d0:	b480      	push	{r7}
 800d8d2:	b085      	sub	sp, #20
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]
 800d8d8:	460b      	mov	r3, r1
 800d8da:	70fb      	strb	r3, [r7, #3]
 800d8dc:	4613      	mov	r3, r2
 800d8de:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d8e6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800d8e8:	78fa      	ldrb	r2, [r7, #3]
 800d8ea:	68f9      	ldr	r1, [r7, #12]
 800d8ec:	4613      	mov	r3, r2
 800d8ee:	009b      	lsls	r3, r3, #2
 800d8f0:	4413      	add	r3, r2
 800d8f2:	00db      	lsls	r3, r3, #3
 800d8f4:	440b      	add	r3, r1
 800d8f6:	333b      	adds	r3, #59	; 0x3b
 800d8f8:	781b      	ldrb	r3, [r3, #0]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d00a      	beq.n	800d914 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800d8fe:	78fa      	ldrb	r2, [r7, #3]
 800d900:	68f9      	ldr	r1, [r7, #12]
 800d902:	4613      	mov	r3, r2
 800d904:	009b      	lsls	r3, r3, #2
 800d906:	4413      	add	r3, r2
 800d908:	00db      	lsls	r3, r3, #3
 800d90a:	440b      	add	r3, r1
 800d90c:	3350      	adds	r3, #80	; 0x50
 800d90e:	78ba      	ldrb	r2, [r7, #2]
 800d910:	701a      	strb	r2, [r3, #0]
 800d912:	e009      	b.n	800d928 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800d914:	78fa      	ldrb	r2, [r7, #3]
 800d916:	68f9      	ldr	r1, [r7, #12]
 800d918:	4613      	mov	r3, r2
 800d91a:	009b      	lsls	r3, r3, #2
 800d91c:	4413      	add	r3, r2
 800d91e:	00db      	lsls	r3, r3, #3
 800d920:	440b      	add	r3, r1
 800d922:	3351      	adds	r3, #81	; 0x51
 800d924:	78ba      	ldrb	r2, [r7, #2]
 800d926:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800d928:	2300      	movs	r3, #0
}
 800d92a:	4618      	mov	r0, r3
 800d92c:	3714      	adds	r7, #20
 800d92e:	46bd      	mov	sp, r7
 800d930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d934:	4770      	bx	lr

0800d936 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800d936:	b580      	push	{r7, lr}
 800d938:	b082      	sub	sp, #8
 800d93a:	af00      	add	r7, sp, #0
 800d93c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800d93e:	6878      	ldr	r0, [r7, #4]
 800d940:	f7f9 f986 	bl	8006c50 <HAL_Delay>
}
 800d944:	bf00      	nop
 800d946:	3708      	adds	r7, #8
 800d948:	46bd      	mov	sp, r7
 800d94a:	bd80      	pop	{r7, pc}

0800d94c <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d94c:	b480      	push	{r7}
 800d94e:	b085      	sub	sp, #20
 800d950:	af00      	add	r7, sp, #0
 800d952:	4603      	mov	r3, r0
 800d954:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d956:	2300      	movs	r3, #0
 800d958:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d95a:	79fb      	ldrb	r3, [r7, #7]
 800d95c:	2b03      	cmp	r3, #3
 800d95e:	d817      	bhi.n	800d990 <USBH_Get_USB_Status+0x44>
 800d960:	a201      	add	r2, pc, #4	; (adr r2, 800d968 <USBH_Get_USB_Status+0x1c>)
 800d962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d966:	bf00      	nop
 800d968:	0800d979 	.word	0x0800d979
 800d96c:	0800d97f 	.word	0x0800d97f
 800d970:	0800d985 	.word	0x0800d985
 800d974:	0800d98b 	.word	0x0800d98b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800d978:	2300      	movs	r3, #0
 800d97a:	73fb      	strb	r3, [r7, #15]
    break;
 800d97c:	e00b      	b.n	800d996 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800d97e:	2302      	movs	r3, #2
 800d980:	73fb      	strb	r3, [r7, #15]
    break;
 800d982:	e008      	b.n	800d996 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800d984:	2301      	movs	r3, #1
 800d986:	73fb      	strb	r3, [r7, #15]
    break;
 800d988:	e005      	b.n	800d996 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800d98a:	2302      	movs	r3, #2
 800d98c:	73fb      	strb	r3, [r7, #15]
    break;
 800d98e:	e002      	b.n	800d996 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800d990:	2302      	movs	r3, #2
 800d992:	73fb      	strb	r3, [r7, #15]
    break;
 800d994:	bf00      	nop
  }
  return usb_status;
 800d996:	7bfb      	ldrb	r3, [r7, #15]
}
 800d998:	4618      	mov	r0, r3
 800d99a:	3714      	adds	r7, #20
 800d99c:	46bd      	mov	sp, r7
 800d99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a2:	4770      	bx	lr

0800d9a4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800d9a4:	b580      	push	{r7, lr}
 800d9a6:	b084      	sub	sp, #16
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	4603      	mov	r3, r0
 800d9ac:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800d9ae:	79fb      	ldrb	r3, [r7, #7]
 800d9b0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800d9b2:	79fb      	ldrb	r3, [r7, #7]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d102      	bne.n	800d9be <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800d9b8:	2301      	movs	r3, #1
 800d9ba:	73fb      	strb	r3, [r7, #15]
 800d9bc:	e001      	b.n	800d9c2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800d9be:	2300      	movs	r3, #0
 800d9c0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800d9c2:	7bfb      	ldrb	r3, [r7, #15]
 800d9c4:	461a      	mov	r2, r3
 800d9c6:	2101      	movs	r1, #1
 800d9c8:	4803      	ldr	r0, [pc, #12]	; (800d9d8 <MX_DriverVbusFS+0x34>)
 800d9ca:	f7f9 fbf7 	bl	80071bc <HAL_GPIO_WritePin>
}
 800d9ce:	bf00      	nop
 800d9d0:	3710      	adds	r7, #16
 800d9d2:	46bd      	mov	sp, r7
 800d9d4:	bd80      	pop	{r7, pc}
 800d9d6:	bf00      	nop
 800d9d8:	40020800 	.word	0x40020800

0800d9dc <_ZdaPv>:
 800d9dc:	f000 b820 	b.w	800da20 <_ZdlPv>

0800d9e0 <__cxa_pure_virtual>:
 800d9e0:	b508      	push	{r3, lr}
 800d9e2:	f000 f82b 	bl	800da3c <_ZSt9terminatev>

0800d9e6 <_Znaj>:
 800d9e6:	f000 b802 	b.w	800d9ee <_Znwj>

0800d9ea <_ZdlPvj>:
 800d9ea:	f000 b819 	b.w	800da20 <_ZdlPv>

0800d9ee <_Znwj>:
 800d9ee:	b510      	push	{r4, lr}
 800d9f0:	2800      	cmp	r0, #0
 800d9f2:	bf14      	ite	ne
 800d9f4:	4604      	movne	r4, r0
 800d9f6:	2401      	moveq	r4, #1
 800d9f8:	4620      	mov	r0, r4
 800d9fa:	f000 f85b 	bl	800dab4 <malloc>
 800d9fe:	b930      	cbnz	r0, 800da0e <_Znwj+0x20>
 800da00:	f000 f806 	bl	800da10 <_ZSt15get_new_handlerv>
 800da04:	b908      	cbnz	r0, 800da0a <_Znwj+0x1c>
 800da06:	f000 f824 	bl	800da52 <abort>
 800da0a:	4780      	blx	r0
 800da0c:	e7f4      	b.n	800d9f8 <_Znwj+0xa>
 800da0e:	bd10      	pop	{r4, pc}

0800da10 <_ZSt15get_new_handlerv>:
 800da10:	4b02      	ldr	r3, [pc, #8]	; (800da1c <_ZSt15get_new_handlerv+0xc>)
 800da12:	6818      	ldr	r0, [r3, #0]
 800da14:	f3bf 8f5b 	dmb	ish
 800da18:	4770      	bx	lr
 800da1a:	bf00      	nop
 800da1c:	200000bc 	.word	0x200000bc

0800da20 <_ZdlPv>:
 800da20:	f000 b850 	b.w	800dac4 <free>

0800da24 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800da24:	b508      	push	{r3, lr}
 800da26:	4780      	blx	r0
 800da28:	f000 f813 	bl	800da52 <abort>

0800da2c <_ZSt13get_terminatev>:
 800da2c:	4b02      	ldr	r3, [pc, #8]	; (800da38 <_ZSt13get_terminatev+0xc>)
 800da2e:	6818      	ldr	r0, [r3, #0]
 800da30:	f3bf 8f5b 	dmb	ish
 800da34:	4770      	bx	lr
 800da36:	bf00      	nop
 800da38:	2000002c 	.word	0x2000002c

0800da3c <_ZSt9terminatev>:
 800da3c:	b508      	push	{r3, lr}
 800da3e:	f7ff fff5 	bl	800da2c <_ZSt13get_terminatev>
 800da42:	f7ff ffef 	bl	800da24 <_ZN10__cxxabiv111__terminateEPFvvE>

0800da46 <_ZSt17__throw_bad_allocv>:
 800da46:	b508      	push	{r3, lr}
 800da48:	f000 f803 	bl	800da52 <abort>

0800da4c <_ZSt20__throw_length_errorPKc>:
 800da4c:	b508      	push	{r3, lr}
 800da4e:	f000 f800 	bl	800da52 <abort>

0800da52 <abort>:
 800da52:	b508      	push	{r3, lr}
 800da54:	2006      	movs	r0, #6
 800da56:	f000 f925 	bl	800dca4 <raise>
 800da5a:	2001      	movs	r0, #1
 800da5c:	f7f9 f806 	bl	8006a6c <_exit>

0800da60 <__errno>:
 800da60:	4b01      	ldr	r3, [pc, #4]	; (800da68 <__errno+0x8>)
 800da62:	6818      	ldr	r0, [r3, #0]
 800da64:	4770      	bx	lr
 800da66:	bf00      	nop
 800da68:	20000030 	.word	0x20000030

0800da6c <__libc_init_array>:
 800da6c:	b570      	push	{r4, r5, r6, lr}
 800da6e:	4e0d      	ldr	r6, [pc, #52]	; (800daa4 <__libc_init_array+0x38>)
 800da70:	4c0d      	ldr	r4, [pc, #52]	; (800daa8 <__libc_init_array+0x3c>)
 800da72:	1ba4      	subs	r4, r4, r6
 800da74:	10a4      	asrs	r4, r4, #2
 800da76:	2500      	movs	r5, #0
 800da78:	42a5      	cmp	r5, r4
 800da7a:	d109      	bne.n	800da90 <__libc_init_array+0x24>
 800da7c:	4e0b      	ldr	r6, [pc, #44]	; (800daac <__libc_init_array+0x40>)
 800da7e:	4c0c      	ldr	r4, [pc, #48]	; (800dab0 <__libc_init_array+0x44>)
 800da80:	f000 f92e 	bl	800dce0 <_init>
 800da84:	1ba4      	subs	r4, r4, r6
 800da86:	10a4      	asrs	r4, r4, #2
 800da88:	2500      	movs	r5, #0
 800da8a:	42a5      	cmp	r5, r4
 800da8c:	d105      	bne.n	800da9a <__libc_init_array+0x2e>
 800da8e:	bd70      	pop	{r4, r5, r6, pc}
 800da90:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800da94:	4798      	blx	r3
 800da96:	3501      	adds	r5, #1
 800da98:	e7ee      	b.n	800da78 <__libc_init_array+0xc>
 800da9a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800da9e:	4798      	blx	r3
 800daa0:	3501      	adds	r5, #1
 800daa2:	e7f2      	b.n	800da8a <__libc_init_array+0x1e>
 800daa4:	0800de98 	.word	0x0800de98
 800daa8:	0800de98 	.word	0x0800de98
 800daac:	0800de98 	.word	0x0800de98
 800dab0:	0800de9c 	.word	0x0800de9c

0800dab4 <malloc>:
 800dab4:	4b02      	ldr	r3, [pc, #8]	; (800dac0 <malloc+0xc>)
 800dab6:	4601      	mov	r1, r0
 800dab8:	6818      	ldr	r0, [r3, #0]
 800daba:	f000 b861 	b.w	800db80 <_malloc_r>
 800dabe:	bf00      	nop
 800dac0:	20000030 	.word	0x20000030

0800dac4 <free>:
 800dac4:	4b02      	ldr	r3, [pc, #8]	; (800dad0 <free+0xc>)
 800dac6:	4601      	mov	r1, r0
 800dac8:	6818      	ldr	r0, [r3, #0]
 800daca:	f000 b80b 	b.w	800dae4 <_free_r>
 800dace:	bf00      	nop
 800dad0:	20000030 	.word	0x20000030

0800dad4 <memset>:
 800dad4:	4402      	add	r2, r0
 800dad6:	4603      	mov	r3, r0
 800dad8:	4293      	cmp	r3, r2
 800dada:	d100      	bne.n	800dade <memset+0xa>
 800dadc:	4770      	bx	lr
 800dade:	f803 1b01 	strb.w	r1, [r3], #1
 800dae2:	e7f9      	b.n	800dad8 <memset+0x4>

0800dae4 <_free_r>:
 800dae4:	b538      	push	{r3, r4, r5, lr}
 800dae6:	4605      	mov	r5, r0
 800dae8:	2900      	cmp	r1, #0
 800daea:	d045      	beq.n	800db78 <_free_r+0x94>
 800daec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800daf0:	1f0c      	subs	r4, r1, #4
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	bfb8      	it	lt
 800daf6:	18e4      	addlt	r4, r4, r3
 800daf8:	f000 f8f0 	bl	800dcdc <__malloc_lock>
 800dafc:	4a1f      	ldr	r2, [pc, #124]	; (800db7c <_free_r+0x98>)
 800dafe:	6813      	ldr	r3, [r2, #0]
 800db00:	4610      	mov	r0, r2
 800db02:	b933      	cbnz	r3, 800db12 <_free_r+0x2e>
 800db04:	6063      	str	r3, [r4, #4]
 800db06:	6014      	str	r4, [r2, #0]
 800db08:	4628      	mov	r0, r5
 800db0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800db0e:	f000 b8e6 	b.w	800dcde <__malloc_unlock>
 800db12:	42a3      	cmp	r3, r4
 800db14:	d90c      	bls.n	800db30 <_free_r+0x4c>
 800db16:	6821      	ldr	r1, [r4, #0]
 800db18:	1862      	adds	r2, r4, r1
 800db1a:	4293      	cmp	r3, r2
 800db1c:	bf04      	itt	eq
 800db1e:	681a      	ldreq	r2, [r3, #0]
 800db20:	685b      	ldreq	r3, [r3, #4]
 800db22:	6063      	str	r3, [r4, #4]
 800db24:	bf04      	itt	eq
 800db26:	1852      	addeq	r2, r2, r1
 800db28:	6022      	streq	r2, [r4, #0]
 800db2a:	6004      	str	r4, [r0, #0]
 800db2c:	e7ec      	b.n	800db08 <_free_r+0x24>
 800db2e:	4613      	mov	r3, r2
 800db30:	685a      	ldr	r2, [r3, #4]
 800db32:	b10a      	cbz	r2, 800db38 <_free_r+0x54>
 800db34:	42a2      	cmp	r2, r4
 800db36:	d9fa      	bls.n	800db2e <_free_r+0x4a>
 800db38:	6819      	ldr	r1, [r3, #0]
 800db3a:	1858      	adds	r0, r3, r1
 800db3c:	42a0      	cmp	r0, r4
 800db3e:	d10b      	bne.n	800db58 <_free_r+0x74>
 800db40:	6820      	ldr	r0, [r4, #0]
 800db42:	4401      	add	r1, r0
 800db44:	1858      	adds	r0, r3, r1
 800db46:	4282      	cmp	r2, r0
 800db48:	6019      	str	r1, [r3, #0]
 800db4a:	d1dd      	bne.n	800db08 <_free_r+0x24>
 800db4c:	6810      	ldr	r0, [r2, #0]
 800db4e:	6852      	ldr	r2, [r2, #4]
 800db50:	605a      	str	r2, [r3, #4]
 800db52:	4401      	add	r1, r0
 800db54:	6019      	str	r1, [r3, #0]
 800db56:	e7d7      	b.n	800db08 <_free_r+0x24>
 800db58:	d902      	bls.n	800db60 <_free_r+0x7c>
 800db5a:	230c      	movs	r3, #12
 800db5c:	602b      	str	r3, [r5, #0]
 800db5e:	e7d3      	b.n	800db08 <_free_r+0x24>
 800db60:	6820      	ldr	r0, [r4, #0]
 800db62:	1821      	adds	r1, r4, r0
 800db64:	428a      	cmp	r2, r1
 800db66:	bf04      	itt	eq
 800db68:	6811      	ldreq	r1, [r2, #0]
 800db6a:	6852      	ldreq	r2, [r2, #4]
 800db6c:	6062      	str	r2, [r4, #4]
 800db6e:	bf04      	itt	eq
 800db70:	1809      	addeq	r1, r1, r0
 800db72:	6021      	streq	r1, [r4, #0]
 800db74:	605c      	str	r4, [r3, #4]
 800db76:	e7c7      	b.n	800db08 <_free_r+0x24>
 800db78:	bd38      	pop	{r3, r4, r5, pc}
 800db7a:	bf00      	nop
 800db7c:	200000c0 	.word	0x200000c0

0800db80 <_malloc_r>:
 800db80:	b570      	push	{r4, r5, r6, lr}
 800db82:	1ccd      	adds	r5, r1, #3
 800db84:	f025 0503 	bic.w	r5, r5, #3
 800db88:	3508      	adds	r5, #8
 800db8a:	2d0c      	cmp	r5, #12
 800db8c:	bf38      	it	cc
 800db8e:	250c      	movcc	r5, #12
 800db90:	2d00      	cmp	r5, #0
 800db92:	4606      	mov	r6, r0
 800db94:	db01      	blt.n	800db9a <_malloc_r+0x1a>
 800db96:	42a9      	cmp	r1, r5
 800db98:	d903      	bls.n	800dba2 <_malloc_r+0x22>
 800db9a:	230c      	movs	r3, #12
 800db9c:	6033      	str	r3, [r6, #0]
 800db9e:	2000      	movs	r0, #0
 800dba0:	bd70      	pop	{r4, r5, r6, pc}
 800dba2:	f000 f89b 	bl	800dcdc <__malloc_lock>
 800dba6:	4a21      	ldr	r2, [pc, #132]	; (800dc2c <_malloc_r+0xac>)
 800dba8:	6814      	ldr	r4, [r2, #0]
 800dbaa:	4621      	mov	r1, r4
 800dbac:	b991      	cbnz	r1, 800dbd4 <_malloc_r+0x54>
 800dbae:	4c20      	ldr	r4, [pc, #128]	; (800dc30 <_malloc_r+0xb0>)
 800dbb0:	6823      	ldr	r3, [r4, #0]
 800dbb2:	b91b      	cbnz	r3, 800dbbc <_malloc_r+0x3c>
 800dbb4:	4630      	mov	r0, r6
 800dbb6:	f000 f83d 	bl	800dc34 <_sbrk_r>
 800dbba:	6020      	str	r0, [r4, #0]
 800dbbc:	4629      	mov	r1, r5
 800dbbe:	4630      	mov	r0, r6
 800dbc0:	f000 f838 	bl	800dc34 <_sbrk_r>
 800dbc4:	1c43      	adds	r3, r0, #1
 800dbc6:	d124      	bne.n	800dc12 <_malloc_r+0x92>
 800dbc8:	230c      	movs	r3, #12
 800dbca:	6033      	str	r3, [r6, #0]
 800dbcc:	4630      	mov	r0, r6
 800dbce:	f000 f886 	bl	800dcde <__malloc_unlock>
 800dbd2:	e7e4      	b.n	800db9e <_malloc_r+0x1e>
 800dbd4:	680b      	ldr	r3, [r1, #0]
 800dbd6:	1b5b      	subs	r3, r3, r5
 800dbd8:	d418      	bmi.n	800dc0c <_malloc_r+0x8c>
 800dbda:	2b0b      	cmp	r3, #11
 800dbdc:	d90f      	bls.n	800dbfe <_malloc_r+0x7e>
 800dbde:	600b      	str	r3, [r1, #0]
 800dbe0:	50cd      	str	r5, [r1, r3]
 800dbe2:	18cc      	adds	r4, r1, r3
 800dbe4:	4630      	mov	r0, r6
 800dbe6:	f000 f87a 	bl	800dcde <__malloc_unlock>
 800dbea:	f104 000b 	add.w	r0, r4, #11
 800dbee:	1d23      	adds	r3, r4, #4
 800dbf0:	f020 0007 	bic.w	r0, r0, #7
 800dbf4:	1ac3      	subs	r3, r0, r3
 800dbf6:	d0d3      	beq.n	800dba0 <_malloc_r+0x20>
 800dbf8:	425a      	negs	r2, r3
 800dbfa:	50e2      	str	r2, [r4, r3]
 800dbfc:	e7d0      	b.n	800dba0 <_malloc_r+0x20>
 800dbfe:	428c      	cmp	r4, r1
 800dc00:	684b      	ldr	r3, [r1, #4]
 800dc02:	bf16      	itet	ne
 800dc04:	6063      	strne	r3, [r4, #4]
 800dc06:	6013      	streq	r3, [r2, #0]
 800dc08:	460c      	movne	r4, r1
 800dc0a:	e7eb      	b.n	800dbe4 <_malloc_r+0x64>
 800dc0c:	460c      	mov	r4, r1
 800dc0e:	6849      	ldr	r1, [r1, #4]
 800dc10:	e7cc      	b.n	800dbac <_malloc_r+0x2c>
 800dc12:	1cc4      	adds	r4, r0, #3
 800dc14:	f024 0403 	bic.w	r4, r4, #3
 800dc18:	42a0      	cmp	r0, r4
 800dc1a:	d005      	beq.n	800dc28 <_malloc_r+0xa8>
 800dc1c:	1a21      	subs	r1, r4, r0
 800dc1e:	4630      	mov	r0, r6
 800dc20:	f000 f808 	bl	800dc34 <_sbrk_r>
 800dc24:	3001      	adds	r0, #1
 800dc26:	d0cf      	beq.n	800dbc8 <_malloc_r+0x48>
 800dc28:	6025      	str	r5, [r4, #0]
 800dc2a:	e7db      	b.n	800dbe4 <_malloc_r+0x64>
 800dc2c:	200000c0 	.word	0x200000c0
 800dc30:	200000c4 	.word	0x200000c4

0800dc34 <_sbrk_r>:
 800dc34:	b538      	push	{r3, r4, r5, lr}
 800dc36:	4c06      	ldr	r4, [pc, #24]	; (800dc50 <_sbrk_r+0x1c>)
 800dc38:	2300      	movs	r3, #0
 800dc3a:	4605      	mov	r5, r0
 800dc3c:	4608      	mov	r0, r1
 800dc3e:	6023      	str	r3, [r4, #0]
 800dc40:	f7f8 ff1e 	bl	8006a80 <_sbrk>
 800dc44:	1c43      	adds	r3, r0, #1
 800dc46:	d102      	bne.n	800dc4e <_sbrk_r+0x1a>
 800dc48:	6823      	ldr	r3, [r4, #0]
 800dc4a:	b103      	cbz	r3, 800dc4e <_sbrk_r+0x1a>
 800dc4c:	602b      	str	r3, [r5, #0]
 800dc4e:	bd38      	pop	{r3, r4, r5, pc}
 800dc50:	200008a4 	.word	0x200008a4

0800dc54 <_raise_r>:
 800dc54:	291f      	cmp	r1, #31
 800dc56:	b538      	push	{r3, r4, r5, lr}
 800dc58:	4604      	mov	r4, r0
 800dc5a:	460d      	mov	r5, r1
 800dc5c:	d904      	bls.n	800dc68 <_raise_r+0x14>
 800dc5e:	2316      	movs	r3, #22
 800dc60:	6003      	str	r3, [r0, #0]
 800dc62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dc66:	bd38      	pop	{r3, r4, r5, pc}
 800dc68:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800dc6a:	b112      	cbz	r2, 800dc72 <_raise_r+0x1e>
 800dc6c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dc70:	b94b      	cbnz	r3, 800dc86 <_raise_r+0x32>
 800dc72:	4620      	mov	r0, r4
 800dc74:	f000 f830 	bl	800dcd8 <_getpid_r>
 800dc78:	462a      	mov	r2, r5
 800dc7a:	4601      	mov	r1, r0
 800dc7c:	4620      	mov	r0, r4
 800dc7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc82:	f000 b817 	b.w	800dcb4 <_kill_r>
 800dc86:	2b01      	cmp	r3, #1
 800dc88:	d00a      	beq.n	800dca0 <_raise_r+0x4c>
 800dc8a:	1c59      	adds	r1, r3, #1
 800dc8c:	d103      	bne.n	800dc96 <_raise_r+0x42>
 800dc8e:	2316      	movs	r3, #22
 800dc90:	6003      	str	r3, [r0, #0]
 800dc92:	2001      	movs	r0, #1
 800dc94:	e7e7      	b.n	800dc66 <_raise_r+0x12>
 800dc96:	2400      	movs	r4, #0
 800dc98:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dc9c:	4628      	mov	r0, r5
 800dc9e:	4798      	blx	r3
 800dca0:	2000      	movs	r0, #0
 800dca2:	e7e0      	b.n	800dc66 <_raise_r+0x12>

0800dca4 <raise>:
 800dca4:	4b02      	ldr	r3, [pc, #8]	; (800dcb0 <raise+0xc>)
 800dca6:	4601      	mov	r1, r0
 800dca8:	6818      	ldr	r0, [r3, #0]
 800dcaa:	f7ff bfd3 	b.w	800dc54 <_raise_r>
 800dcae:	bf00      	nop
 800dcb0:	20000030 	.word	0x20000030

0800dcb4 <_kill_r>:
 800dcb4:	b538      	push	{r3, r4, r5, lr}
 800dcb6:	4c07      	ldr	r4, [pc, #28]	; (800dcd4 <_kill_r+0x20>)
 800dcb8:	2300      	movs	r3, #0
 800dcba:	4605      	mov	r5, r0
 800dcbc:	4608      	mov	r0, r1
 800dcbe:	4611      	mov	r1, r2
 800dcc0:	6023      	str	r3, [r4, #0]
 800dcc2:	f7f8 fec3 	bl	8006a4c <_kill>
 800dcc6:	1c43      	adds	r3, r0, #1
 800dcc8:	d102      	bne.n	800dcd0 <_kill_r+0x1c>
 800dcca:	6823      	ldr	r3, [r4, #0]
 800dccc:	b103      	cbz	r3, 800dcd0 <_kill_r+0x1c>
 800dcce:	602b      	str	r3, [r5, #0]
 800dcd0:	bd38      	pop	{r3, r4, r5, pc}
 800dcd2:	bf00      	nop
 800dcd4:	200008a4 	.word	0x200008a4

0800dcd8 <_getpid_r>:
 800dcd8:	f7f8 beb0 	b.w	8006a3c <_getpid>

0800dcdc <__malloc_lock>:
 800dcdc:	4770      	bx	lr

0800dcde <__malloc_unlock>:
 800dcde:	4770      	bx	lr

0800dce0 <_init>:
 800dce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dce2:	bf00      	nop
 800dce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dce6:	bc08      	pop	{r3}
 800dce8:	469e      	mov	lr, r3
 800dcea:	4770      	bx	lr

0800dcec <_fini>:
 800dcec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcee:	bf00      	nop
 800dcf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dcf2:	bc08      	pop	{r3}
 800dcf4:	469e      	mov	lr, r3
 800dcf6:	4770      	bx	lr
