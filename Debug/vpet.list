
vpet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000db38  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  0800dcd0  0800dcd0  0001dcd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800de68  0800de68  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800de68  0800de68  0001de68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800de70  0800de70  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800de70  0800de70  0001de70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800de74  0800de74  0001de74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800de78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000814  20000094  0800df0c  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008a8  0800df0c  000208a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004cb58  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000076af  00000000  00000000  0006cc1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000029f8  00000000  00000000  000742d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000027d8  00000000  00000000  00076cc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000209ad  00000000  00000000  000794a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001fd3f  00000000  00000000  00099e4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b6361  00000000  00000000  000b9b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016feed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bd40  00000000  00000000  0016ff68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000094 	.word	0x20000094
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800dcb8 	.word	0x0800dcb8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000098 	.word	0x20000098
 80001d4:	0800dcb8 	.word	0x0800dcb8

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <_ZN4tama5Vec2dplES0_>:
//

#include "Vec2d.h"

tama::Vec2d tama::Vec2d::operator+(tama::Vec2d delta)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af00      	add	r7, sp, #0
 80004de:	60f8      	str	r0, [r7, #12]
 80004e0:	60b9      	str	r1, [r7, #8]
 80004e2:	4639      	mov	r1, r7
 80004e4:	e881 000c 	stmia.w	r1, {r2, r3}
    return Vec2d(this->x + delta.x, this->y + delta.y);
 80004e8:	68bb      	ldr	r3, [r7, #8]
 80004ea:	681a      	ldr	r2, [r3, #0]
 80004ec:	683b      	ldr	r3, [r7, #0]
 80004ee:	18d1      	adds	r1, r2, r3
 80004f0:	68bb      	ldr	r3, [r7, #8]
 80004f2:	685a      	ldr	r2, [r3, #4]
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	4413      	add	r3, r2
 80004f8:	461a      	mov	r2, r3
 80004fa:	68f8      	ldr	r0, [r7, #12]
 80004fc:	f000 f804 	bl	8000508 <_ZN4tama5Vec2dC1Eii>
}
 8000500:	68f8      	ldr	r0, [r7, #12]
 8000502:	3710      	adds	r7, #16
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}

08000508 <_ZN4tama5Vec2dC1Eii>:

tama::Vec2d::Vec2d(int i, int j)
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	60f8      	str	r0, [r7, #12]
 8000510:	60b9      	str	r1, [r7, #8]
 8000512:	607a      	str	r2, [r7, #4]
{
    x = i;
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	68ba      	ldr	r2, [r7, #8]
 8000518:	601a      	str	r2, [r3, #0]
    y = j;
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	687a      	ldr	r2, [r7, #4]
 800051e:	605a      	str	r2, [r3, #4]
}
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	4618      	mov	r0, r3
 8000524:	3714      	adds	r7, #20
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr

0800052e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>:
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 800052e:	b480      	push	{r7}
 8000530:	b083      	sub	sp, #12
 8000532:	af00      	add	r7, sp, #0
 8000534:	6078      	str	r0, [r7, #4]
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	685b      	ldr	r3, [r3, #4]
 800053a:	1c5a      	adds	r2, r3, #1
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	605a      	str	r2, [r3, #4]
 8000540:	bf00      	nop
 8000542:	370c      	adds	r7, #12
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr

0800054c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	6039      	str	r1, [r7, #0]
      : _M_pi(__r._M_pi)
 8000556:	683b      	ldr	r3, [r7, #0]
 8000558:	681a      	ldr	r2, [r3, #0]
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	601a      	str	r2, [r3, #0]
      {
	if (_M_pi != 0)
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	2b00      	cmp	r3, #0
 8000564:	d004      	beq.n	8000570 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0x24>
	  _M_pi->_M_add_ref_copy();
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4618      	mov	r0, r3
 800056c:	f7ff ffdf 	bl	800052e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>
      }
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	4618      	mov	r0, r3
 8000574:	3708      	adds	r7, #8
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}

0800057a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
 800057a:	b580      	push	{r7, lr}
 800057c:	b082      	sub	sp, #8
 800057e:	af00      	add	r7, sp, #0
 8000580:	6078      	str	r0, [r7, #4]
      if (--_M_use_count == 0)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	685b      	ldr	r3, [r3, #4]
 8000586:	1e5a      	subs	r2, r3, #1
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	685b      	ldr	r3, [r3, #4]
 8000590:	2b00      	cmp	r3, #0
 8000592:	bf0c      	ite	eq
 8000594:	2301      	moveq	r3, #1
 8000596:	2300      	movne	r3, #0
 8000598:	b2db      	uxtb	r3, r3
 800059a:	2b00      	cmp	r3, #0
 800059c:	d019      	beq.n	80005d2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
          _M_dispose();
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	3308      	adds	r3, #8
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	6878      	ldr	r0, [r7, #4]
 80005a8:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	689b      	ldr	r3, [r3, #8]
 80005ae:	1e5a      	subs	r2, r3, #1
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	689b      	ldr	r3, [r3, #8]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	bf0c      	ite	eq
 80005bc:	2301      	moveq	r3, #1
 80005be:	2300      	movne	r3, #0
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d005      	beq.n	80005d2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
            _M_destroy();
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	330c      	adds	r3, #12
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	6878      	ldr	r0, [r7, #4]
 80005d0:	4798      	blx	r3
    }
 80005d2:	bf00      	nop
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}

080005da <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EEaSERKS4_>:
      _M_get() const noexcept
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
    };

  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
 80005da:	b580      	push	{r7, lr}
 80005dc:	b082      	sub	sp, #8
 80005de:	af00      	add	r7, sp, #0
 80005e0:	6078      	str	r0, [r7, #4]
 80005e2:	6039      	str	r1, [r7, #0]
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	681a      	ldr	r2, [r3, #0]
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	1d1a      	adds	r2, r3, #4
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	3304      	adds	r3, #4
 80005f4:	4619      	mov	r1, r3
 80005f6:	4610      	mov	r0, r2
 80005f8:	f000 f982 	bl	8000900 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	4618      	mov	r0, r3
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}

08000606 <_ZNSt10shared_ptrIN4tama7TextureEEaSERKS2_>:
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
 8000606:	b580      	push	{r7, lr}
 8000608:	b082      	sub	sp, #8
 800060a:	af00      	add	r7, sp, #0
 800060c:	6078      	str	r0, [r7, #4]
 800060e:	6039      	str	r1, [r7, #0]
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	683a      	ldr	r2, [r7, #0]
 8000614:	4611      	mov	r1, r2
 8000616:	4618      	mov	r0, r3
 8000618:	f7ff ffdf 	bl	80005da <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EEaSERKS4_>
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	4618      	mov	r0, r3
 8000620:	3708      	adds	r7, #8
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}

08000626 <_ZN4tama6Sprite10setTextureESt10shared_ptrINS_7TextureEE>:
//

#include "Sprite.h"

void tama::Sprite::setTexture(std::shared_ptr<tama::Texture> texture)
{
 8000626:	b580      	push	{r7, lr}
 8000628:	b082      	sub	sp, #8
 800062a:	af00      	add	r7, sp, #0
 800062c:	6078      	str	r0, [r7, #4]
 800062e:	6039      	str	r1, [r7, #0]
    this->texture = texture;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	3304      	adds	r3, #4
 8000634:	6839      	ldr	r1, [r7, #0]
 8000636:	4618      	mov	r0, r3
 8000638:	f7ff ffe5 	bl	8000606 <_ZNSt10shared_ptrIN4tama7TextureEEaSERKS2_>
}
 800063c:	bf00      	nop
 800063e:	3708      	adds	r7, #8
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}

08000644 <_ZN4tama6Sprite11setPositionENS_5Vec2dE>:

void tama::Sprite::setPosition(tama::Vec2d position)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	60f8      	str	r0, [r7, #12]
 800064c:	1d3b      	adds	r3, r7, #4
 800064e:	e883 0006 	stmia.w	r3, {r1, r2}
    this->position = position;
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	330c      	adds	r3, #12
 8000656:	1d3a      	adds	r2, r7, #4
 8000658:	e892 0003 	ldmia.w	r2, {r0, r1}
 800065c:	e883 0003 	stmia.w	r3, {r0, r1}
    notifyObserver();
 8000660:	68f8      	ldr	r0, [r7, #12]
 8000662:	f000 f8c8 	bl	80007f6 <_ZN4tama6Sprite14notifyObserverEv>
}
 8000666:	bf00      	nop
 8000668:	3710      	adds	r7, #16
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}

0800066e <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 800066e:	b580      	push	{r7, lr}
 8000670:	b082      	sub	sp, #8
 8000672:	af00      	add	r7, sp, #0
 8000674:	6078      	str	r0, [r7, #4]
 8000676:	6039      	str	r1, [r7, #0]
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	681a      	ldr	r2, [r3, #0]
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	1d1a      	adds	r2, r3, #4
 8000684:	683b      	ldr	r3, [r7, #0]
 8000686:	3304      	adds	r3, #4
 8000688:	4619      	mov	r1, r3
 800068a:	4610      	mov	r0, r2
 800068c:	f7ff ff5e 	bl	800054c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	4618      	mov	r0, r3
 8000694:	3708      	adds	r7, #8
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}

0800069a <_ZNSt10shared_ptrIN4tama7TextureEEC1ERKS2_>:
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
 800069a:	b580      	push	{r7, lr}
 800069c:	b082      	sub	sp, #8
 800069e:	af00      	add	r7, sp, #0
 80006a0:	6078      	str	r0, [r7, #4]
 80006a2:	6039      	str	r1, [r7, #0]
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	683a      	ldr	r2, [r7, #0]
 80006a8:	4611      	mov	r1, r2
 80006aa:	4618      	mov	r0, r3
 80006ac:	f7ff ffdf 	bl	800066e <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	4618      	mov	r0, r3
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}

080006ba <_ZN4tama6Sprite10getTextureEv>:

std::shared_ptr<tama::Texture> tama::Sprite::getTexture()
{
 80006ba:	b580      	push	{r7, lr}
 80006bc:	b082      	sub	sp, #8
 80006be:	af00      	add	r7, sp, #0
 80006c0:	6078      	str	r0, [r7, #4]
 80006c2:	6039      	str	r1, [r7, #0]
    return texture;
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	3304      	adds	r3, #4
 80006c8:	4619      	mov	r1, r3
 80006ca:	6878      	ldr	r0, [r7, #4]
 80006cc:	f7ff ffe5 	bl	800069a <_ZNSt10shared_ptrIN4tama7TextureEEC1ERKS2_>
}
 80006d0:	6878      	ldr	r0, [r7, #4]
 80006d2:	3708      	adds	r7, #8
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <_ZN4tama6Sprite11getPositionEv>:

tama::Vec2d tama::Sprite::getPosition()
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
 80006e0:	6039      	str	r1, [r7, #0]
    return position;
 80006e2:	687a      	ldr	r2, [r7, #4]
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	330c      	adds	r3, #12
 80006e8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80006ec:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80006f0:	6878      	ldr	r0, [r7, #4]
 80006f2:	370c      	adds	r7, #12
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr

080006fc <_ZN4tama6Sprite4moveENS_5Vec2dE>:

void tama::Sprite::move(tama::Vec2d delta)
{
 80006fc:	b590      	push	{r4, r7, lr}
 80006fe:	b087      	sub	sp, #28
 8000700:	af00      	add	r7, sp, #0
 8000702:	6178      	str	r0, [r7, #20]
 8000704:	f107 030c 	add.w	r3, r7, #12
 8000708:	e883 0006 	stmia.w	r3, {r1, r2}
    position = position + delta;
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	f103 010c 	add.w	r1, r3, #12
 8000712:	697c      	ldr	r4, [r7, #20]
 8000714:	4638      	mov	r0, r7
 8000716:	f107 030c 	add.w	r3, r7, #12
 800071a:	cb0c      	ldmia	r3, {r2, r3}
 800071c:	f7ff fedc 	bl	80004d8 <_ZN4tama5Vec2dplES0_>
 8000720:	f104 030c 	add.w	r3, r4, #12
 8000724:	463a      	mov	r2, r7
 8000726:	e892 0003 	ldmia.w	r2, {r0, r1}
 800072a:	e883 0003 	stmia.w	r3, {r0, r1}
    notifyObserver();
 800072e:	6978      	ldr	r0, [r7, #20]
 8000730:	f000 f861 	bl	80007f6 <_ZN4tama6Sprite14notifyObserverEv>
}
 8000734:	bf00      	nop
 8000736:	371c      	adds	r7, #28
 8000738:	46bd      	mov	sp, r7
 800073a:	bd90      	pop	{r4, r7, pc}

0800073c <_ZN4tama6Sprite4hideEv>:

void tama::Sprite::hide()
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
    visible = false;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	2200      	movs	r2, #0
 8000748:	751a      	strb	r2, [r3, #20]
    notifyObserver();
 800074a:	6878      	ldr	r0, [r7, #4]
 800074c:	f000 f853 	bl	80007f6 <_ZN4tama6Sprite14notifyObserverEv>
}
 8000750:	bf00      	nop
 8000752:	3708      	adds	r7, #8
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}

08000758 <_ZN4tama6Sprite4showEv>:

void tama::Sprite::show()
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
    visible = true;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	2201      	movs	r2, #1
 8000764:	751a      	strb	r2, [r3, #20]
    notifyObserver();
 8000766:	6878      	ldr	r0, [r7, #4]
 8000768:	f000 f845 	bl	80007f6 <_ZN4tama6Sprite14notifyObserverEv>
}
 800076c:	bf00      	nop
 800076e:	3708      	adds	r7, #8
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}

08000774 <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEaSERKS4_>:
    class __shared_ptr
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	6039      	str	r1, [r7, #0]
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	681a      	ldr	r2, [r3, #0]
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	1d1a      	adds	r2, r3, #4
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	3304      	adds	r3, #4
 800078e:	4619      	mov	r1, r3
 8000790:	4610      	mov	r0, r2
 8000792:	f000 f8b5 	bl	8000900 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	4618      	mov	r0, r3
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}

080007a0 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEaSERKS2_>:
    class shared_ptr : public __shared_ptr<_Tp>
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	6039      	str	r1, [r7, #0]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	683a      	ldr	r2, [r7, #0]
 80007ae:	4611      	mov	r1, r2
 80007b0:	4618      	mov	r0, r3
 80007b2:	f7ff ffdf 	bl	8000774 <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEaSERKS4_>
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	4618      	mov	r0, r3
 80007ba:	3708      	adds	r7, #8
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}

080007c0 <_ZN4tama6Sprite17setChangeObserverESt10shared_ptrINS_14ChangeObserverEE>:

void tama::Sprite::setChangeObserver(std::shared_ptr<tama::ChangeObserver> observer)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	6039      	str	r1, [r7, #0]
    this->observer = observer;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	3318      	adds	r3, #24
 80007ce:	6839      	ldr	r1, [r7, #0]
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff ffe5 	bl	80007a0 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEaSERKS2_>
}
 80007d6:	bf00      	nop
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}

080007de <_ZN4tama6Sprite9isVisibleEv>:

bool tama::Sprite::isVisible()
{
 80007de:	b480      	push	{r7}
 80007e0:	b083      	sub	sp, #12
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	6078      	str	r0, [r7, #4]
    return visible;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	7d1b      	ldrb	r3, [r3, #20]
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	370c      	adds	r7, #12
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr

080007f6 <_ZN4tama6Sprite14notifyObserverEv>:

void tama::Sprite::notifyObserver()
{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	b082      	sub	sp, #8
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	6078      	str	r0, [r7, #4]
    if (observer != nullptr)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	3318      	adds	r3, #24
 8000802:	2100      	movs	r1, #0
 8000804:	4618      	mov	r0, r3
 8000806:	f000 f8b1 	bl	800096c <_ZStneIN4tama14ChangeObserverEEbRKSt10shared_ptrIT_EDn>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d009      	beq.n	8000824 <_ZN4tama6Sprite14notifyObserverEv+0x2e>
    {
        observer->onChange();
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	3318      	adds	r3, #24
 8000814:	4618      	mov	r0, r3
 8000816:	f000 f8b7 	bl	8000988 <_ZNKSt19__shared_ptr_accessIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800081a:	4602      	mov	r2, r0
 800081c:	6813      	ldr	r3, [r2, #0]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4610      	mov	r0, r2
 8000822:	4798      	blx	r3
    }
}
 8000824:	bf00      	nop
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}

0800082c <_ZN4tama8DrawableC1Ev>:
#include "../../../common/observers/ChangeObserver.h"
#include "texture.h"

namespace tama
{
    class Drawable
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
 8000834:	4a04      	ldr	r2, [pc, #16]	; (8000848 <_ZN4tama8DrawableC1Ev+0x1c>)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	4618      	mov	r0, r3
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr
 8000848:	0800dd24 	.word	0x0800dd24

0800084c <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	3304      	adds	r3, #4
 8000858:	4618      	mov	r0, r3
 800085a:	f000 f875 	bl	8000948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4618      	mov	r0, r3
 8000862:	3708      	adds	r7, #8
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}

08000868 <_ZNSt10shared_ptrIN4tama14ChangeObserverEED1Ev>:
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff ffea 	bl	800084c <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	4618      	mov	r0, r3
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
	...

08000884 <_ZN4tama6SpriteC1ERKSt10shared_ptrINS_7TextureEERKNS_5Vec2dE>:

tama::Sprite::Sprite(const std::shared_ptr<Texture> &texture, const tama::Vec2d &position) : texture(texture),
 8000884:	b590      	push	{r4, r7, lr}
 8000886:	b087      	sub	sp, #28
 8000888:	af00      	add	r7, sp, #0
 800088a:	60f8      	str	r0, [r7, #12]
 800088c:	60b9      	str	r1, [r7, #8]
 800088e:	607a      	str	r2, [r7, #4]
                                                                                             position(position)
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	4618      	mov	r0, r3
 8000894:	f7ff ffca 	bl	800082c <_ZN4tama8DrawableC1Ev>
 8000898:	4a18      	ldr	r2, [pc, #96]	; (80008fc <_ZN4tama6SpriteC1ERKSt10shared_ptrINS_7TextureEERKNS_5Vec2dE+0x78>)
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	3304      	adds	r3, #4
 80008a2:	68b9      	ldr	r1, [r7, #8]
 80008a4:	4618      	mov	r0, r3
 80008a6:	f7ff fef8 	bl	800069a <_ZNSt10shared_ptrIN4tama7TextureEEC1ERKS2_>
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	687a      	ldr	r2, [r7, #4]
 80008ae:	330c      	adds	r3, #12
 80008b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008b4:	e883 0003 	stmia.w	r3, {r0, r1}
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	3318      	adds	r3, #24
 80008bc:	4618      	mov	r0, r3
 80008be:	f000 f86f 	bl	80009a0 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEC1Ev>
{
    observer = nullptr;
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	f103 0418 	add.w	r4, r3, #24
 80008c8:	f107 0310 	add.w	r3, r7, #16
 80008cc:	2100      	movs	r1, #0
 80008ce:	4618      	mov	r0, r3
 80008d0:	f000 f873 	bl	80009ba <_ZNSt10shared_ptrIN4tama14ChangeObserverEEC1EDn>
 80008d4:	f107 0310 	add.w	r3, r7, #16
 80008d8:	4619      	mov	r1, r3
 80008da:	4620      	mov	r0, r4
 80008dc:	f000 f885 	bl	80009ea <_ZNSt10shared_ptrIN4tama14ChangeObserverEEaSEOS2_>
 80008e0:	f107 0310 	add.w	r3, r7, #16
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff ffbf 	bl	8000868 <_ZNSt10shared_ptrIN4tama14ChangeObserverEED1Ev>
    visible = true;
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	2201      	movs	r2, #1
 80008ee:	751a      	strb	r2, [r3, #20]
}
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	4618      	mov	r0, r3
 80008f4:	371c      	adds	r7, #28
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd90      	pop	{r4, r7, pc}
 80008fa:	bf00      	nop
 80008fc:	0800dcf8 	.word	0x0800dcf8

08000900 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>:
      operator=(const __shared_count& __r) noexcept
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	6039      	str	r1, [r7, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	60fb      	str	r3, [r7, #12]
	if (__tmp != _M_pi)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	68fa      	ldr	r2, [r7, #12]
 8000916:	429a      	cmp	r2, r3
 8000918:	d011      	beq.n	800093e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x3e>
	    if (__tmp != 0)
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d002      	beq.n	8000926 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x26>
	      __tmp->_M_add_ref_copy();
 8000920:	68f8      	ldr	r0, [r7, #12]
 8000922:	f7ff fe04 	bl	800052e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>
	    if (_M_pi != 0)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d004      	beq.n	8000938 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x38>
	      _M_pi->_M_release();
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4618      	mov	r0, r3
 8000934:	f7ff fe21 	bl	800057a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	68fa      	ldr	r2, [r7, #12]
 800093c:	601a      	str	r2, [r3, #0]
	return *this;
 800093e:	687b      	ldr	r3, [r7, #4]
      }
 8000940:	4618      	mov	r0, r3
 8000942:	3710      	adds	r7, #16
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}

08000948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
	if (_M_pi != nullptr)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d004      	beq.n	8000962 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1a>
	  _M_pi->_M_release();
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff fe0c 	bl	800057a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	4618      	mov	r0, r3
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}

0800096c <_ZStneIN4tama14ChangeObserverEEbRKSt10shared_ptrIT_EDn>:
    operator!=(const shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept
    { return __a.get() != __b.get(); }

  template<typename _Tp>
    inline bool
    operator!=(const shared_ptr<_Tp>& __a, nullptr_t) noexcept
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
 8000974:	6039      	str	r1, [r7, #0]
    { return (bool)__a; }
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4618      	mov	r0, r3
 800097a:	f000 f849 	bl	8000a10 <_ZNKSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEcvbEv>
 800097e:	4603      	mov	r3, r0
 8000980:	4618      	mov	r0, r3
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}

08000988 <_ZNKSt19__shared_ptr_accessIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
	return _M_get();
 8000990:	6878      	ldr	r0, [r7, #4]
 8000992:	f000 f84e 	bl	8000a32 <_ZNKSt19__shared_ptr_accessIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 8000996:	4603      	mov	r3, r0
      }
 8000998:	4618      	mov	r0, r3
 800099a:	3708      	adds	r7, #8
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}

080009a0 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEC1Ev>:
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	4618      	mov	r0, r3
 80009ac:	f000 f84d 	bl	8000a4a <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	4618      	mov	r0, r3
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}

080009ba <_ZNSt10shared_ptrIN4tama14ChangeObserverEEC1EDn>:
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }
 80009ba:	b580      	push	{r7, lr}
 80009bc:	b082      	sub	sp, #8
 80009be:	af00      	add	r7, sp, #0
 80009c0:	6078      	str	r0, [r7, #4]
 80009c2:	6039      	str	r1, [r7, #0]
 80009c4:	6878      	ldr	r0, [r7, #4]
 80009c6:	f7ff ffeb 	bl	80009a0 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEC1Ev>
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4618      	mov	r0, r3
 80009ce:	3708      	adds	r7, #8
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <_ZSt4moveIRSt10shared_ptrIN4tama14ChangeObserverEEEONSt16remove_referenceIT_E4typeEOS6_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	4618      	mov	r0, r3
 80009e0:	370c      	adds	r7, #12
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr

080009ea <_ZNSt10shared_ptrIN4tama14ChangeObserverEEaSEOS2_>:
      operator=(shared_ptr&& __r) noexcept
 80009ea:	b590      	push	{r4, r7, lr}
 80009ec:	b083      	sub	sp, #12
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	6078      	str	r0, [r7, #4]
 80009f2:	6039      	str	r1, [r7, #0]
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
 80009f4:	687c      	ldr	r4, [r7, #4]
 80009f6:	6838      	ldr	r0, [r7, #0]
 80009f8:	f7ff ffec 	bl	80009d4 <_ZSt4moveIRSt10shared_ptrIN4tama14ChangeObserverEEEONSt16remove_referenceIT_E4typeEOS6_>
 80009fc:	4603      	mov	r3, r0
 80009fe:	4619      	mov	r1, r3
 8000a00:	4620      	mov	r0, r4
 8000a02:	f000 f83e 	bl	8000a82 <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_>
	return *this;
 8000a06:	687b      	ldr	r3, [r7, #4]
      }
 8000a08:	4618      	mov	r0, r3
 8000a0a:	370c      	adds	r7, #12
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd90      	pop	{r4, r7, pc}

08000a10 <_ZNKSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEcvbEv>:

      element_type*
      get() const noexcept
      { return _M_ptr; }

      explicit operator bool() const // never throws
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
      { return _M_ptr == 0 ? false : true; }
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	bf14      	ite	ne
 8000a20:	2301      	movne	r3, #1
 8000a22:	2300      	moveq	r3, #0
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	4618      	mov	r0, r3
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr

08000a32 <_ZNKSt19__shared_ptr_accessIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 8000a32:	b580      	push	{r7, lr}
 8000a34:	b082      	sub	sp, #8
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 8000a3a:	6878      	ldr	r0, [r7, #4]
 8000a3c:	f000 f840 	bl	8000ac0 <_ZNKSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EE3getEv>
 8000a40:	4603      	mov	r3, r0
 8000a42:	4618      	mov	r0, r3
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_ptr() noexcept
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	b082      	sub	sp, #8
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
      : _M_ptr(0), _M_refcount()
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	3304      	adds	r3, #4
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f000 f83b 	bl	8000ad8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
      { }
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4618      	mov	r0, r3
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <_ZSt4moveIRSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	4618      	mov	r0, r3
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr

08000a82 <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_>:
      operator=(__shared_ptr&& __r) noexcept
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b084      	sub	sp, #16
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	6078      	str	r0, [r7, #4]
 8000a8a:	6039      	str	r1, [r7, #0]
	__shared_ptr(std::move(__r)).swap(*this);
 8000a8c:	6838      	ldr	r0, [r7, #0]
 8000a8e:	f7ff ffed 	bl	8000a6c <_ZSt4moveIRSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS8_>
 8000a92:	4602      	mov	r2, r0
 8000a94:	f107 0308 	add.w	r3, r7, #8
 8000a98:	4611      	mov	r1, r2
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f000 f82a 	bl	8000af4 <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEC1EOS4_>
 8000aa0:	f107 0308 	add.w	r3, r7, #8
 8000aa4:	6879      	ldr	r1, [r7, #4]
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f000 f842 	bl	8000b30 <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EE4swapERS4_>
 8000aac:	f107 0308 	add.w	r3, r7, #8
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f7ff fecb 	bl	800084c <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EED1Ev>
	return *this;
 8000ab6:	687b      	ldr	r3, [r7, #4]
      }
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3710      	adds	r7, #16
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <_ZNKSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4618      	mov	r0, r3
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_count() noexcept : _M_pi(0)
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
      { }
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4618      	mov	r0, r3
 8000aea:	370c      	adds	r7, #12
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEC1EOS4_>:
      __shared_ptr(__shared_ptr&& __r) noexcept
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
 8000afc:	6039      	str	r1, [r7, #0]
      : _M_ptr(__r._M_ptr), _M_refcount()
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	3304      	adds	r3, #4
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f7ff ffe4 	bl	8000ad8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	_M_refcount._M_swap(__r._M_refcount);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	1d1a      	adds	r2, r3, #4
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	3304      	adds	r3, #4
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	f000 f81f 	bl	8000b5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	__r._M_ptr = 0;
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
      }
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3708      	adds	r7, #8
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EE4swapERS4_>:
      long
      use_count() const noexcept
      { return _M_refcount._M_get_use_count(); }

      void
      swap(__shared_ptr<_Tp, _Lp>& __other) noexcept
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	6039      	str	r1, [r7, #0]
      {
	std::swap(_M_ptr, __other._M_ptr);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	683a      	ldr	r2, [r7, #0]
 8000b3e:	4611      	mov	r1, r2
 8000b40:	4618      	mov	r0, r3
 8000b42:	f000 f82c 	bl	8000b9e <_ZSt4swapIPN4tama14ChangeObserverEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS7_ESt18is_move_assignableIS7_EEE5valueEvE4typeERS7_SH_>
	_M_refcount._M_swap(__other._M_refcount);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	1d1a      	adds	r2, r3, #4
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	3304      	adds	r3, #4
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4610      	mov	r0, r2
 8000b52:	f000 f804 	bl	8000b5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
      }
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>:
      _M_swap(__shared_count& __r) noexcept
 8000b5e:	b480      	push	{r7}
 8000b60:	b085      	sub	sp, #20
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	6078      	str	r0, [r7, #4]
 8000b66:	6039      	str	r1, [r7, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	60fb      	str	r3, [r7, #12]
	__r._M_pi = _M_pi;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	601a      	str	r2, [r3, #0]
	_M_pi = __tmp;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	68fa      	ldr	r2, [r7, #12]
 8000b7a:	601a      	str	r2, [r3, #0]
      }
 8000b7c:	bf00      	nop
 8000b7e:	3714      	adds	r7, #20
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr

08000b88 <_ZSt4moveIRPN4tama14ChangeObserverEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	4618      	mov	r0, r3
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr

08000b9e <_ZSt4swapIPN4tama14ChangeObserverEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS7_ESt18is_move_assignableIS7_EEE5valueEvE4typeERS7_SH_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b084      	sub	sp, #16
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
 8000ba6:	6039      	str	r1, [r7, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8000ba8:	6878      	ldr	r0, [r7, #4]
 8000baa:	f7ff ffed 	bl	8000b88 <_ZSt4moveIRPN4tama14ChangeObserverEEONSt16remove_referenceIT_E4typeEOS5_>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8000bb4:	6838      	ldr	r0, [r7, #0]
 8000bb6:	f7ff ffe7 	bl	8000b88 <_ZSt4moveIRPN4tama14ChangeObserverEEONSt16remove_referenceIT_E4typeEOS5_>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8000bc2:	f107 030c 	add.w	r3, r7, #12
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f7ff ffde 	bl	8000b88 <_ZSt4moveIRPN4tama14ChangeObserverEEONSt16remove_referenceIT_E4typeEOS5_>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	601a      	str	r2, [r3, #0]
    }
 8000bd4:	bf00      	nop
 8000bd6:	3710      	adds	r7, #16
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	6039      	str	r1, [r7, #0]
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	4618      	mov	r0, r3
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <_ZN4tama7TextureC1Ejj>:
    {
        unsigned width;
        unsigned height;
        PixelColor ** data;

        Texture(unsigned int width, unsigned int height) : width(width), height(height)
 8000bf4:	b590      	push	{r4, r7, lr}
 8000bf6:	b087      	sub	sp, #28
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	60f8      	str	r0, [r7, #12]
 8000bfc:	60b9      	str	r1, [r7, #8]
 8000bfe:	607a      	str	r2, [r7, #4]
 8000c00:	4a22      	ldr	r2, [pc, #136]	; (8000c8c <_ZN4tama7TextureC1Ejj+0x98>)
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	68ba      	ldr	r2, [r7, #8]
 8000c0a:	605a      	str	r2, [r3, #4]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	687a      	ldr	r2, [r7, #4]
 8000c10:	609a      	str	r2, [r3, #8]
        {
            data = new PixelColor*[height];
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4a1e      	ldr	r2, [pc, #120]	; (8000c90 <_ZN4tama7TextureC1Ejj+0x9c>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d801      	bhi.n	8000c1e <_ZN4tama7TextureC1Ejj+0x2a>
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	e001      	b.n	8000c22 <_ZN4tama7TextureC1Ejj+0x2e>
 8000c1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c22:	4618      	mov	r0, r3
 8000c24:	f00c fecb 	bl	800d9be <_Znaj>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	60da      	str	r2, [r3, #12]
            for (unsigned i = 0; i < height; ++i)
 8000c30:	2300      	movs	r3, #0
 8000c32:	617b      	str	r3, [r7, #20]
 8000c34:	697a      	ldr	r2, [r7, #20]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	d222      	bcs.n	8000c82 <_ZN4tama7TextureC1Ejj+0x8e>
            {
                data[i] = new PixelColor[width];
 8000c3c:	68b9      	ldr	r1, [r7, #8]
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	68da      	ldr	r2, [r3, #12]
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	009b      	lsls	r3, r3, #2
 8000c46:	18d4      	adds	r4, r2, r3
 8000c48:	4608      	mov	r0, r1
 8000c4a:	f00c feb8 	bl	800d9be <_Znaj>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	6023      	str	r3, [r4, #0]
                for (unsigned j = 0; j < width; ++j)
 8000c52:	2300      	movs	r3, #0
 8000c54:	613b      	str	r3, [r7, #16]
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	429a      	cmp	r2, r3
 8000c5c:	d20d      	bcs.n	8000c7a <_ZN4tama7TextureC1Ejj+0x86>
                {
                    data[i][j] = PixelColor::WHITE;
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	68da      	ldr	r2, [r3, #12]
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	4413      	add	r3, r2
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	693b      	ldr	r3, [r7, #16]
 8000c6c:	4413      	add	r3, r2
 8000c6e:	2200      	movs	r2, #0
 8000c70:	701a      	strb	r2, [r3, #0]
                for (unsigned j = 0; j < width; ++j)
 8000c72:	693b      	ldr	r3, [r7, #16]
 8000c74:	3301      	adds	r3, #1
 8000c76:	613b      	str	r3, [r7, #16]
 8000c78:	e7ed      	b.n	8000c56 <_ZN4tama7TextureC1Ejj+0x62>
            for (unsigned i = 0; i < height; ++i)
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	617b      	str	r3, [r7, #20]
 8000c80:	e7d8      	b.n	8000c34 <_ZN4tama7TextureC1Ejj+0x40>
                }
            }
        }
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	4618      	mov	r0, r3
 8000c86:	371c      	adds	r7, #28
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd90      	pop	{r4, r7, pc}
 8000c8c:	0800dd94 	.word	0x0800dd94
 8000c90:	1ffffffe 	.word	0x1ffffffe

08000c94 <_ZN4tama7Texture8insertAtENS_5Vec2dESt10shared_ptrIS0_E>:

        Texture(unsigned int width, unsigned int height, PixelColor **data) : width(width), height(height), data(data)
        {}

        void insertAt(Vec2d position, std::shared_ptr<Texture> texture)
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b088      	sub	sp, #32
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	60f8      	str	r0, [r7, #12]
 8000c9c:	1d38      	adds	r0, r7, #4
 8000c9e:	e880 0006 	stmia.w	r0, {r1, r2}
 8000ca2:	603b      	str	r3, [r7, #0]
        {
            for (unsigned i = 0; i < texture->height; ++i)
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	61fb      	str	r3, [r7, #28]
 8000ca8:	6838      	ldr	r0, [r7, #0]
 8000caa:	f000 fa1a 	bl	80010e2 <_ZNKSt19__shared_ptr_accessIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	689b      	ldr	r3, [r3, #8]
 8000cb2:	69fa      	ldr	r2, [r7, #28]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	bf34      	ite	cc
 8000cb8:	2301      	movcc	r3, #1
 8000cba:	2300      	movcs	r3, #0
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d03f      	beq.n	8000d42 <_ZN4tama7Texture8insertAtENS_5Vec2dESt10shared_ptrIS0_E+0xae>
            {
                for (unsigned j = 0; j < texture->width; ++j)
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61bb      	str	r3, [r7, #24]
 8000cc6:	6838      	ldr	r0, [r7, #0]
 8000cc8:	f000 fa0b 	bl	80010e2 <_ZNKSt19__shared_ptr_accessIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	69ba      	ldr	r2, [r7, #24]
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	bf34      	ite	cc
 8000cd6:	2301      	movcc	r3, #1
 8000cd8:	2300      	movcs	r3, #0
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d02c      	beq.n	8000d3a <_ZN4tama7Texture8insertAtENS_5Vec2dESt10shared_ptrIS0_E+0xa6>
                {
                    unsigned newY = i + position.y;
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	617b      	str	r3, [r7, #20]
                    unsigned newX = j + position.x;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	461a      	mov	r2, r3
 8000cee:	69bb      	ldr	r3, [r7, #24]
 8000cf0:	4413      	add	r3, r2
 8000cf2:	613b      	str	r3, [r7, #16]
                    if (newX < width && newY < height)
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	693a      	ldr	r2, [r7, #16]
 8000cfa:	429a      	cmp	r2, r3
 8000cfc:	d219      	bcs.n	8000d32 <_ZN4tama7Texture8insertAtENS_5Vec2dESt10shared_ptrIS0_E+0x9e>
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	689b      	ldr	r3, [r3, #8]
 8000d02:	697a      	ldr	r2, [r7, #20]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d214      	bcs.n	8000d32 <_ZN4tama7Texture8insertAtENS_5Vec2dESt10shared_ptrIS0_E+0x9e>
                    {
                        this->data[newY][newX] = texture->data[i][j];
 8000d08:	6838      	ldr	r0, [r7, #0]
 8000d0a:	f000 f9ea 	bl	80010e2 <_ZNKSt19__shared_ptr_accessIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	68da      	ldr	r2, [r3, #12]
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	4413      	add	r3, r2
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	69bb      	ldr	r3, [r7, #24]
 8000d1c:	441a      	add	r2, r3
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	68d9      	ldr	r1, [r3, #12]
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	009b      	lsls	r3, r3, #2
 8000d26:	440b      	add	r3, r1
 8000d28:	6819      	ldr	r1, [r3, #0]
 8000d2a:	693b      	ldr	r3, [r7, #16]
 8000d2c:	440b      	add	r3, r1
 8000d2e:	7812      	ldrb	r2, [r2, #0]
 8000d30:	701a      	strb	r2, [r3, #0]
                for (unsigned j = 0; j < texture->width; ++j)
 8000d32:	69bb      	ldr	r3, [r7, #24]
 8000d34:	3301      	adds	r3, #1
 8000d36:	61bb      	str	r3, [r7, #24]
 8000d38:	e7c5      	b.n	8000cc6 <_ZN4tama7Texture8insertAtENS_5Vec2dESt10shared_ptrIS0_E+0x32>
            for (unsigned i = 0; i < texture->height; ++i)
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	61fb      	str	r3, [r7, #28]
 8000d40:	e7b2      	b.n	8000ca8 <_ZN4tama7Texture8insertAtENS_5Vec2dESt10shared_ptrIS0_E+0x14>
                    }
                }
            }
        }
 8000d42:	bf00      	nop
 8000d44:	3720      	adds	r7, #32
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
	...

08000d4c <_ZN4tama7TextureD1Ev>:

        virtual ~Texture()
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
        {
 8000d54:	4a16      	ldr	r2, [pc, #88]	; (8000db0 <_ZN4tama7TextureD1Ev+0x64>)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	601a      	str	r2, [r3, #0]
            for (unsigned i = 0; i < height; ++i)
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60fb      	str	r3, [r7, #12]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	689b      	ldr	r3, [r3, #8]
 8000d62:	68fa      	ldr	r2, [r7, #12]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	d214      	bcs.n	8000d92 <_ZN4tama7TextureD1Ev+0x46>
            {
                delete[] data[i];
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	68da      	ldr	r2, [r3, #12]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	4413      	add	r3, r2
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d008      	beq.n	8000d8a <_ZN4tama7TextureD1Ev+0x3e>
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	68da      	ldr	r2, [r3, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	4413      	add	r3, r2
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4618      	mov	r0, r3
 8000d86:	f00c fe15 	bl	800d9b4 <_ZdaPv>
            for (unsigned i = 0; i < height; ++i)
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	e7e5      	b.n	8000d5e <_ZN4tama7TextureD1Ev+0x12>
            }
            delete[] data;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	68db      	ldr	r3, [r3, #12]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d004      	beq.n	8000da4 <_ZN4tama7TextureD1Ev+0x58>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	68db      	ldr	r3, [r3, #12]
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f00c fe08 	bl	800d9b4 <_ZdaPv>
        }
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	4618      	mov	r0, r3
 8000da8:	3710      	adds	r7, #16
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	0800dd94 	.word	0x0800dd94

08000db4 <_ZN4tama7TextureD0Ev>:
        virtual ~Texture()
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
        }
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f7ff ffc5 	bl	8000d4c <_ZN4tama7TextureD1Ev>
 8000dc2:	2110      	movs	r1, #16
 8000dc4:	6878      	ldr	r0, [r7, #4]
 8000dc6:	f00c fdfc 	bl	800d9c2 <_ZdlPvj>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <_ZN4tama14ChangeObserverC1Ev>:
#ifndef VPET_CHANGEOBSERVER_H
#define VPET_CHANGEOBSERVER_H

namespace tama
{
    class ChangeObserver
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	4a04      	ldr	r2, [pc, #16]	; (8000df0 <_ZN4tama14ChangeObserverC1Ev+0x1c>)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4618      	mov	r0, r3
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	0800dda4 	.word	0x0800dda4

08000df4 <_ZN4tama5SceneC1Ev>:
// Created by grzegorz on 3/28/21.
//

#include "Scene.h"

tama::Scene::Scene()
 8000df4:	b590      	push	{r4, r7, lr}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff ffe8 	bl	8000dd4 <_ZN4tama14ChangeObserverC1Ev>
 8000e04:	4a15      	ldr	r2, [pc, #84]	; (8000e5c <_ZN4tama5SceneC1Ev+0x68>)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	3304      	adds	r3, #4
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff fdc6 	bl	80009a0 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEC1Ev>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	330c      	adds	r3, #12
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f000 f96e 	bl	80010fa <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EEC1Ev>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2254      	movs	r2, #84	; 0x54
 8000e22:	619a      	str	r2, [r3, #24]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2230      	movs	r2, #48	; 0x30
 8000e28:	61da      	str	r2, [r3, #28]
{
    observer = nullptr;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	1d1c      	adds	r4, r3, #4
 8000e2e:	f107 0308 	add.w	r3, r7, #8
 8000e32:	2100      	movs	r1, #0
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff fdc0 	bl	80009ba <_ZNSt10shared_ptrIN4tama14ChangeObserverEEC1EDn>
 8000e3a:	f107 0308 	add.w	r3, r7, #8
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4620      	mov	r0, r4
 8000e42:	f7ff fdd2 	bl	80009ea <_ZNSt10shared_ptrIN4tama14ChangeObserverEEaSEOS2_>
 8000e46:	f107 0308 	add.w	r3, r7, #8
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff fd0c 	bl	8000868 <_ZNSt10shared_ptrIN4tama14ChangeObserverEED1Ev>
}
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	4618      	mov	r0, r3
 8000e54:	3714      	adds	r7, #20
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd90      	pop	{r4, r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	0800dd88 	.word	0x0800dd88

08000e60 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_ptr() = default;
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	3304      	adds	r3, #4
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff fd6b 	bl	8000948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4618      	mov	r0, r3
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <_ZNSt10shared_ptrIN4tama5SceneEED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff ffea 	bl	8000e60 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <_ZN4tama5Scene11addDrawableESt10shared_ptrINS_8DrawableEE>:
{
    this->observer = observer;
}

void tama::Scene::addDrawable(std::shared_ptr<Drawable> drawable)
{
 8000e96:	b5b0      	push	{r4, r5, r7, lr}
 8000e98:	b086      	sub	sp, #24
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
 8000e9e:	6039      	str	r1, [r7, #0]
    this->drawables.push_back(drawable);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	330c      	adds	r3, #12
 8000ea4:	6839      	ldr	r1, [r7, #0]
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f000 f94f 	bl	800114a <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE9push_backERKS3_>
    drawable->setChangeObserver(std::make_shared<Scene>(*this));
 8000eac:	6838      	ldr	r0, [r7, #0]
 8000eae:	f000 f972 	bl	8001196 <_ZNKSt19__shared_ptr_accessIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8000eb2:	4605      	mov	r5, r0
 8000eb4:	682b      	ldr	r3, [r5, #0]
 8000eb6:	331c      	adds	r3, #28
 8000eb8:	681c      	ldr	r4, [r3, #0]
 8000eba:	f107 0310 	add.w	r3, r7, #16
 8000ebe:	6879      	ldr	r1, [r7, #4]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f000 f97f 	bl	80011c4 <_ZSt11make_sharedIN4tama5SceneEJRS1_EESt10shared_ptrIT_EDpOT0_>
 8000ec6:	f107 0210 	add.w	r2, r7, #16
 8000eca:	f107 0308 	add.w	r3, r7, #8
 8000ece:	4611      	mov	r1, r2
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f000 f99f 	bl	8001214 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEC1INS0_5SceneEvEEOS_IT_E>
 8000ed6:	f107 0308 	add.w	r3, r7, #8
 8000eda:	4619      	mov	r1, r3
 8000edc:	4628      	mov	r0, r5
 8000ede:	47a0      	blx	r4
 8000ee0:	f107 0308 	add.w	r3, r7, #8
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff fcbf 	bl	8000868 <_ZNSt10shared_ptrIN4tama14ChangeObserverEED1Ev>
 8000eea:	f107 0310 	add.w	r3, r7, #16
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f7ff ffc4 	bl	8000e7c <_ZNSt10shared_ptrIN4tama5SceneEED1Ev>
}
 8000ef4:	bf00      	nop
 8000ef6:	3718      	adds	r7, #24
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bdb0      	pop	{r4, r5, r7, pc}

08000efc <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	3304      	adds	r3, #4
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff fd1d 	bl	8000948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4618      	mov	r0, r3
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <_ZNSt10shared_ptrIN4tama7TextureEED1Ev>:
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff ffea 	bl	8000efc <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <_ZNSt12__shared_ptrIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b082      	sub	sp, #8
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
 8000f3a:	6039      	str	r1, [r7, #0]
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	1d1a      	adds	r2, r3, #4
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	3304      	adds	r3, #4
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4610      	mov	r0, r2
 8000f50:	f7ff fafc 	bl	800054c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	4618      	mov	r0, r3
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <_ZNSt12__shared_ptrIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_ptr() = default;
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b082      	sub	sp, #8
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	3304      	adds	r3, #4
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff fcec 	bl	8000948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	4618      	mov	r0, r3
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <_ZNSt10shared_ptrIN4tama8DrawableEEC1ERKS2_>:
      shared_ptr(const shared_ptr&) noexcept = default;
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b082      	sub	sp, #8
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
 8000f82:	6039      	str	r1, [r7, #0]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	683a      	ldr	r2, [r7, #0]
 8000f88:	4611      	mov	r1, r2
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff ffd1 	bl	8000f32 <_ZNSt12__shared_ptrIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4618      	mov	r0, r3
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <_ZNSt10shared_ptrIN4tama8DrawableEED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b082      	sub	sp, #8
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff ffda 	bl	8000f5e <_ZNSt12__shared_ptrIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4618      	mov	r0, r3
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <_ZN4tama5Scene12getSceneDataEv>:
{

}

std::shared_ptr<tama::Texture> tama::Scene::getSceneData()
{
 8000fb4:	b590      	push	{r4, r7, lr}
 8000fb6:	b08d      	sub	sp, #52	; 0x34
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]
    std::shared_ptr<tama::Texture> texture = std::make_shared<tama::Texture>(width, height);
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	f103 0118 	add.w	r1, r3, #24
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	f103 021c 	add.w	r2, r3, #28
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f000 f93f 	bl	8001250 <_ZSt11make_sharedIN4tama7TextureEJRjS2_EESt10shared_ptrIT_EDpOT0_>

    for (auto drawable : drawables)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	330c      	adds	r3, #12
 8000fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fd8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000fda:	f000 f95b 	bl	8001294 <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE5beginEv>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	613b      	str	r3, [r7, #16]
 8000fe2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000fe4:	f000 f966 	bl	80012b4 <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE3endEv>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	f107 020c 	add.w	r2, r7, #12
 8000ff0:	f107 0310 	add.w	r3, r7, #16
 8000ff4:	4611      	mov	r1, r2
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f000 f96d 	bl	80012d6 <_ZN9__gnu_cxxneIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEEbRKNS_17__normal_iteratorIT_T0_EESE_>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d04f      	beq.n	80010a2 <_ZN4tama5Scene12getSceneDataEv+0xee>
 8001002:	f107 0310 	add.w	r3, r7, #16
 8001006:	4618      	mov	r0, r3
 8001008:	f000 f98e 	bl	8001328 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEdeEv>
 800100c:	4602      	mov	r2, r0
 800100e:	f107 0314 	add.w	r3, r7, #20
 8001012:	4611      	mov	r1, r2
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff ffb0 	bl	8000f7a <_ZNSt10shared_ptrIN4tama8DrawableEEC1ERKS2_>
    {
        if (drawable->isVisible())
 800101a:	f107 0314 	add.w	r3, r7, #20
 800101e:	4618      	mov	r0, r3
 8001020:	f000 f8b9 	bl	8001196 <_ZNKSt19__shared_ptr_accessIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8001024:	4602      	mov	r2, r0
 8001026:	6813      	ldr	r3, [r2, #0]
 8001028:	3320      	adds	r3, #32
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4610      	mov	r0, r2
 800102e:	4798      	blx	r3
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d02a      	beq.n	800108c <_ZN4tama5Scene12getSceneDataEv+0xd8>
        {
            texture->insertAt(drawable->getPosition(), drawable->getTexture());
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f000 f853 	bl	80010e2 <_ZNKSt19__shared_ptr_accessIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800103c:	4604      	mov	r4, r0
 800103e:	f107 0314 	add.w	r3, r7, #20
 8001042:	4618      	mov	r0, r3
 8001044:	f000 f8a7 	bl	8001196 <_ZNKSt19__shared_ptr_accessIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8001048:	4602      	mov	r2, r0
 800104a:	6813      	ldr	r3, [r2, #0]
 800104c:	330c      	adds	r3, #12
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f107 001c 	add.w	r0, r7, #28
 8001054:	4611      	mov	r1, r2
 8001056:	4798      	blx	r3
 8001058:	f107 0314 	add.w	r3, r7, #20
 800105c:	4618      	mov	r0, r3
 800105e:	f000 f89a 	bl	8001196 <_ZNKSt19__shared_ptr_accessIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8001062:	4602      	mov	r2, r0
 8001064:	6813      	ldr	r3, [r2, #0]
 8001066:	3308      	adds	r3, #8
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800106e:	4611      	mov	r1, r2
 8001070:	4798      	blx	r3
 8001072:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001076:	f107 021c 	add.w	r2, r7, #28
 800107a:	ca06      	ldmia	r2, {r1, r2}
 800107c:	4620      	mov	r0, r4
 800107e:	f7ff fe09 	bl	8000c94 <_ZN4tama7Texture8insertAtENS_5Vec2dESt10shared_ptrIS0_E>
 8001082:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff ff46 	bl	8000f18 <_ZNSt10shared_ptrIN4tama7TextureEED1Ev>
    for (auto drawable : drawables)
 800108c:	f107 0314 	add.w	r3, r7, #20
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff ff82 	bl	8000f9a <_ZNSt10shared_ptrIN4tama8DrawableEED1Ev>
 8001096:	f107 0310 	add.w	r3, r7, #16
 800109a:	4618      	mov	r0, r3
 800109c:	f000 f933 	bl	8001306 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEppEv>
 80010a0:	e7a4      	b.n	8000fec <_ZN4tama5Scene12getSceneDataEv+0x38>
        }
    }
    return texture;
 80010a2:	bf00      	nop
}
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	3734      	adds	r7, #52	; 0x34
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd90      	pop	{r4, r7, pc}

080010ac <_ZN4tama5Scene8onChangeEv>:

void tama::Scene::onChange()
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]

}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
      { delete this; }
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d005      	beq.n	80010da <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x1a>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	3304      	adds	r3, #4
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	4798      	blx	r3
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <_ZNKSt19__shared_ptr_accessIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b082      	sub	sp, #8
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
	return _M_get();
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f000 f948 	bl	8001380 <_ZNKSt19__shared_ptr_accessIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 80010f0:	4603      	mov	r3, r0
      }
 80010f2:	4618      	mov	r0, r3
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EEC1Ev>:
      // (assign() and get_allocator() are also listed in this section)

      /**
       *  @brief  Creates a %vector with no elements.
       */
      vector()
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b082      	sub	sp, #8
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
#if __cplusplus >= 201103L
      noexcept(is_nothrow_default_constructible<_Alloc>::value)
#endif
      : _Base() { }
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4618      	mov	r0, r3
 8001106:	f000 f953 	bl	80013b0 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EEC1Ev>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4618      	mov	r0, r3
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8001114:	b5b0      	push	{r4, r5, r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681c      	ldr	r4, [r3, #0]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4618      	mov	r0, r3
 8001128:	f000 f969 	bl	80013fe <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE19_M_get_Tp_allocatorEv>
 800112c:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800112e:	461a      	mov	r2, r3
 8001130:	4629      	mov	r1, r5
 8001132:	4620      	mov	r0, r4
 8001134:	f000 f96e 	bl	8001414 <_ZSt8_DestroyIPSt10shared_ptrIN4tama8DrawableEES3_EvT_S5_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	4618      	mov	r0, r3
 800113c:	f000 f945 	bl	80013ca <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EED1Ev>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	4618      	mov	r0, r3
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bdb0      	pop	{r4, r5, r7, pc}

0800114a <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE9push_backERKS3_>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
 800114a:	b580      	push	{r7, lr}
 800114c:	b082      	sub	sp, #8
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
 8001152:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	685a      	ldr	r2, [r3, #4]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	429a      	cmp	r2, r3
 800115e:	d00d      	beq.n	800117c <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE9push_backERKS3_+0x32>
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	683a      	ldr	r2, [r7, #0]
 8001168:	4619      	mov	r1, r3
 800116a:	f000 f96c 	bl	8001446 <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama8DrawableEEEE9constructIS3_JRKS3_EEEvRS4_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f103 0208 	add.w	r2, r3, #8
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	605a      	str	r2, [r3, #4]
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 800117a:	e008      	b.n	800118e <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE9push_backERKS3_+0x44>
	  _M_realloc_insert(end(), __x);
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f000 f899 	bl	80012b4 <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE3endEv>
 8001182:	4603      	mov	r3, r0
 8001184:	683a      	ldr	r2, [r7, #0]
 8001186:	4619      	mov	r1, r3
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f000 f96f 	bl	800146c <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_>
      }
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <_ZNKSt19__shared_ptr_accessIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 8001196:	b580      	push	{r7, lr}
 8001198:	b082      	sub	sp, #8
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
	return _M_get();
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f000 f9f0 	bl	8001584 <_ZNKSt19__shared_ptr_accessIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 80011a4:	4603      	mov	r3, r0
      }
 80011a6:	4618      	mov	r0, r3
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <_ZSt7forwardIRN4tama5SceneEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80011ae:	b480      	push	{r7}
 80011b0:	b083      	sub	sp, #12
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4618      	mov	r0, r3
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <_ZSt11make_sharedIN4tama5SceneEJRS1_EESt10shared_ptrIT_EDpOT0_>:
   *  @throw  std::bad_alloc, or an exception thrown from the
   *          constructor of @a _Tp.
   */
  template<typename _Tp, typename... _Args>
    inline shared_ptr<_Tp>
    make_shared(_Args&&... __args)
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	6039      	str	r1, [r7, #0]
    {
      typedef typename std::remove_const<_Tp>::type _Tp_nc;
      return std::allocate_shared<_Tp>(std::allocator<_Tp_nc>(),
				       std::forward<_Args>(__args)...);
 80011ce:	f107 030c 	add.w	r3, r7, #12
 80011d2:	4618      	mov	r0, r3
 80011d4:	f000 f9e2 	bl	800159c <_ZNSaIN4tama5SceneEEC1Ev>
 80011d8:	6838      	ldr	r0, [r7, #0]
 80011da:	f7ff ffe8 	bl	80011ae <_ZSt7forwardIRN4tama5SceneEEOT_RNSt16remove_referenceIS3_E4typeE>
 80011de:	4602      	mov	r2, r0
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f107 010c 	add.w	r1, r7, #12
 80011e6:	4618      	mov	r0, r3
 80011e8:	f000 f9f0 	bl	80015cc <_ZSt15allocate_sharedIN4tama5SceneESaIS1_EJRS1_EESt10shared_ptrIT_ERKT0_DpOT1_>
 80011ec:	f107 030c 	add.w	r3, r7, #12
 80011f0:	4618      	mov	r0, r3
 80011f2:	f000 f9df 	bl	80015b4 <_ZNSaIN4tama5SceneEED1Ev>
    }
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <_ZSt4moveIRSt10shared_ptrIN4tama5SceneEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 80011fe:	b480      	push	{r7}
 8001200:	b083      	sub	sp, #12
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4618      	mov	r0, r3
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEC1INS0_5SceneEvEEOS_IT_E>:
	shared_ptr(shared_ptr<_Yp>&& __r) noexcept
 8001214:	b590      	push	{r4, r7, lr}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 800121e:	687c      	ldr	r4, [r7, #4]
 8001220:	6838      	ldr	r0, [r7, #0]
 8001222:	f7ff ffec 	bl	80011fe <_ZSt4moveIRSt10shared_ptrIN4tama5SceneEEEONSt16remove_referenceIT_E4typeEOS6_>
 8001226:	4603      	mov	r3, r0
 8001228:	4619      	mov	r1, r3
 800122a:	4620      	mov	r0, r4
 800122c:	f000 f9e1 	bl	80015f2 <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEC1INS0_5SceneEvEEOS_IT_LS3_0EE>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	4618      	mov	r0, r3
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	bd90      	pop	{r4, r7, pc}

0800123a <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800123a:	b480      	push	{r7}
 800123c:	b083      	sub	sp, #12
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4618      	mov	r0, r3
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <_ZSt11make_sharedIN4tama7TextureEJRjS2_EESt10shared_ptrIT_EDpOT0_>:
    make_shared(_Args&&... __args)
 8001250:	b590      	push	{r4, r7, lr}
 8001252:	b087      	sub	sp, #28
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
				       std::forward<_Args>(__args)...);
 800125c:	f107 0314 	add.w	r3, r7, #20
 8001260:	4618      	mov	r0, r3
 8001262:	f000 f9e4 	bl	800162e <_ZNSaIN4tama7TextureEEC1Ev>
 8001266:	68b8      	ldr	r0, [r7, #8]
 8001268:	f7ff ffe7 	bl	800123a <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 800126c:	4604      	mov	r4, r0
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f7ff ffe3 	bl	800123a <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 8001274:	4603      	mov	r3, r0
 8001276:	68f8      	ldr	r0, [r7, #12]
 8001278:	f107 0114 	add.w	r1, r7, #20
 800127c:	4622      	mov	r2, r4
 800127e:	f000 f9ee 	bl	800165e <_ZSt15allocate_sharedIN4tama7TextureESaIS1_EJRjS3_EESt10shared_ptrIT_ERKT0_DpOT1_>
 8001282:	f107 0314 	add.w	r3, r7, #20
 8001286:	4618      	mov	r0, r3
 8001288:	f000 f9dd 	bl	8001646 <_ZNSaIN4tama7TextureEED1Ev>
    }
 800128c:	68f8      	ldr	r0, [r7, #12]
 800128e:	371c      	adds	r7, #28
 8001290:	46bd      	mov	sp, r7
 8001292:	bd90      	pop	{r4, r7, pc}

08001294 <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	f107 030c 	add.w	r3, r7, #12
 80012a2:	4611      	mov	r1, r2
 80012a4:	4618      	mov	r0, r3
 80012a6:	f000 f9f4 	bl	8001692 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEC1ERKS5_>
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	4618      	mov	r0, r3
 80012ae:	3710      	adds	r7, #16
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	1d1a      	adds	r2, r3, #4
 80012c0:	f107 030c 	add.w	r3, r7, #12
 80012c4:	4611      	mov	r1, r2
 80012c6:	4618      	mov	r0, r3
 80012c8:	f000 f9e3 	bl	8001692 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEC1ERKS5_>
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	4618      	mov	r0, r3
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <_ZN9__gnu_cxxneIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEEbRKNS_17__normal_iteratorIT_T0_EESE_>:
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 80012d6:	b590      	push	{r4, r7, lr}
 80012d8:	b083      	sub	sp, #12
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
 80012de:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f000 f9e6 	bl	80016b2 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEE4baseEv>
 80012e6:	4603      	mov	r3, r0
 80012e8:	681c      	ldr	r4, [r3, #0]
 80012ea:	6838      	ldr	r0, [r7, #0]
 80012ec:	f000 f9e1 	bl	80016b2 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEE4baseEv>
 80012f0:	4603      	mov	r3, r0
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	429c      	cmp	r4, r3
 80012f6:	bf14      	ite	ne
 80012f8:	2301      	movne	r3, #1
 80012fa:	2300      	moveq	r3, #0
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	4618      	mov	r0, r3
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	bd90      	pop	{r4, r7, pc}

08001306 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8001306:	b480      	push	{r7}
 8001308:	b083      	sub	sp, #12
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
	++_M_current;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f103 0208 	add.w	r2, r3, #8
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	601a      	str	r2, [r3, #0]
	return *this;
 800131a:	687b      	ldr	r3, [r7, #4]
      }
 800131c:	4618      	mov	r0, r3
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4618      	mov	r0, r3
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_base() noexcept
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
      { }
 8001348:	4a04      	ldr	r2, [pc, #16]	; (800135c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1c>)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4618      	mov	r0, r3
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	0800ddb0 	.word	0x0800ddb0

08001360 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_base() noexcept
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
      { }
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f7ff ffe9 	bl	8001340 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800136e:	210c      	movs	r1, #12
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f00c fb26 	bl	800d9c2 <_ZdlPvj>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4618      	mov	r0, r3
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <_ZNKSt19__shared_ptr_accessIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f000 f99d 	bl	80016c8 <_ZNKSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE3getEv>
 800138e:	4603      	mov	r3, r0
 8001390:	4618      	mov	r0, r3
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f000 f9b2 	bl	800170a <_ZNSaISt10shared_ptrIN4tama8DrawableEEED1Ev>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4618      	mov	r0, r3
 80013aa:	3708      	adds	r7, #8
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EEC1Ev>:
      _Vector_base()
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f000 f990 	bl	80016e0 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE12_Vector_implC1Ev>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	4618      	mov	r0, r3
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b082      	sub	sp, #8
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6819      	ldr	r1, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 80013da:	461a      	mov	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	10db      	asrs	r3, r3, #3
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 80013e4:	461a      	mov	r2, r3
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f000 f99b 	bl	8001722 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE13_M_deallocateEPS3_j>
		      - this->_M_impl._M_start); }
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff ffd2 	bl	8001398 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE12_Vector_implD1Ev>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	4618      	mov	r0, r3
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80013fe:	b480      	push	{r7}
 8001400:	b083      	sub	sp, #12
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4618      	mov	r0, r3
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <_ZSt8_DestroyIPSt10shared_ptrIN4tama8DrawableEES3_EvT_S5_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8001420:	68b9      	ldr	r1, [r7, #8]
 8001422:	68f8      	ldr	r0, [r7, #12]
 8001424:	f000 f990 	bl	8001748 <_ZSt8_DestroyIPSt10shared_ptrIN4tama8DrawableEEEvT_S5_>
    }
 8001428:	bf00      	nop
 800142a:	3710      	adds	r7, #16
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}

08001430 <_ZSt7forwardIRKSt10shared_ptrIN4tama8DrawableEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4618      	mov	r0, r3
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr

08001446 <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama8DrawableEEEE9constructIS3_JRKS3_EEEvRS4_PT_DpOT0_>:
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8001446:	b580      	push	{r7, lr}
 8001448:	b084      	sub	sp, #16
 800144a:	af00      	add	r7, sp, #0
 800144c:	60f8      	str	r0, [r7, #12]
 800144e:	60b9      	str	r1, [r7, #8]
 8001450:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f7ff ffec 	bl	8001430 <_ZSt7forwardIRKSt10shared_ptrIN4tama8DrawableEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8001458:	4603      	mov	r3, r0
 800145a:	461a      	mov	r2, r3
 800145c:	68b9      	ldr	r1, [r7, #8]
 800145e:	68f8      	ldr	r0, [r7, #12]
 8001460:	f000 f97f 	bl	8001762 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEE9constructIS4_JRKS4_EEEvPT_DpOT0_>
 8001464:	bf00      	nop
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 800146c:	b5b0      	push	{r4, r5, r7, lr}
 800146e:	b08a      	sub	sp, #40	; 0x28
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 8001478:	4a41      	ldr	r2, [pc, #260]	; (8001580 <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x114>)
 800147a:	2101      	movs	r1, #1
 800147c:	68f8      	ldr	r0, [r7, #12]
 800147e:	f000 f98a 	bl	8001796 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE12_M_check_lenEjPKc>
 8001482:	6278      	str	r0, [r7, #36]	; 0x24
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      const size_type __elems_before = __position - begin();
 8001484:	68f8      	ldr	r0, [r7, #12]
 8001486:	f7ff ff05 	bl	8001294 <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE5beginEv>
 800148a:	4603      	mov	r3, r0
 800148c:	617b      	str	r3, [r7, #20]
 800148e:	f107 0214 	add.w	r2, r7, #20
 8001492:	f107 0308 	add.w	r3, r7, #8
 8001496:	4611      	mov	r1, r2
 8001498:	4618      	mov	r0, r3
 800149a:	f000 f9c4 	bl	8001826 <_ZN9__gnu_cxxmiIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_>
 800149e:	4603      	mov	r3, r0
 80014a0:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014a6:	4618      	mov	r0, r3
 80014a8:	f000 f9d3 	bl	8001852 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE11_M_allocateEj>
 80014ac:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 80014b2:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 80014b4:	6a3b      	ldr	r3, [r7, #32]
 80014b6:	00db      	lsls	r3, r3, #3
	  _Alloc_traits::construct(this->_M_impl,
 80014b8:	69fa      	ldr	r2, [r7, #28]
 80014ba:	18d5      	adds	r5, r2, r3
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f7ff ffb7 	bl	8001430 <_ZSt7forwardIRKSt10shared_ptrIN4tama8DrawableEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80014c2:	4603      	mov	r3, r0
 80014c4:	461a      	mov	r2, r3
 80014c6:	4629      	mov	r1, r5
 80014c8:	4620      	mov	r0, r4
 80014ca:	f7ff ffbc 	bl	8001446 <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama8DrawableEEEE9constructIS3_JRKS3_EEEvRS4_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 80014ce:	2300      	movs	r3, #0
 80014d0:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (this->_M_impl._M_start, __position.base(),
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681c      	ldr	r4, [r3, #0]
 80014d6:	f107 0308 	add.w	r3, r7, #8
 80014da:	4618      	mov	r0, r3
 80014dc:	f000 f8e9 	bl	80016b2 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEE4baseEv>
 80014e0:	4603      	mov	r3, r0
 80014e2:	681d      	ldr	r5, [r3, #0]
	     __new_start, _M_get_Tp_allocator());
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff ff89 	bl	80013fe <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE19_M_get_Tp_allocatorEv>
 80014ec:	4603      	mov	r3, r0
	  __new_finish
 80014ee:	69fa      	ldr	r2, [r7, #28]
 80014f0:	4629      	mov	r1, r5
 80014f2:	4620      	mov	r0, r4
 80014f4:	f000 f9c1 	bl	800187a <_ZSt34__uninitialized_move_if_noexcept_aIPSt10shared_ptrIN4tama8DrawableEES4_SaIS3_EET0_T_S7_S6_RT1_>
 80014f8:	61b8      	str	r0, [r7, #24]

	  ++__new_finish;
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	3308      	adds	r3, #8
 80014fe:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (__position.base(), this->_M_impl._M_finish,
 8001500:	f107 0308 	add.w	r3, r7, #8
 8001504:	4618      	mov	r0, r3
 8001506:	f000 f8d4 	bl	80016b2 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEE4baseEv>
 800150a:	4603      	mov	r3, r0
 800150c:	681c      	ldr	r4, [r3, #0]
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	685d      	ldr	r5, [r3, #4]
	     __new_finish, _M_get_Tp_allocator());
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff ff72 	bl	80013fe <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE19_M_get_Tp_allocatorEv>
 800151a:	4603      	mov	r3, r0
	  __new_finish
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	4629      	mov	r1, r5
 8001520:	4620      	mov	r0, r4
 8001522:	f000 f9aa 	bl	800187a <_ZSt34__uninitialized_move_if_noexcept_aIPSt10shared_ptrIN4tama8DrawableEES4_SaIS3_EET0_T_S7_S6_RT1_>
 8001526:	61b8      	str	r0, [r7, #24]
	  else
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681c      	ldr	r4, [r3, #0]
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	685d      	ldr	r5, [r3, #4]
		    _M_get_Tp_allocator());
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	4618      	mov	r0, r3
 8001534:	f7ff ff63 	bl	80013fe <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE19_M_get_Tp_allocatorEv>
 8001538:	4603      	mov	r3, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800153a:	461a      	mov	r2, r3
 800153c:	4629      	mov	r1, r5
 800153e:	4620      	mov	r0, r4
 8001540:	f7ff ff68 	bl	8001414 <_ZSt8_DestroyIPSt10shared_ptrIN4tama8DrawableEES3_EvT_S5_RSaIT0_E>
      _M_deallocate(this->_M_impl._M_start,
 8001544:	68f8      	ldr	r0, [r7, #12]
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	6819      	ldr	r1, [r3, #0]
		    this->_M_impl._M_end_of_storage
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	689b      	ldr	r3, [r3, #8]
		    - this->_M_impl._M_start);
 800154e:	461a      	mov	r2, r3
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	10db      	asrs	r3, r3, #3
      _M_deallocate(this->_M_impl._M_start,
 8001558:	461a      	mov	r2, r3
 800155a:	f000 f8e2 	bl	8001722 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE13_M_deallocateEPS3_j>
      this->_M_impl._M_start = __new_start;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	69fa      	ldr	r2, [r7, #28]
 8001562:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800156a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156c:	00db      	lsls	r3, r3, #3
 800156e:	69fa      	ldr	r2, [r7, #28]
 8001570:	441a      	add	r2, r3
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	609a      	str	r2, [r3, #8]
    }
 8001576:	bf00      	nop
 8001578:	3728      	adds	r7, #40	; 0x28
 800157a:	46bd      	mov	sp, r7
 800157c:	bdb0      	pop	{r4, r5, r7, pc}
 800157e:	bf00      	nop
 8001580:	0800dcd0 	.word	0x0800dcd0

08001584 <_ZNKSt19__shared_ptr_accessIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f000 f98d 	bl	80018ac <_ZNKSt12__shared_ptrIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0EE3getEv>
 8001592:	4603      	mov	r3, r0
 8001594:	4618      	mov	r0, r3
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <_ZNSaIN4tama5SceneEEC1Ev>:
      typedef true_type propagate_on_container_move_assignment;

      typedef true_type is_always_equal;
#endif

      allocator() throw() { }
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f000 f98d 	bl	80018c4 <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEEC1Ev>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4618      	mov	r0, r3
 80015ae:	3708      	adds	r7, #8
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <_ZNSaIN4tama5SceneEED1Ev>:
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
	allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f000 f98c 	bl	80018da <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEED1Ev>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4618      	mov	r0, r3
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <_ZSt15allocate_sharedIN4tama5SceneESaIS1_EJRS1_EESt10shared_ptrIT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 80015cc:	b590      	push	{r4, r7, lr}
 80015ce:	b087      	sub	sp, #28
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
			     std::forward<_Args>(__args)...);
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f7ff fde8 	bl	80011ae <_ZSt7forwardIRN4tama5SceneEEOT_RNSt16remove_referenceIS3_E4typeE>
 80015de:	4603      	mov	r3, r0
 80015e0:	68ba      	ldr	r2, [r7, #8]
 80015e2:	4621      	mov	r1, r4
 80015e4:	68f8      	ldr	r0, [r7, #12]
 80015e6:	f000 f983 	bl	80018f0 <_ZNSt10shared_ptrIN4tama5SceneEEC1ISaIS1_EJRS1_EEESt19_Sp_make_shared_tagRKT_DpOT0_>
    }
 80015ea:	68f8      	ldr	r0, [r7, #12]
 80015ec:	371c      	adds	r7, #28
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd90      	pop	{r4, r7, pc}

080015f2 <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEC1INS0_5SceneEvEEOS_IT_LS3_0EE>:
	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b082      	sub	sp, #8
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
 80015fa:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount()
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	3304      	adds	r3, #4
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff fa65 	bl	8000ad8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _M_refcount._M_swap(__r._M_refcount);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	1d1a      	adds	r2, r3, #4
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	3304      	adds	r3, #4
 8001616:	4619      	mov	r1, r3
 8001618:	4610      	mov	r0, r2
 800161a:	f7ff faa0 	bl	8000b5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  __r._M_ptr = 0;
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
	}
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4618      	mov	r0, r3
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <_ZNSaIN4tama7TextureEEC1Ev>:
      allocator() throw() { }
 800162e:	b580      	push	{r7, lr}
 8001630:	b082      	sub	sp, #8
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f000 f970 	bl	800191c <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEEC1Ev>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	4618      	mov	r0, r3
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <_ZNSaIN4tama7TextureEED1Ev>:
      ~allocator() throw() { }
 8001646:	b580      	push	{r7, lr}
 8001648:	b082      	sub	sp, #8
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f000 f96f 	bl	8001932 <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEED1Ev>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	4618      	mov	r0, r3
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <_ZSt15allocate_sharedIN4tama7TextureESaIS1_EJRjS3_EESt10shared_ptrIT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 800165e:	b5b0      	push	{r4, r5, r7, lr}
 8001660:	b088      	sub	sp, #32
 8001662:	af02      	add	r7, sp, #8
 8001664:	60f8      	str	r0, [r7, #12]
 8001666:	60b9      	str	r1, [r7, #8]
 8001668:	607a      	str	r2, [r7, #4]
 800166a:	603b      	str	r3, [r7, #0]
			     std::forward<_Args>(__args)...);
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f7ff fde4 	bl	800123a <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 8001672:	4604      	mov	r4, r0
 8001674:	6838      	ldr	r0, [r7, #0]
 8001676:	f7ff fde0 	bl	800123a <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 800167a:	4603      	mov	r3, r0
 800167c:	9300      	str	r3, [sp, #0]
 800167e:	4623      	mov	r3, r4
 8001680:	68ba      	ldr	r2, [r7, #8]
 8001682:	4629      	mov	r1, r5
 8001684:	68f8      	ldr	r0, [r7, #12]
 8001686:	f000 f95f 	bl	8001948 <_ZNSt10shared_ptrIN4tama7TextureEEC1ISaIS1_EJRjS5_EEESt19_Sp_make_shared_tagRKT_DpOT0_>
    }
 800168a:	68f8      	ldr	r0, [r7, #12]
 800168c:	3718      	adds	r7, #24
 800168e:	46bd      	mov	sp, r7
 8001690:	bdb0      	pop	{r4, r5, r7, pc}

08001692 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEC1ERKS5_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8001692:	b480      	push	{r7}
 8001694:	b083      	sub	sp, #12
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
 800169a:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4618      	mov	r0, r3
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr

080016b2 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80016b2:	b480      	push	{r7}
 80016b4:	b083      	sub	sp, #12
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4618      	mov	r0, r3
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <_ZNKSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4618      	mov	r0, r3
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE12_Vector_implC1Ev>:
	_Vector_impl()
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f000 f949 	bl	8001980 <_ZNSaISt10shared_ptrIN4tama8DrawableEEEC1Ev>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2200      	movs	r2, #0
 80016f8:	605a      	str	r2, [r3, #4]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2200      	movs	r2, #0
 80016fe:	609a      	str	r2, [r3, #8]
	{ }
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	4618      	mov	r0, r3
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <_ZNSaISt10shared_ptrIN4tama8DrawableEEED1Ev>:
 800170a:	b580      	push	{r7, lr}
 800170c:	b082      	sub	sp, #8
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f000 f940 	bl	8001998 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEED1Ev>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	4618      	mov	r0, r3
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE13_M_deallocateEPS3_j>:
      _M_deallocate(pointer __p, size_t __n)
 8001722:	b580      	push	{r7, lr}
 8001724:	b084      	sub	sp, #16
 8001726:	af00      	add	r7, sp, #0
 8001728:	60f8      	str	r0, [r7, #12]
 800172a:	60b9      	str	r1, [r7, #8]
 800172c:	607a      	str	r2, [r7, #4]
	if (__p)
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d005      	beq.n	8001740 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE13_M_deallocateEPS3_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	68b9      	ldr	r1, [r7, #8]
 800173a:	4618      	mov	r0, r3
 800173c:	f000 f937 	bl	80019ae <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama8DrawableEEEE10deallocateERS4_PS3_j>
      }
 8001740:	bf00      	nop
 8001742:	3710      	adds	r7, #16
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <_ZSt8_DestroyIPSt10shared_ptrIN4tama8DrawableEEEvT_S5_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8001752:	6839      	ldr	r1, [r7, #0]
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f000 f944 	bl	80019e2 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrIN4tama8DrawableEEEEvT_S7_>
    }
 800175a:	bf00      	nop
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEE9constructIS4_JRKS4_EEEvPT_DpOT0_>:
      { return size_t(-1) / sizeof(_Tp); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8001762:	b590      	push	{r4, r7, lr}
 8001764:	b085      	sub	sp, #20
 8001766:	af00      	add	r7, sp, #0
 8001768:	60f8      	str	r0, [r7, #12]
 800176a:	60b9      	str	r1, [r7, #8]
 800176c:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f7ff fe5e 	bl	8001430 <_ZSt7forwardIRKSt10shared_ptrIN4tama8DrawableEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8001774:	4604      	mov	r4, r0
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	4619      	mov	r1, r3
 800177a:	2008      	movs	r0, #8
 800177c:	f7ff fa2e 	bl	8000bdc <_ZnwjPv>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d003      	beq.n	800178e <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEE9constructIS4_JRKS4_EEEvPT_DpOT0_+0x2c>
 8001786:	4621      	mov	r1, r4
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff fbf6 	bl	8000f7a <_ZNSt10shared_ptrIN4tama8DrawableEEC1ERKS2_>
 800178e:	bf00      	nop
 8001790:	3714      	adds	r7, #20
 8001792:	46bd      	mov	sp, r7
 8001794:	bd90      	pop	{r4, r7, pc}

08001796 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 8001796:	b590      	push	{r4, r7, lr}
 8001798:	b087      	sub	sp, #28
 800179a:	af00      	add	r7, sp, #0
 800179c:	60f8      	str	r0, [r7, #12]
 800179e:	60b9      	str	r1, [r7, #8]
 80017a0:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 80017a2:	68f8      	ldr	r0, [r7, #12]
 80017a4:	f000 f935 	bl	8001a12 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE8max_sizeEv>
 80017a8:	4604      	mov	r4, r0
 80017aa:	68f8      	ldr	r0, [r7, #12]
 80017ac:	f000 f942 	bl	8001a34 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE4sizeEv>
 80017b0:	4603      	mov	r3, r0
 80017b2:	1ae2      	subs	r2, r4, r3
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	bf34      	ite	cc
 80017ba:	2301      	movcc	r3, #1
 80017bc:	2300      	movcs	r3, #0
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d003      	beq.n	80017cc <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f00c f92c 	bl	800da24 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + std::max(size(), __n);
 80017cc:	68f8      	ldr	r0, [r7, #12]
 80017ce:	f000 f931 	bl	8001a34 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE4sizeEv>
 80017d2:	4604      	mov	r4, r0
 80017d4:	68f8      	ldr	r0, [r7, #12]
 80017d6:	f000 f92d 	bl	8001a34 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE4sizeEv>
 80017da:	4603      	mov	r3, r0
 80017dc:	613b      	str	r3, [r7, #16]
 80017de:	f107 0208 	add.w	r2, r7, #8
 80017e2:	f107 0310 	add.w	r3, r7, #16
 80017e6:	4611      	mov	r1, r2
 80017e8:	4618      	mov	r0, r3
 80017ea:	f000 f934 	bl	8001a56 <_ZSt3maxIjERKT_S2_S2_>
 80017ee:	4603      	mov	r3, r0
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4423      	add	r3, r4
 80017f4:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80017f6:	68f8      	ldr	r0, [r7, #12]
 80017f8:	f000 f91c 	bl	8001a34 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE4sizeEv>
 80017fc:	4602      	mov	r2, r0
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	4293      	cmp	r3, r2
 8001802:	d306      	bcc.n	8001812 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE12_M_check_lenEjPKc+0x7c>
 8001804:	68f8      	ldr	r0, [r7, #12]
 8001806:	f000 f904 	bl	8001a12 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE8max_sizeEv>
 800180a:	4602      	mov	r2, r0
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	4293      	cmp	r3, r2
 8001810:	d904      	bls.n	800181c <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE12_M_check_lenEjPKc+0x86>
 8001812:	68f8      	ldr	r0, [r7, #12]
 8001814:	f000 f8fd 	bl	8001a12 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE8max_sizeEv>
 8001818:	4603      	mov	r3, r0
 800181a:	e000      	b.n	800181e <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE12_M_check_lenEjPKc+0x88>
 800181c:	697b      	ldr	r3, [r7, #20]
      }
 800181e:	4618      	mov	r0, r3
 8001820:	371c      	adds	r7, #28
 8001822:	46bd      	mov	sp, r7
 8001824:	bd90      	pop	{r4, r7, pc}

08001826 <_ZN9__gnu_cxxmiIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8001826:	b590      	push	{r4, r7, lr}
 8001828:	b083      	sub	sp, #12
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
 800182e:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f7ff ff3e 	bl	80016b2 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEE4baseEv>
 8001836:	4603      	mov	r3, r0
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	461c      	mov	r4, r3
 800183c:	6838      	ldr	r0, [r7, #0]
 800183e:	f7ff ff38 	bl	80016b2 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEE4baseEv>
 8001842:	4603      	mov	r3, r0
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	1ae3      	subs	r3, r4, r3
 8001848:	10db      	asrs	r3, r3, #3
 800184a:	4618      	mov	r0, r3
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	bd90      	pop	{r4, r7, pc}

08001852 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8001852:	b580      	push	{r7, lr}
 8001854:	b082      	sub	sp, #8
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
 800185a:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d006      	beq.n	8001870 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE11_M_allocateEj+0x1e>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6839      	ldr	r1, [r7, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f000 f909 	bl	8001a7e <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama8DrawableEEEE8allocateERS4_j>
 800186c:	4603      	mov	r3, r0
 800186e:	e000      	b.n	8001872 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE11_M_allocateEj+0x20>
 8001870:	2300      	movs	r3, #0
      }
 8001872:	4618      	mov	r0, r3
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <_ZSt34__uninitialized_move_if_noexcept_aIPSt10shared_ptrIN4tama8DrawableEES4_SaIS3_EET0_T_S7_S6_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800187a:	b590      	push	{r4, r7, lr}
 800187c:	b085      	sub	sp, #20
 800187e:	af00      	add	r7, sp, #0
 8001880:	60f8      	str	r0, [r7, #12]
 8001882:	60b9      	str	r1, [r7, #8]
 8001884:	607a      	str	r2, [r7, #4]
 8001886:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8001888:	68f8      	ldr	r0, [r7, #12]
 800188a:	f000 f907 	bl	8001a9c <_ZSt32__make_move_if_noexcept_iteratorISt10shared_ptrIN4tama8DrawableEESt13move_iteratorIPS3_EET0_PT_>
 800188e:	4604      	mov	r4, r0
 8001890:	68b8      	ldr	r0, [r7, #8]
 8001892:	f000 f903 	bl	8001a9c <_ZSt32__make_move_if_noexcept_iteratorISt10shared_ptrIN4tama8DrawableEESt13move_iteratorIPS3_EET0_PT_>
 8001896:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	4620      	mov	r0, r4
 800189e:	f000 f90c 	bl	8001aba <_ZSt22__uninitialized_copy_aISt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEES5_S4_ET0_T_S8_S7_RSaIT1_E>
 80018a2:	4603      	mov	r3, r0
    }
 80018a4:	4618      	mov	r0, r3
 80018a6:	3714      	adds	r7, #20
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd90      	pop	{r4, r7, pc}

080018ac <_ZNKSt12__shared_ptrIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4618      	mov	r0, r3
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4618      	mov	r0, r3
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr

080018da <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80018da:	b480      	push	{r7}
 80018dc:	b083      	sub	sp, #12
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4618      	mov	r0, r3
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <_ZNSt10shared_ptrIN4tama5SceneEEC1ISaIS1_EJRS1_EEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 80018f0:	b5b0      	push	{r4, r5, r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	7239      	strb	r1, [r7, #8]
 80018fa:	607a      	str	r2, [r7, #4]
 80018fc:	603b      	str	r3, [r7, #0]
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
 80018fe:	68fc      	ldr	r4, [r7, #12]
 8001900:	6838      	ldr	r0, [r7, #0]
 8001902:	f7ff fc54 	bl	80011ae <_ZSt7forwardIRN4tama5SceneEEOT_RNSt16remove_referenceIS3_E4typeE>
 8001906:	4603      	mov	r3, r0
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	4629      	mov	r1, r5
 800190c:	4620      	mov	r0, r4
 800190e:	f000 f902 	bl	8001b16 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJRS1_EEESt19_Sp_make_shared_tagRKT_DpOT0_>
	{ }
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	4618      	mov	r0, r3
 8001916:	3710      	adds	r7, #16
 8001918:	46bd      	mov	sp, r7
 800191a:	bdb0      	pop	{r4, r5, r7, pc}

0800191c <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	4618      	mov	r0, r3
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001932:	b480      	push	{r7}
 8001934:	b083      	sub	sp, #12
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4618      	mov	r0, r3
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <_ZNSt10shared_ptrIN4tama7TextureEEC1ISaIS1_EJRjS5_EEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8001948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800194a:	b087      	sub	sp, #28
 800194c:	af02      	add	r7, sp, #8
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	7239      	strb	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
 8001954:	603b      	str	r3, [r7, #0]
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
 8001956:	68fc      	ldr	r4, [r7, #12]
 8001958:	6838      	ldr	r0, [r7, #0]
 800195a:	f7ff fc6e 	bl	800123a <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 800195e:	4605      	mov	r5, r0
 8001960:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001962:	f7ff fc6a 	bl	800123a <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 8001966:	4603      	mov	r3, r0
 8001968:	9300      	str	r3, [sp, #0]
 800196a:	462b      	mov	r3, r5
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	4631      	mov	r1, r6
 8001970:	4620      	mov	r0, r4
 8001972:	f000 f968 	bl	8001c46 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJRjS7_EEESt19_Sp_make_shared_tagRKT_DpOT0_>
	{ }
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	4618      	mov	r0, r3
 800197a:	3714      	adds	r7, #20
 800197c:	46bd      	mov	sp, r7
 800197e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001980 <_ZNSaISt10shared_ptrIN4tama8DrawableEEEC1Ev>:
      allocator() throw() { }
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f000 f9db 	bl	8001d44 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEEC1Ev>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4618      	mov	r0, r3
 8001992:	3708      	adds	r7, #8
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}

08001998 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEED1Ev>:
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4618      	mov	r0, r3
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr

080019ae <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama8DrawableEEEE10deallocateERS4_PS3_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b084      	sub	sp, #16
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	60f8      	str	r0, [r7, #12]
 80019b6:	60b9      	str	r1, [r7, #8]
 80019b8:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	68b9      	ldr	r1, [r7, #8]
 80019be:	68f8      	ldr	r0, [r7, #12]
 80019c0:	f000 f9cb 	bl	8001d5a <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEE10deallocateEPS4_j>
 80019c4:	bf00      	nop
 80019c6:	3710      	adds	r7, #16
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}

080019cc <_ZSt11__addressofISt10shared_ptrIN4tama8DrawableEEEPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	4618      	mov	r0, r3
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr

080019e2 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrIN4tama8DrawableEEEEvT_S7_>:
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b082      	sub	sp, #8
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
 80019ea:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d00a      	beq.n	8001a0a <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrIN4tama8DrawableEEEEvT_S7_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f7ff ffe9 	bl	80019cc <_ZSt11__addressofISt10shared_ptrIN4tama8DrawableEEEPT_RS4_>
 80019fa:	4603      	mov	r3, r0
 80019fc:	4618      	mov	r0, r3
 80019fe:	f000 f9b9 	bl	8001d74 <_ZSt8_DestroyISt10shared_ptrIN4tama8DrawableEEEvPT_>
	  for (; __first != __last; ++__first)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	3308      	adds	r3, #8
 8001a06:	607b      	str	r3, [r7, #4]
 8001a08:	e7f0      	b.n	80019ec <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrIN4tama8DrawableEEEEvT_S7_+0xa>
	}
 8001a0a:	bf00      	nop
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b082      	sub	sp, #8
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f000 f9c0 	bl	8001da2 <_ZNKSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE19_M_get_Tp_allocatorEv>
 8001a22:	4603      	mov	r3, r0
 8001a24:	4618      	mov	r0, r3
 8001a26:	f000 f9b0 	bl	8001d8a <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama8DrawableEEEE8max_sizeERKS4_>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	461a      	mov	r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	10db      	asrs	r3, r3, #3
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr

08001a56 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8001a56:	b480      	push	{r7}
 8001a58:	b083      	sub	sp, #12
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
 8001a5e:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d201      	bcs.n	8001a70 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	e000      	b.n	8001a72 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8001a70:	687b      	ldr	r3, [r7, #4]
    }
 8001a72:	4618      	mov	r0, r3
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama8DrawableEEEE8allocateERS4_j>:
      allocate(allocator_type& __a, size_type __n)
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b082      	sub	sp, #8
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
 8001a86:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8001a88:	2200      	movs	r2, #0
 8001a8a:	6839      	ldr	r1, [r7, #0]
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f000 f993 	bl	8001db8 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEE8allocateEjPKv>
 8001a92:	4603      	mov	r3, r0
 8001a94:	4618      	mov	r0, r3
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <_ZSt32__make_move_if_noexcept_iteratorISt10shared_ptrIN4tama8DrawableEESt13move_iteratorIPS3_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8001aa4:	f107 030c 	add.w	r3, r7, #12
 8001aa8:	6879      	ldr	r1, [r7, #4]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f000 f9a2 	bl	8001df4 <_ZNSt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEEC1ES4_>
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <_ZSt22__uninitialized_copy_aISt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEES5_S4_ET0_T_S8_S7_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b084      	sub	sp, #16
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	60f8      	str	r0, [r7, #12]
 8001ac2:	60b9      	str	r1, [r7, #8]
 8001ac4:	607a      	str	r2, [r7, #4]
 8001ac6:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	68b9      	ldr	r1, [r7, #8]
 8001acc:	68f8      	ldr	r0, [r7, #12]
 8001ace:	f000 f9a0 	bl	8001e12 <_ZSt18uninitialized_copyISt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEES5_ET0_T_S8_S7_>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3710      	adds	r7, #16
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>:
	  _M_ptr = static_cast<_Tp*>(__p);
	  _M_enable_shared_from_this_with(_M_ptr);
	}
#else
      template<typename _Alloc>
        struct _Deleter
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff fd64 	bl	80015b4 <_ZNSaIN4tama5SceneEED1Ev>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	4618      	mov	r0, r3
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>:
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b082      	sub	sp, #8
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
 8001afe:	6039      	str	r1, [r7, #0]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	683a      	ldr	r2, [r7, #0]
 8001b04:	4611      	mov	r1, r2
 8001b06:	4618      	mov	r0, r3
 8001b08:	f000 f995 	bl	8001e36 <_ZNSaIN4tama5SceneEEC1ERKS1_>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJRS1_EEESt19_Sp_make_shared_tagRKT_DpOT0_>:
          }
          _Alloc _M_alloc;
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b08c      	sub	sp, #48	; 0x30
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	60f8      	str	r0, [r7, #12]
 8001b1e:	7239      	strb	r1, [r7, #8]
 8001b20:	607a      	str	r2, [r7, #4]
 8001b22:	603b      	str	r3, [r7, #0]
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	3304      	adds	r3, #4
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7fe ffd2 	bl	8000ad8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 8001b34:	f107 0320 	add.w	r3, r7, #32
 8001b38:	6879      	ldr	r1, [r7, #4]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f000 f97b 	bl	8001e36 <_ZNSaIN4tama5SceneEEC1ERKS1_>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 8001b40:	f107 0318 	add.w	r3, r7, #24
 8001b44:	f107 0220 	add.w	r2, r7, #32
 8001b48:	4611      	mov	r1, r2
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f000 f981 	bl	8001e52 <_ZSt18__allocate_guardedISaIN4tama5SceneEEESt15__allocated_ptrIT_ERS4_>
	  auto __ptr = __guard.get();
 8001b50:	f107 0318 	add.w	r3, r7, #24
 8001b54:	4618      	mov	r0, r3
 8001b56:	f000 f9a4 	bl	8001ea2 <_ZNSt15__allocated_ptrISaIN4tama5SceneEEE3getEv>
 8001b5a:	62f8      	str	r0, [r7, #44]	; 0x2c
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
 8001b5c:	6838      	ldr	r0, [r7, #0]
 8001b5e:	f7ff fb26 	bl	80011ae <_ZSt7forwardIRN4tama5SceneEEOT_RNSt16remove_referenceIS3_E4typeE>
 8001b62:	4602      	mov	r2, r0
 8001b64:	f107 0320 	add.w	r3, r7, #32
 8001b68:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f000 f9a7 	bl	8001ebe <_ZNSt16allocator_traitsISaIN4tama5SceneEEE9constructIS1_JRS1_EEEvRS2_PT_DpOT0_>
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
 8001b70:	f107 0318 	add.w	r3, r7, #24
 8001b74:	2100      	movs	r1, #0
 8001b76:	4618      	mov	r0, r3
 8001b78:	f000 f9b4 	bl	8001ee4 <_ZNSt15__allocated_ptrISaIN4tama5SceneEEEaSEDn>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 8001b7c:	f107 0220 	add.w	r2, r7, #32
 8001b80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b84:	4611      	mov	r1, r2
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff ffb5 	bl	8001af6 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>
 8001b8c:	f107 0220 	add.w	r2, r7, #32
 8001b90:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b94:	4611      	mov	r1, r2
 8001b96:	4618      	mov	r0, r3
 8001b98:	f000 f94d 	bl	8001e36 <_ZNSaIN4tama5SceneEEC1ERKS1_>
 8001b9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ba0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001ba4:	f107 0014 	add.w	r0, r7, #20
 8001ba8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001baa:	f000 f9d0 	bl	8001f4e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama5SceneENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
 8001bae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7ff fcfe 	bl	80015b4 <_ZNSaIN4tama5SceneEED1Ev>
 8001bb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff ff8d 	bl	8001adc <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	  _M_refcount._M_swap(__count);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	3304      	adds	r3, #4
 8001bc6:	f107 0214 	add.w	r2, r7, #20
 8001bca:	4611      	mov	r1, r2
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7fe ffc6 	bl	8000b5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  _M_ptr = __ptr;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bd6:	601a      	str	r2, [r3, #0]
	  _M_enable_shared_from_this_with(_M_ptr);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4619      	mov	r1, r3
 8001bde:	68f8      	ldr	r0, [r7, #12]
 8001be0:	f000 fa0c 	bl	8001ffc <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 8001be4:	f107 0314 	add.w	r3, r7, #20
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7fe fead 	bl	8000948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 8001bee:	f107 0318 	add.w	r3, r7, #24
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f000 f940 	bl	8001e78 <_ZNSt15__allocated_ptrISaIN4tama5SceneEEED1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 8001bf8:	f107 0320 	add.w	r3, r7, #32
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff ff6d 	bl	8001adc <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	}
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	4618      	mov	r0, r3
 8001c06:	3730      	adds	r7, #48	; 0x30
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>:
        struct _Deleter
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff fd15 	bl	8001646 <_ZNSaIN4tama7TextureEED1Ev>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>:
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b082      	sub	sp, #8
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
 8001c2e:	6039      	str	r1, [r7, #0]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	683a      	ldr	r2, [r7, #0]
 8001c34:	4611      	mov	r1, r2
 8001c36:	4618      	mov	r0, r3
 8001c38:	f000 f9eb 	bl	8002012 <_ZNSaIN4tama7TextureEEC1ERKS1_>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJRjS7_EEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8001c46:	b590      	push	{r4, r7, lr}
 8001c48:	b08d      	sub	sp, #52	; 0x34
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	60f8      	str	r0, [r7, #12]
 8001c4e:	7239      	strb	r1, [r7, #8]
 8001c50:	607a      	str	r2, [r7, #4]
 8001c52:	603b      	str	r3, [r7, #0]
	: _M_ptr(), _M_refcount()
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2200      	movs	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	3304      	adds	r3, #4
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7fe ff3a 	bl	8000ad8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 8001c64:	f107 0320 	add.w	r3, r7, #32
 8001c68:	6879      	ldr	r1, [r7, #4]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f000 f9d1 	bl	8002012 <_ZNSaIN4tama7TextureEEC1ERKS1_>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 8001c70:	f107 0318 	add.w	r3, r7, #24
 8001c74:	f107 0220 	add.w	r2, r7, #32
 8001c78:	4611      	mov	r1, r2
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f000 f9d7 	bl	800202e <_ZSt18__allocate_guardedISaIN4tama7TextureEEESt15__allocated_ptrIT_ERS4_>
	  auto __ptr = __guard.get();
 8001c80:	f107 0318 	add.w	r3, r7, #24
 8001c84:	4618      	mov	r0, r3
 8001c86:	f000 f9fa 	bl	800207e <_ZNSt15__allocated_ptrISaIN4tama7TextureEEE3getEv>
 8001c8a:	62f8      	str	r0, [r7, #44]	; 0x2c
	  __traits::construct(__del._M_alloc, __ptr,
 8001c8c:	6838      	ldr	r0, [r7, #0]
 8001c8e:	f7ff fad4 	bl	800123a <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 8001c92:	4604      	mov	r4, r0
 8001c94:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001c96:	f7ff fad0 	bl	800123a <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	f107 0020 	add.w	r0, r7, #32
 8001ca0:	4622      	mov	r2, r4
 8001ca2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001ca4:	f000 f9f9 	bl	800209a <_ZNSt16allocator_traitsISaIN4tama7TextureEEE9constructIS1_JRjS5_EEEvRS2_PT_DpOT0_>
	  __guard = nullptr;
 8001ca8:	f107 0318 	add.w	r3, r7, #24
 8001cac:	2100      	movs	r1, #0
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f000 fa0b 	bl	80020ca <_ZNSt15__allocated_ptrISaIN4tama7TextureEEEaSEDn>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 8001cb4:	f107 0220 	add.w	r2, r7, #32
 8001cb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cbc:	4611      	mov	r1, r2
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff ffb1 	bl	8001c26 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>
 8001cc4:	f107 0220 	add.w	r2, r7, #32
 8001cc8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ccc:	4611      	mov	r1, r2
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f000 f99f 	bl	8002012 <_ZNSaIN4tama7TextureEEC1ERKS1_>
 8001cd4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cd8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001cdc:	f107 0014 	add.w	r0, r7, #20
 8001ce0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001ce2:	f000 fa27 	bl	8002134 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama7TextureENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
 8001ce6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff fcab 	bl	8001646 <_ZNSaIN4tama7TextureEED1Ev>
 8001cf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff ff89 	bl	8001c0c <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	  _M_refcount._M_swap(__count);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	3304      	adds	r3, #4
 8001cfe:	f107 0214 	add.w	r2, r7, #20
 8001d02:	4611      	mov	r1, r2
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7fe ff2a 	bl	8000b5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  _M_ptr = __ptr;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d0e:	601a      	str	r2, [r3, #0]
	  _M_enable_shared_from_this_with(_M_ptr);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4619      	mov	r1, r3
 8001d16:	68f8      	ldr	r0, [r7, #12]
 8001d18:	f000 fa63 	bl	80021e2 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 8001d1c:	f107 0314 	add.w	r3, r7, #20
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7fe fe11 	bl	8000948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 8001d26:	f107 0318 	add.w	r3, r7, #24
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f000 f992 	bl	8002054 <_ZNSt15__allocated_ptrISaIN4tama7TextureEEED1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 8001d30:	f107 0320 	add.w	r3, r7, #32
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7ff ff69 	bl	8001c0c <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	}
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3734      	adds	r7, #52	; 0x34
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd90      	pop	{r4, r7, pc}

08001d44 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr

08001d5a <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEE10deallocateEPS4_j>:
      deallocate(pointer __p, size_type)
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b084      	sub	sp, #16
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	60f8      	str	r0, [r7, #12]
 8001d62:	60b9      	str	r1, [r7, #8]
 8001d64:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8001d66:	68b8      	ldr	r0, [r7, #8]
 8001d68:	f00b fe46 	bl	800d9f8 <_ZdlPv>
      }
 8001d6c:	bf00      	nop
 8001d6e:	3710      	adds	r7, #16
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <_ZSt8_DestroyISt10shared_ptrIN4tama8DrawableEEEvPT_>:
    _Destroy(_Tp* __pointer)
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f7ff f90c 	bl	8000f9a <_ZNSt10shared_ptrIN4tama8DrawableEED1Ev>
 8001d82:	bf00      	nop
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama8DrawableEEEE8max_sizeERKS4_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b082      	sub	sp, #8
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f000 fa30 	bl	80021f8 <_ZNK9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEE8max_sizeEv>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <_ZNKSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8001da2:	b480      	push	{r7}
 8001da4:	b083      	sub	sp, #12
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4618      	mov	r0, r3
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8001dc4:	68f8      	ldr	r0, [r7, #12]
 8001dc6:	f000 fa17 	bl	80021f8 <_ZNK9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEE8max_sizeEv>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	bf8c      	ite	hi
 8001dd2:	2301      	movhi	r3, #1
 8001dd4:	2300      	movls	r3, #0
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8001ddc:	f00b fe1f 	bl	800da1e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	00db      	lsls	r3, r3, #3
 8001de4:	4618      	mov	r0, r3
 8001de6:	f00b fdee 	bl	800d9c6 <_Znwj>
 8001dea:	4603      	mov	r3, r0
      }
 8001dec:	4618      	mov	r0, r3
 8001dee:	3710      	adds	r7, #16
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <_ZNSt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEEC1ES4_>:
      move_iterator(iterator_type __i)
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	683a      	ldr	r2, [r7, #0]
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	4618      	mov	r0, r3
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr

08001e12 <_ZSt18uninitialized_copyISt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEES5_ET0_T_S8_S7_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b086      	sub	sp, #24
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	60f8      	str	r0, [r7, #12]
 8001e1a:	60b9      	str	r1, [r7, #8]
 8001e1c:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	68b9      	ldr	r1, [r7, #8]
 8001e26:	68f8      	ldr	r0, [r7, #12]
 8001e28:	f000 f9f2 	bl	8002210 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEES7_EET0_T_SA_S9_>
 8001e2c:	4603      	mov	r3, r0
    }
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3718      	adds	r7, #24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <_ZNSaIN4tama5SceneEEC1ERKS1_>:
      allocator(const allocator& __a) throw()
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b082      	sub	sp, #8
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
 8001e3e:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8001e40:	6839      	ldr	r1, [r7, #0]
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 fa13 	bl	800226e <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEEC1ERKS3_>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <_ZSt18__allocate_guardedISaIN4tama5SceneEEESt15__allocated_ptrIT_ERS4_>:
    };

  /// Allocate space for a single object using __a
  template<typename _Alloc>
    __allocated_ptr<_Alloc>
    __allocate_guarded(_Alloc& __a)
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b082      	sub	sp, #8
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
 8001e5a:	6039      	str	r1, [r7, #0]
    {
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 8001e5c:	2101      	movs	r1, #1
 8001e5e:	6838      	ldr	r0, [r7, #0]
 8001e60:	f000 fa11 	bl	8002286 <_ZNSt16allocator_traitsISaIN4tama5SceneEEE8allocateERS2_j>
 8001e64:	4603      	mov	r3, r0
 8001e66:	461a      	mov	r2, r3
 8001e68:	6839      	ldr	r1, [r7, #0]
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 fa1a 	bl	80022a4 <_ZNSt15__allocated_ptrISaIN4tama5SceneEEEC1ERS2_PS1_>
    }
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <_ZNSt15__allocated_ptrISaIN4tama5SceneEEED1Ev>:
      ~__allocated_ptr()
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d007      	beq.n	8001e98 <_ZNSt15__allocated_ptrISaIN4tama5SceneEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6818      	ldr	r0, [r3, #0]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	2201      	movs	r2, #1
 8001e92:	4619      	mov	r1, r3
 8001e94:	f000 fa1a 	bl	80022cc <_ZNSt16allocator_traitsISaIN4tama5SceneEEE10deallocateERS2_PS1_j>
      }
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <_ZNSt15__allocated_ptrISaIN4tama5SceneEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b082      	sub	sp, #8
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f000 fa1b 	bl	80022ea <_ZNSt15__allocated_ptrISaIN4tama5SceneEEE10_S_raw_ptrEPS1_>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <_ZNSt16allocator_traitsISaIN4tama5SceneEEE9constructIS1_JRS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b084      	sub	sp, #16
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	60f8      	str	r0, [r7, #12]
 8001ec6:	60b9      	str	r1, [r7, #8]
 8001ec8:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f7ff f96f 	bl	80011ae <_ZSt7forwardIRN4tama5SceneEEOT_RNSt16remove_referenceIS3_E4typeE>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	68b9      	ldr	r1, [r7, #8]
 8001ed6:	68f8      	ldr	r0, [r7, #12]
 8001ed8:	f000 fa78 	bl	80023cc <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEE9constructIS2_JRS2_EEEvPT_DpOT0_>
 8001edc:	bf00      	nop
 8001ede:	3710      	adds	r7, #16
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <_ZNSt15__allocated_ptrISaIN4tama5SceneEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	605a      	str	r2, [r3, #4]
	return *this;
 8001ef4:	687b      	ldr	r3, [r7, #4]
      }
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr

08001f02 <_ZSt4moveIRNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 8001f02:	b480      	push	{r7}
 8001f04:	b083      	sub	sp, #12
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>:
        struct _Deleter
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	683a      	ldr	r2, [r7, #0]
 8001f26:	4611      	mov	r1, r2
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff ff84 	bl	8001e36 <_ZNSaIN4tama5SceneEEC1ERKS1_>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4618      	mov	r0, r3
 8001f32:	3708      	adds	r7, #8
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <_ZSt4moveIRSaIN4tama5SceneEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4618      	mov	r0, r3
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr

08001f4e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama5SceneENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
 8001f4e:	b5b0      	push	{r4, r5, r7, lr}
 8001f50:	b08a      	sub	sp, #40	; 0x28
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	60f8      	str	r0, [r7, #12]
 8001f56:	60b9      	str	r1, [r7, #8]
 8001f58:	607a      	str	r2, [r7, #4]
 8001f5a:	603b      	str	r3, [r7, #0]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	601a      	str	r2, [r3, #0]
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 8001f62:	f107 031c 	add.w	r3, r7, #28
 8001f66:	6839      	ldr	r1, [r7, #0]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f000 fa49 	bl	8002400 <_ZNSaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	      auto __guard = std::__allocate_guarded(__a2);
 8001f6e:	f107 0314 	add.w	r3, r7, #20
 8001f72:	f107 021c 	add.w	r2, r7, #28
 8001f76:	4611      	mov	r1, r2
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f000 fa5a 	bl	8002432 <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>
	      _Sp_cd_type* __mem = __guard.get();
 8001f7e:	f107 0314 	add.w	r3, r7, #20
 8001f82:	4618      	mov	r0, r3
 8001f84:	f000 fa7d 	bl	8002482 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>
 8001f88:	6278      	str	r0, [r7, #36]	; 0x24
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f7ff ffb9 	bl	8001f02 <_ZSt4moveIRNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8001f90:	4602      	mov	r2, r0
 8001f92:	f107 0320 	add.w	r3, r7, #32
 8001f96:	4611      	mov	r1, r2
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7ff ffbd 	bl	8001f18 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 8001f9e:	f107 0420 	add.w	r4, r7, #32
 8001fa2:	6838      	ldr	r0, [r7, #0]
 8001fa4:	f7ff ffc8 	bl	8001f38 <_ZSt4moveIRSaIN4tama5SceneEEEONSt16remove_referenceIT_E4typeEOS5_>
 8001fa8:	4605      	mov	r5, r0
 8001faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fac:	4619      	mov	r1, r3
 8001fae:	2014      	movs	r0, #20
 8001fb0:	f7fe fe14 	bl	8000bdc <_ZnwjPv>
 8001fb4:	2800      	cmp	r0, #0
 8001fb6:	d004      	beq.n	8001fc2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama5SceneENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x74>
 8001fb8:	462b      	mov	r3, r5
 8001fba:	4622      	mov	r2, r4
 8001fbc:	68b9      	ldr	r1, [r7, #8]
 8001fbe:	f000 fa99 	bl	80024f4 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>
 8001fc2:	f107 0320 	add.w	r3, r7, #32
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7ff fd88 	bl	8001adc <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	      _M_pi = __mem;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fd0:	601a      	str	r2, [r3, #0]
	      __guard = nullptr;
 8001fd2:	f107 0314 	add.w	r3, r7, #20
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f000 fab9 	bl	8002550 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>
	      auto __guard = std::__allocate_guarded(__a2);
 8001fde:	f107 0314 	add.w	r3, r7, #20
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f000 fa38 	bl	8002458 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 8001fe8:	f107 031c 	add.w	r3, r7, #28
 8001fec:	4618      	mov	r0, r3
 8001fee:	f000 fa14 	bl	800241a <_ZNSaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
	}
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3728      	adds	r7, #40	; 0x28
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bdb0      	pop	{r4, r5, r7, pc}

08001ffc <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	    __base->_M_weak_assign(const_cast<_Yp2*>(__p), _M_refcount);
	}

      template<typename _Yp, typename _Yp2 = typename remove_cv<_Yp>::type>
	typename enable_if<!__has_esft_base<_Yp2>::value>::type
	_M_enable_shared_from_this_with(_Yp*) noexcept
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
	{ }
 8002006:	bf00      	nop
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <_ZNSaIN4tama7TextureEEC1ERKS1_>:
      allocator(const allocator& __a) throw()
 8002012:	b580      	push	{r7, lr}
 8002014:	b082      	sub	sp, #8
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
 800201a:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800201c:	6839      	ldr	r1, [r7, #0]
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f000 fac5 	bl	80025ae <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEEC1ERKS3_>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4618      	mov	r0, r3
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <_ZSt18__allocate_guardedISaIN4tama7TextureEEESt15__allocated_ptrIT_ERS4_>:
    __allocate_guarded(_Alloc& __a)
 800202e:	b580      	push	{r7, lr}
 8002030:	b082      	sub	sp, #8
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
 8002036:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 8002038:	2101      	movs	r1, #1
 800203a:	6838      	ldr	r0, [r7, #0]
 800203c:	f000 fac3 	bl	80025c6 <_ZNSt16allocator_traitsISaIN4tama7TextureEEE8allocateERS2_j>
 8002040:	4603      	mov	r3, r0
 8002042:	461a      	mov	r2, r3
 8002044:	6839      	ldr	r1, [r7, #0]
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 facc 	bl	80025e4 <_ZNSt15__allocated_ptrISaIN4tama7TextureEEEC1ERS2_PS1_>
    }
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	3708      	adds	r7, #8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <_ZNSt15__allocated_ptrISaIN4tama7TextureEEED1Ev>:
      ~__allocated_ptr()
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d007      	beq.n	8002074 <_ZNSt15__allocated_ptrISaIN4tama7TextureEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6818      	ldr	r0, [r3, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	2201      	movs	r2, #1
 800206e:	4619      	mov	r1, r3
 8002070:	f000 facc 	bl	800260c <_ZNSt16allocator_traitsISaIN4tama7TextureEEE10deallocateERS2_PS1_j>
      }
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4618      	mov	r0, r3
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <_ZNSt15__allocated_ptrISaIN4tama7TextureEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 800207e:	b580      	push	{r7, lr}
 8002080:	b082      	sub	sp, #8
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	4618      	mov	r0, r3
 800208c:	f000 facd 	bl	800262a <_ZNSt15__allocated_ptrISaIN4tama7TextureEEE10_S_raw_ptrEPS1_>
 8002090:	4603      	mov	r3, r0
 8002092:	4618      	mov	r0, r3
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <_ZNSt16allocator_traitsISaIN4tama7TextureEEE9constructIS1_JRjS5_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 800209a:	b590      	push	{r4, r7, lr}
 800209c:	b085      	sub	sp, #20
 800209e:	af00      	add	r7, sp, #0
 80020a0:	60f8      	str	r0, [r7, #12]
 80020a2:	60b9      	str	r1, [r7, #8]
 80020a4:	607a      	str	r2, [r7, #4]
 80020a6:	603b      	str	r3, [r7, #0]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f7ff f8c6 	bl	800123a <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 80020ae:	4604      	mov	r4, r0
 80020b0:	6838      	ldr	r0, [r7, #0]
 80020b2:	f7ff f8c2 	bl	800123a <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 80020b6:	4603      	mov	r3, r0
 80020b8:	4622      	mov	r2, r4
 80020ba:	68b9      	ldr	r1, [r7, #8]
 80020bc:	68f8      	ldr	r0, [r7, #12]
 80020be:	f000 fabf 	bl	8002640 <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE9constructIS2_JRjS5_EEEvPT_DpOT0_>
 80020c2:	bf00      	nop
 80020c4:	3714      	adds	r7, #20
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd90      	pop	{r4, r7, pc}

080020ca <_ZNSt15__allocated_ptrISaIN4tama7TextureEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 80020ca:	b480      	push	{r7}
 80020cc:	b083      	sub	sp, #12
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
 80020d2:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	605a      	str	r2, [r3, #4]
	return *this;
 80020da:	687b      	ldr	r3, [r7, #4]
      }
 80020dc:	4618      	mov	r0, r3
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <_ZSt4moveIRNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4618      	mov	r0, r3
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr

080020fe <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>:
        struct _Deleter
 80020fe:	b580      	push	{r7, lr}
 8002100:	b082      	sub	sp, #8
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
 8002106:	6039      	str	r1, [r7, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	683a      	ldr	r2, [r7, #0]
 800210c:	4611      	mov	r1, r2
 800210e:	4618      	mov	r0, r3
 8002110:	f7ff ff7f 	bl	8002012 <_ZNSaIN4tama7TextureEEC1ERKS1_>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4618      	mov	r0, r3
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <_ZSt4moveIRSaIN4tama7TextureEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800211e:	b480      	push	{r7}
 8002120:	b083      	sub	sp, #12
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4618      	mov	r0, r3
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama7TextureENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
 8002134:	b5b0      	push	{r4, r5, r7, lr}
 8002136:	b08a      	sub	sp, #40	; 0x28
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
 8002140:	603b      	str	r3, [r7, #0]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 8002148:	f107 031c 	add.w	r3, r7, #28
 800214c:	6839      	ldr	r1, [r7, #0]
 800214e:	4618      	mov	r0, r3
 8002150:	f000 fa98 	bl	8002684 <_ZNSaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	      auto __guard = std::__allocate_guarded(__a2);
 8002154:	f107 0314 	add.w	r3, r7, #20
 8002158:	f107 021c 	add.w	r2, r7, #28
 800215c:	4611      	mov	r1, r2
 800215e:	4618      	mov	r0, r3
 8002160:	f000 faa9 	bl	80026b6 <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>
	      _Sp_cd_type* __mem = __guard.get();
 8002164:	f107 0314 	add.w	r3, r7, #20
 8002168:	4618      	mov	r0, r3
 800216a:	f000 facc 	bl	8002706 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>
 800216e:	6278      	str	r0, [r7, #36]	; 0x24
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f7ff ffb9 	bl	80020e8 <_ZSt4moveIRNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8002176:	4602      	mov	r2, r0
 8002178:	f107 0320 	add.w	r3, r7, #32
 800217c:	4611      	mov	r1, r2
 800217e:	4618      	mov	r0, r3
 8002180:	f7ff ffbd 	bl	80020fe <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 8002184:	f107 0420 	add.w	r4, r7, #32
 8002188:	6838      	ldr	r0, [r7, #0]
 800218a:	f7ff ffc8 	bl	800211e <_ZSt4moveIRSaIN4tama7TextureEEEONSt16remove_referenceIT_E4typeEOS5_>
 800218e:	4605      	mov	r5, r0
 8002190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002192:	4619      	mov	r1, r3
 8002194:	2014      	movs	r0, #20
 8002196:	f7fe fd21 	bl	8000bdc <_ZnwjPv>
 800219a:	2800      	cmp	r0, #0
 800219c:	d004      	beq.n	80021a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama7TextureENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x74>
 800219e:	462b      	mov	r3, r5
 80021a0:	4622      	mov	r2, r4
 80021a2:	68b9      	ldr	r1, [r7, #8]
 80021a4:	f000 fae8 	bl	8002778 <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>
 80021a8:	f107 0320 	add.w	r3, r7, #32
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff fd2d 	bl	8001c0c <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	      _M_pi = __mem;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021b6:	601a      	str	r2, [r3, #0]
	      __guard = nullptr;
 80021b8:	f107 0314 	add.w	r3, r7, #20
 80021bc:	2100      	movs	r1, #0
 80021be:	4618      	mov	r0, r3
 80021c0:	f000 fb08 	bl	80027d4 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>
	      auto __guard = std::__allocate_guarded(__a2);
 80021c4:	f107 0314 	add.w	r3, r7, #20
 80021c8:	4618      	mov	r0, r3
 80021ca:	f000 fa87 	bl	80026dc <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 80021ce:	f107 031c 	add.w	r3, r7, #28
 80021d2:	4618      	mov	r0, r3
 80021d4:	f000 fa63 	bl	800269e <_ZNSaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
	}
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	4618      	mov	r0, r3
 80021dc:	3728      	adds	r7, #40	; 0x28
 80021de:	46bd      	mov	sp, r7
 80021e0:	bdb0      	pop	{r4, r5, r7, pc}

080021e2 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 80021e2:	b480      	push	{r7}
 80021e4:	b083      	sub	sp, #12
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
 80021ea:	6039      	str	r1, [r7, #0]
	{ }
 80021ec:	bf00      	nop
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <_ZNK9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8002200:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8002204:	4618      	mov	r0, r3
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEES7_EET0_T_SA_S9_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8002210:	b590      	push	{r4, r7, lr}
 8002212:	b087      	sub	sp, #28
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 8002220:	f107 0208 	add.w	r2, r7, #8
 8002224:	f107 030c 	add.w	r3, r7, #12
 8002228:	4611      	mov	r1, r2
 800222a:	4618      	mov	r0, r3
 800222c:	f000 fb01 	bl	8002832 <_ZStneIPSt10shared_ptrIN4tama8DrawableEEEbRKSt13move_iteratorIT_ES9_>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d016      	beq.n	8002264 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEES7_EET0_T_SA_S9_+0x54>
		std::_Construct(std::__addressof(*__cur), *__first);
 8002236:	6978      	ldr	r0, [r7, #20]
 8002238:	f7ff fbc8 	bl	80019cc <_ZSt11__addressofISt10shared_ptrIN4tama8DrawableEEEPT_RS4_>
 800223c:	4604      	mov	r4, r0
 800223e:	f107 030c 	add.w	r3, r7, #12
 8002242:	4618      	mov	r0, r3
 8002244:	f000 fb17 	bl	8002876 <_ZNKSt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEEdeEv>
 8002248:	4603      	mov	r3, r0
 800224a:	4619      	mov	r1, r3
 800224c:	4620      	mov	r0, r4
 800224e:	f000 fb29 	bl	80028a4 <_ZSt10_ConstructISt10shared_ptrIN4tama8DrawableEEJS3_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 8002252:	f107 030c 	add.w	r3, r7, #12
 8002256:	4618      	mov	r0, r3
 8002258:	f000 fafc 	bl	8002854 <_ZNSt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEEppEv>
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	3308      	adds	r3, #8
 8002260:	617b      	str	r3, [r7, #20]
 8002262:	e7dd      	b.n	8002220 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEES7_EET0_T_SA_S9_+0x10>
	      return __cur;
 8002264:	697b      	ldr	r3, [r7, #20]
	}
 8002266:	4618      	mov	r0, r3
 8002268:	371c      	adds	r7, #28
 800226a:	46bd      	mov	sp, r7
 800226c:	bd90      	pop	{r4, r7, pc}

0800226e <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800226e:	b480      	push	{r7}
 8002270:	b083      	sub	sp, #12
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
 8002276:	6039      	str	r1, [r7, #0]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4618      	mov	r0, r3
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr

08002286 <_ZNSt16allocator_traitsISaIN4tama5SceneEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8002286:	b580      	push	{r7, lr}
 8002288:	b082      	sub	sp, #8
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
 800228e:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8002290:	2200      	movs	r2, #0
 8002292:	6839      	ldr	r1, [r7, #0]
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f000 fb1e 	bl	80028d6 <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEE8allocateEjPKv>
 800229a:	4603      	mov	r3, r0
 800229c:	4618      	mov	r0, r3
 800229e:	3708      	adds	r7, #8
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <_ZNSt15__allocated_ptrISaIN4tama5SceneEEEC1ERS2_PS1_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 80022b0:	68b8      	ldr	r0, [r7, #8]
 80022b2:	f000 fb2e 	bl	8002912 <_ZSt11__addressofISaIN4tama5SceneEEEPT_RS3_>
 80022b6:	4602      	mov	r2, r0
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	605a      	str	r2, [r3, #4]
      { }
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	4618      	mov	r0, r3
 80022c6:	3710      	adds	r7, #16
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}

080022cc <_ZNSt16allocator_traitsISaIN4tama5SceneEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	68b9      	ldr	r1, [r7, #8]
 80022dc:	68f8      	ldr	r0, [r7, #12]
 80022de:	f000 fb23 	bl	8002928 <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEE10deallocateEPS2_j>
 80022e2:	bf00      	nop
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <_ZNSt15__allocated_ptrISaIN4tama5SceneEEE10_S_raw_ptrEPS1_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 80022ea:	b480      	push	{r7}
 80022ec:	b083      	sub	sp, #12
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4618      	mov	r0, r3
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <_ZN4tama14ChangeObserverC1ERKS0_>:
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
 800230a:	4a05      	ldr	r2, [pc, #20]	; (8002320 <_ZN4tama14ChangeObserverC1ERKS0_+0x20>)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	601a      	str	r2, [r3, #0]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4618      	mov	r0, r3
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	0800dda4 	.word	0x0800dda4

08002324 <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	601a      	str	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	1d1a      	adds	r2, r3, #4
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	3304      	adds	r3, #4
 800233e:	4619      	mov	r1, r3
 8002340:	4610      	mov	r0, r2
 8002342:	f7fe f903 	bl	800054c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4618      	mov	r0, r3
 800234a:	3708      	adds	r7, #8
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEC1ERKS2_>:
      shared_ptr(const shared_ptr&) noexcept = default;
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	4611      	mov	r1, r2
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff ffdf 	bl	8002324 <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4618      	mov	r0, r3
 800236a:	3708      	adds	r7, #8
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}

08002370 <_ZN4tama5SceneC1ERKS0_>:
#include "../drawable/Drawable.h"
#include "../../../../Configuration/display.config.h"

namespace tama
{
    class Scene : public ChangeObserver
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	683a      	ldr	r2, [r7, #0]
 800237e:	4611      	mov	r1, r2
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff ffbd 	bl	8002300 <_ZN4tama14ChangeObserverC1ERKS0_>
 8002386:	4a10      	ldr	r2, [pc, #64]	; (80023c8 <_ZN4tama5SceneC1ERKS0_+0x58>)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	601a      	str	r2, [r3, #0]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	1d1a      	adds	r2, r3, #4
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	3304      	adds	r3, #4
 8002394:	4619      	mov	r1, r3
 8002396:	4610      	mov	r0, r2
 8002398:	f7ff ffda 	bl	8002350 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEC1ERKS2_>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f103 020c 	add.w	r2, r3, #12
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	330c      	adds	r3, #12
 80023a6:	4619      	mov	r1, r3
 80023a8:	4610      	mov	r0, r2
 80023aa:	f000 faca 	bl	8002942 <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EEC1ERKS5_>
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	699a      	ldr	r2, [r3, #24]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	619a      	str	r2, [r3, #24]
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	69da      	ldr	r2, [r3, #28]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	61da      	str	r2, [r3, #28]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4618      	mov	r0, r3
 80023c2:	3708      	adds	r7, #8
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	0800dd88 	.word	0x0800dd88

080023cc <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEE9constructIS2_JRS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80023cc:	b590      	push	{r4, r7, lr}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f7fe fee8 	bl	80011ae <_ZSt7forwardIRN4tama5SceneEEOT_RNSt16remove_referenceIS3_E4typeE>
 80023de:	4604      	mov	r4, r0
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	4619      	mov	r1, r3
 80023e4:	2020      	movs	r0, #32
 80023e6:	f7fe fbf9 	bl	8000bdc <_ZnwjPv>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d003      	beq.n	80023f8 <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEE9constructIS2_JRS2_EEEvPT_DpOT0_+0x2c>
 80023f0:	4621      	mov	r1, r4
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7ff ffbc 	bl	8002370 <_ZN4tama5SceneC1ERKS0_>
 80023f8:	bf00      	nop
 80023fa:	3714      	adds	r7, #20
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd90      	pop	{r4, r7, pc}

08002400 <_ZNSaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) throw() { }
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f000 fad6 	bl	80029bc <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4618      	mov	r0, r3
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <_ZNSaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>:
      ~allocator() throw() { }
 800241a:	b580      	push	{r7, lr}
 800241c:	b082      	sub	sp, #8
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f000 fad5 	bl	80029d2 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	4618      	mov	r0, r3
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>:
    __allocate_guarded(_Alloc& __a)
 8002432:	b580      	push	{r7, lr}
 8002434:	b082      	sub	sp, #8
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
 800243a:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 800243c:	2101      	movs	r1, #1
 800243e:	6838      	ldr	r0, [r7, #0]
 8002440:	f000 fad2 	bl	80029e8 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>
 8002444:	4603      	mov	r3, r0
 8002446:	461a      	mov	r2, r3
 8002448:	6839      	ldr	r1, [r7, #0]
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f000 fadb 	bl	8002a06 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
    }
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	3708      	adds	r7, #8
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>:
      ~__allocated_ptr()
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d007      	beq.n	8002478 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6818      	ldr	r0, [r3, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	2201      	movs	r2, #1
 8002472:	4619      	mov	r1, r3
 8002474:	f000 fadb 	bl	8002a2e <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>
      }
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4618      	mov	r0, r3
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 8002482:	b580      	push	{r7, lr}
 8002484:	b082      	sub	sp, #8
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	4618      	mov	r0, r3
 8002490:	f000 fadc 	bl	8002a4c <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>
 8002494:	4603      	mov	r3, r0
 8002496:	4618      	mov	r0, r3
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, false>
 800249e:	b580      	push	{r7, lr}
 80024a0:	b082      	sub	sp, #8
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7ff fb17 	bl	8001adc <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4618      	mov	r0, r3
 80024b2:	3708      	adds	r7, #8
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama5SceneEELb1EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f7ff f877 	bl	80015b4 <_ZNSaIN4tama5SceneEED1Ev>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4618      	mov	r0, r3
 80024ca:	3708      	adds	r7, #8
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>:
      class _Impl : _Sp_ebo_helper<0, _Deleter>, _Sp_ebo_helper<1, _Alloc>
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	3301      	adds	r3, #1
 80024dc:	4618      	mov	r0, r3
 80024de:	f7ff ffeb 	bl	80024b8 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama5SceneEELb1EED1Ev>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7ff ffda 	bl	800249e <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4618      	mov	r0, r3
 80024ee:	3708      	adds	r7, #8
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 80024f4:	b590      	push	{r4, r7, lr}
 80024f6:	b087      	sub	sp, #28
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
 8002500:	603b      	str	r3, [r7, #0]
      : _M_impl(__p, std::move(__d), __a) { }
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	4618      	mov	r0, r3
 8002506:	f000 faad 	bl	8002a64 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800250a:	4a10      	ldr	r2, [pc, #64]	; (800254c <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_+0x58>)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	601a      	str	r2, [r3, #0]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f103 040c 	add.w	r4, r3, #12
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f7ff fcf3 	bl	8001f02 <_ZSt4moveIRNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800251c:	4602      	mov	r2, r0
 800251e:	f107 0314 	add.w	r3, r7, #20
 8002522:	4611      	mov	r1, r2
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff fcf7 	bl	8001f18 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 800252a:	f107 0214 	add.w	r2, r7, #20
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	68b9      	ldr	r1, [r7, #8]
 8002532:	4620      	mov	r0, r4
 8002534:	f000 faac 	bl	8002a90 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>
 8002538:	f107 0314 	add.w	r3, r7, #20
 800253c:	4618      	mov	r0, r3
 800253e:	f7ff facd 	bl	8001adc <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	4618      	mov	r0, r3
 8002546:	371c      	adds	r7, #28
 8002548:	46bd      	mov	sp, r7
 800254a:	bd90      	pop	{r4, r7, pc}
 800254c:	0800dd6c 	.word	0x0800dd6c

08002550 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	605a      	str	r2, [r3, #4]
	return *this;
 8002560:	687b      	ldr	r3, [r7, #4]
      }
 8002562:	4618      	mov	r0, r3
 8002564:	370c      	adds	r7, #12
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr

0800256e <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>:
          void operator()(typename _Alloc::value_type* __ptr)
 800256e:	b590      	push	{r4, r7, lr}
 8002570:	b085      	sub	sp, #20
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
 8002576:	6039      	str	r1, [r7, #0]
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 8002578:	6879      	ldr	r1, [r7, #4]
 800257a:	f107 0308 	add.w	r3, r7, #8
 800257e:	683a      	ldr	r2, [r7, #0]
 8002580:	4618      	mov	r0, r3
 8002582:	f7ff fe8f 	bl	80022a4 <_ZNSt15__allocated_ptrISaIN4tama5SceneEEEC1ERS2_PS1_>
	    allocator_traits<_Alloc>::destroy(_M_alloc, __guard.get());
 8002586:	687c      	ldr	r4, [r7, #4]
 8002588:	f107 0308 	add.w	r3, r7, #8
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff fc88 	bl	8001ea2 <_ZNSt15__allocated_ptrISaIN4tama5SceneEEE3getEv>
 8002592:	4603      	mov	r3, r0
 8002594:	4619      	mov	r1, r3
 8002596:	4620      	mov	r0, r4
 8002598:	f000 fa98 	bl	8002acc <_ZNSt16allocator_traitsISaIN4tama5SceneEEE7destroyIS1_EEvRS2_PT_>
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 800259c:	f107 0308 	add.w	r3, r7, #8
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7ff fc69 	bl	8001e78 <_ZNSt15__allocated_ptrISaIN4tama5SceneEEED1Ev>
          }
 80025a6:	bf00      	nop
 80025a8:	3714      	adds	r7, #20
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd90      	pop	{r4, r7, pc}

080025ae <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 80025ae:	b480      	push	{r7}
 80025b0:	b083      	sub	sp, #12
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
 80025b6:	6039      	str	r1, [r7, #0]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4618      	mov	r0, r3
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr

080025c6 <_ZNSt16allocator_traitsISaIN4tama7TextureEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b082      	sub	sp, #8
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
 80025ce:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80025d0:	2200      	movs	r2, #0
 80025d2:	6839      	ldr	r1, [r7, #0]
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f000 fa86 	bl	8002ae6 <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE8allocateEjPKv>
 80025da:	4603      	mov	r3, r0
 80025dc:	4618      	mov	r0, r3
 80025de:	3708      	adds	r7, #8
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <_ZNSt15__allocated_ptrISaIN4tama7TextureEEEC1ERS2_PS1_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 80025f0:	68b8      	ldr	r0, [r7, #8]
 80025f2:	f000 fa96 	bl	8002b22 <_ZSt11__addressofISaIN4tama7TextureEEEPT_RS3_>
 80025f6:	4602      	mov	r2, r0
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	601a      	str	r2, [r3, #0]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	605a      	str	r2, [r3, #4]
      { }
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	4618      	mov	r0, r3
 8002606:	3710      	adds	r7, #16
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}

0800260c <_ZNSt16allocator_traitsISaIN4tama7TextureEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	68b9      	ldr	r1, [r7, #8]
 800261c:	68f8      	ldr	r0, [r7, #12]
 800261e:	f000 fa8b 	bl	8002b38 <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE10deallocateEPS2_j>
 8002622:	bf00      	nop
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <_ZNSt15__allocated_ptrISaIN4tama7TextureEEE10_S_raw_ptrEPS1_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 800262a:	b480      	push	{r7}
 800262c:	b083      	sub	sp, #12
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4618      	mov	r0, r3
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE9constructIS2_JRjS5_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8002640:	b5b0      	push	{r4, r5, r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
 800264c:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f7fe fdf3 	bl	800123a <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 8002654:	4603      	mov	r3, r0
 8002656:	681c      	ldr	r4, [r3, #0]
 8002658:	6838      	ldr	r0, [r7, #0]
 800265a:	f7fe fdee 	bl	800123a <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 800265e:	4603      	mov	r3, r0
 8002660:	681d      	ldr	r5, [r3, #0]
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	4619      	mov	r1, r3
 8002666:	2010      	movs	r0, #16
 8002668:	f7fe fab8 	bl	8000bdc <_ZnwjPv>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d004      	beq.n	800267c <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE9constructIS2_JRjS5_EEEvPT_DpOT0_+0x3c>
 8002672:	462a      	mov	r2, r5
 8002674:	4621      	mov	r1, r4
 8002676:	4618      	mov	r0, r3
 8002678:	f7fe fabc 	bl	8000bf4 <_ZN4tama7TextureC1Ejj>
 800267c:	bf00      	nop
 800267e:	3710      	adds	r7, #16
 8002680:	46bd      	mov	sp, r7
 8002682:	bdb0      	pop	{r4, r5, r7, pc}

08002684 <_ZNSaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) throw() { }
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f000 fa5f 	bl	8002b52 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4618      	mov	r0, r3
 8002698:	3708      	adds	r7, #8
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <_ZNSaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>:
      ~allocator() throw() { }
 800269e:	b580      	push	{r7, lr}
 80026a0:	b082      	sub	sp, #8
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 fa5e 	bl	8002b68 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	4618      	mov	r0, r3
 80026b0:	3708      	adds	r7, #8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>:
    __allocate_guarded(_Alloc& __a)
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b082      	sub	sp, #8
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
 80026be:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 80026c0:	2101      	movs	r1, #1
 80026c2:	6838      	ldr	r0, [r7, #0]
 80026c4:	f000 fa5b 	bl	8002b7e <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>
 80026c8:	4603      	mov	r3, r0
 80026ca:	461a      	mov	r2, r3
 80026cc:	6839      	ldr	r1, [r7, #0]
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 fa64 	bl	8002b9c <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
    }
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	3708      	adds	r7, #8
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>:
      ~__allocated_ptr()
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d007      	beq.n	80026fc <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6818      	ldr	r0, [r3, #0]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	2201      	movs	r2, #1
 80026f6:	4619      	mov	r1, r3
 80026f8:	f000 fa64 	bl	8002bc4 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>
      }
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4618      	mov	r0, r3
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 8002706:	b580      	push	{r7, lr}
 8002708:	b082      	sub	sp, #8
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	4618      	mov	r0, r3
 8002714:	f000 fa65 	bl	8002be2 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>
 8002718:	4603      	mov	r3, r0
 800271a:	4618      	mov	r0, r3
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, false>
 8002722:	b580      	push	{r7, lr}
 8002724:	b082      	sub	sp, #8
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4618      	mov	r0, r3
 800272e:	f7ff fa6d 	bl	8001c0c <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4618      	mov	r0, r3
 8002736:	3708      	adds	r7, #8
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama7TextureEELb1EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f7fe ff7e 	bl	8001646 <_ZNSaIN4tama7TextureEED1Ev>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4618      	mov	r0, r3
 800274e:	3708      	adds	r7, #8
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>:
      class _Impl : _Sp_ebo_helper<0, _Deleter>, _Sp_ebo_helper<1, _Alloc>
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	3301      	adds	r3, #1
 8002760:	4618      	mov	r0, r3
 8002762:	f7ff ffeb 	bl	800273c <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama7TextureEELb1EED1Ev>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4618      	mov	r0, r3
 800276a:	f7ff ffda 	bl	8002722 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4618      	mov	r0, r3
 8002772:	3708      	adds	r7, #8
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 8002778:	b590      	push	{r4, r7, lr}
 800277a:	b087      	sub	sp, #28
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]
 8002784:	603b      	str	r3, [r7, #0]
      : _M_impl(__p, std::move(__d), __a) { }
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	4618      	mov	r0, r3
 800278a:	f000 f96b 	bl	8002a64 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800278e:	4a10      	ldr	r2, [pc, #64]	; (80027d0 <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_+0x58>)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	601a      	str	r2, [r3, #0]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f103 040c 	add.w	r4, r3, #12
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f7ff fca4 	bl	80020e8 <_ZSt4moveIRNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 80027a0:	4602      	mov	r2, r0
 80027a2:	f107 0314 	add.w	r3, r7, #20
 80027a6:	4611      	mov	r1, r2
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7ff fca8 	bl	80020fe <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 80027ae:	f107 0214 	add.w	r2, r7, #20
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	68b9      	ldr	r1, [r7, #8]
 80027b6:	4620      	mov	r0, r4
 80027b8:	f000 fa1e 	bl	8002bf8 <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>
 80027bc:	f107 0314 	add.w	r3, r7, #20
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7ff fa23 	bl	8001c0c <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	4618      	mov	r0, r3
 80027ca:	371c      	adds	r7, #28
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd90      	pop	{r4, r7, pc}
 80027d0:	0800dd50 	.word	0x0800dd50

080027d4 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	605a      	str	r2, [r3, #4]
	return *this;
 80027e4:	687b      	ldr	r3, [r7, #4]
      }
 80027e6:	4618      	mov	r0, r3
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr

080027f2 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>:
          void operator()(typename _Alloc::value_type* __ptr)
 80027f2:	b590      	push	{r4, r7, lr}
 80027f4:	b085      	sub	sp, #20
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
 80027fa:	6039      	str	r1, [r7, #0]
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 80027fc:	6879      	ldr	r1, [r7, #4]
 80027fe:	f107 0308 	add.w	r3, r7, #8
 8002802:	683a      	ldr	r2, [r7, #0]
 8002804:	4618      	mov	r0, r3
 8002806:	f7ff feed 	bl	80025e4 <_ZNSt15__allocated_ptrISaIN4tama7TextureEEEC1ERS2_PS1_>
	    allocator_traits<_Alloc>::destroy(_M_alloc, __guard.get());
 800280a:	687c      	ldr	r4, [r7, #4]
 800280c:	f107 0308 	add.w	r3, r7, #8
 8002810:	4618      	mov	r0, r3
 8002812:	f7ff fc34 	bl	800207e <_ZNSt15__allocated_ptrISaIN4tama7TextureEEE3getEv>
 8002816:	4603      	mov	r3, r0
 8002818:	4619      	mov	r1, r3
 800281a:	4620      	mov	r0, r4
 800281c:	f000 fa0a 	bl	8002c34 <_ZNSt16allocator_traitsISaIN4tama7TextureEEE7destroyIS1_EEvRS2_PT_>
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 8002820:	f107 0308 	add.w	r3, r7, #8
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff fc15 	bl	8002054 <_ZNSt15__allocated_ptrISaIN4tama7TextureEEED1Ev>
          }
 800282a:	bf00      	nop
 800282c:	3714      	adds	r7, #20
 800282e:	46bd      	mov	sp, r7
 8002830:	bd90      	pop	{r4, r7, pc}

08002832 <_ZStneIPSt10shared_ptrIN4tama8DrawableEEEbRKSt13move_iteratorIT_ES9_>:
    operator!=(const move_iterator<_Iterator>& __x,
 8002832:	b580      	push	{r7, lr}
 8002834:	b082      	sub	sp, #8
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
 800283a:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 800283c:	6839      	ldr	r1, [r7, #0]
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f000 fa05 	bl	8002c4e <_ZSteqIPSt10shared_ptrIN4tama8DrawableEEEbRKSt13move_iteratorIT_ES9_>
 8002844:	4603      	mov	r3, r0
 8002846:	f083 0301 	eor.w	r3, r3, #1
 800284a:	b2db      	uxtb	r3, r3
 800284c:	4618      	mov	r0, r3
 800284e:	3708      	adds	r7, #8
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <_ZNSt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEEppEv>:
      operator++()
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
	++_M_current;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f103 0208 	add.w	r2, r3, #8
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	601a      	str	r2, [r3, #0]
	return *this;
 8002868:	687b      	ldr	r3, [r7, #4]
      }
 800286a:	4618      	mov	r0, r3
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr

08002876 <_ZNKSt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEEdeEv>:
      operator*() const
 8002876:	b480      	push	{r7}
 8002878:	b083      	sub	sp, #12
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4618      	mov	r0, r3
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr

0800288e <_ZSt7forwardISt10shared_ptrIN4tama8DrawableEEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800288e:	b480      	push	{r7}
 8002890:	b083      	sub	sp, #12
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4618      	mov	r0, r3
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <_ZSt10_ConstructISt10shared_ptrIN4tama8DrawableEEJS3_EEvPT_DpOT0_>:
    _Construct(_T1* __p, _Args&&... __args)
 80028a4:	b590      	push	{r4, r7, lr}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
 80028ae:	6838      	ldr	r0, [r7, #0]
 80028b0:	f7ff ffed 	bl	800288e <_ZSt7forwardISt10shared_ptrIN4tama8DrawableEEEOT_RNSt16remove_referenceIS4_E4typeE>
 80028b4:	4604      	mov	r4, r0
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4619      	mov	r1, r3
 80028ba:	2008      	movs	r0, #8
 80028bc:	f7fe f98e 	bl	8000bdc <_ZnwjPv>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d003      	beq.n	80028ce <_ZSt10_ConstructISt10shared_ptrIN4tama8DrawableEEJS3_EEvPT_DpOT0_+0x2a>
 80028c6:	4621      	mov	r1, r4
 80028c8:	4618      	mov	r0, r3
 80028ca:	f000 f9e1 	bl	8002c90 <_ZNSt10shared_ptrIN4tama8DrawableEEC1EOS2_>
 80028ce:	bf00      	nop
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd90      	pop	{r4, r7, pc}

080028d6 <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b084      	sub	sp, #16
 80028da:	af00      	add	r7, sp, #0
 80028dc:	60f8      	str	r0, [r7, #12]
 80028de:	60b9      	str	r1, [r7, #8]
 80028e0:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 80028e2:	68f8      	ldr	r0, [r7, #12]
 80028e4:	f000 f9e7 	bl	8002cb6 <_ZNK9__gnu_cxx13new_allocatorIN4tama5SceneEE8max_sizeEv>
 80028e8:	4602      	mov	r2, r0
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	4293      	cmp	r3, r2
 80028ee:	bf8c      	ite	hi
 80028f0:	2301      	movhi	r3, #1
 80028f2:	2300      	movls	r3, #0
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80028fa:	f00b f890 	bl	800da1e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	015b      	lsls	r3, r3, #5
 8002902:	4618      	mov	r0, r3
 8002904:	f00b f85f 	bl	800d9c6 <_Znwj>
 8002908:	4603      	mov	r3, r0
      }
 800290a:	4618      	mov	r0, r3
 800290c:	3710      	adds	r7, #16
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <_ZSt11__addressofISaIN4tama5SceneEEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8002912:	b480      	push	{r7}
 8002914:	b083      	sub	sp, #12
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4618      	mov	r0, r3
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8002934:	68b8      	ldr	r0, [r7, #8]
 8002936:	f00b f85f 	bl	800d9f8 <_ZdlPv>
      }
 800293a:	bf00      	nop
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EEC1ERKS5_>:
      vector(const vector& __x)
 8002942:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002944:	b085      	sub	sp, #20
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
 800294a:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 800294c:	687c      	ldr	r4, [r7, #4]
 800294e:	6838      	ldr	r0, [r7, #0]
 8002950:	f7ff f870 	bl	8001a34 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE4sizeEv>
 8002954:	4605      	mov	r5, r0
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff fa22 	bl	8001da2 <_ZNKSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE19_M_get_Tp_allocatorEv>
 800295e:	4602      	mov	r2, r0
 8002960:	f107 030c 	add.w	r3, r7, #12
 8002964:	4611      	mov	r1, r2
 8002966:	4618      	mov	r0, r3
 8002968:	f000 f9b1 	bl	8002cce <_ZN9__gnu_cxx14__alloc_traitsISaISt10shared_ptrIN4tama8DrawableEEEE17_S_select_on_copyERKS5_>
 800296c:	f107 030c 	add.w	r3, r7, #12
 8002970:	461a      	mov	r2, r3
 8002972:	4629      	mov	r1, r5
 8002974:	4620      	mov	r0, r4
 8002976:	f000 f9b8 	bl	8002cea <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EEC1EjRKS4_>
 800297a:	f107 030c 	add.w	r3, r7, #12
 800297e:	4618      	mov	r0, r3
 8002980:	f7fe fec3 	bl	800170a <_ZNSaISt10shared_ptrIN4tama8DrawableEEED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8002984:	6838      	ldr	r0, [r7, #0]
 8002986:	f000 f9c4 	bl	8002d12 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE5beginEv>
 800298a:	4605      	mov	r5, r0
 800298c:	6838      	ldr	r0, [r7, #0]
 800298e:	f000 f9d4 	bl	8002d3a <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE3endEv>
 8002992:	4606      	mov	r6, r0
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4618      	mov	r0, r3
 800299c:	f7fe fd2f 	bl	80013fe <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE19_M_get_Tp_allocatorEv>
 80029a0:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 80029a2:	4622      	mov	r2, r4
 80029a4:	4631      	mov	r1, r6
 80029a6:	4628      	mov	r0, r5
 80029a8:	f000 f9db 	bl	8002d62 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS5_SaIS5_EEEEPS5_S5_ET0_T_SE_SD_RSaIT1_E>
 80029ac:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	605a      	str	r2, [r3, #4]
      }
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4618      	mov	r0, r3
 80029b6:	3714      	adds	r7, #20
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080029bc <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4618      	mov	r0, r3
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr

080029d2 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80029d2:	b480      	push	{r7}
 80029d4:	b083      	sub	sp, #12
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4618      	mov	r0, r3
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>:
      allocate(allocator_type& __a, size_type __n)
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80029f2:	2200      	movs	r2, #0
 80029f4:	6839      	ldr	r1, [r7, #0]
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 f9c4 	bl	8002d84 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>
 80029fc:	4603      	mov	r3, r0
 80029fe:	4618      	mov	r0, r3
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b084      	sub	sp, #16
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	60f8      	str	r0, [r7, #12]
 8002a0e:	60b9      	str	r1, [r7, #8]
 8002a10:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8002a12:	68b8      	ldr	r0, [r7, #8]
 8002a14:	f000 f9d7 	bl	8002dc6 <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	601a      	str	r2, [r3, #0]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	605a      	str	r2, [r3, #4]
      { }
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	4618      	mov	r0, r3
 8002a28:	3710      	adds	r7, #16
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b084      	sub	sp, #16
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	60f8      	str	r0, [r7, #12]
 8002a36:	60b9      	str	r1, [r7, #8]
 8002a38:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	68b9      	ldr	r1, [r7, #8]
 8002a3e:	68f8      	ldr	r0, [r7, #12]
 8002a40:	f000 f9cc 	bl	8002ddc <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>
 8002a44:	bf00      	nop
 8002a46:	3710      	adds	r7, #16
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4618      	mov	r0, r3
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
	...

08002a64 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      _Sp_counted_base() noexcept
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
      : _M_use_count(1), _M_weak_count(1) { }
 8002a6c:	4a07      	ldr	r2, [pc, #28]	; (8002a8c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev+0x28>)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	601a      	str	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2201      	movs	r2, #1
 8002a76:	605a      	str	r2, [r3, #4]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	609a      	str	r2, [r3, #8]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4618      	mov	r0, r3
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr
 8002a8c:	0800ddb0 	.word	0x0800ddb0

08002a90 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 8002a90:	b590      	push	{r4, r7, lr}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]
 8002a9c:	603b      	str	r3, [r7, #0]
	: _M_ptr(__p), _Del_base(std::move(__d)), _Alloc_base(__a)
 8002a9e:	68fc      	ldr	r4, [r7, #12]
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f7ff fa2e 	bl	8001f02 <_ZSt4moveIRNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	4620      	mov	r0, r4
 8002aac:	f000 f9a3 	bl	8002df6 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	6839      	ldr	r1, [r7, #0]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f000 f9b0 	bl	8002e1c <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama5SceneEELb1EEC1ERKS2_>
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	68ba      	ldr	r2, [r7, #8]
 8002ac0:	605a      	str	r2, [r3, #4]
	{ }
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3714      	adds	r7, #20
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd90      	pop	{r4, r7, pc}

08002acc <_ZNSt16allocator_traitsISaIN4tama5SceneEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 8002ad6:	6839      	ldr	r1, [r7, #0]
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f000 f9c5 	bl	8002e68 <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEE7destroyIS2_EEvPT_>
 8002ade:	bf00      	nop
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b084      	sub	sp, #16
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	60f8      	str	r0, [r7, #12]
 8002aee:	60b9      	str	r1, [r7, #8]
 8002af0:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8002af2:	68f8      	ldr	r0, [r7, #12]
 8002af4:	f000 f9c4 	bl	8002e80 <_ZNK9__gnu_cxx13new_allocatorIN4tama7TextureEE8max_sizeEv>
 8002af8:	4602      	mov	r2, r0
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	4293      	cmp	r3, r2
 8002afe:	bf8c      	ite	hi
 8002b00:	2301      	movhi	r3, #1
 8002b02:	2300      	movls	r3, #0
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8002b0a:	f00a ff88 	bl	800da1e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	011b      	lsls	r3, r3, #4
 8002b12:	4618      	mov	r0, r3
 8002b14:	f00a ff57 	bl	800d9c6 <_Znwj>
 8002b18:	4603      	mov	r3, r0
      }
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3710      	adds	r7, #16
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <_ZSt11__addressofISaIN4tama7TextureEEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8002b22:	b480      	push	{r7}
 8002b24:	b083      	sub	sp, #12
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8002b44:	68b8      	ldr	r0, [r7, #8]
 8002b46:	f00a ff57 	bl	800d9f8 <_ZdlPv>
      }
 8002b4a:	bf00      	nop
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002b52:	b480      	push	{r7}
 8002b54:	b083      	sub	sp, #12
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	4618      	mov	r0, r3
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr

08002b7e <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>:
      allocate(allocator_type& __a, size_type __n)
 8002b7e:	b580      	push	{r7, lr}
 8002b80:	b082      	sub	sp, #8
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
 8002b86:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8002b88:	2200      	movs	r2, #0
 8002b8a:	6839      	ldr	r1, [r7, #0]
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f000 f983 	bl	8002e98 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>
 8002b92:	4603      	mov	r3, r0
 8002b94:	4618      	mov	r0, r3
 8002b96:	3708      	adds	r7, #8
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8002ba8:	68b8      	ldr	r0, [r7, #8]
 8002baa:	f000 f996 	bl	8002eda <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	601a      	str	r2, [r3, #0]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	605a      	str	r2, [r3, #4]
      { }
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3710      	adds	r7, #16
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	68b9      	ldr	r1, [r7, #8]
 8002bd4:	68f8      	ldr	r0, [r7, #12]
 8002bd6:	f000 f98b 	bl	8002ef0 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>
 8002bda:	bf00      	nop
 8002bdc:	3710      	adds	r7, #16
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 8002be2:	b480      	push	{r7}
 8002be4:	b083      	sub	sp, #12
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4618      	mov	r0, r3
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 8002bf8:	b590      	push	{r4, r7, lr}
 8002bfa:	b085      	sub	sp, #20
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
 8002c04:	603b      	str	r3, [r7, #0]
	: _M_ptr(__p), _Del_base(std::move(__d)), _Alloc_base(__a)
 8002c06:	68fc      	ldr	r4, [r7, #12]
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f7ff fa6d 	bl	80020e8 <_ZSt4moveIRNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	4619      	mov	r1, r3
 8002c12:	4620      	mov	r0, r4
 8002c14:	f000 f979 	bl	8002f0a <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	6839      	ldr	r1, [r7, #0]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f000 f986 	bl	8002f30 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama7TextureEELb1EEC1ERKS2_>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	68ba      	ldr	r2, [r7, #8]
 8002c28:	605a      	str	r2, [r3, #4]
	{ }
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3714      	adds	r7, #20
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd90      	pop	{r4, r7, pc}

08002c34 <_ZNSt16allocator_traitsISaIN4tama7TextureEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 8002c3e:	6839      	ldr	r1, [r7, #0]
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f000 f983 	bl	8002f4c <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE7destroyIS2_EEvPT_>
 8002c46:	bf00      	nop
 8002c48:	3708      	adds	r7, #8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <_ZSteqIPSt10shared_ptrIN4tama8DrawableEEEbRKSt13move_iteratorIT_ES9_>:
    operator==(const move_iterator<_Iterator>& __x,
 8002c4e:	b590      	push	{r4, r7, lr}
 8002c50:	b083      	sub	sp, #12
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
 8002c56:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f000 f985 	bl	8002f68 <_ZNKSt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEE4baseEv>
 8002c5e:	4604      	mov	r4, r0
 8002c60:	6838      	ldr	r0, [r7, #0]
 8002c62:	f000 f981 	bl	8002f68 <_ZNKSt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEE4baseEv>
 8002c66:	4603      	mov	r3, r0
 8002c68:	429c      	cmp	r4, r3
 8002c6a:	bf0c      	ite	eq
 8002c6c:	2301      	moveq	r3, #1
 8002c6e:	2300      	movne	r3, #0
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	4618      	mov	r0, r3
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd90      	pop	{r4, r7, pc}

08002c7a <_ZSt4moveIRSt10shared_ptrIN4tama8DrawableEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8002c7a:	b480      	push	{r7}
 8002c7c:	b083      	sub	sp, #12
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4618      	mov	r0, r3
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <_ZNSt10shared_ptrIN4tama8DrawableEEC1EOS2_>:
      shared_ptr(shared_ptr&& __r) noexcept
 8002c90:	b590      	push	{r4, r7, lr}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
      : __shared_ptr<_Tp>(std::move(__r)) { }
 8002c9a:	687c      	ldr	r4, [r7, #4]
 8002c9c:	6838      	ldr	r0, [r7, #0]
 8002c9e:	f7ff ffec 	bl	8002c7a <_ZSt4moveIRSt10shared_ptrIN4tama8DrawableEEEONSt16remove_referenceIT_E4typeEOS6_>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	4620      	mov	r0, r4
 8002ca8:	f000 f96a 	bl	8002f80 <_ZNSt12__shared_ptrIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0EEC1EOS4_>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd90      	pop	{r4, r7, pc}

08002cb6 <_ZNK9__gnu_cxx13new_allocatorIN4tama5SceneEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8002cb6:	b480      	push	{r7}
 8002cb8:	b083      	sub	sp, #12
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8002cbe:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr

08002cce <_ZN9__gnu_cxx14__alloc_traitsISaISt10shared_ptrIN4tama8DrawableEEEE17_S_select_on_copyERKS5_>:
    template<typename _Ptr>
      static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type
      destroy(_Alloc& __a, _Ptr __p)
      { _Base_type::destroy(__a, std::addressof(*__p)); }

    static _Alloc _S_select_on_copy(const _Alloc& __a)
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b082      	sub	sp, #8
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
 8002cd6:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6839      	ldr	r1, [r7, #0]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f000 f96d 	bl	8002fbc <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama8DrawableEEEE37select_on_container_copy_constructionERKS4_>
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	3708      	adds	r7, #8
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EEC1EjRKS4_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b084      	sub	sp, #16
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	60f8      	str	r0, [r7, #12]
 8002cf2:	60b9      	str	r1, [r7, #8]
 8002cf4:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6879      	ldr	r1, [r7, #4]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f000 f979 	bl	8002ff2 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE12_Vector_implC1ERKS4_>
      { _M_create_storage(__n); }
 8002d00:	68b9      	ldr	r1, [r7, #8]
 8002d02:	68f8      	ldr	r0, [r7, #12]
 8002d04:	f000 f98c 	bl	8003020 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE17_M_create_storageEj>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3710      	adds	r7, #16
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b084      	sub	sp, #16
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	60fb      	str	r3, [r7, #12]
 8002d20:	f107 020c 	add.w	r2, r7, #12
 8002d24:	f107 0308 	add.w	r3, r7, #8
 8002d28:	4611      	mov	r1, r2
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f000 f993 	bl	8003056 <_ZN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEC1ERKS6_>
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	4618      	mov	r0, r3
 8002d34:	3710      	adds	r7, #16
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b084      	sub	sp, #16
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	60fb      	str	r3, [r7, #12]
 8002d48:	f107 020c 	add.w	r2, r7, #12
 8002d4c:	f107 0308 	add.w	r3, r7, #8
 8002d50:	4611      	mov	r1, r2
 8002d52:	4618      	mov	r0, r3
 8002d54:	f000 f97f 	bl	8003056 <_ZN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEC1ERKS6_>
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3710      	adds	r7, #16
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS5_SaIS5_EEEEPS5_S5_ET0_T_SE_SD_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b084      	sub	sp, #16
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	60f8      	str	r0, [r7, #12]
 8002d6a:	60b9      	str	r1, [r7, #8]
 8002d6c:	607a      	str	r2, [r7, #4]
 8002d6e:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	68b9      	ldr	r1, [r7, #8]
 8002d74:	68f8      	ldr	r0, [r7, #12]
 8002d76:	f000 f97e 	bl	8003076 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS5_SaIS5_EEEEPS5_ET0_T_SE_SD_>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3710      	adds	r7, #16
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	f000 f983 	bl	800309c <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>
 8002d96:	4602      	mov	r2, r0
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	bf8c      	ite	hi
 8002d9e:	2301      	movhi	r3, #1
 8002da0:	2300      	movls	r3, #0
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d001      	beq.n	8002dac <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8002da8:	f00a fe39 	bl	800da1e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002dac:	68ba      	ldr	r2, [r7, #8]
 8002dae:	4613      	mov	r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	4413      	add	r3, r2
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	4618      	mov	r0, r3
 8002db8:	f00a fe05 	bl	800d9c6 <_Znwj>
 8002dbc:	4603      	mov	r3, r0
      }
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3710      	adds	r7, #16
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8002dc6:	b480      	push	{r7}
 8002dc8:	b083      	sub	sp, #12
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>:
      deallocate(pointer __p, size_type)
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8002de8:	68b8      	ldr	r0, [r7, #8]
 8002dea:	f00a fe05 	bl	800d9f8 <_ZdlPv>
      }
 8002dee:	bf00      	nop
 8002df0:	3710      	adds	r7, #16
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _M_tp(std::move(__tp)) { }
 8002df6:	b590      	push	{r4, r7, lr}
 8002df8:	b083      	sub	sp, #12
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
 8002dfe:	6039      	str	r1, [r7, #0]
 8002e00:	687c      	ldr	r4, [r7, #4]
 8002e02:	6838      	ldr	r0, [r7, #0]
 8002e04:	f7ff f87d 	bl	8001f02 <_ZSt4moveIRNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	4620      	mov	r0, r4
 8002e0e:	f7ff f883 	bl	8001f18 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4618      	mov	r0, r3
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd90      	pop	{r4, r7, pc}

08002e1c <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama5SceneEELb1EEC1ERKS2_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
 8002e26:	6839      	ldr	r1, [r7, #0]
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f7ff f804 	bl	8001e36 <_ZNSaIN4tama5SceneEEC1ERKS1_>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4618      	mov	r0, r3
 8002e32:	3708      	adds	r7, #8
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <_ZN4tama5SceneD1Ev>:
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	4a08      	ldr	r2, [pc, #32]	; (8002e64 <_ZN4tama5SceneD1Ev+0x2c>)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	601a      	str	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	330c      	adds	r3, #12
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7fe f962 	bl	8001114 <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EED1Ev>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	3304      	adds	r3, #4
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7fd fd07 	bl	8000868 <_ZNSt10shared_ptrIN4tama14ChangeObserverEED1Ev>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3708      	adds	r7, #8
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	0800dd88 	.word	0x0800dd88

08002e68 <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEE7destroyIS2_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p) { __p->~_Up(); }
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
 8002e72:	6838      	ldr	r0, [r7, #0]
 8002e74:	f7ff ffe0 	bl	8002e38 <_ZN4tama5SceneD1Ev>
 8002e78:	bf00      	nop
 8002e7a:	3708      	adds	r7, #8
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <_ZNK9__gnu_cxx13new_allocatorIN4tama7TextureEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8002e88:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8002ea4:	68f8      	ldr	r0, [r7, #12]
 8002ea6:	f000 f907 	bl	80030b8 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	bf8c      	ite	hi
 8002eb2:	2301      	movhi	r3, #1
 8002eb4:	2300      	movls	r3, #0
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d001      	beq.n	8002ec0 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8002ebc:	f00a fdaf 	bl	800da1e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002ec0:	68ba      	ldr	r2, [r7, #8]
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	4413      	add	r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f00a fd7b 	bl	800d9c6 <_Znwj>
 8002ed0:	4603      	mov	r3, r0
      }
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8002eda:	b480      	push	{r7}
 8002edc:	b083      	sub	sp, #12
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>:
      deallocate(pointer __p, size_type)
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8002efc:	68b8      	ldr	r0, [r7, #8]
 8002efe:	f00a fd7b 	bl	800d9f8 <_ZdlPv>
      }
 8002f02:	bf00      	nop
 8002f04:	3710      	adds	r7, #16
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _M_tp(std::move(__tp)) { }
 8002f0a:	b590      	push	{r4, r7, lr}
 8002f0c:	b083      	sub	sp, #12
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
 8002f12:	6039      	str	r1, [r7, #0]
 8002f14:	687c      	ldr	r4, [r7, #4]
 8002f16:	6838      	ldr	r0, [r7, #0]
 8002f18:	f7ff f8e6 	bl	80020e8 <_ZSt4moveIRNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	4619      	mov	r1, r3
 8002f20:	4620      	mov	r0, r4
 8002f22:	f7ff f8ec 	bl	80020fe <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd90      	pop	{r4, r7, pc}

08002f30 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama7TextureEELb1EEC1ERKS2_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
 8002f3a:	6839      	ldr	r1, [r7, #0]
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f7ff f868 	bl	8002012 <_ZNSaIN4tama7TextureEEC1ERKS1_>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4618      	mov	r0, r3
 8002f46:	3708      	adds	r7, #8
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE7destroyIS2_EEvPT_>:
	destroy(_Up* __p) { __p->~_Up(); }
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	6838      	ldr	r0, [r7, #0]
 8002f5e:	4798      	blx	r3
 8002f60:	bf00      	nop
 8002f62:	3708      	adds	r7, #8
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <_ZNKSt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEE4baseEv>:
      base() const
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4618      	mov	r0, r3
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <_ZNSt12__shared_ptrIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0EEC1EOS4_>:
      __shared_ptr(__shared_ptr&& __r) noexcept
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
      : _M_ptr(__r._M_ptr), _M_refcount()
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	601a      	str	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	3304      	adds	r3, #4
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7fd fd9e 	bl	8000ad8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	_M_refcount._M_swap(__r._M_refcount);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	1d1a      	adds	r2, r3, #4
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	3304      	adds	r3, #4
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	4610      	mov	r0, r2
 8002fa8:	f7fd fdd9 	bl	8000b5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	__r._M_ptr = 0;
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	601a      	str	r2, [r3, #0]
      }
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3708      	adds	r7, #8
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama8DrawableEEEE37select_on_container_copy_constructionERKS4_>:
       *  @brief  Obtain an allocator to use when copying a container.
       *  @param  __rhs  An allocator.
       *  @return @c __rhs
      */
      static allocator_type
      select_on_container_copy_construction(const allocator_type& __rhs)
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 8002fc6:	6839      	ldr	r1, [r7, #0]
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f000 f804 	bl	8002fd6 <_ZNSaISt10shared_ptrIN4tama8DrawableEEEC1ERKS3_>
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	3708      	adds	r7, #8
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}

08002fd6 <_ZNSaISt10shared_ptrIN4tama8DrawableEEEC1ERKS3_>:
      allocator(const allocator& __a) throw()
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b082      	sub	sp, #8
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
 8002fde:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8002fe0:	6839      	ldr	r1, [r7, #0]
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 f876 	bl	80030d4 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEEC1ERKS5_>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4618      	mov	r0, r3
 8002fec:	3708      	adds	r7, #8
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE12_Vector_implC1ERKS4_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b082      	sub	sp, #8
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
 8002ffa:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
 8002ffc:	6839      	ldr	r1, [r7, #0]
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f7ff ffe9 	bl	8002fd6 <_ZNSaISt10shared_ptrIN4tama8DrawableEEEC1ERKS3_>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	601a      	str	r2, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	605a      	str	r2, [r3, #4]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	609a      	str	r2, [r3, #8]
	{ }
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4618      	mov	r0, r3
 800301a:	3708      	adds	r7, #8
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 800302a:	6839      	ldr	r1, [r7, #0]
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f7fe fc10 	bl	8001852 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE11_M_allocateEj>
 8003032:	4602      	mov	r2, r0
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	00db      	lsls	r3, r3, #3
 8003048:	441a      	add	r2, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	609a      	str	r2, [r3, #8]
      }
 800304e:	bf00      	nop
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <_ZN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEC1ERKS6_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8003056:	b480      	push	{r7}
 8003058:	b083      	sub	sp, #12
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
 800305e:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	601a      	str	r2, [r3, #0]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4618      	mov	r0, r3
 800306c:	370c      	adds	r7, #12
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr

08003076 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS5_SaIS5_EEEEPS5_ET0_T_SE_SD_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8003076:	b580      	push	{r7, lr}
 8003078:	b086      	sub	sp, #24
 800307a:	af00      	add	r7, sp, #0
 800307c:	60f8      	str	r0, [r7, #12]
 800307e:	60b9      	str	r1, [r7, #8]
 8003080:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8003082:	2301      	movs	r3, #1
 8003084:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	68b9      	ldr	r1, [r7, #8]
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	f000 f82e 	bl	80030ec <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS7_SaIS7_EEEEPS7_EET0_T_SG_SF_>
 8003090:	4603      	mov	r3, r0
    }
 8003092:	4618      	mov	r0, r3
 8003094:	3718      	adds	r7, #24
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
	...

0800309c <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 80030a4:	4b03      	ldr	r3, [pc, #12]	; (80030b4 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv+0x18>)
 80030a6:	4618      	mov	r0, r3
 80030a8:	370c      	adds	r7, #12
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	0ccccccc 	.word	0x0ccccccc

080030b8 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 80030c0:	4b03      	ldr	r3, [pc, #12]	; (80030d0 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv+0x18>)
 80030c2:	4618      	mov	r0, r3
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	0ccccccc 	.word	0x0ccccccc

080030d4 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEEC1ERKS5_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4618      	mov	r0, r3
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS7_SaIS7_EEEEPS7_EET0_T_SG_SF_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80030ec:	b590      	push	{r4, r7, lr}
 80030ee:	b087      	sub	sp, #28
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 80030fc:	f107 0208 	add.w	r2, r7, #8
 8003100:	f107 030c 	add.w	r3, r7, #12
 8003104:	4611      	mov	r1, r2
 8003106:	4618      	mov	r0, r3
 8003108:	f000 f81f 	bl	800314a <_ZN9__gnu_cxxneIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEEbRKNS_17__normal_iteratorIT_T0_EESF_>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d016      	beq.n	8003140 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS7_SaIS7_EEEEPS7_EET0_T_SG_SF_+0x54>
		std::_Construct(std::__addressof(*__cur), *__first);
 8003112:	6978      	ldr	r0, [r7, #20]
 8003114:	f7fe fc5a 	bl	80019cc <_ZSt11__addressofISt10shared_ptrIN4tama8DrawableEEEPT_RS4_>
 8003118:	4604      	mov	r4, r0
 800311a:	f107 030c 	add.w	r3, r7, #12
 800311e:	4618      	mov	r0, r3
 8003120:	f000 f83c 	bl	800319c <_ZNK9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEdeEv>
 8003124:	4603      	mov	r3, r0
 8003126:	4619      	mov	r1, r3
 8003128:	4620      	mov	r0, r4
 800312a:	f000 f843 	bl	80031b4 <_ZSt10_ConstructISt10shared_ptrIN4tama8DrawableEEJRKS3_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 800312e:	f107 030c 	add.w	r3, r7, #12
 8003132:	4618      	mov	r0, r3
 8003134:	f000 f821 	bl	800317a <_ZN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEppEv>
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	3308      	adds	r3, #8
 800313c:	617b      	str	r3, [r7, #20]
 800313e:	e7dd      	b.n	80030fc <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS7_SaIS7_EEEEPS7_EET0_T_SG_SF_+0x10>
	      return __cur;
 8003140:	697b      	ldr	r3, [r7, #20]
	}
 8003142:	4618      	mov	r0, r3
 8003144:	371c      	adds	r7, #28
 8003146:	46bd      	mov	sp, r7
 8003148:	bd90      	pop	{r4, r7, pc}

0800314a <_ZN9__gnu_cxxneIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEEbRKNS_17__normal_iteratorIT_T0_EESF_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 800314a:	b590      	push	{r4, r7, lr}
 800314c:	b083      	sub	sp, #12
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
 8003152:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f000 f846 	bl	80031e6 <_ZNK9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEE4baseEv>
 800315a:	4603      	mov	r3, r0
 800315c:	681c      	ldr	r4, [r3, #0]
 800315e:	6838      	ldr	r0, [r7, #0]
 8003160:	f000 f841 	bl	80031e6 <_ZNK9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEE4baseEv>
 8003164:	4603      	mov	r3, r0
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	429c      	cmp	r4, r3
 800316a:	bf14      	ite	ne
 800316c:	2301      	movne	r3, #1
 800316e:	2300      	moveq	r3, #0
 8003170:	b2db      	uxtb	r3, r3
 8003172:	4618      	mov	r0, r3
 8003174:	370c      	adds	r7, #12
 8003176:	46bd      	mov	sp, r7
 8003178:	bd90      	pop	{r4, r7, pc}

0800317a <_ZN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800317a:	b480      	push	{r7}
 800317c:	b083      	sub	sp, #12
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
	++_M_current;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f103 0208 	add.w	r2, r3, #8
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	601a      	str	r2, [r3, #0]
	return *this;
 800318e:	687b      	ldr	r3, [r7, #4]
      }
 8003190:	4618      	mov	r0, r3
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <_ZNK9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4618      	mov	r0, r3
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <_ZSt10_ConstructISt10shared_ptrIN4tama8DrawableEEJRKS3_EEvPT_DpOT0_>:
    _Construct(_T1* __p, _Args&&... __args)
 80031b4:	b590      	push	{r4, r7, lr}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
 80031be:	6838      	ldr	r0, [r7, #0]
 80031c0:	f7fe f936 	bl	8001430 <_ZSt7forwardIRKSt10shared_ptrIN4tama8DrawableEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80031c4:	4604      	mov	r4, r0
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4619      	mov	r1, r3
 80031ca:	2008      	movs	r0, #8
 80031cc:	f7fd fd06 	bl	8000bdc <_ZnwjPv>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d003      	beq.n	80031de <_ZSt10_ConstructISt10shared_ptrIN4tama8DrawableEEJRKS3_EEvPT_DpOT0_+0x2a>
 80031d6:	4621      	mov	r1, r4
 80031d8:	4618      	mov	r0, r3
 80031da:	f7fd fece 	bl	8000f7a <_ZNSt10shared_ptrIN4tama8DrawableEEC1ERKS2_>
 80031de:	bf00      	nop
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd90      	pop	{r4, r7, pc}

080031e6 <_ZNK9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80031e6:	b480      	push	{r7}
 80031e8:	b083      	sub	sp, #12
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4618      	mov	r0, r3
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	4a08      	ldr	r2, [pc, #32]	; (8003228 <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev+0x2c>)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	601a      	str	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	330c      	adds	r3, #12
 800320e:	4618      	mov	r0, r3
 8003210:	f7ff faa0 	bl	8002754 <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4618      	mov	r0, r3
 8003218:	f7fe f892 	bl	8001340 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4618      	mov	r0, r3
 8003220:	3708      	adds	r7, #8
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	0800dd50 	.word	0x0800dd50

0800322c <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f7ff ffe1 	bl	80031fc <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
 800323a:	2114      	movs	r1, #20
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f00a fbc0 	bl	800d9c2 <_ZdlPvj>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4618      	mov	r0, r3
 8003246:	3708      	adds	r7, #8
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      _M_dispose() noexcept
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	330c      	adds	r3, #12
 8003258:	4618      	mov	r0, r3
 800325a:	f000 f8b2 	bl	80033c2 <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>
 800325e:	4602      	mov	r2, r0
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	691b      	ldr	r3, [r3, #16]
 8003264:	4619      	mov	r1, r3
 8003266:	4610      	mov	r0, r2
 8003268:	f7ff fac3 	bl	80027f2 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>
 800326c:	bf00      	nop
 800326e:	3708      	adds	r7, #8
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8003274:	b580      	push	{r7, lr}
 8003276:	b086      	sub	sp, #24
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	330c      	adds	r3, #12
 8003280:	4618      	mov	r0, r3
 8003282:	f000 f8ab 	bl	80033dc <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>
 8003286:	4602      	mov	r2, r0
 8003288:	f107 0314 	add.w	r3, r7, #20
 800328c:	4611      	mov	r1, r2
 800328e:	4618      	mov	r0, r3
 8003290:	f7ff f9f8 	bl	8002684 <_ZNSaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8003294:	f107 0114 	add.w	r1, r7, #20
 8003298:	f107 030c 	add.w	r3, r7, #12
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	4618      	mov	r0, r3
 80032a0:	f7ff fc7c 	bl	8002b9c <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
	this->~_Sp_counted_deleter();
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f7ff ffa9 	bl	80031fc <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 80032aa:	f107 030c 	add.w	r3, r7, #12
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7ff fa14 	bl	80026dc <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	__allocator_type __a(_M_impl._M_alloc());
 80032b4:	f107 0314 	add.w	r3, r7, #20
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7ff f9f0 	bl	800269e <_ZNSaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
      }
 80032be:	bf00      	nop
 80032c0:	3718      	adds	r7, #24
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}

080032c6 <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept
 80032c6:	b480      	push	{r7}
 80032c8:	b083      	sub	sp, #12
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
 80032ce:	6039      	str	r1, [r7, #0]
        return nullptr;
 80032d0:	2300      	movs	r3, #0
      }
 80032d2:	4618      	mov	r0, r3
 80032d4:	370c      	adds	r7, #12
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
	...

080032e0 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	4a08      	ldr	r2, [pc, #32]	; (800330c <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev+0x2c>)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	601a      	str	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	330c      	adds	r3, #12
 80032f2:	4618      	mov	r0, r3
 80032f4:	f7ff f8ec 	bl	80024d0 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7fe f820 	bl	8001340 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4618      	mov	r0, r3
 8003304:	3708      	adds	r7, #8
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	0800dd6c 	.word	0x0800dd6c

08003310 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f7ff ffe1 	bl	80032e0 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
 800331e:	2114      	movs	r1, #20
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f00a fb4e 	bl	800d9c2 <_ZdlPvj>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4618      	mov	r0, r3
 800332a:	3708      	adds	r7, #8
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	330c      	adds	r3, #12
 800333c:	4618      	mov	r0, r3
 800333e:	f000 f85b 	bl	80033f8 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>
 8003342:	4602      	mov	r2, r0
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	691b      	ldr	r3, [r3, #16]
 8003348:	4619      	mov	r1, r3
 800334a:	4610      	mov	r0, r2
 800334c:	f7ff f90f 	bl	800256e <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>
 8003350:	bf00      	nop
 8003352:	3708      	adds	r7, #8
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8003358:	b580      	push	{r7, lr}
 800335a:	b086      	sub	sp, #24
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	330c      	adds	r3, #12
 8003364:	4618      	mov	r0, r3
 8003366:	f000 f854 	bl	8003412 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>
 800336a:	4602      	mov	r2, r0
 800336c:	f107 0314 	add.w	r3, r7, #20
 8003370:	4611      	mov	r1, r2
 8003372:	4618      	mov	r0, r3
 8003374:	f7ff f844 	bl	8002400 <_ZNSaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8003378:	f107 0114 	add.w	r1, r7, #20
 800337c:	f107 030c 	add.w	r3, r7, #12
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	4618      	mov	r0, r3
 8003384:	f7ff fb3f 	bl	8002a06 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
	this->~_Sp_counted_deleter();
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f7ff ffa9 	bl	80032e0 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 800338e:	f107 030c 	add.w	r3, r7, #12
 8003392:	4618      	mov	r0, r3
 8003394:	f7ff f860 	bl	8002458 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	__allocator_type __a(_M_impl._M_alloc());
 8003398:	f107 0314 	add.w	r3, r7, #20
 800339c:	4618      	mov	r0, r3
 800339e:	f7ff f83c 	bl	800241a <_ZNSaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
      }
 80033a2:	bf00      	nop
 80033a4:	3718      	adds	r7, #24
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}

080033aa <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept
 80033aa:	b480      	push	{r7}
 80033ac:	b083      	sub	sp, #12
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
 80033b2:	6039      	str	r1, [r7, #0]
        return nullptr;
 80033b4:	2300      	movs	r3, #0
      }
 80033b6:	4618      	mov	r0, r3
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr

080033c2 <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b082      	sub	sp, #8
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f000 f82e 	bl	800342e <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>
 80033d2:	4603      	mov	r3, r0
 80033d4:	4618      	mov	r0, r3
 80033d6:	3708      	adds	r7, #8
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	3301      	adds	r3, #1
 80033e8:	4618      	mov	r0, r3
 80033ea:	f000 f82b 	bl	8003444 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama7TextureEELb1EE6_S_getERS3_>
 80033ee:	4603      	mov	r3, r0
 80033f0:	4618      	mov	r0, r3
 80033f2:	3708      	adds	r7, #8
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4618      	mov	r0, r3
 8003404:	f000 f829 	bl	800345a <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>
 8003408:	4603      	mov	r3, r0
 800340a:	4618      	mov	r0, r3
 800340c:	3708      	adds	r7, #8
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}

08003412 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 8003412:	b580      	push	{r7, lr}
 8003414:	b082      	sub	sp, #8
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	3301      	adds	r3, #1
 800341e:	4618      	mov	r0, r3
 8003420:	f000 f826 	bl	8003470 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama5SceneEELb1EE6_S_getERS3_>
 8003424:	4603      	mov	r3, r0
 8003426:	4618      	mov	r0, r3
 8003428:	3708      	adds	r7, #8
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>:
      _S_get(_Sp_ebo_helper& __eboh)
 800342e:	b480      	push	{r7}
 8003430:	b083      	sub	sp, #12
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
      { return __eboh._M_tp; }
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4618      	mov	r0, r3
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr

08003444 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama7TextureEELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4618      	mov	r0, r3
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr

0800345a <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>:
      _S_get(_Sp_ebo_helper& __eboh)
 800345a:	b480      	push	{r7}
 800345c:	b083      	sub	sp, #12
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
      { return __eboh._M_tp; }
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4618      	mov	r0, r3
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama5SceneEELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4618      	mov	r0, r3
 800347c:	370c      	adds	r7, #12
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
	...

08003488 <_ZN4tama7TextureC1EjjPPNS_10PixelColorE>:
                    data[i][j] = PixelColor::WHITE;
                }
            }
        }

        Texture(unsigned int width, unsigned int height, PixelColor **data) : width(width), height(height), data(data)
 8003488:	b480      	push	{r7}
 800348a:	b085      	sub	sp, #20
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	607a      	str	r2, [r7, #4]
 8003494:	603b      	str	r3, [r7, #0]
 8003496:	4a09      	ldr	r2, [pc, #36]	; (80034bc <_ZN4tama7TextureC1EjjPPNS_10PixelColorE+0x34>)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	601a      	str	r2, [r3, #0]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	68ba      	ldr	r2, [r7, #8]
 80034a0:	605a      	str	r2, [r3, #4]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	609a      	str	r2, [r3, #8]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	683a      	ldr	r2, [r7, #0]
 80034ac:	60da      	str	r2, [r3, #12]
        {}
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	4618      	mov	r0, r3
 80034b2:	3714      	adds	r7, #20
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr
 80034bc:	0800dd94 	.word	0x0800dd94

080034c0 <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_ptr() = default;
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	3304      	adds	r3, #4
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7fd fa3b 	bl	8000948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4618      	mov	r0, r3
 80034d6:	3708      	adds	r7, #8
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <_ZNSt10shared_ptrIN4tama16Nokia5510DisplayEED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7ff ffea 	bl	80034c0 <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4618      	mov	r0, r3
 80034f0:	3708      	adds	r7, #8
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b082      	sub	sp, #8
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	3304      	adds	r3, #4
 8003502:	4618      	mov	r0, r3
 8003504:	f7fd fa20 	bl	8000948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4618      	mov	r0, r3
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}

08003512 <_ZNSt10shared_ptrIN4tama27Nokia5110DisplayDataManagerEED1Ev>:
 8003512:	b580      	push	{r7, lr}
 8003514:	b082      	sub	sp, #8
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4618      	mov	r0, r3
 800351e:	f7ff ffea 	bl	80034f6 <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4618      	mov	r0, r3
 8003526:	3708      	adds	r7, #8
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <_ZN4tama4Main3runEv>:
#include "../Core/ui/display/scene/Scene.h"
#include "../Core/ui/display/display-data-manager/DisplayDataManager.h"
#include "../STM32F411Disco-drivers/nokia5110-display-data-manager/Nokia5110DisplayDataManager.h"

void tama::Main::run()
{
 800352c:	b5b0      	push	{r4, r5, r7, lr}
 800352e:	b0b0      	sub	sp, #192	; 0xc0
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
    DisplayConfig displayConfig = getDefaultNokia5110DisplayConfig();
 8003534:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003538:	6879      	ldr	r1, [r7, #4]
 800353a:	4618      	mov	r0, r3
 800353c:	f000 f900 	bl	8003740 <_ZN4tama4Main32getDefaultNokia5110DisplayConfigEv>
    std::shared_ptr<Display> display = std::make_shared<Nokia5510Display>(displayConfig);
 8003540:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003544:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8003548:	4611      	mov	r1, r2
 800354a:	4618      	mov	r0, r3
 800354c:	f000 f9d1 	bl	80038f2 <_ZSt11make_sharedIN4tama16Nokia5510DisplayEJRNS0_13DisplayConfigEEESt10shared_ptrIT_EDpOT0_>
 8003550:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8003554:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003558:	4611      	mov	r1, r2
 800355a:	4618      	mov	r0, r3
 800355c:	f000 f9f1 	bl	8003942 <_ZNSt10shared_ptrIN4tama7DisplayEEC1INS0_16Nokia5510DisplayEvEEOS_IT_E>
 8003560:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003564:	4618      	mov	r0, r3
 8003566:	f7ff ffb9 	bl	80034dc <_ZNSt10shared_ptrIN4tama16Nokia5510DisplayEED1Ev>

    std::shared_ptr<Sprite> sprite = std::make_shared<Sprite>(makeSampleTexture(), Vec2d(1, 1));
 800356a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800356e:	6879      	ldr	r1, [r7, #4]
 8003570:	4618      	mov	r0, r3
 8003572:	f000 f915 	bl	80037a0 <_ZN4tama4Main17makeSampleTextureEv>
 8003576:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800357a:	2201      	movs	r2, #1
 800357c:	2101      	movs	r1, #1
 800357e:	4618      	mov	r0, r3
 8003580:	f7fc ffc2 	bl	8000508 <_ZN4tama5Vec2dC1Eii>
 8003584:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003588:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800358c:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8003590:	4618      	mov	r0, r3
 8003592:	f000 f9ff 	bl	8003994 <_ZSt11make_sharedIN4tama6SpriteEJSt10shared_ptrINS0_7TextureEENS0_5Vec2dEEES2_IT_EDpOT0_>
 8003596:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800359a:	4618      	mov	r0, r3
 800359c:	f7fd fcbc 	bl	8000f18 <_ZNSt10shared_ptrIN4tama7TextureEED1Ev>
    std::shared_ptr<Sprite> sprite2 = std::make_shared<Sprite>(makeSampleTexture(), Vec2d(30, 35));
 80035a0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80035a4:	6879      	ldr	r1, [r7, #4]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f000 f8fa 	bl	80037a0 <_ZN4tama4Main17makeSampleTextureEv>
 80035ac:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80035b0:	2223      	movs	r2, #35	; 0x23
 80035b2:	211e      	movs	r1, #30
 80035b4:	4618      	mov	r0, r3
 80035b6:	f7fc ffa7 	bl	8000508 <_ZN4tama5Vec2dC1Eii>
 80035ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80035be:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80035c2:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 80035c6:	4618      	mov	r0, r3
 80035c8:	f000 f9e4 	bl	8003994 <_ZSt11make_sharedIN4tama6SpriteEJSt10shared_ptrINS0_7TextureEENS0_5Vec2dEEES2_IT_EDpOT0_>
 80035cc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7fd fca1 	bl	8000f18 <_ZNSt10shared_ptrIN4tama7TextureEED1Ev>

    std::shared_ptr<DisplayDataManager> dataManager = std::make_shared<Nokia5110DisplayDataManager>();
 80035d6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80035da:	4618      	mov	r0, r3
 80035dc:	f000 f9fc 	bl	80039d8 <_ZSt11make_sharedIN4tama27Nokia5110DisplayDataManagerEJEESt10shared_ptrIT_EDpOT0_>
 80035e0:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80035e4:	f107 0320 	add.w	r3, r7, #32
 80035e8:	4611      	mov	r1, r2
 80035ea:	4618      	mov	r0, r3
 80035ec:	f000 fa18 	bl	8003a20 <_ZNSt10shared_ptrIN4tama18DisplayDataManagerEEC1INS0_27Nokia5110DisplayDataManagerEvEEOS_IT_E>
 80035f0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7ff ff8c 	bl	8003512 <_ZNSt10shared_ptrIN4tama27Nokia5110DisplayDataManagerEED1Ev>

    std::shared_ptr<Scene> scene = std::make_shared<Scene>();
 80035fa:	f107 0318 	add.w	r3, r7, #24
 80035fe:	4618      	mov	r0, r3
 8003600:	f000 fa21 	bl	8003a46 <_ZSt11make_sharedIN4tama5SceneEJEESt10shared_ptrIT_EDpOT0_>

    scene->addDrawable(sprite);
 8003604:	f107 0318 	add.w	r3, r7, #24
 8003608:	4618      	mov	r0, r3
 800360a:	f000 fa35 	bl	8003a78 <_ZNKSt19__shared_ptr_accessIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800360e:	4604      	mov	r4, r0
 8003610:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003614:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003618:	4611      	mov	r1, r2
 800361a:	4618      	mov	r0, r3
 800361c:	f000 fa38 	bl	8003a90 <_ZNSt10shared_ptrIN4tama8DrawableEEC1INS0_6SpriteEvEERKS_IT_E>
 8003620:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003624:	4619      	mov	r1, r3
 8003626:	4620      	mov	r0, r4
 8003628:	f7fd fc35 	bl	8000e96 <_ZN4tama5Scene11addDrawableESt10shared_ptrINS_8DrawableEE>
 800362c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003630:	4618      	mov	r0, r3
 8003632:	f7fd fcb2 	bl	8000f9a <_ZNSt10shared_ptrIN4tama8DrawableEED1Ev>
    scene->addDrawable(sprite2);
 8003636:	f107 0318 	add.w	r3, r7, #24
 800363a:	4618      	mov	r0, r3
 800363c:	f000 fa1c 	bl	8003a78 <_ZNKSt19__shared_ptr_accessIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8003640:	4604      	mov	r4, r0
 8003642:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003646:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800364a:	4611      	mov	r1, r2
 800364c:	4618      	mov	r0, r3
 800364e:	f000 fa1f 	bl	8003a90 <_ZNSt10shared_ptrIN4tama8DrawableEEC1INS0_6SpriteEvEERKS_IT_E>
 8003652:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003656:	4619      	mov	r1, r3
 8003658:	4620      	mov	r0, r4
 800365a:	f7fd fc1c 	bl	8000e96 <_ZN4tama5Scene11addDrawableESt10shared_ptrINS_8DrawableEE>
 800365e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003662:	4618      	mov	r0, r3
 8003664:	f7fd fc99 	bl	8000f9a <_ZNSt10shared_ptrIN4tama8DrawableEED1Ev>

    for (unsigned i = 0; i < 30; ++i)
 8003668:	2300      	movs	r3, #0
 800366a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800366e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003672:	2b1d      	cmp	r3, #29
 8003674:	d862      	bhi.n	800373c <_ZN4tama4Main3runEv+0x210>
    {
        HAL_Delay(100);
 8003676:	2064      	movs	r0, #100	; 0x64
 8003678:	f003 fad6 	bl	8006c28 <HAL_Delay>
        sprite->move(Vec2d(0, 1));
 800367c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003680:	4618      	mov	r0, r3
 8003682:	f000 fa15 	bl	8003ab0 <_ZNKSt19__shared_ptr_accessIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8003686:	4605      	mov	r5, r0
 8003688:	682b      	ldr	r3, [r5, #0]
 800368a:	3310      	adds	r3, #16
 800368c:	681c      	ldr	r4, [r3, #0]
 800368e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003692:	2201      	movs	r2, #1
 8003694:	2100      	movs	r1, #0
 8003696:	4618      	mov	r0, r3
 8003698:	f7fc ff36 	bl	8000508 <_ZN4tama5Vec2dC1Eii>
 800369c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80036a0:	e893 0006 	ldmia.w	r3, {r1, r2}
 80036a4:	4628      	mov	r0, r5
 80036a6:	47a0      	blx	r4
        sprite2->move(Vec2d(0, -1));
 80036a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036ac:	4618      	mov	r0, r3
 80036ae:	f000 f9ff 	bl	8003ab0 <_ZNKSt19__shared_ptr_accessIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80036b2:	4605      	mov	r5, r0
 80036b4:	682b      	ldr	r3, [r5, #0]
 80036b6:	3310      	adds	r3, #16
 80036b8:	681c      	ldr	r4, [r3, #0]
 80036ba:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80036be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80036c2:	2100      	movs	r1, #0
 80036c4:	4618      	mov	r0, r3
 80036c6:	f7fc ff1f 	bl	8000508 <_ZN4tama5Vec2dC1Eii>
 80036ca:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80036ce:	e893 0006 	ldmia.w	r3, {r1, r2}
 80036d2:	4628      	mov	r0, r5
 80036d4:	47a0      	blx	r4
        auto sceneData = dataManager->getActiveSceneDisplayData(scene->getSceneData());
 80036d6:	f107 0320 	add.w	r3, r7, #32
 80036da:	4618      	mov	r0, r3
 80036dc:	f000 f9f4 	bl	8003ac8 <_ZNKSt19__shared_ptr_accessIN4tama18DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80036e0:	4605      	mov	r5, r0
 80036e2:	682b      	ldr	r3, [r5, #0]
 80036e4:	681c      	ldr	r4, [r3, #0]
 80036e6:	f107 0318 	add.w	r3, r7, #24
 80036ea:	4618      	mov	r0, r3
 80036ec:	f000 f9c4 	bl	8003a78 <_ZNKSt19__shared_ptr_accessIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80036f0:	4602      	mov	r2, r0
 80036f2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80036f6:	4611      	mov	r1, r2
 80036f8:	4618      	mov	r0, r3
 80036fa:	f7fd fc5b 	bl	8000fb4 <_ZN4tama5Scene12getSceneDataEv>
 80036fe:	f107 030c 	add.w	r3, r7, #12
 8003702:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8003706:	4629      	mov	r1, r5
 8003708:	4618      	mov	r0, r3
 800370a:	47a0      	blx	r4
 800370c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003710:	4618      	mov	r0, r3
 8003712:	f7fd fc01 	bl	8000f18 <_ZNSt10shared_ptrIN4tama7TextureEED1Ev>
        display->setData(sceneData);
 8003716:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800371a:	4618      	mov	r0, r3
 800371c:	f000 f9e0 	bl	8003ae0 <_ZNKSt19__shared_ptr_accessIN4tama7DisplayELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8003720:	4602      	mov	r2, r0
 8003722:	6813      	ldr	r3, [r2, #0]
 8003724:	3304      	adds	r3, #4
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f107 010c 	add.w	r1, r7, #12
 800372c:	4610      	mov	r0, r2
 800372e:	4798      	blx	r3
    for (unsigned i = 0; i < 30; ++i)
 8003730:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003734:	3301      	adds	r3, #1
 8003736:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800373a:	e798      	b.n	800366e <_ZN4tama4Main3runEv+0x142>
    }



    while (true)
 800373c:	e7fe      	b.n	800373c <_ZN4tama4Main3runEv+0x210>
	...

08003740 <_ZN4tama4Main32getDefaultNokia5110DisplayConfigEv>:
    {}

}

tama::DisplayConfig tama::Main::getDefaultNokia5110DisplayConfig()
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
    DisplayConfig cfg;
    cfg.spi = &hspi1;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a10      	ldr	r2, [pc, #64]	; (8003790 <_ZN4tama4Main32getDefaultNokia5110DisplayConfigEv+0x50>)
 800374e:	601a      	str	r2, [r3, #0]
    cfg.reset_port = RST_GPIO_Port;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a10      	ldr	r2, [pc, #64]	; (8003794 <_ZN4tama4Main32getDefaultNokia5110DisplayConfigEv+0x54>)
 8003754:	605a      	str	r2, [r3, #4]
    cfg.reset_pin = RST_Pin;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2280      	movs	r2, #128	; 0x80
 800375a:	811a      	strh	r2, [r3, #8]
    cfg.bl_port = BL_GPIO_Port;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a0d      	ldr	r2, [pc, #52]	; (8003794 <_ZN4tama4Main32getDefaultNokia5110DisplayConfigEv+0x54>)
 8003760:	60da      	str	r2, [r3, #12]
    cfg.bl_pin = BL_Pin;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003768:	821a      	strh	r2, [r3, #16]
    cfg.dc_port = DC_GPIO_Port;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a0a      	ldr	r2, [pc, #40]	; (8003798 <_ZN4tama4Main32getDefaultNokia5110DisplayConfigEv+0x58>)
 800376e:	615a      	str	r2, [r3, #20]
    cfg.dc_pin = DC_Pin;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2220      	movs	r2, #32
 8003774:	841a      	strh	r2, [r3, #32]
    cfg.ce_port = CE_GPIO_Port;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a08      	ldr	r2, [pc, #32]	; (800379c <_ZN4tama4Main32getDefaultNokia5110DisplayConfigEv+0x5c>)
 800377a:	61da      	str	r2, [r3, #28]
    cfg.ce_pin = CE_Pin;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2202      	movs	r2, #2
 8003780:	831a      	strh	r2, [r3, #24]
    return cfg;
 8003782:	bf00      	nop
}
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr
 8003790:	200001ac 	.word	0x200001ac
 8003794:	40021000 	.word	0x40021000
 8003798:	40020800 	.word	0x40020800
 800379c:	40020400 	.word	0x40020400

080037a0 <_ZN4tama4Main17makeSampleTextureEv>:

std::shared_ptr<tama::Texture> tama::Main::makeSampleTexture()
{
 80037a0:	b590      	push	{r4, r7, lr}
 80037a2:	b087      	sub	sp, #28
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
    unsigned tW = 4;
 80037aa:	2304      	movs	r3, #4
 80037ac:	617b      	str	r3, [r7, #20]
    unsigned tH = 4;
 80037ae:	2304      	movs	r3, #4
 80037b0:	613b      	str	r3, [r7, #16]
    PixelColor ** tD = new PixelColor*[tH];
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	4a48      	ldr	r2, [pc, #288]	; (80038d8 <_ZN4tama4Main17makeSampleTextureEv+0x138>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d801      	bhi.n	80037be <_ZN4tama4Main17makeSampleTextureEv+0x1e>
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	e001      	b.n	80037c2 <_ZN4tama4Main17makeSampleTextureEv+0x22>
 80037be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80037c2:	4618      	mov	r0, r3
 80037c4:	f00a f8fb 	bl	800d9be <_Znaj>
 80037c8:	4603      	mov	r3, r0
 80037ca:	60fb      	str	r3, [r7, #12]

    tD[0] = new PixelColor[tW];
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	68fc      	ldr	r4, [r7, #12]
 80037d0:	4618      	mov	r0, r3
 80037d2:	f00a f8f4 	bl	800d9be <_Znaj>
 80037d6:	4603      	mov	r3, r0
 80037d8:	6023      	str	r3, [r4, #0]
    tD[1] = new PixelColor[tW];
 80037da:	697a      	ldr	r2, [r7, #20]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	1d1c      	adds	r4, r3, #4
 80037e0:	4610      	mov	r0, r2
 80037e2:	f00a f8ec 	bl	800d9be <_Znaj>
 80037e6:	4603      	mov	r3, r0
 80037e8:	6023      	str	r3, [r4, #0]
    tD[2] = new PixelColor[tW];
 80037ea:	697a      	ldr	r2, [r7, #20]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f103 0408 	add.w	r4, r3, #8
 80037f2:	4610      	mov	r0, r2
 80037f4:	f00a f8e3 	bl	800d9be <_Znaj>
 80037f8:	4603      	mov	r3, r0
 80037fa:	6023      	str	r3, [r4, #0]
    tD[3] = new PixelColor[tW];
 80037fc:	697a      	ldr	r2, [r7, #20]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f103 040c 	add.w	r4, r3, #12
 8003804:	4610      	mov	r0, r2
 8003806:	f00a f8da 	bl	800d9be <_Znaj>
 800380a:	4603      	mov	r3, r0
 800380c:	6023      	str	r3, [r4, #0]

    tD[0][0] = PixelColor::BLACK;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2201      	movs	r2, #1
 8003814:	701a      	strb	r2, [r3, #0]
    tD[0][1] = PixelColor::WHITE;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	3301      	adds	r3, #1
 800381c:	2200      	movs	r2, #0
 800381e:	701a      	strb	r2, [r3, #0]
    tD[0][2] = PixelColor::WHITE;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	3302      	adds	r3, #2
 8003826:	2200      	movs	r2, #0
 8003828:	701a      	strb	r2, [r3, #0]
    tD[0][3] = PixelColor::BLACK;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	3303      	adds	r3, #3
 8003830:	2201      	movs	r2, #1
 8003832:	701a      	strb	r2, [r3, #0]

    tD[1][0] = PixelColor::WHITE;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	3304      	adds	r3, #4
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2200      	movs	r2, #0
 800383c:	701a      	strb	r2, [r3, #0]
    tD[1][1] = PixelColor::WHITE;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	3304      	adds	r3, #4
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	3301      	adds	r3, #1
 8003846:	2200      	movs	r2, #0
 8003848:	701a      	strb	r2, [r3, #0]
    tD[1][2] = PixelColor::WHITE;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	3304      	adds	r3, #4
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	3302      	adds	r3, #2
 8003852:	2200      	movs	r2, #0
 8003854:	701a      	strb	r2, [r3, #0]
    tD[1][3] = PixelColor::WHITE;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	3304      	adds	r3, #4
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	3303      	adds	r3, #3
 800385e:	2200      	movs	r2, #0
 8003860:	701a      	strb	r2, [r3, #0]

    tD[2][0] = PixelColor::BLACK;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	3308      	adds	r3, #8
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2201      	movs	r2, #1
 800386a:	701a      	strb	r2, [r3, #0]
    tD[2][1] = PixelColor::WHITE;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	3308      	adds	r3, #8
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	3301      	adds	r3, #1
 8003874:	2200      	movs	r2, #0
 8003876:	701a      	strb	r2, [r3, #0]
    tD[2][2] = PixelColor::WHITE;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	3308      	adds	r3, #8
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	3302      	adds	r3, #2
 8003880:	2200      	movs	r2, #0
 8003882:	701a      	strb	r2, [r3, #0]
    tD[2][3] = PixelColor::BLACK;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	3308      	adds	r3, #8
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	3303      	adds	r3, #3
 800388c:	2201      	movs	r2, #1
 800388e:	701a      	strb	r2, [r3, #0]

    tD[3][0] = PixelColor::WHITE;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	330c      	adds	r3, #12
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2200      	movs	r2, #0
 8003898:	701a      	strb	r2, [r3, #0]
    tD[3][1] = PixelColor::BLACK;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	330c      	adds	r3, #12
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	3301      	adds	r3, #1
 80038a2:	2201      	movs	r2, #1
 80038a4:	701a      	strb	r2, [r3, #0]
    tD[3][2] = PixelColor::BLACK;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	330c      	adds	r3, #12
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	3302      	adds	r3, #2
 80038ae:	2201      	movs	r2, #1
 80038b0:	701a      	strb	r2, [r3, #0]
    tD[3][3] = PixelColor::WHITE;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	330c      	adds	r3, #12
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	3303      	adds	r3, #3
 80038ba:	2200      	movs	r2, #0
 80038bc:	701a      	strb	r2, [r3, #0]

    return std::make_shared<Texture>(tW, tH, tD);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f107 030c 	add.w	r3, r7, #12
 80038c4:	f107 0210 	add.w	r2, r7, #16
 80038c8:	f107 0114 	add.w	r1, r7, #20
 80038cc:	f000 f91f 	bl	8003b0e <_ZSt11make_sharedIN4tama7TextureEJRjS2_RPPNS0_10PixelColorEEESt10shared_ptrIT_EDpOT0_>
}
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	371c      	adds	r7, #28
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd90      	pop	{r4, r7, pc}
 80038d8:	1ffffffe 	.word	0x1ffffffe

080038dc <_ZSt7forwardIRN4tama13DisplayConfigEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4618      	mov	r0, r3
 80038e8:	370c      	adds	r7, #12
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr

080038f2 <_ZSt11make_sharedIN4tama16Nokia5510DisplayEJRNS0_13DisplayConfigEEESt10shared_ptrIT_EDpOT0_>:
    make_shared(_Args&&... __args)
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b084      	sub	sp, #16
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
 80038fa:	6039      	str	r1, [r7, #0]
				       std::forward<_Args>(__args)...);
 80038fc:	f107 030c 	add.w	r3, r7, #12
 8003900:	4618      	mov	r0, r3
 8003902:	f000 f92d 	bl	8003b60 <_ZNSaIN4tama16Nokia5510DisplayEEC1Ev>
 8003906:	6838      	ldr	r0, [r7, #0]
 8003908:	f7ff ffe8 	bl	80038dc <_ZSt7forwardIRN4tama13DisplayConfigEEOT_RNSt16remove_referenceIS3_E4typeE>
 800390c:	4602      	mov	r2, r0
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f107 010c 	add.w	r1, r7, #12
 8003914:	4618      	mov	r0, r3
 8003916:	f000 f93b 	bl	8003b90 <_ZSt15allocate_sharedIN4tama16Nokia5510DisplayESaIS1_EJRNS0_13DisplayConfigEEESt10shared_ptrIT_ERKT0_DpOT1_>
 800391a:	f107 030c 	add.w	r3, r7, #12
 800391e:	4618      	mov	r0, r3
 8003920:	f000 f92a 	bl	8003b78 <_ZNSaIN4tama16Nokia5510DisplayEED1Ev>
    }
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	3710      	adds	r7, #16
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <_ZSt4moveIRSt10shared_ptrIN4tama16Nokia5510DisplayEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4618      	mov	r0, r3
 8003938:	370c      	adds	r7, #12
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr

08003942 <_ZNSt10shared_ptrIN4tama7DisplayEEC1INS0_16Nokia5510DisplayEvEEOS_IT_E>:
	shared_ptr(shared_ptr<_Yp>&& __r) noexcept
 8003942:	b590      	push	{r4, r7, lr}
 8003944:	b083      	sub	sp, #12
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
 800394a:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 800394c:	687c      	ldr	r4, [r7, #4]
 800394e:	6838      	ldr	r0, [r7, #0]
 8003950:	f7ff ffec 	bl	800392c <_ZSt4moveIRSt10shared_ptrIN4tama16Nokia5510DisplayEEEONSt16remove_referenceIT_E4typeEOS6_>
 8003954:	4603      	mov	r3, r0
 8003956:	4619      	mov	r1, r3
 8003958:	4620      	mov	r0, r4
 800395a:	f000 f92c 	bl	8003bb6 <_ZNSt12__shared_ptrIN4tama7DisplayELN9__gnu_cxx12_Lock_policyE0EEC1INS0_16Nokia5510DisplayEvEEOS_IT_LS3_0EE>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4618      	mov	r0, r3
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	bd90      	pop	{r4, r7, pc}

08003968 <_ZSt7forwardISt10shared_ptrIN4tama7TextureEEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4618      	mov	r0, r3
 8003974:	370c      	adds	r7, #12
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr

0800397e <_ZSt7forwardIN4tama5Vec2dEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800397e:	b480      	push	{r7}
 8003980:	b083      	sub	sp, #12
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4618      	mov	r0, r3
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <_ZSt11make_sharedIN4tama6SpriteEJSt10shared_ptrINS0_7TextureEENS0_5Vec2dEEES2_IT_EDpOT0_>:
    make_shared(_Args&&... __args)
 8003994:	b590      	push	{r4, r7, lr}
 8003996:	b087      	sub	sp, #28
 8003998:	af00      	add	r7, sp, #0
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	607a      	str	r2, [r7, #4]
				       std::forward<_Args>(__args)...);
 80039a0:	f107 0314 	add.w	r3, r7, #20
 80039a4:	4618      	mov	r0, r3
 80039a6:	f000 f924 	bl	8003bf2 <_ZNSaIN4tama6SpriteEEC1Ev>
 80039aa:	68b8      	ldr	r0, [r7, #8]
 80039ac:	f7ff ffdc 	bl	8003968 <_ZSt7forwardISt10shared_ptrIN4tama7TextureEEEOT_RNSt16remove_referenceIS4_E4typeE>
 80039b0:	4604      	mov	r4, r0
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f7ff ffe3 	bl	800397e <_ZSt7forwardIN4tama5Vec2dEEOT_RNSt16remove_referenceIS2_E4typeE>
 80039b8:	4603      	mov	r3, r0
 80039ba:	68f8      	ldr	r0, [r7, #12]
 80039bc:	f107 0114 	add.w	r1, r7, #20
 80039c0:	4622      	mov	r2, r4
 80039c2:	f000 f92e 	bl	8003c22 <_ZSt15allocate_sharedIN4tama6SpriteESaIS1_EJSt10shared_ptrINS0_7TextureEENS0_5Vec2dEEES3_IT_ERKT0_DpOT1_>
 80039c6:	f107 0314 	add.w	r3, r7, #20
 80039ca:	4618      	mov	r0, r3
 80039cc:	f000 f91d 	bl	8003c0a <_ZNSaIN4tama6SpriteEED1Ev>
    }
 80039d0:	68f8      	ldr	r0, [r7, #12]
 80039d2:	371c      	adds	r7, #28
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd90      	pop	{r4, r7, pc}

080039d8 <_ZSt11make_sharedIN4tama27Nokia5110DisplayDataManagerEJEESt10shared_ptrIT_EDpOT0_>:
    make_shared(_Args&&... __args)
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
				       std::forward<_Args>(__args)...);
 80039e0:	f107 030c 	add.w	r3, r7, #12
 80039e4:	4618      	mov	r0, r3
 80039e6:	f000 f936 	bl	8003c56 <_ZNSaIN4tama27Nokia5110DisplayDataManagerEEC1Ev>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f107 020c 	add.w	r2, r7, #12
 80039f0:	4611      	mov	r1, r2
 80039f2:	4618      	mov	r0, r3
 80039f4:	f000 f947 	bl	8003c86 <_ZSt15allocate_sharedIN4tama27Nokia5110DisplayDataManagerESaIS1_EJEESt10shared_ptrIT_ERKT0_DpOT1_>
 80039f8:	f107 030c 	add.w	r3, r7, #12
 80039fc:	4618      	mov	r0, r3
 80039fe:	f000 f936 	bl	8003c6e <_ZNSaIN4tama27Nokia5110DisplayDataManagerEED1Ev>
    }
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <_ZSt4moveIRSt10shared_ptrIN4tama27Nokia5110DisplayDataManagerEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8003a0a:	b480      	push	{r7}
 8003a0c:	b083      	sub	sp, #12
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4618      	mov	r0, r3
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <_ZNSt10shared_ptrIN4tama18DisplayDataManagerEEC1INS0_27Nokia5110DisplayDataManagerEvEEOS_IT_E>:
	shared_ptr(shared_ptr<_Yp>&& __r) noexcept
 8003a20:	b590      	push	{r4, r7, lr}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 8003a2a:	687c      	ldr	r4, [r7, #4]
 8003a2c:	6838      	ldr	r0, [r7, #0]
 8003a2e:	f7ff ffec 	bl	8003a0a <_ZSt4moveIRSt10shared_ptrIN4tama27Nokia5110DisplayDataManagerEEEONSt16remove_referenceIT_E4typeEOS6_>
 8003a32:	4603      	mov	r3, r0
 8003a34:	4619      	mov	r1, r3
 8003a36:	4620      	mov	r0, r4
 8003a38:	f000 f933 	bl	8003ca2 <_ZNSt12__shared_ptrIN4tama18DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EEC1INS0_27Nokia5110DisplayDataManagerEvEEOS_IT_LS3_0EE>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	370c      	adds	r7, #12
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd90      	pop	{r4, r7, pc}

08003a46 <_ZSt11make_sharedIN4tama5SceneEJEESt10shared_ptrIT_EDpOT0_>:
    make_shared(_Args&&... __args)
 8003a46:	b580      	push	{r7, lr}
 8003a48:	b084      	sub	sp, #16
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
				       std::forward<_Args>(__args)...);
 8003a4e:	f107 030c 	add.w	r3, r7, #12
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7fd fda2 	bl	800159c <_ZNSaIN4tama5SceneEEC1Ev>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f107 020c 	add.w	r2, r7, #12
 8003a5e:	4611      	mov	r1, r2
 8003a60:	4618      	mov	r0, r3
 8003a62:	f000 f93c 	bl	8003cde <_ZSt15allocate_sharedIN4tama5SceneESaIS1_EJEESt10shared_ptrIT_ERKT0_DpOT1_>
 8003a66:	f107 030c 	add.w	r3, r7, #12
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7fd fda2 	bl	80015b4 <_ZNSaIN4tama5SceneEED1Ev>
    }
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	3710      	adds	r7, #16
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <_ZNKSt19__shared_ptr_accessIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
	return _M_get();
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f000 f93a 	bl	8003cfa <_ZNKSt19__shared_ptr_accessIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 8003a86:	4603      	mov	r3, r0
      }
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3708      	adds	r7, #8
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <_ZNSt10shared_ptrIN4tama8DrawableEEC1INS0_6SpriteEvEERKS_IT_E>:
	shared_ptr(const shared_ptr<_Yp>& __r) noexcept
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
        : __shared_ptr<_Tp>(__r) { }
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	683a      	ldr	r2, [r7, #0]
 8003a9e:	4611      	mov	r1, r2
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f000 f936 	bl	8003d12 <_ZNSt12__shared_ptrIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0EEC1INS0_6SpriteEvEERKS_IT_LS3_0EE>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3708      	adds	r7, #8
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <_ZNKSt19__shared_ptr_accessIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
	return _M_get();
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f000 f940 	bl	8003d3e <_ZNKSt19__shared_ptr_accessIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 8003abe:	4603      	mov	r3, r0
      }
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3708      	adds	r7, #8
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <_ZNKSt19__shared_ptr_accessIN4tama18DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
	return _M_get();
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f000 f940 	bl	8003d56 <_ZNKSt19__shared_ptr_accessIN4tama18DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 8003ad6:	4603      	mov	r3, r0
      }
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3708      	adds	r7, #8
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <_ZNKSt19__shared_ptr_accessIN4tama7DisplayELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
	return _M_get();
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f000 f940 	bl	8003d6e <_ZNKSt19__shared_ptr_accessIN4tama7DisplayELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 8003aee:	4603      	mov	r3, r0
      }
 8003af0:	4618      	mov	r0, r3
 8003af2:	3708      	adds	r7, #8
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <_ZSt7forwardIRPPN4tama10PixelColorEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	4618      	mov	r0, r3
 8003b04:	370c      	adds	r7, #12
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr

08003b0e <_ZSt11make_sharedIN4tama7TextureEJRjS2_RPPNS0_10PixelColorEEESt10shared_ptrIT_EDpOT0_>:
    make_shared(_Args&&... __args)
 8003b0e:	b5b0      	push	{r4, r5, r7, lr}
 8003b10:	b088      	sub	sp, #32
 8003b12:	af02      	add	r7, sp, #8
 8003b14:	60f8      	str	r0, [r7, #12]
 8003b16:	60b9      	str	r1, [r7, #8]
 8003b18:	607a      	str	r2, [r7, #4]
 8003b1a:	603b      	str	r3, [r7, #0]
				       std::forward<_Args>(__args)...);
 8003b1c:	f107 0314 	add.w	r3, r7, #20
 8003b20:	4618      	mov	r0, r3
 8003b22:	f7fd fd84 	bl	800162e <_ZNSaIN4tama7TextureEEC1Ev>
 8003b26:	68b8      	ldr	r0, [r7, #8]
 8003b28:	f7fd fb87 	bl	800123a <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 8003b2c:	4604      	mov	r4, r0
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f7fd fb83 	bl	800123a <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 8003b34:	4605      	mov	r5, r0
 8003b36:	6838      	ldr	r0, [r7, #0]
 8003b38:	f7ff ffde 	bl	8003af8 <_ZSt7forwardIRPPN4tama10PixelColorEEOT_RNSt16remove_referenceIS5_E4typeE>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	68f8      	ldr	r0, [r7, #12]
 8003b40:	f107 0114 	add.w	r1, r7, #20
 8003b44:	9300      	str	r3, [sp, #0]
 8003b46:	462b      	mov	r3, r5
 8003b48:	4622      	mov	r2, r4
 8003b4a:	f000 f91c 	bl	8003d86 <_ZSt15allocate_sharedIN4tama7TextureESaIS1_EJRjS3_RPPNS0_10PixelColorEEESt10shared_ptrIT_ERKT0_DpOT1_>
 8003b4e:	f107 0314 	add.w	r3, r7, #20
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7fd fd77 	bl	8001646 <_ZNSaIN4tama7TextureEED1Ev>
    }
 8003b58:	68f8      	ldr	r0, [r7, #12]
 8003b5a:	3718      	adds	r7, #24
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bdb0      	pop	{r4, r5, r7, pc}

08003b60 <_ZNSaIN4tama16Nokia5510DisplayEEC1Ev>:
      allocator() throw() { }
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 f92b 	bl	8003dc4 <_ZN9__gnu_cxx13new_allocatorIN4tama16Nokia5510DisplayEEC1Ev>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4618      	mov	r0, r3
 8003b72:	3708      	adds	r7, #8
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <_ZNSaIN4tama16Nokia5510DisplayEED1Ev>:
      ~allocator() throw() { }
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f000 f92a 	bl	8003dda <_ZN9__gnu_cxx13new_allocatorIN4tama16Nokia5510DisplayEED1Ev>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3708      	adds	r7, #8
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <_ZSt15allocate_sharedIN4tama16Nokia5510DisplayESaIS1_EJRNS0_13DisplayConfigEEESt10shared_ptrIT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 8003b90:	b590      	push	{r4, r7, lr}
 8003b92:	b087      	sub	sp, #28
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
			     std::forward<_Args>(__args)...);
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f7ff fe9d 	bl	80038dc <_ZSt7forwardIRN4tama13DisplayConfigEEOT_RNSt16remove_referenceIS3_E4typeE>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	68ba      	ldr	r2, [r7, #8]
 8003ba6:	4621      	mov	r1, r4
 8003ba8:	68f8      	ldr	r0, [r7, #12]
 8003baa:	f000 f921 	bl	8003df0 <_ZNSt10shared_ptrIN4tama16Nokia5510DisplayEEC1ISaIS1_EJRNS0_13DisplayConfigEEEESt19_Sp_make_shared_tagRKT_DpOT0_>
    }
 8003bae:	68f8      	ldr	r0, [r7, #12]
 8003bb0:	371c      	adds	r7, #28
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd90      	pop	{r4, r7, pc}

08003bb6 <_ZNSt12__shared_ptrIN4tama7DisplayELN9__gnu_cxx12_Lock_policyE0EEC1INS0_16Nokia5510DisplayEvEEOS_IT_LS3_0EE>:
	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b082      	sub	sp, #8
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
 8003bbe:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount()
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	601a      	str	r2, [r3, #0]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	3304      	adds	r3, #4
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f7fc ff83 	bl	8000ad8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _M_refcount._M_swap(__r._M_refcount);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	1d1a      	adds	r2, r3, #4
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	3304      	adds	r3, #4
 8003bda:	4619      	mov	r1, r3
 8003bdc:	4610      	mov	r0, r2
 8003bde:	f7fc ffbe 	bl	8000b5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  __r._M_ptr = 0;
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	2200      	movs	r2, #0
 8003be6:	601a      	str	r2, [r3, #0]
	}
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4618      	mov	r0, r3
 8003bec:	3708      	adds	r7, #8
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}

08003bf2 <_ZNSaIN4tama6SpriteEEC1Ev>:
      allocator() throw() { }
 8003bf2:	b580      	push	{r7, lr}
 8003bf4:	b082      	sub	sp, #8
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 f90e 	bl	8003e1c <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEEC1Ev>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4618      	mov	r0, r3
 8003c04:	3708      	adds	r7, #8
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <_ZNSaIN4tama6SpriteEED1Ev>:
      ~allocator() throw() { }
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b082      	sub	sp, #8
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 f90d 	bl	8003e32 <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEED1Ev>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3708      	adds	r7, #8
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}

08003c22 <_ZSt15allocate_sharedIN4tama6SpriteESaIS1_EJSt10shared_ptrINS0_7TextureEENS0_5Vec2dEEES3_IT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 8003c22:	b5b0      	push	{r4, r5, r7, lr}
 8003c24:	b088      	sub	sp, #32
 8003c26:	af02      	add	r7, sp, #8
 8003c28:	60f8      	str	r0, [r7, #12]
 8003c2a:	60b9      	str	r1, [r7, #8]
 8003c2c:	607a      	str	r2, [r7, #4]
 8003c2e:	603b      	str	r3, [r7, #0]
			     std::forward<_Args>(__args)...);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f7ff fe99 	bl	8003968 <_ZSt7forwardISt10shared_ptrIN4tama7TextureEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8003c36:	4604      	mov	r4, r0
 8003c38:	6838      	ldr	r0, [r7, #0]
 8003c3a:	f7ff fea0 	bl	800397e <_ZSt7forwardIN4tama5Vec2dEEOT_RNSt16remove_referenceIS2_E4typeE>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	9300      	str	r3, [sp, #0]
 8003c42:	4623      	mov	r3, r4
 8003c44:	68ba      	ldr	r2, [r7, #8]
 8003c46:	4629      	mov	r1, r5
 8003c48:	68f8      	ldr	r0, [r7, #12]
 8003c4a:	f000 f8fd 	bl	8003e48 <_ZNSt10shared_ptrIN4tama6SpriteEEC1ISaIS1_EJS_INS0_7TextureEENS0_5Vec2dEEEESt19_Sp_make_shared_tagRKT_DpOT0_>
    }
 8003c4e:	68f8      	ldr	r0, [r7, #12]
 8003c50:	3718      	adds	r7, #24
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bdb0      	pop	{r4, r5, r7, pc}

08003c56 <_ZNSaIN4tama27Nokia5110DisplayDataManagerEEC1Ev>:
      allocator() throw() { }
 8003c56:	b580      	push	{r7, lr}
 8003c58:	b082      	sub	sp, #8
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 f90e 	bl	8003e80 <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEEC1Ev>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4618      	mov	r0, r3
 8003c68:	3708      	adds	r7, #8
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <_ZNSaIN4tama27Nokia5110DisplayDataManagerEED1Ev>:
      ~allocator() throw() { }
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b082      	sub	sp, #8
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 f90d 	bl	8003e96 <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEED1Ev>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3708      	adds	r7, #8
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}

08003c86 <_ZSt15allocate_sharedIN4tama27Nokia5110DisplayDataManagerESaIS1_EJEESt10shared_ptrIT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 8003c86:	b580      	push	{r7, lr}
 8003c88:	b084      	sub	sp, #16
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
 8003c8e:	6039      	str	r1, [r7, #0]
			     std::forward<_Args>(__args)...);
 8003c90:	683a      	ldr	r2, [r7, #0]
 8003c92:	4619      	mov	r1, r3
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f000 f909 	bl	8003eac <_ZNSt10shared_ptrIN4tama27Nokia5110DisplayDataManagerEEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>
    }
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	3710      	adds	r7, #16
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}

08003ca2 <_ZNSt12__shared_ptrIN4tama18DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EEC1INS0_27Nokia5110DisplayDataManagerEvEEOS_IT_LS3_0EE>:
	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 8003ca2:	b580      	push	{r7, lr}
 8003ca4:	b082      	sub	sp, #8
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
 8003caa:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount()
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	601a      	str	r2, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	3304      	adds	r3, #4
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7fc ff0d 	bl	8000ad8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _M_refcount._M_swap(__r._M_refcount);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	1d1a      	adds	r2, r3, #4
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	3304      	adds	r3, #4
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	4610      	mov	r0, r2
 8003cca:	f7fc ff48 	bl	8000b5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  __r._M_ptr = 0;
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	601a      	str	r2, [r3, #0]
	}
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3708      	adds	r7, #8
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <_ZSt15allocate_sharedIN4tama5SceneESaIS1_EJEESt10shared_ptrIT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b084      	sub	sp, #16
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
 8003ce6:	6039      	str	r1, [r7, #0]
			     std::forward<_Args>(__args)...);
 8003ce8:	683a      	ldr	r2, [r7, #0]
 8003cea:	4619      	mov	r1, r3
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f000 f8ee 	bl	8003ece <_ZNSt10shared_ptrIN4tama5SceneEEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>
    }
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	3710      	adds	r7, #16
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}

08003cfa <_ZNKSt19__shared_ptr_accessIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	b082      	sub	sp, #8
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 f8f4 	bl	8003ef0 <_ZNKSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE3getEv>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3708      	adds	r7, #8
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <_ZNSt12__shared_ptrIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0EEC1INS0_6SpriteEvEERKS_IT_LS3_0EE>:
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b082      	sub	sp, #8
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
 8003d1a:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	601a      	str	r2, [r3, #0]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	1d1a      	adds	r2, r3, #4
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	3304      	adds	r3, #4
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	4610      	mov	r0, r2
 8003d30:	f7fc fc0c 	bl	800054c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	{ }
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4618      	mov	r0, r3
 8003d38:	3708      	adds	r7, #8
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}

08003d3e <_ZNKSt19__shared_ptr_accessIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	b082      	sub	sp, #8
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f000 f8de 	bl	8003f08 <_ZNKSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE3getEv>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3708      	adds	r7, #8
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}

08003d56 <_ZNKSt19__shared_ptr_accessIN4tama18DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 8003d56:	b580      	push	{r7, lr}
 8003d58:	b082      	sub	sp, #8
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 f8de 	bl	8003f20 <_ZNKSt12__shared_ptrIN4tama18DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE3getEv>
 8003d64:	4603      	mov	r3, r0
 8003d66:	4618      	mov	r0, r3
 8003d68:	3708      	adds	r7, #8
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <_ZNKSt19__shared_ptr_accessIN4tama7DisplayELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	b082      	sub	sp, #8
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 f8de 	bl	8003f38 <_ZNKSt12__shared_ptrIN4tama7DisplayELN9__gnu_cxx12_Lock_policyE0EE3getEv>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3708      	adds	r7, #8
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}

08003d86 <_ZSt15allocate_sharedIN4tama7TextureESaIS1_EJRjS3_RPPNS0_10PixelColorEEESt10shared_ptrIT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 8003d86:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d88:	b089      	sub	sp, #36	; 0x24
 8003d8a:	af02      	add	r7, sp, #8
 8003d8c:	60f8      	str	r0, [r7, #12]
 8003d8e:	60b9      	str	r1, [r7, #8]
 8003d90:	607a      	str	r2, [r7, #4]
 8003d92:	603b      	str	r3, [r7, #0]
			     std::forward<_Args>(__args)...);
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f7fd fa50 	bl	800123a <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 8003d9a:	4605      	mov	r5, r0
 8003d9c:	6838      	ldr	r0, [r7, #0]
 8003d9e:	f7fd fa4c 	bl	800123a <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 8003da2:	4604      	mov	r4, r0
 8003da4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003da6:	f7ff fea7 	bl	8003af8 <_ZSt7forwardIRPPN4tama10PixelColorEEOT_RNSt16remove_referenceIS5_E4typeE>
 8003daa:	4603      	mov	r3, r0
 8003dac:	9301      	str	r3, [sp, #4]
 8003dae:	9400      	str	r4, [sp, #0]
 8003db0:	462b      	mov	r3, r5
 8003db2:	68ba      	ldr	r2, [r7, #8]
 8003db4:	4631      	mov	r1, r6
 8003db6:	68f8      	ldr	r0, [r7, #12]
 8003db8:	f000 f8ca 	bl	8003f50 <_ZNSt10shared_ptrIN4tama7TextureEEC1ISaIS1_EJRjS5_RPPNS0_10PixelColorEEEESt19_Sp_make_shared_tagRKT_DpOT0_>
    }
 8003dbc:	68f8      	ldr	r0, [r7, #12]
 8003dbe:	371c      	adds	r7, #28
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003dc4 <_ZN9__gnu_cxx13new_allocatorIN4tama16Nokia5510DisplayEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4618      	mov	r0, r3
 8003dd0:	370c      	adds	r7, #12
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr

08003dda <_ZN9__gnu_cxx13new_allocatorIN4tama16Nokia5510DisplayEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003dda:	b480      	push	{r7}
 8003ddc:	b083      	sub	sp, #12
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4618      	mov	r0, r3
 8003de6:	370c      	adds	r7, #12
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <_ZNSt10shared_ptrIN4tama16Nokia5510DisplayEEC1ISaIS1_EJRNS0_13DisplayConfigEEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8003df0:	b5b0      	push	{r4, r5, r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	7239      	strb	r1, [r7, #8]
 8003dfa:	607a      	str	r2, [r7, #4]
 8003dfc:	603b      	str	r3, [r7, #0]
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
 8003dfe:	68fc      	ldr	r4, [r7, #12]
 8003e00:	6838      	ldr	r0, [r7, #0]
 8003e02:	f7ff fd6b 	bl	80038dc <_ZSt7forwardIRN4tama13DisplayConfigEEOT_RNSt16remove_referenceIS3_E4typeE>
 8003e06:	4603      	mov	r3, r0
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	4629      	mov	r1, r5
 8003e0c:	4620      	mov	r0, r4
 8003e0e:	f000 f8df 	bl	8003fd0 <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJRNS0_13DisplayConfigEEEESt19_Sp_make_shared_tagRKT_DpOT0_>
	{ }
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	4618      	mov	r0, r3
 8003e16:	3710      	adds	r7, #16
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bdb0      	pop	{r4, r5, r7, pc}

08003e1c <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4618      	mov	r0, r3
 8003e28:	370c      	adds	r7, #12
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr

08003e32 <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003e32:	b480      	push	{r7}
 8003e34:	b083      	sub	sp, #12
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <_ZNSt10shared_ptrIN4tama6SpriteEEC1ISaIS1_EJS_INS0_7TextureEENS0_5Vec2dEEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8003e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e4a:	b087      	sub	sp, #28
 8003e4c:	af02      	add	r7, sp, #8
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	7239      	strb	r1, [r7, #8]
 8003e52:	607a      	str	r2, [r7, #4]
 8003e54:	603b      	str	r3, [r7, #0]
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
 8003e56:	68fc      	ldr	r4, [r7, #12]
 8003e58:	6838      	ldr	r0, [r7, #0]
 8003e5a:	f7ff fd85 	bl	8003968 <_ZSt7forwardISt10shared_ptrIN4tama7TextureEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8003e5e:	4605      	mov	r5, r0
 8003e60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e62:	f7ff fd8c 	bl	800397e <_ZSt7forwardIN4tama5Vec2dEEOT_RNSt16remove_referenceIS2_E4typeE>
 8003e66:	4603      	mov	r3, r0
 8003e68:	9300      	str	r3, [sp, #0]
 8003e6a:	462b      	mov	r3, r5
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	4631      	mov	r1, r6
 8003e70:	4620      	mov	r0, r4
 8003e72:	f000 f945 	bl	8004100 <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJSt10shared_ptrINS0_7TextureEENS0_5Vec2dEEEESt19_Sp_make_shared_tagRKT_DpOT0_>
	{ }
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3714      	adds	r7, #20
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003e80 <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	370c      	adds	r7, #12
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr

08003e96 <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003e96:	b480      	push	{r7}
 8003e98:	b083      	sub	sp, #12
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <_ZNSt10shared_ptrIN4tama27Nokia5110DisplayDataManagerEEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8003eac:	b590      	push	{r4, r7, lr}
 8003eae:	b085      	sub	sp, #20
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	7239      	strb	r1, [r7, #8]
 8003eb6:	607a      	str	r2, [r7, #4]
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	4621      	mov	r1, r4
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f000 f9ba 	bl	8004238 <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>
	{ }
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3714      	adds	r7, #20
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd90      	pop	{r4, r7, pc}

08003ece <_ZNSt10shared_ptrIN4tama5SceneEEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8003ece:	b590      	push	{r4, r7, lr}
 8003ed0:	b085      	sub	sp, #20
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	60f8      	str	r0, [r7, #12]
 8003ed6:	7239      	strb	r1, [r7, #8]
 8003ed8:	607a      	str	r2, [r7, #4]
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	4621      	mov	r1, r4
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f000 fa1f 	bl	8004324 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>
	{ }
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3714      	adds	r7, #20
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd90      	pop	{r4, r7, pc}

08003ef0 <_ZNKSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4618      	mov	r0, r3
 8003efe:	370c      	adds	r7, #12
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <_ZNKSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4618      	mov	r0, r3
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <_ZNKSt12__shared_ptrIN4tama18DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <_ZNKSt12__shared_ptrIN4tama7DisplayELN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4618      	mov	r0, r3
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <_ZNSt10shared_ptrIN4tama7TextureEEC1ISaIS1_EJRjS5_RPPNS0_10PixelColorEEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8003f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f54:	b086      	sub	sp, #24
 8003f56:	af02      	add	r7, sp, #8
 8003f58:	60f8      	str	r0, [r7, #12]
 8003f5a:	7239      	strb	r1, [r7, #8]
 8003f5c:	607a      	str	r2, [r7, #4]
 8003f5e:	603b      	str	r3, [r7, #0]
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
 8003f60:	68fc      	ldr	r4, [r7, #12]
 8003f62:	6838      	ldr	r0, [r7, #0]
 8003f64:	f7fd f969 	bl	800123a <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 8003f68:	4606      	mov	r6, r0
 8003f6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f6c:	f7fd f965 	bl	800123a <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 8003f70:	4605      	mov	r5, r0
 8003f72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003f74:	f7ff fdc0 	bl	8003af8 <_ZSt7forwardIRPPN4tama10PixelColorEEOT_RNSt16remove_referenceIS5_E4typeE>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	9301      	str	r3, [sp, #4]
 8003f7c:	9500      	str	r5, [sp, #0]
 8003f7e:	4633      	mov	r3, r6
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	4641      	mov	r1, r8
 8003f84:	4620      	mov	r0, r4
 8003f86:	f000 fa43 	bl	8004410 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJRjS7_RPPNS0_10PixelColorEEEESt19_Sp_make_shared_tagRKT_DpOT0_>
	{ }
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3710      	adds	r7, #16
 8003f90:	46bd      	mov	sp, r7
 8003f92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003f96 <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>:
        struct _Deleter
 8003f96:	b580      	push	{r7, lr}
 8003f98:	b082      	sub	sp, #8
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f7ff fde9 	bl	8003b78 <_ZNSaIN4tama16Nokia5510DisplayEED1Ev>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3708      	adds	r7, #8
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>:
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	683a      	ldr	r2, [r7, #0]
 8003fbe:	4611      	mov	r1, r2
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f000 faaa 	bl	800451a <_ZNSaIN4tama16Nokia5510DisplayEEC1ERKS1_>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3708      	adds	r7, #8
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJRNS0_13DisplayConfigEEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b08c      	sub	sp, #48	; 0x30
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	7239      	strb	r1, [r7, #8]
 8003fda:	607a      	str	r2, [r7, #4]
 8003fdc:	603b      	str	r3, [r7, #0]
	: _M_ptr(), _M_refcount()
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	601a      	str	r2, [r3, #0]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	3304      	adds	r3, #4
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f7fc fd75 	bl	8000ad8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 8003fee:	f107 0320 	add.w	r3, r7, #32
 8003ff2:	6879      	ldr	r1, [r7, #4]
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f000 fa90 	bl	800451a <_ZNSaIN4tama16Nokia5510DisplayEEC1ERKS1_>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 8003ffa:	f107 0318 	add.w	r3, r7, #24
 8003ffe:	f107 0220 	add.w	r2, r7, #32
 8004002:	4611      	mov	r1, r2
 8004004:	4618      	mov	r0, r3
 8004006:	f000 fa96 	bl	8004536 <_ZSt18__allocate_guardedISaIN4tama16Nokia5510DisplayEEESt15__allocated_ptrIT_ERS4_>
	  auto __ptr = __guard.get();
 800400a:	f107 0318 	add.w	r3, r7, #24
 800400e:	4618      	mov	r0, r3
 8004010:	f000 fab9 	bl	8004586 <_ZNSt15__allocated_ptrISaIN4tama16Nokia5510DisplayEEE3getEv>
 8004014:	62f8      	str	r0, [r7, #44]	; 0x2c
	  __traits::construct(__del._M_alloc, __ptr,
 8004016:	6838      	ldr	r0, [r7, #0]
 8004018:	f7ff fc60 	bl	80038dc <_ZSt7forwardIRN4tama13DisplayConfigEEOT_RNSt16remove_referenceIS3_E4typeE>
 800401c:	4602      	mov	r2, r0
 800401e:	f107 0320 	add.w	r3, r7, #32
 8004022:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004024:	4618      	mov	r0, r3
 8004026:	f000 fabc 	bl	80045a2 <_ZNSt16allocator_traitsISaIN4tama16Nokia5510DisplayEEE9constructIS1_JRNS0_13DisplayConfigEEEEvRS2_PT_DpOT0_>
	  __guard = nullptr;
 800402a:	f107 0318 	add.w	r3, r7, #24
 800402e:	2100      	movs	r1, #0
 8004030:	4618      	mov	r0, r3
 8004032:	f000 fac9 	bl	80045c8 <_ZNSt15__allocated_ptrISaIN4tama16Nokia5510DisplayEEEaSEDn>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 8004036:	f107 0220 	add.w	r2, r7, #32
 800403a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800403e:	4611      	mov	r1, r2
 8004040:	4618      	mov	r0, r3
 8004042:	f7ff ffb5 	bl	8003fb0 <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>
 8004046:	f107 0220 	add.w	r2, r7, #32
 800404a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800404e:	4611      	mov	r1, r2
 8004050:	4618      	mov	r0, r3
 8004052:	f000 fa62 	bl	800451a <_ZNSaIN4tama16Nokia5510DisplayEEC1ERKS1_>
 8004056:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800405a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800405e:	f107 0014 	add.w	r0, r7, #20
 8004062:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004064:	f000 fae5 	bl	8004632 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama16Nokia5510DisplayENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
 8004068:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800406c:	4618      	mov	r0, r3
 800406e:	f7ff fd83 	bl	8003b78 <_ZNSaIN4tama16Nokia5510DisplayEED1Ev>
 8004072:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004076:	4618      	mov	r0, r3
 8004078:	f7ff ff8d 	bl	8003f96 <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	  _M_refcount._M_swap(__count);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	3304      	adds	r3, #4
 8004080:	f107 0214 	add.w	r2, r7, #20
 8004084:	4611      	mov	r1, r2
 8004086:	4618      	mov	r0, r3
 8004088:	f7fc fd69 	bl	8000b5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  _M_ptr = __ptr;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004090:	601a      	str	r2, [r3, #0]
	  _M_enable_shared_from_this_with(_M_ptr);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4619      	mov	r1, r3
 8004098:	68f8      	ldr	r0, [r7, #12]
 800409a:	f000 fb21 	bl	80046e0 <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 800409e:	f107 0314 	add.w	r3, r7, #20
 80040a2:	4618      	mov	r0, r3
 80040a4:	f7fc fc50 	bl	8000948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 80040a8:	f107 0318 	add.w	r3, r7, #24
 80040ac:	4618      	mov	r0, r3
 80040ae:	f000 fa55 	bl	800455c <_ZNSt15__allocated_ptrISaIN4tama16Nokia5510DisplayEEED1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 80040b2:	f107 0320 	add.w	r3, r7, #32
 80040b6:	4618      	mov	r0, r3
 80040b8:	f7ff ff6d 	bl	8003f96 <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	}
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	4618      	mov	r0, r3
 80040c0:	3730      	adds	r7, #48	; 0x30
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}

080040c6 <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>:
        struct _Deleter
 80040c6:	b580      	push	{r7, lr}
 80040c8:	b082      	sub	sp, #8
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4618      	mov	r0, r3
 80040d2:	f7ff fd9a 	bl	8003c0a <_ZNSaIN4tama6SpriteEED1Ev>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4618      	mov	r0, r3
 80040da:	3708      	adds	r7, #8
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>:
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	683a      	ldr	r2, [r7, #0]
 80040ee:	4611      	mov	r1, r2
 80040f0:	4618      	mov	r0, r3
 80040f2:	f000 fb00 	bl	80046f6 <_ZNSaIN4tama6SpriteEEC1ERKS1_>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4618      	mov	r0, r3
 80040fa:	3708      	adds	r7, #8
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJSt10shared_ptrINS0_7TextureEENS0_5Vec2dEEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8004100:	b590      	push	{r4, r7, lr}
 8004102:	b08d      	sub	sp, #52	; 0x34
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	7239      	strb	r1, [r7, #8]
 800410a:	607a      	str	r2, [r7, #4]
 800410c:	603b      	str	r3, [r7, #0]
	: _M_ptr(), _M_refcount()
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	601a      	str	r2, [r3, #0]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	3304      	adds	r3, #4
 8004118:	4618      	mov	r0, r3
 800411a:	f7fc fcdd 	bl	8000ad8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 800411e:	f107 0320 	add.w	r3, r7, #32
 8004122:	6879      	ldr	r1, [r7, #4]
 8004124:	4618      	mov	r0, r3
 8004126:	f000 fae6 	bl	80046f6 <_ZNSaIN4tama6SpriteEEC1ERKS1_>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 800412a:	f107 0318 	add.w	r3, r7, #24
 800412e:	f107 0220 	add.w	r2, r7, #32
 8004132:	4611      	mov	r1, r2
 8004134:	4618      	mov	r0, r3
 8004136:	f000 faec 	bl	8004712 <_ZSt18__allocate_guardedISaIN4tama6SpriteEEESt15__allocated_ptrIT_ERS4_>
	  auto __ptr = __guard.get();
 800413a:	f107 0318 	add.w	r3, r7, #24
 800413e:	4618      	mov	r0, r3
 8004140:	f000 fb0f 	bl	8004762 <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEE3getEv>
 8004144:	62f8      	str	r0, [r7, #44]	; 0x2c
	  __traits::construct(__del._M_alloc, __ptr,
 8004146:	6838      	ldr	r0, [r7, #0]
 8004148:	f7ff fc0e 	bl	8003968 <_ZSt7forwardISt10shared_ptrIN4tama7TextureEEEOT_RNSt16remove_referenceIS4_E4typeE>
 800414c:	4604      	mov	r4, r0
 800414e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004150:	f7ff fc15 	bl	800397e <_ZSt7forwardIN4tama5Vec2dEEOT_RNSt16remove_referenceIS2_E4typeE>
 8004154:	4603      	mov	r3, r0
 8004156:	f107 0020 	add.w	r0, r7, #32
 800415a:	4622      	mov	r2, r4
 800415c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800415e:	f000 fb0e 	bl	800477e <_ZNSt16allocator_traitsISaIN4tama6SpriteEEE9constructIS1_JSt10shared_ptrINS0_7TextureEENS0_5Vec2dEEEEvRS2_PT_DpOT0_>
	  __guard = nullptr;
 8004162:	f107 0318 	add.w	r3, r7, #24
 8004166:	2100      	movs	r1, #0
 8004168:	4618      	mov	r0, r3
 800416a:	f000 fb20 	bl	80047ae <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEEaSEDn>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 800416e:	f107 0220 	add.w	r2, r7, #32
 8004172:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004176:	4611      	mov	r1, r2
 8004178:	4618      	mov	r0, r3
 800417a:	f7ff ffb1 	bl	80040e0 <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>
 800417e:	f107 0220 	add.w	r2, r7, #32
 8004182:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004186:	4611      	mov	r1, r2
 8004188:	4618      	mov	r0, r3
 800418a:	f000 fab4 	bl	80046f6 <_ZNSaIN4tama6SpriteEEC1ERKS1_>
 800418e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004192:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004196:	f107 0014 	add.w	r0, r7, #20
 800419a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800419c:	f000 fb3c 	bl	8004818 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama6SpriteENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
 80041a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80041a4:	4618      	mov	r0, r3
 80041a6:	f7ff fd30 	bl	8003c0a <_ZNSaIN4tama6SpriteEED1Ev>
 80041aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7ff ff89 	bl	80040c6 <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	  _M_refcount._M_swap(__count);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	3304      	adds	r3, #4
 80041b8:	f107 0214 	add.w	r2, r7, #20
 80041bc:	4611      	mov	r1, r2
 80041be:	4618      	mov	r0, r3
 80041c0:	f7fc fccd 	bl	8000b5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  _M_ptr = __ptr;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041c8:	601a      	str	r2, [r3, #0]
	  _M_enable_shared_from_this_with(_M_ptr);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4619      	mov	r1, r3
 80041d0:	68f8      	ldr	r0, [r7, #12]
 80041d2:	f000 fb78 	bl	80048c6 <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 80041d6:	f107 0314 	add.w	r3, r7, #20
 80041da:	4618      	mov	r0, r3
 80041dc:	f7fc fbb4 	bl	8000948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 80041e0:	f107 0318 	add.w	r3, r7, #24
 80041e4:	4618      	mov	r0, r3
 80041e6:	f000 faa7 	bl	8004738 <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEED1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 80041ea:	f107 0320 	add.w	r3, r7, #32
 80041ee:	4618      	mov	r0, r3
 80041f0:	f7ff ff69 	bl	80040c6 <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	}
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	4618      	mov	r0, r3
 80041f8:	3734      	adds	r7, #52	; 0x34
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd90      	pop	{r4, r7, pc}

080041fe <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>:
        struct _Deleter
 80041fe:	b580      	push	{r7, lr}
 8004200:	b082      	sub	sp, #8
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4618      	mov	r0, r3
 800420a:	f7ff fd30 	bl	8003c6e <_ZNSaIN4tama27Nokia5110DisplayDataManagerEED1Ev>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4618      	mov	r0, r3
 8004212:	3708      	adds	r7, #8
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>:
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	683a      	ldr	r2, [r7, #0]
 8004226:	4611      	mov	r1, r2
 8004228:	4618      	mov	r0, r3
 800422a:	f000 fb57 	bl	80048dc <_ZNSaIN4tama27Nokia5110DisplayDataManagerEEC1ERKS1_>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4618      	mov	r0, r3
 8004232:	3708      	adds	r7, #8
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8004238:	b580      	push	{r7, lr}
 800423a:	b08c      	sub	sp, #48	; 0x30
 800423c:	af00      	add	r7, sp, #0
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	7239      	strb	r1, [r7, #8]
 8004242:	607a      	str	r2, [r7, #4]
	: _M_ptr(), _M_refcount()
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2200      	movs	r2, #0
 8004248:	601a      	str	r2, [r3, #0]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	3304      	adds	r3, #4
 800424e:	4618      	mov	r0, r3
 8004250:	f7fc fc42 	bl	8000ad8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 8004254:	f107 0320 	add.w	r3, r7, #32
 8004258:	6879      	ldr	r1, [r7, #4]
 800425a:	4618      	mov	r0, r3
 800425c:	f000 fb3e 	bl	80048dc <_ZNSaIN4tama27Nokia5110DisplayDataManagerEEC1ERKS1_>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 8004260:	f107 0318 	add.w	r3, r7, #24
 8004264:	f107 0220 	add.w	r2, r7, #32
 8004268:	4611      	mov	r1, r2
 800426a:	4618      	mov	r0, r3
 800426c:	f000 fb44 	bl	80048f8 <_ZSt18__allocate_guardedISaIN4tama27Nokia5110DisplayDataManagerEEESt15__allocated_ptrIT_ERS4_>
	  auto __ptr = __guard.get();
 8004270:	f107 0318 	add.w	r3, r7, #24
 8004274:	4618      	mov	r0, r3
 8004276:	f000 fb67 	bl	8004948 <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEE3getEv>
 800427a:	62f8      	str	r0, [r7, #44]	; 0x2c
	  __traits::construct(__del._M_alloc, __ptr,
 800427c:	f107 0320 	add.w	r3, r7, #32
 8004280:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004282:	4618      	mov	r0, r3
 8004284:	f000 fb6e 	bl	8004964 <_ZNSt16allocator_traitsISaIN4tama27Nokia5110DisplayDataManagerEEE9constructIS1_JEEEvRS2_PT_DpOT0_>
	  __guard = nullptr;
 8004288:	f107 0318 	add.w	r3, r7, #24
 800428c:	2100      	movs	r1, #0
 800428e:	4618      	mov	r0, r3
 8004290:	f000 fb75 	bl	800497e <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEEaSEDn>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 8004294:	f107 0220 	add.w	r2, r7, #32
 8004298:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800429c:	4611      	mov	r1, r2
 800429e:	4618      	mov	r0, r3
 80042a0:	f7ff ffba 	bl	8004218 <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>
 80042a4:	f107 0220 	add.w	r2, r7, #32
 80042a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80042ac:	4611      	mov	r1, r2
 80042ae:	4618      	mov	r0, r3
 80042b0:	f000 fb14 	bl	80048dc <_ZNSaIN4tama27Nokia5110DisplayDataManagerEEC1ERKS1_>
 80042b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80042b8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80042bc:	f107 0014 	add.w	r0, r7, #20
 80042c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042c2:	f000 fb91 	bl	80049e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
 80042c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7ff fccf 	bl	8003c6e <_ZNSaIN4tama27Nokia5110DisplayDataManagerEED1Ev>
 80042d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042d4:	4618      	mov	r0, r3
 80042d6:	f7ff ff92 	bl	80041fe <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	  _M_refcount._M_swap(__count);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	3304      	adds	r3, #4
 80042de:	f107 0214 	add.w	r2, r7, #20
 80042e2:	4611      	mov	r1, r2
 80042e4:	4618      	mov	r0, r3
 80042e6:	f7fc fc3a 	bl	8000b5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  _M_ptr = __ptr;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042ee:	601a      	str	r2, [r3, #0]
	  _M_enable_shared_from_this_with(_M_ptr);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4619      	mov	r1, r3
 80042f6:	68f8      	ldr	r0, [r7, #12]
 80042f8:	f000 fbcd 	bl	8004a96 <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 80042fc:	f107 0314 	add.w	r3, r7, #20
 8004300:	4618      	mov	r0, r3
 8004302:	f7fc fb21 	bl	8000948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 8004306:	f107 0318 	add.w	r3, r7, #24
 800430a:	4618      	mov	r0, r3
 800430c:	f000 fb07 	bl	800491e <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEED1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 8004310:	f107 0320 	add.w	r3, r7, #32
 8004314:	4618      	mov	r0, r3
 8004316:	f7ff ff72 	bl	80041fe <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	}
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	4618      	mov	r0, r3
 800431e:	3730      	adds	r7, #48	; 0x30
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}

08004324 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8004324:	b580      	push	{r7, lr}
 8004326:	b08c      	sub	sp, #48	; 0x30
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	7239      	strb	r1, [r7, #8]
 800432e:	607a      	str	r2, [r7, #4]
	: _M_ptr(), _M_refcount()
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2200      	movs	r2, #0
 8004334:	601a      	str	r2, [r3, #0]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	3304      	adds	r3, #4
 800433a:	4618      	mov	r0, r3
 800433c:	f7fc fbcc 	bl	8000ad8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 8004340:	f107 0320 	add.w	r3, r7, #32
 8004344:	6879      	ldr	r1, [r7, #4]
 8004346:	4618      	mov	r0, r3
 8004348:	f7fd fd75 	bl	8001e36 <_ZNSaIN4tama5SceneEEC1ERKS1_>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 800434c:	f107 0318 	add.w	r3, r7, #24
 8004350:	f107 0220 	add.w	r2, r7, #32
 8004354:	4611      	mov	r1, r2
 8004356:	4618      	mov	r0, r3
 8004358:	f7fd fd7b 	bl	8001e52 <_ZSt18__allocate_guardedISaIN4tama5SceneEEESt15__allocated_ptrIT_ERS4_>
	  auto __ptr = __guard.get();
 800435c:	f107 0318 	add.w	r3, r7, #24
 8004360:	4618      	mov	r0, r3
 8004362:	f7fd fd9e 	bl	8001ea2 <_ZNSt15__allocated_ptrISaIN4tama5SceneEEE3getEv>
 8004366:	62f8      	str	r0, [r7, #44]	; 0x2c
	  __traits::construct(__del._M_alloc, __ptr,
 8004368:	f107 0320 	add.w	r3, r7, #32
 800436c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800436e:	4618      	mov	r0, r3
 8004370:	f000 fb9c 	bl	8004aac <_ZNSt16allocator_traitsISaIN4tama5SceneEEE9constructIS1_JEEEvRS2_PT_DpOT0_>
	  __guard = nullptr;
 8004374:	f107 0318 	add.w	r3, r7, #24
 8004378:	2100      	movs	r1, #0
 800437a:	4618      	mov	r0, r3
 800437c:	f7fd fdb2 	bl	8001ee4 <_ZNSt15__allocated_ptrISaIN4tama5SceneEEEaSEDn>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 8004380:	f107 0220 	add.w	r2, r7, #32
 8004384:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004388:	4611      	mov	r1, r2
 800438a:	4618      	mov	r0, r3
 800438c:	f7fd fbb3 	bl	8001af6 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>
 8004390:	f107 0220 	add.w	r2, r7, #32
 8004394:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004398:	4611      	mov	r1, r2
 800439a:	4618      	mov	r0, r3
 800439c:	f7fd fd4b 	bl	8001e36 <_ZNSaIN4tama5SceneEEC1ERKS1_>
 80043a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80043a4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80043a8:	f107 0014 	add.w	r0, r7, #20
 80043ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80043ae:	f7fd fdce 	bl	8001f4e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama5SceneENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
 80043b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7fd f8fc 	bl	80015b4 <_ZNSaIN4tama5SceneEED1Ev>
 80043bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7fd fb8b 	bl	8001adc <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	  _M_refcount._M_swap(__count);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	3304      	adds	r3, #4
 80043ca:	f107 0214 	add.w	r2, r7, #20
 80043ce:	4611      	mov	r1, r2
 80043d0:	4618      	mov	r0, r3
 80043d2:	f7fc fbc4 	bl	8000b5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  _M_ptr = __ptr;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043da:	601a      	str	r2, [r3, #0]
	  _M_enable_shared_from_this_with(_M_ptr);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4619      	mov	r1, r3
 80043e2:	68f8      	ldr	r0, [r7, #12]
 80043e4:	f7fd fe0a 	bl	8001ffc <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 80043e8:	f107 0314 	add.w	r3, r7, #20
 80043ec:	4618      	mov	r0, r3
 80043ee:	f7fc faab 	bl	8000948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 80043f2:	f107 0318 	add.w	r3, r7, #24
 80043f6:	4618      	mov	r0, r3
 80043f8:	f7fd fd3e 	bl	8001e78 <_ZNSt15__allocated_ptrISaIN4tama5SceneEEED1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 80043fc:	f107 0320 	add.w	r3, r7, #32
 8004400:	4618      	mov	r0, r3
 8004402:	f7fd fb6b 	bl	8001adc <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	}
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	4618      	mov	r0, r3
 800440a:	3730      	adds	r7, #48	; 0x30
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}

08004410 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJRjS7_RPPNS0_10PixelColorEEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8004410:	b5b0      	push	{r4, r5, r7, lr}
 8004412:	b08e      	sub	sp, #56	; 0x38
 8004414:	af02      	add	r7, sp, #8
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	7239      	strb	r1, [r7, #8]
 800441a:	607a      	str	r2, [r7, #4]
 800441c:	603b      	str	r3, [r7, #0]
	: _M_ptr(), _M_refcount()
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2200      	movs	r2, #0
 8004422:	601a      	str	r2, [r3, #0]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	3304      	adds	r3, #4
 8004428:	4618      	mov	r0, r3
 800442a:	f7fc fb55 	bl	8000ad8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 800442e:	f107 0320 	add.w	r3, r7, #32
 8004432:	6879      	ldr	r1, [r7, #4]
 8004434:	4618      	mov	r0, r3
 8004436:	f7fd fdec 	bl	8002012 <_ZNSaIN4tama7TextureEEC1ERKS1_>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 800443a:	f107 0318 	add.w	r3, r7, #24
 800443e:	f107 0220 	add.w	r2, r7, #32
 8004442:	4611      	mov	r1, r2
 8004444:	4618      	mov	r0, r3
 8004446:	f7fd fdf2 	bl	800202e <_ZSt18__allocate_guardedISaIN4tama7TextureEEESt15__allocated_ptrIT_ERS4_>
	  auto __ptr = __guard.get();
 800444a:	f107 0318 	add.w	r3, r7, #24
 800444e:	4618      	mov	r0, r3
 8004450:	f7fd fe15 	bl	800207e <_ZNSt15__allocated_ptrISaIN4tama7TextureEEE3getEv>
 8004454:	62f8      	str	r0, [r7, #44]	; 0x2c
	  __traits::construct(__del._M_alloc, __ptr,
 8004456:	6838      	ldr	r0, [r7, #0]
 8004458:	f7fc feef 	bl	800123a <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 800445c:	4604      	mov	r4, r0
 800445e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004460:	f7fc feeb 	bl	800123a <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 8004464:	4605      	mov	r5, r0
 8004466:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004468:	f7ff fb46 	bl	8003af8 <_ZSt7forwardIRPPN4tama10PixelColorEEOT_RNSt16remove_referenceIS5_E4typeE>
 800446c:	4603      	mov	r3, r0
 800446e:	f107 0020 	add.w	r0, r7, #32
 8004472:	9300      	str	r3, [sp, #0]
 8004474:	462b      	mov	r3, r5
 8004476:	4622      	mov	r2, r4
 8004478:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800447a:	f000 fb24 	bl	8004ac6 <_ZNSt16allocator_traitsISaIN4tama7TextureEEE9constructIS1_JRjS5_RPPNS0_10PixelColorEEEEvRS2_PT_DpOT0_>
	  __guard = nullptr;
 800447e:	f107 0318 	add.w	r3, r7, #24
 8004482:	2100      	movs	r1, #0
 8004484:	4618      	mov	r0, r3
 8004486:	f7fd fe20 	bl	80020ca <_ZNSt15__allocated_ptrISaIN4tama7TextureEEEaSEDn>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 800448a:	f107 0220 	add.w	r2, r7, #32
 800448e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004492:	4611      	mov	r1, r2
 8004494:	4618      	mov	r0, r3
 8004496:	f7fd fbc6 	bl	8001c26 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>
 800449a:	f107 0220 	add.w	r2, r7, #32
 800449e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80044a2:	4611      	mov	r1, r2
 80044a4:	4618      	mov	r0, r3
 80044a6:	f7fd fdb4 	bl	8002012 <_ZNSaIN4tama7TextureEEC1ERKS1_>
 80044aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80044ae:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80044b2:	f107 0014 	add.w	r0, r7, #20
 80044b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80044b8:	f7fd fe3c 	bl	8002134 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama7TextureENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
 80044bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80044c0:	4618      	mov	r0, r3
 80044c2:	f7fd f8c0 	bl	8001646 <_ZNSaIN4tama7TextureEED1Ev>
 80044c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044ca:	4618      	mov	r0, r3
 80044cc:	f7fd fb9e 	bl	8001c0c <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	  _M_refcount._M_swap(__count);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	3304      	adds	r3, #4
 80044d4:	f107 0214 	add.w	r2, r7, #20
 80044d8:	4611      	mov	r1, r2
 80044da:	4618      	mov	r0, r3
 80044dc:	f7fc fb3f 	bl	8000b5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  _M_ptr = __ptr;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044e4:	601a      	str	r2, [r3, #0]
	  _M_enable_shared_from_this_with(_M_ptr);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4619      	mov	r1, r3
 80044ec:	68f8      	ldr	r0, [r7, #12]
 80044ee:	f7fd fe78 	bl	80021e2 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 80044f2:	f107 0314 	add.w	r3, r7, #20
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7fc fa26 	bl	8000948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 80044fc:	f107 0318 	add.w	r3, r7, #24
 8004500:	4618      	mov	r0, r3
 8004502:	f7fd fda7 	bl	8002054 <_ZNSt15__allocated_ptrISaIN4tama7TextureEEED1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 8004506:	f107 0320 	add.w	r3, r7, #32
 800450a:	4618      	mov	r0, r3
 800450c:	f7fd fb7e 	bl	8001c0c <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	}
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	4618      	mov	r0, r3
 8004514:	3730      	adds	r7, #48	; 0x30
 8004516:	46bd      	mov	sp, r7
 8004518:	bdb0      	pop	{r4, r5, r7, pc}

0800451a <_ZNSaIN4tama16Nokia5510DisplayEEC1ERKS1_>:
      allocator(const allocator& __a) throw()
 800451a:	b580      	push	{r7, lr}
 800451c:	b082      	sub	sp, #8
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
 8004522:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8004524:	6839      	ldr	r1, [r7, #0]
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f000 faeb 	bl	8004b02 <_ZN9__gnu_cxx13new_allocatorIN4tama16Nokia5510DisplayEEC1ERKS3_>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4618      	mov	r0, r3
 8004530:	3708      	adds	r7, #8
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}

08004536 <_ZSt18__allocate_guardedISaIN4tama16Nokia5510DisplayEEESt15__allocated_ptrIT_ERS4_>:
    __allocate_guarded(_Alloc& __a)
 8004536:	b580      	push	{r7, lr}
 8004538:	b082      	sub	sp, #8
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
 800453e:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 8004540:	2101      	movs	r1, #1
 8004542:	6838      	ldr	r0, [r7, #0]
 8004544:	f000 fae9 	bl	8004b1a <_ZNSt16allocator_traitsISaIN4tama16Nokia5510DisplayEEE8allocateERS2_j>
 8004548:	4603      	mov	r3, r0
 800454a:	461a      	mov	r2, r3
 800454c:	6839      	ldr	r1, [r7, #0]
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 faf2 	bl	8004b38 <_ZNSt15__allocated_ptrISaIN4tama16Nokia5510DisplayEEEC1ERS2_PS1_>
    }
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	3708      	adds	r7, #8
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}

0800455c <_ZNSt15__allocated_ptrISaIN4tama16Nokia5510DisplayEEED1Ev>:
      ~__allocated_ptr()
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d007      	beq.n	800457c <_ZNSt15__allocated_ptrISaIN4tama16Nokia5510DisplayEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6818      	ldr	r0, [r3, #0]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	2201      	movs	r2, #1
 8004576:	4619      	mov	r1, r3
 8004578:	f000 faf2 	bl	8004b60 <_ZNSt16allocator_traitsISaIN4tama16Nokia5510DisplayEEE10deallocateERS2_PS1_j>
      }
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4618      	mov	r0, r3
 8004580:	3708      	adds	r7, #8
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}

08004586 <_ZNSt15__allocated_ptrISaIN4tama16Nokia5510DisplayEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 8004586:	b580      	push	{r7, lr}
 8004588:	b082      	sub	sp, #8
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	4618      	mov	r0, r3
 8004594:	f000 faf3 	bl	8004b7e <_ZNSt15__allocated_ptrISaIN4tama16Nokia5510DisplayEEE10_S_raw_ptrEPS1_>
 8004598:	4603      	mov	r3, r0
 800459a:	4618      	mov	r0, r3
 800459c:	3708      	adds	r7, #8
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <_ZNSt16allocator_traitsISaIN4tama16Nokia5510DisplayEEE9constructIS1_JRNS0_13DisplayConfigEEEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b084      	sub	sp, #16
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	60f8      	str	r0, [r7, #12]
 80045aa:	60b9      	str	r1, [r7, #8]
 80045ac:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f7ff f994 	bl	80038dc <_ZSt7forwardIRN4tama13DisplayConfigEEOT_RNSt16remove_referenceIS3_E4typeE>
 80045b4:	4603      	mov	r3, r0
 80045b6:	461a      	mov	r2, r3
 80045b8:	68b9      	ldr	r1, [r7, #8]
 80045ba:	68f8      	ldr	r0, [r7, #12]
 80045bc:	f000 faea 	bl	8004b94 <_ZN9__gnu_cxx13new_allocatorIN4tama16Nokia5510DisplayEE9constructIS2_JRNS1_13DisplayConfigEEEEvPT_DpOT0_>
 80045c0:	bf00      	nop
 80045c2:	3710      	adds	r7, #16
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <_ZNSt15__allocated_ptrISaIN4tama16Nokia5510DisplayEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	605a      	str	r2, [r3, #4]
	return *this;
 80045d8:	687b      	ldr	r3, [r7, #4]
      }
 80045da:	4618      	mov	r0, r3
 80045dc:	370c      	adds	r7, #12
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr

080045e6 <_ZSt4moveIRNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 80045e6:	b480      	push	{r7}
 80045e8:	b083      	sub	sp, #12
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4618      	mov	r0, r3
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>:
        struct _Deleter
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b082      	sub	sp, #8
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	683a      	ldr	r2, [r7, #0]
 800460a:	4611      	mov	r1, r2
 800460c:	4618      	mov	r0, r3
 800460e:	f7ff ff84 	bl	800451a <_ZNSaIN4tama16Nokia5510DisplayEEC1ERKS1_>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4618      	mov	r0, r3
 8004616:	3708      	adds	r7, #8
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <_ZSt4moveIRSaIN4tama16Nokia5510DisplayEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4618      	mov	r0, r3
 8004628:	370c      	adds	r7, #12
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr

08004632 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama16Nokia5510DisplayENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
 8004632:	b5b0      	push	{r4, r5, r7, lr}
 8004634:	b08a      	sub	sp, #40	; 0x28
 8004636:	af00      	add	r7, sp, #0
 8004638:	60f8      	str	r0, [r7, #12]
 800463a:	60b9      	str	r1, [r7, #8]
 800463c:	607a      	str	r2, [r7, #4]
 800463e:	603b      	str	r3, [r7, #0]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2200      	movs	r2, #0
 8004644:	601a      	str	r2, [r3, #0]
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 8004646:	f107 031c 	add.w	r3, r7, #28
 800464a:	6839      	ldr	r1, [r7, #0]
 800464c:	4618      	mov	r0, r3
 800464e:	f000 fabb 	bl	8004bc8 <_ZNSaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	      auto __guard = std::__allocate_guarded(__a2);
 8004652:	f107 0314 	add.w	r3, r7, #20
 8004656:	f107 021c 	add.w	r2, r7, #28
 800465a:	4611      	mov	r1, r2
 800465c:	4618      	mov	r0, r3
 800465e:	f000 facc 	bl	8004bfa <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>
	      _Sp_cd_type* __mem = __guard.get();
 8004662:	f107 0314 	add.w	r3, r7, #20
 8004666:	4618      	mov	r0, r3
 8004668:	f000 faef 	bl	8004c4a <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>
 800466c:	6278      	str	r0, [r7, #36]	; 0x24
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f7ff ffb9 	bl	80045e6 <_ZSt4moveIRNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8004674:	4602      	mov	r2, r0
 8004676:	f107 0320 	add.w	r3, r7, #32
 800467a:	4611      	mov	r1, r2
 800467c:	4618      	mov	r0, r3
 800467e:	f7ff ffbd 	bl	80045fc <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 8004682:	f107 0420 	add.w	r4, r7, #32
 8004686:	6838      	ldr	r0, [r7, #0]
 8004688:	f7ff ffc8 	bl	800461c <_ZSt4moveIRSaIN4tama16Nokia5510DisplayEEEONSt16remove_referenceIT_E4typeEOS5_>
 800468c:	4605      	mov	r5, r0
 800468e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004690:	4619      	mov	r1, r3
 8004692:	2014      	movs	r0, #20
 8004694:	f7fc faa2 	bl	8000bdc <_ZnwjPv>
 8004698:	2800      	cmp	r0, #0
 800469a:	d004      	beq.n	80046a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama16Nokia5510DisplayENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x74>
 800469c:	462b      	mov	r3, r5
 800469e:	4622      	mov	r2, r4
 80046a0:	68b9      	ldr	r1, [r7, #8]
 80046a2:	f000 fb0b 	bl	8004cbc <_ZNSt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>
 80046a6:	f107 0320 	add.w	r3, r7, #32
 80046aa:	4618      	mov	r0, r3
 80046ac:	f7ff fc73 	bl	8003f96 <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	      _M_pi = __mem;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046b4:	601a      	str	r2, [r3, #0]
	      __guard = nullptr;
 80046b6:	f107 0314 	add.w	r3, r7, #20
 80046ba:	2100      	movs	r1, #0
 80046bc:	4618      	mov	r0, r3
 80046be:	f000 fb2b 	bl	8004d18 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>
	      auto __guard = std::__allocate_guarded(__a2);
 80046c2:	f107 0314 	add.w	r3, r7, #20
 80046c6:	4618      	mov	r0, r3
 80046c8:	f000 faaa 	bl	8004c20 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 80046cc:	f107 031c 	add.w	r3, r7, #28
 80046d0:	4618      	mov	r0, r3
 80046d2:	f000 fa86 	bl	8004be2 <_ZNSaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
	}
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	4618      	mov	r0, r3
 80046da:	3728      	adds	r7, #40	; 0x28
 80046dc:	46bd      	mov	sp, r7
 80046de:	bdb0      	pop	{r4, r5, r7, pc}

080046e0 <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
	{ }
 80046ea:	bf00      	nop
 80046ec:	370c      	adds	r7, #12
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr

080046f6 <_ZNSaIN4tama6SpriteEEC1ERKS1_>:
      allocator(const allocator& __a) throw()
 80046f6:	b580      	push	{r7, lr}
 80046f8:	b082      	sub	sp, #8
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	6078      	str	r0, [r7, #4]
 80046fe:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8004700:	6839      	ldr	r1, [r7, #0]
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 fb37 	bl	8004d76 <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEEC1ERKS3_>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4618      	mov	r0, r3
 800470c:	3708      	adds	r7, #8
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}

08004712 <_ZSt18__allocate_guardedISaIN4tama6SpriteEEESt15__allocated_ptrIT_ERS4_>:
    __allocate_guarded(_Alloc& __a)
 8004712:	b580      	push	{r7, lr}
 8004714:	b082      	sub	sp, #8
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
 800471a:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 800471c:	2101      	movs	r1, #1
 800471e:	6838      	ldr	r0, [r7, #0]
 8004720:	f000 fb35 	bl	8004d8e <_ZNSt16allocator_traitsISaIN4tama6SpriteEEE8allocateERS2_j>
 8004724:	4603      	mov	r3, r0
 8004726:	461a      	mov	r2, r3
 8004728:	6839      	ldr	r1, [r7, #0]
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 fb3e 	bl	8004dac <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEEC1ERS2_PS1_>
    }
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	3708      	adds	r7, #8
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEED1Ev>:
      ~__allocated_ptr()
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d007      	beq.n	8004758 <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6818      	ldr	r0, [r3, #0]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	2201      	movs	r2, #1
 8004752:	4619      	mov	r1, r3
 8004754:	f000 fb3e 	bl	8004dd4 <_ZNSt16allocator_traitsISaIN4tama6SpriteEEE10deallocateERS2_PS1_j>
      }
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4618      	mov	r0, r3
 800475c:	3708      	adds	r7, #8
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}

08004762 <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 8004762:	b580      	push	{r7, lr}
 8004764:	b082      	sub	sp, #8
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	4618      	mov	r0, r3
 8004770:	f000 fb3f 	bl	8004df2 <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEE10_S_raw_ptrEPS1_>
 8004774:	4603      	mov	r3, r0
 8004776:	4618      	mov	r0, r3
 8004778:	3708      	adds	r7, #8
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <_ZNSt16allocator_traitsISaIN4tama6SpriteEEE9constructIS1_JSt10shared_ptrINS0_7TextureEENS0_5Vec2dEEEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 800477e:	b590      	push	{r4, r7, lr}
 8004780:	b085      	sub	sp, #20
 8004782:	af00      	add	r7, sp, #0
 8004784:	60f8      	str	r0, [r7, #12]
 8004786:	60b9      	str	r1, [r7, #8]
 8004788:	607a      	str	r2, [r7, #4]
 800478a:	603b      	str	r3, [r7, #0]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f7ff f8eb 	bl	8003968 <_ZSt7forwardISt10shared_ptrIN4tama7TextureEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004792:	4604      	mov	r4, r0
 8004794:	6838      	ldr	r0, [r7, #0]
 8004796:	f7ff f8f2 	bl	800397e <_ZSt7forwardIN4tama5Vec2dEEOT_RNSt16remove_referenceIS2_E4typeE>
 800479a:	4603      	mov	r3, r0
 800479c:	4622      	mov	r2, r4
 800479e:	68b9      	ldr	r1, [r7, #8]
 80047a0:	68f8      	ldr	r0, [r7, #12]
 80047a2:	f000 fb31 	bl	8004e08 <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEE9constructIS2_JSt10shared_ptrINS1_7TextureEENS1_5Vec2dEEEEvPT_DpOT0_>
 80047a6:	bf00      	nop
 80047a8:	3714      	adds	r7, #20
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd90      	pop	{r4, r7, pc}

080047ae <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 80047ae:	b480      	push	{r7}
 80047b0:	b083      	sub	sp, #12
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
 80047b6:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	605a      	str	r2, [r3, #4]
	return *this;
 80047be:	687b      	ldr	r3, [r7, #4]
      }
 80047c0:	4618      	mov	r0, r3
 80047c2:	370c      	adds	r7, #12
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <_ZSt4moveIRNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4618      	mov	r0, r3
 80047d8:	370c      	adds	r7, #12
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr

080047e2 <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>:
        struct _Deleter
 80047e2:	b580      	push	{r7, lr}
 80047e4:	b082      	sub	sp, #8
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
 80047ea:	6039      	str	r1, [r7, #0]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	683a      	ldr	r2, [r7, #0]
 80047f0:	4611      	mov	r1, r2
 80047f2:	4618      	mov	r0, r3
 80047f4:	f7ff ff7f 	bl	80046f6 <_ZNSaIN4tama6SpriteEEC1ERKS1_>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4618      	mov	r0, r3
 80047fc:	3708      	adds	r7, #8
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}

08004802 <_ZSt4moveIRSaIN4tama6SpriteEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8004802:	b480      	push	{r7}
 8004804:	b083      	sub	sp, #12
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4618      	mov	r0, r3
 800480e:	370c      	adds	r7, #12
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama6SpriteENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
 8004818:	b5b0      	push	{r4, r5, r7, lr}
 800481a:	b08a      	sub	sp, #40	; 0x28
 800481c:	af00      	add	r7, sp, #0
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	60b9      	str	r1, [r7, #8]
 8004822:	607a      	str	r2, [r7, #4]
 8004824:	603b      	str	r3, [r7, #0]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2200      	movs	r2, #0
 800482a:	601a      	str	r2, [r3, #0]
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 800482c:	f107 031c 	add.w	r3, r7, #28
 8004830:	6839      	ldr	r1, [r7, #0]
 8004832:	4618      	mov	r0, r3
 8004834:	f000 fb08 	bl	8004e48 <_ZNSaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	      auto __guard = std::__allocate_guarded(__a2);
 8004838:	f107 0314 	add.w	r3, r7, #20
 800483c:	f107 021c 	add.w	r2, r7, #28
 8004840:	4611      	mov	r1, r2
 8004842:	4618      	mov	r0, r3
 8004844:	f000 fb19 	bl	8004e7a <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>
	      _Sp_cd_type* __mem = __guard.get();
 8004848:	f107 0314 	add.w	r3, r7, #20
 800484c:	4618      	mov	r0, r3
 800484e:	f000 fb3c 	bl	8004eca <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>
 8004852:	6278      	str	r0, [r7, #36]	; 0x24
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f7ff ffb9 	bl	80047cc <_ZSt4moveIRNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800485a:	4602      	mov	r2, r0
 800485c:	f107 0320 	add.w	r3, r7, #32
 8004860:	4611      	mov	r1, r2
 8004862:	4618      	mov	r0, r3
 8004864:	f7ff ffbd 	bl	80047e2 <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 8004868:	f107 0420 	add.w	r4, r7, #32
 800486c:	6838      	ldr	r0, [r7, #0]
 800486e:	f7ff ffc8 	bl	8004802 <_ZSt4moveIRSaIN4tama6SpriteEEEONSt16remove_referenceIT_E4typeEOS5_>
 8004872:	4605      	mov	r5, r0
 8004874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004876:	4619      	mov	r1, r3
 8004878:	2014      	movs	r0, #20
 800487a:	f7fc f9af 	bl	8000bdc <_ZnwjPv>
 800487e:	2800      	cmp	r0, #0
 8004880:	d004      	beq.n	800488c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama6SpriteENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x74>
 8004882:	462b      	mov	r3, r5
 8004884:	4622      	mov	r2, r4
 8004886:	68b9      	ldr	r1, [r7, #8]
 8004888:	f000 fb58 	bl	8004f3c <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>
 800488c:	f107 0320 	add.w	r3, r7, #32
 8004890:	4618      	mov	r0, r3
 8004892:	f7ff fc18 	bl	80040c6 <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	      _M_pi = __mem;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800489a:	601a      	str	r2, [r3, #0]
	      __guard = nullptr;
 800489c:	f107 0314 	add.w	r3, r7, #20
 80048a0:	2100      	movs	r1, #0
 80048a2:	4618      	mov	r0, r3
 80048a4:	f000 fb78 	bl	8004f98 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>
	      auto __guard = std::__allocate_guarded(__a2);
 80048a8:	f107 0314 	add.w	r3, r7, #20
 80048ac:	4618      	mov	r0, r3
 80048ae:	f000 faf7 	bl	8004ea0 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 80048b2:	f107 031c 	add.w	r3, r7, #28
 80048b6:	4618      	mov	r0, r3
 80048b8:	f000 fad3 	bl	8004e62 <_ZNSaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
	}
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	4618      	mov	r0, r3
 80048c0:	3728      	adds	r7, #40	; 0x28
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bdb0      	pop	{r4, r5, r7, pc}

080048c6 <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 80048c6:	b480      	push	{r7}
 80048c8:	b083      	sub	sp, #12
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
 80048ce:	6039      	str	r1, [r7, #0]
	{ }
 80048d0:	bf00      	nop
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <_ZNSaIN4tama27Nokia5110DisplayDataManagerEEC1ERKS1_>:
      allocator(const allocator& __a) throw()
 80048dc:	b580      	push	{r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80048e6:	6839      	ldr	r1, [r7, #0]
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f000 fb84 	bl	8004ff6 <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEEC1ERKS3_>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4618      	mov	r0, r3
 80048f2:	3708      	adds	r7, #8
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <_ZSt18__allocate_guardedISaIN4tama27Nokia5110DisplayDataManagerEEESt15__allocated_ptrIT_ERS4_>:
    __allocate_guarded(_Alloc& __a)
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 8004902:	2101      	movs	r1, #1
 8004904:	6838      	ldr	r0, [r7, #0]
 8004906:	f000 fb82 	bl	800500e <_ZNSt16allocator_traitsISaIN4tama27Nokia5110DisplayDataManagerEEE8allocateERS2_j>
 800490a:	4603      	mov	r3, r0
 800490c:	461a      	mov	r2, r3
 800490e:	6839      	ldr	r1, [r7, #0]
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f000 fb8b 	bl	800502c <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEEC1ERS2_PS1_>
    }
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	3708      	adds	r7, #8
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}

0800491e <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEED1Ev>:
      ~__allocated_ptr()
 800491e:	b580      	push	{r7, lr}
 8004920:	b082      	sub	sp, #8
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d007      	beq.n	800493e <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6818      	ldr	r0, [r3, #0]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	4619      	mov	r1, r3
 800493a:	f000 fb8b 	bl	8005054 <_ZNSt16allocator_traitsISaIN4tama27Nokia5110DisplayDataManagerEEE10deallocateERS2_PS1_j>
      }
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4618      	mov	r0, r3
 8004942:	3708      	adds	r7, #8
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 8004948:	b580      	push	{r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	4618      	mov	r0, r3
 8004956:	f000 fb8c 	bl	8005072 <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEE10_S_raw_ptrEPS1_>
 800495a:	4603      	mov	r3, r0
 800495c:	4618      	mov	r0, r3
 800495e:	3708      	adds	r7, #8
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}

08004964 <_ZNSt16allocator_traitsISaIN4tama27Nokia5110DisplayDataManagerEEE9constructIS1_JEEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8004964:	b580      	push	{r7, lr}
 8004966:	b082      	sub	sp, #8
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800496e:	6839      	ldr	r1, [r7, #0]
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f000 fbc3 	bl	80050fc <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEE9constructIS2_JEEEvPT_DpOT0_>
 8004976:	bf00      	nop
 8004978:	3708      	adds	r7, #8
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}

0800497e <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 800497e:	b480      	push	{r7}
 8004980:	b083      	sub	sp, #12
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
 8004986:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	605a      	str	r2, [r3, #4]
	return *this;
 800498e:	687b      	ldr	r3, [r7, #4]
      }
 8004990:	4618      	mov	r0, r3
 8004992:	370c      	adds	r7, #12
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr

0800499c <_ZSt4moveIRNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4618      	mov	r0, r3
 80049a8:	370c      	adds	r7, #12
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr

080049b2 <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>:
        struct _Deleter
 80049b2:	b580      	push	{r7, lr}
 80049b4:	b082      	sub	sp, #8
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
 80049ba:	6039      	str	r1, [r7, #0]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	683a      	ldr	r2, [r7, #0]
 80049c0:	4611      	mov	r1, r2
 80049c2:	4618      	mov	r0, r3
 80049c4:	f7ff ff8a 	bl	80048dc <_ZNSaIN4tama27Nokia5110DisplayDataManagerEEC1ERKS1_>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4618      	mov	r0, r3
 80049cc:	3708      	adds	r7, #8
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}

080049d2 <_ZSt4moveIRSaIN4tama27Nokia5110DisplayDataManagerEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80049d2:	b480      	push	{r7}
 80049d4:	b083      	sub	sp, #12
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4618      	mov	r0, r3
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr

080049e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
 80049e8:	b5b0      	push	{r4, r5, r7, lr}
 80049ea:	b08a      	sub	sp, #40	; 0x28
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	607a      	str	r2, [r7, #4]
 80049f4:	603b      	str	r3, [r7, #0]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2200      	movs	r2, #0
 80049fa:	601a      	str	r2, [r3, #0]
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 80049fc:	f107 031c 	add.w	r3, r7, #28
 8004a00:	6839      	ldr	r1, [r7, #0]
 8004a02:	4618      	mov	r0, r3
 8004a04:	f000 fb96 	bl	8005134 <_ZNSaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	      auto __guard = std::__allocate_guarded(__a2);
 8004a08:	f107 0314 	add.w	r3, r7, #20
 8004a0c:	f107 021c 	add.w	r2, r7, #28
 8004a10:	4611      	mov	r1, r2
 8004a12:	4618      	mov	r0, r3
 8004a14:	f000 fba7 	bl	8005166 <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>
	      _Sp_cd_type* __mem = __guard.get();
 8004a18:	f107 0314 	add.w	r3, r7, #20
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f000 fbca 	bl	80051b6 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>
 8004a22:	6278      	str	r0, [r7, #36]	; 0x24
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f7ff ffb9 	bl	800499c <_ZSt4moveIRNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	f107 0320 	add.w	r3, r7, #32
 8004a30:	4611      	mov	r1, r2
 8004a32:	4618      	mov	r0, r3
 8004a34:	f7ff ffbd 	bl	80049b2 <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 8004a38:	f107 0420 	add.w	r4, r7, #32
 8004a3c:	6838      	ldr	r0, [r7, #0]
 8004a3e:	f7ff ffc8 	bl	80049d2 <_ZSt4moveIRSaIN4tama27Nokia5110DisplayDataManagerEEEONSt16remove_referenceIT_E4typeEOS5_>
 8004a42:	4605      	mov	r5, r0
 8004a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a46:	4619      	mov	r1, r3
 8004a48:	2014      	movs	r0, #20
 8004a4a:	f7fc f8c7 	bl	8000bdc <_ZnwjPv>
 8004a4e:	2800      	cmp	r0, #0
 8004a50:	d004      	beq.n	8004a5c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x74>
 8004a52:	462b      	mov	r3, r5
 8004a54:	4622      	mov	r2, r4
 8004a56:	68b9      	ldr	r1, [r7, #8]
 8004a58:	f000 fbe6 	bl	8005228 <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>
 8004a5c:	f107 0320 	add.w	r3, r7, #32
 8004a60:	4618      	mov	r0, r3
 8004a62:	f7ff fbcc 	bl	80041fe <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	      _M_pi = __mem;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a6a:	601a      	str	r2, [r3, #0]
	      __guard = nullptr;
 8004a6c:	f107 0314 	add.w	r3, r7, #20
 8004a70:	2100      	movs	r1, #0
 8004a72:	4618      	mov	r0, r3
 8004a74:	f000 fc06 	bl	8005284 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>
	      auto __guard = std::__allocate_guarded(__a2);
 8004a78:	f107 0314 	add.w	r3, r7, #20
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f000 fb85 	bl	800518c <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 8004a82:	f107 031c 	add.w	r3, r7, #28
 8004a86:	4618      	mov	r0, r3
 8004a88:	f000 fb61 	bl	800514e <_ZNSaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
	}
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3728      	adds	r7, #40	; 0x28
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bdb0      	pop	{r4, r5, r7, pc}

08004a96 <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 8004a96:	b480      	push	{r7}
 8004a98:	b083      	sub	sp, #12
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
 8004a9e:	6039      	str	r1, [r7, #0]
	{ }
 8004aa0:	bf00      	nop
 8004aa2:	370c      	adds	r7, #12
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <_ZNSt16allocator_traitsISaIN4tama5SceneEEE9constructIS1_JEEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b082      	sub	sp, #8
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8004ab6:	6839      	ldr	r1, [r7, #0]
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f000 fc12 	bl	80052e2 <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEE9constructIS2_JEEEvPT_DpOT0_>
 8004abe:	bf00      	nop
 8004ac0:	3708      	adds	r7, #8
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}

08004ac6 <_ZNSt16allocator_traitsISaIN4tama7TextureEEE9constructIS1_JRjS5_RPPNS0_10PixelColorEEEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8004ac6:	b5b0      	push	{r4, r5, r7, lr}
 8004ac8:	b086      	sub	sp, #24
 8004aca:	af02      	add	r7, sp, #8
 8004acc:	60f8      	str	r0, [r7, #12]
 8004ace:	60b9      	str	r1, [r7, #8]
 8004ad0:	607a      	str	r2, [r7, #4]
 8004ad2:	603b      	str	r3, [r7, #0]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f7fc fbb0 	bl	800123a <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 8004ada:	4604      	mov	r4, r0
 8004adc:	6838      	ldr	r0, [r7, #0]
 8004ade:	f7fc fbac 	bl	800123a <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 8004ae2:	4605      	mov	r5, r0
 8004ae4:	6a38      	ldr	r0, [r7, #32]
 8004ae6:	f7ff f807 	bl	8003af8 <_ZSt7forwardIRPPN4tama10PixelColorEEOT_RNSt16remove_referenceIS5_E4typeE>
 8004aea:	4603      	mov	r3, r0
 8004aec:	9300      	str	r3, [sp, #0]
 8004aee:	462b      	mov	r3, r5
 8004af0:	4622      	mov	r2, r4
 8004af2:	68b9      	ldr	r1, [r7, #8]
 8004af4:	68f8      	ldr	r0, [r7, #12]
 8004af6:	f000 fc08 	bl	800530a <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE9constructIS2_JRjS5_RPPNS1_10PixelColorEEEEvPT_DpOT0_>
 8004afa:	bf00      	nop
 8004afc:	3710      	adds	r7, #16
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bdb0      	pop	{r4, r5, r7, pc}

08004b02 <_ZN9__gnu_cxx13new_allocatorIN4tama16Nokia5510DisplayEEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8004b02:	b480      	push	{r7}
 8004b04:	b083      	sub	sp, #12
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
 8004b0a:	6039      	str	r1, [r7, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4618      	mov	r0, r3
 8004b10:	370c      	adds	r7, #12
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr

08004b1a <_ZNSt16allocator_traitsISaIN4tama16Nokia5510DisplayEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8004b1a:	b580      	push	{r7, lr}
 8004b1c:	b082      	sub	sp, #8
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
 8004b22:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8004b24:	2200      	movs	r2, #0
 8004b26:	6839      	ldr	r1, [r7, #0]
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f000 fc14 	bl	8005356 <_ZN9__gnu_cxx13new_allocatorIN4tama16Nokia5510DisplayEE8allocateEjPKv>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	4618      	mov	r0, r3
 8004b32:	3708      	adds	r7, #8
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <_ZNSt15__allocated_ptrISaIN4tama16Nokia5510DisplayEEEC1ERS2_PS1_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8004b44:	68b8      	ldr	r0, [r7, #8]
 8004b46:	f000 fc27 	bl	8005398 <_ZSt11__addressofISaIN4tama16Nokia5510DisplayEEEPT_RS3_>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	601a      	str	r2, [r3, #0]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	605a      	str	r2, [r3, #4]
      { }
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3710      	adds	r7, #16
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <_ZNSt16allocator_traitsISaIN4tama16Nokia5510DisplayEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	68b9      	ldr	r1, [r7, #8]
 8004b70:	68f8      	ldr	r0, [r7, #12]
 8004b72:	f000 fc1c 	bl	80053ae <_ZN9__gnu_cxx13new_allocatorIN4tama16Nokia5510DisplayEE10deallocateEPS2_j>
 8004b76:	bf00      	nop
 8004b78:	3710      	adds	r7, #16
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}

08004b7e <_ZNSt15__allocated_ptrISaIN4tama16Nokia5510DisplayEEE10_S_raw_ptrEPS1_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 8004b7e:	b480      	push	{r7}
 8004b80:	b083      	sub	sp, #12
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	6078      	str	r0, [r7, #4]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4618      	mov	r0, r3
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <_ZN9__gnu_cxx13new_allocatorIN4tama16Nokia5510DisplayEE9constructIS2_JRNS1_13DisplayConfigEEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8004b94:	b590      	push	{r4, r7, lr}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f7fe fe9b 	bl	80038dc <_ZSt7forwardIRN4tama13DisplayConfigEEOT_RNSt16remove_referenceIS3_E4typeE>
 8004ba6:	4604      	mov	r4, r0
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	4619      	mov	r1, r3
 8004bac:	2030      	movs	r0, #48	; 0x30
 8004bae:	f7fc f815 	bl	8000bdc <_ZnwjPv>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d003      	beq.n	8004bc0 <_ZN9__gnu_cxx13new_allocatorIN4tama16Nokia5510DisplayEE9constructIS2_JRNS1_13DisplayConfigEEEEvPT_DpOT0_+0x2c>
 8004bb8:	4621      	mov	r1, r4
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f001 f982 	bl	8005ec4 <_ZN4tama16Nokia5510DisplayC1ERNS_13DisplayConfigE>
 8004bc0:	bf00      	nop
 8004bc2:	3714      	adds	r7, #20
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd90      	pop	{r4, r7, pc}

08004bc8 <_ZNSaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) throw() { }
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b082      	sub	sp, #8
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 fbf8 	bl	80053c8 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3708      	adds	r7, #8
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}

08004be2 <_ZNSaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>:
      ~allocator() throw() { }
 8004be2:	b580      	push	{r7, lr}
 8004be4:	b082      	sub	sp, #8
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f000 fbf7 	bl	80053de <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3708      	adds	r7, #8
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}

08004bfa <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>:
    __allocate_guarded(_Alloc& __a)
 8004bfa:	b580      	push	{r7, lr}
 8004bfc:	b082      	sub	sp, #8
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
 8004c02:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 8004c04:	2101      	movs	r1, #1
 8004c06:	6838      	ldr	r0, [r7, #0]
 8004c08:	f000 fbf4 	bl	80053f4 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	461a      	mov	r2, r3
 8004c10:	6839      	ldr	r1, [r7, #0]
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 fbfd 	bl	8005412 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
    }
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	3708      	adds	r7, #8
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>:
      ~__allocated_ptr()
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b082      	sub	sp, #8
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d007      	beq.n	8004c40 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6818      	ldr	r0, [r3, #0]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	2201      	movs	r2, #1
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	f000 fbfd 	bl	800543a <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>
      }
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4618      	mov	r0, r3
 8004c44:	3708      	adds	r7, #8
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}

08004c4a <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 8004c4a:	b580      	push	{r7, lr}
 8004c4c:	b082      	sub	sp, #8
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	4618      	mov	r0, r3
 8004c58:	f000 fbfe 	bl	8005458 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3708      	adds	r7, #8
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}

08004c66 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, false>
 8004c66:	b580      	push	{r7, lr}
 8004c68:	b082      	sub	sp, #8
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	6078      	str	r0, [r7, #4]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4618      	mov	r0, r3
 8004c72:	f7ff f990 	bl	8003f96 <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3708      	adds	r7, #8
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama16Nokia5510DisplayEELb1EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f7fe ff75 	bl	8003b78 <_ZNSaIN4tama16Nokia5510DisplayEED1Ev>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4618      	mov	r0, r3
 8004c92:	3708      	adds	r7, #8
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <_ZNSt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>:
      class _Impl : _Sp_ebo_helper<0, _Deleter>, _Sp_ebo_helper<1, _Alloc>
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f7ff ffeb 	bl	8004c80 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama16Nokia5510DisplayEELb1EED1Ev>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4618      	mov	r0, r3
 8004cae:	f7ff ffda 	bl	8004c66 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3708      	adds	r7, #8
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <_ZNSt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 8004cbc:	b590      	push	{r4, r7, lr}
 8004cbe:	b087      	sub	sp, #28
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	607a      	str	r2, [r7, #4]
 8004cc8:	603b      	str	r3, [r7, #0]
      : _M_impl(__p, std::move(__d), __a) { }
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f7fd fec9 	bl	8002a64 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8004cd2:	4a10      	ldr	r2, [pc, #64]	; (8004d14 <_ZNSt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_+0x58>)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	601a      	str	r2, [r3, #0]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f103 040c 	add.w	r4, r3, #12
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f7ff fc81 	bl	80045e6 <_ZSt4moveIRNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	f107 0314 	add.w	r3, r7, #20
 8004cea:	4611      	mov	r1, r2
 8004cec:	4618      	mov	r0, r3
 8004cee:	f7ff fc85 	bl	80045fc <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 8004cf2:	f107 0214 	add.w	r2, r7, #20
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	68b9      	ldr	r1, [r7, #8]
 8004cfa:	4620      	mov	r0, r4
 8004cfc:	f000 fbb7 	bl	800546e <_ZNSt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>
 8004d00:	f107 0314 	add.w	r3, r7, #20
 8004d04:	4618      	mov	r0, r3
 8004d06:	f7ff f946 	bl	8003f96 <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	371c      	adds	r7, #28
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd90      	pop	{r4, r7, pc}
 8004d14:	0800de04 	.word	0x0800de04

08004d18 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	605a      	str	r2, [r3, #4]
	return *this;
 8004d28:	687b      	ldr	r3, [r7, #4]
      }
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	370c      	adds	r7, #12
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr

08004d36 <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>:
          void operator()(typename _Alloc::value_type* __ptr)
 8004d36:	b590      	push	{r4, r7, lr}
 8004d38:	b085      	sub	sp, #20
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	6078      	str	r0, [r7, #4]
 8004d3e:	6039      	str	r1, [r7, #0]
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 8004d40:	6879      	ldr	r1, [r7, #4]
 8004d42:	f107 0308 	add.w	r3, r7, #8
 8004d46:	683a      	ldr	r2, [r7, #0]
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f7ff fef5 	bl	8004b38 <_ZNSt15__allocated_ptrISaIN4tama16Nokia5510DisplayEEEC1ERS2_PS1_>
	    allocator_traits<_Alloc>::destroy(_M_alloc, __guard.get());
 8004d4e:	687c      	ldr	r4, [r7, #4]
 8004d50:	f107 0308 	add.w	r3, r7, #8
 8004d54:	4618      	mov	r0, r3
 8004d56:	f7ff fc16 	bl	8004586 <_ZNSt15__allocated_ptrISaIN4tama16Nokia5510DisplayEEE3getEv>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	4620      	mov	r0, r4
 8004d60:	f000 fba3 	bl	80054aa <_ZNSt16allocator_traitsISaIN4tama16Nokia5510DisplayEEE7destroyIS1_EEvRS2_PT_>
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 8004d64:	f107 0308 	add.w	r3, r7, #8
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f7ff fbf7 	bl	800455c <_ZNSt15__allocated_ptrISaIN4tama16Nokia5510DisplayEEED1Ev>
          }
 8004d6e:	bf00      	nop
 8004d70:	3714      	adds	r7, #20
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd90      	pop	{r4, r7, pc}

08004d76 <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8004d76:	b480      	push	{r7}
 8004d78:	b083      	sub	sp, #12
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
 8004d7e:	6039      	str	r1, [r7, #0]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4618      	mov	r0, r3
 8004d84:	370c      	adds	r7, #12
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr

08004d8e <_ZNSt16allocator_traitsISaIN4tama6SpriteEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8004d8e:	b580      	push	{r7, lr}
 8004d90:	b082      	sub	sp, #8
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
 8004d96:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8004d98:	2200      	movs	r2, #0
 8004d9a:	6839      	ldr	r1, [r7, #0]
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f000 fb91 	bl	80054c4 <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEE8allocateEjPKv>
 8004da2:	4603      	mov	r3, r0
 8004da4:	4618      	mov	r0, r3
 8004da6:	3708      	adds	r7, #8
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEEC1ERS2_PS1_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8004db8:	68b8      	ldr	r0, [r7, #8]
 8004dba:	f000 fba1 	bl	8005500 <_ZSt11__addressofISaIN4tama6SpriteEEEPT_RS3_>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	601a      	str	r2, [r3, #0]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	605a      	str	r2, [r3, #4]
      { }
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3710      	adds	r7, #16
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <_ZNSt16allocator_traitsISaIN4tama6SpriteEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	68b9      	ldr	r1, [r7, #8]
 8004de4:	68f8      	ldr	r0, [r7, #12]
 8004de6:	f000 fb96 	bl	8005516 <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEE10deallocateEPS2_j>
 8004dea:	bf00      	nop
 8004dec:	3710      	adds	r7, #16
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}

08004df2 <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEE10_S_raw_ptrEPS1_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 8004df2:	b480      	push	{r7}
 8004df4:	b083      	sub	sp, #12
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr

08004e08 <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEE9constructIS2_JSt10shared_ptrINS1_7TextureEENS1_5Vec2dEEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8004e08:	b5b0      	push	{r4, r5, r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	607a      	str	r2, [r7, #4]
 8004e14:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f7fe fda6 	bl	8003968 <_ZSt7forwardISt10shared_ptrIN4tama7TextureEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004e1c:	4604      	mov	r4, r0
 8004e1e:	6838      	ldr	r0, [r7, #0]
 8004e20:	f7fe fdad 	bl	800397e <_ZSt7forwardIN4tama5Vec2dEEOT_RNSt16remove_referenceIS2_E4typeE>
 8004e24:	4605      	mov	r5, r0
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	4619      	mov	r1, r3
 8004e2a:	2020      	movs	r0, #32
 8004e2c:	f7fb fed6 	bl	8000bdc <_ZnwjPv>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d004      	beq.n	8004e40 <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEE9constructIS2_JSt10shared_ptrINS1_7TextureEENS1_5Vec2dEEEEvPT_DpOT0_+0x38>
 8004e36:	462a      	mov	r2, r5
 8004e38:	4621      	mov	r1, r4
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f7fb fd22 	bl	8000884 <_ZN4tama6SpriteC1ERKSt10shared_ptrINS_7TextureEERKNS_5Vec2dE>
 8004e40:	bf00      	nop
 8004e42:	3710      	adds	r7, #16
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bdb0      	pop	{r4, r5, r7, pc}

08004e48 <_ZNSaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) throw() { }
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 fb6c 	bl	8005530 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3708      	adds	r7, #8
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}

08004e62 <_ZNSaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>:
      ~allocator() throw() { }
 8004e62:	b580      	push	{r7, lr}
 8004e64:	b082      	sub	sp, #8
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 fb6b 	bl	8005546 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	4618      	mov	r0, r3
 8004e74:	3708      	adds	r7, #8
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}

08004e7a <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>:
    __allocate_guarded(_Alloc& __a)
 8004e7a:	b580      	push	{r7, lr}
 8004e7c:	b082      	sub	sp, #8
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
 8004e82:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 8004e84:	2101      	movs	r1, #1
 8004e86:	6838      	ldr	r0, [r7, #0]
 8004e88:	f000 fb68 	bl	800555c <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	461a      	mov	r2, r3
 8004e90:	6839      	ldr	r1, [r7, #0]
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 fb71 	bl	800557a <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
    }
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	3708      	adds	r7, #8
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>:
      ~__allocated_ptr()
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b082      	sub	sp, #8
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d007      	beq.n	8004ec0 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6818      	ldr	r0, [r3, #0]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	4619      	mov	r1, r3
 8004ebc:	f000 fb71 	bl	80055a2 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>
      }
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3708      	adds	r7, #8
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}

08004eca <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 8004eca:	b580      	push	{r7, lr}
 8004ecc:	b082      	sub	sp, #8
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f000 fb72 	bl	80055c0 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>
 8004edc:	4603      	mov	r3, r0
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3708      	adds	r7, #8
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}

08004ee6 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, false>
 8004ee6:	b580      	push	{r7, lr}
 8004ee8:	b082      	sub	sp, #8
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f7ff f8e8 	bl	80040c6 <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3708      	adds	r7, #8
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama6SpriteEELb1EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f7fe fe7e 	bl	8003c0a <_ZNSaIN4tama6SpriteEED1Ev>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4618      	mov	r0, r3
 8004f12:	3708      	adds	r7, #8
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>:
      class _Impl : _Sp_ebo_helper<0, _Deleter>, _Sp_ebo_helper<1, _Alloc>
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	3301      	adds	r3, #1
 8004f24:	4618      	mov	r0, r3
 8004f26:	f7ff ffeb 	bl	8004f00 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama6SpriteEELb1EED1Ev>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f7ff ffda 	bl	8004ee6 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4618      	mov	r0, r3
 8004f36:	3708      	adds	r7, #8
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 8004f3c:	b590      	push	{r4, r7, lr}
 8004f3e:	b087      	sub	sp, #28
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	607a      	str	r2, [r7, #4]
 8004f48:	603b      	str	r3, [r7, #0]
      : _M_impl(__p, std::move(__d), __a) { }
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f7fd fd89 	bl	8002a64 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8004f52:	4a10      	ldr	r2, [pc, #64]	; (8004f94 <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_+0x58>)
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	601a      	str	r2, [r3, #0]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f103 040c 	add.w	r4, r3, #12
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f7ff fc34 	bl	80047cc <_ZSt4moveIRNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8004f64:	4602      	mov	r2, r0
 8004f66:	f107 0314 	add.w	r3, r7, #20
 8004f6a:	4611      	mov	r1, r2
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f7ff fc38 	bl	80047e2 <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 8004f72:	f107 0214 	add.w	r2, r7, #20
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	68b9      	ldr	r1, [r7, #8]
 8004f7a:	4620      	mov	r0, r4
 8004f7c:	f000 fb2b 	bl	80055d6 <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>
 8004f80:	f107 0314 	add.w	r3, r7, #20
 8004f84:	4618      	mov	r0, r3
 8004f86:	f7ff f89e 	bl	80040c6 <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	371c      	adds	r7, #28
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd90      	pop	{r4, r7, pc}
 8004f94:	0800dde8 	.word	0x0800dde8

08004f98 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	605a      	str	r2, [r3, #4]
	return *this;
 8004fa8:	687b      	ldr	r3, [r7, #4]
      }
 8004faa:	4618      	mov	r0, r3
 8004fac:	370c      	adds	r7, #12
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr

08004fb6 <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>:
          void operator()(typename _Alloc::value_type* __ptr)
 8004fb6:	b590      	push	{r4, r7, lr}
 8004fb8:	b085      	sub	sp, #20
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
 8004fbe:	6039      	str	r1, [r7, #0]
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 8004fc0:	6879      	ldr	r1, [r7, #4]
 8004fc2:	f107 0308 	add.w	r3, r7, #8
 8004fc6:	683a      	ldr	r2, [r7, #0]
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f7ff feef 	bl	8004dac <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEEC1ERS2_PS1_>
	    allocator_traits<_Alloc>::destroy(_M_alloc, __guard.get());
 8004fce:	687c      	ldr	r4, [r7, #4]
 8004fd0:	f107 0308 	add.w	r3, r7, #8
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f7ff fbc4 	bl	8004762 <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEE3getEv>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	4619      	mov	r1, r3
 8004fde:	4620      	mov	r0, r4
 8004fe0:	f000 fb17 	bl	8005612 <_ZNSt16allocator_traitsISaIN4tama6SpriteEEE7destroyIS1_EEvRS2_PT_>
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 8004fe4:	f107 0308 	add.w	r3, r7, #8
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f7ff fba5 	bl	8004738 <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEED1Ev>
          }
 8004fee:	bf00      	nop
 8004ff0:	3714      	adds	r7, #20
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd90      	pop	{r4, r7, pc}

08004ff6 <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8004ff6:	b480      	push	{r7}
 8004ff8:	b083      	sub	sp, #12
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
 8004ffe:	6039      	str	r1, [r7, #0]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4618      	mov	r0, r3
 8005004:	370c      	adds	r7, #12
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr

0800500e <_ZNSt16allocator_traitsISaIN4tama27Nokia5110DisplayDataManagerEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800500e:	b580      	push	{r7, lr}
 8005010:	b082      	sub	sp, #8
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
 8005016:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8005018:	2200      	movs	r2, #0
 800501a:	6839      	ldr	r1, [r7, #0]
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f000 fb05 	bl	800562c <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEE8allocateEjPKv>
 8005022:	4603      	mov	r3, r0
 8005024:	4618      	mov	r0, r3
 8005026:	3708      	adds	r7, #8
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEEC1ERS2_PS1_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 800502c:	b580      	push	{r7, lr}
 800502e:	b084      	sub	sp, #16
 8005030:	af00      	add	r7, sp, #0
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	60b9      	str	r1, [r7, #8]
 8005036:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8005038:	68b8      	ldr	r0, [r7, #8]
 800503a:	f000 fb18 	bl	800566e <_ZSt11__addressofISaIN4tama27Nokia5110DisplayDataManagerEEEPT_RS3_>
 800503e:	4602      	mov	r2, r0
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	601a      	str	r2, [r3, #0]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	605a      	str	r2, [r3, #4]
      { }
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	4618      	mov	r0, r3
 800504e:	3710      	adds	r7, #16
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <_ZNSt16allocator_traitsISaIN4tama27Nokia5110DisplayDataManagerEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8005054:	b580      	push	{r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	68b9      	ldr	r1, [r7, #8]
 8005064:	68f8      	ldr	r0, [r7, #12]
 8005066:	f000 fb0d 	bl	8005684 <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEE10deallocateEPS2_j>
 800506a:	bf00      	nop
 800506c:	3710      	adds	r7, #16
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}

08005072 <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEE10_S_raw_ptrEPS1_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 8005072:	b480      	push	{r7}
 8005074:	b083      	sub	sp, #12
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4618      	mov	r0, r3
 800507e:	370c      	adds	r7, #12
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <_ZN4tama18DisplayDataManagerC1Ev>:

#include "../display-data/DisplayData.h"

namespace tama
{
    class DisplayDataManager
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	4a04      	ldr	r2, [pc, #16]	; (80050a4 <_ZN4tama18DisplayDataManagerC1Ev+0x1c>)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	601a      	str	r2, [r3, #0]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4618      	mov	r0, r3
 800509a:	370c      	adds	r7, #12
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr
 80050a4:	0800de20 	.word	0x0800de20

080050a8 <_ZN4tama27Nokia5110DisplayDataManagerC1Ev>:
#include "../../Core/ui/display/display-data/DisplayData.h"
#include "../../Configuration/display.config.h"

namespace tama
{
    class Nokia5110DisplayDataManager : public DisplayDataManager
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4618      	mov	r0, r3
 80050b4:	f7ff ffe8 	bl	8005088 <_ZN4tama18DisplayDataManagerC1Ev>
 80050b8:	4a0f      	ldr	r2, [pc, #60]	; (80050f8 <_ZN4tama27Nokia5110DisplayDataManagerC1Ev+0x50>)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	601a      	str	r2, [r3, #0]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2208      	movs	r2, #8
 80050c2:	605a      	str	r2, [r3, #4]
    public:
        DisplayData getActiveSceneDisplayData(std::shared_ptr<Texture>) override;

    private:
        unsigned segmentSize = 8;
        unsigned segmentsInHeight = Config_Display_Height / segmentSize; // 6
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	2230      	movs	r2, #48	; 0x30
 80050ca:	fbb2 f2f3 	udiv	r2, r2, r3
    class Nokia5110DisplayDataManager : public DisplayDataManager
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	609a      	str	r2, [r3, #8]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2254      	movs	r2, #84	; 0x54
 80050d6:	60da      	str	r2, [r3, #12]
        unsigned segmentsInWidth = Config_Display_Width;
        unsigned dataSize = segmentsInHeight * segmentsInWidth;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	68d2      	ldr	r2, [r2, #12]
 80050e0:	fb02 f203 	mul.w	r2, r2, r3
    class Nokia5110DisplayDataManager : public DisplayDataManager
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	611a      	str	r2, [r3, #16]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	615a      	str	r2, [r3, #20]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4618      	mov	r0, r3
 80050f2:	3708      	adds	r7, #8
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}
 80050f8:	0800de4c 	.word	0x0800de4c

080050fc <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEE9constructIS2_JEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b082      	sub	sp, #8
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	4619      	mov	r1, r3
 800510a:	2018      	movs	r0, #24
 800510c:	f7fb fd66 	bl	8000bdc <_ZnwjPv>
 8005110:	4601      	mov	r1, r0
 8005112:	2900      	cmp	r1, #0
 8005114:	d00a      	beq.n	800512c <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEE9constructIS2_JEEEvPT_DpOT0_+0x30>
 8005116:	460a      	mov	r2, r1
 8005118:	2300      	movs	r3, #0
 800511a:	6013      	str	r3, [r2, #0]
 800511c:	6053      	str	r3, [r2, #4]
 800511e:	6093      	str	r3, [r2, #8]
 8005120:	60d3      	str	r3, [r2, #12]
 8005122:	6113      	str	r3, [r2, #16]
 8005124:	6153      	str	r3, [r2, #20]
 8005126:	4608      	mov	r0, r1
 8005128:	f7ff ffbe 	bl	80050a8 <_ZN4tama27Nokia5110DisplayDataManagerC1Ev>
 800512c:	bf00      	nop
 800512e:	3708      	adds	r7, #8
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}

08005134 <_ZNSaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) throw() { }
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 faad 	bl	800569e <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4618      	mov	r0, r3
 8005148:	3708      	adds	r7, #8
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}

0800514e <_ZNSaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>:
      ~allocator() throw() { }
 800514e:	b580      	push	{r7, lr}
 8005150:	b082      	sub	sp, #8
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 faac 	bl	80056b4 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4618      	mov	r0, r3
 8005160:	3708      	adds	r7, #8
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}

08005166 <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>:
    __allocate_guarded(_Alloc& __a)
 8005166:	b580      	push	{r7, lr}
 8005168:	b082      	sub	sp, #8
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
 800516e:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 8005170:	2101      	movs	r1, #1
 8005172:	6838      	ldr	r0, [r7, #0]
 8005174:	f000 faa9 	bl	80056ca <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>
 8005178:	4603      	mov	r3, r0
 800517a:	461a      	mov	r2, r3
 800517c:	6839      	ldr	r1, [r7, #0]
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 fab2 	bl	80056e8 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
    }
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	3708      	adds	r7, #8
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}

0800518c <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>:
      ~__allocated_ptr()
 800518c:	b580      	push	{r7, lr}
 800518e:	b082      	sub	sp, #8
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d007      	beq.n	80051ac <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6818      	ldr	r0, [r3, #0]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	2201      	movs	r2, #1
 80051a6:	4619      	mov	r1, r3
 80051a8:	f000 fab2 	bl	8005710 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>
      }
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	4618      	mov	r0, r3
 80051b0:	3708      	adds	r7, #8
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}

080051b6 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 80051b6:	b580      	push	{r7, lr}
 80051b8:	b082      	sub	sp, #8
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	4618      	mov	r0, r3
 80051c4:	f000 fab3 	bl	800572e <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>
 80051c8:	4603      	mov	r3, r0
 80051ca:	4618      	mov	r0, r3
 80051cc:	3708      	adds	r7, #8
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}

080051d2 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, false>
 80051d2:	b580      	push	{r7, lr}
 80051d4:	b082      	sub	sp, #8
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4618      	mov	r0, r3
 80051de:	f7ff f80e 	bl	80041fe <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4618      	mov	r0, r3
 80051e6:	3708      	adds	r7, #8
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama27Nokia5110DisplayDataManagerEELb1EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b082      	sub	sp, #8
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f7fe fd3a 	bl	8003c6e <_ZNSaIN4tama27Nokia5110DisplayDataManagerEED1Ev>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4618      	mov	r0, r3
 80051fe:	3708      	adds	r7, #8
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}

08005204 <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>:
      class _Impl : _Sp_ebo_helper<0, _Deleter>, _Sp_ebo_helper<1, _Alloc>
 8005204:	b580      	push	{r7, lr}
 8005206:	b082      	sub	sp, #8
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	3301      	adds	r3, #1
 8005210:	4618      	mov	r0, r3
 8005212:	f7ff ffeb 	bl	80051ec <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama27Nokia5110DisplayDataManagerEELb1EED1Ev>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4618      	mov	r0, r3
 800521a:	f7ff ffda 	bl	80051d2 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4618      	mov	r0, r3
 8005222:	3708      	adds	r7, #8
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 8005228:	b590      	push	{r4, r7, lr}
 800522a:	b087      	sub	sp, #28
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	607a      	str	r2, [r7, #4]
 8005234:	603b      	str	r3, [r7, #0]
      : _M_impl(__p, std::move(__d), __a) { }
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	4618      	mov	r0, r3
 800523a:	f7fd fc13 	bl	8002a64 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800523e:	4a10      	ldr	r2, [pc, #64]	; (8005280 <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_+0x58>)
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	601a      	str	r2, [r3, #0]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f103 040c 	add.w	r4, r3, #12
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f7ff fba6 	bl	800499c <_ZSt4moveIRNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8005250:	4602      	mov	r2, r0
 8005252:	f107 0314 	add.w	r3, r7, #20
 8005256:	4611      	mov	r1, r2
 8005258:	4618      	mov	r0, r3
 800525a:	f7ff fbaa 	bl	80049b2 <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 800525e:	f107 0214 	add.w	r2, r7, #20
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	68b9      	ldr	r1, [r7, #8]
 8005266:	4620      	mov	r0, r4
 8005268:	f000 fa6c 	bl	8005744 <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>
 800526c:	f107 0314 	add.w	r3, r7, #20
 8005270:	4618      	mov	r0, r3
 8005272:	f7fe ffc4 	bl	80041fe <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	4618      	mov	r0, r3
 800527a:	371c      	adds	r7, #28
 800527c:	46bd      	mov	sp, r7
 800527e:	bd90      	pop	{r4, r7, pc}
 8005280:	0800ddcc 	.word	0x0800ddcc

08005284 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	605a      	str	r2, [r3, #4]
	return *this;
 8005294:	687b      	ldr	r3, [r7, #4]
      }
 8005296:	4618      	mov	r0, r3
 8005298:	370c      	adds	r7, #12
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr

080052a2 <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>:
          void operator()(typename _Alloc::value_type* __ptr)
 80052a2:	b590      	push	{r4, r7, lr}
 80052a4:	b085      	sub	sp, #20
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
 80052aa:	6039      	str	r1, [r7, #0]
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 80052ac:	6879      	ldr	r1, [r7, #4]
 80052ae:	f107 0308 	add.w	r3, r7, #8
 80052b2:	683a      	ldr	r2, [r7, #0]
 80052b4:	4618      	mov	r0, r3
 80052b6:	f7ff feb9 	bl	800502c <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEEC1ERS2_PS1_>
	    allocator_traits<_Alloc>::destroy(_M_alloc, __guard.get());
 80052ba:	687c      	ldr	r4, [r7, #4]
 80052bc:	f107 0308 	add.w	r3, r7, #8
 80052c0:	4618      	mov	r0, r3
 80052c2:	f7ff fb41 	bl	8004948 <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEE3getEv>
 80052c6:	4603      	mov	r3, r0
 80052c8:	4619      	mov	r1, r3
 80052ca:	4620      	mov	r0, r4
 80052cc:	f000 fa58 	bl	8005780 <_ZNSt16allocator_traitsISaIN4tama27Nokia5110DisplayDataManagerEEE7destroyIS1_EEvRS2_PT_>
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 80052d0:	f107 0308 	add.w	r3, r7, #8
 80052d4:	4618      	mov	r0, r3
 80052d6:	f7ff fb22 	bl	800491e <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEED1Ev>
          }
 80052da:	bf00      	nop
 80052dc:	3714      	adds	r7, #20
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd90      	pop	{r4, r7, pc}

080052e2 <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEE9constructIS2_JEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80052e2:	b580      	push	{r7, lr}
 80052e4:	b082      	sub	sp, #8
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]
 80052ea:	6039      	str	r1, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	4619      	mov	r1, r3
 80052f0:	2020      	movs	r0, #32
 80052f2:	f7fb fc73 	bl	8000bdc <_ZnwjPv>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d002      	beq.n	8005302 <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEE9constructIS2_JEEEvPT_DpOT0_+0x20>
 80052fc:	4618      	mov	r0, r3
 80052fe:	f7fb fd79 	bl	8000df4 <_ZN4tama5SceneC1Ev>
 8005302:	bf00      	nop
 8005304:	3708      	adds	r7, #8
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}

0800530a <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE9constructIS2_JRjS5_RPPNS1_10PixelColorEEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800530a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800530c:	b085      	sub	sp, #20
 800530e:	af00      	add	r7, sp, #0
 8005310:	60f8      	str	r0, [r7, #12]
 8005312:	60b9      	str	r1, [r7, #8]
 8005314:	607a      	str	r2, [r7, #4]
 8005316:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f7fb ff8e 	bl	800123a <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 800531e:	4603      	mov	r3, r0
 8005320:	681c      	ldr	r4, [r3, #0]
 8005322:	6838      	ldr	r0, [r7, #0]
 8005324:	f7fb ff89 	bl	800123a <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 8005328:	4603      	mov	r3, r0
 800532a:	681d      	ldr	r5, [r3, #0]
 800532c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800532e:	f7fe fbe3 	bl	8003af8 <_ZSt7forwardIRPPN4tama10PixelColorEEOT_RNSt16remove_referenceIS5_E4typeE>
 8005332:	4603      	mov	r3, r0
 8005334:	681e      	ldr	r6, [r3, #0]
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	4619      	mov	r1, r3
 800533a:	2010      	movs	r0, #16
 800533c:	f7fb fc4e 	bl	8000bdc <_ZnwjPv>
 8005340:	2800      	cmp	r0, #0
 8005342:	d004      	beq.n	800534e <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE9constructIS2_JRjS5_RPPNS1_10PixelColorEEEEvPT_DpOT0_+0x44>
 8005344:	4633      	mov	r3, r6
 8005346:	462a      	mov	r2, r5
 8005348:	4621      	mov	r1, r4
 800534a:	f7fe f89d 	bl	8003488 <_ZN4tama7TextureC1EjjPPNS_10PixelColorE>
 800534e:	bf00      	nop
 8005350:	3714      	adds	r7, #20
 8005352:	46bd      	mov	sp, r7
 8005354:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005356 <_ZN9__gnu_cxx13new_allocatorIN4tama16Nokia5510DisplayEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8005356:	b580      	push	{r7, lr}
 8005358:	b084      	sub	sp, #16
 800535a:	af00      	add	r7, sp, #0
 800535c:	60f8      	str	r0, [r7, #12]
 800535e:	60b9      	str	r1, [r7, #8]
 8005360:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8005362:	68f8      	ldr	r0, [r7, #12]
 8005364:	f000 fa1a 	bl	800579c <_ZNK9__gnu_cxx13new_allocatorIN4tama16Nokia5510DisplayEE8max_sizeEv>
 8005368:	4602      	mov	r2, r0
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	4293      	cmp	r3, r2
 800536e:	bf8c      	ite	hi
 8005370:	2301      	movhi	r3, #1
 8005372:	2300      	movls	r3, #0
 8005374:	b2db      	uxtb	r3, r3
 8005376:	2b00      	cmp	r3, #0
 8005378:	d001      	beq.n	800537e <_ZN9__gnu_cxx13new_allocatorIN4tama16Nokia5510DisplayEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800537a:	f008 fb50 	bl	800da1e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800537e:	68ba      	ldr	r2, [r7, #8]
 8005380:	4613      	mov	r3, r2
 8005382:	005b      	lsls	r3, r3, #1
 8005384:	4413      	add	r3, r2
 8005386:	011b      	lsls	r3, r3, #4
 8005388:	4618      	mov	r0, r3
 800538a:	f008 fb1c 	bl	800d9c6 <_Znwj>
 800538e:	4603      	mov	r3, r0
      }
 8005390:	4618      	mov	r0, r3
 8005392:	3710      	adds	r7, #16
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}

08005398 <_ZSt11__addressofISaIN4tama16Nokia5510DisplayEEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4618      	mov	r0, r3
 80053a4:	370c      	adds	r7, #12
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr

080053ae <_ZN9__gnu_cxx13new_allocatorIN4tama16Nokia5510DisplayEE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 80053ae:	b580      	push	{r7, lr}
 80053b0:	b084      	sub	sp, #16
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	60f8      	str	r0, [r7, #12]
 80053b6:	60b9      	str	r1, [r7, #8]
 80053b8:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 80053ba:	68b8      	ldr	r0, [r7, #8]
 80053bc:	f008 fb1c 	bl	800d9f8 <_ZdlPv>
      }
 80053c0:	bf00      	nop
 80053c2:	3710      	adds	r7, #16
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	4618      	mov	r0, r3
 80053d4:	370c      	adds	r7, #12
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr

080053de <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80053de:	b480      	push	{r7}
 80053e0:	b083      	sub	sp, #12
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4618      	mov	r0, r3
 80053ea:	370c      	adds	r7, #12
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr

080053f4 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>:
      allocate(allocator_type& __a, size_type __n)
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b082      	sub	sp, #8
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80053fe:	2200      	movs	r2, #0
 8005400:	6839      	ldr	r1, [r7, #0]
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f000 f9d8 	bl	80057b8 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>
 8005408:	4603      	mov	r3, r0
 800540a:	4618      	mov	r0, r3
 800540c:	3708      	adds	r7, #8
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}

08005412 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8005412:	b580      	push	{r7, lr}
 8005414:	b084      	sub	sp, #16
 8005416:	af00      	add	r7, sp, #0
 8005418:	60f8      	str	r0, [r7, #12]
 800541a:	60b9      	str	r1, [r7, #8]
 800541c:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800541e:	68b8      	ldr	r0, [r7, #8]
 8005420:	f000 f9eb 	bl	80057fa <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>
 8005424:	4602      	mov	r2, r0
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	601a      	str	r2, [r3, #0]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	605a      	str	r2, [r3, #4]
      { }
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	4618      	mov	r0, r3
 8005434:	3710      	adds	r7, #16
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}

0800543a <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800543a:	b580      	push	{r7, lr}
 800543c:	b084      	sub	sp, #16
 800543e:	af00      	add	r7, sp, #0
 8005440:	60f8      	str	r0, [r7, #12]
 8005442:	60b9      	str	r1, [r7, #8]
 8005444:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	68b9      	ldr	r1, [r7, #8]
 800544a:	68f8      	ldr	r0, [r7, #12]
 800544c:	f000 f9e0 	bl	8005810 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>
 8005450:	bf00      	nop
 8005452:	3710      	adds	r7, #16
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}

08005458 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4618      	mov	r0, r3
 8005464:	370c      	adds	r7, #12
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr

0800546e <_ZNSt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 800546e:	b590      	push	{r4, r7, lr}
 8005470:	b085      	sub	sp, #20
 8005472:	af00      	add	r7, sp, #0
 8005474:	60f8      	str	r0, [r7, #12]
 8005476:	60b9      	str	r1, [r7, #8]
 8005478:	607a      	str	r2, [r7, #4]
 800547a:	603b      	str	r3, [r7, #0]
	: _M_ptr(__p), _Del_base(std::move(__d)), _Alloc_base(__a)
 800547c:	68fc      	ldr	r4, [r7, #12]
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f7ff f8b1 	bl	80045e6 <_ZSt4moveIRNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8005484:	4603      	mov	r3, r0
 8005486:	4619      	mov	r1, r3
 8005488:	4620      	mov	r0, r4
 800548a:	f000 f9ce 	bl	800582a <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	3301      	adds	r3, #1
 8005492:	6839      	ldr	r1, [r7, #0]
 8005494:	4618      	mov	r0, r3
 8005496:	f000 f9db 	bl	8005850 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama16Nokia5510DisplayEELb1EEC1ERKS2_>
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	68ba      	ldr	r2, [r7, #8]
 800549e:	605a      	str	r2, [r3, #4]
	{ }
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	4618      	mov	r0, r3
 80054a4:	3714      	adds	r7, #20
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd90      	pop	{r4, r7, pc}

080054aa <_ZNSt16allocator_traitsISaIN4tama16Nokia5510DisplayEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 80054aa:	b580      	push	{r7, lr}
 80054ac:	b082      	sub	sp, #8
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
 80054b2:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 80054b4:	6839      	ldr	r1, [r7, #0]
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 f9d8 	bl	800586c <_ZN9__gnu_cxx13new_allocatorIN4tama16Nokia5510DisplayEE7destroyIS2_EEvPT_>
 80054bc:	bf00      	nop
 80054be:	3708      	adds	r7, #8
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	60b9      	str	r1, [r7, #8]
 80054ce:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 80054d0:	68f8      	ldr	r0, [r7, #12]
 80054d2:	f000 f9d6 	bl	8005882 <_ZNK9__gnu_cxx13new_allocatorIN4tama6SpriteEE8max_sizeEv>
 80054d6:	4602      	mov	r2, r0
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	4293      	cmp	r3, r2
 80054dc:	bf8c      	ite	hi
 80054de:	2301      	movhi	r3, #1
 80054e0:	2300      	movls	r3, #0
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d001      	beq.n	80054ec <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80054e8:	f008 fa99 	bl	800da1e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	015b      	lsls	r3, r3, #5
 80054f0:	4618      	mov	r0, r3
 80054f2:	f008 fa68 	bl	800d9c6 <_Znwj>
 80054f6:	4603      	mov	r3, r0
      }
 80054f8:	4618      	mov	r0, r3
 80054fa:	3710      	adds	r7, #16
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}

08005500 <_ZSt11__addressofISaIN4tama6SpriteEEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	4618      	mov	r0, r3
 800550c:	370c      	adds	r7, #12
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr

08005516 <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 8005516:	b580      	push	{r7, lr}
 8005518:	b084      	sub	sp, #16
 800551a:	af00      	add	r7, sp, #0
 800551c:	60f8      	str	r0, [r7, #12]
 800551e:	60b9      	str	r1, [r7, #8]
 8005520:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8005522:	68b8      	ldr	r0, [r7, #8]
 8005524:	f008 fa68 	bl	800d9f8 <_ZdlPv>
      }
 8005528:	bf00      	nop
 800552a:	3710      	adds	r7, #16
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4618      	mov	r0, r3
 800553c:	370c      	adds	r7, #12
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr

08005546 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8005546:	b480      	push	{r7}
 8005548:	b083      	sub	sp, #12
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	4618      	mov	r0, r3
 8005552:	370c      	adds	r7, #12
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>:
      allocate(allocator_type& __a, size_type __n)
 800555c:	b580      	push	{r7, lr}
 800555e:	b082      	sub	sp, #8
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8005566:	2200      	movs	r2, #0
 8005568:	6839      	ldr	r1, [r7, #0]
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 f995 	bl	800589a <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>
 8005570:	4603      	mov	r3, r0
 8005572:	4618      	mov	r0, r3
 8005574:	3708      	adds	r7, #8
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 800557a:	b580      	push	{r7, lr}
 800557c:	b084      	sub	sp, #16
 800557e:	af00      	add	r7, sp, #0
 8005580:	60f8      	str	r0, [r7, #12]
 8005582:	60b9      	str	r1, [r7, #8]
 8005584:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8005586:	68b8      	ldr	r0, [r7, #8]
 8005588:	f000 f9a8 	bl	80058dc <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>
 800558c:	4602      	mov	r2, r0
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	601a      	str	r2, [r3, #0]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	605a      	str	r2, [r3, #4]
      { }
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	4618      	mov	r0, r3
 800559c:	3710      	adds	r7, #16
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}

080055a2 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80055a2:	b580      	push	{r7, lr}
 80055a4:	b084      	sub	sp, #16
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	60f8      	str	r0, [r7, #12]
 80055aa:	60b9      	str	r1, [r7, #8]
 80055ac:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	68b9      	ldr	r1, [r7, #8]
 80055b2:	68f8      	ldr	r0, [r7, #12]
 80055b4:	f000 f99d 	bl	80058f2 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>
 80055b8:	bf00      	nop
 80055ba:	3710      	adds	r7, #16
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}

080055c0 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4618      	mov	r0, r3
 80055cc:	370c      	adds	r7, #12
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr

080055d6 <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 80055d6:	b590      	push	{r4, r7, lr}
 80055d8:	b085      	sub	sp, #20
 80055da:	af00      	add	r7, sp, #0
 80055dc:	60f8      	str	r0, [r7, #12]
 80055de:	60b9      	str	r1, [r7, #8]
 80055e0:	607a      	str	r2, [r7, #4]
 80055e2:	603b      	str	r3, [r7, #0]
	: _M_ptr(__p), _Del_base(std::move(__d)), _Alloc_base(__a)
 80055e4:	68fc      	ldr	r4, [r7, #12]
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f7ff f8f0 	bl	80047cc <_ZSt4moveIRNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 80055ec:	4603      	mov	r3, r0
 80055ee:	4619      	mov	r1, r3
 80055f0:	4620      	mov	r0, r4
 80055f2:	f000 f98b 	bl	800590c <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	3301      	adds	r3, #1
 80055fa:	6839      	ldr	r1, [r7, #0]
 80055fc:	4618      	mov	r0, r3
 80055fe:	f000 f998 	bl	8005932 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama6SpriteEELb1EEC1ERKS2_>
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	68ba      	ldr	r2, [r7, #8]
 8005606:	605a      	str	r2, [r3, #4]
	{ }
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	4618      	mov	r0, r3
 800560c:	3714      	adds	r7, #20
 800560e:	46bd      	mov	sp, r7
 8005610:	bd90      	pop	{r4, r7, pc}

08005612 <_ZNSt16allocator_traitsISaIN4tama6SpriteEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 8005612:	b580      	push	{r7, lr}
 8005614:	b082      	sub	sp, #8
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
 800561a:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 800561c:	6839      	ldr	r1, [r7, #0]
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 f9ae 	bl	8005980 <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEE7destroyIS2_EEvPT_>
 8005624:	bf00      	nop
 8005626:	3708      	adds	r7, #8
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}

0800562c <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800562c:	b580      	push	{r7, lr}
 800562e:	b084      	sub	sp, #16
 8005630:	af00      	add	r7, sp, #0
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8005638:	68f8      	ldr	r0, [r7, #12]
 800563a:	f000 f9ad 	bl	8005998 <_ZNK9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEE8max_sizeEv>
 800563e:	4602      	mov	r2, r0
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	4293      	cmp	r3, r2
 8005644:	bf8c      	ite	hi
 8005646:	2301      	movhi	r3, #1
 8005648:	2300      	movls	r3, #0
 800564a:	b2db      	uxtb	r3, r3
 800564c:	2b00      	cmp	r3, #0
 800564e:	d001      	beq.n	8005654 <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8005650:	f008 f9e5 	bl	800da1e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8005654:	68ba      	ldr	r2, [r7, #8]
 8005656:	4613      	mov	r3, r2
 8005658:	005b      	lsls	r3, r3, #1
 800565a:	4413      	add	r3, r2
 800565c:	00db      	lsls	r3, r3, #3
 800565e:	4618      	mov	r0, r3
 8005660:	f008 f9b1 	bl	800d9c6 <_Znwj>
 8005664:	4603      	mov	r3, r0
      }
 8005666:	4618      	mov	r0, r3
 8005668:	3710      	adds	r7, #16
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}

0800566e <_ZSt11__addressofISaIN4tama27Nokia5110DisplayDataManagerEEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800566e:	b480      	push	{r7}
 8005670:	b083      	sub	sp, #12
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4618      	mov	r0, r3
 800567a:	370c      	adds	r7, #12
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr

08005684 <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 8005684:	b580      	push	{r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
 800568a:	60f8      	str	r0, [r7, #12]
 800568c:	60b9      	str	r1, [r7, #8]
 800568e:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8005690:	68b8      	ldr	r0, [r7, #8]
 8005692:	f008 f9b1 	bl	800d9f8 <_ZdlPv>
      }
 8005696:	bf00      	nop
 8005698:	3710      	adds	r7, #16
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}

0800569e <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800569e:	b480      	push	{r7}
 80056a0:	b083      	sub	sp, #12
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4618      	mov	r0, r3
 80056aa:	370c      	adds	r7, #12
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80056b4:	b480      	push	{r7}
 80056b6:	b083      	sub	sp, #12
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4618      	mov	r0, r3
 80056c0:	370c      	adds	r7, #12
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr

080056ca <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>:
      allocate(allocator_type& __a, size_type __n)
 80056ca:	b580      	push	{r7, lr}
 80056cc:	b082      	sub	sp, #8
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
 80056d2:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80056d4:	2200      	movs	r2, #0
 80056d6:	6839      	ldr	r1, [r7, #0]
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f000 f96b 	bl	80059b4 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>
 80056de:	4603      	mov	r3, r0
 80056e0:	4618      	mov	r0, r3
 80056e2:	3708      	adds	r7, #8
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	60b9      	str	r1, [r7, #8]
 80056f2:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 80056f4:	68b8      	ldr	r0, [r7, #8]
 80056f6:	f000 f97e 	bl	80059f6 <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>
 80056fa:	4602      	mov	r2, r0
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	601a      	str	r2, [r3, #0]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	605a      	str	r2, [r3, #4]
      { }
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	4618      	mov	r0, r3
 800570a:	3710      	adds	r7, #16
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}

08005710 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	68b9      	ldr	r1, [r7, #8]
 8005720:	68f8      	ldr	r0, [r7, #12]
 8005722:	f000 f973 	bl	8005a0c <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>
 8005726:	bf00      	nop
 8005728:	3710      	adds	r7, #16
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}

0800572e <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 800572e:	b480      	push	{r7}
 8005730:	b083      	sub	sp, #12
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4618      	mov	r0, r3
 800573a:	370c      	adds	r7, #12
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr

08005744 <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 8005744:	b590      	push	{r4, r7, lr}
 8005746:	b085      	sub	sp, #20
 8005748:	af00      	add	r7, sp, #0
 800574a:	60f8      	str	r0, [r7, #12]
 800574c:	60b9      	str	r1, [r7, #8]
 800574e:	607a      	str	r2, [r7, #4]
 8005750:	603b      	str	r3, [r7, #0]
	: _M_ptr(__p), _Del_base(std::move(__d)), _Alloc_base(__a)
 8005752:	68fc      	ldr	r4, [r7, #12]
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f7ff f921 	bl	800499c <_ZSt4moveIRNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800575a:	4603      	mov	r3, r0
 800575c:	4619      	mov	r1, r3
 800575e:	4620      	mov	r0, r4
 8005760:	f000 f961 	bl	8005a26 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	3301      	adds	r3, #1
 8005768:	6839      	ldr	r1, [r7, #0]
 800576a:	4618      	mov	r0, r3
 800576c:	f000 f96e 	bl	8005a4c <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama27Nokia5110DisplayDataManagerEELb1EEC1ERKS2_>
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	68ba      	ldr	r2, [r7, #8]
 8005774:	605a      	str	r2, [r3, #4]
	{ }
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	4618      	mov	r0, r3
 800577a:	3714      	adds	r7, #20
 800577c:	46bd      	mov	sp, r7
 800577e:	bd90      	pop	{r4, r7, pc}

08005780 <_ZNSt16allocator_traitsISaIN4tama27Nokia5110DisplayDataManagerEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 8005780:	b580      	push	{r7, lr}
 8005782:	b082      	sub	sp, #8
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 800578a:	6839      	ldr	r1, [r7, #0]
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f000 f96b 	bl	8005a68 <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEE7destroyIS2_EEvPT_>
 8005792:	bf00      	nop
 8005794:	3708      	adds	r7, #8
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
	...

0800579c <_ZNK9__gnu_cxx13new_allocatorIN4tama16Nokia5510DisplayEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 80057a4:	4b03      	ldr	r3, [pc, #12]	; (80057b4 <_ZNK9__gnu_cxx13new_allocatorIN4tama16Nokia5510DisplayEE8max_sizeEv+0x18>)
 80057a6:	4618      	mov	r0, r3
 80057a8:	370c      	adds	r7, #12
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr
 80057b2:	bf00      	nop
 80057b4:	05555555 	.word	0x05555555

080057b8 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b084      	sub	sp, #16
 80057bc:	af00      	add	r7, sp, #0
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 80057c4:	68f8      	ldr	r0, [r7, #12]
 80057c6:	f000 f95b 	bl	8005a80 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>
 80057ca:	4602      	mov	r2, r0
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	4293      	cmp	r3, r2
 80057d0:	bf8c      	ite	hi
 80057d2:	2301      	movhi	r3, #1
 80057d4:	2300      	movls	r3, #0
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d001      	beq.n	80057e0 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80057dc:	f008 f91f 	bl	800da1e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80057e0:	68ba      	ldr	r2, [r7, #8]
 80057e2:	4613      	mov	r3, r2
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	4413      	add	r3, r2
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	4618      	mov	r0, r3
 80057ec:	f008 f8eb 	bl	800d9c6 <_Znwj>
 80057f0:	4603      	mov	r3, r0
      }
 80057f2:	4618      	mov	r0, r3
 80057f4:	3710      	adds	r7, #16
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}

080057fa <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80057fa:	b480      	push	{r7}
 80057fc:	b083      	sub	sp, #12
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4618      	mov	r0, r3
 8005806:	370c      	adds	r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>:
      deallocate(pointer __p, size_type)
 8005810:	b580      	push	{r7, lr}
 8005812:	b084      	sub	sp, #16
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800581c:	68b8      	ldr	r0, [r7, #8]
 800581e:	f008 f8eb 	bl	800d9f8 <_ZdlPv>
      }
 8005822:	bf00      	nop
 8005824:	3710      	adds	r7, #16
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}

0800582a <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _M_tp(std::move(__tp)) { }
 800582a:	b590      	push	{r4, r7, lr}
 800582c:	b083      	sub	sp, #12
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
 8005832:	6039      	str	r1, [r7, #0]
 8005834:	687c      	ldr	r4, [r7, #4]
 8005836:	6838      	ldr	r0, [r7, #0]
 8005838:	f7fe fed5 	bl	80045e6 <_ZSt4moveIRNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800583c:	4603      	mov	r3, r0
 800583e:	4619      	mov	r1, r3
 8005840:	4620      	mov	r0, r4
 8005842:	f7fe fedb 	bl	80045fc <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4618      	mov	r0, r3
 800584a:	370c      	adds	r7, #12
 800584c:	46bd      	mov	sp, r7
 800584e:	bd90      	pop	{r4, r7, pc}

08005850 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama16Nokia5510DisplayEELb1EEC1ERKS2_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	6039      	str	r1, [r7, #0]
 800585a:	6839      	ldr	r1, [r7, #0]
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f7fe fe5c 	bl	800451a <_ZNSaIN4tama16Nokia5510DisplayEEC1ERKS1_>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4618      	mov	r0, r3
 8005866:	3708      	adds	r7, #8
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <_ZN9__gnu_cxx13new_allocatorIN4tama16Nokia5510DisplayEE7destroyIS2_EEvPT_>:
	destroy(_Up* __p) { __p->~_Up(); }
 800586c:	b480      	push	{r7}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
 8005876:	bf00      	nop
 8005878:	370c      	adds	r7, #12
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr

08005882 <_ZNK9__gnu_cxx13new_allocatorIN4tama6SpriteEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8005882:	b480      	push	{r7}
 8005884:	b083      	sub	sp, #12
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800588a:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
 800588e:	4618      	mov	r0, r3
 8005890:	370c      	adds	r7, #12
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr

0800589a <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800589a:	b580      	push	{r7, lr}
 800589c:	b084      	sub	sp, #16
 800589e:	af00      	add	r7, sp, #0
 80058a0:	60f8      	str	r0, [r7, #12]
 80058a2:	60b9      	str	r1, [r7, #8]
 80058a4:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 80058a6:	68f8      	ldr	r0, [r7, #12]
 80058a8:	f000 f8f8 	bl	8005a9c <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>
 80058ac:	4602      	mov	r2, r0
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	4293      	cmp	r3, r2
 80058b2:	bf8c      	ite	hi
 80058b4:	2301      	movhi	r3, #1
 80058b6:	2300      	movls	r3, #0
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d001      	beq.n	80058c2 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80058be:	f008 f8ae 	bl	800da1e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80058c2:	68ba      	ldr	r2, [r7, #8]
 80058c4:	4613      	mov	r3, r2
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	4413      	add	r3, r2
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	4618      	mov	r0, r3
 80058ce:	f008 f87a 	bl	800d9c6 <_Znwj>
 80058d2:	4603      	mov	r3, r0
      }
 80058d4:	4618      	mov	r0, r3
 80058d6:	3710      	adds	r7, #16
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}

080058dc <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	4618      	mov	r0, r3
 80058e8:	370c      	adds	r7, #12
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr

080058f2 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>:
      deallocate(pointer __p, size_type)
 80058f2:	b580      	push	{r7, lr}
 80058f4:	b084      	sub	sp, #16
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	60f8      	str	r0, [r7, #12]
 80058fa:	60b9      	str	r1, [r7, #8]
 80058fc:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 80058fe:	68b8      	ldr	r0, [r7, #8]
 8005900:	f008 f87a 	bl	800d9f8 <_ZdlPv>
      }
 8005904:	bf00      	nop
 8005906:	3710      	adds	r7, #16
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}

0800590c <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _M_tp(std::move(__tp)) { }
 800590c:	b590      	push	{r4, r7, lr}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
 8005916:	687c      	ldr	r4, [r7, #4]
 8005918:	6838      	ldr	r0, [r7, #0]
 800591a:	f7fe ff57 	bl	80047cc <_ZSt4moveIRNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800591e:	4603      	mov	r3, r0
 8005920:	4619      	mov	r1, r3
 8005922:	4620      	mov	r0, r4
 8005924:	f7fe ff5d 	bl	80047e2 <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4618      	mov	r0, r3
 800592c:	370c      	adds	r7, #12
 800592e:	46bd      	mov	sp, r7
 8005930:	bd90      	pop	{r4, r7, pc}

08005932 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama6SpriteEELb1EEC1ERKS2_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 8005932:	b580      	push	{r7, lr}
 8005934:	b082      	sub	sp, #8
 8005936:	af00      	add	r7, sp, #0
 8005938:	6078      	str	r0, [r7, #4]
 800593a:	6039      	str	r1, [r7, #0]
 800593c:	6839      	ldr	r1, [r7, #0]
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f7fe fed9 	bl	80046f6 <_ZNSaIN4tama6SpriteEEC1ERKS1_>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4618      	mov	r0, r3
 8005948:	3708      	adds	r7, #8
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
	...

08005950 <_ZN4tama6SpriteD1Ev>:
#include <memory>
#include "../Drawable.h"

namespace tama
{
    class Sprite : public Drawable
 8005950:	b580      	push	{r7, lr}
 8005952:	b082      	sub	sp, #8
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	4a08      	ldr	r2, [pc, #32]	; (800597c <_ZN4tama6SpriteD1Ev+0x2c>)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	601a      	str	r2, [r3, #0]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	3318      	adds	r3, #24
 8005962:	4618      	mov	r0, r3
 8005964:	f7fa ff80 	bl	8000868 <_ZNSt10shared_ptrIN4tama14ChangeObserverEED1Ev>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	3304      	adds	r3, #4
 800596c:	4618      	mov	r0, r3
 800596e:	f7fb fad3 	bl	8000f18 <_ZNSt10shared_ptrIN4tama7TextureEED1Ev>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4618      	mov	r0, r3
 8005976:	3708      	adds	r7, #8
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}
 800597c:	0800dcf8 	.word	0x0800dcf8

08005980 <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEE7destroyIS2_EEvPT_>:
	destroy(_Up* __p) { __p->~_Up(); }
 8005980:	b580      	push	{r7, lr}
 8005982:	b082      	sub	sp, #8
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
 800598a:	6838      	ldr	r0, [r7, #0]
 800598c:	f7ff ffe0 	bl	8005950 <_ZN4tama6SpriteD1Ev>
 8005990:	bf00      	nop
 8005992:	3708      	adds	r7, #8
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}

08005998 <_ZNK9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 80059a0:	4b03      	ldr	r3, [pc, #12]	; (80059b0 <_ZNK9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEE8max_sizeEv+0x18>)
 80059a2:	4618      	mov	r0, r3
 80059a4:	370c      	adds	r7, #12
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr
 80059ae:	bf00      	nop
 80059b0:	0aaaaaaa 	.word	0x0aaaaaaa

080059b4 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b084      	sub	sp, #16
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	60b9      	str	r1, [r7, #8]
 80059be:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 80059c0:	68f8      	ldr	r0, [r7, #12]
 80059c2:	f000 f879 	bl	8005ab8 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>
 80059c6:	4602      	mov	r2, r0
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	4293      	cmp	r3, r2
 80059cc:	bf8c      	ite	hi
 80059ce:	2301      	movhi	r3, #1
 80059d0:	2300      	movls	r3, #0
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d001      	beq.n	80059dc <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80059d8:	f008 f821 	bl	800da1e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80059dc:	68ba      	ldr	r2, [r7, #8]
 80059de:	4613      	mov	r3, r2
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	4413      	add	r3, r2
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	4618      	mov	r0, r3
 80059e8:	f007 ffed 	bl	800d9c6 <_Znwj>
 80059ec:	4603      	mov	r3, r0
      }
 80059ee:	4618      	mov	r0, r3
 80059f0:	3710      	adds	r7, #16
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}

080059f6 <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80059f6:	b480      	push	{r7}
 80059f8:	b083      	sub	sp, #12
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4618      	mov	r0, r3
 8005a02:	370c      	adds	r7, #12
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>:
      deallocate(pointer __p, size_type)
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b084      	sub	sp, #16
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8005a18:	68b8      	ldr	r0, [r7, #8]
 8005a1a:	f007 ffed 	bl	800d9f8 <_ZdlPv>
      }
 8005a1e:	bf00      	nop
 8005a20:	3710      	adds	r7, #16
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}

08005a26 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _M_tp(std::move(__tp)) { }
 8005a26:	b590      	push	{r4, r7, lr}
 8005a28:	b083      	sub	sp, #12
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6078      	str	r0, [r7, #4]
 8005a2e:	6039      	str	r1, [r7, #0]
 8005a30:	687c      	ldr	r4, [r7, #4]
 8005a32:	6838      	ldr	r0, [r7, #0]
 8005a34:	f7fe ffb2 	bl	800499c <_ZSt4moveIRNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	4619      	mov	r1, r3
 8005a3c:	4620      	mov	r0, r4
 8005a3e:	f7fe ffb8 	bl	80049b2 <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4618      	mov	r0, r3
 8005a46:	370c      	adds	r7, #12
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd90      	pop	{r4, r7, pc}

08005a4c <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama27Nokia5110DisplayDataManagerEELb1EEC1ERKS2_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b082      	sub	sp, #8
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
 8005a56:	6839      	ldr	r1, [r7, #0]
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f7fe ff3f 	bl	80048dc <_ZNSaIN4tama27Nokia5110DisplayDataManagerEEC1ERKS1_>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4618      	mov	r0, r3
 8005a62:	3708      	adds	r7, #8
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEE7destroyIS2_EEvPT_>:
	destroy(_Up* __p) { __p->~_Up(); }
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	6039      	str	r1, [r7, #0]
 8005a72:	bf00      	nop
 8005a74:	370c      	adds	r7, #12
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
	...

08005a80 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8005a88:	4b03      	ldr	r3, [pc, #12]	; (8005a98 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv+0x18>)
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	370c      	adds	r7, #12
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop
 8005a98:	0ccccccc 	.word	0x0ccccccc

08005a9c <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8005a9c:	b480      	push	{r7}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8005aa4:	4b03      	ldr	r3, [pc, #12]	; (8005ab4 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv+0x18>)
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	370c      	adds	r7, #12
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr
 8005ab2:	bf00      	nop
 8005ab4:	0ccccccc 	.word	0x0ccccccc

08005ab8 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8005ab8:	b480      	push	{r7}
 8005aba:	b083      	sub	sp, #12
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8005ac0:	4b03      	ldr	r3, [pc, #12]	; (8005ad0 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv+0x18>)
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	370c      	adds	r7, #12
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr
 8005ace:	bf00      	nop
 8005ad0:	0ccccccc 	.word	0x0ccccccc

08005ad4 <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b082      	sub	sp, #8
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	4a08      	ldr	r2, [pc, #32]	; (8005b00 <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev+0x2c>)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	601a      	str	r2, [r3, #0]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	330c      	adds	r3, #12
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f7ff fb8c 	bl	8005204 <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4618      	mov	r0, r3
 8005af0:	f7fb fc26 	bl	8001340 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	4618      	mov	r0, r3
 8005af8:	3708      	adds	r7, #8
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	0800ddcc 	.word	0x0800ddcc

08005b04 <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b082      	sub	sp, #8
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f7ff ffe1 	bl	8005ad4 <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
 8005b12:	2114      	movs	r1, #20
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f007 ff54 	bl	800d9c2 <_ZdlPvj>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3708      	adds	r7, #8
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}

08005b24 <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b082      	sub	sp, #8
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	330c      	adds	r3, #12
 8005b30:	4618      	mov	r0, r3
 8005b32:	f000 f924 	bl	8005d7e <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>
 8005b36:	4602      	mov	r2, r0
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	691b      	ldr	r3, [r3, #16]
 8005b3c:	4619      	mov	r1, r3
 8005b3e:	4610      	mov	r0, r2
 8005b40:	f7ff fbaf 	bl	80052a2 <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>
 8005b44:	bf00      	nop
 8005b46:	3708      	adds	r7, #8
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b086      	sub	sp, #24
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	330c      	adds	r3, #12
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f000 f91d 	bl	8005d98 <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>
 8005b5e:	4602      	mov	r2, r0
 8005b60:	f107 0314 	add.w	r3, r7, #20
 8005b64:	4611      	mov	r1, r2
 8005b66:	4618      	mov	r0, r3
 8005b68:	f7ff fae4 	bl	8005134 <_ZNSaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8005b6c:	f107 0114 	add.w	r1, r7, #20
 8005b70:	f107 030c 	add.w	r3, r7, #12
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	4618      	mov	r0, r3
 8005b78:	f7ff fdb6 	bl	80056e8 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
	this->~_Sp_counted_deleter();
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f7ff ffa9 	bl	8005ad4 <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8005b82:	f107 030c 	add.w	r3, r7, #12
 8005b86:	4618      	mov	r0, r3
 8005b88:	f7ff fb00 	bl	800518c <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	__allocator_type __a(_M_impl._M_alloc());
 8005b8c:	f107 0314 	add.w	r3, r7, #20
 8005b90:	4618      	mov	r0, r3
 8005b92:	f7ff fadc 	bl	800514e <_ZNSaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
      }
 8005b96:	bf00      	nop
 8005b98:	3718      	adds	r7, #24
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}

08005b9e <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept
 8005b9e:	b480      	push	{r7}
 8005ba0:	b083      	sub	sp, #12
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
 8005ba6:	6039      	str	r1, [r7, #0]
        return nullptr;
 8005ba8:	2300      	movs	r3, #0
      }
 8005baa:	4618      	mov	r0, r3
 8005bac:	370c      	adds	r7, #12
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr
	...

08005bb8 <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b082      	sub	sp, #8
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	4a08      	ldr	r2, [pc, #32]	; (8005be4 <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev+0x2c>)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	601a      	str	r2, [r3, #0]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	330c      	adds	r3, #12
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f7ff f9a4 	bl	8004f18 <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f7fb fbb4 	bl	8001340 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3708      	adds	r7, #8
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
 8005be2:	bf00      	nop
 8005be4:	0800dde8 	.word	0x0800dde8

08005be8 <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b082      	sub	sp, #8
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f7ff ffe1 	bl	8005bb8 <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
 8005bf6:	2114      	movs	r1, #20
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f007 fee2 	bl	800d9c2 <_ZdlPvj>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4618      	mov	r0, r3
 8005c02:	3708      	adds	r7, #8
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b082      	sub	sp, #8
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	330c      	adds	r3, #12
 8005c14:	4618      	mov	r0, r3
 8005c16:	f000 f8cd 	bl	8005db4 <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	691b      	ldr	r3, [r3, #16]
 8005c20:	4619      	mov	r1, r3
 8005c22:	4610      	mov	r0, r2
 8005c24:	f7ff f9c7 	bl	8004fb6 <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>
 8005c28:	bf00      	nop
 8005c2a:	3708      	adds	r7, #8
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b086      	sub	sp, #24
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	330c      	adds	r3, #12
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f000 f8c6 	bl	8005dce <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>
 8005c42:	4602      	mov	r2, r0
 8005c44:	f107 0314 	add.w	r3, r7, #20
 8005c48:	4611      	mov	r1, r2
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f7ff f8fc 	bl	8004e48 <_ZNSaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8005c50:	f107 0114 	add.w	r1, r7, #20
 8005c54:	f107 030c 	add.w	r3, r7, #12
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f7ff fc8d 	bl	800557a <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
	this->~_Sp_counted_deleter();
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f7ff ffa9 	bl	8005bb8 <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8005c66:	f107 030c 	add.w	r3, r7, #12
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f7ff f918 	bl	8004ea0 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	__allocator_type __a(_M_impl._M_alloc());
 8005c70:	f107 0314 	add.w	r3, r7, #20
 8005c74:	4618      	mov	r0, r3
 8005c76:	f7ff f8f4 	bl	8004e62 <_ZNSaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
      }
 8005c7a:	bf00      	nop
 8005c7c:	3718      	adds	r7, #24
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}

08005c82 <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept
 8005c82:	b480      	push	{r7}
 8005c84:	b083      	sub	sp, #12
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]
 8005c8a:	6039      	str	r1, [r7, #0]
        return nullptr;
 8005c8c:	2300      	movs	r3, #0
      }
 8005c8e:	4618      	mov	r0, r3
 8005c90:	370c      	adds	r7, #12
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr
	...

08005c9c <_ZNSt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b082      	sub	sp, #8
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	4a08      	ldr	r2, [pc, #32]	; (8005cc8 <_ZNSt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev+0x2c>)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	601a      	str	r2, [r3, #0]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	330c      	adds	r3, #12
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f7fe fff2 	bl	8004c98 <_ZNSt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f7fb fb42 	bl	8001340 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3708      	adds	r7, #8
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	bf00      	nop
 8005cc8:	0800de04 	.word	0x0800de04

08005ccc <_ZNSt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b082      	sub	sp, #8
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f7ff ffe1 	bl	8005c9c <_ZNSt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
 8005cda:	2114      	movs	r1, #20
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f007 fe70 	bl	800d9c2 <_ZdlPvj>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3708      	adds	r7, #8
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}

08005cec <_ZNSt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b082      	sub	sp, #8
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	330c      	adds	r3, #12
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f000 f876 	bl	8005dea <_ZNSt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>
 8005cfe:	4602      	mov	r2, r0
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	691b      	ldr	r3, [r3, #16]
 8005d04:	4619      	mov	r1, r3
 8005d06:	4610      	mov	r0, r2
 8005d08:	f7ff f815 	bl	8004d36 <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>
 8005d0c:	bf00      	nop
 8005d0e:	3708      	adds	r7, #8
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <_ZNSt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b086      	sub	sp, #24
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	330c      	adds	r3, #12
 8005d20:	4618      	mov	r0, r3
 8005d22:	f000 f86f 	bl	8005e04 <_ZNSt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>
 8005d26:	4602      	mov	r2, r0
 8005d28:	f107 0314 	add.w	r3, r7, #20
 8005d2c:	4611      	mov	r1, r2
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f7fe ff4a 	bl	8004bc8 <_ZNSaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8005d34:	f107 0114 	add.w	r1, r7, #20
 8005d38:	f107 030c 	add.w	r3, r7, #12
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f7ff fb67 	bl	8005412 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
	this->~_Sp_counted_deleter();
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f7ff ffa9 	bl	8005c9c <_ZNSt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8005d4a:	f107 030c 	add.w	r3, r7, #12
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f7fe ff66 	bl	8004c20 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	__allocator_type __a(_M_impl._M_alloc());
 8005d54:	f107 0314 	add.w	r3, r7, #20
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f7fe ff42 	bl	8004be2 <_ZNSaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
      }
 8005d5e:	bf00      	nop
 8005d60:	3718      	adds	r7, #24
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}

08005d66 <_ZNSt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept
 8005d66:	b480      	push	{r7}
 8005d68:	b083      	sub	sp, #12
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
 8005d6e:	6039      	str	r1, [r7, #0]
        return nullptr;
 8005d70:	2300      	movs	r3, #0
      }
 8005d72:	4618      	mov	r0, r3
 8005d74:	370c      	adds	r7, #12
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr

08005d7e <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 8005d7e:	b580      	push	{r7, lr}
 8005d80:	b082      	sub	sp, #8
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f000 f849 	bl	8005e20 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	4618      	mov	r0, r3
 8005d92:	3708      	adds	r7, #8
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	3301      	adds	r3, #1
 8005da4:	4618      	mov	r0, r3
 8005da6:	f000 f846 	bl	8005e36 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama27Nokia5110DisplayDataManagerEELb1EE6_S_getERS3_>
 8005daa:	4603      	mov	r3, r0
 8005dac:	4618      	mov	r0, r3
 8005dae:	3708      	adds	r7, #8
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b082      	sub	sp, #8
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f000 f844 	bl	8005e4c <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3708      	adds	r7, #8
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}

08005dce <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 8005dce:	b580      	push	{r7, lr}
 8005dd0:	b082      	sub	sp, #8
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	6078      	str	r0, [r7, #4]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	3301      	adds	r3, #1
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f000 f841 	bl	8005e62 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama6SpriteEELb1EE6_S_getERS3_>
 8005de0:	4603      	mov	r3, r0
 8005de2:	4618      	mov	r0, r3
 8005de4:	3708      	adds	r7, #8
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}

08005dea <_ZNSt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 8005dea:	b580      	push	{r7, lr}
 8005dec:	b082      	sub	sp, #8
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	6078      	str	r0, [r7, #4]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4618      	mov	r0, r3
 8005df6:	f000 f83f 	bl	8005e78 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3708      	adds	r7, #8
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <_ZNSt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b082      	sub	sp, #8
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	3301      	adds	r3, #1
 8005e10:	4618      	mov	r0, r3
 8005e12:	f000 f83c 	bl	8005e8e <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama16Nokia5510DisplayEELb1EE6_S_getERS3_>
 8005e16:	4603      	mov	r3, r0
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3708      	adds	r7, #8
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>:
      _S_get(_Sp_ebo_helper& __eboh)
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
      { return __eboh._M_tp; }
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	370c      	adds	r7, #12
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr

08005e36 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama27Nokia5110DisplayDataManagerEELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 8005e36:	b480      	push	{r7}
 8005e38:	b083      	sub	sp, #12
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4618      	mov	r0, r3
 8005e42:	370c      	adds	r7, #12
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>:
      _S_get(_Sp_ebo_helper& __eboh)
 8005e4c:	b480      	push	{r7}
 8005e4e:	b083      	sub	sp, #12
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
      { return __eboh._M_tp; }
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	4618      	mov	r0, r3
 8005e58:	370c      	adds	r7, #12
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr

08005e62 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama6SpriteEELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 8005e62:	b480      	push	{r7}
 8005e64:	b083      	sub	sp, #12
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	6078      	str	r0, [r7, #4]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	370c      	adds	r7, #12
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>:
      _S_get(_Sp_ebo_helper& __eboh)
 8005e78:	b480      	push	{r7}
 8005e7a:	b083      	sub	sp, #12
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
      { return __eboh._M_tp; }
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	4618      	mov	r0, r3
 8005e84:	370c      	adds	r7, #12
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr

08005e8e <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama16Nokia5510DisplayEELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 8005e8e:	b480      	push	{r7}
 8005e90:	b083      	sub	sp, #12
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	6078      	str	r0, [r7, #4]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4618      	mov	r0, r3
 8005e9a:	370c      	adds	r7, #12
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr

08005ea4 <_ZN4tama7DisplayC1Ev>:
#include "PixelColor.h"
#include "display-data/DisplayData.h"

namespace tama
{
    class Display
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	4a04      	ldr	r2, [pc, #16]	; (8005ec0 <_ZN4tama7DisplayC1Ev+0x1c>)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	601a      	str	r2, [r3, #0]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	370c      	adds	r7, #12
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr
 8005ec0:	0800de3c 	.word	0x0800de3c

08005ec4 <_ZN4tama16Nokia5510DisplayC1ERNS_13DisplayConfigE>:
// Created by grzegorz on 3/25/21.
//

#include "Nokia5510Display.h"

tama::Nokia5510Display::Nokia5510Display(DisplayConfig & displayConfig)
 8005ec4:	b5b0      	push	{r4, r5, r7, lr}
 8005ec6:	b084      	sub	sp, #16
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6039      	str	r1, [r7, #0]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f7ff ffe7 	bl	8005ea4 <_ZN4tama7DisplayC1Ev>
 8005ed6:	4a32      	ldr	r2, [pc, #200]	; (8005fa0 <_ZN4tama16Nokia5510DisplayC1ERNS_13DisplayConfigE+0xdc>)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	601a      	str	r2, [r3, #0]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2254      	movs	r2, #84	; 0x54
 8005ee0:	629a      	str	r2, [r3, #40]	; 0x28
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2230      	movs	r2, #48	; 0x30
 8005ee6:	62da      	str	r2, [r3, #44]	; 0x2c
{
    this->cfg = displayConfig;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	683a      	ldr	r2, [r7, #0]
 8005eec:	1d1c      	adds	r4, r3, #4
 8005eee:	4615      	mov	r5, r2
 8005ef0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ef2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ef4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ef6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ef8:	682b      	ldr	r3, [r5, #0]
 8005efa:	6023      	str	r3, [r4, #0]
    HAL_GPIO_WritePin(cfg.reset_port, cfg.reset_pin, GPIO_PIN_RESET);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6898      	ldr	r0, [r3, #8]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	899b      	ldrh	r3, [r3, #12]
 8005f04:	2200      	movs	r2, #0
 8005f06:	4619      	mov	r1, r3
 8005f08:	f001 f944 	bl	8007194 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8005f0c:	2064      	movs	r0, #100	; 0x64
 8005f0e:	f000 fe8b 	bl	8006c28 <HAL_Delay>
    HAL_GPIO_WritePin(cfg.reset_port, cfg.reset_pin, GPIO_PIN_SET);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6898      	ldr	r0, [r3, #8]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	899b      	ldrh	r3, [r3, #12]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	4619      	mov	r1, r3
 8005f1e:	f001 f939 	bl	8007194 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(cfg.bl_port, cfg.bl_pin, GPIO_PIN_SET);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6918      	ldr	r0, [r3, #16]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	8a9b      	ldrh	r3, [r3, #20]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	4619      	mov	r1, r3
 8005f2e:	f001 f931 	bl	8007194 <HAL_GPIO_WritePin>
    writeCommand(0x21);
 8005f32:	2121      	movs	r1, #33	; 0x21
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f000 f884 	bl	8006042 <_ZN4tama16Nokia5510Display12writeCommandEh>
    writeCommand(0x04);
 8005f3a:	2104      	movs	r1, #4
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 f880 	bl	8006042 <_ZN4tama16Nokia5510Display12writeCommandEh>
    writeCommand(0x10 | 0x04);
 8005f42:	2114      	movs	r1, #20
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f000 f87c 	bl	8006042 <_ZN4tama16Nokia5510Display12writeCommandEh>
    writeCommand(0x80 | 0x41); //contrast
 8005f4a:	21c1      	movs	r1, #193	; 0xc1
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f000 f878 	bl	8006042 <_ZN4tama16Nokia5510Display12writeCommandEh>
    writeCommand(0x20);
 8005f52:	2120      	movs	r1, #32
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f000 f874 	bl	8006042 <_ZN4tama16Nokia5510Display12writeCommandEh>
    writeCommand(0x08 | 0x04);
 8005f5a:	210c      	movs	r1, #12
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f000 f870 	bl	8006042 <_ZN4tama16Nokia5510Display12writeCommandEh>
    for (int i = 0; i < 504; i++)
 8005f62:	2300      	movs	r3, #0
 8005f64:	60fb      	str	r3, [r7, #12]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 8005f6c:	da07      	bge.n	8005f7e <_ZN4tama16Nokia5510DisplayC1ERNS_13DisplayConfigE+0xba>
        displayPixel(0x0);
 8005f6e:	2100      	movs	r1, #0
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f000 f83d 	bl	8005ff0 <_ZN4tama16Nokia5510Display12displayPixelEh>
    for (int i = 0; i < 504; i++)
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	3301      	adds	r3, #1
 8005f7a:	60fb      	str	r3, [r7, #12]
 8005f7c:	e7f3      	b.n	8005f66 <_ZN4tama16Nokia5510DisplayC1ERNS_13DisplayConfigE+0xa2>
    writeCommand(0x20 | 0x00);
 8005f7e:	2120      	movs	r1, #32
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f000 f85e 	bl	8006042 <_ZN4tama16Nokia5510Display12writeCommandEh>
    writeCommand(0x80 | 0); // Wybˇr kolumny
 8005f86:	2180      	movs	r1, #128	; 0x80
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f000 f85a 	bl	8006042 <_ZN4tama16Nokia5510Display12writeCommandEh>
    writeCommand(0x40 | 0); // Wybˇr wiersza
 8005f8e:	2140      	movs	r1, #64	; 0x40
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f000 f856 	bl	8006042 <_ZN4tama16Nokia5510Display12writeCommandEh>
}
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3710      	adds	r7, #16
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bdb0      	pop	{r4, r5, r7, pc}
 8005fa0:	0800de2c 	.word	0x0800de2c

08005fa4 <_ZN4tama16Nokia5510Display11displayDataEv>:

void tama::Nokia5510Display::displayData()
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]

}
 8005fac:	bf00      	nop
 8005fae:	370c      	adds	r7, #12
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr

08005fb8 <_ZN4tama16Nokia5510Display7setDataERNS_11DisplayDataE>:

void tama::Nokia5510Display::setData(DisplayData & pixels)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b084      	sub	sp, #16
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	6039      	str	r1, [r7, #0]


	for (unsigned i = 0; i <504; ++i)
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	60fb      	str	r3, [r7, #12]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 8005fcc:	d20c      	bcs.n	8005fe8 <_ZN4tama16Nokia5510Display7setDataERNS_11DisplayDataE+0x30>
	{
		displayPixel(((uint8_t *)pixels.data)[i]);
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	4413      	add	r3, r2
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	4619      	mov	r1, r3
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f000 f808 	bl	8005ff0 <_ZN4tama16Nokia5510Display12displayPixelEh>
	for (unsigned i = 0; i <504; ++i)
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	3301      	adds	r3, #1
 8005fe4:	60fb      	str	r3, [r7, #12]
 8005fe6:	e7ee      	b.n	8005fc6 <_ZN4tama16Nokia5510Display7setDataERNS_11DisplayDataE+0xe>
//
//    HAL_GPIO_WritePin(cfg.dc_port, cfg.dc_pin, GPIO_PIN_SET);
//    HAL_GPIO_WritePin(cfg.ce_port, cfg.ce_pin, GPIO_PIN_RESET);
//    HAL_SPI_Transmit(cfg.spi, ((uint8_t *)pixels.data + 252), 252, 100);
//    HAL_GPIO_WritePin(cfg.ce_port, cfg.ce_pin, GPIO_PIN_SET);
}
 8005fe8:	bf00      	nop
 8005fea:	3710      	adds	r7, #16
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <_ZN4tama16Nokia5510Display12displayPixelEh>:


void tama::Nokia5510Display::displayPixel(uint8_t pixelData)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b082      	sub	sp, #8
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	460b      	mov	r3, r1
 8005ffa:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(cfg.dc_port, cfg.dc_pin, GPIO_PIN_SET);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6998      	ldr	r0, [r3, #24]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006004:	2201      	movs	r2, #1
 8006006:	4619      	mov	r1, r3
 8006008:	f001 f8c4 	bl	8007194 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(cfg.ce_port, cfg.ce_pin, GPIO_PIN_RESET);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6a18      	ldr	r0, [r3, #32]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	8b9b      	ldrh	r3, [r3, #28]
 8006014:	2200      	movs	r2, #0
 8006016:	4619      	mov	r1, r3
 8006018:	f001 f8bc 	bl	8007194 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(cfg.spi, &pixelData, 1, 100);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6858      	ldr	r0, [r3, #4]
 8006020:	1cf9      	adds	r1, r7, #3
 8006022:	2364      	movs	r3, #100	; 0x64
 8006024:	2201      	movs	r2, #1
 8006026:	f004 f997 	bl	800a358 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(cfg.ce_port, cfg.ce_pin, GPIO_PIN_SET);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6a18      	ldr	r0, [r3, #32]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	8b9b      	ldrh	r3, [r3, #28]
 8006032:	2201      	movs	r2, #1
 8006034:	4619      	mov	r1, r3
 8006036:	f001 f8ad 	bl	8007194 <HAL_GPIO_WritePin>
}
 800603a:	bf00      	nop
 800603c:	3708      	adds	r7, #8
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}

08006042 <_ZN4tama16Nokia5510Display12writeCommandEh>:

void tama::Nokia5510Display::writeCommand(uint8_t cmd)
{
 8006042:	b580      	push	{r7, lr}
 8006044:	b082      	sub	sp, #8
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
 800604a:	460b      	mov	r3, r1
 800604c:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(cfg.dc_port, cfg.dc_pin, GPIO_PIN_RESET);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6998      	ldr	r0, [r3, #24]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006056:	2200      	movs	r2, #0
 8006058:	4619      	mov	r1, r3
 800605a:	f001 f89b 	bl	8007194 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(cfg.ce_port, cfg.ce_pin, GPIO_PIN_RESET);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6a18      	ldr	r0, [r3, #32]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	8b9b      	ldrh	r3, [r3, #28]
 8006066:	2200      	movs	r2, #0
 8006068:	4619      	mov	r1, r3
 800606a:	f001 f893 	bl	8007194 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(cfg.spi, &cmd, 1, 100);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6858      	ldr	r0, [r3, #4]
 8006072:	1cf9      	adds	r1, r7, #3
 8006074:	2364      	movs	r3, #100	; 0x64
 8006076:	2201      	movs	r2, #1
 8006078:	f004 f96e 	bl	800a358 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(cfg.ce_port, cfg.ce_pin, GPIO_PIN_SET);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6a18      	ldr	r0, [r3, #32]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	8b9b      	ldrh	r3, [r3, #28]
 8006084:	2201      	movs	r2, #1
 8006086:	4619      	mov	r1, r3
 8006088:	f001 f884 	bl	8007194 <HAL_GPIO_WritePin>
}
 800608c:	bf00      	nop
 800608e:	3708      	adds	r7, #8
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}

08006094 <_ZN4tama27Nokia5110DisplayDataManager25getActiveSceneDisplayDataESt10shared_ptrINS_7TextureEE>:
//

#include "Nokia5110DisplayDataManager.h"

tama::DisplayData tama::Nokia5110DisplayDataManager::getActiveSceneDisplayData(std::shared_ptr<Texture> texture)
{
 8006094:	b590      	push	{r4, r7, lr}
 8006096:	b08b      	sub	sp, #44	; 0x2c
 8006098:	af00      	add	r7, sp, #0
 800609a:	60f8      	str	r0, [r7, #12]
 800609c:	60b9      	str	r1, [r7, #8]
 800609e:	607a      	str	r2, [r7, #4]
    uint8_t * data = new uint8_t[dataSize];
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	691b      	ldr	r3, [r3, #16]
 80060a4:	4618      	mov	r0, r3
 80060a6:	f007 fc8a 	bl	800d9be <_Znaj>
 80060aa:	4603      	mov	r3, r0
 80060ac:	61fb      	str	r3, [r7, #28]
    for (unsigned i = 0; i < texture->height; ++i)
 80060ae:	2300      	movs	r3, #0
 80060b0:	627b      	str	r3, [r7, #36]	; 0x24
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f7fb f815 	bl	80010e2 <_ZNKSt19__shared_ptr_accessIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80060b8:	4603      	mov	r3, r0
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060be:	429a      	cmp	r2, r3
 80060c0:	bf34      	ite	cc
 80060c2:	2301      	movcc	r3, #1
 80060c4:	2300      	movcs	r3, #0
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d03f      	beq.n	800614c <_ZN4tama27Nokia5110DisplayDataManager25getActiveSceneDisplayDataESt10shared_ptrINS_7TextureEE+0xb8>
    {
        for (unsigned j = 0; j < texture->width; ++j) //i = 32, j = 60
 80060cc:	2300      	movs	r3, #0
 80060ce:	623b      	str	r3, [r7, #32]
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f7fb f806 	bl	80010e2 <_ZNKSt19__shared_ptr_accessIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80060d6:	4603      	mov	r3, r0
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	6a3a      	ldr	r2, [r7, #32]
 80060dc:	429a      	cmp	r2, r3
 80060de:	bf34      	ite	cc
 80060e0:	2301      	movcc	r3, #1
 80060e2:	2300      	movcs	r3, #0
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d02c      	beq.n	8006144 <_ZN4tama27Nokia5110DisplayDataManager25getActiveSceneDisplayDataESt10shared_ptrINS_7TextureEE+0xb0>
        {
            unsigned segmentHeightNumber = i / segmentSize; // 0, 1, .., 7 -> 4
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80060f4:	61bb      	str	r3, [r7, #24]
            unsigned bitInSegment = i % segmentSize; // 0 ... 7 -> 0  // 504 = 7 * 48 + 47
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	685a      	ldr	r2, [r3, #4]
 80060fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8006100:	fb02 f201 	mul.w	r2, r2, r1
 8006104:	1a9b      	subs	r3, r3, r2
 8006106:	617b      	str	r3, [r7, #20]
            setPixel(data[segmentHeightNumber * segmentsInWidth + j], bitInSegment, texture->data[i][j]);
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	68db      	ldr	r3, [r3, #12]
 800610c:	69ba      	ldr	r2, [r7, #24]
 800610e:	fb02 f203 	mul.w	r2, r2, r3
 8006112:	6a3b      	ldr	r3, [r7, #32]
 8006114:	4413      	add	r3, r2
 8006116:	69fa      	ldr	r2, [r7, #28]
 8006118:	18d4      	adds	r4, r2, r3
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f7fa ffe1 	bl	80010e2 <_ZNKSt19__shared_ptr_accessIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8006120:	4603      	mov	r3, r0
 8006122:	68da      	ldr	r2, [r3, #12]
 8006124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	4413      	add	r3, r2
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	6a3b      	ldr	r3, [r7, #32]
 800612e:	4413      	add	r3, r2
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	697a      	ldr	r2, [r7, #20]
 8006134:	4621      	mov	r1, r4
 8006136:	68b8      	ldr	r0, [r7, #8]
 8006138:	f000 f817 	bl	800616a <_ZN4tama27Nokia5110DisplayDataManager8setPixelERhjNS_10PixelColorE>
        for (unsigned j = 0; j < texture->width; ++j) //i = 32, j = 60
 800613c:	6a3b      	ldr	r3, [r7, #32]
 800613e:	3301      	adds	r3, #1
 8006140:	623b      	str	r3, [r7, #32]
 8006142:	e7c5      	b.n	80060d0 <_ZN4tama27Nokia5110DisplayDataManager25getActiveSceneDisplayDataESt10shared_ptrINS_7TextureEE+0x3c>
    for (unsigned i = 0; i < texture->height; ++i)
 8006144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006146:	3301      	adds	r3, #1
 8006148:	627b      	str	r3, [r7, #36]	; 0x24
 800614a:	e7b2      	b.n	80060b2 <_ZN4tama27Nokia5110DisplayDataManager25getActiveSceneDisplayDataESt10shared_ptrINS_7TextureEE+0x1e>
        }
    }
    return DisplayData{data, dataSize, dataFragmentSize};
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	69fa      	ldr	r2, [r7, #28]
 8006150:	601a      	str	r2, [r3, #0]
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	691a      	ldr	r2, [r3, #16]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	605a      	str	r2, [r3, #4]
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	695a      	ldr	r2, [r3, #20]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	609a      	str	r2, [r3, #8]
}
 8006162:	68f8      	ldr	r0, [r7, #12]
 8006164:	372c      	adds	r7, #44	; 0x2c
 8006166:	46bd      	mov	sp, r7
 8006168:	bd90      	pop	{r4, r7, pc}

0800616a <_ZN4tama27Nokia5110DisplayDataManager8setPixelERhjNS_10PixelColorE>:

void tama::Nokia5110DisplayDataManager::setPixel(uint8_t & pixelSegment, unsigned position, tama::PixelColor color)
{
 800616a:	b480      	push	{r7}
 800616c:	b085      	sub	sp, #20
 800616e:	af00      	add	r7, sp, #0
 8006170:	60f8      	str	r0, [r7, #12]
 8006172:	60b9      	str	r1, [r7, #8]
 8006174:	607a      	str	r2, [r7, #4]
 8006176:	70fb      	strb	r3, [r7, #3]
    if (color == PixelColor::WHITE)
 8006178:	78fb      	ldrb	r3, [r7, #3]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d10d      	bne.n	800619a <_ZN4tama27Nokia5110DisplayDataManager8setPixelERhjNS_10PixelColorE+0x30>
    {
       pixelSegment |= 1 << position;
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	b25a      	sxtb	r2, r3
 8006184:	2101      	movs	r1, #1
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	fa01 f303 	lsl.w	r3, r1, r3
 800618c:	b25b      	sxtb	r3, r3
 800618e:	4313      	orrs	r3, r2
 8006190:	b25b      	sxtb	r3, r3
 8006192:	b2da      	uxtb	r2, r3
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	701a      	strb	r2, [r3, #0]
    } else {
        pixelSegment&= ~(1 << position);
    }
}
 8006198:	e00e      	b.n	80061b8 <_ZN4tama27Nokia5110DisplayDataManager8setPixelERhjNS_10PixelColorE+0x4e>
        pixelSegment&= ~(1 << position);
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	b25a      	sxtb	r2, r3
 80061a0:	2101      	movs	r1, #1
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	fa01 f303 	lsl.w	r3, r1, r3
 80061a8:	b25b      	sxtb	r3, r3
 80061aa:	43db      	mvns	r3, r3
 80061ac:	b25b      	sxtb	r3, r3
 80061ae:	4013      	ands	r3, r2
 80061b0:	b25b      	sxtb	r3, r3
 80061b2:	b2da      	uxtb	r2, r3
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	701a      	strb	r2, [r3, #0]
}
 80061b8:	bf00      	nop
 80061ba:	3714      	adds	r7, #20
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr

080061c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b08c      	sub	sp, #48	; 0x30
 80061c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061ca:	f107 031c 	add.w	r3, r7, #28
 80061ce:	2200      	movs	r2, #0
 80061d0:	601a      	str	r2, [r3, #0]
 80061d2:	605a      	str	r2, [r3, #4]
 80061d4:	609a      	str	r2, [r3, #8]
 80061d6:	60da      	str	r2, [r3, #12]
 80061d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80061da:	2300      	movs	r3, #0
 80061dc:	61bb      	str	r3, [r7, #24]
 80061de:	4b6d      	ldr	r3, [pc, #436]	; (8006394 <MX_GPIO_Init+0x1d0>)
 80061e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e2:	4a6c      	ldr	r2, [pc, #432]	; (8006394 <MX_GPIO_Init+0x1d0>)
 80061e4:	f043 0310 	orr.w	r3, r3, #16
 80061e8:	6313      	str	r3, [r2, #48]	; 0x30
 80061ea:	4b6a      	ldr	r3, [pc, #424]	; (8006394 <MX_GPIO_Init+0x1d0>)
 80061ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ee:	f003 0310 	and.w	r3, r3, #16
 80061f2:	61bb      	str	r3, [r7, #24]
 80061f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80061f6:	2300      	movs	r3, #0
 80061f8:	617b      	str	r3, [r7, #20]
 80061fa:	4b66      	ldr	r3, [pc, #408]	; (8006394 <MX_GPIO_Init+0x1d0>)
 80061fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061fe:	4a65      	ldr	r2, [pc, #404]	; (8006394 <MX_GPIO_Init+0x1d0>)
 8006200:	f043 0304 	orr.w	r3, r3, #4
 8006204:	6313      	str	r3, [r2, #48]	; 0x30
 8006206:	4b63      	ldr	r3, [pc, #396]	; (8006394 <MX_GPIO_Init+0x1d0>)
 8006208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800620a:	f003 0304 	and.w	r3, r3, #4
 800620e:	617b      	str	r3, [r7, #20]
 8006210:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006212:	2300      	movs	r3, #0
 8006214:	613b      	str	r3, [r7, #16]
 8006216:	4b5f      	ldr	r3, [pc, #380]	; (8006394 <MX_GPIO_Init+0x1d0>)
 8006218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800621a:	4a5e      	ldr	r2, [pc, #376]	; (8006394 <MX_GPIO_Init+0x1d0>)
 800621c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006220:	6313      	str	r3, [r2, #48]	; 0x30
 8006222:	4b5c      	ldr	r3, [pc, #368]	; (8006394 <MX_GPIO_Init+0x1d0>)
 8006224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800622a:	613b      	str	r3, [r7, #16]
 800622c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800622e:	2300      	movs	r3, #0
 8006230:	60fb      	str	r3, [r7, #12]
 8006232:	4b58      	ldr	r3, [pc, #352]	; (8006394 <MX_GPIO_Init+0x1d0>)
 8006234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006236:	4a57      	ldr	r2, [pc, #348]	; (8006394 <MX_GPIO_Init+0x1d0>)
 8006238:	f043 0301 	orr.w	r3, r3, #1
 800623c:	6313      	str	r3, [r2, #48]	; 0x30
 800623e:	4b55      	ldr	r3, [pc, #340]	; (8006394 <MX_GPIO_Init+0x1d0>)
 8006240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006242:	f003 0301 	and.w	r3, r3, #1
 8006246:	60fb      	str	r3, [r7, #12]
 8006248:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800624a:	2300      	movs	r3, #0
 800624c:	60bb      	str	r3, [r7, #8]
 800624e:	4b51      	ldr	r3, [pc, #324]	; (8006394 <MX_GPIO_Init+0x1d0>)
 8006250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006252:	4a50      	ldr	r2, [pc, #320]	; (8006394 <MX_GPIO_Init+0x1d0>)
 8006254:	f043 0302 	orr.w	r3, r3, #2
 8006258:	6313      	str	r3, [r2, #48]	; 0x30
 800625a:	4b4e      	ldr	r3, [pc, #312]	; (8006394 <MX_GPIO_Init+0x1d0>)
 800625c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800625e:	f003 0302 	and.w	r3, r3, #2
 8006262:	60bb      	str	r3, [r7, #8]
 8006264:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006266:	2300      	movs	r3, #0
 8006268:	607b      	str	r3, [r7, #4]
 800626a:	4b4a      	ldr	r3, [pc, #296]	; (8006394 <MX_GPIO_Init+0x1d0>)
 800626c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800626e:	4a49      	ldr	r2, [pc, #292]	; (8006394 <MX_GPIO_Init+0x1d0>)
 8006270:	f043 0308 	orr.w	r3, r3, #8
 8006274:	6313      	str	r3, [r2, #48]	; 0x30
 8006276:	4b47      	ldr	r3, [pc, #284]	; (8006394 <MX_GPIO_Init+0x1d0>)
 8006278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800627a:	f003 0308 	and.w	r3, r3, #8
 800627e:	607b      	str	r3, [r7, #4]
 8006280:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|RST_Pin|BL_Pin, GPIO_PIN_RESET);
 8006282:	2200      	movs	r2, #0
 8006284:	f44f 7122 	mov.w	r1, #648	; 0x288
 8006288:	4843      	ldr	r0, [pc, #268]	; (8006398 <MX_GPIO_Init+0x1d4>)
 800628a:	f000 ff83 	bl	8007194 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800628e:	2201      	movs	r2, #1
 8006290:	2101      	movs	r1, #1
 8006292:	4842      	ldr	r0, [pc, #264]	; (800639c <MX_GPIO_Init+0x1d8>)
 8006294:	f000 ff7e 	bl	8007194 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 8006298:	2200      	movs	r2, #0
 800629a:	2120      	movs	r1, #32
 800629c:	483f      	ldr	r0, [pc, #252]	; (800639c <MX_GPIO_Init+0x1d8>)
 800629e:	f000 ff79 	bl	8007194 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 80062a2:	2200      	movs	r2, #0
 80062a4:	2102      	movs	r1, #2
 80062a6:	483e      	ldr	r0, [pc, #248]	; (80063a0 <MX_GPIO_Init+0x1dc>)
 80062a8:	f000 ff74 	bl	8007194 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80062ac:	2200      	movs	r2, #0
 80062ae:	f24f 0110 	movw	r1, #61456	; 0xf010
 80062b2:	483c      	ldr	r0, [pc, #240]	; (80063a4 <MX_GPIO_Init+0x1e0>)
 80062b4:	f000 ff6e 	bl	8007194 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 80062b8:	2304      	movs	r3, #4
 80062ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80062bc:	2300      	movs	r3, #0
 80062be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062c0:	2300      	movs	r3, #0
 80062c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 80062c4:	f107 031c 	add.w	r3, r7, #28
 80062c8:	4619      	mov	r1, r3
 80062ca:	4833      	ldr	r0, [pc, #204]	; (8006398 <MX_GPIO_Init+0x1d4>)
 80062cc:	f000 fde0 	bl	8006e90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|RST_Pin|BL_Pin;
 80062d0:	f44f 7322 	mov.w	r3, #648	; 0x288
 80062d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80062d6:	2301      	movs	r3, #1
 80062d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062da:	2300      	movs	r3, #0
 80062dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80062de:	2300      	movs	r3, #0
 80062e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80062e2:	f107 031c 	add.w	r3, r7, #28
 80062e6:	4619      	mov	r1, r3
 80062e8:	482b      	ldr	r0, [pc, #172]	; (8006398 <MX_GPIO_Init+0x1d4>)
 80062ea:	f000 fdd1 	bl	8006e90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 80062ee:	2332      	movs	r3, #50	; 0x32
 80062f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80062f2:	4b2d      	ldr	r3, [pc, #180]	; (80063a8 <MX_GPIO_Init+0x1e4>)
 80062f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062f6:	2300      	movs	r3, #0
 80062f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80062fa:	f107 031c 	add.w	r3, r7, #28
 80062fe:	4619      	mov	r1, r3
 8006300:	4825      	ldr	r0, [pc, #148]	; (8006398 <MX_GPIO_Init+0x1d4>)
 8006302:	f000 fdc5 	bl	8006e90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|DC_Pin;
 8006306:	2321      	movs	r3, #33	; 0x21
 8006308:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800630a:	2301      	movs	r3, #1
 800630c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800630e:	2300      	movs	r3, #0
 8006310:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006312:	2300      	movs	r3, #0
 8006314:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006316:	f107 031c 	add.w	r3, r7, #28
 800631a:	4619      	mov	r1, r3
 800631c:	481f      	ldr	r0, [pc, #124]	; (800639c <MX_GPIO_Init+0x1d8>)
 800631e:	f000 fdb7 	bl	8006e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8006322:	2301      	movs	r3, #1
 8006324:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8006326:	4b20      	ldr	r3, [pc, #128]	; (80063a8 <MX_GPIO_Init+0x1e4>)
 8006328:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800632a:	2300      	movs	r3, #0
 800632c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800632e:	f107 031c 	add.w	r3, r7, #28
 8006332:	4619      	mov	r1, r3
 8006334:	481d      	ldr	r0, [pc, #116]	; (80063ac <MX_GPIO_Init+0x1e8>)
 8006336:	f000 fdab 	bl	8006e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CE_Pin;
 800633a:	2302      	movs	r3, #2
 800633c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800633e:	2301      	movs	r3, #1
 8006340:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006342:	2300      	movs	r3, #0
 8006344:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006346:	2300      	movs	r3, #0
 8006348:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CE_GPIO_Port, &GPIO_InitStruct);
 800634a:	f107 031c 	add.w	r3, r7, #28
 800634e:	4619      	mov	r1, r3
 8006350:	4813      	ldr	r0, [pc, #76]	; (80063a0 <MX_GPIO_Init+0x1dc>)
 8006352:	f000 fd9d 	bl	8006e90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8006356:	f24f 0310 	movw	r3, #61456	; 0xf010
 800635a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800635c:	2301      	movs	r3, #1
 800635e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006360:	2300      	movs	r3, #0
 8006362:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006364:	2300      	movs	r3, #0
 8006366:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006368:	f107 031c 	add.w	r3, r7, #28
 800636c:	4619      	mov	r1, r3
 800636e:	480d      	ldr	r0, [pc, #52]	; (80063a4 <MX_GPIO_Init+0x1e0>)
 8006370:	f000 fd8e 	bl	8006e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8006374:	2320      	movs	r3, #32
 8006376:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006378:	2300      	movs	r3, #0
 800637a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800637c:	2300      	movs	r3, #0
 800637e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8006380:	f107 031c 	add.w	r3, r7, #28
 8006384:	4619      	mov	r1, r3
 8006386:	4807      	ldr	r0, [pc, #28]	; (80063a4 <MX_GPIO_Init+0x1e0>)
 8006388:	f000 fd82 	bl	8006e90 <HAL_GPIO_Init>

}
 800638c:	bf00      	nop
 800638e:	3730      	adds	r7, #48	; 0x30
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}
 8006394:	40023800 	.word	0x40023800
 8006398:	40021000 	.word	0x40021000
 800639c:	40020800 	.word	0x40020800
 80063a0:	40020400 	.word	0x40020400
 80063a4:	40020c00 	.word	0x40020c00
 80063a8:	10120000 	.word	0x10120000
 80063ac:	40020000 	.word	0x40020000

080063b0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80063b4:	4b12      	ldr	r3, [pc, #72]	; (8006400 <MX_I2C1_Init+0x50>)
 80063b6:	4a13      	ldr	r2, [pc, #76]	; (8006404 <MX_I2C1_Init+0x54>)
 80063b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80063ba:	4b11      	ldr	r3, [pc, #68]	; (8006400 <MX_I2C1_Init+0x50>)
 80063bc:	4a12      	ldr	r2, [pc, #72]	; (8006408 <MX_I2C1_Init+0x58>)
 80063be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80063c0:	4b0f      	ldr	r3, [pc, #60]	; (8006400 <MX_I2C1_Init+0x50>)
 80063c2:	2200      	movs	r2, #0
 80063c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80063c6:	4b0e      	ldr	r3, [pc, #56]	; (8006400 <MX_I2C1_Init+0x50>)
 80063c8:	2200      	movs	r2, #0
 80063ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80063cc:	4b0c      	ldr	r3, [pc, #48]	; (8006400 <MX_I2C1_Init+0x50>)
 80063ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80063d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80063d4:	4b0a      	ldr	r3, [pc, #40]	; (8006400 <MX_I2C1_Init+0x50>)
 80063d6:	2200      	movs	r2, #0
 80063d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80063da:	4b09      	ldr	r3, [pc, #36]	; (8006400 <MX_I2C1_Init+0x50>)
 80063dc:	2200      	movs	r2, #0
 80063de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80063e0:	4b07      	ldr	r3, [pc, #28]	; (8006400 <MX_I2C1_Init+0x50>)
 80063e2:	2200      	movs	r2, #0
 80063e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80063e6:	4b06      	ldr	r3, [pc, #24]	; (8006400 <MX_I2C1_Init+0x50>)
 80063e8:	2200      	movs	r2, #0
 80063ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80063ec:	4804      	ldr	r0, [pc, #16]	; (8006400 <MX_I2C1_Init+0x50>)
 80063ee:	f002 fbdb 	bl	8008ba8 <HAL_I2C_Init>
 80063f2:	4603      	mov	r3, r0
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d001      	beq.n	80063fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80063f8:	f000 fa28 	bl	800684c <Error_Handler>
  }

}
 80063fc:	bf00      	nop
 80063fe:	bd80      	pop	{r7, pc}
 8006400:	200000c8 	.word	0x200000c8
 8006404:	40005400 	.word	0x40005400
 8006408:	000186a0 	.word	0x000186a0

0800640c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b08a      	sub	sp, #40	; 0x28
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006414:	f107 0314 	add.w	r3, r7, #20
 8006418:	2200      	movs	r2, #0
 800641a:	601a      	str	r2, [r3, #0]
 800641c:	605a      	str	r2, [r3, #4]
 800641e:	609a      	str	r2, [r3, #8]
 8006420:	60da      	str	r2, [r3, #12]
 8006422:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a19      	ldr	r2, [pc, #100]	; (8006490 <HAL_I2C_MspInit+0x84>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d12c      	bne.n	8006488 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800642e:	2300      	movs	r3, #0
 8006430:	613b      	str	r3, [r7, #16]
 8006432:	4b18      	ldr	r3, [pc, #96]	; (8006494 <HAL_I2C_MspInit+0x88>)
 8006434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006436:	4a17      	ldr	r2, [pc, #92]	; (8006494 <HAL_I2C_MspInit+0x88>)
 8006438:	f043 0302 	orr.w	r3, r3, #2
 800643c:	6313      	str	r3, [r2, #48]	; 0x30
 800643e:	4b15      	ldr	r3, [pc, #84]	; (8006494 <HAL_I2C_MspInit+0x88>)
 8006440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006442:	f003 0302 	and.w	r3, r3, #2
 8006446:	613b      	str	r3, [r7, #16]
 8006448:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800644a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800644e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006450:	2312      	movs	r3, #18
 8006452:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006454:	2301      	movs	r3, #1
 8006456:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006458:	2300      	movs	r3, #0
 800645a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800645c:	2304      	movs	r3, #4
 800645e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006460:	f107 0314 	add.w	r3, r7, #20
 8006464:	4619      	mov	r1, r3
 8006466:	480c      	ldr	r0, [pc, #48]	; (8006498 <HAL_I2C_MspInit+0x8c>)
 8006468:	f000 fd12 	bl	8006e90 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800646c:	2300      	movs	r3, #0
 800646e:	60fb      	str	r3, [r7, #12]
 8006470:	4b08      	ldr	r3, [pc, #32]	; (8006494 <HAL_I2C_MspInit+0x88>)
 8006472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006474:	4a07      	ldr	r2, [pc, #28]	; (8006494 <HAL_I2C_MspInit+0x88>)
 8006476:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800647a:	6413      	str	r3, [r2, #64]	; 0x40
 800647c:	4b05      	ldr	r3, [pc, #20]	; (8006494 <HAL_I2C_MspInit+0x88>)
 800647e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006480:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006484:	60fb      	str	r3, [r7, #12]
 8006486:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8006488:	bf00      	nop
 800648a:	3728      	adds	r7, #40	; 0x28
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}
 8006490:	40005400 	.word	0x40005400
 8006494:	40023800 	.word	0x40023800
 8006498:	40020400 	.word	0x40020400

0800649c <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
I2S_HandleTypeDef hi2s3;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	af00      	add	r7, sp, #0

  hi2s2.Instance = SPI2;
 80064a0:	4b12      	ldr	r3, [pc, #72]	; (80064ec <MX_I2S2_Init+0x50>)
 80064a2:	4a13      	ldr	r2, [pc, #76]	; (80064f0 <MX_I2S2_Init+0x54>)
 80064a4:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80064a6:	4b11      	ldr	r3, [pc, #68]	; (80064ec <MX_I2S2_Init+0x50>)
 80064a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064ac:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80064ae:	4b0f      	ldr	r3, [pc, #60]	; (80064ec <MX_I2S2_Init+0x50>)
 80064b0:	2200      	movs	r2, #0
 80064b2:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80064b4:	4b0d      	ldr	r3, [pc, #52]	; (80064ec <MX_I2S2_Init+0x50>)
 80064b6:	2200      	movs	r2, #0
 80064b8:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80064ba:	4b0c      	ldr	r3, [pc, #48]	; (80064ec <MX_I2S2_Init+0x50>)
 80064bc:	2200      	movs	r2, #0
 80064be:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80064c0:	4b0a      	ldr	r3, [pc, #40]	; (80064ec <MX_I2S2_Init+0x50>)
 80064c2:	4a0c      	ldr	r2, [pc, #48]	; (80064f4 <MX_I2S2_Init+0x58>)
 80064c4:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80064c6:	4b09      	ldr	r3, [pc, #36]	; (80064ec <MX_I2S2_Init+0x50>)
 80064c8:	2200      	movs	r2, #0
 80064ca:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80064cc:	4b07      	ldr	r3, [pc, #28]	; (80064ec <MX_I2S2_Init+0x50>)
 80064ce:	2200      	movs	r2, #0
 80064d0:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80064d2:	4b06      	ldr	r3, [pc, #24]	; (80064ec <MX_I2S2_Init+0x50>)
 80064d4:	2201      	movs	r2, #1
 80064d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80064d8:	4804      	ldr	r0, [pc, #16]	; (80064ec <MX_I2S2_Init+0x50>)
 80064da:	f002 fc9d 	bl	8008e18 <HAL_I2S_Init>
 80064de:	4603      	mov	r3, r0
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d001      	beq.n	80064e8 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 80064e4:	f000 f9b2 	bl	800684c <Error_Handler>
  }

}
 80064e8:	bf00      	nop
 80064ea:	bd80      	pop	{r7, pc}
 80064ec:	2000011c 	.word	0x2000011c
 80064f0:	40003800 	.word	0x40003800
 80064f4:	00017700 	.word	0x00017700

080064f8 <MX_I2S3_Init>:
/* I2S3 init function */
void MX_I2S3_Init(void)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	af00      	add	r7, sp, #0

  hi2s3.Instance = SPI3;
 80064fc:	4b13      	ldr	r3, [pc, #76]	; (800654c <MX_I2S3_Init+0x54>)
 80064fe:	4a14      	ldr	r2, [pc, #80]	; (8006550 <MX_I2S3_Init+0x58>)
 8006500:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8006502:	4b12      	ldr	r3, [pc, #72]	; (800654c <MX_I2S3_Init+0x54>)
 8006504:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006508:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800650a:	4b10      	ldr	r3, [pc, #64]	; (800654c <MX_I2S3_Init+0x54>)
 800650c:	2200      	movs	r2, #0
 800650e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8006510:	4b0e      	ldr	r3, [pc, #56]	; (800654c <MX_I2S3_Init+0x54>)
 8006512:	2200      	movs	r2, #0
 8006514:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8006516:	4b0d      	ldr	r3, [pc, #52]	; (800654c <MX_I2S3_Init+0x54>)
 8006518:	f44f 7200 	mov.w	r2, #512	; 0x200
 800651c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800651e:	4b0b      	ldr	r3, [pc, #44]	; (800654c <MX_I2S3_Init+0x54>)
 8006520:	4a0c      	ldr	r2, [pc, #48]	; (8006554 <MX_I2S3_Init+0x5c>)
 8006522:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8006524:	4b09      	ldr	r3, [pc, #36]	; (800654c <MX_I2S3_Init+0x54>)
 8006526:	2200      	movs	r2, #0
 8006528:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800652a:	4b08      	ldr	r3, [pc, #32]	; (800654c <MX_I2S3_Init+0x54>)
 800652c:	2200      	movs	r2, #0
 800652e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8006530:	4b06      	ldr	r3, [pc, #24]	; (800654c <MX_I2S3_Init+0x54>)
 8006532:	2200      	movs	r2, #0
 8006534:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8006536:	4805      	ldr	r0, [pc, #20]	; (800654c <MX_I2S3_Init+0x54>)
 8006538:	f002 fc6e 	bl	8008e18 <HAL_I2S_Init>
 800653c:	4603      	mov	r3, r0
 800653e:	2b00      	cmp	r3, #0
 8006540:	d001      	beq.n	8006546 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8006542:	f000 f983 	bl	800684c <Error_Handler>
  }

}
 8006546:	bf00      	nop
 8006548:	bd80      	pop	{r7, pc}
 800654a:	bf00      	nop
 800654c:	20000164 	.word	0x20000164
 8006550:	40003c00 	.word	0x40003c00
 8006554:	00017700 	.word	0x00017700

08006558 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b08e      	sub	sp, #56	; 0x38
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006560:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006564:	2200      	movs	r2, #0
 8006566:	601a      	str	r2, [r3, #0]
 8006568:	605a      	str	r2, [r3, #4]
 800656a:	609a      	str	r2, [r3, #8]
 800656c:	60da      	str	r2, [r3, #12]
 800656e:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI2)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a59      	ldr	r2, [pc, #356]	; (80066dc <HAL_I2S_MspInit+0x184>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d15b      	bne.n	8006632 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800657a:	2300      	movs	r3, #0
 800657c:	623b      	str	r3, [r7, #32]
 800657e:	4b58      	ldr	r3, [pc, #352]	; (80066e0 <HAL_I2S_MspInit+0x188>)
 8006580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006582:	4a57      	ldr	r2, [pc, #348]	; (80066e0 <HAL_I2S_MspInit+0x188>)
 8006584:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006588:	6413      	str	r3, [r2, #64]	; 0x40
 800658a:	4b55      	ldr	r3, [pc, #340]	; (80066e0 <HAL_I2S_MspInit+0x188>)
 800658c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006592:	623b      	str	r3, [r7, #32]
 8006594:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006596:	2300      	movs	r3, #0
 8006598:	61fb      	str	r3, [r7, #28]
 800659a:	4b51      	ldr	r3, [pc, #324]	; (80066e0 <HAL_I2S_MspInit+0x188>)
 800659c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800659e:	4a50      	ldr	r2, [pc, #320]	; (80066e0 <HAL_I2S_MspInit+0x188>)
 80065a0:	f043 0304 	orr.w	r3, r3, #4
 80065a4:	6313      	str	r3, [r2, #48]	; 0x30
 80065a6:	4b4e      	ldr	r3, [pc, #312]	; (80066e0 <HAL_I2S_MspInit+0x188>)
 80065a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065aa:	f003 0304 	and.w	r3, r3, #4
 80065ae:	61fb      	str	r3, [r7, #28]
 80065b0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80065b2:	2300      	movs	r3, #0
 80065b4:	61bb      	str	r3, [r7, #24]
 80065b6:	4b4a      	ldr	r3, [pc, #296]	; (80066e0 <HAL_I2S_MspInit+0x188>)
 80065b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ba:	4a49      	ldr	r2, [pc, #292]	; (80066e0 <HAL_I2S_MspInit+0x188>)
 80065bc:	f043 0302 	orr.w	r3, r3, #2
 80065c0:	6313      	str	r3, [r2, #48]	; 0x30
 80065c2:	4b47      	ldr	r3, [pc, #284]	; (80066e0 <HAL_I2S_MspInit+0x188>)
 80065c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c6:	f003 0302 	and.w	r3, r3, #2
 80065ca:	61bb      	str	r3, [r7, #24]
 80065cc:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80065ce:	2304      	movs	r3, #4
 80065d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065d2:	2302      	movs	r3, #2
 80065d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065d6:	2300      	movs	r3, #0
 80065d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065da:	2300      	movs	r3, #0
 80065dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 80065de:	2306      	movs	r3, #6
 80065e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80065e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065e6:	4619      	mov	r1, r3
 80065e8:	483e      	ldr	r0, [pc, #248]	; (80066e4 <HAL_I2S_MspInit+0x18c>)
 80065ea:	f000 fc51 	bl	8006e90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80065ee:	2308      	movs	r3, #8
 80065f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065f2:	2302      	movs	r3, #2
 80065f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065f6:	2300      	movs	r3, #0
 80065f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065fa:	2300      	movs	r3, #0
 80065fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80065fe:	2305      	movs	r3, #5
 8006600:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8006602:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006606:	4619      	mov	r1, r3
 8006608:	4836      	ldr	r0, [pc, #216]	; (80066e4 <HAL_I2S_MspInit+0x18c>)
 800660a:	f000 fc41 	bl	8006e90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 800660e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006612:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006614:	2302      	movs	r3, #2
 8006616:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006618:	2300      	movs	r3, #0
 800661a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800661c:	2300      	movs	r3, #0
 800661e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006620:	2305      	movs	r3, #5
 8006622:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006624:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006628:	4619      	mov	r1, r3
 800662a:	482f      	ldr	r0, [pc, #188]	; (80066e8 <HAL_I2S_MspInit+0x190>)
 800662c:	f000 fc30 	bl	8006e90 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8006630:	e04f      	b.n	80066d2 <HAL_I2S_MspInit+0x17a>
  else if(i2sHandle->Instance==SPI3)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a2d      	ldr	r2, [pc, #180]	; (80066ec <HAL_I2S_MspInit+0x194>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d14a      	bne.n	80066d2 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800663c:	2300      	movs	r3, #0
 800663e:	617b      	str	r3, [r7, #20]
 8006640:	4b27      	ldr	r3, [pc, #156]	; (80066e0 <HAL_I2S_MspInit+0x188>)
 8006642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006644:	4a26      	ldr	r2, [pc, #152]	; (80066e0 <HAL_I2S_MspInit+0x188>)
 8006646:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800664a:	6413      	str	r3, [r2, #64]	; 0x40
 800664c:	4b24      	ldr	r3, [pc, #144]	; (80066e0 <HAL_I2S_MspInit+0x188>)
 800664e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006650:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006654:	617b      	str	r3, [r7, #20]
 8006656:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006658:	2300      	movs	r3, #0
 800665a:	613b      	str	r3, [r7, #16]
 800665c:	4b20      	ldr	r3, [pc, #128]	; (80066e0 <HAL_I2S_MspInit+0x188>)
 800665e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006660:	4a1f      	ldr	r2, [pc, #124]	; (80066e0 <HAL_I2S_MspInit+0x188>)
 8006662:	f043 0301 	orr.w	r3, r3, #1
 8006666:	6313      	str	r3, [r2, #48]	; 0x30
 8006668:	4b1d      	ldr	r3, [pc, #116]	; (80066e0 <HAL_I2S_MspInit+0x188>)
 800666a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800666c:	f003 0301 	and.w	r3, r3, #1
 8006670:	613b      	str	r3, [r7, #16]
 8006672:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006674:	2300      	movs	r3, #0
 8006676:	60fb      	str	r3, [r7, #12]
 8006678:	4b19      	ldr	r3, [pc, #100]	; (80066e0 <HAL_I2S_MspInit+0x188>)
 800667a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800667c:	4a18      	ldr	r2, [pc, #96]	; (80066e0 <HAL_I2S_MspInit+0x188>)
 800667e:	f043 0304 	orr.w	r3, r3, #4
 8006682:	6313      	str	r3, [r2, #48]	; 0x30
 8006684:	4b16      	ldr	r3, [pc, #88]	; (80066e0 <HAL_I2S_MspInit+0x188>)
 8006686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006688:	f003 0304 	and.w	r3, r3, #4
 800668c:	60fb      	str	r3, [r7, #12]
 800668e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8006690:	2310      	movs	r3, #16
 8006692:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006694:	2302      	movs	r3, #2
 8006696:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006698:	2300      	movs	r3, #0
 800669a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800669c:	2300      	movs	r3, #0
 800669e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80066a0:	2306      	movs	r3, #6
 80066a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80066a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066a8:	4619      	mov	r1, r3
 80066aa:	4811      	ldr	r0, [pc, #68]	; (80066f0 <HAL_I2S_MspInit+0x198>)
 80066ac:	f000 fbf0 	bl	8006e90 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80066b0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80066b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066b6:	2302      	movs	r3, #2
 80066b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066ba:	2300      	movs	r3, #0
 80066bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066be:	2300      	movs	r3, #0
 80066c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80066c2:	2306      	movs	r3, #6
 80066c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80066c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066ca:	4619      	mov	r1, r3
 80066cc:	4805      	ldr	r0, [pc, #20]	; (80066e4 <HAL_I2S_MspInit+0x18c>)
 80066ce:	f000 fbdf 	bl	8006e90 <HAL_GPIO_Init>
}
 80066d2:	bf00      	nop
 80066d4:	3738      	adds	r7, #56	; 0x38
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	bf00      	nop
 80066dc:	40003800 	.word	0x40003800
 80066e0:	40023800 	.word	0x40023800
 80066e4:	40020800 	.word	0x40020800
 80066e8:	40020400 	.word	0x40020400
 80066ec:	40003c00 	.word	0x40003c00
 80066f0:	40020000 	.word	0x40020000

080066f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b082      	sub	sp, #8
 80066f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80066fa:	f000 fa23 	bl	8006b44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80066fe:	f000 f813 	bl	8006728 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006702:	f7ff fd5f 	bl	80061c4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8006706:	f7ff fe53 	bl	80063b0 <MX_I2C1_Init>
  MX_I2S2_Init();
 800670a:	f7ff fec7 	bl	800649c <MX_I2S2_Init>
  MX_I2S3_Init();
 800670e:	f7ff fef3 	bl	80064f8 <MX_I2S3_Init>
  MX_SPI1_Init();
 8006712:	f000 f8a3 	bl	800685c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8006716:	f006 fe45 	bl	800d3a4 <MX_USB_HOST_Init>
//

//  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);

    tama::Main tamaMain;
  	tamaMain.run();
 800671a:	1d3b      	adds	r3, r7, #4
 800671c:	4618      	mov	r0, r3
 800671e:	f7fc ff05 	bl	800352c <_ZN4tama4Main3runEv>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8006722:	f006 fe65 	bl	800d3f0 <MX_USB_HOST_Process>
 8006726:	e7fc      	b.n	8006722 <main+0x2e>

08006728 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b09a      	sub	sp, #104	; 0x68
 800672c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800672e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006732:	2230      	movs	r2, #48	; 0x30
 8006734:	2100      	movs	r1, #0
 8006736:	4618      	mov	r0, r3
 8006738:	f007 f9b8 	bl	800daac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800673c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006740:	2200      	movs	r2, #0
 8006742:	601a      	str	r2, [r3, #0]
 8006744:	605a      	str	r2, [r3, #4]
 8006746:	609a      	str	r2, [r3, #8]
 8006748:	60da      	str	r2, [r3, #12]
 800674a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800674c:	f107 030c 	add.w	r3, r7, #12
 8006750:	2200      	movs	r2, #0
 8006752:	601a      	str	r2, [r3, #0]
 8006754:	605a      	str	r2, [r3, #4]
 8006756:	609a      	str	r2, [r3, #8]
 8006758:	60da      	str	r2, [r3, #12]
 800675a:	611a      	str	r2, [r3, #16]
 800675c:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800675e:	2300      	movs	r3, #0
 8006760:	60bb      	str	r3, [r7, #8]
 8006762:	4b38      	ldr	r3, [pc, #224]	; (8006844 <_Z18SystemClock_Configv+0x11c>)
 8006764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006766:	4a37      	ldr	r2, [pc, #220]	; (8006844 <_Z18SystemClock_Configv+0x11c>)
 8006768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800676c:	6413      	str	r3, [r2, #64]	; 0x40
 800676e:	4b35      	ldr	r3, [pc, #212]	; (8006844 <_Z18SystemClock_Configv+0x11c>)
 8006770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006776:	60bb      	str	r3, [r7, #8]
 8006778:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800677a:	2300      	movs	r3, #0
 800677c:	607b      	str	r3, [r7, #4]
 800677e:	4b32      	ldr	r3, [pc, #200]	; (8006848 <_Z18SystemClock_Configv+0x120>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a31      	ldr	r2, [pc, #196]	; (8006848 <_Z18SystemClock_Configv+0x120>)
 8006784:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006788:	6013      	str	r3, [r2, #0]
 800678a:	4b2f      	ldr	r3, [pc, #188]	; (8006848 <_Z18SystemClock_Configv+0x120>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006792:	607b      	str	r3, [r7, #4]
 8006794:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006796:	2301      	movs	r3, #1
 8006798:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800679a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800679e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80067a0:	2302      	movs	r3, #2
 80067a2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80067a4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80067a8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 80067aa:	2304      	movs	r3, #4
 80067ac:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 80067ae:	23c0      	movs	r3, #192	; 0xc0
 80067b0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80067b2:	2304      	movs	r3, #4
 80067b4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80067b6:	2308      	movs	r3, #8
 80067b8:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80067ba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80067be:	4618      	mov	r0, r3
 80067c0:	f002 ffca 	bl	8009758 <HAL_RCC_OscConfig>
 80067c4:	4603      	mov	r3, r0
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	bf14      	ite	ne
 80067ca:	2301      	movne	r3, #1
 80067cc:	2300      	moveq	r3, #0
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d001      	beq.n	80067d8 <_Z18SystemClock_Configv+0xb0>
  {
    Error_Handler();
 80067d4:	f000 f83a 	bl	800684c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80067d8:	230f      	movs	r3, #15
 80067da:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80067dc:	2302      	movs	r3, #2
 80067de:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80067e0:	2300      	movs	r3, #0
 80067e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80067e4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80067e8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80067ea:	2300      	movs	r3, #0
 80067ec:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80067ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067f2:	2103      	movs	r1, #3
 80067f4:	4618      	mov	r0, r3
 80067f6:	f003 fa1f 	bl	8009c38 <HAL_RCC_ClockConfig>
 80067fa:	4603      	mov	r3, r0
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	bf14      	ite	ne
 8006800:	2301      	movne	r3, #1
 8006802:	2300      	moveq	r3, #0
 8006804:	b2db      	uxtb	r3, r3
 8006806:	2b00      	cmp	r3, #0
 8006808:	d001      	beq.n	800680e <_Z18SystemClock_Configv+0xe6>
  {
    Error_Handler();
 800680a:	f000 f81f 	bl	800684c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800680e:	2301      	movs	r3, #1
 8006810:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8006812:	23c8      	movs	r3, #200	; 0xc8
 8006814:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8006816:	2305      	movs	r3, #5
 8006818:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800681a:	2302      	movs	r3, #2
 800681c:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800681e:	f107 030c 	add.w	r3, r7, #12
 8006822:	4618      	mov	r0, r3
 8006824:	f003 fbe6 	bl	8009ff4 <HAL_RCCEx_PeriphCLKConfig>
 8006828:	4603      	mov	r3, r0
 800682a:	2b00      	cmp	r3, #0
 800682c:	bf14      	ite	ne
 800682e:	2301      	movne	r3, #1
 8006830:	2300      	moveq	r3, #0
 8006832:	b2db      	uxtb	r3, r3
 8006834:	2b00      	cmp	r3, #0
 8006836:	d001      	beq.n	800683c <_Z18SystemClock_Configv+0x114>
  {
    Error_Handler();
 8006838:	f000 f808 	bl	800684c <Error_Handler>
  }
}
 800683c:	bf00      	nop
 800683e:	3768      	adds	r7, #104	; 0x68
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}
 8006844:	40023800 	.word	0x40023800
 8006848:	40007000 	.word	0x40007000

0800684c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800684c:	b480      	push	{r7}
 800684e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006850:	bf00      	nop
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr
	...

0800685c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8006860:	4b17      	ldr	r3, [pc, #92]	; (80068c0 <MX_SPI1_Init+0x64>)
 8006862:	4a18      	ldr	r2, [pc, #96]	; (80068c4 <MX_SPI1_Init+0x68>)
 8006864:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8006866:	4b16      	ldr	r3, [pc, #88]	; (80068c0 <MX_SPI1_Init+0x64>)
 8006868:	f44f 7282 	mov.w	r2, #260	; 0x104
 800686c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800686e:	4b14      	ldr	r3, [pc, #80]	; (80068c0 <MX_SPI1_Init+0x64>)
 8006870:	2200      	movs	r2, #0
 8006872:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8006874:	4b12      	ldr	r3, [pc, #72]	; (80068c0 <MX_SPI1_Init+0x64>)
 8006876:	2200      	movs	r2, #0
 8006878:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800687a:	4b11      	ldr	r3, [pc, #68]	; (80068c0 <MX_SPI1_Init+0x64>)
 800687c:	2200      	movs	r2, #0
 800687e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006880:	4b0f      	ldr	r3, [pc, #60]	; (80068c0 <MX_SPI1_Init+0x64>)
 8006882:	2200      	movs	r2, #0
 8006884:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8006886:	4b0e      	ldr	r3, [pc, #56]	; (80068c0 <MX_SPI1_Init+0x64>)
 8006888:	f44f 7200 	mov.w	r2, #512	; 0x200
 800688c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800688e:	4b0c      	ldr	r3, [pc, #48]	; (80068c0 <MX_SPI1_Init+0x64>)
 8006890:	2220      	movs	r2, #32
 8006892:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006894:	4b0a      	ldr	r3, [pc, #40]	; (80068c0 <MX_SPI1_Init+0x64>)
 8006896:	2200      	movs	r2, #0
 8006898:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800689a:	4b09      	ldr	r3, [pc, #36]	; (80068c0 <MX_SPI1_Init+0x64>)
 800689c:	2200      	movs	r2, #0
 800689e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80068a0:	4b07      	ldr	r3, [pc, #28]	; (80068c0 <MX_SPI1_Init+0x64>)
 80068a2:	2200      	movs	r2, #0
 80068a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80068a6:	4b06      	ldr	r3, [pc, #24]	; (80068c0 <MX_SPI1_Init+0x64>)
 80068a8:	220a      	movs	r2, #10
 80068aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80068ac:	4804      	ldr	r0, [pc, #16]	; (80068c0 <MX_SPI1_Init+0x64>)
 80068ae:	f003 fcef 	bl	800a290 <HAL_SPI_Init>
 80068b2:	4603      	mov	r3, r0
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d001      	beq.n	80068bc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80068b8:	f7ff ffc8 	bl	800684c <Error_Handler>
  }

}
 80068bc:	bf00      	nop
 80068be:	bd80      	pop	{r7, pc}
 80068c0:	200001ac 	.word	0x200001ac
 80068c4:	40013000 	.word	0x40013000

080068c8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b08a      	sub	sp, #40	; 0x28
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068d0:	f107 0314 	add.w	r3, r7, #20
 80068d4:	2200      	movs	r2, #0
 80068d6:	601a      	str	r2, [r3, #0]
 80068d8:	605a      	str	r2, [r3, #4]
 80068da:	609a      	str	r2, [r3, #8]
 80068dc:	60da      	str	r2, [r3, #12]
 80068de:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a19      	ldr	r2, [pc, #100]	; (800694c <HAL_SPI_MspInit+0x84>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d12b      	bne.n	8006942 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80068ea:	2300      	movs	r3, #0
 80068ec:	613b      	str	r3, [r7, #16]
 80068ee:	4b18      	ldr	r3, [pc, #96]	; (8006950 <HAL_SPI_MspInit+0x88>)
 80068f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068f2:	4a17      	ldr	r2, [pc, #92]	; (8006950 <HAL_SPI_MspInit+0x88>)
 80068f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80068f8:	6453      	str	r3, [r2, #68]	; 0x44
 80068fa:	4b15      	ldr	r3, [pc, #84]	; (8006950 <HAL_SPI_MspInit+0x88>)
 80068fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006902:	613b      	str	r3, [r7, #16]
 8006904:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006906:	2300      	movs	r3, #0
 8006908:	60fb      	str	r3, [r7, #12]
 800690a:	4b11      	ldr	r3, [pc, #68]	; (8006950 <HAL_SPI_MspInit+0x88>)
 800690c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800690e:	4a10      	ldr	r2, [pc, #64]	; (8006950 <HAL_SPI_MspInit+0x88>)
 8006910:	f043 0301 	orr.w	r3, r3, #1
 8006914:	6313      	str	r3, [r2, #48]	; 0x30
 8006916:	4b0e      	ldr	r3, [pc, #56]	; (8006950 <HAL_SPI_MspInit+0x88>)
 8006918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800691a:	f003 0301 	and.w	r3, r3, #1
 800691e:	60fb      	str	r3, [r7, #12]
 8006920:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8006922:	23e0      	movs	r3, #224	; 0xe0
 8006924:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006926:	2302      	movs	r3, #2
 8006928:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800692a:	2300      	movs	r3, #0
 800692c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800692e:	2303      	movs	r3, #3
 8006930:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006932:	2305      	movs	r3, #5
 8006934:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006936:	f107 0314 	add.w	r3, r7, #20
 800693a:	4619      	mov	r1, r3
 800693c:	4805      	ldr	r0, [pc, #20]	; (8006954 <HAL_SPI_MspInit+0x8c>)
 800693e:	f000 faa7 	bl	8006e90 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8006942:	bf00      	nop
 8006944:	3728      	adds	r7, #40	; 0x28
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	40013000 	.word	0x40013000
 8006950:	40023800 	.word	0x40023800
 8006954:	40020000 	.word	0x40020000

08006958 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b082      	sub	sp, #8
 800695c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800695e:	2300      	movs	r3, #0
 8006960:	607b      	str	r3, [r7, #4]
 8006962:	4b10      	ldr	r3, [pc, #64]	; (80069a4 <HAL_MspInit+0x4c>)
 8006964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006966:	4a0f      	ldr	r2, [pc, #60]	; (80069a4 <HAL_MspInit+0x4c>)
 8006968:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800696c:	6453      	str	r3, [r2, #68]	; 0x44
 800696e:	4b0d      	ldr	r3, [pc, #52]	; (80069a4 <HAL_MspInit+0x4c>)
 8006970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006976:	607b      	str	r3, [r7, #4]
 8006978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800697a:	2300      	movs	r3, #0
 800697c:	603b      	str	r3, [r7, #0]
 800697e:	4b09      	ldr	r3, [pc, #36]	; (80069a4 <HAL_MspInit+0x4c>)
 8006980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006982:	4a08      	ldr	r2, [pc, #32]	; (80069a4 <HAL_MspInit+0x4c>)
 8006984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006988:	6413      	str	r3, [r2, #64]	; 0x40
 800698a:	4b06      	ldr	r3, [pc, #24]	; (80069a4 <HAL_MspInit+0x4c>)
 800698c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800698e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006992:	603b      	str	r3, [r7, #0]
 8006994:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8006996:	2007      	movs	r0, #7
 8006998:	f000 fa38 	bl	8006e0c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800699c:	bf00      	nop
 800699e:	3708      	adds	r7, #8
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}
 80069a4:	40023800 	.word	0x40023800

080069a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80069a8:	b480      	push	{r7}
 80069aa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80069ac:	bf00      	nop
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr

080069b6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80069b6:	b480      	push	{r7}
 80069b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80069ba:	e7fe      	b.n	80069ba <MemManage_Handler+0x4>

080069bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80069bc:	b480      	push	{r7}
 80069be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80069c0:	e7fe      	b.n	80069c0 <BusFault_Handler+0x4>

080069c2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80069c2:	b480      	push	{r7}
 80069c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80069c6:	e7fe      	b.n	80069c6 <UsageFault_Handler+0x4>

080069c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80069c8:	b480      	push	{r7}
 80069ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80069cc:	bf00      	nop
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr

080069d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80069d6:	b480      	push	{r7}
 80069d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80069da:	bf00      	nop
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr

080069e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80069e4:	b480      	push	{r7}
 80069e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80069e8:	bf00      	nop
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr

080069f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80069f2:	b580      	push	{r7, lr}
 80069f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80069f6:	f000 f8f7 	bl	8006be8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80069fa:	bf00      	nop
 80069fc:	bd80      	pop	{r7, pc}
	...

08006a00 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8006a04:	4802      	ldr	r0, [pc, #8]	; (8006a10 <OTG_FS_IRQHandler+0x10>)
 8006a06:	f000 fe6d 	bl	80076e4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8006a0a:	bf00      	nop
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	bf00      	nop
 8006a10:	200005e0 	.word	0x200005e0

08006a14 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006a14:	b480      	push	{r7}
 8006a16:	af00      	add	r7, sp, #0
	return 1;
 8006a18:	2301      	movs	r3, #1
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr

08006a24 <_kill>:

int _kill(int pid, int sig)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b082      	sub	sp, #8
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8006a2e:	f007 f803 	bl	800da38 <__errno>
 8006a32:	4602      	mov	r2, r0
 8006a34:	2316      	movs	r3, #22
 8006a36:	6013      	str	r3, [r2, #0]
	return -1;
 8006a38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3708      	adds	r7, #8
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}

08006a44 <_exit>:

void _exit (int status)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b082      	sub	sp, #8
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8006a4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f7ff ffe7 	bl	8006a24 <_kill>
	while (1) {}		/* Make sure we hang here */
 8006a56:	e7fe      	b.n	8006a56 <_exit+0x12>

08006a58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b086      	sub	sp, #24
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006a60:	4a14      	ldr	r2, [pc, #80]	; (8006ab4 <_sbrk+0x5c>)
 8006a62:	4b15      	ldr	r3, [pc, #84]	; (8006ab8 <_sbrk+0x60>)
 8006a64:	1ad3      	subs	r3, r2, r3
 8006a66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006a6c:	4b13      	ldr	r3, [pc, #76]	; (8006abc <_sbrk+0x64>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d102      	bne.n	8006a7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006a74:	4b11      	ldr	r3, [pc, #68]	; (8006abc <_sbrk+0x64>)
 8006a76:	4a12      	ldr	r2, [pc, #72]	; (8006ac0 <_sbrk+0x68>)
 8006a78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006a7a:	4b10      	ldr	r3, [pc, #64]	; (8006abc <_sbrk+0x64>)
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	4413      	add	r3, r2
 8006a82:	693a      	ldr	r2, [r7, #16]
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d207      	bcs.n	8006a98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006a88:	f006 ffd6 	bl	800da38 <__errno>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	230c      	movs	r3, #12
 8006a90:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8006a92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a96:	e009      	b.n	8006aac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006a98:	4b08      	ldr	r3, [pc, #32]	; (8006abc <_sbrk+0x64>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006a9e:	4b07      	ldr	r3, [pc, #28]	; (8006abc <_sbrk+0x64>)
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	4413      	add	r3, r2
 8006aa6:	4a05      	ldr	r2, [pc, #20]	; (8006abc <_sbrk+0x64>)
 8006aa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3718      	adds	r7, #24
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}
 8006ab4:	20020000 	.word	0x20020000
 8006ab8:	00000400 	.word	0x00000400
 8006abc:	200000b0 	.word	0x200000b0
 8006ac0:	200008a8 	.word	0x200008a8

08006ac4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006ac8:	4b08      	ldr	r3, [pc, #32]	; (8006aec <SystemInit+0x28>)
 8006aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ace:	4a07      	ldr	r2, [pc, #28]	; (8006aec <SystemInit+0x28>)
 8006ad0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006ad4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006ad8:	4b04      	ldr	r3, [pc, #16]	; (8006aec <SystemInit+0x28>)
 8006ada:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006ade:	609a      	str	r2, [r3, #8]
#endif
}
 8006ae0:	bf00      	nop
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr
 8006aea:	bf00      	nop
 8006aec:	e000ed00 	.word	0xe000ed00

08006af0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8006af0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006b28 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006af4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006af6:	e003      	b.n	8006b00 <LoopCopyDataInit>

08006af8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006af8:	4b0c      	ldr	r3, [pc, #48]	; (8006b2c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006afa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006afc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006afe:	3104      	adds	r1, #4

08006b00 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006b00:	480b      	ldr	r0, [pc, #44]	; (8006b30 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006b02:	4b0c      	ldr	r3, [pc, #48]	; (8006b34 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006b04:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006b06:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006b08:	d3f6      	bcc.n	8006af8 <CopyDataInit>
  ldr  r2, =_sbss
 8006b0a:	4a0b      	ldr	r2, [pc, #44]	; (8006b38 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006b0c:	e002      	b.n	8006b14 <LoopFillZerobss>

08006b0e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006b0e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006b10:	f842 3b04 	str.w	r3, [r2], #4

08006b14 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006b14:	4b09      	ldr	r3, [pc, #36]	; (8006b3c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006b16:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006b18:	d3f9      	bcc.n	8006b0e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006b1a:	f7ff ffd3 	bl	8006ac4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006b1e:	f006 ff91 	bl	800da44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006b22:	f7ff fde7 	bl	80066f4 <main>
  bx  lr    
 8006b26:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8006b28:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8006b2c:	0800de78 	.word	0x0800de78
  ldr  r0, =_sdata
 8006b30:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006b34:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 8006b38:	20000094 	.word	0x20000094
  ldr  r3, = _ebss
 8006b3c:	200008a8 	.word	0x200008a8

08006b40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006b40:	e7fe      	b.n	8006b40 <ADC_IRQHandler>
	...

08006b44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006b48:	4b0e      	ldr	r3, [pc, #56]	; (8006b84 <HAL_Init+0x40>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a0d      	ldr	r2, [pc, #52]	; (8006b84 <HAL_Init+0x40>)
 8006b4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006b52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006b54:	4b0b      	ldr	r3, [pc, #44]	; (8006b84 <HAL_Init+0x40>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a0a      	ldr	r2, [pc, #40]	; (8006b84 <HAL_Init+0x40>)
 8006b5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006b5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006b60:	4b08      	ldr	r3, [pc, #32]	; (8006b84 <HAL_Init+0x40>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a07      	ldr	r2, [pc, #28]	; (8006b84 <HAL_Init+0x40>)
 8006b66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006b6c:	2003      	movs	r0, #3
 8006b6e:	f000 f94d 	bl	8006e0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006b72:	2000      	movs	r0, #0
 8006b74:	f000 f808 	bl	8006b88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006b78:	f7ff feee 	bl	8006958 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006b7c:	2300      	movs	r3, #0
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	bd80      	pop	{r7, pc}
 8006b82:	bf00      	nop
 8006b84:	40023c00 	.word	0x40023c00

08006b88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b082      	sub	sp, #8
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006b90:	4b12      	ldr	r3, [pc, #72]	; (8006bdc <HAL_InitTick+0x54>)
 8006b92:	681a      	ldr	r2, [r3, #0]
 8006b94:	4b12      	ldr	r3, [pc, #72]	; (8006be0 <HAL_InitTick+0x58>)
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	4619      	mov	r1, r3
 8006b9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006b9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f000 f965 	bl	8006e76 <HAL_SYSTICK_Config>
 8006bac:	4603      	mov	r3, r0
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d001      	beq.n	8006bb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e00e      	b.n	8006bd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2b0f      	cmp	r3, #15
 8006bba:	d80a      	bhi.n	8006bd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	6879      	ldr	r1, [r7, #4]
 8006bc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006bc4:	f000 f92d 	bl	8006e22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006bc8:	4a06      	ldr	r2, [pc, #24]	; (8006be4 <HAL_InitTick+0x5c>)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	e000      	b.n	8006bd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006bd2:	2301      	movs	r3, #1
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3708      	adds	r7, #8
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}
 8006bdc:	20000000 	.word	0x20000000
 8006be0:	20000008 	.word	0x20000008
 8006be4:	20000004 	.word	0x20000004

08006be8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006be8:	b480      	push	{r7}
 8006bea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006bec:	4b06      	ldr	r3, [pc, #24]	; (8006c08 <HAL_IncTick+0x20>)
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	461a      	mov	r2, r3
 8006bf2:	4b06      	ldr	r3, [pc, #24]	; (8006c0c <HAL_IncTick+0x24>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4413      	add	r3, r2
 8006bf8:	4a04      	ldr	r2, [pc, #16]	; (8006c0c <HAL_IncTick+0x24>)
 8006bfa:	6013      	str	r3, [r2, #0]
}
 8006bfc:	bf00      	nop
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr
 8006c06:	bf00      	nop
 8006c08:	20000008 	.word	0x20000008
 8006c0c:	20000204 	.word	0x20000204

08006c10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006c10:	b480      	push	{r7}
 8006c12:	af00      	add	r7, sp, #0
  return uwTick;
 8006c14:	4b03      	ldr	r3, [pc, #12]	; (8006c24 <HAL_GetTick+0x14>)
 8006c16:	681b      	ldr	r3, [r3, #0]
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr
 8006c22:	bf00      	nop
 8006c24:	20000204 	.word	0x20000204

08006c28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b084      	sub	sp, #16
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006c30:	f7ff ffee 	bl	8006c10 <HAL_GetTick>
 8006c34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c40:	d005      	beq.n	8006c4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006c42:	4b09      	ldr	r3, [pc, #36]	; (8006c68 <HAL_Delay+0x40>)
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	461a      	mov	r2, r3
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	4413      	add	r3, r2
 8006c4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006c4e:	bf00      	nop
 8006c50:	f7ff ffde 	bl	8006c10 <HAL_GetTick>
 8006c54:	4602      	mov	r2, r0
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	1ad3      	subs	r3, r2, r3
 8006c5a:	68fa      	ldr	r2, [r7, #12]
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d8f7      	bhi.n	8006c50 <HAL_Delay+0x28>
  {
  }
}
 8006c60:	bf00      	nop
 8006c62:	3710      	adds	r7, #16
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}
 8006c68:	20000008 	.word	0x20000008

08006c6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b085      	sub	sp, #20
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f003 0307 	and.w	r3, r3, #7
 8006c7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006c7c:	4b0c      	ldr	r3, [pc, #48]	; (8006cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8006c7e:	68db      	ldr	r3, [r3, #12]
 8006c80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006c82:	68ba      	ldr	r2, [r7, #8]
 8006c84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006c88:	4013      	ands	r3, r2
 8006c8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006c94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006c98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006c9e:	4a04      	ldr	r2, [pc, #16]	; (8006cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	60d3      	str	r3, [r2, #12]
}
 8006ca4:	bf00      	nop
 8006ca6:	3714      	adds	r7, #20
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr
 8006cb0:	e000ed00 	.word	0xe000ed00

08006cb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006cb8:	4b04      	ldr	r3, [pc, #16]	; (8006ccc <__NVIC_GetPriorityGrouping+0x18>)
 8006cba:	68db      	ldr	r3, [r3, #12]
 8006cbc:	0a1b      	lsrs	r3, r3, #8
 8006cbe:	f003 0307 	and.w	r3, r3, #7
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr
 8006ccc:	e000ed00 	.word	0xe000ed00

08006cd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b083      	sub	sp, #12
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	db0b      	blt.n	8006cfa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006ce2:	79fb      	ldrb	r3, [r7, #7]
 8006ce4:	f003 021f 	and.w	r2, r3, #31
 8006ce8:	4907      	ldr	r1, [pc, #28]	; (8006d08 <__NVIC_EnableIRQ+0x38>)
 8006cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cee:	095b      	lsrs	r3, r3, #5
 8006cf0:	2001      	movs	r0, #1
 8006cf2:	fa00 f202 	lsl.w	r2, r0, r2
 8006cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006cfa:	bf00      	nop
 8006cfc:	370c      	adds	r7, #12
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr
 8006d06:	bf00      	nop
 8006d08:	e000e100 	.word	0xe000e100

08006d0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b083      	sub	sp, #12
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	4603      	mov	r3, r0
 8006d14:	6039      	str	r1, [r7, #0]
 8006d16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	db0a      	blt.n	8006d36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	b2da      	uxtb	r2, r3
 8006d24:	490c      	ldr	r1, [pc, #48]	; (8006d58 <__NVIC_SetPriority+0x4c>)
 8006d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d2a:	0112      	lsls	r2, r2, #4
 8006d2c:	b2d2      	uxtb	r2, r2
 8006d2e:	440b      	add	r3, r1
 8006d30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006d34:	e00a      	b.n	8006d4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	b2da      	uxtb	r2, r3
 8006d3a:	4908      	ldr	r1, [pc, #32]	; (8006d5c <__NVIC_SetPriority+0x50>)
 8006d3c:	79fb      	ldrb	r3, [r7, #7]
 8006d3e:	f003 030f 	and.w	r3, r3, #15
 8006d42:	3b04      	subs	r3, #4
 8006d44:	0112      	lsls	r2, r2, #4
 8006d46:	b2d2      	uxtb	r2, r2
 8006d48:	440b      	add	r3, r1
 8006d4a:	761a      	strb	r2, [r3, #24]
}
 8006d4c:	bf00      	nop
 8006d4e:	370c      	adds	r7, #12
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr
 8006d58:	e000e100 	.word	0xe000e100
 8006d5c:	e000ed00 	.word	0xe000ed00

08006d60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b089      	sub	sp, #36	; 0x24
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	60f8      	str	r0, [r7, #12]
 8006d68:	60b9      	str	r1, [r7, #8]
 8006d6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f003 0307 	and.w	r3, r3, #7
 8006d72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006d74:	69fb      	ldr	r3, [r7, #28]
 8006d76:	f1c3 0307 	rsb	r3, r3, #7
 8006d7a:	2b04      	cmp	r3, #4
 8006d7c:	bf28      	it	cs
 8006d7e:	2304      	movcs	r3, #4
 8006d80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006d82:	69fb      	ldr	r3, [r7, #28]
 8006d84:	3304      	adds	r3, #4
 8006d86:	2b06      	cmp	r3, #6
 8006d88:	d902      	bls.n	8006d90 <NVIC_EncodePriority+0x30>
 8006d8a:	69fb      	ldr	r3, [r7, #28]
 8006d8c:	3b03      	subs	r3, #3
 8006d8e:	e000      	b.n	8006d92 <NVIC_EncodePriority+0x32>
 8006d90:	2300      	movs	r3, #0
 8006d92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d98:	69bb      	ldr	r3, [r7, #24]
 8006d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d9e:	43da      	mvns	r2, r3
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	401a      	ands	r2, r3
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006da8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	fa01 f303 	lsl.w	r3, r1, r3
 8006db2:	43d9      	mvns	r1, r3
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006db8:	4313      	orrs	r3, r2
         );
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3724      	adds	r7, #36	; 0x24
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr
	...

08006dc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b082      	sub	sp, #8
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	3b01      	subs	r3, #1
 8006dd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006dd8:	d301      	bcc.n	8006dde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006dda:	2301      	movs	r3, #1
 8006ddc:	e00f      	b.n	8006dfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006dde:	4a0a      	ldr	r2, [pc, #40]	; (8006e08 <SysTick_Config+0x40>)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	3b01      	subs	r3, #1
 8006de4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006de6:	210f      	movs	r1, #15
 8006de8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006dec:	f7ff ff8e 	bl	8006d0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006df0:	4b05      	ldr	r3, [pc, #20]	; (8006e08 <SysTick_Config+0x40>)
 8006df2:	2200      	movs	r2, #0
 8006df4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006df6:	4b04      	ldr	r3, [pc, #16]	; (8006e08 <SysTick_Config+0x40>)
 8006df8:	2207      	movs	r2, #7
 8006dfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006dfc:	2300      	movs	r3, #0
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3708      	adds	r7, #8
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}
 8006e06:	bf00      	nop
 8006e08:	e000e010 	.word	0xe000e010

08006e0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b082      	sub	sp, #8
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f7ff ff29 	bl	8006c6c <__NVIC_SetPriorityGrouping>
}
 8006e1a:	bf00      	nop
 8006e1c:	3708      	adds	r7, #8
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}

08006e22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006e22:	b580      	push	{r7, lr}
 8006e24:	b086      	sub	sp, #24
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	4603      	mov	r3, r0
 8006e2a:	60b9      	str	r1, [r7, #8]
 8006e2c:	607a      	str	r2, [r7, #4]
 8006e2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006e30:	2300      	movs	r3, #0
 8006e32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006e34:	f7ff ff3e 	bl	8006cb4 <__NVIC_GetPriorityGrouping>
 8006e38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	68b9      	ldr	r1, [r7, #8]
 8006e3e:	6978      	ldr	r0, [r7, #20]
 8006e40:	f7ff ff8e 	bl	8006d60 <NVIC_EncodePriority>
 8006e44:	4602      	mov	r2, r0
 8006e46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e4a:	4611      	mov	r1, r2
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f7ff ff5d 	bl	8006d0c <__NVIC_SetPriority>
}
 8006e52:	bf00      	nop
 8006e54:	3718      	adds	r7, #24
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}

08006e5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006e5a:	b580      	push	{r7, lr}
 8006e5c:	b082      	sub	sp, #8
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	4603      	mov	r3, r0
 8006e62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f7ff ff31 	bl	8006cd0 <__NVIC_EnableIRQ>
}
 8006e6e:	bf00      	nop
 8006e70:	3708      	adds	r7, #8
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}

08006e76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006e76:	b580      	push	{r7, lr}
 8006e78:	b082      	sub	sp, #8
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f7ff ffa2 	bl	8006dc8 <SysTick_Config>
 8006e84:	4603      	mov	r3, r0
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3708      	adds	r7, #8
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
	...

08006e90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b089      	sub	sp, #36	; 0x24
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	61fb      	str	r3, [r7, #28]
 8006eaa:	e159      	b.n	8007160 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006eac:	2201      	movs	r2, #1
 8006eae:	69fb      	ldr	r3, [r7, #28]
 8006eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8006eb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	697a      	ldr	r2, [r7, #20]
 8006ebc:	4013      	ands	r3, r2
 8006ebe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006ec0:	693a      	ldr	r2, [r7, #16]
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	f040 8148 	bne.w	800715a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d00b      	beq.n	8006eea <HAL_GPIO_Init+0x5a>
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	2b02      	cmp	r3, #2
 8006ed8:	d007      	beq.n	8006eea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006ede:	2b11      	cmp	r3, #17
 8006ee0:	d003      	beq.n	8006eea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	2b12      	cmp	r3, #18
 8006ee8:	d130      	bne.n	8006f4c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006ef0:	69fb      	ldr	r3, [r7, #28]
 8006ef2:	005b      	lsls	r3, r3, #1
 8006ef4:	2203      	movs	r2, #3
 8006ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8006efa:	43db      	mvns	r3, r3
 8006efc:	69ba      	ldr	r2, [r7, #24]
 8006efe:	4013      	ands	r3, r2
 8006f00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	68da      	ldr	r2, [r3, #12]
 8006f06:	69fb      	ldr	r3, [r7, #28]
 8006f08:	005b      	lsls	r3, r3, #1
 8006f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f0e:	69ba      	ldr	r2, [r7, #24]
 8006f10:	4313      	orrs	r3, r2
 8006f12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	69ba      	ldr	r2, [r7, #24]
 8006f18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006f20:	2201      	movs	r2, #1
 8006f22:	69fb      	ldr	r3, [r7, #28]
 8006f24:	fa02 f303 	lsl.w	r3, r2, r3
 8006f28:	43db      	mvns	r3, r3
 8006f2a:	69ba      	ldr	r2, [r7, #24]
 8006f2c:	4013      	ands	r3, r2
 8006f2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	091b      	lsrs	r3, r3, #4
 8006f36:	f003 0201 	and.w	r2, r3, #1
 8006f3a:	69fb      	ldr	r3, [r7, #28]
 8006f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f40:	69ba      	ldr	r2, [r7, #24]
 8006f42:	4313      	orrs	r3, r2
 8006f44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	69ba      	ldr	r2, [r7, #24]
 8006f4a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	68db      	ldr	r3, [r3, #12]
 8006f50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006f52:	69fb      	ldr	r3, [r7, #28]
 8006f54:	005b      	lsls	r3, r3, #1
 8006f56:	2203      	movs	r2, #3
 8006f58:	fa02 f303 	lsl.w	r3, r2, r3
 8006f5c:	43db      	mvns	r3, r3
 8006f5e:	69ba      	ldr	r2, [r7, #24]
 8006f60:	4013      	ands	r3, r2
 8006f62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	689a      	ldr	r2, [r3, #8]
 8006f68:	69fb      	ldr	r3, [r7, #28]
 8006f6a:	005b      	lsls	r3, r3, #1
 8006f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f70:	69ba      	ldr	r2, [r7, #24]
 8006f72:	4313      	orrs	r3, r2
 8006f74:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	69ba      	ldr	r2, [r7, #24]
 8006f7a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	2b02      	cmp	r3, #2
 8006f82:	d003      	beq.n	8006f8c <HAL_GPIO_Init+0xfc>
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	2b12      	cmp	r3, #18
 8006f8a:	d123      	bne.n	8006fd4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006f8c:	69fb      	ldr	r3, [r7, #28]
 8006f8e:	08da      	lsrs	r2, r3, #3
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	3208      	adds	r2, #8
 8006f94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006f9a:	69fb      	ldr	r3, [r7, #28]
 8006f9c:	f003 0307 	and.w	r3, r3, #7
 8006fa0:	009b      	lsls	r3, r3, #2
 8006fa2:	220f      	movs	r2, #15
 8006fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8006fa8:	43db      	mvns	r3, r3
 8006faa:	69ba      	ldr	r2, [r7, #24]
 8006fac:	4013      	ands	r3, r2
 8006fae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	691a      	ldr	r2, [r3, #16]
 8006fb4:	69fb      	ldr	r3, [r7, #28]
 8006fb6:	f003 0307 	and.w	r3, r3, #7
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8006fc0:	69ba      	ldr	r2, [r7, #24]
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006fc6:	69fb      	ldr	r3, [r7, #28]
 8006fc8:	08da      	lsrs	r2, r3, #3
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	3208      	adds	r2, #8
 8006fce:	69b9      	ldr	r1, [r7, #24]
 8006fd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006fda:	69fb      	ldr	r3, [r7, #28]
 8006fdc:	005b      	lsls	r3, r3, #1
 8006fde:	2203      	movs	r2, #3
 8006fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8006fe4:	43db      	mvns	r3, r3
 8006fe6:	69ba      	ldr	r2, [r7, #24]
 8006fe8:	4013      	ands	r3, r2
 8006fea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	f003 0203 	and.w	r2, r3, #3
 8006ff4:	69fb      	ldr	r3, [r7, #28]
 8006ff6:	005b      	lsls	r3, r3, #1
 8006ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8006ffc:	69ba      	ldr	r2, [r7, #24]
 8006ffe:	4313      	orrs	r3, r2
 8007000:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	69ba      	ldr	r2, [r7, #24]
 8007006:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007010:	2b00      	cmp	r3, #0
 8007012:	f000 80a2 	beq.w	800715a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007016:	2300      	movs	r3, #0
 8007018:	60fb      	str	r3, [r7, #12]
 800701a:	4b56      	ldr	r3, [pc, #344]	; (8007174 <HAL_GPIO_Init+0x2e4>)
 800701c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800701e:	4a55      	ldr	r2, [pc, #340]	; (8007174 <HAL_GPIO_Init+0x2e4>)
 8007020:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007024:	6453      	str	r3, [r2, #68]	; 0x44
 8007026:	4b53      	ldr	r3, [pc, #332]	; (8007174 <HAL_GPIO_Init+0x2e4>)
 8007028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800702a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800702e:	60fb      	str	r3, [r7, #12]
 8007030:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007032:	4a51      	ldr	r2, [pc, #324]	; (8007178 <HAL_GPIO_Init+0x2e8>)
 8007034:	69fb      	ldr	r3, [r7, #28]
 8007036:	089b      	lsrs	r3, r3, #2
 8007038:	3302      	adds	r3, #2
 800703a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800703e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007040:	69fb      	ldr	r3, [r7, #28]
 8007042:	f003 0303 	and.w	r3, r3, #3
 8007046:	009b      	lsls	r3, r3, #2
 8007048:	220f      	movs	r2, #15
 800704a:	fa02 f303 	lsl.w	r3, r2, r3
 800704e:	43db      	mvns	r3, r3
 8007050:	69ba      	ldr	r2, [r7, #24]
 8007052:	4013      	ands	r3, r2
 8007054:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	4a48      	ldr	r2, [pc, #288]	; (800717c <HAL_GPIO_Init+0x2ec>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d019      	beq.n	8007092 <HAL_GPIO_Init+0x202>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	4a47      	ldr	r2, [pc, #284]	; (8007180 <HAL_GPIO_Init+0x2f0>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d013      	beq.n	800708e <HAL_GPIO_Init+0x1fe>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	4a46      	ldr	r2, [pc, #280]	; (8007184 <HAL_GPIO_Init+0x2f4>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d00d      	beq.n	800708a <HAL_GPIO_Init+0x1fa>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	4a45      	ldr	r2, [pc, #276]	; (8007188 <HAL_GPIO_Init+0x2f8>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d007      	beq.n	8007086 <HAL_GPIO_Init+0x1f6>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	4a44      	ldr	r2, [pc, #272]	; (800718c <HAL_GPIO_Init+0x2fc>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d101      	bne.n	8007082 <HAL_GPIO_Init+0x1f2>
 800707e:	2304      	movs	r3, #4
 8007080:	e008      	b.n	8007094 <HAL_GPIO_Init+0x204>
 8007082:	2307      	movs	r3, #7
 8007084:	e006      	b.n	8007094 <HAL_GPIO_Init+0x204>
 8007086:	2303      	movs	r3, #3
 8007088:	e004      	b.n	8007094 <HAL_GPIO_Init+0x204>
 800708a:	2302      	movs	r3, #2
 800708c:	e002      	b.n	8007094 <HAL_GPIO_Init+0x204>
 800708e:	2301      	movs	r3, #1
 8007090:	e000      	b.n	8007094 <HAL_GPIO_Init+0x204>
 8007092:	2300      	movs	r3, #0
 8007094:	69fa      	ldr	r2, [r7, #28]
 8007096:	f002 0203 	and.w	r2, r2, #3
 800709a:	0092      	lsls	r2, r2, #2
 800709c:	4093      	lsls	r3, r2
 800709e:	69ba      	ldr	r2, [r7, #24]
 80070a0:	4313      	orrs	r3, r2
 80070a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80070a4:	4934      	ldr	r1, [pc, #208]	; (8007178 <HAL_GPIO_Init+0x2e8>)
 80070a6:	69fb      	ldr	r3, [r7, #28]
 80070a8:	089b      	lsrs	r3, r3, #2
 80070aa:	3302      	adds	r3, #2
 80070ac:	69ba      	ldr	r2, [r7, #24]
 80070ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80070b2:	4b37      	ldr	r3, [pc, #220]	; (8007190 <HAL_GPIO_Init+0x300>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	43db      	mvns	r3, r3
 80070bc:	69ba      	ldr	r2, [r7, #24]
 80070be:	4013      	ands	r3, r2
 80070c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d003      	beq.n	80070d6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80070ce:	69ba      	ldr	r2, [r7, #24]
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	4313      	orrs	r3, r2
 80070d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80070d6:	4a2e      	ldr	r2, [pc, #184]	; (8007190 <HAL_GPIO_Init+0x300>)
 80070d8:	69bb      	ldr	r3, [r7, #24]
 80070da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80070dc:	4b2c      	ldr	r3, [pc, #176]	; (8007190 <HAL_GPIO_Init+0x300>)
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	43db      	mvns	r3, r3
 80070e6:	69ba      	ldr	r2, [r7, #24]
 80070e8:	4013      	ands	r3, r2
 80070ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d003      	beq.n	8007100 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80070f8:	69ba      	ldr	r2, [r7, #24]
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	4313      	orrs	r3, r2
 80070fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007100:	4a23      	ldr	r2, [pc, #140]	; (8007190 <HAL_GPIO_Init+0x300>)
 8007102:	69bb      	ldr	r3, [r7, #24]
 8007104:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007106:	4b22      	ldr	r3, [pc, #136]	; (8007190 <HAL_GPIO_Init+0x300>)
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	43db      	mvns	r3, r3
 8007110:	69ba      	ldr	r2, [r7, #24]
 8007112:	4013      	ands	r3, r2
 8007114:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800711e:	2b00      	cmp	r3, #0
 8007120:	d003      	beq.n	800712a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8007122:	69ba      	ldr	r2, [r7, #24]
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	4313      	orrs	r3, r2
 8007128:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800712a:	4a19      	ldr	r2, [pc, #100]	; (8007190 <HAL_GPIO_Init+0x300>)
 800712c:	69bb      	ldr	r3, [r7, #24]
 800712e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007130:	4b17      	ldr	r3, [pc, #92]	; (8007190 <HAL_GPIO_Init+0x300>)
 8007132:	68db      	ldr	r3, [r3, #12]
 8007134:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	43db      	mvns	r3, r3
 800713a:	69ba      	ldr	r2, [r7, #24]
 800713c:	4013      	ands	r3, r2
 800713e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007148:	2b00      	cmp	r3, #0
 800714a:	d003      	beq.n	8007154 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800714c:	69ba      	ldr	r2, [r7, #24]
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	4313      	orrs	r3, r2
 8007152:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007154:	4a0e      	ldr	r2, [pc, #56]	; (8007190 <HAL_GPIO_Init+0x300>)
 8007156:	69bb      	ldr	r3, [r7, #24]
 8007158:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800715a:	69fb      	ldr	r3, [r7, #28]
 800715c:	3301      	adds	r3, #1
 800715e:	61fb      	str	r3, [r7, #28]
 8007160:	69fb      	ldr	r3, [r7, #28]
 8007162:	2b0f      	cmp	r3, #15
 8007164:	f67f aea2 	bls.w	8006eac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007168:	bf00      	nop
 800716a:	3724      	adds	r7, #36	; 0x24
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr
 8007174:	40023800 	.word	0x40023800
 8007178:	40013800 	.word	0x40013800
 800717c:	40020000 	.word	0x40020000
 8007180:	40020400 	.word	0x40020400
 8007184:	40020800 	.word	0x40020800
 8007188:	40020c00 	.word	0x40020c00
 800718c:	40021000 	.word	0x40021000
 8007190:	40013c00 	.word	0x40013c00

08007194 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007194:	b480      	push	{r7}
 8007196:	b083      	sub	sp, #12
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	460b      	mov	r3, r1
 800719e:	807b      	strh	r3, [r7, #2]
 80071a0:	4613      	mov	r3, r2
 80071a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80071a4:	787b      	ldrb	r3, [r7, #1]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d003      	beq.n	80071b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80071aa:	887a      	ldrh	r2, [r7, #2]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80071b0:	e003      	b.n	80071ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80071b2:	887b      	ldrh	r3, [r7, #2]
 80071b4:	041a      	lsls	r2, r3, #16
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	619a      	str	r2, [r3, #24]
}
 80071ba:	bf00      	nop
 80071bc:	370c      	adds	r7, #12
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr

080071c6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80071c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071c8:	b08f      	sub	sp, #60	; 0x3c
 80071ca:	af0a      	add	r7, sp, #40	; 0x28
 80071cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d101      	bne.n	80071d8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80071d4:	2301      	movs	r3, #1
 80071d6:	e054      	b.n	8007282 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80071e4:	b2db      	uxtb	r3, r3
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d106      	bne.n	80071f8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2200      	movs	r2, #0
 80071ee:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f006 f934 	bl	800d460 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2203      	movs	r2, #3
 80071fc:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007208:	2b00      	cmp	r3, #0
 800720a:	d102      	bne.n	8007212 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2200      	movs	r2, #0
 8007210:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4618      	mov	r0, r3
 8007218:	f003 faf0 	bl	800a7fc <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	603b      	str	r3, [r7, #0]
 8007222:	687e      	ldr	r6, [r7, #4]
 8007224:	466d      	mov	r5, sp
 8007226:	f106 0410 	add.w	r4, r6, #16
 800722a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800722c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800722e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007230:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007232:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007236:	e885 0003 	stmia.w	r5, {r0, r1}
 800723a:	1d33      	adds	r3, r6, #4
 800723c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800723e:	6838      	ldr	r0, [r7, #0]
 8007240:	f003 fa6a 	bl	800a718 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	2101      	movs	r1, #1
 800724a:	4618      	mov	r0, r3
 800724c:	f003 fae7 	bl	800a81e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	603b      	str	r3, [r7, #0]
 8007256:	687e      	ldr	r6, [r7, #4]
 8007258:	466d      	mov	r5, sp
 800725a:	f106 0410 	add.w	r4, r6, #16
 800725e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007260:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007262:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007264:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007266:	e894 0003 	ldmia.w	r4, {r0, r1}
 800726a:	e885 0003 	stmia.w	r5, {r0, r1}
 800726e:	1d33      	adds	r3, r6, #4
 8007270:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007272:	6838      	ldr	r0, [r7, #0]
 8007274:	f003 fbfa 	bl	800aa6c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2201      	movs	r2, #1
 800727c:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8007280:	2300      	movs	r3, #0
}
 8007282:	4618      	mov	r0, r3
 8007284:	3714      	adds	r7, #20
 8007286:	46bd      	mov	sp, r7
 8007288:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800728a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800728a:	b590      	push	{r4, r7, lr}
 800728c:	b089      	sub	sp, #36	; 0x24
 800728e:	af04      	add	r7, sp, #16
 8007290:	6078      	str	r0, [r7, #4]
 8007292:	4608      	mov	r0, r1
 8007294:	4611      	mov	r1, r2
 8007296:	461a      	mov	r2, r3
 8007298:	4603      	mov	r3, r0
 800729a:	70fb      	strb	r3, [r7, #3]
 800729c:	460b      	mov	r3, r1
 800729e:	70bb      	strb	r3, [r7, #2]
 80072a0:	4613      	mov	r3, r2
 80072a2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d101      	bne.n	80072b2 <HAL_HCD_HC_Init+0x28>
 80072ae:	2302      	movs	r3, #2
 80072b0:	e07f      	b.n	80073b2 <HAL_HCD_HC_Init+0x128>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2201      	movs	r2, #1
 80072b6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80072ba:	78fa      	ldrb	r2, [r7, #3]
 80072bc:	6879      	ldr	r1, [r7, #4]
 80072be:	4613      	mov	r3, r2
 80072c0:	009b      	lsls	r3, r3, #2
 80072c2:	4413      	add	r3, r2
 80072c4:	00db      	lsls	r3, r3, #3
 80072c6:	440b      	add	r3, r1
 80072c8:	333d      	adds	r3, #61	; 0x3d
 80072ca:	2200      	movs	r2, #0
 80072cc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80072ce:	78fa      	ldrb	r2, [r7, #3]
 80072d0:	6879      	ldr	r1, [r7, #4]
 80072d2:	4613      	mov	r3, r2
 80072d4:	009b      	lsls	r3, r3, #2
 80072d6:	4413      	add	r3, r2
 80072d8:	00db      	lsls	r3, r3, #3
 80072da:	440b      	add	r3, r1
 80072dc:	3338      	adds	r3, #56	; 0x38
 80072de:	787a      	ldrb	r2, [r7, #1]
 80072e0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80072e2:	78fa      	ldrb	r2, [r7, #3]
 80072e4:	6879      	ldr	r1, [r7, #4]
 80072e6:	4613      	mov	r3, r2
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	4413      	add	r3, r2
 80072ec:	00db      	lsls	r3, r3, #3
 80072ee:	440b      	add	r3, r1
 80072f0:	3340      	adds	r3, #64	; 0x40
 80072f2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80072f4:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80072f6:	78fa      	ldrb	r2, [r7, #3]
 80072f8:	6879      	ldr	r1, [r7, #4]
 80072fa:	4613      	mov	r3, r2
 80072fc:	009b      	lsls	r3, r3, #2
 80072fe:	4413      	add	r3, r2
 8007300:	00db      	lsls	r3, r3, #3
 8007302:	440b      	add	r3, r1
 8007304:	3339      	adds	r3, #57	; 0x39
 8007306:	78fa      	ldrb	r2, [r7, #3]
 8007308:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800730a:	78fa      	ldrb	r2, [r7, #3]
 800730c:	6879      	ldr	r1, [r7, #4]
 800730e:	4613      	mov	r3, r2
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	4413      	add	r3, r2
 8007314:	00db      	lsls	r3, r3, #3
 8007316:	440b      	add	r3, r1
 8007318:	333f      	adds	r3, #63	; 0x3f
 800731a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800731e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8007320:	78fa      	ldrb	r2, [r7, #3]
 8007322:	78bb      	ldrb	r3, [r7, #2]
 8007324:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007328:	b2d8      	uxtb	r0, r3
 800732a:	6879      	ldr	r1, [r7, #4]
 800732c:	4613      	mov	r3, r2
 800732e:	009b      	lsls	r3, r3, #2
 8007330:	4413      	add	r3, r2
 8007332:	00db      	lsls	r3, r3, #3
 8007334:	440b      	add	r3, r1
 8007336:	333a      	adds	r3, #58	; 0x3a
 8007338:	4602      	mov	r2, r0
 800733a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800733c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007340:	2b00      	cmp	r3, #0
 8007342:	da0a      	bge.n	800735a <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8007344:	78fa      	ldrb	r2, [r7, #3]
 8007346:	6879      	ldr	r1, [r7, #4]
 8007348:	4613      	mov	r3, r2
 800734a:	009b      	lsls	r3, r3, #2
 800734c:	4413      	add	r3, r2
 800734e:	00db      	lsls	r3, r3, #3
 8007350:	440b      	add	r3, r1
 8007352:	333b      	adds	r3, #59	; 0x3b
 8007354:	2201      	movs	r2, #1
 8007356:	701a      	strb	r2, [r3, #0]
 8007358:	e009      	b.n	800736e <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800735a:	78fa      	ldrb	r2, [r7, #3]
 800735c:	6879      	ldr	r1, [r7, #4]
 800735e:	4613      	mov	r3, r2
 8007360:	009b      	lsls	r3, r3, #2
 8007362:	4413      	add	r3, r2
 8007364:	00db      	lsls	r3, r3, #3
 8007366:	440b      	add	r3, r1
 8007368:	333b      	adds	r3, #59	; 0x3b
 800736a:	2200      	movs	r2, #0
 800736c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800736e:	78fa      	ldrb	r2, [r7, #3]
 8007370:	6879      	ldr	r1, [r7, #4]
 8007372:	4613      	mov	r3, r2
 8007374:	009b      	lsls	r3, r3, #2
 8007376:	4413      	add	r3, r2
 8007378:	00db      	lsls	r3, r3, #3
 800737a:	440b      	add	r3, r1
 800737c:	333c      	adds	r3, #60	; 0x3c
 800737e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8007382:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6818      	ldr	r0, [r3, #0]
 8007388:	787c      	ldrb	r4, [r7, #1]
 800738a:	78ba      	ldrb	r2, [r7, #2]
 800738c:	78f9      	ldrb	r1, [r7, #3]
 800738e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007390:	9302      	str	r3, [sp, #8]
 8007392:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007396:	9301      	str	r3, [sp, #4]
 8007398:	f897 3020 	ldrb.w	r3, [r7, #32]
 800739c:	9300      	str	r3, [sp, #0]
 800739e:	4623      	mov	r3, r4
 80073a0:	f003 fce6 	bl	800ad70 <USB_HC_Init>
 80073a4:	4603      	mov	r3, r0
 80073a6:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2200      	movs	r2, #0
 80073ac:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80073b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3714      	adds	r7, #20
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd90      	pop	{r4, r7, pc}

080073ba <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80073ba:	b580      	push	{r7, lr}
 80073bc:	b084      	sub	sp, #16
 80073be:	af00      	add	r7, sp, #0
 80073c0:	6078      	str	r0, [r7, #4]
 80073c2:	460b      	mov	r3, r1
 80073c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80073c6:	2300      	movs	r3, #0
 80073c8:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d101      	bne.n	80073d8 <HAL_HCD_HC_Halt+0x1e>
 80073d4:	2302      	movs	r3, #2
 80073d6:	e00f      	b.n	80073f8 <HAL_HCD_HC_Halt+0x3e>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2201      	movs	r2, #1
 80073dc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	78fa      	ldrb	r2, [r7, #3]
 80073e6:	4611      	mov	r1, r2
 80073e8:	4618      	mov	r0, r3
 80073ea:	f003 ff22 	bl	800b232 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2200      	movs	r2, #0
 80073f2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80073f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3710      	adds	r7, #16
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}

08007400 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b082      	sub	sp, #8
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	4608      	mov	r0, r1
 800740a:	4611      	mov	r1, r2
 800740c:	461a      	mov	r2, r3
 800740e:	4603      	mov	r3, r0
 8007410:	70fb      	strb	r3, [r7, #3]
 8007412:	460b      	mov	r3, r1
 8007414:	70bb      	strb	r3, [r7, #2]
 8007416:	4613      	mov	r3, r2
 8007418:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800741a:	78fa      	ldrb	r2, [r7, #3]
 800741c:	6879      	ldr	r1, [r7, #4]
 800741e:	4613      	mov	r3, r2
 8007420:	009b      	lsls	r3, r3, #2
 8007422:	4413      	add	r3, r2
 8007424:	00db      	lsls	r3, r3, #3
 8007426:	440b      	add	r3, r1
 8007428:	333b      	adds	r3, #59	; 0x3b
 800742a:	78ba      	ldrb	r2, [r7, #2]
 800742c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800742e:	78fa      	ldrb	r2, [r7, #3]
 8007430:	6879      	ldr	r1, [r7, #4]
 8007432:	4613      	mov	r3, r2
 8007434:	009b      	lsls	r3, r3, #2
 8007436:	4413      	add	r3, r2
 8007438:	00db      	lsls	r3, r3, #3
 800743a:	440b      	add	r3, r1
 800743c:	333f      	adds	r3, #63	; 0x3f
 800743e:	787a      	ldrb	r2, [r7, #1]
 8007440:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8007442:	7c3b      	ldrb	r3, [r7, #16]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d114      	bne.n	8007472 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8007448:	78fa      	ldrb	r2, [r7, #3]
 800744a:	6879      	ldr	r1, [r7, #4]
 800744c:	4613      	mov	r3, r2
 800744e:	009b      	lsls	r3, r3, #2
 8007450:	4413      	add	r3, r2
 8007452:	00db      	lsls	r3, r3, #3
 8007454:	440b      	add	r3, r1
 8007456:	3342      	adds	r3, #66	; 0x42
 8007458:	2203      	movs	r2, #3
 800745a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800745c:	78fa      	ldrb	r2, [r7, #3]
 800745e:	6879      	ldr	r1, [r7, #4]
 8007460:	4613      	mov	r3, r2
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	4413      	add	r3, r2
 8007466:	00db      	lsls	r3, r3, #3
 8007468:	440b      	add	r3, r1
 800746a:	333d      	adds	r3, #61	; 0x3d
 800746c:	7f3a      	ldrb	r2, [r7, #28]
 800746e:	701a      	strb	r2, [r3, #0]
 8007470:	e009      	b.n	8007486 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007472:	78fa      	ldrb	r2, [r7, #3]
 8007474:	6879      	ldr	r1, [r7, #4]
 8007476:	4613      	mov	r3, r2
 8007478:	009b      	lsls	r3, r3, #2
 800747a:	4413      	add	r3, r2
 800747c:	00db      	lsls	r3, r3, #3
 800747e:	440b      	add	r3, r1
 8007480:	3342      	adds	r3, #66	; 0x42
 8007482:	2202      	movs	r2, #2
 8007484:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8007486:	787b      	ldrb	r3, [r7, #1]
 8007488:	2b03      	cmp	r3, #3
 800748a:	f200 80d6 	bhi.w	800763a <HAL_HCD_HC_SubmitRequest+0x23a>
 800748e:	a201      	add	r2, pc, #4	; (adr r2, 8007494 <HAL_HCD_HC_SubmitRequest+0x94>)
 8007490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007494:	080074a5 	.word	0x080074a5
 8007498:	08007625 	.word	0x08007625
 800749c:	08007511 	.word	0x08007511
 80074a0:	0800759b 	.word	0x0800759b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80074a4:	7c3b      	ldrb	r3, [r7, #16]
 80074a6:	2b01      	cmp	r3, #1
 80074a8:	f040 80c9 	bne.w	800763e <HAL_HCD_HC_SubmitRequest+0x23e>
 80074ac:	78bb      	ldrb	r3, [r7, #2]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	f040 80c5 	bne.w	800763e <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 80074b4:	8b3b      	ldrh	r3, [r7, #24]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d109      	bne.n	80074ce <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80074ba:	78fa      	ldrb	r2, [r7, #3]
 80074bc:	6879      	ldr	r1, [r7, #4]
 80074be:	4613      	mov	r3, r2
 80074c0:	009b      	lsls	r3, r3, #2
 80074c2:	4413      	add	r3, r2
 80074c4:	00db      	lsls	r3, r3, #3
 80074c6:	440b      	add	r3, r1
 80074c8:	3351      	adds	r3, #81	; 0x51
 80074ca:	2201      	movs	r2, #1
 80074cc:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80074ce:	78fa      	ldrb	r2, [r7, #3]
 80074d0:	6879      	ldr	r1, [r7, #4]
 80074d2:	4613      	mov	r3, r2
 80074d4:	009b      	lsls	r3, r3, #2
 80074d6:	4413      	add	r3, r2
 80074d8:	00db      	lsls	r3, r3, #3
 80074da:	440b      	add	r3, r1
 80074dc:	3351      	adds	r3, #81	; 0x51
 80074de:	781b      	ldrb	r3, [r3, #0]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d10a      	bne.n	80074fa <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80074e4:	78fa      	ldrb	r2, [r7, #3]
 80074e6:	6879      	ldr	r1, [r7, #4]
 80074e8:	4613      	mov	r3, r2
 80074ea:	009b      	lsls	r3, r3, #2
 80074ec:	4413      	add	r3, r2
 80074ee:	00db      	lsls	r3, r3, #3
 80074f0:	440b      	add	r3, r1
 80074f2:	3342      	adds	r3, #66	; 0x42
 80074f4:	2200      	movs	r2, #0
 80074f6:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80074f8:	e0a1      	b.n	800763e <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80074fa:	78fa      	ldrb	r2, [r7, #3]
 80074fc:	6879      	ldr	r1, [r7, #4]
 80074fe:	4613      	mov	r3, r2
 8007500:	009b      	lsls	r3, r3, #2
 8007502:	4413      	add	r3, r2
 8007504:	00db      	lsls	r3, r3, #3
 8007506:	440b      	add	r3, r1
 8007508:	3342      	adds	r3, #66	; 0x42
 800750a:	2202      	movs	r2, #2
 800750c:	701a      	strb	r2, [r3, #0]
      break;
 800750e:	e096      	b.n	800763e <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8007510:	78bb      	ldrb	r3, [r7, #2]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d120      	bne.n	8007558 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8007516:	78fa      	ldrb	r2, [r7, #3]
 8007518:	6879      	ldr	r1, [r7, #4]
 800751a:	4613      	mov	r3, r2
 800751c:	009b      	lsls	r3, r3, #2
 800751e:	4413      	add	r3, r2
 8007520:	00db      	lsls	r3, r3, #3
 8007522:	440b      	add	r3, r1
 8007524:	3351      	adds	r3, #81	; 0x51
 8007526:	781b      	ldrb	r3, [r3, #0]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d10a      	bne.n	8007542 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800752c:	78fa      	ldrb	r2, [r7, #3]
 800752e:	6879      	ldr	r1, [r7, #4]
 8007530:	4613      	mov	r3, r2
 8007532:	009b      	lsls	r3, r3, #2
 8007534:	4413      	add	r3, r2
 8007536:	00db      	lsls	r3, r3, #3
 8007538:	440b      	add	r3, r1
 800753a:	3342      	adds	r3, #66	; 0x42
 800753c:	2200      	movs	r2, #0
 800753e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8007540:	e07e      	b.n	8007640 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007542:	78fa      	ldrb	r2, [r7, #3]
 8007544:	6879      	ldr	r1, [r7, #4]
 8007546:	4613      	mov	r3, r2
 8007548:	009b      	lsls	r3, r3, #2
 800754a:	4413      	add	r3, r2
 800754c:	00db      	lsls	r3, r3, #3
 800754e:	440b      	add	r3, r1
 8007550:	3342      	adds	r3, #66	; 0x42
 8007552:	2202      	movs	r2, #2
 8007554:	701a      	strb	r2, [r3, #0]
      break;
 8007556:	e073      	b.n	8007640 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8007558:	78fa      	ldrb	r2, [r7, #3]
 800755a:	6879      	ldr	r1, [r7, #4]
 800755c:	4613      	mov	r3, r2
 800755e:	009b      	lsls	r3, r3, #2
 8007560:	4413      	add	r3, r2
 8007562:	00db      	lsls	r3, r3, #3
 8007564:	440b      	add	r3, r1
 8007566:	3350      	adds	r3, #80	; 0x50
 8007568:	781b      	ldrb	r3, [r3, #0]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d10a      	bne.n	8007584 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800756e:	78fa      	ldrb	r2, [r7, #3]
 8007570:	6879      	ldr	r1, [r7, #4]
 8007572:	4613      	mov	r3, r2
 8007574:	009b      	lsls	r3, r3, #2
 8007576:	4413      	add	r3, r2
 8007578:	00db      	lsls	r3, r3, #3
 800757a:	440b      	add	r3, r1
 800757c:	3342      	adds	r3, #66	; 0x42
 800757e:	2200      	movs	r2, #0
 8007580:	701a      	strb	r2, [r3, #0]
      break;
 8007582:	e05d      	b.n	8007640 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007584:	78fa      	ldrb	r2, [r7, #3]
 8007586:	6879      	ldr	r1, [r7, #4]
 8007588:	4613      	mov	r3, r2
 800758a:	009b      	lsls	r3, r3, #2
 800758c:	4413      	add	r3, r2
 800758e:	00db      	lsls	r3, r3, #3
 8007590:	440b      	add	r3, r1
 8007592:	3342      	adds	r3, #66	; 0x42
 8007594:	2202      	movs	r2, #2
 8007596:	701a      	strb	r2, [r3, #0]
      break;
 8007598:	e052      	b.n	8007640 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800759a:	78bb      	ldrb	r3, [r7, #2]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d120      	bne.n	80075e2 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80075a0:	78fa      	ldrb	r2, [r7, #3]
 80075a2:	6879      	ldr	r1, [r7, #4]
 80075a4:	4613      	mov	r3, r2
 80075a6:	009b      	lsls	r3, r3, #2
 80075a8:	4413      	add	r3, r2
 80075aa:	00db      	lsls	r3, r3, #3
 80075ac:	440b      	add	r3, r1
 80075ae:	3351      	adds	r3, #81	; 0x51
 80075b0:	781b      	ldrb	r3, [r3, #0]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d10a      	bne.n	80075cc <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80075b6:	78fa      	ldrb	r2, [r7, #3]
 80075b8:	6879      	ldr	r1, [r7, #4]
 80075ba:	4613      	mov	r3, r2
 80075bc:	009b      	lsls	r3, r3, #2
 80075be:	4413      	add	r3, r2
 80075c0:	00db      	lsls	r3, r3, #3
 80075c2:	440b      	add	r3, r1
 80075c4:	3342      	adds	r3, #66	; 0x42
 80075c6:	2200      	movs	r2, #0
 80075c8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80075ca:	e039      	b.n	8007640 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80075cc:	78fa      	ldrb	r2, [r7, #3]
 80075ce:	6879      	ldr	r1, [r7, #4]
 80075d0:	4613      	mov	r3, r2
 80075d2:	009b      	lsls	r3, r3, #2
 80075d4:	4413      	add	r3, r2
 80075d6:	00db      	lsls	r3, r3, #3
 80075d8:	440b      	add	r3, r1
 80075da:	3342      	adds	r3, #66	; 0x42
 80075dc:	2202      	movs	r2, #2
 80075de:	701a      	strb	r2, [r3, #0]
      break;
 80075e0:	e02e      	b.n	8007640 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80075e2:	78fa      	ldrb	r2, [r7, #3]
 80075e4:	6879      	ldr	r1, [r7, #4]
 80075e6:	4613      	mov	r3, r2
 80075e8:	009b      	lsls	r3, r3, #2
 80075ea:	4413      	add	r3, r2
 80075ec:	00db      	lsls	r3, r3, #3
 80075ee:	440b      	add	r3, r1
 80075f0:	3350      	adds	r3, #80	; 0x50
 80075f2:	781b      	ldrb	r3, [r3, #0]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d10a      	bne.n	800760e <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80075f8:	78fa      	ldrb	r2, [r7, #3]
 80075fa:	6879      	ldr	r1, [r7, #4]
 80075fc:	4613      	mov	r3, r2
 80075fe:	009b      	lsls	r3, r3, #2
 8007600:	4413      	add	r3, r2
 8007602:	00db      	lsls	r3, r3, #3
 8007604:	440b      	add	r3, r1
 8007606:	3342      	adds	r3, #66	; 0x42
 8007608:	2200      	movs	r2, #0
 800760a:	701a      	strb	r2, [r3, #0]
      break;
 800760c:	e018      	b.n	8007640 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800760e:	78fa      	ldrb	r2, [r7, #3]
 8007610:	6879      	ldr	r1, [r7, #4]
 8007612:	4613      	mov	r3, r2
 8007614:	009b      	lsls	r3, r3, #2
 8007616:	4413      	add	r3, r2
 8007618:	00db      	lsls	r3, r3, #3
 800761a:	440b      	add	r3, r1
 800761c:	3342      	adds	r3, #66	; 0x42
 800761e:	2202      	movs	r2, #2
 8007620:	701a      	strb	r2, [r3, #0]
      break;
 8007622:	e00d      	b.n	8007640 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007624:	78fa      	ldrb	r2, [r7, #3]
 8007626:	6879      	ldr	r1, [r7, #4]
 8007628:	4613      	mov	r3, r2
 800762a:	009b      	lsls	r3, r3, #2
 800762c:	4413      	add	r3, r2
 800762e:	00db      	lsls	r3, r3, #3
 8007630:	440b      	add	r3, r1
 8007632:	3342      	adds	r3, #66	; 0x42
 8007634:	2200      	movs	r2, #0
 8007636:	701a      	strb	r2, [r3, #0]
      break;
 8007638:	e002      	b.n	8007640 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 800763a:	bf00      	nop
 800763c:	e000      	b.n	8007640 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 800763e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8007640:	78fa      	ldrb	r2, [r7, #3]
 8007642:	6879      	ldr	r1, [r7, #4]
 8007644:	4613      	mov	r3, r2
 8007646:	009b      	lsls	r3, r3, #2
 8007648:	4413      	add	r3, r2
 800764a:	00db      	lsls	r3, r3, #3
 800764c:	440b      	add	r3, r1
 800764e:	3344      	adds	r3, #68	; 0x44
 8007650:	697a      	ldr	r2, [r7, #20]
 8007652:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8007654:	78fa      	ldrb	r2, [r7, #3]
 8007656:	8b39      	ldrh	r1, [r7, #24]
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	4613      	mov	r3, r2
 800765c:	009b      	lsls	r3, r3, #2
 800765e:	4413      	add	r3, r2
 8007660:	00db      	lsls	r3, r3, #3
 8007662:	4403      	add	r3, r0
 8007664:	3348      	adds	r3, #72	; 0x48
 8007666:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8007668:	78fa      	ldrb	r2, [r7, #3]
 800766a:	6879      	ldr	r1, [r7, #4]
 800766c:	4613      	mov	r3, r2
 800766e:	009b      	lsls	r3, r3, #2
 8007670:	4413      	add	r3, r2
 8007672:	00db      	lsls	r3, r3, #3
 8007674:	440b      	add	r3, r1
 8007676:	335c      	adds	r3, #92	; 0x5c
 8007678:	2200      	movs	r2, #0
 800767a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800767c:	78fa      	ldrb	r2, [r7, #3]
 800767e:	6879      	ldr	r1, [r7, #4]
 8007680:	4613      	mov	r3, r2
 8007682:	009b      	lsls	r3, r3, #2
 8007684:	4413      	add	r3, r2
 8007686:	00db      	lsls	r3, r3, #3
 8007688:	440b      	add	r3, r1
 800768a:	334c      	adds	r3, #76	; 0x4c
 800768c:	2200      	movs	r2, #0
 800768e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8007690:	78fa      	ldrb	r2, [r7, #3]
 8007692:	6879      	ldr	r1, [r7, #4]
 8007694:	4613      	mov	r3, r2
 8007696:	009b      	lsls	r3, r3, #2
 8007698:	4413      	add	r3, r2
 800769a:	00db      	lsls	r3, r3, #3
 800769c:	440b      	add	r3, r1
 800769e:	3339      	adds	r3, #57	; 0x39
 80076a0:	78fa      	ldrb	r2, [r7, #3]
 80076a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80076a4:	78fa      	ldrb	r2, [r7, #3]
 80076a6:	6879      	ldr	r1, [r7, #4]
 80076a8:	4613      	mov	r3, r2
 80076aa:	009b      	lsls	r3, r3, #2
 80076ac:	4413      	add	r3, r2
 80076ae:	00db      	lsls	r3, r3, #3
 80076b0:	440b      	add	r3, r1
 80076b2:	335d      	adds	r3, #93	; 0x5d
 80076b4:	2200      	movs	r2, #0
 80076b6:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6818      	ldr	r0, [r3, #0]
 80076bc:	78fa      	ldrb	r2, [r7, #3]
 80076be:	4613      	mov	r3, r2
 80076c0:	009b      	lsls	r3, r3, #2
 80076c2:	4413      	add	r3, r2
 80076c4:	00db      	lsls	r3, r3, #3
 80076c6:	3338      	adds	r3, #56	; 0x38
 80076c8:	687a      	ldr	r2, [r7, #4]
 80076ca:	18d1      	adds	r1, r2, r3
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	691b      	ldr	r3, [r3, #16]
 80076d0:	b2db      	uxtb	r3, r3
 80076d2:	461a      	mov	r2, r3
 80076d4:	f003 fc56 	bl	800af84 <USB_HC_StartXfer>
 80076d8:	4603      	mov	r3, r0
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3708      	adds	r7, #8
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}
 80076e2:	bf00      	nop

080076e4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b086      	sub	sp, #24
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4618      	mov	r0, r3
 80076fc:	f003 f973 	bl	800a9e6 <USB_GetMode>
 8007700:	4603      	mov	r3, r0
 8007702:	2b01      	cmp	r3, #1
 8007704:	f040 80ef 	bne.w	80078e6 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4618      	mov	r0, r3
 800770e:	f003 f957 	bl	800a9c0 <USB_ReadInterrupts>
 8007712:	4603      	mov	r3, r0
 8007714:	2b00      	cmp	r3, #0
 8007716:	f000 80e5 	beq.w	80078e4 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4618      	mov	r0, r3
 8007720:	f003 f94e 	bl	800a9c0 <USB_ReadInterrupts>
 8007724:	4603      	mov	r3, r0
 8007726:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800772a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800772e:	d104      	bne.n	800773a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007738:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4618      	mov	r0, r3
 8007740:	f003 f93e 	bl	800a9c0 <USB_ReadInterrupts>
 8007744:	4603      	mov	r3, r0
 8007746:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800774a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800774e:	d104      	bne.n	800775a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007758:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4618      	mov	r0, r3
 8007760:	f003 f92e 	bl	800a9c0 <USB_ReadInterrupts>
 8007764:	4603      	mov	r3, r0
 8007766:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800776a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800776e:	d104      	bne.n	800777a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8007778:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4618      	mov	r0, r3
 8007780:	f003 f91e 	bl	800a9c0 <USB_ReadInterrupts>
 8007784:	4603      	mov	r3, r0
 8007786:	f003 0302 	and.w	r3, r3, #2
 800778a:	2b02      	cmp	r3, #2
 800778c:	d103      	bne.n	8007796 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	2202      	movs	r2, #2
 8007794:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4618      	mov	r0, r3
 800779c:	f003 f910 	bl	800a9c0 <USB_ReadInterrupts>
 80077a0:	4603      	mov	r3, r0
 80077a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80077a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80077aa:	d115      	bne.n	80077d8 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80077b4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f003 0301 	and.w	r3, r3, #1
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d108      	bne.n	80077d8 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f005 fec8 	bl	800d55c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	2101      	movs	r1, #1
 80077d2:	4618      	mov	r0, r3
 80077d4:	f003 fa06 	bl	800abe4 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4618      	mov	r0, r3
 80077de:	f003 f8ef 	bl	800a9c0 <USB_ReadInterrupts>
 80077e2:	4603      	mov	r3, r0
 80077e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80077e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80077ec:	d102      	bne.n	80077f4 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f001 f966 	bl	8008ac0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4618      	mov	r0, r3
 80077fa:	f003 f8e1 	bl	800a9c0 <USB_ReadInterrupts>
 80077fe:	4603      	mov	r3, r0
 8007800:	f003 0308 	and.w	r3, r3, #8
 8007804:	2b08      	cmp	r3, #8
 8007806:	d106      	bne.n	8007816 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f005 fe8b 	bl	800d524 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	2208      	movs	r2, #8
 8007814:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4618      	mov	r0, r3
 800781c:	f003 f8d0 	bl	800a9c0 <USB_ReadInterrupts>
 8007820:	4603      	mov	r3, r0
 8007822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007826:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800782a:	d138      	bne.n	800789e <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4618      	mov	r0, r3
 8007832:	f003 fced 	bl	800b210 <USB_HC_ReadInterrupt>
 8007836:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8007838:	2300      	movs	r3, #0
 800783a:	617b      	str	r3, [r7, #20]
 800783c:	e025      	b.n	800788a <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	f003 030f 	and.w	r3, r3, #15
 8007844:	68ba      	ldr	r2, [r7, #8]
 8007846:	fa22 f303 	lsr.w	r3, r2, r3
 800784a:	f003 0301 	and.w	r3, r3, #1
 800784e:	2b00      	cmp	r3, #0
 8007850:	d018      	beq.n	8007884 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	015a      	lsls	r2, r3, #5
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	4413      	add	r3, r2
 800785a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007864:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007868:	d106      	bne.n	8007878 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	b2db      	uxtb	r3, r3
 800786e:	4619      	mov	r1, r3
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f000 f8cf 	bl	8007a14 <HCD_HC_IN_IRQHandler>
 8007876:	e005      	b.n	8007884 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	b2db      	uxtb	r3, r3
 800787c:	4619      	mov	r1, r3
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 fcfd 	bl	800827e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	3301      	adds	r3, #1
 8007888:	617b      	str	r3, [r7, #20]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	689b      	ldr	r3, [r3, #8]
 800788e:	697a      	ldr	r2, [r7, #20]
 8007890:	429a      	cmp	r2, r3
 8007892:	d3d4      	bcc.n	800783e <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800789c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4618      	mov	r0, r3
 80078a4:	f003 f88c 	bl	800a9c0 <USB_ReadInterrupts>
 80078a8:	4603      	mov	r3, r0
 80078aa:	f003 0310 	and.w	r3, r3, #16
 80078ae:	2b10      	cmp	r3, #16
 80078b0:	d101      	bne.n	80078b6 <HAL_HCD_IRQHandler+0x1d2>
 80078b2:	2301      	movs	r3, #1
 80078b4:	e000      	b.n	80078b8 <HAL_HCD_IRQHandler+0x1d4>
 80078b6:	2300      	movs	r3, #0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d014      	beq.n	80078e6 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	699a      	ldr	r2, [r3, #24]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f022 0210 	bic.w	r2, r2, #16
 80078ca:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f001 f84b 	bl	8008968 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	699a      	ldr	r2, [r3, #24]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f042 0210 	orr.w	r2, r2, #16
 80078e0:	619a      	str	r2, [r3, #24]
 80078e2:	e000      	b.n	80078e6 <HAL_HCD_IRQHandler+0x202>
      return;
 80078e4:	bf00      	nop
    }
  }
}
 80078e6:	3718      	adds	r7, #24
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b082      	sub	sp, #8
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80078fa:	2b01      	cmp	r3, #1
 80078fc:	d101      	bne.n	8007902 <HAL_HCD_Start+0x16>
 80078fe:	2302      	movs	r3, #2
 8007900:	e013      	b.n	800792a <HAL_HCD_Start+0x3e>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2201      	movs	r2, #1
 8007906:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4618      	mov	r0, r3
 8007910:	f002 ff63 	bl	800a7da <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	2101      	movs	r1, #1
 800791a:	4618      	mov	r0, r3
 800791c:	f003 f9c6 	bl	800acac <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2200      	movs	r2, #0
 8007924:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8007928:	2300      	movs	r3, #0
}
 800792a:	4618      	mov	r0, r3
 800792c:	3708      	adds	r7, #8
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}

08007932 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8007932:	b580      	push	{r7, lr}
 8007934:	b082      	sub	sp, #8
 8007936:	af00      	add	r7, sp, #0
 8007938:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8007940:	2b01      	cmp	r3, #1
 8007942:	d101      	bne.n	8007948 <HAL_HCD_Stop+0x16>
 8007944:	2302      	movs	r3, #2
 8007946:	e00d      	b.n	8007964 <HAL_HCD_Stop+0x32>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2201      	movs	r2, #1
 800794c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4618      	mov	r0, r3
 8007956:	f003 fda7 	bl	800b4a8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2200      	movs	r2, #0
 800795e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8007962:	2300      	movs	r3, #0
}
 8007964:	4618      	mov	r0, r3
 8007966:	3708      	adds	r7, #8
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}

0800796c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b082      	sub	sp, #8
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4618      	mov	r0, r3
 800797a:	f003 f96d 	bl	800ac58 <USB_ResetPort>
 800797e:	4603      	mov	r3, r0
}
 8007980:	4618      	mov	r0, r3
 8007982:	3708      	adds	r7, #8
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}

08007988 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8007988:	b480      	push	{r7}
 800798a:	b083      	sub	sp, #12
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	460b      	mov	r3, r1
 8007992:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8007994:	78fa      	ldrb	r2, [r7, #3]
 8007996:	6879      	ldr	r1, [r7, #4]
 8007998:	4613      	mov	r3, r2
 800799a:	009b      	lsls	r3, r3, #2
 800799c:	4413      	add	r3, r2
 800799e:	00db      	lsls	r3, r3, #3
 80079a0:	440b      	add	r3, r1
 80079a2:	335c      	adds	r3, #92	; 0x5c
 80079a4:	781b      	ldrb	r3, [r3, #0]
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	370c      	adds	r7, #12
 80079aa:	46bd      	mov	sp, r7
 80079ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b0:	4770      	bx	lr

080079b2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80079b2:	b480      	push	{r7}
 80079b4:	b083      	sub	sp, #12
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	6078      	str	r0, [r7, #4]
 80079ba:	460b      	mov	r3, r1
 80079bc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80079be:	78fa      	ldrb	r2, [r7, #3]
 80079c0:	6879      	ldr	r1, [r7, #4]
 80079c2:	4613      	mov	r3, r2
 80079c4:	009b      	lsls	r3, r3, #2
 80079c6:	4413      	add	r3, r2
 80079c8:	00db      	lsls	r3, r3, #3
 80079ca:	440b      	add	r3, r1
 80079cc:	334c      	adds	r3, #76	; 0x4c
 80079ce:	681b      	ldr	r3, [r3, #0]
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	370c      	adds	r7, #12
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr

080079dc <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b082      	sub	sp, #8
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4618      	mov	r0, r3
 80079ea:	f003 f9af 	bl	800ad4c <USB_GetCurrentFrame>
 80079ee:	4603      	mov	r3, r0
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3708      	adds	r7, #8
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}

080079f8 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b082      	sub	sp, #8
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4618      	mov	r0, r3
 8007a06:	f003 f98a 	bl	800ad1e <USB_GetHostSpeed>
 8007a0a:	4603      	mov	r3, r0
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3708      	adds	r7, #8
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}

08007a14 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b086      	sub	sp, #24
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
 8007a1c:	460b      	mov	r3, r1
 8007a1e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8007a2a:	78fb      	ldrb	r3, [r7, #3]
 8007a2c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	015a      	lsls	r2, r3, #5
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	4413      	add	r3, r2
 8007a36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a3a:	689b      	ldr	r3, [r3, #8]
 8007a3c:	f003 0304 	and.w	r3, r3, #4
 8007a40:	2b04      	cmp	r3, #4
 8007a42:	d119      	bne.n	8007a78 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	015a      	lsls	r2, r3, #5
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	4413      	add	r3, r2
 8007a4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a50:	461a      	mov	r2, r3
 8007a52:	2304      	movs	r3, #4
 8007a54:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	015a      	lsls	r2, r3, #5
 8007a5a:	693b      	ldr	r3, [r7, #16]
 8007a5c:	4413      	add	r3, r2
 8007a5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a62:	68db      	ldr	r3, [r3, #12]
 8007a64:	68fa      	ldr	r2, [r7, #12]
 8007a66:	0151      	lsls	r1, r2, #5
 8007a68:	693a      	ldr	r2, [r7, #16]
 8007a6a:	440a      	add	r2, r1
 8007a6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a70:	f043 0302 	orr.w	r3, r3, #2
 8007a74:	60d3      	str	r3, [r2, #12]
 8007a76:	e0ce      	b.n	8007c16 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	015a      	lsls	r2, r3, #5
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	4413      	add	r3, r2
 8007a80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a84:	689b      	ldr	r3, [r3, #8]
 8007a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a8e:	d12c      	bne.n	8007aea <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	015a      	lsls	r2, r3, #5
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	4413      	add	r3, r2
 8007a98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a9c:	461a      	mov	r2, r3
 8007a9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007aa2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8007aa4:	6879      	ldr	r1, [r7, #4]
 8007aa6:	68fa      	ldr	r2, [r7, #12]
 8007aa8:	4613      	mov	r3, r2
 8007aaa:	009b      	lsls	r3, r3, #2
 8007aac:	4413      	add	r3, r2
 8007aae:	00db      	lsls	r3, r3, #3
 8007ab0:	440b      	add	r3, r1
 8007ab2:	335d      	adds	r3, #93	; 0x5d
 8007ab4:	2207      	movs	r2, #7
 8007ab6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	015a      	lsls	r2, r3, #5
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	4413      	add	r3, r2
 8007ac0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ac4:	68db      	ldr	r3, [r3, #12]
 8007ac6:	68fa      	ldr	r2, [r7, #12]
 8007ac8:	0151      	lsls	r1, r2, #5
 8007aca:	693a      	ldr	r2, [r7, #16]
 8007acc:	440a      	add	r2, r1
 8007ace:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ad2:	f043 0302 	orr.w	r3, r3, #2
 8007ad6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	68fa      	ldr	r2, [r7, #12]
 8007ade:	b2d2      	uxtb	r2, r2
 8007ae0:	4611      	mov	r1, r2
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f003 fba5 	bl	800b232 <USB_HC_Halt>
 8007ae8:	e095      	b.n	8007c16 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	015a      	lsls	r2, r3, #5
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	4413      	add	r3, r2
 8007af2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007af6:	689b      	ldr	r3, [r3, #8]
 8007af8:	f003 0320 	and.w	r3, r3, #32
 8007afc:	2b20      	cmp	r3, #32
 8007afe:	d109      	bne.n	8007b14 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	015a      	lsls	r2, r3, #5
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	4413      	add	r3, r2
 8007b08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b0c:	461a      	mov	r2, r3
 8007b0e:	2320      	movs	r3, #32
 8007b10:	6093      	str	r3, [r2, #8]
 8007b12:	e080      	b.n	8007c16 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	015a      	lsls	r2, r3, #5
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	4413      	add	r3, r2
 8007b1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b20:	689b      	ldr	r3, [r3, #8]
 8007b22:	f003 0308 	and.w	r3, r3, #8
 8007b26:	2b08      	cmp	r3, #8
 8007b28:	d134      	bne.n	8007b94 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	015a      	lsls	r2, r3, #5
 8007b2e:	693b      	ldr	r3, [r7, #16]
 8007b30:	4413      	add	r3, r2
 8007b32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b36:	68db      	ldr	r3, [r3, #12]
 8007b38:	68fa      	ldr	r2, [r7, #12]
 8007b3a:	0151      	lsls	r1, r2, #5
 8007b3c:	693a      	ldr	r2, [r7, #16]
 8007b3e:	440a      	add	r2, r1
 8007b40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b44:	f043 0302 	orr.w	r3, r3, #2
 8007b48:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8007b4a:	6879      	ldr	r1, [r7, #4]
 8007b4c:	68fa      	ldr	r2, [r7, #12]
 8007b4e:	4613      	mov	r3, r2
 8007b50:	009b      	lsls	r3, r3, #2
 8007b52:	4413      	add	r3, r2
 8007b54:	00db      	lsls	r3, r3, #3
 8007b56:	440b      	add	r3, r1
 8007b58:	335d      	adds	r3, #93	; 0x5d
 8007b5a:	2205      	movs	r2, #5
 8007b5c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	015a      	lsls	r2, r3, #5
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	4413      	add	r3, r2
 8007b66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b6a:	461a      	mov	r2, r3
 8007b6c:	2310      	movs	r3, #16
 8007b6e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	015a      	lsls	r2, r3, #5
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	4413      	add	r3, r2
 8007b78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b7c:	461a      	mov	r2, r3
 8007b7e:	2308      	movs	r3, #8
 8007b80:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	68fa      	ldr	r2, [r7, #12]
 8007b88:	b2d2      	uxtb	r2, r2
 8007b8a:	4611      	mov	r1, r2
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f003 fb50 	bl	800b232 <USB_HC_Halt>
 8007b92:	e040      	b.n	8007c16 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	015a      	lsls	r2, r3, #5
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	4413      	add	r3, r2
 8007b9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ba0:	689b      	ldr	r3, [r3, #8]
 8007ba2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ba6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007baa:	d134      	bne.n	8007c16 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	015a      	lsls	r2, r3, #5
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	4413      	add	r3, r2
 8007bb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bb8:	68db      	ldr	r3, [r3, #12]
 8007bba:	68fa      	ldr	r2, [r7, #12]
 8007bbc:	0151      	lsls	r1, r2, #5
 8007bbe:	693a      	ldr	r2, [r7, #16]
 8007bc0:	440a      	add	r2, r1
 8007bc2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007bc6:	f043 0302 	orr.w	r3, r3, #2
 8007bca:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	68fa      	ldr	r2, [r7, #12]
 8007bd2:	b2d2      	uxtb	r2, r2
 8007bd4:	4611      	mov	r1, r2
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f003 fb2b 	bl	800b232 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	015a      	lsls	r2, r3, #5
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	4413      	add	r3, r2
 8007be4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007be8:	461a      	mov	r2, r3
 8007bea:	2310      	movs	r3, #16
 8007bec:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8007bee:	6879      	ldr	r1, [r7, #4]
 8007bf0:	68fa      	ldr	r2, [r7, #12]
 8007bf2:	4613      	mov	r3, r2
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	4413      	add	r3, r2
 8007bf8:	00db      	lsls	r3, r3, #3
 8007bfa:	440b      	add	r3, r1
 8007bfc:	335d      	adds	r3, #93	; 0x5d
 8007bfe:	2208      	movs	r2, #8
 8007c00:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	015a      	lsls	r2, r3, #5
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	4413      	add	r3, r2
 8007c0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c0e:	461a      	mov	r2, r3
 8007c10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c14:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	015a      	lsls	r2, r3, #5
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	4413      	add	r3, r2
 8007c1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c22:	689b      	ldr	r3, [r3, #8]
 8007c24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c2c:	d122      	bne.n	8007c74 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	015a      	lsls	r2, r3, #5
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	4413      	add	r3, r2
 8007c36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c3a:	68db      	ldr	r3, [r3, #12]
 8007c3c:	68fa      	ldr	r2, [r7, #12]
 8007c3e:	0151      	lsls	r1, r2, #5
 8007c40:	693a      	ldr	r2, [r7, #16]
 8007c42:	440a      	add	r2, r1
 8007c44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c48:	f043 0302 	orr.w	r3, r3, #2
 8007c4c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	68fa      	ldr	r2, [r7, #12]
 8007c54:	b2d2      	uxtb	r2, r2
 8007c56:	4611      	mov	r1, r2
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f003 faea 	bl	800b232 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	015a      	lsls	r2, r3, #5
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	4413      	add	r3, r2
 8007c66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c70:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8007c72:	e300      	b.n	8008276 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	015a      	lsls	r2, r3, #5
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	4413      	add	r3, r2
 8007c7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c80:	689b      	ldr	r3, [r3, #8]
 8007c82:	f003 0301 	and.w	r3, r3, #1
 8007c86:	2b01      	cmp	r3, #1
 8007c88:	f040 80fd 	bne.w	8007e86 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	691b      	ldr	r3, [r3, #16]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d01b      	beq.n	8007ccc <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8007c94:	6879      	ldr	r1, [r7, #4]
 8007c96:	68fa      	ldr	r2, [r7, #12]
 8007c98:	4613      	mov	r3, r2
 8007c9a:	009b      	lsls	r3, r3, #2
 8007c9c:	4413      	add	r3, r2
 8007c9e:	00db      	lsls	r3, r3, #3
 8007ca0:	440b      	add	r3, r1
 8007ca2:	3348      	adds	r3, #72	; 0x48
 8007ca4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	0159      	lsls	r1, r3, #5
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	440b      	add	r3, r1
 8007cae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cb2:	691b      	ldr	r3, [r3, #16]
 8007cb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8007cb8:	1ad1      	subs	r1, r2, r3
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	68fa      	ldr	r2, [r7, #12]
 8007cbe:	4613      	mov	r3, r2
 8007cc0:	009b      	lsls	r3, r3, #2
 8007cc2:	4413      	add	r3, r2
 8007cc4:	00db      	lsls	r3, r3, #3
 8007cc6:	4403      	add	r3, r0
 8007cc8:	334c      	adds	r3, #76	; 0x4c
 8007cca:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8007ccc:	6879      	ldr	r1, [r7, #4]
 8007cce:	68fa      	ldr	r2, [r7, #12]
 8007cd0:	4613      	mov	r3, r2
 8007cd2:	009b      	lsls	r3, r3, #2
 8007cd4:	4413      	add	r3, r2
 8007cd6:	00db      	lsls	r3, r3, #3
 8007cd8:	440b      	add	r3, r1
 8007cda:	335d      	adds	r3, #93	; 0x5d
 8007cdc:	2201      	movs	r2, #1
 8007cde:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8007ce0:	6879      	ldr	r1, [r7, #4]
 8007ce2:	68fa      	ldr	r2, [r7, #12]
 8007ce4:	4613      	mov	r3, r2
 8007ce6:	009b      	lsls	r3, r3, #2
 8007ce8:	4413      	add	r3, r2
 8007cea:	00db      	lsls	r3, r3, #3
 8007cec:	440b      	add	r3, r1
 8007cee:	3358      	adds	r3, #88	; 0x58
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	015a      	lsls	r2, r3, #5
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	4413      	add	r3, r2
 8007cfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d00:	461a      	mov	r2, r3
 8007d02:	2301      	movs	r3, #1
 8007d04:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8007d06:	6879      	ldr	r1, [r7, #4]
 8007d08:	68fa      	ldr	r2, [r7, #12]
 8007d0a:	4613      	mov	r3, r2
 8007d0c:	009b      	lsls	r3, r3, #2
 8007d0e:	4413      	add	r3, r2
 8007d10:	00db      	lsls	r3, r3, #3
 8007d12:	440b      	add	r3, r1
 8007d14:	333f      	adds	r3, #63	; 0x3f
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d00a      	beq.n	8007d32 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8007d1c:	6879      	ldr	r1, [r7, #4]
 8007d1e:	68fa      	ldr	r2, [r7, #12]
 8007d20:	4613      	mov	r3, r2
 8007d22:	009b      	lsls	r3, r3, #2
 8007d24:	4413      	add	r3, r2
 8007d26:	00db      	lsls	r3, r3, #3
 8007d28:	440b      	add	r3, r1
 8007d2a:	333f      	adds	r3, #63	; 0x3f
 8007d2c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8007d2e:	2b02      	cmp	r3, #2
 8007d30:	d121      	bne.n	8007d76 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	015a      	lsls	r2, r3, #5
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	4413      	add	r3, r2
 8007d3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d3e:	68db      	ldr	r3, [r3, #12]
 8007d40:	68fa      	ldr	r2, [r7, #12]
 8007d42:	0151      	lsls	r1, r2, #5
 8007d44:	693a      	ldr	r2, [r7, #16]
 8007d46:	440a      	add	r2, r1
 8007d48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d4c:	f043 0302 	orr.w	r3, r3, #2
 8007d50:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	68fa      	ldr	r2, [r7, #12]
 8007d58:	b2d2      	uxtb	r2, r2
 8007d5a:	4611      	mov	r1, r2
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f003 fa68 	bl	800b232 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	015a      	lsls	r2, r3, #5
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	4413      	add	r3, r2
 8007d6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d6e:	461a      	mov	r2, r3
 8007d70:	2310      	movs	r3, #16
 8007d72:	6093      	str	r3, [r2, #8]
 8007d74:	e070      	b.n	8007e58 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8007d76:	6879      	ldr	r1, [r7, #4]
 8007d78:	68fa      	ldr	r2, [r7, #12]
 8007d7a:	4613      	mov	r3, r2
 8007d7c:	009b      	lsls	r3, r3, #2
 8007d7e:	4413      	add	r3, r2
 8007d80:	00db      	lsls	r3, r3, #3
 8007d82:	440b      	add	r3, r1
 8007d84:	333f      	adds	r3, #63	; 0x3f
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	2b03      	cmp	r3, #3
 8007d8a:	d12a      	bne.n	8007de2 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	015a      	lsls	r2, r3, #5
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	4413      	add	r3, r2
 8007d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	68fa      	ldr	r2, [r7, #12]
 8007d9c:	0151      	lsls	r1, r2, #5
 8007d9e:	693a      	ldr	r2, [r7, #16]
 8007da0:	440a      	add	r2, r1
 8007da2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007da6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007daa:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8007dac:	6879      	ldr	r1, [r7, #4]
 8007dae:	68fa      	ldr	r2, [r7, #12]
 8007db0:	4613      	mov	r3, r2
 8007db2:	009b      	lsls	r3, r3, #2
 8007db4:	4413      	add	r3, r2
 8007db6:	00db      	lsls	r3, r3, #3
 8007db8:	440b      	add	r3, r1
 8007dba:	335c      	adds	r3, #92	; 0x5c
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	b2d8      	uxtb	r0, r3
 8007dc4:	6879      	ldr	r1, [r7, #4]
 8007dc6:	68fa      	ldr	r2, [r7, #12]
 8007dc8:	4613      	mov	r3, r2
 8007dca:	009b      	lsls	r3, r3, #2
 8007dcc:	4413      	add	r3, r2
 8007dce:	00db      	lsls	r3, r3, #3
 8007dd0:	440b      	add	r3, r1
 8007dd2:	335c      	adds	r3, #92	; 0x5c
 8007dd4:	781b      	ldrb	r3, [r3, #0]
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	4601      	mov	r1, r0
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f005 fbcc 	bl	800d578 <HAL_HCD_HC_NotifyURBChange_Callback>
 8007de0:	e03a      	b.n	8007e58 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8007de2:	6879      	ldr	r1, [r7, #4]
 8007de4:	68fa      	ldr	r2, [r7, #12]
 8007de6:	4613      	mov	r3, r2
 8007de8:	009b      	lsls	r3, r3, #2
 8007dea:	4413      	add	r3, r2
 8007dec:	00db      	lsls	r3, r3, #3
 8007dee:	440b      	add	r3, r1
 8007df0:	333f      	adds	r3, #63	; 0x3f
 8007df2:	781b      	ldrb	r3, [r3, #0]
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	d12f      	bne.n	8007e58 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8007df8:	6879      	ldr	r1, [r7, #4]
 8007dfa:	68fa      	ldr	r2, [r7, #12]
 8007dfc:	4613      	mov	r3, r2
 8007dfe:	009b      	lsls	r3, r3, #2
 8007e00:	4413      	add	r3, r2
 8007e02:	00db      	lsls	r3, r3, #3
 8007e04:	440b      	add	r3, r1
 8007e06:	335c      	adds	r3, #92	; 0x5c
 8007e08:	2201      	movs	r2, #1
 8007e0a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8007e0c:	6879      	ldr	r1, [r7, #4]
 8007e0e:	68fa      	ldr	r2, [r7, #12]
 8007e10:	4613      	mov	r3, r2
 8007e12:	009b      	lsls	r3, r3, #2
 8007e14:	4413      	add	r3, r2
 8007e16:	00db      	lsls	r3, r3, #3
 8007e18:	440b      	add	r3, r1
 8007e1a:	3350      	adds	r3, #80	; 0x50
 8007e1c:	781b      	ldrb	r3, [r3, #0]
 8007e1e:	f083 0301 	eor.w	r3, r3, #1
 8007e22:	b2d8      	uxtb	r0, r3
 8007e24:	6879      	ldr	r1, [r7, #4]
 8007e26:	68fa      	ldr	r2, [r7, #12]
 8007e28:	4613      	mov	r3, r2
 8007e2a:	009b      	lsls	r3, r3, #2
 8007e2c:	4413      	add	r3, r2
 8007e2e:	00db      	lsls	r3, r3, #3
 8007e30:	440b      	add	r3, r1
 8007e32:	3350      	adds	r3, #80	; 0x50
 8007e34:	4602      	mov	r2, r0
 8007e36:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	b2d8      	uxtb	r0, r3
 8007e3c:	6879      	ldr	r1, [r7, #4]
 8007e3e:	68fa      	ldr	r2, [r7, #12]
 8007e40:	4613      	mov	r3, r2
 8007e42:	009b      	lsls	r3, r3, #2
 8007e44:	4413      	add	r3, r2
 8007e46:	00db      	lsls	r3, r3, #3
 8007e48:	440b      	add	r3, r1
 8007e4a:	335c      	adds	r3, #92	; 0x5c
 8007e4c:	781b      	ldrb	r3, [r3, #0]
 8007e4e:	461a      	mov	r2, r3
 8007e50:	4601      	mov	r1, r0
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f005 fb90 	bl	800d578 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8007e58:	6879      	ldr	r1, [r7, #4]
 8007e5a:	68fa      	ldr	r2, [r7, #12]
 8007e5c:	4613      	mov	r3, r2
 8007e5e:	009b      	lsls	r3, r3, #2
 8007e60:	4413      	add	r3, r2
 8007e62:	00db      	lsls	r3, r3, #3
 8007e64:	440b      	add	r3, r1
 8007e66:	3350      	adds	r3, #80	; 0x50
 8007e68:	781b      	ldrb	r3, [r3, #0]
 8007e6a:	f083 0301 	eor.w	r3, r3, #1
 8007e6e:	b2d8      	uxtb	r0, r3
 8007e70:	6879      	ldr	r1, [r7, #4]
 8007e72:	68fa      	ldr	r2, [r7, #12]
 8007e74:	4613      	mov	r3, r2
 8007e76:	009b      	lsls	r3, r3, #2
 8007e78:	4413      	add	r3, r2
 8007e7a:	00db      	lsls	r3, r3, #3
 8007e7c:	440b      	add	r3, r1
 8007e7e:	3350      	adds	r3, #80	; 0x50
 8007e80:	4602      	mov	r2, r0
 8007e82:	701a      	strb	r2, [r3, #0]
}
 8007e84:	e1f7      	b.n	8008276 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	015a      	lsls	r2, r3, #5
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	4413      	add	r3, r2
 8007e8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e92:	689b      	ldr	r3, [r3, #8]
 8007e94:	f003 0302 	and.w	r3, r3, #2
 8007e98:	2b02      	cmp	r3, #2
 8007e9a:	f040 811a 	bne.w	80080d2 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	015a      	lsls	r2, r3, #5
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	4413      	add	r3, r2
 8007ea6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007eaa:	68db      	ldr	r3, [r3, #12]
 8007eac:	68fa      	ldr	r2, [r7, #12]
 8007eae:	0151      	lsls	r1, r2, #5
 8007eb0:	693a      	ldr	r2, [r7, #16]
 8007eb2:	440a      	add	r2, r1
 8007eb4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007eb8:	f023 0302 	bic.w	r3, r3, #2
 8007ebc:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8007ebe:	6879      	ldr	r1, [r7, #4]
 8007ec0:	68fa      	ldr	r2, [r7, #12]
 8007ec2:	4613      	mov	r3, r2
 8007ec4:	009b      	lsls	r3, r3, #2
 8007ec6:	4413      	add	r3, r2
 8007ec8:	00db      	lsls	r3, r3, #3
 8007eca:	440b      	add	r3, r1
 8007ecc:	335d      	adds	r3, #93	; 0x5d
 8007ece:	781b      	ldrb	r3, [r3, #0]
 8007ed0:	2b01      	cmp	r3, #1
 8007ed2:	d10a      	bne.n	8007eea <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8007ed4:	6879      	ldr	r1, [r7, #4]
 8007ed6:	68fa      	ldr	r2, [r7, #12]
 8007ed8:	4613      	mov	r3, r2
 8007eda:	009b      	lsls	r3, r3, #2
 8007edc:	4413      	add	r3, r2
 8007ede:	00db      	lsls	r3, r3, #3
 8007ee0:	440b      	add	r3, r1
 8007ee2:	335c      	adds	r3, #92	; 0x5c
 8007ee4:	2201      	movs	r2, #1
 8007ee6:	701a      	strb	r2, [r3, #0]
 8007ee8:	e0d9      	b.n	800809e <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8007eea:	6879      	ldr	r1, [r7, #4]
 8007eec:	68fa      	ldr	r2, [r7, #12]
 8007eee:	4613      	mov	r3, r2
 8007ef0:	009b      	lsls	r3, r3, #2
 8007ef2:	4413      	add	r3, r2
 8007ef4:	00db      	lsls	r3, r3, #3
 8007ef6:	440b      	add	r3, r1
 8007ef8:	335d      	adds	r3, #93	; 0x5d
 8007efa:	781b      	ldrb	r3, [r3, #0]
 8007efc:	2b05      	cmp	r3, #5
 8007efe:	d10a      	bne.n	8007f16 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8007f00:	6879      	ldr	r1, [r7, #4]
 8007f02:	68fa      	ldr	r2, [r7, #12]
 8007f04:	4613      	mov	r3, r2
 8007f06:	009b      	lsls	r3, r3, #2
 8007f08:	4413      	add	r3, r2
 8007f0a:	00db      	lsls	r3, r3, #3
 8007f0c:	440b      	add	r3, r1
 8007f0e:	335c      	adds	r3, #92	; 0x5c
 8007f10:	2205      	movs	r2, #5
 8007f12:	701a      	strb	r2, [r3, #0]
 8007f14:	e0c3      	b.n	800809e <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007f16:	6879      	ldr	r1, [r7, #4]
 8007f18:	68fa      	ldr	r2, [r7, #12]
 8007f1a:	4613      	mov	r3, r2
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	4413      	add	r3, r2
 8007f20:	00db      	lsls	r3, r3, #3
 8007f22:	440b      	add	r3, r1
 8007f24:	335d      	adds	r3, #93	; 0x5d
 8007f26:	781b      	ldrb	r3, [r3, #0]
 8007f28:	2b06      	cmp	r3, #6
 8007f2a:	d00a      	beq.n	8007f42 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8007f2c:	6879      	ldr	r1, [r7, #4]
 8007f2e:	68fa      	ldr	r2, [r7, #12]
 8007f30:	4613      	mov	r3, r2
 8007f32:	009b      	lsls	r3, r3, #2
 8007f34:	4413      	add	r3, r2
 8007f36:	00db      	lsls	r3, r3, #3
 8007f38:	440b      	add	r3, r1
 8007f3a:	335d      	adds	r3, #93	; 0x5d
 8007f3c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007f3e:	2b08      	cmp	r3, #8
 8007f40:	d156      	bne.n	8007ff0 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8007f42:	6879      	ldr	r1, [r7, #4]
 8007f44:	68fa      	ldr	r2, [r7, #12]
 8007f46:	4613      	mov	r3, r2
 8007f48:	009b      	lsls	r3, r3, #2
 8007f4a:	4413      	add	r3, r2
 8007f4c:	00db      	lsls	r3, r3, #3
 8007f4e:	440b      	add	r3, r1
 8007f50:	3358      	adds	r3, #88	; 0x58
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	1c59      	adds	r1, r3, #1
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	68fa      	ldr	r2, [r7, #12]
 8007f5a:	4613      	mov	r3, r2
 8007f5c:	009b      	lsls	r3, r3, #2
 8007f5e:	4413      	add	r3, r2
 8007f60:	00db      	lsls	r3, r3, #3
 8007f62:	4403      	add	r3, r0
 8007f64:	3358      	adds	r3, #88	; 0x58
 8007f66:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8007f68:	6879      	ldr	r1, [r7, #4]
 8007f6a:	68fa      	ldr	r2, [r7, #12]
 8007f6c:	4613      	mov	r3, r2
 8007f6e:	009b      	lsls	r3, r3, #2
 8007f70:	4413      	add	r3, r2
 8007f72:	00db      	lsls	r3, r3, #3
 8007f74:	440b      	add	r3, r1
 8007f76:	3358      	adds	r3, #88	; 0x58
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	2b03      	cmp	r3, #3
 8007f7c:	d914      	bls.n	8007fa8 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8007f7e:	6879      	ldr	r1, [r7, #4]
 8007f80:	68fa      	ldr	r2, [r7, #12]
 8007f82:	4613      	mov	r3, r2
 8007f84:	009b      	lsls	r3, r3, #2
 8007f86:	4413      	add	r3, r2
 8007f88:	00db      	lsls	r3, r3, #3
 8007f8a:	440b      	add	r3, r1
 8007f8c:	3358      	adds	r3, #88	; 0x58
 8007f8e:	2200      	movs	r2, #0
 8007f90:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007f92:	6879      	ldr	r1, [r7, #4]
 8007f94:	68fa      	ldr	r2, [r7, #12]
 8007f96:	4613      	mov	r3, r2
 8007f98:	009b      	lsls	r3, r3, #2
 8007f9a:	4413      	add	r3, r2
 8007f9c:	00db      	lsls	r3, r3, #3
 8007f9e:	440b      	add	r3, r1
 8007fa0:	335c      	adds	r3, #92	; 0x5c
 8007fa2:	2204      	movs	r2, #4
 8007fa4:	701a      	strb	r2, [r3, #0]
 8007fa6:	e009      	b.n	8007fbc <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007fa8:	6879      	ldr	r1, [r7, #4]
 8007faa:	68fa      	ldr	r2, [r7, #12]
 8007fac:	4613      	mov	r3, r2
 8007fae:	009b      	lsls	r3, r3, #2
 8007fb0:	4413      	add	r3, r2
 8007fb2:	00db      	lsls	r3, r3, #3
 8007fb4:	440b      	add	r3, r1
 8007fb6:	335c      	adds	r3, #92	; 0x5c
 8007fb8:	2202      	movs	r2, #2
 8007fba:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	015a      	lsls	r2, r3, #5
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	4413      	add	r3, r2
 8007fc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007fd2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007fda:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	015a      	lsls	r2, r3, #5
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	4413      	add	r3, r2
 8007fe4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fe8:	461a      	mov	r2, r3
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	6013      	str	r3, [r2, #0]
 8007fee:	e056      	b.n	800809e <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8007ff0:	6879      	ldr	r1, [r7, #4]
 8007ff2:	68fa      	ldr	r2, [r7, #12]
 8007ff4:	4613      	mov	r3, r2
 8007ff6:	009b      	lsls	r3, r3, #2
 8007ff8:	4413      	add	r3, r2
 8007ffa:	00db      	lsls	r3, r3, #3
 8007ffc:	440b      	add	r3, r1
 8007ffe:	335d      	adds	r3, #93	; 0x5d
 8008000:	781b      	ldrb	r3, [r3, #0]
 8008002:	2b03      	cmp	r3, #3
 8008004:	d123      	bne.n	800804e <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8008006:	6879      	ldr	r1, [r7, #4]
 8008008:	68fa      	ldr	r2, [r7, #12]
 800800a:	4613      	mov	r3, r2
 800800c:	009b      	lsls	r3, r3, #2
 800800e:	4413      	add	r3, r2
 8008010:	00db      	lsls	r3, r3, #3
 8008012:	440b      	add	r3, r1
 8008014:	335c      	adds	r3, #92	; 0x5c
 8008016:	2202      	movs	r2, #2
 8008018:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	015a      	lsls	r2, r3, #5
 800801e:	693b      	ldr	r3, [r7, #16]
 8008020:	4413      	add	r3, r2
 8008022:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008030:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008038:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	015a      	lsls	r2, r3, #5
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	4413      	add	r3, r2
 8008042:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008046:	461a      	mov	r2, r3
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	6013      	str	r3, [r2, #0]
 800804c:	e027      	b.n	800809e <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800804e:	6879      	ldr	r1, [r7, #4]
 8008050:	68fa      	ldr	r2, [r7, #12]
 8008052:	4613      	mov	r3, r2
 8008054:	009b      	lsls	r3, r3, #2
 8008056:	4413      	add	r3, r2
 8008058:	00db      	lsls	r3, r3, #3
 800805a:	440b      	add	r3, r1
 800805c:	335d      	adds	r3, #93	; 0x5d
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	2b07      	cmp	r3, #7
 8008062:	d11c      	bne.n	800809e <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8008064:	6879      	ldr	r1, [r7, #4]
 8008066:	68fa      	ldr	r2, [r7, #12]
 8008068:	4613      	mov	r3, r2
 800806a:	009b      	lsls	r3, r3, #2
 800806c:	4413      	add	r3, r2
 800806e:	00db      	lsls	r3, r3, #3
 8008070:	440b      	add	r3, r1
 8008072:	3358      	adds	r3, #88	; 0x58
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	1c59      	adds	r1, r3, #1
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	68fa      	ldr	r2, [r7, #12]
 800807c:	4613      	mov	r3, r2
 800807e:	009b      	lsls	r3, r3, #2
 8008080:	4413      	add	r3, r2
 8008082:	00db      	lsls	r3, r3, #3
 8008084:	4403      	add	r3, r0
 8008086:	3358      	adds	r3, #88	; 0x58
 8008088:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800808a:	6879      	ldr	r1, [r7, #4]
 800808c:	68fa      	ldr	r2, [r7, #12]
 800808e:	4613      	mov	r3, r2
 8008090:	009b      	lsls	r3, r3, #2
 8008092:	4413      	add	r3, r2
 8008094:	00db      	lsls	r3, r3, #3
 8008096:	440b      	add	r3, r1
 8008098:	335c      	adds	r3, #92	; 0x5c
 800809a:	2204      	movs	r2, #4
 800809c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	015a      	lsls	r2, r3, #5
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	4413      	add	r3, r2
 80080a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080aa:	461a      	mov	r2, r3
 80080ac:	2302      	movs	r3, #2
 80080ae:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	b2d8      	uxtb	r0, r3
 80080b4:	6879      	ldr	r1, [r7, #4]
 80080b6:	68fa      	ldr	r2, [r7, #12]
 80080b8:	4613      	mov	r3, r2
 80080ba:	009b      	lsls	r3, r3, #2
 80080bc:	4413      	add	r3, r2
 80080be:	00db      	lsls	r3, r3, #3
 80080c0:	440b      	add	r3, r1
 80080c2:	335c      	adds	r3, #92	; 0x5c
 80080c4:	781b      	ldrb	r3, [r3, #0]
 80080c6:	461a      	mov	r2, r3
 80080c8:	4601      	mov	r1, r0
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f005 fa54 	bl	800d578 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80080d0:	e0d1      	b.n	8008276 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	015a      	lsls	r2, r3, #5
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	4413      	add	r3, r2
 80080da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080de:	689b      	ldr	r3, [r3, #8]
 80080e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080e4:	2b80      	cmp	r3, #128	; 0x80
 80080e6:	d13e      	bne.n	8008166 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	015a      	lsls	r2, r3, #5
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	4413      	add	r3, r2
 80080f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080f4:	68db      	ldr	r3, [r3, #12]
 80080f6:	68fa      	ldr	r2, [r7, #12]
 80080f8:	0151      	lsls	r1, r2, #5
 80080fa:	693a      	ldr	r2, [r7, #16]
 80080fc:	440a      	add	r2, r1
 80080fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008102:	f043 0302 	orr.w	r3, r3, #2
 8008106:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8008108:	6879      	ldr	r1, [r7, #4]
 800810a:	68fa      	ldr	r2, [r7, #12]
 800810c:	4613      	mov	r3, r2
 800810e:	009b      	lsls	r3, r3, #2
 8008110:	4413      	add	r3, r2
 8008112:	00db      	lsls	r3, r3, #3
 8008114:	440b      	add	r3, r1
 8008116:	3358      	adds	r3, #88	; 0x58
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	1c59      	adds	r1, r3, #1
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	68fa      	ldr	r2, [r7, #12]
 8008120:	4613      	mov	r3, r2
 8008122:	009b      	lsls	r3, r3, #2
 8008124:	4413      	add	r3, r2
 8008126:	00db      	lsls	r3, r3, #3
 8008128:	4403      	add	r3, r0
 800812a:	3358      	adds	r3, #88	; 0x58
 800812c:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800812e:	6879      	ldr	r1, [r7, #4]
 8008130:	68fa      	ldr	r2, [r7, #12]
 8008132:	4613      	mov	r3, r2
 8008134:	009b      	lsls	r3, r3, #2
 8008136:	4413      	add	r3, r2
 8008138:	00db      	lsls	r3, r3, #3
 800813a:	440b      	add	r3, r1
 800813c:	335d      	adds	r3, #93	; 0x5d
 800813e:	2206      	movs	r2, #6
 8008140:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	68fa      	ldr	r2, [r7, #12]
 8008148:	b2d2      	uxtb	r2, r2
 800814a:	4611      	mov	r1, r2
 800814c:	4618      	mov	r0, r3
 800814e:	f003 f870 	bl	800b232 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	015a      	lsls	r2, r3, #5
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	4413      	add	r3, r2
 800815a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800815e:	461a      	mov	r2, r3
 8008160:	2380      	movs	r3, #128	; 0x80
 8008162:	6093      	str	r3, [r2, #8]
}
 8008164:	e087      	b.n	8008276 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	015a      	lsls	r2, r3, #5
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	4413      	add	r3, r2
 800816e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008172:	689b      	ldr	r3, [r3, #8]
 8008174:	f003 0310 	and.w	r3, r3, #16
 8008178:	2b10      	cmp	r3, #16
 800817a:	d17c      	bne.n	8008276 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800817c:	6879      	ldr	r1, [r7, #4]
 800817e:	68fa      	ldr	r2, [r7, #12]
 8008180:	4613      	mov	r3, r2
 8008182:	009b      	lsls	r3, r3, #2
 8008184:	4413      	add	r3, r2
 8008186:	00db      	lsls	r3, r3, #3
 8008188:	440b      	add	r3, r1
 800818a:	333f      	adds	r3, #63	; 0x3f
 800818c:	781b      	ldrb	r3, [r3, #0]
 800818e:	2b03      	cmp	r3, #3
 8008190:	d122      	bne.n	80081d8 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8008192:	6879      	ldr	r1, [r7, #4]
 8008194:	68fa      	ldr	r2, [r7, #12]
 8008196:	4613      	mov	r3, r2
 8008198:	009b      	lsls	r3, r3, #2
 800819a:	4413      	add	r3, r2
 800819c:	00db      	lsls	r3, r3, #3
 800819e:	440b      	add	r3, r1
 80081a0:	3358      	adds	r3, #88	; 0x58
 80081a2:	2200      	movs	r2, #0
 80081a4:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	015a      	lsls	r2, r3, #5
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	4413      	add	r3, r2
 80081ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081b2:	68db      	ldr	r3, [r3, #12]
 80081b4:	68fa      	ldr	r2, [r7, #12]
 80081b6:	0151      	lsls	r1, r2, #5
 80081b8:	693a      	ldr	r2, [r7, #16]
 80081ba:	440a      	add	r2, r1
 80081bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80081c0:	f043 0302 	orr.w	r3, r3, #2
 80081c4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	68fa      	ldr	r2, [r7, #12]
 80081cc:	b2d2      	uxtb	r2, r2
 80081ce:	4611      	mov	r1, r2
 80081d0:	4618      	mov	r0, r3
 80081d2:	f003 f82e 	bl	800b232 <USB_HC_Halt>
 80081d6:	e045      	b.n	8008264 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80081d8:	6879      	ldr	r1, [r7, #4]
 80081da:	68fa      	ldr	r2, [r7, #12]
 80081dc:	4613      	mov	r3, r2
 80081de:	009b      	lsls	r3, r3, #2
 80081e0:	4413      	add	r3, r2
 80081e2:	00db      	lsls	r3, r3, #3
 80081e4:	440b      	add	r3, r1
 80081e6:	333f      	adds	r3, #63	; 0x3f
 80081e8:	781b      	ldrb	r3, [r3, #0]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d00a      	beq.n	8008204 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80081ee:	6879      	ldr	r1, [r7, #4]
 80081f0:	68fa      	ldr	r2, [r7, #12]
 80081f2:	4613      	mov	r3, r2
 80081f4:	009b      	lsls	r3, r3, #2
 80081f6:	4413      	add	r3, r2
 80081f8:	00db      	lsls	r3, r3, #3
 80081fa:	440b      	add	r3, r1
 80081fc:	333f      	adds	r3, #63	; 0x3f
 80081fe:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8008200:	2b02      	cmp	r3, #2
 8008202:	d12f      	bne.n	8008264 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8008204:	6879      	ldr	r1, [r7, #4]
 8008206:	68fa      	ldr	r2, [r7, #12]
 8008208:	4613      	mov	r3, r2
 800820a:	009b      	lsls	r3, r3, #2
 800820c:	4413      	add	r3, r2
 800820e:	00db      	lsls	r3, r3, #3
 8008210:	440b      	add	r3, r1
 8008212:	3358      	adds	r3, #88	; 0x58
 8008214:	2200      	movs	r2, #0
 8008216:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	691b      	ldr	r3, [r3, #16]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d121      	bne.n	8008264 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8008220:	6879      	ldr	r1, [r7, #4]
 8008222:	68fa      	ldr	r2, [r7, #12]
 8008224:	4613      	mov	r3, r2
 8008226:	009b      	lsls	r3, r3, #2
 8008228:	4413      	add	r3, r2
 800822a:	00db      	lsls	r3, r3, #3
 800822c:	440b      	add	r3, r1
 800822e:	335d      	adds	r3, #93	; 0x5d
 8008230:	2203      	movs	r2, #3
 8008232:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	015a      	lsls	r2, r3, #5
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	4413      	add	r3, r2
 800823c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008240:	68db      	ldr	r3, [r3, #12]
 8008242:	68fa      	ldr	r2, [r7, #12]
 8008244:	0151      	lsls	r1, r2, #5
 8008246:	693a      	ldr	r2, [r7, #16]
 8008248:	440a      	add	r2, r1
 800824a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800824e:	f043 0302 	orr.w	r3, r3, #2
 8008252:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	68fa      	ldr	r2, [r7, #12]
 800825a:	b2d2      	uxtb	r2, r2
 800825c:	4611      	mov	r1, r2
 800825e:	4618      	mov	r0, r3
 8008260:	f002 ffe7 	bl	800b232 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	015a      	lsls	r2, r3, #5
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	4413      	add	r3, r2
 800826c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008270:	461a      	mov	r2, r3
 8008272:	2310      	movs	r3, #16
 8008274:	6093      	str	r3, [r2, #8]
}
 8008276:	bf00      	nop
 8008278:	3718      	adds	r7, #24
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}

0800827e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800827e:	b580      	push	{r7, lr}
 8008280:	b086      	sub	sp, #24
 8008282:	af00      	add	r7, sp, #0
 8008284:	6078      	str	r0, [r7, #4]
 8008286:	460b      	mov	r3, r1
 8008288:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8008294:	78fb      	ldrb	r3, [r7, #3]
 8008296:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	015a      	lsls	r2, r3, #5
 800829c:	693b      	ldr	r3, [r7, #16]
 800829e:	4413      	add	r3, r2
 80082a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082a4:	689b      	ldr	r3, [r3, #8]
 80082a6:	f003 0304 	and.w	r3, r3, #4
 80082aa:	2b04      	cmp	r3, #4
 80082ac:	d119      	bne.n	80082e2 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	015a      	lsls	r2, r3, #5
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	4413      	add	r3, r2
 80082b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082ba:	461a      	mov	r2, r3
 80082bc:	2304      	movs	r3, #4
 80082be:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	015a      	lsls	r2, r3, #5
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	4413      	add	r3, r2
 80082c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082cc:	68db      	ldr	r3, [r3, #12]
 80082ce:	68fa      	ldr	r2, [r7, #12]
 80082d0:	0151      	lsls	r1, r2, #5
 80082d2:	693a      	ldr	r2, [r7, #16]
 80082d4:	440a      	add	r2, r1
 80082d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082da:	f043 0302 	orr.w	r3, r3, #2
 80082de:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80082e0:	e33e      	b.n	8008960 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	015a      	lsls	r2, r3, #5
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	4413      	add	r3, r2
 80082ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082ee:	689b      	ldr	r3, [r3, #8]
 80082f0:	f003 0320 	and.w	r3, r3, #32
 80082f4:	2b20      	cmp	r3, #32
 80082f6:	d141      	bne.n	800837c <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	015a      	lsls	r2, r3, #5
 80082fc:	693b      	ldr	r3, [r7, #16]
 80082fe:	4413      	add	r3, r2
 8008300:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008304:	461a      	mov	r2, r3
 8008306:	2320      	movs	r3, #32
 8008308:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800830a:	6879      	ldr	r1, [r7, #4]
 800830c:	68fa      	ldr	r2, [r7, #12]
 800830e:	4613      	mov	r3, r2
 8008310:	009b      	lsls	r3, r3, #2
 8008312:	4413      	add	r3, r2
 8008314:	00db      	lsls	r3, r3, #3
 8008316:	440b      	add	r3, r1
 8008318:	333d      	adds	r3, #61	; 0x3d
 800831a:	781b      	ldrb	r3, [r3, #0]
 800831c:	2b01      	cmp	r3, #1
 800831e:	f040 831f 	bne.w	8008960 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8008322:	6879      	ldr	r1, [r7, #4]
 8008324:	68fa      	ldr	r2, [r7, #12]
 8008326:	4613      	mov	r3, r2
 8008328:	009b      	lsls	r3, r3, #2
 800832a:	4413      	add	r3, r2
 800832c:	00db      	lsls	r3, r3, #3
 800832e:	440b      	add	r3, r1
 8008330:	333d      	adds	r3, #61	; 0x3d
 8008332:	2200      	movs	r2, #0
 8008334:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8008336:	6879      	ldr	r1, [r7, #4]
 8008338:	68fa      	ldr	r2, [r7, #12]
 800833a:	4613      	mov	r3, r2
 800833c:	009b      	lsls	r3, r3, #2
 800833e:	4413      	add	r3, r2
 8008340:	00db      	lsls	r3, r3, #3
 8008342:	440b      	add	r3, r1
 8008344:	335c      	adds	r3, #92	; 0x5c
 8008346:	2202      	movs	r2, #2
 8008348:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	015a      	lsls	r2, r3, #5
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	4413      	add	r3, r2
 8008352:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008356:	68db      	ldr	r3, [r3, #12]
 8008358:	68fa      	ldr	r2, [r7, #12]
 800835a:	0151      	lsls	r1, r2, #5
 800835c:	693a      	ldr	r2, [r7, #16]
 800835e:	440a      	add	r2, r1
 8008360:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008364:	f043 0302 	orr.w	r3, r3, #2
 8008368:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	68fa      	ldr	r2, [r7, #12]
 8008370:	b2d2      	uxtb	r2, r2
 8008372:	4611      	mov	r1, r2
 8008374:	4618      	mov	r0, r3
 8008376:	f002 ff5c 	bl	800b232 <USB_HC_Halt>
}
 800837a:	e2f1      	b.n	8008960 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	015a      	lsls	r2, r3, #5
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	4413      	add	r3, r2
 8008384:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008388:	689b      	ldr	r3, [r3, #8]
 800838a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800838e:	2b40      	cmp	r3, #64	; 0x40
 8008390:	d13f      	bne.n	8008412 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8008392:	6879      	ldr	r1, [r7, #4]
 8008394:	68fa      	ldr	r2, [r7, #12]
 8008396:	4613      	mov	r3, r2
 8008398:	009b      	lsls	r3, r3, #2
 800839a:	4413      	add	r3, r2
 800839c:	00db      	lsls	r3, r3, #3
 800839e:	440b      	add	r3, r1
 80083a0:	335d      	adds	r3, #93	; 0x5d
 80083a2:	2204      	movs	r2, #4
 80083a4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80083a6:	6879      	ldr	r1, [r7, #4]
 80083a8:	68fa      	ldr	r2, [r7, #12]
 80083aa:	4613      	mov	r3, r2
 80083ac:	009b      	lsls	r3, r3, #2
 80083ae:	4413      	add	r3, r2
 80083b0:	00db      	lsls	r3, r3, #3
 80083b2:	440b      	add	r3, r1
 80083b4:	333d      	adds	r3, #61	; 0x3d
 80083b6:	2201      	movs	r2, #1
 80083b8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80083ba:	6879      	ldr	r1, [r7, #4]
 80083bc:	68fa      	ldr	r2, [r7, #12]
 80083be:	4613      	mov	r3, r2
 80083c0:	009b      	lsls	r3, r3, #2
 80083c2:	4413      	add	r3, r2
 80083c4:	00db      	lsls	r3, r3, #3
 80083c6:	440b      	add	r3, r1
 80083c8:	3358      	adds	r3, #88	; 0x58
 80083ca:	2200      	movs	r2, #0
 80083cc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	015a      	lsls	r2, r3, #5
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	4413      	add	r3, r2
 80083d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083da:	68db      	ldr	r3, [r3, #12]
 80083dc:	68fa      	ldr	r2, [r7, #12]
 80083de:	0151      	lsls	r1, r2, #5
 80083e0:	693a      	ldr	r2, [r7, #16]
 80083e2:	440a      	add	r2, r1
 80083e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80083e8:	f043 0302 	orr.w	r3, r3, #2
 80083ec:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	68fa      	ldr	r2, [r7, #12]
 80083f4:	b2d2      	uxtb	r2, r2
 80083f6:	4611      	mov	r1, r2
 80083f8:	4618      	mov	r0, r3
 80083fa:	f002 ff1a 	bl	800b232 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	015a      	lsls	r2, r3, #5
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	4413      	add	r3, r2
 8008406:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800840a:	461a      	mov	r2, r3
 800840c:	2340      	movs	r3, #64	; 0x40
 800840e:	6093      	str	r3, [r2, #8]
}
 8008410:	e2a6      	b.n	8008960 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	015a      	lsls	r2, r3, #5
 8008416:	693b      	ldr	r3, [r7, #16]
 8008418:	4413      	add	r3, r2
 800841a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800841e:	689b      	ldr	r3, [r3, #8]
 8008420:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008424:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008428:	d122      	bne.n	8008470 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	015a      	lsls	r2, r3, #5
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	4413      	add	r3, r2
 8008432:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008436:	68db      	ldr	r3, [r3, #12]
 8008438:	68fa      	ldr	r2, [r7, #12]
 800843a:	0151      	lsls	r1, r2, #5
 800843c:	693a      	ldr	r2, [r7, #16]
 800843e:	440a      	add	r2, r1
 8008440:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008444:	f043 0302 	orr.w	r3, r3, #2
 8008448:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	68fa      	ldr	r2, [r7, #12]
 8008450:	b2d2      	uxtb	r2, r2
 8008452:	4611      	mov	r1, r2
 8008454:	4618      	mov	r0, r3
 8008456:	f002 feec 	bl	800b232 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	015a      	lsls	r2, r3, #5
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	4413      	add	r3, r2
 8008462:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008466:	461a      	mov	r2, r3
 8008468:	f44f 7300 	mov.w	r3, #512	; 0x200
 800846c:	6093      	str	r3, [r2, #8]
}
 800846e:	e277      	b.n	8008960 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	015a      	lsls	r2, r3, #5
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	4413      	add	r3, r2
 8008478:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800847c:	689b      	ldr	r3, [r3, #8]
 800847e:	f003 0301 	and.w	r3, r3, #1
 8008482:	2b01      	cmp	r3, #1
 8008484:	d135      	bne.n	80084f2 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8008486:	6879      	ldr	r1, [r7, #4]
 8008488:	68fa      	ldr	r2, [r7, #12]
 800848a:	4613      	mov	r3, r2
 800848c:	009b      	lsls	r3, r3, #2
 800848e:	4413      	add	r3, r2
 8008490:	00db      	lsls	r3, r3, #3
 8008492:	440b      	add	r3, r1
 8008494:	3358      	adds	r3, #88	; 0x58
 8008496:	2200      	movs	r2, #0
 8008498:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	015a      	lsls	r2, r3, #5
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	4413      	add	r3, r2
 80084a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084a6:	68db      	ldr	r3, [r3, #12]
 80084a8:	68fa      	ldr	r2, [r7, #12]
 80084aa:	0151      	lsls	r1, r2, #5
 80084ac:	693a      	ldr	r2, [r7, #16]
 80084ae:	440a      	add	r2, r1
 80084b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80084b4:	f043 0302 	orr.w	r3, r3, #2
 80084b8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	68fa      	ldr	r2, [r7, #12]
 80084c0:	b2d2      	uxtb	r2, r2
 80084c2:	4611      	mov	r1, r2
 80084c4:	4618      	mov	r0, r3
 80084c6:	f002 feb4 	bl	800b232 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	015a      	lsls	r2, r3, #5
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	4413      	add	r3, r2
 80084d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084d6:	461a      	mov	r2, r3
 80084d8:	2301      	movs	r3, #1
 80084da:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80084dc:	6879      	ldr	r1, [r7, #4]
 80084de:	68fa      	ldr	r2, [r7, #12]
 80084e0:	4613      	mov	r3, r2
 80084e2:	009b      	lsls	r3, r3, #2
 80084e4:	4413      	add	r3, r2
 80084e6:	00db      	lsls	r3, r3, #3
 80084e8:	440b      	add	r3, r1
 80084ea:	335d      	adds	r3, #93	; 0x5d
 80084ec:	2201      	movs	r2, #1
 80084ee:	701a      	strb	r2, [r3, #0]
}
 80084f0:	e236      	b.n	8008960 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	015a      	lsls	r2, r3, #5
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	4413      	add	r3, r2
 80084fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084fe:	689b      	ldr	r3, [r3, #8]
 8008500:	f003 0308 	and.w	r3, r3, #8
 8008504:	2b08      	cmp	r3, #8
 8008506:	d12b      	bne.n	8008560 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	015a      	lsls	r2, r3, #5
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	4413      	add	r3, r2
 8008510:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008514:	461a      	mov	r2, r3
 8008516:	2308      	movs	r3, #8
 8008518:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	015a      	lsls	r2, r3, #5
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	4413      	add	r3, r2
 8008522:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008526:	68db      	ldr	r3, [r3, #12]
 8008528:	68fa      	ldr	r2, [r7, #12]
 800852a:	0151      	lsls	r1, r2, #5
 800852c:	693a      	ldr	r2, [r7, #16]
 800852e:	440a      	add	r2, r1
 8008530:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008534:	f043 0302 	orr.w	r3, r3, #2
 8008538:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	68fa      	ldr	r2, [r7, #12]
 8008540:	b2d2      	uxtb	r2, r2
 8008542:	4611      	mov	r1, r2
 8008544:	4618      	mov	r0, r3
 8008546:	f002 fe74 	bl	800b232 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800854a:	6879      	ldr	r1, [r7, #4]
 800854c:	68fa      	ldr	r2, [r7, #12]
 800854e:	4613      	mov	r3, r2
 8008550:	009b      	lsls	r3, r3, #2
 8008552:	4413      	add	r3, r2
 8008554:	00db      	lsls	r3, r3, #3
 8008556:	440b      	add	r3, r1
 8008558:	335d      	adds	r3, #93	; 0x5d
 800855a:	2205      	movs	r2, #5
 800855c:	701a      	strb	r2, [r3, #0]
}
 800855e:	e1ff      	b.n	8008960 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	015a      	lsls	r2, r3, #5
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	4413      	add	r3, r2
 8008568:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800856c:	689b      	ldr	r3, [r3, #8]
 800856e:	f003 0310 	and.w	r3, r3, #16
 8008572:	2b10      	cmp	r3, #16
 8008574:	d155      	bne.n	8008622 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8008576:	6879      	ldr	r1, [r7, #4]
 8008578:	68fa      	ldr	r2, [r7, #12]
 800857a:	4613      	mov	r3, r2
 800857c:	009b      	lsls	r3, r3, #2
 800857e:	4413      	add	r3, r2
 8008580:	00db      	lsls	r3, r3, #3
 8008582:	440b      	add	r3, r1
 8008584:	3358      	adds	r3, #88	; 0x58
 8008586:	2200      	movs	r2, #0
 8008588:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800858a:	6879      	ldr	r1, [r7, #4]
 800858c:	68fa      	ldr	r2, [r7, #12]
 800858e:	4613      	mov	r3, r2
 8008590:	009b      	lsls	r3, r3, #2
 8008592:	4413      	add	r3, r2
 8008594:	00db      	lsls	r3, r3, #3
 8008596:	440b      	add	r3, r1
 8008598:	335d      	adds	r3, #93	; 0x5d
 800859a:	2203      	movs	r2, #3
 800859c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800859e:	6879      	ldr	r1, [r7, #4]
 80085a0:	68fa      	ldr	r2, [r7, #12]
 80085a2:	4613      	mov	r3, r2
 80085a4:	009b      	lsls	r3, r3, #2
 80085a6:	4413      	add	r3, r2
 80085a8:	00db      	lsls	r3, r3, #3
 80085aa:	440b      	add	r3, r1
 80085ac:	333d      	adds	r3, #61	; 0x3d
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d114      	bne.n	80085de <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80085b4:	6879      	ldr	r1, [r7, #4]
 80085b6:	68fa      	ldr	r2, [r7, #12]
 80085b8:	4613      	mov	r3, r2
 80085ba:	009b      	lsls	r3, r3, #2
 80085bc:	4413      	add	r3, r2
 80085be:	00db      	lsls	r3, r3, #3
 80085c0:	440b      	add	r3, r1
 80085c2:	333c      	adds	r3, #60	; 0x3c
 80085c4:	781b      	ldrb	r3, [r3, #0]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d109      	bne.n	80085de <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 80085ca:	6879      	ldr	r1, [r7, #4]
 80085cc:	68fa      	ldr	r2, [r7, #12]
 80085ce:	4613      	mov	r3, r2
 80085d0:	009b      	lsls	r3, r3, #2
 80085d2:	4413      	add	r3, r2
 80085d4:	00db      	lsls	r3, r3, #3
 80085d6:	440b      	add	r3, r1
 80085d8:	333d      	adds	r3, #61	; 0x3d
 80085da:	2201      	movs	r2, #1
 80085dc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	015a      	lsls	r2, r3, #5
 80085e2:	693b      	ldr	r3, [r7, #16]
 80085e4:	4413      	add	r3, r2
 80085e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085ea:	68db      	ldr	r3, [r3, #12]
 80085ec:	68fa      	ldr	r2, [r7, #12]
 80085ee:	0151      	lsls	r1, r2, #5
 80085f0:	693a      	ldr	r2, [r7, #16]
 80085f2:	440a      	add	r2, r1
 80085f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80085f8:	f043 0302 	orr.w	r3, r3, #2
 80085fc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	68fa      	ldr	r2, [r7, #12]
 8008604:	b2d2      	uxtb	r2, r2
 8008606:	4611      	mov	r1, r2
 8008608:	4618      	mov	r0, r3
 800860a:	f002 fe12 	bl	800b232 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	015a      	lsls	r2, r3, #5
 8008612:	693b      	ldr	r3, [r7, #16]
 8008614:	4413      	add	r3, r2
 8008616:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800861a:	461a      	mov	r2, r3
 800861c:	2310      	movs	r3, #16
 800861e:	6093      	str	r3, [r2, #8]
}
 8008620:	e19e      	b.n	8008960 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	015a      	lsls	r2, r3, #5
 8008626:	693b      	ldr	r3, [r7, #16]
 8008628:	4413      	add	r3, r2
 800862a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800862e:	689b      	ldr	r3, [r3, #8]
 8008630:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008634:	2b80      	cmp	r3, #128	; 0x80
 8008636:	d12b      	bne.n	8008690 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	015a      	lsls	r2, r3, #5
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	4413      	add	r3, r2
 8008640:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008644:	68db      	ldr	r3, [r3, #12]
 8008646:	68fa      	ldr	r2, [r7, #12]
 8008648:	0151      	lsls	r1, r2, #5
 800864a:	693a      	ldr	r2, [r7, #16]
 800864c:	440a      	add	r2, r1
 800864e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008652:	f043 0302 	orr.w	r3, r3, #2
 8008656:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	68fa      	ldr	r2, [r7, #12]
 800865e:	b2d2      	uxtb	r2, r2
 8008660:	4611      	mov	r1, r2
 8008662:	4618      	mov	r0, r3
 8008664:	f002 fde5 	bl	800b232 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8008668:	6879      	ldr	r1, [r7, #4]
 800866a:	68fa      	ldr	r2, [r7, #12]
 800866c:	4613      	mov	r3, r2
 800866e:	009b      	lsls	r3, r3, #2
 8008670:	4413      	add	r3, r2
 8008672:	00db      	lsls	r3, r3, #3
 8008674:	440b      	add	r3, r1
 8008676:	335d      	adds	r3, #93	; 0x5d
 8008678:	2206      	movs	r2, #6
 800867a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	015a      	lsls	r2, r3, #5
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	4413      	add	r3, r2
 8008684:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008688:	461a      	mov	r2, r3
 800868a:	2380      	movs	r3, #128	; 0x80
 800868c:	6093      	str	r3, [r2, #8]
}
 800868e:	e167      	b.n	8008960 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	015a      	lsls	r2, r3, #5
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	4413      	add	r3, r2
 8008698:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800869c:	689b      	ldr	r3, [r3, #8]
 800869e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086a6:	d135      	bne.n	8008714 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	015a      	lsls	r2, r3, #5
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	4413      	add	r3, r2
 80086b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086b4:	68db      	ldr	r3, [r3, #12]
 80086b6:	68fa      	ldr	r2, [r7, #12]
 80086b8:	0151      	lsls	r1, r2, #5
 80086ba:	693a      	ldr	r2, [r7, #16]
 80086bc:	440a      	add	r2, r1
 80086be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80086c2:	f043 0302 	orr.w	r3, r3, #2
 80086c6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	68fa      	ldr	r2, [r7, #12]
 80086ce:	b2d2      	uxtb	r2, r2
 80086d0:	4611      	mov	r1, r2
 80086d2:	4618      	mov	r0, r3
 80086d4:	f002 fdad 	bl	800b232 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	015a      	lsls	r2, r3, #5
 80086dc:	693b      	ldr	r3, [r7, #16]
 80086de:	4413      	add	r3, r2
 80086e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086e4:	461a      	mov	r2, r3
 80086e6:	2310      	movs	r3, #16
 80086e8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	015a      	lsls	r2, r3, #5
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	4413      	add	r3, r2
 80086f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086f6:	461a      	mov	r2, r3
 80086f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086fc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80086fe:	6879      	ldr	r1, [r7, #4]
 8008700:	68fa      	ldr	r2, [r7, #12]
 8008702:	4613      	mov	r3, r2
 8008704:	009b      	lsls	r3, r3, #2
 8008706:	4413      	add	r3, r2
 8008708:	00db      	lsls	r3, r3, #3
 800870a:	440b      	add	r3, r1
 800870c:	335d      	adds	r3, #93	; 0x5d
 800870e:	2208      	movs	r2, #8
 8008710:	701a      	strb	r2, [r3, #0]
}
 8008712:	e125      	b.n	8008960 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	015a      	lsls	r2, r3, #5
 8008718:	693b      	ldr	r3, [r7, #16]
 800871a:	4413      	add	r3, r2
 800871c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008720:	689b      	ldr	r3, [r3, #8]
 8008722:	f003 0302 	and.w	r3, r3, #2
 8008726:	2b02      	cmp	r3, #2
 8008728:	f040 811a 	bne.w	8008960 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	015a      	lsls	r2, r3, #5
 8008730:	693b      	ldr	r3, [r7, #16]
 8008732:	4413      	add	r3, r2
 8008734:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008738:	68db      	ldr	r3, [r3, #12]
 800873a:	68fa      	ldr	r2, [r7, #12]
 800873c:	0151      	lsls	r1, r2, #5
 800873e:	693a      	ldr	r2, [r7, #16]
 8008740:	440a      	add	r2, r1
 8008742:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008746:	f023 0302 	bic.w	r3, r3, #2
 800874a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800874c:	6879      	ldr	r1, [r7, #4]
 800874e:	68fa      	ldr	r2, [r7, #12]
 8008750:	4613      	mov	r3, r2
 8008752:	009b      	lsls	r3, r3, #2
 8008754:	4413      	add	r3, r2
 8008756:	00db      	lsls	r3, r3, #3
 8008758:	440b      	add	r3, r1
 800875a:	335d      	adds	r3, #93	; 0x5d
 800875c:	781b      	ldrb	r3, [r3, #0]
 800875e:	2b01      	cmp	r3, #1
 8008760:	d137      	bne.n	80087d2 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8008762:	6879      	ldr	r1, [r7, #4]
 8008764:	68fa      	ldr	r2, [r7, #12]
 8008766:	4613      	mov	r3, r2
 8008768:	009b      	lsls	r3, r3, #2
 800876a:	4413      	add	r3, r2
 800876c:	00db      	lsls	r3, r3, #3
 800876e:	440b      	add	r3, r1
 8008770:	335c      	adds	r3, #92	; 0x5c
 8008772:	2201      	movs	r2, #1
 8008774:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8008776:	6879      	ldr	r1, [r7, #4]
 8008778:	68fa      	ldr	r2, [r7, #12]
 800877a:	4613      	mov	r3, r2
 800877c:	009b      	lsls	r3, r3, #2
 800877e:	4413      	add	r3, r2
 8008780:	00db      	lsls	r3, r3, #3
 8008782:	440b      	add	r3, r1
 8008784:	333f      	adds	r3, #63	; 0x3f
 8008786:	781b      	ldrb	r3, [r3, #0]
 8008788:	2b02      	cmp	r3, #2
 800878a:	d00b      	beq.n	80087a4 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800878c:	6879      	ldr	r1, [r7, #4]
 800878e:	68fa      	ldr	r2, [r7, #12]
 8008790:	4613      	mov	r3, r2
 8008792:	009b      	lsls	r3, r3, #2
 8008794:	4413      	add	r3, r2
 8008796:	00db      	lsls	r3, r3, #3
 8008798:	440b      	add	r3, r1
 800879a:	333f      	adds	r3, #63	; 0x3f
 800879c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800879e:	2b03      	cmp	r3, #3
 80087a0:	f040 80c5 	bne.w	800892e <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80087a4:	6879      	ldr	r1, [r7, #4]
 80087a6:	68fa      	ldr	r2, [r7, #12]
 80087a8:	4613      	mov	r3, r2
 80087aa:	009b      	lsls	r3, r3, #2
 80087ac:	4413      	add	r3, r2
 80087ae:	00db      	lsls	r3, r3, #3
 80087b0:	440b      	add	r3, r1
 80087b2:	3351      	adds	r3, #81	; 0x51
 80087b4:	781b      	ldrb	r3, [r3, #0]
 80087b6:	f083 0301 	eor.w	r3, r3, #1
 80087ba:	b2d8      	uxtb	r0, r3
 80087bc:	6879      	ldr	r1, [r7, #4]
 80087be:	68fa      	ldr	r2, [r7, #12]
 80087c0:	4613      	mov	r3, r2
 80087c2:	009b      	lsls	r3, r3, #2
 80087c4:	4413      	add	r3, r2
 80087c6:	00db      	lsls	r3, r3, #3
 80087c8:	440b      	add	r3, r1
 80087ca:	3351      	adds	r3, #81	; 0x51
 80087cc:	4602      	mov	r2, r0
 80087ce:	701a      	strb	r2, [r3, #0]
 80087d0:	e0ad      	b.n	800892e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80087d2:	6879      	ldr	r1, [r7, #4]
 80087d4:	68fa      	ldr	r2, [r7, #12]
 80087d6:	4613      	mov	r3, r2
 80087d8:	009b      	lsls	r3, r3, #2
 80087da:	4413      	add	r3, r2
 80087dc:	00db      	lsls	r3, r3, #3
 80087de:	440b      	add	r3, r1
 80087e0:	335d      	adds	r3, #93	; 0x5d
 80087e2:	781b      	ldrb	r3, [r3, #0]
 80087e4:	2b03      	cmp	r3, #3
 80087e6:	d10a      	bne.n	80087fe <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80087e8:	6879      	ldr	r1, [r7, #4]
 80087ea:	68fa      	ldr	r2, [r7, #12]
 80087ec:	4613      	mov	r3, r2
 80087ee:	009b      	lsls	r3, r3, #2
 80087f0:	4413      	add	r3, r2
 80087f2:	00db      	lsls	r3, r3, #3
 80087f4:	440b      	add	r3, r1
 80087f6:	335c      	adds	r3, #92	; 0x5c
 80087f8:	2202      	movs	r2, #2
 80087fa:	701a      	strb	r2, [r3, #0]
 80087fc:	e097      	b.n	800892e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80087fe:	6879      	ldr	r1, [r7, #4]
 8008800:	68fa      	ldr	r2, [r7, #12]
 8008802:	4613      	mov	r3, r2
 8008804:	009b      	lsls	r3, r3, #2
 8008806:	4413      	add	r3, r2
 8008808:	00db      	lsls	r3, r3, #3
 800880a:	440b      	add	r3, r1
 800880c:	335d      	adds	r3, #93	; 0x5d
 800880e:	781b      	ldrb	r3, [r3, #0]
 8008810:	2b04      	cmp	r3, #4
 8008812:	d10a      	bne.n	800882a <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8008814:	6879      	ldr	r1, [r7, #4]
 8008816:	68fa      	ldr	r2, [r7, #12]
 8008818:	4613      	mov	r3, r2
 800881a:	009b      	lsls	r3, r3, #2
 800881c:	4413      	add	r3, r2
 800881e:	00db      	lsls	r3, r3, #3
 8008820:	440b      	add	r3, r1
 8008822:	335c      	adds	r3, #92	; 0x5c
 8008824:	2202      	movs	r2, #2
 8008826:	701a      	strb	r2, [r3, #0]
 8008828:	e081      	b.n	800892e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800882a:	6879      	ldr	r1, [r7, #4]
 800882c:	68fa      	ldr	r2, [r7, #12]
 800882e:	4613      	mov	r3, r2
 8008830:	009b      	lsls	r3, r3, #2
 8008832:	4413      	add	r3, r2
 8008834:	00db      	lsls	r3, r3, #3
 8008836:	440b      	add	r3, r1
 8008838:	335d      	adds	r3, #93	; 0x5d
 800883a:	781b      	ldrb	r3, [r3, #0]
 800883c:	2b05      	cmp	r3, #5
 800883e:	d10a      	bne.n	8008856 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8008840:	6879      	ldr	r1, [r7, #4]
 8008842:	68fa      	ldr	r2, [r7, #12]
 8008844:	4613      	mov	r3, r2
 8008846:	009b      	lsls	r3, r3, #2
 8008848:	4413      	add	r3, r2
 800884a:	00db      	lsls	r3, r3, #3
 800884c:	440b      	add	r3, r1
 800884e:	335c      	adds	r3, #92	; 0x5c
 8008850:	2205      	movs	r2, #5
 8008852:	701a      	strb	r2, [r3, #0]
 8008854:	e06b      	b.n	800892e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8008856:	6879      	ldr	r1, [r7, #4]
 8008858:	68fa      	ldr	r2, [r7, #12]
 800885a:	4613      	mov	r3, r2
 800885c:	009b      	lsls	r3, r3, #2
 800885e:	4413      	add	r3, r2
 8008860:	00db      	lsls	r3, r3, #3
 8008862:	440b      	add	r3, r1
 8008864:	335d      	adds	r3, #93	; 0x5d
 8008866:	781b      	ldrb	r3, [r3, #0]
 8008868:	2b06      	cmp	r3, #6
 800886a:	d00a      	beq.n	8008882 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800886c:	6879      	ldr	r1, [r7, #4]
 800886e:	68fa      	ldr	r2, [r7, #12]
 8008870:	4613      	mov	r3, r2
 8008872:	009b      	lsls	r3, r3, #2
 8008874:	4413      	add	r3, r2
 8008876:	00db      	lsls	r3, r3, #3
 8008878:	440b      	add	r3, r1
 800887a:	335d      	adds	r3, #93	; 0x5d
 800887c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800887e:	2b08      	cmp	r3, #8
 8008880:	d155      	bne.n	800892e <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8008882:	6879      	ldr	r1, [r7, #4]
 8008884:	68fa      	ldr	r2, [r7, #12]
 8008886:	4613      	mov	r3, r2
 8008888:	009b      	lsls	r3, r3, #2
 800888a:	4413      	add	r3, r2
 800888c:	00db      	lsls	r3, r3, #3
 800888e:	440b      	add	r3, r1
 8008890:	3358      	adds	r3, #88	; 0x58
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	1c59      	adds	r1, r3, #1
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	68fa      	ldr	r2, [r7, #12]
 800889a:	4613      	mov	r3, r2
 800889c:	009b      	lsls	r3, r3, #2
 800889e:	4413      	add	r3, r2
 80088a0:	00db      	lsls	r3, r3, #3
 80088a2:	4403      	add	r3, r0
 80088a4:	3358      	adds	r3, #88	; 0x58
 80088a6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80088a8:	6879      	ldr	r1, [r7, #4]
 80088aa:	68fa      	ldr	r2, [r7, #12]
 80088ac:	4613      	mov	r3, r2
 80088ae:	009b      	lsls	r3, r3, #2
 80088b0:	4413      	add	r3, r2
 80088b2:	00db      	lsls	r3, r3, #3
 80088b4:	440b      	add	r3, r1
 80088b6:	3358      	adds	r3, #88	; 0x58
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	2b03      	cmp	r3, #3
 80088bc:	d914      	bls.n	80088e8 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80088be:	6879      	ldr	r1, [r7, #4]
 80088c0:	68fa      	ldr	r2, [r7, #12]
 80088c2:	4613      	mov	r3, r2
 80088c4:	009b      	lsls	r3, r3, #2
 80088c6:	4413      	add	r3, r2
 80088c8:	00db      	lsls	r3, r3, #3
 80088ca:	440b      	add	r3, r1
 80088cc:	3358      	adds	r3, #88	; 0x58
 80088ce:	2200      	movs	r2, #0
 80088d0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80088d2:	6879      	ldr	r1, [r7, #4]
 80088d4:	68fa      	ldr	r2, [r7, #12]
 80088d6:	4613      	mov	r3, r2
 80088d8:	009b      	lsls	r3, r3, #2
 80088da:	4413      	add	r3, r2
 80088dc:	00db      	lsls	r3, r3, #3
 80088de:	440b      	add	r3, r1
 80088e0:	335c      	adds	r3, #92	; 0x5c
 80088e2:	2204      	movs	r2, #4
 80088e4:	701a      	strb	r2, [r3, #0]
 80088e6:	e009      	b.n	80088fc <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80088e8:	6879      	ldr	r1, [r7, #4]
 80088ea:	68fa      	ldr	r2, [r7, #12]
 80088ec:	4613      	mov	r3, r2
 80088ee:	009b      	lsls	r3, r3, #2
 80088f0:	4413      	add	r3, r2
 80088f2:	00db      	lsls	r3, r3, #3
 80088f4:	440b      	add	r3, r1
 80088f6:	335c      	adds	r3, #92	; 0x5c
 80088f8:	2202      	movs	r2, #2
 80088fa:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	015a      	lsls	r2, r3, #5
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	4413      	add	r3, r2
 8008904:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008912:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800891a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	015a      	lsls	r2, r3, #5
 8008920:	693b      	ldr	r3, [r7, #16]
 8008922:	4413      	add	r3, r2
 8008924:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008928:	461a      	mov	r2, r3
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	015a      	lsls	r2, r3, #5
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	4413      	add	r3, r2
 8008936:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800893a:	461a      	mov	r2, r3
 800893c:	2302      	movs	r3, #2
 800893e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	b2d8      	uxtb	r0, r3
 8008944:	6879      	ldr	r1, [r7, #4]
 8008946:	68fa      	ldr	r2, [r7, #12]
 8008948:	4613      	mov	r3, r2
 800894a:	009b      	lsls	r3, r3, #2
 800894c:	4413      	add	r3, r2
 800894e:	00db      	lsls	r3, r3, #3
 8008950:	440b      	add	r3, r1
 8008952:	335c      	adds	r3, #92	; 0x5c
 8008954:	781b      	ldrb	r3, [r3, #0]
 8008956:	461a      	mov	r2, r3
 8008958:	4601      	mov	r1, r0
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f004 fe0c 	bl	800d578 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8008960:	bf00      	nop
 8008962:	3718      	adds	r7, #24
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}

08008968 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b08a      	sub	sp, #40	; 0x28
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008978:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	6a1b      	ldr	r3, [r3, #32]
 8008980:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8008982:	69fb      	ldr	r3, [r7, #28]
 8008984:	f003 030f 	and.w	r3, r3, #15
 8008988:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800898a:	69fb      	ldr	r3, [r7, #28]
 800898c:	0c5b      	lsrs	r3, r3, #17
 800898e:	f003 030f 	and.w	r3, r3, #15
 8008992:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008994:	69fb      	ldr	r3, [r7, #28]
 8008996:	091b      	lsrs	r3, r3, #4
 8008998:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800899c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800899e:	697b      	ldr	r3, [r7, #20]
 80089a0:	2b02      	cmp	r3, #2
 80089a2:	d003      	beq.n	80089ac <HCD_RXQLVL_IRQHandler+0x44>
 80089a4:	2b05      	cmp	r3, #5
 80089a6:	f000 8082 	beq.w	8008aae <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80089aa:	e083      	b.n	8008ab4 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d07f      	beq.n	8008ab2 <HCD_RXQLVL_IRQHandler+0x14a>
 80089b2:	6879      	ldr	r1, [r7, #4]
 80089b4:	69ba      	ldr	r2, [r7, #24]
 80089b6:	4613      	mov	r3, r2
 80089b8:	009b      	lsls	r3, r3, #2
 80089ba:	4413      	add	r3, r2
 80089bc:	00db      	lsls	r3, r3, #3
 80089be:	440b      	add	r3, r1
 80089c0:	3344      	adds	r3, #68	; 0x44
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d074      	beq.n	8008ab2 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6818      	ldr	r0, [r3, #0]
 80089cc:	6879      	ldr	r1, [r7, #4]
 80089ce:	69ba      	ldr	r2, [r7, #24]
 80089d0:	4613      	mov	r3, r2
 80089d2:	009b      	lsls	r3, r3, #2
 80089d4:	4413      	add	r3, r2
 80089d6:	00db      	lsls	r3, r3, #3
 80089d8:	440b      	add	r3, r1
 80089da:	3344      	adds	r3, #68	; 0x44
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	693a      	ldr	r2, [r7, #16]
 80089e0:	b292      	uxth	r2, r2
 80089e2:	4619      	mov	r1, r3
 80089e4:	f001 ffc3 	bl	800a96e <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80089e8:	6879      	ldr	r1, [r7, #4]
 80089ea:	69ba      	ldr	r2, [r7, #24]
 80089ec:	4613      	mov	r3, r2
 80089ee:	009b      	lsls	r3, r3, #2
 80089f0:	4413      	add	r3, r2
 80089f2:	00db      	lsls	r3, r3, #3
 80089f4:	440b      	add	r3, r1
 80089f6:	3344      	adds	r3, #68	; 0x44
 80089f8:	681a      	ldr	r2, [r3, #0]
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	18d1      	adds	r1, r2, r3
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	69ba      	ldr	r2, [r7, #24]
 8008a02:	4613      	mov	r3, r2
 8008a04:	009b      	lsls	r3, r3, #2
 8008a06:	4413      	add	r3, r2
 8008a08:	00db      	lsls	r3, r3, #3
 8008a0a:	4403      	add	r3, r0
 8008a0c:	3344      	adds	r3, #68	; 0x44
 8008a0e:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8008a10:	6879      	ldr	r1, [r7, #4]
 8008a12:	69ba      	ldr	r2, [r7, #24]
 8008a14:	4613      	mov	r3, r2
 8008a16:	009b      	lsls	r3, r3, #2
 8008a18:	4413      	add	r3, r2
 8008a1a:	00db      	lsls	r3, r3, #3
 8008a1c:	440b      	add	r3, r1
 8008a1e:	334c      	adds	r3, #76	; 0x4c
 8008a20:	681a      	ldr	r2, [r3, #0]
 8008a22:	693b      	ldr	r3, [r7, #16]
 8008a24:	18d1      	adds	r1, r2, r3
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	69ba      	ldr	r2, [r7, #24]
 8008a2a:	4613      	mov	r3, r2
 8008a2c:	009b      	lsls	r3, r3, #2
 8008a2e:	4413      	add	r3, r2
 8008a30:	00db      	lsls	r3, r3, #3
 8008a32:	4403      	add	r3, r0
 8008a34:	334c      	adds	r3, #76	; 0x4c
 8008a36:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8008a38:	69bb      	ldr	r3, [r7, #24]
 8008a3a:	015a      	lsls	r2, r3, #5
 8008a3c:	6a3b      	ldr	r3, [r7, #32]
 8008a3e:	4413      	add	r3, r2
 8008a40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a44:	691a      	ldr	r2, [r3, #16]
 8008a46:	4b1d      	ldr	r3, [pc, #116]	; (8008abc <HCD_RXQLVL_IRQHandler+0x154>)
 8008a48:	4013      	ands	r3, r2
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d031      	beq.n	8008ab2 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008a4e:	69bb      	ldr	r3, [r7, #24]
 8008a50:	015a      	lsls	r2, r3, #5
 8008a52:	6a3b      	ldr	r3, [r7, #32]
 8008a54:	4413      	add	r3, r2
 8008a56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008a64:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008a6c:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008a6e:	69bb      	ldr	r3, [r7, #24]
 8008a70:	015a      	lsls	r2, r3, #5
 8008a72:	6a3b      	ldr	r3, [r7, #32]
 8008a74:	4413      	add	r3, r2
 8008a76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a7a:	461a      	mov	r2, r3
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8008a80:	6879      	ldr	r1, [r7, #4]
 8008a82:	69ba      	ldr	r2, [r7, #24]
 8008a84:	4613      	mov	r3, r2
 8008a86:	009b      	lsls	r3, r3, #2
 8008a88:	4413      	add	r3, r2
 8008a8a:	00db      	lsls	r3, r3, #3
 8008a8c:	440b      	add	r3, r1
 8008a8e:	3350      	adds	r3, #80	; 0x50
 8008a90:	781b      	ldrb	r3, [r3, #0]
 8008a92:	f083 0301 	eor.w	r3, r3, #1
 8008a96:	b2d8      	uxtb	r0, r3
 8008a98:	6879      	ldr	r1, [r7, #4]
 8008a9a:	69ba      	ldr	r2, [r7, #24]
 8008a9c:	4613      	mov	r3, r2
 8008a9e:	009b      	lsls	r3, r3, #2
 8008aa0:	4413      	add	r3, r2
 8008aa2:	00db      	lsls	r3, r3, #3
 8008aa4:	440b      	add	r3, r1
 8008aa6:	3350      	adds	r3, #80	; 0x50
 8008aa8:	4602      	mov	r2, r0
 8008aaa:	701a      	strb	r2, [r3, #0]
      break;
 8008aac:	e001      	b.n	8008ab2 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8008aae:	bf00      	nop
 8008ab0:	e000      	b.n	8008ab4 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8008ab2:	bf00      	nop
  }
}
 8008ab4:	bf00      	nop
 8008ab6:	3728      	adds	r7, #40	; 0x28
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}
 8008abc:	1ff80000 	.word	0x1ff80000

08008ac0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b086      	sub	sp, #24
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008aec:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	f003 0302 	and.w	r3, r3, #2
 8008af4:	2b02      	cmp	r3, #2
 8008af6:	d10b      	bne.n	8008b10 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	f003 0301 	and.w	r3, r3, #1
 8008afe:	2b01      	cmp	r3, #1
 8008b00:	d102      	bne.n	8008b08 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f004 fd1c 	bl	800d540 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	f043 0302 	orr.w	r3, r3, #2
 8008b0e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	f003 0308 	and.w	r3, r3, #8
 8008b16:	2b08      	cmp	r3, #8
 8008b18:	d132      	bne.n	8008b80 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	f043 0308 	orr.w	r3, r3, #8
 8008b20:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	f003 0304 	and.w	r3, r3, #4
 8008b28:	2b04      	cmp	r3, #4
 8008b2a:	d126      	bne.n	8008b7a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	699b      	ldr	r3, [r3, #24]
 8008b30:	2b02      	cmp	r3, #2
 8008b32:	d113      	bne.n	8008b5c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8008b3a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008b3e:	d106      	bne.n	8008b4e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	2102      	movs	r1, #2
 8008b46:	4618      	mov	r0, r3
 8008b48:	f002 f84c 	bl	800abe4 <USB_InitFSLSPClkSel>
 8008b4c:	e011      	b.n	8008b72 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	2101      	movs	r1, #1
 8008b54:	4618      	mov	r0, r3
 8008b56:	f002 f845 	bl	800abe4 <USB_InitFSLSPClkSel>
 8008b5a:	e00a      	b.n	8008b72 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	68db      	ldr	r3, [r3, #12]
 8008b60:	2b01      	cmp	r3, #1
 8008b62:	d106      	bne.n	8008b72 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b6a:	461a      	mov	r2, r3
 8008b6c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8008b70:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f004 fd0e 	bl	800d594 <HAL_HCD_PortEnabled_Callback>
 8008b78:	e002      	b.n	8008b80 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f004 fd18 	bl	800d5b0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	f003 0320 	and.w	r3, r3, #32
 8008b86:	2b20      	cmp	r3, #32
 8008b88:	d103      	bne.n	8008b92 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	f043 0320 	orr.w	r3, r3, #32
 8008b90:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008b98:	461a      	mov	r2, r3
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	6013      	str	r3, [r2, #0]
}
 8008b9e:	bf00      	nop
 8008ba0:	3718      	adds	r7, #24
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}
	...

08008ba8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b084      	sub	sp, #16
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d101      	bne.n	8008bba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	e11f      	b.n	8008dfa <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bc0:	b2db      	uxtb	r3, r3
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d106      	bne.n	8008bd4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f7fd fc1c 	bl	800640c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2224      	movs	r2, #36	; 0x24
 8008bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	681a      	ldr	r2, [r3, #0]
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f022 0201 	bic.w	r2, r2, #1
 8008bea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	681a      	ldr	r2, [r3, #0]
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008bfa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	681a      	ldr	r2, [r3, #0]
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008c0a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008c0c:	f001 f9de 	bl	8009fcc <HAL_RCC_GetPCLK1Freq>
 8008c10:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	4a7b      	ldr	r2, [pc, #492]	; (8008e04 <HAL_I2C_Init+0x25c>)
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d807      	bhi.n	8008c2c <HAL_I2C_Init+0x84>
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	4a7a      	ldr	r2, [pc, #488]	; (8008e08 <HAL_I2C_Init+0x260>)
 8008c20:	4293      	cmp	r3, r2
 8008c22:	bf94      	ite	ls
 8008c24:	2301      	movls	r3, #1
 8008c26:	2300      	movhi	r3, #0
 8008c28:	b2db      	uxtb	r3, r3
 8008c2a:	e006      	b.n	8008c3a <HAL_I2C_Init+0x92>
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	4a77      	ldr	r2, [pc, #476]	; (8008e0c <HAL_I2C_Init+0x264>)
 8008c30:	4293      	cmp	r3, r2
 8008c32:	bf94      	ite	ls
 8008c34:	2301      	movls	r3, #1
 8008c36:	2300      	movhi	r3, #0
 8008c38:	b2db      	uxtb	r3, r3
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d001      	beq.n	8008c42 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008c3e:	2301      	movs	r3, #1
 8008c40:	e0db      	b.n	8008dfa <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	4a72      	ldr	r2, [pc, #456]	; (8008e10 <HAL_I2C_Init+0x268>)
 8008c46:	fba2 2303 	umull	r2, r3, r2, r3
 8008c4a:	0c9b      	lsrs	r3, r3, #18
 8008c4c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	685b      	ldr	r3, [r3, #4]
 8008c54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	68ba      	ldr	r2, [r7, #8]
 8008c5e:	430a      	orrs	r2, r1
 8008c60:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	6a1b      	ldr	r3, [r3, #32]
 8008c68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	4a64      	ldr	r2, [pc, #400]	; (8008e04 <HAL_I2C_Init+0x25c>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d802      	bhi.n	8008c7c <HAL_I2C_Init+0xd4>
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	3301      	adds	r3, #1
 8008c7a:	e009      	b.n	8008c90 <HAL_I2C_Init+0xe8>
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008c82:	fb02 f303 	mul.w	r3, r2, r3
 8008c86:	4a63      	ldr	r2, [pc, #396]	; (8008e14 <HAL_I2C_Init+0x26c>)
 8008c88:	fba2 2303 	umull	r2, r3, r2, r3
 8008c8c:	099b      	lsrs	r3, r3, #6
 8008c8e:	3301      	adds	r3, #1
 8008c90:	687a      	ldr	r2, [r7, #4]
 8008c92:	6812      	ldr	r2, [r2, #0]
 8008c94:	430b      	orrs	r3, r1
 8008c96:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	69db      	ldr	r3, [r3, #28]
 8008c9e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008ca2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	685b      	ldr	r3, [r3, #4]
 8008caa:	4956      	ldr	r1, [pc, #344]	; (8008e04 <HAL_I2C_Init+0x25c>)
 8008cac:	428b      	cmp	r3, r1
 8008cae:	d80d      	bhi.n	8008ccc <HAL_I2C_Init+0x124>
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	1e59      	subs	r1, r3, #1
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	685b      	ldr	r3, [r3, #4]
 8008cb8:	005b      	lsls	r3, r3, #1
 8008cba:	fbb1 f3f3 	udiv	r3, r1, r3
 8008cbe:	3301      	adds	r3, #1
 8008cc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008cc4:	2b04      	cmp	r3, #4
 8008cc6:	bf38      	it	cc
 8008cc8:	2304      	movcc	r3, #4
 8008cca:	e04f      	b.n	8008d6c <HAL_I2C_Init+0x1c4>
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	689b      	ldr	r3, [r3, #8]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d111      	bne.n	8008cf8 <HAL_I2C_Init+0x150>
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	1e58      	subs	r0, r3, #1
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6859      	ldr	r1, [r3, #4]
 8008cdc:	460b      	mov	r3, r1
 8008cde:	005b      	lsls	r3, r3, #1
 8008ce0:	440b      	add	r3, r1
 8008ce2:	fbb0 f3f3 	udiv	r3, r0, r3
 8008ce6:	3301      	adds	r3, #1
 8008ce8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	bf0c      	ite	eq
 8008cf0:	2301      	moveq	r3, #1
 8008cf2:	2300      	movne	r3, #0
 8008cf4:	b2db      	uxtb	r3, r3
 8008cf6:	e012      	b.n	8008d1e <HAL_I2C_Init+0x176>
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	1e58      	subs	r0, r3, #1
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6859      	ldr	r1, [r3, #4]
 8008d00:	460b      	mov	r3, r1
 8008d02:	009b      	lsls	r3, r3, #2
 8008d04:	440b      	add	r3, r1
 8008d06:	0099      	lsls	r1, r3, #2
 8008d08:	440b      	add	r3, r1
 8008d0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8008d0e:	3301      	adds	r3, #1
 8008d10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	bf0c      	ite	eq
 8008d18:	2301      	moveq	r3, #1
 8008d1a:	2300      	movne	r3, #0
 8008d1c:	b2db      	uxtb	r3, r3
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d001      	beq.n	8008d26 <HAL_I2C_Init+0x17e>
 8008d22:	2301      	movs	r3, #1
 8008d24:	e022      	b.n	8008d6c <HAL_I2C_Init+0x1c4>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	689b      	ldr	r3, [r3, #8]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d10e      	bne.n	8008d4c <HAL_I2C_Init+0x1a4>
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	1e58      	subs	r0, r3, #1
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6859      	ldr	r1, [r3, #4]
 8008d36:	460b      	mov	r3, r1
 8008d38:	005b      	lsls	r3, r3, #1
 8008d3a:	440b      	add	r3, r1
 8008d3c:	fbb0 f3f3 	udiv	r3, r0, r3
 8008d40:	3301      	adds	r3, #1
 8008d42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008d46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d4a:	e00f      	b.n	8008d6c <HAL_I2C_Init+0x1c4>
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	1e58      	subs	r0, r3, #1
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6859      	ldr	r1, [r3, #4]
 8008d54:	460b      	mov	r3, r1
 8008d56:	009b      	lsls	r3, r3, #2
 8008d58:	440b      	add	r3, r1
 8008d5a:	0099      	lsls	r1, r3, #2
 8008d5c:	440b      	add	r3, r1
 8008d5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008d62:	3301      	adds	r3, #1
 8008d64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008d68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008d6c:	6879      	ldr	r1, [r7, #4]
 8008d6e:	6809      	ldr	r1, [r1, #0]
 8008d70:	4313      	orrs	r3, r2
 8008d72:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	69da      	ldr	r2, [r3, #28]
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6a1b      	ldr	r3, [r3, #32]
 8008d86:	431a      	orrs	r2, r3
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	430a      	orrs	r2, r1
 8008d8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	689b      	ldr	r3, [r3, #8]
 8008d96:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008d9a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008d9e:	687a      	ldr	r2, [r7, #4]
 8008da0:	6911      	ldr	r1, [r2, #16]
 8008da2:	687a      	ldr	r2, [r7, #4]
 8008da4:	68d2      	ldr	r2, [r2, #12]
 8008da6:	4311      	orrs	r1, r2
 8008da8:	687a      	ldr	r2, [r7, #4]
 8008daa:	6812      	ldr	r2, [r2, #0]
 8008dac:	430b      	orrs	r3, r1
 8008dae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	68db      	ldr	r3, [r3, #12]
 8008db6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	695a      	ldr	r2, [r3, #20]
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	699b      	ldr	r3, [r3, #24]
 8008dc2:	431a      	orrs	r2, r3
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	430a      	orrs	r2, r1
 8008dca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	681a      	ldr	r2, [r3, #0]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f042 0201 	orr.w	r2, r2, #1
 8008dda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2200      	movs	r2, #0
 8008de0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2220      	movs	r2, #32
 8008de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2200      	movs	r2, #0
 8008dee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2200      	movs	r2, #0
 8008df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008df8:	2300      	movs	r3, #0
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3710      	adds	r7, #16
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}
 8008e02:	bf00      	nop
 8008e04:	000186a0 	.word	0x000186a0
 8008e08:	001e847f 	.word	0x001e847f
 8008e0c:	003d08ff 	.word	0x003d08ff
 8008e10:	431bde83 	.word	0x431bde83
 8008e14:	10624dd3 	.word	0x10624dd3

08008e18 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b088      	sub	sp, #32
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d101      	bne.n	8008e2a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8008e26:	2301      	movs	r3, #1
 8008e28:	e128      	b.n	800907c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008e30:	b2db      	uxtb	r3, r3
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d109      	bne.n	8008e4a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2200      	movs	r2, #0
 8008e3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	4a90      	ldr	r2, [pc, #576]	; (8009084 <HAL_I2S_Init+0x26c>)
 8008e42:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f7fd fb87 	bl	8006558 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2202      	movs	r2, #2
 8008e4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	69db      	ldr	r3, [r3, #28]
 8008e58:	687a      	ldr	r2, [r7, #4]
 8008e5a:	6812      	ldr	r2, [r2, #0]
 8008e5c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8008e60:	f023 030f 	bic.w	r3, r3, #15
 8008e64:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	2202      	movs	r2, #2
 8008e6c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	695b      	ldr	r3, [r3, #20]
 8008e72:	2b02      	cmp	r3, #2
 8008e74:	d060      	beq.n	8008f38 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	68db      	ldr	r3, [r3, #12]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d102      	bne.n	8008e84 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8008e7e:	2310      	movs	r3, #16
 8008e80:	617b      	str	r3, [r7, #20]
 8008e82:	e001      	b.n	8008e88 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8008e84:	2320      	movs	r3, #32
 8008e86:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	689b      	ldr	r3, [r3, #8]
 8008e8c:	2b20      	cmp	r3, #32
 8008e8e:	d802      	bhi.n	8008e96 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	005b      	lsls	r3, r3, #1
 8008e94:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8008e96:	2001      	movs	r0, #1
 8008e98:	f001 f99c 	bl	800a1d4 <HAL_RCCEx_GetPeriphCLKFreq>
 8008e9c:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	691b      	ldr	r3, [r3, #16]
 8008ea2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ea6:	d125      	bne.n	8008ef4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	68db      	ldr	r3, [r3, #12]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d010      	beq.n	8008ed2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8008eb0:	697b      	ldr	r3, [r7, #20]
 8008eb2:	009b      	lsls	r3, r3, #2
 8008eb4:	68fa      	ldr	r2, [r7, #12]
 8008eb6:	fbb2 f2f3 	udiv	r2, r2, r3
 8008eba:	4613      	mov	r3, r2
 8008ebc:	009b      	lsls	r3, r3, #2
 8008ebe:	4413      	add	r3, r2
 8008ec0:	005b      	lsls	r3, r3, #1
 8008ec2:	461a      	mov	r2, r3
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	695b      	ldr	r3, [r3, #20]
 8008ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ecc:	3305      	adds	r3, #5
 8008ece:	613b      	str	r3, [r7, #16]
 8008ed0:	e01f      	b.n	8008f12 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	00db      	lsls	r3, r3, #3
 8008ed6:	68fa      	ldr	r2, [r7, #12]
 8008ed8:	fbb2 f2f3 	udiv	r2, r2, r3
 8008edc:	4613      	mov	r3, r2
 8008ede:	009b      	lsls	r3, r3, #2
 8008ee0:	4413      	add	r3, r2
 8008ee2:	005b      	lsls	r3, r3, #1
 8008ee4:	461a      	mov	r2, r3
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	695b      	ldr	r3, [r3, #20]
 8008eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8008eee:	3305      	adds	r3, #5
 8008ef0:	613b      	str	r3, [r7, #16]
 8008ef2:	e00e      	b.n	8008f12 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8008ef4:	68fa      	ldr	r2, [r7, #12]
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	fbb2 f2f3 	udiv	r2, r2, r3
 8008efc:	4613      	mov	r3, r2
 8008efe:	009b      	lsls	r3, r3, #2
 8008f00:	4413      	add	r3, r2
 8008f02:	005b      	lsls	r3, r3, #1
 8008f04:	461a      	mov	r2, r3
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	695b      	ldr	r3, [r3, #20]
 8008f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f0e:	3305      	adds	r3, #5
 8008f10:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8008f12:	693b      	ldr	r3, [r7, #16]
 8008f14:	4a5c      	ldr	r2, [pc, #368]	; (8009088 <HAL_I2S_Init+0x270>)
 8008f16:	fba2 2303 	umull	r2, r3, r2, r3
 8008f1a:	08db      	lsrs	r3, r3, #3
 8008f1c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8008f1e:	693b      	ldr	r3, [r7, #16]
 8008f20:	f003 0301 	and.w	r3, r3, #1
 8008f24:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8008f26:	693a      	ldr	r2, [r7, #16]
 8008f28:	69bb      	ldr	r3, [r7, #24]
 8008f2a:	1ad3      	subs	r3, r2, r3
 8008f2c:	085b      	lsrs	r3, r3, #1
 8008f2e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8008f30:	69bb      	ldr	r3, [r7, #24]
 8008f32:	021b      	lsls	r3, r3, #8
 8008f34:	61bb      	str	r3, [r7, #24]
 8008f36:	e003      	b.n	8008f40 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8008f38:	2302      	movs	r3, #2
 8008f3a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8008f40:	69fb      	ldr	r3, [r7, #28]
 8008f42:	2b01      	cmp	r3, #1
 8008f44:	d902      	bls.n	8008f4c <HAL_I2S_Init+0x134>
 8008f46:	69fb      	ldr	r3, [r7, #28]
 8008f48:	2bff      	cmp	r3, #255	; 0xff
 8008f4a:	d907      	bls.n	8008f5c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f50:	f043 0210 	orr.w	r2, r3, #16
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8008f58:	2301      	movs	r3, #1
 8008f5a:	e08f      	b.n	800907c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	691a      	ldr	r2, [r3, #16]
 8008f60:	69bb      	ldr	r3, [r7, #24]
 8008f62:	ea42 0103 	orr.w	r1, r2, r3
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	69fa      	ldr	r2, [r7, #28]
 8008f6c:	430a      	orrs	r2, r1
 8008f6e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	69db      	ldr	r3, [r3, #28]
 8008f76:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8008f7a:	f023 030f 	bic.w	r3, r3, #15
 8008f7e:	687a      	ldr	r2, [r7, #4]
 8008f80:	6851      	ldr	r1, [r2, #4]
 8008f82:	687a      	ldr	r2, [r7, #4]
 8008f84:	6892      	ldr	r2, [r2, #8]
 8008f86:	4311      	orrs	r1, r2
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	68d2      	ldr	r2, [r2, #12]
 8008f8c:	4311      	orrs	r1, r2
 8008f8e:	687a      	ldr	r2, [r7, #4]
 8008f90:	6992      	ldr	r2, [r2, #24]
 8008f92:	430a      	orrs	r2, r1
 8008f94:	431a      	orrs	r2, r3
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008f9e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6a1b      	ldr	r3, [r3, #32]
 8008fa4:	2b01      	cmp	r3, #1
 8008fa6:	d161      	bne.n	800906c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	4a38      	ldr	r2, [pc, #224]	; (800908c <HAL_I2S_Init+0x274>)
 8008fac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	4a37      	ldr	r2, [pc, #220]	; (8009090 <HAL_I2S_Init+0x278>)
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	d101      	bne.n	8008fbc <HAL_I2S_Init+0x1a4>
 8008fb8:	4b36      	ldr	r3, [pc, #216]	; (8009094 <HAL_I2S_Init+0x27c>)
 8008fba:	e001      	b.n	8008fc0 <HAL_I2S_Init+0x1a8>
 8008fbc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008fc0:	69db      	ldr	r3, [r3, #28]
 8008fc2:	687a      	ldr	r2, [r7, #4]
 8008fc4:	6812      	ldr	r2, [r2, #0]
 8008fc6:	4932      	ldr	r1, [pc, #200]	; (8009090 <HAL_I2S_Init+0x278>)
 8008fc8:	428a      	cmp	r2, r1
 8008fca:	d101      	bne.n	8008fd0 <HAL_I2S_Init+0x1b8>
 8008fcc:	4a31      	ldr	r2, [pc, #196]	; (8009094 <HAL_I2S_Init+0x27c>)
 8008fce:	e001      	b.n	8008fd4 <HAL_I2S_Init+0x1bc>
 8008fd0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8008fd4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8008fd8:	f023 030f 	bic.w	r3, r3, #15
 8008fdc:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	4a2b      	ldr	r2, [pc, #172]	; (8009090 <HAL_I2S_Init+0x278>)
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d101      	bne.n	8008fec <HAL_I2S_Init+0x1d4>
 8008fe8:	4b2a      	ldr	r3, [pc, #168]	; (8009094 <HAL_I2S_Init+0x27c>)
 8008fea:	e001      	b.n	8008ff0 <HAL_I2S_Init+0x1d8>
 8008fec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008ff0:	2202      	movs	r2, #2
 8008ff2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	4a25      	ldr	r2, [pc, #148]	; (8009090 <HAL_I2S_Init+0x278>)
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	d101      	bne.n	8009002 <HAL_I2S_Init+0x1ea>
 8008ffe:	4b25      	ldr	r3, [pc, #148]	; (8009094 <HAL_I2S_Init+0x27c>)
 8009000:	e001      	b.n	8009006 <HAL_I2S_Init+0x1ee>
 8009002:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009006:	69db      	ldr	r3, [r3, #28]
 8009008:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	685b      	ldr	r3, [r3, #4]
 800900e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009012:	d003      	beq.n	800901c <HAL_I2S_Init+0x204>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	685b      	ldr	r3, [r3, #4]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d103      	bne.n	8009024 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800901c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009020:	613b      	str	r3, [r7, #16]
 8009022:	e001      	b.n	8009028 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8009024:	2300      	movs	r3, #0
 8009026:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8009028:	693b      	ldr	r3, [r7, #16]
 800902a:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	689b      	ldr	r3, [r3, #8]
 8009030:	b299      	uxth	r1, r3
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	68db      	ldr	r3, [r3, #12]
 8009036:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	699b      	ldr	r3, [r3, #24]
 800903c:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800903e:	4303      	orrs	r3, r0
 8009040:	b29b      	uxth	r3, r3
 8009042:	430b      	orrs	r3, r1
 8009044:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8009046:	4313      	orrs	r3, r2
 8009048:	b29a      	uxth	r2, r3
 800904a:	897b      	ldrh	r3, [r7, #10]
 800904c:	4313      	orrs	r3, r2
 800904e:	b29b      	uxth	r3, r3
 8009050:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009054:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	4a0d      	ldr	r2, [pc, #52]	; (8009090 <HAL_I2S_Init+0x278>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d101      	bne.n	8009064 <HAL_I2S_Init+0x24c>
 8009060:	4b0c      	ldr	r3, [pc, #48]	; (8009094 <HAL_I2S_Init+0x27c>)
 8009062:	e001      	b.n	8009068 <HAL_I2S_Init+0x250>
 8009064:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009068:	897a      	ldrh	r2, [r7, #10]
 800906a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2200      	movs	r2, #0
 8009070:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2201      	movs	r2, #1
 8009076:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800907a:	2300      	movs	r3, #0
}
 800907c:	4618      	mov	r0, r3
 800907e:	3720      	adds	r7, #32
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}
 8009084:	0800918f 	.word	0x0800918f
 8009088:	cccccccd 	.word	0xcccccccd
 800908c:	080092a5 	.word	0x080092a5
 8009090:	40003800 	.word	0x40003800
 8009094:	40003400 	.word	0x40003400

08009098 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8009098:	b480      	push	{r7}
 800909a:	b083      	sub	sp, #12
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80090a0:	bf00      	nop
 80090a2:	370c      	adds	r7, #12
 80090a4:	46bd      	mov	sp, r7
 80090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090aa:	4770      	bx	lr

080090ac <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80090ac:	b480      	push	{r7}
 80090ae:	b083      	sub	sp, #12
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80090b4:	bf00      	nop
 80090b6:	370c      	adds	r7, #12
 80090b8:	46bd      	mov	sp, r7
 80090ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090be:	4770      	bx	lr

080090c0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b083      	sub	sp, #12
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80090c8:	bf00      	nop
 80090ca:	370c      	adds	r7, #12
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr

080090d4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b082      	sub	sp, #8
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090e0:	881a      	ldrh	r2, [r3, #0]
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ec:	1c9a      	adds	r2, r3, #2
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090f6:	b29b      	uxth	r3, r3
 80090f8:	3b01      	subs	r3, #1
 80090fa:	b29a      	uxth	r2, r3
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009104:	b29b      	uxth	r3, r3
 8009106:	2b00      	cmp	r3, #0
 8009108:	d10e      	bne.n	8009128 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	685a      	ldr	r2, [r3, #4]
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009118:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2201      	movs	r2, #1
 800911e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f7ff ffb8 	bl	8009098 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8009128:	bf00      	nop
 800912a:	3708      	adds	r7, #8
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}

08009130 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b082      	sub	sp, #8
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	68da      	ldr	r2, [r3, #12]
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009142:	b292      	uxth	r2, r2
 8009144:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800914a:	1c9a      	adds	r2, r3, #2
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009154:	b29b      	uxth	r3, r3
 8009156:	3b01      	subs	r3, #1
 8009158:	b29a      	uxth	r2, r3
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009162:	b29b      	uxth	r3, r3
 8009164:	2b00      	cmp	r3, #0
 8009166:	d10e      	bne.n	8009186 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	685a      	ldr	r2, [r3, #4]
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8009176:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2201      	movs	r2, #1
 800917c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f7ff ff93 	bl	80090ac <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8009186:	bf00      	nop
 8009188:	3708      	adds	r7, #8
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}

0800918e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800918e:	b580      	push	{r7, lr}
 8009190:	b086      	sub	sp, #24
 8009192:	af00      	add	r7, sp, #0
 8009194:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	689b      	ldr	r3, [r3, #8]
 800919c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80091a4:	b2db      	uxtb	r3, r3
 80091a6:	2b04      	cmp	r3, #4
 80091a8:	d13a      	bne.n	8009220 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	f003 0301 	and.w	r3, r3, #1
 80091b0:	2b01      	cmp	r3, #1
 80091b2:	d109      	bne.n	80091c8 <I2S_IRQHandler+0x3a>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	685b      	ldr	r3, [r3, #4]
 80091ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091be:	2b40      	cmp	r3, #64	; 0x40
 80091c0:	d102      	bne.n	80091c8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f7ff ffb4 	bl	8009130 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80091c8:	697b      	ldr	r3, [r7, #20]
 80091ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091ce:	2b40      	cmp	r3, #64	; 0x40
 80091d0:	d126      	bne.n	8009220 <I2S_IRQHandler+0x92>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	685b      	ldr	r3, [r3, #4]
 80091d8:	f003 0320 	and.w	r3, r3, #32
 80091dc:	2b20      	cmp	r3, #32
 80091de:	d11f      	bne.n	8009220 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	685a      	ldr	r2, [r3, #4]
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80091ee:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80091f0:	2300      	movs	r3, #0
 80091f2:	613b      	str	r3, [r7, #16]
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	68db      	ldr	r3, [r3, #12]
 80091fa:	613b      	str	r3, [r7, #16]
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	689b      	ldr	r3, [r3, #8]
 8009202:	613b      	str	r3, [r7, #16]
 8009204:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2201      	movs	r2, #1
 800920a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009212:	f043 0202 	orr.w	r2, r3, #2
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f7ff ff50 	bl	80090c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009226:	b2db      	uxtb	r3, r3
 8009228:	2b03      	cmp	r3, #3
 800922a:	d136      	bne.n	800929a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800922c:	697b      	ldr	r3, [r7, #20]
 800922e:	f003 0302 	and.w	r3, r3, #2
 8009232:	2b02      	cmp	r3, #2
 8009234:	d109      	bne.n	800924a <I2S_IRQHandler+0xbc>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	685b      	ldr	r3, [r3, #4]
 800923c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009240:	2b80      	cmp	r3, #128	; 0x80
 8009242:	d102      	bne.n	800924a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f7ff ff45 	bl	80090d4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800924a:	697b      	ldr	r3, [r7, #20]
 800924c:	f003 0308 	and.w	r3, r3, #8
 8009250:	2b08      	cmp	r3, #8
 8009252:	d122      	bne.n	800929a <I2S_IRQHandler+0x10c>
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	685b      	ldr	r3, [r3, #4]
 800925a:	f003 0320 	and.w	r3, r3, #32
 800925e:	2b20      	cmp	r3, #32
 8009260:	d11b      	bne.n	800929a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	685a      	ldr	r2, [r3, #4]
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009270:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8009272:	2300      	movs	r3, #0
 8009274:	60fb      	str	r3, [r7, #12]
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	689b      	ldr	r3, [r3, #8]
 800927c:	60fb      	str	r3, [r7, #12]
 800927e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2201      	movs	r2, #1
 8009284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800928c:	f043 0204 	orr.w	r2, r3, #4
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f7ff ff13 	bl	80090c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800929a:	bf00      	nop
 800929c:	3718      	adds	r7, #24
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}
	...

080092a4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b088      	sub	sp, #32
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	689b      	ldr	r3, [r3, #8]
 80092b2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	4aa2      	ldr	r2, [pc, #648]	; (8009544 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d101      	bne.n	80092c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80092be:	4ba2      	ldr	r3, [pc, #648]	; (8009548 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80092c0:	e001      	b.n	80092c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80092c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80092c6:	689b      	ldr	r3, [r3, #8]
 80092c8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	685b      	ldr	r3, [r3, #4]
 80092d0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	4a9b      	ldr	r2, [pc, #620]	; (8009544 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80092d8:	4293      	cmp	r3, r2
 80092da:	d101      	bne.n	80092e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80092dc:	4b9a      	ldr	r3, [pc, #616]	; (8009548 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80092de:	e001      	b.n	80092e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80092e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80092e4:	685b      	ldr	r3, [r3, #4]
 80092e6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	685b      	ldr	r3, [r3, #4]
 80092ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80092f0:	d004      	beq.n	80092fc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	685b      	ldr	r3, [r3, #4]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	f040 8099 	bne.w	800942e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80092fc:	69fb      	ldr	r3, [r7, #28]
 80092fe:	f003 0302 	and.w	r3, r3, #2
 8009302:	2b02      	cmp	r3, #2
 8009304:	d107      	bne.n	8009316 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800930c:	2b00      	cmp	r3, #0
 800930e:	d002      	beq.n	8009316 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f000 f925 	bl	8009560 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8009316:	69bb      	ldr	r3, [r7, #24]
 8009318:	f003 0301 	and.w	r3, r3, #1
 800931c:	2b01      	cmp	r3, #1
 800931e:	d107      	bne.n	8009330 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8009320:	693b      	ldr	r3, [r7, #16]
 8009322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009326:	2b00      	cmp	r3, #0
 8009328:	d002      	beq.n	8009330 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f000 f9c8 	bl	80096c0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8009330:	69bb      	ldr	r3, [r7, #24]
 8009332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009336:	2b40      	cmp	r3, #64	; 0x40
 8009338:	d13a      	bne.n	80093b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	f003 0320 	and.w	r3, r3, #32
 8009340:	2b00      	cmp	r3, #0
 8009342:	d035      	beq.n	80093b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	4a7e      	ldr	r2, [pc, #504]	; (8009544 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800934a:	4293      	cmp	r3, r2
 800934c:	d101      	bne.n	8009352 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800934e:	4b7e      	ldr	r3, [pc, #504]	; (8009548 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8009350:	e001      	b.n	8009356 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8009352:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009356:	685a      	ldr	r2, [r3, #4]
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	4979      	ldr	r1, [pc, #484]	; (8009544 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800935e:	428b      	cmp	r3, r1
 8009360:	d101      	bne.n	8009366 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8009362:	4b79      	ldr	r3, [pc, #484]	; (8009548 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8009364:	e001      	b.n	800936a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8009366:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800936a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800936e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	685a      	ldr	r2, [r3, #4]
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800937e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8009380:	2300      	movs	r3, #0
 8009382:	60fb      	str	r3, [r7, #12]
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	68db      	ldr	r3, [r3, #12]
 800938a:	60fb      	str	r3, [r7, #12]
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	689b      	ldr	r3, [r3, #8]
 8009392:	60fb      	str	r3, [r7, #12]
 8009394:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2201      	movs	r2, #1
 800939a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093a2:	f043 0202 	orr.w	r2, r3, #2
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f7ff fe88 	bl	80090c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80093b0:	69fb      	ldr	r3, [r7, #28]
 80093b2:	f003 0308 	and.w	r3, r3, #8
 80093b6:	2b08      	cmp	r3, #8
 80093b8:	f040 80be 	bne.w	8009538 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80093bc:	697b      	ldr	r3, [r7, #20]
 80093be:	f003 0320 	and.w	r3, r3, #32
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	f000 80b8 	beq.w	8009538 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	685a      	ldr	r2, [r3, #4]
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80093d6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	4a59      	ldr	r2, [pc, #356]	; (8009544 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80093de:	4293      	cmp	r3, r2
 80093e0:	d101      	bne.n	80093e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80093e2:	4b59      	ldr	r3, [pc, #356]	; (8009548 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80093e4:	e001      	b.n	80093ea <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80093e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80093ea:	685a      	ldr	r2, [r3, #4]
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	4954      	ldr	r1, [pc, #336]	; (8009544 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80093f2:	428b      	cmp	r3, r1
 80093f4:	d101      	bne.n	80093fa <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80093f6:	4b54      	ldr	r3, [pc, #336]	; (8009548 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80093f8:	e001      	b.n	80093fe <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80093fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80093fe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8009402:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8009404:	2300      	movs	r3, #0
 8009406:	60bb      	str	r3, [r7, #8]
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	689b      	ldr	r3, [r3, #8]
 800940e:	60bb      	str	r3, [r7, #8]
 8009410:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2201      	movs	r2, #1
 8009416:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800941e:	f043 0204 	orr.w	r2, r3, #4
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f7ff fe4a 	bl	80090c0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800942c:	e084      	b.n	8009538 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800942e:	69bb      	ldr	r3, [r7, #24]
 8009430:	f003 0302 	and.w	r3, r3, #2
 8009434:	2b02      	cmp	r3, #2
 8009436:	d107      	bne.n	8009448 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8009438:	693b      	ldr	r3, [r7, #16]
 800943a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800943e:	2b00      	cmp	r3, #0
 8009440:	d002      	beq.n	8009448 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f000 f8be 	bl	80095c4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8009448:	69fb      	ldr	r3, [r7, #28]
 800944a:	f003 0301 	and.w	r3, r3, #1
 800944e:	2b01      	cmp	r3, #1
 8009450:	d107      	bne.n	8009462 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8009452:	697b      	ldr	r3, [r7, #20]
 8009454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009458:	2b00      	cmp	r3, #0
 800945a:	d002      	beq.n	8009462 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f000 f8fd 	bl	800965c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8009462:	69fb      	ldr	r3, [r7, #28]
 8009464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009468:	2b40      	cmp	r3, #64	; 0x40
 800946a:	d12f      	bne.n	80094cc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800946c:	697b      	ldr	r3, [r7, #20]
 800946e:	f003 0320 	and.w	r3, r3, #32
 8009472:	2b00      	cmp	r3, #0
 8009474:	d02a      	beq.n	80094cc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	685a      	ldr	r2, [r3, #4]
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8009484:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	4a2e      	ldr	r2, [pc, #184]	; (8009544 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d101      	bne.n	8009494 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8009490:	4b2d      	ldr	r3, [pc, #180]	; (8009548 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8009492:	e001      	b.n	8009498 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8009494:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009498:	685a      	ldr	r2, [r3, #4]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	4929      	ldr	r1, [pc, #164]	; (8009544 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80094a0:	428b      	cmp	r3, r1
 80094a2:	d101      	bne.n	80094a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80094a4:	4b28      	ldr	r3, [pc, #160]	; (8009548 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80094a6:	e001      	b.n	80094ac <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80094a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80094ac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80094b0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2201      	movs	r2, #1
 80094b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094be:	f043 0202 	orr.w	r2, r3, #2
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f7ff fdfa 	bl	80090c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80094cc:	69bb      	ldr	r3, [r7, #24]
 80094ce:	f003 0308 	and.w	r3, r3, #8
 80094d2:	2b08      	cmp	r3, #8
 80094d4:	d131      	bne.n	800953a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80094d6:	693b      	ldr	r3, [r7, #16]
 80094d8:	f003 0320 	and.w	r3, r3, #32
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d02c      	beq.n	800953a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	4a17      	ldr	r2, [pc, #92]	; (8009544 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d101      	bne.n	80094ee <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80094ea:	4b17      	ldr	r3, [pc, #92]	; (8009548 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80094ec:	e001      	b.n	80094f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80094ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80094f2:	685a      	ldr	r2, [r3, #4]
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	4912      	ldr	r1, [pc, #72]	; (8009544 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80094fa:	428b      	cmp	r3, r1
 80094fc:	d101      	bne.n	8009502 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80094fe:	4b12      	ldr	r3, [pc, #72]	; (8009548 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8009500:	e001      	b.n	8009506 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8009502:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009506:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800950a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	685a      	ldr	r2, [r3, #4]
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800951a:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2201      	movs	r2, #1
 8009520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009528:	f043 0204 	orr.w	r2, r3, #4
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f7ff fdc5 	bl	80090c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8009536:	e000      	b.n	800953a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8009538:	bf00      	nop
}
 800953a:	bf00      	nop
 800953c:	3720      	adds	r7, #32
 800953e:	46bd      	mov	sp, r7
 8009540:	bd80      	pop	{r7, pc}
 8009542:	bf00      	nop
 8009544:	40003800 	.word	0x40003800
 8009548:	40003400 	.word	0x40003400

0800954c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800954c:	b480      	push	{r7}
 800954e:	b083      	sub	sp, #12
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8009554:	bf00      	nop
 8009556:	370c      	adds	r7, #12
 8009558:	46bd      	mov	sp, r7
 800955a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955e:	4770      	bx	lr

08009560 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b082      	sub	sp, #8
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800956c:	1c99      	adds	r1, r3, #2
 800956e:	687a      	ldr	r2, [r7, #4]
 8009570:	6251      	str	r1, [r2, #36]	; 0x24
 8009572:	881a      	ldrh	r2, [r3, #0]
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800957e:	b29b      	uxth	r3, r3
 8009580:	3b01      	subs	r3, #1
 8009582:	b29a      	uxth	r2, r3
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800958c:	b29b      	uxth	r3, r3
 800958e:	2b00      	cmp	r3, #0
 8009590:	d113      	bne.n	80095ba <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	685a      	ldr	r2, [r3, #4]
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80095a0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80095a6:	b29b      	uxth	r3, r3
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d106      	bne.n	80095ba <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2201      	movs	r2, #1
 80095b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f7ff ffc9 	bl	800954c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80095ba:	bf00      	nop
 80095bc:	3708      	adds	r7, #8
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}
	...

080095c4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b082      	sub	sp, #8
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d0:	1c99      	adds	r1, r3, #2
 80095d2:	687a      	ldr	r2, [r7, #4]
 80095d4:	6251      	str	r1, [r2, #36]	; 0x24
 80095d6:	8819      	ldrh	r1, [r3, #0]
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	4a1d      	ldr	r2, [pc, #116]	; (8009654 <I2SEx_TxISR_I2SExt+0x90>)
 80095de:	4293      	cmp	r3, r2
 80095e0:	d101      	bne.n	80095e6 <I2SEx_TxISR_I2SExt+0x22>
 80095e2:	4b1d      	ldr	r3, [pc, #116]	; (8009658 <I2SEx_TxISR_I2SExt+0x94>)
 80095e4:	e001      	b.n	80095ea <I2SEx_TxISR_I2SExt+0x26>
 80095e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80095ea:	460a      	mov	r2, r1
 80095ec:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095f2:	b29b      	uxth	r3, r3
 80095f4:	3b01      	subs	r3, #1
 80095f6:	b29a      	uxth	r2, r3
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009600:	b29b      	uxth	r3, r3
 8009602:	2b00      	cmp	r3, #0
 8009604:	d121      	bne.n	800964a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	4a12      	ldr	r2, [pc, #72]	; (8009654 <I2SEx_TxISR_I2SExt+0x90>)
 800960c:	4293      	cmp	r3, r2
 800960e:	d101      	bne.n	8009614 <I2SEx_TxISR_I2SExt+0x50>
 8009610:	4b11      	ldr	r3, [pc, #68]	; (8009658 <I2SEx_TxISR_I2SExt+0x94>)
 8009612:	e001      	b.n	8009618 <I2SEx_TxISR_I2SExt+0x54>
 8009614:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009618:	685a      	ldr	r2, [r3, #4]
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	490d      	ldr	r1, [pc, #52]	; (8009654 <I2SEx_TxISR_I2SExt+0x90>)
 8009620:	428b      	cmp	r3, r1
 8009622:	d101      	bne.n	8009628 <I2SEx_TxISR_I2SExt+0x64>
 8009624:	4b0c      	ldr	r3, [pc, #48]	; (8009658 <I2SEx_TxISR_I2SExt+0x94>)
 8009626:	e001      	b.n	800962c <I2SEx_TxISR_I2SExt+0x68>
 8009628:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800962c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009630:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009636:	b29b      	uxth	r3, r3
 8009638:	2b00      	cmp	r3, #0
 800963a:	d106      	bne.n	800964a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2201      	movs	r2, #1
 8009640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f7ff ff81 	bl	800954c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800964a:	bf00      	nop
 800964c:	3708      	adds	r7, #8
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}
 8009652:	bf00      	nop
 8009654:	40003800 	.word	0x40003800
 8009658:	40003400 	.word	0x40003400

0800965c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b082      	sub	sp, #8
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	68d8      	ldr	r0, [r3, #12]
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800966e:	1c99      	adds	r1, r3, #2
 8009670:	687a      	ldr	r2, [r7, #4]
 8009672:	62d1      	str	r1, [r2, #44]	; 0x2c
 8009674:	b282      	uxth	r2, r0
 8009676:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800967c:	b29b      	uxth	r3, r3
 800967e:	3b01      	subs	r3, #1
 8009680:	b29a      	uxth	r2, r3
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800968a:	b29b      	uxth	r3, r3
 800968c:	2b00      	cmp	r3, #0
 800968e:	d113      	bne.n	80096b8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	685a      	ldr	r2, [r3, #4]
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800969e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096a4:	b29b      	uxth	r3, r3
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d106      	bne.n	80096b8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2201      	movs	r2, #1
 80096ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f7ff ff4a 	bl	800954c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80096b8:	bf00      	nop
 80096ba:	3708      	adds	r7, #8
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}

080096c0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b082      	sub	sp, #8
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	4a20      	ldr	r2, [pc, #128]	; (8009750 <I2SEx_RxISR_I2SExt+0x90>)
 80096ce:	4293      	cmp	r3, r2
 80096d0:	d101      	bne.n	80096d6 <I2SEx_RxISR_I2SExt+0x16>
 80096d2:	4b20      	ldr	r3, [pc, #128]	; (8009754 <I2SEx_RxISR_I2SExt+0x94>)
 80096d4:	e001      	b.n	80096da <I2SEx_RxISR_I2SExt+0x1a>
 80096d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80096da:	68d8      	ldr	r0, [r3, #12]
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096e0:	1c99      	adds	r1, r3, #2
 80096e2:	687a      	ldr	r2, [r7, #4]
 80096e4:	62d1      	str	r1, [r2, #44]	; 0x2c
 80096e6:	b282      	uxth	r2, r0
 80096e8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80096ee:	b29b      	uxth	r3, r3
 80096f0:	3b01      	subs	r3, #1
 80096f2:	b29a      	uxth	r2, r3
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80096fc:	b29b      	uxth	r3, r3
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d121      	bne.n	8009746 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	4a12      	ldr	r2, [pc, #72]	; (8009750 <I2SEx_RxISR_I2SExt+0x90>)
 8009708:	4293      	cmp	r3, r2
 800970a:	d101      	bne.n	8009710 <I2SEx_RxISR_I2SExt+0x50>
 800970c:	4b11      	ldr	r3, [pc, #68]	; (8009754 <I2SEx_RxISR_I2SExt+0x94>)
 800970e:	e001      	b.n	8009714 <I2SEx_RxISR_I2SExt+0x54>
 8009710:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009714:	685a      	ldr	r2, [r3, #4]
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	490d      	ldr	r1, [pc, #52]	; (8009750 <I2SEx_RxISR_I2SExt+0x90>)
 800971c:	428b      	cmp	r3, r1
 800971e:	d101      	bne.n	8009724 <I2SEx_RxISR_I2SExt+0x64>
 8009720:	4b0c      	ldr	r3, [pc, #48]	; (8009754 <I2SEx_RxISR_I2SExt+0x94>)
 8009722:	e001      	b.n	8009728 <I2SEx_RxISR_I2SExt+0x68>
 8009724:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009728:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800972c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009732:	b29b      	uxth	r3, r3
 8009734:	2b00      	cmp	r3, #0
 8009736:	d106      	bne.n	8009746 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2201      	movs	r2, #1
 800973c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8009740:	6878      	ldr	r0, [r7, #4]
 8009742:	f7ff ff03 	bl	800954c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8009746:	bf00      	nop
 8009748:	3708      	adds	r7, #8
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}
 800974e:	bf00      	nop
 8009750:	40003800 	.word	0x40003800
 8009754:	40003400 	.word	0x40003400

08009758 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b086      	sub	sp, #24
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d101      	bne.n	800976a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009766:	2301      	movs	r3, #1
 8009768:	e25b      	b.n	8009c22 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f003 0301 	and.w	r3, r3, #1
 8009772:	2b00      	cmp	r3, #0
 8009774:	d075      	beq.n	8009862 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009776:	4ba3      	ldr	r3, [pc, #652]	; (8009a04 <HAL_RCC_OscConfig+0x2ac>)
 8009778:	689b      	ldr	r3, [r3, #8]
 800977a:	f003 030c 	and.w	r3, r3, #12
 800977e:	2b04      	cmp	r3, #4
 8009780:	d00c      	beq.n	800979c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009782:	4ba0      	ldr	r3, [pc, #640]	; (8009a04 <HAL_RCC_OscConfig+0x2ac>)
 8009784:	689b      	ldr	r3, [r3, #8]
 8009786:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800978a:	2b08      	cmp	r3, #8
 800978c:	d112      	bne.n	80097b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800978e:	4b9d      	ldr	r3, [pc, #628]	; (8009a04 <HAL_RCC_OscConfig+0x2ac>)
 8009790:	685b      	ldr	r3, [r3, #4]
 8009792:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009796:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800979a:	d10b      	bne.n	80097b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800979c:	4b99      	ldr	r3, [pc, #612]	; (8009a04 <HAL_RCC_OscConfig+0x2ac>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d05b      	beq.n	8009860 <HAL_RCC_OscConfig+0x108>
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	685b      	ldr	r3, [r3, #4]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d157      	bne.n	8009860 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80097b0:	2301      	movs	r3, #1
 80097b2:	e236      	b.n	8009c22 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	685b      	ldr	r3, [r3, #4]
 80097b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097bc:	d106      	bne.n	80097cc <HAL_RCC_OscConfig+0x74>
 80097be:	4b91      	ldr	r3, [pc, #580]	; (8009a04 <HAL_RCC_OscConfig+0x2ac>)
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	4a90      	ldr	r2, [pc, #576]	; (8009a04 <HAL_RCC_OscConfig+0x2ac>)
 80097c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80097c8:	6013      	str	r3, [r2, #0]
 80097ca:	e01d      	b.n	8009808 <HAL_RCC_OscConfig+0xb0>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	685b      	ldr	r3, [r3, #4]
 80097d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80097d4:	d10c      	bne.n	80097f0 <HAL_RCC_OscConfig+0x98>
 80097d6:	4b8b      	ldr	r3, [pc, #556]	; (8009a04 <HAL_RCC_OscConfig+0x2ac>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4a8a      	ldr	r2, [pc, #552]	; (8009a04 <HAL_RCC_OscConfig+0x2ac>)
 80097dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80097e0:	6013      	str	r3, [r2, #0]
 80097e2:	4b88      	ldr	r3, [pc, #544]	; (8009a04 <HAL_RCC_OscConfig+0x2ac>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	4a87      	ldr	r2, [pc, #540]	; (8009a04 <HAL_RCC_OscConfig+0x2ac>)
 80097e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80097ec:	6013      	str	r3, [r2, #0]
 80097ee:	e00b      	b.n	8009808 <HAL_RCC_OscConfig+0xb0>
 80097f0:	4b84      	ldr	r3, [pc, #528]	; (8009a04 <HAL_RCC_OscConfig+0x2ac>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	4a83      	ldr	r2, [pc, #524]	; (8009a04 <HAL_RCC_OscConfig+0x2ac>)
 80097f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80097fa:	6013      	str	r3, [r2, #0]
 80097fc:	4b81      	ldr	r3, [pc, #516]	; (8009a04 <HAL_RCC_OscConfig+0x2ac>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	4a80      	ldr	r2, [pc, #512]	; (8009a04 <HAL_RCC_OscConfig+0x2ac>)
 8009802:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009806:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	685b      	ldr	r3, [r3, #4]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d013      	beq.n	8009838 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009810:	f7fd f9fe 	bl	8006c10 <HAL_GetTick>
 8009814:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009816:	e008      	b.n	800982a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009818:	f7fd f9fa 	bl	8006c10 <HAL_GetTick>
 800981c:	4602      	mov	r2, r0
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	1ad3      	subs	r3, r2, r3
 8009822:	2b64      	cmp	r3, #100	; 0x64
 8009824:	d901      	bls.n	800982a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009826:	2303      	movs	r3, #3
 8009828:	e1fb      	b.n	8009c22 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800982a:	4b76      	ldr	r3, [pc, #472]	; (8009a04 <HAL_RCC_OscConfig+0x2ac>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009832:	2b00      	cmp	r3, #0
 8009834:	d0f0      	beq.n	8009818 <HAL_RCC_OscConfig+0xc0>
 8009836:	e014      	b.n	8009862 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009838:	f7fd f9ea 	bl	8006c10 <HAL_GetTick>
 800983c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800983e:	e008      	b.n	8009852 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009840:	f7fd f9e6 	bl	8006c10 <HAL_GetTick>
 8009844:	4602      	mov	r2, r0
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	1ad3      	subs	r3, r2, r3
 800984a:	2b64      	cmp	r3, #100	; 0x64
 800984c:	d901      	bls.n	8009852 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800984e:	2303      	movs	r3, #3
 8009850:	e1e7      	b.n	8009c22 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009852:	4b6c      	ldr	r3, [pc, #432]	; (8009a04 <HAL_RCC_OscConfig+0x2ac>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800985a:	2b00      	cmp	r3, #0
 800985c:	d1f0      	bne.n	8009840 <HAL_RCC_OscConfig+0xe8>
 800985e:	e000      	b.n	8009862 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009860:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f003 0302 	and.w	r3, r3, #2
 800986a:	2b00      	cmp	r3, #0
 800986c:	d063      	beq.n	8009936 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800986e:	4b65      	ldr	r3, [pc, #404]	; (8009a04 <HAL_RCC_OscConfig+0x2ac>)
 8009870:	689b      	ldr	r3, [r3, #8]
 8009872:	f003 030c 	and.w	r3, r3, #12
 8009876:	2b00      	cmp	r3, #0
 8009878:	d00b      	beq.n	8009892 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800987a:	4b62      	ldr	r3, [pc, #392]	; (8009a04 <HAL_RCC_OscConfig+0x2ac>)
 800987c:	689b      	ldr	r3, [r3, #8]
 800987e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009882:	2b08      	cmp	r3, #8
 8009884:	d11c      	bne.n	80098c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009886:	4b5f      	ldr	r3, [pc, #380]	; (8009a04 <HAL_RCC_OscConfig+0x2ac>)
 8009888:	685b      	ldr	r3, [r3, #4]
 800988a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800988e:	2b00      	cmp	r3, #0
 8009890:	d116      	bne.n	80098c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009892:	4b5c      	ldr	r3, [pc, #368]	; (8009a04 <HAL_RCC_OscConfig+0x2ac>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f003 0302 	and.w	r3, r3, #2
 800989a:	2b00      	cmp	r3, #0
 800989c:	d005      	beq.n	80098aa <HAL_RCC_OscConfig+0x152>
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	68db      	ldr	r3, [r3, #12]
 80098a2:	2b01      	cmp	r3, #1
 80098a4:	d001      	beq.n	80098aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80098a6:	2301      	movs	r3, #1
 80098a8:	e1bb      	b.n	8009c22 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80098aa:	4b56      	ldr	r3, [pc, #344]	; (8009a04 <HAL_RCC_OscConfig+0x2ac>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	691b      	ldr	r3, [r3, #16]
 80098b6:	00db      	lsls	r3, r3, #3
 80098b8:	4952      	ldr	r1, [pc, #328]	; (8009a04 <HAL_RCC_OscConfig+0x2ac>)
 80098ba:	4313      	orrs	r3, r2
 80098bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80098be:	e03a      	b.n	8009936 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	68db      	ldr	r3, [r3, #12]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d020      	beq.n	800990a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80098c8:	4b4f      	ldr	r3, [pc, #316]	; (8009a08 <HAL_RCC_OscConfig+0x2b0>)
 80098ca:	2201      	movs	r2, #1
 80098cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098ce:	f7fd f99f 	bl	8006c10 <HAL_GetTick>
 80098d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80098d4:	e008      	b.n	80098e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80098d6:	f7fd f99b 	bl	8006c10 <HAL_GetTick>
 80098da:	4602      	mov	r2, r0
 80098dc:	693b      	ldr	r3, [r7, #16]
 80098de:	1ad3      	subs	r3, r2, r3
 80098e0:	2b02      	cmp	r3, #2
 80098e2:	d901      	bls.n	80098e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80098e4:	2303      	movs	r3, #3
 80098e6:	e19c      	b.n	8009c22 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80098e8:	4b46      	ldr	r3, [pc, #280]	; (8009a04 <HAL_RCC_OscConfig+0x2ac>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f003 0302 	and.w	r3, r3, #2
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d0f0      	beq.n	80098d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80098f4:	4b43      	ldr	r3, [pc, #268]	; (8009a04 <HAL_RCC_OscConfig+0x2ac>)
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	691b      	ldr	r3, [r3, #16]
 8009900:	00db      	lsls	r3, r3, #3
 8009902:	4940      	ldr	r1, [pc, #256]	; (8009a04 <HAL_RCC_OscConfig+0x2ac>)
 8009904:	4313      	orrs	r3, r2
 8009906:	600b      	str	r3, [r1, #0]
 8009908:	e015      	b.n	8009936 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800990a:	4b3f      	ldr	r3, [pc, #252]	; (8009a08 <HAL_RCC_OscConfig+0x2b0>)
 800990c:	2200      	movs	r2, #0
 800990e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009910:	f7fd f97e 	bl	8006c10 <HAL_GetTick>
 8009914:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009916:	e008      	b.n	800992a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009918:	f7fd f97a 	bl	8006c10 <HAL_GetTick>
 800991c:	4602      	mov	r2, r0
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	1ad3      	subs	r3, r2, r3
 8009922:	2b02      	cmp	r3, #2
 8009924:	d901      	bls.n	800992a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009926:	2303      	movs	r3, #3
 8009928:	e17b      	b.n	8009c22 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800992a:	4b36      	ldr	r3, [pc, #216]	; (8009a04 <HAL_RCC_OscConfig+0x2ac>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f003 0302 	and.w	r3, r3, #2
 8009932:	2b00      	cmp	r3, #0
 8009934:	d1f0      	bne.n	8009918 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f003 0308 	and.w	r3, r3, #8
 800993e:	2b00      	cmp	r3, #0
 8009940:	d030      	beq.n	80099a4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	695b      	ldr	r3, [r3, #20]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d016      	beq.n	8009978 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800994a:	4b30      	ldr	r3, [pc, #192]	; (8009a0c <HAL_RCC_OscConfig+0x2b4>)
 800994c:	2201      	movs	r2, #1
 800994e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009950:	f7fd f95e 	bl	8006c10 <HAL_GetTick>
 8009954:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009956:	e008      	b.n	800996a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009958:	f7fd f95a 	bl	8006c10 <HAL_GetTick>
 800995c:	4602      	mov	r2, r0
 800995e:	693b      	ldr	r3, [r7, #16]
 8009960:	1ad3      	subs	r3, r2, r3
 8009962:	2b02      	cmp	r3, #2
 8009964:	d901      	bls.n	800996a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009966:	2303      	movs	r3, #3
 8009968:	e15b      	b.n	8009c22 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800996a:	4b26      	ldr	r3, [pc, #152]	; (8009a04 <HAL_RCC_OscConfig+0x2ac>)
 800996c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800996e:	f003 0302 	and.w	r3, r3, #2
 8009972:	2b00      	cmp	r3, #0
 8009974:	d0f0      	beq.n	8009958 <HAL_RCC_OscConfig+0x200>
 8009976:	e015      	b.n	80099a4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009978:	4b24      	ldr	r3, [pc, #144]	; (8009a0c <HAL_RCC_OscConfig+0x2b4>)
 800997a:	2200      	movs	r2, #0
 800997c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800997e:	f7fd f947 	bl	8006c10 <HAL_GetTick>
 8009982:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009984:	e008      	b.n	8009998 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009986:	f7fd f943 	bl	8006c10 <HAL_GetTick>
 800998a:	4602      	mov	r2, r0
 800998c:	693b      	ldr	r3, [r7, #16]
 800998e:	1ad3      	subs	r3, r2, r3
 8009990:	2b02      	cmp	r3, #2
 8009992:	d901      	bls.n	8009998 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009994:	2303      	movs	r3, #3
 8009996:	e144      	b.n	8009c22 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009998:	4b1a      	ldr	r3, [pc, #104]	; (8009a04 <HAL_RCC_OscConfig+0x2ac>)
 800999a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800999c:	f003 0302 	and.w	r3, r3, #2
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d1f0      	bne.n	8009986 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f003 0304 	and.w	r3, r3, #4
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	f000 80a0 	beq.w	8009af2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80099b2:	2300      	movs	r3, #0
 80099b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80099b6:	4b13      	ldr	r3, [pc, #76]	; (8009a04 <HAL_RCC_OscConfig+0x2ac>)
 80099b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d10f      	bne.n	80099e2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80099c2:	2300      	movs	r3, #0
 80099c4:	60bb      	str	r3, [r7, #8]
 80099c6:	4b0f      	ldr	r3, [pc, #60]	; (8009a04 <HAL_RCC_OscConfig+0x2ac>)
 80099c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ca:	4a0e      	ldr	r2, [pc, #56]	; (8009a04 <HAL_RCC_OscConfig+0x2ac>)
 80099cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80099d0:	6413      	str	r3, [r2, #64]	; 0x40
 80099d2:	4b0c      	ldr	r3, [pc, #48]	; (8009a04 <HAL_RCC_OscConfig+0x2ac>)
 80099d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80099da:	60bb      	str	r3, [r7, #8]
 80099dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80099de:	2301      	movs	r3, #1
 80099e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80099e2:	4b0b      	ldr	r3, [pc, #44]	; (8009a10 <HAL_RCC_OscConfig+0x2b8>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d121      	bne.n	8009a32 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80099ee:	4b08      	ldr	r3, [pc, #32]	; (8009a10 <HAL_RCC_OscConfig+0x2b8>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	4a07      	ldr	r2, [pc, #28]	; (8009a10 <HAL_RCC_OscConfig+0x2b8>)
 80099f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80099f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80099fa:	f7fd f909 	bl	8006c10 <HAL_GetTick>
 80099fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009a00:	e011      	b.n	8009a26 <HAL_RCC_OscConfig+0x2ce>
 8009a02:	bf00      	nop
 8009a04:	40023800 	.word	0x40023800
 8009a08:	42470000 	.word	0x42470000
 8009a0c:	42470e80 	.word	0x42470e80
 8009a10:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009a14:	f7fd f8fc 	bl	8006c10 <HAL_GetTick>
 8009a18:	4602      	mov	r2, r0
 8009a1a:	693b      	ldr	r3, [r7, #16]
 8009a1c:	1ad3      	subs	r3, r2, r3
 8009a1e:	2b02      	cmp	r3, #2
 8009a20:	d901      	bls.n	8009a26 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8009a22:	2303      	movs	r3, #3
 8009a24:	e0fd      	b.n	8009c22 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009a26:	4b81      	ldr	r3, [pc, #516]	; (8009c2c <HAL_RCC_OscConfig+0x4d4>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d0f0      	beq.n	8009a14 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	689b      	ldr	r3, [r3, #8]
 8009a36:	2b01      	cmp	r3, #1
 8009a38:	d106      	bne.n	8009a48 <HAL_RCC_OscConfig+0x2f0>
 8009a3a:	4b7d      	ldr	r3, [pc, #500]	; (8009c30 <HAL_RCC_OscConfig+0x4d8>)
 8009a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a3e:	4a7c      	ldr	r2, [pc, #496]	; (8009c30 <HAL_RCC_OscConfig+0x4d8>)
 8009a40:	f043 0301 	orr.w	r3, r3, #1
 8009a44:	6713      	str	r3, [r2, #112]	; 0x70
 8009a46:	e01c      	b.n	8009a82 <HAL_RCC_OscConfig+0x32a>
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	689b      	ldr	r3, [r3, #8]
 8009a4c:	2b05      	cmp	r3, #5
 8009a4e:	d10c      	bne.n	8009a6a <HAL_RCC_OscConfig+0x312>
 8009a50:	4b77      	ldr	r3, [pc, #476]	; (8009c30 <HAL_RCC_OscConfig+0x4d8>)
 8009a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a54:	4a76      	ldr	r2, [pc, #472]	; (8009c30 <HAL_RCC_OscConfig+0x4d8>)
 8009a56:	f043 0304 	orr.w	r3, r3, #4
 8009a5a:	6713      	str	r3, [r2, #112]	; 0x70
 8009a5c:	4b74      	ldr	r3, [pc, #464]	; (8009c30 <HAL_RCC_OscConfig+0x4d8>)
 8009a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a60:	4a73      	ldr	r2, [pc, #460]	; (8009c30 <HAL_RCC_OscConfig+0x4d8>)
 8009a62:	f043 0301 	orr.w	r3, r3, #1
 8009a66:	6713      	str	r3, [r2, #112]	; 0x70
 8009a68:	e00b      	b.n	8009a82 <HAL_RCC_OscConfig+0x32a>
 8009a6a:	4b71      	ldr	r3, [pc, #452]	; (8009c30 <HAL_RCC_OscConfig+0x4d8>)
 8009a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a6e:	4a70      	ldr	r2, [pc, #448]	; (8009c30 <HAL_RCC_OscConfig+0x4d8>)
 8009a70:	f023 0301 	bic.w	r3, r3, #1
 8009a74:	6713      	str	r3, [r2, #112]	; 0x70
 8009a76:	4b6e      	ldr	r3, [pc, #440]	; (8009c30 <HAL_RCC_OscConfig+0x4d8>)
 8009a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a7a:	4a6d      	ldr	r2, [pc, #436]	; (8009c30 <HAL_RCC_OscConfig+0x4d8>)
 8009a7c:	f023 0304 	bic.w	r3, r3, #4
 8009a80:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	689b      	ldr	r3, [r3, #8]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d015      	beq.n	8009ab6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a8a:	f7fd f8c1 	bl	8006c10 <HAL_GetTick>
 8009a8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009a90:	e00a      	b.n	8009aa8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009a92:	f7fd f8bd 	bl	8006c10 <HAL_GetTick>
 8009a96:	4602      	mov	r2, r0
 8009a98:	693b      	ldr	r3, [r7, #16]
 8009a9a:	1ad3      	subs	r3, r2, r3
 8009a9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009aa0:	4293      	cmp	r3, r2
 8009aa2:	d901      	bls.n	8009aa8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8009aa4:	2303      	movs	r3, #3
 8009aa6:	e0bc      	b.n	8009c22 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009aa8:	4b61      	ldr	r3, [pc, #388]	; (8009c30 <HAL_RCC_OscConfig+0x4d8>)
 8009aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009aac:	f003 0302 	and.w	r3, r3, #2
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d0ee      	beq.n	8009a92 <HAL_RCC_OscConfig+0x33a>
 8009ab4:	e014      	b.n	8009ae0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009ab6:	f7fd f8ab 	bl	8006c10 <HAL_GetTick>
 8009aba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009abc:	e00a      	b.n	8009ad4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009abe:	f7fd f8a7 	bl	8006c10 <HAL_GetTick>
 8009ac2:	4602      	mov	r2, r0
 8009ac4:	693b      	ldr	r3, [r7, #16]
 8009ac6:	1ad3      	subs	r3, r2, r3
 8009ac8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009acc:	4293      	cmp	r3, r2
 8009ace:	d901      	bls.n	8009ad4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8009ad0:	2303      	movs	r3, #3
 8009ad2:	e0a6      	b.n	8009c22 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009ad4:	4b56      	ldr	r3, [pc, #344]	; (8009c30 <HAL_RCC_OscConfig+0x4d8>)
 8009ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ad8:	f003 0302 	and.w	r3, r3, #2
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d1ee      	bne.n	8009abe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009ae0:	7dfb      	ldrb	r3, [r7, #23]
 8009ae2:	2b01      	cmp	r3, #1
 8009ae4:	d105      	bne.n	8009af2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009ae6:	4b52      	ldr	r3, [pc, #328]	; (8009c30 <HAL_RCC_OscConfig+0x4d8>)
 8009ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aea:	4a51      	ldr	r2, [pc, #324]	; (8009c30 <HAL_RCC_OscConfig+0x4d8>)
 8009aec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009af0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	699b      	ldr	r3, [r3, #24]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	f000 8092 	beq.w	8009c20 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009afc:	4b4c      	ldr	r3, [pc, #304]	; (8009c30 <HAL_RCC_OscConfig+0x4d8>)
 8009afe:	689b      	ldr	r3, [r3, #8]
 8009b00:	f003 030c 	and.w	r3, r3, #12
 8009b04:	2b08      	cmp	r3, #8
 8009b06:	d05c      	beq.n	8009bc2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	699b      	ldr	r3, [r3, #24]
 8009b0c:	2b02      	cmp	r3, #2
 8009b0e:	d141      	bne.n	8009b94 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009b10:	4b48      	ldr	r3, [pc, #288]	; (8009c34 <HAL_RCC_OscConfig+0x4dc>)
 8009b12:	2200      	movs	r2, #0
 8009b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b16:	f7fd f87b 	bl	8006c10 <HAL_GetTick>
 8009b1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009b1c:	e008      	b.n	8009b30 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009b1e:	f7fd f877 	bl	8006c10 <HAL_GetTick>
 8009b22:	4602      	mov	r2, r0
 8009b24:	693b      	ldr	r3, [r7, #16]
 8009b26:	1ad3      	subs	r3, r2, r3
 8009b28:	2b02      	cmp	r3, #2
 8009b2a:	d901      	bls.n	8009b30 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8009b2c:	2303      	movs	r3, #3
 8009b2e:	e078      	b.n	8009c22 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009b30:	4b3f      	ldr	r3, [pc, #252]	; (8009c30 <HAL_RCC_OscConfig+0x4d8>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d1f0      	bne.n	8009b1e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	69da      	ldr	r2, [r3, #28]
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	6a1b      	ldr	r3, [r3, #32]
 8009b44:	431a      	orrs	r2, r3
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b4a:	019b      	lsls	r3, r3, #6
 8009b4c:	431a      	orrs	r2, r3
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b52:	085b      	lsrs	r3, r3, #1
 8009b54:	3b01      	subs	r3, #1
 8009b56:	041b      	lsls	r3, r3, #16
 8009b58:	431a      	orrs	r2, r3
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b5e:	061b      	lsls	r3, r3, #24
 8009b60:	4933      	ldr	r1, [pc, #204]	; (8009c30 <HAL_RCC_OscConfig+0x4d8>)
 8009b62:	4313      	orrs	r3, r2
 8009b64:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009b66:	4b33      	ldr	r3, [pc, #204]	; (8009c34 <HAL_RCC_OscConfig+0x4dc>)
 8009b68:	2201      	movs	r2, #1
 8009b6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b6c:	f7fd f850 	bl	8006c10 <HAL_GetTick>
 8009b70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009b72:	e008      	b.n	8009b86 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009b74:	f7fd f84c 	bl	8006c10 <HAL_GetTick>
 8009b78:	4602      	mov	r2, r0
 8009b7a:	693b      	ldr	r3, [r7, #16]
 8009b7c:	1ad3      	subs	r3, r2, r3
 8009b7e:	2b02      	cmp	r3, #2
 8009b80:	d901      	bls.n	8009b86 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8009b82:	2303      	movs	r3, #3
 8009b84:	e04d      	b.n	8009c22 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009b86:	4b2a      	ldr	r3, [pc, #168]	; (8009c30 <HAL_RCC_OscConfig+0x4d8>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d0f0      	beq.n	8009b74 <HAL_RCC_OscConfig+0x41c>
 8009b92:	e045      	b.n	8009c20 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009b94:	4b27      	ldr	r3, [pc, #156]	; (8009c34 <HAL_RCC_OscConfig+0x4dc>)
 8009b96:	2200      	movs	r2, #0
 8009b98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b9a:	f7fd f839 	bl	8006c10 <HAL_GetTick>
 8009b9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009ba0:	e008      	b.n	8009bb4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009ba2:	f7fd f835 	bl	8006c10 <HAL_GetTick>
 8009ba6:	4602      	mov	r2, r0
 8009ba8:	693b      	ldr	r3, [r7, #16]
 8009baa:	1ad3      	subs	r3, r2, r3
 8009bac:	2b02      	cmp	r3, #2
 8009bae:	d901      	bls.n	8009bb4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8009bb0:	2303      	movs	r3, #3
 8009bb2:	e036      	b.n	8009c22 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009bb4:	4b1e      	ldr	r3, [pc, #120]	; (8009c30 <HAL_RCC_OscConfig+0x4d8>)
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d1f0      	bne.n	8009ba2 <HAL_RCC_OscConfig+0x44a>
 8009bc0:	e02e      	b.n	8009c20 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	699b      	ldr	r3, [r3, #24]
 8009bc6:	2b01      	cmp	r3, #1
 8009bc8:	d101      	bne.n	8009bce <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8009bca:	2301      	movs	r3, #1
 8009bcc:	e029      	b.n	8009c22 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009bce:	4b18      	ldr	r3, [pc, #96]	; (8009c30 <HAL_RCC_OscConfig+0x4d8>)
 8009bd0:	685b      	ldr	r3, [r3, #4]
 8009bd2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	69db      	ldr	r3, [r3, #28]
 8009bde:	429a      	cmp	r2, r3
 8009be0:	d11c      	bne.n	8009c1c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009bec:	429a      	cmp	r2, r3
 8009bee:	d115      	bne.n	8009c1c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8009bf0:	68fa      	ldr	r2, [r7, #12]
 8009bf2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009bf6:	4013      	ands	r3, r2
 8009bf8:	687a      	ldr	r2, [r7, #4]
 8009bfa:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d10d      	bne.n	8009c1c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8009c0a:	429a      	cmp	r2, r3
 8009c0c:	d106      	bne.n	8009c1c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009c18:	429a      	cmp	r2, r3
 8009c1a:	d001      	beq.n	8009c20 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8009c1c:	2301      	movs	r3, #1
 8009c1e:	e000      	b.n	8009c22 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8009c20:	2300      	movs	r3, #0
}
 8009c22:	4618      	mov	r0, r3
 8009c24:	3718      	adds	r7, #24
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}
 8009c2a:	bf00      	nop
 8009c2c:	40007000 	.word	0x40007000
 8009c30:	40023800 	.word	0x40023800
 8009c34:	42470060 	.word	0x42470060

08009c38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b084      	sub	sp, #16
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
 8009c40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d101      	bne.n	8009c4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009c48:	2301      	movs	r3, #1
 8009c4a:	e0cc      	b.n	8009de6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009c4c:	4b68      	ldr	r3, [pc, #416]	; (8009df0 <HAL_RCC_ClockConfig+0x1b8>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f003 030f 	and.w	r3, r3, #15
 8009c54:	683a      	ldr	r2, [r7, #0]
 8009c56:	429a      	cmp	r2, r3
 8009c58:	d90c      	bls.n	8009c74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009c5a:	4b65      	ldr	r3, [pc, #404]	; (8009df0 <HAL_RCC_ClockConfig+0x1b8>)
 8009c5c:	683a      	ldr	r2, [r7, #0]
 8009c5e:	b2d2      	uxtb	r2, r2
 8009c60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009c62:	4b63      	ldr	r3, [pc, #396]	; (8009df0 <HAL_RCC_ClockConfig+0x1b8>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f003 030f 	and.w	r3, r3, #15
 8009c6a:	683a      	ldr	r2, [r7, #0]
 8009c6c:	429a      	cmp	r2, r3
 8009c6e:	d001      	beq.n	8009c74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009c70:	2301      	movs	r3, #1
 8009c72:	e0b8      	b.n	8009de6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f003 0302 	and.w	r3, r3, #2
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d020      	beq.n	8009cc2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f003 0304 	and.w	r3, r3, #4
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d005      	beq.n	8009c98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009c8c:	4b59      	ldr	r3, [pc, #356]	; (8009df4 <HAL_RCC_ClockConfig+0x1bc>)
 8009c8e:	689b      	ldr	r3, [r3, #8]
 8009c90:	4a58      	ldr	r2, [pc, #352]	; (8009df4 <HAL_RCC_ClockConfig+0x1bc>)
 8009c92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009c96:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	f003 0308 	and.w	r3, r3, #8
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d005      	beq.n	8009cb0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009ca4:	4b53      	ldr	r3, [pc, #332]	; (8009df4 <HAL_RCC_ClockConfig+0x1bc>)
 8009ca6:	689b      	ldr	r3, [r3, #8]
 8009ca8:	4a52      	ldr	r2, [pc, #328]	; (8009df4 <HAL_RCC_ClockConfig+0x1bc>)
 8009caa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009cae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009cb0:	4b50      	ldr	r3, [pc, #320]	; (8009df4 <HAL_RCC_ClockConfig+0x1bc>)
 8009cb2:	689b      	ldr	r3, [r3, #8]
 8009cb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	689b      	ldr	r3, [r3, #8]
 8009cbc:	494d      	ldr	r1, [pc, #308]	; (8009df4 <HAL_RCC_ClockConfig+0x1bc>)
 8009cbe:	4313      	orrs	r3, r2
 8009cc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f003 0301 	and.w	r3, r3, #1
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d044      	beq.n	8009d58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	685b      	ldr	r3, [r3, #4]
 8009cd2:	2b01      	cmp	r3, #1
 8009cd4:	d107      	bne.n	8009ce6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009cd6:	4b47      	ldr	r3, [pc, #284]	; (8009df4 <HAL_RCC_ClockConfig+0x1bc>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d119      	bne.n	8009d16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	e07f      	b.n	8009de6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	685b      	ldr	r3, [r3, #4]
 8009cea:	2b02      	cmp	r3, #2
 8009cec:	d003      	beq.n	8009cf6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009cf2:	2b03      	cmp	r3, #3
 8009cf4:	d107      	bne.n	8009d06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009cf6:	4b3f      	ldr	r3, [pc, #252]	; (8009df4 <HAL_RCC_ClockConfig+0x1bc>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d109      	bne.n	8009d16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009d02:	2301      	movs	r3, #1
 8009d04:	e06f      	b.n	8009de6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009d06:	4b3b      	ldr	r3, [pc, #236]	; (8009df4 <HAL_RCC_ClockConfig+0x1bc>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f003 0302 	and.w	r3, r3, #2
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d101      	bne.n	8009d16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009d12:	2301      	movs	r3, #1
 8009d14:	e067      	b.n	8009de6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009d16:	4b37      	ldr	r3, [pc, #220]	; (8009df4 <HAL_RCC_ClockConfig+0x1bc>)
 8009d18:	689b      	ldr	r3, [r3, #8]
 8009d1a:	f023 0203 	bic.w	r2, r3, #3
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	685b      	ldr	r3, [r3, #4]
 8009d22:	4934      	ldr	r1, [pc, #208]	; (8009df4 <HAL_RCC_ClockConfig+0x1bc>)
 8009d24:	4313      	orrs	r3, r2
 8009d26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009d28:	f7fc ff72 	bl	8006c10 <HAL_GetTick>
 8009d2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009d2e:	e00a      	b.n	8009d46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009d30:	f7fc ff6e 	bl	8006c10 <HAL_GetTick>
 8009d34:	4602      	mov	r2, r0
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	1ad3      	subs	r3, r2, r3
 8009d3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	d901      	bls.n	8009d46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009d42:	2303      	movs	r3, #3
 8009d44:	e04f      	b.n	8009de6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009d46:	4b2b      	ldr	r3, [pc, #172]	; (8009df4 <HAL_RCC_ClockConfig+0x1bc>)
 8009d48:	689b      	ldr	r3, [r3, #8]
 8009d4a:	f003 020c 	and.w	r2, r3, #12
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	685b      	ldr	r3, [r3, #4]
 8009d52:	009b      	lsls	r3, r3, #2
 8009d54:	429a      	cmp	r2, r3
 8009d56:	d1eb      	bne.n	8009d30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009d58:	4b25      	ldr	r3, [pc, #148]	; (8009df0 <HAL_RCC_ClockConfig+0x1b8>)
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	f003 030f 	and.w	r3, r3, #15
 8009d60:	683a      	ldr	r2, [r7, #0]
 8009d62:	429a      	cmp	r2, r3
 8009d64:	d20c      	bcs.n	8009d80 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009d66:	4b22      	ldr	r3, [pc, #136]	; (8009df0 <HAL_RCC_ClockConfig+0x1b8>)
 8009d68:	683a      	ldr	r2, [r7, #0]
 8009d6a:	b2d2      	uxtb	r2, r2
 8009d6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009d6e:	4b20      	ldr	r3, [pc, #128]	; (8009df0 <HAL_RCC_ClockConfig+0x1b8>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	f003 030f 	and.w	r3, r3, #15
 8009d76:	683a      	ldr	r2, [r7, #0]
 8009d78:	429a      	cmp	r2, r3
 8009d7a:	d001      	beq.n	8009d80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	e032      	b.n	8009de6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	f003 0304 	and.w	r3, r3, #4
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d008      	beq.n	8009d9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009d8c:	4b19      	ldr	r3, [pc, #100]	; (8009df4 <HAL_RCC_ClockConfig+0x1bc>)
 8009d8e:	689b      	ldr	r3, [r3, #8]
 8009d90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	68db      	ldr	r3, [r3, #12]
 8009d98:	4916      	ldr	r1, [pc, #88]	; (8009df4 <HAL_RCC_ClockConfig+0x1bc>)
 8009d9a:	4313      	orrs	r3, r2
 8009d9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	f003 0308 	and.w	r3, r3, #8
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d009      	beq.n	8009dbe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009daa:	4b12      	ldr	r3, [pc, #72]	; (8009df4 <HAL_RCC_ClockConfig+0x1bc>)
 8009dac:	689b      	ldr	r3, [r3, #8]
 8009dae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	691b      	ldr	r3, [r3, #16]
 8009db6:	00db      	lsls	r3, r3, #3
 8009db8:	490e      	ldr	r1, [pc, #56]	; (8009df4 <HAL_RCC_ClockConfig+0x1bc>)
 8009dba:	4313      	orrs	r3, r2
 8009dbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009dbe:	f000 f821 	bl	8009e04 <HAL_RCC_GetSysClockFreq>
 8009dc2:	4601      	mov	r1, r0
 8009dc4:	4b0b      	ldr	r3, [pc, #44]	; (8009df4 <HAL_RCC_ClockConfig+0x1bc>)
 8009dc6:	689b      	ldr	r3, [r3, #8]
 8009dc8:	091b      	lsrs	r3, r3, #4
 8009dca:	f003 030f 	and.w	r3, r3, #15
 8009dce:	4a0a      	ldr	r2, [pc, #40]	; (8009df8 <HAL_RCC_ClockConfig+0x1c0>)
 8009dd0:	5cd3      	ldrb	r3, [r2, r3]
 8009dd2:	fa21 f303 	lsr.w	r3, r1, r3
 8009dd6:	4a09      	ldr	r2, [pc, #36]	; (8009dfc <HAL_RCC_ClockConfig+0x1c4>)
 8009dd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009dda:	4b09      	ldr	r3, [pc, #36]	; (8009e00 <HAL_RCC_ClockConfig+0x1c8>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	4618      	mov	r0, r3
 8009de0:	f7fc fed2 	bl	8006b88 <HAL_InitTick>

  return HAL_OK;
 8009de4:	2300      	movs	r3, #0
}
 8009de6:	4618      	mov	r0, r3
 8009de8:	3710      	adds	r7, #16
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}
 8009dee:	bf00      	nop
 8009df0:	40023c00 	.word	0x40023c00
 8009df4:	40023800 	.word	0x40023800
 8009df8:	0800de50 	.word	0x0800de50
 8009dfc:	20000000 	.word	0x20000000
 8009e00:	20000004 	.word	0x20000004

08009e04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e06:	b085      	sub	sp, #20
 8009e08:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	607b      	str	r3, [r7, #4]
 8009e0e:	2300      	movs	r3, #0
 8009e10:	60fb      	str	r3, [r7, #12]
 8009e12:	2300      	movs	r3, #0
 8009e14:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8009e16:	2300      	movs	r3, #0
 8009e18:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009e1a:	4b63      	ldr	r3, [pc, #396]	; (8009fa8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009e1c:	689b      	ldr	r3, [r3, #8]
 8009e1e:	f003 030c 	and.w	r3, r3, #12
 8009e22:	2b04      	cmp	r3, #4
 8009e24:	d007      	beq.n	8009e36 <HAL_RCC_GetSysClockFreq+0x32>
 8009e26:	2b08      	cmp	r3, #8
 8009e28:	d008      	beq.n	8009e3c <HAL_RCC_GetSysClockFreq+0x38>
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	f040 80b4 	bne.w	8009f98 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009e30:	4b5e      	ldr	r3, [pc, #376]	; (8009fac <HAL_RCC_GetSysClockFreq+0x1a8>)
 8009e32:	60bb      	str	r3, [r7, #8]
       break;
 8009e34:	e0b3      	b.n	8009f9e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009e36:	4b5e      	ldr	r3, [pc, #376]	; (8009fb0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8009e38:	60bb      	str	r3, [r7, #8]
      break;
 8009e3a:	e0b0      	b.n	8009f9e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009e3c:	4b5a      	ldr	r3, [pc, #360]	; (8009fa8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009e3e:	685b      	ldr	r3, [r3, #4]
 8009e40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009e44:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009e46:	4b58      	ldr	r3, [pc, #352]	; (8009fa8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009e48:	685b      	ldr	r3, [r3, #4]
 8009e4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d04a      	beq.n	8009ee8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009e52:	4b55      	ldr	r3, [pc, #340]	; (8009fa8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009e54:	685b      	ldr	r3, [r3, #4]
 8009e56:	099b      	lsrs	r3, r3, #6
 8009e58:	f04f 0400 	mov.w	r4, #0
 8009e5c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009e60:	f04f 0200 	mov.w	r2, #0
 8009e64:	ea03 0501 	and.w	r5, r3, r1
 8009e68:	ea04 0602 	and.w	r6, r4, r2
 8009e6c:	4629      	mov	r1, r5
 8009e6e:	4632      	mov	r2, r6
 8009e70:	f04f 0300 	mov.w	r3, #0
 8009e74:	f04f 0400 	mov.w	r4, #0
 8009e78:	0154      	lsls	r4, r2, #5
 8009e7a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009e7e:	014b      	lsls	r3, r1, #5
 8009e80:	4619      	mov	r1, r3
 8009e82:	4622      	mov	r2, r4
 8009e84:	1b49      	subs	r1, r1, r5
 8009e86:	eb62 0206 	sbc.w	r2, r2, r6
 8009e8a:	f04f 0300 	mov.w	r3, #0
 8009e8e:	f04f 0400 	mov.w	r4, #0
 8009e92:	0194      	lsls	r4, r2, #6
 8009e94:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8009e98:	018b      	lsls	r3, r1, #6
 8009e9a:	1a5b      	subs	r3, r3, r1
 8009e9c:	eb64 0402 	sbc.w	r4, r4, r2
 8009ea0:	f04f 0100 	mov.w	r1, #0
 8009ea4:	f04f 0200 	mov.w	r2, #0
 8009ea8:	00e2      	lsls	r2, r4, #3
 8009eaa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8009eae:	00d9      	lsls	r1, r3, #3
 8009eb0:	460b      	mov	r3, r1
 8009eb2:	4614      	mov	r4, r2
 8009eb4:	195b      	adds	r3, r3, r5
 8009eb6:	eb44 0406 	adc.w	r4, r4, r6
 8009eba:	f04f 0100 	mov.w	r1, #0
 8009ebe:	f04f 0200 	mov.w	r2, #0
 8009ec2:	0262      	lsls	r2, r4, #9
 8009ec4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8009ec8:	0259      	lsls	r1, r3, #9
 8009eca:	460b      	mov	r3, r1
 8009ecc:	4614      	mov	r4, r2
 8009ece:	4618      	mov	r0, r3
 8009ed0:	4621      	mov	r1, r4
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	f04f 0400 	mov.w	r4, #0
 8009ed8:	461a      	mov	r2, r3
 8009eda:	4623      	mov	r3, r4
 8009edc:	f7f6 f97c 	bl	80001d8 <__aeabi_uldivmod>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	460c      	mov	r4, r1
 8009ee4:	60fb      	str	r3, [r7, #12]
 8009ee6:	e049      	b.n	8009f7c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009ee8:	4b2f      	ldr	r3, [pc, #188]	; (8009fa8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009eea:	685b      	ldr	r3, [r3, #4]
 8009eec:	099b      	lsrs	r3, r3, #6
 8009eee:	f04f 0400 	mov.w	r4, #0
 8009ef2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009ef6:	f04f 0200 	mov.w	r2, #0
 8009efa:	ea03 0501 	and.w	r5, r3, r1
 8009efe:	ea04 0602 	and.w	r6, r4, r2
 8009f02:	4629      	mov	r1, r5
 8009f04:	4632      	mov	r2, r6
 8009f06:	f04f 0300 	mov.w	r3, #0
 8009f0a:	f04f 0400 	mov.w	r4, #0
 8009f0e:	0154      	lsls	r4, r2, #5
 8009f10:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009f14:	014b      	lsls	r3, r1, #5
 8009f16:	4619      	mov	r1, r3
 8009f18:	4622      	mov	r2, r4
 8009f1a:	1b49      	subs	r1, r1, r5
 8009f1c:	eb62 0206 	sbc.w	r2, r2, r6
 8009f20:	f04f 0300 	mov.w	r3, #0
 8009f24:	f04f 0400 	mov.w	r4, #0
 8009f28:	0194      	lsls	r4, r2, #6
 8009f2a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8009f2e:	018b      	lsls	r3, r1, #6
 8009f30:	1a5b      	subs	r3, r3, r1
 8009f32:	eb64 0402 	sbc.w	r4, r4, r2
 8009f36:	f04f 0100 	mov.w	r1, #0
 8009f3a:	f04f 0200 	mov.w	r2, #0
 8009f3e:	00e2      	lsls	r2, r4, #3
 8009f40:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8009f44:	00d9      	lsls	r1, r3, #3
 8009f46:	460b      	mov	r3, r1
 8009f48:	4614      	mov	r4, r2
 8009f4a:	195b      	adds	r3, r3, r5
 8009f4c:	eb44 0406 	adc.w	r4, r4, r6
 8009f50:	f04f 0100 	mov.w	r1, #0
 8009f54:	f04f 0200 	mov.w	r2, #0
 8009f58:	02a2      	lsls	r2, r4, #10
 8009f5a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8009f5e:	0299      	lsls	r1, r3, #10
 8009f60:	460b      	mov	r3, r1
 8009f62:	4614      	mov	r4, r2
 8009f64:	4618      	mov	r0, r3
 8009f66:	4621      	mov	r1, r4
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f04f 0400 	mov.w	r4, #0
 8009f6e:	461a      	mov	r2, r3
 8009f70:	4623      	mov	r3, r4
 8009f72:	f7f6 f931 	bl	80001d8 <__aeabi_uldivmod>
 8009f76:	4603      	mov	r3, r0
 8009f78:	460c      	mov	r4, r1
 8009f7a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009f7c:	4b0a      	ldr	r3, [pc, #40]	; (8009fa8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009f7e:	685b      	ldr	r3, [r3, #4]
 8009f80:	0c1b      	lsrs	r3, r3, #16
 8009f82:	f003 0303 	and.w	r3, r3, #3
 8009f86:	3301      	adds	r3, #1
 8009f88:	005b      	lsls	r3, r3, #1
 8009f8a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8009f8c:	68fa      	ldr	r2, [r7, #12]
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f94:	60bb      	str	r3, [r7, #8]
      break;
 8009f96:	e002      	b.n	8009f9e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009f98:	4b04      	ldr	r3, [pc, #16]	; (8009fac <HAL_RCC_GetSysClockFreq+0x1a8>)
 8009f9a:	60bb      	str	r3, [r7, #8]
      break;
 8009f9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009f9e:	68bb      	ldr	r3, [r7, #8]
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	3714      	adds	r7, #20
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fa8:	40023800 	.word	0x40023800
 8009fac:	00f42400 	.word	0x00f42400
 8009fb0:	007a1200 	.word	0x007a1200

08009fb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009fb8:	4b03      	ldr	r3, [pc, #12]	; (8009fc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8009fba:	681b      	ldr	r3, [r3, #0]
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc4:	4770      	bx	lr
 8009fc6:	bf00      	nop
 8009fc8:	20000000 	.word	0x20000000

08009fcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009fd0:	f7ff fff0 	bl	8009fb4 <HAL_RCC_GetHCLKFreq>
 8009fd4:	4601      	mov	r1, r0
 8009fd6:	4b05      	ldr	r3, [pc, #20]	; (8009fec <HAL_RCC_GetPCLK1Freq+0x20>)
 8009fd8:	689b      	ldr	r3, [r3, #8]
 8009fda:	0a9b      	lsrs	r3, r3, #10
 8009fdc:	f003 0307 	and.w	r3, r3, #7
 8009fe0:	4a03      	ldr	r2, [pc, #12]	; (8009ff0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009fe2:	5cd3      	ldrb	r3, [r2, r3]
 8009fe4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	bd80      	pop	{r7, pc}
 8009fec:	40023800 	.word	0x40023800
 8009ff0:	0800de60 	.word	0x0800de60

08009ff4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b086      	sub	sp, #24
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800a000:	2300      	movs	r3, #0
 800a002:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	f003 0301 	and.w	r3, r3, #1
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d105      	bne.n	800a01c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d038      	beq.n	800a08e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a01c:	4b68      	ldr	r3, [pc, #416]	; (800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800a01e:	2200      	movs	r2, #0
 800a020:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a022:	f7fc fdf5 	bl	8006c10 <HAL_GetTick>
 800a026:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a028:	e008      	b.n	800a03c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a02a:	f7fc fdf1 	bl	8006c10 <HAL_GetTick>
 800a02e:	4602      	mov	r2, r0
 800a030:	697b      	ldr	r3, [r7, #20]
 800a032:	1ad3      	subs	r3, r2, r3
 800a034:	2b02      	cmp	r3, #2
 800a036:	d901      	bls.n	800a03c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a038:	2303      	movs	r3, #3
 800a03a:	e0bd      	b.n	800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a03c:	4b61      	ldr	r3, [pc, #388]	; (800a1c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a044:	2b00      	cmp	r3, #0
 800a046:	d1f0      	bne.n	800a02a <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	685a      	ldr	r2, [r3, #4]
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	689b      	ldr	r3, [r3, #8]
 800a050:	019b      	lsls	r3, r3, #6
 800a052:	431a      	orrs	r2, r3
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	68db      	ldr	r3, [r3, #12]
 800a058:	071b      	lsls	r3, r3, #28
 800a05a:	495a      	ldr	r1, [pc, #360]	; (800a1c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a05c:	4313      	orrs	r3, r2
 800a05e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800a062:	4b57      	ldr	r3, [pc, #348]	; (800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800a064:	2201      	movs	r2, #1
 800a066:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a068:	f7fc fdd2 	bl	8006c10 <HAL_GetTick>
 800a06c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a06e:	e008      	b.n	800a082 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a070:	f7fc fdce 	bl	8006c10 <HAL_GetTick>
 800a074:	4602      	mov	r2, r0
 800a076:	697b      	ldr	r3, [r7, #20]
 800a078:	1ad3      	subs	r3, r2, r3
 800a07a:	2b02      	cmp	r3, #2
 800a07c:	d901      	bls.n	800a082 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a07e:	2303      	movs	r3, #3
 800a080:	e09a      	b.n	800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a082:	4b50      	ldr	r3, [pc, #320]	; (800a1c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d0f0      	beq.n	800a070 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	f003 0302 	and.w	r3, r3, #2
 800a096:	2b00      	cmp	r3, #0
 800a098:	f000 8083 	beq.w	800a1a2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800a09c:	2300      	movs	r3, #0
 800a09e:	60fb      	str	r3, [r7, #12]
 800a0a0:	4b48      	ldr	r3, [pc, #288]	; (800a1c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a0a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0a4:	4a47      	ldr	r2, [pc, #284]	; (800a1c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a0a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a0aa:	6413      	str	r3, [r2, #64]	; 0x40
 800a0ac:	4b45      	ldr	r3, [pc, #276]	; (800a1c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a0ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a0b4:	60fb      	str	r3, [r7, #12]
 800a0b6:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800a0b8:	4b43      	ldr	r3, [pc, #268]	; (800a1c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	4a42      	ldr	r2, [pc, #264]	; (800a1c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a0be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a0c2:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a0c4:	f7fc fda4 	bl	8006c10 <HAL_GetTick>
 800a0c8:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a0ca:	e008      	b.n	800a0de <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a0cc:	f7fc fda0 	bl	8006c10 <HAL_GetTick>
 800a0d0:	4602      	mov	r2, r0
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	1ad3      	subs	r3, r2, r3
 800a0d6:	2b02      	cmp	r3, #2
 800a0d8:	d901      	bls.n	800a0de <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800a0da:	2303      	movs	r3, #3
 800a0dc:	e06c      	b.n	800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a0de:	4b3a      	ldr	r3, [pc, #232]	; (800a1c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d0f0      	beq.n	800a0cc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a0ea:	4b36      	ldr	r3, [pc, #216]	; (800a1c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a0ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a0f2:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a0f4:	693b      	ldr	r3, [r7, #16]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d02f      	beq.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0x166>
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	691b      	ldr	r3, [r3, #16]
 800a0fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a102:	693a      	ldr	r2, [r7, #16]
 800a104:	429a      	cmp	r2, r3
 800a106:	d028      	beq.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a108:	4b2e      	ldr	r3, [pc, #184]	; (800a1c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a10a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a10c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a110:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a112:	4b2e      	ldr	r3, [pc, #184]	; (800a1cc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800a114:	2201      	movs	r2, #1
 800a116:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a118:	4b2c      	ldr	r3, [pc, #176]	; (800a1cc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800a11a:	2200      	movs	r2, #0
 800a11c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800a11e:	4a29      	ldr	r2, [pc, #164]	; (800a1c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a120:	693b      	ldr	r3, [r7, #16]
 800a122:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a124:	4b27      	ldr	r3, [pc, #156]	; (800a1c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a128:	f003 0301 	and.w	r3, r3, #1
 800a12c:	2b01      	cmp	r3, #1
 800a12e:	d114      	bne.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800a130:	f7fc fd6e 	bl	8006c10 <HAL_GetTick>
 800a134:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a136:	e00a      	b.n	800a14e <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a138:	f7fc fd6a 	bl	8006c10 <HAL_GetTick>
 800a13c:	4602      	mov	r2, r0
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	1ad3      	subs	r3, r2, r3
 800a142:	f241 3288 	movw	r2, #5000	; 0x1388
 800a146:	4293      	cmp	r3, r2
 800a148:	d901      	bls.n	800a14e <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800a14a:	2303      	movs	r3, #3
 800a14c:	e034      	b.n	800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a14e:	4b1d      	ldr	r3, [pc, #116]	; (800a1c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a152:	f003 0302 	and.w	r3, r3, #2
 800a156:	2b00      	cmp	r3, #0
 800a158:	d0ee      	beq.n	800a138 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	691b      	ldr	r3, [r3, #16]
 800a15e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a162:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a166:	d10d      	bne.n	800a184 <HAL_RCCEx_PeriphCLKConfig+0x190>
 800a168:	4b16      	ldr	r3, [pc, #88]	; (800a1c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a16a:	689b      	ldr	r3, [r3, #8]
 800a16c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	691b      	ldr	r3, [r3, #16]
 800a174:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a178:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a17c:	4911      	ldr	r1, [pc, #68]	; (800a1c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a17e:	4313      	orrs	r3, r2
 800a180:	608b      	str	r3, [r1, #8]
 800a182:	e005      	b.n	800a190 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800a184:	4b0f      	ldr	r3, [pc, #60]	; (800a1c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a186:	689b      	ldr	r3, [r3, #8]
 800a188:	4a0e      	ldr	r2, [pc, #56]	; (800a1c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a18a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800a18e:	6093      	str	r3, [r2, #8]
 800a190:	4b0c      	ldr	r3, [pc, #48]	; (800a1c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a192:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	691b      	ldr	r3, [r3, #16]
 800a198:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a19c:	4909      	ldr	r1, [pc, #36]	; (800a1c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a19e:	4313      	orrs	r3, r2
 800a1a0:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f003 0308 	and.w	r3, r3, #8
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d003      	beq.n	800a1b6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	7d1a      	ldrb	r2, [r3, #20]
 800a1b2:	4b07      	ldr	r3, [pc, #28]	; (800a1d0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800a1b4:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800a1b6:	2300      	movs	r3, #0
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	3718      	adds	r7, #24
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bd80      	pop	{r7, pc}
 800a1c0:	42470068 	.word	0x42470068
 800a1c4:	40023800 	.word	0x40023800
 800a1c8:	40007000 	.word	0x40007000
 800a1cc:	42470e40 	.word	0x42470e40
 800a1d0:	424711e0 	.word	0x424711e0

0800a1d4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b087      	sub	sp, #28
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800a1dc:	2300      	movs	r3, #0
 800a1de:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2b01      	cmp	r3, #1
 800a1f0:	d13f      	bne.n	800a272 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800a1f2:	4b23      	ldr	r3, [pc, #140]	; (800a280 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800a1f4:	689b      	ldr	r3, [r3, #8]
 800a1f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a1fa:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d004      	beq.n	800a20c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800a202:	2b01      	cmp	r3, #1
 800a204:	d131      	bne.n	800a26a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800a206:	4b1f      	ldr	r3, [pc, #124]	; (800a284 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800a208:	617b      	str	r3, [r7, #20]
          break;
 800a20a:	e031      	b.n	800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800a20c:	4b1c      	ldr	r3, [pc, #112]	; (800a280 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800a20e:	685b      	ldr	r3, [r3, #4]
 800a210:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a214:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a218:	d109      	bne.n	800a22e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800a21a:	4b19      	ldr	r3, [pc, #100]	; (800a280 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800a21c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a220:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a224:	4a18      	ldr	r2, [pc, #96]	; (800a288 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800a226:	fbb2 f3f3 	udiv	r3, r2, r3
 800a22a:	613b      	str	r3, [r7, #16]
 800a22c:	e008      	b.n	800a240 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800a22e:	4b14      	ldr	r3, [pc, #80]	; (800a280 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800a230:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a234:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a238:	4a14      	ldr	r2, [pc, #80]	; (800a28c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800a23a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a23e:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800a240:	4b0f      	ldr	r3, [pc, #60]	; (800a280 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800a242:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a246:	099b      	lsrs	r3, r3, #6
 800a248:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a24c:	693b      	ldr	r3, [r7, #16]
 800a24e:	fb02 f303 	mul.w	r3, r2, r3
 800a252:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800a254:	4b0a      	ldr	r3, [pc, #40]	; (800a280 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800a256:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a25a:	0f1b      	lsrs	r3, r3, #28
 800a25c:	f003 0307 	and.w	r3, r3, #7
 800a260:	68ba      	ldr	r2, [r7, #8]
 800a262:	fbb2 f3f3 	udiv	r3, r2, r3
 800a266:	617b      	str	r3, [r7, #20]
          break;
 800a268:	e002      	b.n	800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800a26a:	2300      	movs	r3, #0
 800a26c:	617b      	str	r3, [r7, #20]
          break;
 800a26e:	bf00      	nop
        }
      }
      break;
 800a270:	bf00      	nop
    }
  }
  return frequency;
 800a272:	697b      	ldr	r3, [r7, #20]
}
 800a274:	4618      	mov	r0, r3
 800a276:	371c      	adds	r7, #28
 800a278:	46bd      	mov	sp, r7
 800a27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27e:	4770      	bx	lr
 800a280:	40023800 	.word	0x40023800
 800a284:	00bb8000 	.word	0x00bb8000
 800a288:	007a1200 	.word	0x007a1200
 800a28c:	00f42400 	.word	0x00f42400

0800a290 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b082      	sub	sp, #8
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d101      	bne.n	800a2a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a29e:	2301      	movs	r3, #1
 800a2a0:	e056      	b.n	800a350 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a2ae:	b2db      	uxtb	r3, r3
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d106      	bne.n	800a2c2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f7fc fb03 	bl	80068c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2202      	movs	r2, #2
 800a2c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	681a      	ldr	r2, [r3, #0]
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a2d8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	685a      	ldr	r2, [r3, #4]
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	689b      	ldr	r3, [r3, #8]
 800a2e2:	431a      	orrs	r2, r3
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	68db      	ldr	r3, [r3, #12]
 800a2e8:	431a      	orrs	r2, r3
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	691b      	ldr	r3, [r3, #16]
 800a2ee:	431a      	orrs	r2, r3
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	695b      	ldr	r3, [r3, #20]
 800a2f4:	431a      	orrs	r2, r3
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	699b      	ldr	r3, [r3, #24]
 800a2fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a2fe:	431a      	orrs	r2, r3
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	69db      	ldr	r3, [r3, #28]
 800a304:	431a      	orrs	r2, r3
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6a1b      	ldr	r3, [r3, #32]
 800a30a:	ea42 0103 	orr.w	r1, r2, r3
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	430a      	orrs	r2, r1
 800a318:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	699b      	ldr	r3, [r3, #24]
 800a31e:	0c1b      	lsrs	r3, r3, #16
 800a320:	f003 0104 	and.w	r1, r3, #4
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	430a      	orrs	r2, r1
 800a32e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	69da      	ldr	r2, [r3, #28]
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a33e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2200      	movs	r2, #0
 800a344:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2201      	movs	r2, #1
 800a34a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a34e:	2300      	movs	r3, #0
}
 800a350:	4618      	mov	r0, r3
 800a352:	3708      	adds	r7, #8
 800a354:	46bd      	mov	sp, r7
 800a356:	bd80      	pop	{r7, pc}

0800a358 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b088      	sub	sp, #32
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	60f8      	str	r0, [r7, #12]
 800a360:	60b9      	str	r1, [r7, #8]
 800a362:	603b      	str	r3, [r7, #0]
 800a364:	4613      	mov	r3, r2
 800a366:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a368:	2300      	movs	r3, #0
 800a36a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a372:	2b01      	cmp	r3, #1
 800a374:	d101      	bne.n	800a37a <HAL_SPI_Transmit+0x22>
 800a376:	2302      	movs	r3, #2
 800a378:	e11e      	b.n	800a5b8 <HAL_SPI_Transmit+0x260>
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	2201      	movs	r2, #1
 800a37e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a382:	f7fc fc45 	bl	8006c10 <HAL_GetTick>
 800a386:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a388:	88fb      	ldrh	r3, [r7, #6]
 800a38a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a392:	b2db      	uxtb	r3, r3
 800a394:	2b01      	cmp	r3, #1
 800a396:	d002      	beq.n	800a39e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a398:	2302      	movs	r3, #2
 800a39a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a39c:	e103      	b.n	800a5a6 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800a39e:	68bb      	ldr	r3, [r7, #8]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d002      	beq.n	800a3aa <HAL_SPI_Transmit+0x52>
 800a3a4:	88fb      	ldrh	r3, [r7, #6]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d102      	bne.n	800a3b0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a3ae:	e0fa      	b.n	800a5a6 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	2203      	movs	r2, #3
 800a3b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	68ba      	ldr	r2, [r7, #8]
 800a3c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	88fa      	ldrh	r2, [r7, #6]
 800a3c8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	88fa      	ldrh	r2, [r7, #6]
 800a3ce:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	2200      	movs	r2, #0
 800a3da:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	2200      	movs	r2, #0
 800a3e0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	689b      	ldr	r3, [r3, #8]
 800a3f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a3f6:	d107      	bne.n	800a408 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	681a      	ldr	r2, [r3, #0]
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a406:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a412:	2b40      	cmp	r3, #64	; 0x40
 800a414:	d007      	beq.n	800a426 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	681a      	ldr	r2, [r3, #0]
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a424:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	68db      	ldr	r3, [r3, #12]
 800a42a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a42e:	d14b      	bne.n	800a4c8 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	685b      	ldr	r3, [r3, #4]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d002      	beq.n	800a43e <HAL_SPI_Transmit+0xe6>
 800a438:	8afb      	ldrh	r3, [r7, #22]
 800a43a:	2b01      	cmp	r3, #1
 800a43c:	d13e      	bne.n	800a4bc <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a442:	881a      	ldrh	r2, [r3, #0]
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a44e:	1c9a      	adds	r2, r3, #2
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a458:	b29b      	uxth	r3, r3
 800a45a:	3b01      	subs	r3, #1
 800a45c:	b29a      	uxth	r2, r3
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a462:	e02b      	b.n	800a4bc <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	689b      	ldr	r3, [r3, #8]
 800a46a:	f003 0302 	and.w	r3, r3, #2
 800a46e:	2b02      	cmp	r3, #2
 800a470:	d112      	bne.n	800a498 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a476:	881a      	ldrh	r2, [r3, #0]
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a482:	1c9a      	adds	r2, r3, #2
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a48c:	b29b      	uxth	r3, r3
 800a48e:	3b01      	subs	r3, #1
 800a490:	b29a      	uxth	r2, r3
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	86da      	strh	r2, [r3, #54]	; 0x36
 800a496:	e011      	b.n	800a4bc <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a498:	f7fc fbba 	bl	8006c10 <HAL_GetTick>
 800a49c:	4602      	mov	r2, r0
 800a49e:	69bb      	ldr	r3, [r7, #24]
 800a4a0:	1ad3      	subs	r3, r2, r3
 800a4a2:	683a      	ldr	r2, [r7, #0]
 800a4a4:	429a      	cmp	r2, r3
 800a4a6:	d803      	bhi.n	800a4b0 <HAL_SPI_Transmit+0x158>
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a4ae:	d102      	bne.n	800a4b6 <HAL_SPI_Transmit+0x15e>
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d102      	bne.n	800a4bc <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800a4b6:	2303      	movs	r3, #3
 800a4b8:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a4ba:	e074      	b.n	800a5a6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a4c0:	b29b      	uxth	r3, r3
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d1ce      	bne.n	800a464 <HAL_SPI_Transmit+0x10c>
 800a4c6:	e04c      	b.n	800a562 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	685b      	ldr	r3, [r3, #4]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d002      	beq.n	800a4d6 <HAL_SPI_Transmit+0x17e>
 800a4d0:	8afb      	ldrh	r3, [r7, #22]
 800a4d2:	2b01      	cmp	r3, #1
 800a4d4:	d140      	bne.n	800a558 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	330c      	adds	r3, #12
 800a4e0:	7812      	ldrb	r2, [r2, #0]
 800a4e2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4e8:	1c5a      	adds	r2, r3, #1
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a4f2:	b29b      	uxth	r3, r3
 800a4f4:	3b01      	subs	r3, #1
 800a4f6:	b29a      	uxth	r2, r3
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800a4fc:	e02c      	b.n	800a558 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	689b      	ldr	r3, [r3, #8]
 800a504:	f003 0302 	and.w	r3, r3, #2
 800a508:	2b02      	cmp	r3, #2
 800a50a:	d113      	bne.n	800a534 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	330c      	adds	r3, #12
 800a516:	7812      	ldrb	r2, [r2, #0]
 800a518:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a51e:	1c5a      	adds	r2, r3, #1
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a528:	b29b      	uxth	r3, r3
 800a52a:	3b01      	subs	r3, #1
 800a52c:	b29a      	uxth	r2, r3
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	86da      	strh	r2, [r3, #54]	; 0x36
 800a532:	e011      	b.n	800a558 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a534:	f7fc fb6c 	bl	8006c10 <HAL_GetTick>
 800a538:	4602      	mov	r2, r0
 800a53a:	69bb      	ldr	r3, [r7, #24]
 800a53c:	1ad3      	subs	r3, r2, r3
 800a53e:	683a      	ldr	r2, [r7, #0]
 800a540:	429a      	cmp	r2, r3
 800a542:	d803      	bhi.n	800a54c <HAL_SPI_Transmit+0x1f4>
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a54a:	d102      	bne.n	800a552 <HAL_SPI_Transmit+0x1fa>
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d102      	bne.n	800a558 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800a552:	2303      	movs	r3, #3
 800a554:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a556:	e026      	b.n	800a5a6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a55c:	b29b      	uxth	r3, r3
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d1cd      	bne.n	800a4fe <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a562:	69ba      	ldr	r2, [r7, #24]
 800a564:	6839      	ldr	r1, [r7, #0]
 800a566:	68f8      	ldr	r0, [r7, #12]
 800a568:	f000 f894 	bl	800a694 <SPI_EndRxTxTransaction>
 800a56c:	4603      	mov	r3, r0
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d002      	beq.n	800a578 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	2220      	movs	r2, #32
 800a576:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	689b      	ldr	r3, [r3, #8]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d10a      	bne.n	800a596 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a580:	2300      	movs	r3, #0
 800a582:	613b      	str	r3, [r7, #16]
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	68db      	ldr	r3, [r3, #12]
 800a58a:	613b      	str	r3, [r7, #16]
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	689b      	ldr	r3, [r3, #8]
 800a592:	613b      	str	r3, [r7, #16]
 800a594:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d002      	beq.n	800a5a4 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800a59e:	2301      	movs	r3, #1
 800a5a0:	77fb      	strb	r3, [r7, #31]
 800a5a2:	e000      	b.n	800a5a6 <HAL_SPI_Transmit+0x24e>
  }

error:
 800a5a4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	2201      	movs	r2, #1
 800a5aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a5b6:	7ffb      	ldrb	r3, [r7, #31]
}
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	3720      	adds	r7, #32
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	bd80      	pop	{r7, pc}

0800a5c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b084      	sub	sp, #16
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	60f8      	str	r0, [r7, #12]
 800a5c8:	60b9      	str	r1, [r7, #8]
 800a5ca:	603b      	str	r3, [r7, #0]
 800a5cc:	4613      	mov	r3, r2
 800a5ce:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a5d0:	e04c      	b.n	800a66c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a5d8:	d048      	beq.n	800a66c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800a5da:	f7fc fb19 	bl	8006c10 <HAL_GetTick>
 800a5de:	4602      	mov	r2, r0
 800a5e0:	69bb      	ldr	r3, [r7, #24]
 800a5e2:	1ad3      	subs	r3, r2, r3
 800a5e4:	683a      	ldr	r2, [r7, #0]
 800a5e6:	429a      	cmp	r2, r3
 800a5e8:	d902      	bls.n	800a5f0 <SPI_WaitFlagStateUntilTimeout+0x30>
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d13d      	bne.n	800a66c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	685a      	ldr	r2, [r3, #4]
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a5fe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	685b      	ldr	r3, [r3, #4]
 800a604:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a608:	d111      	bne.n	800a62e <SPI_WaitFlagStateUntilTimeout+0x6e>
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	689b      	ldr	r3, [r3, #8]
 800a60e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a612:	d004      	beq.n	800a61e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	689b      	ldr	r3, [r3, #8]
 800a618:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a61c:	d107      	bne.n	800a62e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	681a      	ldr	r2, [r3, #0]
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a62c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a632:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a636:	d10f      	bne.n	800a658 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	681a      	ldr	r2, [r3, #0]
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a646:	601a      	str	r2, [r3, #0]
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	681a      	ldr	r2, [r3, #0]
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a656:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	2201      	movs	r2, #1
 800a65c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	2200      	movs	r2, #0
 800a664:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a668:	2303      	movs	r3, #3
 800a66a:	e00f      	b.n	800a68c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	689a      	ldr	r2, [r3, #8]
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	4013      	ands	r3, r2
 800a676:	68ba      	ldr	r2, [r7, #8]
 800a678:	429a      	cmp	r2, r3
 800a67a:	bf0c      	ite	eq
 800a67c:	2301      	moveq	r3, #1
 800a67e:	2300      	movne	r3, #0
 800a680:	b2db      	uxtb	r3, r3
 800a682:	461a      	mov	r2, r3
 800a684:	79fb      	ldrb	r3, [r7, #7]
 800a686:	429a      	cmp	r2, r3
 800a688:	d1a3      	bne.n	800a5d2 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800a68a:	2300      	movs	r3, #0
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	3710      	adds	r7, #16
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}

0800a694 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b088      	sub	sp, #32
 800a698:	af02      	add	r7, sp, #8
 800a69a:	60f8      	str	r0, [r7, #12]
 800a69c:	60b9      	str	r1, [r7, #8]
 800a69e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a6a0:	4b1b      	ldr	r3, [pc, #108]	; (800a710 <SPI_EndRxTxTransaction+0x7c>)
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	4a1b      	ldr	r2, [pc, #108]	; (800a714 <SPI_EndRxTxTransaction+0x80>)
 800a6a6:	fba2 2303 	umull	r2, r3, r2, r3
 800a6aa:	0d5b      	lsrs	r3, r3, #21
 800a6ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a6b0:	fb02 f303 	mul.w	r3, r2, r3
 800a6b4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	685b      	ldr	r3, [r3, #4]
 800a6ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a6be:	d112      	bne.n	800a6e6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	9300      	str	r3, [sp, #0]
 800a6c4:	68bb      	ldr	r3, [r7, #8]
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	2180      	movs	r1, #128	; 0x80
 800a6ca:	68f8      	ldr	r0, [r7, #12]
 800a6cc:	f7ff ff78 	bl	800a5c0 <SPI_WaitFlagStateUntilTimeout>
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d016      	beq.n	800a704 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6da:	f043 0220 	orr.w	r2, r3, #32
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a6e2:	2303      	movs	r3, #3
 800a6e4:	e00f      	b.n	800a706 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a6e6:	697b      	ldr	r3, [r7, #20]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d00a      	beq.n	800a702 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a6ec:	697b      	ldr	r3, [r7, #20]
 800a6ee:	3b01      	subs	r3, #1
 800a6f0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	689b      	ldr	r3, [r3, #8]
 800a6f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6fc:	2b80      	cmp	r3, #128	; 0x80
 800a6fe:	d0f2      	beq.n	800a6e6 <SPI_EndRxTxTransaction+0x52>
 800a700:	e000      	b.n	800a704 <SPI_EndRxTxTransaction+0x70>
        break;
 800a702:	bf00      	nop
  }

  return HAL_OK;
 800a704:	2300      	movs	r3, #0
}
 800a706:	4618      	mov	r0, r3
 800a708:	3718      	adds	r7, #24
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}
 800a70e:	bf00      	nop
 800a710:	20000000 	.word	0x20000000
 800a714:	165e9f81 	.word	0x165e9f81

0800a718 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a718:	b084      	sub	sp, #16
 800a71a:	b580      	push	{r7, lr}
 800a71c:	b084      	sub	sp, #16
 800a71e:	af00      	add	r7, sp, #0
 800a720:	6078      	str	r0, [r7, #4]
 800a722:	f107 001c 	add.w	r0, r7, #28
 800a726:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a72a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a72c:	2b01      	cmp	r3, #1
 800a72e:	d122      	bne.n	800a776 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a734:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	68db      	ldr	r3, [r3, #12]
 800a740:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a744:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a748:	687a      	ldr	r2, [r7, #4]
 800a74a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	68db      	ldr	r3, [r3, #12]
 800a750:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a758:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a75a:	2b01      	cmp	r3, #1
 800a75c:	d105      	bne.n	800a76a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	68db      	ldr	r3, [r3, #12]
 800a762:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800a76a:	6878      	ldr	r0, [r7, #4]
 800a76c:	f000 f94a 	bl	800aa04 <USB_CoreReset>
 800a770:	4603      	mov	r3, r0
 800a772:	73fb      	strb	r3, [r7, #15]
 800a774:	e01a      	b.n	800a7ac <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	68db      	ldr	r3, [r3, #12]
 800a77a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f000 f93e 	bl	800aa04 <USB_CoreReset>
 800a788:	4603      	mov	r3, r0
 800a78a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a78c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d106      	bne.n	800a7a0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a796:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	639a      	str	r2, [r3, #56]	; 0x38
 800a79e:	e005      	b.n	800a7ac <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a7ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ae:	2b01      	cmp	r3, #1
 800a7b0:	d10b      	bne.n	800a7ca <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	689b      	ldr	r3, [r3, #8]
 800a7b6:	f043 0206 	orr.w	r2, r3, #6
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	689b      	ldr	r3, [r3, #8]
 800a7c2:	f043 0220 	orr.w	r2, r3, #32
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a7ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	3710      	adds	r7, #16
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a7d6:	b004      	add	sp, #16
 800a7d8:	4770      	bx	lr

0800a7da <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a7da:	b480      	push	{r7}
 800a7dc:	b083      	sub	sp, #12
 800a7de:	af00      	add	r7, sp, #0
 800a7e0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	689b      	ldr	r3, [r3, #8]
 800a7e6:	f043 0201 	orr.w	r2, r3, #1
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a7ee:	2300      	movs	r3, #0
}
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	370c      	adds	r7, #12
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fa:	4770      	bx	lr

0800a7fc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a7fc:	b480      	push	{r7}
 800a7fe:	b083      	sub	sp, #12
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	689b      	ldr	r3, [r3, #8]
 800a808:	f023 0201 	bic.w	r2, r3, #1
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a810:	2300      	movs	r3, #0
}
 800a812:	4618      	mov	r0, r3
 800a814:	370c      	adds	r7, #12
 800a816:	46bd      	mov	sp, r7
 800a818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81c:	4770      	bx	lr

0800a81e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a81e:	b580      	push	{r7, lr}
 800a820:	b082      	sub	sp, #8
 800a822:	af00      	add	r7, sp, #0
 800a824:	6078      	str	r0, [r7, #4]
 800a826:	460b      	mov	r3, r1
 800a828:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	68db      	ldr	r3, [r3, #12]
 800a82e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a836:	78fb      	ldrb	r3, [r7, #3]
 800a838:	2b01      	cmp	r3, #1
 800a83a:	d106      	bne.n	800a84a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	68db      	ldr	r3, [r3, #12]
 800a840:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	60da      	str	r2, [r3, #12]
 800a848:	e00b      	b.n	800a862 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800a84a:	78fb      	ldrb	r3, [r7, #3]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d106      	bne.n	800a85e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	68db      	ldr	r3, [r3, #12]
 800a854:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	60da      	str	r2, [r3, #12]
 800a85c:	e001      	b.n	800a862 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800a85e:	2301      	movs	r3, #1
 800a860:	e003      	b.n	800a86a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800a862:	2032      	movs	r0, #50	; 0x32
 800a864:	f7fc f9e0 	bl	8006c28 <HAL_Delay>

  return HAL_OK;
 800a868:	2300      	movs	r3, #0
}
 800a86a:	4618      	mov	r0, r3
 800a86c:	3708      	adds	r7, #8
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}
	...

0800a874 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a874:	b480      	push	{r7}
 800a876:	b085      	sub	sp, #20
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
 800a87c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800a87e:	2300      	movs	r3, #0
 800a880:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	019b      	lsls	r3, r3, #6
 800a886:	f043 0220 	orr.w	r2, r3, #32
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	3301      	adds	r3, #1
 800a892:	60fb      	str	r3, [r7, #12]
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	4a09      	ldr	r2, [pc, #36]	; (800a8bc <USB_FlushTxFifo+0x48>)
 800a898:	4293      	cmp	r3, r2
 800a89a:	d901      	bls.n	800a8a0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800a89c:	2303      	movs	r3, #3
 800a89e:	e006      	b.n	800a8ae <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	691b      	ldr	r3, [r3, #16]
 800a8a4:	f003 0320 	and.w	r3, r3, #32
 800a8a8:	2b20      	cmp	r3, #32
 800a8aa:	d0f0      	beq.n	800a88e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800a8ac:	2300      	movs	r3, #0
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	3714      	adds	r7, #20
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b8:	4770      	bx	lr
 800a8ba:	bf00      	nop
 800a8bc:	00030d40 	.word	0x00030d40

0800a8c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a8c0:	b480      	push	{r7}
 800a8c2:	b085      	sub	sp, #20
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2210      	movs	r2, #16
 800a8d0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	3301      	adds	r3, #1
 800a8d6:	60fb      	str	r3, [r7, #12]
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	4a09      	ldr	r2, [pc, #36]	; (800a900 <USB_FlushRxFifo+0x40>)
 800a8dc:	4293      	cmp	r3, r2
 800a8de:	d901      	bls.n	800a8e4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800a8e0:	2303      	movs	r3, #3
 800a8e2:	e006      	b.n	800a8f2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	691b      	ldr	r3, [r3, #16]
 800a8e8:	f003 0310 	and.w	r3, r3, #16
 800a8ec:	2b10      	cmp	r3, #16
 800a8ee:	d0f0      	beq.n	800a8d2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800a8f0:	2300      	movs	r3, #0
}
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	3714      	adds	r7, #20
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fc:	4770      	bx	lr
 800a8fe:	bf00      	nop
 800a900:	00030d40 	.word	0x00030d40

0800a904 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a904:	b480      	push	{r7}
 800a906:	b089      	sub	sp, #36	; 0x24
 800a908:	af00      	add	r7, sp, #0
 800a90a:	60f8      	str	r0, [r7, #12]
 800a90c:	60b9      	str	r1, [r7, #8]
 800a90e:	4611      	mov	r1, r2
 800a910:	461a      	mov	r2, r3
 800a912:	460b      	mov	r3, r1
 800a914:	71fb      	strb	r3, [r7, #7]
 800a916:	4613      	mov	r3, r2
 800a918:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800a91e:	68bb      	ldr	r3, [r7, #8]
 800a920:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800a922:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a926:	2b00      	cmp	r3, #0
 800a928:	d11a      	bne.n	800a960 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a92a:	88bb      	ldrh	r3, [r7, #4]
 800a92c:	3303      	adds	r3, #3
 800a92e:	089b      	lsrs	r3, r3, #2
 800a930:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a932:	2300      	movs	r3, #0
 800a934:	61bb      	str	r3, [r7, #24]
 800a936:	e00f      	b.n	800a958 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a938:	79fb      	ldrb	r3, [r7, #7]
 800a93a:	031a      	lsls	r2, r3, #12
 800a93c:	697b      	ldr	r3, [r7, #20]
 800a93e:	4413      	add	r3, r2
 800a940:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a944:	461a      	mov	r2, r3
 800a946:	69fb      	ldr	r3, [r7, #28]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a94c:	69fb      	ldr	r3, [r7, #28]
 800a94e:	3304      	adds	r3, #4
 800a950:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a952:	69bb      	ldr	r3, [r7, #24]
 800a954:	3301      	adds	r3, #1
 800a956:	61bb      	str	r3, [r7, #24]
 800a958:	69ba      	ldr	r2, [r7, #24]
 800a95a:	693b      	ldr	r3, [r7, #16]
 800a95c:	429a      	cmp	r2, r3
 800a95e:	d3eb      	bcc.n	800a938 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a960:	2300      	movs	r3, #0
}
 800a962:	4618      	mov	r0, r3
 800a964:	3724      	adds	r7, #36	; 0x24
 800a966:	46bd      	mov	sp, r7
 800a968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96c:	4770      	bx	lr

0800a96e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a96e:	b480      	push	{r7}
 800a970:	b089      	sub	sp, #36	; 0x24
 800a972:	af00      	add	r7, sp, #0
 800a974:	60f8      	str	r0, [r7, #12]
 800a976:	60b9      	str	r1, [r7, #8]
 800a978:	4613      	mov	r3, r2
 800a97a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800a984:	88fb      	ldrh	r3, [r7, #6]
 800a986:	3303      	adds	r3, #3
 800a988:	089b      	lsrs	r3, r3, #2
 800a98a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800a98c:	2300      	movs	r3, #0
 800a98e:	61bb      	str	r3, [r7, #24]
 800a990:	e00b      	b.n	800a9aa <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a992:	697b      	ldr	r3, [r7, #20]
 800a994:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a998:	681a      	ldr	r2, [r3, #0]
 800a99a:	69fb      	ldr	r3, [r7, #28]
 800a99c:	601a      	str	r2, [r3, #0]
    pDest++;
 800a99e:	69fb      	ldr	r3, [r7, #28]
 800a9a0:	3304      	adds	r3, #4
 800a9a2:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800a9a4:	69bb      	ldr	r3, [r7, #24]
 800a9a6:	3301      	adds	r3, #1
 800a9a8:	61bb      	str	r3, [r7, #24]
 800a9aa:	69ba      	ldr	r2, [r7, #24]
 800a9ac:	693b      	ldr	r3, [r7, #16]
 800a9ae:	429a      	cmp	r2, r3
 800a9b0:	d3ef      	bcc.n	800a992 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800a9b2:	69fb      	ldr	r3, [r7, #28]
}
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	3724      	adds	r7, #36	; 0x24
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9be:	4770      	bx	lr

0800a9c0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a9c0:	b480      	push	{r7}
 800a9c2:	b085      	sub	sp, #20
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	695b      	ldr	r3, [r3, #20]
 800a9cc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	699b      	ldr	r3, [r3, #24]
 800a9d2:	68fa      	ldr	r2, [r7, #12]
 800a9d4:	4013      	ands	r3, r2
 800a9d6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
}
 800a9da:	4618      	mov	r0, r3
 800a9dc:	3714      	adds	r7, #20
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e4:	4770      	bx	lr

0800a9e6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a9e6:	b480      	push	{r7}
 800a9e8:	b083      	sub	sp, #12
 800a9ea:	af00      	add	r7, sp, #0
 800a9ec:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	695b      	ldr	r3, [r3, #20]
 800a9f2:	f003 0301 	and.w	r3, r3, #1
}
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	370c      	adds	r7, #12
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa00:	4770      	bx	lr
	...

0800aa04 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800aa04:	b480      	push	{r7}
 800aa06:	b085      	sub	sp, #20
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	3301      	adds	r3, #1
 800aa14:	60fb      	str	r3, [r7, #12]
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	4a13      	ldr	r2, [pc, #76]	; (800aa68 <USB_CoreReset+0x64>)
 800aa1a:	4293      	cmp	r3, r2
 800aa1c:	d901      	bls.n	800aa22 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800aa1e:	2303      	movs	r3, #3
 800aa20:	e01b      	b.n	800aa5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	691b      	ldr	r3, [r3, #16]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	daf2      	bge.n	800aa10 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	691b      	ldr	r3, [r3, #16]
 800aa32:	f043 0201 	orr.w	r2, r3, #1
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	3301      	adds	r3, #1
 800aa3e:	60fb      	str	r3, [r7, #12]
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	4a09      	ldr	r2, [pc, #36]	; (800aa68 <USB_CoreReset+0x64>)
 800aa44:	4293      	cmp	r3, r2
 800aa46:	d901      	bls.n	800aa4c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800aa48:	2303      	movs	r3, #3
 800aa4a:	e006      	b.n	800aa5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	691b      	ldr	r3, [r3, #16]
 800aa50:	f003 0301 	and.w	r3, r3, #1
 800aa54:	2b01      	cmp	r3, #1
 800aa56:	d0f0      	beq.n	800aa3a <USB_CoreReset+0x36>

  return HAL_OK;
 800aa58:	2300      	movs	r3, #0
}
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	3714      	adds	r7, #20
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa64:	4770      	bx	lr
 800aa66:	bf00      	nop
 800aa68:	00030d40 	.word	0x00030d40

0800aa6c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800aa6c:	b084      	sub	sp, #16
 800aa6e:	b580      	push	{r7, lr}
 800aa70:	b084      	sub	sp, #16
 800aa72:	af00      	add	r7, sp, #0
 800aa74:	6078      	str	r0, [r7, #4]
 800aa76:	f107 001c 	add.w	r0, r7, #28
 800aa7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800aa82:	68bb      	ldr	r3, [r7, #8]
 800aa84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aa88:	461a      	mov	r2, r3
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa92:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa9e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaaa:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d018      	beq.n	800aaf0 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800aabe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aac0:	2b01      	cmp	r3, #1
 800aac2:	d10a      	bne.n	800aada <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800aac4:	68bb      	ldr	r3, [r7, #8]
 800aac6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	68ba      	ldr	r2, [r7, #8]
 800aace:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aad2:	f043 0304 	orr.w	r3, r3, #4
 800aad6:	6013      	str	r3, [r2, #0]
 800aad8:	e014      	b.n	800ab04 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	68ba      	ldr	r2, [r7, #8]
 800aae4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aae8:	f023 0304 	bic.w	r3, r3, #4
 800aaec:	6013      	str	r3, [r2, #0]
 800aaee:	e009      	b.n	800ab04 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	68ba      	ldr	r2, [r7, #8]
 800aafa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aafe:	f023 0304 	bic.w	r3, r3, #4
 800ab02:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800ab04:	2110      	movs	r1, #16
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	f7ff feb4 	bl	800a874 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800ab0c:	6878      	ldr	r0, [r7, #4]
 800ab0e:	f7ff fed7 	bl	800a8c0 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800ab12:	2300      	movs	r3, #0
 800ab14:	60fb      	str	r3, [r7, #12]
 800ab16:	e015      	b.n	800ab44 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	015a      	lsls	r2, r3, #5
 800ab1c:	68bb      	ldr	r3, [r7, #8]
 800ab1e:	4413      	add	r3, r2
 800ab20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab24:	461a      	mov	r2, r3
 800ab26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ab2a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	015a      	lsls	r2, r3, #5
 800ab30:	68bb      	ldr	r3, [r7, #8]
 800ab32:	4413      	add	r3, r2
 800ab34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab38:	461a      	mov	r2, r3
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	3301      	adds	r3, #1
 800ab42:	60fb      	str	r3, [r7, #12]
 800ab44:	6a3b      	ldr	r3, [r7, #32]
 800ab46:	68fa      	ldr	r2, [r7, #12]
 800ab48:	429a      	cmp	r2, r3
 800ab4a:	d3e5      	bcc.n	800ab18 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800ab4c:	2101      	movs	r1, #1
 800ab4e:	6878      	ldr	r0, [r7, #4]
 800ab50:	f000 f8ac 	bl	800acac <USB_DriveVbus>

  HAL_Delay(200U);
 800ab54:	20c8      	movs	r0, #200	; 0xc8
 800ab56:	f7fc f867 	bl	8006c28 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ab66:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d00b      	beq.n	800ab8c <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ab7a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	4a14      	ldr	r2, [pc, #80]	; (800abd0 <USB_HostInit+0x164>)
 800ab80:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	4a13      	ldr	r2, [pc, #76]	; (800abd4 <USB_HostInit+0x168>)
 800ab86:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800ab8a:	e009      	b.n	800aba0 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2280      	movs	r2, #128	; 0x80
 800ab90:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	4a10      	ldr	r2, [pc, #64]	; (800abd8 <USB_HostInit+0x16c>)
 800ab96:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	4a10      	ldr	r2, [pc, #64]	; (800abdc <USB_HostInit+0x170>)
 800ab9c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800aba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d105      	bne.n	800abb2 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	699b      	ldr	r3, [r3, #24]
 800abaa:	f043 0210 	orr.w	r2, r3, #16
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	699a      	ldr	r2, [r3, #24]
 800abb6:	4b0a      	ldr	r3, [pc, #40]	; (800abe0 <USB_HostInit+0x174>)
 800abb8:	4313      	orrs	r3, r2
 800abba:	687a      	ldr	r2, [r7, #4]
 800abbc:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800abbe:	2300      	movs	r3, #0
}
 800abc0:	4618      	mov	r0, r3
 800abc2:	3710      	adds	r7, #16
 800abc4:	46bd      	mov	sp, r7
 800abc6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800abca:	b004      	add	sp, #16
 800abcc:	4770      	bx	lr
 800abce:	bf00      	nop
 800abd0:	01000200 	.word	0x01000200
 800abd4:	00e00300 	.word	0x00e00300
 800abd8:	00600080 	.word	0x00600080
 800abdc:	004000e0 	.word	0x004000e0
 800abe0:	a3200008 	.word	0xa3200008

0800abe4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800abe4:	b480      	push	{r7}
 800abe6:	b085      	sub	sp, #20
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
 800abec:	460b      	mov	r3, r1
 800abee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	68fa      	ldr	r2, [r7, #12]
 800abfe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ac02:	f023 0303 	bic.w	r3, r3, #3
 800ac06:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ac0e:	681a      	ldr	r2, [r3, #0]
 800ac10:	78fb      	ldrb	r3, [r7, #3]
 800ac12:	f003 0303 	and.w	r3, r3, #3
 800ac16:	68f9      	ldr	r1, [r7, #12]
 800ac18:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ac1c:	4313      	orrs	r3, r2
 800ac1e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800ac20:	78fb      	ldrb	r3, [r7, #3]
 800ac22:	2b01      	cmp	r3, #1
 800ac24:	d107      	bne.n	800ac36 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ac2c:	461a      	mov	r2, r3
 800ac2e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800ac32:	6053      	str	r3, [r2, #4]
 800ac34:	e009      	b.n	800ac4a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800ac36:	78fb      	ldrb	r3, [r7, #3]
 800ac38:	2b02      	cmp	r3, #2
 800ac3a:	d106      	bne.n	800ac4a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ac42:	461a      	mov	r2, r3
 800ac44:	f241 7370 	movw	r3, #6000	; 0x1770
 800ac48:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800ac4a:	2300      	movs	r3, #0
}
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	3714      	adds	r7, #20
 800ac50:	46bd      	mov	sp, r7
 800ac52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac56:	4770      	bx	lr

0800ac58 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b084      	sub	sp, #16
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800ac64:	2300      	movs	r3, #0
 800ac66:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800ac72:	68bb      	ldr	r3, [r7, #8]
 800ac74:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800ac78:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	68fa      	ldr	r2, [r7, #12]
 800ac7e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800ac82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ac86:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800ac88:	2064      	movs	r0, #100	; 0x64
 800ac8a:	f7fb ffcd 	bl	8006c28 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800ac8e:	68bb      	ldr	r3, [r7, #8]
 800ac90:	68fa      	ldr	r2, [r7, #12]
 800ac92:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800ac96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ac9a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800ac9c:	200a      	movs	r0, #10
 800ac9e:	f7fb ffc3 	bl	8006c28 <HAL_Delay>

  return HAL_OK;
 800aca2:	2300      	movs	r3, #0
}
 800aca4:	4618      	mov	r0, r3
 800aca6:	3710      	adds	r7, #16
 800aca8:	46bd      	mov	sp, r7
 800acaa:	bd80      	pop	{r7, pc}

0800acac <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800acac:	b480      	push	{r7}
 800acae:	b085      	sub	sp, #20
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
 800acb4:	460b      	mov	r3, r1
 800acb6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800acbc:	2300      	movs	r3, #0
 800acbe:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800acca:	68bb      	ldr	r3, [r7, #8]
 800accc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800acd0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800acd2:	68bb      	ldr	r3, [r7, #8]
 800acd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d109      	bne.n	800acf0 <USB_DriveVbus+0x44>
 800acdc:	78fb      	ldrb	r3, [r7, #3]
 800acde:	2b01      	cmp	r3, #1
 800ace0:	d106      	bne.n	800acf0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800ace2:	68bb      	ldr	r3, [r7, #8]
 800ace4:	68fa      	ldr	r2, [r7, #12]
 800ace6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800acea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800acee:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800acf0:	68bb      	ldr	r3, [r7, #8]
 800acf2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800acf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800acfa:	d109      	bne.n	800ad10 <USB_DriveVbus+0x64>
 800acfc:	78fb      	ldrb	r3, [r7, #3]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d106      	bne.n	800ad10 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800ad02:	68bb      	ldr	r3, [r7, #8]
 800ad04:	68fa      	ldr	r2, [r7, #12]
 800ad06:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800ad0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ad0e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800ad10:	2300      	movs	r3, #0
}
 800ad12:	4618      	mov	r0, r3
 800ad14:	3714      	adds	r7, #20
 800ad16:	46bd      	mov	sp, r7
 800ad18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1c:	4770      	bx	lr

0800ad1e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ad1e:	b480      	push	{r7}
 800ad20:	b085      	sub	sp, #20
 800ad22:	af00      	add	r7, sp, #0
 800ad24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	0c5b      	lsrs	r3, r3, #17
 800ad3c:	f003 0303 	and.w	r3, r3, #3
}
 800ad40:	4618      	mov	r0, r3
 800ad42:	3714      	adds	r7, #20
 800ad44:	46bd      	mov	sp, r7
 800ad46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4a:	4770      	bx	lr

0800ad4c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800ad4c:	b480      	push	{r7}
 800ad4e:	b085      	sub	sp, #20
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ad5e:	689b      	ldr	r3, [r3, #8]
 800ad60:	b29b      	uxth	r3, r3
}
 800ad62:	4618      	mov	r0, r3
 800ad64:	3714      	adds	r7, #20
 800ad66:	46bd      	mov	sp, r7
 800ad68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6c:	4770      	bx	lr
	...

0800ad70 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800ad70:	b480      	push	{r7}
 800ad72:	b087      	sub	sp, #28
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
 800ad78:	4608      	mov	r0, r1
 800ad7a:	4611      	mov	r1, r2
 800ad7c:	461a      	mov	r2, r3
 800ad7e:	4603      	mov	r3, r0
 800ad80:	70fb      	strb	r3, [r7, #3]
 800ad82:	460b      	mov	r3, r1
 800ad84:	70bb      	strb	r3, [r7, #2]
 800ad86:	4613      	mov	r3, r2
 800ad88:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800ad92:	78fb      	ldrb	r3, [r7, #3]
 800ad94:	015a      	lsls	r2, r3, #5
 800ad96:	68bb      	ldr	r3, [r7, #8]
 800ad98:	4413      	add	r3, r2
 800ad9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad9e:	461a      	mov	r2, r3
 800ada0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ada4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800ada6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800adaa:	2b03      	cmp	r3, #3
 800adac:	d87e      	bhi.n	800aeac <USB_HC_Init+0x13c>
 800adae:	a201      	add	r2, pc, #4	; (adr r2, 800adb4 <USB_HC_Init+0x44>)
 800adb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adb4:	0800adc5 	.word	0x0800adc5
 800adb8:	0800ae6f 	.word	0x0800ae6f
 800adbc:	0800adc5 	.word	0x0800adc5
 800adc0:	0800ae31 	.word	0x0800ae31
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800adc4:	78fb      	ldrb	r3, [r7, #3]
 800adc6:	015a      	lsls	r2, r3, #5
 800adc8:	68bb      	ldr	r3, [r7, #8]
 800adca:	4413      	add	r3, r2
 800adcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800add0:	461a      	mov	r2, r3
 800add2:	f240 439d 	movw	r3, #1181	; 0x49d
 800add6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800add8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800addc:	2b00      	cmp	r3, #0
 800adde:	da10      	bge.n	800ae02 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800ade0:	78fb      	ldrb	r3, [r7, #3]
 800ade2:	015a      	lsls	r2, r3, #5
 800ade4:	68bb      	ldr	r3, [r7, #8]
 800ade6:	4413      	add	r3, r2
 800ade8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800adec:	68db      	ldr	r3, [r3, #12]
 800adee:	78fa      	ldrb	r2, [r7, #3]
 800adf0:	0151      	lsls	r1, r2, #5
 800adf2:	68ba      	ldr	r2, [r7, #8]
 800adf4:	440a      	add	r2, r1
 800adf6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800adfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800adfe:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800ae00:	e057      	b.n	800aeb2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d051      	beq.n	800aeb2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800ae0e:	78fb      	ldrb	r3, [r7, #3]
 800ae10:	015a      	lsls	r2, r3, #5
 800ae12:	68bb      	ldr	r3, [r7, #8]
 800ae14:	4413      	add	r3, r2
 800ae16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae1a:	68db      	ldr	r3, [r3, #12]
 800ae1c:	78fa      	ldrb	r2, [r7, #3]
 800ae1e:	0151      	lsls	r1, r2, #5
 800ae20:	68ba      	ldr	r2, [r7, #8]
 800ae22:	440a      	add	r2, r1
 800ae24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ae28:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800ae2c:	60d3      	str	r3, [r2, #12]
      break;
 800ae2e:	e040      	b.n	800aeb2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ae30:	78fb      	ldrb	r3, [r7, #3]
 800ae32:	015a      	lsls	r2, r3, #5
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	4413      	add	r3, r2
 800ae38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae3c:	461a      	mov	r2, r3
 800ae3e:	f240 639d 	movw	r3, #1693	; 0x69d
 800ae42:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800ae44:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	da34      	bge.n	800aeb6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800ae4c:	78fb      	ldrb	r3, [r7, #3]
 800ae4e:	015a      	lsls	r2, r3, #5
 800ae50:	68bb      	ldr	r3, [r7, #8]
 800ae52:	4413      	add	r3, r2
 800ae54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae58:	68db      	ldr	r3, [r3, #12]
 800ae5a:	78fa      	ldrb	r2, [r7, #3]
 800ae5c:	0151      	lsls	r1, r2, #5
 800ae5e:	68ba      	ldr	r2, [r7, #8]
 800ae60:	440a      	add	r2, r1
 800ae62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ae66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ae6a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800ae6c:	e023      	b.n	800aeb6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ae6e:	78fb      	ldrb	r3, [r7, #3]
 800ae70:	015a      	lsls	r2, r3, #5
 800ae72:	68bb      	ldr	r3, [r7, #8]
 800ae74:	4413      	add	r3, r2
 800ae76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae7a:	461a      	mov	r2, r3
 800ae7c:	f240 2325 	movw	r3, #549	; 0x225
 800ae80:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800ae82:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	da17      	bge.n	800aeba <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800ae8a:	78fb      	ldrb	r3, [r7, #3]
 800ae8c:	015a      	lsls	r2, r3, #5
 800ae8e:	68bb      	ldr	r3, [r7, #8]
 800ae90:	4413      	add	r3, r2
 800ae92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae96:	68db      	ldr	r3, [r3, #12]
 800ae98:	78fa      	ldrb	r2, [r7, #3]
 800ae9a:	0151      	lsls	r1, r2, #5
 800ae9c:	68ba      	ldr	r2, [r7, #8]
 800ae9e:	440a      	add	r2, r1
 800aea0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aea4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800aea8:	60d3      	str	r3, [r2, #12]
      }
      break;
 800aeaa:	e006      	b.n	800aeba <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800aeac:	2301      	movs	r3, #1
 800aeae:	75fb      	strb	r3, [r7, #23]
      break;
 800aeb0:	e004      	b.n	800aebc <USB_HC_Init+0x14c>
      break;
 800aeb2:	bf00      	nop
 800aeb4:	e002      	b.n	800aebc <USB_HC_Init+0x14c>
      break;
 800aeb6:	bf00      	nop
 800aeb8:	e000      	b.n	800aebc <USB_HC_Init+0x14c>
      break;
 800aeba:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800aebc:	68bb      	ldr	r3, [r7, #8]
 800aebe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aec2:	699a      	ldr	r2, [r3, #24]
 800aec4:	78fb      	ldrb	r3, [r7, #3]
 800aec6:	f003 030f 	and.w	r3, r3, #15
 800aeca:	2101      	movs	r1, #1
 800aecc:	fa01 f303 	lsl.w	r3, r1, r3
 800aed0:	68b9      	ldr	r1, [r7, #8]
 800aed2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800aed6:	4313      	orrs	r3, r2
 800aed8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	699b      	ldr	r3, [r3, #24]
 800aede:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800aee6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	da03      	bge.n	800aef6 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800aeee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aef2:	613b      	str	r3, [r7, #16]
 800aef4:	e001      	b.n	800aefa <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800aef6:	2300      	movs	r3, #0
 800aef8:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800aefa:	f897 3020 	ldrb.w	r3, [r7, #32]
 800aefe:	2b02      	cmp	r3, #2
 800af00:	d103      	bne.n	800af0a <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800af02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800af06:	60fb      	str	r3, [r7, #12]
 800af08:	e001      	b.n	800af0e <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800af0a:	2300      	movs	r3, #0
 800af0c:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800af0e:	787b      	ldrb	r3, [r7, #1]
 800af10:	059b      	lsls	r3, r3, #22
 800af12:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800af16:	78bb      	ldrb	r3, [r7, #2]
 800af18:	02db      	lsls	r3, r3, #11
 800af1a:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800af1e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800af20:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800af24:	049b      	lsls	r3, r3, #18
 800af26:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800af2a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800af2c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800af2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800af32:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800af34:	693b      	ldr	r3, [r7, #16]
 800af36:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800af38:	78fb      	ldrb	r3, [r7, #3]
 800af3a:	0159      	lsls	r1, r3, #5
 800af3c:	68bb      	ldr	r3, [r7, #8]
 800af3e:	440b      	add	r3, r1
 800af40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af44:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800af4a:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800af4c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800af50:	2b03      	cmp	r3, #3
 800af52:	d10f      	bne.n	800af74 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800af54:	78fb      	ldrb	r3, [r7, #3]
 800af56:	015a      	lsls	r2, r3, #5
 800af58:	68bb      	ldr	r3, [r7, #8]
 800af5a:	4413      	add	r3, r2
 800af5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	78fa      	ldrb	r2, [r7, #3]
 800af64:	0151      	lsls	r1, r2, #5
 800af66:	68ba      	ldr	r2, [r7, #8]
 800af68:	440a      	add	r2, r1
 800af6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800af6e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800af72:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800af74:	7dfb      	ldrb	r3, [r7, #23]
}
 800af76:	4618      	mov	r0, r3
 800af78:	371c      	adds	r7, #28
 800af7a:	46bd      	mov	sp, r7
 800af7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af80:	4770      	bx	lr
 800af82:	bf00      	nop

0800af84 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b08c      	sub	sp, #48	; 0x30
 800af88:	af02      	add	r7, sp, #8
 800af8a:	60f8      	str	r0, [r7, #12]
 800af8c:	60b9      	str	r1, [r7, #8]
 800af8e:	4613      	mov	r3, r2
 800af90:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800af96:	68bb      	ldr	r3, [r7, #8]
 800af98:	785b      	ldrb	r3, [r3, #1]
 800af9a:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800af9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800afa0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d028      	beq.n	800b000 <USB_HC_StartXfer+0x7c>
 800afae:	68bb      	ldr	r3, [r7, #8]
 800afb0:	791b      	ldrb	r3, [r3, #4]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d124      	bne.n	800b000 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800afb6:	79fb      	ldrb	r3, [r7, #7]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d10b      	bne.n	800afd4 <USB_HC_StartXfer+0x50>
 800afbc:	68bb      	ldr	r3, [r7, #8]
 800afbe:	795b      	ldrb	r3, [r3, #5]
 800afc0:	2b01      	cmp	r3, #1
 800afc2:	d107      	bne.n	800afd4 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800afc4:	68bb      	ldr	r3, [r7, #8]
 800afc6:	785b      	ldrb	r3, [r3, #1]
 800afc8:	4619      	mov	r1, r3
 800afca:	68f8      	ldr	r0, [r7, #12]
 800afcc:	f000 fa30 	bl	800b430 <USB_DoPing>
      return HAL_OK;
 800afd0:	2300      	movs	r3, #0
 800afd2:	e114      	b.n	800b1fe <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 800afd4:	79fb      	ldrb	r3, [r7, #7]
 800afd6:	2b01      	cmp	r3, #1
 800afd8:	d112      	bne.n	800b000 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800afda:	69fb      	ldr	r3, [r7, #28]
 800afdc:	015a      	lsls	r2, r3, #5
 800afde:	6a3b      	ldr	r3, [r7, #32]
 800afe0:	4413      	add	r3, r2
 800afe2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800afe6:	68db      	ldr	r3, [r3, #12]
 800afe8:	69fa      	ldr	r2, [r7, #28]
 800afea:	0151      	lsls	r1, r2, #5
 800afec:	6a3a      	ldr	r2, [r7, #32]
 800afee:	440a      	add	r2, r1
 800aff0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aff4:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800aff8:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800affa:	68bb      	ldr	r3, [r7, #8]
 800affc:	2200      	movs	r2, #0
 800affe:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800b000:	68bb      	ldr	r3, [r7, #8]
 800b002:	691b      	ldr	r3, [r3, #16]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d018      	beq.n	800b03a <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	691b      	ldr	r3, [r3, #16]
 800b00c:	68ba      	ldr	r2, [r7, #8]
 800b00e:	8912      	ldrh	r2, [r2, #8]
 800b010:	4413      	add	r3, r2
 800b012:	3b01      	subs	r3, #1
 800b014:	68ba      	ldr	r2, [r7, #8]
 800b016:	8912      	ldrh	r2, [r2, #8]
 800b018:	fbb3 f3f2 	udiv	r3, r3, r2
 800b01c:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800b01e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b020:	8b7b      	ldrh	r3, [r7, #26]
 800b022:	429a      	cmp	r2, r3
 800b024:	d90b      	bls.n	800b03e <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800b026:	8b7b      	ldrh	r3, [r7, #26]
 800b028:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800b02a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b02c:	68ba      	ldr	r2, [r7, #8]
 800b02e:	8912      	ldrh	r2, [r2, #8]
 800b030:	fb02 f203 	mul.w	r2, r2, r3
 800b034:	68bb      	ldr	r3, [r7, #8]
 800b036:	611a      	str	r2, [r3, #16]
 800b038:	e001      	b.n	800b03e <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800b03a:	2301      	movs	r3, #1
 800b03c:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800b03e:	68bb      	ldr	r3, [r7, #8]
 800b040:	78db      	ldrb	r3, [r3, #3]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d006      	beq.n	800b054 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800b046:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b048:	68ba      	ldr	r2, [r7, #8]
 800b04a:	8912      	ldrh	r2, [r2, #8]
 800b04c:	fb02 f203 	mul.w	r2, r2, r3
 800b050:	68bb      	ldr	r3, [r7, #8]
 800b052:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800b054:	68bb      	ldr	r3, [r7, #8]
 800b056:	691b      	ldr	r3, [r3, #16]
 800b058:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b05c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b05e:	04d9      	lsls	r1, r3, #19
 800b060:	4b69      	ldr	r3, [pc, #420]	; (800b208 <USB_HC_StartXfer+0x284>)
 800b062:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800b064:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800b066:	68bb      	ldr	r3, [r7, #8]
 800b068:	7a9b      	ldrb	r3, [r3, #10]
 800b06a:	075b      	lsls	r3, r3, #29
 800b06c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800b070:	69f9      	ldr	r1, [r7, #28]
 800b072:	0148      	lsls	r0, r1, #5
 800b074:	6a39      	ldr	r1, [r7, #32]
 800b076:	4401      	add	r1, r0
 800b078:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b07c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800b07e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800b080:	79fb      	ldrb	r3, [r7, #7]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d009      	beq.n	800b09a <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800b086:	68bb      	ldr	r3, [r7, #8]
 800b088:	68d9      	ldr	r1, [r3, #12]
 800b08a:	69fb      	ldr	r3, [r7, #28]
 800b08c:	015a      	lsls	r2, r3, #5
 800b08e:	6a3b      	ldr	r3, [r7, #32]
 800b090:	4413      	add	r3, r2
 800b092:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b096:	460a      	mov	r2, r1
 800b098:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800b09a:	6a3b      	ldr	r3, [r7, #32]
 800b09c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b0a0:	689b      	ldr	r3, [r3, #8]
 800b0a2:	f003 0301 	and.w	r3, r3, #1
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	bf0c      	ite	eq
 800b0aa:	2301      	moveq	r3, #1
 800b0ac:	2300      	movne	r3, #0
 800b0ae:	b2db      	uxtb	r3, r3
 800b0b0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800b0b2:	69fb      	ldr	r3, [r7, #28]
 800b0b4:	015a      	lsls	r2, r3, #5
 800b0b6:	6a3b      	ldr	r3, [r7, #32]
 800b0b8:	4413      	add	r3, r2
 800b0ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	69fa      	ldr	r2, [r7, #28]
 800b0c2:	0151      	lsls	r1, r2, #5
 800b0c4:	6a3a      	ldr	r2, [r7, #32]
 800b0c6:	440a      	add	r2, r1
 800b0c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b0cc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b0d0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800b0d2:	69fb      	ldr	r3, [r7, #28]
 800b0d4:	015a      	lsls	r2, r3, #5
 800b0d6:	6a3b      	ldr	r3, [r7, #32]
 800b0d8:	4413      	add	r3, r2
 800b0da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b0de:	681a      	ldr	r2, [r3, #0]
 800b0e0:	7e7b      	ldrb	r3, [r7, #25]
 800b0e2:	075b      	lsls	r3, r3, #29
 800b0e4:	69f9      	ldr	r1, [r7, #28]
 800b0e6:	0148      	lsls	r0, r1, #5
 800b0e8:	6a39      	ldr	r1, [r7, #32]
 800b0ea:	4401      	add	r1, r0
 800b0ec:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800b0f0:	4313      	orrs	r3, r2
 800b0f2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800b0f4:	69fb      	ldr	r3, [r7, #28]
 800b0f6:	015a      	lsls	r2, r3, #5
 800b0f8:	6a3b      	ldr	r3, [r7, #32]
 800b0fa:	4413      	add	r3, r2
 800b0fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	4a42      	ldr	r2, [pc, #264]	; (800b20c <USB_HC_StartXfer+0x288>)
 800b104:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b106:	4b41      	ldr	r3, [pc, #260]	; (800b20c <USB_HC_StartXfer+0x288>)
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b10e:	4a3f      	ldr	r2, [pc, #252]	; (800b20c <USB_HC_StartXfer+0x288>)
 800b110:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800b112:	68bb      	ldr	r3, [r7, #8]
 800b114:	78db      	ldrb	r3, [r3, #3]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d006      	beq.n	800b128 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800b11a:	4b3c      	ldr	r3, [pc, #240]	; (800b20c <USB_HC_StartXfer+0x288>)
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b122:	4a3a      	ldr	r2, [pc, #232]	; (800b20c <USB_HC_StartXfer+0x288>)
 800b124:	6013      	str	r3, [r2, #0]
 800b126:	e005      	b.n	800b134 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800b128:	4b38      	ldr	r3, [pc, #224]	; (800b20c <USB_HC_StartXfer+0x288>)
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b130:	4a36      	ldr	r2, [pc, #216]	; (800b20c <USB_HC_StartXfer+0x288>)
 800b132:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b134:	4b35      	ldr	r3, [pc, #212]	; (800b20c <USB_HC_StartXfer+0x288>)
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b13c:	4a33      	ldr	r2, [pc, #204]	; (800b20c <USB_HC_StartXfer+0x288>)
 800b13e:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800b140:	69fb      	ldr	r3, [r7, #28]
 800b142:	015a      	lsls	r2, r3, #5
 800b144:	6a3b      	ldr	r3, [r7, #32]
 800b146:	4413      	add	r3, r2
 800b148:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b14c:	461a      	mov	r2, r3
 800b14e:	4b2f      	ldr	r3, [pc, #188]	; (800b20c <USB_HC_StartXfer+0x288>)
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800b154:	79fb      	ldrb	r3, [r7, #7]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d001      	beq.n	800b15e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800b15a:	2300      	movs	r3, #0
 800b15c:	e04f      	b.n	800b1fe <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800b15e:	68bb      	ldr	r3, [r7, #8]
 800b160:	78db      	ldrb	r3, [r3, #3]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d14a      	bne.n	800b1fc <USB_HC_StartXfer+0x278>
 800b166:	68bb      	ldr	r3, [r7, #8]
 800b168:	691b      	ldr	r3, [r3, #16]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d046      	beq.n	800b1fc <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 800b16e:	68bb      	ldr	r3, [r7, #8]
 800b170:	79db      	ldrb	r3, [r3, #7]
 800b172:	2b03      	cmp	r3, #3
 800b174:	d830      	bhi.n	800b1d8 <USB_HC_StartXfer+0x254>
 800b176:	a201      	add	r2, pc, #4	; (adr r2, 800b17c <USB_HC_StartXfer+0x1f8>)
 800b178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b17c:	0800b18d 	.word	0x0800b18d
 800b180:	0800b1b1 	.word	0x0800b1b1
 800b184:	0800b18d 	.word	0x0800b18d
 800b188:	0800b1b1 	.word	0x0800b1b1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800b18c:	68bb      	ldr	r3, [r7, #8]
 800b18e:	691b      	ldr	r3, [r3, #16]
 800b190:	3303      	adds	r3, #3
 800b192:	089b      	lsrs	r3, r3, #2
 800b194:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800b196:	8afa      	ldrh	r2, [r7, #22]
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b19c:	b29b      	uxth	r3, r3
 800b19e:	429a      	cmp	r2, r3
 800b1a0:	d91c      	bls.n	800b1dc <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	699b      	ldr	r3, [r3, #24]
 800b1a6:	f043 0220 	orr.w	r2, r3, #32
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	619a      	str	r2, [r3, #24]
        }
        break;
 800b1ae:	e015      	b.n	800b1dc <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800b1b0:	68bb      	ldr	r3, [r7, #8]
 800b1b2:	691b      	ldr	r3, [r3, #16]
 800b1b4:	3303      	adds	r3, #3
 800b1b6:	089b      	lsrs	r3, r3, #2
 800b1b8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800b1ba:	8afa      	ldrh	r2, [r7, #22]
 800b1bc:	6a3b      	ldr	r3, [r7, #32]
 800b1be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b1c2:	691b      	ldr	r3, [r3, #16]
 800b1c4:	b29b      	uxth	r3, r3
 800b1c6:	429a      	cmp	r2, r3
 800b1c8:	d90a      	bls.n	800b1e0 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	699b      	ldr	r3, [r3, #24]
 800b1ce:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	619a      	str	r2, [r3, #24]
        }
        break;
 800b1d6:	e003      	b.n	800b1e0 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800b1d8:	bf00      	nop
 800b1da:	e002      	b.n	800b1e2 <USB_HC_StartXfer+0x25e>
        break;
 800b1dc:	bf00      	nop
 800b1de:	e000      	b.n	800b1e2 <USB_HC_StartXfer+0x25e>
        break;
 800b1e0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800b1e2:	68bb      	ldr	r3, [r7, #8]
 800b1e4:	68d9      	ldr	r1, [r3, #12]
 800b1e6:	68bb      	ldr	r3, [r7, #8]
 800b1e8:	785a      	ldrb	r2, [r3, #1]
 800b1ea:	68bb      	ldr	r3, [r7, #8]
 800b1ec:	691b      	ldr	r3, [r3, #16]
 800b1ee:	b298      	uxth	r0, r3
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	9300      	str	r3, [sp, #0]
 800b1f4:	4603      	mov	r3, r0
 800b1f6:	68f8      	ldr	r0, [r7, #12]
 800b1f8:	f7ff fb84 	bl	800a904 <USB_WritePacket>
  }

  return HAL_OK;
 800b1fc:	2300      	movs	r3, #0
}
 800b1fe:	4618      	mov	r0, r3
 800b200:	3728      	adds	r7, #40	; 0x28
 800b202:	46bd      	mov	sp, r7
 800b204:	bd80      	pop	{r7, pc}
 800b206:	bf00      	nop
 800b208:	1ff80000 	.word	0x1ff80000
 800b20c:	200000b4 	.word	0x200000b4

0800b210 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b210:	b480      	push	{r7}
 800b212:	b085      	sub	sp, #20
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b222:	695b      	ldr	r3, [r3, #20]
 800b224:	b29b      	uxth	r3, r3
}
 800b226:	4618      	mov	r0, r3
 800b228:	3714      	adds	r7, #20
 800b22a:	46bd      	mov	sp, r7
 800b22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b230:	4770      	bx	lr

0800b232 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800b232:	b480      	push	{r7}
 800b234:	b087      	sub	sp, #28
 800b236:	af00      	add	r7, sp, #0
 800b238:	6078      	str	r0, [r7, #4]
 800b23a:	460b      	mov	r3, r1
 800b23c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800b242:	78fb      	ldrb	r3, [r7, #3]
 800b244:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800b246:	2300      	movs	r3, #0
 800b248:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	015a      	lsls	r2, r3, #5
 800b24e:	693b      	ldr	r3, [r7, #16]
 800b250:	4413      	add	r3, r2
 800b252:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	0c9b      	lsrs	r3, r3, #18
 800b25a:	f003 0303 	and.w	r3, r3, #3
 800b25e:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800b260:	68bb      	ldr	r3, [r7, #8]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d002      	beq.n	800b26c <USB_HC_Halt+0x3a>
 800b266:	68bb      	ldr	r3, [r7, #8]
 800b268:	2b02      	cmp	r3, #2
 800b26a:	d16c      	bne.n	800b346 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	015a      	lsls	r2, r3, #5
 800b270:	693b      	ldr	r3, [r7, #16]
 800b272:	4413      	add	r3, r2
 800b274:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	68fa      	ldr	r2, [r7, #12]
 800b27c:	0151      	lsls	r1, r2, #5
 800b27e:	693a      	ldr	r2, [r7, #16]
 800b280:	440a      	add	r2, r1
 800b282:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b286:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b28a:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b290:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b294:	2b00      	cmp	r3, #0
 800b296:	d143      	bne.n	800b320 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	015a      	lsls	r2, r3, #5
 800b29c:	693b      	ldr	r3, [r7, #16]
 800b29e:	4413      	add	r3, r2
 800b2a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	68fa      	ldr	r2, [r7, #12]
 800b2a8:	0151      	lsls	r1, r2, #5
 800b2aa:	693a      	ldr	r2, [r7, #16]
 800b2ac:	440a      	add	r2, r1
 800b2ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b2b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b2b6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	015a      	lsls	r2, r3, #5
 800b2bc:	693b      	ldr	r3, [r7, #16]
 800b2be:	4413      	add	r3, r2
 800b2c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	68fa      	ldr	r2, [r7, #12]
 800b2c8:	0151      	lsls	r1, r2, #5
 800b2ca:	693a      	ldr	r2, [r7, #16]
 800b2cc:	440a      	add	r2, r1
 800b2ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b2d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b2d6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	015a      	lsls	r2, r3, #5
 800b2dc:	693b      	ldr	r3, [r7, #16]
 800b2de:	4413      	add	r3, r2
 800b2e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	68fa      	ldr	r2, [r7, #12]
 800b2e8:	0151      	lsls	r1, r2, #5
 800b2ea:	693a      	ldr	r2, [r7, #16]
 800b2ec:	440a      	add	r2, r1
 800b2ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b2f2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b2f6:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800b2f8:	697b      	ldr	r3, [r7, #20]
 800b2fa:	3301      	adds	r3, #1
 800b2fc:	617b      	str	r3, [r7, #20]
 800b2fe:	697b      	ldr	r3, [r7, #20]
 800b300:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b304:	d81d      	bhi.n	800b342 <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	015a      	lsls	r2, r3, #5
 800b30a:	693b      	ldr	r3, [r7, #16]
 800b30c:	4413      	add	r3, r2
 800b30e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b318:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b31c:	d0ec      	beq.n	800b2f8 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800b31e:	e080      	b.n	800b422 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	015a      	lsls	r2, r3, #5
 800b324:	693b      	ldr	r3, [r7, #16]
 800b326:	4413      	add	r3, r2
 800b328:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	68fa      	ldr	r2, [r7, #12]
 800b330:	0151      	lsls	r1, r2, #5
 800b332:	693a      	ldr	r2, [r7, #16]
 800b334:	440a      	add	r2, r1
 800b336:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b33a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b33e:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800b340:	e06f      	b.n	800b422 <USB_HC_Halt+0x1f0>
          break;
 800b342:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800b344:	e06d      	b.n	800b422 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	015a      	lsls	r2, r3, #5
 800b34a:	693b      	ldr	r3, [r7, #16]
 800b34c:	4413      	add	r3, r2
 800b34e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	68fa      	ldr	r2, [r7, #12]
 800b356:	0151      	lsls	r1, r2, #5
 800b358:	693a      	ldr	r2, [r7, #16]
 800b35a:	440a      	add	r2, r1
 800b35c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b360:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b364:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800b366:	693b      	ldr	r3, [r7, #16]
 800b368:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b36c:	691b      	ldr	r3, [r3, #16]
 800b36e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b372:	2b00      	cmp	r3, #0
 800b374:	d143      	bne.n	800b3fe <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	015a      	lsls	r2, r3, #5
 800b37a:	693b      	ldr	r3, [r7, #16]
 800b37c:	4413      	add	r3, r2
 800b37e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	68fa      	ldr	r2, [r7, #12]
 800b386:	0151      	lsls	r1, r2, #5
 800b388:	693a      	ldr	r2, [r7, #16]
 800b38a:	440a      	add	r2, r1
 800b38c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b390:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b394:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	015a      	lsls	r2, r3, #5
 800b39a:	693b      	ldr	r3, [r7, #16]
 800b39c:	4413      	add	r3, r2
 800b39e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	68fa      	ldr	r2, [r7, #12]
 800b3a6:	0151      	lsls	r1, r2, #5
 800b3a8:	693a      	ldr	r2, [r7, #16]
 800b3aa:	440a      	add	r2, r1
 800b3ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b3b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b3b4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	015a      	lsls	r2, r3, #5
 800b3ba:	693b      	ldr	r3, [r7, #16]
 800b3bc:	4413      	add	r3, r2
 800b3be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	68fa      	ldr	r2, [r7, #12]
 800b3c6:	0151      	lsls	r1, r2, #5
 800b3c8:	693a      	ldr	r2, [r7, #16]
 800b3ca:	440a      	add	r2, r1
 800b3cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b3d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b3d4:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800b3d6:	697b      	ldr	r3, [r7, #20]
 800b3d8:	3301      	adds	r3, #1
 800b3da:	617b      	str	r3, [r7, #20]
 800b3dc:	697b      	ldr	r3, [r7, #20]
 800b3de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b3e2:	d81d      	bhi.n	800b420 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	015a      	lsls	r2, r3, #5
 800b3e8:	693b      	ldr	r3, [r7, #16]
 800b3ea:	4413      	add	r3, r2
 800b3ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b3f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b3fa:	d0ec      	beq.n	800b3d6 <USB_HC_Halt+0x1a4>
 800b3fc:	e011      	b.n	800b422 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	015a      	lsls	r2, r3, #5
 800b402:	693b      	ldr	r3, [r7, #16]
 800b404:	4413      	add	r3, r2
 800b406:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	68fa      	ldr	r2, [r7, #12]
 800b40e:	0151      	lsls	r1, r2, #5
 800b410:	693a      	ldr	r2, [r7, #16]
 800b412:	440a      	add	r2, r1
 800b414:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b418:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b41c:	6013      	str	r3, [r2, #0]
 800b41e:	e000      	b.n	800b422 <USB_HC_Halt+0x1f0>
          break;
 800b420:	bf00      	nop
    }
  }

  return HAL_OK;
 800b422:	2300      	movs	r3, #0
}
 800b424:	4618      	mov	r0, r3
 800b426:	371c      	adds	r7, #28
 800b428:	46bd      	mov	sp, r7
 800b42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42e:	4770      	bx	lr

0800b430 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800b430:	b480      	push	{r7}
 800b432:	b087      	sub	sp, #28
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
 800b438:	460b      	mov	r3, r1
 800b43a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800b440:	78fb      	ldrb	r3, [r7, #3]
 800b442:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800b444:	2301      	movs	r3, #1
 800b446:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	04da      	lsls	r2, r3, #19
 800b44c:	4b15      	ldr	r3, [pc, #84]	; (800b4a4 <USB_DoPing+0x74>)
 800b44e:	4013      	ands	r3, r2
 800b450:	693a      	ldr	r2, [r7, #16]
 800b452:	0151      	lsls	r1, r2, #5
 800b454:	697a      	ldr	r2, [r7, #20]
 800b456:	440a      	add	r2, r1
 800b458:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b45c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b460:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800b462:	693b      	ldr	r3, [r7, #16]
 800b464:	015a      	lsls	r2, r3, #5
 800b466:	697b      	ldr	r3, [r7, #20]
 800b468:	4413      	add	r3, r2
 800b46a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b472:	68bb      	ldr	r3, [r7, #8]
 800b474:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b478:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b47a:	68bb      	ldr	r3, [r7, #8]
 800b47c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b480:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800b482:	693b      	ldr	r3, [r7, #16]
 800b484:	015a      	lsls	r2, r3, #5
 800b486:	697b      	ldr	r3, [r7, #20]
 800b488:	4413      	add	r3, r2
 800b48a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b48e:	461a      	mov	r2, r3
 800b490:	68bb      	ldr	r3, [r7, #8]
 800b492:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800b494:	2300      	movs	r3, #0
}
 800b496:	4618      	mov	r0, r3
 800b498:	371c      	adds	r7, #28
 800b49a:	46bd      	mov	sp, r7
 800b49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a0:	4770      	bx	lr
 800b4a2:	bf00      	nop
 800b4a4:	1ff80000 	.word	0x1ff80000

0800b4a8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b086      	sub	sp, #24
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800b4b8:	6878      	ldr	r0, [r7, #4]
 800b4ba:	f7ff f99f 	bl	800a7fc <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800b4be:	2110      	movs	r1, #16
 800b4c0:	6878      	ldr	r0, [r7, #4]
 800b4c2:	f7ff f9d7 	bl	800a874 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800b4c6:	6878      	ldr	r0, [r7, #4]
 800b4c8:	f7ff f9fa 	bl	800a8c0 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	613b      	str	r3, [r7, #16]
 800b4d0:	e01f      	b.n	800b512 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800b4d2:	693b      	ldr	r3, [r7, #16]
 800b4d4:	015a      	lsls	r2, r3, #5
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	4413      	add	r3, r2
 800b4da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800b4e2:	68bb      	ldr	r3, [r7, #8]
 800b4e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b4e8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800b4ea:	68bb      	ldr	r3, [r7, #8]
 800b4ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b4f0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b4f2:	68bb      	ldr	r3, [r7, #8]
 800b4f4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b4f8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800b4fa:	693b      	ldr	r3, [r7, #16]
 800b4fc:	015a      	lsls	r2, r3, #5
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	4413      	add	r3, r2
 800b502:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b506:	461a      	mov	r2, r3
 800b508:	68bb      	ldr	r3, [r7, #8]
 800b50a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800b50c:	693b      	ldr	r3, [r7, #16]
 800b50e:	3301      	adds	r3, #1
 800b510:	613b      	str	r3, [r7, #16]
 800b512:	693b      	ldr	r3, [r7, #16]
 800b514:	2b0f      	cmp	r3, #15
 800b516:	d9dc      	bls.n	800b4d2 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800b518:	2300      	movs	r3, #0
 800b51a:	613b      	str	r3, [r7, #16]
 800b51c:	e034      	b.n	800b588 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800b51e:	693b      	ldr	r3, [r7, #16]
 800b520:	015a      	lsls	r2, r3, #5
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	4413      	add	r3, r2
 800b526:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800b52e:	68bb      	ldr	r3, [r7, #8]
 800b530:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b534:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800b536:	68bb      	ldr	r3, [r7, #8]
 800b538:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b53c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b53e:	68bb      	ldr	r3, [r7, #8]
 800b540:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b544:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800b546:	693b      	ldr	r3, [r7, #16]
 800b548:	015a      	lsls	r2, r3, #5
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	4413      	add	r3, r2
 800b54e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b552:	461a      	mov	r2, r3
 800b554:	68bb      	ldr	r3, [r7, #8]
 800b556:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800b558:	697b      	ldr	r3, [r7, #20]
 800b55a:	3301      	adds	r3, #1
 800b55c:	617b      	str	r3, [r7, #20]
 800b55e:	697b      	ldr	r3, [r7, #20]
 800b560:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b564:	d80c      	bhi.n	800b580 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b566:	693b      	ldr	r3, [r7, #16]
 800b568:	015a      	lsls	r2, r3, #5
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	4413      	add	r3, r2
 800b56e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b578:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b57c:	d0ec      	beq.n	800b558 <USB_StopHost+0xb0>
 800b57e:	e000      	b.n	800b582 <USB_StopHost+0xda>
        break;
 800b580:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800b582:	693b      	ldr	r3, [r7, #16]
 800b584:	3301      	adds	r3, #1
 800b586:	613b      	str	r3, [r7, #16]
 800b588:	693b      	ldr	r3, [r7, #16]
 800b58a:	2b0f      	cmp	r3, #15
 800b58c:	d9c7      	bls.n	800b51e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b594:	461a      	mov	r2, r3
 800b596:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b59a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b5a2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800b5a4:	6878      	ldr	r0, [r7, #4]
 800b5a6:	f7ff f918 	bl	800a7da <USB_EnableGlobalInt>

  return HAL_OK;
 800b5aa:	2300      	movs	r3, #0
}
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	3718      	adds	r7, #24
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	bd80      	pop	{r7, pc}

0800b5b4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800b5b4:	b590      	push	{r4, r7, lr}
 800b5b6:	b089      	sub	sp, #36	; 0x24
 800b5b8:	af04      	add	r7, sp, #16
 800b5ba:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800b5bc:	2301      	movs	r3, #1
 800b5be:	2202      	movs	r2, #2
 800b5c0:	2102      	movs	r1, #2
 800b5c2:	6878      	ldr	r0, [r7, #4]
 800b5c4:	f000 fc68 	bl	800be98 <USBH_FindInterface>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800b5cc:	7bfb      	ldrb	r3, [r7, #15]
 800b5ce:	2bff      	cmp	r3, #255	; 0xff
 800b5d0:	d002      	beq.n	800b5d8 <USBH_CDC_InterfaceInit+0x24>
 800b5d2:	7bfb      	ldrb	r3, [r7, #15]
 800b5d4:	2b01      	cmp	r3, #1
 800b5d6:	d901      	bls.n	800b5dc <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800b5d8:	2302      	movs	r3, #2
 800b5da:	e13d      	b.n	800b858 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800b5dc:	7bfb      	ldrb	r3, [r7, #15]
 800b5de:	4619      	mov	r1, r3
 800b5e0:	6878      	ldr	r0, [r7, #4]
 800b5e2:	f000 fc3d 	bl	800be60 <USBH_SelectInterface>
 800b5e6:	4603      	mov	r3, r0
 800b5e8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800b5ea:	7bbb      	ldrb	r3, [r7, #14]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d001      	beq.n	800b5f4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800b5f0:	2302      	movs	r3, #2
 800b5f2:	e131      	b.n	800b858 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800b5fa:	2050      	movs	r0, #80	; 0x50
 800b5fc:	f002 fa46 	bl	800da8c <malloc>
 800b600:	4603      	mov	r3, r0
 800b602:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b60a:	69db      	ldr	r3, [r3, #28]
 800b60c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800b60e:	68bb      	ldr	r3, [r7, #8]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d101      	bne.n	800b618 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800b614:	2302      	movs	r3, #2
 800b616:	e11f      	b.n	800b858 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800b618:	2250      	movs	r2, #80	; 0x50
 800b61a:	2100      	movs	r1, #0
 800b61c:	68b8      	ldr	r0, [r7, #8]
 800b61e:	f002 fa45 	bl	800daac <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800b622:	7bfb      	ldrb	r3, [r7, #15]
 800b624:	687a      	ldr	r2, [r7, #4]
 800b626:	211a      	movs	r1, #26
 800b628:	fb01 f303 	mul.w	r3, r1, r3
 800b62c:	4413      	add	r3, r2
 800b62e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b632:	781b      	ldrb	r3, [r3, #0]
 800b634:	b25b      	sxtb	r3, r3
 800b636:	2b00      	cmp	r3, #0
 800b638:	da15      	bge.n	800b666 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800b63a:	7bfb      	ldrb	r3, [r7, #15]
 800b63c:	687a      	ldr	r2, [r7, #4]
 800b63e:	211a      	movs	r1, #26
 800b640:	fb01 f303 	mul.w	r3, r1, r3
 800b644:	4413      	add	r3, r2
 800b646:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b64a:	781a      	ldrb	r2, [r3, #0]
 800b64c:	68bb      	ldr	r3, [r7, #8]
 800b64e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b650:	7bfb      	ldrb	r3, [r7, #15]
 800b652:	687a      	ldr	r2, [r7, #4]
 800b654:	211a      	movs	r1, #26
 800b656:	fb01 f303 	mul.w	r3, r1, r3
 800b65a:	4413      	add	r3, r2
 800b65c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b660:	881a      	ldrh	r2, [r3, #0]
 800b662:	68bb      	ldr	r3, [r7, #8]
 800b664:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800b666:	68bb      	ldr	r3, [r7, #8]
 800b668:	785b      	ldrb	r3, [r3, #1]
 800b66a:	4619      	mov	r1, r3
 800b66c:	6878      	ldr	r0, [r7, #4]
 800b66e:	f001 fe36 	bl	800d2de <USBH_AllocPipe>
 800b672:	4603      	mov	r3, r0
 800b674:	461a      	mov	r2, r3
 800b676:	68bb      	ldr	r3, [r7, #8]
 800b678:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800b67a:	68bb      	ldr	r3, [r7, #8]
 800b67c:	7819      	ldrb	r1, [r3, #0]
 800b67e:	68bb      	ldr	r3, [r7, #8]
 800b680:	7858      	ldrb	r0, [r3, #1]
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b68e:	68ba      	ldr	r2, [r7, #8]
 800b690:	8952      	ldrh	r2, [r2, #10]
 800b692:	9202      	str	r2, [sp, #8]
 800b694:	2203      	movs	r2, #3
 800b696:	9201      	str	r2, [sp, #4]
 800b698:	9300      	str	r3, [sp, #0]
 800b69a:	4623      	mov	r3, r4
 800b69c:	4602      	mov	r2, r0
 800b69e:	6878      	ldr	r0, [r7, #4]
 800b6a0:	f001 fdee 	bl	800d280 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800b6a4:	68bb      	ldr	r3, [r7, #8]
 800b6a6:	781b      	ldrb	r3, [r3, #0]
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	4619      	mov	r1, r3
 800b6ac:	6878      	ldr	r0, [r7, #4]
 800b6ae:	f002 f8fb 	bl	800d8a8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	210a      	movs	r1, #10
 800b6b8:	6878      	ldr	r0, [r7, #4]
 800b6ba:	f000 fbed 	bl	800be98 <USBH_FindInterface>
 800b6be:	4603      	mov	r3, r0
 800b6c0:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800b6c2:	7bfb      	ldrb	r3, [r7, #15]
 800b6c4:	2bff      	cmp	r3, #255	; 0xff
 800b6c6:	d002      	beq.n	800b6ce <USBH_CDC_InterfaceInit+0x11a>
 800b6c8:	7bfb      	ldrb	r3, [r7, #15]
 800b6ca:	2b01      	cmp	r3, #1
 800b6cc:	d901      	bls.n	800b6d2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800b6ce:	2302      	movs	r3, #2
 800b6d0:	e0c2      	b.n	800b858 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800b6d2:	7bfb      	ldrb	r3, [r7, #15]
 800b6d4:	687a      	ldr	r2, [r7, #4]
 800b6d6:	211a      	movs	r1, #26
 800b6d8:	fb01 f303 	mul.w	r3, r1, r3
 800b6dc:	4413      	add	r3, r2
 800b6de:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b6e2:	781b      	ldrb	r3, [r3, #0]
 800b6e4:	b25b      	sxtb	r3, r3
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	da16      	bge.n	800b718 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800b6ea:	7bfb      	ldrb	r3, [r7, #15]
 800b6ec:	687a      	ldr	r2, [r7, #4]
 800b6ee:	211a      	movs	r1, #26
 800b6f0:	fb01 f303 	mul.w	r3, r1, r3
 800b6f4:	4413      	add	r3, r2
 800b6f6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b6fa:	781a      	ldrb	r2, [r3, #0]
 800b6fc:	68bb      	ldr	r3, [r7, #8]
 800b6fe:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b700:	7bfb      	ldrb	r3, [r7, #15]
 800b702:	687a      	ldr	r2, [r7, #4]
 800b704:	211a      	movs	r1, #26
 800b706:	fb01 f303 	mul.w	r3, r1, r3
 800b70a:	4413      	add	r3, r2
 800b70c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b710:	881a      	ldrh	r2, [r3, #0]
 800b712:	68bb      	ldr	r3, [r7, #8]
 800b714:	835a      	strh	r2, [r3, #26]
 800b716:	e015      	b.n	800b744 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800b718:	7bfb      	ldrb	r3, [r7, #15]
 800b71a:	687a      	ldr	r2, [r7, #4]
 800b71c:	211a      	movs	r1, #26
 800b71e:	fb01 f303 	mul.w	r3, r1, r3
 800b722:	4413      	add	r3, r2
 800b724:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b728:	781a      	ldrb	r2, [r3, #0]
 800b72a:	68bb      	ldr	r3, [r7, #8]
 800b72c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b72e:	7bfb      	ldrb	r3, [r7, #15]
 800b730:	687a      	ldr	r2, [r7, #4]
 800b732:	211a      	movs	r1, #26
 800b734:	fb01 f303 	mul.w	r3, r1, r3
 800b738:	4413      	add	r3, r2
 800b73a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b73e:	881a      	ldrh	r2, [r3, #0]
 800b740:	68bb      	ldr	r3, [r7, #8]
 800b742:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800b744:	7bfb      	ldrb	r3, [r7, #15]
 800b746:	687a      	ldr	r2, [r7, #4]
 800b748:	211a      	movs	r1, #26
 800b74a:	fb01 f303 	mul.w	r3, r1, r3
 800b74e:	4413      	add	r3, r2
 800b750:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b754:	781b      	ldrb	r3, [r3, #0]
 800b756:	b25b      	sxtb	r3, r3
 800b758:	2b00      	cmp	r3, #0
 800b75a:	da16      	bge.n	800b78a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800b75c:	7bfb      	ldrb	r3, [r7, #15]
 800b75e:	687a      	ldr	r2, [r7, #4]
 800b760:	211a      	movs	r1, #26
 800b762:	fb01 f303 	mul.w	r3, r1, r3
 800b766:	4413      	add	r3, r2
 800b768:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b76c:	781a      	ldrb	r2, [r3, #0]
 800b76e:	68bb      	ldr	r3, [r7, #8]
 800b770:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b772:	7bfb      	ldrb	r3, [r7, #15]
 800b774:	687a      	ldr	r2, [r7, #4]
 800b776:	211a      	movs	r1, #26
 800b778:	fb01 f303 	mul.w	r3, r1, r3
 800b77c:	4413      	add	r3, r2
 800b77e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800b782:	881a      	ldrh	r2, [r3, #0]
 800b784:	68bb      	ldr	r3, [r7, #8]
 800b786:	835a      	strh	r2, [r3, #26]
 800b788:	e015      	b.n	800b7b6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800b78a:	7bfb      	ldrb	r3, [r7, #15]
 800b78c:	687a      	ldr	r2, [r7, #4]
 800b78e:	211a      	movs	r1, #26
 800b790:	fb01 f303 	mul.w	r3, r1, r3
 800b794:	4413      	add	r3, r2
 800b796:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b79a:	781a      	ldrb	r2, [r3, #0]
 800b79c:	68bb      	ldr	r3, [r7, #8]
 800b79e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b7a0:	7bfb      	ldrb	r3, [r7, #15]
 800b7a2:	687a      	ldr	r2, [r7, #4]
 800b7a4:	211a      	movs	r1, #26
 800b7a6:	fb01 f303 	mul.w	r3, r1, r3
 800b7aa:	4413      	add	r3, r2
 800b7ac:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800b7b0:	881a      	ldrh	r2, [r3, #0]
 800b7b2:	68bb      	ldr	r3, [r7, #8]
 800b7b4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800b7b6:	68bb      	ldr	r3, [r7, #8]
 800b7b8:	7b9b      	ldrb	r3, [r3, #14]
 800b7ba:	4619      	mov	r1, r3
 800b7bc:	6878      	ldr	r0, [r7, #4]
 800b7be:	f001 fd8e 	bl	800d2de <USBH_AllocPipe>
 800b7c2:	4603      	mov	r3, r0
 800b7c4:	461a      	mov	r2, r3
 800b7c6:	68bb      	ldr	r3, [r7, #8]
 800b7c8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800b7ca:	68bb      	ldr	r3, [r7, #8]
 800b7cc:	7bdb      	ldrb	r3, [r3, #15]
 800b7ce:	4619      	mov	r1, r3
 800b7d0:	6878      	ldr	r0, [r7, #4]
 800b7d2:	f001 fd84 	bl	800d2de <USBH_AllocPipe>
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	461a      	mov	r2, r3
 800b7da:	68bb      	ldr	r3, [r7, #8]
 800b7dc:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800b7de:	68bb      	ldr	r3, [r7, #8]
 800b7e0:	7b59      	ldrb	r1, [r3, #13]
 800b7e2:	68bb      	ldr	r3, [r7, #8]
 800b7e4:	7b98      	ldrb	r0, [r3, #14]
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b7f2:	68ba      	ldr	r2, [r7, #8]
 800b7f4:	8b12      	ldrh	r2, [r2, #24]
 800b7f6:	9202      	str	r2, [sp, #8]
 800b7f8:	2202      	movs	r2, #2
 800b7fa:	9201      	str	r2, [sp, #4]
 800b7fc:	9300      	str	r3, [sp, #0]
 800b7fe:	4623      	mov	r3, r4
 800b800:	4602      	mov	r2, r0
 800b802:	6878      	ldr	r0, [r7, #4]
 800b804:	f001 fd3c 	bl	800d280 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800b808:	68bb      	ldr	r3, [r7, #8]
 800b80a:	7b19      	ldrb	r1, [r3, #12]
 800b80c:	68bb      	ldr	r3, [r7, #8]
 800b80e:	7bd8      	ldrb	r0, [r3, #15]
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b81c:	68ba      	ldr	r2, [r7, #8]
 800b81e:	8b52      	ldrh	r2, [r2, #26]
 800b820:	9202      	str	r2, [sp, #8]
 800b822:	2202      	movs	r2, #2
 800b824:	9201      	str	r2, [sp, #4]
 800b826:	9300      	str	r3, [sp, #0]
 800b828:	4623      	mov	r3, r4
 800b82a:	4602      	mov	r2, r0
 800b82c:	6878      	ldr	r0, [r7, #4]
 800b82e:	f001 fd27 	bl	800d280 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800b832:	68bb      	ldr	r3, [r7, #8]
 800b834:	2200      	movs	r2, #0
 800b836:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800b83a:	68bb      	ldr	r3, [r7, #8]
 800b83c:	7b5b      	ldrb	r3, [r3, #13]
 800b83e:	2200      	movs	r2, #0
 800b840:	4619      	mov	r1, r3
 800b842:	6878      	ldr	r0, [r7, #4]
 800b844:	f002 f830 	bl	800d8a8 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800b848:	68bb      	ldr	r3, [r7, #8]
 800b84a:	7b1b      	ldrb	r3, [r3, #12]
 800b84c:	2200      	movs	r2, #0
 800b84e:	4619      	mov	r1, r3
 800b850:	6878      	ldr	r0, [r7, #4]
 800b852:	f002 f829 	bl	800d8a8 <USBH_LL_SetToggle>

  return USBH_OK;
 800b856:	2300      	movs	r3, #0
}
 800b858:	4618      	mov	r0, r3
 800b85a:	3714      	adds	r7, #20
 800b85c:	46bd      	mov	sp, r7
 800b85e:	bd90      	pop	{r4, r7, pc}

0800b860 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b084      	sub	sp, #16
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b86e:	69db      	ldr	r3, [r3, #28]
 800b870:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	781b      	ldrb	r3, [r3, #0]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d00e      	beq.n	800b898 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	781b      	ldrb	r3, [r3, #0]
 800b87e:	4619      	mov	r1, r3
 800b880:	6878      	ldr	r0, [r7, #4]
 800b882:	f001 fd1c 	bl	800d2be <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	781b      	ldrb	r3, [r3, #0]
 800b88a:	4619      	mov	r1, r3
 800b88c:	6878      	ldr	r0, [r7, #4]
 800b88e:	f001 fd47 	bl	800d320 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	2200      	movs	r2, #0
 800b896:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	7b1b      	ldrb	r3, [r3, #12]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d00e      	beq.n	800b8be <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	7b1b      	ldrb	r3, [r3, #12]
 800b8a4:	4619      	mov	r1, r3
 800b8a6:	6878      	ldr	r0, [r7, #4]
 800b8a8:	f001 fd09 	bl	800d2be <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	7b1b      	ldrb	r3, [r3, #12]
 800b8b0:	4619      	mov	r1, r3
 800b8b2:	6878      	ldr	r0, [r7, #4]
 800b8b4:	f001 fd34 	bl	800d320 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	7b5b      	ldrb	r3, [r3, #13]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d00e      	beq.n	800b8e4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	7b5b      	ldrb	r3, [r3, #13]
 800b8ca:	4619      	mov	r1, r3
 800b8cc:	6878      	ldr	r0, [r7, #4]
 800b8ce:	f001 fcf6 	bl	800d2be <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	7b5b      	ldrb	r3, [r3, #13]
 800b8d6:	4619      	mov	r1, r3
 800b8d8:	6878      	ldr	r0, [r7, #4]
 800b8da:	f001 fd21 	bl	800d320 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b8ea:	69db      	ldr	r3, [r3, #28]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d00b      	beq.n	800b908 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b8f6:	69db      	ldr	r3, [r3, #28]
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	f002 f8cf 	bl	800da9c <free>
    phost->pActiveClass->pData = 0U;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b904:	2200      	movs	r2, #0
 800b906:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800b908:	2300      	movs	r3, #0
}
 800b90a:	4618      	mov	r0, r3
 800b90c:	3710      	adds	r7, #16
 800b90e:	46bd      	mov	sp, r7
 800b910:	bd80      	pop	{r7, pc}

0800b912 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800b912:	b580      	push	{r7, lr}
 800b914:	b084      	sub	sp, #16
 800b916:	af00      	add	r7, sp, #0
 800b918:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b920:	69db      	ldr	r3, [r3, #28]
 800b922:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	3340      	adds	r3, #64	; 0x40
 800b928:	4619      	mov	r1, r3
 800b92a:	6878      	ldr	r0, [r7, #4]
 800b92c:	f000 f8b1 	bl	800ba92 <GetLineCoding>
 800b930:	4603      	mov	r3, r0
 800b932:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800b934:	7afb      	ldrb	r3, [r7, #11]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d105      	bne.n	800b946 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b940:	2102      	movs	r1, #2
 800b942:	6878      	ldr	r0, [r7, #4]
 800b944:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800b946:	7afb      	ldrb	r3, [r7, #11]
}
 800b948:	4618      	mov	r0, r3
 800b94a:	3710      	adds	r7, #16
 800b94c:	46bd      	mov	sp, r7
 800b94e:	bd80      	pop	{r7, pc}

0800b950 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b084      	sub	sp, #16
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800b958:	2301      	movs	r3, #1
 800b95a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800b95c:	2300      	movs	r3, #0
 800b95e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b966:	69db      	ldr	r3, [r3, #28]
 800b968:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800b96a:	68bb      	ldr	r3, [r7, #8]
 800b96c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800b970:	2b04      	cmp	r3, #4
 800b972:	d877      	bhi.n	800ba64 <USBH_CDC_Process+0x114>
 800b974:	a201      	add	r2, pc, #4	; (adr r2, 800b97c <USBH_CDC_Process+0x2c>)
 800b976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b97a:	bf00      	nop
 800b97c:	0800b991 	.word	0x0800b991
 800b980:	0800b997 	.word	0x0800b997
 800b984:	0800b9c7 	.word	0x0800b9c7
 800b988:	0800ba3b 	.word	0x0800ba3b
 800b98c:	0800ba49 	.word	0x0800ba49
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800b990:	2300      	movs	r3, #0
 800b992:	73fb      	strb	r3, [r7, #15]
      break;
 800b994:	e06d      	b.n	800ba72 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800b996:	68bb      	ldr	r3, [r7, #8]
 800b998:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b99a:	4619      	mov	r1, r3
 800b99c:	6878      	ldr	r0, [r7, #4]
 800b99e:	f000 f897 	bl	800bad0 <SetLineCoding>
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800b9a6:	7bbb      	ldrb	r3, [r7, #14]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d104      	bne.n	800b9b6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800b9ac:	68bb      	ldr	r3, [r7, #8]
 800b9ae:	2202      	movs	r2, #2
 800b9b0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800b9b4:	e058      	b.n	800ba68 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800b9b6:	7bbb      	ldrb	r3, [r7, #14]
 800b9b8:	2b01      	cmp	r3, #1
 800b9ba:	d055      	beq.n	800ba68 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800b9bc:	68bb      	ldr	r3, [r7, #8]
 800b9be:	2204      	movs	r2, #4
 800b9c0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800b9c4:	e050      	b.n	800ba68 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800b9c6:	68bb      	ldr	r3, [r7, #8]
 800b9c8:	3340      	adds	r3, #64	; 0x40
 800b9ca:	4619      	mov	r1, r3
 800b9cc:	6878      	ldr	r0, [r7, #4]
 800b9ce:	f000 f860 	bl	800ba92 <GetLineCoding>
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800b9d6:	7bbb      	ldrb	r3, [r7, #14]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d126      	bne.n	800ba2a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800b9dc:	68bb      	ldr	r3, [r7, #8]
 800b9de:	2200      	movs	r2, #0
 800b9e0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800b9e4:	68bb      	ldr	r3, [r7, #8]
 800b9e6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800b9ea:	68bb      	ldr	r3, [r7, #8]
 800b9ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b9ee:	791b      	ldrb	r3, [r3, #4]
 800b9f0:	429a      	cmp	r2, r3
 800b9f2:	d13b      	bne.n	800ba6c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800b9f4:	68bb      	ldr	r3, [r7, #8]
 800b9f6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800b9fa:	68bb      	ldr	r3, [r7, #8]
 800b9fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b9fe:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800ba00:	429a      	cmp	r2, r3
 800ba02:	d133      	bne.n	800ba6c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800ba04:	68bb      	ldr	r3, [r7, #8]
 800ba06:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800ba0a:	68bb      	ldr	r3, [r7, #8]
 800ba0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba0e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800ba10:	429a      	cmp	r2, r3
 800ba12:	d12b      	bne.n	800ba6c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800ba14:	68bb      	ldr	r3, [r7, #8]
 800ba16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ba18:	68bb      	ldr	r3, [r7, #8]
 800ba1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba1c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800ba1e:	429a      	cmp	r2, r3
 800ba20:	d124      	bne.n	800ba6c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800ba22:	6878      	ldr	r0, [r7, #4]
 800ba24:	f000 f95a 	bl	800bcdc <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800ba28:	e020      	b.n	800ba6c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800ba2a:	7bbb      	ldrb	r3, [r7, #14]
 800ba2c:	2b01      	cmp	r3, #1
 800ba2e:	d01d      	beq.n	800ba6c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800ba30:	68bb      	ldr	r3, [r7, #8]
 800ba32:	2204      	movs	r2, #4
 800ba34:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800ba38:	e018      	b.n	800ba6c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800ba3a:	6878      	ldr	r0, [r7, #4]
 800ba3c:	f000 f867 	bl	800bb0e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800ba40:	6878      	ldr	r0, [r7, #4]
 800ba42:	f000 f8dc 	bl	800bbfe <CDC_ProcessReception>
      break;
 800ba46:	e014      	b.n	800ba72 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800ba48:	2100      	movs	r1, #0
 800ba4a:	6878      	ldr	r0, [r7, #4]
 800ba4c:	f000 ffe5 	bl	800ca1a <USBH_ClrFeature>
 800ba50:	4603      	mov	r3, r0
 800ba52:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800ba54:	7bbb      	ldrb	r3, [r7, #14]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d10a      	bne.n	800ba70 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800ba5a:	68bb      	ldr	r3, [r7, #8]
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800ba62:	e005      	b.n	800ba70 <USBH_CDC_Process+0x120>

    default:
      break;
 800ba64:	bf00      	nop
 800ba66:	e004      	b.n	800ba72 <USBH_CDC_Process+0x122>
      break;
 800ba68:	bf00      	nop
 800ba6a:	e002      	b.n	800ba72 <USBH_CDC_Process+0x122>
      break;
 800ba6c:	bf00      	nop
 800ba6e:	e000      	b.n	800ba72 <USBH_CDC_Process+0x122>
      break;
 800ba70:	bf00      	nop

  }

  return status;
 800ba72:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba74:	4618      	mov	r0, r3
 800ba76:	3710      	adds	r7, #16
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	bd80      	pop	{r7, pc}

0800ba7c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800ba7c:	b480      	push	{r7}
 800ba7e:	b083      	sub	sp, #12
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800ba84:	2300      	movs	r3, #0
}
 800ba86:	4618      	mov	r0, r3
 800ba88:	370c      	adds	r7, #12
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba90:	4770      	bx	lr

0800ba92 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800ba92:	b580      	push	{r7, lr}
 800ba94:	b082      	sub	sp, #8
 800ba96:	af00      	add	r7, sp, #0
 800ba98:	6078      	str	r0, [r7, #4]
 800ba9a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	22a1      	movs	r2, #161	; 0xa1
 800baa0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	2221      	movs	r2, #33	; 0x21
 800baa6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2200      	movs	r2, #0
 800baac:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	2200      	movs	r2, #0
 800bab2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	2207      	movs	r2, #7
 800bab8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800baba:	683b      	ldr	r3, [r7, #0]
 800babc:	2207      	movs	r2, #7
 800babe:	4619      	mov	r1, r3
 800bac0:	6878      	ldr	r0, [r7, #4]
 800bac2:	f001 f98a 	bl	800cdda <USBH_CtlReq>
 800bac6:	4603      	mov	r3, r0
}
 800bac8:	4618      	mov	r0, r3
 800baca:	3708      	adds	r7, #8
 800bacc:	46bd      	mov	sp, r7
 800bace:	bd80      	pop	{r7, pc}

0800bad0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b082      	sub	sp, #8
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
 800bad8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	2221      	movs	r2, #33	; 0x21
 800bade:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	2220      	movs	r2, #32
 800bae4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	2200      	movs	r2, #0
 800baea:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2200      	movs	r2, #0
 800baf0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	2207      	movs	r2, #7
 800baf6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	2207      	movs	r2, #7
 800bafc:	4619      	mov	r1, r3
 800bafe:	6878      	ldr	r0, [r7, #4]
 800bb00:	f001 f96b 	bl	800cdda <USBH_CtlReq>
 800bb04:	4603      	mov	r3, r0
}
 800bb06:	4618      	mov	r0, r3
 800bb08:	3708      	adds	r7, #8
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	bd80      	pop	{r7, pc}

0800bb0e <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800bb0e:	b580      	push	{r7, lr}
 800bb10:	b086      	sub	sp, #24
 800bb12:	af02      	add	r7, sp, #8
 800bb14:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bb1c:	69db      	ldr	r3, [r3, #28]
 800bb1e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800bb20:	2300      	movs	r3, #0
 800bb22:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800bb2a:	2b01      	cmp	r3, #1
 800bb2c:	d002      	beq.n	800bb34 <CDC_ProcessTransmission+0x26>
 800bb2e:	2b02      	cmp	r3, #2
 800bb30:	d025      	beq.n	800bb7e <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 800bb32:	e060      	b.n	800bbf6 <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb38:	68fa      	ldr	r2, [r7, #12]
 800bb3a:	8b12      	ldrh	r2, [r2, #24]
 800bb3c:	4293      	cmp	r3, r2
 800bb3e:	d90c      	bls.n	800bb5a <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	69d9      	ldr	r1, [r3, #28]
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	8b1a      	ldrh	r2, [r3, #24]
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	7b58      	ldrb	r0, [r3, #13]
 800bb4c:	2301      	movs	r3, #1
 800bb4e:	9300      	str	r3, [sp, #0]
 800bb50:	4603      	mov	r3, r0
 800bb52:	6878      	ldr	r0, [r7, #4]
 800bb54:	f001 fb51 	bl	800d1fa <USBH_BulkSendData>
 800bb58:	e00c      	b.n	800bb74 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800bb62:	b29a      	uxth	r2, r3
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	7b58      	ldrb	r0, [r3, #13]
 800bb68:	2301      	movs	r3, #1
 800bb6a:	9300      	str	r3, [sp, #0]
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	6878      	ldr	r0, [r7, #4]
 800bb70:	f001 fb43 	bl	800d1fa <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	2202      	movs	r2, #2
 800bb78:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800bb7c:	e03b      	b.n	800bbf6 <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	7b5b      	ldrb	r3, [r3, #13]
 800bb82:	4619      	mov	r1, r3
 800bb84:	6878      	ldr	r0, [r7, #4]
 800bb86:	f001 fe65 	bl	800d854 <USBH_LL_GetURBState>
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800bb8e:	7afb      	ldrb	r3, [r7, #11]
 800bb90:	2b01      	cmp	r3, #1
 800bb92:	d128      	bne.n	800bbe6 <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb98:	68fa      	ldr	r2, [r7, #12]
 800bb9a:	8b12      	ldrh	r2, [r2, #24]
 800bb9c:	4293      	cmp	r3, r2
 800bb9e:	d90e      	bls.n	800bbbe <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bba4:	68fa      	ldr	r2, [r7, #12]
 800bba6:	8b12      	ldrh	r2, [r2, #24]
 800bba8:	1a9a      	subs	r2, r3, r2
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	69db      	ldr	r3, [r3, #28]
 800bbb2:	68fa      	ldr	r2, [r7, #12]
 800bbb4:	8b12      	ldrh	r2, [r2, #24]
 800bbb6:	441a      	add	r2, r3
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	61da      	str	r2, [r3, #28]
 800bbbc:	e002      	b.n	800bbc4 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d004      	beq.n	800bbd6 <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	2201      	movs	r2, #1
 800bbd0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800bbd4:	e00e      	b.n	800bbf4 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	2200      	movs	r2, #0
 800bbda:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800bbde:	6878      	ldr	r0, [r7, #4]
 800bbe0:	f000 f868 	bl	800bcb4 <USBH_CDC_TransmitCallback>
      break;
 800bbe4:	e006      	b.n	800bbf4 <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 800bbe6:	7afb      	ldrb	r3, [r7, #11]
 800bbe8:	2b02      	cmp	r3, #2
 800bbea:	d103      	bne.n	800bbf4 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	2201      	movs	r2, #1
 800bbf0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800bbf4:	bf00      	nop
  }
}
 800bbf6:	bf00      	nop
 800bbf8:	3710      	adds	r7, #16
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	bd80      	pop	{r7, pc}

0800bbfe <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800bbfe:	b580      	push	{r7, lr}
 800bc00:	b086      	sub	sp, #24
 800bc02:	af00      	add	r7, sp, #0
 800bc04:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bc0c:	69db      	ldr	r3, [r3, #28]
 800bc0e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800bc10:	2300      	movs	r3, #0
 800bc12:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800bc14:	697b      	ldr	r3, [r7, #20]
 800bc16:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800bc1a:	2b03      	cmp	r3, #3
 800bc1c:	d002      	beq.n	800bc24 <CDC_ProcessReception+0x26>
 800bc1e:	2b04      	cmp	r3, #4
 800bc20:	d00e      	beq.n	800bc40 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800bc22:	e043      	b.n	800bcac <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 800bc24:	697b      	ldr	r3, [r7, #20]
 800bc26:	6a19      	ldr	r1, [r3, #32]
 800bc28:	697b      	ldr	r3, [r7, #20]
 800bc2a:	8b5a      	ldrh	r2, [r3, #26]
 800bc2c:	697b      	ldr	r3, [r7, #20]
 800bc2e:	7b1b      	ldrb	r3, [r3, #12]
 800bc30:	6878      	ldr	r0, [r7, #4]
 800bc32:	f001 fb07 	bl	800d244 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800bc36:	697b      	ldr	r3, [r7, #20]
 800bc38:	2204      	movs	r2, #4
 800bc3a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800bc3e:	e035      	b.n	800bcac <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800bc40:	697b      	ldr	r3, [r7, #20]
 800bc42:	7b1b      	ldrb	r3, [r3, #12]
 800bc44:	4619      	mov	r1, r3
 800bc46:	6878      	ldr	r0, [r7, #4]
 800bc48:	f001 fe04 	bl	800d854 <USBH_LL_GetURBState>
 800bc4c:	4603      	mov	r3, r0
 800bc4e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800bc50:	7cfb      	ldrb	r3, [r7, #19]
 800bc52:	2b01      	cmp	r3, #1
 800bc54:	d129      	bne.n	800bcaa <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800bc56:	697b      	ldr	r3, [r7, #20]
 800bc58:	7b1b      	ldrb	r3, [r3, #12]
 800bc5a:	4619      	mov	r1, r3
 800bc5c:	6878      	ldr	r0, [r7, #4]
 800bc5e:	f001 fd67 	bl	800d730 <USBH_LL_GetLastXferSize>
 800bc62:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800bc64:	697b      	ldr	r3, [r7, #20]
 800bc66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc68:	68fa      	ldr	r2, [r7, #12]
 800bc6a:	429a      	cmp	r2, r3
 800bc6c:	d016      	beq.n	800bc9c <CDC_ProcessReception+0x9e>
 800bc6e:	697b      	ldr	r3, [r7, #20]
 800bc70:	8b5b      	ldrh	r3, [r3, #26]
 800bc72:	461a      	mov	r2, r3
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	4293      	cmp	r3, r2
 800bc78:	d910      	bls.n	800bc9c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800bc7a:	697b      	ldr	r3, [r7, #20]
 800bc7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	1ad2      	subs	r2, r2, r3
 800bc82:	697b      	ldr	r3, [r7, #20]
 800bc84:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800bc86:	697b      	ldr	r3, [r7, #20]
 800bc88:	6a1a      	ldr	r2, [r3, #32]
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	441a      	add	r2, r3
 800bc8e:	697b      	ldr	r3, [r7, #20]
 800bc90:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800bc92:	697b      	ldr	r3, [r7, #20]
 800bc94:	2203      	movs	r2, #3
 800bc96:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800bc9a:	e006      	b.n	800bcaa <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800bc9c:	697b      	ldr	r3, [r7, #20]
 800bc9e:	2200      	movs	r2, #0
 800bca0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800bca4:	6878      	ldr	r0, [r7, #4]
 800bca6:	f000 f80f 	bl	800bcc8 <USBH_CDC_ReceiveCallback>
      break;
 800bcaa:	bf00      	nop
  }
}
 800bcac:	bf00      	nop
 800bcae:	3718      	adds	r7, #24
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	bd80      	pop	{r7, pc}

0800bcb4 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800bcb4:	b480      	push	{r7}
 800bcb6:	b083      	sub	sp, #12
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800bcbc:	bf00      	nop
 800bcbe:	370c      	adds	r7, #12
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc6:	4770      	bx	lr

0800bcc8 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800bcc8:	b480      	push	{r7}
 800bcca:	b083      	sub	sp, #12
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800bcd0:	bf00      	nop
 800bcd2:	370c      	adds	r7, #12
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcda:	4770      	bx	lr

0800bcdc <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800bcdc:	b480      	push	{r7}
 800bcde:	b083      	sub	sp, #12
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800bce4:	bf00      	nop
 800bce6:	370c      	adds	r7, #12
 800bce8:	46bd      	mov	sp, r7
 800bcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcee:	4770      	bx	lr

0800bcf0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b084      	sub	sp, #16
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	60f8      	str	r0, [r7, #12]
 800bcf8:	60b9      	str	r1, [r7, #8]
 800bcfa:	4613      	mov	r3, r2
 800bcfc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d101      	bne.n	800bd08 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800bd04:	2302      	movs	r3, #2
 800bd06:	e029      	b.n	800bd5c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	79fa      	ldrb	r2, [r7, #7]
 800bd0c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	2200      	movs	r2, #0
 800bd14:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800bd20:	68f8      	ldr	r0, [r7, #12]
 800bd22:	f000 f81f 	bl	800bd64 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	2200      	movs	r2, #0
 800bd2a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	2200      	movs	r2, #0
 800bd32:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	2200      	movs	r2, #0
 800bd3a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	2200      	movs	r2, #0
 800bd42:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d003      	beq.n	800bd54 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	68ba      	ldr	r2, [r7, #8]
 800bd50:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800bd54:	68f8      	ldr	r0, [r7, #12]
 800bd56:	f001 fc39 	bl	800d5cc <USBH_LL_Init>

  return USBH_OK;
 800bd5a:	2300      	movs	r3, #0
}
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	3710      	adds	r7, #16
 800bd60:	46bd      	mov	sp, r7
 800bd62:	bd80      	pop	{r7, pc}

0800bd64 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800bd64:	b480      	push	{r7}
 800bd66:	b085      	sub	sp, #20
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800bd70:	2300      	movs	r3, #0
 800bd72:	60fb      	str	r3, [r7, #12]
 800bd74:	e009      	b.n	800bd8a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800bd76:	687a      	ldr	r2, [r7, #4]
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	33e0      	adds	r3, #224	; 0xe0
 800bd7c:	009b      	lsls	r3, r3, #2
 800bd7e:	4413      	add	r3, r2
 800bd80:	2200      	movs	r2, #0
 800bd82:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	3301      	adds	r3, #1
 800bd88:	60fb      	str	r3, [r7, #12]
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	2b0e      	cmp	r3, #14
 800bd8e:	d9f2      	bls.n	800bd76 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800bd90:	2300      	movs	r3, #0
 800bd92:	60fb      	str	r3, [r7, #12]
 800bd94:	e009      	b.n	800bdaa <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800bd96:	687a      	ldr	r2, [r7, #4]
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	4413      	add	r3, r2
 800bd9c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800bda0:	2200      	movs	r2, #0
 800bda2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	3301      	adds	r3, #1
 800bda8:	60fb      	str	r3, [r7, #12]
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bdb0:	d3f1      	bcc.n	800bd96 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2200      	movs	r2, #0
 800bdbc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	2201      	movs	r2, #1
 800bdc2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	2201      	movs	r2, #1
 800bdd0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	2240      	movs	r2, #64	; 0x40
 800bdd6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	2200      	movs	r2, #0
 800bddc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	2200      	movs	r2, #0
 800bde2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	2201      	movs	r2, #1
 800bdea:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800bdfe:	2300      	movs	r3, #0
}
 800be00:	4618      	mov	r0, r3
 800be02:	3714      	adds	r7, #20
 800be04:	46bd      	mov	sp, r7
 800be06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0a:	4770      	bx	lr

0800be0c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800be0c:	b480      	push	{r7}
 800be0e:	b085      	sub	sp, #20
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
 800be14:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800be16:	2300      	movs	r3, #0
 800be18:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800be1a:	683b      	ldr	r3, [r7, #0]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d016      	beq.n	800be4e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800be26:	2b00      	cmp	r3, #0
 800be28:	d10e      	bne.n	800be48 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800be30:	1c59      	adds	r1, r3, #1
 800be32:	687a      	ldr	r2, [r7, #4]
 800be34:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800be38:	687a      	ldr	r2, [r7, #4]
 800be3a:	33de      	adds	r3, #222	; 0xde
 800be3c:	6839      	ldr	r1, [r7, #0]
 800be3e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800be42:	2300      	movs	r3, #0
 800be44:	73fb      	strb	r3, [r7, #15]
 800be46:	e004      	b.n	800be52 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800be48:	2302      	movs	r3, #2
 800be4a:	73fb      	strb	r3, [r7, #15]
 800be4c:	e001      	b.n	800be52 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800be4e:	2302      	movs	r3, #2
 800be50:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800be52:	7bfb      	ldrb	r3, [r7, #15]
}
 800be54:	4618      	mov	r0, r3
 800be56:	3714      	adds	r7, #20
 800be58:	46bd      	mov	sp, r7
 800be5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5e:	4770      	bx	lr

0800be60 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800be60:	b480      	push	{r7}
 800be62:	b085      	sub	sp, #20
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
 800be68:	460b      	mov	r3, r1
 800be6a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800be6c:	2300      	movs	r3, #0
 800be6e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800be76:	78fa      	ldrb	r2, [r7, #3]
 800be78:	429a      	cmp	r2, r3
 800be7a:	d204      	bcs.n	800be86 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	78fa      	ldrb	r2, [r7, #3]
 800be80:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800be84:	e001      	b.n	800be8a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800be86:	2302      	movs	r3, #2
 800be88:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800be8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800be8c:	4618      	mov	r0, r3
 800be8e:	3714      	adds	r7, #20
 800be90:	46bd      	mov	sp, r7
 800be92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be96:	4770      	bx	lr

0800be98 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800be98:	b480      	push	{r7}
 800be9a:	b087      	sub	sp, #28
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
 800bea0:	4608      	mov	r0, r1
 800bea2:	4611      	mov	r1, r2
 800bea4:	461a      	mov	r2, r3
 800bea6:	4603      	mov	r3, r0
 800bea8:	70fb      	strb	r3, [r7, #3]
 800beaa:	460b      	mov	r3, r1
 800beac:	70bb      	strb	r3, [r7, #2]
 800beae:	4613      	mov	r3, r2
 800beb0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800beb2:	2300      	movs	r3, #0
 800beb4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800beb6:	2300      	movs	r3, #0
 800beb8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800bec0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800bec2:	e025      	b.n	800bf10 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800bec4:	7dfb      	ldrb	r3, [r7, #23]
 800bec6:	221a      	movs	r2, #26
 800bec8:	fb02 f303 	mul.w	r3, r2, r3
 800becc:	3308      	adds	r3, #8
 800bece:	68fa      	ldr	r2, [r7, #12]
 800bed0:	4413      	add	r3, r2
 800bed2:	3302      	adds	r3, #2
 800bed4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800bed6:	693b      	ldr	r3, [r7, #16]
 800bed8:	795b      	ldrb	r3, [r3, #5]
 800beda:	78fa      	ldrb	r2, [r7, #3]
 800bedc:	429a      	cmp	r2, r3
 800bede:	d002      	beq.n	800bee6 <USBH_FindInterface+0x4e>
 800bee0:	78fb      	ldrb	r3, [r7, #3]
 800bee2:	2bff      	cmp	r3, #255	; 0xff
 800bee4:	d111      	bne.n	800bf0a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800bee6:	693b      	ldr	r3, [r7, #16]
 800bee8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800beea:	78ba      	ldrb	r2, [r7, #2]
 800beec:	429a      	cmp	r2, r3
 800beee:	d002      	beq.n	800bef6 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800bef0:	78bb      	ldrb	r3, [r7, #2]
 800bef2:	2bff      	cmp	r3, #255	; 0xff
 800bef4:	d109      	bne.n	800bf0a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800bef6:	693b      	ldr	r3, [r7, #16]
 800bef8:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800befa:	787a      	ldrb	r2, [r7, #1]
 800befc:	429a      	cmp	r2, r3
 800befe:	d002      	beq.n	800bf06 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800bf00:	787b      	ldrb	r3, [r7, #1]
 800bf02:	2bff      	cmp	r3, #255	; 0xff
 800bf04:	d101      	bne.n	800bf0a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800bf06:	7dfb      	ldrb	r3, [r7, #23]
 800bf08:	e006      	b.n	800bf18 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800bf0a:	7dfb      	ldrb	r3, [r7, #23]
 800bf0c:	3301      	adds	r3, #1
 800bf0e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800bf10:	7dfb      	ldrb	r3, [r7, #23]
 800bf12:	2b01      	cmp	r3, #1
 800bf14:	d9d6      	bls.n	800bec4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800bf16:	23ff      	movs	r3, #255	; 0xff
}
 800bf18:	4618      	mov	r0, r3
 800bf1a:	371c      	adds	r7, #28
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf22:	4770      	bx	lr

0800bf24 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b082      	sub	sp, #8
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800bf2c:	6878      	ldr	r0, [r7, #4]
 800bf2e:	f001 fb89 	bl	800d644 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800bf32:	2101      	movs	r1, #1
 800bf34:	6878      	ldr	r0, [r7, #4]
 800bf36:	f001 fca0 	bl	800d87a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800bf3a:	2300      	movs	r3, #0
}
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	3708      	adds	r7, #8
 800bf40:	46bd      	mov	sp, r7
 800bf42:	bd80      	pop	{r7, pc}

0800bf44 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b088      	sub	sp, #32
 800bf48:	af04      	add	r7, sp, #16
 800bf4a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800bf4c:	2302      	movs	r3, #2
 800bf4e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800bf50:	2300      	movs	r3, #0
 800bf52:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800bf5a:	b2db      	uxtb	r3, r3
 800bf5c:	2b01      	cmp	r3, #1
 800bf5e:	d102      	bne.n	800bf66 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2203      	movs	r2, #3
 800bf64:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	781b      	ldrb	r3, [r3, #0]
 800bf6a:	b2db      	uxtb	r3, r3
 800bf6c:	2b0b      	cmp	r3, #11
 800bf6e:	f200 81b3 	bhi.w	800c2d8 <USBH_Process+0x394>
 800bf72:	a201      	add	r2, pc, #4	; (adr r2, 800bf78 <USBH_Process+0x34>)
 800bf74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf78:	0800bfa9 	.word	0x0800bfa9
 800bf7c:	0800bfdb 	.word	0x0800bfdb
 800bf80:	0800c043 	.word	0x0800c043
 800bf84:	0800c273 	.word	0x0800c273
 800bf88:	0800c2d9 	.word	0x0800c2d9
 800bf8c:	0800c0e7 	.word	0x0800c0e7
 800bf90:	0800c219 	.word	0x0800c219
 800bf94:	0800c11d 	.word	0x0800c11d
 800bf98:	0800c13d 	.word	0x0800c13d
 800bf9c:	0800c15d 	.word	0x0800c15d
 800bfa0:	0800c18b 	.word	0x0800c18b
 800bfa4:	0800c25b 	.word	0x0800c25b
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800bfae:	b2db      	uxtb	r3, r3
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	f000 8193 	beq.w	800c2dc <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	2201      	movs	r2, #1
 800bfba:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800bfbc:	20c8      	movs	r0, #200	; 0xc8
 800bfbe:	f001 fca6 	bl	800d90e <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800bfc2:	6878      	ldr	r0, [r7, #4]
 800bfc4:	f001 fb99 	bl	800d6fa <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2200      	movs	r2, #0
 800bfcc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800bfd8:	e180      	b.n	800c2dc <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800bfe0:	2b01      	cmp	r3, #1
 800bfe2:	d107      	bne.n	800bff4 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	2202      	movs	r2, #2
 800bff0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800bff2:	e182      	b.n	800c2fa <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800bffa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bffe:	d914      	bls.n	800c02a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800c006:	3301      	adds	r3, #1
 800c008:	b2da      	uxtb	r2, r3
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800c016:	2b03      	cmp	r3, #3
 800c018:	d903      	bls.n	800c022 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	220d      	movs	r2, #13
 800c01e:	701a      	strb	r2, [r3, #0]
      break;
 800c020:	e16b      	b.n	800c2fa <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	2200      	movs	r2, #0
 800c026:	701a      	strb	r2, [r3, #0]
      break;
 800c028:	e167      	b.n	800c2fa <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c030:	f103 020a 	add.w	r2, r3, #10
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800c03a:	200a      	movs	r0, #10
 800c03c:	f001 fc67 	bl	800d90e <USBH_Delay>
      break;
 800c040:	e15b      	b.n	800c2fa <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d005      	beq.n	800c058 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c052:	2104      	movs	r1, #4
 800c054:	6878      	ldr	r0, [r7, #4]
 800c056:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800c058:	2064      	movs	r0, #100	; 0x64
 800c05a:	f001 fc58 	bl	800d90e <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800c05e:	6878      	ldr	r0, [r7, #4]
 800c060:	f001 fb26 	bl	800d6b0 <USBH_LL_GetSpeed>
 800c064:	4603      	mov	r3, r0
 800c066:	461a      	mov	r2, r3
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	2205      	movs	r2, #5
 800c072:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800c074:	2100      	movs	r1, #0
 800c076:	6878      	ldr	r0, [r7, #4]
 800c078:	f001 f931 	bl	800d2de <USBH_AllocPipe>
 800c07c:	4603      	mov	r3, r0
 800c07e:	461a      	mov	r2, r3
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800c084:	2180      	movs	r1, #128	; 0x80
 800c086:	6878      	ldr	r0, [r7, #4]
 800c088:	f001 f929 	bl	800d2de <USBH_AllocPipe>
 800c08c:	4603      	mov	r3, r0
 800c08e:	461a      	mov	r2, r3
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	7919      	ldrb	r1, [r3, #4]
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800c0a4:	687a      	ldr	r2, [r7, #4]
 800c0a6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800c0a8:	b292      	uxth	r2, r2
 800c0aa:	9202      	str	r2, [sp, #8]
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	9201      	str	r2, [sp, #4]
 800c0b0:	9300      	str	r3, [sp, #0]
 800c0b2:	4603      	mov	r3, r0
 800c0b4:	2280      	movs	r2, #128	; 0x80
 800c0b6:	6878      	ldr	r0, [r7, #4]
 800c0b8:	f001 f8e2 	bl	800d280 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	7959      	ldrb	r1, [r3, #5]
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800c0cc:	687a      	ldr	r2, [r7, #4]
 800c0ce:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800c0d0:	b292      	uxth	r2, r2
 800c0d2:	9202      	str	r2, [sp, #8]
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	9201      	str	r2, [sp, #4]
 800c0d8:	9300      	str	r3, [sp, #0]
 800c0da:	4603      	mov	r3, r0
 800c0dc:	2200      	movs	r2, #0
 800c0de:	6878      	ldr	r0, [r7, #4]
 800c0e0:	f001 f8ce 	bl	800d280 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c0e4:	e109      	b.n	800c2fa <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800c0e6:	6878      	ldr	r0, [r7, #4]
 800c0e8:	f000 f90c 	bl	800c304 <USBH_HandleEnum>
 800c0ec:	4603      	mov	r3, r0
 800c0ee:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800c0f0:	7bbb      	ldrb	r3, [r7, #14]
 800c0f2:	b2db      	uxtb	r3, r3
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	f040 80f3 	bne.w	800c2e0 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800c108:	2b01      	cmp	r3, #1
 800c10a:	d103      	bne.n	800c114 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	2208      	movs	r2, #8
 800c110:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800c112:	e0e5      	b.n	800c2e0 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2207      	movs	r2, #7
 800c118:	701a      	strb	r2, [r3, #0]
      break;
 800c11a:	e0e1      	b.n	800c2e0 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c122:	2b00      	cmp	r3, #0
 800c124:	f000 80de 	beq.w	800c2e4 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c12e:	2101      	movs	r1, #1
 800c130:	6878      	ldr	r0, [r7, #4]
 800c132:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	2208      	movs	r2, #8
 800c138:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800c13a:	e0d3      	b.n	800c2e4 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800c142:	b29b      	uxth	r3, r3
 800c144:	4619      	mov	r1, r3
 800c146:	6878      	ldr	r0, [r7, #4]
 800c148:	f000 fc20 	bl	800c98c <USBH_SetCfg>
 800c14c:	4603      	mov	r3, r0
 800c14e:	2b00      	cmp	r3, #0
 800c150:	f040 80ca 	bne.w	800c2e8 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	2209      	movs	r2, #9
 800c158:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c15a:	e0c5      	b.n	800c2e8 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800c162:	f003 0320 	and.w	r3, r3, #32
 800c166:	2b00      	cmp	r3, #0
 800c168:	d00b      	beq.n	800c182 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800c16a:	2101      	movs	r1, #1
 800c16c:	6878      	ldr	r0, [r7, #4]
 800c16e:	f000 fc30 	bl	800c9d2 <USBH_SetFeature>
 800c172:	4603      	mov	r3, r0
 800c174:	2b00      	cmp	r3, #0
 800c176:	f040 80b9 	bne.w	800c2ec <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	220a      	movs	r2, #10
 800c17e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c180:	e0b4      	b.n	800c2ec <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	220a      	movs	r2, #10
 800c186:	701a      	strb	r2, [r3, #0]
      break;
 800c188:	e0b0      	b.n	800c2ec <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c190:	2b00      	cmp	r3, #0
 800c192:	f000 80ad 	beq.w	800c2f0 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	2200      	movs	r2, #0
 800c19a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c19e:	2300      	movs	r3, #0
 800c1a0:	73fb      	strb	r3, [r7, #15]
 800c1a2:	e016      	b.n	800c1d2 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800c1a4:	7bfa      	ldrb	r2, [r7, #15]
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	32de      	adds	r2, #222	; 0xde
 800c1aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1ae:	791a      	ldrb	r2, [r3, #4]
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800c1b6:	429a      	cmp	r2, r3
 800c1b8:	d108      	bne.n	800c1cc <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800c1ba:	7bfa      	ldrb	r2, [r7, #15]
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	32de      	adds	r2, #222	; 0xde
 800c1c0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800c1ca:	e005      	b.n	800c1d8 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c1cc:	7bfb      	ldrb	r3, [r7, #15]
 800c1ce:	3301      	adds	r3, #1
 800c1d0:	73fb      	strb	r3, [r7, #15]
 800c1d2:	7bfb      	ldrb	r3, [r7, #15]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d0e5      	beq.n	800c1a4 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d016      	beq.n	800c210 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c1e8:	689b      	ldr	r3, [r3, #8]
 800c1ea:	6878      	ldr	r0, [r7, #4]
 800c1ec:	4798      	blx	r3
 800c1ee:	4603      	mov	r3, r0
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d109      	bne.n	800c208 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	2206      	movs	r2, #6
 800c1f8:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c200:	2103      	movs	r1, #3
 800c202:	6878      	ldr	r0, [r7, #4]
 800c204:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c206:	e073      	b.n	800c2f0 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	220d      	movs	r2, #13
 800c20c:	701a      	strb	r2, [r3, #0]
      break;
 800c20e:	e06f      	b.n	800c2f0 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	220d      	movs	r2, #13
 800c214:	701a      	strb	r2, [r3, #0]
      break;
 800c216:	e06b      	b.n	800c2f0 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d017      	beq.n	800c252 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c228:	691b      	ldr	r3, [r3, #16]
 800c22a:	6878      	ldr	r0, [r7, #4]
 800c22c:	4798      	blx	r3
 800c22e:	4603      	mov	r3, r0
 800c230:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800c232:	7bbb      	ldrb	r3, [r7, #14]
 800c234:	b2db      	uxtb	r3, r3
 800c236:	2b00      	cmp	r3, #0
 800c238:	d103      	bne.n	800c242 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	220b      	movs	r2, #11
 800c23e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c240:	e058      	b.n	800c2f4 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800c242:	7bbb      	ldrb	r3, [r7, #14]
 800c244:	b2db      	uxtb	r3, r3
 800c246:	2b02      	cmp	r3, #2
 800c248:	d154      	bne.n	800c2f4 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	220d      	movs	r2, #13
 800c24e:	701a      	strb	r2, [r3, #0]
      break;
 800c250:	e050      	b.n	800c2f4 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	220d      	movs	r2, #13
 800c256:	701a      	strb	r2, [r3, #0]
      break;
 800c258:	e04c      	b.n	800c2f4 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c260:	2b00      	cmp	r3, #0
 800c262:	d049      	beq.n	800c2f8 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c26a:	695b      	ldr	r3, [r3, #20]
 800c26c:	6878      	ldr	r0, [r7, #4]
 800c26e:	4798      	blx	r3
      }
      break;
 800c270:	e042      	b.n	800c2f8 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	2200      	movs	r2, #0
 800c276:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800c27a:	6878      	ldr	r0, [r7, #4]
 800c27c:	f7ff fd72 	bl	800bd64 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c286:	2b00      	cmp	r3, #0
 800c288:	d009      	beq.n	800c29e <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c290:	68db      	ldr	r3, [r3, #12]
 800c292:	6878      	ldr	r0, [r7, #4]
 800c294:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	2200      	movs	r2, #0
 800c29a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d005      	beq.n	800c2b4 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c2ae:	2105      	movs	r1, #5
 800c2b0:	6878      	ldr	r0, [r7, #4]
 800c2b2:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800c2ba:	b2db      	uxtb	r3, r3
 800c2bc:	2b01      	cmp	r3, #1
 800c2be:	d107      	bne.n	800c2d0 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800c2c8:	6878      	ldr	r0, [r7, #4]
 800c2ca:	f7ff fe2b 	bl	800bf24 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c2ce:	e014      	b.n	800c2fa <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800c2d0:	6878      	ldr	r0, [r7, #4]
 800c2d2:	f001 f9b7 	bl	800d644 <USBH_LL_Start>
      break;
 800c2d6:	e010      	b.n	800c2fa <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800c2d8:	bf00      	nop
 800c2da:	e00e      	b.n	800c2fa <USBH_Process+0x3b6>
      break;
 800c2dc:	bf00      	nop
 800c2de:	e00c      	b.n	800c2fa <USBH_Process+0x3b6>
      break;
 800c2e0:	bf00      	nop
 800c2e2:	e00a      	b.n	800c2fa <USBH_Process+0x3b6>
    break;
 800c2e4:	bf00      	nop
 800c2e6:	e008      	b.n	800c2fa <USBH_Process+0x3b6>
      break;
 800c2e8:	bf00      	nop
 800c2ea:	e006      	b.n	800c2fa <USBH_Process+0x3b6>
      break;
 800c2ec:	bf00      	nop
 800c2ee:	e004      	b.n	800c2fa <USBH_Process+0x3b6>
      break;
 800c2f0:	bf00      	nop
 800c2f2:	e002      	b.n	800c2fa <USBH_Process+0x3b6>
      break;
 800c2f4:	bf00      	nop
 800c2f6:	e000      	b.n	800c2fa <USBH_Process+0x3b6>
      break;
 800c2f8:	bf00      	nop
  }
  return USBH_OK;
 800c2fa:	2300      	movs	r3, #0
}
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	3710      	adds	r7, #16
 800c300:	46bd      	mov	sp, r7
 800c302:	bd80      	pop	{r7, pc}

0800c304 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800c304:	b580      	push	{r7, lr}
 800c306:	b088      	sub	sp, #32
 800c308:	af04      	add	r7, sp, #16
 800c30a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800c30c:	2301      	movs	r3, #1
 800c30e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800c310:	2301      	movs	r3, #1
 800c312:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	785b      	ldrb	r3, [r3, #1]
 800c318:	2b07      	cmp	r3, #7
 800c31a:	f200 81c1 	bhi.w	800c6a0 <USBH_HandleEnum+0x39c>
 800c31e:	a201      	add	r2, pc, #4	; (adr r2, 800c324 <USBH_HandleEnum+0x20>)
 800c320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c324:	0800c345 	.word	0x0800c345
 800c328:	0800c403 	.word	0x0800c403
 800c32c:	0800c46d 	.word	0x0800c46d
 800c330:	0800c4fb 	.word	0x0800c4fb
 800c334:	0800c565 	.word	0x0800c565
 800c338:	0800c5d5 	.word	0x0800c5d5
 800c33c:	0800c61b 	.word	0x0800c61b
 800c340:	0800c661 	.word	0x0800c661
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800c344:	2108      	movs	r1, #8
 800c346:	6878      	ldr	r0, [r7, #4]
 800c348:	f000 fa50 	bl	800c7ec <USBH_Get_DevDesc>
 800c34c:	4603      	mov	r3, r0
 800c34e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c350:	7bbb      	ldrb	r3, [r7, #14]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d130      	bne.n	800c3b8 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	2201      	movs	r2, #1
 800c364:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	7919      	ldrb	r1, [r3, #4]
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c376:	687a      	ldr	r2, [r7, #4]
 800c378:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c37a:	b292      	uxth	r2, r2
 800c37c:	9202      	str	r2, [sp, #8]
 800c37e:	2200      	movs	r2, #0
 800c380:	9201      	str	r2, [sp, #4]
 800c382:	9300      	str	r3, [sp, #0]
 800c384:	4603      	mov	r3, r0
 800c386:	2280      	movs	r2, #128	; 0x80
 800c388:	6878      	ldr	r0, [r7, #4]
 800c38a:	f000 ff79 	bl	800d280 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	7959      	ldrb	r1, [r3, #5]
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c39e:	687a      	ldr	r2, [r7, #4]
 800c3a0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c3a2:	b292      	uxth	r2, r2
 800c3a4:	9202      	str	r2, [sp, #8]
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	9201      	str	r2, [sp, #4]
 800c3aa:	9300      	str	r3, [sp, #0]
 800c3ac:	4603      	mov	r3, r0
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	6878      	ldr	r0, [r7, #4]
 800c3b2:	f000 ff65 	bl	800d280 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c3b6:	e175      	b.n	800c6a4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c3b8:	7bbb      	ldrb	r3, [r7, #14]
 800c3ba:	2b03      	cmp	r3, #3
 800c3bc:	f040 8172 	bne.w	800c6a4 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c3c6:	3301      	adds	r3, #1
 800c3c8:	b2da      	uxtb	r2, r3
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c3d6:	2b03      	cmp	r3, #3
 800c3d8:	d903      	bls.n	800c3e2 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	220d      	movs	r2, #13
 800c3de:	701a      	strb	r2, [r3, #0]
      break;
 800c3e0:	e160      	b.n	800c6a4 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	795b      	ldrb	r3, [r3, #5]
 800c3e6:	4619      	mov	r1, r3
 800c3e8:	6878      	ldr	r0, [r7, #4]
 800c3ea:	f000 ff99 	bl	800d320 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	791b      	ldrb	r3, [r3, #4]
 800c3f2:	4619      	mov	r1, r3
 800c3f4:	6878      	ldr	r0, [r7, #4]
 800c3f6:	f000 ff93 	bl	800d320 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	701a      	strb	r2, [r3, #0]
      break;
 800c400:	e150      	b.n	800c6a4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800c402:	2112      	movs	r1, #18
 800c404:	6878      	ldr	r0, [r7, #4]
 800c406:	f000 f9f1 	bl	800c7ec <USBH_Get_DevDesc>
 800c40a:	4603      	mov	r3, r0
 800c40c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c40e:	7bbb      	ldrb	r3, [r7, #14]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d103      	bne.n	800c41c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	2202      	movs	r2, #2
 800c418:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c41a:	e145      	b.n	800c6a8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c41c:	7bbb      	ldrb	r3, [r7, #14]
 800c41e:	2b03      	cmp	r3, #3
 800c420:	f040 8142 	bne.w	800c6a8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c42a:	3301      	adds	r3, #1
 800c42c:	b2da      	uxtb	r2, r3
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c43a:	2b03      	cmp	r3, #3
 800c43c:	d903      	bls.n	800c446 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	220d      	movs	r2, #13
 800c442:	701a      	strb	r2, [r3, #0]
      break;
 800c444:	e130      	b.n	800c6a8 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	795b      	ldrb	r3, [r3, #5]
 800c44a:	4619      	mov	r1, r3
 800c44c:	6878      	ldr	r0, [r7, #4]
 800c44e:	f000 ff67 	bl	800d320 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	791b      	ldrb	r3, [r3, #4]
 800c456:	4619      	mov	r1, r3
 800c458:	6878      	ldr	r0, [r7, #4]
 800c45a:	f000 ff61 	bl	800d320 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	2200      	movs	r2, #0
 800c462:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	2200      	movs	r2, #0
 800c468:	701a      	strb	r2, [r3, #0]
      break;
 800c46a:	e11d      	b.n	800c6a8 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800c46c:	2101      	movs	r1, #1
 800c46e:	6878      	ldr	r0, [r7, #4]
 800c470:	f000 fa68 	bl	800c944 <USBH_SetAddress>
 800c474:	4603      	mov	r3, r0
 800c476:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c478:	7bbb      	ldrb	r3, [r7, #14]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d132      	bne.n	800c4e4 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800c47e:	2002      	movs	r0, #2
 800c480:	f001 fa45 	bl	800d90e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2201      	movs	r2, #1
 800c488:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	2203      	movs	r2, #3
 800c490:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	7919      	ldrb	r1, [r3, #4]
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c4a2:	687a      	ldr	r2, [r7, #4]
 800c4a4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c4a6:	b292      	uxth	r2, r2
 800c4a8:	9202      	str	r2, [sp, #8]
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	9201      	str	r2, [sp, #4]
 800c4ae:	9300      	str	r3, [sp, #0]
 800c4b0:	4603      	mov	r3, r0
 800c4b2:	2280      	movs	r2, #128	; 0x80
 800c4b4:	6878      	ldr	r0, [r7, #4]
 800c4b6:	f000 fee3 	bl	800d280 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	7959      	ldrb	r1, [r3, #5]
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c4ca:	687a      	ldr	r2, [r7, #4]
 800c4cc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c4ce:	b292      	uxth	r2, r2
 800c4d0:	9202      	str	r2, [sp, #8]
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	9201      	str	r2, [sp, #4]
 800c4d6:	9300      	str	r3, [sp, #0]
 800c4d8:	4603      	mov	r3, r0
 800c4da:	2200      	movs	r2, #0
 800c4dc:	6878      	ldr	r0, [r7, #4]
 800c4de:	f000 fecf 	bl	800d280 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c4e2:	e0e3      	b.n	800c6ac <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c4e4:	7bbb      	ldrb	r3, [r7, #14]
 800c4e6:	2b03      	cmp	r3, #3
 800c4e8:	f040 80e0 	bne.w	800c6ac <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	220d      	movs	r2, #13
 800c4f0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	705a      	strb	r2, [r3, #1]
      break;
 800c4f8:	e0d8      	b.n	800c6ac <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800c4fa:	2109      	movs	r1, #9
 800c4fc:	6878      	ldr	r0, [r7, #4]
 800c4fe:	f000 f99d 	bl	800c83c <USBH_Get_CfgDesc>
 800c502:	4603      	mov	r3, r0
 800c504:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c506:	7bbb      	ldrb	r3, [r7, #14]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d103      	bne.n	800c514 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	2204      	movs	r2, #4
 800c510:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c512:	e0cd      	b.n	800c6b0 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c514:	7bbb      	ldrb	r3, [r7, #14]
 800c516:	2b03      	cmp	r3, #3
 800c518:	f040 80ca 	bne.w	800c6b0 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c522:	3301      	adds	r3, #1
 800c524:	b2da      	uxtb	r2, r3
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c532:	2b03      	cmp	r3, #3
 800c534:	d903      	bls.n	800c53e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	220d      	movs	r2, #13
 800c53a:	701a      	strb	r2, [r3, #0]
      break;
 800c53c:	e0b8      	b.n	800c6b0 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	795b      	ldrb	r3, [r3, #5]
 800c542:	4619      	mov	r1, r3
 800c544:	6878      	ldr	r0, [r7, #4]
 800c546:	f000 feeb 	bl	800d320 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	791b      	ldrb	r3, [r3, #4]
 800c54e:	4619      	mov	r1, r3
 800c550:	6878      	ldr	r0, [r7, #4]
 800c552:	f000 fee5 	bl	800d320 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	2200      	movs	r2, #0
 800c55a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	2200      	movs	r2, #0
 800c560:	701a      	strb	r2, [r3, #0]
      break;
 800c562:	e0a5      	b.n	800c6b0 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800c56a:	4619      	mov	r1, r3
 800c56c:	6878      	ldr	r0, [r7, #4]
 800c56e:	f000 f965 	bl	800c83c <USBH_Get_CfgDesc>
 800c572:	4603      	mov	r3, r0
 800c574:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c576:	7bbb      	ldrb	r3, [r7, #14]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d103      	bne.n	800c584 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2205      	movs	r2, #5
 800c580:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c582:	e097      	b.n	800c6b4 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c584:	7bbb      	ldrb	r3, [r7, #14]
 800c586:	2b03      	cmp	r3, #3
 800c588:	f040 8094 	bne.w	800c6b4 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c592:	3301      	adds	r3, #1
 800c594:	b2da      	uxtb	r2, r3
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c5a2:	2b03      	cmp	r3, #3
 800c5a4:	d903      	bls.n	800c5ae <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	220d      	movs	r2, #13
 800c5aa:	701a      	strb	r2, [r3, #0]
      break;
 800c5ac:	e082      	b.n	800c6b4 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	795b      	ldrb	r3, [r3, #5]
 800c5b2:	4619      	mov	r1, r3
 800c5b4:	6878      	ldr	r0, [r7, #4]
 800c5b6:	f000 feb3 	bl	800d320 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	791b      	ldrb	r3, [r3, #4]
 800c5be:	4619      	mov	r1, r3
 800c5c0:	6878      	ldr	r0, [r7, #4]
 800c5c2:	f000 fead 	bl	800d320 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	701a      	strb	r2, [r3, #0]
      break;
 800c5d2:	e06f      	b.n	800c6b4 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d019      	beq.n	800c612 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800c5ea:	23ff      	movs	r3, #255	; 0xff
 800c5ec:	6878      	ldr	r0, [r7, #4]
 800c5ee:	f000 f949 	bl	800c884 <USBH_Get_StringDesc>
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c5f6:	7bbb      	ldrb	r3, [r7, #14]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d103      	bne.n	800c604 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	2206      	movs	r2, #6
 800c600:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800c602:	e059      	b.n	800c6b8 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c604:	7bbb      	ldrb	r3, [r7, #14]
 800c606:	2b03      	cmp	r3, #3
 800c608:	d156      	bne.n	800c6b8 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	2206      	movs	r2, #6
 800c60e:	705a      	strb	r2, [r3, #1]
      break;
 800c610:	e052      	b.n	800c6b8 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	2206      	movs	r2, #6
 800c616:	705a      	strb	r2, [r3, #1]
      break;
 800c618:	e04e      	b.n	800c6b8 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800c620:	2b00      	cmp	r3, #0
 800c622:	d019      	beq.n	800c658 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800c630:	23ff      	movs	r3, #255	; 0xff
 800c632:	6878      	ldr	r0, [r7, #4]
 800c634:	f000 f926 	bl	800c884 <USBH_Get_StringDesc>
 800c638:	4603      	mov	r3, r0
 800c63a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c63c:	7bbb      	ldrb	r3, [r7, #14]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d103      	bne.n	800c64a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	2207      	movs	r2, #7
 800c646:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800c648:	e038      	b.n	800c6bc <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c64a:	7bbb      	ldrb	r3, [r7, #14]
 800c64c:	2b03      	cmp	r3, #3
 800c64e:	d135      	bne.n	800c6bc <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	2207      	movs	r2, #7
 800c654:	705a      	strb	r2, [r3, #1]
      break;
 800c656:	e031      	b.n	800c6bc <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	2207      	movs	r2, #7
 800c65c:	705a      	strb	r2, [r3, #1]
      break;
 800c65e:	e02d      	b.n	800c6bc <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800c666:	2b00      	cmp	r3, #0
 800c668:	d017      	beq.n	800c69a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c676:	23ff      	movs	r3, #255	; 0xff
 800c678:	6878      	ldr	r0, [r7, #4]
 800c67a:	f000 f903 	bl	800c884 <USBH_Get_StringDesc>
 800c67e:	4603      	mov	r3, r0
 800c680:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c682:	7bbb      	ldrb	r3, [r7, #14]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d102      	bne.n	800c68e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800c688:	2300      	movs	r3, #0
 800c68a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800c68c:	e018      	b.n	800c6c0 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c68e:	7bbb      	ldrb	r3, [r7, #14]
 800c690:	2b03      	cmp	r3, #3
 800c692:	d115      	bne.n	800c6c0 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800c694:	2300      	movs	r3, #0
 800c696:	73fb      	strb	r3, [r7, #15]
      break;
 800c698:	e012      	b.n	800c6c0 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800c69a:	2300      	movs	r3, #0
 800c69c:	73fb      	strb	r3, [r7, #15]
      break;
 800c69e:	e00f      	b.n	800c6c0 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800c6a0:	bf00      	nop
 800c6a2:	e00e      	b.n	800c6c2 <USBH_HandleEnum+0x3be>
      break;
 800c6a4:	bf00      	nop
 800c6a6:	e00c      	b.n	800c6c2 <USBH_HandleEnum+0x3be>
      break;
 800c6a8:	bf00      	nop
 800c6aa:	e00a      	b.n	800c6c2 <USBH_HandleEnum+0x3be>
      break;
 800c6ac:	bf00      	nop
 800c6ae:	e008      	b.n	800c6c2 <USBH_HandleEnum+0x3be>
      break;
 800c6b0:	bf00      	nop
 800c6b2:	e006      	b.n	800c6c2 <USBH_HandleEnum+0x3be>
      break;
 800c6b4:	bf00      	nop
 800c6b6:	e004      	b.n	800c6c2 <USBH_HandleEnum+0x3be>
      break;
 800c6b8:	bf00      	nop
 800c6ba:	e002      	b.n	800c6c2 <USBH_HandleEnum+0x3be>
      break;
 800c6bc:	bf00      	nop
 800c6be:	e000      	b.n	800c6c2 <USBH_HandleEnum+0x3be>
      break;
 800c6c0:	bf00      	nop
  }
  return Status;
 800c6c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	3710      	adds	r7, #16
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	bd80      	pop	{r7, pc}

0800c6cc <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800c6cc:	b480      	push	{r7}
 800c6ce:	b083      	sub	sp, #12
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
 800c6d4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	683a      	ldr	r2, [r7, #0]
 800c6da:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800c6de:	bf00      	nop
 800c6e0:	370c      	adds	r7, #12
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e8:	4770      	bx	lr

0800c6ea <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800c6ea:	b580      	push	{r7, lr}
 800c6ec:	b082      	sub	sp, #8
 800c6ee:	af00      	add	r7, sp, #0
 800c6f0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c6f8:	1c5a      	adds	r2, r3, #1
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800c700:	6878      	ldr	r0, [r7, #4]
 800c702:	f000 f804 	bl	800c70e <USBH_HandleSof>
}
 800c706:	bf00      	nop
 800c708:	3708      	adds	r7, #8
 800c70a:	46bd      	mov	sp, r7
 800c70c:	bd80      	pop	{r7, pc}

0800c70e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800c70e:	b580      	push	{r7, lr}
 800c710:	b082      	sub	sp, #8
 800c712:	af00      	add	r7, sp, #0
 800c714:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	781b      	ldrb	r3, [r3, #0]
 800c71a:	b2db      	uxtb	r3, r3
 800c71c:	2b0b      	cmp	r3, #11
 800c71e:	d10a      	bne.n	800c736 <USBH_HandleSof+0x28>
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c726:	2b00      	cmp	r3, #0
 800c728:	d005      	beq.n	800c736 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c730:	699b      	ldr	r3, [r3, #24]
 800c732:	6878      	ldr	r0, [r7, #4]
 800c734:	4798      	blx	r3
  }
}
 800c736:	bf00      	nop
 800c738:	3708      	adds	r7, #8
 800c73a:	46bd      	mov	sp, r7
 800c73c:	bd80      	pop	{r7, pc}

0800c73e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800c73e:	b480      	push	{r7}
 800c740:	b083      	sub	sp, #12
 800c742:	af00      	add	r7, sp, #0
 800c744:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	2201      	movs	r2, #1
 800c74a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800c74e:	bf00      	nop
}
 800c750:	370c      	adds	r7, #12
 800c752:	46bd      	mov	sp, r7
 800c754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c758:	4770      	bx	lr

0800c75a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800c75a:	b480      	push	{r7}
 800c75c:	b083      	sub	sp, #12
 800c75e:	af00      	add	r7, sp, #0
 800c760:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	2200      	movs	r2, #0
 800c766:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800c76a:	bf00      	nop
}
 800c76c:	370c      	adds	r7, #12
 800c76e:	46bd      	mov	sp, r7
 800c770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c774:	4770      	bx	lr

0800c776 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800c776:	b480      	push	{r7}
 800c778:	b083      	sub	sp, #12
 800c77a:	af00      	add	r7, sp, #0
 800c77c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	2201      	movs	r2, #1
 800c782:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	2200      	movs	r2, #0
 800c78a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	2200      	movs	r2, #0
 800c792:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800c796:	2300      	movs	r3, #0
}
 800c798:	4618      	mov	r0, r3
 800c79a:	370c      	adds	r7, #12
 800c79c:	46bd      	mov	sp, r7
 800c79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a2:	4770      	bx	lr

0800c7a4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b082      	sub	sp, #8
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	2201      	movs	r2, #1
 800c7b0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	2200      	movs	r2, #0
 800c7c0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800c7c4:	6878      	ldr	r0, [r7, #4]
 800c7c6:	f000 ff58 	bl	800d67a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	791b      	ldrb	r3, [r3, #4]
 800c7ce:	4619      	mov	r1, r3
 800c7d0:	6878      	ldr	r0, [r7, #4]
 800c7d2:	f000 fda5 	bl	800d320 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	795b      	ldrb	r3, [r3, #5]
 800c7da:	4619      	mov	r1, r3
 800c7dc:	6878      	ldr	r0, [r7, #4]
 800c7de:	f000 fd9f 	bl	800d320 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800c7e2:	2300      	movs	r3, #0
}
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	3708      	adds	r7, #8
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	bd80      	pop	{r7, pc}

0800c7ec <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b086      	sub	sp, #24
 800c7f0:	af02      	add	r7, sp, #8
 800c7f2:	6078      	str	r0, [r7, #4]
 800c7f4:	460b      	mov	r3, r1
 800c7f6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800c7fe:	78fb      	ldrb	r3, [r7, #3]
 800c800:	b29b      	uxth	r3, r3
 800c802:	9300      	str	r3, [sp, #0]
 800c804:	4613      	mov	r3, r2
 800c806:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c80a:	2100      	movs	r1, #0
 800c80c:	6878      	ldr	r0, [r7, #4]
 800c80e:	f000 f864 	bl	800c8da <USBH_GetDescriptor>
 800c812:	4603      	mov	r3, r0
 800c814:	73fb      	strb	r3, [r7, #15]
 800c816:	7bfb      	ldrb	r3, [r7, #15]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d10a      	bne.n	800c832 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	f203 3026 	addw	r0, r3, #806	; 0x326
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c828:	78fa      	ldrb	r2, [r7, #3]
 800c82a:	b292      	uxth	r2, r2
 800c82c:	4619      	mov	r1, r3
 800c82e:	f000 f918 	bl	800ca62 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800c832:	7bfb      	ldrb	r3, [r7, #15]
}
 800c834:	4618      	mov	r0, r3
 800c836:	3710      	adds	r7, #16
 800c838:	46bd      	mov	sp, r7
 800c83a:	bd80      	pop	{r7, pc}

0800c83c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b086      	sub	sp, #24
 800c840:	af02      	add	r7, sp, #8
 800c842:	6078      	str	r0, [r7, #4]
 800c844:	460b      	mov	r3, r1
 800c846:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	331c      	adds	r3, #28
 800c84c:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800c84e:	887b      	ldrh	r3, [r7, #2]
 800c850:	9300      	str	r3, [sp, #0]
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c858:	2100      	movs	r1, #0
 800c85a:	6878      	ldr	r0, [r7, #4]
 800c85c:	f000 f83d 	bl	800c8da <USBH_GetDescriptor>
 800c860:	4603      	mov	r3, r0
 800c862:	72fb      	strb	r3, [r7, #11]
 800c864:	7afb      	ldrb	r3, [r7, #11]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d107      	bne.n	800c87a <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800c870:	887a      	ldrh	r2, [r7, #2]
 800c872:	68f9      	ldr	r1, [r7, #12]
 800c874:	4618      	mov	r0, r3
 800c876:	f000 f964 	bl	800cb42 <USBH_ParseCfgDesc>
  }

  return status;
 800c87a:	7afb      	ldrb	r3, [r7, #11]
}
 800c87c:	4618      	mov	r0, r3
 800c87e:	3710      	adds	r7, #16
 800c880:	46bd      	mov	sp, r7
 800c882:	bd80      	pop	{r7, pc}

0800c884 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800c884:	b580      	push	{r7, lr}
 800c886:	b088      	sub	sp, #32
 800c888:	af02      	add	r7, sp, #8
 800c88a:	60f8      	str	r0, [r7, #12]
 800c88c:	607a      	str	r2, [r7, #4]
 800c88e:	461a      	mov	r2, r3
 800c890:	460b      	mov	r3, r1
 800c892:	72fb      	strb	r3, [r7, #11]
 800c894:	4613      	mov	r3, r2
 800c896:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800c898:	7afb      	ldrb	r3, [r7, #11]
 800c89a:	b29b      	uxth	r3, r3
 800c89c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800c8a0:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800c8a8:	893b      	ldrh	r3, [r7, #8]
 800c8aa:	9300      	str	r3, [sp, #0]
 800c8ac:	460b      	mov	r3, r1
 800c8ae:	2100      	movs	r1, #0
 800c8b0:	68f8      	ldr	r0, [r7, #12]
 800c8b2:	f000 f812 	bl	800c8da <USBH_GetDescriptor>
 800c8b6:	4603      	mov	r3, r0
 800c8b8:	75fb      	strb	r3, [r7, #23]
 800c8ba:	7dfb      	ldrb	r3, [r7, #23]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d107      	bne.n	800c8d0 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c8c6:	893a      	ldrh	r2, [r7, #8]
 800c8c8:	6879      	ldr	r1, [r7, #4]
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	f000 fa37 	bl	800cd3e <USBH_ParseStringDesc>
  }

  return status;
 800c8d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	3718      	adds	r7, #24
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	bd80      	pop	{r7, pc}

0800c8da <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800c8da:	b580      	push	{r7, lr}
 800c8dc:	b084      	sub	sp, #16
 800c8de:	af00      	add	r7, sp, #0
 800c8e0:	60f8      	str	r0, [r7, #12]
 800c8e2:	607b      	str	r3, [r7, #4]
 800c8e4:	460b      	mov	r3, r1
 800c8e6:	72fb      	strb	r3, [r7, #11]
 800c8e8:	4613      	mov	r3, r2
 800c8ea:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	789b      	ldrb	r3, [r3, #2]
 800c8f0:	2b01      	cmp	r3, #1
 800c8f2:	d11c      	bne.n	800c92e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800c8f4:	7afb      	ldrb	r3, [r7, #11]
 800c8f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c8fa:	b2da      	uxtb	r2, r3
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	2206      	movs	r2, #6
 800c904:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	893a      	ldrh	r2, [r7, #8]
 800c90a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800c90c:	893b      	ldrh	r3, [r7, #8]
 800c90e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c912:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c916:	d104      	bne.n	800c922 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	f240 4209 	movw	r2, #1033	; 0x409
 800c91e:	829a      	strh	r2, [r3, #20]
 800c920:	e002      	b.n	800c928 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	2200      	movs	r2, #0
 800c926:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	8b3a      	ldrh	r2, [r7, #24]
 800c92c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800c92e:	8b3b      	ldrh	r3, [r7, #24]
 800c930:	461a      	mov	r2, r3
 800c932:	6879      	ldr	r1, [r7, #4]
 800c934:	68f8      	ldr	r0, [r7, #12]
 800c936:	f000 fa50 	bl	800cdda <USBH_CtlReq>
 800c93a:	4603      	mov	r3, r0
}
 800c93c:	4618      	mov	r0, r3
 800c93e:	3710      	adds	r7, #16
 800c940:	46bd      	mov	sp, r7
 800c942:	bd80      	pop	{r7, pc}

0800c944 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800c944:	b580      	push	{r7, lr}
 800c946:	b082      	sub	sp, #8
 800c948:	af00      	add	r7, sp, #0
 800c94a:	6078      	str	r0, [r7, #4]
 800c94c:	460b      	mov	r3, r1
 800c94e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	789b      	ldrb	r3, [r3, #2]
 800c954:	2b01      	cmp	r3, #1
 800c956:	d10f      	bne.n	800c978 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	2200      	movs	r2, #0
 800c95c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	2205      	movs	r2, #5
 800c962:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800c964:	78fb      	ldrb	r3, [r7, #3]
 800c966:	b29a      	uxth	r2, r3
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	2200      	movs	r2, #0
 800c970:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	2200      	movs	r2, #0
 800c976:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800c978:	2200      	movs	r2, #0
 800c97a:	2100      	movs	r1, #0
 800c97c:	6878      	ldr	r0, [r7, #4]
 800c97e:	f000 fa2c 	bl	800cdda <USBH_CtlReq>
 800c982:	4603      	mov	r3, r0
}
 800c984:	4618      	mov	r0, r3
 800c986:	3708      	adds	r7, #8
 800c988:	46bd      	mov	sp, r7
 800c98a:	bd80      	pop	{r7, pc}

0800c98c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b082      	sub	sp, #8
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]
 800c994:	460b      	mov	r3, r1
 800c996:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	789b      	ldrb	r3, [r3, #2]
 800c99c:	2b01      	cmp	r3, #1
 800c99e:	d10e      	bne.n	800c9be <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	2200      	movs	r2, #0
 800c9a4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	2209      	movs	r2, #9
 800c9aa:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	887a      	ldrh	r2, [r7, #2]
 800c9b0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	2200      	movs	r2, #0
 800c9bc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800c9be:	2200      	movs	r2, #0
 800c9c0:	2100      	movs	r1, #0
 800c9c2:	6878      	ldr	r0, [r7, #4]
 800c9c4:	f000 fa09 	bl	800cdda <USBH_CtlReq>
 800c9c8:	4603      	mov	r3, r0
}
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	3708      	adds	r7, #8
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	bd80      	pop	{r7, pc}

0800c9d2 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800c9d2:	b580      	push	{r7, lr}
 800c9d4:	b082      	sub	sp, #8
 800c9d6:	af00      	add	r7, sp, #0
 800c9d8:	6078      	str	r0, [r7, #4]
 800c9da:	460b      	mov	r3, r1
 800c9dc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	789b      	ldrb	r3, [r3, #2]
 800c9e2:	2b01      	cmp	r3, #1
 800c9e4:	d10f      	bne.n	800ca06 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	2203      	movs	r2, #3
 800c9f0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800c9f2:	78fb      	ldrb	r3, [r7, #3]
 800c9f4:	b29a      	uxth	r2, r3
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	2200      	movs	r2, #0
 800c9fe:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	2200      	movs	r2, #0
 800ca04:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800ca06:	2200      	movs	r2, #0
 800ca08:	2100      	movs	r1, #0
 800ca0a:	6878      	ldr	r0, [r7, #4]
 800ca0c:	f000 f9e5 	bl	800cdda <USBH_CtlReq>
 800ca10:	4603      	mov	r3, r0
}
 800ca12:	4618      	mov	r0, r3
 800ca14:	3708      	adds	r7, #8
 800ca16:	46bd      	mov	sp, r7
 800ca18:	bd80      	pop	{r7, pc}

0800ca1a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800ca1a:	b580      	push	{r7, lr}
 800ca1c:	b082      	sub	sp, #8
 800ca1e:	af00      	add	r7, sp, #0
 800ca20:	6078      	str	r0, [r7, #4]
 800ca22:	460b      	mov	r3, r1
 800ca24:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	789b      	ldrb	r3, [r3, #2]
 800ca2a:	2b01      	cmp	r3, #1
 800ca2c:	d10f      	bne.n	800ca4e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	2202      	movs	r2, #2
 800ca32:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	2201      	movs	r2, #1
 800ca38:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	2200      	movs	r2, #0
 800ca3e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800ca40:	78fb      	ldrb	r3, [r7, #3]
 800ca42:	b29a      	uxth	r2, r3
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	2200      	movs	r2, #0
 800ca4c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800ca4e:	2200      	movs	r2, #0
 800ca50:	2100      	movs	r1, #0
 800ca52:	6878      	ldr	r0, [r7, #4]
 800ca54:	f000 f9c1 	bl	800cdda <USBH_CtlReq>
 800ca58:	4603      	mov	r3, r0
}
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	3708      	adds	r7, #8
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	bd80      	pop	{r7, pc}

0800ca62 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800ca62:	b480      	push	{r7}
 800ca64:	b085      	sub	sp, #20
 800ca66:	af00      	add	r7, sp, #0
 800ca68:	60f8      	str	r0, [r7, #12]
 800ca6a:	60b9      	str	r1, [r7, #8]
 800ca6c:	4613      	mov	r3, r2
 800ca6e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800ca70:	68bb      	ldr	r3, [r7, #8]
 800ca72:	781a      	ldrb	r2, [r3, #0]
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800ca78:	68bb      	ldr	r3, [r7, #8]
 800ca7a:	785a      	ldrb	r2, [r3, #1]
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800ca80:	68bb      	ldr	r3, [r7, #8]
 800ca82:	3302      	adds	r3, #2
 800ca84:	781b      	ldrb	r3, [r3, #0]
 800ca86:	b29a      	uxth	r2, r3
 800ca88:	68bb      	ldr	r3, [r7, #8]
 800ca8a:	3303      	adds	r3, #3
 800ca8c:	781b      	ldrb	r3, [r3, #0]
 800ca8e:	b29b      	uxth	r3, r3
 800ca90:	021b      	lsls	r3, r3, #8
 800ca92:	b29b      	uxth	r3, r3
 800ca94:	4313      	orrs	r3, r2
 800ca96:	b29a      	uxth	r2, r3
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800ca9c:	68bb      	ldr	r3, [r7, #8]
 800ca9e:	791a      	ldrb	r2, [r3, #4]
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800caa4:	68bb      	ldr	r3, [r7, #8]
 800caa6:	795a      	ldrb	r2, [r3, #5]
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800caac:	68bb      	ldr	r3, [r7, #8]
 800caae:	799a      	ldrb	r2, [r3, #6]
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800cab4:	68bb      	ldr	r3, [r7, #8]
 800cab6:	79da      	ldrb	r2, [r3, #7]
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800cabc:	88fb      	ldrh	r3, [r7, #6]
 800cabe:	2b08      	cmp	r3, #8
 800cac0:	d939      	bls.n	800cb36 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800cac2:	68bb      	ldr	r3, [r7, #8]
 800cac4:	3308      	adds	r3, #8
 800cac6:	781b      	ldrb	r3, [r3, #0]
 800cac8:	b29a      	uxth	r2, r3
 800caca:	68bb      	ldr	r3, [r7, #8]
 800cacc:	3309      	adds	r3, #9
 800cace:	781b      	ldrb	r3, [r3, #0]
 800cad0:	b29b      	uxth	r3, r3
 800cad2:	021b      	lsls	r3, r3, #8
 800cad4:	b29b      	uxth	r3, r3
 800cad6:	4313      	orrs	r3, r2
 800cad8:	b29a      	uxth	r2, r3
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800cade:	68bb      	ldr	r3, [r7, #8]
 800cae0:	330a      	adds	r3, #10
 800cae2:	781b      	ldrb	r3, [r3, #0]
 800cae4:	b29a      	uxth	r2, r3
 800cae6:	68bb      	ldr	r3, [r7, #8]
 800cae8:	330b      	adds	r3, #11
 800caea:	781b      	ldrb	r3, [r3, #0]
 800caec:	b29b      	uxth	r3, r3
 800caee:	021b      	lsls	r3, r3, #8
 800caf0:	b29b      	uxth	r3, r3
 800caf2:	4313      	orrs	r3, r2
 800caf4:	b29a      	uxth	r2, r3
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800cafa:	68bb      	ldr	r3, [r7, #8]
 800cafc:	330c      	adds	r3, #12
 800cafe:	781b      	ldrb	r3, [r3, #0]
 800cb00:	b29a      	uxth	r2, r3
 800cb02:	68bb      	ldr	r3, [r7, #8]
 800cb04:	330d      	adds	r3, #13
 800cb06:	781b      	ldrb	r3, [r3, #0]
 800cb08:	b29b      	uxth	r3, r3
 800cb0a:	021b      	lsls	r3, r3, #8
 800cb0c:	b29b      	uxth	r3, r3
 800cb0e:	4313      	orrs	r3, r2
 800cb10:	b29a      	uxth	r2, r3
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800cb16:	68bb      	ldr	r3, [r7, #8]
 800cb18:	7b9a      	ldrb	r2, [r3, #14]
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800cb1e:	68bb      	ldr	r3, [r7, #8]
 800cb20:	7bda      	ldrb	r2, [r3, #15]
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800cb26:	68bb      	ldr	r3, [r7, #8]
 800cb28:	7c1a      	ldrb	r2, [r3, #16]
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800cb2e:	68bb      	ldr	r3, [r7, #8]
 800cb30:	7c5a      	ldrb	r2, [r3, #17]
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	745a      	strb	r2, [r3, #17]
  }
}
 800cb36:	bf00      	nop
 800cb38:	3714      	adds	r7, #20
 800cb3a:	46bd      	mov	sp, r7
 800cb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb40:	4770      	bx	lr

0800cb42 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800cb42:	b580      	push	{r7, lr}
 800cb44:	b08a      	sub	sp, #40	; 0x28
 800cb46:	af00      	add	r7, sp, #0
 800cb48:	60f8      	str	r0, [r7, #12]
 800cb4a:	60b9      	str	r1, [r7, #8]
 800cb4c:	4613      	mov	r3, r2
 800cb4e:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800cb50:	68bb      	ldr	r3, [r7, #8]
 800cb52:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800cb54:	2300      	movs	r3, #0
 800cb56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800cb60:	68bb      	ldr	r3, [r7, #8]
 800cb62:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800cb64:	68bb      	ldr	r3, [r7, #8]
 800cb66:	781a      	ldrb	r2, [r3, #0]
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800cb6c:	68bb      	ldr	r3, [r7, #8]
 800cb6e:	785a      	ldrb	r2, [r3, #1]
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800cb74:	68bb      	ldr	r3, [r7, #8]
 800cb76:	3302      	adds	r3, #2
 800cb78:	781b      	ldrb	r3, [r3, #0]
 800cb7a:	b29a      	uxth	r2, r3
 800cb7c:	68bb      	ldr	r3, [r7, #8]
 800cb7e:	3303      	adds	r3, #3
 800cb80:	781b      	ldrb	r3, [r3, #0]
 800cb82:	b29b      	uxth	r3, r3
 800cb84:	021b      	lsls	r3, r3, #8
 800cb86:	b29b      	uxth	r3, r3
 800cb88:	4313      	orrs	r3, r2
 800cb8a:	b29a      	uxth	r2, r3
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800cb90:	68bb      	ldr	r3, [r7, #8]
 800cb92:	791a      	ldrb	r2, [r3, #4]
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800cb98:	68bb      	ldr	r3, [r7, #8]
 800cb9a:	795a      	ldrb	r2, [r3, #5]
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800cba0:	68bb      	ldr	r3, [r7, #8]
 800cba2:	799a      	ldrb	r2, [r3, #6]
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800cba8:	68bb      	ldr	r3, [r7, #8]
 800cbaa:	79da      	ldrb	r2, [r3, #7]
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800cbb0:	68bb      	ldr	r3, [r7, #8]
 800cbb2:	7a1a      	ldrb	r2, [r3, #8]
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800cbb8:	88fb      	ldrh	r3, [r7, #6]
 800cbba:	2b09      	cmp	r3, #9
 800cbbc:	d95f      	bls.n	800cc7e <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800cbbe:	2309      	movs	r3, #9
 800cbc0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800cbc6:	e051      	b.n	800cc6c <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800cbc8:	f107 0316 	add.w	r3, r7, #22
 800cbcc:	4619      	mov	r1, r3
 800cbce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cbd0:	f000 f8e8 	bl	800cda4 <USBH_GetNextDesc>
 800cbd4:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800cbd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbd8:	785b      	ldrb	r3, [r3, #1]
 800cbda:	2b04      	cmp	r3, #4
 800cbdc:	d146      	bne.n	800cc6c <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800cbde:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cbe2:	221a      	movs	r2, #26
 800cbe4:	fb02 f303 	mul.w	r3, r2, r3
 800cbe8:	3308      	adds	r3, #8
 800cbea:	68fa      	ldr	r2, [r7, #12]
 800cbec:	4413      	add	r3, r2
 800cbee:	3302      	adds	r3, #2
 800cbf0:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800cbf2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cbf4:	69f8      	ldr	r0, [r7, #28]
 800cbf6:	f000 f846 	bl	800cc86 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800cc00:	2300      	movs	r3, #0
 800cc02:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800cc04:	e022      	b.n	800cc4c <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800cc06:	f107 0316 	add.w	r3, r7, #22
 800cc0a:	4619      	mov	r1, r3
 800cc0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cc0e:	f000 f8c9 	bl	800cda4 <USBH_GetNextDesc>
 800cc12:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800cc14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc16:	785b      	ldrb	r3, [r3, #1]
 800cc18:	2b05      	cmp	r3, #5
 800cc1a:	d117      	bne.n	800cc4c <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800cc1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cc20:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800cc24:	3201      	adds	r2, #1
 800cc26:	00d2      	lsls	r2, r2, #3
 800cc28:	211a      	movs	r1, #26
 800cc2a:	fb01 f303 	mul.w	r3, r1, r3
 800cc2e:	4413      	add	r3, r2
 800cc30:	3308      	adds	r3, #8
 800cc32:	68fa      	ldr	r2, [r7, #12]
 800cc34:	4413      	add	r3, r2
 800cc36:	3304      	adds	r3, #4
 800cc38:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800cc3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cc3c:	69b8      	ldr	r0, [r7, #24]
 800cc3e:	f000 f851 	bl	800cce4 <USBH_ParseEPDesc>
            ep_ix++;
 800cc42:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800cc46:	3301      	adds	r3, #1
 800cc48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800cc4c:	69fb      	ldr	r3, [r7, #28]
 800cc4e:	791b      	ldrb	r3, [r3, #4]
 800cc50:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800cc54:	429a      	cmp	r2, r3
 800cc56:	d204      	bcs.n	800cc62 <USBH_ParseCfgDesc+0x120>
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	885a      	ldrh	r2, [r3, #2]
 800cc5c:	8afb      	ldrh	r3, [r7, #22]
 800cc5e:	429a      	cmp	r2, r3
 800cc60:	d8d1      	bhi.n	800cc06 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800cc62:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cc66:	3301      	adds	r3, #1
 800cc68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800cc6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cc70:	2b01      	cmp	r3, #1
 800cc72:	d804      	bhi.n	800cc7e <USBH_ParseCfgDesc+0x13c>
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	885a      	ldrh	r2, [r3, #2]
 800cc78:	8afb      	ldrh	r3, [r7, #22]
 800cc7a:	429a      	cmp	r2, r3
 800cc7c:	d8a4      	bhi.n	800cbc8 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800cc7e:	bf00      	nop
 800cc80:	3728      	adds	r7, #40	; 0x28
 800cc82:	46bd      	mov	sp, r7
 800cc84:	bd80      	pop	{r7, pc}

0800cc86 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800cc86:	b480      	push	{r7}
 800cc88:	b083      	sub	sp, #12
 800cc8a:	af00      	add	r7, sp, #0
 800cc8c:	6078      	str	r0, [r7, #4]
 800cc8e:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800cc90:	683b      	ldr	r3, [r7, #0]
 800cc92:	781a      	ldrb	r2, [r3, #0]
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800cc98:	683b      	ldr	r3, [r7, #0]
 800cc9a:	785a      	ldrb	r2, [r3, #1]
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800cca0:	683b      	ldr	r3, [r7, #0]
 800cca2:	789a      	ldrb	r2, [r3, #2]
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800cca8:	683b      	ldr	r3, [r7, #0]
 800ccaa:	78da      	ldrb	r2, [r3, #3]
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800ccb0:	683b      	ldr	r3, [r7, #0]
 800ccb2:	791a      	ldrb	r2, [r3, #4]
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800ccb8:	683b      	ldr	r3, [r7, #0]
 800ccba:	795a      	ldrb	r2, [r3, #5]
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800ccc0:	683b      	ldr	r3, [r7, #0]
 800ccc2:	799a      	ldrb	r2, [r3, #6]
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	79da      	ldrb	r2, [r3, #7]
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800ccd0:	683b      	ldr	r3, [r7, #0]
 800ccd2:	7a1a      	ldrb	r2, [r3, #8]
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	721a      	strb	r2, [r3, #8]
}
 800ccd8:	bf00      	nop
 800ccda:	370c      	adds	r7, #12
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce2:	4770      	bx	lr

0800cce4 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800cce4:	b480      	push	{r7}
 800cce6:	b083      	sub	sp, #12
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	6078      	str	r0, [r7, #4]
 800ccec:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800ccee:	683b      	ldr	r3, [r7, #0]
 800ccf0:	781a      	ldrb	r2, [r3, #0]
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800ccf6:	683b      	ldr	r3, [r7, #0]
 800ccf8:	785a      	ldrb	r2, [r3, #1]
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800ccfe:	683b      	ldr	r3, [r7, #0]
 800cd00:	789a      	ldrb	r2, [r3, #2]
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800cd06:	683b      	ldr	r3, [r7, #0]
 800cd08:	78da      	ldrb	r2, [r3, #3]
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800cd0e:	683b      	ldr	r3, [r7, #0]
 800cd10:	3304      	adds	r3, #4
 800cd12:	781b      	ldrb	r3, [r3, #0]
 800cd14:	b29a      	uxth	r2, r3
 800cd16:	683b      	ldr	r3, [r7, #0]
 800cd18:	3305      	adds	r3, #5
 800cd1a:	781b      	ldrb	r3, [r3, #0]
 800cd1c:	b29b      	uxth	r3, r3
 800cd1e:	021b      	lsls	r3, r3, #8
 800cd20:	b29b      	uxth	r3, r3
 800cd22:	4313      	orrs	r3, r2
 800cd24:	b29a      	uxth	r2, r3
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800cd2a:	683b      	ldr	r3, [r7, #0]
 800cd2c:	799a      	ldrb	r2, [r3, #6]
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	719a      	strb	r2, [r3, #6]
}
 800cd32:	bf00      	nop
 800cd34:	370c      	adds	r7, #12
 800cd36:	46bd      	mov	sp, r7
 800cd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3c:	4770      	bx	lr

0800cd3e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800cd3e:	b480      	push	{r7}
 800cd40:	b087      	sub	sp, #28
 800cd42:	af00      	add	r7, sp, #0
 800cd44:	60f8      	str	r0, [r7, #12]
 800cd46:	60b9      	str	r1, [r7, #8]
 800cd48:	4613      	mov	r3, r2
 800cd4a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	3301      	adds	r3, #1
 800cd50:	781b      	ldrb	r3, [r3, #0]
 800cd52:	2b03      	cmp	r3, #3
 800cd54:	d120      	bne.n	800cd98 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	781b      	ldrb	r3, [r3, #0]
 800cd5a:	1e9a      	subs	r2, r3, #2
 800cd5c:	88fb      	ldrh	r3, [r7, #6]
 800cd5e:	4293      	cmp	r3, r2
 800cd60:	bf28      	it	cs
 800cd62:	4613      	movcs	r3, r2
 800cd64:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	3302      	adds	r3, #2
 800cd6a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	82fb      	strh	r3, [r7, #22]
 800cd70:	e00b      	b.n	800cd8a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800cd72:	8afb      	ldrh	r3, [r7, #22]
 800cd74:	68fa      	ldr	r2, [r7, #12]
 800cd76:	4413      	add	r3, r2
 800cd78:	781a      	ldrb	r2, [r3, #0]
 800cd7a:	68bb      	ldr	r3, [r7, #8]
 800cd7c:	701a      	strb	r2, [r3, #0]
      pdest++;
 800cd7e:	68bb      	ldr	r3, [r7, #8]
 800cd80:	3301      	adds	r3, #1
 800cd82:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800cd84:	8afb      	ldrh	r3, [r7, #22]
 800cd86:	3302      	adds	r3, #2
 800cd88:	82fb      	strh	r3, [r7, #22]
 800cd8a:	8afa      	ldrh	r2, [r7, #22]
 800cd8c:	8abb      	ldrh	r3, [r7, #20]
 800cd8e:	429a      	cmp	r2, r3
 800cd90:	d3ef      	bcc.n	800cd72 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800cd92:	68bb      	ldr	r3, [r7, #8]
 800cd94:	2200      	movs	r2, #0
 800cd96:	701a      	strb	r2, [r3, #0]
  }
}
 800cd98:	bf00      	nop
 800cd9a:	371c      	adds	r7, #28
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda2:	4770      	bx	lr

0800cda4 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800cda4:	b480      	push	{r7}
 800cda6:	b085      	sub	sp, #20
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]
 800cdac:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800cdae:	683b      	ldr	r3, [r7, #0]
 800cdb0:	881a      	ldrh	r2, [r3, #0]
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	781b      	ldrb	r3, [r3, #0]
 800cdb6:	b29b      	uxth	r3, r3
 800cdb8:	4413      	add	r3, r2
 800cdba:	b29a      	uxth	r2, r3
 800cdbc:	683b      	ldr	r3, [r7, #0]
 800cdbe:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	781b      	ldrb	r3, [r3, #0]
 800cdc4:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	4413      	add	r3, r2
 800cdca:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800cdcc:	68fb      	ldr	r3, [r7, #12]
}
 800cdce:	4618      	mov	r0, r3
 800cdd0:	3714      	adds	r7, #20
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd8:	4770      	bx	lr

0800cdda <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800cdda:	b580      	push	{r7, lr}
 800cddc:	b086      	sub	sp, #24
 800cdde:	af00      	add	r7, sp, #0
 800cde0:	60f8      	str	r0, [r7, #12]
 800cde2:	60b9      	str	r1, [r7, #8]
 800cde4:	4613      	mov	r3, r2
 800cde6:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800cde8:	2301      	movs	r3, #1
 800cdea:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	789b      	ldrb	r3, [r3, #2]
 800cdf0:	2b01      	cmp	r3, #1
 800cdf2:	d002      	beq.n	800cdfa <USBH_CtlReq+0x20>
 800cdf4:	2b02      	cmp	r3, #2
 800cdf6:	d00f      	beq.n	800ce18 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800cdf8:	e027      	b.n	800ce4a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	68ba      	ldr	r2, [r7, #8]
 800cdfe:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	88fa      	ldrh	r2, [r7, #6]
 800ce04:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	2201      	movs	r2, #1
 800ce0a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	2202      	movs	r2, #2
 800ce10:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800ce12:	2301      	movs	r3, #1
 800ce14:	75fb      	strb	r3, [r7, #23]
      break;
 800ce16:	e018      	b.n	800ce4a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800ce18:	68f8      	ldr	r0, [r7, #12]
 800ce1a:	f000 f81b 	bl	800ce54 <USBH_HandleControl>
 800ce1e:	4603      	mov	r3, r0
 800ce20:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800ce22:	7dfb      	ldrb	r3, [r7, #23]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d002      	beq.n	800ce2e <USBH_CtlReq+0x54>
 800ce28:	7dfb      	ldrb	r3, [r7, #23]
 800ce2a:	2b03      	cmp	r3, #3
 800ce2c:	d106      	bne.n	800ce3c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	2201      	movs	r2, #1
 800ce32:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	2200      	movs	r2, #0
 800ce38:	761a      	strb	r2, [r3, #24]
      break;
 800ce3a:	e005      	b.n	800ce48 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800ce3c:	7dfb      	ldrb	r3, [r7, #23]
 800ce3e:	2b02      	cmp	r3, #2
 800ce40:	d102      	bne.n	800ce48 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	2201      	movs	r2, #1
 800ce46:	709a      	strb	r2, [r3, #2]
      break;
 800ce48:	bf00      	nop
  }
  return status;
 800ce4a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	3718      	adds	r7, #24
 800ce50:	46bd      	mov	sp, r7
 800ce52:	bd80      	pop	{r7, pc}

0800ce54 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b086      	sub	sp, #24
 800ce58:	af02      	add	r7, sp, #8
 800ce5a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800ce5c:	2301      	movs	r3, #1
 800ce5e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ce60:	2300      	movs	r3, #0
 800ce62:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	7e1b      	ldrb	r3, [r3, #24]
 800ce68:	3b01      	subs	r3, #1
 800ce6a:	2b0a      	cmp	r3, #10
 800ce6c:	f200 8158 	bhi.w	800d120 <USBH_HandleControl+0x2cc>
 800ce70:	a201      	add	r2, pc, #4	; (adr r2, 800ce78 <USBH_HandleControl+0x24>)
 800ce72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce76:	bf00      	nop
 800ce78:	0800cea5 	.word	0x0800cea5
 800ce7c:	0800cebf 	.word	0x0800cebf
 800ce80:	0800cf29 	.word	0x0800cf29
 800ce84:	0800cf4f 	.word	0x0800cf4f
 800ce88:	0800cf87 	.word	0x0800cf87
 800ce8c:	0800cfb3 	.word	0x0800cfb3
 800ce90:	0800d005 	.word	0x0800d005
 800ce94:	0800d027 	.word	0x0800d027
 800ce98:	0800d063 	.word	0x0800d063
 800ce9c:	0800d08b 	.word	0x0800d08b
 800cea0:	0800d0c9 	.word	0x0800d0c9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	f103 0110 	add.w	r1, r3, #16
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	795b      	ldrb	r3, [r3, #5]
 800ceae:	461a      	mov	r2, r3
 800ceb0:	6878      	ldr	r0, [r7, #4]
 800ceb2:	f000 f945 	bl	800d140 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	2202      	movs	r2, #2
 800ceba:	761a      	strb	r2, [r3, #24]
      break;
 800cebc:	e13b      	b.n	800d136 <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	795b      	ldrb	r3, [r3, #5]
 800cec2:	4619      	mov	r1, r3
 800cec4:	6878      	ldr	r0, [r7, #4]
 800cec6:	f000 fcc5 	bl	800d854 <USBH_LL_GetURBState>
 800ceca:	4603      	mov	r3, r0
 800cecc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800cece:	7bbb      	ldrb	r3, [r7, #14]
 800ced0:	2b01      	cmp	r3, #1
 800ced2:	d11e      	bne.n	800cf12 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	7c1b      	ldrb	r3, [r3, #16]
 800ced8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cedc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	8adb      	ldrh	r3, [r3, #22]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d00a      	beq.n	800cefc <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800cee6:	7b7b      	ldrb	r3, [r7, #13]
 800cee8:	2b80      	cmp	r3, #128	; 0x80
 800ceea:	d103      	bne.n	800cef4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	2203      	movs	r2, #3
 800cef0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800cef2:	e117      	b.n	800d124 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	2205      	movs	r2, #5
 800cef8:	761a      	strb	r2, [r3, #24]
      break;
 800cefa:	e113      	b.n	800d124 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 800cefc:	7b7b      	ldrb	r3, [r7, #13]
 800cefe:	2b80      	cmp	r3, #128	; 0x80
 800cf00:	d103      	bne.n	800cf0a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	2209      	movs	r2, #9
 800cf06:	761a      	strb	r2, [r3, #24]
      break;
 800cf08:	e10c      	b.n	800d124 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	2207      	movs	r2, #7
 800cf0e:	761a      	strb	r2, [r3, #24]
      break;
 800cf10:	e108      	b.n	800d124 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800cf12:	7bbb      	ldrb	r3, [r7, #14]
 800cf14:	2b04      	cmp	r3, #4
 800cf16:	d003      	beq.n	800cf20 <USBH_HandleControl+0xcc>
 800cf18:	7bbb      	ldrb	r3, [r7, #14]
 800cf1a:	2b02      	cmp	r3, #2
 800cf1c:	f040 8102 	bne.w	800d124 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	220b      	movs	r2, #11
 800cf24:	761a      	strb	r2, [r3, #24]
      break;
 800cf26:	e0fd      	b.n	800d124 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cf2e:	b29a      	uxth	r2, r3
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	6899      	ldr	r1, [r3, #8]
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	899a      	ldrh	r2, [r3, #12]
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	791b      	ldrb	r3, [r3, #4]
 800cf40:	6878      	ldr	r0, [r7, #4]
 800cf42:	f000 f93c 	bl	800d1be <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	2204      	movs	r2, #4
 800cf4a:	761a      	strb	r2, [r3, #24]
      break;
 800cf4c:	e0f3      	b.n	800d136 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	791b      	ldrb	r3, [r3, #4]
 800cf52:	4619      	mov	r1, r3
 800cf54:	6878      	ldr	r0, [r7, #4]
 800cf56:	f000 fc7d 	bl	800d854 <USBH_LL_GetURBState>
 800cf5a:	4603      	mov	r3, r0
 800cf5c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800cf5e:	7bbb      	ldrb	r3, [r7, #14]
 800cf60:	2b01      	cmp	r3, #1
 800cf62:	d102      	bne.n	800cf6a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	2209      	movs	r2, #9
 800cf68:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800cf6a:	7bbb      	ldrb	r3, [r7, #14]
 800cf6c:	2b05      	cmp	r3, #5
 800cf6e:	d102      	bne.n	800cf76 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800cf70:	2303      	movs	r3, #3
 800cf72:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800cf74:	e0d8      	b.n	800d128 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800cf76:	7bbb      	ldrb	r3, [r7, #14]
 800cf78:	2b04      	cmp	r3, #4
 800cf7a:	f040 80d5 	bne.w	800d128 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	220b      	movs	r2, #11
 800cf82:	761a      	strb	r2, [r3, #24]
      break;
 800cf84:	e0d0      	b.n	800d128 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	6899      	ldr	r1, [r3, #8]
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	899a      	ldrh	r2, [r3, #12]
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	7958      	ldrb	r0, [r3, #5]
 800cf92:	2301      	movs	r3, #1
 800cf94:	9300      	str	r3, [sp, #0]
 800cf96:	4603      	mov	r3, r0
 800cf98:	6878      	ldr	r0, [r7, #4]
 800cf9a:	f000 f8eb 	bl	800d174 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cfa4:	b29a      	uxth	r2, r3
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	2206      	movs	r2, #6
 800cfae:	761a      	strb	r2, [r3, #24]
      break;
 800cfb0:	e0c1      	b.n	800d136 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	795b      	ldrb	r3, [r3, #5]
 800cfb6:	4619      	mov	r1, r3
 800cfb8:	6878      	ldr	r0, [r7, #4]
 800cfba:	f000 fc4b 	bl	800d854 <USBH_LL_GetURBState>
 800cfbe:	4603      	mov	r3, r0
 800cfc0:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800cfc2:	7bbb      	ldrb	r3, [r7, #14]
 800cfc4:	2b01      	cmp	r3, #1
 800cfc6:	d103      	bne.n	800cfd0 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	2207      	movs	r2, #7
 800cfcc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800cfce:	e0ad      	b.n	800d12c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 800cfd0:	7bbb      	ldrb	r3, [r7, #14]
 800cfd2:	2b05      	cmp	r3, #5
 800cfd4:	d105      	bne.n	800cfe2 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	220c      	movs	r2, #12
 800cfda:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800cfdc:	2303      	movs	r3, #3
 800cfde:	73fb      	strb	r3, [r7, #15]
      break;
 800cfe0:	e0a4      	b.n	800d12c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 800cfe2:	7bbb      	ldrb	r3, [r7, #14]
 800cfe4:	2b02      	cmp	r3, #2
 800cfe6:	d103      	bne.n	800cff0 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	2205      	movs	r2, #5
 800cfec:	761a      	strb	r2, [r3, #24]
      break;
 800cfee:	e09d      	b.n	800d12c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 800cff0:	7bbb      	ldrb	r3, [r7, #14]
 800cff2:	2b04      	cmp	r3, #4
 800cff4:	f040 809a 	bne.w	800d12c <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	220b      	movs	r2, #11
 800cffc:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800cffe:	2302      	movs	r3, #2
 800d000:	73fb      	strb	r3, [r7, #15]
      break;
 800d002:	e093      	b.n	800d12c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	791b      	ldrb	r3, [r3, #4]
 800d008:	2200      	movs	r2, #0
 800d00a:	2100      	movs	r1, #0
 800d00c:	6878      	ldr	r0, [r7, #4]
 800d00e:	f000 f8d6 	bl	800d1be <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d018:	b29a      	uxth	r2, r3
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	2208      	movs	r2, #8
 800d022:	761a      	strb	r2, [r3, #24]

      break;
 800d024:	e087      	b.n	800d136 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	791b      	ldrb	r3, [r3, #4]
 800d02a:	4619      	mov	r1, r3
 800d02c:	6878      	ldr	r0, [r7, #4]
 800d02e:	f000 fc11 	bl	800d854 <USBH_LL_GetURBState>
 800d032:	4603      	mov	r3, r0
 800d034:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800d036:	7bbb      	ldrb	r3, [r7, #14]
 800d038:	2b01      	cmp	r3, #1
 800d03a:	d105      	bne.n	800d048 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	220d      	movs	r2, #13
 800d040:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800d042:	2300      	movs	r3, #0
 800d044:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d046:	e073      	b.n	800d130 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 800d048:	7bbb      	ldrb	r3, [r7, #14]
 800d04a:	2b04      	cmp	r3, #4
 800d04c:	d103      	bne.n	800d056 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	220b      	movs	r2, #11
 800d052:	761a      	strb	r2, [r3, #24]
      break;
 800d054:	e06c      	b.n	800d130 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 800d056:	7bbb      	ldrb	r3, [r7, #14]
 800d058:	2b05      	cmp	r3, #5
 800d05a:	d169      	bne.n	800d130 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 800d05c:	2303      	movs	r3, #3
 800d05e:	73fb      	strb	r3, [r7, #15]
      break;
 800d060:	e066      	b.n	800d130 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	795a      	ldrb	r2, [r3, #5]
 800d066:	2301      	movs	r3, #1
 800d068:	9300      	str	r3, [sp, #0]
 800d06a:	4613      	mov	r3, r2
 800d06c:	2200      	movs	r2, #0
 800d06e:	2100      	movs	r1, #0
 800d070:	6878      	ldr	r0, [r7, #4]
 800d072:	f000 f87f 	bl	800d174 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d07c:	b29a      	uxth	r2, r3
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	220a      	movs	r2, #10
 800d086:	761a      	strb	r2, [r3, #24]
      break;
 800d088:	e055      	b.n	800d136 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	795b      	ldrb	r3, [r3, #5]
 800d08e:	4619      	mov	r1, r3
 800d090:	6878      	ldr	r0, [r7, #4]
 800d092:	f000 fbdf 	bl	800d854 <USBH_LL_GetURBState>
 800d096:	4603      	mov	r3, r0
 800d098:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800d09a:	7bbb      	ldrb	r3, [r7, #14]
 800d09c:	2b01      	cmp	r3, #1
 800d09e:	d105      	bne.n	800d0ac <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	220d      	movs	r2, #13
 800d0a8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d0aa:	e043      	b.n	800d134 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d0ac:	7bbb      	ldrb	r3, [r7, #14]
 800d0ae:	2b02      	cmp	r3, #2
 800d0b0:	d103      	bne.n	800d0ba <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	2209      	movs	r2, #9
 800d0b6:	761a      	strb	r2, [r3, #24]
      break;
 800d0b8:	e03c      	b.n	800d134 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 800d0ba:	7bbb      	ldrb	r3, [r7, #14]
 800d0bc:	2b04      	cmp	r3, #4
 800d0be:	d139      	bne.n	800d134 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	220b      	movs	r2, #11
 800d0c4:	761a      	strb	r2, [r3, #24]
      break;
 800d0c6:	e035      	b.n	800d134 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	7e5b      	ldrb	r3, [r3, #25]
 800d0cc:	3301      	adds	r3, #1
 800d0ce:	b2da      	uxtb	r2, r3
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	765a      	strb	r2, [r3, #25]
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	7e5b      	ldrb	r3, [r3, #25]
 800d0d8:	2b02      	cmp	r3, #2
 800d0da:	d806      	bhi.n	800d0ea <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	2201      	movs	r2, #1
 800d0e0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	2201      	movs	r2, #1
 800d0e6:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800d0e8:	e025      	b.n	800d136 <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d0f0:	2106      	movs	r1, #6
 800d0f2:	6878      	ldr	r0, [r7, #4]
 800d0f4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	795b      	ldrb	r3, [r3, #5]
 800d100:	4619      	mov	r1, r3
 800d102:	6878      	ldr	r0, [r7, #4]
 800d104:	f000 f90c 	bl	800d320 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	791b      	ldrb	r3, [r3, #4]
 800d10c:	4619      	mov	r1, r3
 800d10e:	6878      	ldr	r0, [r7, #4]
 800d110:	f000 f906 	bl	800d320 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	2200      	movs	r2, #0
 800d118:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800d11a:	2302      	movs	r3, #2
 800d11c:	73fb      	strb	r3, [r7, #15]
      break;
 800d11e:	e00a      	b.n	800d136 <USBH_HandleControl+0x2e2>

    default:
      break;
 800d120:	bf00      	nop
 800d122:	e008      	b.n	800d136 <USBH_HandleControl+0x2e2>
      break;
 800d124:	bf00      	nop
 800d126:	e006      	b.n	800d136 <USBH_HandleControl+0x2e2>
      break;
 800d128:	bf00      	nop
 800d12a:	e004      	b.n	800d136 <USBH_HandleControl+0x2e2>
      break;
 800d12c:	bf00      	nop
 800d12e:	e002      	b.n	800d136 <USBH_HandleControl+0x2e2>
      break;
 800d130:	bf00      	nop
 800d132:	e000      	b.n	800d136 <USBH_HandleControl+0x2e2>
      break;
 800d134:	bf00      	nop
  }

  return status;
 800d136:	7bfb      	ldrb	r3, [r7, #15]
}
 800d138:	4618      	mov	r0, r3
 800d13a:	3710      	adds	r7, #16
 800d13c:	46bd      	mov	sp, r7
 800d13e:	bd80      	pop	{r7, pc}

0800d140 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800d140:	b580      	push	{r7, lr}
 800d142:	b088      	sub	sp, #32
 800d144:	af04      	add	r7, sp, #16
 800d146:	60f8      	str	r0, [r7, #12]
 800d148:	60b9      	str	r1, [r7, #8]
 800d14a:	4613      	mov	r3, r2
 800d14c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d14e:	79f9      	ldrb	r1, [r7, #7]
 800d150:	2300      	movs	r3, #0
 800d152:	9303      	str	r3, [sp, #12]
 800d154:	2308      	movs	r3, #8
 800d156:	9302      	str	r3, [sp, #8]
 800d158:	68bb      	ldr	r3, [r7, #8]
 800d15a:	9301      	str	r3, [sp, #4]
 800d15c:	2300      	movs	r3, #0
 800d15e:	9300      	str	r3, [sp, #0]
 800d160:	2300      	movs	r3, #0
 800d162:	2200      	movs	r2, #0
 800d164:	68f8      	ldr	r0, [r7, #12]
 800d166:	f000 fb44 	bl	800d7f2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800d16a:	2300      	movs	r3, #0
}
 800d16c:	4618      	mov	r0, r3
 800d16e:	3710      	adds	r7, #16
 800d170:	46bd      	mov	sp, r7
 800d172:	bd80      	pop	{r7, pc}

0800d174 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800d174:	b580      	push	{r7, lr}
 800d176:	b088      	sub	sp, #32
 800d178:	af04      	add	r7, sp, #16
 800d17a:	60f8      	str	r0, [r7, #12]
 800d17c:	60b9      	str	r1, [r7, #8]
 800d17e:	4611      	mov	r1, r2
 800d180:	461a      	mov	r2, r3
 800d182:	460b      	mov	r3, r1
 800d184:	80fb      	strh	r3, [r7, #6]
 800d186:	4613      	mov	r3, r2
 800d188:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d190:	2b00      	cmp	r3, #0
 800d192:	d001      	beq.n	800d198 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800d194:	2300      	movs	r3, #0
 800d196:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d198:	7979      	ldrb	r1, [r7, #5]
 800d19a:	7e3b      	ldrb	r3, [r7, #24]
 800d19c:	9303      	str	r3, [sp, #12]
 800d19e:	88fb      	ldrh	r3, [r7, #6]
 800d1a0:	9302      	str	r3, [sp, #8]
 800d1a2:	68bb      	ldr	r3, [r7, #8]
 800d1a4:	9301      	str	r3, [sp, #4]
 800d1a6:	2301      	movs	r3, #1
 800d1a8:	9300      	str	r3, [sp, #0]
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	2200      	movs	r2, #0
 800d1ae:	68f8      	ldr	r0, [r7, #12]
 800d1b0:	f000 fb1f 	bl	800d7f2 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800d1b4:	2300      	movs	r3, #0
}
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	3710      	adds	r7, #16
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	bd80      	pop	{r7, pc}

0800d1be <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800d1be:	b580      	push	{r7, lr}
 800d1c0:	b088      	sub	sp, #32
 800d1c2:	af04      	add	r7, sp, #16
 800d1c4:	60f8      	str	r0, [r7, #12]
 800d1c6:	60b9      	str	r1, [r7, #8]
 800d1c8:	4611      	mov	r1, r2
 800d1ca:	461a      	mov	r2, r3
 800d1cc:	460b      	mov	r3, r1
 800d1ce:	80fb      	strh	r3, [r7, #6]
 800d1d0:	4613      	mov	r3, r2
 800d1d2:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d1d4:	7979      	ldrb	r1, [r7, #5]
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	9303      	str	r3, [sp, #12]
 800d1da:	88fb      	ldrh	r3, [r7, #6]
 800d1dc:	9302      	str	r3, [sp, #8]
 800d1de:	68bb      	ldr	r3, [r7, #8]
 800d1e0:	9301      	str	r3, [sp, #4]
 800d1e2:	2301      	movs	r3, #1
 800d1e4:	9300      	str	r3, [sp, #0]
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	2201      	movs	r2, #1
 800d1ea:	68f8      	ldr	r0, [r7, #12]
 800d1ec:	f000 fb01 	bl	800d7f2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800d1f0:	2300      	movs	r3, #0

}
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	3710      	adds	r7, #16
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	bd80      	pop	{r7, pc}

0800d1fa <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800d1fa:	b580      	push	{r7, lr}
 800d1fc:	b088      	sub	sp, #32
 800d1fe:	af04      	add	r7, sp, #16
 800d200:	60f8      	str	r0, [r7, #12]
 800d202:	60b9      	str	r1, [r7, #8]
 800d204:	4611      	mov	r1, r2
 800d206:	461a      	mov	r2, r3
 800d208:	460b      	mov	r3, r1
 800d20a:	80fb      	strh	r3, [r7, #6]
 800d20c:	4613      	mov	r3, r2
 800d20e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d216:	2b00      	cmp	r3, #0
 800d218:	d001      	beq.n	800d21e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800d21a:	2300      	movs	r3, #0
 800d21c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d21e:	7979      	ldrb	r1, [r7, #5]
 800d220:	7e3b      	ldrb	r3, [r7, #24]
 800d222:	9303      	str	r3, [sp, #12]
 800d224:	88fb      	ldrh	r3, [r7, #6]
 800d226:	9302      	str	r3, [sp, #8]
 800d228:	68bb      	ldr	r3, [r7, #8]
 800d22a:	9301      	str	r3, [sp, #4]
 800d22c:	2301      	movs	r3, #1
 800d22e:	9300      	str	r3, [sp, #0]
 800d230:	2302      	movs	r3, #2
 800d232:	2200      	movs	r2, #0
 800d234:	68f8      	ldr	r0, [r7, #12]
 800d236:	f000 fadc 	bl	800d7f2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800d23a:	2300      	movs	r3, #0
}
 800d23c:	4618      	mov	r0, r3
 800d23e:	3710      	adds	r7, #16
 800d240:	46bd      	mov	sp, r7
 800d242:	bd80      	pop	{r7, pc}

0800d244 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800d244:	b580      	push	{r7, lr}
 800d246:	b088      	sub	sp, #32
 800d248:	af04      	add	r7, sp, #16
 800d24a:	60f8      	str	r0, [r7, #12]
 800d24c:	60b9      	str	r1, [r7, #8]
 800d24e:	4611      	mov	r1, r2
 800d250:	461a      	mov	r2, r3
 800d252:	460b      	mov	r3, r1
 800d254:	80fb      	strh	r3, [r7, #6]
 800d256:	4613      	mov	r3, r2
 800d258:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d25a:	7979      	ldrb	r1, [r7, #5]
 800d25c:	2300      	movs	r3, #0
 800d25e:	9303      	str	r3, [sp, #12]
 800d260:	88fb      	ldrh	r3, [r7, #6]
 800d262:	9302      	str	r3, [sp, #8]
 800d264:	68bb      	ldr	r3, [r7, #8]
 800d266:	9301      	str	r3, [sp, #4]
 800d268:	2301      	movs	r3, #1
 800d26a:	9300      	str	r3, [sp, #0]
 800d26c:	2302      	movs	r3, #2
 800d26e:	2201      	movs	r2, #1
 800d270:	68f8      	ldr	r0, [r7, #12]
 800d272:	f000 fabe 	bl	800d7f2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800d276:	2300      	movs	r3, #0
}
 800d278:	4618      	mov	r0, r3
 800d27a:	3710      	adds	r7, #16
 800d27c:	46bd      	mov	sp, r7
 800d27e:	bd80      	pop	{r7, pc}

0800d280 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b086      	sub	sp, #24
 800d284:	af04      	add	r7, sp, #16
 800d286:	6078      	str	r0, [r7, #4]
 800d288:	4608      	mov	r0, r1
 800d28a:	4611      	mov	r1, r2
 800d28c:	461a      	mov	r2, r3
 800d28e:	4603      	mov	r3, r0
 800d290:	70fb      	strb	r3, [r7, #3]
 800d292:	460b      	mov	r3, r1
 800d294:	70bb      	strb	r3, [r7, #2]
 800d296:	4613      	mov	r3, r2
 800d298:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800d29a:	7878      	ldrb	r0, [r7, #1]
 800d29c:	78ba      	ldrb	r2, [r7, #2]
 800d29e:	78f9      	ldrb	r1, [r7, #3]
 800d2a0:	8b3b      	ldrh	r3, [r7, #24]
 800d2a2:	9302      	str	r3, [sp, #8]
 800d2a4:	7d3b      	ldrb	r3, [r7, #20]
 800d2a6:	9301      	str	r3, [sp, #4]
 800d2a8:	7c3b      	ldrb	r3, [r7, #16]
 800d2aa:	9300      	str	r3, [sp, #0]
 800d2ac:	4603      	mov	r3, r0
 800d2ae:	6878      	ldr	r0, [r7, #4]
 800d2b0:	f000 fa51 	bl	800d756 <USBH_LL_OpenPipe>

  return USBH_OK;
 800d2b4:	2300      	movs	r3, #0
}
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	3708      	adds	r7, #8
 800d2ba:	46bd      	mov	sp, r7
 800d2bc:	bd80      	pop	{r7, pc}

0800d2be <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800d2be:	b580      	push	{r7, lr}
 800d2c0:	b082      	sub	sp, #8
 800d2c2:	af00      	add	r7, sp, #0
 800d2c4:	6078      	str	r0, [r7, #4]
 800d2c6:	460b      	mov	r3, r1
 800d2c8:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800d2ca:	78fb      	ldrb	r3, [r7, #3]
 800d2cc:	4619      	mov	r1, r3
 800d2ce:	6878      	ldr	r0, [r7, #4]
 800d2d0:	f000 fa70 	bl	800d7b4 <USBH_LL_ClosePipe>

  return USBH_OK;
 800d2d4:	2300      	movs	r3, #0
}
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	3708      	adds	r7, #8
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	bd80      	pop	{r7, pc}

0800d2de <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800d2de:	b580      	push	{r7, lr}
 800d2e0:	b084      	sub	sp, #16
 800d2e2:	af00      	add	r7, sp, #0
 800d2e4:	6078      	str	r0, [r7, #4]
 800d2e6:	460b      	mov	r3, r1
 800d2e8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800d2ea:	6878      	ldr	r0, [r7, #4]
 800d2ec:	f000 f836 	bl	800d35c <USBH_GetFreePipe>
 800d2f0:	4603      	mov	r3, r0
 800d2f2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800d2f4:	89fb      	ldrh	r3, [r7, #14]
 800d2f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d2fa:	4293      	cmp	r3, r2
 800d2fc:	d00a      	beq.n	800d314 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800d2fe:	78fa      	ldrb	r2, [r7, #3]
 800d300:	89fb      	ldrh	r3, [r7, #14]
 800d302:	f003 030f 	and.w	r3, r3, #15
 800d306:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d30a:	6879      	ldr	r1, [r7, #4]
 800d30c:	33e0      	adds	r3, #224	; 0xe0
 800d30e:	009b      	lsls	r3, r3, #2
 800d310:	440b      	add	r3, r1
 800d312:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800d314:	89fb      	ldrh	r3, [r7, #14]
 800d316:	b2db      	uxtb	r3, r3
}
 800d318:	4618      	mov	r0, r3
 800d31a:	3710      	adds	r7, #16
 800d31c:	46bd      	mov	sp, r7
 800d31e:	bd80      	pop	{r7, pc}

0800d320 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800d320:	b480      	push	{r7}
 800d322:	b083      	sub	sp, #12
 800d324:	af00      	add	r7, sp, #0
 800d326:	6078      	str	r0, [r7, #4]
 800d328:	460b      	mov	r3, r1
 800d32a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800d32c:	78fb      	ldrb	r3, [r7, #3]
 800d32e:	2b0a      	cmp	r3, #10
 800d330:	d80d      	bhi.n	800d34e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800d332:	78fb      	ldrb	r3, [r7, #3]
 800d334:	687a      	ldr	r2, [r7, #4]
 800d336:	33e0      	adds	r3, #224	; 0xe0
 800d338:	009b      	lsls	r3, r3, #2
 800d33a:	4413      	add	r3, r2
 800d33c:	685a      	ldr	r2, [r3, #4]
 800d33e:	78fb      	ldrb	r3, [r7, #3]
 800d340:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800d344:	6879      	ldr	r1, [r7, #4]
 800d346:	33e0      	adds	r3, #224	; 0xe0
 800d348:	009b      	lsls	r3, r3, #2
 800d34a:	440b      	add	r3, r1
 800d34c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800d34e:	2300      	movs	r3, #0
}
 800d350:	4618      	mov	r0, r3
 800d352:	370c      	adds	r7, #12
 800d354:	46bd      	mov	sp, r7
 800d356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d35a:	4770      	bx	lr

0800d35c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800d35c:	b480      	push	{r7}
 800d35e:	b085      	sub	sp, #20
 800d360:	af00      	add	r7, sp, #0
 800d362:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800d364:	2300      	movs	r3, #0
 800d366:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800d368:	2300      	movs	r3, #0
 800d36a:	73fb      	strb	r3, [r7, #15]
 800d36c:	e00f      	b.n	800d38e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800d36e:	7bfb      	ldrb	r3, [r7, #15]
 800d370:	687a      	ldr	r2, [r7, #4]
 800d372:	33e0      	adds	r3, #224	; 0xe0
 800d374:	009b      	lsls	r3, r3, #2
 800d376:	4413      	add	r3, r2
 800d378:	685b      	ldr	r3, [r3, #4]
 800d37a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d102      	bne.n	800d388 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800d382:	7bfb      	ldrb	r3, [r7, #15]
 800d384:	b29b      	uxth	r3, r3
 800d386:	e007      	b.n	800d398 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800d388:	7bfb      	ldrb	r3, [r7, #15]
 800d38a:	3301      	adds	r3, #1
 800d38c:	73fb      	strb	r3, [r7, #15]
 800d38e:	7bfb      	ldrb	r3, [r7, #15]
 800d390:	2b0a      	cmp	r3, #10
 800d392:	d9ec      	bls.n	800d36e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800d394:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800d398:	4618      	mov	r0, r3
 800d39a:	3714      	adds	r7, #20
 800d39c:	46bd      	mov	sp, r7
 800d39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a2:	4770      	bx	lr

0800d3a4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800d3a4:	b580      	push	{r7, lr}
 800d3a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800d3a8:	2201      	movs	r2, #1
 800d3aa:	490e      	ldr	r1, [pc, #56]	; (800d3e4 <MX_USB_HOST_Init+0x40>)
 800d3ac:	480e      	ldr	r0, [pc, #56]	; (800d3e8 <MX_USB_HOST_Init+0x44>)
 800d3ae:	f7fe fc9f 	bl	800bcf0 <USBH_Init>
 800d3b2:	4603      	mov	r3, r0
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d001      	beq.n	800d3bc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800d3b8:	f7f9 fa48 	bl	800684c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800d3bc:	490b      	ldr	r1, [pc, #44]	; (800d3ec <MX_USB_HOST_Init+0x48>)
 800d3be:	480a      	ldr	r0, [pc, #40]	; (800d3e8 <MX_USB_HOST_Init+0x44>)
 800d3c0:	f7fe fd24 	bl	800be0c <USBH_RegisterClass>
 800d3c4:	4603      	mov	r3, r0
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d001      	beq.n	800d3ce <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800d3ca:	f7f9 fa3f 	bl	800684c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800d3ce:	4806      	ldr	r0, [pc, #24]	; (800d3e8 <MX_USB_HOST_Init+0x44>)
 800d3d0:	f7fe fda8 	bl	800bf24 <USBH_Start>
 800d3d4:	4603      	mov	r3, r0
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d001      	beq.n	800d3de <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800d3da:	f7f9 fa37 	bl	800684c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800d3de:	bf00      	nop
 800d3e0:	bd80      	pop	{r7, pc}
 800d3e2:	bf00      	nop
 800d3e4:	0800d405 	.word	0x0800d405
 800d3e8:	20000208 	.word	0x20000208
 800d3ec:	2000000c 	.word	0x2000000c

0800d3f0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800d3f0:	b580      	push	{r7, lr}
 800d3f2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800d3f4:	4802      	ldr	r0, [pc, #8]	; (800d400 <MX_USB_HOST_Process+0x10>)
 800d3f6:	f7fe fda5 	bl	800bf44 <USBH_Process>
}
 800d3fa:	bf00      	nop
 800d3fc:	bd80      	pop	{r7, pc}
 800d3fe:	bf00      	nop
 800d400:	20000208 	.word	0x20000208

0800d404 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800d404:	b480      	push	{r7}
 800d406:	b083      	sub	sp, #12
 800d408:	af00      	add	r7, sp, #0
 800d40a:	6078      	str	r0, [r7, #4]
 800d40c:	460b      	mov	r3, r1
 800d40e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800d410:	78fb      	ldrb	r3, [r7, #3]
 800d412:	3b01      	subs	r3, #1
 800d414:	2b04      	cmp	r3, #4
 800d416:	d819      	bhi.n	800d44c <USBH_UserProcess+0x48>
 800d418:	a201      	add	r2, pc, #4	; (adr r2, 800d420 <USBH_UserProcess+0x1c>)
 800d41a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d41e:	bf00      	nop
 800d420:	0800d44d 	.word	0x0800d44d
 800d424:	0800d43d 	.word	0x0800d43d
 800d428:	0800d44d 	.word	0x0800d44d
 800d42c:	0800d445 	.word	0x0800d445
 800d430:	0800d435 	.word	0x0800d435
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800d434:	4b09      	ldr	r3, [pc, #36]	; (800d45c <USBH_UserProcess+0x58>)
 800d436:	2203      	movs	r2, #3
 800d438:	701a      	strb	r2, [r3, #0]
  break;
 800d43a:	e008      	b.n	800d44e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800d43c:	4b07      	ldr	r3, [pc, #28]	; (800d45c <USBH_UserProcess+0x58>)
 800d43e:	2202      	movs	r2, #2
 800d440:	701a      	strb	r2, [r3, #0]
  break;
 800d442:	e004      	b.n	800d44e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800d444:	4b05      	ldr	r3, [pc, #20]	; (800d45c <USBH_UserProcess+0x58>)
 800d446:	2201      	movs	r2, #1
 800d448:	701a      	strb	r2, [r3, #0]
  break;
 800d44a:	e000      	b.n	800d44e <USBH_UserProcess+0x4a>

  default:
  break;
 800d44c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800d44e:	bf00      	nop
 800d450:	370c      	adds	r7, #12
 800d452:	46bd      	mov	sp, r7
 800d454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d458:	4770      	bx	lr
 800d45a:	bf00      	nop
 800d45c:	200000b8 	.word	0x200000b8

0800d460 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800d460:	b580      	push	{r7, lr}
 800d462:	b08a      	sub	sp, #40	; 0x28
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d468:	f107 0314 	add.w	r3, r7, #20
 800d46c:	2200      	movs	r2, #0
 800d46e:	601a      	str	r2, [r3, #0]
 800d470:	605a      	str	r2, [r3, #4]
 800d472:	609a      	str	r2, [r3, #8]
 800d474:	60da      	str	r2, [r3, #12]
 800d476:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d480:	d147      	bne.n	800d512 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d482:	2300      	movs	r3, #0
 800d484:	613b      	str	r3, [r7, #16]
 800d486:	4b25      	ldr	r3, [pc, #148]	; (800d51c <HAL_HCD_MspInit+0xbc>)
 800d488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d48a:	4a24      	ldr	r2, [pc, #144]	; (800d51c <HAL_HCD_MspInit+0xbc>)
 800d48c:	f043 0301 	orr.w	r3, r3, #1
 800d490:	6313      	str	r3, [r2, #48]	; 0x30
 800d492:	4b22      	ldr	r3, [pc, #136]	; (800d51c <HAL_HCD_MspInit+0xbc>)
 800d494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d496:	f003 0301 	and.w	r3, r3, #1
 800d49a:	613b      	str	r3, [r7, #16]
 800d49c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800d49e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d4a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d4a8:	2300      	movs	r3, #0
 800d4aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800d4ac:	f107 0314 	add.w	r3, r7, #20
 800d4b0:	4619      	mov	r1, r3
 800d4b2:	481b      	ldr	r0, [pc, #108]	; (800d520 <HAL_HCD_MspInit+0xc0>)
 800d4b4:	f7f9 fcec 	bl	8006e90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800d4b8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800d4bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d4be:	2302      	movs	r3, #2
 800d4c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d4c6:	2303      	movs	r3, #3
 800d4c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d4ca:	230a      	movs	r3, #10
 800d4cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d4ce:	f107 0314 	add.w	r3, r7, #20
 800d4d2:	4619      	mov	r1, r3
 800d4d4:	4812      	ldr	r0, [pc, #72]	; (800d520 <HAL_HCD_MspInit+0xc0>)
 800d4d6:	f7f9 fcdb 	bl	8006e90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d4da:	4b10      	ldr	r3, [pc, #64]	; (800d51c <HAL_HCD_MspInit+0xbc>)
 800d4dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4de:	4a0f      	ldr	r2, [pc, #60]	; (800d51c <HAL_HCD_MspInit+0xbc>)
 800d4e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d4e4:	6353      	str	r3, [r2, #52]	; 0x34
 800d4e6:	2300      	movs	r3, #0
 800d4e8:	60fb      	str	r3, [r7, #12]
 800d4ea:	4b0c      	ldr	r3, [pc, #48]	; (800d51c <HAL_HCD_MspInit+0xbc>)
 800d4ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d4ee:	4a0b      	ldr	r2, [pc, #44]	; (800d51c <HAL_HCD_MspInit+0xbc>)
 800d4f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d4f4:	6453      	str	r3, [r2, #68]	; 0x44
 800d4f6:	4b09      	ldr	r3, [pc, #36]	; (800d51c <HAL_HCD_MspInit+0xbc>)
 800d4f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d4fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d4fe:	60fb      	str	r3, [r7, #12]
 800d500:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d502:	2200      	movs	r2, #0
 800d504:	2100      	movs	r1, #0
 800d506:	2043      	movs	r0, #67	; 0x43
 800d508:	f7f9 fc8b 	bl	8006e22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d50c:	2043      	movs	r0, #67	; 0x43
 800d50e:	f7f9 fca4 	bl	8006e5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d512:	bf00      	nop
 800d514:	3728      	adds	r7, #40	; 0x28
 800d516:	46bd      	mov	sp, r7
 800d518:	bd80      	pop	{r7, pc}
 800d51a:	bf00      	nop
 800d51c:	40023800 	.word	0x40023800
 800d520:	40020000 	.word	0x40020000

0800d524 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800d524:	b580      	push	{r7, lr}
 800d526:	b082      	sub	sp, #8
 800d528:	af00      	add	r7, sp, #0
 800d52a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d532:	4618      	mov	r0, r3
 800d534:	f7ff f8d9 	bl	800c6ea <USBH_LL_IncTimer>
}
 800d538:	bf00      	nop
 800d53a:	3708      	adds	r7, #8
 800d53c:	46bd      	mov	sp, r7
 800d53e:	bd80      	pop	{r7, pc}

0800d540 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d540:	b580      	push	{r7, lr}
 800d542:	b082      	sub	sp, #8
 800d544:	af00      	add	r7, sp, #0
 800d546:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d54e:	4618      	mov	r0, r3
 800d550:	f7ff f911 	bl	800c776 <USBH_LL_Connect>
}
 800d554:	bf00      	nop
 800d556:	3708      	adds	r7, #8
 800d558:	46bd      	mov	sp, r7
 800d55a:	bd80      	pop	{r7, pc}

0800d55c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d55c:	b580      	push	{r7, lr}
 800d55e:	b082      	sub	sp, #8
 800d560:	af00      	add	r7, sp, #0
 800d562:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d56a:	4618      	mov	r0, r3
 800d56c:	f7ff f91a 	bl	800c7a4 <USBH_LL_Disconnect>
}
 800d570:	bf00      	nop
 800d572:	3708      	adds	r7, #8
 800d574:	46bd      	mov	sp, r7
 800d576:	bd80      	pop	{r7, pc}

0800d578 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800d578:	b480      	push	{r7}
 800d57a:	b083      	sub	sp, #12
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	6078      	str	r0, [r7, #4]
 800d580:	460b      	mov	r3, r1
 800d582:	70fb      	strb	r3, [r7, #3]
 800d584:	4613      	mov	r3, r2
 800d586:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800d588:	bf00      	nop
 800d58a:	370c      	adds	r7, #12
 800d58c:	46bd      	mov	sp, r7
 800d58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d592:	4770      	bx	lr

0800d594 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d594:	b580      	push	{r7, lr}
 800d596:	b082      	sub	sp, #8
 800d598:	af00      	add	r7, sp, #0
 800d59a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	f7ff f8cb 	bl	800c73e <USBH_LL_PortEnabled>
}
 800d5a8:	bf00      	nop
 800d5aa:	3708      	adds	r7, #8
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	bd80      	pop	{r7, pc}

0800d5b0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b082      	sub	sp, #8
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d5be:	4618      	mov	r0, r3
 800d5c0:	f7ff f8cb 	bl	800c75a <USBH_LL_PortDisabled>
}
 800d5c4:	bf00      	nop
 800d5c6:	3708      	adds	r7, #8
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	bd80      	pop	{r7, pc}

0800d5cc <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b082      	sub	sp, #8
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800d5da:	2b01      	cmp	r3, #1
 800d5dc:	d12a      	bne.n	800d634 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800d5de:	4a18      	ldr	r2, [pc, #96]	; (800d640 <USBH_LL_Init+0x74>)
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	4a15      	ldr	r2, [pc, #84]	; (800d640 <USBH_LL_Init+0x74>)
 800d5ea:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d5ee:	4b14      	ldr	r3, [pc, #80]	; (800d640 <USBH_LL_Init+0x74>)
 800d5f0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d5f4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800d5f6:	4b12      	ldr	r3, [pc, #72]	; (800d640 <USBH_LL_Init+0x74>)
 800d5f8:	2208      	movs	r2, #8
 800d5fa:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800d5fc:	4b10      	ldr	r3, [pc, #64]	; (800d640 <USBH_LL_Init+0x74>)
 800d5fe:	2201      	movs	r2, #1
 800d600:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d602:	4b0f      	ldr	r3, [pc, #60]	; (800d640 <USBH_LL_Init+0x74>)
 800d604:	2200      	movs	r2, #0
 800d606:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800d608:	4b0d      	ldr	r3, [pc, #52]	; (800d640 <USBH_LL_Init+0x74>)
 800d60a:	2202      	movs	r2, #2
 800d60c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d60e:	4b0c      	ldr	r3, [pc, #48]	; (800d640 <USBH_LL_Init+0x74>)
 800d610:	2200      	movs	r2, #0
 800d612:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800d614:	480a      	ldr	r0, [pc, #40]	; (800d640 <USBH_LL_Init+0x74>)
 800d616:	f7f9 fdd6 	bl	80071c6 <HAL_HCD_Init>
 800d61a:	4603      	mov	r3, r0
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d001      	beq.n	800d624 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800d620:	f7f9 f914 	bl	800684c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800d624:	4806      	ldr	r0, [pc, #24]	; (800d640 <USBH_LL_Init+0x74>)
 800d626:	f7fa f9d9 	bl	80079dc <HAL_HCD_GetCurrentFrame>
 800d62a:	4603      	mov	r3, r0
 800d62c:	4619      	mov	r1, r3
 800d62e:	6878      	ldr	r0, [r7, #4]
 800d630:	f7ff f84c 	bl	800c6cc <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800d634:	2300      	movs	r3, #0
}
 800d636:	4618      	mov	r0, r3
 800d638:	3708      	adds	r7, #8
 800d63a:	46bd      	mov	sp, r7
 800d63c:	bd80      	pop	{r7, pc}
 800d63e:	bf00      	nop
 800d640:	200005e0 	.word	0x200005e0

0800d644 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800d644:	b580      	push	{r7, lr}
 800d646:	b084      	sub	sp, #16
 800d648:	af00      	add	r7, sp, #0
 800d64a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d64c:	2300      	movs	r3, #0
 800d64e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d650:	2300      	movs	r3, #0
 800d652:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d65a:	4618      	mov	r0, r3
 800d65c:	f7fa f946 	bl	80078ec <HAL_HCD_Start>
 800d660:	4603      	mov	r3, r0
 800d662:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d664:	7bfb      	ldrb	r3, [r7, #15]
 800d666:	4618      	mov	r0, r3
 800d668:	f000 f95c 	bl	800d924 <USBH_Get_USB_Status>
 800d66c:	4603      	mov	r3, r0
 800d66e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d670:	7bbb      	ldrb	r3, [r7, #14]
}
 800d672:	4618      	mov	r0, r3
 800d674:	3710      	adds	r7, #16
 800d676:	46bd      	mov	sp, r7
 800d678:	bd80      	pop	{r7, pc}

0800d67a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800d67a:	b580      	push	{r7, lr}
 800d67c:	b084      	sub	sp, #16
 800d67e:	af00      	add	r7, sp, #0
 800d680:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d682:	2300      	movs	r3, #0
 800d684:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d686:	2300      	movs	r3, #0
 800d688:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d690:	4618      	mov	r0, r3
 800d692:	f7fa f94e 	bl	8007932 <HAL_HCD_Stop>
 800d696:	4603      	mov	r3, r0
 800d698:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d69a:	7bfb      	ldrb	r3, [r7, #15]
 800d69c:	4618      	mov	r0, r3
 800d69e:	f000 f941 	bl	800d924 <USBH_Get_USB_Status>
 800d6a2:	4603      	mov	r3, r0
 800d6a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d6a6:	7bbb      	ldrb	r3, [r7, #14]
}
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	3710      	adds	r7, #16
 800d6ac:	46bd      	mov	sp, r7
 800d6ae:	bd80      	pop	{r7, pc}

0800d6b0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800d6b0:	b580      	push	{r7, lr}
 800d6b2:	b084      	sub	sp, #16
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800d6b8:	2301      	movs	r3, #1
 800d6ba:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	f7fa f998 	bl	80079f8 <HAL_HCD_GetCurrentSpeed>
 800d6c8:	4603      	mov	r3, r0
 800d6ca:	2b01      	cmp	r3, #1
 800d6cc:	d007      	beq.n	800d6de <USBH_LL_GetSpeed+0x2e>
 800d6ce:	2b01      	cmp	r3, #1
 800d6d0:	d302      	bcc.n	800d6d8 <USBH_LL_GetSpeed+0x28>
 800d6d2:	2b02      	cmp	r3, #2
 800d6d4:	d006      	beq.n	800d6e4 <USBH_LL_GetSpeed+0x34>
 800d6d6:	e008      	b.n	800d6ea <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800d6d8:	2300      	movs	r3, #0
 800d6da:	73fb      	strb	r3, [r7, #15]
    break;
 800d6dc:	e008      	b.n	800d6f0 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800d6de:	2301      	movs	r3, #1
 800d6e0:	73fb      	strb	r3, [r7, #15]
    break;
 800d6e2:	e005      	b.n	800d6f0 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800d6e4:	2302      	movs	r3, #2
 800d6e6:	73fb      	strb	r3, [r7, #15]
    break;
 800d6e8:	e002      	b.n	800d6f0 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800d6ea:	2301      	movs	r3, #1
 800d6ec:	73fb      	strb	r3, [r7, #15]
    break;
 800d6ee:	bf00      	nop
  }
  return  speed;
 800d6f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	3710      	adds	r7, #16
 800d6f6:	46bd      	mov	sp, r7
 800d6f8:	bd80      	pop	{r7, pc}

0800d6fa <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800d6fa:	b580      	push	{r7, lr}
 800d6fc:	b084      	sub	sp, #16
 800d6fe:	af00      	add	r7, sp, #0
 800d700:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d702:	2300      	movs	r3, #0
 800d704:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d706:	2300      	movs	r3, #0
 800d708:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d710:	4618      	mov	r0, r3
 800d712:	f7fa f92b 	bl	800796c <HAL_HCD_ResetPort>
 800d716:	4603      	mov	r3, r0
 800d718:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d71a:	7bfb      	ldrb	r3, [r7, #15]
 800d71c:	4618      	mov	r0, r3
 800d71e:	f000 f901 	bl	800d924 <USBH_Get_USB_Status>
 800d722:	4603      	mov	r3, r0
 800d724:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d726:	7bbb      	ldrb	r3, [r7, #14]
}
 800d728:	4618      	mov	r0, r3
 800d72a:	3710      	adds	r7, #16
 800d72c:	46bd      	mov	sp, r7
 800d72e:	bd80      	pop	{r7, pc}

0800d730 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d730:	b580      	push	{r7, lr}
 800d732:	b082      	sub	sp, #8
 800d734:	af00      	add	r7, sp, #0
 800d736:	6078      	str	r0, [r7, #4]
 800d738:	460b      	mov	r3, r1
 800d73a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d742:	78fa      	ldrb	r2, [r7, #3]
 800d744:	4611      	mov	r1, r2
 800d746:	4618      	mov	r0, r3
 800d748:	f7fa f933 	bl	80079b2 <HAL_HCD_HC_GetXferCount>
 800d74c:	4603      	mov	r3, r0
}
 800d74e:	4618      	mov	r0, r3
 800d750:	3708      	adds	r7, #8
 800d752:	46bd      	mov	sp, r7
 800d754:	bd80      	pop	{r7, pc}

0800d756 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d756:	b590      	push	{r4, r7, lr}
 800d758:	b089      	sub	sp, #36	; 0x24
 800d75a:	af04      	add	r7, sp, #16
 800d75c:	6078      	str	r0, [r7, #4]
 800d75e:	4608      	mov	r0, r1
 800d760:	4611      	mov	r1, r2
 800d762:	461a      	mov	r2, r3
 800d764:	4603      	mov	r3, r0
 800d766:	70fb      	strb	r3, [r7, #3]
 800d768:	460b      	mov	r3, r1
 800d76a:	70bb      	strb	r3, [r7, #2]
 800d76c:	4613      	mov	r3, r2
 800d76e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d770:	2300      	movs	r3, #0
 800d772:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d774:	2300      	movs	r3, #0
 800d776:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d77e:	787c      	ldrb	r4, [r7, #1]
 800d780:	78ba      	ldrb	r2, [r7, #2]
 800d782:	78f9      	ldrb	r1, [r7, #3]
 800d784:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d786:	9302      	str	r3, [sp, #8]
 800d788:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d78c:	9301      	str	r3, [sp, #4]
 800d78e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d792:	9300      	str	r3, [sp, #0]
 800d794:	4623      	mov	r3, r4
 800d796:	f7f9 fd78 	bl	800728a <HAL_HCD_HC_Init>
 800d79a:	4603      	mov	r3, r0
 800d79c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800d79e:	7bfb      	ldrb	r3, [r7, #15]
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	f000 f8bf 	bl	800d924 <USBH_Get_USB_Status>
 800d7a6:	4603      	mov	r3, r0
 800d7a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d7aa:	7bbb      	ldrb	r3, [r7, #14]
}
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	3714      	adds	r7, #20
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	bd90      	pop	{r4, r7, pc}

0800d7b4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	b084      	sub	sp, #16
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	6078      	str	r0, [r7, #4]
 800d7bc:	460b      	mov	r3, r1
 800d7be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d7c0:	2300      	movs	r3, #0
 800d7c2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d7ce:	78fa      	ldrb	r2, [r7, #3]
 800d7d0:	4611      	mov	r1, r2
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	f7f9 fdf1 	bl	80073ba <HAL_HCD_HC_Halt>
 800d7d8:	4603      	mov	r3, r0
 800d7da:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d7dc:	7bfb      	ldrb	r3, [r7, #15]
 800d7de:	4618      	mov	r0, r3
 800d7e0:	f000 f8a0 	bl	800d924 <USBH_Get_USB_Status>
 800d7e4:	4603      	mov	r3, r0
 800d7e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d7e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	3710      	adds	r7, #16
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	bd80      	pop	{r7, pc}

0800d7f2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800d7f2:	b590      	push	{r4, r7, lr}
 800d7f4:	b089      	sub	sp, #36	; 0x24
 800d7f6:	af04      	add	r7, sp, #16
 800d7f8:	6078      	str	r0, [r7, #4]
 800d7fa:	4608      	mov	r0, r1
 800d7fc:	4611      	mov	r1, r2
 800d7fe:	461a      	mov	r2, r3
 800d800:	4603      	mov	r3, r0
 800d802:	70fb      	strb	r3, [r7, #3]
 800d804:	460b      	mov	r3, r1
 800d806:	70bb      	strb	r3, [r7, #2]
 800d808:	4613      	mov	r3, r2
 800d80a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d80c:	2300      	movs	r3, #0
 800d80e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d810:	2300      	movs	r3, #0
 800d812:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d81a:	787c      	ldrb	r4, [r7, #1]
 800d81c:	78ba      	ldrb	r2, [r7, #2]
 800d81e:	78f9      	ldrb	r1, [r7, #3]
 800d820:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d824:	9303      	str	r3, [sp, #12]
 800d826:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d828:	9302      	str	r3, [sp, #8]
 800d82a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d82c:	9301      	str	r3, [sp, #4]
 800d82e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d832:	9300      	str	r3, [sp, #0]
 800d834:	4623      	mov	r3, r4
 800d836:	f7f9 fde3 	bl	8007400 <HAL_HCD_HC_SubmitRequest>
 800d83a:	4603      	mov	r3, r0
 800d83c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800d83e:	7bfb      	ldrb	r3, [r7, #15]
 800d840:	4618      	mov	r0, r3
 800d842:	f000 f86f 	bl	800d924 <USBH_Get_USB_Status>
 800d846:	4603      	mov	r3, r0
 800d848:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d84a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d84c:	4618      	mov	r0, r3
 800d84e:	3714      	adds	r7, #20
 800d850:	46bd      	mov	sp, r7
 800d852:	bd90      	pop	{r4, r7, pc}

0800d854 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d854:	b580      	push	{r7, lr}
 800d856:	b082      	sub	sp, #8
 800d858:	af00      	add	r7, sp, #0
 800d85a:	6078      	str	r0, [r7, #4]
 800d85c:	460b      	mov	r3, r1
 800d85e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d866:	78fa      	ldrb	r2, [r7, #3]
 800d868:	4611      	mov	r1, r2
 800d86a:	4618      	mov	r0, r3
 800d86c:	f7fa f88c 	bl	8007988 <HAL_HCD_HC_GetURBState>
 800d870:	4603      	mov	r3, r0
}
 800d872:	4618      	mov	r0, r3
 800d874:	3708      	adds	r7, #8
 800d876:	46bd      	mov	sp, r7
 800d878:	bd80      	pop	{r7, pc}

0800d87a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800d87a:	b580      	push	{r7, lr}
 800d87c:	b082      	sub	sp, #8
 800d87e:	af00      	add	r7, sp, #0
 800d880:	6078      	str	r0, [r7, #4]
 800d882:	460b      	mov	r3, r1
 800d884:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800d88c:	2b01      	cmp	r3, #1
 800d88e:	d103      	bne.n	800d898 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800d890:	78fb      	ldrb	r3, [r7, #3]
 800d892:	4618      	mov	r0, r3
 800d894:	f000 f872 	bl	800d97c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800d898:	20c8      	movs	r0, #200	; 0xc8
 800d89a:	f7f9 f9c5 	bl	8006c28 <HAL_Delay>
  return USBH_OK;
 800d89e:	2300      	movs	r3, #0
}
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	3708      	adds	r7, #8
 800d8a4:	46bd      	mov	sp, r7
 800d8a6:	bd80      	pop	{r7, pc}

0800d8a8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800d8a8:	b480      	push	{r7}
 800d8aa:	b085      	sub	sp, #20
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	6078      	str	r0, [r7, #4]
 800d8b0:	460b      	mov	r3, r1
 800d8b2:	70fb      	strb	r3, [r7, #3]
 800d8b4:	4613      	mov	r3, r2
 800d8b6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d8be:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800d8c0:	78fa      	ldrb	r2, [r7, #3]
 800d8c2:	68f9      	ldr	r1, [r7, #12]
 800d8c4:	4613      	mov	r3, r2
 800d8c6:	009b      	lsls	r3, r3, #2
 800d8c8:	4413      	add	r3, r2
 800d8ca:	00db      	lsls	r3, r3, #3
 800d8cc:	440b      	add	r3, r1
 800d8ce:	333b      	adds	r3, #59	; 0x3b
 800d8d0:	781b      	ldrb	r3, [r3, #0]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d00a      	beq.n	800d8ec <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800d8d6:	78fa      	ldrb	r2, [r7, #3]
 800d8d8:	68f9      	ldr	r1, [r7, #12]
 800d8da:	4613      	mov	r3, r2
 800d8dc:	009b      	lsls	r3, r3, #2
 800d8de:	4413      	add	r3, r2
 800d8e0:	00db      	lsls	r3, r3, #3
 800d8e2:	440b      	add	r3, r1
 800d8e4:	3350      	adds	r3, #80	; 0x50
 800d8e6:	78ba      	ldrb	r2, [r7, #2]
 800d8e8:	701a      	strb	r2, [r3, #0]
 800d8ea:	e009      	b.n	800d900 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800d8ec:	78fa      	ldrb	r2, [r7, #3]
 800d8ee:	68f9      	ldr	r1, [r7, #12]
 800d8f0:	4613      	mov	r3, r2
 800d8f2:	009b      	lsls	r3, r3, #2
 800d8f4:	4413      	add	r3, r2
 800d8f6:	00db      	lsls	r3, r3, #3
 800d8f8:	440b      	add	r3, r1
 800d8fa:	3351      	adds	r3, #81	; 0x51
 800d8fc:	78ba      	ldrb	r2, [r7, #2]
 800d8fe:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800d900:	2300      	movs	r3, #0
}
 800d902:	4618      	mov	r0, r3
 800d904:	3714      	adds	r7, #20
 800d906:	46bd      	mov	sp, r7
 800d908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d90c:	4770      	bx	lr

0800d90e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800d90e:	b580      	push	{r7, lr}
 800d910:	b082      	sub	sp, #8
 800d912:	af00      	add	r7, sp, #0
 800d914:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800d916:	6878      	ldr	r0, [r7, #4]
 800d918:	f7f9 f986 	bl	8006c28 <HAL_Delay>
}
 800d91c:	bf00      	nop
 800d91e:	3708      	adds	r7, #8
 800d920:	46bd      	mov	sp, r7
 800d922:	bd80      	pop	{r7, pc}

0800d924 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d924:	b480      	push	{r7}
 800d926:	b085      	sub	sp, #20
 800d928:	af00      	add	r7, sp, #0
 800d92a:	4603      	mov	r3, r0
 800d92c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d92e:	2300      	movs	r3, #0
 800d930:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d932:	79fb      	ldrb	r3, [r7, #7]
 800d934:	2b03      	cmp	r3, #3
 800d936:	d817      	bhi.n	800d968 <USBH_Get_USB_Status+0x44>
 800d938:	a201      	add	r2, pc, #4	; (adr r2, 800d940 <USBH_Get_USB_Status+0x1c>)
 800d93a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d93e:	bf00      	nop
 800d940:	0800d951 	.word	0x0800d951
 800d944:	0800d957 	.word	0x0800d957
 800d948:	0800d95d 	.word	0x0800d95d
 800d94c:	0800d963 	.word	0x0800d963
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800d950:	2300      	movs	r3, #0
 800d952:	73fb      	strb	r3, [r7, #15]
    break;
 800d954:	e00b      	b.n	800d96e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800d956:	2302      	movs	r3, #2
 800d958:	73fb      	strb	r3, [r7, #15]
    break;
 800d95a:	e008      	b.n	800d96e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800d95c:	2301      	movs	r3, #1
 800d95e:	73fb      	strb	r3, [r7, #15]
    break;
 800d960:	e005      	b.n	800d96e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800d962:	2302      	movs	r3, #2
 800d964:	73fb      	strb	r3, [r7, #15]
    break;
 800d966:	e002      	b.n	800d96e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800d968:	2302      	movs	r3, #2
 800d96a:	73fb      	strb	r3, [r7, #15]
    break;
 800d96c:	bf00      	nop
  }
  return usb_status;
 800d96e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d970:	4618      	mov	r0, r3
 800d972:	3714      	adds	r7, #20
 800d974:	46bd      	mov	sp, r7
 800d976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97a:	4770      	bx	lr

0800d97c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800d97c:	b580      	push	{r7, lr}
 800d97e:	b084      	sub	sp, #16
 800d980:	af00      	add	r7, sp, #0
 800d982:	4603      	mov	r3, r0
 800d984:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800d986:	79fb      	ldrb	r3, [r7, #7]
 800d988:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800d98a:	79fb      	ldrb	r3, [r7, #7]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d102      	bne.n	800d996 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800d990:	2301      	movs	r3, #1
 800d992:	73fb      	strb	r3, [r7, #15]
 800d994:	e001      	b.n	800d99a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800d996:	2300      	movs	r3, #0
 800d998:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800d99a:	7bfb      	ldrb	r3, [r7, #15]
 800d99c:	461a      	mov	r2, r3
 800d99e:	2101      	movs	r1, #1
 800d9a0:	4803      	ldr	r0, [pc, #12]	; (800d9b0 <MX_DriverVbusFS+0x34>)
 800d9a2:	f7f9 fbf7 	bl	8007194 <HAL_GPIO_WritePin>
}
 800d9a6:	bf00      	nop
 800d9a8:	3710      	adds	r7, #16
 800d9aa:	46bd      	mov	sp, r7
 800d9ac:	bd80      	pop	{r7, pc}
 800d9ae:	bf00      	nop
 800d9b0:	40020800 	.word	0x40020800

0800d9b4 <_ZdaPv>:
 800d9b4:	f000 b820 	b.w	800d9f8 <_ZdlPv>

0800d9b8 <__cxa_pure_virtual>:
 800d9b8:	b508      	push	{r3, lr}
 800d9ba:	f000 f82b 	bl	800da14 <_ZSt9terminatev>

0800d9be <_Znaj>:
 800d9be:	f000 b802 	b.w	800d9c6 <_Znwj>

0800d9c2 <_ZdlPvj>:
 800d9c2:	f000 b819 	b.w	800d9f8 <_ZdlPv>

0800d9c6 <_Znwj>:
 800d9c6:	b510      	push	{r4, lr}
 800d9c8:	2800      	cmp	r0, #0
 800d9ca:	bf14      	ite	ne
 800d9cc:	4604      	movne	r4, r0
 800d9ce:	2401      	moveq	r4, #1
 800d9d0:	4620      	mov	r0, r4
 800d9d2:	f000 f85b 	bl	800da8c <malloc>
 800d9d6:	b930      	cbnz	r0, 800d9e6 <_Znwj+0x20>
 800d9d8:	f000 f806 	bl	800d9e8 <_ZSt15get_new_handlerv>
 800d9dc:	b908      	cbnz	r0, 800d9e2 <_Znwj+0x1c>
 800d9de:	f000 f824 	bl	800da2a <abort>
 800d9e2:	4780      	blx	r0
 800d9e4:	e7f4      	b.n	800d9d0 <_Znwj+0xa>
 800d9e6:	bd10      	pop	{r4, pc}

0800d9e8 <_ZSt15get_new_handlerv>:
 800d9e8:	4b02      	ldr	r3, [pc, #8]	; (800d9f4 <_ZSt15get_new_handlerv+0xc>)
 800d9ea:	6818      	ldr	r0, [r3, #0]
 800d9ec:	f3bf 8f5b 	dmb	ish
 800d9f0:	4770      	bx	lr
 800d9f2:	bf00      	nop
 800d9f4:	200000bc 	.word	0x200000bc

0800d9f8 <_ZdlPv>:
 800d9f8:	f000 b850 	b.w	800da9c <free>

0800d9fc <_ZN10__cxxabiv111__terminateEPFvvE>:
 800d9fc:	b508      	push	{r3, lr}
 800d9fe:	4780      	blx	r0
 800da00:	f000 f813 	bl	800da2a <abort>

0800da04 <_ZSt13get_terminatev>:
 800da04:	4b02      	ldr	r3, [pc, #8]	; (800da10 <_ZSt13get_terminatev+0xc>)
 800da06:	6818      	ldr	r0, [r3, #0]
 800da08:	f3bf 8f5b 	dmb	ish
 800da0c:	4770      	bx	lr
 800da0e:	bf00      	nop
 800da10:	2000002c 	.word	0x2000002c

0800da14 <_ZSt9terminatev>:
 800da14:	b508      	push	{r3, lr}
 800da16:	f7ff fff5 	bl	800da04 <_ZSt13get_terminatev>
 800da1a:	f7ff ffef 	bl	800d9fc <_ZN10__cxxabiv111__terminateEPFvvE>

0800da1e <_ZSt17__throw_bad_allocv>:
 800da1e:	b508      	push	{r3, lr}
 800da20:	f000 f803 	bl	800da2a <abort>

0800da24 <_ZSt20__throw_length_errorPKc>:
 800da24:	b508      	push	{r3, lr}
 800da26:	f000 f800 	bl	800da2a <abort>

0800da2a <abort>:
 800da2a:	b508      	push	{r3, lr}
 800da2c:	2006      	movs	r0, #6
 800da2e:	f000 f925 	bl	800dc7c <raise>
 800da32:	2001      	movs	r0, #1
 800da34:	f7f9 f806 	bl	8006a44 <_exit>

0800da38 <__errno>:
 800da38:	4b01      	ldr	r3, [pc, #4]	; (800da40 <__errno+0x8>)
 800da3a:	6818      	ldr	r0, [r3, #0]
 800da3c:	4770      	bx	lr
 800da3e:	bf00      	nop
 800da40:	20000030 	.word	0x20000030

0800da44 <__libc_init_array>:
 800da44:	b570      	push	{r4, r5, r6, lr}
 800da46:	4e0d      	ldr	r6, [pc, #52]	; (800da7c <__libc_init_array+0x38>)
 800da48:	4c0d      	ldr	r4, [pc, #52]	; (800da80 <__libc_init_array+0x3c>)
 800da4a:	1ba4      	subs	r4, r4, r6
 800da4c:	10a4      	asrs	r4, r4, #2
 800da4e:	2500      	movs	r5, #0
 800da50:	42a5      	cmp	r5, r4
 800da52:	d109      	bne.n	800da68 <__libc_init_array+0x24>
 800da54:	4e0b      	ldr	r6, [pc, #44]	; (800da84 <__libc_init_array+0x40>)
 800da56:	4c0c      	ldr	r4, [pc, #48]	; (800da88 <__libc_init_array+0x44>)
 800da58:	f000 f92e 	bl	800dcb8 <_init>
 800da5c:	1ba4      	subs	r4, r4, r6
 800da5e:	10a4      	asrs	r4, r4, #2
 800da60:	2500      	movs	r5, #0
 800da62:	42a5      	cmp	r5, r4
 800da64:	d105      	bne.n	800da72 <__libc_init_array+0x2e>
 800da66:	bd70      	pop	{r4, r5, r6, pc}
 800da68:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800da6c:	4798      	blx	r3
 800da6e:	3501      	adds	r5, #1
 800da70:	e7ee      	b.n	800da50 <__libc_init_array+0xc>
 800da72:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800da76:	4798      	blx	r3
 800da78:	3501      	adds	r5, #1
 800da7a:	e7f2      	b.n	800da62 <__libc_init_array+0x1e>
 800da7c:	0800de70 	.word	0x0800de70
 800da80:	0800de70 	.word	0x0800de70
 800da84:	0800de70 	.word	0x0800de70
 800da88:	0800de74 	.word	0x0800de74

0800da8c <malloc>:
 800da8c:	4b02      	ldr	r3, [pc, #8]	; (800da98 <malloc+0xc>)
 800da8e:	4601      	mov	r1, r0
 800da90:	6818      	ldr	r0, [r3, #0]
 800da92:	f000 b861 	b.w	800db58 <_malloc_r>
 800da96:	bf00      	nop
 800da98:	20000030 	.word	0x20000030

0800da9c <free>:
 800da9c:	4b02      	ldr	r3, [pc, #8]	; (800daa8 <free+0xc>)
 800da9e:	4601      	mov	r1, r0
 800daa0:	6818      	ldr	r0, [r3, #0]
 800daa2:	f000 b80b 	b.w	800dabc <_free_r>
 800daa6:	bf00      	nop
 800daa8:	20000030 	.word	0x20000030

0800daac <memset>:
 800daac:	4402      	add	r2, r0
 800daae:	4603      	mov	r3, r0
 800dab0:	4293      	cmp	r3, r2
 800dab2:	d100      	bne.n	800dab6 <memset+0xa>
 800dab4:	4770      	bx	lr
 800dab6:	f803 1b01 	strb.w	r1, [r3], #1
 800daba:	e7f9      	b.n	800dab0 <memset+0x4>

0800dabc <_free_r>:
 800dabc:	b538      	push	{r3, r4, r5, lr}
 800dabe:	4605      	mov	r5, r0
 800dac0:	2900      	cmp	r1, #0
 800dac2:	d045      	beq.n	800db50 <_free_r+0x94>
 800dac4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dac8:	1f0c      	subs	r4, r1, #4
 800daca:	2b00      	cmp	r3, #0
 800dacc:	bfb8      	it	lt
 800dace:	18e4      	addlt	r4, r4, r3
 800dad0:	f000 f8f0 	bl	800dcb4 <__malloc_lock>
 800dad4:	4a1f      	ldr	r2, [pc, #124]	; (800db54 <_free_r+0x98>)
 800dad6:	6813      	ldr	r3, [r2, #0]
 800dad8:	4610      	mov	r0, r2
 800dada:	b933      	cbnz	r3, 800daea <_free_r+0x2e>
 800dadc:	6063      	str	r3, [r4, #4]
 800dade:	6014      	str	r4, [r2, #0]
 800dae0:	4628      	mov	r0, r5
 800dae2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dae6:	f000 b8e6 	b.w	800dcb6 <__malloc_unlock>
 800daea:	42a3      	cmp	r3, r4
 800daec:	d90c      	bls.n	800db08 <_free_r+0x4c>
 800daee:	6821      	ldr	r1, [r4, #0]
 800daf0:	1862      	adds	r2, r4, r1
 800daf2:	4293      	cmp	r3, r2
 800daf4:	bf04      	itt	eq
 800daf6:	681a      	ldreq	r2, [r3, #0]
 800daf8:	685b      	ldreq	r3, [r3, #4]
 800dafa:	6063      	str	r3, [r4, #4]
 800dafc:	bf04      	itt	eq
 800dafe:	1852      	addeq	r2, r2, r1
 800db00:	6022      	streq	r2, [r4, #0]
 800db02:	6004      	str	r4, [r0, #0]
 800db04:	e7ec      	b.n	800dae0 <_free_r+0x24>
 800db06:	4613      	mov	r3, r2
 800db08:	685a      	ldr	r2, [r3, #4]
 800db0a:	b10a      	cbz	r2, 800db10 <_free_r+0x54>
 800db0c:	42a2      	cmp	r2, r4
 800db0e:	d9fa      	bls.n	800db06 <_free_r+0x4a>
 800db10:	6819      	ldr	r1, [r3, #0]
 800db12:	1858      	adds	r0, r3, r1
 800db14:	42a0      	cmp	r0, r4
 800db16:	d10b      	bne.n	800db30 <_free_r+0x74>
 800db18:	6820      	ldr	r0, [r4, #0]
 800db1a:	4401      	add	r1, r0
 800db1c:	1858      	adds	r0, r3, r1
 800db1e:	4282      	cmp	r2, r0
 800db20:	6019      	str	r1, [r3, #0]
 800db22:	d1dd      	bne.n	800dae0 <_free_r+0x24>
 800db24:	6810      	ldr	r0, [r2, #0]
 800db26:	6852      	ldr	r2, [r2, #4]
 800db28:	605a      	str	r2, [r3, #4]
 800db2a:	4401      	add	r1, r0
 800db2c:	6019      	str	r1, [r3, #0]
 800db2e:	e7d7      	b.n	800dae0 <_free_r+0x24>
 800db30:	d902      	bls.n	800db38 <_free_r+0x7c>
 800db32:	230c      	movs	r3, #12
 800db34:	602b      	str	r3, [r5, #0]
 800db36:	e7d3      	b.n	800dae0 <_free_r+0x24>
 800db38:	6820      	ldr	r0, [r4, #0]
 800db3a:	1821      	adds	r1, r4, r0
 800db3c:	428a      	cmp	r2, r1
 800db3e:	bf04      	itt	eq
 800db40:	6811      	ldreq	r1, [r2, #0]
 800db42:	6852      	ldreq	r2, [r2, #4]
 800db44:	6062      	str	r2, [r4, #4]
 800db46:	bf04      	itt	eq
 800db48:	1809      	addeq	r1, r1, r0
 800db4a:	6021      	streq	r1, [r4, #0]
 800db4c:	605c      	str	r4, [r3, #4]
 800db4e:	e7c7      	b.n	800dae0 <_free_r+0x24>
 800db50:	bd38      	pop	{r3, r4, r5, pc}
 800db52:	bf00      	nop
 800db54:	200000c0 	.word	0x200000c0

0800db58 <_malloc_r>:
 800db58:	b570      	push	{r4, r5, r6, lr}
 800db5a:	1ccd      	adds	r5, r1, #3
 800db5c:	f025 0503 	bic.w	r5, r5, #3
 800db60:	3508      	adds	r5, #8
 800db62:	2d0c      	cmp	r5, #12
 800db64:	bf38      	it	cc
 800db66:	250c      	movcc	r5, #12
 800db68:	2d00      	cmp	r5, #0
 800db6a:	4606      	mov	r6, r0
 800db6c:	db01      	blt.n	800db72 <_malloc_r+0x1a>
 800db6e:	42a9      	cmp	r1, r5
 800db70:	d903      	bls.n	800db7a <_malloc_r+0x22>
 800db72:	230c      	movs	r3, #12
 800db74:	6033      	str	r3, [r6, #0]
 800db76:	2000      	movs	r0, #0
 800db78:	bd70      	pop	{r4, r5, r6, pc}
 800db7a:	f000 f89b 	bl	800dcb4 <__malloc_lock>
 800db7e:	4a21      	ldr	r2, [pc, #132]	; (800dc04 <_malloc_r+0xac>)
 800db80:	6814      	ldr	r4, [r2, #0]
 800db82:	4621      	mov	r1, r4
 800db84:	b991      	cbnz	r1, 800dbac <_malloc_r+0x54>
 800db86:	4c20      	ldr	r4, [pc, #128]	; (800dc08 <_malloc_r+0xb0>)
 800db88:	6823      	ldr	r3, [r4, #0]
 800db8a:	b91b      	cbnz	r3, 800db94 <_malloc_r+0x3c>
 800db8c:	4630      	mov	r0, r6
 800db8e:	f000 f83d 	bl	800dc0c <_sbrk_r>
 800db92:	6020      	str	r0, [r4, #0]
 800db94:	4629      	mov	r1, r5
 800db96:	4630      	mov	r0, r6
 800db98:	f000 f838 	bl	800dc0c <_sbrk_r>
 800db9c:	1c43      	adds	r3, r0, #1
 800db9e:	d124      	bne.n	800dbea <_malloc_r+0x92>
 800dba0:	230c      	movs	r3, #12
 800dba2:	6033      	str	r3, [r6, #0]
 800dba4:	4630      	mov	r0, r6
 800dba6:	f000 f886 	bl	800dcb6 <__malloc_unlock>
 800dbaa:	e7e4      	b.n	800db76 <_malloc_r+0x1e>
 800dbac:	680b      	ldr	r3, [r1, #0]
 800dbae:	1b5b      	subs	r3, r3, r5
 800dbb0:	d418      	bmi.n	800dbe4 <_malloc_r+0x8c>
 800dbb2:	2b0b      	cmp	r3, #11
 800dbb4:	d90f      	bls.n	800dbd6 <_malloc_r+0x7e>
 800dbb6:	600b      	str	r3, [r1, #0]
 800dbb8:	50cd      	str	r5, [r1, r3]
 800dbba:	18cc      	adds	r4, r1, r3
 800dbbc:	4630      	mov	r0, r6
 800dbbe:	f000 f87a 	bl	800dcb6 <__malloc_unlock>
 800dbc2:	f104 000b 	add.w	r0, r4, #11
 800dbc6:	1d23      	adds	r3, r4, #4
 800dbc8:	f020 0007 	bic.w	r0, r0, #7
 800dbcc:	1ac3      	subs	r3, r0, r3
 800dbce:	d0d3      	beq.n	800db78 <_malloc_r+0x20>
 800dbd0:	425a      	negs	r2, r3
 800dbd2:	50e2      	str	r2, [r4, r3]
 800dbd4:	e7d0      	b.n	800db78 <_malloc_r+0x20>
 800dbd6:	428c      	cmp	r4, r1
 800dbd8:	684b      	ldr	r3, [r1, #4]
 800dbda:	bf16      	itet	ne
 800dbdc:	6063      	strne	r3, [r4, #4]
 800dbde:	6013      	streq	r3, [r2, #0]
 800dbe0:	460c      	movne	r4, r1
 800dbe2:	e7eb      	b.n	800dbbc <_malloc_r+0x64>
 800dbe4:	460c      	mov	r4, r1
 800dbe6:	6849      	ldr	r1, [r1, #4]
 800dbe8:	e7cc      	b.n	800db84 <_malloc_r+0x2c>
 800dbea:	1cc4      	adds	r4, r0, #3
 800dbec:	f024 0403 	bic.w	r4, r4, #3
 800dbf0:	42a0      	cmp	r0, r4
 800dbf2:	d005      	beq.n	800dc00 <_malloc_r+0xa8>
 800dbf4:	1a21      	subs	r1, r4, r0
 800dbf6:	4630      	mov	r0, r6
 800dbf8:	f000 f808 	bl	800dc0c <_sbrk_r>
 800dbfc:	3001      	adds	r0, #1
 800dbfe:	d0cf      	beq.n	800dba0 <_malloc_r+0x48>
 800dc00:	6025      	str	r5, [r4, #0]
 800dc02:	e7db      	b.n	800dbbc <_malloc_r+0x64>
 800dc04:	200000c0 	.word	0x200000c0
 800dc08:	200000c4 	.word	0x200000c4

0800dc0c <_sbrk_r>:
 800dc0c:	b538      	push	{r3, r4, r5, lr}
 800dc0e:	4c06      	ldr	r4, [pc, #24]	; (800dc28 <_sbrk_r+0x1c>)
 800dc10:	2300      	movs	r3, #0
 800dc12:	4605      	mov	r5, r0
 800dc14:	4608      	mov	r0, r1
 800dc16:	6023      	str	r3, [r4, #0]
 800dc18:	f7f8 ff1e 	bl	8006a58 <_sbrk>
 800dc1c:	1c43      	adds	r3, r0, #1
 800dc1e:	d102      	bne.n	800dc26 <_sbrk_r+0x1a>
 800dc20:	6823      	ldr	r3, [r4, #0]
 800dc22:	b103      	cbz	r3, 800dc26 <_sbrk_r+0x1a>
 800dc24:	602b      	str	r3, [r5, #0]
 800dc26:	bd38      	pop	{r3, r4, r5, pc}
 800dc28:	200008a4 	.word	0x200008a4

0800dc2c <_raise_r>:
 800dc2c:	291f      	cmp	r1, #31
 800dc2e:	b538      	push	{r3, r4, r5, lr}
 800dc30:	4604      	mov	r4, r0
 800dc32:	460d      	mov	r5, r1
 800dc34:	d904      	bls.n	800dc40 <_raise_r+0x14>
 800dc36:	2316      	movs	r3, #22
 800dc38:	6003      	str	r3, [r0, #0]
 800dc3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dc3e:	bd38      	pop	{r3, r4, r5, pc}
 800dc40:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800dc42:	b112      	cbz	r2, 800dc4a <_raise_r+0x1e>
 800dc44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dc48:	b94b      	cbnz	r3, 800dc5e <_raise_r+0x32>
 800dc4a:	4620      	mov	r0, r4
 800dc4c:	f000 f830 	bl	800dcb0 <_getpid_r>
 800dc50:	462a      	mov	r2, r5
 800dc52:	4601      	mov	r1, r0
 800dc54:	4620      	mov	r0, r4
 800dc56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc5a:	f000 b817 	b.w	800dc8c <_kill_r>
 800dc5e:	2b01      	cmp	r3, #1
 800dc60:	d00a      	beq.n	800dc78 <_raise_r+0x4c>
 800dc62:	1c59      	adds	r1, r3, #1
 800dc64:	d103      	bne.n	800dc6e <_raise_r+0x42>
 800dc66:	2316      	movs	r3, #22
 800dc68:	6003      	str	r3, [r0, #0]
 800dc6a:	2001      	movs	r0, #1
 800dc6c:	e7e7      	b.n	800dc3e <_raise_r+0x12>
 800dc6e:	2400      	movs	r4, #0
 800dc70:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dc74:	4628      	mov	r0, r5
 800dc76:	4798      	blx	r3
 800dc78:	2000      	movs	r0, #0
 800dc7a:	e7e0      	b.n	800dc3e <_raise_r+0x12>

0800dc7c <raise>:
 800dc7c:	4b02      	ldr	r3, [pc, #8]	; (800dc88 <raise+0xc>)
 800dc7e:	4601      	mov	r1, r0
 800dc80:	6818      	ldr	r0, [r3, #0]
 800dc82:	f7ff bfd3 	b.w	800dc2c <_raise_r>
 800dc86:	bf00      	nop
 800dc88:	20000030 	.word	0x20000030

0800dc8c <_kill_r>:
 800dc8c:	b538      	push	{r3, r4, r5, lr}
 800dc8e:	4c07      	ldr	r4, [pc, #28]	; (800dcac <_kill_r+0x20>)
 800dc90:	2300      	movs	r3, #0
 800dc92:	4605      	mov	r5, r0
 800dc94:	4608      	mov	r0, r1
 800dc96:	4611      	mov	r1, r2
 800dc98:	6023      	str	r3, [r4, #0]
 800dc9a:	f7f8 fec3 	bl	8006a24 <_kill>
 800dc9e:	1c43      	adds	r3, r0, #1
 800dca0:	d102      	bne.n	800dca8 <_kill_r+0x1c>
 800dca2:	6823      	ldr	r3, [r4, #0]
 800dca4:	b103      	cbz	r3, 800dca8 <_kill_r+0x1c>
 800dca6:	602b      	str	r3, [r5, #0]
 800dca8:	bd38      	pop	{r3, r4, r5, pc}
 800dcaa:	bf00      	nop
 800dcac:	200008a4 	.word	0x200008a4

0800dcb0 <_getpid_r>:
 800dcb0:	f7f8 beb0 	b.w	8006a14 <_getpid>

0800dcb4 <__malloc_lock>:
 800dcb4:	4770      	bx	lr

0800dcb6 <__malloc_unlock>:
 800dcb6:	4770      	bx	lr

0800dcb8 <_init>:
 800dcb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcba:	bf00      	nop
 800dcbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dcbe:	bc08      	pop	{r3}
 800dcc0:	469e      	mov	lr, r3
 800dcc2:	4770      	bx	lr

0800dcc4 <_fini>:
 800dcc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcc6:	bf00      	nop
 800dcc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dcca:	bc08      	pop	{r3}
 800dccc:	469e      	mov	lr, r3
 800dcce:	4770      	bx	lr
