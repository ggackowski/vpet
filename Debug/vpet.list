
vpet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f58  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080080f0  080080f0  000180f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800810c  0800810c  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800810c  0800810c  0001810c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008114  08008114  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008114  08008114  00018114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008118  08008118  00018118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800811c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000810  20000090  080081ac  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008a0  080081ac  000208a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a660  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003c55  00000000  00000000  0003a720  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011b0  00000000  00000000  0003e378  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001000  00000000  00000000  0003f528  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019a32  00000000  00000000  00040528  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012f70  00000000  00000000  00059f5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e31b  00000000  00000000  0006ceca  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fb1e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048f8  00000000  00000000  000fb260  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000090 	.word	0x20000090
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080080d8 	.word	0x080080d8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000094 	.word	0x20000094
 80001d4:	080080d8 	.word	0x080080d8

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <display_setup>:
#include "display.h"

void display_setup(struct display_config * cfg)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(cfg->reset_port, cfg->reset_pin, GPIO_PIN_RESET);
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	6858      	ldr	r0, [r3, #4]
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	891b      	ldrh	r3, [r3, #8]
 80004e8:	2200      	movs	r2, #0
 80004ea:	4619      	mov	r1, r3
 80004ec:	f001 f8e8 	bl	80016c0 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80004f0:	2064      	movs	r0, #100	; 0x64
 80004f2:	f000 fe2f 	bl	8001154 <HAL_Delay>
    HAL_GPIO_WritePin(cfg->reset_port, cfg->reset_pin, GPIO_PIN_SET);
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	6858      	ldr	r0, [r3, #4]
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	891b      	ldrh	r3, [r3, #8]
 80004fe:	2201      	movs	r2, #1
 8000500:	4619      	mov	r1, r3
 8000502:	f001 f8dd 	bl	80016c0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(cfg->bl_port, cfg->bl_pin, GPIO_PIN_SET);
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	68d8      	ldr	r0, [r3, #12]
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	8a1b      	ldrh	r3, [r3, #16]
 800050e:	2201      	movs	r2, #1
 8000510:	4619      	mov	r1, r3
 8000512:	f001 f8d5 	bl	80016c0 <HAL_GPIO_WritePin>
    display_write_cmd(cfg, 0x21);
 8000516:	2121      	movs	r1, #33	; 0x21
 8000518:	6878      	ldr	r0, [r7, #4]
 800051a:	f000 f853 	bl	80005c4 <display_write_cmd>
    display_write_cmd(cfg, 0x04);
 800051e:	2104      	movs	r1, #4
 8000520:	6878      	ldr	r0, [r7, #4]
 8000522:	f000 f84f 	bl	80005c4 <display_write_cmd>
    display_write_cmd(cfg, 0x10 | 0x04);
 8000526:	2114      	movs	r1, #20
 8000528:	6878      	ldr	r0, [r7, #4]
 800052a:	f000 f84b 	bl	80005c4 <display_write_cmd>
    display_write_cmd(cfg, 0x80 | 0x41); //contrast
 800052e:	21c1      	movs	r1, #193	; 0xc1
 8000530:	6878      	ldr	r0, [r7, #4]
 8000532:	f000 f847 	bl	80005c4 <display_write_cmd>
    display_write_cmd(cfg, 0x20);
 8000536:	2120      	movs	r1, #32
 8000538:	6878      	ldr	r0, [r7, #4]
 800053a:	f000 f843 	bl	80005c4 <display_write_cmd>
    display_write_cmd(cfg, 0x08 | 0x04);
 800053e:	210c      	movs	r1, #12
 8000540:	6878      	ldr	r0, [r7, #4]
 8000542:	f000 f83f 	bl	80005c4 <display_write_cmd>
    for (int i = 0; i < 504; i++)
 8000546:	2300      	movs	r3, #0
 8000548:	60fb      	str	r3, [r7, #12]
 800054a:	e006      	b.n	800055a <display_setup+0x82>
        display_write_data(cfg, 0x00);
 800054c:	2100      	movs	r1, #0
 800054e:	6878      	ldr	r0, [r7, #4]
 8000550:	f000 f861 	bl	8000616 <display_write_data>
    for (int i = 0; i < 504; i++)
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	3301      	adds	r3, #1
 8000558:	60fb      	str	r3, [r7, #12]
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 8000560:	dbf4      	blt.n	800054c <display_setup+0x74>
}
 8000562:	bf00      	nop
 8000564:	3710      	adds	r7, #16
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}

0800056a <display_set_dxy>:

void display_set_dxy(struct display_config * cfg,
                     enum display_direction direction,
                     uint8_t column, uint8_t row)
{
 800056a:	b580      	push	{r7, lr}
 800056c:	b082      	sub	sp, #8
 800056e:	af00      	add	r7, sp, #0
 8000570:	6078      	str	r0, [r7, #4]
 8000572:	4608      	mov	r0, r1
 8000574:	4611      	mov	r1, r2
 8000576:	461a      	mov	r2, r3
 8000578:	4603      	mov	r3, r0
 800057a:	70fb      	strb	r3, [r7, #3]
 800057c:	460b      	mov	r3, r1
 800057e:	70bb      	strb	r3, [r7, #2]
 8000580:	4613      	mov	r3, r2
 8000582:	707b      	strb	r3, [r7, #1]
    if(direction == vertical)
 8000584:	78fb      	ldrb	r3, [r7, #3]
 8000586:	2b01      	cmp	r3, #1
 8000588:	d104      	bne.n	8000594 <display_set_dxy+0x2a>
        display_write_cmd(cfg, 0x20 | 0x02);
 800058a:	2122      	movs	r1, #34	; 0x22
 800058c:	6878      	ldr	r0, [r7, #4]
 800058e:	f000 f819 	bl	80005c4 <display_write_cmd>
 8000592:	e003      	b.n	800059c <display_set_dxy+0x32>
    else
        display_write_cmd(cfg, 0x20 | 0x00);
 8000594:	2120      	movs	r1, #32
 8000596:	6878      	ldr	r0, [r7, #4]
 8000598:	f000 f814 	bl	80005c4 <display_write_cmd>

    display_write_cmd(cfg, 0x80 | column); // Wybˇr kolumny
 800059c:	78bb      	ldrb	r3, [r7, #2]
 800059e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	4619      	mov	r1, r3
 80005a6:	6878      	ldr	r0, [r7, #4]
 80005a8:	f000 f80c 	bl	80005c4 <display_write_cmd>
    display_write_cmd(cfg, 0x40 | row); // Wybˇr wiersza
 80005ac:	787b      	ldrb	r3, [r7, #1]
 80005ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	4619      	mov	r1, r3
 80005b6:	6878      	ldr	r0, [r7, #4]
 80005b8:	f000 f804 	bl	80005c4 <display_write_cmd>
}
 80005bc:	bf00      	nop
 80005be:	3708      	adds	r7, #8
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <display_write_cmd>:

void display_write_cmd(struct display_config * cfg, uint8_t cmd) {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	460b      	mov	r3, r1
 80005ce:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(cfg->dc_port, cfg->dc_pin, GPIO_PIN_RESET);
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	6958      	ldr	r0, [r3, #20]
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	8c1b      	ldrh	r3, [r3, #32]
 80005d8:	2200      	movs	r2, #0
 80005da:	4619      	mov	r1, r3
 80005dc:	f001 f870 	bl	80016c0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(cfg->ce_port, cfg->ce_pin, GPIO_PIN_RESET);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	69d8      	ldr	r0, [r3, #28]
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	8b1b      	ldrh	r3, [r3, #24]
 80005e8:	2200      	movs	r2, #0
 80005ea:	4619      	mov	r1, r3
 80005ec:	f001 f868 	bl	80016c0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(cfg->spi, &cmd, 1, 100);
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	6818      	ldr	r0, [r3, #0]
 80005f4:	1cf9      	adds	r1, r7, #3
 80005f6:	2364      	movs	r3, #100	; 0x64
 80005f8:	2201      	movs	r2, #1
 80005fa:	f004 f943 	bl	8004884 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(cfg->ce_port, cfg->ce_pin, GPIO_PIN_SET);
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	69d8      	ldr	r0, [r3, #28]
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	8b1b      	ldrh	r3, [r3, #24]
 8000606:	2201      	movs	r2, #1
 8000608:	4619      	mov	r1, r3
 800060a:	f001 f859 	bl	80016c0 <HAL_GPIO_WritePin>
}
 800060e:	bf00      	nop
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}

08000616 <display_write_data>:

void display_write_data(struct display_config * cfg, uint8_t data) {
 8000616:	b580      	push	{r7, lr}
 8000618:	b082      	sub	sp, #8
 800061a:	af00      	add	r7, sp, #0
 800061c:	6078      	str	r0, [r7, #4]
 800061e:	460b      	mov	r3, r1
 8000620:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(cfg->dc_port, cfg->dc_pin, GPIO_PIN_SET);
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	6958      	ldr	r0, [r3, #20]
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	8c1b      	ldrh	r3, [r3, #32]
 800062a:	2201      	movs	r2, #1
 800062c:	4619      	mov	r1, r3
 800062e:	f001 f847 	bl	80016c0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(cfg->ce_port, cfg->ce_pin, GPIO_PIN_RESET);
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	69d8      	ldr	r0, [r3, #28]
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	8b1b      	ldrh	r3, [r3, #24]
 800063a:	2200      	movs	r2, #0
 800063c:	4619      	mov	r1, r3
 800063e:	f001 f83f 	bl	80016c0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(cfg->spi, &data, 1, 100);
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	6818      	ldr	r0, [r3, #0]
 8000646:	1cf9      	adds	r1, r7, #3
 8000648:	2364      	movs	r3, #100	; 0x64
 800064a:	2201      	movs	r2, #1
 800064c:	f004 f91a 	bl	8004884 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(cfg->ce_port, cfg->ce_pin, GPIO_PIN_SET);
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	69d8      	ldr	r0, [r3, #28]
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	8b1b      	ldrh	r3, [r3, #24]
 8000658:	2201      	movs	r2, #1
 800065a:	4619      	mov	r1, r3
 800065c:	f001 f830 	bl	80016c0 <HAL_GPIO_WritePin>
}
 8000660:	bf00      	nop
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}

08000668 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b08c      	sub	sp, #48	; 0x30
 800066c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066e:	f107 031c 	add.w	r3, r7, #28
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	605a      	str	r2, [r3, #4]
 8000678:	609a      	str	r2, [r3, #8]
 800067a:	60da      	str	r2, [r3, #12]
 800067c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800067e:	2300      	movs	r3, #0
 8000680:	61bb      	str	r3, [r7, #24]
 8000682:	4b6d      	ldr	r3, [pc, #436]	; (8000838 <MX_GPIO_Init+0x1d0>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	4a6c      	ldr	r2, [pc, #432]	; (8000838 <MX_GPIO_Init+0x1d0>)
 8000688:	f043 0310 	orr.w	r3, r3, #16
 800068c:	6313      	str	r3, [r2, #48]	; 0x30
 800068e:	4b6a      	ldr	r3, [pc, #424]	; (8000838 <MX_GPIO_Init+0x1d0>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	f003 0310 	and.w	r3, r3, #16
 8000696:	61bb      	str	r3, [r7, #24]
 8000698:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	617b      	str	r3, [r7, #20]
 800069e:	4b66      	ldr	r3, [pc, #408]	; (8000838 <MX_GPIO_Init+0x1d0>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	4a65      	ldr	r2, [pc, #404]	; (8000838 <MX_GPIO_Init+0x1d0>)
 80006a4:	f043 0304 	orr.w	r3, r3, #4
 80006a8:	6313      	str	r3, [r2, #48]	; 0x30
 80006aa:	4b63      	ldr	r3, [pc, #396]	; (8000838 <MX_GPIO_Init+0x1d0>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	f003 0304 	and.w	r3, r3, #4
 80006b2:	617b      	str	r3, [r7, #20]
 80006b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	613b      	str	r3, [r7, #16]
 80006ba:	4b5f      	ldr	r3, [pc, #380]	; (8000838 <MX_GPIO_Init+0x1d0>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	4a5e      	ldr	r2, [pc, #376]	; (8000838 <MX_GPIO_Init+0x1d0>)
 80006c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006c4:	6313      	str	r3, [r2, #48]	; 0x30
 80006c6:	4b5c      	ldr	r3, [pc, #368]	; (8000838 <MX_GPIO_Init+0x1d0>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ce:	613b      	str	r3, [r7, #16]
 80006d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	60fb      	str	r3, [r7, #12]
 80006d6:	4b58      	ldr	r3, [pc, #352]	; (8000838 <MX_GPIO_Init+0x1d0>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4a57      	ldr	r2, [pc, #348]	; (8000838 <MX_GPIO_Init+0x1d0>)
 80006dc:	f043 0301 	orr.w	r3, r3, #1
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	4b55      	ldr	r3, [pc, #340]	; (8000838 <MX_GPIO_Init+0x1d0>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f003 0301 	and.w	r3, r3, #1
 80006ea:	60fb      	str	r3, [r7, #12]
 80006ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	60bb      	str	r3, [r7, #8]
 80006f2:	4b51      	ldr	r3, [pc, #324]	; (8000838 <MX_GPIO_Init+0x1d0>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	4a50      	ldr	r2, [pc, #320]	; (8000838 <MX_GPIO_Init+0x1d0>)
 80006f8:	f043 0302 	orr.w	r3, r3, #2
 80006fc:	6313      	str	r3, [r2, #48]	; 0x30
 80006fe:	4b4e      	ldr	r3, [pc, #312]	; (8000838 <MX_GPIO_Init+0x1d0>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	f003 0302 	and.w	r3, r3, #2
 8000706:	60bb      	str	r3, [r7, #8]
 8000708:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	4b4a      	ldr	r3, [pc, #296]	; (8000838 <MX_GPIO_Init+0x1d0>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	4a49      	ldr	r2, [pc, #292]	; (8000838 <MX_GPIO_Init+0x1d0>)
 8000714:	f043 0308 	orr.w	r3, r3, #8
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
 800071a:	4b47      	ldr	r3, [pc, #284]	; (8000838 <MX_GPIO_Init+0x1d0>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	f003 0308 	and.w	r3, r3, #8
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|RST_Pin|BL_Pin, GPIO_PIN_RESET);
 8000726:	2200      	movs	r2, #0
 8000728:	f44f 7122 	mov.w	r1, #648	; 0x288
 800072c:	4843      	ldr	r0, [pc, #268]	; (800083c <MX_GPIO_Init+0x1d4>)
 800072e:	f000 ffc7 	bl	80016c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000732:	2201      	movs	r2, #1
 8000734:	2101      	movs	r1, #1
 8000736:	4842      	ldr	r0, [pc, #264]	; (8000840 <MX_GPIO_Init+0x1d8>)
 8000738:	f000 ffc2 	bl	80016c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 800073c:	2200      	movs	r2, #0
 800073e:	2120      	movs	r1, #32
 8000740:	483f      	ldr	r0, [pc, #252]	; (8000840 <MX_GPIO_Init+0x1d8>)
 8000742:	f000 ffbd 	bl	80016c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 8000746:	2200      	movs	r2, #0
 8000748:	2102      	movs	r1, #2
 800074a:	483e      	ldr	r0, [pc, #248]	; (8000844 <MX_GPIO_Init+0x1dc>)
 800074c:	f000 ffb8 	bl	80016c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000750:	2200      	movs	r2, #0
 8000752:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000756:	483c      	ldr	r0, [pc, #240]	; (8000848 <MX_GPIO_Init+0x1e0>)
 8000758:	f000 ffb2 	bl	80016c0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 800075c:	2304      	movs	r3, #4
 800075e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000760:	2300      	movs	r3, #0
 8000762:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8000768:	f107 031c 	add.w	r3, r7, #28
 800076c:	4619      	mov	r1, r3
 800076e:	4833      	ldr	r0, [pc, #204]	; (800083c <MX_GPIO_Init+0x1d4>)
 8000770:	f000 fe24 	bl	80013bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|RST_Pin|BL_Pin;
 8000774:	f44f 7322 	mov.w	r3, #648	; 0x288
 8000778:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077a:	2301      	movs	r3, #1
 800077c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000782:	2300      	movs	r3, #0
 8000784:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000786:	f107 031c 	add.w	r3, r7, #28
 800078a:	4619      	mov	r1, r3
 800078c:	482b      	ldr	r0, [pc, #172]	; (800083c <MX_GPIO_Init+0x1d4>)
 800078e:	f000 fe15 	bl	80013bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8000792:	2332      	movs	r3, #50	; 0x32
 8000794:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000796:	4b2d      	ldr	r3, [pc, #180]	; (800084c <MX_GPIO_Init+0x1e4>)
 8000798:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	2300      	movs	r3, #0
 800079c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800079e:	f107 031c 	add.w	r3, r7, #28
 80007a2:	4619      	mov	r1, r3
 80007a4:	4825      	ldr	r0, [pc, #148]	; (800083c <MX_GPIO_Init+0x1d4>)
 80007a6:	f000 fe09 	bl	80013bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|DC_Pin;
 80007aa:	2321      	movs	r3, #33	; 0x21
 80007ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ae:	2301      	movs	r3, #1
 80007b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b6:	2300      	movs	r3, #0
 80007b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007ba:	f107 031c 	add.w	r3, r7, #28
 80007be:	4619      	mov	r1, r3
 80007c0:	481f      	ldr	r0, [pc, #124]	; (8000840 <MX_GPIO_Init+0x1d8>)
 80007c2:	f000 fdfb 	bl	80013bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007c6:	2301      	movs	r3, #1
 80007c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80007ca:	4b20      	ldr	r3, [pc, #128]	; (800084c <MX_GPIO_Init+0x1e4>)
 80007cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d2:	f107 031c 	add.w	r3, r7, #28
 80007d6:	4619      	mov	r1, r3
 80007d8:	481d      	ldr	r0, [pc, #116]	; (8000850 <MX_GPIO_Init+0x1e8>)
 80007da:	f000 fdef 	bl	80013bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CE_Pin;
 80007de:	2302      	movs	r3, #2
 80007e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e2:	2301      	movs	r3, #1
 80007e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ea:	2300      	movs	r3, #0
 80007ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CE_GPIO_Port, &GPIO_InitStruct);
 80007ee:	f107 031c 	add.w	r3, r7, #28
 80007f2:	4619      	mov	r1, r3
 80007f4:	4813      	ldr	r0, [pc, #76]	; (8000844 <MX_GPIO_Init+0x1dc>)
 80007f6:	f000 fde1 	bl	80013bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007fa:	f24f 0310 	movw	r3, #61456	; 0xf010
 80007fe:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000800:	2301      	movs	r3, #1
 8000802:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000808:	2300      	movs	r3, #0
 800080a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800080c:	f107 031c 	add.w	r3, r7, #28
 8000810:	4619      	mov	r1, r3
 8000812:	480d      	ldr	r0, [pc, #52]	; (8000848 <MX_GPIO_Init+0x1e0>)
 8000814:	f000 fdd2 	bl	80013bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000818:	2320      	movs	r3, #32
 800081a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800081c:	2300      	movs	r3, #0
 800081e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000824:	f107 031c 	add.w	r3, r7, #28
 8000828:	4619      	mov	r1, r3
 800082a:	4807      	ldr	r0, [pc, #28]	; (8000848 <MX_GPIO_Init+0x1e0>)
 800082c:	f000 fdc6 	bl	80013bc <HAL_GPIO_Init>

}
 8000830:	bf00      	nop
 8000832:	3730      	adds	r7, #48	; 0x30
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40023800 	.word	0x40023800
 800083c:	40021000 	.word	0x40021000
 8000840:	40020800 	.word	0x40020800
 8000844:	40020400 	.word	0x40020400
 8000848:	40020c00 	.word	0x40020c00
 800084c:	10120000 	.word	0x10120000
 8000850:	40020000 	.word	0x40020000

08000854 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000858:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <MX_I2C1_Init+0x50>)
 800085a:	4a13      	ldr	r2, [pc, #76]	; (80008a8 <MX_I2C1_Init+0x54>)
 800085c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800085e:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <MX_I2C1_Init+0x50>)
 8000860:	4a12      	ldr	r2, [pc, #72]	; (80008ac <MX_I2C1_Init+0x58>)
 8000862:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000864:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <MX_I2C1_Init+0x50>)
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800086a:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <MX_I2C1_Init+0x50>)
 800086c:	2200      	movs	r2, #0
 800086e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000870:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <MX_I2C1_Init+0x50>)
 8000872:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000876:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000878:	4b0a      	ldr	r3, [pc, #40]	; (80008a4 <MX_I2C1_Init+0x50>)
 800087a:	2200      	movs	r2, #0
 800087c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800087e:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <MX_I2C1_Init+0x50>)
 8000880:	2200      	movs	r2, #0
 8000882:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000884:	4b07      	ldr	r3, [pc, #28]	; (80008a4 <MX_I2C1_Init+0x50>)
 8000886:	2200      	movs	r2, #0
 8000888:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800088a:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <MX_I2C1_Init+0x50>)
 800088c:	2200      	movs	r2, #0
 800088e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000890:	4804      	ldr	r0, [pc, #16]	; (80008a4 <MX_I2C1_Init+0x50>)
 8000892:	f002 fc1f 	bl	80030d4 <HAL_I2C_Init>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800089c:	f000 fa8c 	bl	8000db8 <Error_Handler>
  }

}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	200000c0 	.word	0x200000c0
 80008a8:	40005400 	.word	0x40005400
 80008ac:	000186a0 	.word	0x000186a0

080008b0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08a      	sub	sp, #40	; 0x28
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b8:	f107 0314 	add.w	r3, r7, #20
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	60da      	str	r2, [r3, #12]
 80008c6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a19      	ldr	r2, [pc, #100]	; (8000934 <HAL_I2C_MspInit+0x84>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d12c      	bne.n	800092c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	613b      	str	r3, [r7, #16]
 80008d6:	4b18      	ldr	r3, [pc, #96]	; (8000938 <HAL_I2C_MspInit+0x88>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a17      	ldr	r2, [pc, #92]	; (8000938 <HAL_I2C_MspInit+0x88>)
 80008dc:	f043 0302 	orr.w	r3, r3, #2
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b15      	ldr	r3, [pc, #84]	; (8000938 <HAL_I2C_MspInit+0x88>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0302 	and.w	r3, r3, #2
 80008ea:	613b      	str	r3, [r7, #16]
 80008ec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80008ee:	f44f 7310 	mov.w	r3, #576	; 0x240
 80008f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008f4:	2312      	movs	r3, #18
 80008f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008f8:	2301      	movs	r3, #1
 80008fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fc:	2300      	movs	r3, #0
 80008fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000900:	2304      	movs	r3, #4
 8000902:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000904:	f107 0314 	add.w	r3, r7, #20
 8000908:	4619      	mov	r1, r3
 800090a:	480c      	ldr	r0, [pc, #48]	; (800093c <HAL_I2C_MspInit+0x8c>)
 800090c:	f000 fd56 	bl	80013bc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000910:	2300      	movs	r3, #0
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	4b08      	ldr	r3, [pc, #32]	; (8000938 <HAL_I2C_MspInit+0x88>)
 8000916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000918:	4a07      	ldr	r2, [pc, #28]	; (8000938 <HAL_I2C_MspInit+0x88>)
 800091a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800091e:	6413      	str	r3, [r2, #64]	; 0x40
 8000920:	4b05      	ldr	r3, [pc, #20]	; (8000938 <HAL_I2C_MspInit+0x88>)
 8000922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000924:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000928:	60fb      	str	r3, [r7, #12]
 800092a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800092c:	bf00      	nop
 800092e:	3728      	adds	r7, #40	; 0x28
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40005400 	.word	0x40005400
 8000938:	40023800 	.word	0x40023800
 800093c:	40020400 	.word	0x40020400

08000940 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
I2S_HandleTypeDef hi2s3;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0

  hi2s2.Instance = SPI2;
 8000944:	4b12      	ldr	r3, [pc, #72]	; (8000990 <MX_I2S2_Init+0x50>)
 8000946:	4a13      	ldr	r2, [pc, #76]	; (8000994 <MX_I2S2_Init+0x54>)
 8000948:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800094a:	4b11      	ldr	r3, [pc, #68]	; (8000990 <MX_I2S2_Init+0x50>)
 800094c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000950:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000952:	4b0f      	ldr	r3, [pc, #60]	; (8000990 <MX_I2S2_Init+0x50>)
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000958:	4b0d      	ldr	r3, [pc, #52]	; (8000990 <MX_I2S2_Init+0x50>)
 800095a:	2200      	movs	r2, #0
 800095c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800095e:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <MX_I2S2_Init+0x50>)
 8000960:	2200      	movs	r2, #0
 8000962:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000964:	4b0a      	ldr	r3, [pc, #40]	; (8000990 <MX_I2S2_Init+0x50>)
 8000966:	4a0c      	ldr	r2, [pc, #48]	; (8000998 <MX_I2S2_Init+0x58>)
 8000968:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800096a:	4b09      	ldr	r3, [pc, #36]	; (8000990 <MX_I2S2_Init+0x50>)
 800096c:	2200      	movs	r2, #0
 800096e:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000970:	4b07      	ldr	r3, [pc, #28]	; (8000990 <MX_I2S2_Init+0x50>)
 8000972:	2200      	movs	r2, #0
 8000974:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000976:	4b06      	ldr	r3, [pc, #24]	; (8000990 <MX_I2S2_Init+0x50>)
 8000978:	2201      	movs	r2, #1
 800097a:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800097c:	4804      	ldr	r0, [pc, #16]	; (8000990 <MX_I2S2_Init+0x50>)
 800097e:	f002 fce1 	bl	8003344 <HAL_I2S_Init>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8000988:	f000 fa16 	bl	8000db8 <Error_Handler>
  }

}
 800098c:	bf00      	nop
 800098e:	bd80      	pop	{r7, pc}
 8000990:	20000114 	.word	0x20000114
 8000994:	40003800 	.word	0x40003800
 8000998:	00017700 	.word	0x00017700

0800099c <MX_I2S3_Init>:
/* I2S3 init function */
void MX_I2S3_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0

  hi2s3.Instance = SPI3;
 80009a0:	4b13      	ldr	r3, [pc, #76]	; (80009f0 <MX_I2S3_Init+0x54>)
 80009a2:	4a14      	ldr	r2, [pc, #80]	; (80009f4 <MX_I2S3_Init+0x58>)
 80009a4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80009a6:	4b12      	ldr	r3, [pc, #72]	; (80009f0 <MX_I2S3_Init+0x54>)
 80009a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009ac:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80009ae:	4b10      	ldr	r3, [pc, #64]	; (80009f0 <MX_I2S3_Init+0x54>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80009b4:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <MX_I2S3_Init+0x54>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80009ba:	4b0d      	ldr	r3, [pc, #52]	; (80009f0 <MX_I2S3_Init+0x54>)
 80009bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009c0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80009c2:	4b0b      	ldr	r3, [pc, #44]	; (80009f0 <MX_I2S3_Init+0x54>)
 80009c4:	4a0c      	ldr	r2, [pc, #48]	; (80009f8 <MX_I2S3_Init+0x5c>)
 80009c6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80009c8:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <MX_I2S3_Init+0x54>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80009ce:	4b08      	ldr	r3, [pc, #32]	; (80009f0 <MX_I2S3_Init+0x54>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80009d4:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <MX_I2S3_Init+0x54>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80009da:	4805      	ldr	r0, [pc, #20]	; (80009f0 <MX_I2S3_Init+0x54>)
 80009dc:	f002 fcb2 	bl	8003344 <HAL_I2S_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80009e6:	f000 f9e7 	bl	8000db8 <Error_Handler>
  }

}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	2000015c 	.word	0x2000015c
 80009f4:	40003c00 	.word	0x40003c00
 80009f8:	00017700 	.word	0x00017700

080009fc <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b08e      	sub	sp, #56	; 0x38
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
 8000a12:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI2)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a59      	ldr	r2, [pc, #356]	; (8000b80 <HAL_I2S_MspInit+0x184>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d15b      	bne.n	8000ad6 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	623b      	str	r3, [r7, #32]
 8000a22:	4b58      	ldr	r3, [pc, #352]	; (8000b84 <HAL_I2S_MspInit+0x188>)
 8000a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a26:	4a57      	ldr	r2, [pc, #348]	; (8000b84 <HAL_I2S_MspInit+0x188>)
 8000a28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a2e:	4b55      	ldr	r3, [pc, #340]	; (8000b84 <HAL_I2S_MspInit+0x188>)
 8000a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a36:	623b      	str	r3, [r7, #32]
 8000a38:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	61fb      	str	r3, [r7, #28]
 8000a3e:	4b51      	ldr	r3, [pc, #324]	; (8000b84 <HAL_I2S_MspInit+0x188>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a50      	ldr	r2, [pc, #320]	; (8000b84 <HAL_I2S_MspInit+0x188>)
 8000a44:	f043 0304 	orr.w	r3, r3, #4
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b4e      	ldr	r3, [pc, #312]	; (8000b84 <HAL_I2S_MspInit+0x188>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f003 0304 	and.w	r3, r3, #4
 8000a52:	61fb      	str	r3, [r7, #28]
 8000a54:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	61bb      	str	r3, [r7, #24]
 8000a5a:	4b4a      	ldr	r3, [pc, #296]	; (8000b84 <HAL_I2S_MspInit+0x188>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a49      	ldr	r2, [pc, #292]	; (8000b84 <HAL_I2S_MspInit+0x188>)
 8000a60:	f043 0302 	orr.w	r3, r3, #2
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4b47      	ldr	r3, [pc, #284]	; (8000b84 <HAL_I2S_MspInit+0x188>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f003 0302 	and.w	r3, r3, #2
 8000a6e:	61bb      	str	r3, [r7, #24]
 8000a70:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a72:	2304      	movs	r3, #4
 8000a74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a76:	2302      	movs	r3, #2
 8000a78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000a82:	2306      	movs	r3, #6
 8000a84:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	483e      	ldr	r0, [pc, #248]	; (8000b88 <HAL_I2S_MspInit+0x18c>)
 8000a8e:	f000 fc95 	bl	80013bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000a92:	2308      	movs	r3, #8
 8000a94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a96:	2302      	movs	r3, #2
 8000a98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000aa2:	2305      	movs	r3, #5
 8000aa4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000aa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4836      	ldr	r0, [pc, #216]	; (8000b88 <HAL_I2S_MspInit+0x18c>)
 8000aae:	f000 fc85 	bl	80013bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000ab2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ab6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ac4:	2305      	movs	r3, #5
 8000ac6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000acc:	4619      	mov	r1, r3
 8000ace:	482f      	ldr	r0, [pc, #188]	; (8000b8c <HAL_I2S_MspInit+0x190>)
 8000ad0:	f000 fc74 	bl	80013bc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000ad4:	e04f      	b.n	8000b76 <HAL_I2S_MspInit+0x17a>
  else if(i2sHandle->Instance==SPI3)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a2d      	ldr	r2, [pc, #180]	; (8000b90 <HAL_I2S_MspInit+0x194>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d14a      	bne.n	8000b76 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	617b      	str	r3, [r7, #20]
 8000ae4:	4b27      	ldr	r3, [pc, #156]	; (8000b84 <HAL_I2S_MspInit+0x188>)
 8000ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae8:	4a26      	ldr	r2, [pc, #152]	; (8000b84 <HAL_I2S_MspInit+0x188>)
 8000aea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000aee:	6413      	str	r3, [r2, #64]	; 0x40
 8000af0:	4b24      	ldr	r3, [pc, #144]	; (8000b84 <HAL_I2S_MspInit+0x188>)
 8000af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000af8:	617b      	str	r3, [r7, #20]
 8000afa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afc:	2300      	movs	r3, #0
 8000afe:	613b      	str	r3, [r7, #16]
 8000b00:	4b20      	ldr	r3, [pc, #128]	; (8000b84 <HAL_I2S_MspInit+0x188>)
 8000b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b04:	4a1f      	ldr	r2, [pc, #124]	; (8000b84 <HAL_I2S_MspInit+0x188>)
 8000b06:	f043 0301 	orr.w	r3, r3, #1
 8000b0a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0c:	4b1d      	ldr	r3, [pc, #116]	; (8000b84 <HAL_I2S_MspInit+0x188>)
 8000b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b10:	f003 0301 	and.w	r3, r3, #1
 8000b14:	613b      	str	r3, [r7, #16]
 8000b16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b18:	2300      	movs	r3, #0
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	4b19      	ldr	r3, [pc, #100]	; (8000b84 <HAL_I2S_MspInit+0x188>)
 8000b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b20:	4a18      	ldr	r2, [pc, #96]	; (8000b84 <HAL_I2S_MspInit+0x188>)
 8000b22:	f043 0304 	orr.w	r3, r3, #4
 8000b26:	6313      	str	r3, [r2, #48]	; 0x30
 8000b28:	4b16      	ldr	r3, [pc, #88]	; (8000b84 <HAL_I2S_MspInit+0x188>)
 8000b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2c:	f003 0304 	and.w	r3, r3, #4
 8000b30:	60fb      	str	r3, [r7, #12]
 8000b32:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b34:	2310      	movs	r3, #16
 8000b36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b40:	2300      	movs	r3, #0
 8000b42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b44:	2306      	movs	r3, #6
 8000b46:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4811      	ldr	r0, [pc, #68]	; (8000b94 <HAL_I2S_MspInit+0x198>)
 8000b50:	f000 fc34 	bl	80013bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000b54:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000b58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b62:	2300      	movs	r3, #0
 8000b64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b66:	2306      	movs	r3, #6
 8000b68:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4805      	ldr	r0, [pc, #20]	; (8000b88 <HAL_I2S_MspInit+0x18c>)
 8000b72:	f000 fc23 	bl	80013bc <HAL_GPIO_Init>
}
 8000b76:	bf00      	nop
 8000b78:	3738      	adds	r7, #56	; 0x38
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40003800 	.word	0x40003800
 8000b84:	40023800 	.word	0x40023800
 8000b88:	40020800 	.word	0x40020800
 8000b8c:	40020400 	.word	0x40020400
 8000b90:	40003c00 	.word	0x40003c00
 8000b94:	40020000 	.word	0x40020000

08000b98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b08c      	sub	sp, #48	; 0x30
 8000b9c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b9e:	f000 fa67 	bl	8001070 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ba2:	f000 f885 	bl	8000cb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ba6:	f7ff fd5f 	bl	8000668 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000baa:	f7ff fe53 	bl	8000854 <MX_I2C1_Init>
  MX_I2S2_Init();
 8000bae:	f7ff fec7 	bl	8000940 <MX_I2S2_Init>
  MX_I2S3_Init();
 8000bb2:	f7ff fef3 	bl	800099c <MX_I2S3_Init>
  MX_SPI1_Init();
 8000bb6:	f000 f907 	bl	8000dc8 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000bba:	f006 fe89 	bl	80078d0 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */

  struct display_config cfg;
  	cfg.spi = &hspi1;
 8000bbe:	4b38      	ldr	r3, [pc, #224]	; (8000ca0 <main+0x108>)
 8000bc0:	607b      	str	r3, [r7, #4]
  	cfg.reset_port = RST_GPIO_Port;
 8000bc2:	4b38      	ldr	r3, [pc, #224]	; (8000ca4 <main+0x10c>)
 8000bc4:	60bb      	str	r3, [r7, #8]
  	cfg.reset_pin = RST_Pin;
 8000bc6:	2380      	movs	r3, #128	; 0x80
 8000bc8:	81bb      	strh	r3, [r7, #12]
  	cfg.bl_port = BL_GPIO_Port;
 8000bca:	4b36      	ldr	r3, [pc, #216]	; (8000ca4 <main+0x10c>)
 8000bcc:	613b      	str	r3, [r7, #16]
  	cfg.bl_pin = BL_Pin;
 8000bce:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bd2:	82bb      	strh	r3, [r7, #20]
  	cfg.dc_port = DC_GPIO_Port;
 8000bd4:	4b34      	ldr	r3, [pc, #208]	; (8000ca8 <main+0x110>)
 8000bd6:	61bb      	str	r3, [r7, #24]
  	cfg.dc_pin = DC_Pin;
 8000bd8:	2320      	movs	r3, #32
 8000bda:	84bb      	strh	r3, [r7, #36]	; 0x24
  	cfg.ce_port = CE_GPIO_Port;
 8000bdc:	4b33      	ldr	r3, [pc, #204]	; (8000cac <main+0x114>)
 8000bde:	623b      	str	r3, [r7, #32]
  	cfg.ce_pin = CE_Pin;
 8000be0:	2302      	movs	r3, #2
 8000be2:	83bb      	strh	r3, [r7, #28]

  	display_setup(&cfg);
 8000be4:	1d3b      	adds	r3, r7, #4
 8000be6:	4618      	mov	r0, r3
 8000be8:	f7ff fc76 	bl	80004d8 <display_setup>
  	display_set_dxy(&cfg, horizontal, 0, 0);
 8000bec:	1d38      	adds	r0, r7, #4
 8000bee:	2300      	movs	r3, #0
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	f7ff fcb9 	bl	800056a <display_set_dxy>
//	display_write_data(&cfg, 0x1);
//  	display_set_dxy(&cfg, horizontal, , 0);
//  	display_write_data(&cfg, 0x1);

  	for (uint8_t row = 0; row < 6; row++) {
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000bfe:	e047      	b.n	8000c90 <main+0xf8>
  		for (uint8_t col = 0; col < 10; col++) {
 8000c00:	2300      	movs	r3, #0
 8000c02:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8000c06:	e028      	b.n	8000c5a <main+0xc2>
  			for (uint8_t j = 0; j < 4; j++)
 8000c08:	2300      	movs	r3, #0
 8000c0a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8000c0e:	e009      	b.n	8000c24 <main+0x8c>
  				display_write_data(&cfg, 0x0F);
 8000c10:	1d3b      	adds	r3, r7, #4
 8000c12:	210f      	movs	r1, #15
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff fcfe 	bl	8000616 <display_write_data>
  			for (uint8_t j = 0; j < 4; j++)
 8000c1a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000c1e:	3301      	adds	r3, #1
 8000c20:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8000c24:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000c28:	2b03      	cmp	r3, #3
 8000c2a:	d9f1      	bls.n	8000c10 <main+0x78>
  			for (uint8_t j = 0; j < 4; j++)
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8000c32:	e009      	b.n	8000c48 <main+0xb0>
  				display_write_data(&cfg, 0xF0);
 8000c34:	1d3b      	adds	r3, r7, #4
 8000c36:	21f0      	movs	r1, #240	; 0xf0
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f7ff fcec 	bl	8000616 <display_write_data>
  			for (uint8_t j = 0; j < 4; j++)
 8000c3e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000c42:	3301      	adds	r3, #1
 8000c44:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8000c48:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000c4c:	2b03      	cmp	r3, #3
 8000c4e:	d9f1      	bls.n	8000c34 <main+0x9c>
  		for (uint8_t col = 0; col < 10; col++) {
 8000c50:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000c54:	3301      	adds	r3, #1
 8000c56:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8000c5a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000c5e:	2b09      	cmp	r3, #9
 8000c60:	d9d2      	bls.n	8000c08 <main+0x70>
  		}
  		for (uint8_t j = 0; j < 4; j++)
 8000c62:	2300      	movs	r3, #0
 8000c64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000c68:	e009      	b.n	8000c7e <main+0xe6>
  			display_write_data(&cfg, 0x0F);
 8000c6a:	1d3b      	adds	r3, r7, #4
 8000c6c:	210f      	movs	r1, #15
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f7ff fcd1 	bl	8000616 <display_write_data>
  		for (uint8_t j = 0; j < 4; j++)
 8000c74:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000c78:	3301      	adds	r3, #1
 8000c7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000c7e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000c82:	2b03      	cmp	r3, #3
 8000c84:	d9f1      	bls.n	8000c6a <main+0xd2>
  	for (uint8_t row = 0; row < 6; row++) {
 8000c86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000c90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c94:	2b05      	cmp	r3, #5
 8000c96:	d9b3      	bls.n	8000c00 <main+0x68>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000c98:	f006 fe40 	bl	800791c <MX_USB_HOST_Process>
 8000c9c:	e7fc      	b.n	8000c98 <main+0x100>
 8000c9e:	bf00      	nop
 8000ca0:	200001a4 	.word	0x200001a4
 8000ca4:	40021000 	.word	0x40021000
 8000ca8:	40020800 	.word	0x40020800
 8000cac:	40020400 	.word	0x40020400

08000cb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b09a      	sub	sp, #104	; 0x68
 8000cb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cb6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000cba:	2230      	movs	r2, #48	; 0x30
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f007 f948 	bl	8007f54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
 8000cd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cd4:	f107 030c 	add.w	r3, r7, #12
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
 8000ce2:	611a      	str	r2, [r3, #16]
 8000ce4:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60bb      	str	r3, [r7, #8]
 8000cea:	4b31      	ldr	r3, [pc, #196]	; (8000db0 <SystemClock_Config+0x100>)
 8000cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cee:	4a30      	ldr	r2, [pc, #192]	; (8000db0 <SystemClock_Config+0x100>)
 8000cf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cf4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf6:	4b2e      	ldr	r3, [pc, #184]	; (8000db0 <SystemClock_Config+0x100>)
 8000cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cfe:	60bb      	str	r3, [r7, #8]
 8000d00:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d02:	2300      	movs	r3, #0
 8000d04:	607b      	str	r3, [r7, #4]
 8000d06:	4b2b      	ldr	r3, [pc, #172]	; (8000db4 <SystemClock_Config+0x104>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a2a      	ldr	r2, [pc, #168]	; (8000db4 <SystemClock_Config+0x104>)
 8000d0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d10:	6013      	str	r3, [r2, #0]
 8000d12:	4b28      	ldr	r3, [pc, #160]	; (8000db4 <SystemClock_Config+0x104>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d1a:	607b      	str	r3, [r7, #4]
 8000d1c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000d22:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000d26:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d2c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d30:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d32:	2304      	movs	r3, #4
 8000d34:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000d36:	23c0      	movs	r3, #192	; 0xc0
 8000d38:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000d3a:	2304      	movs	r3, #4
 8000d3c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000d3e:	2308      	movs	r3, #8
 8000d40:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d42:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d46:	4618      	mov	r0, r3
 8000d48:	f002 ff9c 	bl	8003c84 <HAL_RCC_OscConfig>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000d52:	f000 f831 	bl	8000db8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d56:	230f      	movs	r3, #15
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d62:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d66:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000d6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d70:	2103      	movs	r1, #3
 8000d72:	4618      	mov	r0, r3
 8000d74:	f003 f9f6 	bl	8004164 <HAL_RCC_ClockConfig>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000d7e:	f000 f81b 	bl	8000db8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000d82:	2301      	movs	r3, #1
 8000d84:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8000d86:	23c8      	movs	r3, #200	; 0xc8
 8000d88:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8000d8a:	2305      	movs	r3, #5
 8000d8c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d92:	f107 030c 	add.w	r3, r7, #12
 8000d96:	4618      	mov	r0, r3
 8000d98:	f003 fbc2 	bl	8004520 <HAL_RCCEx_PeriphCLKConfig>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000da2:	f000 f809 	bl	8000db8 <Error_Handler>
  }
}
 8000da6:	bf00      	nop
 8000da8:	3768      	adds	r7, #104	; 0x68
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40023800 	.word	0x40023800
 8000db4:	40007000 	.word	0x40007000

08000db8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
	...

08000dc8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000dcc:	4b17      	ldr	r3, [pc, #92]	; (8000e2c <MX_SPI1_Init+0x64>)
 8000dce:	4a18      	ldr	r2, [pc, #96]	; (8000e30 <MX_SPI1_Init+0x68>)
 8000dd0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000dd2:	4b16      	ldr	r3, [pc, #88]	; (8000e2c <MX_SPI1_Init+0x64>)
 8000dd4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000dd8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000dda:	4b14      	ldr	r3, [pc, #80]	; (8000e2c <MX_SPI1_Init+0x64>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000de0:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <MX_SPI1_Init+0x64>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000de6:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <MX_SPI1_Init+0x64>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dec:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <MX_SPI1_Init+0x64>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000df2:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <MX_SPI1_Init+0x64>)
 8000df4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000df8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000dfa:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <MX_SPI1_Init+0x64>)
 8000dfc:	2220      	movs	r2, #32
 8000dfe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e00:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <MX_SPI1_Init+0x64>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e06:	4b09      	ldr	r3, [pc, #36]	; (8000e2c <MX_SPI1_Init+0x64>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e0c:	4b07      	ldr	r3, [pc, #28]	; (8000e2c <MX_SPI1_Init+0x64>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e12:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <MX_SPI1_Init+0x64>)
 8000e14:	220a      	movs	r2, #10
 8000e16:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e18:	4804      	ldr	r0, [pc, #16]	; (8000e2c <MX_SPI1_Init+0x64>)
 8000e1a:	f003 fccf 	bl	80047bc <HAL_SPI_Init>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000e24:	f7ff ffc8 	bl	8000db8 <Error_Handler>
  }

}
 8000e28:	bf00      	nop
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	200001a4 	.word	0x200001a4
 8000e30:	40013000 	.word	0x40013000

08000e34 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08a      	sub	sp, #40	; 0x28
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3c:	f107 0314 	add.w	r3, r7, #20
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]
 8000e4a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a19      	ldr	r2, [pc, #100]	; (8000eb8 <HAL_SPI_MspInit+0x84>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d12b      	bne.n	8000eae <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	613b      	str	r3, [r7, #16]
 8000e5a:	4b18      	ldr	r3, [pc, #96]	; (8000ebc <HAL_SPI_MspInit+0x88>)
 8000e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5e:	4a17      	ldr	r2, [pc, #92]	; (8000ebc <HAL_SPI_MspInit+0x88>)
 8000e60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e64:	6453      	str	r3, [r2, #68]	; 0x44
 8000e66:	4b15      	ldr	r3, [pc, #84]	; (8000ebc <HAL_SPI_MspInit+0x88>)
 8000e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e6e:	613b      	str	r3, [r7, #16]
 8000e70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <HAL_SPI_MspInit+0x88>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	4a10      	ldr	r2, [pc, #64]	; (8000ebc <HAL_SPI_MspInit+0x88>)
 8000e7c:	f043 0301 	orr.w	r3, r3, #1
 8000e80:	6313      	str	r3, [r2, #48]	; 0x30
 8000e82:	4b0e      	ldr	r3, [pc, #56]	; (8000ebc <HAL_SPI_MspInit+0x88>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000e8e:	23e0      	movs	r3, #224	; 0xe0
 8000e90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e92:	2302      	movs	r3, #2
 8000e94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e9e:	2305      	movs	r3, #5
 8000ea0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea2:	f107 0314 	add.w	r3, r7, #20
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4805      	ldr	r0, [pc, #20]	; (8000ec0 <HAL_SPI_MspInit+0x8c>)
 8000eaa:	f000 fa87 	bl	80013bc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000eae:	bf00      	nop
 8000eb0:	3728      	adds	r7, #40	; 0x28
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40013000 	.word	0x40013000
 8000ebc:	40023800 	.word	0x40023800
 8000ec0:	40020000 	.word	0x40020000

08000ec4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	607b      	str	r3, [r7, #4]
 8000ece:	4b10      	ldr	r3, [pc, #64]	; (8000f10 <HAL_MspInit+0x4c>)
 8000ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed2:	4a0f      	ldr	r2, [pc, #60]	; (8000f10 <HAL_MspInit+0x4c>)
 8000ed4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ed8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eda:	4b0d      	ldr	r3, [pc, #52]	; (8000f10 <HAL_MspInit+0x4c>)
 8000edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ede:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ee2:	607b      	str	r3, [r7, #4]
 8000ee4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	603b      	str	r3, [r7, #0]
 8000eea:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <HAL_MspInit+0x4c>)
 8000eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eee:	4a08      	ldr	r2, [pc, #32]	; (8000f10 <HAL_MspInit+0x4c>)
 8000ef0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ef6:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <HAL_MspInit+0x4c>)
 8000ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000efe:	603b      	str	r3, [r7, #0]
 8000f00:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f02:	2007      	movs	r0, #7
 8000f04:	f000 fa18 	bl	8001338 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f08:	bf00      	nop
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	40023800 	.word	0x40023800

08000f14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr

08000f22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f26:	e7fe      	b.n	8000f26 <HardFault_Handler+0x4>

08000f28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f2c:	e7fe      	b.n	8000f2c <MemManage_Handler+0x4>

08000f2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f32:	e7fe      	b.n	8000f32 <BusFault_Handler+0x4>

08000f34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f38:	e7fe      	b.n	8000f38 <UsageFault_Handler+0x4>

08000f3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr

08000f56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f68:	f000 f8d4 	bl	8001114 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f6c:	bf00      	nop
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000f74:	4802      	ldr	r0, [pc, #8]	; (8000f80 <OTG_FS_IRQHandler+0x10>)
 8000f76:	f000 fe4b 	bl	8001c10 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	200005d8 	.word	0x200005d8

08000f84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f8c:	4a14      	ldr	r2, [pc, #80]	; (8000fe0 <_sbrk+0x5c>)
 8000f8e:	4b15      	ldr	r3, [pc, #84]	; (8000fe4 <_sbrk+0x60>)
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f98:	4b13      	ldr	r3, [pc, #76]	; (8000fe8 <_sbrk+0x64>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d102      	bne.n	8000fa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fa0:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <_sbrk+0x64>)
 8000fa2:	4a12      	ldr	r2, [pc, #72]	; (8000fec <_sbrk+0x68>)
 8000fa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fa6:	4b10      	ldr	r3, [pc, #64]	; (8000fe8 <_sbrk+0x64>)
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4413      	add	r3, r2
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d207      	bcs.n	8000fc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fb4:	f006 ff94 	bl	8007ee0 <__errno>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	230c      	movs	r3, #12
 8000fbc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000fbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fc2:	e009      	b.n	8000fd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fc4:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <_sbrk+0x64>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fca:	4b07      	ldr	r3, [pc, #28]	; (8000fe8 <_sbrk+0x64>)
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	4a05      	ldr	r2, [pc, #20]	; (8000fe8 <_sbrk+0x64>)
 8000fd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3718      	adds	r7, #24
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20020000 	.word	0x20020000
 8000fe4:	00000400 	.word	0x00000400
 8000fe8:	200000ac 	.word	0x200000ac
 8000fec:	200008a0 	.word	0x200008a0

08000ff0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ff4:	4b08      	ldr	r3, [pc, #32]	; (8001018 <SystemInit+0x28>)
 8000ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ffa:	4a07      	ldr	r2, [pc, #28]	; (8001018 <SystemInit+0x28>)
 8000ffc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001000:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001004:	4b04      	ldr	r3, [pc, #16]	; (8001018 <SystemInit+0x28>)
 8001006:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800100a:	609a      	str	r2, [r3, #8]
#endif
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800101c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001054 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001020:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001022:	e003      	b.n	800102c <LoopCopyDataInit>

08001024 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001024:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001026:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001028:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800102a:	3104      	adds	r1, #4

0800102c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800102c:	480b      	ldr	r0, [pc, #44]	; (800105c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800102e:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001030:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001032:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001034:	d3f6      	bcc.n	8001024 <CopyDataInit>
  ldr  r2, =_sbss
 8001036:	4a0b      	ldr	r2, [pc, #44]	; (8001064 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001038:	e002      	b.n	8001040 <LoopFillZerobss>

0800103a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800103a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800103c:	f842 3b04 	str.w	r3, [r2], #4

08001040 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001040:	4b09      	ldr	r3, [pc, #36]	; (8001068 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001042:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001044:	d3f9      	bcc.n	800103a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001046:	f7ff ffd3 	bl	8000ff0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800104a:	f006 ff4f 	bl	8007eec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800104e:	f7ff fda3 	bl	8000b98 <main>
  bx  lr    
 8001052:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001054:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001058:	0800811c 	.word	0x0800811c
  ldr  r0, =_sdata
 800105c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001060:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8001064:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8001068:	200008a0 	.word	0x200008a0

0800106c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800106c:	e7fe      	b.n	800106c <ADC_IRQHandler>
	...

08001070 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001074:	4b0e      	ldr	r3, [pc, #56]	; (80010b0 <HAL_Init+0x40>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a0d      	ldr	r2, [pc, #52]	; (80010b0 <HAL_Init+0x40>)
 800107a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800107e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001080:	4b0b      	ldr	r3, [pc, #44]	; (80010b0 <HAL_Init+0x40>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a0a      	ldr	r2, [pc, #40]	; (80010b0 <HAL_Init+0x40>)
 8001086:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800108a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800108c:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <HAL_Init+0x40>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a07      	ldr	r2, [pc, #28]	; (80010b0 <HAL_Init+0x40>)
 8001092:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001096:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001098:	2003      	movs	r0, #3
 800109a:	f000 f94d 	bl	8001338 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800109e:	2000      	movs	r0, #0
 80010a0:	f000 f808 	bl	80010b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010a4:	f7ff ff0e 	bl	8000ec4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40023c00 	.word	0x40023c00

080010b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010bc:	4b12      	ldr	r3, [pc, #72]	; (8001108 <HAL_InitTick+0x54>)
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	4b12      	ldr	r3, [pc, #72]	; (800110c <HAL_InitTick+0x58>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	4619      	mov	r1, r3
 80010c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80010d2:	4618      	mov	r0, r3
 80010d4:	f000 f965 	bl	80013a2 <HAL_SYSTICK_Config>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e00e      	b.n	8001100 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2b0f      	cmp	r3, #15
 80010e6:	d80a      	bhi.n	80010fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010e8:	2200      	movs	r2, #0
 80010ea:	6879      	ldr	r1, [r7, #4]
 80010ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010f0:	f000 f92d 	bl	800134e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010f4:	4a06      	ldr	r2, [pc, #24]	; (8001110 <HAL_InitTick+0x5c>)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010fa:	2300      	movs	r3, #0
 80010fc:	e000      	b.n	8001100 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
}
 8001100:	4618      	mov	r0, r3
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20000000 	.word	0x20000000
 800110c:	20000008 	.word	0x20000008
 8001110:	20000004 	.word	0x20000004

08001114 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001118:	4b06      	ldr	r3, [pc, #24]	; (8001134 <HAL_IncTick+0x20>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	461a      	mov	r2, r3
 800111e:	4b06      	ldr	r3, [pc, #24]	; (8001138 <HAL_IncTick+0x24>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4413      	add	r3, r2
 8001124:	4a04      	ldr	r2, [pc, #16]	; (8001138 <HAL_IncTick+0x24>)
 8001126:	6013      	str	r3, [r2, #0]
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	20000008 	.word	0x20000008
 8001138:	200001fc 	.word	0x200001fc

0800113c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  return uwTick;
 8001140:	4b03      	ldr	r3, [pc, #12]	; (8001150 <HAL_GetTick+0x14>)
 8001142:	681b      	ldr	r3, [r3, #0]
}
 8001144:	4618      	mov	r0, r3
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	200001fc 	.word	0x200001fc

08001154 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800115c:	f7ff ffee 	bl	800113c <HAL_GetTick>
 8001160:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800116c:	d005      	beq.n	800117a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800116e:	4b09      	ldr	r3, [pc, #36]	; (8001194 <HAL_Delay+0x40>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	461a      	mov	r2, r3
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	4413      	add	r3, r2
 8001178:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800117a:	bf00      	nop
 800117c:	f7ff ffde 	bl	800113c <HAL_GetTick>
 8001180:	4602      	mov	r2, r0
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	68fa      	ldr	r2, [r7, #12]
 8001188:	429a      	cmp	r2, r3
 800118a:	d8f7      	bhi.n	800117c <HAL_Delay+0x28>
  {
  }
}
 800118c:	bf00      	nop
 800118e:	3710      	adds	r7, #16
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20000008 	.word	0x20000008

08001198 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f003 0307 	and.w	r3, r3, #7
 80011a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011a8:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <__NVIC_SetPriorityGrouping+0x44>)
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ae:	68ba      	ldr	r2, [r7, #8]
 80011b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011b4:	4013      	ands	r3, r2
 80011b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ca:	4a04      	ldr	r2, [pc, #16]	; (80011dc <__NVIC_SetPriorityGrouping+0x44>)
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	60d3      	str	r3, [r2, #12]
}
 80011d0:	bf00      	nop
 80011d2:	3714      	adds	r7, #20
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011e4:	4b04      	ldr	r3, [pc, #16]	; (80011f8 <__NVIC_GetPriorityGrouping+0x18>)
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	0a1b      	lsrs	r3, r3, #8
 80011ea:	f003 0307 	and.w	r3, r3, #7
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120a:	2b00      	cmp	r3, #0
 800120c:	db0b      	blt.n	8001226 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	f003 021f 	and.w	r2, r3, #31
 8001214:	4907      	ldr	r1, [pc, #28]	; (8001234 <__NVIC_EnableIRQ+0x38>)
 8001216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121a:	095b      	lsrs	r3, r3, #5
 800121c:	2001      	movs	r0, #1
 800121e:	fa00 f202 	lsl.w	r2, r0, r2
 8001222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001226:	bf00      	nop
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	e000e100 	.word	0xe000e100

08001238 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	6039      	str	r1, [r7, #0]
 8001242:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001248:	2b00      	cmp	r3, #0
 800124a:	db0a      	blt.n	8001262 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	b2da      	uxtb	r2, r3
 8001250:	490c      	ldr	r1, [pc, #48]	; (8001284 <__NVIC_SetPriority+0x4c>)
 8001252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001256:	0112      	lsls	r2, r2, #4
 8001258:	b2d2      	uxtb	r2, r2
 800125a:	440b      	add	r3, r1
 800125c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001260:	e00a      	b.n	8001278 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	b2da      	uxtb	r2, r3
 8001266:	4908      	ldr	r1, [pc, #32]	; (8001288 <__NVIC_SetPriority+0x50>)
 8001268:	79fb      	ldrb	r3, [r7, #7]
 800126a:	f003 030f 	and.w	r3, r3, #15
 800126e:	3b04      	subs	r3, #4
 8001270:	0112      	lsls	r2, r2, #4
 8001272:	b2d2      	uxtb	r2, r2
 8001274:	440b      	add	r3, r1
 8001276:	761a      	strb	r2, [r3, #24]
}
 8001278:	bf00      	nop
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr
 8001284:	e000e100 	.word	0xe000e100
 8001288:	e000ed00 	.word	0xe000ed00

0800128c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800128c:	b480      	push	{r7}
 800128e:	b089      	sub	sp, #36	; 0x24
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	f003 0307 	and.w	r3, r3, #7
 800129e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	f1c3 0307 	rsb	r3, r3, #7
 80012a6:	2b04      	cmp	r3, #4
 80012a8:	bf28      	it	cs
 80012aa:	2304      	movcs	r3, #4
 80012ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	3304      	adds	r3, #4
 80012b2:	2b06      	cmp	r3, #6
 80012b4:	d902      	bls.n	80012bc <NVIC_EncodePriority+0x30>
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	3b03      	subs	r3, #3
 80012ba:	e000      	b.n	80012be <NVIC_EncodePriority+0x32>
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	43da      	mvns	r2, r3
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	401a      	ands	r2, r3
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	fa01 f303 	lsl.w	r3, r1, r3
 80012de:	43d9      	mvns	r1, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e4:	4313      	orrs	r3, r2
         );
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3724      	adds	r7, #36	; 0x24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
	...

080012f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	3b01      	subs	r3, #1
 8001300:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001304:	d301      	bcc.n	800130a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001306:	2301      	movs	r3, #1
 8001308:	e00f      	b.n	800132a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800130a:	4a0a      	ldr	r2, [pc, #40]	; (8001334 <SysTick_Config+0x40>)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	3b01      	subs	r3, #1
 8001310:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001312:	210f      	movs	r1, #15
 8001314:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001318:	f7ff ff8e 	bl	8001238 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800131c:	4b05      	ldr	r3, [pc, #20]	; (8001334 <SysTick_Config+0x40>)
 800131e:	2200      	movs	r2, #0
 8001320:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001322:	4b04      	ldr	r3, [pc, #16]	; (8001334 <SysTick_Config+0x40>)
 8001324:	2207      	movs	r2, #7
 8001326:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001328:	2300      	movs	r3, #0
}
 800132a:	4618      	mov	r0, r3
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	e000e010 	.word	0xe000e010

08001338 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f7ff ff29 	bl	8001198 <__NVIC_SetPriorityGrouping>
}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800134e:	b580      	push	{r7, lr}
 8001350:	b086      	sub	sp, #24
 8001352:	af00      	add	r7, sp, #0
 8001354:	4603      	mov	r3, r0
 8001356:	60b9      	str	r1, [r7, #8]
 8001358:	607a      	str	r2, [r7, #4]
 800135a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800135c:	2300      	movs	r3, #0
 800135e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001360:	f7ff ff3e 	bl	80011e0 <__NVIC_GetPriorityGrouping>
 8001364:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	68b9      	ldr	r1, [r7, #8]
 800136a:	6978      	ldr	r0, [r7, #20]
 800136c:	f7ff ff8e 	bl	800128c <NVIC_EncodePriority>
 8001370:	4602      	mov	r2, r0
 8001372:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001376:	4611      	mov	r1, r2
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff ff5d 	bl	8001238 <__NVIC_SetPriority>
}
 800137e:	bf00      	nop
 8001380:	3718      	adds	r7, #24
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	b082      	sub	sp, #8
 800138a:	af00      	add	r7, sp, #0
 800138c:	4603      	mov	r3, r0
 800138e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff ff31 	bl	80011fc <__NVIC_EnableIRQ>
}
 800139a:	bf00      	nop
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b082      	sub	sp, #8
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f7ff ffa2 	bl	80012f4 <SysTick_Config>
 80013b0:	4603      	mov	r3, r0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
	...

080013bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013bc:	b480      	push	{r7}
 80013be:	b089      	sub	sp, #36	; 0x24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013c6:	2300      	movs	r3, #0
 80013c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013ca:	2300      	movs	r3, #0
 80013cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013ce:	2300      	movs	r3, #0
 80013d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013d2:	2300      	movs	r3, #0
 80013d4:	61fb      	str	r3, [r7, #28]
 80013d6:	e159      	b.n	800168c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013d8:	2201      	movs	r2, #1
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	697a      	ldr	r2, [r7, #20]
 80013e8:	4013      	ands	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	f040 8148 	bne.w	8001686 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d00b      	beq.n	8001416 <HAL_GPIO_Init+0x5a>
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	2b02      	cmp	r3, #2
 8001404:	d007      	beq.n	8001416 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800140a:	2b11      	cmp	r3, #17
 800140c:	d003      	beq.n	8001416 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	2b12      	cmp	r3, #18
 8001414:	d130      	bne.n	8001478 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	2203      	movs	r2, #3
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	43db      	mvns	r3, r3
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	4013      	ands	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	68da      	ldr	r2, [r3, #12]
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	4313      	orrs	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800144c:	2201      	movs	r2, #1
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	43db      	mvns	r3, r3
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	4013      	ands	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	091b      	lsrs	r3, r3, #4
 8001462:	f003 0201 	and.w	r2, r3, #1
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	4313      	orrs	r3, r2
 8001470:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	2203      	movs	r2, #3
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	43db      	mvns	r3, r3
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	4013      	ands	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	689a      	ldr	r2, [r3, #8]
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	4313      	orrs	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d003      	beq.n	80014b8 <HAL_GPIO_Init+0xfc>
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	2b12      	cmp	r3, #18
 80014b6:	d123      	bne.n	8001500 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	08da      	lsrs	r2, r3, #3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	3208      	adds	r2, #8
 80014c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	f003 0307 	and.w	r3, r3, #7
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	220f      	movs	r2, #15
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	43db      	mvns	r3, r3
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	4013      	ands	r3, r2
 80014da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	691a      	ldr	r2, [r3, #16]
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	f003 0307 	and.w	r3, r3, #7
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	08da      	lsrs	r2, r3, #3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	3208      	adds	r2, #8
 80014fa:	69b9      	ldr	r1, [r7, #24]
 80014fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	2203      	movs	r2, #3
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	43db      	mvns	r3, r3
 8001512:	69ba      	ldr	r2, [r7, #24]
 8001514:	4013      	ands	r3, r2
 8001516:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f003 0203 	and.w	r2, r3, #3
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	4313      	orrs	r3, r2
 800152c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153c:	2b00      	cmp	r3, #0
 800153e:	f000 80a2 	beq.w	8001686 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	60fb      	str	r3, [r7, #12]
 8001546:	4b56      	ldr	r3, [pc, #344]	; (80016a0 <HAL_GPIO_Init+0x2e4>)
 8001548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154a:	4a55      	ldr	r2, [pc, #340]	; (80016a0 <HAL_GPIO_Init+0x2e4>)
 800154c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001550:	6453      	str	r3, [r2, #68]	; 0x44
 8001552:	4b53      	ldr	r3, [pc, #332]	; (80016a0 <HAL_GPIO_Init+0x2e4>)
 8001554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001556:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800155e:	4a51      	ldr	r2, [pc, #324]	; (80016a4 <HAL_GPIO_Init+0x2e8>)
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	089b      	lsrs	r3, r3, #2
 8001564:	3302      	adds	r3, #2
 8001566:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800156a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	f003 0303 	and.w	r3, r3, #3
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	220f      	movs	r2, #15
 8001576:	fa02 f303 	lsl.w	r3, r2, r3
 800157a:	43db      	mvns	r3, r3
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	4013      	ands	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a48      	ldr	r2, [pc, #288]	; (80016a8 <HAL_GPIO_Init+0x2ec>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d019      	beq.n	80015be <HAL_GPIO_Init+0x202>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a47      	ldr	r2, [pc, #284]	; (80016ac <HAL_GPIO_Init+0x2f0>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d013      	beq.n	80015ba <HAL_GPIO_Init+0x1fe>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a46      	ldr	r2, [pc, #280]	; (80016b0 <HAL_GPIO_Init+0x2f4>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d00d      	beq.n	80015b6 <HAL_GPIO_Init+0x1fa>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a45      	ldr	r2, [pc, #276]	; (80016b4 <HAL_GPIO_Init+0x2f8>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d007      	beq.n	80015b2 <HAL_GPIO_Init+0x1f6>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a44      	ldr	r2, [pc, #272]	; (80016b8 <HAL_GPIO_Init+0x2fc>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d101      	bne.n	80015ae <HAL_GPIO_Init+0x1f2>
 80015aa:	2304      	movs	r3, #4
 80015ac:	e008      	b.n	80015c0 <HAL_GPIO_Init+0x204>
 80015ae:	2307      	movs	r3, #7
 80015b0:	e006      	b.n	80015c0 <HAL_GPIO_Init+0x204>
 80015b2:	2303      	movs	r3, #3
 80015b4:	e004      	b.n	80015c0 <HAL_GPIO_Init+0x204>
 80015b6:	2302      	movs	r3, #2
 80015b8:	e002      	b.n	80015c0 <HAL_GPIO_Init+0x204>
 80015ba:	2301      	movs	r3, #1
 80015bc:	e000      	b.n	80015c0 <HAL_GPIO_Init+0x204>
 80015be:	2300      	movs	r3, #0
 80015c0:	69fa      	ldr	r2, [r7, #28]
 80015c2:	f002 0203 	and.w	r2, r2, #3
 80015c6:	0092      	lsls	r2, r2, #2
 80015c8:	4093      	lsls	r3, r2
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015d0:	4934      	ldr	r1, [pc, #208]	; (80016a4 <HAL_GPIO_Init+0x2e8>)
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	089b      	lsrs	r3, r3, #2
 80015d6:	3302      	adds	r3, #2
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015de:	4b37      	ldr	r3, [pc, #220]	; (80016bc <HAL_GPIO_Init+0x300>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	43db      	mvns	r3, r3
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	4013      	ands	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d003      	beq.n	8001602 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	4313      	orrs	r3, r2
 8001600:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001602:	4a2e      	ldr	r2, [pc, #184]	; (80016bc <HAL_GPIO_Init+0x300>)
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001608:	4b2c      	ldr	r3, [pc, #176]	; (80016bc <HAL_GPIO_Init+0x300>)
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	43db      	mvns	r3, r3
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	4013      	ands	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d003      	beq.n	800162c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	4313      	orrs	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800162c:	4a23      	ldr	r2, [pc, #140]	; (80016bc <HAL_GPIO_Init+0x300>)
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001632:	4b22      	ldr	r3, [pc, #136]	; (80016bc <HAL_GPIO_Init+0x300>)
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	43db      	mvns	r3, r3
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	4013      	ands	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d003      	beq.n	8001656 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	4313      	orrs	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001656:	4a19      	ldr	r2, [pc, #100]	; (80016bc <HAL_GPIO_Init+0x300>)
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800165c:	4b17      	ldr	r3, [pc, #92]	; (80016bc <HAL_GPIO_Init+0x300>)
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	43db      	mvns	r3, r3
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	4013      	ands	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d003      	beq.n	8001680 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	4313      	orrs	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001680:	4a0e      	ldr	r2, [pc, #56]	; (80016bc <HAL_GPIO_Init+0x300>)
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	3301      	adds	r3, #1
 800168a:	61fb      	str	r3, [r7, #28]
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	2b0f      	cmp	r3, #15
 8001690:	f67f aea2 	bls.w	80013d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001694:	bf00      	nop
 8001696:	3724      	adds	r7, #36	; 0x24
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	40023800 	.word	0x40023800
 80016a4:	40013800 	.word	0x40013800
 80016a8:	40020000 	.word	0x40020000
 80016ac:	40020400 	.word	0x40020400
 80016b0:	40020800 	.word	0x40020800
 80016b4:	40020c00 	.word	0x40020c00
 80016b8:	40021000 	.word	0x40021000
 80016bc:	40013c00 	.word	0x40013c00

080016c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	460b      	mov	r3, r1
 80016ca:	807b      	strh	r3, [r7, #2]
 80016cc:	4613      	mov	r3, r2
 80016ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016d0:	787b      	ldrb	r3, [r7, #1]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d003      	beq.n	80016de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016d6:	887a      	ldrh	r2, [r7, #2]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016dc:	e003      	b.n	80016e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016de:	887b      	ldrh	r3, [r7, #2]
 80016e0:	041a      	lsls	r2, r3, #16
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	619a      	str	r2, [r3, #24]
}
 80016e6:	bf00      	nop
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr

080016f2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80016f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016f4:	b08f      	sub	sp, #60	; 0x3c
 80016f6:	af0a      	add	r7, sp, #40	; 0x28
 80016f8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d101      	bne.n	8001704 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e054      	b.n	80017ae <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8001710:	b2db      	uxtb	r3, r3
 8001712:	2b00      	cmp	r3, #0
 8001714:	d106      	bne.n	8001724 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2200      	movs	r2, #0
 800171a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f006 f934 	bl	800798c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2203      	movs	r2, #3
 8001728:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001734:	2b00      	cmp	r3, #0
 8001736:	d102      	bne.n	800173e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2200      	movs	r2, #0
 800173c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4618      	mov	r0, r3
 8001744:	f003 faf0 	bl	8004d28 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	603b      	str	r3, [r7, #0]
 800174e:	687e      	ldr	r6, [r7, #4]
 8001750:	466d      	mov	r5, sp
 8001752:	f106 0410 	add.w	r4, r6, #16
 8001756:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001758:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800175a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800175c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800175e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001762:	e885 0003 	stmia.w	r5, {r0, r1}
 8001766:	1d33      	adds	r3, r6, #4
 8001768:	cb0e      	ldmia	r3, {r1, r2, r3}
 800176a:	6838      	ldr	r0, [r7, #0]
 800176c:	f003 fa6a 	bl	8004c44 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2101      	movs	r1, #1
 8001776:	4618      	mov	r0, r3
 8001778:	f003 fae7 	bl	8004d4a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	603b      	str	r3, [r7, #0]
 8001782:	687e      	ldr	r6, [r7, #4]
 8001784:	466d      	mov	r5, sp
 8001786:	f106 0410 	add.w	r4, r6, #16
 800178a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800178c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800178e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001790:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001792:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001796:	e885 0003 	stmia.w	r5, {r0, r1}
 800179a:	1d33      	adds	r3, r6, #4
 800179c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800179e:	6838      	ldr	r0, [r7, #0]
 80017a0:	f003 fbfa 	bl	8004f98 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2201      	movs	r2, #1
 80017a8:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3714      	adds	r7, #20
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080017b6 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80017b6:	b590      	push	{r4, r7, lr}
 80017b8:	b089      	sub	sp, #36	; 0x24
 80017ba:	af04      	add	r7, sp, #16
 80017bc:	6078      	str	r0, [r7, #4]
 80017be:	4608      	mov	r0, r1
 80017c0:	4611      	mov	r1, r2
 80017c2:	461a      	mov	r2, r3
 80017c4:	4603      	mov	r3, r0
 80017c6:	70fb      	strb	r3, [r7, #3]
 80017c8:	460b      	mov	r3, r1
 80017ca:	70bb      	strb	r3, [r7, #2]
 80017cc:	4613      	mov	r3, r2
 80017ce:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d101      	bne.n	80017de <HAL_HCD_HC_Init+0x28>
 80017da:	2302      	movs	r3, #2
 80017dc:	e07f      	b.n	80018de <HAL_HCD_HC_Init+0x128>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2201      	movs	r2, #1
 80017e2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80017e6:	78fa      	ldrb	r2, [r7, #3]
 80017e8:	6879      	ldr	r1, [r7, #4]
 80017ea:	4613      	mov	r3, r2
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	4413      	add	r3, r2
 80017f0:	00db      	lsls	r3, r3, #3
 80017f2:	440b      	add	r3, r1
 80017f4:	333d      	adds	r3, #61	; 0x3d
 80017f6:	2200      	movs	r2, #0
 80017f8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80017fa:	78fa      	ldrb	r2, [r7, #3]
 80017fc:	6879      	ldr	r1, [r7, #4]
 80017fe:	4613      	mov	r3, r2
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	4413      	add	r3, r2
 8001804:	00db      	lsls	r3, r3, #3
 8001806:	440b      	add	r3, r1
 8001808:	3338      	adds	r3, #56	; 0x38
 800180a:	787a      	ldrb	r2, [r7, #1]
 800180c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800180e:	78fa      	ldrb	r2, [r7, #3]
 8001810:	6879      	ldr	r1, [r7, #4]
 8001812:	4613      	mov	r3, r2
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	4413      	add	r3, r2
 8001818:	00db      	lsls	r3, r3, #3
 800181a:	440b      	add	r3, r1
 800181c:	3340      	adds	r3, #64	; 0x40
 800181e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001820:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001822:	78fa      	ldrb	r2, [r7, #3]
 8001824:	6879      	ldr	r1, [r7, #4]
 8001826:	4613      	mov	r3, r2
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	4413      	add	r3, r2
 800182c:	00db      	lsls	r3, r3, #3
 800182e:	440b      	add	r3, r1
 8001830:	3339      	adds	r3, #57	; 0x39
 8001832:	78fa      	ldrb	r2, [r7, #3]
 8001834:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001836:	78fa      	ldrb	r2, [r7, #3]
 8001838:	6879      	ldr	r1, [r7, #4]
 800183a:	4613      	mov	r3, r2
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	4413      	add	r3, r2
 8001840:	00db      	lsls	r3, r3, #3
 8001842:	440b      	add	r3, r1
 8001844:	333f      	adds	r3, #63	; 0x3f
 8001846:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800184a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800184c:	78fa      	ldrb	r2, [r7, #3]
 800184e:	78bb      	ldrb	r3, [r7, #2]
 8001850:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001854:	b2d8      	uxtb	r0, r3
 8001856:	6879      	ldr	r1, [r7, #4]
 8001858:	4613      	mov	r3, r2
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	4413      	add	r3, r2
 800185e:	00db      	lsls	r3, r3, #3
 8001860:	440b      	add	r3, r1
 8001862:	333a      	adds	r3, #58	; 0x3a
 8001864:	4602      	mov	r2, r0
 8001866:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001868:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800186c:	2b00      	cmp	r3, #0
 800186e:	da0a      	bge.n	8001886 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001870:	78fa      	ldrb	r2, [r7, #3]
 8001872:	6879      	ldr	r1, [r7, #4]
 8001874:	4613      	mov	r3, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	4413      	add	r3, r2
 800187a:	00db      	lsls	r3, r3, #3
 800187c:	440b      	add	r3, r1
 800187e:	333b      	adds	r3, #59	; 0x3b
 8001880:	2201      	movs	r2, #1
 8001882:	701a      	strb	r2, [r3, #0]
 8001884:	e009      	b.n	800189a <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001886:	78fa      	ldrb	r2, [r7, #3]
 8001888:	6879      	ldr	r1, [r7, #4]
 800188a:	4613      	mov	r3, r2
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	4413      	add	r3, r2
 8001890:	00db      	lsls	r3, r3, #3
 8001892:	440b      	add	r3, r1
 8001894:	333b      	adds	r3, #59	; 0x3b
 8001896:	2200      	movs	r2, #0
 8001898:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800189a:	78fa      	ldrb	r2, [r7, #3]
 800189c:	6879      	ldr	r1, [r7, #4]
 800189e:	4613      	mov	r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	4413      	add	r3, r2
 80018a4:	00db      	lsls	r3, r3, #3
 80018a6:	440b      	add	r3, r1
 80018a8:	333c      	adds	r3, #60	; 0x3c
 80018aa:	f897 2020 	ldrb.w	r2, [r7, #32]
 80018ae:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6818      	ldr	r0, [r3, #0]
 80018b4:	787c      	ldrb	r4, [r7, #1]
 80018b6:	78ba      	ldrb	r2, [r7, #2]
 80018b8:	78f9      	ldrb	r1, [r7, #3]
 80018ba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80018bc:	9302      	str	r3, [sp, #8]
 80018be:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80018c2:	9301      	str	r3, [sp, #4]
 80018c4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018c8:	9300      	str	r3, [sp, #0]
 80018ca:	4623      	mov	r3, r4
 80018cc:	f003 fce6 	bl	800529c <USB_HC_Init>
 80018d0:	4603      	mov	r3, r0
 80018d2:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80018dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3714      	adds	r7, #20
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd90      	pop	{r4, r7, pc}

080018e6 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b084      	sub	sp, #16
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
 80018ee:	460b      	mov	r3, r1
 80018f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80018f2:	2300      	movs	r3, #0
 80018f4:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d101      	bne.n	8001904 <HAL_HCD_HC_Halt+0x1e>
 8001900:	2302      	movs	r3, #2
 8001902:	e00f      	b.n	8001924 <HAL_HCD_HC_Halt+0x3e>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2201      	movs	r2, #1
 8001908:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	78fa      	ldrb	r2, [r7, #3]
 8001912:	4611      	mov	r1, r2
 8001914:	4618      	mov	r0, r3
 8001916:	f003 ff22 	bl	800575e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001922:	7bfb      	ldrb	r3, [r7, #15]
}
 8001924:	4618      	mov	r0, r3
 8001926:	3710      	adds	r7, #16
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	4608      	mov	r0, r1
 8001936:	4611      	mov	r1, r2
 8001938:	461a      	mov	r2, r3
 800193a:	4603      	mov	r3, r0
 800193c:	70fb      	strb	r3, [r7, #3]
 800193e:	460b      	mov	r3, r1
 8001940:	70bb      	strb	r3, [r7, #2]
 8001942:	4613      	mov	r3, r2
 8001944:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001946:	78fa      	ldrb	r2, [r7, #3]
 8001948:	6879      	ldr	r1, [r7, #4]
 800194a:	4613      	mov	r3, r2
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	4413      	add	r3, r2
 8001950:	00db      	lsls	r3, r3, #3
 8001952:	440b      	add	r3, r1
 8001954:	333b      	adds	r3, #59	; 0x3b
 8001956:	78ba      	ldrb	r2, [r7, #2]
 8001958:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800195a:	78fa      	ldrb	r2, [r7, #3]
 800195c:	6879      	ldr	r1, [r7, #4]
 800195e:	4613      	mov	r3, r2
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	4413      	add	r3, r2
 8001964:	00db      	lsls	r3, r3, #3
 8001966:	440b      	add	r3, r1
 8001968:	333f      	adds	r3, #63	; 0x3f
 800196a:	787a      	ldrb	r2, [r7, #1]
 800196c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800196e:	7c3b      	ldrb	r3, [r7, #16]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d114      	bne.n	800199e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001974:	78fa      	ldrb	r2, [r7, #3]
 8001976:	6879      	ldr	r1, [r7, #4]
 8001978:	4613      	mov	r3, r2
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	4413      	add	r3, r2
 800197e:	00db      	lsls	r3, r3, #3
 8001980:	440b      	add	r3, r1
 8001982:	3342      	adds	r3, #66	; 0x42
 8001984:	2203      	movs	r2, #3
 8001986:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001988:	78fa      	ldrb	r2, [r7, #3]
 800198a:	6879      	ldr	r1, [r7, #4]
 800198c:	4613      	mov	r3, r2
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	4413      	add	r3, r2
 8001992:	00db      	lsls	r3, r3, #3
 8001994:	440b      	add	r3, r1
 8001996:	333d      	adds	r3, #61	; 0x3d
 8001998:	7f3a      	ldrb	r2, [r7, #28]
 800199a:	701a      	strb	r2, [r3, #0]
 800199c:	e009      	b.n	80019b2 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800199e:	78fa      	ldrb	r2, [r7, #3]
 80019a0:	6879      	ldr	r1, [r7, #4]
 80019a2:	4613      	mov	r3, r2
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	4413      	add	r3, r2
 80019a8:	00db      	lsls	r3, r3, #3
 80019aa:	440b      	add	r3, r1
 80019ac:	3342      	adds	r3, #66	; 0x42
 80019ae:	2202      	movs	r2, #2
 80019b0:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80019b2:	787b      	ldrb	r3, [r7, #1]
 80019b4:	2b03      	cmp	r3, #3
 80019b6:	f200 80d6 	bhi.w	8001b66 <HAL_HCD_HC_SubmitRequest+0x23a>
 80019ba:	a201      	add	r2, pc, #4	; (adr r2, 80019c0 <HAL_HCD_HC_SubmitRequest+0x94>)
 80019bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019c0:	080019d1 	.word	0x080019d1
 80019c4:	08001b51 	.word	0x08001b51
 80019c8:	08001a3d 	.word	0x08001a3d
 80019cc:	08001ac7 	.word	0x08001ac7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80019d0:	7c3b      	ldrb	r3, [r7, #16]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	f040 80c9 	bne.w	8001b6a <HAL_HCD_HC_SubmitRequest+0x23e>
 80019d8:	78bb      	ldrb	r3, [r7, #2]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	f040 80c5 	bne.w	8001b6a <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 80019e0:	8b3b      	ldrh	r3, [r7, #24]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d109      	bne.n	80019fa <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80019e6:	78fa      	ldrb	r2, [r7, #3]
 80019e8:	6879      	ldr	r1, [r7, #4]
 80019ea:	4613      	mov	r3, r2
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	4413      	add	r3, r2
 80019f0:	00db      	lsls	r3, r3, #3
 80019f2:	440b      	add	r3, r1
 80019f4:	3351      	adds	r3, #81	; 0x51
 80019f6:	2201      	movs	r2, #1
 80019f8:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80019fa:	78fa      	ldrb	r2, [r7, #3]
 80019fc:	6879      	ldr	r1, [r7, #4]
 80019fe:	4613      	mov	r3, r2
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	4413      	add	r3, r2
 8001a04:	00db      	lsls	r3, r3, #3
 8001a06:	440b      	add	r3, r1
 8001a08:	3351      	adds	r3, #81	; 0x51
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d10a      	bne.n	8001a26 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a10:	78fa      	ldrb	r2, [r7, #3]
 8001a12:	6879      	ldr	r1, [r7, #4]
 8001a14:	4613      	mov	r3, r2
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	4413      	add	r3, r2
 8001a1a:	00db      	lsls	r3, r3, #3
 8001a1c:	440b      	add	r3, r1
 8001a1e:	3342      	adds	r3, #66	; 0x42
 8001a20:	2200      	movs	r2, #0
 8001a22:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001a24:	e0a1      	b.n	8001b6a <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a26:	78fa      	ldrb	r2, [r7, #3]
 8001a28:	6879      	ldr	r1, [r7, #4]
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	4413      	add	r3, r2
 8001a30:	00db      	lsls	r3, r3, #3
 8001a32:	440b      	add	r3, r1
 8001a34:	3342      	adds	r3, #66	; 0x42
 8001a36:	2202      	movs	r2, #2
 8001a38:	701a      	strb	r2, [r3, #0]
      break;
 8001a3a:	e096      	b.n	8001b6a <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001a3c:	78bb      	ldrb	r3, [r7, #2]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d120      	bne.n	8001a84 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a42:	78fa      	ldrb	r2, [r7, #3]
 8001a44:	6879      	ldr	r1, [r7, #4]
 8001a46:	4613      	mov	r3, r2
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	4413      	add	r3, r2
 8001a4c:	00db      	lsls	r3, r3, #3
 8001a4e:	440b      	add	r3, r1
 8001a50:	3351      	adds	r3, #81	; 0x51
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d10a      	bne.n	8001a6e <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a58:	78fa      	ldrb	r2, [r7, #3]
 8001a5a:	6879      	ldr	r1, [r7, #4]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	4413      	add	r3, r2
 8001a62:	00db      	lsls	r3, r3, #3
 8001a64:	440b      	add	r3, r1
 8001a66:	3342      	adds	r3, #66	; 0x42
 8001a68:	2200      	movs	r2, #0
 8001a6a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001a6c:	e07e      	b.n	8001b6c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a6e:	78fa      	ldrb	r2, [r7, #3]
 8001a70:	6879      	ldr	r1, [r7, #4]
 8001a72:	4613      	mov	r3, r2
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	4413      	add	r3, r2
 8001a78:	00db      	lsls	r3, r3, #3
 8001a7a:	440b      	add	r3, r1
 8001a7c:	3342      	adds	r3, #66	; 0x42
 8001a7e:	2202      	movs	r2, #2
 8001a80:	701a      	strb	r2, [r3, #0]
      break;
 8001a82:	e073      	b.n	8001b6c <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001a84:	78fa      	ldrb	r2, [r7, #3]
 8001a86:	6879      	ldr	r1, [r7, #4]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	4413      	add	r3, r2
 8001a8e:	00db      	lsls	r3, r3, #3
 8001a90:	440b      	add	r3, r1
 8001a92:	3350      	adds	r3, #80	; 0x50
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d10a      	bne.n	8001ab0 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a9a:	78fa      	ldrb	r2, [r7, #3]
 8001a9c:	6879      	ldr	r1, [r7, #4]
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	4413      	add	r3, r2
 8001aa4:	00db      	lsls	r3, r3, #3
 8001aa6:	440b      	add	r3, r1
 8001aa8:	3342      	adds	r3, #66	; 0x42
 8001aaa:	2200      	movs	r2, #0
 8001aac:	701a      	strb	r2, [r3, #0]
      break;
 8001aae:	e05d      	b.n	8001b6c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ab0:	78fa      	ldrb	r2, [r7, #3]
 8001ab2:	6879      	ldr	r1, [r7, #4]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	4413      	add	r3, r2
 8001aba:	00db      	lsls	r3, r3, #3
 8001abc:	440b      	add	r3, r1
 8001abe:	3342      	adds	r3, #66	; 0x42
 8001ac0:	2202      	movs	r2, #2
 8001ac2:	701a      	strb	r2, [r3, #0]
      break;
 8001ac4:	e052      	b.n	8001b6c <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001ac6:	78bb      	ldrb	r3, [r7, #2]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d120      	bne.n	8001b0e <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001acc:	78fa      	ldrb	r2, [r7, #3]
 8001ace:	6879      	ldr	r1, [r7, #4]
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	4413      	add	r3, r2
 8001ad6:	00db      	lsls	r3, r3, #3
 8001ad8:	440b      	add	r3, r1
 8001ada:	3351      	adds	r3, #81	; 0x51
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d10a      	bne.n	8001af8 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ae2:	78fa      	ldrb	r2, [r7, #3]
 8001ae4:	6879      	ldr	r1, [r7, #4]
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	4413      	add	r3, r2
 8001aec:	00db      	lsls	r3, r3, #3
 8001aee:	440b      	add	r3, r1
 8001af0:	3342      	adds	r3, #66	; 0x42
 8001af2:	2200      	movs	r2, #0
 8001af4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001af6:	e039      	b.n	8001b6c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001af8:	78fa      	ldrb	r2, [r7, #3]
 8001afa:	6879      	ldr	r1, [r7, #4]
 8001afc:	4613      	mov	r3, r2
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	4413      	add	r3, r2
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	440b      	add	r3, r1
 8001b06:	3342      	adds	r3, #66	; 0x42
 8001b08:	2202      	movs	r2, #2
 8001b0a:	701a      	strb	r2, [r3, #0]
      break;
 8001b0c:	e02e      	b.n	8001b6c <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001b0e:	78fa      	ldrb	r2, [r7, #3]
 8001b10:	6879      	ldr	r1, [r7, #4]
 8001b12:	4613      	mov	r3, r2
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	4413      	add	r3, r2
 8001b18:	00db      	lsls	r3, r3, #3
 8001b1a:	440b      	add	r3, r1
 8001b1c:	3350      	adds	r3, #80	; 0x50
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d10a      	bne.n	8001b3a <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b24:	78fa      	ldrb	r2, [r7, #3]
 8001b26:	6879      	ldr	r1, [r7, #4]
 8001b28:	4613      	mov	r3, r2
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	4413      	add	r3, r2
 8001b2e:	00db      	lsls	r3, r3, #3
 8001b30:	440b      	add	r3, r1
 8001b32:	3342      	adds	r3, #66	; 0x42
 8001b34:	2200      	movs	r2, #0
 8001b36:	701a      	strb	r2, [r3, #0]
      break;
 8001b38:	e018      	b.n	8001b6c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b3a:	78fa      	ldrb	r2, [r7, #3]
 8001b3c:	6879      	ldr	r1, [r7, #4]
 8001b3e:	4613      	mov	r3, r2
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	4413      	add	r3, r2
 8001b44:	00db      	lsls	r3, r3, #3
 8001b46:	440b      	add	r3, r1
 8001b48:	3342      	adds	r3, #66	; 0x42
 8001b4a:	2202      	movs	r2, #2
 8001b4c:	701a      	strb	r2, [r3, #0]
      break;
 8001b4e:	e00d      	b.n	8001b6c <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b50:	78fa      	ldrb	r2, [r7, #3]
 8001b52:	6879      	ldr	r1, [r7, #4]
 8001b54:	4613      	mov	r3, r2
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	4413      	add	r3, r2
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	440b      	add	r3, r1
 8001b5e:	3342      	adds	r3, #66	; 0x42
 8001b60:	2200      	movs	r2, #0
 8001b62:	701a      	strb	r2, [r3, #0]
      break;
 8001b64:	e002      	b.n	8001b6c <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8001b66:	bf00      	nop
 8001b68:	e000      	b.n	8001b6c <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8001b6a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001b6c:	78fa      	ldrb	r2, [r7, #3]
 8001b6e:	6879      	ldr	r1, [r7, #4]
 8001b70:	4613      	mov	r3, r2
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	4413      	add	r3, r2
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	440b      	add	r3, r1
 8001b7a:	3344      	adds	r3, #68	; 0x44
 8001b7c:	697a      	ldr	r2, [r7, #20]
 8001b7e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001b80:	78fa      	ldrb	r2, [r7, #3]
 8001b82:	8b39      	ldrh	r1, [r7, #24]
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	4613      	mov	r3, r2
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	4413      	add	r3, r2
 8001b8c:	00db      	lsls	r3, r3, #3
 8001b8e:	4403      	add	r3, r0
 8001b90:	3348      	adds	r3, #72	; 0x48
 8001b92:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001b94:	78fa      	ldrb	r2, [r7, #3]
 8001b96:	6879      	ldr	r1, [r7, #4]
 8001b98:	4613      	mov	r3, r2
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	4413      	add	r3, r2
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	440b      	add	r3, r1
 8001ba2:	335c      	adds	r3, #92	; 0x5c
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001ba8:	78fa      	ldrb	r2, [r7, #3]
 8001baa:	6879      	ldr	r1, [r7, #4]
 8001bac:	4613      	mov	r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	4413      	add	r3, r2
 8001bb2:	00db      	lsls	r3, r3, #3
 8001bb4:	440b      	add	r3, r1
 8001bb6:	334c      	adds	r3, #76	; 0x4c
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001bbc:	78fa      	ldrb	r2, [r7, #3]
 8001bbe:	6879      	ldr	r1, [r7, #4]
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	4413      	add	r3, r2
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	440b      	add	r3, r1
 8001bca:	3339      	adds	r3, #57	; 0x39
 8001bcc:	78fa      	ldrb	r2, [r7, #3]
 8001bce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001bd0:	78fa      	ldrb	r2, [r7, #3]
 8001bd2:	6879      	ldr	r1, [r7, #4]
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	4413      	add	r3, r2
 8001bda:	00db      	lsls	r3, r3, #3
 8001bdc:	440b      	add	r3, r1
 8001bde:	335d      	adds	r3, #93	; 0x5d
 8001be0:	2200      	movs	r2, #0
 8001be2:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6818      	ldr	r0, [r3, #0]
 8001be8:	78fa      	ldrb	r2, [r7, #3]
 8001bea:	4613      	mov	r3, r2
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	4413      	add	r3, r2
 8001bf0:	00db      	lsls	r3, r3, #3
 8001bf2:	3338      	adds	r3, #56	; 0x38
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	18d1      	adds	r1, r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	691b      	ldr	r3, [r3, #16]
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	461a      	mov	r2, r3
 8001c00:	f003 fc56 	bl	80054b0 <USB_HC_StartXfer>
 8001c04:	4603      	mov	r3, r0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop

08001c10 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b086      	sub	sp, #24
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f003 f973 	bl	8004f12 <USB_GetMode>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	f040 80ef 	bne.w	8001e12 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f003 f957 	bl	8004eec <USB_ReadInterrupts>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	f000 80e5 	beq.w	8001e10 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f003 f94e 	bl	8004eec <USB_ReadInterrupts>
 8001c50:	4603      	mov	r3, r0
 8001c52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001c5a:	d104      	bne.n	8001c66 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001c64:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f003 f93e 	bl	8004eec <USB_ReadInterrupts>
 8001c70:	4603      	mov	r3, r0
 8001c72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c7a:	d104      	bne.n	8001c86 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001c84:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f003 f92e 	bl	8004eec <USB_ReadInterrupts>
 8001c90:	4603      	mov	r3, r0
 8001c92:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c96:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001c9a:	d104      	bne.n	8001ca6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001ca4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f003 f91e 	bl	8004eec <USB_ReadInterrupts>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d103      	bne.n	8001cc2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2202      	movs	r2, #2
 8001cc0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f003 f910 	bl	8004eec <USB_ReadInterrupts>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001cd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001cd6:	d115      	bne.n	8001d04 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001ce0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d108      	bne.n	8001d04 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f005 fec8 	bl	8007a88 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2101      	movs	r1, #1
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f003 fa06 	bl	8005110 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f003 f8ef 	bl	8004eec <USB_ReadInterrupts>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d18:	d102      	bne.n	8001d20 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f001 f966 	bl	8002fec <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f003 f8e1 	bl	8004eec <USB_ReadInterrupts>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	f003 0308 	and.w	r3, r3, #8
 8001d30:	2b08      	cmp	r3, #8
 8001d32:	d106      	bne.n	8001d42 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f005 fe8b 	bl	8007a50 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2208      	movs	r2, #8
 8001d40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f003 f8d0 	bl	8004eec <USB_ReadInterrupts>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001d56:	d138      	bne.n	8001dca <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f003 fced 	bl	800573c <USB_HC_ReadInterrupt>
 8001d62:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001d64:	2300      	movs	r3, #0
 8001d66:	617b      	str	r3, [r7, #20]
 8001d68:	e025      	b.n	8001db6 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	f003 030f 	and.w	r3, r3, #15
 8001d70:	68ba      	ldr	r2, [r7, #8]
 8001d72:	fa22 f303 	lsr.w	r3, r2, r3
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d018      	beq.n	8001db0 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	015a      	lsls	r2, r3, #5
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	4413      	add	r3, r2
 8001d86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d94:	d106      	bne.n	8001da4 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f000 f8cf 	bl	8001f40 <HCD_HC_IN_IRQHandler>
 8001da2:	e005      	b.n	8001db0 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	4619      	mov	r1, r3
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 fcfd 	bl	80027aa <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	3301      	adds	r3, #1
 8001db4:	617b      	str	r3, [r7, #20]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	697a      	ldr	r2, [r7, #20]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d3d4      	bcc.n	8001d6a <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dc8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f003 f88c 	bl	8004eec <USB_ReadInterrupts>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	f003 0310 	and.w	r3, r3, #16
 8001dda:	2b10      	cmp	r3, #16
 8001ddc:	d101      	bne.n	8001de2 <HAL_HCD_IRQHandler+0x1d2>
 8001dde:	2301      	movs	r3, #1
 8001de0:	e000      	b.n	8001de4 <HAL_HCD_IRQHandler+0x1d4>
 8001de2:	2300      	movs	r3, #0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d014      	beq.n	8001e12 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	699a      	ldr	r2, [r3, #24]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f022 0210 	bic.w	r2, r2, #16
 8001df6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f001 f84b 	bl	8002e94 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	699a      	ldr	r2, [r3, #24]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f042 0210 	orr.w	r2, r2, #16
 8001e0c:	619a      	str	r2, [r3, #24]
 8001e0e:	e000      	b.n	8001e12 <HAL_HCD_IRQHandler+0x202>
      return;
 8001e10:	bf00      	nop
    }
  }
}
 8001e12:	3718      	adds	r7, #24
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d101      	bne.n	8001e2e <HAL_HCD_Start+0x16>
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	e013      	b.n	8001e56 <HAL_HCD_Start+0x3e>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2201      	movs	r2, #1
 8001e32:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f002 ff63 	bl	8004d06 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2101      	movs	r1, #1
 8001e46:	4618      	mov	r0, r3
 8001e48:	f003 f9c6 	bl	80051d8 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b082      	sub	sp, #8
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d101      	bne.n	8001e74 <HAL_HCD_Stop+0x16>
 8001e70:	2302      	movs	r3, #2
 8001e72:	e00d      	b.n	8001e90 <HAL_HCD_Stop+0x32>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f003 fda7 	bl	80059d4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3708      	adds	r7, #8
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f003 f96d 	bl	8005184 <USB_ResetPort>
 8001eaa:	4603      	mov	r3, r0
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3708      	adds	r7, #8
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001ec0:	78fa      	ldrb	r2, [r7, #3]
 8001ec2:	6879      	ldr	r1, [r7, #4]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	4413      	add	r3, r2
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	440b      	add	r3, r1
 8001ece:	335c      	adds	r3, #92	; 0x5c
 8001ed0:	781b      	ldrb	r3, [r3, #0]
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	b083      	sub	sp, #12
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001eea:	78fa      	ldrb	r2, [r7, #3]
 8001eec:	6879      	ldr	r1, [r7, #4]
 8001eee:	4613      	mov	r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	4413      	add	r3, r2
 8001ef4:	00db      	lsls	r3, r3, #3
 8001ef6:	440b      	add	r3, r1
 8001ef8:	334c      	adds	r3, #76	; 0x4c
 8001efa:	681b      	ldr	r3, [r3, #0]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f003 f9af 	bl	8005278 <USB_GetCurrentFrame>
 8001f1a:	4603      	mov	r3, r0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3708      	adds	r7, #8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f003 f98a 	bl	800524a <USB_GetHostSpeed>
 8001f36:	4603      	mov	r3, r0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3708      	adds	r7, #8
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	460b      	mov	r3, r1
 8001f4a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001f56:	78fb      	ldrb	r3, [r7, #3]
 8001f58:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	015a      	lsls	r2, r3, #5
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	4413      	add	r3, r2
 8001f62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f003 0304 	and.w	r3, r3, #4
 8001f6c:	2b04      	cmp	r3, #4
 8001f6e:	d119      	bne.n	8001fa4 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	015a      	lsls	r2, r3, #5
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	4413      	add	r3, r2
 8001f78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	2304      	movs	r3, #4
 8001f80:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	015a      	lsls	r2, r3, #5
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	4413      	add	r3, r2
 8001f8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	68fa      	ldr	r2, [r7, #12]
 8001f92:	0151      	lsls	r1, r2, #5
 8001f94:	693a      	ldr	r2, [r7, #16]
 8001f96:	440a      	add	r2, r1
 8001f98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f9c:	f043 0302 	orr.w	r3, r3, #2
 8001fa0:	60d3      	str	r3, [r2, #12]
 8001fa2:	e0ce      	b.n	8002142 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	015a      	lsls	r2, r3, #5
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	4413      	add	r3, r2
 8001fac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fba:	d12c      	bne.n	8002016 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	015a      	lsls	r2, r3, #5
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fc8:	461a      	mov	r2, r3
 8001fca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fce:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001fd0:	6879      	ldr	r1, [r7, #4]
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	4413      	add	r3, r2
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	440b      	add	r3, r1
 8001fde:	335d      	adds	r3, #93	; 0x5d
 8001fe0:	2207      	movs	r2, #7
 8001fe2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	015a      	lsls	r2, r3, #5
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	4413      	add	r3, r2
 8001fec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	68fa      	ldr	r2, [r7, #12]
 8001ff4:	0151      	lsls	r1, r2, #5
 8001ff6:	693a      	ldr	r2, [r7, #16]
 8001ff8:	440a      	add	r2, r1
 8001ffa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ffe:	f043 0302 	orr.w	r3, r3, #2
 8002002:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	68fa      	ldr	r2, [r7, #12]
 800200a:	b2d2      	uxtb	r2, r2
 800200c:	4611      	mov	r1, r2
 800200e:	4618      	mov	r0, r3
 8002010:	f003 fba5 	bl	800575e <USB_HC_Halt>
 8002014:	e095      	b.n	8002142 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	015a      	lsls	r2, r3, #5
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	4413      	add	r3, r2
 800201e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f003 0320 	and.w	r3, r3, #32
 8002028:	2b20      	cmp	r3, #32
 800202a:	d109      	bne.n	8002040 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	015a      	lsls	r2, r3, #5
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	4413      	add	r3, r2
 8002034:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002038:	461a      	mov	r2, r3
 800203a:	2320      	movs	r3, #32
 800203c:	6093      	str	r3, [r2, #8]
 800203e:	e080      	b.n	8002142 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	015a      	lsls	r2, r3, #5
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	4413      	add	r3, r2
 8002048:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f003 0308 	and.w	r3, r3, #8
 8002052:	2b08      	cmp	r3, #8
 8002054:	d134      	bne.n	80020c0 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	015a      	lsls	r2, r3, #5
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	4413      	add	r3, r2
 800205e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	68fa      	ldr	r2, [r7, #12]
 8002066:	0151      	lsls	r1, r2, #5
 8002068:	693a      	ldr	r2, [r7, #16]
 800206a:	440a      	add	r2, r1
 800206c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002070:	f043 0302 	orr.w	r3, r3, #2
 8002074:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002076:	6879      	ldr	r1, [r7, #4]
 8002078:	68fa      	ldr	r2, [r7, #12]
 800207a:	4613      	mov	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	4413      	add	r3, r2
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	440b      	add	r3, r1
 8002084:	335d      	adds	r3, #93	; 0x5d
 8002086:	2205      	movs	r2, #5
 8002088:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	015a      	lsls	r2, r3, #5
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	4413      	add	r3, r2
 8002092:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002096:	461a      	mov	r2, r3
 8002098:	2310      	movs	r3, #16
 800209a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	015a      	lsls	r2, r3, #5
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	4413      	add	r3, r2
 80020a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020a8:	461a      	mov	r2, r3
 80020aa:	2308      	movs	r3, #8
 80020ac:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	b2d2      	uxtb	r2, r2
 80020b6:	4611      	mov	r1, r2
 80020b8:	4618      	mov	r0, r3
 80020ba:	f003 fb50 	bl	800575e <USB_HC_Halt>
 80020be:	e040      	b.n	8002142 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	015a      	lsls	r2, r3, #5
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	4413      	add	r3, r2
 80020c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020d6:	d134      	bne.n	8002142 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	015a      	lsls	r2, r3, #5
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	4413      	add	r3, r2
 80020e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	68fa      	ldr	r2, [r7, #12]
 80020e8:	0151      	lsls	r1, r2, #5
 80020ea:	693a      	ldr	r2, [r7, #16]
 80020ec:	440a      	add	r2, r1
 80020ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020f2:	f043 0302 	orr.w	r3, r3, #2
 80020f6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	68fa      	ldr	r2, [r7, #12]
 80020fe:	b2d2      	uxtb	r2, r2
 8002100:	4611      	mov	r1, r2
 8002102:	4618      	mov	r0, r3
 8002104:	f003 fb2b 	bl	800575e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	015a      	lsls	r2, r3, #5
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	4413      	add	r3, r2
 8002110:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002114:	461a      	mov	r2, r3
 8002116:	2310      	movs	r3, #16
 8002118:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800211a:	6879      	ldr	r1, [r7, #4]
 800211c:	68fa      	ldr	r2, [r7, #12]
 800211e:	4613      	mov	r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	4413      	add	r3, r2
 8002124:	00db      	lsls	r3, r3, #3
 8002126:	440b      	add	r3, r1
 8002128:	335d      	adds	r3, #93	; 0x5d
 800212a:	2208      	movs	r2, #8
 800212c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	015a      	lsls	r2, r3, #5
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	4413      	add	r3, r2
 8002136:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800213a:	461a      	mov	r2, r3
 800213c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002140:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	015a      	lsls	r2, r3, #5
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	4413      	add	r3, r2
 800214a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002154:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002158:	d122      	bne.n	80021a0 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	015a      	lsls	r2, r3, #5
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	4413      	add	r3, r2
 8002162:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	68fa      	ldr	r2, [r7, #12]
 800216a:	0151      	lsls	r1, r2, #5
 800216c:	693a      	ldr	r2, [r7, #16]
 800216e:	440a      	add	r2, r1
 8002170:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002174:	f043 0302 	orr.w	r3, r3, #2
 8002178:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	b2d2      	uxtb	r2, r2
 8002182:	4611      	mov	r1, r2
 8002184:	4618      	mov	r0, r3
 8002186:	f003 faea 	bl	800575e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	015a      	lsls	r2, r3, #5
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	4413      	add	r3, r2
 8002192:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002196:	461a      	mov	r2, r3
 8002198:	f44f 7300 	mov.w	r3, #512	; 0x200
 800219c:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800219e:	e300      	b.n	80027a2 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	015a      	lsls	r2, r3, #5
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	4413      	add	r3, r2
 80021a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	f040 80fd 	bne.w	80023b2 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	691b      	ldr	r3, [r3, #16]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d01b      	beq.n	80021f8 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80021c0:	6879      	ldr	r1, [r7, #4]
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	4613      	mov	r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	4413      	add	r3, r2
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	440b      	add	r3, r1
 80021ce:	3348      	adds	r3, #72	; 0x48
 80021d0:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	0159      	lsls	r1, r3, #5
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	440b      	add	r3, r1
 80021da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021de:	691b      	ldr	r3, [r3, #16]
 80021e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80021e4:	1ad1      	subs	r1, r2, r3
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	4613      	mov	r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	00db      	lsls	r3, r3, #3
 80021f2:	4403      	add	r3, r0
 80021f4:	334c      	adds	r3, #76	; 0x4c
 80021f6:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80021f8:	6879      	ldr	r1, [r7, #4]
 80021fa:	68fa      	ldr	r2, [r7, #12]
 80021fc:	4613      	mov	r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	4413      	add	r3, r2
 8002202:	00db      	lsls	r3, r3, #3
 8002204:	440b      	add	r3, r1
 8002206:	335d      	adds	r3, #93	; 0x5d
 8002208:	2201      	movs	r2, #1
 800220a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800220c:	6879      	ldr	r1, [r7, #4]
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	4613      	mov	r3, r2
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	4413      	add	r3, r2
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	440b      	add	r3, r1
 800221a:	3358      	adds	r3, #88	; 0x58
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	015a      	lsls	r2, r3, #5
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	4413      	add	r3, r2
 8002228:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800222c:	461a      	mov	r2, r3
 800222e:	2301      	movs	r3, #1
 8002230:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002232:	6879      	ldr	r1, [r7, #4]
 8002234:	68fa      	ldr	r2, [r7, #12]
 8002236:	4613      	mov	r3, r2
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	4413      	add	r3, r2
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	440b      	add	r3, r1
 8002240:	333f      	adds	r3, #63	; 0x3f
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d00a      	beq.n	800225e <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002248:	6879      	ldr	r1, [r7, #4]
 800224a:	68fa      	ldr	r2, [r7, #12]
 800224c:	4613      	mov	r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	4413      	add	r3, r2
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	440b      	add	r3, r1
 8002256:	333f      	adds	r3, #63	; 0x3f
 8002258:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800225a:	2b02      	cmp	r3, #2
 800225c:	d121      	bne.n	80022a2 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	015a      	lsls	r2, r3, #5
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	4413      	add	r3, r2
 8002266:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	68fa      	ldr	r2, [r7, #12]
 800226e:	0151      	lsls	r1, r2, #5
 8002270:	693a      	ldr	r2, [r7, #16]
 8002272:	440a      	add	r2, r1
 8002274:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002278:	f043 0302 	orr.w	r3, r3, #2
 800227c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	b2d2      	uxtb	r2, r2
 8002286:	4611      	mov	r1, r2
 8002288:	4618      	mov	r0, r3
 800228a:	f003 fa68 	bl	800575e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	015a      	lsls	r2, r3, #5
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	4413      	add	r3, r2
 8002296:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800229a:	461a      	mov	r2, r3
 800229c:	2310      	movs	r3, #16
 800229e:	6093      	str	r3, [r2, #8]
 80022a0:	e070      	b.n	8002384 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80022a2:	6879      	ldr	r1, [r7, #4]
 80022a4:	68fa      	ldr	r2, [r7, #12]
 80022a6:	4613      	mov	r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	4413      	add	r3, r2
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	440b      	add	r3, r1
 80022b0:	333f      	adds	r3, #63	; 0x3f
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	2b03      	cmp	r3, #3
 80022b6:	d12a      	bne.n	800230e <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	015a      	lsls	r2, r3, #5
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	4413      	add	r3, r2
 80022c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	0151      	lsls	r1, r2, #5
 80022ca:	693a      	ldr	r2, [r7, #16]
 80022cc:	440a      	add	r2, r1
 80022ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80022d6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80022d8:	6879      	ldr	r1, [r7, #4]
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	4613      	mov	r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	4413      	add	r3, r2
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	440b      	add	r3, r1
 80022e6:	335c      	adds	r3, #92	; 0x5c
 80022e8:	2201      	movs	r2, #1
 80022ea:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	b2d8      	uxtb	r0, r3
 80022f0:	6879      	ldr	r1, [r7, #4]
 80022f2:	68fa      	ldr	r2, [r7, #12]
 80022f4:	4613      	mov	r3, r2
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	4413      	add	r3, r2
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	440b      	add	r3, r1
 80022fe:	335c      	adds	r3, #92	; 0x5c
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	461a      	mov	r2, r3
 8002304:	4601      	mov	r1, r0
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f005 fbcc 	bl	8007aa4 <HAL_HCD_HC_NotifyURBChange_Callback>
 800230c:	e03a      	b.n	8002384 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800230e:	6879      	ldr	r1, [r7, #4]
 8002310:	68fa      	ldr	r2, [r7, #12]
 8002312:	4613      	mov	r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	4413      	add	r3, r2
 8002318:	00db      	lsls	r3, r3, #3
 800231a:	440b      	add	r3, r1
 800231c:	333f      	adds	r3, #63	; 0x3f
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d12f      	bne.n	8002384 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002324:	6879      	ldr	r1, [r7, #4]
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	4613      	mov	r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	4413      	add	r3, r2
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	440b      	add	r3, r1
 8002332:	335c      	adds	r3, #92	; 0x5c
 8002334:	2201      	movs	r2, #1
 8002336:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002338:	6879      	ldr	r1, [r7, #4]
 800233a:	68fa      	ldr	r2, [r7, #12]
 800233c:	4613      	mov	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	4413      	add	r3, r2
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	440b      	add	r3, r1
 8002346:	3350      	adds	r3, #80	; 0x50
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	f083 0301 	eor.w	r3, r3, #1
 800234e:	b2d8      	uxtb	r0, r3
 8002350:	6879      	ldr	r1, [r7, #4]
 8002352:	68fa      	ldr	r2, [r7, #12]
 8002354:	4613      	mov	r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	4413      	add	r3, r2
 800235a:	00db      	lsls	r3, r3, #3
 800235c:	440b      	add	r3, r1
 800235e:	3350      	adds	r3, #80	; 0x50
 8002360:	4602      	mov	r2, r0
 8002362:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	b2d8      	uxtb	r0, r3
 8002368:	6879      	ldr	r1, [r7, #4]
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	4613      	mov	r3, r2
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	4413      	add	r3, r2
 8002372:	00db      	lsls	r3, r3, #3
 8002374:	440b      	add	r3, r1
 8002376:	335c      	adds	r3, #92	; 0x5c
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	461a      	mov	r2, r3
 800237c:	4601      	mov	r1, r0
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f005 fb90 	bl	8007aa4 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002384:	6879      	ldr	r1, [r7, #4]
 8002386:	68fa      	ldr	r2, [r7, #12]
 8002388:	4613      	mov	r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	4413      	add	r3, r2
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	440b      	add	r3, r1
 8002392:	3350      	adds	r3, #80	; 0x50
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	f083 0301 	eor.w	r3, r3, #1
 800239a:	b2d8      	uxtb	r0, r3
 800239c:	6879      	ldr	r1, [r7, #4]
 800239e:	68fa      	ldr	r2, [r7, #12]
 80023a0:	4613      	mov	r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	4413      	add	r3, r2
 80023a6:	00db      	lsls	r3, r3, #3
 80023a8:	440b      	add	r3, r1
 80023aa:	3350      	adds	r3, #80	; 0x50
 80023ac:	4602      	mov	r2, r0
 80023ae:	701a      	strb	r2, [r3, #0]
}
 80023b0:	e1f7      	b.n	80027a2 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	015a      	lsls	r2, r3, #5
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	4413      	add	r3, r2
 80023ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	f040 811a 	bne.w	80025fe <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	015a      	lsls	r2, r3, #5
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	4413      	add	r3, r2
 80023d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	68fa      	ldr	r2, [r7, #12]
 80023da:	0151      	lsls	r1, r2, #5
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	440a      	add	r2, r1
 80023e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023e4:	f023 0302 	bic.w	r3, r3, #2
 80023e8:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80023ea:	6879      	ldr	r1, [r7, #4]
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	4613      	mov	r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	4413      	add	r3, r2
 80023f4:	00db      	lsls	r3, r3, #3
 80023f6:	440b      	add	r3, r1
 80023f8:	335d      	adds	r3, #93	; 0x5d
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d10a      	bne.n	8002416 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002400:	6879      	ldr	r1, [r7, #4]
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	4613      	mov	r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	4413      	add	r3, r2
 800240a:	00db      	lsls	r3, r3, #3
 800240c:	440b      	add	r3, r1
 800240e:	335c      	adds	r3, #92	; 0x5c
 8002410:	2201      	movs	r2, #1
 8002412:	701a      	strb	r2, [r3, #0]
 8002414:	e0d9      	b.n	80025ca <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002416:	6879      	ldr	r1, [r7, #4]
 8002418:	68fa      	ldr	r2, [r7, #12]
 800241a:	4613      	mov	r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	4413      	add	r3, r2
 8002420:	00db      	lsls	r3, r3, #3
 8002422:	440b      	add	r3, r1
 8002424:	335d      	adds	r3, #93	; 0x5d
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	2b05      	cmp	r3, #5
 800242a:	d10a      	bne.n	8002442 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800242c:	6879      	ldr	r1, [r7, #4]
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	4613      	mov	r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	4413      	add	r3, r2
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	440b      	add	r3, r1
 800243a:	335c      	adds	r3, #92	; 0x5c
 800243c:	2205      	movs	r2, #5
 800243e:	701a      	strb	r2, [r3, #0]
 8002440:	e0c3      	b.n	80025ca <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002442:	6879      	ldr	r1, [r7, #4]
 8002444:	68fa      	ldr	r2, [r7, #12]
 8002446:	4613      	mov	r3, r2
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	4413      	add	r3, r2
 800244c:	00db      	lsls	r3, r3, #3
 800244e:	440b      	add	r3, r1
 8002450:	335d      	adds	r3, #93	; 0x5d
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	2b06      	cmp	r3, #6
 8002456:	d00a      	beq.n	800246e <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002458:	6879      	ldr	r1, [r7, #4]
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	4613      	mov	r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	4413      	add	r3, r2
 8002462:	00db      	lsls	r3, r3, #3
 8002464:	440b      	add	r3, r1
 8002466:	335d      	adds	r3, #93	; 0x5d
 8002468:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800246a:	2b08      	cmp	r3, #8
 800246c:	d156      	bne.n	800251c <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 800246e:	6879      	ldr	r1, [r7, #4]
 8002470:	68fa      	ldr	r2, [r7, #12]
 8002472:	4613      	mov	r3, r2
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	4413      	add	r3, r2
 8002478:	00db      	lsls	r3, r3, #3
 800247a:	440b      	add	r3, r1
 800247c:	3358      	adds	r3, #88	; 0x58
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	1c59      	adds	r1, r3, #1
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	68fa      	ldr	r2, [r7, #12]
 8002486:	4613      	mov	r3, r2
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	4413      	add	r3, r2
 800248c:	00db      	lsls	r3, r3, #3
 800248e:	4403      	add	r3, r0
 8002490:	3358      	adds	r3, #88	; 0x58
 8002492:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002494:	6879      	ldr	r1, [r7, #4]
 8002496:	68fa      	ldr	r2, [r7, #12]
 8002498:	4613      	mov	r3, r2
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	4413      	add	r3, r2
 800249e:	00db      	lsls	r3, r3, #3
 80024a0:	440b      	add	r3, r1
 80024a2:	3358      	adds	r3, #88	; 0x58
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2b03      	cmp	r3, #3
 80024a8:	d914      	bls.n	80024d4 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80024aa:	6879      	ldr	r1, [r7, #4]
 80024ac:	68fa      	ldr	r2, [r7, #12]
 80024ae:	4613      	mov	r3, r2
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	4413      	add	r3, r2
 80024b4:	00db      	lsls	r3, r3, #3
 80024b6:	440b      	add	r3, r1
 80024b8:	3358      	adds	r3, #88	; 0x58
 80024ba:	2200      	movs	r2, #0
 80024bc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80024be:	6879      	ldr	r1, [r7, #4]
 80024c0:	68fa      	ldr	r2, [r7, #12]
 80024c2:	4613      	mov	r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	4413      	add	r3, r2
 80024c8:	00db      	lsls	r3, r3, #3
 80024ca:	440b      	add	r3, r1
 80024cc:	335c      	adds	r3, #92	; 0x5c
 80024ce:	2204      	movs	r2, #4
 80024d0:	701a      	strb	r2, [r3, #0]
 80024d2:	e009      	b.n	80024e8 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80024d4:	6879      	ldr	r1, [r7, #4]
 80024d6:	68fa      	ldr	r2, [r7, #12]
 80024d8:	4613      	mov	r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	4413      	add	r3, r2
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	440b      	add	r3, r1
 80024e2:	335c      	adds	r3, #92	; 0x5c
 80024e4:	2202      	movs	r2, #2
 80024e6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	015a      	lsls	r2, r3, #5
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	4413      	add	r3, r2
 80024f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80024fe:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002506:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	015a      	lsls	r2, r3, #5
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	4413      	add	r3, r2
 8002510:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002514:	461a      	mov	r2, r3
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	6013      	str	r3, [r2, #0]
 800251a:	e056      	b.n	80025ca <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800251c:	6879      	ldr	r1, [r7, #4]
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	4613      	mov	r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	4413      	add	r3, r2
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	440b      	add	r3, r1
 800252a:	335d      	adds	r3, #93	; 0x5d
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	2b03      	cmp	r3, #3
 8002530:	d123      	bne.n	800257a <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002532:	6879      	ldr	r1, [r7, #4]
 8002534:	68fa      	ldr	r2, [r7, #12]
 8002536:	4613      	mov	r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	4413      	add	r3, r2
 800253c:	00db      	lsls	r3, r3, #3
 800253e:	440b      	add	r3, r1
 8002540:	335c      	adds	r3, #92	; 0x5c
 8002542:	2202      	movs	r2, #2
 8002544:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	015a      	lsls	r2, r3, #5
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	4413      	add	r3, r2
 800254e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800255c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002564:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	015a      	lsls	r2, r3, #5
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	4413      	add	r3, r2
 800256e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002572:	461a      	mov	r2, r3
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	6013      	str	r3, [r2, #0]
 8002578:	e027      	b.n	80025ca <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800257a:	6879      	ldr	r1, [r7, #4]
 800257c:	68fa      	ldr	r2, [r7, #12]
 800257e:	4613      	mov	r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	4413      	add	r3, r2
 8002584:	00db      	lsls	r3, r3, #3
 8002586:	440b      	add	r3, r1
 8002588:	335d      	adds	r3, #93	; 0x5d
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	2b07      	cmp	r3, #7
 800258e:	d11c      	bne.n	80025ca <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8002590:	6879      	ldr	r1, [r7, #4]
 8002592:	68fa      	ldr	r2, [r7, #12]
 8002594:	4613      	mov	r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	4413      	add	r3, r2
 800259a:	00db      	lsls	r3, r3, #3
 800259c:	440b      	add	r3, r1
 800259e:	3358      	adds	r3, #88	; 0x58
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	1c59      	adds	r1, r3, #1
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	68fa      	ldr	r2, [r7, #12]
 80025a8:	4613      	mov	r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	4413      	add	r3, r2
 80025ae:	00db      	lsls	r3, r3, #3
 80025b0:	4403      	add	r3, r0
 80025b2:	3358      	adds	r3, #88	; 0x58
 80025b4:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80025b6:	6879      	ldr	r1, [r7, #4]
 80025b8:	68fa      	ldr	r2, [r7, #12]
 80025ba:	4613      	mov	r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	4413      	add	r3, r2
 80025c0:	00db      	lsls	r3, r3, #3
 80025c2:	440b      	add	r3, r1
 80025c4:	335c      	adds	r3, #92	; 0x5c
 80025c6:	2204      	movs	r2, #4
 80025c8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	015a      	lsls	r2, r3, #5
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	4413      	add	r3, r2
 80025d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d6:	461a      	mov	r2, r3
 80025d8:	2302      	movs	r3, #2
 80025da:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	b2d8      	uxtb	r0, r3
 80025e0:	6879      	ldr	r1, [r7, #4]
 80025e2:	68fa      	ldr	r2, [r7, #12]
 80025e4:	4613      	mov	r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	4413      	add	r3, r2
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	440b      	add	r3, r1
 80025ee:	335c      	adds	r3, #92	; 0x5c
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	461a      	mov	r2, r3
 80025f4:	4601      	mov	r1, r0
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f005 fa54 	bl	8007aa4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80025fc:	e0d1      	b.n	80027a2 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	015a      	lsls	r2, r3, #5
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	4413      	add	r3, r2
 8002606:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002610:	2b80      	cmp	r3, #128	; 0x80
 8002612:	d13e      	bne.n	8002692 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	015a      	lsls	r2, r3, #5
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	4413      	add	r3, r2
 800261c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	68fa      	ldr	r2, [r7, #12]
 8002624:	0151      	lsls	r1, r2, #5
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	440a      	add	r2, r1
 800262a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800262e:	f043 0302 	orr.w	r3, r3, #2
 8002632:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002634:	6879      	ldr	r1, [r7, #4]
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	4613      	mov	r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	4413      	add	r3, r2
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	440b      	add	r3, r1
 8002642:	3358      	adds	r3, #88	; 0x58
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	1c59      	adds	r1, r3, #1
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	4613      	mov	r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	4413      	add	r3, r2
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	4403      	add	r3, r0
 8002656:	3358      	adds	r3, #88	; 0x58
 8002658:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800265a:	6879      	ldr	r1, [r7, #4]
 800265c:	68fa      	ldr	r2, [r7, #12]
 800265e:	4613      	mov	r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	4413      	add	r3, r2
 8002664:	00db      	lsls	r3, r3, #3
 8002666:	440b      	add	r3, r1
 8002668:	335d      	adds	r3, #93	; 0x5d
 800266a:	2206      	movs	r2, #6
 800266c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68fa      	ldr	r2, [r7, #12]
 8002674:	b2d2      	uxtb	r2, r2
 8002676:	4611      	mov	r1, r2
 8002678:	4618      	mov	r0, r3
 800267a:	f003 f870 	bl	800575e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	015a      	lsls	r2, r3, #5
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	4413      	add	r3, r2
 8002686:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800268a:	461a      	mov	r2, r3
 800268c:	2380      	movs	r3, #128	; 0x80
 800268e:	6093      	str	r3, [r2, #8]
}
 8002690:	e087      	b.n	80027a2 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	015a      	lsls	r2, r3, #5
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	4413      	add	r3, r2
 800269a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f003 0310 	and.w	r3, r3, #16
 80026a4:	2b10      	cmp	r3, #16
 80026a6:	d17c      	bne.n	80027a2 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80026a8:	6879      	ldr	r1, [r7, #4]
 80026aa:	68fa      	ldr	r2, [r7, #12]
 80026ac:	4613      	mov	r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	4413      	add	r3, r2
 80026b2:	00db      	lsls	r3, r3, #3
 80026b4:	440b      	add	r3, r1
 80026b6:	333f      	adds	r3, #63	; 0x3f
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	2b03      	cmp	r3, #3
 80026bc:	d122      	bne.n	8002704 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80026be:	6879      	ldr	r1, [r7, #4]
 80026c0:	68fa      	ldr	r2, [r7, #12]
 80026c2:	4613      	mov	r3, r2
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	4413      	add	r3, r2
 80026c8:	00db      	lsls	r3, r3, #3
 80026ca:	440b      	add	r3, r1
 80026cc:	3358      	adds	r3, #88	; 0x58
 80026ce:	2200      	movs	r2, #0
 80026d0:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	015a      	lsls	r2, r3, #5
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	4413      	add	r3, r2
 80026da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	68fa      	ldr	r2, [r7, #12]
 80026e2:	0151      	lsls	r1, r2, #5
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	440a      	add	r2, r1
 80026e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026ec:	f043 0302 	orr.w	r3, r3, #2
 80026f0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68fa      	ldr	r2, [r7, #12]
 80026f8:	b2d2      	uxtb	r2, r2
 80026fa:	4611      	mov	r1, r2
 80026fc:	4618      	mov	r0, r3
 80026fe:	f003 f82e 	bl	800575e <USB_HC_Halt>
 8002702:	e045      	b.n	8002790 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002704:	6879      	ldr	r1, [r7, #4]
 8002706:	68fa      	ldr	r2, [r7, #12]
 8002708:	4613      	mov	r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	4413      	add	r3, r2
 800270e:	00db      	lsls	r3, r3, #3
 8002710:	440b      	add	r3, r1
 8002712:	333f      	adds	r3, #63	; 0x3f
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d00a      	beq.n	8002730 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800271a:	6879      	ldr	r1, [r7, #4]
 800271c:	68fa      	ldr	r2, [r7, #12]
 800271e:	4613      	mov	r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	4413      	add	r3, r2
 8002724:	00db      	lsls	r3, r3, #3
 8002726:	440b      	add	r3, r1
 8002728:	333f      	adds	r3, #63	; 0x3f
 800272a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800272c:	2b02      	cmp	r3, #2
 800272e:	d12f      	bne.n	8002790 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002730:	6879      	ldr	r1, [r7, #4]
 8002732:	68fa      	ldr	r2, [r7, #12]
 8002734:	4613      	mov	r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	4413      	add	r3, r2
 800273a:	00db      	lsls	r3, r3, #3
 800273c:	440b      	add	r3, r1
 800273e:	3358      	adds	r3, #88	; 0x58
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	691b      	ldr	r3, [r3, #16]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d121      	bne.n	8002790 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 800274c:	6879      	ldr	r1, [r7, #4]
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	4613      	mov	r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	4413      	add	r3, r2
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	440b      	add	r3, r1
 800275a:	335d      	adds	r3, #93	; 0x5d
 800275c:	2203      	movs	r2, #3
 800275e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	015a      	lsls	r2, r3, #5
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	4413      	add	r3, r2
 8002768:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	68fa      	ldr	r2, [r7, #12]
 8002770:	0151      	lsls	r1, r2, #5
 8002772:	693a      	ldr	r2, [r7, #16]
 8002774:	440a      	add	r2, r1
 8002776:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800277a:	f043 0302 	orr.w	r3, r3, #2
 800277e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	b2d2      	uxtb	r2, r2
 8002788:	4611      	mov	r1, r2
 800278a:	4618      	mov	r0, r3
 800278c:	f002 ffe7 	bl	800575e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	015a      	lsls	r2, r3, #5
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	4413      	add	r3, r2
 8002798:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800279c:	461a      	mov	r2, r3
 800279e:	2310      	movs	r3, #16
 80027a0:	6093      	str	r3, [r2, #8]
}
 80027a2:	bf00      	nop
 80027a4:	3718      	adds	r7, #24
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}

080027aa <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b086      	sub	sp, #24
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]
 80027b2:	460b      	mov	r3, r1
 80027b4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80027c0:	78fb      	ldrb	r3, [r7, #3]
 80027c2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	015a      	lsls	r2, r3, #5
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	4413      	add	r3, r2
 80027cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f003 0304 	and.w	r3, r3, #4
 80027d6:	2b04      	cmp	r3, #4
 80027d8:	d119      	bne.n	800280e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	015a      	lsls	r2, r3, #5
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	4413      	add	r3, r2
 80027e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e6:	461a      	mov	r2, r3
 80027e8:	2304      	movs	r3, #4
 80027ea:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	015a      	lsls	r2, r3, #5
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	4413      	add	r3, r2
 80027f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	0151      	lsls	r1, r2, #5
 80027fe:	693a      	ldr	r2, [r7, #16]
 8002800:	440a      	add	r2, r1
 8002802:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002806:	f043 0302 	orr.w	r3, r3, #2
 800280a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800280c:	e33e      	b.n	8002e8c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	015a      	lsls	r2, r3, #5
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	4413      	add	r3, r2
 8002816:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f003 0320 	and.w	r3, r3, #32
 8002820:	2b20      	cmp	r3, #32
 8002822:	d141      	bne.n	80028a8 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	015a      	lsls	r2, r3, #5
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	4413      	add	r3, r2
 800282c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002830:	461a      	mov	r2, r3
 8002832:	2320      	movs	r3, #32
 8002834:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002836:	6879      	ldr	r1, [r7, #4]
 8002838:	68fa      	ldr	r2, [r7, #12]
 800283a:	4613      	mov	r3, r2
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	4413      	add	r3, r2
 8002840:	00db      	lsls	r3, r3, #3
 8002842:	440b      	add	r3, r1
 8002844:	333d      	adds	r3, #61	; 0x3d
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	2b01      	cmp	r3, #1
 800284a:	f040 831f 	bne.w	8002e8c <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 800284e:	6879      	ldr	r1, [r7, #4]
 8002850:	68fa      	ldr	r2, [r7, #12]
 8002852:	4613      	mov	r3, r2
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	4413      	add	r3, r2
 8002858:	00db      	lsls	r3, r3, #3
 800285a:	440b      	add	r3, r1
 800285c:	333d      	adds	r3, #61	; 0x3d
 800285e:	2200      	movs	r2, #0
 8002860:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002862:	6879      	ldr	r1, [r7, #4]
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	4613      	mov	r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	4413      	add	r3, r2
 800286c:	00db      	lsls	r3, r3, #3
 800286e:	440b      	add	r3, r1
 8002870:	335c      	adds	r3, #92	; 0x5c
 8002872:	2202      	movs	r2, #2
 8002874:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	015a      	lsls	r2, r3, #5
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	4413      	add	r3, r2
 800287e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	0151      	lsls	r1, r2, #5
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	440a      	add	r2, r1
 800288c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002890:	f043 0302 	orr.w	r3, r3, #2
 8002894:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	68fa      	ldr	r2, [r7, #12]
 800289c:	b2d2      	uxtb	r2, r2
 800289e:	4611      	mov	r1, r2
 80028a0:	4618      	mov	r0, r3
 80028a2:	f002 ff5c 	bl	800575e <USB_HC_Halt>
}
 80028a6:	e2f1      	b.n	8002e8c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	015a      	lsls	r2, r3, #5
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	4413      	add	r3, r2
 80028b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ba:	2b40      	cmp	r3, #64	; 0x40
 80028bc:	d13f      	bne.n	800293e <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80028be:	6879      	ldr	r1, [r7, #4]
 80028c0:	68fa      	ldr	r2, [r7, #12]
 80028c2:	4613      	mov	r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	4413      	add	r3, r2
 80028c8:	00db      	lsls	r3, r3, #3
 80028ca:	440b      	add	r3, r1
 80028cc:	335d      	adds	r3, #93	; 0x5d
 80028ce:	2204      	movs	r2, #4
 80028d0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80028d2:	6879      	ldr	r1, [r7, #4]
 80028d4:	68fa      	ldr	r2, [r7, #12]
 80028d6:	4613      	mov	r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	4413      	add	r3, r2
 80028dc:	00db      	lsls	r3, r3, #3
 80028de:	440b      	add	r3, r1
 80028e0:	333d      	adds	r3, #61	; 0x3d
 80028e2:	2201      	movs	r2, #1
 80028e4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80028e6:	6879      	ldr	r1, [r7, #4]
 80028e8:	68fa      	ldr	r2, [r7, #12]
 80028ea:	4613      	mov	r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	4413      	add	r3, r2
 80028f0:	00db      	lsls	r3, r3, #3
 80028f2:	440b      	add	r3, r1
 80028f4:	3358      	adds	r3, #88	; 0x58
 80028f6:	2200      	movs	r2, #0
 80028f8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	015a      	lsls	r2, r3, #5
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	4413      	add	r3, r2
 8002902:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	68fa      	ldr	r2, [r7, #12]
 800290a:	0151      	lsls	r1, r2, #5
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	440a      	add	r2, r1
 8002910:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002914:	f043 0302 	orr.w	r3, r3, #2
 8002918:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	68fa      	ldr	r2, [r7, #12]
 8002920:	b2d2      	uxtb	r2, r2
 8002922:	4611      	mov	r1, r2
 8002924:	4618      	mov	r0, r3
 8002926:	f002 ff1a 	bl	800575e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	015a      	lsls	r2, r3, #5
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	4413      	add	r3, r2
 8002932:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002936:	461a      	mov	r2, r3
 8002938:	2340      	movs	r3, #64	; 0x40
 800293a:	6093      	str	r3, [r2, #8]
}
 800293c:	e2a6      	b.n	8002e8c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	015a      	lsls	r2, r3, #5
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	4413      	add	r3, r2
 8002946:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002950:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002954:	d122      	bne.n	800299c <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	015a      	lsls	r2, r3, #5
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	4413      	add	r3, r2
 800295e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	0151      	lsls	r1, r2, #5
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	440a      	add	r2, r1
 800296c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002970:	f043 0302 	orr.w	r3, r3, #2
 8002974:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	b2d2      	uxtb	r2, r2
 800297e:	4611      	mov	r1, r2
 8002980:	4618      	mov	r0, r3
 8002982:	f002 feec 	bl	800575e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	015a      	lsls	r2, r3, #5
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	4413      	add	r3, r2
 800298e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002992:	461a      	mov	r2, r3
 8002994:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002998:	6093      	str	r3, [r2, #8]
}
 800299a:	e277      	b.n	8002e8c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	015a      	lsls	r2, r3, #5
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	4413      	add	r3, r2
 80029a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d135      	bne.n	8002a1e <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80029b2:	6879      	ldr	r1, [r7, #4]
 80029b4:	68fa      	ldr	r2, [r7, #12]
 80029b6:	4613      	mov	r3, r2
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	4413      	add	r3, r2
 80029bc:	00db      	lsls	r3, r3, #3
 80029be:	440b      	add	r3, r1
 80029c0:	3358      	adds	r3, #88	; 0x58
 80029c2:	2200      	movs	r2, #0
 80029c4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	015a      	lsls	r2, r3, #5
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	4413      	add	r3, r2
 80029ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	68fa      	ldr	r2, [r7, #12]
 80029d6:	0151      	lsls	r1, r2, #5
 80029d8:	693a      	ldr	r2, [r7, #16]
 80029da:	440a      	add	r2, r1
 80029dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029e0:	f043 0302 	orr.w	r3, r3, #2
 80029e4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	b2d2      	uxtb	r2, r2
 80029ee:	4611      	mov	r1, r2
 80029f0:	4618      	mov	r0, r3
 80029f2:	f002 feb4 	bl	800575e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	015a      	lsls	r2, r3, #5
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	4413      	add	r3, r2
 80029fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a02:	461a      	mov	r2, r3
 8002a04:	2301      	movs	r3, #1
 8002a06:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002a08:	6879      	ldr	r1, [r7, #4]
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	4413      	add	r3, r2
 8002a12:	00db      	lsls	r3, r3, #3
 8002a14:	440b      	add	r3, r1
 8002a16:	335d      	adds	r3, #93	; 0x5d
 8002a18:	2201      	movs	r2, #1
 8002a1a:	701a      	strb	r2, [r3, #0]
}
 8002a1c:	e236      	b.n	8002e8c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	015a      	lsls	r2, r3, #5
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	4413      	add	r3, r2
 8002a26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f003 0308 	and.w	r3, r3, #8
 8002a30:	2b08      	cmp	r3, #8
 8002a32:	d12b      	bne.n	8002a8c <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	015a      	lsls	r2, r3, #5
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a40:	461a      	mov	r2, r3
 8002a42:	2308      	movs	r3, #8
 8002a44:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	015a      	lsls	r2, r3, #5
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	68fa      	ldr	r2, [r7, #12]
 8002a56:	0151      	lsls	r1, r2, #5
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	440a      	add	r2, r1
 8002a5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a60:	f043 0302 	orr.w	r3, r3, #2
 8002a64:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	b2d2      	uxtb	r2, r2
 8002a6e:	4611      	mov	r1, r2
 8002a70:	4618      	mov	r0, r3
 8002a72:	f002 fe74 	bl	800575e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002a76:	6879      	ldr	r1, [r7, #4]
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	4413      	add	r3, r2
 8002a80:	00db      	lsls	r3, r3, #3
 8002a82:	440b      	add	r3, r1
 8002a84:	335d      	adds	r3, #93	; 0x5d
 8002a86:	2205      	movs	r2, #5
 8002a88:	701a      	strb	r2, [r3, #0]
}
 8002a8a:	e1ff      	b.n	8002e8c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	015a      	lsls	r2, r3, #5
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	4413      	add	r3, r2
 8002a94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f003 0310 	and.w	r3, r3, #16
 8002a9e:	2b10      	cmp	r3, #16
 8002aa0:	d155      	bne.n	8002b4e <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002aa2:	6879      	ldr	r1, [r7, #4]
 8002aa4:	68fa      	ldr	r2, [r7, #12]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	4413      	add	r3, r2
 8002aac:	00db      	lsls	r3, r3, #3
 8002aae:	440b      	add	r3, r1
 8002ab0:	3358      	adds	r3, #88	; 0x58
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002ab6:	6879      	ldr	r1, [r7, #4]
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	4613      	mov	r3, r2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	4413      	add	r3, r2
 8002ac0:	00db      	lsls	r3, r3, #3
 8002ac2:	440b      	add	r3, r1
 8002ac4:	335d      	adds	r3, #93	; 0x5d
 8002ac6:	2203      	movs	r2, #3
 8002ac8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002aca:	6879      	ldr	r1, [r7, #4]
 8002acc:	68fa      	ldr	r2, [r7, #12]
 8002ace:	4613      	mov	r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	4413      	add	r3, r2
 8002ad4:	00db      	lsls	r3, r3, #3
 8002ad6:	440b      	add	r3, r1
 8002ad8:	333d      	adds	r3, #61	; 0x3d
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d114      	bne.n	8002b0a <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8002ae0:	6879      	ldr	r1, [r7, #4]
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	4413      	add	r3, r2
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	440b      	add	r3, r1
 8002aee:	333c      	adds	r3, #60	; 0x3c
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d109      	bne.n	8002b0a <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8002af6:	6879      	ldr	r1, [r7, #4]
 8002af8:	68fa      	ldr	r2, [r7, #12]
 8002afa:	4613      	mov	r3, r2
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	4413      	add	r3, r2
 8002b00:	00db      	lsls	r3, r3, #3
 8002b02:	440b      	add	r3, r1
 8002b04:	333d      	adds	r3, #61	; 0x3d
 8002b06:	2201      	movs	r2, #1
 8002b08:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	015a      	lsls	r2, r3, #5
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	4413      	add	r3, r2
 8002b12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	68fa      	ldr	r2, [r7, #12]
 8002b1a:	0151      	lsls	r1, r2, #5
 8002b1c:	693a      	ldr	r2, [r7, #16]
 8002b1e:	440a      	add	r2, r1
 8002b20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b24:	f043 0302 	orr.w	r3, r3, #2
 8002b28:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	b2d2      	uxtb	r2, r2
 8002b32:	4611      	mov	r1, r2
 8002b34:	4618      	mov	r0, r3
 8002b36:	f002 fe12 	bl	800575e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	015a      	lsls	r2, r3, #5
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	4413      	add	r3, r2
 8002b42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b46:	461a      	mov	r2, r3
 8002b48:	2310      	movs	r3, #16
 8002b4a:	6093      	str	r3, [r2, #8]
}
 8002b4c:	e19e      	b.n	8002e8c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	015a      	lsls	r2, r3, #5
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	4413      	add	r3, r2
 8002b56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b60:	2b80      	cmp	r3, #128	; 0x80
 8002b62:	d12b      	bne.n	8002bbc <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	015a      	lsls	r2, r3, #5
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	68fa      	ldr	r2, [r7, #12]
 8002b74:	0151      	lsls	r1, r2, #5
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	440a      	add	r2, r1
 8002b7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b7e:	f043 0302 	orr.w	r3, r3, #2
 8002b82:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	68fa      	ldr	r2, [r7, #12]
 8002b8a:	b2d2      	uxtb	r2, r2
 8002b8c:	4611      	mov	r1, r2
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f002 fde5 	bl	800575e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002b94:	6879      	ldr	r1, [r7, #4]
 8002b96:	68fa      	ldr	r2, [r7, #12]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	4413      	add	r3, r2
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	440b      	add	r3, r1
 8002ba2:	335d      	adds	r3, #93	; 0x5d
 8002ba4:	2206      	movs	r2, #6
 8002ba6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	015a      	lsls	r2, r3, #5
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	4413      	add	r3, r2
 8002bb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	2380      	movs	r3, #128	; 0x80
 8002bb8:	6093      	str	r3, [r2, #8]
}
 8002bba:	e167      	b.n	8002e8c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	015a      	lsls	r2, r3, #5
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bd2:	d135      	bne.n	8002c40 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	015a      	lsls	r2, r3, #5
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	4413      	add	r3, r2
 8002bdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	0151      	lsls	r1, r2, #5
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	440a      	add	r2, r1
 8002bea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bee:	f043 0302 	orr.w	r3, r3, #2
 8002bf2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	b2d2      	uxtb	r2, r2
 8002bfc:	4611      	mov	r1, r2
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f002 fdad 	bl	800575e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	015a      	lsls	r2, r3, #5
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c10:	461a      	mov	r2, r3
 8002c12:	2310      	movs	r3, #16
 8002c14:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	015a      	lsls	r2, r3, #5
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c22:	461a      	mov	r2, r3
 8002c24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c28:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002c2a:	6879      	ldr	r1, [r7, #4]
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	4413      	add	r3, r2
 8002c34:	00db      	lsls	r3, r3, #3
 8002c36:	440b      	add	r3, r1
 8002c38:	335d      	adds	r3, #93	; 0x5d
 8002c3a:	2208      	movs	r2, #8
 8002c3c:	701a      	strb	r2, [r3, #0]
}
 8002c3e:	e125      	b.n	8002e8c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	015a      	lsls	r2, r3, #5
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	4413      	add	r3, r2
 8002c48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	f040 811a 	bne.w	8002e8c <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	015a      	lsls	r2, r3, #5
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	4413      	add	r3, r2
 8002c60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	0151      	lsls	r1, r2, #5
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	440a      	add	r2, r1
 8002c6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c72:	f023 0302 	bic.w	r3, r3, #2
 8002c76:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002c78:	6879      	ldr	r1, [r7, #4]
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	4413      	add	r3, r2
 8002c82:	00db      	lsls	r3, r3, #3
 8002c84:	440b      	add	r3, r1
 8002c86:	335d      	adds	r3, #93	; 0x5d
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d137      	bne.n	8002cfe <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002c8e:	6879      	ldr	r1, [r7, #4]
 8002c90:	68fa      	ldr	r2, [r7, #12]
 8002c92:	4613      	mov	r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	4413      	add	r3, r2
 8002c98:	00db      	lsls	r3, r3, #3
 8002c9a:	440b      	add	r3, r1
 8002c9c:	335c      	adds	r3, #92	; 0x5c
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002ca2:	6879      	ldr	r1, [r7, #4]
 8002ca4:	68fa      	ldr	r2, [r7, #12]
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	4413      	add	r3, r2
 8002cac:	00db      	lsls	r3, r3, #3
 8002cae:	440b      	add	r3, r1
 8002cb0:	333f      	adds	r3, #63	; 0x3f
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d00b      	beq.n	8002cd0 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002cb8:	6879      	ldr	r1, [r7, #4]
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	4413      	add	r3, r2
 8002cc2:	00db      	lsls	r3, r3, #3
 8002cc4:	440b      	add	r3, r1
 8002cc6:	333f      	adds	r3, #63	; 0x3f
 8002cc8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002cca:	2b03      	cmp	r3, #3
 8002ccc:	f040 80c5 	bne.w	8002e5a <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002cd0:	6879      	ldr	r1, [r7, #4]
 8002cd2:	68fa      	ldr	r2, [r7, #12]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	4413      	add	r3, r2
 8002cda:	00db      	lsls	r3, r3, #3
 8002cdc:	440b      	add	r3, r1
 8002cde:	3351      	adds	r3, #81	; 0x51
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	f083 0301 	eor.w	r3, r3, #1
 8002ce6:	b2d8      	uxtb	r0, r3
 8002ce8:	6879      	ldr	r1, [r7, #4]
 8002cea:	68fa      	ldr	r2, [r7, #12]
 8002cec:	4613      	mov	r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	4413      	add	r3, r2
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	440b      	add	r3, r1
 8002cf6:	3351      	adds	r3, #81	; 0x51
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	701a      	strb	r2, [r3, #0]
 8002cfc:	e0ad      	b.n	8002e5a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002cfe:	6879      	ldr	r1, [r7, #4]
 8002d00:	68fa      	ldr	r2, [r7, #12]
 8002d02:	4613      	mov	r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	4413      	add	r3, r2
 8002d08:	00db      	lsls	r3, r3, #3
 8002d0a:	440b      	add	r3, r1
 8002d0c:	335d      	adds	r3, #93	; 0x5d
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	2b03      	cmp	r3, #3
 8002d12:	d10a      	bne.n	8002d2a <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d14:	6879      	ldr	r1, [r7, #4]
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	4413      	add	r3, r2
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	440b      	add	r3, r1
 8002d22:	335c      	adds	r3, #92	; 0x5c
 8002d24:	2202      	movs	r2, #2
 8002d26:	701a      	strb	r2, [r3, #0]
 8002d28:	e097      	b.n	8002e5a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002d2a:	6879      	ldr	r1, [r7, #4]
 8002d2c:	68fa      	ldr	r2, [r7, #12]
 8002d2e:	4613      	mov	r3, r2
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	4413      	add	r3, r2
 8002d34:	00db      	lsls	r3, r3, #3
 8002d36:	440b      	add	r3, r1
 8002d38:	335d      	adds	r3, #93	; 0x5d
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	2b04      	cmp	r3, #4
 8002d3e:	d10a      	bne.n	8002d56 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002d40:	6879      	ldr	r1, [r7, #4]
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	4613      	mov	r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	4413      	add	r3, r2
 8002d4a:	00db      	lsls	r3, r3, #3
 8002d4c:	440b      	add	r3, r1
 8002d4e:	335c      	adds	r3, #92	; 0x5c
 8002d50:	2202      	movs	r2, #2
 8002d52:	701a      	strb	r2, [r3, #0]
 8002d54:	e081      	b.n	8002e5a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002d56:	6879      	ldr	r1, [r7, #4]
 8002d58:	68fa      	ldr	r2, [r7, #12]
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	4413      	add	r3, r2
 8002d60:	00db      	lsls	r3, r3, #3
 8002d62:	440b      	add	r3, r1
 8002d64:	335d      	adds	r3, #93	; 0x5d
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	2b05      	cmp	r3, #5
 8002d6a:	d10a      	bne.n	8002d82 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002d6c:	6879      	ldr	r1, [r7, #4]
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	4613      	mov	r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	4413      	add	r3, r2
 8002d76:	00db      	lsls	r3, r3, #3
 8002d78:	440b      	add	r3, r1
 8002d7a:	335c      	adds	r3, #92	; 0x5c
 8002d7c:	2205      	movs	r2, #5
 8002d7e:	701a      	strb	r2, [r3, #0]
 8002d80:	e06b      	b.n	8002e5a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d82:	6879      	ldr	r1, [r7, #4]
 8002d84:	68fa      	ldr	r2, [r7, #12]
 8002d86:	4613      	mov	r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	4413      	add	r3, r2
 8002d8c:	00db      	lsls	r3, r3, #3
 8002d8e:	440b      	add	r3, r1
 8002d90:	335d      	adds	r3, #93	; 0x5d
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	2b06      	cmp	r3, #6
 8002d96:	d00a      	beq.n	8002dae <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002d98:	6879      	ldr	r1, [r7, #4]
 8002d9a:	68fa      	ldr	r2, [r7, #12]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	4413      	add	r3, r2
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	440b      	add	r3, r1
 8002da6:	335d      	adds	r3, #93	; 0x5d
 8002da8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002daa:	2b08      	cmp	r3, #8
 8002dac:	d155      	bne.n	8002e5a <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8002dae:	6879      	ldr	r1, [r7, #4]
 8002db0:	68fa      	ldr	r2, [r7, #12]
 8002db2:	4613      	mov	r3, r2
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	4413      	add	r3, r2
 8002db8:	00db      	lsls	r3, r3, #3
 8002dba:	440b      	add	r3, r1
 8002dbc:	3358      	adds	r3, #88	; 0x58
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	1c59      	adds	r1, r3, #1
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	4413      	add	r3, r2
 8002dcc:	00db      	lsls	r3, r3, #3
 8002dce:	4403      	add	r3, r0
 8002dd0:	3358      	adds	r3, #88	; 0x58
 8002dd2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002dd4:	6879      	ldr	r1, [r7, #4]
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	4413      	add	r3, r2
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	440b      	add	r3, r1
 8002de2:	3358      	adds	r3, #88	; 0x58
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2b03      	cmp	r3, #3
 8002de8:	d914      	bls.n	8002e14 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002dea:	6879      	ldr	r1, [r7, #4]
 8002dec:	68fa      	ldr	r2, [r7, #12]
 8002dee:	4613      	mov	r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	4413      	add	r3, r2
 8002df4:	00db      	lsls	r3, r3, #3
 8002df6:	440b      	add	r3, r1
 8002df8:	3358      	adds	r3, #88	; 0x58
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002dfe:	6879      	ldr	r1, [r7, #4]
 8002e00:	68fa      	ldr	r2, [r7, #12]
 8002e02:	4613      	mov	r3, r2
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	4413      	add	r3, r2
 8002e08:	00db      	lsls	r3, r3, #3
 8002e0a:	440b      	add	r3, r1
 8002e0c:	335c      	adds	r3, #92	; 0x5c
 8002e0e:	2204      	movs	r2, #4
 8002e10:	701a      	strb	r2, [r3, #0]
 8002e12:	e009      	b.n	8002e28 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002e14:	6879      	ldr	r1, [r7, #4]
 8002e16:	68fa      	ldr	r2, [r7, #12]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	4413      	add	r3, r2
 8002e1e:	00db      	lsls	r3, r3, #3
 8002e20:	440b      	add	r3, r1
 8002e22:	335c      	adds	r3, #92	; 0x5c
 8002e24:	2202      	movs	r2, #2
 8002e26:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	015a      	lsls	r2, r3, #5
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	4413      	add	r3, r2
 8002e30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e3e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e46:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	015a      	lsls	r2, r3, #5
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	4413      	add	r3, r2
 8002e50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e54:	461a      	mov	r2, r3
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	015a      	lsls	r2, r3, #5
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	4413      	add	r3, r2
 8002e62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e66:	461a      	mov	r2, r3
 8002e68:	2302      	movs	r3, #2
 8002e6a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	b2d8      	uxtb	r0, r3
 8002e70:	6879      	ldr	r1, [r7, #4]
 8002e72:	68fa      	ldr	r2, [r7, #12]
 8002e74:	4613      	mov	r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	4413      	add	r3, r2
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	440b      	add	r3, r1
 8002e7e:	335c      	adds	r3, #92	; 0x5c
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	461a      	mov	r2, r3
 8002e84:	4601      	mov	r1, r0
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f004 fe0c 	bl	8007aa4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002e8c:	bf00      	nop
 8002e8e:	3718      	adds	r7, #24
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b08a      	sub	sp, #40	; 0x28
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea4:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	6a1b      	ldr	r3, [r3, #32]
 8002eac:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	f003 030f 	and.w	r3, r3, #15
 8002eb4:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	0c5b      	lsrs	r3, r3, #17
 8002eba:	f003 030f 	and.w	r3, r3, #15
 8002ebe:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	091b      	lsrs	r3, r3, #4
 8002ec4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ec8:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d003      	beq.n	8002ed8 <HCD_RXQLVL_IRQHandler+0x44>
 8002ed0:	2b05      	cmp	r3, #5
 8002ed2:	f000 8082 	beq.w	8002fda <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002ed6:	e083      	b.n	8002fe0 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d07f      	beq.n	8002fde <HCD_RXQLVL_IRQHandler+0x14a>
 8002ede:	6879      	ldr	r1, [r7, #4]
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	4413      	add	r3, r2
 8002ee8:	00db      	lsls	r3, r3, #3
 8002eea:	440b      	add	r3, r1
 8002eec:	3344      	adds	r3, #68	; 0x44
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d074      	beq.n	8002fde <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6818      	ldr	r0, [r3, #0]
 8002ef8:	6879      	ldr	r1, [r7, #4]
 8002efa:	69ba      	ldr	r2, [r7, #24]
 8002efc:	4613      	mov	r3, r2
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	4413      	add	r3, r2
 8002f02:	00db      	lsls	r3, r3, #3
 8002f04:	440b      	add	r3, r1
 8002f06:	3344      	adds	r3, #68	; 0x44
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	693a      	ldr	r2, [r7, #16]
 8002f0c:	b292      	uxth	r2, r2
 8002f0e:	4619      	mov	r1, r3
 8002f10:	f001 ffc3 	bl	8004e9a <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002f14:	6879      	ldr	r1, [r7, #4]
 8002f16:	69ba      	ldr	r2, [r7, #24]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	4413      	add	r3, r2
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	440b      	add	r3, r1
 8002f22:	3344      	adds	r3, #68	; 0x44
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	18d1      	adds	r1, r2, r3
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	4413      	add	r3, r2
 8002f34:	00db      	lsls	r3, r3, #3
 8002f36:	4403      	add	r3, r0
 8002f38:	3344      	adds	r3, #68	; 0x44
 8002f3a:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002f3c:	6879      	ldr	r1, [r7, #4]
 8002f3e:	69ba      	ldr	r2, [r7, #24]
 8002f40:	4613      	mov	r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	4413      	add	r3, r2
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	440b      	add	r3, r1
 8002f4a:	334c      	adds	r3, #76	; 0x4c
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	18d1      	adds	r1, r2, r3
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	4613      	mov	r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	4413      	add	r3, r2
 8002f5c:	00db      	lsls	r3, r3, #3
 8002f5e:	4403      	add	r3, r0
 8002f60:	334c      	adds	r3, #76	; 0x4c
 8002f62:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	015a      	lsls	r2, r3, #5
 8002f68:	6a3b      	ldr	r3, [r7, #32]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f70:	691a      	ldr	r2, [r3, #16]
 8002f72:	4b1d      	ldr	r3, [pc, #116]	; (8002fe8 <HCD_RXQLVL_IRQHandler+0x154>)
 8002f74:	4013      	ands	r3, r2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d031      	beq.n	8002fde <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	015a      	lsls	r2, r3, #5
 8002f7e:	6a3b      	ldr	r3, [r7, #32]
 8002f80:	4413      	add	r3, r2
 8002f82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f90:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f98:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	015a      	lsls	r2, r3, #5
 8002f9e:	6a3b      	ldr	r3, [r7, #32]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002fac:	6879      	ldr	r1, [r7, #4]
 8002fae:	69ba      	ldr	r2, [r7, #24]
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	4413      	add	r3, r2
 8002fb6:	00db      	lsls	r3, r3, #3
 8002fb8:	440b      	add	r3, r1
 8002fba:	3350      	adds	r3, #80	; 0x50
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	f083 0301 	eor.w	r3, r3, #1
 8002fc2:	b2d8      	uxtb	r0, r3
 8002fc4:	6879      	ldr	r1, [r7, #4]
 8002fc6:	69ba      	ldr	r2, [r7, #24]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	4413      	add	r3, r2
 8002fce:	00db      	lsls	r3, r3, #3
 8002fd0:	440b      	add	r3, r1
 8002fd2:	3350      	adds	r3, #80	; 0x50
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	701a      	strb	r2, [r3, #0]
      break;
 8002fd8:	e001      	b.n	8002fde <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8002fda:	bf00      	nop
 8002fdc:	e000      	b.n	8002fe0 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8002fde:	bf00      	nop
  }
}
 8002fe0:	bf00      	nop
 8002fe2:	3728      	adds	r7, #40	; 0x28
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	1ff80000 	.word	0x1ff80000

08002fec <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b086      	sub	sp, #24
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003018:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f003 0302 	and.w	r3, r3, #2
 8003020:	2b02      	cmp	r3, #2
 8003022:	d10b      	bne.n	800303c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	2b01      	cmp	r3, #1
 800302c:	d102      	bne.n	8003034 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f004 fd1c 	bl	8007a6c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	f043 0302 	orr.w	r3, r3, #2
 800303a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f003 0308 	and.w	r3, r3, #8
 8003042:	2b08      	cmp	r3, #8
 8003044:	d132      	bne.n	80030ac <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	f043 0308 	orr.w	r3, r3, #8
 800304c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f003 0304 	and.w	r3, r3, #4
 8003054:	2b04      	cmp	r3, #4
 8003056:	d126      	bne.n	80030a6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	2b02      	cmp	r3, #2
 800305e:	d113      	bne.n	8003088 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003066:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800306a:	d106      	bne.n	800307a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2102      	movs	r1, #2
 8003072:	4618      	mov	r0, r3
 8003074:	f002 f84c 	bl	8005110 <USB_InitFSLSPClkSel>
 8003078:	e011      	b.n	800309e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2101      	movs	r1, #1
 8003080:	4618      	mov	r0, r3
 8003082:	f002 f845 	bl	8005110 <USB_InitFSLSPClkSel>
 8003086:	e00a      	b.n	800309e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d106      	bne.n	800309e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003096:	461a      	mov	r2, r3
 8003098:	f64e 2360 	movw	r3, #60000	; 0xea60
 800309c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f004 fd0e 	bl	8007ac0 <HAL_HCD_PortEnabled_Callback>
 80030a4:	e002      	b.n	80030ac <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f004 fd18 	bl	8007adc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f003 0320 	and.w	r3, r3, #32
 80030b2:	2b20      	cmp	r3, #32
 80030b4:	d103      	bne.n	80030be <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	f043 0320 	orr.w	r3, r3, #32
 80030bc:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80030c4:	461a      	mov	r2, r3
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	6013      	str	r3, [r2, #0]
}
 80030ca:	bf00      	nop
 80030cc:	3718      	adds	r7, #24
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
	...

080030d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e11f      	b.n	8003326 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d106      	bne.n	8003100 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f7fd fbd8 	bl	80008b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2224      	movs	r2, #36	; 0x24
 8003104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f022 0201 	bic.w	r2, r2, #1
 8003116:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003126:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003136:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003138:	f001 f9de 	bl	80044f8 <HAL_RCC_GetPCLK1Freq>
 800313c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	4a7b      	ldr	r2, [pc, #492]	; (8003330 <HAL_I2C_Init+0x25c>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d807      	bhi.n	8003158 <HAL_I2C_Init+0x84>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	4a7a      	ldr	r2, [pc, #488]	; (8003334 <HAL_I2C_Init+0x260>)
 800314c:	4293      	cmp	r3, r2
 800314e:	bf94      	ite	ls
 8003150:	2301      	movls	r3, #1
 8003152:	2300      	movhi	r3, #0
 8003154:	b2db      	uxtb	r3, r3
 8003156:	e006      	b.n	8003166 <HAL_I2C_Init+0x92>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	4a77      	ldr	r2, [pc, #476]	; (8003338 <HAL_I2C_Init+0x264>)
 800315c:	4293      	cmp	r3, r2
 800315e:	bf94      	ite	ls
 8003160:	2301      	movls	r3, #1
 8003162:	2300      	movhi	r3, #0
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e0db      	b.n	8003326 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	4a72      	ldr	r2, [pc, #456]	; (800333c <HAL_I2C_Init+0x268>)
 8003172:	fba2 2303 	umull	r2, r3, r2, r3
 8003176:	0c9b      	lsrs	r3, r3, #18
 8003178:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	68ba      	ldr	r2, [r7, #8]
 800318a:	430a      	orrs	r2, r1
 800318c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	6a1b      	ldr	r3, [r3, #32]
 8003194:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	4a64      	ldr	r2, [pc, #400]	; (8003330 <HAL_I2C_Init+0x25c>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d802      	bhi.n	80031a8 <HAL_I2C_Init+0xd4>
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	3301      	adds	r3, #1
 80031a6:	e009      	b.n	80031bc <HAL_I2C_Init+0xe8>
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80031ae:	fb02 f303 	mul.w	r3, r2, r3
 80031b2:	4a63      	ldr	r2, [pc, #396]	; (8003340 <HAL_I2C_Init+0x26c>)
 80031b4:	fba2 2303 	umull	r2, r3, r2, r3
 80031b8:	099b      	lsrs	r3, r3, #6
 80031ba:	3301      	adds	r3, #1
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	6812      	ldr	r2, [r2, #0]
 80031c0:	430b      	orrs	r3, r1
 80031c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	69db      	ldr	r3, [r3, #28]
 80031ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80031ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	4956      	ldr	r1, [pc, #344]	; (8003330 <HAL_I2C_Init+0x25c>)
 80031d8:	428b      	cmp	r3, r1
 80031da:	d80d      	bhi.n	80031f8 <HAL_I2C_Init+0x124>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	1e59      	subs	r1, r3, #1
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80031ea:	3301      	adds	r3, #1
 80031ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031f0:	2b04      	cmp	r3, #4
 80031f2:	bf38      	it	cc
 80031f4:	2304      	movcc	r3, #4
 80031f6:	e04f      	b.n	8003298 <HAL_I2C_Init+0x1c4>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d111      	bne.n	8003224 <HAL_I2C_Init+0x150>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	1e58      	subs	r0, r3, #1
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6859      	ldr	r1, [r3, #4]
 8003208:	460b      	mov	r3, r1
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	440b      	add	r3, r1
 800320e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003212:	3301      	adds	r3, #1
 8003214:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003218:	2b00      	cmp	r3, #0
 800321a:	bf0c      	ite	eq
 800321c:	2301      	moveq	r3, #1
 800321e:	2300      	movne	r3, #0
 8003220:	b2db      	uxtb	r3, r3
 8003222:	e012      	b.n	800324a <HAL_I2C_Init+0x176>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	1e58      	subs	r0, r3, #1
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6859      	ldr	r1, [r3, #4]
 800322c:	460b      	mov	r3, r1
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	440b      	add	r3, r1
 8003232:	0099      	lsls	r1, r3, #2
 8003234:	440b      	add	r3, r1
 8003236:	fbb0 f3f3 	udiv	r3, r0, r3
 800323a:	3301      	adds	r3, #1
 800323c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003240:	2b00      	cmp	r3, #0
 8003242:	bf0c      	ite	eq
 8003244:	2301      	moveq	r3, #1
 8003246:	2300      	movne	r3, #0
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b00      	cmp	r3, #0
 800324c:	d001      	beq.n	8003252 <HAL_I2C_Init+0x17e>
 800324e:	2301      	movs	r3, #1
 8003250:	e022      	b.n	8003298 <HAL_I2C_Init+0x1c4>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d10e      	bne.n	8003278 <HAL_I2C_Init+0x1a4>
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	1e58      	subs	r0, r3, #1
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6859      	ldr	r1, [r3, #4]
 8003262:	460b      	mov	r3, r1
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	440b      	add	r3, r1
 8003268:	fbb0 f3f3 	udiv	r3, r0, r3
 800326c:	3301      	adds	r3, #1
 800326e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003272:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003276:	e00f      	b.n	8003298 <HAL_I2C_Init+0x1c4>
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	1e58      	subs	r0, r3, #1
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6859      	ldr	r1, [r3, #4]
 8003280:	460b      	mov	r3, r1
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	440b      	add	r3, r1
 8003286:	0099      	lsls	r1, r3, #2
 8003288:	440b      	add	r3, r1
 800328a:	fbb0 f3f3 	udiv	r3, r0, r3
 800328e:	3301      	adds	r3, #1
 8003290:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003294:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003298:	6879      	ldr	r1, [r7, #4]
 800329a:	6809      	ldr	r1, [r1, #0]
 800329c:	4313      	orrs	r3, r2
 800329e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	69da      	ldr	r2, [r3, #28]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a1b      	ldr	r3, [r3, #32]
 80032b2:	431a      	orrs	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	430a      	orrs	r2, r1
 80032ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80032c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	6911      	ldr	r1, [r2, #16]
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	68d2      	ldr	r2, [r2, #12]
 80032d2:	4311      	orrs	r1, r2
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	6812      	ldr	r2, [r2, #0]
 80032d8:	430b      	orrs	r3, r1
 80032da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	695a      	ldr	r2, [r3, #20]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	431a      	orrs	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	430a      	orrs	r2, r1
 80032f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f042 0201 	orr.w	r2, r2, #1
 8003306:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2220      	movs	r2, #32
 8003312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	3710      	adds	r7, #16
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	000186a0 	.word	0x000186a0
 8003334:	001e847f 	.word	0x001e847f
 8003338:	003d08ff 	.word	0x003d08ff
 800333c:	431bde83 	.word	0x431bde83
 8003340:	10624dd3 	.word	0x10624dd3

08003344 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b088      	sub	sp, #32
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d101      	bne.n	8003356 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e128      	b.n	80035a8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800335c:	b2db      	uxtb	r3, r3
 800335e:	2b00      	cmp	r3, #0
 8003360:	d109      	bne.n	8003376 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a90      	ldr	r2, [pc, #576]	; (80035b0 <HAL_I2S_Init+0x26c>)
 800336e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f7fd fb43 	bl	80009fc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2202      	movs	r2, #2
 800337a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	69db      	ldr	r3, [r3, #28]
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	6812      	ldr	r2, [r2, #0]
 8003388:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800338c:	f023 030f 	bic.w	r3, r3, #15
 8003390:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2202      	movs	r2, #2
 8003398:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d060      	beq.n	8003464 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d102      	bne.n	80033b0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80033aa:	2310      	movs	r3, #16
 80033ac:	617b      	str	r3, [r7, #20]
 80033ae:	e001      	b.n	80033b4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80033b0:	2320      	movs	r3, #32
 80033b2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	2b20      	cmp	r3, #32
 80033ba:	d802      	bhi.n	80033c2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	005b      	lsls	r3, r3, #1
 80033c0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80033c2:	2001      	movs	r0, #1
 80033c4:	f001 f99c 	bl	8004700 <HAL_RCCEx_GetPeriphCLKFreq>
 80033c8:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033d2:	d125      	bne.n	8003420 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d010      	beq.n	80033fe <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	68fa      	ldr	r2, [r7, #12]
 80033e2:	fbb2 f2f3 	udiv	r2, r2, r3
 80033e6:	4613      	mov	r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	4413      	add	r3, r2
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	461a      	mov	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	695b      	ldr	r3, [r3, #20]
 80033f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f8:	3305      	adds	r3, #5
 80033fa:	613b      	str	r3, [r7, #16]
 80033fc:	e01f      	b.n	800343e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	00db      	lsls	r3, r3, #3
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	fbb2 f2f3 	udiv	r2, r2, r3
 8003408:	4613      	mov	r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	4413      	add	r3, r2
 800340e:	005b      	lsls	r3, r3, #1
 8003410:	461a      	mov	r2, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	fbb2 f3f3 	udiv	r3, r2, r3
 800341a:	3305      	adds	r3, #5
 800341c:	613b      	str	r3, [r7, #16]
 800341e:	e00e      	b.n	800343e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003420:	68fa      	ldr	r2, [r7, #12]
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	fbb2 f2f3 	udiv	r2, r2, r3
 8003428:	4613      	mov	r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	4413      	add	r3, r2
 800342e:	005b      	lsls	r3, r3, #1
 8003430:	461a      	mov	r2, r3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	fbb2 f3f3 	udiv	r3, r2, r3
 800343a:	3305      	adds	r3, #5
 800343c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	4a5c      	ldr	r2, [pc, #368]	; (80035b4 <HAL_I2S_Init+0x270>)
 8003442:	fba2 2303 	umull	r2, r3, r2, r3
 8003446:	08db      	lsrs	r3, r3, #3
 8003448:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	f003 0301 	and.w	r3, r3, #1
 8003450:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	085b      	lsrs	r3, r3, #1
 800345a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	021b      	lsls	r3, r3, #8
 8003460:	61bb      	str	r3, [r7, #24]
 8003462:	e003      	b.n	800346c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003464:	2302      	movs	r3, #2
 8003466:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003468:	2300      	movs	r3, #0
 800346a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d902      	bls.n	8003478 <HAL_I2S_Init+0x134>
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	2bff      	cmp	r3, #255	; 0xff
 8003476:	d907      	bls.n	8003488 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347c:	f043 0210 	orr.w	r2, r3, #16
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e08f      	b.n	80035a8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	691a      	ldr	r2, [r3, #16]
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	ea42 0103 	orr.w	r1, r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	69fa      	ldr	r2, [r7, #28]
 8003498:	430a      	orrs	r2, r1
 800349a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	69db      	ldr	r3, [r3, #28]
 80034a2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80034a6:	f023 030f 	bic.w	r3, r3, #15
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	6851      	ldr	r1, [r2, #4]
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	6892      	ldr	r2, [r2, #8]
 80034b2:	4311      	orrs	r1, r2
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	68d2      	ldr	r2, [r2, #12]
 80034b8:	4311      	orrs	r1, r2
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	6992      	ldr	r2, [r2, #24]
 80034be:	430a      	orrs	r2, r1
 80034c0:	431a      	orrs	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034ca:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a1b      	ldr	r3, [r3, #32]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d161      	bne.n	8003598 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4a38      	ldr	r2, [pc, #224]	; (80035b8 <HAL_I2S_Init+0x274>)
 80034d8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a37      	ldr	r2, [pc, #220]	; (80035bc <HAL_I2S_Init+0x278>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d101      	bne.n	80034e8 <HAL_I2S_Init+0x1a4>
 80034e4:	4b36      	ldr	r3, [pc, #216]	; (80035c0 <HAL_I2S_Init+0x27c>)
 80034e6:	e001      	b.n	80034ec <HAL_I2S_Init+0x1a8>
 80034e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034ec:	69db      	ldr	r3, [r3, #28]
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	6812      	ldr	r2, [r2, #0]
 80034f2:	4932      	ldr	r1, [pc, #200]	; (80035bc <HAL_I2S_Init+0x278>)
 80034f4:	428a      	cmp	r2, r1
 80034f6:	d101      	bne.n	80034fc <HAL_I2S_Init+0x1b8>
 80034f8:	4a31      	ldr	r2, [pc, #196]	; (80035c0 <HAL_I2S_Init+0x27c>)
 80034fa:	e001      	b.n	8003500 <HAL_I2S_Init+0x1bc>
 80034fc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003500:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003504:	f023 030f 	bic.w	r3, r3, #15
 8003508:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a2b      	ldr	r2, [pc, #172]	; (80035bc <HAL_I2S_Init+0x278>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d101      	bne.n	8003518 <HAL_I2S_Init+0x1d4>
 8003514:	4b2a      	ldr	r3, [pc, #168]	; (80035c0 <HAL_I2S_Init+0x27c>)
 8003516:	e001      	b.n	800351c <HAL_I2S_Init+0x1d8>
 8003518:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800351c:	2202      	movs	r2, #2
 800351e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a25      	ldr	r2, [pc, #148]	; (80035bc <HAL_I2S_Init+0x278>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d101      	bne.n	800352e <HAL_I2S_Init+0x1ea>
 800352a:	4b25      	ldr	r3, [pc, #148]	; (80035c0 <HAL_I2S_Init+0x27c>)
 800352c:	e001      	b.n	8003532 <HAL_I2S_Init+0x1ee>
 800352e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003532:	69db      	ldr	r3, [r3, #28]
 8003534:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800353e:	d003      	beq.n	8003548 <HAL_I2S_Init+0x204>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d103      	bne.n	8003550 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003548:	f44f 7380 	mov.w	r3, #256	; 0x100
 800354c:	613b      	str	r3, [r7, #16]
 800354e:	e001      	b.n	8003554 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003550:	2300      	movs	r3, #0
 8003552:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	b299      	uxth	r1, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	699b      	ldr	r3, [r3, #24]
 8003568:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800356a:	4303      	orrs	r3, r0
 800356c:	b29b      	uxth	r3, r3
 800356e:	430b      	orrs	r3, r1
 8003570:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003572:	4313      	orrs	r3, r2
 8003574:	b29a      	uxth	r2, r3
 8003576:	897b      	ldrh	r3, [r7, #10]
 8003578:	4313      	orrs	r3, r2
 800357a:	b29b      	uxth	r3, r3
 800357c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003580:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a0d      	ldr	r2, [pc, #52]	; (80035bc <HAL_I2S_Init+0x278>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d101      	bne.n	8003590 <HAL_I2S_Init+0x24c>
 800358c:	4b0c      	ldr	r3, [pc, #48]	; (80035c0 <HAL_I2S_Init+0x27c>)
 800358e:	e001      	b.n	8003594 <HAL_I2S_Init+0x250>
 8003590:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003594:	897a      	ldrh	r2, [r7, #10]
 8003596:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80035a6:	2300      	movs	r3, #0
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3720      	adds	r7, #32
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	080036bb 	.word	0x080036bb
 80035b4:	cccccccd 	.word	0xcccccccd
 80035b8:	080037d1 	.word	0x080037d1
 80035bc:	40003800 	.word	0x40003800
 80035c0:	40003400 	.word	0x40003400

080035c4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80035cc:	bf00      	nop
 80035ce:	370c      	adds	r7, #12
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80035e0:	bf00      	nop
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360c:	881a      	ldrh	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003618:	1c9a      	adds	r2, r3, #2
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003622:	b29b      	uxth	r3, r3
 8003624:	3b01      	subs	r3, #1
 8003626:	b29a      	uxth	r2, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003630:	b29b      	uxth	r3, r3
 8003632:	2b00      	cmp	r3, #0
 8003634:	d10e      	bne.n	8003654 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	685a      	ldr	r2, [r3, #4]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003644:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2201      	movs	r2, #1
 800364a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f7ff ffb8 	bl	80035c4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003654:	bf00      	nop
 8003656:	3708      	adds	r7, #8
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68da      	ldr	r2, [r3, #12]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366e:	b292      	uxth	r2, r2
 8003670:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003676:	1c9a      	adds	r2, r3, #2
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003680:	b29b      	uxth	r3, r3
 8003682:	3b01      	subs	r3, #1
 8003684:	b29a      	uxth	r2, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800368e:	b29b      	uxth	r3, r3
 8003690:	2b00      	cmp	r3, #0
 8003692:	d10e      	bne.n	80036b2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	685a      	ldr	r2, [r3, #4]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036a2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f7ff ff93 	bl	80035d8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80036b2:	bf00      	nop
 80036b4:	3708      	adds	r7, #8
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b086      	sub	sp, #24
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b04      	cmp	r3, #4
 80036d4:	d13a      	bne.n	800374c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	f003 0301 	and.w	r3, r3, #1
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d109      	bne.n	80036f4 <I2S_IRQHandler+0x3a>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ea:	2b40      	cmp	r3, #64	; 0x40
 80036ec:	d102      	bne.n	80036f4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f7ff ffb4 	bl	800365c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036fa:	2b40      	cmp	r3, #64	; 0x40
 80036fc:	d126      	bne.n	800374c <I2S_IRQHandler+0x92>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f003 0320 	and.w	r3, r3, #32
 8003708:	2b20      	cmp	r3, #32
 800370a:	d11f      	bne.n	800374c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	685a      	ldr	r2, [r3, #4]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800371a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800371c:	2300      	movs	r3, #0
 800371e:	613b      	str	r3, [r7, #16]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	613b      	str	r3, [r7, #16]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	613b      	str	r3, [r7, #16]
 8003730:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2201      	movs	r2, #1
 8003736:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373e:	f043 0202 	orr.w	r2, r3, #2
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f7ff ff50 	bl	80035ec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003752:	b2db      	uxtb	r3, r3
 8003754:	2b03      	cmp	r3, #3
 8003756:	d136      	bne.n	80037c6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b02      	cmp	r3, #2
 8003760:	d109      	bne.n	8003776 <I2S_IRQHandler+0xbc>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800376c:	2b80      	cmp	r3, #128	; 0x80
 800376e:	d102      	bne.n	8003776 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f7ff ff45 	bl	8003600 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	f003 0308 	and.w	r3, r3, #8
 800377c:	2b08      	cmp	r3, #8
 800377e:	d122      	bne.n	80037c6 <I2S_IRQHandler+0x10c>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f003 0320 	and.w	r3, r3, #32
 800378a:	2b20      	cmp	r3, #32
 800378c:	d11b      	bne.n	80037c6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	685a      	ldr	r2, [r3, #4]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800379c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800379e:	2300      	movs	r3, #0
 80037a0:	60fb      	str	r3, [r7, #12]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	60fb      	str	r3, [r7, #12]
 80037aa:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b8:	f043 0204 	orr.w	r2, r3, #4
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f7ff ff13 	bl	80035ec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037c6:	bf00      	nop
 80037c8:	3718      	adds	r7, #24
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
	...

080037d0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b088      	sub	sp, #32
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4aa2      	ldr	r2, [pc, #648]	; (8003a70 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d101      	bne.n	80037ee <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80037ea:	4ba2      	ldr	r3, [pc, #648]	; (8003a74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80037ec:	e001      	b.n	80037f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80037ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a9b      	ldr	r2, [pc, #620]	; (8003a70 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d101      	bne.n	800380c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003808:	4b9a      	ldr	r3, [pc, #616]	; (8003a74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800380a:	e001      	b.n	8003810 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800380c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800381c:	d004      	beq.n	8003828 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	2b00      	cmp	r3, #0
 8003824:	f040 8099 	bne.w	800395a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	f003 0302 	and.w	r3, r3, #2
 800382e:	2b02      	cmp	r3, #2
 8003830:	d107      	bne.n	8003842 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003838:	2b00      	cmp	r3, #0
 800383a:	d002      	beq.n	8003842 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f000 f925 	bl	8003a8c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	f003 0301 	and.w	r3, r3, #1
 8003848:	2b01      	cmp	r3, #1
 800384a:	d107      	bne.n	800385c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003852:	2b00      	cmp	r3, #0
 8003854:	d002      	beq.n	800385c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 f9c8 	bl	8003bec <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003862:	2b40      	cmp	r3, #64	; 0x40
 8003864:	d13a      	bne.n	80038dc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	f003 0320 	and.w	r3, r3, #32
 800386c:	2b00      	cmp	r3, #0
 800386e:	d035      	beq.n	80038dc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a7e      	ldr	r2, [pc, #504]	; (8003a70 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d101      	bne.n	800387e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800387a:	4b7e      	ldr	r3, [pc, #504]	; (8003a74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800387c:	e001      	b.n	8003882 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800387e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003882:	685a      	ldr	r2, [r3, #4]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4979      	ldr	r1, [pc, #484]	; (8003a70 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800388a:	428b      	cmp	r3, r1
 800388c:	d101      	bne.n	8003892 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800388e:	4b79      	ldr	r3, [pc, #484]	; (8003a74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003890:	e001      	b.n	8003896 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003892:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003896:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800389a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	685a      	ldr	r2, [r3, #4]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038aa:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80038ac:	2300      	movs	r3, #0
 80038ae:	60fb      	str	r3, [r7, #12]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	60fb      	str	r3, [r7, #12]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	60fb      	str	r3, [r7, #12]
 80038c0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2201      	movs	r2, #1
 80038c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ce:	f043 0202 	orr.w	r2, r3, #2
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f7ff fe88 	bl	80035ec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	f003 0308 	and.w	r3, r3, #8
 80038e2:	2b08      	cmp	r3, #8
 80038e4:	f040 80be 	bne.w	8003a64 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	f003 0320 	and.w	r3, r3, #32
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	f000 80b8 	beq.w	8003a64 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	685a      	ldr	r2, [r3, #4]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003902:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a59      	ldr	r2, [pc, #356]	; (8003a70 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d101      	bne.n	8003912 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800390e:	4b59      	ldr	r3, [pc, #356]	; (8003a74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003910:	e001      	b.n	8003916 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003912:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003916:	685a      	ldr	r2, [r3, #4]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4954      	ldr	r1, [pc, #336]	; (8003a70 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800391e:	428b      	cmp	r3, r1
 8003920:	d101      	bne.n	8003926 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003922:	4b54      	ldr	r3, [pc, #336]	; (8003a74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003924:	e001      	b.n	800392a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003926:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800392a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800392e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003930:	2300      	movs	r3, #0
 8003932:	60bb      	str	r3, [r7, #8]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	60bb      	str	r3, [r7, #8]
 800393c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2201      	movs	r2, #1
 8003942:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800394a:	f043 0204 	orr.w	r2, r3, #4
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f7ff fe4a 	bl	80035ec <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003958:	e084      	b.n	8003a64 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	f003 0302 	and.w	r3, r3, #2
 8003960:	2b02      	cmp	r3, #2
 8003962:	d107      	bne.n	8003974 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800396a:	2b00      	cmp	r3, #0
 800396c:	d002      	beq.n	8003974 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 f8be 	bl	8003af0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	2b01      	cmp	r3, #1
 800397c:	d107      	bne.n	800398e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003984:	2b00      	cmp	r3, #0
 8003986:	d002      	beq.n	800398e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f000 f8fd 	bl	8003b88 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003994:	2b40      	cmp	r3, #64	; 0x40
 8003996:	d12f      	bne.n	80039f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	f003 0320 	and.w	r3, r3, #32
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d02a      	beq.n	80039f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	685a      	ldr	r2, [r3, #4]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039b0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a2e      	ldr	r2, [pc, #184]	; (8003a70 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d101      	bne.n	80039c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80039bc:	4b2d      	ldr	r3, [pc, #180]	; (8003a74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80039be:	e001      	b.n	80039c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80039c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039c4:	685a      	ldr	r2, [r3, #4]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4929      	ldr	r1, [pc, #164]	; (8003a70 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80039cc:	428b      	cmp	r3, r1
 80039ce:	d101      	bne.n	80039d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80039d0:	4b28      	ldr	r3, [pc, #160]	; (8003a74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80039d2:	e001      	b.n	80039d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80039d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039d8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039dc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2201      	movs	r2, #1
 80039e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ea:	f043 0202 	orr.w	r2, r3, #2
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f7ff fdfa 	bl	80035ec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	f003 0308 	and.w	r3, r3, #8
 80039fe:	2b08      	cmp	r3, #8
 8003a00:	d131      	bne.n	8003a66 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	f003 0320 	and.w	r3, r3, #32
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d02c      	beq.n	8003a66 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a17      	ldr	r2, [pc, #92]	; (8003a70 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d101      	bne.n	8003a1a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003a16:	4b17      	ldr	r3, [pc, #92]	; (8003a74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003a18:	e001      	b.n	8003a1e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003a1a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a1e:	685a      	ldr	r2, [r3, #4]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4912      	ldr	r1, [pc, #72]	; (8003a70 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a26:	428b      	cmp	r3, r1
 8003a28:	d101      	bne.n	8003a2e <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003a2a:	4b12      	ldr	r3, [pc, #72]	; (8003a74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003a2c:	e001      	b.n	8003a32 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003a2e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a32:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a36:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	685a      	ldr	r2, [r3, #4]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a46:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a54:	f043 0204 	orr.w	r2, r3, #4
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f7ff fdc5 	bl	80035ec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a62:	e000      	b.n	8003a66 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003a64:	bf00      	nop
}
 8003a66:	bf00      	nop
 8003a68:	3720      	adds	r7, #32
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	40003800 	.word	0x40003800
 8003a74:	40003400 	.word	0x40003400

08003a78 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003a80:	bf00      	nop
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a98:	1c99      	adds	r1, r3, #2
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	6251      	str	r1, [r2, #36]	; 0x24
 8003a9e:	881a      	ldrh	r2, [r3, #0]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	3b01      	subs	r3, #1
 8003aae:	b29a      	uxth	r2, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d113      	bne.n	8003ae6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	685a      	ldr	r2, [r3, #4]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003acc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d106      	bne.n	8003ae6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f7ff ffc9 	bl	8003a78 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ae6:	bf00      	nop
 8003ae8:	3708      	adds	r7, #8
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
	...

08003af0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afc:	1c99      	adds	r1, r3, #2
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	6251      	str	r1, [r2, #36]	; 0x24
 8003b02:	8819      	ldrh	r1, [r3, #0]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a1d      	ldr	r2, [pc, #116]	; (8003b80 <I2SEx_TxISR_I2SExt+0x90>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d101      	bne.n	8003b12 <I2SEx_TxISR_I2SExt+0x22>
 8003b0e:	4b1d      	ldr	r3, [pc, #116]	; (8003b84 <I2SEx_TxISR_I2SExt+0x94>)
 8003b10:	e001      	b.n	8003b16 <I2SEx_TxISR_I2SExt+0x26>
 8003b12:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b16:	460a      	mov	r2, r1
 8003b18:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	3b01      	subs	r3, #1
 8003b22:	b29a      	uxth	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d121      	bne.n	8003b76 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a12      	ldr	r2, [pc, #72]	; (8003b80 <I2SEx_TxISR_I2SExt+0x90>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d101      	bne.n	8003b40 <I2SEx_TxISR_I2SExt+0x50>
 8003b3c:	4b11      	ldr	r3, [pc, #68]	; (8003b84 <I2SEx_TxISR_I2SExt+0x94>)
 8003b3e:	e001      	b.n	8003b44 <I2SEx_TxISR_I2SExt+0x54>
 8003b40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b44:	685a      	ldr	r2, [r3, #4]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	490d      	ldr	r1, [pc, #52]	; (8003b80 <I2SEx_TxISR_I2SExt+0x90>)
 8003b4c:	428b      	cmp	r3, r1
 8003b4e:	d101      	bne.n	8003b54 <I2SEx_TxISR_I2SExt+0x64>
 8003b50:	4b0c      	ldr	r3, [pc, #48]	; (8003b84 <I2SEx_TxISR_I2SExt+0x94>)
 8003b52:	e001      	b.n	8003b58 <I2SEx_TxISR_I2SExt+0x68>
 8003b54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b58:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b5c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d106      	bne.n	8003b76 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f7ff ff81 	bl	8003a78 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b76:	bf00      	nop
 8003b78:	3708      	adds	r7, #8
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	40003800 	.word	0x40003800
 8003b84:	40003400 	.word	0x40003400

08003b88 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68d8      	ldr	r0, [r3, #12]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b9a:	1c99      	adds	r1, r3, #2
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003ba0:	b282      	uxth	r2, r0
 8003ba2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	3b01      	subs	r3, #1
 8003bac:	b29a      	uxth	r2, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d113      	bne.n	8003be4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	685a      	ldr	r2, [r3, #4]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003bca:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d106      	bne.n	8003be4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2201      	movs	r2, #1
 8003bda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f7ff ff4a 	bl	8003a78 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003be4:	bf00      	nop
 8003be6:	3708      	adds	r7, #8
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a20      	ldr	r2, [pc, #128]	; (8003c7c <I2SEx_RxISR_I2SExt+0x90>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d101      	bne.n	8003c02 <I2SEx_RxISR_I2SExt+0x16>
 8003bfe:	4b20      	ldr	r3, [pc, #128]	; (8003c80 <I2SEx_RxISR_I2SExt+0x94>)
 8003c00:	e001      	b.n	8003c06 <I2SEx_RxISR_I2SExt+0x1a>
 8003c02:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c06:	68d8      	ldr	r0, [r3, #12]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0c:	1c99      	adds	r1, r3, #2
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003c12:	b282      	uxth	r2, r0
 8003c14:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	b29a      	uxth	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d121      	bne.n	8003c72 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a12      	ldr	r2, [pc, #72]	; (8003c7c <I2SEx_RxISR_I2SExt+0x90>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d101      	bne.n	8003c3c <I2SEx_RxISR_I2SExt+0x50>
 8003c38:	4b11      	ldr	r3, [pc, #68]	; (8003c80 <I2SEx_RxISR_I2SExt+0x94>)
 8003c3a:	e001      	b.n	8003c40 <I2SEx_RxISR_I2SExt+0x54>
 8003c3c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c40:	685a      	ldr	r2, [r3, #4]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	490d      	ldr	r1, [pc, #52]	; (8003c7c <I2SEx_RxISR_I2SExt+0x90>)
 8003c48:	428b      	cmp	r3, r1
 8003c4a:	d101      	bne.n	8003c50 <I2SEx_RxISR_I2SExt+0x64>
 8003c4c:	4b0c      	ldr	r3, [pc, #48]	; (8003c80 <I2SEx_RxISR_I2SExt+0x94>)
 8003c4e:	e001      	b.n	8003c54 <I2SEx_RxISR_I2SExt+0x68>
 8003c50:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c54:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c58:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d106      	bne.n	8003c72 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f7ff ff03 	bl	8003a78 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c72:	bf00      	nop
 8003c74:	3708      	adds	r7, #8
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	40003800 	.word	0x40003800
 8003c80:	40003400 	.word	0x40003400

08003c84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b086      	sub	sp, #24
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d101      	bne.n	8003c96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e25b      	b.n	800414e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0301 	and.w	r3, r3, #1
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d075      	beq.n	8003d8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ca2:	4ba3      	ldr	r3, [pc, #652]	; (8003f30 <HAL_RCC_OscConfig+0x2ac>)
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f003 030c 	and.w	r3, r3, #12
 8003caa:	2b04      	cmp	r3, #4
 8003cac:	d00c      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cae:	4ba0      	ldr	r3, [pc, #640]	; (8003f30 <HAL_RCC_OscConfig+0x2ac>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cb6:	2b08      	cmp	r3, #8
 8003cb8:	d112      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cba:	4b9d      	ldr	r3, [pc, #628]	; (8003f30 <HAL_RCC_OscConfig+0x2ac>)
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cc6:	d10b      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cc8:	4b99      	ldr	r3, [pc, #612]	; (8003f30 <HAL_RCC_OscConfig+0x2ac>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d05b      	beq.n	8003d8c <HAL_RCC_OscConfig+0x108>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d157      	bne.n	8003d8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e236      	b.n	800414e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ce8:	d106      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x74>
 8003cea:	4b91      	ldr	r3, [pc, #580]	; (8003f30 <HAL_RCC_OscConfig+0x2ac>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a90      	ldr	r2, [pc, #576]	; (8003f30 <HAL_RCC_OscConfig+0x2ac>)
 8003cf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cf4:	6013      	str	r3, [r2, #0]
 8003cf6:	e01d      	b.n	8003d34 <HAL_RCC_OscConfig+0xb0>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d00:	d10c      	bne.n	8003d1c <HAL_RCC_OscConfig+0x98>
 8003d02:	4b8b      	ldr	r3, [pc, #556]	; (8003f30 <HAL_RCC_OscConfig+0x2ac>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a8a      	ldr	r2, [pc, #552]	; (8003f30 <HAL_RCC_OscConfig+0x2ac>)
 8003d08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d0c:	6013      	str	r3, [r2, #0]
 8003d0e:	4b88      	ldr	r3, [pc, #544]	; (8003f30 <HAL_RCC_OscConfig+0x2ac>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a87      	ldr	r2, [pc, #540]	; (8003f30 <HAL_RCC_OscConfig+0x2ac>)
 8003d14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d18:	6013      	str	r3, [r2, #0]
 8003d1a:	e00b      	b.n	8003d34 <HAL_RCC_OscConfig+0xb0>
 8003d1c:	4b84      	ldr	r3, [pc, #528]	; (8003f30 <HAL_RCC_OscConfig+0x2ac>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a83      	ldr	r2, [pc, #524]	; (8003f30 <HAL_RCC_OscConfig+0x2ac>)
 8003d22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d26:	6013      	str	r3, [r2, #0]
 8003d28:	4b81      	ldr	r3, [pc, #516]	; (8003f30 <HAL_RCC_OscConfig+0x2ac>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a80      	ldr	r2, [pc, #512]	; (8003f30 <HAL_RCC_OscConfig+0x2ac>)
 8003d2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d013      	beq.n	8003d64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d3c:	f7fd f9fe 	bl	800113c <HAL_GetTick>
 8003d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d42:	e008      	b.n	8003d56 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d44:	f7fd f9fa 	bl	800113c <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	2b64      	cmp	r3, #100	; 0x64
 8003d50:	d901      	bls.n	8003d56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e1fb      	b.n	800414e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d56:	4b76      	ldr	r3, [pc, #472]	; (8003f30 <HAL_RCC_OscConfig+0x2ac>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d0f0      	beq.n	8003d44 <HAL_RCC_OscConfig+0xc0>
 8003d62:	e014      	b.n	8003d8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d64:	f7fd f9ea 	bl	800113c <HAL_GetTick>
 8003d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d6a:	e008      	b.n	8003d7e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d6c:	f7fd f9e6 	bl	800113c <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	2b64      	cmp	r3, #100	; 0x64
 8003d78:	d901      	bls.n	8003d7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e1e7      	b.n	800414e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d7e:	4b6c      	ldr	r3, [pc, #432]	; (8003f30 <HAL_RCC_OscConfig+0x2ac>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1f0      	bne.n	8003d6c <HAL_RCC_OscConfig+0xe8>
 8003d8a:	e000      	b.n	8003d8e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0302 	and.w	r3, r3, #2
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d063      	beq.n	8003e62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d9a:	4b65      	ldr	r3, [pc, #404]	; (8003f30 <HAL_RCC_OscConfig+0x2ac>)
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f003 030c 	and.w	r3, r3, #12
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00b      	beq.n	8003dbe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003da6:	4b62      	ldr	r3, [pc, #392]	; (8003f30 <HAL_RCC_OscConfig+0x2ac>)
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003dae:	2b08      	cmp	r3, #8
 8003db0:	d11c      	bne.n	8003dec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003db2:	4b5f      	ldr	r3, [pc, #380]	; (8003f30 <HAL_RCC_OscConfig+0x2ac>)
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d116      	bne.n	8003dec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dbe:	4b5c      	ldr	r3, [pc, #368]	; (8003f30 <HAL_RCC_OscConfig+0x2ac>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d005      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x152>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d001      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e1bb      	b.n	800414e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dd6:	4b56      	ldr	r3, [pc, #344]	; (8003f30 <HAL_RCC_OscConfig+0x2ac>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	00db      	lsls	r3, r3, #3
 8003de4:	4952      	ldr	r1, [pc, #328]	; (8003f30 <HAL_RCC_OscConfig+0x2ac>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dea:	e03a      	b.n	8003e62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d020      	beq.n	8003e36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003df4:	4b4f      	ldr	r3, [pc, #316]	; (8003f34 <HAL_RCC_OscConfig+0x2b0>)
 8003df6:	2201      	movs	r2, #1
 8003df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dfa:	f7fd f99f 	bl	800113c <HAL_GetTick>
 8003dfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e00:	e008      	b.n	8003e14 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e02:	f7fd f99b 	bl	800113c <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d901      	bls.n	8003e14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e19c      	b.n	800414e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e14:	4b46      	ldr	r3, [pc, #280]	; (8003f30 <HAL_RCC_OscConfig+0x2ac>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0302 	and.w	r3, r3, #2
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d0f0      	beq.n	8003e02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e20:	4b43      	ldr	r3, [pc, #268]	; (8003f30 <HAL_RCC_OscConfig+0x2ac>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	691b      	ldr	r3, [r3, #16]
 8003e2c:	00db      	lsls	r3, r3, #3
 8003e2e:	4940      	ldr	r1, [pc, #256]	; (8003f30 <HAL_RCC_OscConfig+0x2ac>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	600b      	str	r3, [r1, #0]
 8003e34:	e015      	b.n	8003e62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e36:	4b3f      	ldr	r3, [pc, #252]	; (8003f34 <HAL_RCC_OscConfig+0x2b0>)
 8003e38:	2200      	movs	r2, #0
 8003e3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e3c:	f7fd f97e 	bl	800113c <HAL_GetTick>
 8003e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e42:	e008      	b.n	8003e56 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e44:	f7fd f97a 	bl	800113c <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d901      	bls.n	8003e56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e17b      	b.n	800414e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e56:	4b36      	ldr	r3, [pc, #216]	; (8003f30 <HAL_RCC_OscConfig+0x2ac>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0302 	and.w	r3, r3, #2
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1f0      	bne.n	8003e44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0308 	and.w	r3, r3, #8
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d030      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d016      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e76:	4b30      	ldr	r3, [pc, #192]	; (8003f38 <HAL_RCC_OscConfig+0x2b4>)
 8003e78:	2201      	movs	r2, #1
 8003e7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e7c:	f7fd f95e 	bl	800113c <HAL_GetTick>
 8003e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e82:	e008      	b.n	8003e96 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e84:	f7fd f95a 	bl	800113c <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d901      	bls.n	8003e96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e15b      	b.n	800414e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e96:	4b26      	ldr	r3, [pc, #152]	; (8003f30 <HAL_RCC_OscConfig+0x2ac>)
 8003e98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e9a:	f003 0302 	and.w	r3, r3, #2
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d0f0      	beq.n	8003e84 <HAL_RCC_OscConfig+0x200>
 8003ea2:	e015      	b.n	8003ed0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ea4:	4b24      	ldr	r3, [pc, #144]	; (8003f38 <HAL_RCC_OscConfig+0x2b4>)
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eaa:	f7fd f947 	bl	800113c <HAL_GetTick>
 8003eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003eb0:	e008      	b.n	8003ec4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003eb2:	f7fd f943 	bl	800113c <HAL_GetTick>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d901      	bls.n	8003ec4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e144      	b.n	800414e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ec4:	4b1a      	ldr	r3, [pc, #104]	; (8003f30 <HAL_RCC_OscConfig+0x2ac>)
 8003ec6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ec8:	f003 0302 	and.w	r3, r3, #2
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d1f0      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0304 	and.w	r3, r3, #4
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	f000 80a0 	beq.w	800401e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ee2:	4b13      	ldr	r3, [pc, #76]	; (8003f30 <HAL_RCC_OscConfig+0x2ac>)
 8003ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d10f      	bne.n	8003f0e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003eee:	2300      	movs	r3, #0
 8003ef0:	60bb      	str	r3, [r7, #8]
 8003ef2:	4b0f      	ldr	r3, [pc, #60]	; (8003f30 <HAL_RCC_OscConfig+0x2ac>)
 8003ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef6:	4a0e      	ldr	r2, [pc, #56]	; (8003f30 <HAL_RCC_OscConfig+0x2ac>)
 8003ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003efc:	6413      	str	r3, [r2, #64]	; 0x40
 8003efe:	4b0c      	ldr	r3, [pc, #48]	; (8003f30 <HAL_RCC_OscConfig+0x2ac>)
 8003f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f06:	60bb      	str	r3, [r7, #8]
 8003f08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f0e:	4b0b      	ldr	r3, [pc, #44]	; (8003f3c <HAL_RCC_OscConfig+0x2b8>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d121      	bne.n	8003f5e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f1a:	4b08      	ldr	r3, [pc, #32]	; (8003f3c <HAL_RCC_OscConfig+0x2b8>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a07      	ldr	r2, [pc, #28]	; (8003f3c <HAL_RCC_OscConfig+0x2b8>)
 8003f20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f26:	f7fd f909 	bl	800113c <HAL_GetTick>
 8003f2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f2c:	e011      	b.n	8003f52 <HAL_RCC_OscConfig+0x2ce>
 8003f2e:	bf00      	nop
 8003f30:	40023800 	.word	0x40023800
 8003f34:	42470000 	.word	0x42470000
 8003f38:	42470e80 	.word	0x42470e80
 8003f3c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f40:	f7fd f8fc 	bl	800113c <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d901      	bls.n	8003f52 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e0fd      	b.n	800414e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f52:	4b81      	ldr	r3, [pc, #516]	; (8004158 <HAL_RCC_OscConfig+0x4d4>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d0f0      	beq.n	8003f40 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d106      	bne.n	8003f74 <HAL_RCC_OscConfig+0x2f0>
 8003f66:	4b7d      	ldr	r3, [pc, #500]	; (800415c <HAL_RCC_OscConfig+0x4d8>)
 8003f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f6a:	4a7c      	ldr	r2, [pc, #496]	; (800415c <HAL_RCC_OscConfig+0x4d8>)
 8003f6c:	f043 0301 	orr.w	r3, r3, #1
 8003f70:	6713      	str	r3, [r2, #112]	; 0x70
 8003f72:	e01c      	b.n	8003fae <HAL_RCC_OscConfig+0x32a>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	2b05      	cmp	r3, #5
 8003f7a:	d10c      	bne.n	8003f96 <HAL_RCC_OscConfig+0x312>
 8003f7c:	4b77      	ldr	r3, [pc, #476]	; (800415c <HAL_RCC_OscConfig+0x4d8>)
 8003f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f80:	4a76      	ldr	r2, [pc, #472]	; (800415c <HAL_RCC_OscConfig+0x4d8>)
 8003f82:	f043 0304 	orr.w	r3, r3, #4
 8003f86:	6713      	str	r3, [r2, #112]	; 0x70
 8003f88:	4b74      	ldr	r3, [pc, #464]	; (800415c <HAL_RCC_OscConfig+0x4d8>)
 8003f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f8c:	4a73      	ldr	r2, [pc, #460]	; (800415c <HAL_RCC_OscConfig+0x4d8>)
 8003f8e:	f043 0301 	orr.w	r3, r3, #1
 8003f92:	6713      	str	r3, [r2, #112]	; 0x70
 8003f94:	e00b      	b.n	8003fae <HAL_RCC_OscConfig+0x32a>
 8003f96:	4b71      	ldr	r3, [pc, #452]	; (800415c <HAL_RCC_OscConfig+0x4d8>)
 8003f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f9a:	4a70      	ldr	r2, [pc, #448]	; (800415c <HAL_RCC_OscConfig+0x4d8>)
 8003f9c:	f023 0301 	bic.w	r3, r3, #1
 8003fa0:	6713      	str	r3, [r2, #112]	; 0x70
 8003fa2:	4b6e      	ldr	r3, [pc, #440]	; (800415c <HAL_RCC_OscConfig+0x4d8>)
 8003fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa6:	4a6d      	ldr	r2, [pc, #436]	; (800415c <HAL_RCC_OscConfig+0x4d8>)
 8003fa8:	f023 0304 	bic.w	r3, r3, #4
 8003fac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d015      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fb6:	f7fd f8c1 	bl	800113c <HAL_GetTick>
 8003fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fbc:	e00a      	b.n	8003fd4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fbe:	f7fd f8bd 	bl	800113c <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d901      	bls.n	8003fd4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e0bc      	b.n	800414e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fd4:	4b61      	ldr	r3, [pc, #388]	; (800415c <HAL_RCC_OscConfig+0x4d8>)
 8003fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd8:	f003 0302 	and.w	r3, r3, #2
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d0ee      	beq.n	8003fbe <HAL_RCC_OscConfig+0x33a>
 8003fe0:	e014      	b.n	800400c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fe2:	f7fd f8ab 	bl	800113c <HAL_GetTick>
 8003fe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fe8:	e00a      	b.n	8004000 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fea:	f7fd f8a7 	bl	800113c <HAL_GetTick>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d901      	bls.n	8004000 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e0a6      	b.n	800414e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004000:	4b56      	ldr	r3, [pc, #344]	; (800415c <HAL_RCC_OscConfig+0x4d8>)
 8004002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004004:	f003 0302 	and.w	r3, r3, #2
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1ee      	bne.n	8003fea <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800400c:	7dfb      	ldrb	r3, [r7, #23]
 800400e:	2b01      	cmp	r3, #1
 8004010:	d105      	bne.n	800401e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004012:	4b52      	ldr	r3, [pc, #328]	; (800415c <HAL_RCC_OscConfig+0x4d8>)
 8004014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004016:	4a51      	ldr	r2, [pc, #324]	; (800415c <HAL_RCC_OscConfig+0x4d8>)
 8004018:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800401c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	699b      	ldr	r3, [r3, #24]
 8004022:	2b00      	cmp	r3, #0
 8004024:	f000 8092 	beq.w	800414c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004028:	4b4c      	ldr	r3, [pc, #304]	; (800415c <HAL_RCC_OscConfig+0x4d8>)
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f003 030c 	and.w	r3, r3, #12
 8004030:	2b08      	cmp	r3, #8
 8004032:	d05c      	beq.n	80040ee <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	2b02      	cmp	r3, #2
 800403a:	d141      	bne.n	80040c0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800403c:	4b48      	ldr	r3, [pc, #288]	; (8004160 <HAL_RCC_OscConfig+0x4dc>)
 800403e:	2200      	movs	r2, #0
 8004040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004042:	f7fd f87b 	bl	800113c <HAL_GetTick>
 8004046:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004048:	e008      	b.n	800405c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800404a:	f7fd f877 	bl	800113c <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	2b02      	cmp	r3, #2
 8004056:	d901      	bls.n	800405c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e078      	b.n	800414e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800405c:	4b3f      	ldr	r3, [pc, #252]	; (800415c <HAL_RCC_OscConfig+0x4d8>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d1f0      	bne.n	800404a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	69da      	ldr	r2, [r3, #28]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a1b      	ldr	r3, [r3, #32]
 8004070:	431a      	orrs	r2, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004076:	019b      	lsls	r3, r3, #6
 8004078:	431a      	orrs	r2, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407e:	085b      	lsrs	r3, r3, #1
 8004080:	3b01      	subs	r3, #1
 8004082:	041b      	lsls	r3, r3, #16
 8004084:	431a      	orrs	r2, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800408a:	061b      	lsls	r3, r3, #24
 800408c:	4933      	ldr	r1, [pc, #204]	; (800415c <HAL_RCC_OscConfig+0x4d8>)
 800408e:	4313      	orrs	r3, r2
 8004090:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004092:	4b33      	ldr	r3, [pc, #204]	; (8004160 <HAL_RCC_OscConfig+0x4dc>)
 8004094:	2201      	movs	r2, #1
 8004096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004098:	f7fd f850 	bl	800113c <HAL_GetTick>
 800409c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800409e:	e008      	b.n	80040b2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040a0:	f7fd f84c 	bl	800113c <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d901      	bls.n	80040b2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e04d      	b.n	800414e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040b2:	4b2a      	ldr	r3, [pc, #168]	; (800415c <HAL_RCC_OscConfig+0x4d8>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d0f0      	beq.n	80040a0 <HAL_RCC_OscConfig+0x41c>
 80040be:	e045      	b.n	800414c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040c0:	4b27      	ldr	r3, [pc, #156]	; (8004160 <HAL_RCC_OscConfig+0x4dc>)
 80040c2:	2200      	movs	r2, #0
 80040c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040c6:	f7fd f839 	bl	800113c <HAL_GetTick>
 80040ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040cc:	e008      	b.n	80040e0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040ce:	f7fd f835 	bl	800113c <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d901      	bls.n	80040e0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e036      	b.n	800414e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040e0:	4b1e      	ldr	r3, [pc, #120]	; (800415c <HAL_RCC_OscConfig+0x4d8>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d1f0      	bne.n	80040ce <HAL_RCC_OscConfig+0x44a>
 80040ec:	e02e      	b.n	800414c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	699b      	ldr	r3, [r3, #24]
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d101      	bne.n	80040fa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e029      	b.n	800414e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80040fa:	4b18      	ldr	r3, [pc, #96]	; (800415c <HAL_RCC_OscConfig+0x4d8>)
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	69db      	ldr	r3, [r3, #28]
 800410a:	429a      	cmp	r2, r3
 800410c:	d11c      	bne.n	8004148 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004118:	429a      	cmp	r2, r3
 800411a:	d115      	bne.n	8004148 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800411c:	68fa      	ldr	r2, [r7, #12]
 800411e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004122:	4013      	ands	r3, r2
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004128:	4293      	cmp	r3, r2
 800412a:	d10d      	bne.n	8004148 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004136:	429a      	cmp	r2, r3
 8004138:	d106      	bne.n	8004148 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004144:	429a      	cmp	r2, r3
 8004146:	d001      	beq.n	800414c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e000      	b.n	800414e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800414c:	2300      	movs	r3, #0
}
 800414e:	4618      	mov	r0, r3
 8004150:	3718      	adds	r7, #24
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	40007000 	.word	0x40007000
 800415c:	40023800 	.word	0x40023800
 8004160:	42470060 	.word	0x42470060

08004164 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d101      	bne.n	8004178 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e0cc      	b.n	8004312 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004178:	4b68      	ldr	r3, [pc, #416]	; (800431c <HAL_RCC_ClockConfig+0x1b8>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 030f 	and.w	r3, r3, #15
 8004180:	683a      	ldr	r2, [r7, #0]
 8004182:	429a      	cmp	r2, r3
 8004184:	d90c      	bls.n	80041a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004186:	4b65      	ldr	r3, [pc, #404]	; (800431c <HAL_RCC_ClockConfig+0x1b8>)
 8004188:	683a      	ldr	r2, [r7, #0]
 800418a:	b2d2      	uxtb	r2, r2
 800418c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800418e:	4b63      	ldr	r3, [pc, #396]	; (800431c <HAL_RCC_ClockConfig+0x1b8>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 030f 	and.w	r3, r3, #15
 8004196:	683a      	ldr	r2, [r7, #0]
 8004198:	429a      	cmp	r2, r3
 800419a:	d001      	beq.n	80041a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e0b8      	b.n	8004312 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0302 	and.w	r3, r3, #2
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d020      	beq.n	80041ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0304 	and.w	r3, r3, #4
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d005      	beq.n	80041c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041b8:	4b59      	ldr	r3, [pc, #356]	; (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	4a58      	ldr	r2, [pc, #352]	; (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 80041be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80041c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0308 	and.w	r3, r3, #8
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d005      	beq.n	80041dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041d0:	4b53      	ldr	r3, [pc, #332]	; (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	4a52      	ldr	r2, [pc, #328]	; (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 80041d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80041da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041dc:	4b50      	ldr	r3, [pc, #320]	; (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	494d      	ldr	r1, [pc, #308]	; (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0301 	and.w	r3, r3, #1
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d044      	beq.n	8004284 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d107      	bne.n	8004212 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004202:	4b47      	ldr	r3, [pc, #284]	; (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d119      	bne.n	8004242 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e07f      	b.n	8004312 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	2b02      	cmp	r3, #2
 8004218:	d003      	beq.n	8004222 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800421e:	2b03      	cmp	r3, #3
 8004220:	d107      	bne.n	8004232 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004222:	4b3f      	ldr	r3, [pc, #252]	; (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d109      	bne.n	8004242 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e06f      	b.n	8004312 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004232:	4b3b      	ldr	r3, [pc, #236]	; (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0302 	and.w	r3, r3, #2
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e067      	b.n	8004312 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004242:	4b37      	ldr	r3, [pc, #220]	; (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f023 0203 	bic.w	r2, r3, #3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	4934      	ldr	r1, [pc, #208]	; (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 8004250:	4313      	orrs	r3, r2
 8004252:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004254:	f7fc ff72 	bl	800113c <HAL_GetTick>
 8004258:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800425a:	e00a      	b.n	8004272 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800425c:	f7fc ff6e 	bl	800113c <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	f241 3288 	movw	r2, #5000	; 0x1388
 800426a:	4293      	cmp	r3, r2
 800426c:	d901      	bls.n	8004272 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e04f      	b.n	8004312 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004272:	4b2b      	ldr	r3, [pc, #172]	; (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f003 020c 	and.w	r2, r3, #12
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	429a      	cmp	r2, r3
 8004282:	d1eb      	bne.n	800425c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004284:	4b25      	ldr	r3, [pc, #148]	; (800431c <HAL_RCC_ClockConfig+0x1b8>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 030f 	and.w	r3, r3, #15
 800428c:	683a      	ldr	r2, [r7, #0]
 800428e:	429a      	cmp	r2, r3
 8004290:	d20c      	bcs.n	80042ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004292:	4b22      	ldr	r3, [pc, #136]	; (800431c <HAL_RCC_ClockConfig+0x1b8>)
 8004294:	683a      	ldr	r2, [r7, #0]
 8004296:	b2d2      	uxtb	r2, r2
 8004298:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800429a:	4b20      	ldr	r3, [pc, #128]	; (800431c <HAL_RCC_ClockConfig+0x1b8>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 030f 	and.w	r3, r3, #15
 80042a2:	683a      	ldr	r2, [r7, #0]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d001      	beq.n	80042ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e032      	b.n	8004312 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0304 	and.w	r3, r3, #4
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d008      	beq.n	80042ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042b8:	4b19      	ldr	r3, [pc, #100]	; (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	4916      	ldr	r1, [pc, #88]	; (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0308 	and.w	r3, r3, #8
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d009      	beq.n	80042ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042d6:	4b12      	ldr	r3, [pc, #72]	; (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	00db      	lsls	r3, r3, #3
 80042e4:	490e      	ldr	r1, [pc, #56]	; (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80042ea:	f000 f821 	bl	8004330 <HAL_RCC_GetSysClockFreq>
 80042ee:	4601      	mov	r1, r0
 80042f0:	4b0b      	ldr	r3, [pc, #44]	; (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	091b      	lsrs	r3, r3, #4
 80042f6:	f003 030f 	and.w	r3, r3, #15
 80042fa:	4a0a      	ldr	r2, [pc, #40]	; (8004324 <HAL_RCC_ClockConfig+0x1c0>)
 80042fc:	5cd3      	ldrb	r3, [r2, r3]
 80042fe:	fa21 f303 	lsr.w	r3, r1, r3
 8004302:	4a09      	ldr	r2, [pc, #36]	; (8004328 <HAL_RCC_ClockConfig+0x1c4>)
 8004304:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004306:	4b09      	ldr	r3, [pc, #36]	; (800432c <HAL_RCC_ClockConfig+0x1c8>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4618      	mov	r0, r3
 800430c:	f7fc fed2 	bl	80010b4 <HAL_InitTick>

  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3710      	adds	r7, #16
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	40023c00 	.word	0x40023c00
 8004320:	40023800 	.word	0x40023800
 8004324:	080080f4 	.word	0x080080f4
 8004328:	20000000 	.word	0x20000000
 800432c:	20000004 	.word	0x20000004

08004330 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004332:	b085      	sub	sp, #20
 8004334:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004336:	2300      	movs	r3, #0
 8004338:	607b      	str	r3, [r7, #4]
 800433a:	2300      	movs	r3, #0
 800433c:	60fb      	str	r3, [r7, #12]
 800433e:	2300      	movs	r3, #0
 8004340:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004342:	2300      	movs	r3, #0
 8004344:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004346:	4b63      	ldr	r3, [pc, #396]	; (80044d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	f003 030c 	and.w	r3, r3, #12
 800434e:	2b04      	cmp	r3, #4
 8004350:	d007      	beq.n	8004362 <HAL_RCC_GetSysClockFreq+0x32>
 8004352:	2b08      	cmp	r3, #8
 8004354:	d008      	beq.n	8004368 <HAL_RCC_GetSysClockFreq+0x38>
 8004356:	2b00      	cmp	r3, #0
 8004358:	f040 80b4 	bne.w	80044c4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800435c:	4b5e      	ldr	r3, [pc, #376]	; (80044d8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800435e:	60bb      	str	r3, [r7, #8]
       break;
 8004360:	e0b3      	b.n	80044ca <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004362:	4b5e      	ldr	r3, [pc, #376]	; (80044dc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004364:	60bb      	str	r3, [r7, #8]
      break;
 8004366:	e0b0      	b.n	80044ca <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004368:	4b5a      	ldr	r3, [pc, #360]	; (80044d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004370:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004372:	4b58      	ldr	r3, [pc, #352]	; (80044d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d04a      	beq.n	8004414 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800437e:	4b55      	ldr	r3, [pc, #340]	; (80044d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	099b      	lsrs	r3, r3, #6
 8004384:	f04f 0400 	mov.w	r4, #0
 8004388:	f240 11ff 	movw	r1, #511	; 0x1ff
 800438c:	f04f 0200 	mov.w	r2, #0
 8004390:	ea03 0501 	and.w	r5, r3, r1
 8004394:	ea04 0602 	and.w	r6, r4, r2
 8004398:	4629      	mov	r1, r5
 800439a:	4632      	mov	r2, r6
 800439c:	f04f 0300 	mov.w	r3, #0
 80043a0:	f04f 0400 	mov.w	r4, #0
 80043a4:	0154      	lsls	r4, r2, #5
 80043a6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80043aa:	014b      	lsls	r3, r1, #5
 80043ac:	4619      	mov	r1, r3
 80043ae:	4622      	mov	r2, r4
 80043b0:	1b49      	subs	r1, r1, r5
 80043b2:	eb62 0206 	sbc.w	r2, r2, r6
 80043b6:	f04f 0300 	mov.w	r3, #0
 80043ba:	f04f 0400 	mov.w	r4, #0
 80043be:	0194      	lsls	r4, r2, #6
 80043c0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80043c4:	018b      	lsls	r3, r1, #6
 80043c6:	1a5b      	subs	r3, r3, r1
 80043c8:	eb64 0402 	sbc.w	r4, r4, r2
 80043cc:	f04f 0100 	mov.w	r1, #0
 80043d0:	f04f 0200 	mov.w	r2, #0
 80043d4:	00e2      	lsls	r2, r4, #3
 80043d6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80043da:	00d9      	lsls	r1, r3, #3
 80043dc:	460b      	mov	r3, r1
 80043de:	4614      	mov	r4, r2
 80043e0:	195b      	adds	r3, r3, r5
 80043e2:	eb44 0406 	adc.w	r4, r4, r6
 80043e6:	f04f 0100 	mov.w	r1, #0
 80043ea:	f04f 0200 	mov.w	r2, #0
 80043ee:	0262      	lsls	r2, r4, #9
 80043f0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80043f4:	0259      	lsls	r1, r3, #9
 80043f6:	460b      	mov	r3, r1
 80043f8:	4614      	mov	r4, r2
 80043fa:	4618      	mov	r0, r3
 80043fc:	4621      	mov	r1, r4
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f04f 0400 	mov.w	r4, #0
 8004404:	461a      	mov	r2, r3
 8004406:	4623      	mov	r3, r4
 8004408:	f7fb fee6 	bl	80001d8 <__aeabi_uldivmod>
 800440c:	4603      	mov	r3, r0
 800440e:	460c      	mov	r4, r1
 8004410:	60fb      	str	r3, [r7, #12]
 8004412:	e049      	b.n	80044a8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004414:	4b2f      	ldr	r3, [pc, #188]	; (80044d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	099b      	lsrs	r3, r3, #6
 800441a:	f04f 0400 	mov.w	r4, #0
 800441e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004422:	f04f 0200 	mov.w	r2, #0
 8004426:	ea03 0501 	and.w	r5, r3, r1
 800442a:	ea04 0602 	and.w	r6, r4, r2
 800442e:	4629      	mov	r1, r5
 8004430:	4632      	mov	r2, r6
 8004432:	f04f 0300 	mov.w	r3, #0
 8004436:	f04f 0400 	mov.w	r4, #0
 800443a:	0154      	lsls	r4, r2, #5
 800443c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004440:	014b      	lsls	r3, r1, #5
 8004442:	4619      	mov	r1, r3
 8004444:	4622      	mov	r2, r4
 8004446:	1b49      	subs	r1, r1, r5
 8004448:	eb62 0206 	sbc.w	r2, r2, r6
 800444c:	f04f 0300 	mov.w	r3, #0
 8004450:	f04f 0400 	mov.w	r4, #0
 8004454:	0194      	lsls	r4, r2, #6
 8004456:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800445a:	018b      	lsls	r3, r1, #6
 800445c:	1a5b      	subs	r3, r3, r1
 800445e:	eb64 0402 	sbc.w	r4, r4, r2
 8004462:	f04f 0100 	mov.w	r1, #0
 8004466:	f04f 0200 	mov.w	r2, #0
 800446a:	00e2      	lsls	r2, r4, #3
 800446c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004470:	00d9      	lsls	r1, r3, #3
 8004472:	460b      	mov	r3, r1
 8004474:	4614      	mov	r4, r2
 8004476:	195b      	adds	r3, r3, r5
 8004478:	eb44 0406 	adc.w	r4, r4, r6
 800447c:	f04f 0100 	mov.w	r1, #0
 8004480:	f04f 0200 	mov.w	r2, #0
 8004484:	02a2      	lsls	r2, r4, #10
 8004486:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800448a:	0299      	lsls	r1, r3, #10
 800448c:	460b      	mov	r3, r1
 800448e:	4614      	mov	r4, r2
 8004490:	4618      	mov	r0, r3
 8004492:	4621      	mov	r1, r4
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f04f 0400 	mov.w	r4, #0
 800449a:	461a      	mov	r2, r3
 800449c:	4623      	mov	r3, r4
 800449e:	f7fb fe9b 	bl	80001d8 <__aeabi_uldivmod>
 80044a2:	4603      	mov	r3, r0
 80044a4:	460c      	mov	r4, r1
 80044a6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80044a8:	4b0a      	ldr	r3, [pc, #40]	; (80044d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	0c1b      	lsrs	r3, r3, #16
 80044ae:	f003 0303 	and.w	r3, r3, #3
 80044b2:	3301      	adds	r3, #1
 80044b4:	005b      	lsls	r3, r3, #1
 80044b6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80044b8:	68fa      	ldr	r2, [r7, #12]
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80044c0:	60bb      	str	r3, [r7, #8]
      break;
 80044c2:	e002      	b.n	80044ca <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044c4:	4b04      	ldr	r3, [pc, #16]	; (80044d8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80044c6:	60bb      	str	r3, [r7, #8]
      break;
 80044c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044ca:	68bb      	ldr	r3, [r7, #8]
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3714      	adds	r7, #20
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044d4:	40023800 	.word	0x40023800
 80044d8:	00f42400 	.word	0x00f42400
 80044dc:	007a1200 	.word	0x007a1200

080044e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044e0:	b480      	push	{r7}
 80044e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044e4:	4b03      	ldr	r3, [pc, #12]	; (80044f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80044e6:	681b      	ldr	r3, [r3, #0]
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr
 80044f2:	bf00      	nop
 80044f4:	20000000 	.word	0x20000000

080044f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80044fc:	f7ff fff0 	bl	80044e0 <HAL_RCC_GetHCLKFreq>
 8004500:	4601      	mov	r1, r0
 8004502:	4b05      	ldr	r3, [pc, #20]	; (8004518 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	0a9b      	lsrs	r3, r3, #10
 8004508:	f003 0307 	and.w	r3, r3, #7
 800450c:	4a03      	ldr	r2, [pc, #12]	; (800451c <HAL_RCC_GetPCLK1Freq+0x24>)
 800450e:	5cd3      	ldrb	r3, [r2, r3]
 8004510:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004514:	4618      	mov	r0, r3
 8004516:	bd80      	pop	{r7, pc}
 8004518:	40023800 	.word	0x40023800
 800451c:	08008104 	.word	0x08008104

08004520 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b086      	sub	sp, #24
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004528:	2300      	movs	r3, #0
 800452a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800452c:	2300      	movs	r3, #0
 800452e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0301 	and.w	r3, r3, #1
 8004538:	2b00      	cmp	r3, #0
 800453a:	d105      	bne.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004544:	2b00      	cmp	r3, #0
 8004546:	d038      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004548:	4b68      	ldr	r3, [pc, #416]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800454a:	2200      	movs	r2, #0
 800454c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800454e:	f7fc fdf5 	bl	800113c <HAL_GetTick>
 8004552:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004554:	e008      	b.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004556:	f7fc fdf1 	bl	800113c <HAL_GetTick>
 800455a:	4602      	mov	r2, r0
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	2b02      	cmp	r3, #2
 8004562:	d901      	bls.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004564:	2303      	movs	r3, #3
 8004566:	e0bd      	b.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004568:	4b61      	ldr	r3, [pc, #388]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d1f0      	bne.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685a      	ldr	r2, [r3, #4]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	019b      	lsls	r3, r3, #6
 800457e:	431a      	orrs	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	071b      	lsls	r3, r3, #28
 8004586:	495a      	ldr	r1, [pc, #360]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004588:	4313      	orrs	r3, r2
 800458a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800458e:	4b57      	ldr	r3, [pc, #348]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004590:	2201      	movs	r2, #1
 8004592:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004594:	f7fc fdd2 	bl	800113c <HAL_GetTick>
 8004598:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800459a:	e008      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800459c:	f7fc fdce 	bl	800113c <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d901      	bls.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e09a      	b.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80045ae:	4b50      	ldr	r3, [pc, #320]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d0f0      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0302 	and.w	r3, r3, #2
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	f000 8083 	beq.w	80046ce <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80045c8:	2300      	movs	r3, #0
 80045ca:	60fb      	str	r3, [r7, #12]
 80045cc:	4b48      	ldr	r3, [pc, #288]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d0:	4a47      	ldr	r2, [pc, #284]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045d6:	6413      	str	r3, [r2, #64]	; 0x40
 80045d8:	4b45      	ldr	r3, [pc, #276]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045e0:	60fb      	str	r3, [r7, #12]
 80045e2:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80045e4:	4b43      	ldr	r3, [pc, #268]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a42      	ldr	r2, [pc, #264]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80045ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045ee:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80045f0:	f7fc fda4 	bl	800113c <HAL_GetTick>
 80045f4:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80045f6:	e008      	b.n	800460a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80045f8:	f7fc fda0 	bl	800113c <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	2b02      	cmp	r3, #2
 8004604:	d901      	bls.n	800460a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e06c      	b.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800460a:	4b3a      	ldr	r3, [pc, #232]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004612:	2b00      	cmp	r3, #0
 8004614:	d0f0      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004616:	4b36      	ldr	r3, [pc, #216]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800461a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800461e:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d02f      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800462e:	693a      	ldr	r2, [r7, #16]
 8004630:	429a      	cmp	r2, r3
 8004632:	d028      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004634:	4b2e      	ldr	r3, [pc, #184]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004638:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800463c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800463e:	4b2e      	ldr	r3, [pc, #184]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004640:	2201      	movs	r2, #1
 8004642:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004644:	4b2c      	ldr	r3, [pc, #176]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004646:	2200      	movs	r2, #0
 8004648:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800464a:	4a29      	ldr	r2, [pc, #164]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004650:	4b27      	ldr	r3, [pc, #156]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004654:	f003 0301 	and.w	r3, r3, #1
 8004658:	2b01      	cmp	r3, #1
 800465a:	d114      	bne.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800465c:	f7fc fd6e 	bl	800113c <HAL_GetTick>
 8004660:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004662:	e00a      	b.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004664:	f7fc fd6a 	bl	800113c <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004672:	4293      	cmp	r3, r2
 8004674:	d901      	bls.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	e034      	b.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800467a:	4b1d      	ldr	r3, [pc, #116]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800467c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800467e:	f003 0302 	and.w	r3, r3, #2
 8004682:	2b00      	cmp	r3, #0
 8004684:	d0ee      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800468e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004692:	d10d      	bne.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004694:	4b16      	ldr	r3, [pc, #88]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80046a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046a8:	4911      	ldr	r1, [pc, #68]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	608b      	str	r3, [r1, #8]
 80046ae:	e005      	b.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80046b0:	4b0f      	ldr	r3, [pc, #60]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	4a0e      	ldr	r2, [pc, #56]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046b6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80046ba:	6093      	str	r3, [r2, #8]
 80046bc:	4b0c      	ldr	r3, [pc, #48]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046c8:	4909      	ldr	r1, [pc, #36]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0308 	and.w	r3, r3, #8
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d003      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	7d1a      	ldrb	r2, [r3, #20]
 80046de:	4b07      	ldr	r3, [pc, #28]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80046e0:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80046e2:	2300      	movs	r3, #0
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3718      	adds	r7, #24
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	42470068 	.word	0x42470068
 80046f0:	40023800 	.word	0x40023800
 80046f4:	40007000 	.word	0x40007000
 80046f8:	42470e40 	.word	0x42470e40
 80046fc:	424711e0 	.word	0x424711e0

08004700 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004700:	b480      	push	{r7}
 8004702:	b087      	sub	sp, #28
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004708:	2300      	movs	r3, #0
 800470a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800470c:	2300      	movs	r3, #0
 800470e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004710:	2300      	movs	r3, #0
 8004712:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004714:	2300      	movs	r3, #0
 8004716:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2b01      	cmp	r3, #1
 800471c:	d13f      	bne.n	800479e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800471e:	4b23      	ldr	r3, [pc, #140]	; (80047ac <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004726:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d004      	beq.n	8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800472e:	2b01      	cmp	r3, #1
 8004730:	d131      	bne.n	8004796 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004732:	4b1f      	ldr	r3, [pc, #124]	; (80047b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004734:	617b      	str	r3, [r7, #20]
          break;
 8004736:	e031      	b.n	800479c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004738:	4b1c      	ldr	r3, [pc, #112]	; (80047ac <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004740:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004744:	d109      	bne.n	800475a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004746:	4b19      	ldr	r3, [pc, #100]	; (80047ac <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004748:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800474c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004750:	4a18      	ldr	r2, [pc, #96]	; (80047b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004752:	fbb2 f3f3 	udiv	r3, r2, r3
 8004756:	613b      	str	r3, [r7, #16]
 8004758:	e008      	b.n	800476c <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800475a:	4b14      	ldr	r3, [pc, #80]	; (80047ac <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800475c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004760:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004764:	4a14      	ldr	r2, [pc, #80]	; (80047b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004766:	fbb2 f3f3 	udiv	r3, r2, r3
 800476a:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800476c:	4b0f      	ldr	r3, [pc, #60]	; (80047ac <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800476e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004772:	099b      	lsrs	r3, r3, #6
 8004774:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	fb02 f303 	mul.w	r3, r2, r3
 800477e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004780:	4b0a      	ldr	r3, [pc, #40]	; (80047ac <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004782:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004786:	0f1b      	lsrs	r3, r3, #28
 8004788:	f003 0307 	and.w	r3, r3, #7
 800478c:	68ba      	ldr	r2, [r7, #8]
 800478e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004792:	617b      	str	r3, [r7, #20]
          break;
 8004794:	e002      	b.n	800479c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004796:	2300      	movs	r3, #0
 8004798:	617b      	str	r3, [r7, #20]
          break;
 800479a:	bf00      	nop
        }
      }
      break;
 800479c:	bf00      	nop
    }
  }
  return frequency;
 800479e:	697b      	ldr	r3, [r7, #20]
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	371c      	adds	r7, #28
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr
 80047ac:	40023800 	.word	0x40023800
 80047b0:	00bb8000 	.word	0x00bb8000
 80047b4:	007a1200 	.word	0x007a1200
 80047b8:	00f42400 	.word	0x00f42400

080047bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b082      	sub	sp, #8
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d101      	bne.n	80047ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e056      	b.n	800487c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d106      	bne.n	80047ee <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f7fc fb23 	bl	8000e34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2202      	movs	r2, #2
 80047f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004804:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685a      	ldr	r2, [r3, #4]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	431a      	orrs	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	431a      	orrs	r2, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	431a      	orrs	r2, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	695b      	ldr	r3, [r3, #20]
 8004820:	431a      	orrs	r2, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	699b      	ldr	r3, [r3, #24]
 8004826:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800482a:	431a      	orrs	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	69db      	ldr	r3, [r3, #28]
 8004830:	431a      	orrs	r2, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a1b      	ldr	r3, [r3, #32]
 8004836:	ea42 0103 	orr.w	r1, r2, r3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	430a      	orrs	r2, r1
 8004844:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	699b      	ldr	r3, [r3, #24]
 800484a:	0c1b      	lsrs	r3, r3, #16
 800484c:	f003 0104 	and.w	r1, r3, #4
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	430a      	orrs	r2, r1
 800485a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	69da      	ldr	r2, [r3, #28]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800486a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2201      	movs	r2, #1
 8004876:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	3708      	adds	r7, #8
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}

08004884 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b088      	sub	sp, #32
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	603b      	str	r3, [r7, #0]
 8004890:	4613      	mov	r3, r2
 8004892:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004894:	2300      	movs	r3, #0
 8004896:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d101      	bne.n	80048a6 <HAL_SPI_Transmit+0x22>
 80048a2:	2302      	movs	r3, #2
 80048a4:	e11e      	b.n	8004ae4 <HAL_SPI_Transmit+0x260>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2201      	movs	r2, #1
 80048aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80048ae:	f7fc fc45 	bl	800113c <HAL_GetTick>
 80048b2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80048b4:	88fb      	ldrh	r3, [r7, #6]
 80048b6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d002      	beq.n	80048ca <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80048c4:	2302      	movs	r3, #2
 80048c6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80048c8:	e103      	b.n	8004ad2 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d002      	beq.n	80048d6 <HAL_SPI_Transmit+0x52>
 80048d0:	88fb      	ldrh	r3, [r7, #6]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d102      	bne.n	80048dc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80048da:	e0fa      	b.n	8004ad2 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2203      	movs	r2, #3
 80048e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2200      	movs	r2, #0
 80048e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	68ba      	ldr	r2, [r7, #8]
 80048ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	88fa      	ldrh	r2, [r7, #6]
 80048f4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	88fa      	ldrh	r2, [r7, #6]
 80048fa:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2200      	movs	r2, #0
 8004900:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2200      	movs	r2, #0
 8004906:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2200      	movs	r2, #0
 800490c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2200      	movs	r2, #0
 8004912:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2200      	movs	r2, #0
 8004918:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004922:	d107      	bne.n	8004934 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004932:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800493e:	2b40      	cmp	r3, #64	; 0x40
 8004940:	d007      	beq.n	8004952 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004950:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800495a:	d14b      	bne.n	80049f4 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d002      	beq.n	800496a <HAL_SPI_Transmit+0xe6>
 8004964:	8afb      	ldrh	r3, [r7, #22]
 8004966:	2b01      	cmp	r3, #1
 8004968:	d13e      	bne.n	80049e8 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800496e:	881a      	ldrh	r2, [r3, #0]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800497a:	1c9a      	adds	r2, r3, #2
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004984:	b29b      	uxth	r3, r3
 8004986:	3b01      	subs	r3, #1
 8004988:	b29a      	uxth	r2, r3
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800498e:	e02b      	b.n	80049e8 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f003 0302 	and.w	r3, r3, #2
 800499a:	2b02      	cmp	r3, #2
 800499c:	d112      	bne.n	80049c4 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a2:	881a      	ldrh	r2, [r3, #0]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ae:	1c9a      	adds	r2, r3, #2
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	3b01      	subs	r3, #1
 80049bc:	b29a      	uxth	r2, r3
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	86da      	strh	r2, [r3, #54]	; 0x36
 80049c2:	e011      	b.n	80049e8 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049c4:	f7fc fbba 	bl	800113c <HAL_GetTick>
 80049c8:	4602      	mov	r2, r0
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	683a      	ldr	r2, [r7, #0]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d803      	bhi.n	80049dc <HAL_SPI_Transmit+0x158>
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049da:	d102      	bne.n	80049e2 <HAL_SPI_Transmit+0x15e>
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d102      	bne.n	80049e8 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80049e6:	e074      	b.n	8004ad2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1ce      	bne.n	8004990 <HAL_SPI_Transmit+0x10c>
 80049f2:	e04c      	b.n	8004a8e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d002      	beq.n	8004a02 <HAL_SPI_Transmit+0x17e>
 80049fc:	8afb      	ldrh	r3, [r7, #22]
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d140      	bne.n	8004a84 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	330c      	adds	r3, #12
 8004a0c:	7812      	ldrb	r2, [r2, #0]
 8004a0e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a14:	1c5a      	adds	r2, r3, #1
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	3b01      	subs	r3, #1
 8004a22:	b29a      	uxth	r2, r3
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004a28:	e02c      	b.n	8004a84 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	f003 0302 	and.w	r3, r3, #2
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	d113      	bne.n	8004a60 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	330c      	adds	r3, #12
 8004a42:	7812      	ldrb	r2, [r2, #0]
 8004a44:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a4a:	1c5a      	adds	r2, r3, #1
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	3b01      	subs	r3, #1
 8004a58:	b29a      	uxth	r2, r3
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	86da      	strh	r2, [r3, #54]	; 0x36
 8004a5e:	e011      	b.n	8004a84 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a60:	f7fc fb6c 	bl	800113c <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	69bb      	ldr	r3, [r7, #24]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	683a      	ldr	r2, [r7, #0]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d803      	bhi.n	8004a78 <HAL_SPI_Transmit+0x1f4>
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a76:	d102      	bne.n	8004a7e <HAL_SPI_Transmit+0x1fa>
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d102      	bne.n	8004a84 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004a82:	e026      	b.n	8004ad2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d1cd      	bne.n	8004a2a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a8e:	69ba      	ldr	r2, [r7, #24]
 8004a90:	6839      	ldr	r1, [r7, #0]
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	f000 f894 	bl	8004bc0 <SPI_EndRxTxTransaction>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d002      	beq.n	8004aa4 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2220      	movs	r2, #32
 8004aa2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d10a      	bne.n	8004ac2 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004aac:	2300      	movs	r3, #0
 8004aae:	613b      	str	r3, [r7, #16]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	613b      	str	r3, [r7, #16]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	613b      	str	r3, [r7, #16]
 8004ac0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d002      	beq.n	8004ad0 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	77fb      	strb	r3, [r7, #31]
 8004ace:	e000      	b.n	8004ad2 <HAL_SPI_Transmit+0x24e>
  }

error:
 8004ad0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004ae2:	7ffb      	ldrb	r3, [r7, #31]
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3720      	adds	r7, #32
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	603b      	str	r3, [r7, #0]
 8004af8:	4613      	mov	r3, r2
 8004afa:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004afc:	e04c      	b.n	8004b98 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b04:	d048      	beq.n	8004b98 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004b06:	f7fc fb19 	bl	800113c <HAL_GetTick>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	683a      	ldr	r2, [r7, #0]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d902      	bls.n	8004b1c <SPI_WaitFlagStateUntilTimeout+0x30>
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d13d      	bne.n	8004b98 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	685a      	ldr	r2, [r3, #4]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004b2a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b34:	d111      	bne.n	8004b5a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b3e:	d004      	beq.n	8004b4a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b48:	d107      	bne.n	8004b5a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b58:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b62:	d10f      	bne.n	8004b84 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b72:	601a      	str	r2, [r3, #0]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b82:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004b94:	2303      	movs	r3, #3
 8004b96:	e00f      	b.n	8004bb8 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	689a      	ldr	r2, [r3, #8]
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	68ba      	ldr	r2, [r7, #8]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	bf0c      	ite	eq
 8004ba8:	2301      	moveq	r3, #1
 8004baa:	2300      	movne	r3, #0
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	461a      	mov	r2, r3
 8004bb0:	79fb      	ldrb	r3, [r7, #7]
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d1a3      	bne.n	8004afe <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004bb6:	2300      	movs	r3, #0
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3710      	adds	r7, #16
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b088      	sub	sp, #32
 8004bc4:	af02      	add	r7, sp, #8
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	60b9      	str	r1, [r7, #8]
 8004bca:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004bcc:	4b1b      	ldr	r3, [pc, #108]	; (8004c3c <SPI_EndRxTxTransaction+0x7c>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a1b      	ldr	r2, [pc, #108]	; (8004c40 <SPI_EndRxTxTransaction+0x80>)
 8004bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd6:	0d5b      	lsrs	r3, r3, #21
 8004bd8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004bdc:	fb02 f303 	mul.w	r3, r2, r3
 8004be0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bea:	d112      	bne.n	8004c12 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	9300      	str	r3, [sp, #0]
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	2180      	movs	r1, #128	; 0x80
 8004bf6:	68f8      	ldr	r0, [r7, #12]
 8004bf8:	f7ff ff78 	bl	8004aec <SPI_WaitFlagStateUntilTimeout>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d016      	beq.n	8004c30 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c06:	f043 0220 	orr.w	r2, r3, #32
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e00f      	b.n	8004c32 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d00a      	beq.n	8004c2e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c28:	2b80      	cmp	r3, #128	; 0x80
 8004c2a:	d0f2      	beq.n	8004c12 <SPI_EndRxTxTransaction+0x52>
 8004c2c:	e000      	b.n	8004c30 <SPI_EndRxTxTransaction+0x70>
        break;
 8004c2e:	bf00      	nop
  }

  return HAL_OK;
 8004c30:	2300      	movs	r3, #0
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3718      	adds	r7, #24
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	20000000 	.word	0x20000000
 8004c40:	165e9f81 	.word	0x165e9f81

08004c44 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c44:	b084      	sub	sp, #16
 8004c46:	b580      	push	{r7, lr}
 8004c48:	b084      	sub	sp, #16
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]
 8004c4e:	f107 001c 	add.w	r0, r7, #28
 8004c52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d122      	bne.n	8004ca2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c60:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004c70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004c84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d105      	bne.n	8004c96 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 f94a 	bl	8004f30 <USB_CoreReset>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	73fb      	strb	r3, [r7, #15]
 8004ca0:	e01a      	b.n	8004cd8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 f93e 	bl	8004f30 <USB_CoreReset>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004cb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d106      	bne.n	8004ccc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	639a      	str	r2, [r3, #56]	; 0x38
 8004cca:	e005      	b.n	8004cd8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d10b      	bne.n	8004cf6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	f043 0206 	orr.w	r2, r3, #6
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f043 0220 	orr.w	r2, r3, #32
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3710      	adds	r7, #16
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d02:	b004      	add	sp, #16
 8004d04:	4770      	bx	lr

08004d06 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d06:	b480      	push	{r7}
 8004d08:	b083      	sub	sp, #12
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	f043 0201 	orr.w	r2, r3, #1
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d1a:	2300      	movs	r3, #0
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	370c      	adds	r7, #12
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr

08004d28 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	f023 0201 	bic.w	r2, r3, #1
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	370c      	adds	r7, #12
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr

08004d4a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004d4a:	b580      	push	{r7, lr}
 8004d4c:	b082      	sub	sp, #8
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
 8004d52:	460b      	mov	r3, r1
 8004d54:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004d62:	78fb      	ldrb	r3, [r7, #3]
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d106      	bne.n	8004d76 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	60da      	str	r2, [r3, #12]
 8004d74:	e00b      	b.n	8004d8e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004d76:	78fb      	ldrb	r3, [r7, #3]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d106      	bne.n	8004d8a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	60da      	str	r2, [r3, #12]
 8004d88:	e001      	b.n	8004d8e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e003      	b.n	8004d96 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004d8e:	2032      	movs	r0, #50	; 0x32
 8004d90:	f7fc f9e0 	bl	8001154 <HAL_Delay>

  return HAL_OK;
 8004d94:	2300      	movs	r3, #0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3708      	adds	r7, #8
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
	...

08004da0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b085      	sub	sp, #20
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004daa:	2300      	movs	r3, #0
 8004dac:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	019b      	lsls	r3, r3, #6
 8004db2:	f043 0220 	orr.w	r2, r3, #32
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	3301      	adds	r3, #1
 8004dbe:	60fb      	str	r3, [r7, #12]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	4a09      	ldr	r2, [pc, #36]	; (8004de8 <USB_FlushTxFifo+0x48>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d901      	bls.n	8004dcc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004dc8:	2303      	movs	r3, #3
 8004dca:	e006      	b.n	8004dda <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	691b      	ldr	r3, [r3, #16]
 8004dd0:	f003 0320 	and.w	r3, r3, #32
 8004dd4:	2b20      	cmp	r3, #32
 8004dd6:	d0f0      	beq.n	8004dba <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3714      	adds	r7, #20
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr
 8004de6:	bf00      	nop
 8004de8:	00030d40 	.word	0x00030d40

08004dec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b085      	sub	sp, #20
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004df4:	2300      	movs	r3, #0
 8004df6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2210      	movs	r2, #16
 8004dfc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	3301      	adds	r3, #1
 8004e02:	60fb      	str	r3, [r7, #12]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	4a09      	ldr	r2, [pc, #36]	; (8004e2c <USB_FlushRxFifo+0x40>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d901      	bls.n	8004e10 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004e0c:	2303      	movs	r3, #3
 8004e0e:	e006      	b.n	8004e1e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	691b      	ldr	r3, [r3, #16]
 8004e14:	f003 0310 	and.w	r3, r3, #16
 8004e18:	2b10      	cmp	r3, #16
 8004e1a:	d0f0      	beq.n	8004dfe <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004e1c:	2300      	movs	r3, #0
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3714      	adds	r7, #20
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr
 8004e2a:	bf00      	nop
 8004e2c:	00030d40 	.word	0x00030d40

08004e30 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b089      	sub	sp, #36	; 0x24
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	60b9      	str	r1, [r7, #8]
 8004e3a:	4611      	mov	r1, r2
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	460b      	mov	r3, r1
 8004e40:	71fb      	strb	r3, [r7, #7]
 8004e42:	4613      	mov	r3, r2
 8004e44:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8004e4e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d11a      	bne.n	8004e8c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004e56:	88bb      	ldrh	r3, [r7, #4]
 8004e58:	3303      	adds	r3, #3
 8004e5a:	089b      	lsrs	r3, r3, #2
 8004e5c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004e5e:	2300      	movs	r3, #0
 8004e60:	61bb      	str	r3, [r7, #24]
 8004e62:	e00f      	b.n	8004e84 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004e64:	79fb      	ldrb	r3, [r7, #7]
 8004e66:	031a      	lsls	r2, r3, #12
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	4413      	add	r3, r2
 8004e6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e70:	461a      	mov	r2, r3
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	3304      	adds	r3, #4
 8004e7c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	3301      	adds	r3, #1
 8004e82:	61bb      	str	r3, [r7, #24]
 8004e84:	69ba      	ldr	r2, [r7, #24]
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d3eb      	bcc.n	8004e64 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3724      	adds	r7, #36	; 0x24
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr

08004e9a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004e9a:	b480      	push	{r7}
 8004e9c:	b089      	sub	sp, #36	; 0x24
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	60f8      	str	r0, [r7, #12]
 8004ea2:	60b9      	str	r1, [r7, #8]
 8004ea4:	4613      	mov	r3, r2
 8004ea6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004eb0:	88fb      	ldrh	r3, [r7, #6]
 8004eb2:	3303      	adds	r3, #3
 8004eb4:	089b      	lsrs	r3, r3, #2
 8004eb6:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004eb8:	2300      	movs	r3, #0
 8004eba:	61bb      	str	r3, [r7, #24]
 8004ebc:	e00b      	b.n	8004ed6 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	601a      	str	r2, [r3, #0]
    pDest++;
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	3304      	adds	r3, #4
 8004ece:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	3301      	adds	r3, #1
 8004ed4:	61bb      	str	r3, [r7, #24]
 8004ed6:	69ba      	ldr	r2, [r7, #24]
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d3ef      	bcc.n	8004ebe <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004ede:	69fb      	ldr	r3, [r7, #28]
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3724      	adds	r7, #36	; 0x24
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr

08004eec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b085      	sub	sp, #20
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	695b      	ldr	r3, [r3, #20]
 8004ef8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	699b      	ldr	r3, [r3, #24]
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	4013      	ands	r3, r2
 8004f02:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004f04:	68fb      	ldr	r3, [r7, #12]
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3714      	adds	r7, #20
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr

08004f12 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004f12:	b480      	push	{r7}
 8004f14:	b083      	sub	sp, #12
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	695b      	ldr	r3, [r3, #20]
 8004f1e:	f003 0301 	and.w	r3, r3, #1
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	370c      	adds	r7, #12
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr
	...

08004f30 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b085      	sub	sp, #20
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	3301      	adds	r3, #1
 8004f40:	60fb      	str	r3, [r7, #12]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	4a13      	ldr	r2, [pc, #76]	; (8004f94 <USB_CoreReset+0x64>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d901      	bls.n	8004f4e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e01b      	b.n	8004f86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	daf2      	bge.n	8004f3c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004f56:	2300      	movs	r3, #0
 8004f58:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	f043 0201 	orr.w	r2, r3, #1
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	3301      	adds	r3, #1
 8004f6a:	60fb      	str	r3, [r7, #12]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	4a09      	ldr	r2, [pc, #36]	; (8004f94 <USB_CoreReset+0x64>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d901      	bls.n	8004f78 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004f74:	2303      	movs	r3, #3
 8004f76:	e006      	b.n	8004f86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	691b      	ldr	r3, [r3, #16]
 8004f7c:	f003 0301 	and.w	r3, r3, #1
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d0f0      	beq.n	8004f66 <USB_CoreReset+0x36>

  return HAL_OK;
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3714      	adds	r7, #20
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop
 8004f94:	00030d40 	.word	0x00030d40

08004f98 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f98:	b084      	sub	sp, #16
 8004f9a:	b580      	push	{r7, lr}
 8004f9c:	b084      	sub	sp, #16
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
 8004fa2:	f107 001c 	add.w	r0, r7, #28
 8004fa6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fbe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fca:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d018      	beq.n	800501c <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d10a      	bne.n	8005006 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	68ba      	ldr	r2, [r7, #8]
 8004ffa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ffe:	f043 0304 	orr.w	r3, r3, #4
 8005002:	6013      	str	r3, [r2, #0]
 8005004:	e014      	b.n	8005030 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	68ba      	ldr	r2, [r7, #8]
 8005010:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005014:	f023 0304 	bic.w	r3, r3, #4
 8005018:	6013      	str	r3, [r2, #0]
 800501a:	e009      	b.n	8005030 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	68ba      	ldr	r2, [r7, #8]
 8005026:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800502a:	f023 0304 	bic.w	r3, r3, #4
 800502e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005030:	2110      	movs	r1, #16
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f7ff feb4 	bl	8004da0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f7ff fed7 	bl	8004dec <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800503e:	2300      	movs	r3, #0
 8005040:	60fb      	str	r3, [r7, #12]
 8005042:	e015      	b.n	8005070 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	015a      	lsls	r2, r3, #5
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	4413      	add	r3, r2
 800504c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005050:	461a      	mov	r2, r3
 8005052:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005056:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	015a      	lsls	r2, r3, #5
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	4413      	add	r3, r2
 8005060:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005064:	461a      	mov	r2, r3
 8005066:	2300      	movs	r3, #0
 8005068:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	3301      	adds	r3, #1
 800506e:	60fb      	str	r3, [r7, #12]
 8005070:	6a3b      	ldr	r3, [r7, #32]
 8005072:	68fa      	ldr	r2, [r7, #12]
 8005074:	429a      	cmp	r2, r3
 8005076:	d3e5      	bcc.n	8005044 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8005078:	2101      	movs	r1, #1
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f000 f8ac 	bl	80051d8 <USB_DriveVbus>

  HAL_Delay(200U);
 8005080:	20c8      	movs	r0, #200	; 0xc8
 8005082:	f7fc f867 	bl	8001154 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005092:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800509c:	2b00      	cmp	r3, #0
 800509e:	d00b      	beq.n	80050b8 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050a6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a14      	ldr	r2, [pc, #80]	; (80050fc <USB_HostInit+0x164>)
 80050ac:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a13      	ldr	r2, [pc, #76]	; (8005100 <USB_HostInit+0x168>)
 80050b2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80050b6:	e009      	b.n	80050cc <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2280      	movs	r2, #128	; 0x80
 80050bc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4a10      	ldr	r2, [pc, #64]	; (8005104 <USB_HostInit+0x16c>)
 80050c2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4a10      	ldr	r2, [pc, #64]	; (8005108 <USB_HostInit+0x170>)
 80050c8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80050cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d105      	bne.n	80050de <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	f043 0210 	orr.w	r2, r3, #16
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	699a      	ldr	r2, [r3, #24]
 80050e2:	4b0a      	ldr	r3, [pc, #40]	; (800510c <USB_HostInit+0x174>)
 80050e4:	4313      	orrs	r3, r2
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80050ea:	2300      	movs	r3, #0
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3710      	adds	r7, #16
 80050f0:	46bd      	mov	sp, r7
 80050f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80050f6:	b004      	add	sp, #16
 80050f8:	4770      	bx	lr
 80050fa:	bf00      	nop
 80050fc:	01000200 	.word	0x01000200
 8005100:	00e00300 	.word	0x00e00300
 8005104:	00600080 	.word	0x00600080
 8005108:	004000e0 	.word	0x004000e0
 800510c:	a3200008 	.word	0xa3200008

08005110 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005110:	b480      	push	{r7}
 8005112:	b085      	sub	sp, #20
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	460b      	mov	r3, r1
 800511a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	68fa      	ldr	r2, [r7, #12]
 800512a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800512e:	f023 0303 	bic.w	r3, r3, #3
 8005132:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	78fb      	ldrb	r3, [r7, #3]
 800513e:	f003 0303 	and.w	r3, r3, #3
 8005142:	68f9      	ldr	r1, [r7, #12]
 8005144:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005148:	4313      	orrs	r3, r2
 800514a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800514c:	78fb      	ldrb	r3, [r7, #3]
 800514e:	2b01      	cmp	r3, #1
 8005150:	d107      	bne.n	8005162 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005158:	461a      	mov	r2, r3
 800515a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800515e:	6053      	str	r3, [r2, #4]
 8005160:	e009      	b.n	8005176 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005162:	78fb      	ldrb	r3, [r7, #3]
 8005164:	2b02      	cmp	r3, #2
 8005166:	d106      	bne.n	8005176 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800516e:	461a      	mov	r2, r3
 8005170:	f241 7370 	movw	r3, #6000	; 0x1770
 8005174:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005176:	2300      	movs	r3, #0
}
 8005178:	4618      	mov	r0, r3
 800517a:	3714      	adds	r7, #20
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr

08005184 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005190:	2300      	movs	r3, #0
 8005192:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80051a4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	68fa      	ldr	r2, [r7, #12]
 80051aa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80051ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051b2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80051b4:	2064      	movs	r0, #100	; 0x64
 80051b6:	f7fb ffcd 	bl	8001154 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80051c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051c6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80051c8:	200a      	movs	r0, #10
 80051ca:	f7fb ffc3 	bl	8001154 <HAL_Delay>

  return HAL_OK;
 80051ce:	2300      	movs	r3, #0
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3710      	adds	r7, #16
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80051d8:	b480      	push	{r7}
 80051da:	b085      	sub	sp, #20
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	460b      	mov	r3, r1
 80051e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80051e8:	2300      	movs	r3, #0
 80051ea:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80051fc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005204:	2b00      	cmp	r3, #0
 8005206:	d109      	bne.n	800521c <USB_DriveVbus+0x44>
 8005208:	78fb      	ldrb	r3, [r7, #3]
 800520a:	2b01      	cmp	r3, #1
 800520c:	d106      	bne.n	800521c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	68fa      	ldr	r2, [r7, #12]
 8005212:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005216:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800521a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005222:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005226:	d109      	bne.n	800523c <USB_DriveVbus+0x64>
 8005228:	78fb      	ldrb	r3, [r7, #3]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d106      	bne.n	800523c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005236:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800523a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800523c:	2300      	movs	r3, #0
}
 800523e:	4618      	mov	r0, r3
 8005240:	3714      	adds	r7, #20
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr

0800524a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800524a:	b480      	push	{r7}
 800524c:	b085      	sub	sp, #20
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005256:	2300      	movs	r3, #0
 8005258:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	0c5b      	lsrs	r3, r3, #17
 8005268:	f003 0303 	and.w	r3, r3, #3
}
 800526c:	4618      	mov	r0, r3
 800526e:	3714      	adds	r7, #20
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr

08005278 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005278:	b480      	push	{r7}
 800527a:	b085      	sub	sp, #20
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	b29b      	uxth	r3, r3
}
 800528e:	4618      	mov	r0, r3
 8005290:	3714      	adds	r7, #20
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr
	...

0800529c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800529c:	b480      	push	{r7}
 800529e:	b087      	sub	sp, #28
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	4608      	mov	r0, r1
 80052a6:	4611      	mov	r1, r2
 80052a8:	461a      	mov	r2, r3
 80052aa:	4603      	mov	r3, r0
 80052ac:	70fb      	strb	r3, [r7, #3]
 80052ae:	460b      	mov	r3, r1
 80052b0:	70bb      	strb	r3, [r7, #2]
 80052b2:	4613      	mov	r3, r2
 80052b4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80052b6:	2300      	movs	r3, #0
 80052b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80052be:	78fb      	ldrb	r3, [r7, #3]
 80052c0:	015a      	lsls	r2, r3, #5
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	4413      	add	r3, r2
 80052c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052ca:	461a      	mov	r2, r3
 80052cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80052d0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80052d2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80052d6:	2b03      	cmp	r3, #3
 80052d8:	d87e      	bhi.n	80053d8 <USB_HC_Init+0x13c>
 80052da:	a201      	add	r2, pc, #4	; (adr r2, 80052e0 <USB_HC_Init+0x44>)
 80052dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e0:	080052f1 	.word	0x080052f1
 80052e4:	0800539b 	.word	0x0800539b
 80052e8:	080052f1 	.word	0x080052f1
 80052ec:	0800535d 	.word	0x0800535d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80052f0:	78fb      	ldrb	r3, [r7, #3]
 80052f2:	015a      	lsls	r2, r3, #5
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	4413      	add	r3, r2
 80052f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052fc:	461a      	mov	r2, r3
 80052fe:	f240 439d 	movw	r3, #1181	; 0x49d
 8005302:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005304:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005308:	2b00      	cmp	r3, #0
 800530a:	da10      	bge.n	800532e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800530c:	78fb      	ldrb	r3, [r7, #3]
 800530e:	015a      	lsls	r2, r3, #5
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	4413      	add	r3, r2
 8005314:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	78fa      	ldrb	r2, [r7, #3]
 800531c:	0151      	lsls	r1, r2, #5
 800531e:	68ba      	ldr	r2, [r7, #8]
 8005320:	440a      	add	r2, r1
 8005322:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005326:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800532a:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800532c:	e057      	b.n	80053de <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005336:	2b00      	cmp	r3, #0
 8005338:	d051      	beq.n	80053de <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800533a:	78fb      	ldrb	r3, [r7, #3]
 800533c:	015a      	lsls	r2, r3, #5
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	4413      	add	r3, r2
 8005342:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	78fa      	ldrb	r2, [r7, #3]
 800534a:	0151      	lsls	r1, r2, #5
 800534c:	68ba      	ldr	r2, [r7, #8]
 800534e:	440a      	add	r2, r1
 8005350:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005354:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005358:	60d3      	str	r3, [r2, #12]
      break;
 800535a:	e040      	b.n	80053de <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800535c:	78fb      	ldrb	r3, [r7, #3]
 800535e:	015a      	lsls	r2, r3, #5
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	4413      	add	r3, r2
 8005364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005368:	461a      	mov	r2, r3
 800536a:	f240 639d 	movw	r3, #1693	; 0x69d
 800536e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005370:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005374:	2b00      	cmp	r3, #0
 8005376:	da34      	bge.n	80053e2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005378:	78fb      	ldrb	r3, [r7, #3]
 800537a:	015a      	lsls	r2, r3, #5
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	4413      	add	r3, r2
 8005380:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	78fa      	ldrb	r2, [r7, #3]
 8005388:	0151      	lsls	r1, r2, #5
 800538a:	68ba      	ldr	r2, [r7, #8]
 800538c:	440a      	add	r2, r1
 800538e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005392:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005396:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005398:	e023      	b.n	80053e2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800539a:	78fb      	ldrb	r3, [r7, #3]
 800539c:	015a      	lsls	r2, r3, #5
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	4413      	add	r3, r2
 80053a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053a6:	461a      	mov	r2, r3
 80053a8:	f240 2325 	movw	r3, #549	; 0x225
 80053ac:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80053ae:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	da17      	bge.n	80053e6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80053b6:	78fb      	ldrb	r3, [r7, #3]
 80053b8:	015a      	lsls	r2, r3, #5
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	4413      	add	r3, r2
 80053be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	78fa      	ldrb	r2, [r7, #3]
 80053c6:	0151      	lsls	r1, r2, #5
 80053c8:	68ba      	ldr	r2, [r7, #8]
 80053ca:	440a      	add	r2, r1
 80053cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053d0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80053d4:	60d3      	str	r3, [r2, #12]
      }
      break;
 80053d6:	e006      	b.n	80053e6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	75fb      	strb	r3, [r7, #23]
      break;
 80053dc:	e004      	b.n	80053e8 <USB_HC_Init+0x14c>
      break;
 80053de:	bf00      	nop
 80053e0:	e002      	b.n	80053e8 <USB_HC_Init+0x14c>
      break;
 80053e2:	bf00      	nop
 80053e4:	e000      	b.n	80053e8 <USB_HC_Init+0x14c>
      break;
 80053e6:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053ee:	699a      	ldr	r2, [r3, #24]
 80053f0:	78fb      	ldrb	r3, [r7, #3]
 80053f2:	f003 030f 	and.w	r3, r3, #15
 80053f6:	2101      	movs	r1, #1
 80053f8:	fa01 f303 	lsl.w	r3, r1, r3
 80053fc:	68b9      	ldr	r1, [r7, #8]
 80053fe:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005402:	4313      	orrs	r3, r2
 8005404:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	699b      	ldr	r3, [r3, #24]
 800540a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005412:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005416:	2b00      	cmp	r3, #0
 8005418:	da03      	bge.n	8005422 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800541a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800541e:	613b      	str	r3, [r7, #16]
 8005420:	e001      	b.n	8005426 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8005422:	2300      	movs	r3, #0
 8005424:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8005426:	f897 3020 	ldrb.w	r3, [r7, #32]
 800542a:	2b02      	cmp	r3, #2
 800542c:	d103      	bne.n	8005436 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800542e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005432:	60fb      	str	r3, [r7, #12]
 8005434:	e001      	b.n	800543a <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005436:	2300      	movs	r3, #0
 8005438:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800543a:	787b      	ldrb	r3, [r7, #1]
 800543c:	059b      	lsls	r3, r3, #22
 800543e:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005442:	78bb      	ldrb	r3, [r7, #2]
 8005444:	02db      	lsls	r3, r3, #11
 8005446:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800544a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800544c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005450:	049b      	lsls	r3, r3, #18
 8005452:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005456:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005458:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800545a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800545e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005464:	78fb      	ldrb	r3, [r7, #3]
 8005466:	0159      	lsls	r1, r3, #5
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	440b      	add	r3, r1
 800546c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005470:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005476:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005478:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800547c:	2b03      	cmp	r3, #3
 800547e:	d10f      	bne.n	80054a0 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005480:	78fb      	ldrb	r3, [r7, #3]
 8005482:	015a      	lsls	r2, r3, #5
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	4413      	add	r3, r2
 8005488:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	78fa      	ldrb	r2, [r7, #3]
 8005490:	0151      	lsls	r1, r2, #5
 8005492:	68ba      	ldr	r2, [r7, #8]
 8005494:	440a      	add	r2, r1
 8005496:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800549a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800549e:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80054a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	371c      	adds	r7, #28
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr
 80054ae:	bf00      	nop

080054b0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b08c      	sub	sp, #48	; 0x30
 80054b4:	af02      	add	r7, sp, #8
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	4613      	mov	r3, r2
 80054bc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	785b      	ldrb	r3, [r3, #1]
 80054c6:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80054c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80054cc:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d028      	beq.n	800552c <USB_HC_StartXfer+0x7c>
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	791b      	ldrb	r3, [r3, #4]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d124      	bne.n	800552c <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 80054e2:	79fb      	ldrb	r3, [r7, #7]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d10b      	bne.n	8005500 <USB_HC_StartXfer+0x50>
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	795b      	ldrb	r3, [r3, #5]
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d107      	bne.n	8005500 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	785b      	ldrb	r3, [r3, #1]
 80054f4:	4619      	mov	r1, r3
 80054f6:	68f8      	ldr	r0, [r7, #12]
 80054f8:	f000 fa30 	bl	800595c <USB_DoPing>
      return HAL_OK;
 80054fc:	2300      	movs	r3, #0
 80054fe:	e114      	b.n	800572a <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 8005500:	79fb      	ldrb	r3, [r7, #7]
 8005502:	2b01      	cmp	r3, #1
 8005504:	d112      	bne.n	800552c <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8005506:	69fb      	ldr	r3, [r7, #28]
 8005508:	015a      	lsls	r2, r3, #5
 800550a:	6a3b      	ldr	r3, [r7, #32]
 800550c:	4413      	add	r3, r2
 800550e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	69fa      	ldr	r2, [r7, #28]
 8005516:	0151      	lsls	r1, r2, #5
 8005518:	6a3a      	ldr	r2, [r7, #32]
 800551a:	440a      	add	r2, r1
 800551c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005520:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005524:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	2200      	movs	r2, #0
 800552a:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	691b      	ldr	r3, [r3, #16]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d018      	beq.n	8005566 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	691b      	ldr	r3, [r3, #16]
 8005538:	68ba      	ldr	r2, [r7, #8]
 800553a:	8912      	ldrh	r2, [r2, #8]
 800553c:	4413      	add	r3, r2
 800553e:	3b01      	subs	r3, #1
 8005540:	68ba      	ldr	r2, [r7, #8]
 8005542:	8912      	ldrh	r2, [r2, #8]
 8005544:	fbb3 f3f2 	udiv	r3, r3, r2
 8005548:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800554a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800554c:	8b7b      	ldrh	r3, [r7, #26]
 800554e:	429a      	cmp	r2, r3
 8005550:	d90b      	bls.n	800556a <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8005552:	8b7b      	ldrh	r3, [r7, #26]
 8005554:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8005556:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005558:	68ba      	ldr	r2, [r7, #8]
 800555a:	8912      	ldrh	r2, [r2, #8]
 800555c:	fb02 f203 	mul.w	r2, r2, r3
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	611a      	str	r2, [r3, #16]
 8005564:	e001      	b.n	800556a <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8005566:	2301      	movs	r3, #1
 8005568:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	78db      	ldrb	r3, [r3, #3]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d006      	beq.n	8005580 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8005572:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005574:	68ba      	ldr	r2, [r7, #8]
 8005576:	8912      	ldrh	r2, [r2, #8]
 8005578:	fb02 f203 	mul.w	r2, r2, r3
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	691b      	ldr	r3, [r3, #16]
 8005584:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005588:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800558a:	04d9      	lsls	r1, r3, #19
 800558c:	4b69      	ldr	r3, [pc, #420]	; (8005734 <USB_HC_StartXfer+0x284>)
 800558e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005590:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	7a9b      	ldrb	r3, [r3, #10]
 8005596:	075b      	lsls	r3, r3, #29
 8005598:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800559c:	69f9      	ldr	r1, [r7, #28]
 800559e:	0148      	lsls	r0, r1, #5
 80055a0:	6a39      	ldr	r1, [r7, #32]
 80055a2:	4401      	add	r1, r0
 80055a4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80055a8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80055aa:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80055ac:	79fb      	ldrb	r3, [r7, #7]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d009      	beq.n	80055c6 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	68d9      	ldr	r1, [r3, #12]
 80055b6:	69fb      	ldr	r3, [r7, #28]
 80055b8:	015a      	lsls	r2, r3, #5
 80055ba:	6a3b      	ldr	r3, [r7, #32]
 80055bc:	4413      	add	r3, r2
 80055be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055c2:	460a      	mov	r2, r1
 80055c4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80055c6:	6a3b      	ldr	r3, [r7, #32]
 80055c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	f003 0301 	and.w	r3, r3, #1
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	bf0c      	ite	eq
 80055d6:	2301      	moveq	r3, #1
 80055d8:	2300      	movne	r3, #0
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80055de:	69fb      	ldr	r3, [r7, #28]
 80055e0:	015a      	lsls	r2, r3, #5
 80055e2:	6a3b      	ldr	r3, [r7, #32]
 80055e4:	4413      	add	r3, r2
 80055e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	69fa      	ldr	r2, [r7, #28]
 80055ee:	0151      	lsls	r1, r2, #5
 80055f0:	6a3a      	ldr	r2, [r7, #32]
 80055f2:	440a      	add	r2, r1
 80055f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055f8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80055fc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80055fe:	69fb      	ldr	r3, [r7, #28]
 8005600:	015a      	lsls	r2, r3, #5
 8005602:	6a3b      	ldr	r3, [r7, #32]
 8005604:	4413      	add	r3, r2
 8005606:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	7e7b      	ldrb	r3, [r7, #25]
 800560e:	075b      	lsls	r3, r3, #29
 8005610:	69f9      	ldr	r1, [r7, #28]
 8005612:	0148      	lsls	r0, r1, #5
 8005614:	6a39      	ldr	r1, [r7, #32]
 8005616:	4401      	add	r1, r0
 8005618:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800561c:	4313      	orrs	r3, r2
 800561e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	015a      	lsls	r2, r3, #5
 8005624:	6a3b      	ldr	r3, [r7, #32]
 8005626:	4413      	add	r3, r2
 8005628:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a42      	ldr	r2, [pc, #264]	; (8005738 <USB_HC_StartXfer+0x288>)
 8005630:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005632:	4b41      	ldr	r3, [pc, #260]	; (8005738 <USB_HC_StartXfer+0x288>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800563a:	4a3f      	ldr	r2, [pc, #252]	; (8005738 <USB_HC_StartXfer+0x288>)
 800563c:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	78db      	ldrb	r3, [r3, #3]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d006      	beq.n	8005654 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005646:	4b3c      	ldr	r3, [pc, #240]	; (8005738 <USB_HC_StartXfer+0x288>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800564e:	4a3a      	ldr	r2, [pc, #232]	; (8005738 <USB_HC_StartXfer+0x288>)
 8005650:	6013      	str	r3, [r2, #0]
 8005652:	e005      	b.n	8005660 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005654:	4b38      	ldr	r3, [pc, #224]	; (8005738 <USB_HC_StartXfer+0x288>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800565c:	4a36      	ldr	r2, [pc, #216]	; (8005738 <USB_HC_StartXfer+0x288>)
 800565e:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005660:	4b35      	ldr	r3, [pc, #212]	; (8005738 <USB_HC_StartXfer+0x288>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005668:	4a33      	ldr	r2, [pc, #204]	; (8005738 <USB_HC_StartXfer+0x288>)
 800566a:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	015a      	lsls	r2, r3, #5
 8005670:	6a3b      	ldr	r3, [r7, #32]
 8005672:	4413      	add	r3, r2
 8005674:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005678:	461a      	mov	r2, r3
 800567a:	4b2f      	ldr	r3, [pc, #188]	; (8005738 <USB_HC_StartXfer+0x288>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005680:	79fb      	ldrb	r3, [r7, #7]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d001      	beq.n	800568a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005686:	2300      	movs	r3, #0
 8005688:	e04f      	b.n	800572a <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	78db      	ldrb	r3, [r3, #3]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d14a      	bne.n	8005728 <USB_HC_StartXfer+0x278>
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d046      	beq.n	8005728 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	79db      	ldrb	r3, [r3, #7]
 800569e:	2b03      	cmp	r3, #3
 80056a0:	d830      	bhi.n	8005704 <USB_HC_StartXfer+0x254>
 80056a2:	a201      	add	r2, pc, #4	; (adr r2, 80056a8 <USB_HC_StartXfer+0x1f8>)
 80056a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056a8:	080056b9 	.word	0x080056b9
 80056ac:	080056dd 	.word	0x080056dd
 80056b0:	080056b9 	.word	0x080056b9
 80056b4:	080056dd 	.word	0x080056dd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	691b      	ldr	r3, [r3, #16]
 80056bc:	3303      	adds	r3, #3
 80056be:	089b      	lsrs	r3, r3, #2
 80056c0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80056c2:	8afa      	ldrh	r2, [r7, #22]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d91c      	bls.n	8005708 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	699b      	ldr	r3, [r3, #24]
 80056d2:	f043 0220 	orr.w	r2, r3, #32
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	619a      	str	r2, [r3, #24]
        }
        break;
 80056da:	e015      	b.n	8005708 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	691b      	ldr	r3, [r3, #16]
 80056e0:	3303      	adds	r3, #3
 80056e2:	089b      	lsrs	r3, r3, #2
 80056e4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80056e6:	8afa      	ldrh	r2, [r7, #22]
 80056e8:	6a3b      	ldr	r3, [r7, #32]
 80056ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056ee:	691b      	ldr	r3, [r3, #16]
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d90a      	bls.n	800570c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	699b      	ldr	r3, [r3, #24]
 80056fa:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	619a      	str	r2, [r3, #24]
        }
        break;
 8005702:	e003      	b.n	800570c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005704:	bf00      	nop
 8005706:	e002      	b.n	800570e <USB_HC_StartXfer+0x25e>
        break;
 8005708:	bf00      	nop
 800570a:	e000      	b.n	800570e <USB_HC_StartXfer+0x25e>
        break;
 800570c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	68d9      	ldr	r1, [r3, #12]
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	785a      	ldrb	r2, [r3, #1]
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	b298      	uxth	r0, r3
 800571c:	2300      	movs	r3, #0
 800571e:	9300      	str	r3, [sp, #0]
 8005720:	4603      	mov	r3, r0
 8005722:	68f8      	ldr	r0, [r7, #12]
 8005724:	f7ff fb84 	bl	8004e30 <USB_WritePacket>
  }

  return HAL_OK;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3728      	adds	r7, #40	; 0x28
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	1ff80000 	.word	0x1ff80000
 8005738:	200000b0 	.word	0x200000b0

0800573c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800573c:	b480      	push	{r7}
 800573e:	b085      	sub	sp, #20
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800574e:	695b      	ldr	r3, [r3, #20]
 8005750:	b29b      	uxth	r3, r3
}
 8005752:	4618      	mov	r0, r3
 8005754:	3714      	adds	r7, #20
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr

0800575e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800575e:	b480      	push	{r7}
 8005760:	b087      	sub	sp, #28
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
 8005766:	460b      	mov	r3, r1
 8005768:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800576e:	78fb      	ldrb	r3, [r7, #3]
 8005770:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005772:	2300      	movs	r3, #0
 8005774:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	015a      	lsls	r2, r3, #5
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	4413      	add	r3, r2
 800577e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	0c9b      	lsrs	r3, r3, #18
 8005786:	f003 0303 	and.w	r3, r3, #3
 800578a:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d002      	beq.n	8005798 <USB_HC_Halt+0x3a>
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	2b02      	cmp	r3, #2
 8005796:	d16c      	bne.n	8005872 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	015a      	lsls	r2, r3, #5
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	4413      	add	r3, r2
 80057a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68fa      	ldr	r2, [r7, #12]
 80057a8:	0151      	lsls	r1, r2, #5
 80057aa:	693a      	ldr	r2, [r7, #16]
 80057ac:	440a      	add	r2, r1
 80057ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80057b6:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057bc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d143      	bne.n	800584c <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	015a      	lsls	r2, r3, #5
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	4413      	add	r3, r2
 80057cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	68fa      	ldr	r2, [r7, #12]
 80057d4:	0151      	lsls	r1, r2, #5
 80057d6:	693a      	ldr	r2, [r7, #16]
 80057d8:	440a      	add	r2, r1
 80057da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80057e2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	015a      	lsls	r2, r3, #5
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	4413      	add	r3, r2
 80057ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	68fa      	ldr	r2, [r7, #12]
 80057f4:	0151      	lsls	r1, r2, #5
 80057f6:	693a      	ldr	r2, [r7, #16]
 80057f8:	440a      	add	r2, r1
 80057fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005802:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	015a      	lsls	r2, r3, #5
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	4413      	add	r3, r2
 800580c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	68fa      	ldr	r2, [r7, #12]
 8005814:	0151      	lsls	r1, r2, #5
 8005816:	693a      	ldr	r2, [r7, #16]
 8005818:	440a      	add	r2, r1
 800581a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800581e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005822:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	3301      	adds	r3, #1
 8005828:	617b      	str	r3, [r7, #20]
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005830:	d81d      	bhi.n	800586e <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	015a      	lsls	r2, r3, #5
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	4413      	add	r3, r2
 800583a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005844:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005848:	d0ec      	beq.n	8005824 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800584a:	e080      	b.n	800594e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	015a      	lsls	r2, r3, #5
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	4413      	add	r3, r2
 8005854:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	68fa      	ldr	r2, [r7, #12]
 800585c:	0151      	lsls	r1, r2, #5
 800585e:	693a      	ldr	r2, [r7, #16]
 8005860:	440a      	add	r2, r1
 8005862:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800586a:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800586c:	e06f      	b.n	800594e <USB_HC_Halt+0x1f0>
          break;
 800586e:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005870:	e06d      	b.n	800594e <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	015a      	lsls	r2, r3, #5
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	4413      	add	r3, r2
 800587a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68fa      	ldr	r2, [r7, #12]
 8005882:	0151      	lsls	r1, r2, #5
 8005884:	693a      	ldr	r2, [r7, #16]
 8005886:	440a      	add	r2, r1
 8005888:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800588c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005890:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005898:	691b      	ldr	r3, [r3, #16]
 800589a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d143      	bne.n	800592a <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	015a      	lsls	r2, r3, #5
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	4413      	add	r3, r2
 80058aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	0151      	lsls	r1, r2, #5
 80058b4:	693a      	ldr	r2, [r7, #16]
 80058b6:	440a      	add	r2, r1
 80058b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80058c0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	015a      	lsls	r2, r3, #5
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	4413      	add	r3, r2
 80058ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	0151      	lsls	r1, r2, #5
 80058d4:	693a      	ldr	r2, [r7, #16]
 80058d6:	440a      	add	r2, r1
 80058d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80058e0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	015a      	lsls	r2, r3, #5
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	4413      	add	r3, r2
 80058ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	0151      	lsls	r1, r2, #5
 80058f4:	693a      	ldr	r2, [r7, #16]
 80058f6:	440a      	add	r2, r1
 80058f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005900:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	3301      	adds	r3, #1
 8005906:	617b      	str	r3, [r7, #20]
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800590e:	d81d      	bhi.n	800594c <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	015a      	lsls	r2, r3, #5
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	4413      	add	r3, r2
 8005918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005922:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005926:	d0ec      	beq.n	8005902 <USB_HC_Halt+0x1a4>
 8005928:	e011      	b.n	800594e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	015a      	lsls	r2, r3, #5
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	4413      	add	r3, r2
 8005932:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	68fa      	ldr	r2, [r7, #12]
 800593a:	0151      	lsls	r1, r2, #5
 800593c:	693a      	ldr	r2, [r7, #16]
 800593e:	440a      	add	r2, r1
 8005940:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005944:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005948:	6013      	str	r3, [r2, #0]
 800594a:	e000      	b.n	800594e <USB_HC_Halt+0x1f0>
          break;
 800594c:	bf00      	nop
    }
  }

  return HAL_OK;
 800594e:	2300      	movs	r3, #0
}
 8005950:	4618      	mov	r0, r3
 8005952:	371c      	adds	r7, #28
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800595c:	b480      	push	{r7}
 800595e:	b087      	sub	sp, #28
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	460b      	mov	r3, r1
 8005966:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800596c:	78fb      	ldrb	r3, [r7, #3]
 800596e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005970:	2301      	movs	r3, #1
 8005972:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	04da      	lsls	r2, r3, #19
 8005978:	4b15      	ldr	r3, [pc, #84]	; (80059d0 <USB_DoPing+0x74>)
 800597a:	4013      	ands	r3, r2
 800597c:	693a      	ldr	r2, [r7, #16]
 800597e:	0151      	lsls	r1, r2, #5
 8005980:	697a      	ldr	r2, [r7, #20]
 8005982:	440a      	add	r2, r1
 8005984:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005988:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800598c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	015a      	lsls	r2, r3, #5
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	4413      	add	r3, r2
 8005996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80059a4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80059ac:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	015a      	lsls	r2, r3, #5
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	4413      	add	r3, r2
 80059b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059ba:	461a      	mov	r2, r3
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80059c0:	2300      	movs	r3, #0
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	371c      	adds	r7, #28
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr
 80059ce:	bf00      	nop
 80059d0:	1ff80000 	.word	0x1ff80000

080059d4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b086      	sub	sp, #24
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80059e0:	2300      	movs	r3, #0
 80059e2:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f7ff f99f 	bl	8004d28 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80059ea:	2110      	movs	r1, #16
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f7ff f9d7 	bl	8004da0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f7ff f9fa 	bl	8004dec <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80059f8:	2300      	movs	r3, #0
 80059fa:	613b      	str	r3, [r7, #16]
 80059fc:	e01f      	b.n	8005a3e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	015a      	lsls	r2, r3, #5
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	4413      	add	r3, r2
 8005a06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a14:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005a1c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005a24:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	015a      	lsls	r2, r3, #5
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	4413      	add	r3, r2
 8005a2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a32:	461a      	mov	r2, r3
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	613b      	str	r3, [r7, #16]
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	2b0f      	cmp	r3, #15
 8005a42:	d9dc      	bls.n	80059fe <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005a44:	2300      	movs	r3, #0
 8005a46:	613b      	str	r3, [r7, #16]
 8005a48:	e034      	b.n	8005ab4 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	015a      	lsls	r2, r3, #5
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	4413      	add	r3, r2
 8005a52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a60:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a68:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005a70:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	015a      	lsls	r2, r3, #5
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	4413      	add	r3, r2
 8005a7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a7e:	461a      	mov	r2, r3
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	3301      	adds	r3, #1
 8005a88:	617b      	str	r3, [r7, #20]
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a90:	d80c      	bhi.n	8005aac <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	015a      	lsls	r2, r3, #5
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	4413      	add	r3, r2
 8005a9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005aa4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005aa8:	d0ec      	beq.n	8005a84 <USB_StopHost+0xb0>
 8005aaa:	e000      	b.n	8005aae <USB_StopHost+0xda>
        break;
 8005aac:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	613b      	str	r3, [r7, #16]
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	2b0f      	cmp	r3, #15
 8005ab8:	d9c7      	bls.n	8005a4a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ac6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ace:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f7ff f918 	bl	8004d06 <USB_EnableGlobalInt>

  return HAL_OK;
 8005ad6:	2300      	movs	r3, #0
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3718      	adds	r7, #24
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005ae0:	b590      	push	{r4, r7, lr}
 8005ae2:	b089      	sub	sp, #36	; 0x24
 8005ae4:	af04      	add	r7, sp, #16
 8005ae6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005ae8:	2301      	movs	r3, #1
 8005aea:	2202      	movs	r2, #2
 8005aec:	2102      	movs	r1, #2
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 fc68 	bl	80063c4 <USBH_FindInterface>
 8005af4:	4603      	mov	r3, r0
 8005af6:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005af8:	7bfb      	ldrb	r3, [r7, #15]
 8005afa:	2bff      	cmp	r3, #255	; 0xff
 8005afc:	d002      	beq.n	8005b04 <USBH_CDC_InterfaceInit+0x24>
 8005afe:	7bfb      	ldrb	r3, [r7, #15]
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d901      	bls.n	8005b08 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005b04:	2302      	movs	r3, #2
 8005b06:	e13d      	b.n	8005d84 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005b08:	7bfb      	ldrb	r3, [r7, #15]
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f000 fc3d 	bl	800638c <USBH_SelectInterface>
 8005b12:	4603      	mov	r3, r0
 8005b14:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005b16:	7bbb      	ldrb	r3, [r7, #14]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d001      	beq.n	8005b20 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005b1c:	2302      	movs	r3, #2
 8005b1e:	e131      	b.n	8005d84 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005b26:	2050      	movs	r0, #80	; 0x50
 8005b28:	f002 fa04 	bl	8007f34 <malloc>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005b36:	69db      	ldr	r3, [r3, #28]
 8005b38:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d101      	bne.n	8005b44 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005b40:	2302      	movs	r3, #2
 8005b42:	e11f      	b.n	8005d84 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005b44:	2250      	movs	r2, #80	; 0x50
 8005b46:	2100      	movs	r1, #0
 8005b48:	68b8      	ldr	r0, [r7, #8]
 8005b4a:	f002 fa03 	bl	8007f54 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005b4e:	7bfb      	ldrb	r3, [r7, #15]
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	211a      	movs	r1, #26
 8005b54:	fb01 f303 	mul.w	r3, r1, r3
 8005b58:	4413      	add	r3, r2
 8005b5a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	b25b      	sxtb	r3, r3
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	da15      	bge.n	8005b92 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005b66:	7bfb      	ldrb	r3, [r7, #15]
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	211a      	movs	r1, #26
 8005b6c:	fb01 f303 	mul.w	r3, r1, r3
 8005b70:	4413      	add	r3, r2
 8005b72:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005b76:	781a      	ldrb	r2, [r3, #0]
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005b7c:	7bfb      	ldrb	r3, [r7, #15]
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	211a      	movs	r1, #26
 8005b82:	fb01 f303 	mul.w	r3, r1, r3
 8005b86:	4413      	add	r3, r2
 8005b88:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005b8c:	881a      	ldrh	r2, [r3, #0]
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	785b      	ldrb	r3, [r3, #1]
 8005b96:	4619      	mov	r1, r3
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f001 fe36 	bl	800780a <USBH_AllocPipe>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	7819      	ldrb	r1, [r3, #0]
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	7858      	ldrb	r0, [r3, #1]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005bba:	68ba      	ldr	r2, [r7, #8]
 8005bbc:	8952      	ldrh	r2, [r2, #10]
 8005bbe:	9202      	str	r2, [sp, #8]
 8005bc0:	2203      	movs	r2, #3
 8005bc2:	9201      	str	r2, [sp, #4]
 8005bc4:	9300      	str	r3, [sp, #0]
 8005bc6:	4623      	mov	r3, r4
 8005bc8:	4602      	mov	r2, r0
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f001 fdee 	bl	80077ac <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	4619      	mov	r1, r3
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f002 f8fb 	bl	8007dd4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8005bde:	2300      	movs	r3, #0
 8005be0:	2200      	movs	r2, #0
 8005be2:	210a      	movs	r1, #10
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f000 fbed 	bl	80063c4 <USBH_FindInterface>
 8005bea:	4603      	mov	r3, r0
 8005bec:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005bee:	7bfb      	ldrb	r3, [r7, #15]
 8005bf0:	2bff      	cmp	r3, #255	; 0xff
 8005bf2:	d002      	beq.n	8005bfa <USBH_CDC_InterfaceInit+0x11a>
 8005bf4:	7bfb      	ldrb	r3, [r7, #15]
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d901      	bls.n	8005bfe <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005bfa:	2302      	movs	r3, #2
 8005bfc:	e0c2      	b.n	8005d84 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005bfe:	7bfb      	ldrb	r3, [r7, #15]
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	211a      	movs	r1, #26
 8005c04:	fb01 f303 	mul.w	r3, r1, r3
 8005c08:	4413      	add	r3, r2
 8005c0a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	b25b      	sxtb	r3, r3
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	da16      	bge.n	8005c44 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005c16:	7bfb      	ldrb	r3, [r7, #15]
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	211a      	movs	r1, #26
 8005c1c:	fb01 f303 	mul.w	r3, r1, r3
 8005c20:	4413      	add	r3, r2
 8005c22:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005c26:	781a      	ldrb	r2, [r3, #0]
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005c2c:	7bfb      	ldrb	r3, [r7, #15]
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	211a      	movs	r1, #26
 8005c32:	fb01 f303 	mul.w	r3, r1, r3
 8005c36:	4413      	add	r3, r2
 8005c38:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005c3c:	881a      	ldrh	r2, [r3, #0]
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	835a      	strh	r2, [r3, #26]
 8005c42:	e015      	b.n	8005c70 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005c44:	7bfb      	ldrb	r3, [r7, #15]
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	211a      	movs	r1, #26
 8005c4a:	fb01 f303 	mul.w	r3, r1, r3
 8005c4e:	4413      	add	r3, r2
 8005c50:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005c54:	781a      	ldrb	r2, [r3, #0]
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005c5a:	7bfb      	ldrb	r3, [r7, #15]
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	211a      	movs	r1, #26
 8005c60:	fb01 f303 	mul.w	r3, r1, r3
 8005c64:	4413      	add	r3, r2
 8005c66:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005c6a:	881a      	ldrh	r2, [r3, #0]
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8005c70:	7bfb      	ldrb	r3, [r7, #15]
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	211a      	movs	r1, #26
 8005c76:	fb01 f303 	mul.w	r3, r1, r3
 8005c7a:	4413      	add	r3, r2
 8005c7c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	b25b      	sxtb	r3, r3
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	da16      	bge.n	8005cb6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005c88:	7bfb      	ldrb	r3, [r7, #15]
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	211a      	movs	r1, #26
 8005c8e:	fb01 f303 	mul.w	r3, r1, r3
 8005c92:	4413      	add	r3, r2
 8005c94:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005c98:	781a      	ldrb	r2, [r3, #0]
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005c9e:	7bfb      	ldrb	r3, [r7, #15]
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	211a      	movs	r1, #26
 8005ca4:	fb01 f303 	mul.w	r3, r1, r3
 8005ca8:	4413      	add	r3, r2
 8005caa:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005cae:	881a      	ldrh	r2, [r3, #0]
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	835a      	strh	r2, [r3, #26]
 8005cb4:	e015      	b.n	8005ce2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005cb6:	7bfb      	ldrb	r3, [r7, #15]
 8005cb8:	687a      	ldr	r2, [r7, #4]
 8005cba:	211a      	movs	r1, #26
 8005cbc:	fb01 f303 	mul.w	r3, r1, r3
 8005cc0:	4413      	add	r3, r2
 8005cc2:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005cc6:	781a      	ldrb	r2, [r3, #0]
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005ccc:	7bfb      	ldrb	r3, [r7, #15]
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	211a      	movs	r1, #26
 8005cd2:	fb01 f303 	mul.w	r3, r1, r3
 8005cd6:	4413      	add	r3, r2
 8005cd8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005cdc:	881a      	ldrh	r2, [r3, #0]
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	7b9b      	ldrb	r3, [r3, #14]
 8005ce6:	4619      	mov	r1, r3
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f001 fd8e 	bl	800780a <USBH_AllocPipe>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	7bdb      	ldrb	r3, [r3, #15]
 8005cfa:	4619      	mov	r1, r3
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f001 fd84 	bl	800780a <USBH_AllocPipe>
 8005d02:	4603      	mov	r3, r0
 8005d04:	461a      	mov	r2, r3
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	7b59      	ldrb	r1, [r3, #13]
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	7b98      	ldrb	r0, [r3, #14]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005d1e:	68ba      	ldr	r2, [r7, #8]
 8005d20:	8b12      	ldrh	r2, [r2, #24]
 8005d22:	9202      	str	r2, [sp, #8]
 8005d24:	2202      	movs	r2, #2
 8005d26:	9201      	str	r2, [sp, #4]
 8005d28:	9300      	str	r3, [sp, #0]
 8005d2a:	4623      	mov	r3, r4
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f001 fd3c 	bl	80077ac <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	7b19      	ldrb	r1, [r3, #12]
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	7bd8      	ldrb	r0, [r3, #15]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005d48:	68ba      	ldr	r2, [r7, #8]
 8005d4a:	8b52      	ldrh	r2, [r2, #26]
 8005d4c:	9202      	str	r2, [sp, #8]
 8005d4e:	2202      	movs	r2, #2
 8005d50:	9201      	str	r2, [sp, #4]
 8005d52:	9300      	str	r3, [sp, #0]
 8005d54:	4623      	mov	r3, r4
 8005d56:	4602      	mov	r2, r0
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f001 fd27 	bl	80077ac <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	2200      	movs	r2, #0
 8005d62:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	7b5b      	ldrb	r3, [r3, #13]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f002 f830 	bl	8007dd4 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	7b1b      	ldrb	r3, [r3, #12]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f002 f829 	bl	8007dd4 <USBH_LL_SetToggle>

  return USBH_OK;
 8005d82:	2300      	movs	r3, #0
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3714      	adds	r7, #20
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd90      	pop	{r4, r7, pc}

08005d8c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b084      	sub	sp, #16
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d9a:	69db      	ldr	r3, [r3, #28]
 8005d9c:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	781b      	ldrb	r3, [r3, #0]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d00e      	beq.n	8005dc4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	4619      	mov	r1, r3
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f001 fd1c 	bl	80077ea <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	781b      	ldrb	r3, [r3, #0]
 8005db6:	4619      	mov	r1, r3
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f001 fd47 	bl	800784c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	7b1b      	ldrb	r3, [r3, #12]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d00e      	beq.n	8005dea <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	7b1b      	ldrb	r3, [r3, #12]
 8005dd0:	4619      	mov	r1, r3
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f001 fd09 	bl	80077ea <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	7b1b      	ldrb	r3, [r3, #12]
 8005ddc:	4619      	mov	r1, r3
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f001 fd34 	bl	800784c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2200      	movs	r2, #0
 8005de8:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	7b5b      	ldrb	r3, [r3, #13]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d00e      	beq.n	8005e10 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	7b5b      	ldrb	r3, [r3, #13]
 8005df6:	4619      	mov	r1, r3
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f001 fcf6 	bl	80077ea <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	7b5b      	ldrb	r3, [r3, #13]
 8005e02:	4619      	mov	r1, r3
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f001 fd21 	bl	800784c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e16:	69db      	ldr	r3, [r3, #28]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d00b      	beq.n	8005e34 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e22:	69db      	ldr	r3, [r3, #28]
 8005e24:	4618      	mov	r0, r3
 8005e26:	f002 f88d 	bl	8007f44 <free>
    phost->pActiveClass->pData = 0U;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e30:	2200      	movs	r2, #0
 8005e32:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005e34:	2300      	movs	r3, #0
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3710      	adds	r7, #16
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}

08005e3e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005e3e:	b580      	push	{r7, lr}
 8005e40:	b084      	sub	sp, #16
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e4c:	69db      	ldr	r3, [r3, #28]
 8005e4e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	3340      	adds	r3, #64	; 0x40
 8005e54:	4619      	mov	r1, r3
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 f8b1 	bl	8005fbe <GetLineCoding>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8005e60:	7afb      	ldrb	r3, [r7, #11]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d105      	bne.n	8005e72 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005e6c:	2102      	movs	r1, #2
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8005e72:	7afb      	ldrb	r3, [r7, #11]
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3710      	adds	r7, #16
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}

08005e7c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005e84:	2301      	movs	r3, #1
 8005e86:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e92:	69db      	ldr	r3, [r3, #28]
 8005e94:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005e9c:	2b04      	cmp	r3, #4
 8005e9e:	d877      	bhi.n	8005f90 <USBH_CDC_Process+0x114>
 8005ea0:	a201      	add	r2, pc, #4	; (adr r2, 8005ea8 <USBH_CDC_Process+0x2c>)
 8005ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ea6:	bf00      	nop
 8005ea8:	08005ebd 	.word	0x08005ebd
 8005eac:	08005ec3 	.word	0x08005ec3
 8005eb0:	08005ef3 	.word	0x08005ef3
 8005eb4:	08005f67 	.word	0x08005f67
 8005eb8:	08005f75 	.word	0x08005f75
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	73fb      	strb	r3, [r7, #15]
      break;
 8005ec0:	e06d      	b.n	8005f9e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ec6:	4619      	mov	r1, r3
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f000 f897 	bl	8005ffc <SetLineCoding>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005ed2:	7bbb      	ldrb	r3, [r7, #14]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d104      	bne.n	8005ee2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	2202      	movs	r2, #2
 8005edc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005ee0:	e058      	b.n	8005f94 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8005ee2:	7bbb      	ldrb	r3, [r7, #14]
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d055      	beq.n	8005f94 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	2204      	movs	r2, #4
 8005eec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005ef0:	e050      	b.n	8005f94 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	3340      	adds	r3, #64	; 0x40
 8005ef6:	4619      	mov	r1, r3
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f000 f860 	bl	8005fbe <GetLineCoding>
 8005efe:	4603      	mov	r3, r0
 8005f00:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005f02:	7bbb      	ldrb	r3, [r7, #14]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d126      	bne.n	8005f56 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f1a:	791b      	ldrb	r3, [r3, #4]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d13b      	bne.n	8005f98 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f2a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d133      	bne.n	8005f98 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f3a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d12b      	bne.n	8005f98 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f48:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d124      	bne.n	8005f98 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 f95a 	bl	8006208 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005f54:	e020      	b.n	8005f98 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8005f56:	7bbb      	ldrb	r3, [r7, #14]
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d01d      	beq.n	8005f98 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	2204      	movs	r2, #4
 8005f60:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005f64:	e018      	b.n	8005f98 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 f867 	bl	800603a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f000 f8dc 	bl	800612a <CDC_ProcessReception>
      break;
 8005f72:	e014      	b.n	8005f9e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8005f74:	2100      	movs	r1, #0
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f000 ffe5 	bl	8006f46 <USBH_ClrFeature>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005f80:	7bbb      	ldrb	r3, [r7, #14]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d10a      	bne.n	8005f9c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8005f8e:	e005      	b.n	8005f9c <USBH_CDC_Process+0x120>

    default:
      break;
 8005f90:	bf00      	nop
 8005f92:	e004      	b.n	8005f9e <USBH_CDC_Process+0x122>
      break;
 8005f94:	bf00      	nop
 8005f96:	e002      	b.n	8005f9e <USBH_CDC_Process+0x122>
      break;
 8005f98:	bf00      	nop
 8005f9a:	e000      	b.n	8005f9e <USBH_CDC_Process+0x122>
      break;
 8005f9c:	bf00      	nop

  }

  return status;
 8005f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3710      	adds	r7, #16
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b083      	sub	sp, #12
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8005fb0:	2300      	movs	r3, #0
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	370c      	adds	r7, #12
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr

08005fbe <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8005fbe:	b580      	push	{r7, lr}
 8005fc0:	b082      	sub	sp, #8
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
 8005fc6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	22a1      	movs	r2, #161	; 0xa1
 8005fcc:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2221      	movs	r2, #33	; 0x21
 8005fd2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2207      	movs	r2, #7
 8005fe4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	2207      	movs	r2, #7
 8005fea:	4619      	mov	r1, r3
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f001 f98a 	bl	8007306 <USBH_CtlReq>
 8005ff2:	4603      	mov	r3, r0
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3708      	adds	r7, #8
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}

08005ffc <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b082      	sub	sp, #8
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2221      	movs	r2, #33	; 0x21
 800600a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2220      	movs	r2, #32
 8006010:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2207      	movs	r2, #7
 8006022:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	2207      	movs	r2, #7
 8006028:	4619      	mov	r1, r3
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f001 f96b 	bl	8007306 <USBH_CtlReq>
 8006030:	4603      	mov	r3, r0
}
 8006032:	4618      	mov	r0, r3
 8006034:	3708      	adds	r7, #8
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}

0800603a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800603a:	b580      	push	{r7, lr}
 800603c:	b086      	sub	sp, #24
 800603e:	af02      	add	r7, sp, #8
 8006040:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006048:	69db      	ldr	r3, [r3, #28]
 800604a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800604c:	2300      	movs	r3, #0
 800604e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006056:	2b01      	cmp	r3, #1
 8006058:	d002      	beq.n	8006060 <CDC_ProcessTransmission+0x26>
 800605a:	2b02      	cmp	r3, #2
 800605c:	d025      	beq.n	80060aa <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 800605e:	e060      	b.n	8006122 <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006064:	68fa      	ldr	r2, [r7, #12]
 8006066:	8b12      	ldrh	r2, [r2, #24]
 8006068:	4293      	cmp	r3, r2
 800606a:	d90c      	bls.n	8006086 <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	69d9      	ldr	r1, [r3, #28]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	8b1a      	ldrh	r2, [r3, #24]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	7b58      	ldrb	r0, [r3, #13]
 8006078:	2301      	movs	r3, #1
 800607a:	9300      	str	r3, [sp, #0]
 800607c:	4603      	mov	r3, r0
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f001 fb51 	bl	8007726 <USBH_BulkSendData>
 8006084:	e00c      	b.n	80060a0 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800608e:	b29a      	uxth	r2, r3
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	7b58      	ldrb	r0, [r3, #13]
 8006094:	2301      	movs	r3, #1
 8006096:	9300      	str	r3, [sp, #0]
 8006098:	4603      	mov	r3, r0
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f001 fb43 	bl	8007726 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2202      	movs	r2, #2
 80060a4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80060a8:	e03b      	b.n	8006122 <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	7b5b      	ldrb	r3, [r3, #13]
 80060ae:	4619      	mov	r1, r3
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f001 fe65 	bl	8007d80 <USBH_LL_GetURBState>
 80060b6:	4603      	mov	r3, r0
 80060b8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80060ba:	7afb      	ldrb	r3, [r7, #11]
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d128      	bne.n	8006112 <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c4:	68fa      	ldr	r2, [r7, #12]
 80060c6:	8b12      	ldrh	r2, [r2, #24]
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d90e      	bls.n	80060ea <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d0:	68fa      	ldr	r2, [r7, #12]
 80060d2:	8b12      	ldrh	r2, [r2, #24]
 80060d4:	1a9a      	subs	r2, r3, r2
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	69db      	ldr	r3, [r3, #28]
 80060de:	68fa      	ldr	r2, [r7, #12]
 80060e0:	8b12      	ldrh	r2, [r2, #24]
 80060e2:	441a      	add	r2, r3
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	61da      	str	r2, [r3, #28]
 80060e8:	e002      	b.n	80060f0 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2200      	movs	r2, #0
 80060ee:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d004      	beq.n	8006102 <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006100:	e00e      	b.n	8006120 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2200      	movs	r2, #0
 8006106:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 f868 	bl	80061e0 <USBH_CDC_TransmitCallback>
      break;
 8006110:	e006      	b.n	8006120 <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 8006112:	7afb      	ldrb	r3, [r7, #11]
 8006114:	2b02      	cmp	r3, #2
 8006116:	d103      	bne.n	8006120 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006120:	bf00      	nop
  }
}
 8006122:	bf00      	nop
 8006124:	3710      	adds	r7, #16
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}

0800612a <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800612a:	b580      	push	{r7, lr}
 800612c:	b086      	sub	sp, #24
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006138:	69db      	ldr	r3, [r3, #28]
 800613a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800613c:	2300      	movs	r3, #0
 800613e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006146:	2b03      	cmp	r3, #3
 8006148:	d002      	beq.n	8006150 <CDC_ProcessReception+0x26>
 800614a:	2b04      	cmp	r3, #4
 800614c:	d00e      	beq.n	800616c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800614e:	e043      	b.n	80061d8 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	6a19      	ldr	r1, [r3, #32]
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	8b5a      	ldrh	r2, [r3, #26]
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	7b1b      	ldrb	r3, [r3, #12]
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f001 fb07 	bl	8007770 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	2204      	movs	r2, #4
 8006166:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800616a:	e035      	b.n	80061d8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	7b1b      	ldrb	r3, [r3, #12]
 8006170:	4619      	mov	r1, r3
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f001 fe04 	bl	8007d80 <USBH_LL_GetURBState>
 8006178:	4603      	mov	r3, r0
 800617a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800617c:	7cfb      	ldrb	r3, [r7, #19]
 800617e:	2b01      	cmp	r3, #1
 8006180:	d129      	bne.n	80061d6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	7b1b      	ldrb	r3, [r3, #12]
 8006186:	4619      	mov	r1, r3
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f001 fd67 	bl	8007c5c <USBH_LL_GetLastXferSize>
 800618e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006194:	68fa      	ldr	r2, [r7, #12]
 8006196:	429a      	cmp	r2, r3
 8006198:	d016      	beq.n	80061c8 <CDC_ProcessReception+0x9e>
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	8b5b      	ldrh	r3, [r3, #26]
 800619e:	461a      	mov	r2, r3
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d910      	bls.n	80061c8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	1ad2      	subs	r2, r2, r3
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	6a1a      	ldr	r2, [r3, #32]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	441a      	add	r2, r3
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	2203      	movs	r2, #3
 80061c2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80061c6:	e006      	b.n	80061d6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f000 f80f 	bl	80061f4 <USBH_CDC_ReceiveCallback>
      break;
 80061d6:	bf00      	nop
  }
}
 80061d8:	bf00      	nop
 80061da:	3718      	adds	r7, #24
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b083      	sub	sp, #12
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80061e8:	bf00      	nop
 80061ea:	370c      	adds	r7, #12
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr

080061f4 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80061fc:	bf00      	nop
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006208:	b480      	push	{r7}
 800620a:	b083      	sub	sp, #12
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006210:	bf00      	nop
 8006212:	370c      	adds	r7, #12
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b084      	sub	sp, #16
 8006220:	af00      	add	r7, sp, #0
 8006222:	60f8      	str	r0, [r7, #12]
 8006224:	60b9      	str	r1, [r7, #8]
 8006226:	4613      	mov	r3, r2
 8006228:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d101      	bne.n	8006234 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006230:	2302      	movs	r3, #2
 8006232:	e029      	b.n	8006288 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	79fa      	ldrb	r2, [r7, #7]
 8006238:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2200      	movs	r2, #0
 8006240:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2200      	movs	r2, #0
 8006248:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800624c:	68f8      	ldr	r0, [r7, #12]
 800624e:	f000 f81f 	bl	8006290 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2200      	movs	r2, #0
 8006256:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2200      	movs	r2, #0
 800625e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2200      	movs	r2, #0
 8006266:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2200      	movs	r2, #0
 800626e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d003      	beq.n	8006280 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	68ba      	ldr	r2, [r7, #8]
 800627c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006280:	68f8      	ldr	r0, [r7, #12]
 8006282:	f001 fc39 	bl	8007af8 <USBH_LL_Init>

  return USBH_OK;
 8006286:	2300      	movs	r3, #0
}
 8006288:	4618      	mov	r0, r3
 800628a:	3710      	adds	r7, #16
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006290:	b480      	push	{r7}
 8006292:	b085      	sub	sp, #20
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006298:	2300      	movs	r3, #0
 800629a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800629c:	2300      	movs	r3, #0
 800629e:	60fb      	str	r3, [r7, #12]
 80062a0:	e009      	b.n	80062b6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80062a2:	687a      	ldr	r2, [r7, #4]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	33e0      	adds	r3, #224	; 0xe0
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	4413      	add	r3, r2
 80062ac:	2200      	movs	r2, #0
 80062ae:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	3301      	adds	r3, #1
 80062b4:	60fb      	str	r3, [r7, #12]
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2b0e      	cmp	r3, #14
 80062ba:	d9f2      	bls.n	80062a2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80062bc:	2300      	movs	r3, #0
 80062be:	60fb      	str	r3, [r7, #12]
 80062c0:	e009      	b.n	80062d6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	4413      	add	r3, r2
 80062c8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80062cc:	2200      	movs	r2, #0
 80062ce:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	3301      	adds	r3, #1
 80062d4:	60fb      	str	r3, [r7, #12]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062dc:	d3f1      	bcc.n	80062c2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2200      	movs	r2, #0
 80062e8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2201      	movs	r2, #1
 80062ee:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2201      	movs	r2, #1
 80062fc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2240      	movs	r2, #64	; 0x40
 8006302:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2200      	movs	r2, #0
 8006308:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2200      	movs	r2, #0
 800630e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2201      	movs	r2, #1
 8006316:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2200      	movs	r2, #0
 8006326:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800632a:	2300      	movs	r3, #0
}
 800632c:	4618      	mov	r0, r3
 800632e:	3714      	adds	r7, #20
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr

08006338 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006338:	b480      	push	{r7}
 800633a:	b085      	sub	sp, #20
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006342:	2300      	movs	r3, #0
 8006344:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d016      	beq.n	800637a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006352:	2b00      	cmp	r3, #0
 8006354:	d10e      	bne.n	8006374 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800635c:	1c59      	adds	r1, r3, #1
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	33de      	adds	r3, #222	; 0xde
 8006368:	6839      	ldr	r1, [r7, #0]
 800636a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800636e:	2300      	movs	r3, #0
 8006370:	73fb      	strb	r3, [r7, #15]
 8006372:	e004      	b.n	800637e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006374:	2302      	movs	r3, #2
 8006376:	73fb      	strb	r3, [r7, #15]
 8006378:	e001      	b.n	800637e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800637a:	2302      	movs	r3, #2
 800637c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800637e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006380:	4618      	mov	r0, r3
 8006382:	3714      	adds	r7, #20
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr

0800638c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800638c:	b480      	push	{r7}
 800638e:	b085      	sub	sp, #20
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	460b      	mov	r3, r1
 8006396:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006398:	2300      	movs	r3, #0
 800639a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80063a2:	78fa      	ldrb	r2, [r7, #3]
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d204      	bcs.n	80063b2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	78fa      	ldrb	r2, [r7, #3]
 80063ac:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80063b0:	e001      	b.n	80063b6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80063b2:	2302      	movs	r3, #2
 80063b4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80063b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3714      	adds	r7, #20
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr

080063c4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b087      	sub	sp, #28
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	4608      	mov	r0, r1
 80063ce:	4611      	mov	r1, r2
 80063d0:	461a      	mov	r2, r3
 80063d2:	4603      	mov	r3, r0
 80063d4:	70fb      	strb	r3, [r7, #3]
 80063d6:	460b      	mov	r3, r1
 80063d8:	70bb      	strb	r3, [r7, #2]
 80063da:	4613      	mov	r3, r2
 80063dc:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80063de:	2300      	movs	r3, #0
 80063e0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 80063e2:	2300      	movs	r3, #0
 80063e4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80063ec:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80063ee:	e025      	b.n	800643c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80063f0:	7dfb      	ldrb	r3, [r7, #23]
 80063f2:	221a      	movs	r2, #26
 80063f4:	fb02 f303 	mul.w	r3, r2, r3
 80063f8:	3308      	adds	r3, #8
 80063fa:	68fa      	ldr	r2, [r7, #12]
 80063fc:	4413      	add	r3, r2
 80063fe:	3302      	adds	r3, #2
 8006400:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	795b      	ldrb	r3, [r3, #5]
 8006406:	78fa      	ldrb	r2, [r7, #3]
 8006408:	429a      	cmp	r2, r3
 800640a:	d002      	beq.n	8006412 <USBH_FindInterface+0x4e>
 800640c:	78fb      	ldrb	r3, [r7, #3]
 800640e:	2bff      	cmp	r3, #255	; 0xff
 8006410:	d111      	bne.n	8006436 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006416:	78ba      	ldrb	r2, [r7, #2]
 8006418:	429a      	cmp	r2, r3
 800641a:	d002      	beq.n	8006422 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800641c:	78bb      	ldrb	r3, [r7, #2]
 800641e:	2bff      	cmp	r3, #255	; 0xff
 8006420:	d109      	bne.n	8006436 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006426:	787a      	ldrb	r2, [r7, #1]
 8006428:	429a      	cmp	r2, r3
 800642a:	d002      	beq.n	8006432 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800642c:	787b      	ldrb	r3, [r7, #1]
 800642e:	2bff      	cmp	r3, #255	; 0xff
 8006430:	d101      	bne.n	8006436 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006432:	7dfb      	ldrb	r3, [r7, #23]
 8006434:	e006      	b.n	8006444 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006436:	7dfb      	ldrb	r3, [r7, #23]
 8006438:	3301      	adds	r3, #1
 800643a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800643c:	7dfb      	ldrb	r3, [r7, #23]
 800643e:	2b01      	cmp	r3, #1
 8006440:	d9d6      	bls.n	80063f0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006442:	23ff      	movs	r3, #255	; 0xff
}
 8006444:	4618      	mov	r0, r3
 8006446:	371c      	adds	r7, #28
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr

08006450 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b082      	sub	sp, #8
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f001 fb89 	bl	8007b70 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800645e:	2101      	movs	r1, #1
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f001 fca0 	bl	8007da6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006466:	2300      	movs	r3, #0
}
 8006468:	4618      	mov	r0, r3
 800646a:	3708      	adds	r7, #8
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}

08006470 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b088      	sub	sp, #32
 8006474:	af04      	add	r7, sp, #16
 8006476:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006478:	2302      	movs	r3, #2
 800647a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800647c:	2300      	movs	r3, #0
 800647e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006486:	b2db      	uxtb	r3, r3
 8006488:	2b01      	cmp	r3, #1
 800648a:	d102      	bne.n	8006492 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2203      	movs	r2, #3
 8006490:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	781b      	ldrb	r3, [r3, #0]
 8006496:	b2db      	uxtb	r3, r3
 8006498:	2b0b      	cmp	r3, #11
 800649a:	f200 81b3 	bhi.w	8006804 <USBH_Process+0x394>
 800649e:	a201      	add	r2, pc, #4	; (adr r2, 80064a4 <USBH_Process+0x34>)
 80064a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064a4:	080064d5 	.word	0x080064d5
 80064a8:	08006507 	.word	0x08006507
 80064ac:	0800656f 	.word	0x0800656f
 80064b0:	0800679f 	.word	0x0800679f
 80064b4:	08006805 	.word	0x08006805
 80064b8:	08006613 	.word	0x08006613
 80064bc:	08006745 	.word	0x08006745
 80064c0:	08006649 	.word	0x08006649
 80064c4:	08006669 	.word	0x08006669
 80064c8:	08006689 	.word	0x08006689
 80064cc:	080066b7 	.word	0x080066b7
 80064d0:	08006787 	.word	0x08006787
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	2b00      	cmp	r3, #0
 80064de:	f000 8193 	beq.w	8006808 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2201      	movs	r2, #1
 80064e6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80064e8:	20c8      	movs	r0, #200	; 0xc8
 80064ea:	f001 fca6 	bl	8007e3a <USBH_Delay>
        USBH_LL_ResetPort(phost);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f001 fb99 	bl	8007c26 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2200      	movs	r2, #0
 80064f8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2200      	movs	r2, #0
 8006500:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006504:	e180      	b.n	8006808 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800650c:	2b01      	cmp	r3, #1
 800650e:	d107      	bne.n	8006520 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2202      	movs	r2, #2
 800651c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800651e:	e182      	b.n	8006826 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006526:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800652a:	d914      	bls.n	8006556 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006532:	3301      	adds	r3, #1
 8006534:	b2da      	uxtb	r2, r3
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006542:	2b03      	cmp	r3, #3
 8006544:	d903      	bls.n	800654e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	220d      	movs	r2, #13
 800654a:	701a      	strb	r2, [r3, #0]
      break;
 800654c:	e16b      	b.n	8006826 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2200      	movs	r2, #0
 8006552:	701a      	strb	r2, [r3, #0]
      break;
 8006554:	e167      	b.n	8006826 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800655c:	f103 020a 	add.w	r2, r3, #10
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006566:	200a      	movs	r0, #10
 8006568:	f001 fc67 	bl	8007e3a <USBH_Delay>
      break;
 800656c:	e15b      	b.n	8006826 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006574:	2b00      	cmp	r3, #0
 8006576:	d005      	beq.n	8006584 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800657e:	2104      	movs	r1, #4
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006584:	2064      	movs	r0, #100	; 0x64
 8006586:	f001 fc58 	bl	8007e3a <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f001 fb26 	bl	8007bdc <USBH_LL_GetSpeed>
 8006590:	4603      	mov	r3, r0
 8006592:	461a      	mov	r2, r3
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2205      	movs	r2, #5
 800659e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80065a0:	2100      	movs	r1, #0
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f001 f931 	bl	800780a <USBH_AllocPipe>
 80065a8:	4603      	mov	r3, r0
 80065aa:	461a      	mov	r2, r3
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80065b0:	2180      	movs	r1, #128	; 0x80
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f001 f929 	bl	800780a <USBH_AllocPipe>
 80065b8:	4603      	mov	r3, r0
 80065ba:	461a      	mov	r2, r3
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	7919      	ldrb	r1, [r3, #4]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80065d4:	b292      	uxth	r2, r2
 80065d6:	9202      	str	r2, [sp, #8]
 80065d8:	2200      	movs	r2, #0
 80065da:	9201      	str	r2, [sp, #4]
 80065dc:	9300      	str	r3, [sp, #0]
 80065de:	4603      	mov	r3, r0
 80065e0:	2280      	movs	r2, #128	; 0x80
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f001 f8e2 	bl	80077ac <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	7959      	ldrb	r1, [r3, #5]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80065fc:	b292      	uxth	r2, r2
 80065fe:	9202      	str	r2, [sp, #8]
 8006600:	2200      	movs	r2, #0
 8006602:	9201      	str	r2, [sp, #4]
 8006604:	9300      	str	r3, [sp, #0]
 8006606:	4603      	mov	r3, r0
 8006608:	2200      	movs	r2, #0
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f001 f8ce 	bl	80077ac <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006610:	e109      	b.n	8006826 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 f90c 	bl	8006830 <USBH_HandleEnum>
 8006618:	4603      	mov	r3, r0
 800661a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800661c:	7bbb      	ldrb	r3, [r7, #14]
 800661e:	b2db      	uxtb	r3, r3
 8006620:	2b00      	cmp	r3, #0
 8006622:	f040 80f3 	bne.w	800680c <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2200      	movs	r2, #0
 800662a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006634:	2b01      	cmp	r3, #1
 8006636:	d103      	bne.n	8006640 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2208      	movs	r2, #8
 800663c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800663e:	e0e5      	b.n	800680c <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2207      	movs	r2, #7
 8006644:	701a      	strb	r2, [r3, #0]
      break;
 8006646:	e0e1      	b.n	800680c <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800664e:	2b00      	cmp	r3, #0
 8006650:	f000 80de 	beq.w	8006810 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800665a:	2101      	movs	r1, #1
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2208      	movs	r2, #8
 8006664:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006666:	e0d3      	b.n	8006810 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800666e:	b29b      	uxth	r3, r3
 8006670:	4619      	mov	r1, r3
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 fc20 	bl	8006eb8 <USBH_SetCfg>
 8006678:	4603      	mov	r3, r0
 800667a:	2b00      	cmp	r3, #0
 800667c:	f040 80ca 	bne.w	8006814 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2209      	movs	r2, #9
 8006684:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006686:	e0c5      	b.n	8006814 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800668e:	f003 0320 	and.w	r3, r3, #32
 8006692:	2b00      	cmp	r3, #0
 8006694:	d00b      	beq.n	80066ae <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8006696:	2101      	movs	r1, #1
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f000 fc30 	bl	8006efe <USBH_SetFeature>
 800669e:	4603      	mov	r3, r0
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	f040 80b9 	bne.w	8006818 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	220a      	movs	r2, #10
 80066aa:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80066ac:	e0b4      	b.n	8006818 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	220a      	movs	r2, #10
 80066b2:	701a      	strb	r2, [r3, #0]
      break;
 80066b4:	e0b0      	b.n	8006818 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80066bc:	2b00      	cmp	r3, #0
 80066be:	f000 80ad 	beq.w	800681c <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80066ca:	2300      	movs	r3, #0
 80066cc:	73fb      	strb	r3, [r7, #15]
 80066ce:	e016      	b.n	80066fe <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80066d0:	7bfa      	ldrb	r2, [r7, #15]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	32de      	adds	r2, #222	; 0xde
 80066d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066da:	791a      	ldrb	r2, [r3, #4]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d108      	bne.n	80066f8 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 80066e6:	7bfa      	ldrb	r2, [r7, #15]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	32de      	adds	r2, #222	; 0xde
 80066ec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80066f6:	e005      	b.n	8006704 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80066f8:	7bfb      	ldrb	r3, [r7, #15]
 80066fa:	3301      	adds	r3, #1
 80066fc:	73fb      	strb	r3, [r7, #15]
 80066fe:	7bfb      	ldrb	r3, [r7, #15]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d0e5      	beq.n	80066d0 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800670a:	2b00      	cmp	r3, #0
 800670c:	d016      	beq.n	800673c <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	4798      	blx	r3
 800671a:	4603      	mov	r3, r0
 800671c:	2b00      	cmp	r3, #0
 800671e:	d109      	bne.n	8006734 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2206      	movs	r2, #6
 8006724:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800672c:	2103      	movs	r1, #3
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006732:	e073      	b.n	800681c <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	220d      	movs	r2, #13
 8006738:	701a      	strb	r2, [r3, #0]
      break;
 800673a:	e06f      	b.n	800681c <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	220d      	movs	r2, #13
 8006740:	701a      	strb	r2, [r3, #0]
      break;
 8006742:	e06b      	b.n	800681c <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800674a:	2b00      	cmp	r3, #0
 800674c:	d017      	beq.n	800677e <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006754:	691b      	ldr	r3, [r3, #16]
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	4798      	blx	r3
 800675a:	4603      	mov	r3, r0
 800675c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800675e:	7bbb      	ldrb	r3, [r7, #14]
 8006760:	b2db      	uxtb	r3, r3
 8006762:	2b00      	cmp	r3, #0
 8006764:	d103      	bne.n	800676e <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	220b      	movs	r2, #11
 800676a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800676c:	e058      	b.n	8006820 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800676e:	7bbb      	ldrb	r3, [r7, #14]
 8006770:	b2db      	uxtb	r3, r3
 8006772:	2b02      	cmp	r3, #2
 8006774:	d154      	bne.n	8006820 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	220d      	movs	r2, #13
 800677a:	701a      	strb	r2, [r3, #0]
      break;
 800677c:	e050      	b.n	8006820 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	220d      	movs	r2, #13
 8006782:	701a      	strb	r2, [r3, #0]
      break;
 8006784:	e04c      	b.n	8006820 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800678c:	2b00      	cmp	r3, #0
 800678e:	d049      	beq.n	8006824 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006796:	695b      	ldr	r3, [r3, #20]
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	4798      	blx	r3
      }
      break;
 800679c:	e042      	b.n	8006824 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f7ff fd72 	bl	8006290 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d009      	beq.n	80067ca <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067bc:	68db      	ldr	r3, [r3, #12]
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d005      	beq.n	80067e0 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80067da:	2105      	movs	r1, #5
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d107      	bne.n	80067fc <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f7ff fe2b 	bl	8006450 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80067fa:	e014      	b.n	8006826 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f001 f9b7 	bl	8007b70 <USBH_LL_Start>
      break;
 8006802:	e010      	b.n	8006826 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8006804:	bf00      	nop
 8006806:	e00e      	b.n	8006826 <USBH_Process+0x3b6>
      break;
 8006808:	bf00      	nop
 800680a:	e00c      	b.n	8006826 <USBH_Process+0x3b6>
      break;
 800680c:	bf00      	nop
 800680e:	e00a      	b.n	8006826 <USBH_Process+0x3b6>
    break;
 8006810:	bf00      	nop
 8006812:	e008      	b.n	8006826 <USBH_Process+0x3b6>
      break;
 8006814:	bf00      	nop
 8006816:	e006      	b.n	8006826 <USBH_Process+0x3b6>
      break;
 8006818:	bf00      	nop
 800681a:	e004      	b.n	8006826 <USBH_Process+0x3b6>
      break;
 800681c:	bf00      	nop
 800681e:	e002      	b.n	8006826 <USBH_Process+0x3b6>
      break;
 8006820:	bf00      	nop
 8006822:	e000      	b.n	8006826 <USBH_Process+0x3b6>
      break;
 8006824:	bf00      	nop
  }
  return USBH_OK;
 8006826:	2300      	movs	r3, #0
}
 8006828:	4618      	mov	r0, r3
 800682a:	3710      	adds	r7, #16
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}

08006830 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b088      	sub	sp, #32
 8006834:	af04      	add	r7, sp, #16
 8006836:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006838:	2301      	movs	r3, #1
 800683a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800683c:	2301      	movs	r3, #1
 800683e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	785b      	ldrb	r3, [r3, #1]
 8006844:	2b07      	cmp	r3, #7
 8006846:	f200 81c1 	bhi.w	8006bcc <USBH_HandleEnum+0x39c>
 800684a:	a201      	add	r2, pc, #4	; (adr r2, 8006850 <USBH_HandleEnum+0x20>)
 800684c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006850:	08006871 	.word	0x08006871
 8006854:	0800692f 	.word	0x0800692f
 8006858:	08006999 	.word	0x08006999
 800685c:	08006a27 	.word	0x08006a27
 8006860:	08006a91 	.word	0x08006a91
 8006864:	08006b01 	.word	0x08006b01
 8006868:	08006b47 	.word	0x08006b47
 800686c:	08006b8d 	.word	0x08006b8d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006870:	2108      	movs	r1, #8
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f000 fa50 	bl	8006d18 <USBH_Get_DevDesc>
 8006878:	4603      	mov	r3, r0
 800687a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800687c:	7bbb      	ldrb	r3, [r7, #14]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d130      	bne.n	80068e4 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2201      	movs	r2, #1
 8006890:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	7919      	ldrb	r1, [r3, #4]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80068a6:	b292      	uxth	r2, r2
 80068a8:	9202      	str	r2, [sp, #8]
 80068aa:	2200      	movs	r2, #0
 80068ac:	9201      	str	r2, [sp, #4]
 80068ae:	9300      	str	r3, [sp, #0]
 80068b0:	4603      	mov	r3, r0
 80068b2:	2280      	movs	r2, #128	; 0x80
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f000 ff79 	bl	80077ac <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	7959      	ldrb	r1, [r3, #5]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80068ce:	b292      	uxth	r2, r2
 80068d0:	9202      	str	r2, [sp, #8]
 80068d2:	2200      	movs	r2, #0
 80068d4:	9201      	str	r2, [sp, #4]
 80068d6:	9300      	str	r3, [sp, #0]
 80068d8:	4603      	mov	r3, r0
 80068da:	2200      	movs	r2, #0
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 ff65 	bl	80077ac <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80068e2:	e175      	b.n	8006bd0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80068e4:	7bbb      	ldrb	r3, [r7, #14]
 80068e6:	2b03      	cmp	r3, #3
 80068e8:	f040 8172 	bne.w	8006bd0 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80068f2:	3301      	adds	r3, #1
 80068f4:	b2da      	uxtb	r2, r3
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006902:	2b03      	cmp	r3, #3
 8006904:	d903      	bls.n	800690e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	220d      	movs	r2, #13
 800690a:	701a      	strb	r2, [r3, #0]
      break;
 800690c:	e160      	b.n	8006bd0 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	795b      	ldrb	r3, [r3, #5]
 8006912:	4619      	mov	r1, r3
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f000 ff99 	bl	800784c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	791b      	ldrb	r3, [r3, #4]
 800691e:	4619      	mov	r1, r3
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f000 ff93 	bl	800784c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	701a      	strb	r2, [r3, #0]
      break;
 800692c:	e150      	b.n	8006bd0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800692e:	2112      	movs	r1, #18
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f000 f9f1 	bl	8006d18 <USBH_Get_DevDesc>
 8006936:	4603      	mov	r3, r0
 8006938:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800693a:	7bbb      	ldrb	r3, [r7, #14]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d103      	bne.n	8006948 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2202      	movs	r2, #2
 8006944:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006946:	e145      	b.n	8006bd4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006948:	7bbb      	ldrb	r3, [r7, #14]
 800694a:	2b03      	cmp	r3, #3
 800694c:	f040 8142 	bne.w	8006bd4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006956:	3301      	adds	r3, #1
 8006958:	b2da      	uxtb	r2, r3
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006966:	2b03      	cmp	r3, #3
 8006968:	d903      	bls.n	8006972 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	220d      	movs	r2, #13
 800696e:	701a      	strb	r2, [r3, #0]
      break;
 8006970:	e130      	b.n	8006bd4 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	795b      	ldrb	r3, [r3, #5]
 8006976:	4619      	mov	r1, r3
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f000 ff67 	bl	800784c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	791b      	ldrb	r3, [r3, #4]
 8006982:	4619      	mov	r1, r3
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f000 ff61 	bl	800784c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	701a      	strb	r2, [r3, #0]
      break;
 8006996:	e11d      	b.n	8006bd4 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006998:	2101      	movs	r1, #1
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 fa68 	bl	8006e70 <USBH_SetAddress>
 80069a0:	4603      	mov	r3, r0
 80069a2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80069a4:	7bbb      	ldrb	r3, [r7, #14]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d132      	bne.n	8006a10 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80069aa:	2002      	movs	r0, #2
 80069ac:	f001 fa45 	bl	8007e3a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2203      	movs	r2, #3
 80069bc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	7919      	ldrb	r1, [r3, #4]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80069ce:	687a      	ldr	r2, [r7, #4]
 80069d0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80069d2:	b292      	uxth	r2, r2
 80069d4:	9202      	str	r2, [sp, #8]
 80069d6:	2200      	movs	r2, #0
 80069d8:	9201      	str	r2, [sp, #4]
 80069da:	9300      	str	r3, [sp, #0]
 80069dc:	4603      	mov	r3, r0
 80069de:	2280      	movs	r2, #128	; 0x80
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f000 fee3 	bl	80077ac <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	7959      	ldrb	r1, [r3, #5]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80069fa:	b292      	uxth	r2, r2
 80069fc:	9202      	str	r2, [sp, #8]
 80069fe:	2200      	movs	r2, #0
 8006a00:	9201      	str	r2, [sp, #4]
 8006a02:	9300      	str	r3, [sp, #0]
 8006a04:	4603      	mov	r3, r0
 8006a06:	2200      	movs	r2, #0
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f000 fecf 	bl	80077ac <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006a0e:	e0e3      	b.n	8006bd8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006a10:	7bbb      	ldrb	r3, [r7, #14]
 8006a12:	2b03      	cmp	r3, #3
 8006a14:	f040 80e0 	bne.w	8006bd8 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	220d      	movs	r2, #13
 8006a1c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2200      	movs	r2, #0
 8006a22:	705a      	strb	r2, [r3, #1]
      break;
 8006a24:	e0d8      	b.n	8006bd8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006a26:	2109      	movs	r1, #9
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f000 f99d 	bl	8006d68 <USBH_Get_CfgDesc>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006a32:	7bbb      	ldrb	r3, [r7, #14]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d103      	bne.n	8006a40 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2204      	movs	r2, #4
 8006a3c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006a3e:	e0cd      	b.n	8006bdc <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006a40:	7bbb      	ldrb	r3, [r7, #14]
 8006a42:	2b03      	cmp	r3, #3
 8006a44:	f040 80ca 	bne.w	8006bdc <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006a4e:	3301      	adds	r3, #1
 8006a50:	b2da      	uxtb	r2, r3
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006a5e:	2b03      	cmp	r3, #3
 8006a60:	d903      	bls.n	8006a6a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	220d      	movs	r2, #13
 8006a66:	701a      	strb	r2, [r3, #0]
      break;
 8006a68:	e0b8      	b.n	8006bdc <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	795b      	ldrb	r3, [r3, #5]
 8006a6e:	4619      	mov	r1, r3
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 feeb 	bl	800784c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	791b      	ldrb	r3, [r3, #4]
 8006a7a:	4619      	mov	r1, r3
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f000 fee5 	bl	800784c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2200      	movs	r2, #0
 8006a86:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	701a      	strb	r2, [r3, #0]
      break;
 8006a8e:	e0a5      	b.n	8006bdc <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006a96:	4619      	mov	r1, r3
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f000 f965 	bl	8006d68 <USBH_Get_CfgDesc>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006aa2:	7bbb      	ldrb	r3, [r7, #14]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d103      	bne.n	8006ab0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2205      	movs	r2, #5
 8006aac:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006aae:	e097      	b.n	8006be0 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006ab0:	7bbb      	ldrb	r3, [r7, #14]
 8006ab2:	2b03      	cmp	r3, #3
 8006ab4:	f040 8094 	bne.w	8006be0 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006abe:	3301      	adds	r3, #1
 8006ac0:	b2da      	uxtb	r2, r3
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006ace:	2b03      	cmp	r3, #3
 8006ad0:	d903      	bls.n	8006ada <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	220d      	movs	r2, #13
 8006ad6:	701a      	strb	r2, [r3, #0]
      break;
 8006ad8:	e082      	b.n	8006be0 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	795b      	ldrb	r3, [r3, #5]
 8006ade:	4619      	mov	r1, r3
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f000 feb3 	bl	800784c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	791b      	ldrb	r3, [r3, #4]
 8006aea:	4619      	mov	r1, r3
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f000 fead 	bl	800784c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2200      	movs	r2, #0
 8006af6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2200      	movs	r2, #0
 8006afc:	701a      	strb	r2, [r3, #0]
      break;
 8006afe:	e06f      	b.n	8006be0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d019      	beq.n	8006b3e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006b16:	23ff      	movs	r3, #255	; 0xff
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f000 f949 	bl	8006db0 <USBH_Get_StringDesc>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006b22:	7bbb      	ldrb	r3, [r7, #14]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d103      	bne.n	8006b30 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2206      	movs	r2, #6
 8006b2c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006b2e:	e059      	b.n	8006be4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006b30:	7bbb      	ldrb	r3, [r7, #14]
 8006b32:	2b03      	cmp	r3, #3
 8006b34:	d156      	bne.n	8006be4 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2206      	movs	r2, #6
 8006b3a:	705a      	strb	r2, [r3, #1]
      break;
 8006b3c:	e052      	b.n	8006be4 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2206      	movs	r2, #6
 8006b42:	705a      	strb	r2, [r3, #1]
      break;
 8006b44:	e04e      	b.n	8006be4 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d019      	beq.n	8006b84 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006b5c:	23ff      	movs	r3, #255	; 0xff
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 f926 	bl	8006db0 <USBH_Get_StringDesc>
 8006b64:	4603      	mov	r3, r0
 8006b66:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006b68:	7bbb      	ldrb	r3, [r7, #14]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d103      	bne.n	8006b76 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2207      	movs	r2, #7
 8006b72:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006b74:	e038      	b.n	8006be8 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006b76:	7bbb      	ldrb	r3, [r7, #14]
 8006b78:	2b03      	cmp	r3, #3
 8006b7a:	d135      	bne.n	8006be8 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2207      	movs	r2, #7
 8006b80:	705a      	strb	r2, [r3, #1]
      break;
 8006b82:	e031      	b.n	8006be8 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2207      	movs	r2, #7
 8006b88:	705a      	strb	r2, [r3, #1]
      break;
 8006b8a:	e02d      	b.n	8006be8 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d017      	beq.n	8006bc6 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006ba2:	23ff      	movs	r3, #255	; 0xff
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f000 f903 	bl	8006db0 <USBH_Get_StringDesc>
 8006baa:	4603      	mov	r3, r0
 8006bac:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006bae:	7bbb      	ldrb	r3, [r7, #14]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d102      	bne.n	8006bba <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006bb8:	e018      	b.n	8006bec <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006bba:	7bbb      	ldrb	r3, [r7, #14]
 8006bbc:	2b03      	cmp	r3, #3
 8006bbe:	d115      	bne.n	8006bec <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	73fb      	strb	r3, [r7, #15]
      break;
 8006bc4:	e012      	b.n	8006bec <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	73fb      	strb	r3, [r7, #15]
      break;
 8006bca:	e00f      	b.n	8006bec <USBH_HandleEnum+0x3bc>

    default:
      break;
 8006bcc:	bf00      	nop
 8006bce:	e00e      	b.n	8006bee <USBH_HandleEnum+0x3be>
      break;
 8006bd0:	bf00      	nop
 8006bd2:	e00c      	b.n	8006bee <USBH_HandleEnum+0x3be>
      break;
 8006bd4:	bf00      	nop
 8006bd6:	e00a      	b.n	8006bee <USBH_HandleEnum+0x3be>
      break;
 8006bd8:	bf00      	nop
 8006bda:	e008      	b.n	8006bee <USBH_HandleEnum+0x3be>
      break;
 8006bdc:	bf00      	nop
 8006bde:	e006      	b.n	8006bee <USBH_HandleEnum+0x3be>
      break;
 8006be0:	bf00      	nop
 8006be2:	e004      	b.n	8006bee <USBH_HandleEnum+0x3be>
      break;
 8006be4:	bf00      	nop
 8006be6:	e002      	b.n	8006bee <USBH_HandleEnum+0x3be>
      break;
 8006be8:	bf00      	nop
 8006bea:	e000      	b.n	8006bee <USBH_HandleEnum+0x3be>
      break;
 8006bec:	bf00      	nop
  }
  return Status;
 8006bee:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3710      	adds	r7, #16
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}

08006bf8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b083      	sub	sp, #12
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	683a      	ldr	r2, [r7, #0]
 8006c06:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006c0a:	bf00      	nop
 8006c0c:	370c      	adds	r7, #12
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr

08006c16 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006c16:	b580      	push	{r7, lr}
 8006c18:	b082      	sub	sp, #8
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006c24:	1c5a      	adds	r2, r3, #1
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f000 f804 	bl	8006c3a <USBH_HandleSof>
}
 8006c32:	bf00      	nop
 8006c34:	3708      	adds	r7, #8
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}

08006c3a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006c3a:	b580      	push	{r7, lr}
 8006c3c:	b082      	sub	sp, #8
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	b2db      	uxtb	r3, r3
 8006c48:	2b0b      	cmp	r3, #11
 8006c4a:	d10a      	bne.n	8006c62 <USBH_HandleSof+0x28>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d005      	beq.n	8006c62 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c5c:	699b      	ldr	r3, [r3, #24]
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	4798      	blx	r3
  }
}
 8006c62:	bf00      	nop
 8006c64:	3708      	adds	r7, #8
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}

08006c6a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006c6a:	b480      	push	{r7}
 8006c6c:	b083      	sub	sp, #12
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2201      	movs	r2, #1
 8006c76:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8006c7a:	bf00      	nop
}
 8006c7c:	370c      	adds	r7, #12
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c84:	4770      	bx	lr

08006c86 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006c86:	b480      	push	{r7}
 8006c88:	b083      	sub	sp, #12
 8006c8a:	af00      	add	r7, sp, #0
 8006c8c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2200      	movs	r2, #0
 8006c92:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006c96:	bf00      	nop
}
 8006c98:	370c      	adds	r7, #12
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr

08006ca2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006ca2:	b480      	push	{r7}
 8006ca4:	b083      	sub	sp, #12
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2201      	movs	r2, #1
 8006cae:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006cc2:	2300      	movs	r3, #0
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	370c      	adds	r7, #12
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr

08006cd0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b082      	sub	sp, #8
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f000 ff58 	bl	8007ba6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	791b      	ldrb	r3, [r3, #4]
 8006cfa:	4619      	mov	r1, r3
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f000 fda5 	bl	800784c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	795b      	ldrb	r3, [r3, #5]
 8006d06:	4619      	mov	r1, r3
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f000 fd9f 	bl	800784c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006d0e:	2300      	movs	r3, #0
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3708      	adds	r7, #8
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}

08006d18 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b086      	sub	sp, #24
 8006d1c:	af02      	add	r7, sp, #8
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	460b      	mov	r3, r1
 8006d22:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8006d2a:	78fb      	ldrb	r3, [r7, #3]
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	9300      	str	r3, [sp, #0]
 8006d30:	4613      	mov	r3, r2
 8006d32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006d36:	2100      	movs	r1, #0
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f000 f864 	bl	8006e06 <USBH_GetDescriptor>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	73fb      	strb	r3, [r7, #15]
 8006d42:	7bfb      	ldrb	r3, [r7, #15]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d10a      	bne.n	8006d5e <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f203 3026 	addw	r0, r3, #806	; 0x326
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006d54:	78fa      	ldrb	r2, [r7, #3]
 8006d56:	b292      	uxth	r2, r2
 8006d58:	4619      	mov	r1, r3
 8006d5a:	f000 f918 	bl	8006f8e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8006d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3710      	adds	r7, #16
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b086      	sub	sp, #24
 8006d6c:	af02      	add	r7, sp, #8
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	460b      	mov	r3, r1
 8006d72:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	331c      	adds	r3, #28
 8006d78:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8006d7a:	887b      	ldrh	r3, [r7, #2]
 8006d7c:	9300      	str	r3, [sp, #0]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d84:	2100      	movs	r1, #0
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 f83d 	bl	8006e06 <USBH_GetDescriptor>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	72fb      	strb	r3, [r7, #11]
 8006d90:	7afb      	ldrb	r3, [r7, #11]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d107      	bne.n	8006da6 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006d9c:	887a      	ldrh	r2, [r7, #2]
 8006d9e:	68f9      	ldr	r1, [r7, #12]
 8006da0:	4618      	mov	r0, r3
 8006da2:	f000 f964 	bl	800706e <USBH_ParseCfgDesc>
  }

  return status;
 8006da6:	7afb      	ldrb	r3, [r7, #11]
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3710      	adds	r7, #16
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}

08006db0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b088      	sub	sp, #32
 8006db4:	af02      	add	r7, sp, #8
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	607a      	str	r2, [r7, #4]
 8006dba:	461a      	mov	r2, r3
 8006dbc:	460b      	mov	r3, r1
 8006dbe:	72fb      	strb	r3, [r7, #11]
 8006dc0:	4613      	mov	r3, r2
 8006dc2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8006dc4:	7afb      	ldrb	r3, [r7, #11]
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006dcc:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8006dd4:	893b      	ldrh	r3, [r7, #8]
 8006dd6:	9300      	str	r3, [sp, #0]
 8006dd8:	460b      	mov	r3, r1
 8006dda:	2100      	movs	r1, #0
 8006ddc:	68f8      	ldr	r0, [r7, #12]
 8006dde:	f000 f812 	bl	8006e06 <USBH_GetDescriptor>
 8006de2:	4603      	mov	r3, r0
 8006de4:	75fb      	strb	r3, [r7, #23]
 8006de6:	7dfb      	ldrb	r3, [r7, #23]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d107      	bne.n	8006dfc <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006df2:	893a      	ldrh	r2, [r7, #8]
 8006df4:	6879      	ldr	r1, [r7, #4]
 8006df6:	4618      	mov	r0, r3
 8006df8:	f000 fa37 	bl	800726a <USBH_ParseStringDesc>
  }

  return status;
 8006dfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3718      	adds	r7, #24
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}

08006e06 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8006e06:	b580      	push	{r7, lr}
 8006e08:	b084      	sub	sp, #16
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	60f8      	str	r0, [r7, #12]
 8006e0e:	607b      	str	r3, [r7, #4]
 8006e10:	460b      	mov	r3, r1
 8006e12:	72fb      	strb	r3, [r7, #11]
 8006e14:	4613      	mov	r3, r2
 8006e16:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	789b      	ldrb	r3, [r3, #2]
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d11c      	bne.n	8006e5a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8006e20:	7afb      	ldrb	r3, [r7, #11]
 8006e22:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006e26:	b2da      	uxtb	r2, r3
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2206      	movs	r2, #6
 8006e30:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	893a      	ldrh	r2, [r7, #8]
 8006e36:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8006e38:	893b      	ldrh	r3, [r7, #8]
 8006e3a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006e3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e42:	d104      	bne.n	8006e4e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f240 4209 	movw	r2, #1033	; 0x409
 8006e4a:	829a      	strh	r2, [r3, #20]
 8006e4c:	e002      	b.n	8006e54 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2200      	movs	r2, #0
 8006e52:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	8b3a      	ldrh	r2, [r7, #24]
 8006e58:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8006e5a:	8b3b      	ldrh	r3, [r7, #24]
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	6879      	ldr	r1, [r7, #4]
 8006e60:	68f8      	ldr	r0, [r7, #12]
 8006e62:	f000 fa50 	bl	8007306 <USBH_CtlReq>
 8006e66:	4603      	mov	r3, r0
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3710      	adds	r7, #16
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}

08006e70 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b082      	sub	sp, #8
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	460b      	mov	r3, r1
 8006e7a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	789b      	ldrb	r3, [r3, #2]
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d10f      	bne.n	8006ea4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2200      	movs	r2, #0
 8006e88:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2205      	movs	r2, #5
 8006e8e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8006e90:	78fb      	ldrb	r3, [r7, #3]
 8006e92:	b29a      	uxth	r2, r3
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	2100      	movs	r1, #0
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f000 fa2c 	bl	8007306 <USBH_CtlReq>
 8006eae:	4603      	mov	r3, r0
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3708      	adds	r7, #8
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b082      	sub	sp, #8
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	460b      	mov	r3, r1
 8006ec2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	789b      	ldrb	r3, [r3, #2]
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d10e      	bne.n	8006eea <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2209      	movs	r2, #9
 8006ed6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	887a      	ldrh	r2, [r7, #2]
 8006edc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006eea:	2200      	movs	r2, #0
 8006eec:	2100      	movs	r1, #0
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 fa09 	bl	8007306 <USBH_CtlReq>
 8006ef4:	4603      	mov	r3, r0
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3708      	adds	r7, #8
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}

08006efe <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8006efe:	b580      	push	{r7, lr}
 8006f00:	b082      	sub	sp, #8
 8006f02:	af00      	add	r7, sp, #0
 8006f04:	6078      	str	r0, [r7, #4]
 8006f06:	460b      	mov	r3, r1
 8006f08:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	789b      	ldrb	r3, [r3, #2]
 8006f0e:	2b01      	cmp	r3, #1
 8006f10:	d10f      	bne.n	8006f32 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2203      	movs	r2, #3
 8006f1c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8006f1e:	78fb      	ldrb	r3, [r7, #3]
 8006f20:	b29a      	uxth	r2, r3
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006f32:	2200      	movs	r2, #0
 8006f34:	2100      	movs	r1, #0
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f000 f9e5 	bl	8007306 <USBH_CtlReq>
 8006f3c:	4603      	mov	r3, r0
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3708      	adds	r7, #8
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}

08006f46 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006f46:	b580      	push	{r7, lr}
 8006f48:	b082      	sub	sp, #8
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	6078      	str	r0, [r7, #4]
 8006f4e:	460b      	mov	r3, r1
 8006f50:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	789b      	ldrb	r3, [r3, #2]
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d10f      	bne.n	8006f7a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2202      	movs	r2, #2
 8006f5e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2201      	movs	r2, #1
 8006f64:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006f6c:	78fb      	ldrb	r3, [r7, #3]
 8006f6e:	b29a      	uxth	r2, r3
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2200      	movs	r2, #0
 8006f78:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	2100      	movs	r1, #0
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 f9c1 	bl	8007306 <USBH_CtlReq>
 8006f84:	4603      	mov	r3, r0
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3708      	adds	r7, #8
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}

08006f8e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8006f8e:	b480      	push	{r7}
 8006f90:	b085      	sub	sp, #20
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	60f8      	str	r0, [r7, #12]
 8006f96:	60b9      	str	r1, [r7, #8]
 8006f98:	4613      	mov	r3, r2
 8006f9a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	781a      	ldrb	r2, [r3, #0]
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	785a      	ldrb	r2, [r3, #1]
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	3302      	adds	r3, #2
 8006fb0:	781b      	ldrb	r3, [r3, #0]
 8006fb2:	b29a      	uxth	r2, r3
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	3303      	adds	r3, #3
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	021b      	lsls	r3, r3, #8
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	b29a      	uxth	r2, r3
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	791a      	ldrb	r2, [r3, #4]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	795a      	ldrb	r2, [r3, #5]
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	799a      	ldrb	r2, [r3, #6]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	79da      	ldrb	r2, [r3, #7]
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8006fe8:	88fb      	ldrh	r3, [r7, #6]
 8006fea:	2b08      	cmp	r3, #8
 8006fec:	d939      	bls.n	8007062 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	3308      	adds	r3, #8
 8006ff2:	781b      	ldrb	r3, [r3, #0]
 8006ff4:	b29a      	uxth	r2, r3
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	3309      	adds	r3, #9
 8006ffa:	781b      	ldrb	r3, [r3, #0]
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	021b      	lsls	r3, r3, #8
 8007000:	b29b      	uxth	r3, r3
 8007002:	4313      	orrs	r3, r2
 8007004:	b29a      	uxth	r2, r3
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	330a      	adds	r3, #10
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	b29a      	uxth	r2, r3
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	330b      	adds	r3, #11
 8007016:	781b      	ldrb	r3, [r3, #0]
 8007018:	b29b      	uxth	r3, r3
 800701a:	021b      	lsls	r3, r3, #8
 800701c:	b29b      	uxth	r3, r3
 800701e:	4313      	orrs	r3, r2
 8007020:	b29a      	uxth	r2, r3
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	330c      	adds	r3, #12
 800702a:	781b      	ldrb	r3, [r3, #0]
 800702c:	b29a      	uxth	r2, r3
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	330d      	adds	r3, #13
 8007032:	781b      	ldrb	r3, [r3, #0]
 8007034:	b29b      	uxth	r3, r3
 8007036:	021b      	lsls	r3, r3, #8
 8007038:	b29b      	uxth	r3, r3
 800703a:	4313      	orrs	r3, r2
 800703c:	b29a      	uxth	r2, r3
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	7b9a      	ldrb	r2, [r3, #14]
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	7bda      	ldrb	r2, [r3, #15]
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	7c1a      	ldrb	r2, [r3, #16]
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	7c5a      	ldrb	r2, [r3, #17]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	745a      	strb	r2, [r3, #17]
  }
}
 8007062:	bf00      	nop
 8007064:	3714      	adds	r7, #20
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr

0800706e <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800706e:	b580      	push	{r7, lr}
 8007070:	b08a      	sub	sp, #40	; 0x28
 8007072:	af00      	add	r7, sp, #0
 8007074:	60f8      	str	r0, [r7, #12]
 8007076:	60b9      	str	r1, [r7, #8]
 8007078:	4613      	mov	r3, r2
 800707a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007080:	2300      	movs	r3, #0
 8007082:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8007086:	2300      	movs	r3, #0
 8007088:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	781a      	ldrb	r2, [r3, #0]
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	785a      	ldrb	r2, [r3, #1]
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	3302      	adds	r3, #2
 80070a4:	781b      	ldrb	r3, [r3, #0]
 80070a6:	b29a      	uxth	r2, r3
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	3303      	adds	r3, #3
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	b29b      	uxth	r3, r3
 80070b0:	021b      	lsls	r3, r3, #8
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	4313      	orrs	r3, r2
 80070b6:	b29a      	uxth	r2, r3
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	791a      	ldrb	r2, [r3, #4]
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	795a      	ldrb	r2, [r3, #5]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	799a      	ldrb	r2, [r3, #6]
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	79da      	ldrb	r2, [r3, #7]
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	7a1a      	ldrb	r2, [r3, #8]
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80070e4:	88fb      	ldrh	r3, [r7, #6]
 80070e6:	2b09      	cmp	r3, #9
 80070e8:	d95f      	bls.n	80071aa <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80070ea:	2309      	movs	r3, #9
 80070ec:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80070ee:	2300      	movs	r3, #0
 80070f0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80070f2:	e051      	b.n	8007198 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80070f4:	f107 0316 	add.w	r3, r7, #22
 80070f8:	4619      	mov	r1, r3
 80070fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80070fc:	f000 f8e8 	bl	80072d0 <USBH_GetNextDesc>
 8007100:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8007102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007104:	785b      	ldrb	r3, [r3, #1]
 8007106:	2b04      	cmp	r3, #4
 8007108:	d146      	bne.n	8007198 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800710a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800710e:	221a      	movs	r2, #26
 8007110:	fb02 f303 	mul.w	r3, r2, r3
 8007114:	3308      	adds	r3, #8
 8007116:	68fa      	ldr	r2, [r7, #12]
 8007118:	4413      	add	r3, r2
 800711a:	3302      	adds	r3, #2
 800711c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800711e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007120:	69f8      	ldr	r0, [r7, #28]
 8007122:	f000 f846 	bl	80071b2 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007126:	2300      	movs	r3, #0
 8007128:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800712c:	2300      	movs	r3, #0
 800712e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007130:	e022      	b.n	8007178 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007132:	f107 0316 	add.w	r3, r7, #22
 8007136:	4619      	mov	r1, r3
 8007138:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800713a:	f000 f8c9 	bl	80072d0 <USBH_GetNextDesc>
 800713e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8007140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007142:	785b      	ldrb	r3, [r3, #1]
 8007144:	2b05      	cmp	r3, #5
 8007146:	d117      	bne.n	8007178 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007148:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800714c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007150:	3201      	adds	r2, #1
 8007152:	00d2      	lsls	r2, r2, #3
 8007154:	211a      	movs	r1, #26
 8007156:	fb01 f303 	mul.w	r3, r1, r3
 800715a:	4413      	add	r3, r2
 800715c:	3308      	adds	r3, #8
 800715e:	68fa      	ldr	r2, [r7, #12]
 8007160:	4413      	add	r3, r2
 8007162:	3304      	adds	r3, #4
 8007164:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8007166:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007168:	69b8      	ldr	r0, [r7, #24]
 800716a:	f000 f851 	bl	8007210 <USBH_ParseEPDesc>
            ep_ix++;
 800716e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007172:	3301      	adds	r3, #1
 8007174:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007178:	69fb      	ldr	r3, [r7, #28]
 800717a:	791b      	ldrb	r3, [r3, #4]
 800717c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007180:	429a      	cmp	r2, r3
 8007182:	d204      	bcs.n	800718e <USBH_ParseCfgDesc+0x120>
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	885a      	ldrh	r2, [r3, #2]
 8007188:	8afb      	ldrh	r3, [r7, #22]
 800718a:	429a      	cmp	r2, r3
 800718c:	d8d1      	bhi.n	8007132 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800718e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007192:	3301      	adds	r3, #1
 8007194:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007198:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800719c:	2b01      	cmp	r3, #1
 800719e:	d804      	bhi.n	80071aa <USBH_ParseCfgDesc+0x13c>
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	885a      	ldrh	r2, [r3, #2]
 80071a4:	8afb      	ldrh	r3, [r7, #22]
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d8a4      	bhi.n	80070f4 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80071aa:	bf00      	nop
 80071ac:	3728      	adds	r7, #40	; 0x28
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}

080071b2 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80071b2:	b480      	push	{r7}
 80071b4:	b083      	sub	sp, #12
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6078      	str	r0, [r7, #4]
 80071ba:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	781a      	ldrb	r2, [r3, #0]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	785a      	ldrb	r2, [r3, #1]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	789a      	ldrb	r2, [r3, #2]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	78da      	ldrb	r2, [r3, #3]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	791a      	ldrb	r2, [r3, #4]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	795a      	ldrb	r2, [r3, #5]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	799a      	ldrb	r2, [r3, #6]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	79da      	ldrb	r2, [r3, #7]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	7a1a      	ldrb	r2, [r3, #8]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	721a      	strb	r2, [r3, #8]
}
 8007204:	bf00      	nop
 8007206:	370c      	adds	r7, #12
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr

08007210 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8007210:	b480      	push	{r7}
 8007212:	b083      	sub	sp, #12
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	781a      	ldrb	r2, [r3, #0]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	785a      	ldrb	r2, [r3, #1]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	789a      	ldrb	r2, [r3, #2]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	78da      	ldrb	r2, [r3, #3]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	3304      	adds	r3, #4
 800723e:	781b      	ldrb	r3, [r3, #0]
 8007240:	b29a      	uxth	r2, r3
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	3305      	adds	r3, #5
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	b29b      	uxth	r3, r3
 800724a:	021b      	lsls	r3, r3, #8
 800724c:	b29b      	uxth	r3, r3
 800724e:	4313      	orrs	r3, r2
 8007250:	b29a      	uxth	r2, r3
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	799a      	ldrb	r2, [r3, #6]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	719a      	strb	r2, [r3, #6]
}
 800725e:	bf00      	nop
 8007260:	370c      	adds	r7, #12
 8007262:	46bd      	mov	sp, r7
 8007264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007268:	4770      	bx	lr

0800726a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800726a:	b480      	push	{r7}
 800726c:	b087      	sub	sp, #28
 800726e:	af00      	add	r7, sp, #0
 8007270:	60f8      	str	r0, [r7, #12]
 8007272:	60b9      	str	r1, [r7, #8]
 8007274:	4613      	mov	r3, r2
 8007276:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	3301      	adds	r3, #1
 800727c:	781b      	ldrb	r3, [r3, #0]
 800727e:	2b03      	cmp	r3, #3
 8007280:	d120      	bne.n	80072c4 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	781b      	ldrb	r3, [r3, #0]
 8007286:	1e9a      	subs	r2, r3, #2
 8007288:	88fb      	ldrh	r3, [r7, #6]
 800728a:	4293      	cmp	r3, r2
 800728c:	bf28      	it	cs
 800728e:	4613      	movcs	r3, r2
 8007290:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	3302      	adds	r3, #2
 8007296:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007298:	2300      	movs	r3, #0
 800729a:	82fb      	strh	r3, [r7, #22]
 800729c:	e00b      	b.n	80072b6 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800729e:	8afb      	ldrh	r3, [r7, #22]
 80072a0:	68fa      	ldr	r2, [r7, #12]
 80072a2:	4413      	add	r3, r2
 80072a4:	781a      	ldrb	r2, [r3, #0]
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	701a      	strb	r2, [r3, #0]
      pdest++;
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	3301      	adds	r3, #1
 80072ae:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80072b0:	8afb      	ldrh	r3, [r7, #22]
 80072b2:	3302      	adds	r3, #2
 80072b4:	82fb      	strh	r3, [r7, #22]
 80072b6:	8afa      	ldrh	r2, [r7, #22]
 80072b8:	8abb      	ldrh	r3, [r7, #20]
 80072ba:	429a      	cmp	r2, r3
 80072bc:	d3ef      	bcc.n	800729e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	2200      	movs	r2, #0
 80072c2:	701a      	strb	r2, [r3, #0]
  }
}
 80072c4:	bf00      	nop
 80072c6:	371c      	adds	r7, #28
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr

080072d0 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b085      	sub	sp, #20
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	881a      	ldrh	r2, [r3, #0]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	781b      	ldrb	r3, [r3, #0]
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	4413      	add	r3, r2
 80072e6:	b29a      	uxth	r2, r3
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	781b      	ldrb	r3, [r3, #0]
 80072f0:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	4413      	add	r3, r2
 80072f6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80072f8:	68fb      	ldr	r3, [r7, #12]
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3714      	adds	r7, #20
 80072fe:	46bd      	mov	sp, r7
 8007300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007304:	4770      	bx	lr

08007306 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007306:	b580      	push	{r7, lr}
 8007308:	b086      	sub	sp, #24
 800730a:	af00      	add	r7, sp, #0
 800730c:	60f8      	str	r0, [r7, #12]
 800730e:	60b9      	str	r1, [r7, #8]
 8007310:	4613      	mov	r3, r2
 8007312:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007314:	2301      	movs	r3, #1
 8007316:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	789b      	ldrb	r3, [r3, #2]
 800731c:	2b01      	cmp	r3, #1
 800731e:	d002      	beq.n	8007326 <USBH_CtlReq+0x20>
 8007320:	2b02      	cmp	r3, #2
 8007322:	d00f      	beq.n	8007344 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007324:	e027      	b.n	8007376 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	68ba      	ldr	r2, [r7, #8]
 800732a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	88fa      	ldrh	r2, [r7, #6]
 8007330:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2201      	movs	r2, #1
 8007336:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2202      	movs	r2, #2
 800733c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800733e:	2301      	movs	r3, #1
 8007340:	75fb      	strb	r3, [r7, #23]
      break;
 8007342:	e018      	b.n	8007376 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007344:	68f8      	ldr	r0, [r7, #12]
 8007346:	f000 f81b 	bl	8007380 <USBH_HandleControl>
 800734a:	4603      	mov	r3, r0
 800734c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800734e:	7dfb      	ldrb	r3, [r7, #23]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d002      	beq.n	800735a <USBH_CtlReq+0x54>
 8007354:	7dfb      	ldrb	r3, [r7, #23]
 8007356:	2b03      	cmp	r3, #3
 8007358:	d106      	bne.n	8007368 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2201      	movs	r2, #1
 800735e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2200      	movs	r2, #0
 8007364:	761a      	strb	r2, [r3, #24]
      break;
 8007366:	e005      	b.n	8007374 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007368:	7dfb      	ldrb	r3, [r7, #23]
 800736a:	2b02      	cmp	r3, #2
 800736c:	d102      	bne.n	8007374 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2201      	movs	r2, #1
 8007372:	709a      	strb	r2, [r3, #2]
      break;
 8007374:	bf00      	nop
  }
  return status;
 8007376:	7dfb      	ldrb	r3, [r7, #23]
}
 8007378:	4618      	mov	r0, r3
 800737a:	3718      	adds	r7, #24
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b086      	sub	sp, #24
 8007384:	af02      	add	r7, sp, #8
 8007386:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007388:	2301      	movs	r3, #1
 800738a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800738c:	2300      	movs	r3, #0
 800738e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	7e1b      	ldrb	r3, [r3, #24]
 8007394:	3b01      	subs	r3, #1
 8007396:	2b0a      	cmp	r3, #10
 8007398:	f200 8158 	bhi.w	800764c <USBH_HandleControl+0x2cc>
 800739c:	a201      	add	r2, pc, #4	; (adr r2, 80073a4 <USBH_HandleControl+0x24>)
 800739e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073a2:	bf00      	nop
 80073a4:	080073d1 	.word	0x080073d1
 80073a8:	080073eb 	.word	0x080073eb
 80073ac:	08007455 	.word	0x08007455
 80073b0:	0800747b 	.word	0x0800747b
 80073b4:	080074b3 	.word	0x080074b3
 80073b8:	080074df 	.word	0x080074df
 80073bc:	08007531 	.word	0x08007531
 80073c0:	08007553 	.word	0x08007553
 80073c4:	0800758f 	.word	0x0800758f
 80073c8:	080075b7 	.word	0x080075b7
 80073cc:	080075f5 	.word	0x080075f5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f103 0110 	add.w	r1, r3, #16
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	795b      	ldrb	r3, [r3, #5]
 80073da:	461a      	mov	r2, r3
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 f945 	bl	800766c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2202      	movs	r2, #2
 80073e6:	761a      	strb	r2, [r3, #24]
      break;
 80073e8:	e13b      	b.n	8007662 <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	795b      	ldrb	r3, [r3, #5]
 80073ee:	4619      	mov	r1, r3
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f000 fcc5 	bl	8007d80 <USBH_LL_GetURBState>
 80073f6:	4603      	mov	r3, r0
 80073f8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80073fa:	7bbb      	ldrb	r3, [r7, #14]
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d11e      	bne.n	800743e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	7c1b      	ldrb	r3, [r3, #16]
 8007404:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007408:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	8adb      	ldrh	r3, [r3, #22]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d00a      	beq.n	8007428 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007412:	7b7b      	ldrb	r3, [r7, #13]
 8007414:	2b80      	cmp	r3, #128	; 0x80
 8007416:	d103      	bne.n	8007420 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2203      	movs	r2, #3
 800741c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800741e:	e117      	b.n	8007650 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2205      	movs	r2, #5
 8007424:	761a      	strb	r2, [r3, #24]
      break;
 8007426:	e113      	b.n	8007650 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 8007428:	7b7b      	ldrb	r3, [r7, #13]
 800742a:	2b80      	cmp	r3, #128	; 0x80
 800742c:	d103      	bne.n	8007436 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2209      	movs	r2, #9
 8007432:	761a      	strb	r2, [r3, #24]
      break;
 8007434:	e10c      	b.n	8007650 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2207      	movs	r2, #7
 800743a:	761a      	strb	r2, [r3, #24]
      break;
 800743c:	e108      	b.n	8007650 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800743e:	7bbb      	ldrb	r3, [r7, #14]
 8007440:	2b04      	cmp	r3, #4
 8007442:	d003      	beq.n	800744c <USBH_HandleControl+0xcc>
 8007444:	7bbb      	ldrb	r3, [r7, #14]
 8007446:	2b02      	cmp	r3, #2
 8007448:	f040 8102 	bne.w	8007650 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	220b      	movs	r2, #11
 8007450:	761a      	strb	r2, [r3, #24]
      break;
 8007452:	e0fd      	b.n	8007650 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800745a:	b29a      	uxth	r2, r3
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6899      	ldr	r1, [r3, #8]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	899a      	ldrh	r2, [r3, #12]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	791b      	ldrb	r3, [r3, #4]
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f000 f93c 	bl	80076ea <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2204      	movs	r2, #4
 8007476:	761a      	strb	r2, [r3, #24]
      break;
 8007478:	e0f3      	b.n	8007662 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	791b      	ldrb	r3, [r3, #4]
 800747e:	4619      	mov	r1, r3
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f000 fc7d 	bl	8007d80 <USBH_LL_GetURBState>
 8007486:	4603      	mov	r3, r0
 8007488:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800748a:	7bbb      	ldrb	r3, [r7, #14]
 800748c:	2b01      	cmp	r3, #1
 800748e:	d102      	bne.n	8007496 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2209      	movs	r2, #9
 8007494:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007496:	7bbb      	ldrb	r3, [r7, #14]
 8007498:	2b05      	cmp	r3, #5
 800749a:	d102      	bne.n	80074a2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800749c:	2303      	movs	r3, #3
 800749e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80074a0:	e0d8      	b.n	8007654 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80074a2:	7bbb      	ldrb	r3, [r7, #14]
 80074a4:	2b04      	cmp	r3, #4
 80074a6:	f040 80d5 	bne.w	8007654 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	220b      	movs	r2, #11
 80074ae:	761a      	strb	r2, [r3, #24]
      break;
 80074b0:	e0d0      	b.n	8007654 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6899      	ldr	r1, [r3, #8]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	899a      	ldrh	r2, [r3, #12]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	7958      	ldrb	r0, [r3, #5]
 80074be:	2301      	movs	r3, #1
 80074c0:	9300      	str	r3, [sp, #0]
 80074c2:	4603      	mov	r3, r0
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f000 f8eb 	bl	80076a0 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80074d0:	b29a      	uxth	r2, r3
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2206      	movs	r2, #6
 80074da:	761a      	strb	r2, [r3, #24]
      break;
 80074dc:	e0c1      	b.n	8007662 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	795b      	ldrb	r3, [r3, #5]
 80074e2:	4619      	mov	r1, r3
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f000 fc4b 	bl	8007d80 <USBH_LL_GetURBState>
 80074ea:	4603      	mov	r3, r0
 80074ec:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80074ee:	7bbb      	ldrb	r3, [r7, #14]
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d103      	bne.n	80074fc <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2207      	movs	r2, #7
 80074f8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80074fa:	e0ad      	b.n	8007658 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 80074fc:	7bbb      	ldrb	r3, [r7, #14]
 80074fe:	2b05      	cmp	r3, #5
 8007500:	d105      	bne.n	800750e <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	220c      	movs	r2, #12
 8007506:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007508:	2303      	movs	r3, #3
 800750a:	73fb      	strb	r3, [r7, #15]
      break;
 800750c:	e0a4      	b.n	8007658 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 800750e:	7bbb      	ldrb	r3, [r7, #14]
 8007510:	2b02      	cmp	r3, #2
 8007512:	d103      	bne.n	800751c <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2205      	movs	r2, #5
 8007518:	761a      	strb	r2, [r3, #24]
      break;
 800751a:	e09d      	b.n	8007658 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 800751c:	7bbb      	ldrb	r3, [r7, #14]
 800751e:	2b04      	cmp	r3, #4
 8007520:	f040 809a 	bne.w	8007658 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	220b      	movs	r2, #11
 8007528:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800752a:	2302      	movs	r3, #2
 800752c:	73fb      	strb	r3, [r7, #15]
      break;
 800752e:	e093      	b.n	8007658 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	791b      	ldrb	r3, [r3, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	2100      	movs	r1, #0
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 f8d6 	bl	80076ea <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007544:	b29a      	uxth	r2, r3
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2208      	movs	r2, #8
 800754e:	761a      	strb	r2, [r3, #24]

      break;
 8007550:	e087      	b.n	8007662 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	791b      	ldrb	r3, [r3, #4]
 8007556:	4619      	mov	r1, r3
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f000 fc11 	bl	8007d80 <USBH_LL_GetURBState>
 800755e:	4603      	mov	r3, r0
 8007560:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007562:	7bbb      	ldrb	r3, [r7, #14]
 8007564:	2b01      	cmp	r3, #1
 8007566:	d105      	bne.n	8007574 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	220d      	movs	r2, #13
 800756c:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800756e:	2300      	movs	r3, #0
 8007570:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007572:	e073      	b.n	800765c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 8007574:	7bbb      	ldrb	r3, [r7, #14]
 8007576:	2b04      	cmp	r3, #4
 8007578:	d103      	bne.n	8007582 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	220b      	movs	r2, #11
 800757e:	761a      	strb	r2, [r3, #24]
      break;
 8007580:	e06c      	b.n	800765c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 8007582:	7bbb      	ldrb	r3, [r7, #14]
 8007584:	2b05      	cmp	r3, #5
 8007586:	d169      	bne.n	800765c <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 8007588:	2303      	movs	r3, #3
 800758a:	73fb      	strb	r3, [r7, #15]
      break;
 800758c:	e066      	b.n	800765c <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	795a      	ldrb	r2, [r3, #5]
 8007592:	2301      	movs	r3, #1
 8007594:	9300      	str	r3, [sp, #0]
 8007596:	4613      	mov	r3, r2
 8007598:	2200      	movs	r2, #0
 800759a:	2100      	movs	r1, #0
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 f87f 	bl	80076a0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80075a8:	b29a      	uxth	r2, r3
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	220a      	movs	r2, #10
 80075b2:	761a      	strb	r2, [r3, #24]
      break;
 80075b4:	e055      	b.n	8007662 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	795b      	ldrb	r3, [r3, #5]
 80075ba:	4619      	mov	r1, r3
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f000 fbdf 	bl	8007d80 <USBH_LL_GetURBState>
 80075c2:	4603      	mov	r3, r0
 80075c4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80075c6:	7bbb      	ldrb	r3, [r7, #14]
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d105      	bne.n	80075d8 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 80075cc:	2300      	movs	r3, #0
 80075ce:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	220d      	movs	r2, #13
 80075d4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80075d6:	e043      	b.n	8007660 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 80075d8:	7bbb      	ldrb	r3, [r7, #14]
 80075da:	2b02      	cmp	r3, #2
 80075dc:	d103      	bne.n	80075e6 <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2209      	movs	r2, #9
 80075e2:	761a      	strb	r2, [r3, #24]
      break;
 80075e4:	e03c      	b.n	8007660 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 80075e6:	7bbb      	ldrb	r3, [r7, #14]
 80075e8:	2b04      	cmp	r3, #4
 80075ea:	d139      	bne.n	8007660 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	220b      	movs	r2, #11
 80075f0:	761a      	strb	r2, [r3, #24]
      break;
 80075f2:	e035      	b.n	8007660 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	7e5b      	ldrb	r3, [r3, #25]
 80075f8:	3301      	adds	r3, #1
 80075fa:	b2da      	uxtb	r2, r3
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	765a      	strb	r2, [r3, #25]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	7e5b      	ldrb	r3, [r3, #25]
 8007604:	2b02      	cmp	r3, #2
 8007606:	d806      	bhi.n	8007616 <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2201      	movs	r2, #1
 800760c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2201      	movs	r2, #1
 8007612:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007614:	e025      	b.n	8007662 <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800761c:	2106      	movs	r1, #6
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2200      	movs	r2, #0
 8007626:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	795b      	ldrb	r3, [r3, #5]
 800762c:	4619      	mov	r1, r3
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 f90c 	bl	800784c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	791b      	ldrb	r3, [r3, #4]
 8007638:	4619      	mov	r1, r3
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f000 f906 	bl	800784c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2200      	movs	r2, #0
 8007644:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007646:	2302      	movs	r3, #2
 8007648:	73fb      	strb	r3, [r7, #15]
      break;
 800764a:	e00a      	b.n	8007662 <USBH_HandleControl+0x2e2>

    default:
      break;
 800764c:	bf00      	nop
 800764e:	e008      	b.n	8007662 <USBH_HandleControl+0x2e2>
      break;
 8007650:	bf00      	nop
 8007652:	e006      	b.n	8007662 <USBH_HandleControl+0x2e2>
      break;
 8007654:	bf00      	nop
 8007656:	e004      	b.n	8007662 <USBH_HandleControl+0x2e2>
      break;
 8007658:	bf00      	nop
 800765a:	e002      	b.n	8007662 <USBH_HandleControl+0x2e2>
      break;
 800765c:	bf00      	nop
 800765e:	e000      	b.n	8007662 <USBH_HandleControl+0x2e2>
      break;
 8007660:	bf00      	nop
  }

  return status;
 8007662:	7bfb      	ldrb	r3, [r7, #15]
}
 8007664:	4618      	mov	r0, r3
 8007666:	3710      	adds	r7, #16
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}

0800766c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b088      	sub	sp, #32
 8007670:	af04      	add	r7, sp, #16
 8007672:	60f8      	str	r0, [r7, #12]
 8007674:	60b9      	str	r1, [r7, #8]
 8007676:	4613      	mov	r3, r2
 8007678:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800767a:	79f9      	ldrb	r1, [r7, #7]
 800767c:	2300      	movs	r3, #0
 800767e:	9303      	str	r3, [sp, #12]
 8007680:	2308      	movs	r3, #8
 8007682:	9302      	str	r3, [sp, #8]
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	9301      	str	r3, [sp, #4]
 8007688:	2300      	movs	r3, #0
 800768a:	9300      	str	r3, [sp, #0]
 800768c:	2300      	movs	r3, #0
 800768e:	2200      	movs	r2, #0
 8007690:	68f8      	ldr	r0, [r7, #12]
 8007692:	f000 fb44 	bl	8007d1e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8007696:	2300      	movs	r3, #0
}
 8007698:	4618      	mov	r0, r3
 800769a:	3710      	adds	r7, #16
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}

080076a0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b088      	sub	sp, #32
 80076a4:	af04      	add	r7, sp, #16
 80076a6:	60f8      	str	r0, [r7, #12]
 80076a8:	60b9      	str	r1, [r7, #8]
 80076aa:	4611      	mov	r1, r2
 80076ac:	461a      	mov	r2, r3
 80076ae:	460b      	mov	r3, r1
 80076b0:	80fb      	strh	r3, [r7, #6]
 80076b2:	4613      	mov	r3, r2
 80076b4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d001      	beq.n	80076c4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80076c0:	2300      	movs	r3, #0
 80076c2:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80076c4:	7979      	ldrb	r1, [r7, #5]
 80076c6:	7e3b      	ldrb	r3, [r7, #24]
 80076c8:	9303      	str	r3, [sp, #12]
 80076ca:	88fb      	ldrh	r3, [r7, #6]
 80076cc:	9302      	str	r3, [sp, #8]
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	9301      	str	r3, [sp, #4]
 80076d2:	2301      	movs	r3, #1
 80076d4:	9300      	str	r3, [sp, #0]
 80076d6:	2300      	movs	r3, #0
 80076d8:	2200      	movs	r2, #0
 80076da:	68f8      	ldr	r0, [r7, #12]
 80076dc:	f000 fb1f 	bl	8007d1e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80076e0:	2300      	movs	r3, #0
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3710      	adds	r7, #16
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}

080076ea <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80076ea:	b580      	push	{r7, lr}
 80076ec:	b088      	sub	sp, #32
 80076ee:	af04      	add	r7, sp, #16
 80076f0:	60f8      	str	r0, [r7, #12]
 80076f2:	60b9      	str	r1, [r7, #8]
 80076f4:	4611      	mov	r1, r2
 80076f6:	461a      	mov	r2, r3
 80076f8:	460b      	mov	r3, r1
 80076fa:	80fb      	strh	r3, [r7, #6]
 80076fc:	4613      	mov	r3, r2
 80076fe:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007700:	7979      	ldrb	r1, [r7, #5]
 8007702:	2300      	movs	r3, #0
 8007704:	9303      	str	r3, [sp, #12]
 8007706:	88fb      	ldrh	r3, [r7, #6]
 8007708:	9302      	str	r3, [sp, #8]
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	9301      	str	r3, [sp, #4]
 800770e:	2301      	movs	r3, #1
 8007710:	9300      	str	r3, [sp, #0]
 8007712:	2300      	movs	r3, #0
 8007714:	2201      	movs	r2, #1
 8007716:	68f8      	ldr	r0, [r7, #12]
 8007718:	f000 fb01 	bl	8007d1e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800771c:	2300      	movs	r3, #0

}
 800771e:	4618      	mov	r0, r3
 8007720:	3710      	adds	r7, #16
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}

08007726 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007726:	b580      	push	{r7, lr}
 8007728:	b088      	sub	sp, #32
 800772a:	af04      	add	r7, sp, #16
 800772c:	60f8      	str	r0, [r7, #12]
 800772e:	60b9      	str	r1, [r7, #8]
 8007730:	4611      	mov	r1, r2
 8007732:	461a      	mov	r2, r3
 8007734:	460b      	mov	r3, r1
 8007736:	80fb      	strh	r3, [r7, #6]
 8007738:	4613      	mov	r3, r2
 800773a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007742:	2b00      	cmp	r3, #0
 8007744:	d001      	beq.n	800774a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007746:	2300      	movs	r3, #0
 8007748:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800774a:	7979      	ldrb	r1, [r7, #5]
 800774c:	7e3b      	ldrb	r3, [r7, #24]
 800774e:	9303      	str	r3, [sp, #12]
 8007750:	88fb      	ldrh	r3, [r7, #6]
 8007752:	9302      	str	r3, [sp, #8]
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	9301      	str	r3, [sp, #4]
 8007758:	2301      	movs	r3, #1
 800775a:	9300      	str	r3, [sp, #0]
 800775c:	2302      	movs	r3, #2
 800775e:	2200      	movs	r2, #0
 8007760:	68f8      	ldr	r0, [r7, #12]
 8007762:	f000 fadc 	bl	8007d1e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007766:	2300      	movs	r3, #0
}
 8007768:	4618      	mov	r0, r3
 800776a:	3710      	adds	r7, #16
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}

08007770 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b088      	sub	sp, #32
 8007774:	af04      	add	r7, sp, #16
 8007776:	60f8      	str	r0, [r7, #12]
 8007778:	60b9      	str	r1, [r7, #8]
 800777a:	4611      	mov	r1, r2
 800777c:	461a      	mov	r2, r3
 800777e:	460b      	mov	r3, r1
 8007780:	80fb      	strh	r3, [r7, #6]
 8007782:	4613      	mov	r3, r2
 8007784:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007786:	7979      	ldrb	r1, [r7, #5]
 8007788:	2300      	movs	r3, #0
 800778a:	9303      	str	r3, [sp, #12]
 800778c:	88fb      	ldrh	r3, [r7, #6]
 800778e:	9302      	str	r3, [sp, #8]
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	9301      	str	r3, [sp, #4]
 8007794:	2301      	movs	r3, #1
 8007796:	9300      	str	r3, [sp, #0]
 8007798:	2302      	movs	r3, #2
 800779a:	2201      	movs	r2, #1
 800779c:	68f8      	ldr	r0, [r7, #12]
 800779e:	f000 fabe 	bl	8007d1e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80077a2:	2300      	movs	r3, #0
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3710      	adds	r7, #16
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}

080077ac <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b086      	sub	sp, #24
 80077b0:	af04      	add	r7, sp, #16
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	4608      	mov	r0, r1
 80077b6:	4611      	mov	r1, r2
 80077b8:	461a      	mov	r2, r3
 80077ba:	4603      	mov	r3, r0
 80077bc:	70fb      	strb	r3, [r7, #3]
 80077be:	460b      	mov	r3, r1
 80077c0:	70bb      	strb	r3, [r7, #2]
 80077c2:	4613      	mov	r3, r2
 80077c4:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80077c6:	7878      	ldrb	r0, [r7, #1]
 80077c8:	78ba      	ldrb	r2, [r7, #2]
 80077ca:	78f9      	ldrb	r1, [r7, #3]
 80077cc:	8b3b      	ldrh	r3, [r7, #24]
 80077ce:	9302      	str	r3, [sp, #8]
 80077d0:	7d3b      	ldrb	r3, [r7, #20]
 80077d2:	9301      	str	r3, [sp, #4]
 80077d4:	7c3b      	ldrb	r3, [r7, #16]
 80077d6:	9300      	str	r3, [sp, #0]
 80077d8:	4603      	mov	r3, r0
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f000 fa51 	bl	8007c82 <USBH_LL_OpenPipe>

  return USBH_OK;
 80077e0:	2300      	movs	r3, #0
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3708      	adds	r7, #8
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}

080077ea <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80077ea:	b580      	push	{r7, lr}
 80077ec:	b082      	sub	sp, #8
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
 80077f2:	460b      	mov	r3, r1
 80077f4:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 80077f6:	78fb      	ldrb	r3, [r7, #3]
 80077f8:	4619      	mov	r1, r3
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 fa70 	bl	8007ce0 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007800:	2300      	movs	r3, #0
}
 8007802:	4618      	mov	r0, r3
 8007804:	3708      	adds	r7, #8
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}

0800780a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800780a:	b580      	push	{r7, lr}
 800780c:	b084      	sub	sp, #16
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
 8007812:	460b      	mov	r3, r1
 8007814:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f000 f836 	bl	8007888 <USBH_GetFreePipe>
 800781c:	4603      	mov	r3, r0
 800781e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007820:	89fb      	ldrh	r3, [r7, #14]
 8007822:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007826:	4293      	cmp	r3, r2
 8007828:	d00a      	beq.n	8007840 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800782a:	78fa      	ldrb	r2, [r7, #3]
 800782c:	89fb      	ldrh	r3, [r7, #14]
 800782e:	f003 030f 	and.w	r3, r3, #15
 8007832:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007836:	6879      	ldr	r1, [r7, #4]
 8007838:	33e0      	adds	r3, #224	; 0xe0
 800783a:	009b      	lsls	r3, r3, #2
 800783c:	440b      	add	r3, r1
 800783e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007840:	89fb      	ldrh	r3, [r7, #14]
 8007842:	b2db      	uxtb	r3, r3
}
 8007844:	4618      	mov	r0, r3
 8007846:	3710      	adds	r7, #16
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}

0800784c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800784c:	b480      	push	{r7}
 800784e:	b083      	sub	sp, #12
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	460b      	mov	r3, r1
 8007856:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8007858:	78fb      	ldrb	r3, [r7, #3]
 800785a:	2b0a      	cmp	r3, #10
 800785c:	d80d      	bhi.n	800787a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800785e:	78fb      	ldrb	r3, [r7, #3]
 8007860:	687a      	ldr	r2, [r7, #4]
 8007862:	33e0      	adds	r3, #224	; 0xe0
 8007864:	009b      	lsls	r3, r3, #2
 8007866:	4413      	add	r3, r2
 8007868:	685a      	ldr	r2, [r3, #4]
 800786a:	78fb      	ldrb	r3, [r7, #3]
 800786c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007870:	6879      	ldr	r1, [r7, #4]
 8007872:	33e0      	adds	r3, #224	; 0xe0
 8007874:	009b      	lsls	r3, r3, #2
 8007876:	440b      	add	r3, r1
 8007878:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800787a:	2300      	movs	r3, #0
}
 800787c:	4618      	mov	r0, r3
 800787e:	370c      	adds	r7, #12
 8007880:	46bd      	mov	sp, r7
 8007882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007886:	4770      	bx	lr

08007888 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007888:	b480      	push	{r7}
 800788a:	b085      	sub	sp, #20
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007890:	2300      	movs	r3, #0
 8007892:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8007894:	2300      	movs	r3, #0
 8007896:	73fb      	strb	r3, [r7, #15]
 8007898:	e00f      	b.n	80078ba <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800789a:	7bfb      	ldrb	r3, [r7, #15]
 800789c:	687a      	ldr	r2, [r7, #4]
 800789e:	33e0      	adds	r3, #224	; 0xe0
 80078a0:	009b      	lsls	r3, r3, #2
 80078a2:	4413      	add	r3, r2
 80078a4:	685b      	ldr	r3, [r3, #4]
 80078a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d102      	bne.n	80078b4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80078ae:	7bfb      	ldrb	r3, [r7, #15]
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	e007      	b.n	80078c4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 80078b4:	7bfb      	ldrb	r3, [r7, #15]
 80078b6:	3301      	adds	r3, #1
 80078b8:	73fb      	strb	r3, [r7, #15]
 80078ba:	7bfb      	ldrb	r3, [r7, #15]
 80078bc:	2b0a      	cmp	r3, #10
 80078be:	d9ec      	bls.n	800789a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80078c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3714      	adds	r7, #20
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr

080078d0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80078d4:	2201      	movs	r2, #1
 80078d6:	490e      	ldr	r1, [pc, #56]	; (8007910 <MX_USB_HOST_Init+0x40>)
 80078d8:	480e      	ldr	r0, [pc, #56]	; (8007914 <MX_USB_HOST_Init+0x44>)
 80078da:	f7fe fc9f 	bl	800621c <USBH_Init>
 80078de:	4603      	mov	r3, r0
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d001      	beq.n	80078e8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80078e4:	f7f9 fa68 	bl	8000db8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80078e8:	490b      	ldr	r1, [pc, #44]	; (8007918 <MX_USB_HOST_Init+0x48>)
 80078ea:	480a      	ldr	r0, [pc, #40]	; (8007914 <MX_USB_HOST_Init+0x44>)
 80078ec:	f7fe fd24 	bl	8006338 <USBH_RegisterClass>
 80078f0:	4603      	mov	r3, r0
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d001      	beq.n	80078fa <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80078f6:	f7f9 fa5f 	bl	8000db8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80078fa:	4806      	ldr	r0, [pc, #24]	; (8007914 <MX_USB_HOST_Init+0x44>)
 80078fc:	f7fe fda8 	bl	8006450 <USBH_Start>
 8007900:	4603      	mov	r3, r0
 8007902:	2b00      	cmp	r3, #0
 8007904:	d001      	beq.n	800790a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007906:	f7f9 fa57 	bl	8000db8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800790a:	bf00      	nop
 800790c:	bd80      	pop	{r7, pc}
 800790e:	bf00      	nop
 8007910:	08007931 	.word	0x08007931
 8007914:	20000200 	.word	0x20000200
 8007918:	2000000c 	.word	0x2000000c

0800791c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007920:	4802      	ldr	r0, [pc, #8]	; (800792c <MX_USB_HOST_Process+0x10>)
 8007922:	f7fe fda5 	bl	8006470 <USBH_Process>
}
 8007926:	bf00      	nop
 8007928:	bd80      	pop	{r7, pc}
 800792a:	bf00      	nop
 800792c:	20000200 	.word	0x20000200

08007930 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007930:	b480      	push	{r7}
 8007932:	b083      	sub	sp, #12
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	460b      	mov	r3, r1
 800793a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800793c:	78fb      	ldrb	r3, [r7, #3]
 800793e:	3b01      	subs	r3, #1
 8007940:	2b04      	cmp	r3, #4
 8007942:	d819      	bhi.n	8007978 <USBH_UserProcess+0x48>
 8007944:	a201      	add	r2, pc, #4	; (adr r2, 800794c <USBH_UserProcess+0x1c>)
 8007946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800794a:	bf00      	nop
 800794c:	08007979 	.word	0x08007979
 8007950:	08007969 	.word	0x08007969
 8007954:	08007979 	.word	0x08007979
 8007958:	08007971 	.word	0x08007971
 800795c:	08007961 	.word	0x08007961
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007960:	4b09      	ldr	r3, [pc, #36]	; (8007988 <USBH_UserProcess+0x58>)
 8007962:	2203      	movs	r2, #3
 8007964:	701a      	strb	r2, [r3, #0]
  break;
 8007966:	e008      	b.n	800797a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007968:	4b07      	ldr	r3, [pc, #28]	; (8007988 <USBH_UserProcess+0x58>)
 800796a:	2202      	movs	r2, #2
 800796c:	701a      	strb	r2, [r3, #0]
  break;
 800796e:	e004      	b.n	800797a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007970:	4b05      	ldr	r3, [pc, #20]	; (8007988 <USBH_UserProcess+0x58>)
 8007972:	2201      	movs	r2, #1
 8007974:	701a      	strb	r2, [r3, #0]
  break;
 8007976:	e000      	b.n	800797a <USBH_UserProcess+0x4a>

  default:
  break;
 8007978:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800797a:	bf00      	nop
 800797c:	370c      	adds	r7, #12
 800797e:	46bd      	mov	sp, r7
 8007980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007984:	4770      	bx	lr
 8007986:	bf00      	nop
 8007988:	200000b4 	.word	0x200000b4

0800798c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b08a      	sub	sp, #40	; 0x28
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007994:	f107 0314 	add.w	r3, r7, #20
 8007998:	2200      	movs	r2, #0
 800799a:	601a      	str	r2, [r3, #0]
 800799c:	605a      	str	r2, [r3, #4]
 800799e:	609a      	str	r2, [r3, #8]
 80079a0:	60da      	str	r2, [r3, #12]
 80079a2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80079ac:	d147      	bne.n	8007a3e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80079ae:	2300      	movs	r3, #0
 80079b0:	613b      	str	r3, [r7, #16]
 80079b2:	4b25      	ldr	r3, [pc, #148]	; (8007a48 <HAL_HCD_MspInit+0xbc>)
 80079b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079b6:	4a24      	ldr	r2, [pc, #144]	; (8007a48 <HAL_HCD_MspInit+0xbc>)
 80079b8:	f043 0301 	orr.w	r3, r3, #1
 80079bc:	6313      	str	r3, [r2, #48]	; 0x30
 80079be:	4b22      	ldr	r3, [pc, #136]	; (8007a48 <HAL_HCD_MspInit+0xbc>)
 80079c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079c2:	f003 0301 	and.w	r3, r3, #1
 80079c6:	613b      	str	r3, [r7, #16]
 80079c8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80079ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80079ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80079d0:	2300      	movs	r3, #0
 80079d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079d4:	2300      	movs	r3, #0
 80079d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80079d8:	f107 0314 	add.w	r3, r7, #20
 80079dc:	4619      	mov	r1, r3
 80079de:	481b      	ldr	r0, [pc, #108]	; (8007a4c <HAL_HCD_MspInit+0xc0>)
 80079e0:	f7f9 fcec 	bl	80013bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80079e4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80079e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079ea:	2302      	movs	r3, #2
 80079ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079ee:	2300      	movs	r3, #0
 80079f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80079f2:	2303      	movs	r3, #3
 80079f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80079f6:	230a      	movs	r3, #10
 80079f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80079fa:	f107 0314 	add.w	r3, r7, #20
 80079fe:	4619      	mov	r1, r3
 8007a00:	4812      	ldr	r0, [pc, #72]	; (8007a4c <HAL_HCD_MspInit+0xc0>)
 8007a02:	f7f9 fcdb 	bl	80013bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007a06:	4b10      	ldr	r3, [pc, #64]	; (8007a48 <HAL_HCD_MspInit+0xbc>)
 8007a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a0a:	4a0f      	ldr	r2, [pc, #60]	; (8007a48 <HAL_HCD_MspInit+0xbc>)
 8007a0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a10:	6353      	str	r3, [r2, #52]	; 0x34
 8007a12:	2300      	movs	r3, #0
 8007a14:	60fb      	str	r3, [r7, #12]
 8007a16:	4b0c      	ldr	r3, [pc, #48]	; (8007a48 <HAL_HCD_MspInit+0xbc>)
 8007a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a1a:	4a0b      	ldr	r2, [pc, #44]	; (8007a48 <HAL_HCD_MspInit+0xbc>)
 8007a1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007a20:	6453      	str	r3, [r2, #68]	; 0x44
 8007a22:	4b09      	ldr	r3, [pc, #36]	; (8007a48 <HAL_HCD_MspInit+0xbc>)
 8007a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a2a:	60fb      	str	r3, [r7, #12]
 8007a2c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007a2e:	2200      	movs	r2, #0
 8007a30:	2100      	movs	r1, #0
 8007a32:	2043      	movs	r0, #67	; 0x43
 8007a34:	f7f9 fc8b 	bl	800134e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007a38:	2043      	movs	r0, #67	; 0x43
 8007a3a:	f7f9 fca4 	bl	8001386 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007a3e:	bf00      	nop
 8007a40:	3728      	adds	r7, #40	; 0x28
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}
 8007a46:	bf00      	nop
 8007a48:	40023800 	.word	0x40023800
 8007a4c:	40020000 	.word	0x40020000

08007a50 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b082      	sub	sp, #8
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f7ff f8d9 	bl	8006c16 <USBH_LL_IncTimer>
}
 8007a64:	bf00      	nop
 8007a66:	3708      	adds	r7, #8
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}

08007a6c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b082      	sub	sp, #8
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f7ff f911 	bl	8006ca2 <USBH_LL_Connect>
}
 8007a80:	bf00      	nop
 8007a82:	3708      	adds	r7, #8
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}

08007a88 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b082      	sub	sp, #8
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a96:	4618      	mov	r0, r3
 8007a98:	f7ff f91a 	bl	8006cd0 <USBH_LL_Disconnect>
}
 8007a9c:	bf00      	nop
 8007a9e:	3708      	adds	r7, #8
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}

08007aa4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b083      	sub	sp, #12
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
 8007aac:	460b      	mov	r3, r1
 8007aae:	70fb      	strb	r3, [r7, #3]
 8007ab0:	4613      	mov	r3, r2
 8007ab2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007ab4:	bf00      	nop
 8007ab6:	370c      	adds	r7, #12
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr

08007ac0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b082      	sub	sp, #8
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f7ff f8cb 	bl	8006c6a <USBH_LL_PortEnabled>
}
 8007ad4:	bf00      	nop
 8007ad6:	3708      	adds	r7, #8
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}

08007adc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b082      	sub	sp, #8
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007aea:	4618      	mov	r0, r3
 8007aec:	f7ff f8cb 	bl	8006c86 <USBH_LL_PortDisabled>
}
 8007af0:	bf00      	nop
 8007af2:	3708      	adds	r7, #8
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b082      	sub	sp, #8
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007b06:	2b01      	cmp	r3, #1
 8007b08:	d12a      	bne.n	8007b60 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007b0a:	4a18      	ldr	r2, [pc, #96]	; (8007b6c <USBH_LL_Init+0x74>)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	4a15      	ldr	r2, [pc, #84]	; (8007b6c <USBH_LL_Init+0x74>)
 8007b16:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007b1a:	4b14      	ldr	r3, [pc, #80]	; (8007b6c <USBH_LL_Init+0x74>)
 8007b1c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007b20:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007b22:	4b12      	ldr	r3, [pc, #72]	; (8007b6c <USBH_LL_Init+0x74>)
 8007b24:	2208      	movs	r2, #8
 8007b26:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007b28:	4b10      	ldr	r3, [pc, #64]	; (8007b6c <USBH_LL_Init+0x74>)
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007b2e:	4b0f      	ldr	r3, [pc, #60]	; (8007b6c <USBH_LL_Init+0x74>)
 8007b30:	2200      	movs	r2, #0
 8007b32:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007b34:	4b0d      	ldr	r3, [pc, #52]	; (8007b6c <USBH_LL_Init+0x74>)
 8007b36:	2202      	movs	r2, #2
 8007b38:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007b3a:	4b0c      	ldr	r3, [pc, #48]	; (8007b6c <USBH_LL_Init+0x74>)
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007b40:	480a      	ldr	r0, [pc, #40]	; (8007b6c <USBH_LL_Init+0x74>)
 8007b42:	f7f9 fdd6 	bl	80016f2 <HAL_HCD_Init>
 8007b46:	4603      	mov	r3, r0
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d001      	beq.n	8007b50 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007b4c:	f7f9 f934 	bl	8000db8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007b50:	4806      	ldr	r0, [pc, #24]	; (8007b6c <USBH_LL_Init+0x74>)
 8007b52:	f7fa f9d9 	bl	8001f08 <HAL_HCD_GetCurrentFrame>
 8007b56:	4603      	mov	r3, r0
 8007b58:	4619      	mov	r1, r3
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f7ff f84c 	bl	8006bf8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007b60:	2300      	movs	r3, #0
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3708      	adds	r7, #8
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}
 8007b6a:	bf00      	nop
 8007b6c:	200005d8 	.word	0x200005d8

08007b70 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b084      	sub	sp, #16
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007b86:	4618      	mov	r0, r3
 8007b88:	f7fa f946 	bl	8001e18 <HAL_HCD_Start>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007b90:	7bfb      	ldrb	r3, [r7, #15]
 8007b92:	4618      	mov	r0, r3
 8007b94:	f000 f95c 	bl	8007e50 <USBH_Get_USB_Status>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b9c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3710      	adds	r7, #16
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}

08007ba6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007ba6:	b580      	push	{r7, lr}
 8007ba8:	b084      	sub	sp, #16
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f7fa f94e 	bl	8001e5e <HAL_HCD_Stop>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007bc6:	7bfb      	ldrb	r3, [r7, #15]
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f000 f941 	bl	8007e50 <USBH_Get_USB_Status>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007bd2:	7bbb      	ldrb	r3, [r7, #14]
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3710      	adds	r7, #16
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b084      	sub	sp, #16
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8007be4:	2301      	movs	r3, #1
 8007be6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f7fa f998 	bl	8001f24 <HAL_HCD_GetCurrentSpeed>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	2b01      	cmp	r3, #1
 8007bf8:	d007      	beq.n	8007c0a <USBH_LL_GetSpeed+0x2e>
 8007bfa:	2b01      	cmp	r3, #1
 8007bfc:	d302      	bcc.n	8007c04 <USBH_LL_GetSpeed+0x28>
 8007bfe:	2b02      	cmp	r3, #2
 8007c00:	d006      	beq.n	8007c10 <USBH_LL_GetSpeed+0x34>
 8007c02:	e008      	b.n	8007c16 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8007c04:	2300      	movs	r3, #0
 8007c06:	73fb      	strb	r3, [r7, #15]
    break;
 8007c08:	e008      	b.n	8007c1c <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	73fb      	strb	r3, [r7, #15]
    break;
 8007c0e:	e005      	b.n	8007c1c <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8007c10:	2302      	movs	r3, #2
 8007c12:	73fb      	strb	r3, [r7, #15]
    break;
 8007c14:	e002      	b.n	8007c1c <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8007c16:	2301      	movs	r3, #1
 8007c18:	73fb      	strb	r3, [r7, #15]
    break;
 8007c1a:	bf00      	nop
  }
  return  speed;
 8007c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3710      	adds	r7, #16
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}

08007c26 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8007c26:	b580      	push	{r7, lr}
 8007c28:	b084      	sub	sp, #16
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007c32:	2300      	movs	r3, #0
 8007c34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f7fa f92b 	bl	8001e98 <HAL_HCD_ResetPort>
 8007c42:	4603      	mov	r3, r0
 8007c44:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007c46:	7bfb      	ldrb	r3, [r7, #15]
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f000 f901 	bl	8007e50 <USBH_Get_USB_Status>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c52:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3710      	adds	r7, #16
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}

08007c5c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b082      	sub	sp, #8
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	460b      	mov	r3, r1
 8007c66:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007c6e:	78fa      	ldrb	r2, [r7, #3]
 8007c70:	4611      	mov	r1, r2
 8007c72:	4618      	mov	r0, r3
 8007c74:	f7fa f933 	bl	8001ede <HAL_HCD_HC_GetXferCount>
 8007c78:	4603      	mov	r3, r0
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3708      	adds	r7, #8
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}

08007c82 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007c82:	b590      	push	{r4, r7, lr}
 8007c84:	b089      	sub	sp, #36	; 0x24
 8007c86:	af04      	add	r7, sp, #16
 8007c88:	6078      	str	r0, [r7, #4]
 8007c8a:	4608      	mov	r0, r1
 8007c8c:	4611      	mov	r1, r2
 8007c8e:	461a      	mov	r2, r3
 8007c90:	4603      	mov	r3, r0
 8007c92:	70fb      	strb	r3, [r7, #3]
 8007c94:	460b      	mov	r3, r1
 8007c96:	70bb      	strb	r3, [r7, #2]
 8007c98:	4613      	mov	r3, r2
 8007c9a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007caa:	787c      	ldrb	r4, [r7, #1]
 8007cac:	78ba      	ldrb	r2, [r7, #2]
 8007cae:	78f9      	ldrb	r1, [r7, #3]
 8007cb0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007cb2:	9302      	str	r3, [sp, #8]
 8007cb4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007cb8:	9301      	str	r3, [sp, #4]
 8007cba:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007cbe:	9300      	str	r3, [sp, #0]
 8007cc0:	4623      	mov	r3, r4
 8007cc2:	f7f9 fd78 	bl	80017b6 <HAL_HCD_HC_Init>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8007cca:	7bfb      	ldrb	r3, [r7, #15]
 8007ccc:	4618      	mov	r0, r3
 8007cce:	f000 f8bf 	bl	8007e50 <USBH_Get_USB_Status>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007cd6:	7bbb      	ldrb	r3, [r7, #14]
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3714      	adds	r7, #20
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd90      	pop	{r4, r7, pc}

08007ce0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b084      	sub	sp, #16
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	460b      	mov	r3, r1
 8007cea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cec:	2300      	movs	r3, #0
 8007cee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007cfa:	78fa      	ldrb	r2, [r7, #3]
 8007cfc:	4611      	mov	r1, r2
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f7f9 fdf1 	bl	80018e6 <HAL_HCD_HC_Halt>
 8007d04:	4603      	mov	r3, r0
 8007d06:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007d08:	7bfb      	ldrb	r3, [r7, #15]
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f000 f8a0 	bl	8007e50 <USBH_Get_USB_Status>
 8007d10:	4603      	mov	r3, r0
 8007d12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d14:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3710      	adds	r7, #16
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}

08007d1e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8007d1e:	b590      	push	{r4, r7, lr}
 8007d20:	b089      	sub	sp, #36	; 0x24
 8007d22:	af04      	add	r7, sp, #16
 8007d24:	6078      	str	r0, [r7, #4]
 8007d26:	4608      	mov	r0, r1
 8007d28:	4611      	mov	r1, r2
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	70fb      	strb	r3, [r7, #3]
 8007d30:	460b      	mov	r3, r1
 8007d32:	70bb      	strb	r3, [r7, #2]
 8007d34:	4613      	mov	r3, r2
 8007d36:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007d46:	787c      	ldrb	r4, [r7, #1]
 8007d48:	78ba      	ldrb	r2, [r7, #2]
 8007d4a:	78f9      	ldrb	r1, [r7, #3]
 8007d4c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007d50:	9303      	str	r3, [sp, #12]
 8007d52:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007d54:	9302      	str	r3, [sp, #8]
 8007d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d58:	9301      	str	r3, [sp, #4]
 8007d5a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007d5e:	9300      	str	r3, [sp, #0]
 8007d60:	4623      	mov	r3, r4
 8007d62:	f7f9 fde3 	bl	800192c <HAL_HCD_HC_SubmitRequest>
 8007d66:	4603      	mov	r3, r0
 8007d68:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8007d6a:	7bfb      	ldrb	r3, [r7, #15]
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f000 f86f 	bl	8007e50 <USBH_Get_USB_Status>
 8007d72:	4603      	mov	r3, r0
 8007d74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d76:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3714      	adds	r7, #20
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd90      	pop	{r4, r7, pc}

08007d80 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b082      	sub	sp, #8
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	460b      	mov	r3, r1
 8007d8a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007d92:	78fa      	ldrb	r2, [r7, #3]
 8007d94:	4611      	mov	r1, r2
 8007d96:	4618      	mov	r0, r3
 8007d98:	f7fa f88c 	bl	8001eb4 <HAL_HCD_HC_GetURBState>
 8007d9c:	4603      	mov	r3, r0
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3708      	adds	r7, #8
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}

08007da6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8007da6:	b580      	push	{r7, lr}
 8007da8:	b082      	sub	sp, #8
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	6078      	str	r0, [r7, #4]
 8007dae:	460b      	mov	r3, r1
 8007db0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007db8:	2b01      	cmp	r3, #1
 8007dba:	d103      	bne.n	8007dc4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8007dbc:	78fb      	ldrb	r3, [r7, #3]
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f000 f872 	bl	8007ea8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8007dc4:	20c8      	movs	r0, #200	; 0xc8
 8007dc6:	f7f9 f9c5 	bl	8001154 <HAL_Delay>
  return USBH_OK;
 8007dca:	2300      	movs	r3, #0
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3708      	adds	r7, #8
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}

08007dd4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b085      	sub	sp, #20
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	460b      	mov	r3, r1
 8007dde:	70fb      	strb	r3, [r7, #3]
 8007de0:	4613      	mov	r3, r2
 8007de2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007dea:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8007dec:	78fa      	ldrb	r2, [r7, #3]
 8007dee:	68f9      	ldr	r1, [r7, #12]
 8007df0:	4613      	mov	r3, r2
 8007df2:	009b      	lsls	r3, r3, #2
 8007df4:	4413      	add	r3, r2
 8007df6:	00db      	lsls	r3, r3, #3
 8007df8:	440b      	add	r3, r1
 8007dfa:	333b      	adds	r3, #59	; 0x3b
 8007dfc:	781b      	ldrb	r3, [r3, #0]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d00a      	beq.n	8007e18 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8007e02:	78fa      	ldrb	r2, [r7, #3]
 8007e04:	68f9      	ldr	r1, [r7, #12]
 8007e06:	4613      	mov	r3, r2
 8007e08:	009b      	lsls	r3, r3, #2
 8007e0a:	4413      	add	r3, r2
 8007e0c:	00db      	lsls	r3, r3, #3
 8007e0e:	440b      	add	r3, r1
 8007e10:	3350      	adds	r3, #80	; 0x50
 8007e12:	78ba      	ldrb	r2, [r7, #2]
 8007e14:	701a      	strb	r2, [r3, #0]
 8007e16:	e009      	b.n	8007e2c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8007e18:	78fa      	ldrb	r2, [r7, #3]
 8007e1a:	68f9      	ldr	r1, [r7, #12]
 8007e1c:	4613      	mov	r3, r2
 8007e1e:	009b      	lsls	r3, r3, #2
 8007e20:	4413      	add	r3, r2
 8007e22:	00db      	lsls	r3, r3, #3
 8007e24:	440b      	add	r3, r1
 8007e26:	3351      	adds	r3, #81	; 0x51
 8007e28:	78ba      	ldrb	r2, [r7, #2]
 8007e2a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8007e2c:	2300      	movs	r3, #0
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3714      	adds	r7, #20
 8007e32:	46bd      	mov	sp, r7
 8007e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e38:	4770      	bx	lr

08007e3a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8007e3a:	b580      	push	{r7, lr}
 8007e3c:	b082      	sub	sp, #8
 8007e3e:	af00      	add	r7, sp, #0
 8007e40:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f7f9 f986 	bl	8001154 <HAL_Delay>
}
 8007e48:	bf00      	nop
 8007e4a:	3708      	adds	r7, #8
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b085      	sub	sp, #20
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	4603      	mov	r3, r0
 8007e58:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007e5e:	79fb      	ldrb	r3, [r7, #7]
 8007e60:	2b03      	cmp	r3, #3
 8007e62:	d817      	bhi.n	8007e94 <USBH_Get_USB_Status+0x44>
 8007e64:	a201      	add	r2, pc, #4	; (adr r2, 8007e6c <USBH_Get_USB_Status+0x1c>)
 8007e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e6a:	bf00      	nop
 8007e6c:	08007e7d 	.word	0x08007e7d
 8007e70:	08007e83 	.word	0x08007e83
 8007e74:	08007e89 	.word	0x08007e89
 8007e78:	08007e8f 	.word	0x08007e8f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	73fb      	strb	r3, [r7, #15]
    break;
 8007e80:	e00b      	b.n	8007e9a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007e82:	2302      	movs	r3, #2
 8007e84:	73fb      	strb	r3, [r7, #15]
    break;
 8007e86:	e008      	b.n	8007e9a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	73fb      	strb	r3, [r7, #15]
    break;
 8007e8c:	e005      	b.n	8007e9a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007e8e:	2302      	movs	r3, #2
 8007e90:	73fb      	strb	r3, [r7, #15]
    break;
 8007e92:	e002      	b.n	8007e9a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007e94:	2302      	movs	r3, #2
 8007e96:	73fb      	strb	r3, [r7, #15]
    break;
 8007e98:	bf00      	nop
  }
  return usb_status;
 8007e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3714      	adds	r7, #20
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr

08007ea8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b084      	sub	sp, #16
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	4603      	mov	r3, r0
 8007eb0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8007eb2:	79fb      	ldrb	r3, [r7, #7]
 8007eb4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8007eb6:	79fb      	ldrb	r3, [r7, #7]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d102      	bne.n	8007ec2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	73fb      	strb	r3, [r7, #15]
 8007ec0:	e001      	b.n	8007ec6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8007ec6:	7bfb      	ldrb	r3, [r7, #15]
 8007ec8:	461a      	mov	r2, r3
 8007eca:	2101      	movs	r1, #1
 8007ecc:	4803      	ldr	r0, [pc, #12]	; (8007edc <MX_DriverVbusFS+0x34>)
 8007ece:	f7f9 fbf7 	bl	80016c0 <HAL_GPIO_WritePin>
}
 8007ed2:	bf00      	nop
 8007ed4:	3710      	adds	r7, #16
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}
 8007eda:	bf00      	nop
 8007edc:	40020800 	.word	0x40020800

08007ee0 <__errno>:
 8007ee0:	4b01      	ldr	r3, [pc, #4]	; (8007ee8 <__errno+0x8>)
 8007ee2:	6818      	ldr	r0, [r3, #0]
 8007ee4:	4770      	bx	lr
 8007ee6:	bf00      	nop
 8007ee8:	2000002c 	.word	0x2000002c

08007eec <__libc_init_array>:
 8007eec:	b570      	push	{r4, r5, r6, lr}
 8007eee:	4e0d      	ldr	r6, [pc, #52]	; (8007f24 <__libc_init_array+0x38>)
 8007ef0:	4c0d      	ldr	r4, [pc, #52]	; (8007f28 <__libc_init_array+0x3c>)
 8007ef2:	1ba4      	subs	r4, r4, r6
 8007ef4:	10a4      	asrs	r4, r4, #2
 8007ef6:	2500      	movs	r5, #0
 8007ef8:	42a5      	cmp	r5, r4
 8007efa:	d109      	bne.n	8007f10 <__libc_init_array+0x24>
 8007efc:	4e0b      	ldr	r6, [pc, #44]	; (8007f2c <__libc_init_array+0x40>)
 8007efe:	4c0c      	ldr	r4, [pc, #48]	; (8007f30 <__libc_init_array+0x44>)
 8007f00:	f000 f8ea 	bl	80080d8 <_init>
 8007f04:	1ba4      	subs	r4, r4, r6
 8007f06:	10a4      	asrs	r4, r4, #2
 8007f08:	2500      	movs	r5, #0
 8007f0a:	42a5      	cmp	r5, r4
 8007f0c:	d105      	bne.n	8007f1a <__libc_init_array+0x2e>
 8007f0e:	bd70      	pop	{r4, r5, r6, pc}
 8007f10:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007f14:	4798      	blx	r3
 8007f16:	3501      	adds	r5, #1
 8007f18:	e7ee      	b.n	8007ef8 <__libc_init_array+0xc>
 8007f1a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007f1e:	4798      	blx	r3
 8007f20:	3501      	adds	r5, #1
 8007f22:	e7f2      	b.n	8007f0a <__libc_init_array+0x1e>
 8007f24:	08008114 	.word	0x08008114
 8007f28:	08008114 	.word	0x08008114
 8007f2c:	08008114 	.word	0x08008114
 8007f30:	08008118 	.word	0x08008118

08007f34 <malloc>:
 8007f34:	4b02      	ldr	r3, [pc, #8]	; (8007f40 <malloc+0xc>)
 8007f36:	4601      	mov	r1, r0
 8007f38:	6818      	ldr	r0, [r3, #0]
 8007f3a:	f000 b861 	b.w	8008000 <_malloc_r>
 8007f3e:	bf00      	nop
 8007f40:	2000002c 	.word	0x2000002c

08007f44 <free>:
 8007f44:	4b02      	ldr	r3, [pc, #8]	; (8007f50 <free+0xc>)
 8007f46:	4601      	mov	r1, r0
 8007f48:	6818      	ldr	r0, [r3, #0]
 8007f4a:	f000 b80b 	b.w	8007f64 <_free_r>
 8007f4e:	bf00      	nop
 8007f50:	2000002c 	.word	0x2000002c

08007f54 <memset>:
 8007f54:	4402      	add	r2, r0
 8007f56:	4603      	mov	r3, r0
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d100      	bne.n	8007f5e <memset+0xa>
 8007f5c:	4770      	bx	lr
 8007f5e:	f803 1b01 	strb.w	r1, [r3], #1
 8007f62:	e7f9      	b.n	8007f58 <memset+0x4>

08007f64 <_free_r>:
 8007f64:	b538      	push	{r3, r4, r5, lr}
 8007f66:	4605      	mov	r5, r0
 8007f68:	2900      	cmp	r1, #0
 8007f6a:	d045      	beq.n	8007ff8 <_free_r+0x94>
 8007f6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f70:	1f0c      	subs	r4, r1, #4
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	bfb8      	it	lt
 8007f76:	18e4      	addlt	r4, r4, r3
 8007f78:	f000 f8ac 	bl	80080d4 <__malloc_lock>
 8007f7c:	4a1f      	ldr	r2, [pc, #124]	; (8007ffc <_free_r+0x98>)
 8007f7e:	6813      	ldr	r3, [r2, #0]
 8007f80:	4610      	mov	r0, r2
 8007f82:	b933      	cbnz	r3, 8007f92 <_free_r+0x2e>
 8007f84:	6063      	str	r3, [r4, #4]
 8007f86:	6014      	str	r4, [r2, #0]
 8007f88:	4628      	mov	r0, r5
 8007f8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f8e:	f000 b8a2 	b.w	80080d6 <__malloc_unlock>
 8007f92:	42a3      	cmp	r3, r4
 8007f94:	d90c      	bls.n	8007fb0 <_free_r+0x4c>
 8007f96:	6821      	ldr	r1, [r4, #0]
 8007f98:	1862      	adds	r2, r4, r1
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	bf04      	itt	eq
 8007f9e:	681a      	ldreq	r2, [r3, #0]
 8007fa0:	685b      	ldreq	r3, [r3, #4]
 8007fa2:	6063      	str	r3, [r4, #4]
 8007fa4:	bf04      	itt	eq
 8007fa6:	1852      	addeq	r2, r2, r1
 8007fa8:	6022      	streq	r2, [r4, #0]
 8007faa:	6004      	str	r4, [r0, #0]
 8007fac:	e7ec      	b.n	8007f88 <_free_r+0x24>
 8007fae:	4613      	mov	r3, r2
 8007fb0:	685a      	ldr	r2, [r3, #4]
 8007fb2:	b10a      	cbz	r2, 8007fb8 <_free_r+0x54>
 8007fb4:	42a2      	cmp	r2, r4
 8007fb6:	d9fa      	bls.n	8007fae <_free_r+0x4a>
 8007fb8:	6819      	ldr	r1, [r3, #0]
 8007fba:	1858      	adds	r0, r3, r1
 8007fbc:	42a0      	cmp	r0, r4
 8007fbe:	d10b      	bne.n	8007fd8 <_free_r+0x74>
 8007fc0:	6820      	ldr	r0, [r4, #0]
 8007fc2:	4401      	add	r1, r0
 8007fc4:	1858      	adds	r0, r3, r1
 8007fc6:	4282      	cmp	r2, r0
 8007fc8:	6019      	str	r1, [r3, #0]
 8007fca:	d1dd      	bne.n	8007f88 <_free_r+0x24>
 8007fcc:	6810      	ldr	r0, [r2, #0]
 8007fce:	6852      	ldr	r2, [r2, #4]
 8007fd0:	605a      	str	r2, [r3, #4]
 8007fd2:	4401      	add	r1, r0
 8007fd4:	6019      	str	r1, [r3, #0]
 8007fd6:	e7d7      	b.n	8007f88 <_free_r+0x24>
 8007fd8:	d902      	bls.n	8007fe0 <_free_r+0x7c>
 8007fda:	230c      	movs	r3, #12
 8007fdc:	602b      	str	r3, [r5, #0]
 8007fde:	e7d3      	b.n	8007f88 <_free_r+0x24>
 8007fe0:	6820      	ldr	r0, [r4, #0]
 8007fe2:	1821      	adds	r1, r4, r0
 8007fe4:	428a      	cmp	r2, r1
 8007fe6:	bf04      	itt	eq
 8007fe8:	6811      	ldreq	r1, [r2, #0]
 8007fea:	6852      	ldreq	r2, [r2, #4]
 8007fec:	6062      	str	r2, [r4, #4]
 8007fee:	bf04      	itt	eq
 8007ff0:	1809      	addeq	r1, r1, r0
 8007ff2:	6021      	streq	r1, [r4, #0]
 8007ff4:	605c      	str	r4, [r3, #4]
 8007ff6:	e7c7      	b.n	8007f88 <_free_r+0x24>
 8007ff8:	bd38      	pop	{r3, r4, r5, pc}
 8007ffa:	bf00      	nop
 8007ffc:	200000b8 	.word	0x200000b8

08008000 <_malloc_r>:
 8008000:	b570      	push	{r4, r5, r6, lr}
 8008002:	1ccd      	adds	r5, r1, #3
 8008004:	f025 0503 	bic.w	r5, r5, #3
 8008008:	3508      	adds	r5, #8
 800800a:	2d0c      	cmp	r5, #12
 800800c:	bf38      	it	cc
 800800e:	250c      	movcc	r5, #12
 8008010:	2d00      	cmp	r5, #0
 8008012:	4606      	mov	r6, r0
 8008014:	db01      	blt.n	800801a <_malloc_r+0x1a>
 8008016:	42a9      	cmp	r1, r5
 8008018:	d903      	bls.n	8008022 <_malloc_r+0x22>
 800801a:	230c      	movs	r3, #12
 800801c:	6033      	str	r3, [r6, #0]
 800801e:	2000      	movs	r0, #0
 8008020:	bd70      	pop	{r4, r5, r6, pc}
 8008022:	f000 f857 	bl	80080d4 <__malloc_lock>
 8008026:	4a21      	ldr	r2, [pc, #132]	; (80080ac <_malloc_r+0xac>)
 8008028:	6814      	ldr	r4, [r2, #0]
 800802a:	4621      	mov	r1, r4
 800802c:	b991      	cbnz	r1, 8008054 <_malloc_r+0x54>
 800802e:	4c20      	ldr	r4, [pc, #128]	; (80080b0 <_malloc_r+0xb0>)
 8008030:	6823      	ldr	r3, [r4, #0]
 8008032:	b91b      	cbnz	r3, 800803c <_malloc_r+0x3c>
 8008034:	4630      	mov	r0, r6
 8008036:	f000 f83d 	bl	80080b4 <_sbrk_r>
 800803a:	6020      	str	r0, [r4, #0]
 800803c:	4629      	mov	r1, r5
 800803e:	4630      	mov	r0, r6
 8008040:	f000 f838 	bl	80080b4 <_sbrk_r>
 8008044:	1c43      	adds	r3, r0, #1
 8008046:	d124      	bne.n	8008092 <_malloc_r+0x92>
 8008048:	230c      	movs	r3, #12
 800804a:	6033      	str	r3, [r6, #0]
 800804c:	4630      	mov	r0, r6
 800804e:	f000 f842 	bl	80080d6 <__malloc_unlock>
 8008052:	e7e4      	b.n	800801e <_malloc_r+0x1e>
 8008054:	680b      	ldr	r3, [r1, #0]
 8008056:	1b5b      	subs	r3, r3, r5
 8008058:	d418      	bmi.n	800808c <_malloc_r+0x8c>
 800805a:	2b0b      	cmp	r3, #11
 800805c:	d90f      	bls.n	800807e <_malloc_r+0x7e>
 800805e:	600b      	str	r3, [r1, #0]
 8008060:	50cd      	str	r5, [r1, r3]
 8008062:	18cc      	adds	r4, r1, r3
 8008064:	4630      	mov	r0, r6
 8008066:	f000 f836 	bl	80080d6 <__malloc_unlock>
 800806a:	f104 000b 	add.w	r0, r4, #11
 800806e:	1d23      	adds	r3, r4, #4
 8008070:	f020 0007 	bic.w	r0, r0, #7
 8008074:	1ac3      	subs	r3, r0, r3
 8008076:	d0d3      	beq.n	8008020 <_malloc_r+0x20>
 8008078:	425a      	negs	r2, r3
 800807a:	50e2      	str	r2, [r4, r3]
 800807c:	e7d0      	b.n	8008020 <_malloc_r+0x20>
 800807e:	428c      	cmp	r4, r1
 8008080:	684b      	ldr	r3, [r1, #4]
 8008082:	bf16      	itet	ne
 8008084:	6063      	strne	r3, [r4, #4]
 8008086:	6013      	streq	r3, [r2, #0]
 8008088:	460c      	movne	r4, r1
 800808a:	e7eb      	b.n	8008064 <_malloc_r+0x64>
 800808c:	460c      	mov	r4, r1
 800808e:	6849      	ldr	r1, [r1, #4]
 8008090:	e7cc      	b.n	800802c <_malloc_r+0x2c>
 8008092:	1cc4      	adds	r4, r0, #3
 8008094:	f024 0403 	bic.w	r4, r4, #3
 8008098:	42a0      	cmp	r0, r4
 800809a:	d005      	beq.n	80080a8 <_malloc_r+0xa8>
 800809c:	1a21      	subs	r1, r4, r0
 800809e:	4630      	mov	r0, r6
 80080a0:	f000 f808 	bl	80080b4 <_sbrk_r>
 80080a4:	3001      	adds	r0, #1
 80080a6:	d0cf      	beq.n	8008048 <_malloc_r+0x48>
 80080a8:	6025      	str	r5, [r4, #0]
 80080aa:	e7db      	b.n	8008064 <_malloc_r+0x64>
 80080ac:	200000b8 	.word	0x200000b8
 80080b0:	200000bc 	.word	0x200000bc

080080b4 <_sbrk_r>:
 80080b4:	b538      	push	{r3, r4, r5, lr}
 80080b6:	4c06      	ldr	r4, [pc, #24]	; (80080d0 <_sbrk_r+0x1c>)
 80080b8:	2300      	movs	r3, #0
 80080ba:	4605      	mov	r5, r0
 80080bc:	4608      	mov	r0, r1
 80080be:	6023      	str	r3, [r4, #0]
 80080c0:	f7f8 ff60 	bl	8000f84 <_sbrk>
 80080c4:	1c43      	adds	r3, r0, #1
 80080c6:	d102      	bne.n	80080ce <_sbrk_r+0x1a>
 80080c8:	6823      	ldr	r3, [r4, #0]
 80080ca:	b103      	cbz	r3, 80080ce <_sbrk_r+0x1a>
 80080cc:	602b      	str	r3, [r5, #0]
 80080ce:	bd38      	pop	{r3, r4, r5, pc}
 80080d0:	2000089c 	.word	0x2000089c

080080d4 <__malloc_lock>:
 80080d4:	4770      	bx	lr

080080d6 <__malloc_unlock>:
 80080d6:	4770      	bx	lr

080080d8 <_init>:
 80080d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080da:	bf00      	nop
 80080dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080de:	bc08      	pop	{r3}
 80080e0:	469e      	mov	lr, r3
 80080e2:	4770      	bx	lr

080080e4 <_fini>:
 80080e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080e6:	bf00      	nop
 80080e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080ea:	bc08      	pop	{r3}
 80080ec:	469e      	mov	lr, r3
 80080ee:	4770      	bx	lr
